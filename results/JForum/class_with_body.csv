net.jforum.core.SessionManagerTestCase,"public class SessionManagerTestCase {
	
	@Mock private JForumConfig config;
	@Mock private SessionRepository sessionRepository;
	@Mock private UserRepository userRepository;
	
	@Mock private HttpServletRequest request;
	@Mock private HttpServletResponse response;
	@Mock private HttpSession httpSession;
	
	@InjectMocks private SessionManager manager;
	
	Cookie[] goodCookie;

	@Before
	public void setup() {
		goodCookie = new Cookie[] {
			new Cookie(""cookieNameData"", ""2""),
			new Cookie(""cookieUserHash"", MD5.hash(""123"")),
			new Cookie(""cookieAutoLogin"", ""1"")
		};
		
		
		when(config.getInt(ConfigKeys.ANONYMOUS_USER_ID)).thenReturn(1);
		when(config.getValue(ConfigKeys.ANONYMOUS_USER_ID)).thenReturn(""1"");
		when(config.getValue(ConfigKeys.COOKIE_USER_ID)).thenReturn(""cookieNameData"");
		when(config.getValue(ConfigKeys.COOKIE_USER_HASH)).thenReturn(""cookieUserHash"");
		when(config.getValue(ConfigKeys.COOKIE_AUTO_LOGIN)).thenReturn(""cookieAutoLogin"");
		when(config.getValue(ConfigKeys.AUTHENTICATION_TYPE)).thenReturn(""x"");
		when(request.getSession()).thenReturn(httpSession);
	}
	
	@After
	public void tearDown() {
		// FIXME: that shouldn't be needed...
		manager.reinitialiseAllSessions();
	}
	
	@Test
	public void loginAfterTimeoutShouldFetchFromSessionRepositoryExpectLastVisitCorrect() {
		UserSession us = this.newUserSession(""123"");
		us.getUser().setId(2);
		us.setCreationTime(1);
		us.setLastAccessedTime(2);
		us.setLastVisit(3);
		
		Session session = new Session();
		session.setLastVisit(new Date(7));
		
		when(sessionRepository.get(2)).thenReturn(session);
		
		manager.add(us);
		
		assertEquals(7, us.getLastVisit());
	}

	@Test
	public void loginBackBeforeExpireExpectLastVisitCorrect() {
		UserSession us = this.newUserSession(""123""); us.getUser().setId(2);
		us.setCreationTime(1); us.setLastVisit(9);

		manager.add(us);
		assertEquals(1, manager.getTotalUsers());

		UserSession us2 = this.newUserSession(""456""); us2.getUser().setId(2);
		us2.setCreationTime(1); us2.setLastVisit(5);

		manager.add(us2);
		
		assertEquals(9, us2.getLastVisit());
		assertEquals(1, manager.getTotalUsers());
	}

	@Test
	public void storeSessionNotRegisteredShouldIgnore() {
		manager.storeSession(""invalid"");
	}

	@Test
	public void storeSessionExpectSuccess() {
		when(httpSession.getId()).thenReturn(""123"");
	
		UserSession us = new UserSession();
		us.setSessionId(""123"");
		us.setRequest(request);
		us.setResponse(response);
		us.getUser().setId(2);

		manager.add(us);
		manager.storeSession(""123"");
		
		verify(sessionRepository).add(notNull(Session.class));
	}

	@Test
	public void storeSessionIsAnonymousShouldIgnore() {
		when(httpSession.getId()).thenReturn(""123"");
	
		UserSession us = new UserSession();
		us.setSessionId(""123"");
		us.getUser().setId(1);

		manager.add(us);
		manager.storeSession(""123"");
	}

	@Test
	public void autoLoginAllInformationIsGoodShouldAccept() {
		commonAutoLoginMockAction();
		User user = new User();
		user.setId(2);
		user.setSecurityHash(""123"");
		
		UserSession userSession = new UserSession();
		userSession.setRequest(request);
		userSession.setResponse(response);

		when(request.getCookies()).thenReturn(goodCookie);
		when(userRepository.get(2)).thenReturn(user);
		
		manager.refreshSession(userSession);

		verify(httpSession).setAttribute(ConfigKeys.LOGGED, ""1"");
	}

	@Test
	public void autoLoginValidUserInvalidSecurityHashShouldDeny() {
		this.commonAutoLoginMockAction();
		User user = new User();
		user.setId(2);
		user.setSecurityHash(""abc"");

		UserSession userSession = new UserSession();
		userSession.setRequest(request);
		userSession.setResponse(response);

		when(request.getCookies()).thenReturn(goodCookie);
		when(userRepository.get(2)).thenReturn(user);
		when(userRepository.get(1)).thenReturn(new User());
		
		manager.refreshSession(userSession);
	}

	@Test
	public void autoLoginValidUserEmptySecurityHashShouldDeny() {
		this.commonAutoLoginMockAction();
		User user = new User();
		user.setId(2);
		user.setSecurityHash(null);
		
		UserSession userSession = new UserSession();
		userSession.setRequest(request);
		userSession.setResponse(response);

		when(request.getCookies()).thenReturn(goodCookie);
		when(userRepository.get(2)).thenReturn(user);
		when(userRepository.get(1)).thenReturn(new User());

		manager.refreshSession(userSession);
	}

	@Test
	public void autoLoginValidUserHasDeletedFlagShouldDeny() {
		this.commonAutoLoginMockAction();
		User user = new User();
		user.setId(2);
		user.setDeleted(true);
		
		when(request.getCookies()).thenReturn(goodCookie);
		when(userRepository.get(2)).thenReturn(user);
		when(userRepository.get(1)).thenReturn(new User());
		
		UserSession userSession = new UserSession();
		userSession.setRequest(request);
		userSession.setResponse(response);

		manager.refreshSession(userSession);
	}

	@Test
	public void autoLoginValidUserNotfoundInRepositoryShouldDeny() {
		this.commonAutoLoginMockAction();

		UserSession userSession = new UserSession();
		userSession.setRequest(request);
		userSession.setResponse(response);
		
		when(request.getCookies()).thenReturn(goodCookie);
		when(userRepository.get(2)).thenReturn(null);
		when(userRepository.get(1)).thenReturn(new User());
		
		manager.refreshSession(userSession);
	}

	@Test
	public void autoLoginValidUserCookieValueNot1ShouldDeny() {
		this.commonAutoLoginMockAction();
		
		Cookie[] cookies = new Cookie[] {
			new Cookie(""cookieNameData"", ""2""),
			new Cookie(""cookieUserHash"", ""a""),
			new Cookie(""cookieAutoLogin"", ""0"")
		};
	
		when(request.getCookies()).thenReturn(cookies);
		when(userRepository.get(1)).thenReturn(new User());
		
		UserSession userSession = new UserSession();
		userSession.setRequest(request);
		userSession.setResponse(response);

		manager.refreshSession(userSession);
	}

	@Test
	public void autoLoginAnonymousUserShouldDeny() {
		this.commonAutoLoginMockAction();

		Cookie[] cookies = new Cookie[] {
			new Cookie(""cookieNameData"", ""1""),
			new Cookie(""cookieUserHash"", ""a""),
			new Cookie(""cookieAutoLogin"", ""1"")
		};
		when(request.getCookies()).thenReturn(cookies);
		when(userRepository.get(1)).thenReturn(new User());
		
		UserSession userSession = new UserSession();
		userSession.setRequest(request);
		userSession.setResponse(response);

		manager.refreshSession(userSession);
	}

	@Test
	public void autoLoginDoestNotHaveCookiesShouldDeny() {
		this.commonAutoLoginMockAction();
		UserSession userSession = new UserSession();
		userSession.setRequest(request);
		userSession.setResponse(response);
		
		when(userRepository.get(1)).thenReturn(new User());
		
		manager.refreshSession(userSession);
	}

	@Test
	public void refreshExistingSessionShouldFetchUserAndRoleManager() {
		User user = new User();
		user.setId(1);
		UserSession us = this.newUserSession(""123"");
		us.setRequest(request);
		us.setResponse(response);
		us.setUser(user);
		
		when(httpSession.getId()).thenReturn(""123"");
		when(userRepository.get(user.getId())).thenReturn(user);
		
		manager.add(us);
		manager.refreshSession(us);
		
		assertNotNull(us.getRoleManager());
	}

	@Test
	public void refreshSessionIsNewShouldCreateAutoLoginDisabledUsingAnonymousUser() {
		User anonymousUser = new User();
		anonymousUser.setId(1);
		UserSession userSession = new UserSession();
		userSession.setRequest(request);
		userSession.setResponse(response);

		when(httpSession.getId()).thenReturn(""123"");
		when(config.getBoolean(ConfigKeys.AUTO_LOGIN_ENABLED)).thenReturn(false);
		when(userRepository.get(1)).thenReturn(anonymousUser);
		when(config.getValue(ConfigKeys.SSO_LOGOUT)).thenReturn(""x"");
		
		UserSession us = manager.refreshSession(userSession);
		
		assertNotNull(us);
		assertEquals(anonymousUser, us.getUser());
		assertNotNull(us.getRoleManager());
		assertEquals(""123"", us.getSessionId());
		
		verify(request).setAttribute(""sso"", false);
		verify(request).setAttribute(""ssoLogout"", ""x"");
	}

	@Test
	public void isUserInSessionExpectNull() {
		assertNull(manager.isUserInSession(10));
	}

	@Test
	public void isUserInSessionExpectMatch() {
		UserSession us1 = this.newUserSession(""1"");
		us1.getUser().setId(2);
		
		manager.add(us1);
		
		UserSession expected = manager.isUserInSession(2);
		
		assertNotNull(expected);
		assertEquals(""1"", expected.getSessionId());
	}

	@Test
	public void getUserSessionShouldAlwaysFind() {
		UserSession us1 = this.newUserSession(""1"");
		us1.getUser().setId(2);
		manager.add(us1);
		UserSession us2 = this.newUserSession(""2"");
		us2.getUser().setId(3);
		manager.add(us2);
		UserSession us3 = this.newUserSession(""3"");
		manager.add(us3);

		assertNotNull(manager.getUserSession(""1""));
		assertNotNull(manager.getUserSession(""2""));
		assertNotNull(manager.getUserSession(""3""));
		assertNull(manager.getUserSession(""4""));
	}

	@Test
	public void getLoggedSessions() {
		UserSession us1 = this.newUserSession(""1"");
		us1.getUser().setId(2);
		manager.add(us1);
		UserSession us2 = this.newUserSession(""2"");
		us2.getUser().setId(3);
		manager.add(us2);
		UserSession us3 = this.newUserSession(""3"");
		manager.add(us3);

		Collection<UserSession> sessions = manager.getLoggedSessions();
		
		assertTrue(sessions.contains(us1));
		assertTrue(sessions.contains(us2));
		assertFalse(sessions.contains(us3));
	}

	@Test
	public void getAllSessions() {
		UserSession us1 = this.newUserSession(""1"");
		manager.add(us1);
		UserSession us2 = this.newUserSession(""2"");
		manager.add(us2);

		List<UserSession> sessions = manager.getAllSessions();
		
		assertEquals(2, sessions.size());
		assertTrue(sessions.contains(us1));
		assertTrue(sessions.contains(us2));
	}

	@Test
	public void getTotalAnonymousUsers() {
		manager.add(this.newUserSession(""1""));
		manager.add(this.newUserSession(""2""));
		manager.add(this.newUserSession(""3""));

		assertEquals(3, manager.getTotalAnonymousUsers());
		assertEquals(0, manager.getTotalLoggedUsers());
	}

	@Test
	public void getTotalLoggedUsers() {
		UserSession us1 = this.newUserSession(""1"");
		us1.getUser().setId(3);
		manager.add(us1);
		UserSession us2 = this.newUserSession(""2"");
		us2.getUser().setId(4);
		
		manager.add(us2);

		assertEquals(2, manager.getTotalLoggedUsers());
		assertEquals(0, manager.getTotalAnonymousUsers());
	}

	@Test
	public void getTotalUsers() {
		manager.add(this.newUserSession(""1""));
		manager.add(this.newUserSession(""2""));
		UserSession us3 = this.newUserSession(""3"");
		us3.getUser().setId(3);
		manager.add(us3);

		assertEquals(2, manager.getTotalAnonymousUsers());
		assertEquals(1, manager.getTotalLoggedUsers());
		assertEquals(3, manager.getTotalUsers());
	}

	@Test
	public void removeAnonymousUser() {
		UserSession us = this.newUserSession(""1"");
		manager.add(us);

		manager.remove(us.getSessionId());
		
		assertEquals(0, manager.getTotalAnonymousUsers());
		assertEquals(0, manager.getTotalLoggedUsers());
	}

	@Test
	public void removeLoggedUser() {
		UserSession us = this.newUserSession(""1"");
		us.getUser().setId(2);
		manager.add(us);
		assertEquals(1, manager.getTotalLoggedUsers());

		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""1"");
		
		manager.remove(us.getSessionId());
		
		assertEquals(0, manager.getTotalLoggedUsers());
		assertEquals(0, manager.getTotalAnonymousUsers());
		
	}

	@Test
	public void addDuplicatedSessionIdShouldReplace() {
		// First session
		UserSession session1 = this.newUserSession(""1"");
		session1.getUser().setUsername(""user1"");
		
		manager.add(session1);
		
		assertEquals(1, manager.getTotalAnonymousUsers());
		assertEquals(""user1"", manager.getUserSession(""1"").getUser().getUsername());

		// Duplicated session
		UserSession session2 = this.newUserSession(""1"");
		session2.getUser().setUsername(""user2"");
		
		manager.add(session2);
		
		assertEquals(1, manager.getTotalAnonymousUsers());
		assertEquals(""user2"", manager.getUserSession(""1"").getUser().getUsername());
	}

	@Test
	public void addModeratorShouldIncrementTotalModeratorsOnline() {
		UserSession us = this.newUserSession(""1"");
		Group g = new Group();
		Role role = new Role(); role.setName(SecurityConstants.MODERATOR);
		g.addRole(role);
		us.getUser().addGroup(g);
		us.getUser().setId(2);

		assertFalse(manager.isModeratorOnline());

		manager.add(us);

		assertTrue(manager.isModeratorOnline());
	}

	@Test
	public void removeModeratorShouldDecrementModeratorsOnline() {
		UserSession us = this.newUserSession(""1"");
		Group g = new Group();
		Role role = new Role(); role.setName(SecurityConstants.MODERATOR);
		g.addRole(role);
		us.getUser().addGroup(g);
		us.getUser().setId(2);

		RoleManager roleManager = new RoleManager(); roleManager.setGroups(Arrays.asList(g));
		us.setRoleManager(roleManager);

		manager.add(us);
		assertTrue(manager.isModeratorOnline());

		manager.remove(us.getSessionId());
		assertFalse(manager.isModeratorOnline());
	}

	@Test
	public void addBotShouldIgnore() {
		UserSession us = mock(UserSession.class);
		when(us.isBot()).thenReturn(true);
		when(us.getSessionId()).thenReturn(""123"");
		
		assertEquals(0, manager.getTotalUsers());
		manager.add(us);
		assertEquals(0, manager.getTotalUsers());
	}

	@Test
	public void addLoggedUser() {
		UserSession us = this.newUserSession(""1"");
		us.getUser().setId(2);
		manager.add(us);
		assertEquals(1, manager.getTotalLoggedUsers());
	}

	@Test
	public void addAnonymousUser() {
		UserSession us = this.newUserSession(""1"");
		manager.add(us);
		assertEquals(1, manager.getTotalAnonymousUsers());
	}

	@Test(expected = ForumException.class)
	public void addUsingEmptySessionIdExpectException() {
		manager.add(this.newUserSession(""""));
	}

	@Test(expected = ForumException.class)
	public void addUsingNullSessionIdExpectException() {
		manager.add(this.newUserSession(null));
	}

	private void commonAutoLoginMockAction() {
		when(httpSession.getId()).thenReturn(""123"");
		when(config.getBoolean(ConfigKeys.AUTO_LOGIN_ENABLED)).thenReturn(true);
	}

	private UserSession newUserSession(String sessionId) {
		UserSession us = new UserSession();

		us.setSessionId(sessionId);
		us.getUser().setId(1);

		return us;
	}
}"
net.jforum.core.hibernate.TopicWatchDAOTestCase,"public class TopicWatchDAOTestCase extends AbstractDAOTestCase<TopicWatch> {
	@Test
	public void getUsersWaitingNotificationNoWatchExpectEmptyList() {
		TopicWatchRepository dao = this.newDao();
		Topic topic = new Topic(); topic.setId(13);
		List<User> users = dao.getUsersWaitingNotification(topic);
		Assert.assertEquals(0, users.size());
	}

	@Test
	public void getUsersWaitingNotificationTwoWatchesOneReadExpectOneResultShouldUpdate() {
		TopicWatchRepository dao = this.newDao();

		TopicWatch watch = this.newWatch(1, 1); watch.markAsRead();
		this.insert(watch, dao);
		this.insert(this.newWatch(1, 2), dao);

		Topic topic = new Topic(); topic.setId(1);

		List<User> users = dao.getUsersWaitingNotification(topic);
		Assert.assertEquals(1, users.size());
		Assert.assertEquals(1, users.get(0).getId());

		// Check the update
		users = dao.getUsersWaitingNotification(topic);
		Assert.assertEquals(0, users.size());
	}

	@Test
	public void removeSubscriptionByTopic() {
		TopicWatchRepository dao = this.newDao();

		this.insert(this.newWatch(1, 1), dao);

		Topic topic = new Topic(); topic.setId(1);
		User user = new User(); user.setId(1);

		dao.removeSubscription(topic);

		Assert.assertNull(dao.getSubscription(topic, user));
	}

	@Test
	public void removeSubscriptionByUser() {
		TopicWatchRepository dao = this.newDao();

		this.insert(this.newWatch(1, 1), dao);
		this.insert(this.newWatch(1, 2), dao);

		Topic topic = new Topic(); topic.setId(1);
		User user = new User(); user.setId(1);

		dao.removeSubscription(topic, user);

		Assert.assertNull(dao.getSubscription(topic, user));

		user.setId(2);
		Assert.assertNotNull(dao.getSubscription(topic, user));
	}

	@Test
	public void isUserSubscribedExpectFalse() {
		TopicWatchRepository dao = this.newDao();

		Topic topic = new Topic(); topic.setId(1);
		User user = new User(); user.setId(1);

		Assert.assertNull(dao.getSubscription(topic, user));
	}

	@Test
	public void isUserSubscribedExpectTrue() {
		TopicWatchRepository dao = this.newDao();

		this.insert(this.newWatch(1, 1), dao);

		Topic topic = new Topic(); topic.setId(1);
		User user = new User(); user.setId(1);

		Assert.assertNotNull(dao.getSubscription(topic, user));
	}

	@Test
	public void delete() {
		TopicWatchRepository dao = this.newDao();

		TopicWatch watch = this.newWatch(1, 1);
		this.insert(watch, dao);

		TopicWatch loaded = dao.get(watch.getId());
		this.delete(loaded, dao);

		Assert.assertNull(dao.get(watch.getId()));
	}

	@Test
	public void insert() {
		TopicWatchRepository dao = this.newDao();

		TopicWatch watch = this.newWatch(1, 1);
		this.insert(watch, dao);

		Assert.assertTrue(watch.getId() > 0);

		TopicWatch loaded = dao.get(watch.getId());
		Assert.assertNotNull(loaded);
		Assert.assertEquals(1, loaded.getTopic().getId());
		Assert.assertEquals(1, loaded.getUser().getId());
	}

	@Before
	public void setup() {
		User user = new User(); user.setUsername(""u1"");
		User user2 = new User(); user2.setUsername(""u2"");
		new UserRepository(session()).add(user);
		new UserRepository(session()).add(user2);

		Topic topic = new Topic(); topic.setSubject(""t1""); topic.setFirstPost(null); topic.setLastPost(null); topic.setForum(null);
		new TopicRepository(session()).add(topic);
	}

	private TopicWatch newWatch(int topicId, int userId) {
		TopicWatch watch = new TopicWatch();

		Topic topic = new Topic(); topic.setId(topicId);
		User user = new User(); user.setId(userId);
		watch.setTopic(topic);
		watch.setUser(user);

		return watch;
	}

	private TopicWatchRepository newDao() {
		return new TopicWatchRepository(session());
	}
}"
net.jforum.core.hibernate.PostReportDAOTestCase,"public class PostReportDAOTestCase extends AbstractDAOTestCase<PostReport> {
	@Test
	@SuppressWarnings(""deprecation"")
	public void countPendingReportsShouldFilterByForum() {
		new JDBCLoader(this.session()).run(""/postreport/countPendingReports.sql"");
		PostReportRepository dao = this.newDAO();
		assertEquals(1, dao.countPendingReports(1));
	}

	@Test
	@SuppressWarnings(""deprecation"")
	public void countPendingReportsWithoutFilteringShouldReturnAllResultsExceptResolved() {
		new JDBCLoader(this.session()).run(""/postreport/countPendingReports.sql"");
		PostReportRepository dao = this.newDAO();
		assertEquals(2, dao.countPendingReports());
	}

	@Test
	@SuppressWarnings(""deprecation"")
	public void getAllShouldFilterByForumExpectOneResult() {
		new JDBCLoader(this.session()).run(""/postreport/getAll.sql"");
		PostReport report = this.createPostReport(1, 1, PostReportStatus.UNRESOLVED);
		this.createPostReport(2, 2, PostReportStatus.UNRESOLVED);

		List<PostReport> reports = this.getAll(1, 1);

		this.assertPostReport(report, reports.get(0));
	}

	@Test
	@SuppressWarnings(""deprecation"")
	public void getAllResolvedReports() {
		new JDBCLoader(this.session()).run(""/postreport/getAll.sql"");
		this.createPostReport(1, 1, PostReportStatus.UNRESOLVED);
		PostReport report1 = this.createPostReport(2, 2, PostReportStatus.RESOLVED);
		PostReport report2 = this.createPostReport(2, 2, PostReportStatus.RESOLVED);

		PostReportRepository dao = this.newDAO();
		List<PostReport> reports = dao.getAll(PostReportStatus.RESOLVED, null);

		assertEquals(2, reports.size());

		this.assertPostReport(report1, reports.get(0));
		this.assertPostReport(report2, reports.get(1));
	}

	@Test
	@SuppressWarnings(""deprecation"")
	public void getAllWithoutFilterShouldReturnAllReults() {
		new JDBCLoader(this.session()).run(""/postreport/getAll.sql"");
		PostReport report = this.createPostReport(1, 1, PostReportStatus.UNRESOLVED);
		PostReport report2 = this.createPostReport(1, 2, PostReportStatus.UNRESOLVED);

		List<PostReport> reports = this.getAll(2, null);

		this.assertPostReport(report, reports.get(0));
		this.assertPostReport(report2, reports.get(1));
	}

	private List<PostReport> getAll(int expectedCount, int... forumIds) {
		PostReportRepository dao = this.newDAO();

		List<PostReport> reports = dao.getAll(PostReportStatus.UNRESOLVED, forumIds);
		assertEquals(expectedCount, reports.size());

		return reports;
	}

	private void assertPostReport(PostReport report, PostReport report2) {
		assertEquals(report.getPost().getId(), report2.getPost().getId());
		assertEquals(report.getPost().getTopic().getId(), report2.getPost().getTopic().getId());
		assertEquals(report.getDate(), report2.getDate());
		assertEquals(report.getDescription(), report2.getDescription());
		assertEquals(report.getPost().getSubject(), report2.getPost().getSubject());
		assertEquals(report.getPost().getUser().getId(), report2.getPost().getUser().getId());
		assertEquals(report.getUser().getId(), report2.getUser().getId());
	}

	private PostReport createPostReport(int forumId, int postId, PostReportStatus status) {
		PostReport report = new PostReport();

		report.setDate(new Date());
		report.setDescription(""description"");
		report.setPost(new Post());
		report.getPost().setId(postId);
		report.getPost().setForum(new Forum());
		report.getPost().getForum().setId(forumId);
		report.getPost().setTopic(new Topic());
		report.getPost().getTopic().setId(1);
		report.getPost().setUser(new User());
		report.getPost().getUser().setId(1);
		report.setUser(new User());
		report.getUser().setId(1);
		report.setStatus(status);

		PostReportRepository dao = this.newDAO();
		this.insert(report, dao);

		return report;
	}

	private PostReportRepository newDAO() {
		return new PostReportRepository(session());
	}
}"
net.jforum.core.hibernate.BadWordDAOTestCase,"public class BadWordDAOTestCase extends AbstractDAOTestCase<BadWord> {
	@Test
	public void getAll() {
		BadWord w1 = new BadWord(); w1.setWord(""w1"");
		BadWord w2 = new BadWord(); w2.setWord(""w2"");

		BadWordRepository dao = this.newDao();

		this.insert(w1, dao);
		this.insert(w2, dao);

		List<BadWord> words = dao.getAll();
		assertEquals(2, words.size());
	}

	private BadWordRepository newDao() {
		return new BadWordRepository(session());
	}
}"
net.jforum.core.hibernate.BanlistDAOTestCase,"public class BanlistDAOTestCase extends AbstractDAOTestCase<Banlist> {
	@Test
	public void getAllBanlistsExpectEmptyList() {
		BanlistRepository dao = this.newDao();
		List<Banlist> banlists = dao.getAllBanlists();
		Assert.assertNotNull(banlists);
		Assert.assertEquals(0, banlists.size());
	}

	@Test
	public void getAllBanlistsExpectTwoRecords() {
		BanlistRepository dao = this.newDao();

		Banlist b1 = new Banlist(); b1.setEmail(""email@1""); this.insert(b1, dao);
		Banlist b2 = new Banlist(); b2.setUserId(3); this.insert(b2, dao);

		List<Banlist> banlists = dao.getAllBanlists();

		Assert.assertEquals(2, banlists.size());
		Assert.assertEquals(""email@1"", banlists.get(0).getEmail());
		Assert.assertEquals(3, banlists.get(1).getUserId());
	}

	private BanlistRepository newDao() {
		return new BanlistRepository(session());
	}
}"
net.jforum.core.hibernate.SmilieDAOTestCase,"public class SmilieDAOTestCase extends AbstractDAOTestCase<Smilie> {
	@Test
	public void getAllSmiliesExpectTwoResults() {
		SmilieRepository dao = this.newDao();

		this.insert(this.createSmilie(""[b1]"", ""diskname1""), dao);
		this.insert(this.createSmilie(""[b1]"", ""diskname2""), dao);

		List<Smilie> smilies = dao.getAllSmilies();

		Assert.assertNotNull(smilies);
		Assert.assertEquals(2, smilies.size());
	}

	@Test
	public void insert() {
		SmilieRepository dao = this.newDao();
		Smilie s = this.createSmilie(""x"", ""diskname"");
		this.insert(s, dao);

		Assert.assertTrue(s.getId() > 0);

		Smilie loaded = dao.get(s.getId());

		Assert.assertNotNull(loaded);
		Assert.assertEquals(""x"", loaded.getCode());
		Assert.assertEquals(""diskname"", loaded.getDiskName());
	}

	@Test
	public void getAllSmiliesExpectEmtpyList() {
		SmilieRepository dao = this.newDao();
		Assert.assertEquals(0, dao.getAllSmilies().size());
	}

	private SmilieRepository newDao() {
		return new SmilieRepository(session());
	}

	private Smilie createSmilie(String code, String diskName) {
		Smilie s = new Smilie();

		s.setCode(code);
		s.setDiskName(diskName);

		return s;
	}
}"
net.jforum.core.hibernate.UserDAOTestCase,"public class UserDAOTestCase extends AbstractDAOTestCase<User> {
	@Test
	@SuppressWarnings(""deprecation"")
	@Ignore(""seam to be a problem with hsqldb commit, work fine with other connector"")
	public void changeAllowAvatarState() {
		new JDBCLoader(this.session()).run(""/userdao/changeAllowAvatarState.sql"");

		GroupRepository groupDao = this.newGroupDao();
		UserRepository dao = this.newDao();

		Group group1 = groupDao.get(1);
		Group group2 = groupDao.get(2);

		List<User> users = dao.getAllUsers(0, 10, Arrays.asList(group1));
		Assert.assertFalse(users.get(0).isAvatarEnabled());
		Assert.assertFalse(users.get(1).isAvatarEnabled());

		dao.changeAllowAvatarState(true, group1);
		this.commit();
		this.beginTransaction();

		users = dao.getAllUsers(0, 10, Arrays.asList(group1));
		Assert.assertEquals(2, users.size());
		Assert.assertTrue(users.get(0).isAvatarEnabled());
		Assert.assertTrue(users.get(1).isAvatarEnabled());

		Assert.assertFalse(dao.getAllUsers(0, 10, Arrays.asList(group2)).get(0).isAvatarEnabled());
	}

	@Test
	@SuppressWarnings(""deprecation"")
	public void findByUsernameFilteringByGroup() {
		new JDBCLoader(this.session()).run(""/userdao/findByUsernameFilteringByGroup.sql"");

		UserRepository dao = this.newDao();
		User user = dao.get(1);

		List<User> users = dao.findByUserName(""user"", user.getGroups());
		Assert.assertEquals(2, users.size());

		Assert.assertEquals(""USER1"", users.get(0).getUsername());
		Assert.assertEquals(""user2"", users.get(1).getUsername());
	}

	@Test
	@SuppressWarnings(""deprecation"")
	public void getAllUsersFilteringByGroup() {
		new JDBCLoader(this.session()).run(""/userdao/getAllUsersFilteringByGroup.sql"");

		UserRepository dao = this.newDao();
		User user = dao.get(1);

		List<User> users = dao.getAllUsers(0, 10, user.getGroups());
		Assert.assertEquals(2, users.size());

		Assert.assertEquals(""u1"", users.get(0).getUsername());
		Assert.assertEquals(""u2"", users.get(1).getUsername());
	}

	@Test
	public void getByEmailShouldFindAMatch() {
		User user = new User();
		user.setUsername(""user1"");
		user.setEmail(""email1"");

		UserRepository dao = this.newDao();
		this.insert(user, dao);

		user = dao.getByEmail(""email1"");
		Assert.assertNotNull(user);
		Assert.assertEquals(""user1"", user.getUsername());
	}

	@Test
	public void validateLostPasswordHashUsingBadDataExpectFail() {
		UserRepository dao = this.newDao();
		User user = dao.validateLostPasswordHash(""bad username"", ""bad hash"");
		Assert.assertNull(user);
	}

	@Test
	public void validateLostPasswordHashUsingGoodDataExpectSuccess() {
		UserRepository dao = this.newDao();

		User user = new User();
		user.setUsername(""rafael"");
		user.setActivationKey(""act key 1"");

		this.insert(user, dao);

		user = dao.validateLostPasswordHash(""rafael"", ""act key 1"");
		Assert.assertNotNull(user);
	}

	@Test
	@SuppressWarnings(""deprecation"")
	public void getTotalPostsExpectTwoResults() {
		new JDBCLoader(session())
			.run(""/userdao/getTotalPostsExpectTwoResults.sql"");
		User user = new User(); user.setId(1);
		int total = this.newDao().getTotalPosts(user);
		Assert.assertEquals(2, total);
	}

	@Test
	public void isUsernaneAvailableTestingUsernameExpectFalse() {
		User user = new User(); user.setUsername(""username1""); user.setEmail(""email1"");
		UserRepository dao = this.newDao();
		this.insert(user, dao);
		Assert.assertFalse(dao.isUsernameAvailable(""UserNaMe1"", ""email2""));
	}

	@Test
	public void isUsernaneAvailableTestingEmailExpectFalse() {
		User user = new User(); user.setUsername(""username1""); user.setEmail(""email1"");
		UserRepository dao = this.newDao();
		this.insert(user, dao);
		Assert.assertFalse(dao.isUsernameAvailable(""UserNaMe2"", ""eMAil1""));
	}

	@Test
	public void isUsernaneAvailableExpectTrue() {
		User user = new User(); user.setUsername(""username1""); user.setEmail(""email1"");
		UserRepository dao = this.newDao();
		this.insert(user, dao);
		Assert.assertTrue(dao.isUsernameAvailable(""UserNaMe2"", ""email2""));
	}

	@Test
	@SuppressWarnings(""deprecation"")
	public void getTotalUnreadPrivateMessages() {
		new JDBCLoader(session())
			.run(""/userdao/getTotalUnreadPrivateMessages.sql"");
		User user = new User(); user.setId(1);
		Assert.assertEquals(1, this.newDao().getTotalUnreadPrivateMessages(user));
	}

	@Test
	public void findByUserNameExpectThreeResults() {
		User user1 = new User(); user1.setUsername(""Amy Winehouse"");
		User user2 = new User(); user2.setUsername(""John Amy"");
		User user3 = new User(); user3.setUsername(""Something With Amy inside"");
		User user4 = new User(); user4.setUsername(""another username"");

		UserRepository dao = this.newDao();

		this.insert(user1, dao);
		this.insert(user3, dao);
		this.insert(user4, dao);
		this.insert(user2, dao);

		List<User> users = dao.findByUserName(""amy"");
		Assert.assertEquals(3, users.size());
		Assert.assertEquals(""Amy Winehouse"", users.get(0).getUsername());
		Assert.assertEquals(""John Amy"", users.get(1).getUsername());
		Assert.assertEquals(""Something With Amy inside"", users.get(2).getUsername());
	}

	@Test
	public void userGroupsCascade() {
		User user = new User(); user.setUsername(""u1"");
		Group g = new Group(); g.setName(""g1"");
		this.newGroupDao().add(g);

		user.addGroup(g);

		UserRepository dao = this.newDao();
		this.insert(user, dao);

		user = dao.get(user.getId());
		Assert.assertEquals(1, user.getGroups().size());
	}

	@Test
	public void userGroupsCascadeCleanThenAddNewExpectDeletesAndInsertsOk() {
		User user = new User();
		user.setUsername(""u1"");

		Group g = new Group(); g.setName(""g1"");
		Group g2 = new Group(); g2.setName(""g2"");
		Group g3 = new Group(); g3.setName(""g3"");

		GroupRepository groupDao = this.newGroupDao();
		groupDao.add(g);
		groupDao.add(g2);
		groupDao.add(g3);

		this.commit();
		this.beginTransaction();

		user.addGroup(g);
		user.addGroup(g2);

		UserRepository dao = this.newDao();
		this.insert(user, dao);

		user = dao.get(user.getId());
		Assert.assertEquals(2, user.getGroups().size());
		Assert.assertTrue(user.getGroups().contains(g));
		Assert.assertTrue(user.getGroups().contains(g2));

		user.getGroups().remove(g);
		user.addGroup(g3);

		this.update(user, dao);

		user = dao.get(user.getId());
		Assert.assertEquals(2, user.getGroups().size());
		Assert.assertTrue(user.getGroups().contains(g2));
		Assert.assertTrue(user.getGroups().contains(g3));
	}

	@Test
	public void validateLoginUsingInvalidCredentialsExpectsInvalidLogin() {
		User user = new User();
		user.setUsername(""username1"");
		user.setPassword(""password1"");

		UserRepository dao = this.newDao();
		this.insert(user, dao);

		Assert.assertNull(dao.validateLogin(""a"", ""b""));
	}

	@Test
	public void validateLoginUsingGoodCredentialsExpectsSuccess() {
		User user = new User();
		user.setUsername(""username2"");
		user.setPassword(""password2"");

		UserRepository dao = this.newDao();
		this.insert(user, dao);

		Assert.assertNotNull(dao.validateLogin(""username2"", ""password2""));
	}

	@Test
	public void addExpectsSuccess() {
		User user = new User();
		user.setUsername(""u1"");
		user.setPassword(""pwd1"");
		user.setEmail(""email1"");

		UserRepository dao = this.newDao();

		this.insert(user, dao);

		Assert.assertTrue(user.getId() > 0);

		User loaded = dao.get(user.getId());
		Assert.assertEquals(user.getUsername(), loaded.getUsername());
		Assert.assertEquals(user.getPassword(), loaded.getPassword());
		Assert.assertEquals(user.getEmail(), loaded.getEmail());
	}

	@Test
	public void getByUsernameUsingInexistentValueExpectsNull() {
		UserRepository dao = this.newDao();
		Assert.assertNull(dao.getByUsername(""non existent username""));
	}

	@Test
	public void getByUsernameExpectsValidUser() {
		UserRepository dao = this.newDao();
		User u = new User(); u.setUsername(""usernameX""); this.insert(u, dao);
		User u2 = dao.getByUsername(""usernameX"");
		Assert.assertNotNull(u2);
		Assert.assertEquals(u.getUsername(), u2.getUsername());
	}

	@Test
	public void geTotalUsers() {
		UserRepository dao = this.newDao();
		User u1 = new User(); u1.setUsername(""u1""); this.insert(u1, dao);
		User u2 = new User(); u2.setUsername(""u1""); this.insert(u2, dao);
		User u3 = new User(); u3.setUsername(""u1""); this.insert(u3, dao);

		Assert.assertEquals(3, dao.getTotalUsers());
	}

	@Test
	@SuppressWarnings(""deprecation"")
	public void getLastRegisteredUser() {
		UserRepository dao = this.newDao();
		User u1 = new User(); u1.setUsername(""u1""); u1.setRegistrationDate(new GregorianCalendar(2008, 3, 19, 20, 03, 10).getTime()); this.insert(u1, dao);
		User u2 = new User(); u2.setUsername(""u2""); u2.setRegistrationDate(new GregorianCalendar(2008, 3, 5, 7, 19, 10).getTime()); this.insert(u2, dao);

		User lastRegisteredUser = dao.getLastRegisteredUser();

		Assert.assertNotNull(lastRegisteredUser);
		Assert.assertEquals(u1.getUsername(), lastRegisteredUser.getUsername());
		Assert.assertEquals(u1.getId(), lastRegisteredUser.getId());
	}

	@Test
	public void listExpectEmptyList() {
		UserRepository dao = this.newDao();
		Assert.assertEquals(0, dao.getAllUsers(0, 10).size());
	}

	@Test
	public void listExpectTwoRecords() {
		UserRepository dao = this.newDao();

		User u1 = new User(); u1.setUsername(""u1""); this.insert(u1, dao);
		User u2 = new User(); u1.setUsername(""u2""); this.insert(u2, dao);

		List<User> users = dao.getAllUsers(0, 10);

		Assert.assertEquals(2, users.size());
		Assert.assertTrue(users.contains(u1));
		Assert.assertTrue(users.contains(u2));
	}

	private UserRepository newDao() {
		return new UserRepository(session());
	}

	private GroupRepository newGroupDao() {
		return new GroupRepository(session());
	}
}"
net.jforum.core.hibernate.ForumDAOTestCase,"public class ForumDAOTestCase extends AbstractDAOTestCase<Forum> {
	@Test
	@SuppressWarnings(""deprecation"")
	public void moveTopics() {
		new JDBCLoader(session())
			.run(""/forumdao/moveTopics.sql"");

		ForumRepository dao = this.newForumDao();
		Forum toForum = dao.get(2);

		Assert.assertEquals(1, dao.getTotalTopics(toForum));
		Assert.assertEquals(1, dao.getTotalPosts(toForum));

		dao.moveTopics(toForum, 1);

		Assert.assertEquals(2, dao.getTotalTopics(toForum));
		Assert.assertEquals(2, dao.getTotalPosts(toForum));
	}

	@Test
	@SuppressWarnings(""deprecation"")
	public void getNewMessages() {
		new JDBCLoader(session())
			.run(""/forumdao/getNewMessages.sql"");

		Calendar from = Calendar.getInstance();
		from.set(2008, 5, 11, 14, 50);

		ForumRepository dao = this.newForumDao();
		PaginatedResult<Topic> messages = dao.getNewMessages(from.getTime(), 0, 3);

		Assert.assertEquals(3, messages.getResults().size());
		Assert.assertEquals(5, messages.getTotalRecords());
	}

	@Test
	@SuppressWarnings(""deprecation"")
	public void getModerators() {
		new JDBCLoader(session())
			.run(""/forumdao/getModerators.sql"");

		Forum forum = new Forum(); forum.setId(1);
		List<Group> moderators = this.newForumDao().getModerators(forum);

		Assert.assertEquals(2, moderators.size());
		Assert.assertTrue(moderators.contains(new Group() {/**
			 *
			 */
			private static final long serialVersionUID = 1L;

		{ setId(1); }}));
		Assert.assertTrue(moderators.contains(new Group() {/**
			 *
			 */
			private static final long serialVersionUID = 1L;

		{ setId(2); }}));
	}

	@Test
	@SuppressWarnings(""deprecation"")
	public void getLastPost() {
		new JDBCLoader(session())
			.run(""/topicdao/firstLastPost.sql"");

		ForumRepository dao = this.newForumDao();
		Forum f = new Forum(); f.setId(1);
		Post expectedFirst = new Post(); expectedFirst.setId(2);

		Assert.assertEquals(expectedFirst, dao.getLastPost(f));
	}

	@Test
	@SuppressWarnings(""deprecation"")
	public void getLastPostShouldIgnorePendingModerationPost() {
		new JDBCLoader(session())
			.run(""/forumdao/getLastPostShouldIgnorePendingModerationPost.sql"");

		ForumRepository dao = this.newForumDao();
		Forum forum = dao.get(1);
		Post expected = new Post(); expected.setId(2);
		Assert.assertEquals(expected, dao.getLastPost(forum));
	}

	@Test
	@SuppressWarnings(""deprecation"")
	public void getTopicsShouldIgnoreModeratedExpectThreeResults() {
		this.createGetTopicsPosts();

		new JDBCLoader(session())
			.run(""/forumdao/getTopicsShouldIgnoreModeratedExpectThreeResults.sql"");

		ForumRepository dao = this.newForumDao();
		Forum forum = dao.get(1);

		List<Topic> topics = dao.getTopics(forum, 0, 10);
		Assert.assertEquals(3, topics.size());

		Assert.assertEquals(""t1.3"", topics.get(0).getSubject());
		Assert.assertEquals(""t1.2"", topics.get(1).getSubject());
		Assert.assertEquals(""t1.1"", topics.get(2).getSubject());
	}

	@Test
	public void getTopicsPendingModerationExpectTwoResults() {
		this.createGetTopicsPosts();

		ForumRepository dao = this.newForumDao();
		Forum forum = dao.get(1);

		List<Topic> moderatedTopics = dao.getTopicsPendingModeration(forum);
		Assert.assertEquals(2, moderatedTopics.size());

		Assert.assertEquals(""t1.1"", moderatedTopics.get(0).getSubject());
		Assert.assertEquals(""t1.2"", moderatedTopics.get(1).getSubject());
		Assert.assertEquals(2, moderatedTopics.get(0).getPosts().size());
		Assert.assertEquals(1, moderatedTopics.get(1).getPosts().size());
	}

	@Test
	public void insertShouldIncrementDisplayOrder() {
		Forum f1 = this.newForum();
		Forum f2 = this.newForum();

		ForumRepository dao = this.newForumDao();

		this.insert(f1, dao);
		this.insert(f2, dao);

		Assert.assertEquals(1, f1.getDisplayOrder());
		Assert.assertEquals(2, f2.getDisplayOrder());
	}

	@Test
	public void getTotalMessage() {
		ForumRepository forumDao = this.newForumDao();
		PostRepository postDao = this.newPostDao();
		Post p = new Post(); p.setText(""x""); p.setSubject(""y"");
		postDao.add(p);
		Assert.assertEquals(1, forumDao.getTotalMessages());
	}

	@Test
	@SuppressWarnings(""deprecation"")
	public void getTotalPosts() {
		new JDBCLoader(session())
			.run(""/forumdao/getTotalPosts.sql"");

		ForumRepository dao = this.newForumDao();
		Forum forum = dao.get(1);

		int totalPosts = dao.getTotalPosts(forum);
		Assert.assertEquals(2, totalPosts);
	}

	@Test
	@SuppressWarnings(""deprecation"")
	public void getTopicsShouldFetchFromForumAndFromMovedIdExpectTwoResults() {
		new JDBCLoader(session())
			.run(""/forumdao/getTopicsShouldFetchFromForumAndFromMovedIdExpectTwoResults.sql"");

		ForumRepository dao = this.newForumDao();
		Forum forum = new Forum(); forum.setId(1);
		List<Topic> topics = dao.getTopics(forum, 0, 10);
		Assert.assertEquals(2, topics.size());
	}

	@Test
	@SuppressWarnings(""deprecation"")
	public void getTopicsShouldIgnoreMovedIdExpectOneResult() {
		new JDBCLoader(session())
			.run(""/forumdao/getTopicsShouldFetchFromForumAndFromMovedIdExpectTwoResults.sql"");

		final JForumConfig config = mock(JForumConfig.class);
		
		when(config.getBoolean(ConfigKeys.QUERY_IGNORE_TOPIC_MOVED)).thenReturn(true);
		
		ForumRepository dao = this.newForumDao();
		dao.setJforumConfig(config);
		Forum forum = new Forum(); forum.setId(1);
		List<Topic> topics = dao.getTopics(forum, 0, 10);
		Assert.assertEquals(1, topics.size());
	}

	@Test
	@SuppressWarnings(""deprecation"")
	public void getTotalTopicsShouldFetchOnlyNonModeratedExpectTwoResults() {
		new JDBCLoader(session())
			.run(""/forumdao/getTotalTopics.sql"");

		Forum forum = new Forum(this.newForumDao()); forum.setId(1);
		Assert.assertEquals(2, forum.getTotalTopics());
	}

	@Test
	public void insert() {
		ForumRepository dao = this.newForumDao();

		Forum f = newForum();

		this.insert(f, dao);

		Assert.assertTrue(f.getId() > 0);

		Forum loaded = dao.get(f.getId());

		Assert.assertEquals(""desc1"", loaded.getDescription());
		Assert.assertEquals(""forum1"", loaded.getName());
		Assert.assertEquals(false, loaded.isModerated());
		Assert.assertEquals(1, loaded.getDisplayOrder());
		Assert.assertNotNull(loaded.getCategory());
		Assert.assertEquals(f.getCategory().getId(), loaded.getCategory().getId());
		Assert.assertNull(f.getLastPost());
	}

	@Test
	public void update() {
		ForumRepository dao = this.newForumDao();
		Forum f = newForum();
		this.insert(f, dao);
		f = dao.get(f.getId());

		// We'll change the category as well
		Category c = new Category(); c.setName(""c2"");
		CategoryRepository categoryDao = new CategoryRepository(session());
		categoryDao.add(c);

		f.setName(""changed"");
		f.setDescription(""changed description"");
		f.setModerated(true);
		f.setDisplayOrder(6);
		f.setCategory(c);

		this.update(f, dao);

		Forum loaded = dao.get(f.getId());

		Assert.assertEquals(f.getName(), loaded.getName());
		Assert.assertEquals(f.getDescription(), loaded.getDescription());
		Assert.assertEquals(f.isModerated(), loaded.isModerated());
		Assert.assertEquals(f.getDisplayOrder(), loaded.getDisplayOrder());
		Assert.assertEquals(f.getCategory().getId(), loaded.getCategory().getId());
	}

	private Forum newForum() {
		Forum f = new Forum();

		f.setDescription(""desc1"");
		f.setModerated(false);
		f.setName(""forum1"");
		f.setDisplayOrder(1);

		// Create the category before creating the forum
		CategoryRepository categoryDao = new CategoryRepository(session());

		Category c = new Category();
		c.setName(""c1"");

		categoryDao.add(c);

		f.setCategory(c);

		return f;
	}

	private ForumRepository newForumDao() {
		return new ForumRepository(session());
	}

	private PostRepository newPostDao() {
		return new PostRepository(session());
	}

	@SuppressWarnings(""deprecation"")
	private void createGetTopicsPosts() {
		new JDBCLoader(session())
			.run(""/forumdao/getTopics.sql"");

		// Topic 1
		PostRepository postDao = this.newPostDao();
		Post p1 = new Post(); p1.setSubject(""p1.1""); p1.setTopic(new Topic() {/**
			 *
			 */
			private static final long serialVersionUID = 1L;

		{ setId(1); }}); p1.setModerate(false);
		Post p2 = new Post(); p2.setSubject(""p1.2""); p2.setTopic(new Topic() {/**
			 *
			 */
			private static final long serialVersionUID = 1L;

		{ setId(1); }}); p2.setModerate(true);
		Post p3 = new Post(); p3.setSubject(""p1.3""); p3.setTopic(new Topic() {/**
			 *
			 */
			private static final long serialVersionUID = 1L;

		{ setId(1); }}); p3.setModerate(true);

		postDao.add(p1); postDao.add(p2); postDao.add(p3);

		// Topic 2
		Post p4 = new Post(); p4.setSubject(""p2.1""); p4.setTopic(new Topic() {/**
			 *
			 */
			private static final long serialVersionUID = 1L;

		{ setId(2); }}); p4.setModerate(false);
		Post p5 = new Post(); p5.setSubject(""p2.2""); p5.setTopic(new Topic() {/**
			 *
			 */
			private static final long serialVersionUID = 1L;

		{ setId(2); }}); p5.setModerate(true);

		postDao.add(p4); postDao.add(p5);

		// Topic 3
		Post p6 = new Post(); p6.setSubject(""p3.1""); p6.setTopic(new Topic() {/**
			 *
			 */
			private static final long serialVersionUID = 1L;

		{ setId(3); }}); p6.setModerate(false);
		postDao.add(p6);

		this.commit();
		this.beginTransaction();
	}
}"
net.jforum.core.hibernate.AbstractDAOTestCase,"public abstract class AbstractDAOTestCase<T> {
	private Session session;
	private SessionFactory sessionFactory;

	/**
	 * Persists an entity.
	 * After inserting, the transaction will be commited and
	 * the session cleared.
	 * @param entity the entity to persist
	 * @param dao the dao to use
	 */
	protected void insert(T entity, HibernateGenericDAO<T> dao) {
		dao.add(entity);
		commit();
		beginTransaction();
	}

	/**
	 * Updates an entity.
	 * After updating, the transaction will be commited and
	 * the session cleared.
	 * @param entity the entity to update
	 * @param dao the dao to use
	 */
	protected void update(T entity, HibernateGenericDAO<T> dao) {
		dao.update(entity);
		commit();
		beginTransaction();
	}

	/**
	 * Deletes an entity
	 * @param entity the entity to delete
	 * @param dao the dao to use
	 */
	protected void delete(T entity, HibernateGenericDAO<T> dao) {
		dao.remove(entity);
		commit();
		beginTransaction();
	}

	protected Session session() {
		return session;
	}

	/**
	 * First commits the transaction
	 */
	protected void commit() {
		session.getTransaction().commit();
	}

	@Before
	public void setUp() throws Exception {
		Configuration config = new AnnotationConfiguration();
		config.configure(""/hibernate-tests.cfg.xml"");
		sessionFactory = config.buildSessionFactory();
		session = sessionFactory.openSession();
		beginTransaction();
	}

	protected Transaction beginTransaction() {
		return session.beginTransaction();
	}

	@After
	public void tearDown() throws Exception {
		if(session != null) {
			session.close();
		}
		if (sessionFactory != null) {
			sessionFactory.close();
		}
	}
}"
net.jforum.core.hibernate.PrivateMessageDAOTestCase,"public class PrivateMessageDAOTestCase extends AbstractDAOTestCase<PrivateMessage> {
	@Test
	public void deleteFromSentShouldNotRemoveOtherUserMessage() {
		User fromUser = this.createUser(""fromUser"");
		User toUser = this.createUser(""toUser"");

		PrivateMessageRepository dao = this.newDao();
		PrivateMessage pm = this.newPm(""subject"", ""text"", fromUser, toUser);

		this.insert(pm, dao);

		List<PrivateMessage> sent = dao.getFromSentBox(fromUser);
		Assert.assertEquals(1, sent.size());

		this.delete(sent.get(0), dao);

		pm = dao.get(sent.get(0).getId());
		Assert.assertNull(pm);

		List<PrivateMessage> toUserInbox = dao.getFromInbox(toUser);
		Assert.assertEquals(1, toUserInbox.size());
	}

	@Test
	public void deleteFromInboxShouldNotRemoveOtherUserSentBox() {
		PrivateMessageRepository dao = this.newDao();

		User fromUser = this.createUser(""fromUser"");
		User toUser = this.createUser(""toUser"");

		PrivateMessage pm = this.newPm(""subject"", ""text"", fromUser, toUser);
		this.insert(pm, dao);

		List<PrivateMessage> inbox = dao.getFromInbox(toUser);
		Assert.assertEquals(1, inbox.size());

		this.delete(inbox.get(0), dao);

		pm = dao.get(inbox.get(0).getId());
		Assert.assertNull(pm);

		List<PrivateMessage> fromUserSentBox = dao.getFromSentBox(fromUser);
		Assert.assertEquals(1, fromUserSentBox.size());
	}

	@Test
	public void insert() {
		PrivateMessageRepository dao = this.newDao();

		User fromUser = this.createUser(""fromUser"");
		User toUser = this.createUser(""toUser"");

		PrivateMessage pm = this.newPm(""subject"", ""text"", fromUser, toUser);
		this.insert(pm, dao);

		Assert.assertTrue(pm.getId() > 0);

		PrivateMessage loaded = dao.get(pm.getId());
		Assert.assertNotNull(loaded);

		Assert.assertEquals(""text"", loaded.getText());
		Assert.assertEquals(""subject"", loaded.getSubject());
		Assert.assertEquals(fromUser, loaded.getFromUser());
		Assert.assertEquals(toUser, loaded.getToUser());
		Assert.assertEquals(PrivateMessageType.SENT, loaded.getType());

		// Check if the message is in the ""Sent"" folder
		List<PrivateMessage> sent = dao.getFromSentBox(fromUser);
		Assert.assertEquals(1, sent.size());
		Assert.assertEquals(loaded.getId(), sent.get(0).getId());

		// Check if the message is in the ""Inbox"" folder of the target user
		List<PrivateMessage> inbox = dao.getFromInbox(toUser);
		Assert.assertEquals(1, inbox.size());

		loaded = inbox.get(0);

		Assert.assertEquals(""text"", loaded.getText());
		Assert.assertEquals(""subject"", loaded.getSubject());
		Assert.assertEquals(fromUser, loaded.getFromUser());
		Assert.assertEquals(toUser, loaded.getToUser());
		Assert.assertEquals(PrivateMessageType.NEW, loaded.getType());
	}

	@Test
	public void selectFromInboxExpectZeroResults() {
		PrivateMessageRepository dao = this.newDao();

		User user = new User(); user.setId(99);

		Assert.assertEquals(0, dao.getFromInbox(user).size());
	}

	@Test
	public void selectFromSentExpectZeroResults() {
		PrivateMessageRepository dao = this.newDao();

		User user = new User(); user.setId(88);

		Assert.assertEquals(0, dao.getFromSentBox(user).size());
	}

	@Test(expected = UnsupportedOperationException.class)
	public void updateExpectsException() {
		this.newDao().update(new PrivateMessage());
	}

	private PrivateMessage newPm(String subject, String text, User fromUser, User toUser) {
		PrivateMessage pm = new PrivateMessage();

		pm.setSubject(subject);
		pm.setText(text);

		pm.setFromUser(fromUser);
		pm.setToUser(toUser);

		return pm;
	}

	private PrivateMessageRepository newDao() {
		return new PrivateMessageRepository(session());
	}

	private User createUser(String username) {
		User user = new User();
		user.setUsername(username);

		UserRepository dao = new UserRepository(session());
		dao.add(user);

		return user;
	}
}"
net.jforum.core.hibernate.TopicDAOTestCase,"public class TopicDAOTestCase extends AbstractDAOTestCase<Topic> {
	@Test
	public void saveTopicWithPollExpectingCascadeToWork() {
		Topic t = new Topic(); t.setForum(null);

		Poll p = new Poll(); p.setLabel(""poll1"");
		PollOption o1 = new PollOption();
		o1.setPoll(p);
		o1.setText(""o1"");

		PollOption o2 = new PollOption();
		o2.setPoll(p);
		o2.setText(""o2"");

		p.setOptions(Arrays.asList(o1, o2));

		t.setPoll(p);

		TopicRepository dao = this.newTopicDao();
		this.insert(t, dao);

		t = dao.get(t.getId());
		Assert.assertNotNull(t.getPoll());
		Assert.assertEquals(""poll1"", t.getPoll().getLabel());
		Assert.assertEquals(2, t.getPoll().getOptions().size());
	}

	@Test
	@SuppressWarnings(""deprecation"")
	public void removeShouldDeletePostsAndUpdateUserTotalMessages() {
		new JDBCLoader(session())
			.run(""/topicdao/removeShouldDeletePostsAndUpdateUserTotalMessages.sql"");

		TopicRepository dao = this.newTopicDao();
		Topic topic = dao.get(1);

		Assert.assertEquals(3, dao.getTotalPosts(topic));

		this.delete(topic, dao);

		Assert.assertEquals(0, dao.getTotalPosts(topic));

		UserRepository userDao = this.newUserDao();
		Assert.assertEquals(1, userDao.get(1).getTotalPosts());
	}

	@Test
	@SuppressWarnings(""deprecation"")
	public void getPostsShouldNotFetchModeratedExpectTwoResults() {
		new JDBCLoader(session()) .run(""/postdao/dump.sql"");

		PostRepository postDao = this.newPostDao();
		Post post1 = this.newPost(); postDao.add(post1);
		Post post2 = this.newPost(); postDao.add(post2);
		Post post3 = this.newPost(); post3.setModerate(true); postDao.add(post3);

		TopicRepository topicDao = this.newTopicDao();
		Topic topic = topicDao.get(1);
		List<Post> posts = topicDao.getPosts(topic, 0, 10);

		Assert.assertEquals(2, posts.size());
		Assert.assertTrue(posts.contains(post1));
		Assert.assertTrue(posts.contains(post2));
	}

	@Test
	@SuppressWarnings(""deprecation"")
	public void totalPostsExpectTwoResults() {
		new JDBCLoader(session())
			.run(""/topicdao/totalPostsExpectTwoResults.sql"");

		TopicRepository dao = this.newTopicDao();
		Topic topic = dao.get(1);
		Assert.assertEquals(2, dao.getTotalPosts(topic));
	}

	@Test
	@SuppressWarnings(""deprecation"")
	public void lastPost() {
		new JDBCLoader(session())
			.run(""/topicdao/firstLastPost.sql"");

		TopicRepository dao = this.newTopicDao();
		Topic t = new Topic(); t.setId(1);
		Post expectedFirst = new Post(); expectedFirst.setId(2);

		Assert.assertEquals(expectedFirst, dao.getLastPost(t));
	}

	@Test
	@SuppressWarnings(""deprecation"")
	public void firstPost() {
		new JDBCLoader(session())
			.run(""/topicdao/firstLastPost.sql"");

		TopicRepository dao = this.newTopicDao();
		Topic t = new Topic(); t.setId(1);
		Post expectedFirst = new Post(); expectedFirst.setId(1);

		Assert.assertEquals(expectedFirst, dao.getFirstPost(t));
	}

	private UserRepository newUserDao() {
		return new UserRepository(session());
	}

	private PostRepository newPostDao() {
		return new PostRepository(session());
	}

	private TopicRepository newTopicDao() {
		return new TopicRepository(session());
	}

	private Post newPost() {
		Post post = new Post();
		post.setSubject(""teste"");
		post.setText(""teste"");
		post.setUser(this.newUserDao().get(1));
		post.setTopic(this.newTopicDao().get(1));

		return post;
	}
}"
net.jforum.core.hibernate.RankingDAOTestCase,"public class RankingDAOTestCase extends AbstractDAOTestCase<Ranking> {
	@Test
	public void delete() {
		RankingRepository dao = this.newDao();
		Ranking r = this.createRanking(""image1"", ""title1"", 7, false);

		this.insert(r, dao);
		this.delete(r, dao);

		Assert.assertNull(dao.get(r.getId()));
	}

	@Test
	public void update() {
		RankingRepository dao = this.newDao();

		Ranking r = this.createRanking(""image1"", ""title1"", 7, false);

		this.insert(r, dao);

		Ranking loaded = dao.get(r.getId());
		loaded.setImage(""image 1.1"");
		loaded.setTitle(""title1.1"");
		loaded.setMin(8);
		loaded.setSpecial(true);

		this.update(loaded, dao);

		loaded = dao.get(r.getId());

		Assert.assertEquals(""image 1.1"", loaded.getImage());
		Assert.assertEquals(""title1.1"", loaded.getTitle());
		Assert.assertEquals(8, loaded.getMin());
		Assert.assertEquals(true, loaded.isSpecial());
	}

	@Test
	public void getAllRankingsExpectEmptyList() {
		RankingRepository dao = this.newDao();
		List<Ranking> rankings = dao.getAllRankings();
		Assert.assertNotNull(rankings);
		Assert.assertEquals(0, rankings.size());
	}

	@Test
	public void getAllRankingsExpectTwoRecordsOrderedAsc() {
		RankingRepository dao = this.newDao();

		this.insert(this.createRanking(""img"", ""r1"", 1, false), dao);
		this.insert(this.createRanking(""img2"", ""r2"", 2, false), dao);

		List<Ranking> rankings = dao.getAllRankings();

		Assert.assertEquals(2, rankings.size());
		Assert.assertEquals(""r1"", rankings.get(0).getTitle());
		Assert.assertEquals(""r2"", rankings.get(1).getTitle());
	}

	@Test
	public void insert() {
		RankingRepository dao = this.newDao();

		Ranking r = this.createRanking(""some image"", ""ranking title"", 10, true);

		this.insert(r, dao);

		Assert.assertTrue(r.getId() > 0);

		Ranking loaded = dao.get(r.getId());
		Assert.assertEquals(""some image"", loaded.getImage());
		Assert.assertEquals(""ranking title"", loaded.getTitle());
		Assert.assertEquals(10, loaded.getMin());
		Assert.assertEquals(true, loaded.isSpecial());
	}

	private RankingRepository newDao() {
		return new RankingRepository(session());
	}

	private Ranking createRanking(String image, String title, int min, boolean special) {
		Ranking r = new Ranking();

		r.setImage(image);
		r.setMin(min);
		r.setSpecial(special);
		r.setTitle(title);

		return r;
	}
}"
net.jforum.core.hibernate.PostDAOTestCase,"public class PostDAOTestCase extends AbstractDAOTestCase<Post> {
	@Test
	@SuppressWarnings(""deprecation"")
	public void countPreviousPostsShouldReturn6() {
		new JDBCLoader(session())
			.run(""/postdao/countPreviousPosts.sql"");
		this.commit();
		this.beginTransaction();

		PostRepository dao = this.newDao();
		int total = dao.countPreviousPosts(6);
		Assert.assertEquals(6, total);
	}

	@Test
	@SuppressWarnings(""deprecation"")
	public void countPreviousPostsShouldReturn3() {
		new JDBCLoader(session())
			.run(""/postdao/countPreviousPosts.sql"");
		this.commit();
		this.beginTransaction();

		PostRepository dao = this.newDao();
		int total = dao.countPreviousPosts(3);
		Assert.assertEquals(3, total);
	}

	@Test
	@SuppressWarnings(""deprecation"")
	public void add() {
		new JDBCLoader(session()) .run(""/postdao/dump.sql"");

		PostRepository dao = this.newDao();
		Post post = this.newPost();
		this.insert(post, dao);

		Assert.assertTrue(post.getId() > 0);
	}

	private Post newPost() {
		Post post = new Post();
		post.setSubject(""teste"");
		post.setText(""teste"");
		post.setUser(this.newUserDao().get(1));
		post.setTopic(this.newTopicDao().get(1));

		return post;
	}

	private TopicRepository newTopicDao() {
		return new TopicRepository(session());
	}

	private UserRepository newUserDao() {
		return new UserRepository(session());
	}

	private PostRepository newDao() {
		return new PostRepository(session());
	}
}"
net.jforum.core.hibernate.GroupDAOTestCase,"public class GroupDAOTestCase extends AbstractDAOTestCase<Group> {
	@Test
	public void removeAllPermissions() {
		GroupRepository dao = this.newDao();
		Group group = this.newGroup();

		Role r1 = new Role(); r1.setName(""r1"");
		Role r2 = new Role(); r2.setName(""r2"");
		r2.addRoleValue(1);
		r2.addRoleValue(2);

		group.addRole(r1);
		group.addRole(r2);

		this.insert(group, dao);

		group = dao.get(group.getId());
		Assert.assertEquals(2, group.getRoles().size());

		group.getRoles().clear();
		this.update(group, dao);

		group = dao.get(group.getId());
		Assert.assertEquals(0, group.getRoles().size());
	}

	@Test
	public void clearAllRolesInsertOneNewUseJustOneUpdate() {
		GroupRepository dao = this.newDao();
		Group group = this.newGroup();

		Role role = new Role(); role.setName(""r2"");
		role.addRoleValue(1);
		role.addRoleValue(2);

		group.addRole(role);

		this.insert(group, dao);

		group = dao.get(group.getId());
		Assert.assertEquals(1, group.getRoles().size());

		group.getRoles().clear();
		role = new Role(); role.setName(""r3"");
		group.addRole(role);

		this.update(group, dao);

		group = dao.get(group.getId());
		Assert.assertEquals(1, group.getRoles().size());
		Assert.assertEquals(""r3"", group.getRoles().get(0).getName());
	}

	@Test
	public void addRoleWithoutRoleValue() {
		GroupRepository dao = this.newDao();
		Group group = this.newGroup();
		this.insert(group, dao);

		Role role = new Role(); role.setName(""r1"");
		group.addRole(role);

		this.update(group, dao);

		Group loadedGroup = dao.get(group.getId());
		Assert.assertEquals(1, loadedGroup.getRoles().size());
		Assert.assertEquals(0, loadedGroup.getRoles().get(0).getRoleValues().size());
	}

	@Test
	public void addTwoRolesOneWithRoleValues() {
		GroupRepository dao = this.newDao();
		Group group = this.newGroup();
		this.insert(group, dao);

		// Role 1
		Role role1 = new Role(); role1.setName(""r1"");
		role1.addRoleValue(1);
		role1.addRoleValue(5);
		role1.addRoleValue(9);

		group.addRole(role1);

		// Role 2
		Role role2 = new Role(); role2.setName(""r2"");
		group.addRole(role2);

		this.update(group, dao);

		Group loaded = dao.get(group.getId());

		Assert.assertEquals(2, loaded.getRoles().size());
		role1 = loaded.getRoles().get(0);

		Assert.assertEquals(3, role1.getRoleValues().size());
		Assert.assertTrue(role1.getRoleValues().contains(1));
		Assert.assertTrue(role1.getRoleValues().contains(5));
		Assert.assertTrue(role1.getRoleValues().contains(9));
		Assert.assertEquals(0, loaded.getRoles().get(1).getRoleValues().size());
	}

	@Test
	public void insert() {
		GroupRepository dao = this.newDao();
		Group group = this.newGroup();

		this.insert(group, dao);

		Assert.assertTrue(group.getId() > 0);

		Group loaded = dao.get(group.getId());

		Assert.assertEquals(group.getDescription(), loaded.getDescription());
		Assert.assertEquals(group.getName(), loaded.getName());
	}

	@Test
	public void update() {
		GroupRepository dao = this.newDao();
		Group g = this.newGroup();
		this.insert(g, dao);

		g = dao.get(g.getId());

		g.setName(""changed name"");
		g.setDescription(""changed description"");

		this.update(g, dao);

		Group loaded = dao.get(g.getId());

		Assert.assertEquals(g.getName(), loaded.getName());
		Assert.assertEquals(g.getDescription(), loaded.getDescription());
	}

	@Test
	public void delete() {
		GroupRepository dao = this.newDao();
		Group parent = this.newGroup();

		this.insert(parent, dao);

		Group loaded = dao.get(parent.getId());
		Assert.assertNotNull(loaded);

		this.delete(loaded, dao);

		Assert.assertNull(dao.get(parent.getId()));
	}

	@Test
	public void allGroups() {
		GroupRepository dao = this.newDao();

		Group g1 = new Group(); g1.setName(""g1""); this.insert(g1, dao);
		Group g2 = new Group(); g1.setName(""g2""); this.insert(g2, dao);
		Group g3 = new Group(); g1.setName(""g3""); this.insert(g3, dao);

		List<Group> groups = dao.getAllGroups();
		Assert.assertEquals(3, groups.size());
	}

	private Group newGroup() {
		Group group = new Group();

		group.setDescription(""description"");
		group.setName(""name"");

		return group;
	}

	private GroupRepository newDao() {
		return new GroupRepository(session());
	}
}"
net.jforum.core.hibernate.RecentTopicsDAOTestCase,"public class RecentTopicsDAOTestCase extends AbstractDAOTestCase<Topic> {
	@Test
	public void expectZeroResultsShouldReturnEmptyList() {
		RecentTopicsRepository dao = this.newDao();
		List<Topic> list = dao.getNewTopics(10);
		Assert.assertEquals(0, list.size());

		dao = this.newDao();
		list = dao.getUpdatedTopics(10);
		Assert.assertEquals(0, list.size());

		dao = this.newDao();
		list = dao.getHotTopics(10);
		Assert.assertEquals(0, list.size());
	}


	@Test
	public void postsInModerationExpectOneResult() {
		this.loadDump(""/recenttopics/dump.sql"");
		this.loadDump(""/recenttopics/moderation.sql"");

		RecentTopicsRepository dao = this.newDao();
		List<Topic> list = dao.getNewTopics(10);

		Assert.assertEquals(1, list.size());
		Assert.assertEquals(6, list.get(0).getId());
	}

	@Test
	public void recentTopics() {
		this.loadDump(""/recenttopics/dump.sql"");

		RecentTopicsRepository dao = this.newDao();
		List<Topic> list = dao.getNewTopics(10);
		Assert.assertEquals(8, list.size());

		Assert.assertEquals(8, list.get(0).getId());
		Assert.assertEquals(7, list.get(1).getId());
		Assert.assertEquals(6, list.get(2).getId());
		Assert.assertEquals(5, list.get(3).getId());
		Assert.assertEquals(4, list.get(4).getId());
		Assert.assertEquals(3, list.get(5).getId());
		Assert.assertEquals(2, list.get(6).getId());
		Assert.assertEquals(1, list.get(7).getId());

		Assert.assertEquals(4, list.get(0).getFirstPost().getId());
		Assert.assertEquals(12, list.get(0).getLastPost().getId());
		Assert.assertEquals(2, list.get(0).getFirstPost().getUser().getId());
		Assert.assertEquals(2, list.get(0).getLastPost().getUser().getId());
		Assert.assertEquals(3, list.get(0).getForum().getId());

		Assert.assertEquals(3, list.get(1).getFirstPost().getId());
		Assert.assertEquals(11, list.get(1).getLastPost().getId());
		Assert.assertEquals(2, list.get(1).getFirstPost().getUser().getId());
		Assert.assertEquals(2, list.get(1).getLastPost().getUser().getId());
		Assert.assertEquals(2, list.get(1).getForum().getId());

		Assert.assertEquals(2, list.get(2).getFirstPost().getId());
		Assert.assertEquals(10, list.get(2).getLastPost().getId());
		Assert.assertEquals(1, list.get(2).getFirstPost().getUser().getId());
		Assert.assertEquals(1, list.get(2).getLastPost().getUser().getId());
		Assert.assertEquals(1, list.get(2).getForum().getId());

		Assert.assertEquals(1, list.get(3).getFirstPost().getId());
		Assert.assertEquals(9, list.get(3).getLastPost().getId());
		Assert.assertEquals(1, list.get(3).getFirstPost().getUser().getId());
		Assert.assertEquals(2, list.get(3).getLastPost().getUser().getId());
		Assert.assertEquals(3, list.get(3).getForum().getId());

		Assert.assertEquals(8, list.get(4).getFirstPost().getId());
		Assert.assertEquals(8, list.get(4).getLastPost().getId());
		Assert.assertEquals(1, list.get(4).getFirstPost().getUser().getId());
		Assert.assertEquals(1, list.get(4).getLastPost().getUser().getId());
		Assert.assertEquals(3, list.get(4).getForum().getId());

		Assert.assertEquals(7, list.get(5).getFirstPost().getId());
		Assert.assertEquals(7, list.get(5).getLastPost().getId());
		Assert.assertEquals(2, list.get(5).getFirstPost().getUser().getId());
		Assert.assertEquals(2, list.get(5).getLastPost().getUser().getId());
		Assert.assertEquals(2, list.get(5).getForum().getId());

		Assert.assertEquals(6, list.get(6).getFirstPost().getId());
		Assert.assertEquals(6, list.get(6).getLastPost().getId());
		Assert.assertEquals(1, list.get(6).getFirstPost().getUser().getId());
		Assert.assertEquals(1, list.get(6).getLastPost().getUser().getId());
		Assert.assertEquals(1, list.get(6).getForum().getId());

		Assert.assertEquals(5, list.get(7).getFirstPost().getId());
		Assert.assertEquals(5, list.get(7).getLastPost().getId());
		Assert.assertEquals(1, list.get(7).getFirstPost().getUser().getId());
		Assert.assertEquals(1, list.get(7).getLastPost().getUser().getId());
		Assert.assertEquals(1, list.get(7).getForum().getId());
	}

	@SuppressWarnings(""deprecation"")
	private void loadDump(String file) {
		session().beginTransaction();
		JDBCLoader loader = new JDBCLoader(session());
		loader.run(file);
		session().getTransaction().commit();
		session().beginTransaction();
	}

	private RecentTopicsRepository newDao() {
		return new RecentTopicsRepository(session());
	}
}"
net.jforum.core.hibernate.RSSDAOTestCase,"public class RSSDAOTestCase extends AbstractDAOTestCase<Object> {
	@Test
	@SuppressWarnings(""deprecation"")
	public void getForumTopics() {
		new JDBCLoader(session())
			.run(""/rssdao/getForumTopics.sql"");

		RSSRepository dao = this.newDao();
		Forum forum = new Forum(); forum.setId(1);
		List<Topic> topics = dao.getForumTopics(forum, 10);

		assertEquals(3, topics.size());

		assertEquals(2, topics.get(0).getId());
		assertEquals(1, topics.get(1).getId());
		assertEquals(3, topics.get(2).getId());
	}

	private RSSRepository newDao() {
		return new RSSRepository(session());
	}
}"
net.jforum.core.hibernate.SessionDAOTestCase,"public class SessionDAOTestCase extends AbstractDAOTestCase<Session> {
	@Test
	public void addNew() {
		SessionRepository dao = this.newDao();
		assertNull(dao.get(1));
		this.insert(this.newSession(1), dao);
		assertNotNull(dao.get(1));
	}

	@Test
	public void updateDoesNotExistShouldAdd() {
		SessionRepository dao = this.newDao();
		assertNull(dao.get(1));
		this.update(this.newSession(1), dao);
		assertNotNull(dao.get(1));
	}

	private Session newSession(int userId) {
		Session session = new Session();

		session.setUserId(userId);

		return session;
	}

	private SessionRepository newDao() {
		return new SessionRepository(session());
	}
}"
net.jforum.core.hibernate.ConfigDAOTestCase,"public class ConfigDAOTestCase extends AbstractDAOTestCase<Config> {
	@Test
	public void update() {
		ConfigRepository dao = this.newDao();
		Config c = this.newConfig(""k1"", ""v1""); this.insert(c, dao);
		c = dao.get(c.getId());
		c.setValue(""new value"");
		this.update(c, dao);
		Config loaded = dao.get(c.getId());
		Assert.assertEquals(""k1"", loaded.getName());
		Assert.assertEquals(""new value"", loaded.getValue());
	}

	@Test
	public void getByNameUsingInvalidKeyExpectsNul() {
		ConfigRepository dao = this.newDao();
		Assert.assertNull(dao.getByName(""some invalid key name""));
	}

	@Test
	public void getByNameExpectSuccess() {

		ConfigRepository dao = this.newDao();
		Config c = this.newConfig(""k1"", ""v1""); this.insert(c, dao);
		Config loaded = dao.getByName(""k1"");
		Assert.assertNotNull(loaded);
		Assert.assertEquals(c.getId(), loaded.getId());
		Assert.assertEquals(c.getName(), loaded.getName());
		Assert.assertEquals(c.getValue(), loaded.getValue());
	}

	@Test
	public void insert() {
		ConfigRepository dao = this.newDao();
		Config c = this.newConfig(""name1"", ""value1""); this.insert(c, dao);

		Assert.assertTrue(c.getId() > 0);

		Config loaded = dao.get(c.getId());
		Assert.assertEquals(c.getName(), loaded.getName());
		Assert.assertEquals(c.getValue(), loaded.getValue());
	}

	private Config newConfig(String name, String value) {
		Config c = new Config();

		c.setName(name);
		c.setValue(value);

		return c;
	}

	private ConfigRepository newDao() {
		return new ConfigRepository(session());
	}
}"
net.jforum.core.hibernate.CategoryDAOTestCase,"public class CategoryDAOTestCase extends AbstractDAOTestCase<Category> {
	@Test
	public void insertShouldIncrementDisplayOrder() {
		Category c1 = this.newCategory(""c1"", false);
		Category c2 = this.newCategory(""c2"", false);

		CategoryRepository dao = this.newDao();

		this.insert(c1, dao);
		this.insert(c2, dao);

		Assert.assertEquals(1, c1.getDisplayOrder());
		Assert.assertEquals(2, c2.getDisplayOrder());
	}

	@Test
	public void insert() {
		String name = ""category test 1"";
		boolean moderated = false;

		Category c = this.newCategory(name, moderated);
		CategoryRepository dao = this.newDao();

		this.insert(c, dao);
		Assert.assertTrue(c.getId() > 0);

		Category loaded = dao.get(c.getId());

		Assert.assertNotNull(loaded);
		Assert.assertEquals(name, loaded.getName());
		Assert.assertEquals(moderated, c.isModerated());
		Assert.assertEquals(1, c.getDisplayOrder());
	}

	@Test
	public void updateChangingAnInstanceLoadedFromTheDb() {
		CategoryRepository dao = this.newDao();
		Category c = this.newCategory(""c1"", false);

		this.insert(c, dao);

		Category loaded = dao.get(c.getId());

		loaded.setName(""changed"");
		loaded.setModerated(true);
		loaded.setDisplayOrder(3);

		this.update(loaded, dao);

		loaded = dao.get(c.getId());

		Assert.assertEquals(""changed"", loaded.getName());
		Assert.assertEquals(true, loaded.isModerated());
		Assert.assertEquals(3, loaded.getDisplayOrder());
	}

	@Test(expected=NonUniqueObjectException.class)
	public void updateChangingAnInstanceCreatedByHandUsingARealIdShouldFail() {
		CategoryRepository dao = this.newDao();
		Category c = this.newCategory(""c1"", false);
		this.insert(c, dao);
		this.commit();
		
		int id = c.getId();
		
		Category c2 = new Category();
		c2.setId(id);
		c2.setName(""c2"");
		c2.setModerated(true);
		c2.setDisplayOrder(2);

		this.update(c2, dao);

		Category loaded = dao.get(id);
		Assert.assertEquals(""c2"", loaded.getName());
		Assert.assertEquals(true, loaded.isModerated());
		Assert.assertEquals(2, loaded.getDisplayOrder());
	}

	@Test
	public void delete() {
		CategoryRepository dao = this.newDao();
		Category c = this.newCategory(""c3"", false);
		this.insert(c, dao);

		c = dao.get(c.getId());
		this.delete(c, dao);

		c = dao.get(c.getId());
		Assert.assertNull(c);
	}

	@Test
	public void selectAll() {
		CategoryRepository dao = this.newDao();

		for (int i = 0; i < 3; i++) {
			this.insert(this.newCategory(""name"" + i, false), dao);
		}

		List<Category> categories = dao.getAllCategories();

		Assert.assertEquals(3, categories.size());

		int lastDisplayOrder = -1;

		for (int i = 0; i < 3; i++) {
			Category c = categories.get(i);

			Assert.assertEquals(""name"" + i, c.getName());
			Assert.assertTrue(c.getDisplayOrder() > lastDisplayOrder);
			lastDisplayOrder = c.getDisplayOrder();
		}
	}

	@Test
	public void insertThreeCategoriesWithTwoForumsEachExpectSelectInCorrectOrder() {
		CategoryRepository dao = this.newDao();
		ForumRepository forumDao = new ForumRepository(session());
		int totalCategories = 3;

		for (int i = 1; i <= totalCategories; i++) {
			Category category = this.newCategory(""name"" + i, false);
			this.insert(category, dao);

			forumDao.add(this.newForum(String.format(""f%d.1"", i), category));
			forumDao.add(this.newForum(String.format(""f%d.2"", i), category));
		}

		List<Category> categories = dao.getAllCategories();

		Assert.assertEquals(totalCategories, categories.size());

		String[] expectedForumNames = { ""f1.1"", ""f1.2"", ""f2.1"", ""f2.2"", ""f3.1"", ""f3.2"" };

		int lastDisplayOrder = -1;

		int forumCounter = 0;
		int nameCounter = 1;
		for (Category c : categories) {
			this.injectRepository(c);

			Assert.assertEquals(""name"" + nameCounter++, c.getName());
			Assert.assertTrue(c.getDisplayOrder() > lastDisplayOrder);

			List<Forum> forums = c.getForums();
			Assert.assertEquals(2, forums.size());

			Assert.assertEquals(expectedForumNames[forumCounter], forums.get(0).getName());
			Assert.assertEquals(expectedForumNames[forumCounter + 1], forums.get(1).getName());

			lastDisplayOrder = c.getDisplayOrder();

			forumCounter += 2;
		}
	}

	private void injectRepository(Category c) {
		Field[] fields = c.getClass().getDeclaredFields();

		try {
			for (Field field: fields) {
				if (field.getName().equals(""repository"")) {
					field.setAccessible(true);
					field.set(c, this.newDao());
					break;
				}
			}
		}
		catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	@Test
	public void createCategoryAndTwoForumsGetCategoryExpectForumsInCorrectOrder() {
		CategoryRepository dao = this.newDao();
		Category category = this.newCategory(""cat1"", false);
		this.insert(category, dao);

		ForumRepository forumDao = new ForumRepository(session());

		forumDao.add(this.newForum(""f1"", category));
		forumDao.add(this.newForum(""f2"", category));

		category = dao.get(category.getId());
		this.injectRepository(category);

		Assert.assertNotNull(category.getForums());
		Assert.assertEquals(2, category.getForums().size());
		Assert.assertEquals(""f1"", category.getForums().get(0).getName());
		Assert.assertEquals(""f2"", category.getForums().get(1).getName());
	}

	private Forum newForum(String name, Category category) {
		Forum f = new Forum();

		f.setName(name);
		f.setCategory(category);

		return f;
	}

	private Category newCategory(String name, boolean moderated) {
		Category c = new Category(this.newDao());

		c.setName(name);
		c.setModerated(moderated);

		return c;
	}

	private CategoryRepository newDao() {
		return new CategoryRepository(session());
	}
}"
net.jforum.core.hibernate.AvatarDAOTestCase,"public class AvatarDAOTestCase extends AbstractDAOTestCase<Avatar> {
	@Test
	public void getAllSmiliesExpectTwoResults() {
		AvatarRepository dao = this.newDao();

		this.insert(this.createAvatar(120,150, ""diskname1""), dao);
		this.insert(this.createAvatar(130,140, ""diskname2""), dao);

		List<Avatar> avatars = dao.getAll();

		Assert.assertNotNull(avatars);
		Assert.assertEquals(2, avatars.size());
	}

	@Test
	public void insert() {
		AvatarRepository dao = this.newDao();
		Avatar s = this.createAvatar(120,150, ""diskname"");
		this.insert(s, dao);

		Assert.assertTrue(s.getId() > 0);

		Avatar loaded = dao.get(s.getId());

		Assert.assertNotNull(loaded);
		Assert.assertEquals(new Integer(120), loaded.getWidth());
		Assert.assertEquals(new Integer(150), loaded.getHeight());
		Assert.assertEquals(""diskname"", loaded.getFileName());
	}

	@Test
	public void getAllAvatarsExpectEmtpyList() {
		AvatarRepository dao = this.newDao();
		Assert.assertEquals(0, dao.getAll().size());
	}

	private AvatarRepository newDao() {
		return new AvatarRepository(session());
	}

	private Avatar createAvatar(Integer width,Integer height, String diskName) {
		Avatar a = new Avatar();

		a.setAvatarType(AvatarType.AVATAR_GALLERY);
		a.setHeight(height);
		a.setWidth(width);
		a.setFileName(diskName);

		return a;
	}
}"
net.jforum.core.hibernate.tests.EmptyCache,"public class EmptyCache implements Cache {

	/**
	 * @see org.hibernate.cache.Cache#clear()
	 */
	public void clear() throws CacheException {
	}

	/**
	 * @see org.hibernate.cache.Cache#destroy()
	 */
	public void destroy() throws CacheException {
	}

	/**
	 * @see org.hibernate.cache.Cache#get(java.lang.Object)
	 */
	public Object get(Object key) throws CacheException {
		return null;
	}

	/**
	 * @see org.hibernate.cache.Cache#getElementCountInMemory()
	 */
	public long getElementCountInMemory() {
		return 0;
	}

	/**
	 * @see org.hibernate.cache.Cache#getElementCountOnDisk()
	 */
	public long getElementCountOnDisk() {
		return 0;
	}

	/**
	 * @see org.hibernate.cache.Cache#getRegionName()
	 */
	public String getRegionName() {
		return null;
	}

	/**
	 * @see org.hibernate.cache.Cache#getSizeInMemory()
	 */
	public long getSizeInMemory() {
		return 0;
	}

	/**
	 * @see org.hibernate.cache.Cache#getTimeout()
	 */
	public int getTimeout() {
		return 0;
	}

	/**
	 * @see org.hibernate.cache.Cache#lock(java.lang.Object)
	 */
	public void lock(Object key) throws CacheException {
	}

	/**
	 * @see org.hibernate.cache.Cache#nextTimestamp()
	 */
	public long nextTimestamp() {
		return 0;
	}

	/**
	 * @see org.hibernate.cache.Cache#put(java.lang.Object, java.lang.Object)
	 */
	public void put(Object key, Object value) throws CacheException {
	}

	/**
	 * @see org.hibernate.cache.Cache#read(java.lang.Object)
	 */
	public Object read(Object key) throws CacheException {
		return null;
	}

	/**
	 * @see org.hibernate.cache.Cache#remove(java.lang.Object)
	 */
	public void remove(Object key) throws CacheException {
	}

	/**
	 * @see org.hibernate.cache.Cache#toMap()
	 */
	@SuppressWarnings(""rawtypes"")
	public Map toMap() {
		return null;
	}

	/**
	 * @see org.hibernate.cache.Cache#unlock(java.lang.Object)
	 */
	public void unlock(Object key) throws CacheException {
	}

	/**
	 * @see org.hibernate.cache.Cache#update(java.lang.Object, java.lang.Object)
	 */
	public void update(Object key, Object value) throws CacheException {
	}

}"
net.jforum.core.hibernate.tests.EmptyCacheProvider,"public class EmptyCacheProvider implements CacheProvider {

	/**
	 * @see org.hibernate.cache.CacheProvider#buildCache(java.lang.String, java.util.Properties)
	 */
	public Cache buildCache(String regionName, Properties properties) throws CacheException {
		return new EmptyCache();
	}

	/**
	 * @see org.hibernate.cache.CacheProvider#isMinimalPutsEnabledByDefault()
	 */
	public boolean isMinimalPutsEnabledByDefault() {
		return false;
	}

	/**
	 * @see org.hibernate.cache.CacheProvider#nextTimestamp()
	 */
	public long nextTimestamp() {
		return 0;
	}

	/**
	 * @see org.hibernate.cache.CacheProvider#start(java.util.Properties)
	 */
	public void start(Properties properties) throws CacheException {
	}

	/**
	 * @see org.hibernate.cache.CacheProvider#stop()
	 */
	public void stop() {
	}

}"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase,"public class CacheEvictionRulesTestCase extends AbstractDependencyInjectionSpringContextTests {
	
	@Mock private SessionFactoryImplementor sessionFactory;

	/*
	 * ****************
	 * Group Service
	 * ****************
	 */
	public void testPermissionsChaged() throws Exception {
		this.expectQueryCacheEviction(""forumDAO.getModerators"");
		this.executeTargetMethod(GroupService.class, ""savePermissions"", 0, null);
		
	}

	/*
	 * **************
	 * Ranking DAO
	 * **************
	 */
	public void testRankingAdded() throws Exception {
		this.runRankingRepository(""add"");
	}

	public void testRankingUpdated() throws Exception {
		this.runRankingRepository(""update"");
	}

	public void testRankingDeleted() throws Exception {
		this.runRankingRepository(""remove"");
	}

	private void runRankingRepository(String methodName) throws Exception {
		this.expectQueryCacheEviction(""rankingDAO"");
		this.executeTargetMethod(RankingRepository.class, methodName);
		
	}

	/*
	 * **************
	 * Smilie DAO
	 * **************
	 */
	public void testSmilieAdded() throws Exception {
		this.runSmilieRepository(""add"");
	}

	public void testSmilieUpdated() throws Exception {
		this.runSmilieRepository(""update"");
	}

	public void testSmilieDeleted() throws Exception {
		this.runSmilieRepository(""remove"");
	}

	private void runSmilieRepository(String methodName) throws Exception {
		this.expectQueryCacheEviction(""smilieDAO"");
		this.executeTargetMethod(SmilieRepository.class, methodName);
		
	}

	/*
	 * ***********
	 * User DAO
	 * ***********
	 */
	public void testUserRepositoryAdd() throws Exception {
		this.expectQueryCacheEviction(""userDAO.getTotalUsers"");
		this.expectQueryCacheEviction(""userDAO.getLastRegisteredUser"");

		this.executeTargetMethod(UserRepository.class, ""add"");

		
	}

	/*
	 * *******************
	 * Config DAO Tests
	 * *******************
	 */
	public void testConfigRepositoryAdd() throws Exception {
		this.runConfigRepositoryAddOrUpdate(""add"");
	}

	public void testConfigRepositoryUpdate() throws Exception {
		this.runConfigRepositoryAddOrUpdate(""update"");
	}

	private void runConfigRepositoryAddOrUpdate(String methodName) throws Exception {
		this.expectQueryCacheEviction(""configDAO"");
		this.executeTargetMethod(ConfigRepository.class, methodName);
		
	}

	/*
	 * *************************
	 * Forum Related Tests
	 * *************************
	 */
	public void testForumServiceAdd() throws Exception {
		this.runForumServiceTest(""add"");
	}

	public void testForumServiceUpdate() throws Exception {
		this.runForumServiceTest(""update"");
	}

	public void testForumServiceDelete() throws Exception {
		this.runForumServiceTest(""delete"");
	}

	public void testForumServiceUpForumOrder() throws Exception {
		this.runForumServiceTest(""upForumOrder"");
	}

	public void testForumServiceDownForumOrder() throws Exception {
		this.runForumServiceTest(""downForumOrder"");
	}

	private void runForumServiceTest(String methodName) throws Exception {
		this.expectQueryCacheEviction(""categoryDAO.getForums"");
		this.expect2ndLevelCacheEviction(""net.jforum.entities.Forum"");
		this.executeTargetMethod(ForumService.class, methodName);
		
	}

	/*
	 * ******************
	 * Posts / Topics
	 * ******************
	 */

	public void testDeletePost() throws Exception {
		Forum forum = new Forum(); forum.setId(1);
		Post post = new Post(); post.setForum(forum);

		this.expectQueryCacheEviction(""forumDAO.getTotalMessages"");
		this.expectQueryCacheEviction(""forumDAO.getTotalPosts#"" + forum.getId());
		this.expectQueryCacheEviction(""forumDAO.getTotalTopics#"" + forum.getId());
		this.expectQueryCacheEviction(""recentTopicsDAO"");
		this.expectQueryCacheEviction(""forumDAO.getTopics#"" + forum.getId());

		this.executeTargetMethod(PostService.class, ""delete"", post);

		
	}

	public void testTopicDeleted() throws Exception {
		Topic topic = new Topic(); topic.getForum().setId(1);

		List<Topic> topics = new ArrayList<Topic>();
		topics.add(topic);

		this.expectQueryCacheEviction(""forumDAO.getTotalMessages"");
		this.expectQueryCacheEviction(""forumDAO.getTotalPosts#1"");
		this.expectQueryCacheEviction(""forumDAO.getTotalTopics#1"");
		this.expectQueryCacheEviction(""forumDAO.getTopics#1"");
		this.expectQueryCacheEviction(""rssDAO.getForumTopics#1"");
		this.expectQueryCacheEviction(""recentTopicsDAO"");

		this.executeVerySpecificTargetMethod(ModerationService.class, ""deleteTopics"", List.class, topics);

		
	}

	public void testModerationApprovedPost() throws Exception {
		this.newTopicOrPostCommonAssertions();

		Forum forum = new Forum(); forum.setId(1);
		Topic topic = new Topic(); topic.setPendingModeration(false); topic.setForum(forum);
		Post post = new Post(); post.setTopic(topic);

		this.executeTargetMethod(ModerationService.class, ""approvePost"", post);

		
	}

	public void testModerationTopicMoved() throws Exception {
		this.expectQueryCacheEviction(""forumDAO.getTotalPosts#1"");
		this.expectQueryCacheEviction(""forumDAO.getTotalPosts#2"");
		this.expectQueryCacheEviction(""forumDAO.getTotalTopics#1"");
		this.expectQueryCacheEviction(""forumDAO.getTotalTopics#2"");
		
		Session session = mock(Session.class);
		when(sessionFactory.getCurrentSession()).thenReturn(session);

		Topic topic = new Topic(); topic.getForum().setId(2);
		when(session.get(Topic.class, 5)).thenReturn(topic);

		Cache cache = mock(Cache.class);
		when(sessionFactory.getSecondLevelCacheRegion(""net.jforum.entities.Forum"")).thenReturn(cache);
		
		this.executeTargetMethod(ModerationService.class, ""moveTopics"", 1, new int[] { 5 });
		
		verify(cache).remove(""net.jforum.entities.Forum#1"");
		verify(cache).remove(""net.jforum.entities.Forum#2"");
	}

	public void testTopicServiceAdd() throws Exception {
		this.runTopicServiceAddOrReply(""addTopic"");
	}

	public void testTopicServiceReply() throws Exception {
		this.runTopicServiceAddOrReply(""reply"");
	}

	private void runTopicServiceAddOrReply(String methodName) throws Exception {
		this.newTopicOrPostCommonAssertions();

		Forum forum = new Forum(); forum.setId(1);
		Topic topic = new Topic(); topic.setPendingModeration(false); topic.setForum(forum);

		if (""addTopic"".equals(methodName)) {
			this.executeTargetMethod(TopicService.class, methodName, topic, new ArrayList<PollOption>(), new ArrayList<AttachedFile>());
		}
		else {
			this.executeTargetMethod(TopicService.class, methodName, topic, new Post(), new ArrayList<AttachedFile>());
		}

		
	}

	private void newTopicOrPostCommonAssertions() {
		this.expectQueryCacheEviction(""forumDAO.getTotalPosts#1"");
		this.expectQueryCacheEviction(""forumDAO.getTotalTopics#1"");
		this.expectQueryCacheEviction(""recentTopicsDAO"");
		this.expectQueryCacheEviction(""forumDAO.getTotalMessages"");
		this.expectQueryCacheEviction(""forumDAO.getTopics#1"");
	}

	/*
	 * *************************
	 * Category Related Tets
	 * *************************
	 */
	public void testCategoryServiceAdd() throws Exception {
		this.runCategoryServiceTest(""add"");
	}

	public void testCategoryServiceUpdate() throws Exception {
		this.runCategoryServiceTest(""update"");
	}

	public void testCategoryServiceDelete() throws Exception {
		this.runCategoryServiceTest(""delete"");
	}

	public void testCategoryServiceUpCategoryOrder() throws Exception {
		this.runCategoryServiceTest(""upCategoryOrder"");
	}

	public void testCategoryServiceDownCategoryOrder() throws Exception {
		this.runCategoryServiceTest(""downCategoryOrder"");
	}

	private void runCategoryServiceTest(String methodName) throws Exception {
		this.expectQueryCacheEviction(""categoryDAO.getAllCategories"");
		this.expect2ndLevelCacheEviction(""net.jforum.entities.Category"");

		this.executeTargetMethod(CategoryService.class, methodName);

		
	}

	/*
	 * ***************************
	 * General utility methods
	 * ***************************
	 */
	private Object getBean(String name) {
		return this.getApplicationContext().getBean(name);
	}

	private void executeTargetMethod(Class<?> entityClass, String methodName, Object... args) throws Exception {
		Object entity = this.getBean(entityClass.getName());

		Set<Method> methods = new HashSet<Method>(Arrays.asList(entityClass.getMethods()));
		methods.addAll(Arrays.asList(entityClass.getDeclaredMethods()));

		for (Method method : methods) {
			if (method.getName().equals(methodName)) {
				if (args != null && args.length > 0) {
					method.invoke(entity, args);
				}
				else {
					Class<?>[] parameterTypes = method.getParameterTypes();

					if (parameterTypes.length == 1 && parameterTypes[0] == int.class) {
						//method.setAccessible(true);
						method.invoke(entity, 0);
					}
					else {
						args = new Object[parameterTypes.length];
						//method.setAccessible(true);
						method.invoke(entity, args);
					}
				}
			}
		}
	}

	private void executeVerySpecificTargetMethod(Class<?> entityClass, String methodName, Class<?> argumentType, Object... args) throws Exception {
		Object entity = this.getBean(entityClass.getName());
		Method method = entity.getClass().getMethod(methodName, argumentType);
		method.invoke(entity, args);
	}

	private void expectQueryCacheEviction(final String regionName) {
		org.hibernate.cache.QueryCache cache = mock(org.hibernate.cache.QueryCache.class, regionName);
		when(sessionFactory.getQueryCache(regionName)).thenReturn(cache);
		verify(cache).clear();
	}

	private void expect2ndLevelCacheEviction(final String regionName) {
		Cache secondLevelCache = mock(Cache.class, regionName);
		when(sessionFactory.getSecondLevelCacheRegion(regionName)).thenReturn(secondLevelCache);
		verify(secondLevelCache).clear();
	}

	/**
	 * @see org.springframework.test.AbstractSingleSpringContextTests#onSetUp()
	 */
	@Override
	protected void onSetUp() throws Exception {
		super.onSetUp();

		Object o = this.getBean(""evictionRules"");
		Field[] fields = o.getClass().getDeclaredFields();

		for (Field field : fields) {
			if (field.getName().equals(""factoryImplementor"")) {
				field.setAccessible(true);
				field.set(o, sessionFactory);
			}
			else if (field.getName().equals(""sessionFactory"")) {
				field.setAccessible(true);
				field.set(o, sessionFactory);
			}
		}
	}

	/**
	 * @see org.springframework.test.AbstractSingleSpringContextTests#getConfigLocations()
	 */
	@Override
	protected String[] getConfigLocations() {
		return new String[]{ ""/cache/cache-eviction-rules-test.xml"" };                          
	}
}"
net.jforum.core.events.post.BadWordEventTestCase,"public class BadWordEventTestCase {
	
	@Mock private BadWordRepository repository;
	@InjectMocks private BadWordEvent event;

	@Test
	public void replaceAllShouldNotReplaceInsideAnotherWord() {
		BadWord w1 = new BadWord(); w1.setWord(""abc""); w1.setReplacement(""REPLACEMENT"");
	
		when(repository.getAll()).thenReturn(Arrays.asList(w1));
		
		Post p = new Post();
		Topic topic = new Topic();
		topic.setSubject(""title"");
		p.setTopic(topic);
		p.setText(""some content wordABCeditor more content"");

		event.beforeAdd(p);
		
		assertEquals(""some content wordABCeditor more content"", p.getText());
	}

	@Test
	public void replaceAll() {
		BadWord w1 = new BadWord(); w1.setWord(""word1""); w1.setReplacement(""replacement1"");
		BadWord w2 = new BadWord(); w2.setWord(""word2""); w2.setReplacement(""replacement2"");

		when(repository.getAll()).thenReturn(Arrays.asList(w1, w2));
		
		Post p = new Post();
		Topic topic = new Topic();
		topic.setSubject(""title"");
		p.setTopic(topic);
		p.setText(""some content of post 1. This is word1, and this is WORD2. End"");

		event.beforeAdd(p);
		
		assertEquals(""some content of post 1. This is replacement1, and this is replacement2. End"", p.getText());
	}
}"
net.jforum.core.events.post.ForumPostEventTestCase,"public class ForumPostEventTestCase {
	
	@Mock private ForumRepository repository;
	@InjectMocks private ForumPostEvent event;

	@Test
	public void deleteLastPostExpectUpdate() {
		final Post post = this.newPost();
		post.setId(2);
	
		Post newLastPost = new Post(); newLastPost.setId(13);
		when(repository.getLastPost(post.getForum())).thenReturn(newLastPost);
	
		event.deleted(post);
		
		Post expected = new Post(); expected.setId(13);
		Assert.assertEquals(expected, post.getForum().getLastPost());
	}

	@Test
	public void deleteOrdinaryPostShouldDoNothing() {
		Post post = this.newPost();
		post.setId(10);
		event.deleted(post);
		
	}

	private Post newPost() {
		Post p = new Post(); p.setId(1);
		Topic t = new Topic();
		t.setId(1);
		t.setFirstPost(new Post()); t.getFirstPost().setId(1);
		t.setLastPost(new Post()); t.getLastPost().setId(2);
		t.setForum(new Forum()); t.getForum().setId(1); t.getForum().setLastPost(t.getLastPost());
		p.setForum(t.getForum());
		p.setTopic(t);

		return p;
	}
}"
net.jforum.core.events.post.TopicPostEventTestCase,"public class TopicPostEventTestCase {
	
	@Mock private TopicRepository repository;
	@Mock private UserRepository userRepository;
	@InjectMocks private TopicPostEvent event;

	@Test
	public void shouldUpdateUserTotalPost() {
		final Post post = this.newPost();
		post.getUser().setTotalPosts(5);
	
		when(repository.getTotalPosts(post.getTopic())).thenReturn(1);
		when(userRepository.getTotalPosts(post.getUser())).thenReturn(2);
		when(repository.getFirstPost(any(Topic.class))).thenReturn(newPost());
	
		event.deleted(post);
		
		Assert.assertEquals(2, post.getUser().getTotalPosts());
	}

	@Test
	public void emptyPostsShouldRemoveTopic() {
		final Post post = this.newPost();
		int totalPosts = post.getTopic().getTotalPosts();
		
		when(repository.getTotalPosts(post.getTopic())).thenReturn(0);
		
		event.deleted(post);
		
		verify(repository).remove(post.getTopic());
		Assert.assertEquals(totalPosts - 1, post.getTopic().getTotalPosts());
	}

	@Test
	public void removeLastPostOnly() {
		final Post post = this.newPost();
		post.getTopic().getFirstPost().setId(3);
		post.getTopic().getLastPost().setId(4);
		int totalPosts = post.getTopic().getTotalPosts();
	
		Post lastPost = new Post(); lastPost.setId(5);
		when(repository.getTotalPosts(post.getTopic())).thenReturn(2);
		when(repository.getLastPost(post.getTopic())).thenReturn(lastPost);
		
		post.setId(4);
		event.deleted(post);
		
		verify(userRepository).getTotalPosts(post.getUser());
		Post expected = new Post(); expected.setId(5);
		Assert.assertEquals(expected, post.getTopic().getLastPost());
		Assert.assertEquals(totalPosts - 1, post.getTopic().getTotalPosts());
	}

	@Test
	public void removeFirstPostOnly() {
		final Post post = this.newPost();
		int totalPosts = post.getTopic().getTotalPosts();
	
		Post newFirst = newPost(); newFirst.setId(6);
		newFirst.getUser().setId(9);

		when(repository.getTotalPosts(post.getTopic())).thenReturn(2);
		when(repository.getFirstPost(post.getTopic())).thenReturn(newFirst);
		
		event.deleted(post);
		
		verify(userRepository).getTotalPosts(post.getUser());
		
		Post expected = new Post(); expected.setId(6);
		Assert.assertEquals(expected, post.getTopic().getFirstPost());

		User expectedUser = new User(); expectedUser.setId(9);
		Assert.assertEquals(expectedUser, post.getTopic().getUser());
		Assert.assertEquals(totalPosts - 1, post.getTopic().getTotalPosts());
	}

	private Post newPost() {
		Post p = new Post(); p.setId(1); p.setUser(new User());
		Topic t = new Topic(); t.setId(1);
		t.setUser(new User());
		t.setFirstPost(new Post()); t.getFirstPost().setId(1);
		t.setLastPost(new Post()); t.getLastPost().setId(2);
		p.setTopic(t);

		return p;
	}
}"
net.jforum.core.events.post.TopicWatchPostEventTestCase,"public class TopicWatchPostEventTestCase {
	
	@Mock private TopicWatchService service;
	@InjectMocks private TopicWatchPostEvent event;

	@Test
	public void addedPostNotifyEnabledExpectWatch() {
		final Post post = new Post(); post.setNotifyReplies(true);
		post.setTopic(new Topic(1));
		User user = new User();
		user.setId(2);
		post.setUser(user);
		
		event.added(post);
		
		verify(service).watch(post.getTopic(), post.getUser());
	}

	@Test
	public void addedPostNotifyDisabledShouldDoNothing() {
		Post post = new Post(); post.setNotifyReplies(false);
		event.added(post);
	}
}"
net.jforum.core.events.category.NewCategoryGroupPermissionsEventTestCase,"public class NewCategoryGroupPermissionsEventTestCase {
	
	@Mock private GroupRepository groupRepository;
	@Mock private GroupService groupService;
	@Mock private UserSession userSession;
	@InjectMocks private NewCategoryGroupPermissionsEvent event;

	@Test
	public void added() {
		Group group1 = createGroupWithRole(1, SecurityConstants.ADMINISTRATOR, SecurityConstants.APPROVE_MESSAGES);
		Group group2 = createGroupWithRole(2, SecurityConstants.CO_ADMINISTRATOR);
		Group group3 = createGroupWithRole(3, SecurityConstants.CATEGORY);
		Group group4 = createGroupWithRole(4, SecurityConstants.CATEGORY);

		when(groupRepository.getAllGroups()).thenReturn(Arrays.asList(group1, group2, group3, group4));

		User user = new User();
		user.getGroups().add(group2);
		user.getGroups().add(group4);

		when(userSession.getUser()).thenReturn(user);

		Category c = new Category();
		c.setId(1);

		event.added(c);

		verify(groupService).appendRole(group1, SecurityConstants.CATEGORY, 1);
		verify(groupService).appendRole(group2, SecurityConstants.CATEGORY, 1);
	}

	private Group createGroupWithRole(int groupId, String... roleNames) {
		Group g = new Group();
		g.setId(groupId);

		for (String roleName : roleNames) {
			Role r = new Role();
			r.setName(roleName);

			g.addRole(r);
		}

		return g;
	}
}"
net.jforum.core.events.topic.ForumTopicEventTestCase,"public class ForumTopicEventTestCase {
	
	@Mock private ForumRepository repository;
	@InjectMocks private ForumTopicEvent event;

	@Test
	public void deleteTopicLastPostIsNullShouldForceReload() {
		final Topic topic = this.newTopic();
		topic.getForum().setLastPost(null);
		Post post = new Post(); post.setId(11);
		when(repository.getLastPost(topic.getForum())).thenReturn(post);
		
		event.deleted(topic);
		
		Post expected = new Post(); expected.setId(11);
		Assert.assertEquals(expected, topic.getForum().getLastPost());
	}

	@Test
	public void deleteTopicExpectSuccess() {
		final Topic topic = this.newTopic();
		Post post = new Post(); post.setId(11);
		when(repository.getLastPost(topic.getForum())).thenReturn(post);
		topic.getLastPost().getTopic().setId(topic.getId());
		
		event.deleted(topic);
		
		Post expected = new Post(); expected.setId(11);
		Assert.assertEquals(expected, topic.getForum().getLastPost());
	}

	@Test
	public void deleteOrdinaryTopicShoulDoNothing() {
		final Topic topic = this.newTopic();
		topic.getForum().getLastPost().getTopic().setId(9);

		event.deleted(topic);
	}

	private Topic newTopic() {
		Topic t = new Topic(); t.setId(1); t.setUser(new User());

		t.setFirstPost(new Post()); t.getFirstPost().setId(1); t.getFirstPost().setTopic(new Topic());
		t.setLastPost(new Post()); t.getLastPost().setId(2); t.getLastPost().setTopic(new Topic());
		t.setForum(new Forum()); t.getForum().setId(1); t.getForum().setLastPost(t.getLastPost());

		return t;
	}
}"
net.jforum.core.events.topic.TopicWatchTopicEventTestCase,"public class TopicWatchTopicEventTestCase {
	
	@Mock private TopicWatchRepository repository;
	@InjectMocks private TopicWatchTopicEvent event = new TopicWatchTopicEvent(repository);

	@Test
	public void deleted() {
		final Topic topic = new Topic(); topic.setId(2);
		
		event.deleted(topic);

		verify(repository).removeSubscription(topic);
	}
}"
net.jforum.core.events.forum.NewForumGroupPermissionsEventTestCase,"public class NewForumGroupPermissionsEventTestCase {
	
	@Mock private GroupRepository groupRepository;
	@Mock private GroupService groupService;
	@Mock private UserSession userSession;
	@InjectMocks private NewForumGroupPermissionsEvent event;

	@Test
	public void added() {
		Group group1 = createGroupWithRole(1, SecurityConstants.ADMINISTRATOR, SecurityConstants.APPROVE_MESSAGES);
		Group group2 = createGroupWithRole(2, SecurityConstants.CO_ADMINISTRATOR);
		Group group3 = createGroupWithRole(3, SecurityConstants.CATEGORY);
		Group group4 = createGroupWithRole(4, SecurityConstants.FORUM);

		when(groupRepository.getAllGroups()).thenReturn(Arrays.asList(group1, group2, group3, group4));

		User user = new User();
		user.getGroups().add(group2);
		user.getGroups().add(group4);

		when(userSession.getUser()).thenReturn(user);
		
		Forum forum = new Forum();
		forum.setId(1);

		event.added(forum);

		verify(groupService).appendRole(group1, SecurityConstants.FORUM, 1);
		verify(groupService).appendRole(group2, SecurityConstants.FORUM, 1);
	}

	private Group createGroupWithRole(int groupId, String... roleNames) {
		Group g = new Group();
		g.setId(groupId);

		for (String roleName : roleNames) {
			Role r = new Role();
			r.setName(roleName);

			g.addRole(r);
		}

		return g;
	}
}"
net.jforum.util.TestCaseUtils,"public class TestCaseUtils {
	/**
	 * Retrive the root directory of the application
	 * @return The application root
	 */
	public static String getApplicationRoot() {
		String filePath = TestCaseUtils.class.getResource(""."").getFile();
		int index = filePath.indexOf(""/target/test"");
		return filePath.substring(0, index)+""/src/main"";
	}

	/**
	 * Executd a private method
	 * @param methodName the method name
	 * @param instance the instance the method belongs to
	 * @param args the (optional) arguments passd to the method
	 * @return the method original return type.
	 * @throws Exception
	 */
	public static Object executePrivateMethod(String methodName, Object instance, Object... args) throws Exception {
		Method method = searchMethod(methodName, instance.getClass());

		if (method == null) {
			method = searchMethod(methodName, instance.getClass().getSuperclass());
		}

		if (method != null) {
			return method.invoke(instance, args);
		}

		throw new IllegalArgumentException(""Method not found"");
	}

	private static Method searchMethod(String methodName, Class<?> klass) {
		for (Method method : klass.getDeclaredMethods()) {
			if (method.getName().equals(methodName)) {
				method.setAccessible(true);
				return method;
			}
		}

		return null;
	}

	public static Object getPrivateField(String fieldName, Object instance) throws Exception {
		for (Field field : instance.getClass().getDeclaredFields()) {
			if (field.getName().equals(fieldName)) {
				field.setAccessible(true);
				return field.get(instance);
			}
		}

		throw new IllegalArgumentException(""Field not found"");
	}

	public static void copyFile(File in, File out) {
		try {
			FileInputStream fis = new FileInputStream(in);
			FileOutputStream fos = new FileOutputStream(out);

			byte[] buf = new byte[1024];
			int i = 0;

			while ((i = fis.read(buf)) != -1) {
				fos.write(buf, 0, i);
			}

			fis.close();
			fos.close();
		}
		catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
}"
net.jforum.util.GroupInteractionFilterTestCase,"public class GroupInteractionFilterTestCase {
	
	@Mock private UserSession userSession;
	@Spy private MockResult mockResult;

	@Test
	public void filterForumListing() {
		User u1 = new User(); User u2 = new User(); User u3 = new User();

		Group g1 = new Group(); g1.setId(1);
		Group g2 = new Group(); g2.setId(2);
		Group g3 = new Group(); g3.setId(3);

		u1.addGroup(g1);
		u2.addGroup(g1); u2.addGroup(g2);
		u3.addGroup(g3);

		final UserSession us1 = new UserSession(); us1.setSessionId(""1""); us1.setUser(u1);
		final UserSession us2 = new UserSession(); us2.setSessionId(""2""); us2.setUser(u2);
		final UserSession us3 = new UserSession(); us3.setSessionId(""3""); us3.setUser(u3);

		when(userSession.getUser()).thenReturn(u1);

		Map<String, Object> m = new HashMap<String, Object>();
		m.put(""onlineUsers"", Arrays.asList(us1, us2, us3));
		when(mockResult.included()).thenReturn(m);
		
		GroupInteractionFilter filter = new GroupInteractionFilter();
		filter.filterForumListing(mockResult, userSession);
		
		assertEquals(2, mockResult.included(""totalLoggedUsers""));
		assertEquals(new HashSet<UserSession>(Arrays.asList(us1, us2)), mockResult.included(""onlineUsers""));
	}
}"
net.jforum.util.JDBCLoader,"public class JDBCLoader {
	private static final Logger logger = Logger.getLogger(JDBCLoader.class);
	private Session session;

	public JDBCLoader(Session session) {
		this.session = session;
	}

	/**
	 * The sql file to load, relative to the classpath
	 * @param sqlfile
	 */
	public void run(String sqlfile) {
		BufferedReader reader = null;
		FileReader fileReader = null;

		try {
			fileReader = new FileReader(this.getClass().getResource(sqlfile).getFile());
			reader = new BufferedReader(fileReader);

			String line = null;

			while ((line = reader.readLine()) != null) {
				if (!StringUtils.isEmpty(line)) {
					logger.debug(""JDBCLoader: [Running] "" + line);
					this.runStatement(line);
				}
			}
		}
		catch (Exception e) {
			throw new RuntimeException(e);
		}
		finally {
			if (fileReader != null) {
				try { fileReader.close(); }
				catch (Exception e) {}
			}

			if (reader != null) {
				try { reader.close(); }
				catch (Exception e) {}
			}
		}
	}

	private void runStatement(String sql) throws SQLException {
		SQLQuery query = session.createSQLQuery(sql);
		query.executeUpdate();
	}
}"
net.jforum.util.SafeHtmlTestCase,"public class SafeHtmlTestCase {
	@Mock private JForumConfig config;
	private SafeHtml safeHtml;

	@Before
	public void setUp() throws Exception {
		when(config.containsKey(ConfigKeys.HTML_TAGS_WELCOME)).thenReturn(true);
		when(config.containsKey(ConfigKeys.HTML_ATTRIBUTES_WELCOME)).thenReturn(true);
		when(config.containsKey(ConfigKeys.HTML_LINKS_ALLOW_PROTOCOLS)).thenReturn(true);
		when(config.getValue(ConfigKeys.HTML_TAGS_WELCOME)).thenReturn(""u, a, img, i, u, li, ul, font, br, p, b, hr"");
		when(config.getValue(ConfigKeys.HTML_ATTRIBUTES_WELCOME)).thenReturn(""src, href, size, face, color, target, rel"");
		when(config.getValue(ConfigKeys.HTML_LINKS_ALLOW_PROTOCOLS)).thenReturn(""http://, https://, mailto:, ftp://"");
		when(config.getBoolean(ConfigKeys.HTML_LINKS_ALLOW_RELATIVE)).thenReturn(true);
		
		safeHtml = new SafeHtml(config);
	}
	
	@Test
	public void javascriptInsideURLTagExpectItToBeRemoved() {
		String input = ""<a class=\""snap_shots\"" rel=\""nofollow\"" target=\""_new\"" onmouseover=\""javascript:alert('test2');\"" href=\""before\"">test</a>"";
		String expected = ""<a class=\""snap_shots\"" rel=\""nofollow\"" target=\""_new\""  >test</a>"";

		String result = safeHtml.ensureAllAttributesAreSafe(input);

		assertEquals(expected, result);
	}

	@Test
	public void javascriptInsideImageTagExpectItToBeRemoved() {
		String input = ""<img border=\""0\"" onmouseover=\""javascript:alert('buuuh!!!');\""\""\"" src=\""javascript:alert('hi from an alert!');\""/>"";
		String expected = ""<img border=\""0\"" \""\"" />"";

		String result = safeHtml.ensureAllAttributesAreSafe(input);

		assertEquals(expected, result);
	}

	@Test
	public void iframe() {
		String input = ""<iframe src='http://www.google.com' onload='javascript:parent.document.body.style.display=\'none\'; alert(\'where is the forum?\'); ' style='display:none;'></iframe>"";
		String expected = ""&lt;iframe src='http://www.google.com' onload='javascript:parent.document.body.style.display=\'none\'; alert(\'where is the forum?\'); ' style='display:none;'&gt;&lt;/iframe&gt;"";

		String result = safeHtml.makeSafe(input);
				
		assertEquals(expected, result);
	}

	@Test
	public void makeSafe() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append(""<a href='http://somelink'>Some Link</a>"");
		sb.append(""bla <b>bla</b> <pre>code code</pre>"");
		sb.append(""<script>document.location = 'xxx';</script>"");
		sb.append(""<img src='http://imgPath' onLoad='window.close();'>"");
		sb.append(""<a href='javascript:alert(bleh)'>xxxx</a>"");
		sb.append(""<img src='javascript:alert(bloh)'>"");
		sb.append(""<img src=\""&#106ava&#115cript&#58aler&#116&#40&#39Oops&#39&#41&#59\"">"");
		sb.append(""\""> TTTTT <"");
		sb.append(""<img src='http://some.image' onLoad=\""javascript:alert('boo')\"">"");
		sb.append(""<b>heeelooo, nurse</b>"");
		sb.append(""<b style='some style'>1, 2, 3</b>"");
		String input = sb.toString();

		sb = new StringBuilder();
		sb.append(""<a href='http://somelink'>Some Link</a>"");
		sb.append(""bla <b>bla</b> &lt;pre&gt;code code&lt;/pre&gt;"");
		sb.append(""&lt;script&gt;document.location = 'xxx';&lt;/script&gt;"");
		sb.append(""<img src='http://imgPath' >"");
		sb.append(""<a >xxxx</a>"");
		sb.append(""<img >"");
		sb.append(""<img >"");
		sb.append(""&quot;&gt; TTTTT &lt;"");
		sb.append(""<img src='http://some.image' >"");
		sb.append(""<b>heeelooo, nurse</b>"");
		sb.append(""<b >1, 2, 3</b>"");
		String expected = sb.toString();

		String result = safeHtml.makeSafe(input);
				
		assertEquals(expected, result);
	}
}"
net.jforum.util.I18nTestCase,"public class I18nTestCase {
	@Mock private JForumConfig config;
	private I18n i18n;

	@Before
	public void setUp() throws Exception {
		String applicationPath = TestCaseUtils.getApplicationRoot();

		when(config.getApplicationPath()).thenReturn(applicationPath);
		when(config.getValue(ConfigKeys.I18N_DEFAULT_ADMIN)).thenReturn(""default"");
		when(config.getValue(ConfigKeys.I18N_DEFAULT)).thenReturn(""default"");
		
		i18n = new I18n(config);
	}

	@Test
	public void loadExpectDefaultLanguageToBeLoaded() throws Exception {
		assertTrue(i18n.isLanguageLoaded(""default""));
	}

	@Test
	public void allDefaultKeysShouldBeCorrectlyLoadedAndRetrieved() {
		assertEquals(""default value 1"", i18n.getMessage(""defaultKey1""));
		assertEquals(""default value 2"", i18n.getMessage(""defaultKey2""));
		assertEquals(""default value 3"", i18n.getMessage(""defaultKey3""));
		assertEquals(""default value 4"", i18n.getMessage(""defaultKey4""));
		assertEquals(""default value 5"", i18n.getMessage(""defaultKey5""));
	}

	@Test
	public void loadCheeseLanguageExpectSuccess() throws Exception {
		assertFalse(i18n.isLanguageLoaded(""cheese""));
		i18n.load(""cheese"");
		assertTrue(i18n.isLanguageLoaded(""cheese""));
	}

	@Test
	public void retrieveCheeseKeysExpectSuccessAndKey5ShouldBeDefault() {
		assertEquals(""default cheese 1"", i18n.getMessage(""defaultKey1"", ""cheese""));
		assertEquals(""default cheese 2"", i18n.getMessage(""defaultKey2"", ""cheese""));
		assertEquals(""default cheese 3"", i18n.getMessage(""defaultKey3"", ""cheese""));
		assertEquals(""default cheese 4"", i18n.getMessage(""defaultKey4"", ""cheese""));
		assertEquals(""default value 5"", i18n.getMessage(""defaultKey5"", ""cheese""));
	}

	@Test
	public void loadOrangeLanguageExpectSuccess() throws Exception {
		assertFalse(i18n.isLanguageLoaded(""orange""));
		i18n.load(""orange"");
		assertTrue(i18n.isLanguageLoaded(""orange""));
	}

	@Test
	public void retrieveOrangeKeysExpectSuccessAndTwoDefaultValuesAndOneExtraOrangeKey() {
		assertEquals(""default orange 1"", i18n.getMessage(""defaultKey1"", ""orange""));
		assertEquals(""default orange 2"", i18n.getMessage(""defaultKey2"", ""orange""));
		assertEquals(""default orange 3"", i18n.getMessage(""defaultKey3"", ""orange""));
		assertEquals(""default value 4"", i18n.getMessage(""defaultKey4"", ""orange""));
		assertEquals(""default value 5"", i18n.getMessage(""defaultKey5"", ""orange""));
		assertEquals(""orange is not cheese"", i18n.getMessage(""orange"", ""orange""));
	}

	@Test
	public void orangeIsDefault() {
		assertFalse(i18n.isLanguageLoaded(""orange""));
		i18n.changeBoardDefaultLanguage(""orange"");
		assertTrue(i18n.isLanguageLoaded(""default""));
		assertTrue(i18n.isLanguageLoaded(""orange""));
		this.retrieveOrangeKeysExpectSuccessAndTwoDefaultValuesAndOneExtraOrangeKey();
	}
}"
net.jforum.util.mail.TopicReplySpammerTestCase,"public class TopicReplySpammerTestCase extends MailTestCase {
	
	@Mock private TopicRepository repository;

	@Test
	public void send() {
		when(repository.getTotalPosts(notNull(Topic.class))).thenReturn(10);
		
		TopicReplySpammer spammer = new TopicReplySpammer(config);
		List<User> users = new ArrayList<User>();

		User u1 = new User(); u1.setEmail(""email@addres.verify"");
		User u2 = new User(); u2.setEmail(""email@addres.two"");

		users.add(u1); users.add(u2);

		Topic topic = new Topic(repository); topic.setId(1); topic.setSubject(""subject x"");
		topic.setLastPost(new Post()); topic.getLastPost().setId(123);

		spammer.prepare(topic, users);

		SimpleSmtpServer server = null;

		try {
			server = SimpleSmtpServer.start(config.getInt(ConfigKeys.MAIL_SMTP_PORT));
			spammer.dispatchMessages();
		}
		finally {
			if (server != null) {
				server.stop();
			}
		}

		Assert.assertEquals(2, server.getReceivedEmailSize());
		SmtpMessage message = (SmtpMessage)server.getReceivedEmail().next();
		Assert.assertTrue(message.getBody().indexOf(""subject x"") > -1);
		Assert.assertTrue(message.getBody().indexOf(""http://localhost/topics/list/1.page#123"") > -1);
		Assert.assertTrue(message.getBody().indexOf(""http://localhost/topics/unwatch/1.page"") > -1);
	}
}"
net.jforum.util.mail.LostPasswordSpammerTestCase,"public class LostPasswordSpammerTestCase extends MailTestCase {
	@Test
	public void send() {
		LostPasswordSpammer spammer = new LostPasswordSpammer(config);

		User user = new User();
		user.setEmail(""email@addres.one"");
		user.setActivationKey(""123"");

		spammer.prepare(user, ""lost subject"");

		SimpleSmtpServer server = null;

		try {
			server = SimpleSmtpServer.start(config.getInt(ConfigKeys.MAIL_SMTP_PORT));
			spammer.dispatchMessages();
		}
		finally {
			if (server != null) {
				server.stop();
			}
		}

		Assert.assertEquals(1, server.getReceivedEmailSize());
		SmtpMessage message = (SmtpMessage)server.getReceivedEmail().next();
		Assert.assertTrue(message.getBody().indexOf(""http://localhost/user/recoverPassword/123.page"") > -1);
	}
}"
net.jforum.util.mail.MailTestCase,"public abstract class MailTestCase {
	
	protected JForumConfig config = mock(JForumConfig.class);

	@Before
	public void setup() {
		when(config.getBoolean(ConfigKeys.MAIL_SMTP_SSL)).thenReturn(false);
		when(config.getValue(ConfigKeys.MAIL_SMTP_LOCALHOST)).thenReturn(""localhost"");
		when(config.getValue(ConfigKeys.MAIL_SMTP_AUTH)).thenReturn(""true"");
		when(config.getBoolean(ConfigKeys.MAIL_SMTP_AUTH)).thenReturn(true);
		when(config.getValue(ConfigKeys.MAIL_SMTP_PORT)).thenReturn(""25123"");
		when(config.getInt(ConfigKeys.MAIL_SMTP_PORT)).thenReturn(25123);
		when(config.getValue(ConfigKeys.MAIL_SMTP_HOST)).thenReturn(""127.0.0.1"");
		when(config.getValue(ConfigKeys.MAIL_CHARSET)).thenReturn(""ISO-8859-1"");
		when(config.getValue(ConfigKeys.MAIL_SMTP_USERNAME)).thenReturn(""username"");
		when(config.getValue(ConfigKeys.MAIL_SMTP_PASSWORD)).thenReturn(""password"");
		when(config.getValue(ConfigKeys.MAIL_MESSSAGE_FORMAT)).thenReturn(""text"");
		when(config.getInt(ConfigKeys.MAIL_SMTP_DELAY)).thenReturn(0);
		when(config.getValue(ConfigKeys.FORUM_NAME)).thenReturn(""forum name"");
		when(config.getValue(ConfigKeys.MAIL_SENDER)).thenReturn(""sender@example.com"");
		when(config.getValue(ConfigKeys.FORUM_LINK)).thenReturn(""http://localhost"");
		when(config.getInt(ConfigKeys.POSTS_PER_PAGE)).thenReturn(10);
		when(config.getValue(ConfigKeys.MAIL_NEW_ANSWER_SUBJECT)).thenReturn(""new reply"");
		when(config.getValue(ConfigKeys.SERVLET_EXTENSION)).thenReturn("".page"");
		when(config.getValue(ConfigKeys.APPLICATION_PATH)).thenReturn(TestCaseUtils.getApplicationRoot());
		when(config.getValue(ConfigKeys.MAIL_NEW_ANSWER_MESSAGE_FILE)).thenReturn(""/webapp/templates/mail/mailNewReply.txt"");
		when(config.getValue(ConfigKeys.MAIL_LOST_PASSWORD_MESSAGE_FILE)).thenReturn(""/webapp/templates/mail/lostPassword.txt"");
		when(config.getInt(ConfigKeys.MAIL_BATCH_SIZE)).thenReturn(50);
	}
}"
net.jforum.security.ModerationRuleTestCase,"public class ModerationRuleTestCase {

	@Mock private UserSession userSession;
	@Mock private RoleManager roleManager;
	@Mock private HttpServletRequest request;
	private ModerationRule rule = new ModerationRule();

	@Test
	public void moderatorShouldProceed() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isModerator()).thenReturn(true);

		assertTrue(rule.shouldProceed(userSession, request));
	}

	@Test
	public void notModeratorShouldDeny() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isModerator()).thenReturn(false);

		assertFalse(rule.shouldProceed(userSession, request));
	}
}"
net.jforum.security.RoleManagerTestCase,"public class RoleManagerTestCase {
	@Test
	public void readOnlyGroupACantAccessForumGroupBIsReadOnlyShoudlNotBeAbleToCreateTopics() {
		Group g1 = new Group();
		g1.addRole(this.newRole(SecurityConstants.FORUM_READ_ONLY, Arrays.asList(1)));
		g1.addRole(this.newRole(SecurityConstants.FORUM_REPLY_ONLY, Arrays.asList(5)));
		g1.addRole(this.newRole(SecurityConstants.FORUM, Arrays.asList(1)));
		g1.addRole(this.newRole(SecurityConstants.FORUM, Arrays.asList(5)));

		Group g2 = new Group();
		g2.addRole(this.newRole(""some role""));

		RoleManager manager = new RoleManager();
		manager.setGroups(Arrays.asList(g1, g2));

		Assert.assertTrue(manager.isForumAllowed(1));
		Assert.assertTrue(manager.isForumReadOnly(1));
		Assert.assertTrue(manager.isForumReplyOnly(5));
	}

	@Test
	public void readReplyOnlyShouldRetainOnlyCommonValues() {
		Group g1 = new Group();
		g1.addRole(this.newRole(SecurityConstants.FORUM_READ_ONLY, Arrays.asList(1, 2, 3)));
		g1.addRole(this.newRole(SecurityConstants.FORUM_REPLY_ONLY, Arrays.asList(7)));

		Group g2 = new Group();
		g2.addRole(this.newRole(SecurityConstants.FORUM_READ_ONLY, Arrays.asList(2, 3)));
		g2.addRole(this.newRole(SecurityConstants.FORUM_REPLY_ONLY, Arrays.asList(7, 9)));

		Group g3 = new Group();
		g3.addRole(this.newRole(SecurityConstants.FORUM_READ_ONLY, Arrays.asList(3)));
		g3.addRole(this.newRole(SecurityConstants.FORUM_REPLY_ONLY, Arrays.asList(9, 13, 14)));

		RoleManager manager = new RoleManager();
		manager.setGroups(Arrays.asList(g1, g2, g3));

		Assert.assertFalse(manager.isForumReadOnly(1));
		Assert.assertFalse(manager.isForumReadOnly(2));
		Assert.assertTrue(manager.isForumReadOnly(3));

		Assert.assertFalse(manager.isForumReplyOnly(7));
		Assert.assertFalse(manager.isForumReplyOnly(9));
		Assert.assertFalse(manager.isForumReplyOnly(13));
		Assert.assertFalse(manager.isForumReplyOnly(14));
	}

	@Test
	public void readReplyOnlyShouldAllowEverything() {
		Group g1 = new Group();
		g1.addRole(this.newRole(SecurityConstants.FORUM, Arrays.asList(1, 2, 3, 7)));
		g1.addRole(this.newRole(SecurityConstants.FORUM_READ_ONLY, Arrays.asList(1, 2, 3)));
		g1.addRole(this.newRole(SecurityConstants.FORUM_REPLY_ONLY, Arrays.asList(7)));

		Group g2 = new Group();
		g2.addRole(this.newRole(SecurityConstants.FORUM, Arrays.asList(1, 2, 3, 7)));
		g2.addRole(this.newRole(""some role""));

		RoleManager manager = new RoleManager();
		manager.setGroups(Arrays.asList(g1, g2));

		Assert.assertFalse(manager.isForumReadOnly(1));
		Assert.assertFalse(manager.isForumReadOnly(2));
		Assert.assertFalse(manager.isForumReadOnly(3));
		Assert.assertFalse(manager.isForumReadOnly(7));
		Assert.assertFalse(manager.isForumReplyOnly(7));
		Assert.assertTrue(manager.roleExists(""some role""));
	}

	@Test
	public void singleRoleExists() {
		Group g = new Group(); g.addRole(this.newRole(""role1""));
		RoleManager manager = new RoleManager(); manager.setGroups(Arrays.asList(g));
		Assert.assertTrue(manager.roleExists(""role1""));
	}

	@Test
	public void roleWithValuesExists() {
		Group g = new Group(); g.addRole(this.newRole(""role1"", Arrays.asList(1, 2)));
		RoleManager manager = new RoleManager(); manager.setGroups(Arrays.asList(g));
		Assert.assertTrue(manager.roleExists(""role1""));
		Assert.assertTrue(manager.roleExists(""role1"", 1));
		Assert.assertTrue(manager.roleExists(""role1"", 2));
		Assert.assertFalse(manager.roleExists(""role1"", 3));
	}

	@Test
	public void twoGroupsSameRoleWithDifferentValuesShouldMerge() {
		Group g1 = new Group(); g1.addRole(this.newRole(""role1"", Arrays.asList(1, 2)));
		Group g2 = new Group(); g2.addRole(this.newRole(""role1"", Arrays.asList(2, 3, 4)));
		RoleManager manager = new RoleManager(); manager.setGroups(Arrays.asList(g1, g2));
		Assert.assertTrue(manager.roleExists(""role1""));
		Assert.assertTrue(manager.roleExists(""role1"", 1));
		Assert.assertTrue(manager.roleExists(""role1"", 2));
		Assert.assertTrue(manager.roleExists(""role1"", 3));
		Assert.assertTrue(manager.roleExists(""role1"", 4));
	}

	@Test
	public void twoGroupsUniqueRoles() {
		Group g1 = new Group(); g1.addRole(this.newRole(""role1""));
		Group g2 = new Group(); g2.addRole(this.newRole(""role2""));
		RoleManager manager = new RoleManager(); manager.setGroups(Arrays.asList(g1, g2));
		Assert.assertTrue(manager.roleExists(""role1""));
		Assert.assertTrue(manager.roleExists(""role2""));
	}

	@Test
	public void twoGroupsSameRoleShouldExist() {
		Group g1 = new Group(); g1.addRole(this.newRole(""role1""));
		Group g2 = new Group(); g2.addRole(this.newRole(""role1""));
		RoleManager manager = new RoleManager(); manager.setGroups(Arrays.asList(g1, g2));
		Assert.assertTrue(manager.roleExists(""role1""));
	}

	private Role newRole(String name, List<Integer> values) {
		Role role = new Role();
		role.setName(name);
		role.getRoleValues().addAll(values);
		return role;
	}

	private Role newRole(String name) {
		Role role = new Role();
		role.setName(name);
		return role;
	}
}"
net.jforum.security.EditUserRuleTestCase,"public class EditUserRuleTestCase {

	@Mock private UserSession userSession;
	@Mock private HttpServletRequest request;
	@Mock private RoleManager roleManager;
	@Mock private UserRepository userRepository;
	@InjectMocks private EditUserRule rule;
	private Map<String, String[]> parameterMap;

	@Before
	public void setup() {
		parameterMap = new HashMap<String, String[]>();
		parameterMap.put(""userId"", Arrays.asList(""1"").toArray(new String[1]));
		when(request.getParameterMap()).thenReturn(parameterMap);
		when(userSession.getRoleManager()).thenReturn(roleManager);
	}
	
	@Test
	public void loggedSameUserIdExpectSuccess() {
		when(request.getParameter(""userId"")).thenReturn(""1"");
		when(userSession.isLogged()).thenReturn(true);

		User user = new User(); user.setId(1);
		when(userSession.getUser()).thenReturn(user);

		assertTrue(rule.shouldProceed(userSession, request));
	}

	@Test
	public void loggedDifferentUserIdIsAdministratorExpectSuccess() {
		when(request.getParameter(""userId"")).thenReturn(""1"");
		when(userSession.isLogged()).thenReturn(true);

		User currentUser = new User(); currentUser.setId(9);
		when(userSession.getUser()).thenReturn(currentUser);

		User user1 = new User(); user1.setId(1);
		when(userRepository.get(1)).thenReturn(user1);

		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.getCanEditUser(user1, currentUser.getGroups())).thenReturn(true);


		boolean shouldProceed = rule.shouldProceed(userSession, request);

		assertTrue(shouldProceed);
	}

	@Test
	public void notLoggedShouldDeny() {
		when(request.getParameter(""userId"")).thenReturn(""1"");
		when(userSession.isLogged()).thenReturn(false);

		boolean shouldProceed = rule.shouldProceed(userSession, request);

		assertFalse(shouldProceed);
	}

	@Test(expected = AccessRuleException.class)
	public void doestNotHaveUserIdExpectsException() {
		parameterMap.clear();
		
		rule.shouldProceed(userSession, request);
	}

	@Test
	public void containsUserDotId() {
		parameterMap.clear(); parameterMap.put(""user.id"", Arrays.asList(""1"").toArray(new String[1]));
		when(request.getParameter(""user.id"")).thenReturn(""1"");
		when(userRepository.get(1)).thenReturn(new User());

		rule.shouldProceed(userSession, request);
	}

	@Test
	public void containsUserId() {
		when(request.getParameter(""userId"")).thenReturn(""1"");
		when(userRepository.get(1)).thenReturn(new User());

		rule.shouldProceed(userSession, request);
	}

}"
net.jforum.security.AdministrationRuleTestCase,"public class AdministrationRuleTestCase {

	@Mock private UserSession userSession;
	@Mock private HttpServletRequest request;
	@Mock private RoleManager roleManager;
	private AdministrationRule rule = new AdministrationRule();

	@Test
	public void loggedIsAdministratorShouldAccept() {
		when(userSession.isLogged()).thenReturn(true);
		when(roleManager.isAdministrator()).thenReturn(true);

		assertTrue(rule.shouldProceed(userSession, request));
	}

	@Test
	public void loggedIsCoAdministratorShouldAccept() {
		when(userSession.isLogged()).thenReturn(true);
		when(roleManager.isAdministrator()).thenReturn(false);
		when(roleManager.isCoAdministrator()).thenReturn(true);


		assertTrue(rule.shouldProceed(userSession, request));
	}

	@Test
	public void notAdministratorShouldDeny() {
		when(userSession.isLogged()).thenReturn(true);
		when(roleManager.isAdministrator()).thenReturn(false);
		when(roleManager.isCoAdministrator()).thenReturn(false);

		assertFalse(rule.shouldProceed(userSession, request));
	}

	@Test
	public void notLoggedShouldDeny() {
		when(userSession.isLogged()).thenReturn(false);

		assertFalse(rule.shouldProceed(userSession, request));
	}

	@Before
	public void setup() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
	}
}"
net.jforum.security.PrivateMessageOwnerRuleTestCase,"public class PrivateMessageOwnerRuleTestCase {
	
	@Mock private UserSession userSession;
	@Mock private HttpServletRequest request;
	@Mock private PrivateMessageRepository repository;
	@InjectMocks private PrivateMessageOwnerRule rule;
	private Map<String, String[]> parameters;
	
	@Before
	public void setup() {
		parameters = new HashMap<String, String[]>();
		parameters.put(""id"", Arrays.asList(""1"").toArray(new String[1]));
		when(request.getParameterMap()).thenReturn(parameters);
		when(request.getParameter(""id"")).thenReturn(""1"");
	}

	@Test
	public void invalidMessageShouldDeny() {
		
		when(repository.get(1)).thenReturn(null);
		when(userSession.getUser()).thenReturn(new User());
		
		assertFalse(rule.shouldProceed(userSession, request));
	}

	@Test
	public void toUserDifferentFromCurrentUserAlsoNotSenderShouldDeny() {
		PrivateMessage pm = new PrivateMessage();
		User user1 = new User();
		user1.setId(1);
		User user2 = new User();
		user1.setId(2);
		User user3 = new User();
		user1.setId(3);
		
		pm.setToUser(user2);
		pm.setFromUser(user3);
		when(userSession.getUser()).thenReturn(user1);
		when(repository.get(1)).thenReturn(pm);
		
		assertFalse(rule.shouldProceed(userSession, request));
	}

	@Test
	public void toUserDifferentFromCurrentUserIsSenderShouldAccept() {
		PrivateMessage pm = new PrivateMessage();
		User user1 = new User();
		user1.setId(1);
		User user2 = new User();
		user1.setId(2);
		
		pm.setToUser(user2);
		pm.setFromUser(user1);
		when(userSession.getUser()).thenReturn(user1);
		when(repository.get(1)).thenReturn(pm);
		
		assertTrue(rule.shouldProceed(userSession, request));
		
	}

	@Test(expected = AccessRuleException.class)
	public void idNotFoundExpectException() {
		parameters.clear();
		rule.shouldProceed(userSession, request);
	}
}"
net.jforum.security.CreateNewTopicRuleTestCase,"public class CreateNewTopicRuleTestCase {

	@Mock private UserSession userSession;
	@Mock private HttpServletRequest request;
	@Mock private RoleManager roleManager;
	private Map<String, String[]> parameterMap;
	@Mock private ForumRepository repository;
	@Mock private SessionManager sessionManager;

	@Before
	public void setup() {
		parameterMap = new HashMap<String, String[]>();
		parameterMap.put(""forumId"", Arrays.asList(""1"").toArray(new String[1]));
		when(request.getParameterMap()).thenReturn(parameterMap);
		when(userSession.getRoleManager()).thenReturn(roleManager);
	}

	@Test
	public void findForumIdInTopicForumId() {
		parameterMap.clear();
		parameterMap.put(""topic.forum.id"", Arrays.asList(""1"").toArray(new String[1]));

		when(request.getParameter(""topic.forum.id"")).thenReturn(""1"");
		when(repository.get(1)).thenReturn(new Forum());

		CreateNewTopicRule rule = new CreateNewTopicRule(repository, sessionManager);
		rule.shouldProceed(userSession, request);
	}

	@Test
	public void findForumIdKey() {
		when(request.getParameter(""forumId"")).thenReturn(""1"");
		when(repository.get(1)).thenReturn(new Forum());

		CreateNewTopicRule rule = new CreateNewTopicRule(repository, sessionManager);
		rule.shouldProceed(userSession, request);
	}

	@Test(expected = AccessRuleException.class)
	public void forumIdNotFoundExpectsException() {
		parameterMap.clear();

		CreateNewTopicRule rule = new CreateNewTopicRule(repository, sessionManager);
		rule.shouldProceed(userSession, request);
	}

	@Test
	public void loggedNotReadOnlyNotReplyOnlyForumAllowedShouldAccept() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(request.getParameter(""forumId"")).thenReturn(""1"");
		when(userSession.isLogged()).thenReturn(true);
		when(roleManager.isForumAllowed(1)).thenReturn(true);
		when(roleManager.isForumReadOnly(1)).thenReturn(false);
		when(roleManager.isForumReplyOnly(1)).thenReturn(false);
		when(roleManager.getPostOnlyWithModeratorOnline()).thenReturn(false);
		when(repository.get(1)).thenReturn(new Forum());

		CreateNewTopicRule rule = new CreateNewTopicRule(repository, sessionManager);
		assertTrue(rule.shouldProceed(userSession, request));
	}

	@Test
	public void postOnlyWithModeratorOnlineModeratorIsOffLineShouldDeny() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(request.getParameter(""forumId"")).thenReturn(""1"");
		when(userSession.isLogged()).thenReturn(true);
		when(roleManager.isForumAllowed(1)).thenReturn(true);
		when(roleManager.isForumReadOnly(1)).thenReturn(false);
		when(roleManager.isForumReplyOnly(1)).thenReturn(false);
		when(roleManager.getPostOnlyWithModeratorOnline()).thenReturn(true);
		when(sessionManager.isModeratorOnline()).thenReturn(false);
		when(repository.get(1)).thenReturn(new Forum());

		CreateNewTopicRule rule = new CreateNewTopicRule(repository, sessionManager);
		assertFalse(rule.shouldProceed(userSession, request));
	}

	@Test
	public void postOnlyWithModeratorOnlineModeratorIsOnlineShouldAccept() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(request.getParameter(""forumId"")).thenReturn(""1"");
		when(userSession.isLogged()).thenReturn(true);
		when(roleManager.isForumAllowed(1)).thenReturn(true);
		when(roleManager.isForumReadOnly(1)).thenReturn(false);
		when(roleManager.isForumReplyOnly(1)).thenReturn(false);
		when(roleManager.getPostOnlyWithModeratorOnline()).thenReturn(true);
		when(sessionManager.isModeratorOnline()).thenReturn(true);
		when(repository.get(1)).thenReturn(new Forum());

		CreateNewTopicRule rule = new CreateNewTopicRule(repository, sessionManager);
		assertTrue(rule.shouldProceed(userSession, request));
	}

	@Test
	public void anonymousPostsNotAllowedShouldDeny() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(request.getParameter(""forumId"")).thenReturn(""1"");
		when(userSession.isLogged()).thenReturn(false);
		when(roleManager.isForumAllowed(1)).thenReturn(true);

		Forum forum = new Forum();
		forum.setAllowAnonymousPosts(false);
		when(repository.get(1)).thenReturn(forum);

		CreateNewTopicRule rule = new CreateNewTopicRule(repository, sessionManager);
		assertFalse(rule.shouldProceed(userSession, request));
	}

	@Test
	public void forumReplyOnlyShouldDeny() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(request.getParameter(""forumId"")).thenReturn(""1"");
		when(userSession.isLogged()).thenReturn(true);
		when(roleManager.isForumAllowed(1)).thenReturn(true);
		when(roleManager.isForumReadOnly(1)).thenReturn(false);
		when(roleManager.isForumReplyOnly(1)).thenReturn(true);
		when(repository.get(1)).thenReturn(new Forum());

		CreateNewTopicRule rule = new CreateNewTopicRule(repository, sessionManager);
		assertFalse(rule.shouldProceed(userSession, request));
	}

	@Test
	public void forumNotAllowedShouldDeny() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(request.getParameter(""forumId"")).thenReturn(""1"");
		when(roleManager.isForumAllowed(1)).thenReturn(false);
		when(repository.get(1)).thenReturn(new Forum());

		CreateNewTopicRule rule = new CreateNewTopicRule(repository, sessionManager);
		assertFalse(rule.shouldProceed(userSession, request));
	}

	@Test
	public void forumReadOnlyShouldDeny() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(request.getParameter(""forumId"")).thenReturn(""1"");
		when(userSession.isLogged()).thenReturn(true);
		when(roleManager.isForumAllowed(1)).thenReturn(true);
		when(roleManager.isForumReadOnly(1)).thenReturn(true);
		when(repository.get(1)).thenReturn(new Forum());

		CreateNewTopicRule rule = new CreateNewTopicRule(repository, sessionManager);
		assertFalse(rule.shouldProceed(userSession, request));
	}
}"
net.jforum.security.PrivateMessageEnabledRuleTestCase,"public class PrivateMessageEnabledRuleTestCase {

	@Mock private UserSession userSession;
	@Mock private RoleManager roleManager;
	private PrivateMessageEnabledRule rule = new PrivateMessageEnabledRule();

	@Test
	public void shouldProceed() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isPrivateMessageEnabled()).thenReturn(true);

		assertTrue(rule.shouldProceed(userSession, null));
	}
}"
net.jforum.security.AuthenticatedRuleTestCase,"public class AuthenticatedRuleTestCase {

	@Mock private UserSession userSession;
	@Mock private HttpServletRequest request;
	private AuthenticatedRule rule = new AuthenticatedRule();

	@Test
	public void notLoggedShouldDeny() {
		when(userSession.isLogged()).thenReturn(false);

		assertFalse(rule.shouldProceed(userSession, request));
	}

	@Test
	public void loggedShouldProceed() {
		when(userSession.isLogged()).thenReturn(true);

		assertTrue(rule.shouldProceed(userSession, request));
	}
}"
net.jforum.security.AccessForumRuleTestCase,"public class AccessForumRuleTestCase {
	
	@Mock private UserSession userSession;
	@Mock private HttpServletRequest request;
	@Mock private RoleManager roleManager;
	@Mock private TopicRepository topicRepository;
	@InjectMocks private AccessForumRule rule;
	private Map<String, String[]> parameterMap;
	
	@Before
	public void setup() {
		parameterMap = new HashMap<String, String[]>();
		parameterMap.put(""topicId"", Arrays.asList(""1"").toArray(new String[1]));
		when(request.getParameterMap()).thenReturn(parameterMap);
	}

	@Test(expected = AccessRuleException.class)
	public void forumIdNotFoundExpectsException() {
		parameterMap.clear();
		
			
		rule.shouldProceed(userSession, request);
	}

	public void forumIdInForumIdParameter() {
		parameterMap.clear(); parameterMap.put(""forumId"", Arrays.asList(""1"").toArray(new String[1]));

		when(request.getParameter(""forumId"")).thenReturn(""1"");
			
		rule.shouldProceed(userSession, request);
	}

	@Test
	public void forumIsAllowedShouldProceed() {
		when(request.getParameter(""topicId"")).thenReturn(""1"");

		Topic topic = new Topic(); topic.getForum().setId(7);

		when(topicRepository.get(1)).thenReturn(topic);
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isForumAllowed(7)).thenReturn(true);
	
		assertTrue(rule.shouldProceed(userSession, request));
	}

	@Test
	public void forumIsBlockedShouldNotProceed() {
		when(request.getParameter(""topicId"")).thenReturn(""1"");

		Topic topic = new Topic(); topic.getForum().setId(7);

		when(topicRepository.get(1)).thenReturn(topic);
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isForumAllowed(7)).thenReturn(false);
	
		Assert.assertFalse(rule.shouldProceed(userSession, request));
		
	}
}"
net.jforum.security.ReplyTopicRuleTestCase,"public class ReplyTopicRuleTestCase {

	@Mock private UserSession userSession;
	@Mock private HttpServletRequest request;
	@Mock private RoleManager roleManager;
	private Map<String, String[]> parameterMap;
	@Mock private TopicRepository topicRepository;
	@Mock private PostRepository postRepository;
	@Mock private ForumRepository forumRepository;
	@Mock private SessionManager sessionManager;
	@InjectMocks private ReplyTopicRule rule;

	@Before
	public void setup() {
		parameterMap = new HashMap<String, String[]>();
		parameterMap.put(""topic.forum.id"", Arrays.asList(""1"").toArray(new String[1]));
		when(request.getParameterMap()).thenReturn(parameterMap);
		when(userSession.getRoleManager()).thenReturn(roleManager);
	}

	@Test(expected = AccessRuleException.class)
	public void forumIdNotFoundExpectsException() {
		parameterMap.clear();

		rule.shouldProceed(userSession, request);
	}

	@Test
	public void forumIdFromPostId() {
		parameterMap.clear(); parameterMap.put(""postId"", Arrays.asList(""2"").toArray(new String[1]));
		when(request.getParameter(""postId"")).thenReturn(""2"");
		when(forumRepository.get(0)).thenReturn(new Forum());
		Post post = new Post(); post.setForum(new Forum());
		when(postRepository.get(2)).thenReturn(post);

		rule.shouldProceed(userSession, request);
	}

	@Test
	public void forumIdFromTopicId() {
		parameterMap.clear(); parameterMap.put(""topicId"", Arrays.asList(""2"").toArray(new String[1]));
		when(request.getParameter(""topicId"")).thenReturn(""2"");
		when(topicRepository.get(2)).thenReturn(new Topic());
		when(forumRepository.get(0)).thenReturn(new Forum());

		rule.shouldProceed(userSession, request);
	}

	@Test
	public void forumIdFromTopicForumId() {
		when(request.getParameter(""topic.forum.id"")).thenReturn(""1"");
		when(forumRepository.get(1)).thenReturn(new Forum());

		rule.shouldProceed(userSession, request);
	}

	@Test
	public void loggedNotReadOnlyForumAllowedShouldAccept() {
		when(request.getParameter(""topic.forum.id"")).thenReturn(""1"");
		when(userSession.isLogged()).thenReturn(true);
		when(roleManager.isForumAllowed(1)).thenReturn(true);
		when(roleManager.isForumReadOnly(1)).thenReturn(false);
		when(roleManager.getPostOnlyWithModeratorOnline()).thenReturn(false);
		when(forumRepository.get(1)).thenReturn(new Forum());

		assertTrue(rule.shouldProceed(userSession, request));
	}

	@Test
	public void postOnlyWithModeratorOnlineModeratorIsOfflineShouldDeny() {
		when(request.getParameter(""topic.forum.id"")).thenReturn(""1"");
		when(userSession.isLogged()).thenReturn(true);
		when(roleManager.isForumAllowed(1)).thenReturn(true);
		when(roleManager.isForumReadOnly(1)).thenReturn(false);
		when(roleManager.getPostOnlyWithModeratorOnline()).thenReturn(true);
		when(sessionManager.isModeratorOnline()).thenReturn(false);
		when(forumRepository.get(1)).thenReturn(new Forum());

		assertFalse(rule.shouldProceed(userSession, request));

	}

	@Test
	public void postOnlyWithModeratorOnlineModeratorIsOnlineShouldAccept() {
		when(request.getParameter(""topic.forum.id"")).thenReturn(""1"");
		when(userSession.isLogged()).thenReturn(true);
		when(roleManager.isForumAllowed(1)).thenReturn(true);
		when(roleManager.isForumReadOnly(1)).thenReturn(false);
		when(roleManager.getPostOnlyWithModeratorOnline()).thenReturn(true);
		when(sessionManager.isModeratorOnline()).thenReturn(true);
		when(forumRepository.get(1)).thenReturn(new Forum());

		assertTrue(rule.shouldProceed(userSession, request));

	}

	@Test
	public void anonymousPostsNotAllowedShouldDeny() {
		when(request.getParameter(""topic.forum.id"")).thenReturn(""1"");
		when(userSession.isLogged()).thenReturn(false);
		when(roleManager.isForumAllowed(1)).thenReturn(true);
		Forum forum = new Forum();
		forum.setAllowAnonymousPosts(false);

		when(forumRepository.get(1)).thenReturn(forum);

		assertFalse(rule.shouldProceed(userSession, request));
	}

	@Test
	public void forumNotAllowedShouldDeny() {
		when(request.getParameter(""topic.forum.id"")).thenReturn(""1"");
		when(roleManager.isForumAllowed(1)).thenReturn(false);
		when(forumRepository.get(1)).thenReturn(new Forum());

		assertFalse(rule.shouldProceed(userSession, request));
	}

	@Test
	public void forumReadOnlyShouldDeny() {
		when(request.getParameterMap()).thenReturn(parameterMap);
		when(request.getParameter(""topic.forum.id"")).thenReturn(""1"");
		when(userSession.isLogged()).thenReturn(true);
		when(roleManager.isForumAllowed(1)).thenReturn(true);
		when(roleManager.isForumReadOnly(1)).thenReturn(true);
		when(forumRepository.get(1)).thenReturn(new Forum());

		assertFalse(rule.shouldProceed(userSession, request));

	}
}"
net.jforum.security.ChangePostRuleTestCase,"public class ChangePostRuleTestCase {
	
	@Mock private UserSession userSession;
	@Mock private HttpServletRequest request;
	@Mock private RoleManager roleManager;
	@Mock private PostRepository repository;
	@Mock private SessionManager sessionManager;
	@InjectMocks private ChangePostRule rule;
	private Map<String, String[]> parameterMap;

	@Before
	public void setup() {
		parameterMap = new HashMap<String, String[]>();
		parameterMap.put(""postId"", Arrays.asList(""1"").toArray(new String[1]));
		when(request.getParameterMap()).thenReturn(parameterMap);
		when(userSession.getRoleManager()).thenReturn(roleManager);
	}
	
	@Test(expected = AccessRuleException.class)
	public void postIdNotFoundExpectsException() {
		parameterMap.clear();

		rule.shouldProceed(userSession, request);
	}

	@Test
	public void postIdInPostIdParameterExpectSuccess() throws Exception {
		when(request.getParameter(""postId"")).thenReturn(""1"");
		
		TestCaseUtils.executePrivateMethod(""findPostId"", rule, request);
	}

	@Test
	public void postIdInPostDotIdParameterExpectSuccess() throws Exception {
		parameterMap.clear(); parameterMap.put(""post.id"", Arrays.asList(""1"").toArray(new String[1]));
		when(request.getParameter(""post.id"")).thenReturn(""1"");
		
		TestCaseUtils.executePrivateMethod(""findPostId"", rule, request);
	}
}"
net.jforum.plugins.post.FourmLimitedTimeDAOTestCase,"public class FourmLimitedTimeDAOTestCase extends AbstractDAOTestCase<ForumLimitedTime> {
	@Test
	@SuppressWarnings(""deprecation"")
	public void getFourmLimitedTime() {
		new JDBCLoader(session())
			.run(""/posteditlimited/dump.sql"");

		ForumLimitedTimeRepository dao = this.newFourmLimitedTimeDAO();
		Forum forum = new Forum();
		forum.setId(2);

		ForumLimitedTime fourmLimitedTime = dao.getForumLimitedTime(forum);

		Assert.assertNotNull(fourmLimitedTime);
		Assert.assertEquals(4, fourmLimitedTime.getId());
	}

	@Test
	@SuppressWarnings(""deprecation"")
	public void getFourmLimitedTimeReturnNullIfNotFound() {
		new JDBCLoader(session())
			.run(""/posteditlimited/dump.sql"");

		ForumLimitedTimeRepository dao = this.newFourmLimitedTimeDAO();
		Forum forum = new Forum();
		forum.setId(5);

		ForumLimitedTime fourmLimitedTime = dao.getForumLimitedTime(forum);

		Assert.assertNull(fourmLimitedTime);
	}

	@Test
	@SuppressWarnings(""deprecation"")
	public void getLimitedTime() {
		new JDBCLoader(session())
		.run(""/posteditlimited/dump.sql"");

		ForumLimitedTimeRepository dao = this.newFourmLimitedTimeDAO();
		Forum forum = new Forum();
		forum.setId(1);

		long limitedTime = dao.getLimitedTime(forum);

		Assert.assertEquals(125, limitedTime);
	}

	@Test
	@SuppressWarnings(""deprecation"")
	public void getLimitedTimeReturn0IfNotFound() {
		new JDBCLoader(session())
		.run(""/posteditlimited/dump.sql"");

		ForumLimitedTimeRepository dao = this.newFourmLimitedTimeDAO();
		Forum forum = new Forum();
		forum.setId(5);

		long limitedTime = dao.getLimitedTime(forum);

		Assert.assertEquals(0, limitedTime);
	}

	private ForumLimitedTimeRepository newFourmLimitedTimeDAO() {
		return new ForumLimitedTimeRepository(session());
	}
}"
net.jforum.plugins.post.ForumAdminTestCase,"public class ForumAdminTestCase {
	

	@Mock private ForumLimitedTimeRepository repository;
	@Mock private JForumConfig config;
	@Mock private ForumRepository forumRepository;
	@Spy private MockResult mockResult;
	@Mock private UserSession userSession;
	@InjectMocks private ForumAdminExtension extension;
	@Mock private RoleManager roleManager;
 
	@Test
	@SuppressWarnings(""serial"")
	public void edit() {
		final int forumId = 1;

		when(config.getBoolean(""forum.time.limited.enable"", false)).thenReturn(true);
		when(forumRepository.get(forumId)).thenReturn(new Forum(1));
		when(repository.getLimitedTime(any(Forum.class))).thenReturn(0L);

		extension.edit(forumId);

		assertEquals(true, mockResult.included(""forumTimeLimitedEnable""));
		assertEquals(0L, mockResult.included(""forumLimitedTime""));

	}

	@Test
	public void add() {
		when(config.getBoolean(""forum.time.limited.enable"", false)).thenReturn(true);

		extension.add();

		assertEquals(true, mockResult.included(""fourmTimeLimitedEnable""));
		assertEquals(0, mockResult.included(""fourmLimitedTime""));
	}

	@Test
	public void editSave() {
		this.securityChecking();
		final Forum forum = new Forum();
		forum.setCategory(new Category());
		final ForumLimitedTime forumLimitedTime = new ForumLimitedTime();

		when(config.getBoolean(""forum.time.limited.enable"", false)).thenReturn(true);
		when(roleManager.isAdministrator()).thenReturn(true);
		when(repository.getForumLimitedTime(forum)).thenReturn(forumLimitedTime);

		extension.editSave(forum, 23);

		verify(repository).saveOrUpdate(forumLimitedTime);
	}

	@Test
	@SuppressWarnings({ ""rawtypes"", ""unchecked"" })
	public void addSave() {
		this.securityChecking();
		final Forum forum = new Forum();
		forum.setId(1);
		Map<String, Object> m = new HashMap<String, Object>();
		m.put(""forum"", forum);

		when(config.getBoolean(""forum.time.limited.enable"", false)).thenReturn(true);
		when(roleManager.isAdministrator()).thenReturn(true);
		when(mockResult.included()).thenReturn(m);

		extension.addSave(23);

		verify(repository).add(any(ForumLimitedTime.class));
	}

	@SuppressWarnings(""serial"")
	@Test
	public void delete() {
		this.securityChecking();
		final Forum forum = new Forum(23);
		ForumLimitedTime forumLimitedTime = new ForumLimitedTime();
		forumLimitedTime.setId(1);
		when(config.getBoolean(""forum.time.limited.enable"", false)).thenReturn(true);
		when(roleManager.isAdministrator()).thenReturn(true);
		when(repository.getForumLimitedTime(forum)).thenReturn(forumLimitedTime);

		extension.delete(23);

		verify(repository).remove(forumLimitedTime);
	}

	private void securityChecking() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(userSession.getUser()).thenReturn(new User());
	}

	@Test
	public void editShouldExtendEdit() throws Exception {
		Method method = extension.getClass().getMethod(""edit"", int.class);
		assertNotNull(method);
		assertTrue(method.isAnnotationPresent(Extends.class));
		assertEquals(Actions.EDIT, method.getAnnotation(Extends.class).value()[0]);
	}

	@Test
	public void editSaveShouldExtendEditSave() throws Exception {
		Method method = extension.getClass().getMethod(""editSave"", Forum.class, long.class);
		assertNotNull(method);
		assertTrue(method.isAnnotationPresent(Extends.class));
		assertEquals(Actions.EDITSAVE, method.getAnnotation(Extends.class).value()[0]);
	}
	@Test
	public void addShouldExtendAdd() throws Exception {
		Method method = extension.getClass().getMethod(""add"");
		assertNotNull(method);
		assertTrue(method.isAnnotationPresent(Extends.class));
		assertEquals(Actions.ADD, method.getAnnotation(Extends.class).value()[0]);
	}
	@Test
	public void addSaveShouldExtendAddSave() throws Exception {
		Method method = extension.getClass().getMethod(""addSave"", long.class);
		assertNotNull(method);
		assertTrue(method.isAnnotationPresent(Extends.class));
		assertEquals(Actions.ADDSAVE, method.getAnnotation(Extends.class).value()[0]);
	}
	@Test
	public void deleteShouldExtendSelete() throws Exception {
		Method method = extension.getClass().getMethod(""delete"", int[].class);
		assertNotNull(method);
		assertTrue(method.isAnnotationPresent(Extends.class));
		assertEquals(""delete"", method.getAnnotation(Extends.class).value()[0]);
	}

	@Test
	public void shouldBeAnExtensionOfAdminForums() {
		assertTrue(extension.getClass().isAnnotationPresent(ActionExtension.class));
		ActionExtension annotation = extension.getClass().getAnnotation(ActionExtension.class);
		assertEquals(Domain.FORUMS_ADMIN, annotation.value());
	}

}"
net.jforum.extensions.PostReportCounterOperationTestCase,"public class PostReportCounterOperationTestCase {

	@Mock private PostReportRepository repository;
	@Mock private UserSession userSession;
	@Mock private RoleManager roleManager;
	@Spy private MockResult mockResult;
	@InjectMocks private PostReportCounterOperation operation;

	@Test
	public void notLoggedExpectZero() {
		when(userSession.isLogged()).thenReturn(false);

		operation.execute();
		
		assertEquals(0, mockResult.included(""totalPostReports""));
	}

	@Test
	public void notModeratorExpectZero() {
		when(userSession.isLogged()).thenReturn(true);
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isModerator()).thenReturn(false);

		operation.execute();
		
		assertEquals(0, mockResult.included(""totalPostReports""));
	}

	@Test
	public void moderatorExpect10() {
		int[] forumIds = { 1, 2 };

		when(userSession.isLogged()).thenReturn(true);
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isModerator()).thenReturn(true);
		when(roleManager.getRoleValues(SecurityConstants.FORUM)).thenReturn(forumIds);
		when(repository.countPendingReports(forumIds)).thenReturn(10);

		operation.execute();
		
		assertEquals(10, mockResult.included(""totalPostReports""));
	}
}"
net.jforum.sso.DefaultLoginAuthenticatorTestCase,"public class DefaultLoginAuthenticatorTestCase {
	
	@Mock private UserRepository repository;
	@InjectMocks private DefaultLoginAuthenticator authenticator;

	@Test
	public void userHasActivationKeyButNotActiveExpectFail() {
		User user = new User();
		user.setDeleted(false);
		user.setActivationKey(""some key"");
		user.setActive(false);

		when(repository.validateLogin(""user"", ""passwd"")).thenReturn(user);

		User userValidated = authenticator.validateLogin(""user"", ""passwd"", null);
		Assert.assertNull(userValidated);
	}

	@Test
	public void activationKeyNotNullNotActiveExpectFail() {
		User user = new User();
		user.setDeleted(false);
		user.setActive(false);
		user.setActivationKey(""some key"");

		when(repository.validateLogin(""user"", ""passwd"")).thenReturn(user);

		User userValidated = authenticator.validateLogin(""user"", ""passwd"", null);
		Assert.assertNull(userValidated);
	}

	@Test
	public void userDeletedExpectFail() {
		User user = new User();
		user.setDeleted(true);

		when(repository.validateLogin(""user"", ""passwd"")).thenReturn(user);

		User userValidated = authenticator.validateLogin(""user"", ""passwd"", null);
		Assert.assertNull(userValidated);
	}

	@Test
	public void invalidLoginFail() {
		when(repository.validateLogin(""user"", ""passwd"")).thenReturn(null);

		User userValidated = authenticator.validateLogin(""user"", ""passwd"", null);
		Assert.assertNull(userValidated);
	}
}"
net.jforum.sso.RemoteUserSSOTestCase,"public class RemoteUserSSOTestCase {
	
	@Mock private JForumConfig config;
	@Mock private HttpServletRequest request;
	private UserSession us = new UserSession();
	private SSO sso;

	@Test
	public void remoteUserNotNullSessionUserNameDoesNotMatchExpectFalse() {
		when(request.getRemoteUser()).thenReturn(""user"");

		us.getUser().setUsername(""another user"");

		Assert.assertFalse(sso.isSessionValid(us));
	}

	@Test
	public void remoteUserNotNullAnonymousUserExpectFalse() {
		when(request.getRemoteUser()).thenReturn(""user"");

		us.getUser().setId(1);

		Assert.assertFalse(sso.isSessionValid(us));
	}

	@Test
	public void remoteUserNullExpectFalse() {
		when(request.getRemoteUser()).thenReturn(null);

		Assert.assertFalse(sso.isSessionValid(us));
	}

	@Before
	public void setup() {
		us.setRequest(request);

		sso = new RemoteUserSSO();
		sso.setConfig(config);

		when(config.getInt(ConfigKeys.ANONYMOUS_USER_ID)).thenReturn(1);
	}
}"
net.jforum.actions.extensions.TopicWatchExtensionTestCase,"public class TopicWatchExtensionTestCase {
	
	@Mock private TopicWatchService service;
	@Spy private MockResult mockResult;
	@Mock private UserSession userSession;
	@InjectMocks private TopicWatchExtension extension;

	@Test
	public void afterListNogLoggedWatchingShouldBeFalse() {
		this.afterListExpectations(false);

		extension.afterList();

		assertEquals(false, mockResult.included(""isUserWatchingTopic""));
	}

	@Test
	public void afterListLoggedWatchingShouldBeTrue() {
		this.afterListExpectations(true);
		Topic t = new Topic();
		t.setId(1);
		when(service.getSubscription(t, new User())).thenReturn(new TopicWatch());

		extension.afterList();

		assertEquals(true, mockResult.included(""isUserWatchingTopic""));
	}

	private void afterListExpectations(final boolean isLogged) {
		Topic t = new Topic();
		t.setId(1);

		if (isLogged) {
			Map<String, Object> m = new HashMap<String, Object>();
			m.put(""topic"", t);
			when(mockResult.included()).thenReturn(m);
		}

		when(userSession.isLogged()).thenReturn(isLogged);
		when(userSession.getUser()).thenReturn(new User());
	}

	@Test
	public void afterListShouldExtendList() throws Exception {
		Method method = extension.getClass().getMethod(""afterList"", new Class[0]);
		Assert.assertNotNull(method);
		Assert.assertTrue(method.isAnnotationPresent(Extends.class));
		Assert.assertEquals(Actions.LIST, method.getAnnotation(Extends.class).value()[0]);
	}

	@Test
	public void watchShouldHaveAuthenticatedRuleAndDisplayLogin() throws Exception {
		this.shouldHaveAuthenticatedRuleAndDisplayLogin(""watch"");
	}

	@Test
	public void unwatchShouldHaveAuthenticatedRuleAndDisplayLogin() throws Exception {
		this.shouldHaveAuthenticatedRuleAndDisplayLogin(""unwatch"");
	}

	private void shouldHaveAuthenticatedRuleAndDisplayLogin(String methodName) throws Exception {
		Method method = extension.getClass().getMethod(methodName, int.class, int.class);
		Assert.assertNotNull(method);
		Assert.assertTrue(method.isAnnotationPresent(SecurityConstraint.class));
		Assert.assertEquals(AuthenticatedRule.class, method.getAnnotation(SecurityConstraint.class).value());
		Assert.assertTrue(method.getAnnotation(SecurityConstraint.class).displayLogin());
	}

	@Test
	public void shouldBeAnExtensionOfTopics() {
		Assert.assertTrue(extension.getClass().isAnnotationPresent(ActionExtension.class));
		ActionExtension annotation = extension.getClass().getAnnotation(ActionExtension.class);
		Assert.assertEquals(Domain.TOPICS, annotation.value());
	}
}"
net.jforum.actions.helpers.PaginationTestCase,"public class PaginationTestCase {
	

	@Test
	public void pagination1() {
		Pagination p = this.newPagination(5, 20, 0);

		assertEquals(1, p.getThisPage());
		assertEquals(4, p.getTotalPages());
	}

	@Test
	public void pagination2() {
		Pagination p = this.newPagination(5, 19, 0);
		assertEquals(4, p.getTotalPages());
	}

	@Test
	public void pagination3() {
		Pagination p = this.newPagination(3, 30, 0);
		assertEquals(10, p.getTotalPages());
	}

	@Test
	public void pagination4() {
		Pagination p = this.newPagination(3, 31, 0);
		assertEquals(11, p.getTotalPages());
	}

	@Test
	public void pagination5() {
		Pagination p = this.newPagination(7, 543, 0);
		assertEquals(78, p.getTotalPages());
	}

	@Test
	public void pageShouldNotBeBiggerThanTotalPages() {
		Pagination p = this.newPagination(10, 50, 100);
		assertEquals(p.getTotalPages(), p.getThisPage());
	}

	@Test
	public void pageZeroThisPageShouldBeOne() {
		Pagination p = this.newPagination(30, 100, 0);
		assertEquals(1, p.getThisPage());
	}

	@Test
	public void pageZeroStartShouldBeZero() {
		Pagination p = this.newPagination(30, 100, 0);
		assertEquals(0, p.getStart());
	}

	@Test
	public void pageOneStartShouldBeZero() {
		Pagination p = this.newPagination(30, 100, 1);
		assertEquals(0, p.getStart());
	}

	@Test
	public void pageTwoStartShouldBeProportional() {
		Pagination p = this.newPagination(30, 100, 2);
		assertEquals(30, p.getStart());
	}

	@Test
	public void forForum() {
		final Forum forum = mock(Forum.class);
		final JForumConfig config = mock(JForumConfig.class);

		when(config.getInt(ConfigKeys.TOPICS_PER_PAGE)).thenReturn(10);
		when(forum.getTotalTopics()).thenReturn(50);
		when(forum.getId()).thenReturn(1);

		Pagination p = new Pagination(config, 3).forForum(forum);

		assertEquals(10, p.getRecordsPerPage());
		assertEquals(50, p.getTotalRecords());
		assertEquals(5, p.getTotalPages());
		assertEquals(3, p.getThisPage());
		assertEquals(20, p.getStart());
		assertEquals(String.format(""/%s/%s"", Domain.FORUMS, Actions.SHOW), p.getBaseUrl());
	}

	@Test
	public void forTopic() {
		final Topic topic = mock(Topic.class);
		final JForumConfig config = mock(JForumConfig.class);

		when(config.getInt(ConfigKeys.POSTS_PER_PAGE)).thenReturn(10);
		when(topic.getTotalPosts()).thenReturn(50);
		when(topic.getId()).thenReturn(1);

		Pagination p = new Pagination(config, 3).forTopic(topic);

		assertEquals(10, p.getRecordsPerPage());
		assertEquals(50, p.getTotalRecords());
		assertEquals(5, p.getTotalPages());
		assertEquals(3, p.getThisPage());
		assertEquals(20, p.getStart());
		assertEquals(String.format(""/%s/%s"", Domain.TOPICS, Actions.LIST), p.getBaseUrl());
	}

	private Pagination newPagination(int recordsPerPage, int totalRecords, int page) {
		return new Pagination(totalRecords, recordsPerPage, page, """", 0);
	}
}"
net.jforum.controllers.GroupAdminControllerTestCase,"public class GroupAdminControllerTestCase extends AdminTestCase {
	@Mock private GroupService service;
	@Mock private GroupRepository repository;
	@Mock private CategoryRepository categoryRepository;
	@Spy private MockResult mockResult;
	@Mock private UserSession userSession;
	@Mock private HttpServletRequest mockRequest;

	@Mock private RoleManager roleManager;
	@Mock private GroupAdminController mockGroupAdminControllerForward;
	@Mock private GroupAdminController mockGroupAdminControllerRedirect;

	@InjectMocks private GroupAdminController controller;
	
	private Group group = new Group();

	public GroupAdminControllerTestCase() {
		super(GroupAdminController.class);
	}

	@Before
	public void setup() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(mockResult.redirectTo(controller)).thenReturn(mockGroupAdminControllerRedirect);
		when(mockResult.forwardTo(controller)).thenReturn(mockGroupAdminControllerForward);
	}

	@Test
	public void permissions() {
		when(repository.get(1)).thenReturn(new Group());
		when(roleManager.isAdministrator()).thenReturn(true);
		when(categoryRepository.getAllCategories()).thenReturn(new ArrayList<Category>());
		when(repository.getAllGroups()).thenReturn(new ArrayList<Group>());

		controller.permissions(1);

		verify(mockResult).include(""group"", new Group());
		verify(mockResult).include(""groups"", new ArrayList<Group>());
		verify(mockResult).include(""categories"", new ArrayList<Category>());
	}

	@Test
	public void permissionsSave() {
		when(roleManager.isAdministrator()).thenReturn(true);
		when(mockRequest.getParameterNames()).thenReturn(Collections.enumeration(Collections.<String>emptyList()));
		
		controller.permissionsSave(1);

		verify(service).savePermissions(eq(1), anyMap());
		verify(mockGroupAdminControllerRedirect).list();
	}

	@Test
	public void deleteIsFullAdministratorShouldAllow() {
		when(roleManager.isAdministrator()).thenReturn(true);

		controller.delete(1, 2);

		verify(service).delete(1, 2);
		verify(mockGroupAdminControllerRedirect).list();
	}

	@Test
	public void deleteIsNotFullAdministratorShouldIgnore() {
		when(roleManager.isAdministrator()).thenReturn(false);

		controller.delete(1, 2);

		verify(mockGroupAdminControllerRedirect).list();
	}

	@Test
	public void list() {
		ArrayList<Group> groups = new ArrayList<Group>();

		when(repository.getAllGroups()).thenReturn(groups);

		controller.list();

		assertEquals(groups, mockResult.included(""groups""));
	}

	@Test
	public void editExpectsAGroup() {
		when(roleManager.isAdministrator()).thenReturn(true);
		when(repository.get(2)).thenReturn(group);

		controller.edit(2);

		verify(mockResult).include(""group"", group);
		verify(mockGroupAdminControllerForward).add();
	}

	@Test
	public void editSaveIsFullAdministratorExpectsSuccess() {
		when(roleManager.isAdministrator()).thenReturn(true);

		controller.editSave(group);

		verify(service).update(group);
		verify(mockGroupAdminControllerRedirect).list();
	}

	@Test
	public void editSaveIsGroupManagerExpectsSuccess() {
		when(roleManager.isAdministrator()).thenReturn(false);
		when(roleManager.isGroupManager(group.getId())).thenReturn(true);

		controller.editSave(group);

		verify(service).update(group);
		verify(mockGroupAdminControllerRedirect).list();
	}

	@Test
	public void editSaveIsNotFullAdministratorAndNotGroupManagerShouldIgnore() {
		when(roleManager.isAdministrator()).thenReturn(false);
		when(roleManager.isGroupManager(group.getId())).thenReturn(false);

		controller.editSave(group);

		verify(mockGroupAdminControllerRedirect).list();
	}

	@Test
	public void addSaveIsFullAdministratorShouldAllow() {
		when(roleManager.isAdministrator()).thenReturn(true);

		controller.addSave(new Group());

		verify(service).add(notNull(Group.class));
		verify(mockGroupAdminControllerRedirect).list();
	}

	@Test
	public void addSaveIsNotFullAdministratorShouldIgnore() {
		when(roleManager.isAdministrator()).thenReturn(false);

		controller.addSave(new Group());

		verify(mockGroupAdminControllerRedirect).list();
	}

	@Test
	public void addIsNotFullAdministratorShouldIgnore() {
		when(roleManager.isAdministrator()).thenReturn(false);

		controller.add();

		verify(mockGroupAdminControllerRedirect).list();
	}

	@Test
	public void addIsFullAdministratorShouldAllow() {
		when(roleManager.isAdministrator()).thenReturn(true);

		controller.add();

		verify(mockGroupAdminControllerRedirect,never()).list();
	}
}"
net.jforum.controllers.SearchControllerTestCase,"public class SearchControllerTestCase {
	
	@Mock private CategoryRepository categoryRepository;
	@Mock private JForumConfig config;
	@Mock private SearchRepository searchRepository;
	@Mock private UserSession userSession;
	@Mock private RoleManager roleManager;
	@Spy private MockResult mockResult;
	@InjectMocks private SearchController controller;

	@Test
	public void executeWithEmptyQueryShouldRedirectToFilters() {
		SearchParams params = new SearchParams();
		params.setQuery("""");
		
		controller.execute(params);
		
		verify(mockResult).redirectTo(Actions.FILTERS);
	}

	@Test
	public void executeFindThreeRecordsOneIsNotAllowedShouldRemoveExpectTwoRecords() throws Exception {
		final SearchResult result = new SearchResult(new ArrayList<Post>(Arrays.asList(this.newPost(1, 1), this.newPost(2, 1), this.newPost(3, 2))), 3);
		final SearchParams params = new SearchParams();
		params.setQuery(""abc"");

		when(config.getInt(ConfigKeys.TOPICS_PER_PAGE)).thenReturn(30);
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(searchRepository.search(params)).thenReturn(result);
		when(roleManager.isForumAllowed(1)).thenReturn(true);
		when(roleManager.isForumAllowed(2)).thenReturn(false);
		when(categoryRepository.getAllCategories()).thenReturn(new ArrayList<Category>());
			
		controller.execute(params);
		
		assertEquals(result.getResults(), mockResult.included(""results""));
		assertEquals(params, mockResult.included(""searchParams""));
		assertEquals(new Pagination(config, 0), mockResult.included(""pagination""));
		assertEquals(new ArrayList<Category>(), mockResult.included(""categories""));
		assertEquals(2, result.getTotalRecords());
		assertEquals(2, result.getResults().size());
		Post post = new Post();
		post.setId(3);
		assertFalse(result.getResults().contains(post));
	}

	@Test
	public void filter() {
		when(categoryRepository.getAllCategories()).thenReturn(new ArrayList<Category>());
	
		controller.filters();
		
		assertEquals(new ArrayList<Category>(), mockResult.included(""categories""));
	}

	private Post newPost(int postId, int forumId) {
		Post post = new Post();
		post.setId(postId);
		post.setForum(new Forum());
		post.getForum().setId(forumId);
		return post;
	}
}"
net.jforum.controllers.SmilieAdminControllerTestCase,"public class SmilieAdminControllerTestCase extends AdminTestCase {
	
	@Mock private SmilieRepository repository;
	@Mock private SmilieService service;
	@Spy private MockResult mockResult;
	@Mock private SmilieAdminController mockSmilieAdminController;
	@InjectMocks private SmilieAdminController controller;

	public SmilieAdminControllerTestCase() {
		super(SmilieAdminController.class);
	}

	@Test
	public void edit() {
		when(repository.get(1)).thenReturn(new Smilie());
		when(mockResult.forwardTo(controller)).thenReturn(mockSmilieAdminController);
			
		controller.edit(1);
		
		assertEquals(new Smilie(), mockResult.included(""smilie""));
		verify(mockSmilieAdminController).add();
	}

	@Test
	public void editSave() {
		when(mockResult.redirectTo(controller)).thenReturn(mockSmilieAdminController);
			
		controller.editSave(new Smilie(), null);
		
		verify(service).update(notNull(Smilie.class), isNull(UploadedFile.class));
		verify(mockSmilieAdminController).list();
	}

	@Test
	public void delete() {
		when(mockResult.redirectTo(controller)).thenReturn(mockSmilieAdminController );
			
		controller.delete(1, 2, 3);
		
		verify(service).delete(1, 2, 3);
		verify(mockSmilieAdminController).list();
	}

	@Test
	public void listExpectOneRecord() {
		when(repository.getAllSmilies()).thenReturn(new ArrayList<Smilie>());
			
		controller.list();
		
		assertEquals(new ArrayList<Smilie>(), mockResult.included(""smilies""));
	}

	@Test
	public void addSave() {
		when(mockResult.redirectTo(controller)).thenReturn(mockSmilieAdminController);
			
		controller.addSave(new Smilie(), null);
		
		verify(service).add(notNull(Smilie.class), isNull(UploadedFile.class));
		verify(mockSmilieAdminController).list();
	}
}"
net.jforum.controllers.AdminTestCase,"public abstract class AdminTestCase {
	private Class<?> type;

	public AdminTestCase(Class<?> type) {
		this.type = type;
	}

	@Test
	public void shouldHaveAdministrationRule() throws Exception {
		assertTrue(type.isAnnotationPresent(SecurityConstraint.class));
		assertEquals(AdministrationRule.class, type.getAnnotation(SecurityConstraint.class).value());
		assertTrue(type.getAnnotation(SecurityConstraint.class).displayLogin());
	}
}"
net.jforum.controllers.ModerationControllerTestCase,"public class ModerationControllerTestCase {

	
	@Mock private JForumConfig jForumConfig;
	@Mock private RoleManager roleManager;
	@Mock private ModerationService service;
	private ModerationLog moderationLog = new ModerationLog();
	@Mock private CategoryRepository categoryRepository;
	@Mock private UserSession userSession;
	@Mock private TopicRepository topicRepository;
	@Mock private ModerationLogRepository moderationLogRepository;
	private User user = new User();
	@Spy private MockResult mockResult;
	@Mock private ForumController mockForumController;
	@InjectMocks private ModerationController controller;

	@Test
	public void moveTopics() {
		when(userSession.getUser()).thenReturn(user);
		when(roleManager.getCanMoveTopics()).thenReturn(true);
			
		controller.moveTopics(1, ""return path"", moderationLog, 2, 3, 4);
		
		verify(service).moveTopics(1, moderationLog, 2, 3, 4);
		verify(mockResult).redirectTo(""return path"");
	}

	@Test
	public void moveTopicsDoesNotHaveRoleShouldIgnore() {
		when(roleManager.getCanMoveTopics()).thenReturn(false);
			
		controller.moveTopics(1, ""return path"", moderationLog, 1, 2);
		
		verify(mockResult).redirectTo(""return path"");
	}

	@Test
	public void askMoveDestination() {
		when(roleManager.getCanMoveTopics()).thenReturn(true);
		when(categoryRepository.getAllCategories()).thenReturn(new ArrayList<Category>());
			
		controller.askMoveDestination(""return path"", 10, 1, 2, 3);
		
		assertArrayEquals(new int[] { 1, 2, 3 }, (int[])mockResult.included(""topicIds""));
		assertEquals(10, mockResult.included(""fromForumId""));
		assertEquals(""return path"", mockResult.included(""returnUrl""));
		assertEquals(new ArrayList<Category>(), mockResult.included(""categories""));
	}

	@Test
	public void askMoveDestinationDoesNotHaveRoleShouldIgnore() {
		when(roleManager.getCanMoveTopics()).thenReturn(false);
			
		controller.askMoveDestination(""return path"", 1, 2, 3);
		
		verify(mockResult).redirectTo(""return path"");
	}

	@Test
	public void lockUnlock() {
		when(userSession.getUser()).thenReturn(user);
		when(roleManager.getCanLockUnlockTopics()).thenReturn(true);
		when(mockResult.redirectTo(ForumController.class)).thenReturn(mockForumController);
	
		controller.lockUnlock(1, null, moderationLog, new int[] { 1, 2, 3 });

		verify(service).lockUnlock(new int[] { 1, 2, 3 }, moderationLog);
		verify(mockForumController).show(1, 0);
	}

	@Test
	public void lockUnlockDoesNotHaveRoleShouldIgnore() {
		when(roleManager.getCanLockUnlockTopics()).thenReturn(false);
		when(mockResult.redirectTo(ForumController.class)).thenReturn(mockForumController);
			
		controller.lockUnlock(1, null, moderationLog, new int[] { 1 });
		
		verify(mockForumController).show(1, 0);
	}

	@Test
	public void deleteTopicsExpectSuccess() {
		when(userSession.getUser()).thenReturn(user);
		when(roleManager.getCanDeletePosts()).thenReturn(true);
		when(topicRepository.get(4)).thenReturn(new Topic());
		when(topicRepository.get(5)).thenReturn(new Topic());
		when(mockResult.redirectTo(ForumController.class)).thenReturn(mockForumController);

		controller.deleteTopics(1, null, new int[] { 4, 5 }, moderationLog);
		
		verify(service).deleteTopics(Arrays.asList(new Topic(), new Topic()), moderationLog);
		// TODO pass zero?
		verify(mockForumController).show(1, 0);
	}

	@Test
	public void deleteTopicsDoesNotHaveRoleShouldIgnore() {
		when(roleManager.getCanDeletePosts()).thenReturn(false);
		// TODO pass zero?
		when(mockResult.redirectTo(ForumController.class)).thenReturn(mockForumController);
			
		controller.deleteTopics(1, null, new int[] { 4 }, moderationLog);
		
		verify(mockForumController).show(1, 0);
	}

	@Test
	public void approveExpectSuccess() {
		when(roleManager.getCanApproveMessages()).thenReturn(true);
		when(mockResult.redirectTo(ForumController.class)).thenReturn(mockForumController);
			
		controller.approve(1, Arrays.asList(new ApproveInfo[0]));
		
		verify(service).doApproval(1, Arrays.asList(new ApproveInfo[0]));
		// TODO pass zero?
		verify(mockForumController).show(1, 0);
	}

	@Test
	public void approveDoesNotHaveRequiredRoleShouldIgnore() {
		when(roleManager.getCanApproveMessages()).thenReturn(false);
		when(mockResult.redirectTo(ForumController.class)).thenReturn(mockForumController);
			
		controller.approve(1, Arrays.asList(new ApproveInfo[0]));
		
		verify(mockForumController).show(1, 0);
	}
}"
net.jforum.controllers.TopicControllerTestCase,"public class TopicControllerTestCase {
	@Spy private MockResult mockResult;
	@Mock private JForumConfig config;
	@Mock private TopicService topicService;
	@Mock private ForumRepository forumRepository;
	@Mock private SmilieRepository smilieRepository;
	@Mock private PostRepository postRepository;
	@Mock private TopicRepository topicRepository;
	@Mock private CategoryRepository categoryRepository;
	@Mock private RankingRepository rankingRepository;
	@Mock private SessionManager sessionManager;
	@Mock private PollRepository pollRepository;
	@Mock private ForumLimitedTimeRepository forumLimitedTimeRepository;
	@Mock private AttachmentService attachmentService;
	@Mock private HttpServletRequest request;
	@Mock private UserSession userSession;
	
	@InjectMocks private TopicController topicController;
	
	@Mock private RoleManager roleManager;
	@Mock private MessageController mockMessageControllerRedirect;
	@Spy private Topic topic;

	@Before
	public void setup() {
		topic = spy(new Topic(topicRepository));
		when(mockResult.redirectTo(MessageController.class)).thenReturn(mockMessageControllerRedirect);
	}

	@Test
	public void replyReview() {
		topic.setId(1);
		
		when(topicRepository.get(1)).thenReturn(topic);
		when(config.getInt(ConfigKeys.POSTS_PER_PAGE)).thenReturn(10);
		when(topicRepository.getPosts(topic, 0, 10)).thenReturn(new ArrayList<Post>());
		when(topicRepository.getTotalPosts(topic)).thenReturn(5);
		

		topicController.replyReview(1);
		
		assertEquals(topic, mockResult.included(""topic""));
		assertEquals(new ArrayList<Post>(), mockResult.included(""posts""));
	}

	@Test
	public void listTopicIsWaitingModerationShouldRedirect() {
		topic.setId(1);
		topic.getForum().setId(2);
		topic.setPendingModeration(true);
		
		when(topicRepository.get(1)).thenReturn(topic);
		
		topicController.list(1, 0, false);
		
		verify(mockMessageControllerRedirect).topicWaitingModeration(2);
		
	}

	@Test
	public void listShouldHaveAccessForumConstraint() throws Exception {
		Method method = topicController.getClass().getMethod(""list"", int.class, int.class, boolean.class);
		assertNotNull(method);
		assertTrue(method.isAnnotationPresent(SecurityConstraint.class));
		assertEquals(AccessForumRule.class, method.getAnnotation(SecurityConstraint.class).value());
		assertTrue(method.getAnnotation(SecurityConstraint.class).displayLogin());
	}

	@Test
	public void addShouldHaveCreateNewTopicConstraint() throws Exception {
		Method method = topicController.getClass().getMethod(""add"", int.class);
		assertNotNull(method);
		assertTrue(method.isAnnotationPresent(SecurityConstraint.class));
		assertEquals(CreateNewTopicRule.class, method.getAnnotation(SecurityConstraint.class).value());
	}

	@Test
	public void addSaveShouldHaveCreateNewTopicConstraint() throws Exception {
		Method method = topicController.getClass().getMethod(""addSave"", Topic.class, Post.class, PostFormOptions.class, List.class);
		assertNotNull(method);
		assertTrue(method.isAnnotationPresent(SecurityConstraint.class));
		assertEquals(CreateNewTopicRule.class, method.getAnnotation(SecurityConstraint.class).value());
	}

	@Test
	public void addSaveRedirectShouldSendToPage3() {
		when(topic.getTotalPosts()).thenReturn(14);
		setupAddReplyPaginationRedirect(topic);
		when(forumRepository.get(anyInt())).thenReturn(new Forum());
		
		topicController.addSave(topic, new Post(), new PostFormOptions(), null);
	
		checkAddReplyPaginationRedirect(topic, 3);
		assertEquals(topic, mockResult.included(""topic""));
		
	}

	@Test
	public void replySaveRedirectShouldSendToPage4() {
		topic.setId(10);
		when(topic.getTotalPosts()).thenReturn(17);
		setupAddReplyPaginationRedirect(topic);

		topicController.replySave(topic, new Post(), new PostFormOptions());
		
		checkAddReplyPaginationRedirect(topic, 4);
	}

	private void setupAddReplyPaginationRedirect(final Topic topic) {
		if (topic.getId() > 0) {
			when(topicRepository.get(topic.getId())).thenReturn(topic);
		}
		
		when(config.getInt(ConfigKeys.POSTS_PER_PAGE)).thenReturn(5);
		when(userSession.getRoleManager()).thenReturn(roleManager);
	}

	private void checkAddReplyPaginationRedirect(final Topic topic, final int pageExpected) {
		String url = String.format(""/%s/%s/%s/%s"", Domain.TOPICS, Actions.LIST, pageExpected, topic.getId());
		verify(mockResult).redirectTo(url + ""#0"");
	
	}

	@Test
	public void add() {
		ArrayList<Smilie> smilies = new ArrayList<Smilie>();
		Forum forum = new Forum();
		
		when(forumRepository.get(1)).thenReturn(forum);
		when(smilieRepository.getAllSmilies()).thenReturn(smilies);
		

		topicController.add(1);
	
		assertEquals(forum, mockResult.included(""forum""));
		assertEquals(new Post(), mockResult.included(""post""));
		assertEquals(true, mockResult.included(""isNewTopic""));
		assertEquals(smilies, mockResult.included(""smilies""));
	}

	@Test
	public void listSmilie() {
		ArrayList<Smilie> smilies = new ArrayList<Smilie>();
		when(smilieRepository.getAllSmilies()).thenReturn(smilies);
		
		topicController.listSmilies();
		
		assertEquals(smilies, mockResult.included(""smilies""));
	}

	@Test
	public void addSaveCannotCreateStickyTypeShouldBeNormal() {
		Forum forum = new Forum();
		forum.setId(3);
		forum.setModerated(false);
		
		topic.setType(Topic.TYPE_ANNOUNCE);
		topic.setForum(forum);
		
		when(forumRepository.get(3)).thenReturn(forum);
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAttachmentsAlllowed(3)).thenReturn(false);
		when(roleManager.getCanCreateStickyAnnouncementTopics()).thenReturn(false);
		when(roleManager.getCanCreatePolls()).thenReturn(false);
		when(config.getInt(ConfigKeys.POSTS_PER_PAGE)).thenReturn(10);
		
		topicController.addSave(topic, new Post(), new PostFormOptions(), null);
		
		assertEquals(topic, mockResult.included(""topic""));
		verify(mockResult).redirectTo(""/topics/list/0#0"");
		assertEquals(Topic.TYPE_NORMAL, topic.getType());
	}

	@Test
	public void addSaveForumModeratedIsModeratorTopicStatusShouldNotChange() {
		Forum forum = new Forum();
		forum.setId(3);
		forum.setModerated(true);
		
		topic.setPendingModeration(false);
		topic.setForum(forum);

		when(forumRepository.get(3)).thenReturn(forum);
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAttachmentsAlllowed(3)).thenReturn(false);
		when(roleManager.isModerator()).thenReturn(true);
		when(roleManager.getCanCreatePolls()).thenReturn(false);
		when(config.getInt(ConfigKeys.POSTS_PER_PAGE)).thenReturn(10);
		
		topicController.addSave(topic, new Post(), new PostFormOptions(), null);
		
		assertEquals(topic, mockResult.included(""topic""));
		verify(mockResult).redirectTo(""/topics/list/0#0"");
		assertFalse(topic.isWaitingModeration());
	}

	@Test
	public void addSaveForumModeratedNotModeratorStatusShouldBePending() {
		Forum forum = new Forum();
		forum.setId(3);
		forum.setModerated(true);
		
		topic.setPendingModeration(false);
		topic.setForum(forum);

		when(forumRepository.get(3)).thenReturn(forum);
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAttachmentsAlllowed(3)).thenReturn(false);
		when(roleManager.isModerator()).thenReturn(false);
		when(roleManager.getCanCreatePolls()).thenReturn(false);

		topicController.addSave(topic, new Post(), new PostFormOptions(), null);
	
		verify(mockMessageControllerRedirect).topicWaitingModeration(topic.getForum().getId());
		assertEquals(topic, mockResult.included(""topic""));
		assertTrue(topic.isWaitingModeration());
	}

	@Test
	public void addSave() {
		Forum forum = new Forum();
		forum.setId(3);
		forum.setModerated(false);
		
		topic.setForum(forum);
		
		Post post = new Post();

		when(userSession.getUser()).thenReturn(new User());
		when(userSession.getIp()).thenReturn(""123"");
		when(forumRepository.get(3)).thenReturn(forum);
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(config.getInt(ConfigKeys.POSTS_PER_PAGE)).thenReturn(10);
			
		topicController.addSave(topic, post, new PostFormOptions(), Collections.<PollOption>emptyList());
	
		String url = ""/topics/list/0"";
		verify(mockResult).redirectTo(url + ""#0"");
		verify(topicService).addTopic(eq(topic), notNull(List.class), notNull(List.class));
		
		assertEquals(topic, mockResult.included(""topic""));
		assertNotNull(topic.getUser());
		assertEquals(new User(), topic.getUser());
		assertEquals(""123"", post.getUserIp());
	}

	@Test
	public void list() {
		when(topic.getTotalPosts()).thenReturn(10);
		ArrayList<Category> categories = new ArrayList<Category>();
		ArrayList<Post> posts = new ArrayList<Post>();
		ArrayList<Ranking> rankings = new ArrayList<Ranking>();
		
		when(userSession.isLogged()).thenReturn(false);
		when(topicRepository.get(1)).thenReturn(topic);
		when(config.getInt(ConfigKeys.POSTS_PER_PAGE)).thenReturn(10);
		when(categoryRepository.getAllCategories()).thenReturn(categories);
		when(topicRepository.getPosts(topic, 0, 10)).thenReturn(posts);
		when(rankingRepository.getAllRankings()).thenReturn(rankings);
		when(sessionManager.isModeratorOnline()).thenReturn(true);

		topicController.list(1, 0, false);
		
		verify(userSession).markTopicAsRead(1);
		assertEquals(true, mockResult.included(""isModeratorOnline""));
		assertEquals(topic, mockResult.included(""topic""));
		assertEquals(topic.getForum(), mockResult.included(""forum""));
		assertNotNull(mockResult.included(""pagination""));
		assertEquals(categories, mockResult.included(""categories""));
		assertEquals(posts, mockResult.included(""posts""));
		assertEquals(rankings, mockResult.included(""rankings""));
		assertEquals(false, mockResult.included(""canVoteOnPolls""));
		assertEquals(false, mockResult.included(""viewPollResults""));
	}

	@Test
	public void replySave() {
		topic.setId(1);
		topic.getForum().setId(1);
		Post post = new Post();
		User user = new User();
		
		when(userSession.getIp()).thenReturn(""123"");
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAttachmentsAlllowed(1)).thenReturn(false);
		when(userSession.getUser()).thenReturn(user);
		when(topicRepository.get(1)).thenReturn(topic);
		when(config.getInt(ConfigKeys.POSTS_PER_PAGE)).thenReturn(10);
		
		topicController.replySave(topic, post, new PostFormOptions());
		
		String url = ""/topics/list/1"";
		verify(mockResult).redirectTo(url + ""#0"");
		verify(topicService).reply(notNull(Topic.class), notNull(Post.class), notNull(List.class));
		assertEquals(""123"", post.getUserIp());
		assertNotNull(post.getUser());
		assertEquals(user, post.getUser());
	}

	@Test
	public void replySaveForumModeratedIsModeratorShouldPass() {
		topic.setId(2);
		topic.getForum().setId(1);
		topic.getForum().setModerated(true);
		
		Post post = new Post();
		post.setModerate(false);
	
		when(topicRepository.get(2)).thenReturn(topic);
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAttachmentsAlllowed(1)).thenReturn(false);
		when(roleManager.isModerator()).thenReturn(true);
		when(config.getInt(ConfigKeys.POSTS_PER_PAGE)).thenReturn(10);
	
		topicController.replySave(topic, post, new PostFormOptions());
	
		String url = ""/topics/list/2"";
		verify(mockResult).redirectTo(url + ""#0"");
		assertFalse(post.isWaitingModeration());
	}

	@Test
	public void replySaveForumModeratedPostStatusShouldBePending() {
		topic.setId(2);
		topic.getForum().setId(1);
		topic.getForum().setModerated(true);

		Post post = new Post(); post.setModerate(false);
		
		when(topicRepository.get(2)).thenReturn(topic);
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAttachmentsAlllowed(1)).thenReturn(false);
		when(roleManager.isModerator()).thenReturn(false);
		
		topicController.replySave(topic, post, new PostFormOptions());
		
		verify(mockMessageControllerRedirect).replyWaitingModeration(2);
		assertTrue(post.isWaitingModeration());
	}

	@Test
	public void replySaveWaitingModerationShouldRedirect() {
		topic.setId(1);
		topic.getForum().setId(1);

		Post post = new Post();
		post.setModerate(true);
		
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(topicRepository.get(1)).thenReturn(topic);

		topicController.replySave(topic, post, new PostFormOptions());
		
		verify(mockMessageControllerRedirect).replyWaitingModeration(1);
	}

	@Test
	public void reply() {
		ArrayList<Smilie> smilies = new ArrayList<Smilie>();
		
		when(topicRepository.get(1)).thenReturn(topic);
		when(smilieRepository.getAllSmilies()).thenReturn(smilies);
	
		topicController.reply(1);
		
		assertEquals(true, mockResult.included(""isReply""));
		assertEquals(new Post(), mockResult.included(""post""));
		assertEquals(topic, mockResult.included(""topic""));
		assertEquals(new Forum(), mockResult.included(""forum""));
		assertEquals(smilies, mockResult.included(""smilies""));
	}

	@Test
	@Ignore(""to implement"")
	public void vote() {
		fail(""to implement"");
	}

	@Test
	public void quote() {
		topic.setId(2);
		
		Forum forum = new Forum();
		forum.setId(3);
		
		Post post = new Post();
		post.setId(1);
		post.setTopic(topic);
		post.setForum(forum);
		
		ArrayList<Smilie> smilies = new ArrayList<Smilie>();
		
		when(postRepository.get(1)).thenReturn(post);
		when(smilieRepository.getAllSmilies()).thenReturn(smilies);

		topicController.quote(1);

		assertEquals(post, mockResult.included(""post""));
		assertEquals(true, mockResult.included(""isQuote""));
		assertEquals(true, mockResult.included(""isReply""));
		assertEquals(post.getTopic(), mockResult.included(""topic""));
		assertEquals(post.getForum(), mockResult.included(""forum""));
		assertEquals(smilies, mockResult.included(""smilies""));
	}
}"
net.jforum.controllers.BanlistAdminControllerTestCase,"public class BanlistAdminControllerTestCase extends AdminTestCase {
	
	private BanlistAdminController compverifynt;
	@Mock private BanlistRepository repository;
	@Spy private MockResult mockResult;

	public BanlistAdminControllerTestCase() {
		super(BanlistAdminController.class);
	}

	@Test
	public void listExpectOneRecord() {
		when(repository.getAllBanlists()).thenReturn(new ArrayList<Banlist>());
			
		compverifynt.list();
		
		assertEquals(new ArrayList<Banlist>(), mockResult.included(""banlist""));
	}

	@Before
	public void setup() {
		compverifynt = new BanlistAdminController(repository, mockResult);
	}
}"
net.jforum.controllers.PrivateMessageControllerTestCase,"public class PrivateMessageControllerTestCase {

	@Mock private PrivateMessageRepository repository;
	@Mock private UserRepository userRepository;
	@Mock private PrivateMessageService service;
	@Spy private MockResult mockResult;
	@Mock private UserSession userSession;

	@InjectMocks private PrivateMessageController controller;

	@Mock private RoleManager roleManager;
	@Mock private TopicController mockTopicController;

	@Test
	public void review() {
		PrivateMessage pm = new PrivateMessage();
		pm.setId(1);
		when(repository.get(1)).thenReturn(pm);

		controller.review(1);

		assertEquals(pm, mockResult.included(""pm""));
		assertEquals(pm.asPost(), mockResult.included(""post""));
	}

	@Test
	public void delete() {
		when(userSession.getUser()).thenReturn(new User());

		controller.delete(1, 2, 3);

		verify(service).delete(new User(), 1, 2, 3);
		verify(mockResult).redirectTo(Actions.INBOX);
	}

	@Test
	public void readExpectSuccess() {
		PrivateMessage pm = new PrivateMessage();
		User toUser = new User();
		toUser.setId(1);
		User fromUser = new User();
		fromUser.setId(3);

		pm.setToUser(toUser);
		pm.setFromUser(fromUser);

		when(repository.get(1)).thenReturn(pm);

		controller.read(1);

		assertEquals(pm, mockResult.included(""pm""));
		assertEquals(new Post(), mockResult.included(""post""));
	}

	@Test
	public void readStatusIsNewShouldMarkAsRead() {
		PrivateMessage pm = new PrivateMessage();
		User toUser = new User();
		toUser.setId(1);
		User fromUser = new User();
		fromUser.setId(3);

		pm.setToUser(toUser);
		pm.setFromUser(fromUser);
		pm.setType(PrivateMessageType.NEW);

		when(repository.get(1)).thenReturn(pm);

		controller.read(1);

		Assert.assertEquals(PrivateMessageType.READ, pm.getType());
	}

	@Test
	public void sent() {
		when(userSession.getUser()).thenReturn(new User());
		ArrayList<PrivateMessage> privateMessages = new ArrayList<PrivateMessage>();
		when(repository.getFromSentBox(new User())).thenReturn(privateMessages);

		controller.sent();

		assertEquals(privateMessages, mockResult.included(""privateMessages""));
		assertEquals(true, mockResult.included(""sentbox""));
	}

	@Test
	public void sendSaveExpectSuccess() {
		when(userSession.getIp()).thenReturn(""0.0.0.0"");
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.roleExists(SecurityConstants.INTERACT_OTHER_GROUPS)).thenReturn(true);
		when(userRepository.get(1)).thenReturn(new User());
		when(userSession.getUser()).thenReturn(new User());

		controller.sendSave(new Post(), new PostFormOptions(), null, 1);

		verify(service).send(notNull(PrivateMessage.class));
		verify(mockResult).redirectTo(Actions.INBOX);
	}

	@Test(expected = ForumException.class)
	public void sendSaveWithoutUserIdShouldTryInvalidUsernameExpectsException() {
		when(userRepository.getByUsername(""invalid user"")).thenReturn(null);

		controller.sendSave(null, null, ""invalid user"", 0);
	}

	@Test(expected = ForumException.class)
	public void sendSaveWithInvalidUserIdExpectsException() {
		when(userRepository.get(1)).thenReturn(null);

		controller.sendSave(null, null, null, 1);
	}

	@Test
	public void sendToCanInteractWithOtherGroups() {
		User recipient = new User();
		when(userRepository.get(1)).thenReturn(recipient);
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(userSession.getUser()).thenReturn(new User());
		when(roleManager.roleExists(SecurityConstants.INTERACT_OTHER_GROUPS)).thenReturn(true);
		when(mockResult.forwardTo(TopicController.class)).thenReturn(mockTopicController);

		controller.sendTo(1);

		verify(mockTopicController).add(0);
		assertEquals(recipient, mockResult.included(""pmRecipient""));
		assertEquals(true, mockResult.included(""isPrivateMessage""));
		assertEquals(false, mockResult.included(""attachmentsEnabled""));
		assertEquals(recipient, mockResult.included(""user""));
		assertEquals(new Post(), mockResult.included(""post""));
	}

	@Test
	public void sendToCanotInteractWithOtherGroupsMatchingGroupFoundShouldFillPropertyBag() {
		Group g1 = new Group();
		g1.setId(1);
		Group g2 = new Group();
		g2.setId(2);
		
		User recipient = new User();
		recipient.addGroup(g1);

		User currentUser = new User();
		currentUser.addGroup(g2);
		currentUser.addGroup(g1);

		when(userRepository.get(1)).thenReturn(recipient);
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.roleExists(SecurityConstants.INTERACT_OTHER_GROUPS)).thenReturn(false);
		when(userSession.getUser()).thenReturn(currentUser);
		when(roleManager.getCanOnlyContactModerators()).thenReturn(true);

		controller.sendTo(1);

		verify(mockResult).forwardTo(""sendToDenied"");
	}

	@Test
	public void sendToCanotInteractWithOtherGroupsNoMatchingGroupFoundShouldNotFillPropertyBag() {
		Group g1 = new Group();
		User recipient = new User();
		recipient.addGroup(g1);

		Group g2 = new Group();
		User currentUser = new User();
		currentUser.addGroup(g2);
		
		when(userRepository.get(1)).thenReturn(recipient);
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.roleExists(SecurityConstants.INTERACT_OTHER_GROUPS)).thenReturn(false);
		when(userSession.getUser()).thenReturn(currentUser);
		when(roleManager.getCanOnlyContactModerators()).thenReturn(true);

		controller.sendTo(1);
		
		verify(mockResult).forwardTo(""sendToDenied"");
	}

	@Test
	public void findUserWithUsernameCanInteractWithOtherGroups() {
		ArrayList<User> users = new ArrayList<User>();
		
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.getCanOnlyContactModerators()).thenReturn(true);
		when(userRepository.findByUserName(""an user"")).thenReturn(users);

		controller.findUser(""an user"");

		assertEquals(users, mockResult.included(""users""));
		assertEquals(""an user"", mockResult.included(""username""));
	}

	@Test
	public void findUserWithUsernameCannotInteractWithOtherGroups() {
		User user = new User();
		ArrayList<User> users = new ArrayList<User>();
		
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.getCanOnlyContactModerators()).thenReturn(false);
		when(roleManager.roleExists(""interact_other_groups"")).thenReturn(false);
		when(userSession.getUser()).thenReturn(user);
		when(userRepository.findByUserName(""an user"", user.getGroups())).thenReturn(users);

		controller.findUser(""an user"");

		assertEquals(users, mockResult.included(""users""));
		assertEquals(""an user"", mockResult.included(""username""));
	}

	@Test
	public void findUserWithoutUsername() {
		controller.findUser(null);
		
		assertEquals(null, mockResult.included(""username""));
	}

	@Test
	public void send() {
		User user = new User();
		user.setId(1);
		
		when(userSession.getUser()).thenReturn(user);
		when(mockResult.forwardTo(TopicController.class)).thenReturn(mockTopicController);

		controller.send();

		verify(mockTopicController).add(0);
		assertEquals(new Post(), mockResult.included(""post""));
		assertEquals(true, mockResult.included(""isPrivateMessage""));
		assertEquals(false, mockResult.included(""attachmentsEnabled""));
		assertEquals(user, mockResult.included(""user""));
	}

	@Test
	public void inbox() {
		User user = new User();
		user.setId(1);
		ArrayList<PrivateMessage> privateMessages = new ArrayList<PrivateMessage>();
		
		when(userSession.getUser()).thenReturn(user);
		when(repository.getFromInbox(user)).thenReturn(privateMessages);
		
		controller.inbox();
		
		assertEquals(true, mockResult.included(""inbox""));
		assertEquals(privateMessages, mockResult.included(""privateMessages""));
	}

	@Test
	public void quoteShouldHaveOwnerConstraint() throws Exception {
		Method method = controller.getClass().getMethod(""quote"", int.class);
		Assert.assertTrue(method.isAnnotationPresent(SecurityConstraint.class));
		Assert.assertEquals(PrivateMessageOwnerRule.class, method.getAnnotation(SecurityConstraint.class).value());
	}

	@Test
	public void replyShouldHaveOwnerConstraint() throws Exception {
		Method method = controller.getClass().getMethod(""reply"", int.class);
		Assert.assertTrue(method.isAnnotationPresent(SecurityConstraint.class));
		Assert.assertEquals(PrivateMessageOwnerRule.class, method.getAnnotation(SecurityConstraint.class).value());
	}

	@Test
	public void readShouldHaveOwnerConstraint() throws Exception {
		Method method = controller.getClass().getMethod(""read"", int.class);
		Assert.assertTrue(method.isAnnotationPresent(SecurityConstraint.class));
		Assert.assertEquals(PrivateMessageOwnerRule.class, method.getAnnotation(SecurityConstraint.class).value());
	}

	@Test
	public void reviewShouldHaveOwnerConstraint() throws Exception {
		Method method = controller.getClass().getMethod(""review"", int.class);
		Assert.assertTrue(method.isAnnotationPresent(SecurityConstraint.class));
		Assert.assertEquals(PrivateMessageOwnerRule.class, method.getAnnotation(SecurityConstraint.class).value());
	}

	@Test
	public void shouldHaveAuthenticatedConstraintAndDisplayLogin() throws Exception {
		Assert.assertTrue(controller.getClass().isAnnotationPresent(SecurityConstraint.class));
		SecurityConstraint annotation = controller.getClass().getAnnotation(SecurityConstraint.class);
		Role[] roles = annotation.multiRoles();
		boolean found = false;

		for (Role role : roles) {
			if (role.value().equals(AuthenticatedRule.class)) {
				found = true;
				Assert.assertTrue(role.displayLogin());
			}
		}

		Assert.assertTrue(found);
	}
}"
net.jforum.controllers.AdminControllerTestCase,"public class AdminControllerTestCase extends AdminTestCase {

    public AdminControllerTestCase() {
        super(AdminController.class);
    }
}"
net.jforum.controllers.BadWordControllerActionsTestCase,"public class BadWordControllerActionsTestCase extends AdminTestCase {

	
	@Mock private BadWordRepository repository;
	@Spy private MockResult mockResult;
	@Mock private BadWordAdminController mockBadWordAdminController;
	@InjectMocks private BadWordAdminController action;

	public BadWordControllerActionsTestCase() {
		super(BadWordAdminController.class);
	}

	@Test
	public void deleteUsingNullShouldIgnore() {
		when(mockResult.redirectTo(action)).thenReturn(mockBadWordAdminController);
	
		action.delete(null);

		verify(mockBadWordAdminController).list();
	}

	@Test
	public void delete() {
		BadWord w1 = new BadWord();
		BadWord w2 = new BadWord();

		when(repository.get(1)).thenReturn(w1);
		when(repository.get(2)).thenReturn(w2);
		when(mockResult.redirectTo(action)).thenReturn(mockBadWordAdminController);
			
		action.delete(1, 2);

		verify(repository).remove(w1);
		verify(repository).remove(w2);
		verify(mockBadWordAdminController).list();
	}

	@Test
	public void list() {
		List<BadWord> list = new ArrayList<BadWord>();
		when(repository.getAll()).thenReturn(list);
			
		action.list();

		assertEquals(list, mockResult.included(""words""));
	}

	@Test
	public void addSave() {
		final BadWord word = new BadWord();
		when(mockResult.redirectTo(action)).thenReturn(mockBadWordAdminController);
	
		action.addSave(word);

		verify(repository).add(word);
		verify(mockBadWordAdminController).list();
	}

	@Test
	public void edit() {
		final BadWord word = new BadWord();
		
		when(repository.get(1)).thenReturn(word);
		when(mockResult.forwardTo(action)).thenReturn(mockBadWordAdminController);
			
		action.edit(1);
		
		assertEquals(word, mockResult.included(""word""));
		verify(mockBadWordAdminController).add();
	}

	@Test
	public void editSave() {
		final BadWord word = new BadWord();
		when(mockResult.redirectTo(action)).thenReturn(mockBadWordAdminController);
			
		action.editSave(word);
		
		verify(repository).update(word);
		verify(mockBadWordAdminController).list();
	}
}"
net.jforum.controllers.RSSControllerTestCase,"public class RSSControllerTestCase {
	
	@Mock private RSSService rssService;
	@Mock private UserSession userSession;
	@Mock private JForumConfig config;
	@Mock private RoleManager roleManager;
	@Spy private MockResult mockResult;
	@InjectMocks private RSSController controller;
	@Mock private MessageController mockMessageController;

	@Test
	public void forumTopicsExpectSuccess() {
		when(config.getBoolean(ConfigKeys.RSS_ENABLED)).thenReturn(true);
		when(roleManager.isForumAllowed(1)).thenReturn(true);
		when(rssService.forForum(1)).thenReturn(""contents"");
			
		controller.forumTopics(1);
		
		assertEquals(""contents"", mockResult.included(""contents""));
		verify(mockResult).forwardTo(Actions.RSS);
	}

	@Test
	public void forumTopicsUserDoesNotHaveRightsShouldDeny() {
		when(config.getBoolean(ConfigKeys.RSS_ENABLED)).thenReturn(true);
		when(roleManager.isForumAllowed(1)).thenReturn(false);
		when(mockResult.forwardTo(MessageController.class)).thenReturn(mockMessageController);
			
		controller.forumTopics(1);
		
		verify(mockMessageController).accessDenied();
	}

	@Test
	public void forumTopicsRSSDisabledShouldDeny() {
		when(config.getBoolean(ConfigKeys.RSS_ENABLED)).thenReturn(false);
		when(mockResult.forwardTo(MessageController.class)).thenReturn(mockMessageController);
			
		controller.forumTopics(1);
		
		verify(mockMessageController).accessDenied();
	}

	@Before
	public void setup() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
	}
}"
net.jforum.controllers.MessageControllerTestCase,"public class MessageControllerTestCase {

	@Mock private I18n i18n;
	@Mock private MessageController mockMessageController;
	@Spy private MockResult mockResult;
	@InjectMocks private MessageController controller;

	@Test
	public void replyWaitingModeration() {
		when(i18n.getFormattedMessage(""PostShow.waitingModeration"", URLBuilder.build(Domain.TOPICS, Actions.LIST, 1))).thenReturn(""msg moderation 1"");
		
		
		controller.replyWaitingModeration(1);
		
		assertEquals(""msg moderation 1"", mockResult.included(""message""));
		verify(mockMessageController).message();;
	}

	@Test
	public void topicWaitingModeration() {
		when(i18n.getFormattedMessage(""PostShow.waitingModeration"", URLBuilder.build(Domain.FORUMS, Actions.SHOW, 1))).thenReturn(""msg moderation 1"");

		controller.topicWaitingModeration(1);
		
		assertEquals(""msg moderation 1"", mockResult.included(""message""));
		verify(mockMessageController).message();;
	}

	@Test
	public void accessDenied() {
		when(i18n.getMessage(""Message.accessDenied"")).thenReturn(""msg denied"");
		
		controller.accessDenied();

		assertEquals(""msg denied"", mockResult.included(""message""));
		verify(mockMessageController).message();;
	}
	
	@Before
	public void setup() {
		when(mockResult.of(controller)).thenReturn(mockMessageController);
	}
}"
net.jforum.controllers.ForumControllerTestCase,"public class ForumControllerTestCase {	
	@Mock private CategoryRepository categoryRepository;
	@Mock private ForumRepository forumRepository;
	@Mock private UserSession userSession;
	@Mock private UserRepository userRepository;
	@Mock private MostUsersEverOnlineService mostUsersEverOnlineService;
	@Mock private JForumConfig config;
	@Mock private GroupInteractionFilter groupInteractionFilter;
	@Spy private MockResult mockResult;
	@Mock private SessionManager sessionManager;
	
	@InjectMocks private ForumController controller;
	
	@Mock RoleManager roleManager;
	
	@Test
	public void showShouldHaveAccessForumConstraint() throws Exception {
		Method method = controller.getClass().getMethod(""show"", int.class, int.class);
		Assert.assertNotNull(method);
		Assert.assertTrue(method.isAnnotationPresent(SecurityConstraint.class));
		Assert.assertEquals(AccessForumRule.class, method.getAnnotation(SecurityConstraint.class).value());
		Assert.assertTrue(method.getAnnotation(SecurityConstraint.class).displayLogin());
	}

	@Test
	public void show() {
		Forum forum = new Forum(forumRepository);
		ArrayList<Category> categories = new ArrayList<Category>();
		
		when(forumRepository.getTotalTopics(forum)).thenReturn(1);
		when(forumRepository.get(1)).thenReturn(forum);
		when(config.getInt(ConfigKeys.TOPICS_PER_PAGE)).thenReturn(10);
		when(categoryRepository.getAllCategories()).thenReturn(categories);
		when(sessionManager.isModeratorOnline()).thenReturn(true);
				
		controller.show(1, 0);
		
		verify(forumRepository).getTopics(forum, 0, 10);
		assertEquals(new ArrayList<Topic>(), mockResult.included(""topics""));
		assertEquals(forum, mockResult.included(""forum""));
		assertEquals(categories, mockResult.included(""categories""));
		assertNotNull(mockResult.included(""pagination""));
		assertEquals(true, mockResult.included(""isModeratorOnline""));
		
	}

	@Test
	public void listCannotInteractWitOtherGroups() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(userSession.isLogged()).thenReturn(true);
		when(roleManager.roleExists(SecurityConstants.INTERACT_OTHER_GROUPS)).thenReturn(false);

		controller.list();

		verify(groupInteractionFilter).filterForumListing(mockResult, userSession);
	}

	@Test
	public void list() {
		MostUsersEverOnline most = new MostUsersEverOnline();
		ArrayList<Category> categories = new ArrayList<Category>();
		ArrayList<UserSession> userSessions = new ArrayList<UserSession>();
		
		when(categoryRepository.getAllCategories()).thenReturn(categories);
		when(sessionManager.getLoggedSessions()).thenReturn(userSessions);
		when(userRepository.getTotalUsers()).thenReturn(1);
		when(forumRepository.getTotalMessages()).thenReturn(2);
		when(sessionManager.getTotalLoggedUsers()).thenReturn(3);
		when(sessionManager.getTotalAnonymousUsers()).thenReturn(4);
		when(userRepository.getLastRegisteredUser()).thenReturn(new User());
		when(mostUsersEverOnlineService.getMostRecentData(anyInt())).thenReturn(most);
		when(sessionManager.getTotalUsers()).thenReturn(3);
		when(config.getInt(ConfigKeys.POSTS_PER_PAGE)).thenReturn(7);
		when(userSession.isLogged()).thenReturn(false);

		controller.list();

		assertEquals(categories,mockResult.included(""categories""));
		assertEquals(userSessions,mockResult.included(""onlineUsers""));
		assertEquals(1,mockResult.included(""totalRegisteredUsers""));
		assertEquals(2,mockResult.included(""totalMessages""));
		assertEquals(3,mockResult.included(""totalLoggedUsers""));
		assertEquals(4,mockResult.included(""totalAnonymousUsers""));
		assertEquals(new User(),mockResult.included(""lastRegisteredUser""));
		assertEquals(most,mockResult.included(""mostUsersEverOnline""));
		assertEquals(7,mockResult.included(""postsPerPage""));
	}
}"
net.jforum.controllers.CategoryAdminControllerTestCase,"public class CategoryAdminControllerTestCase extends AdminTestCase {

	
	private CategoryAdminController action;
	@Mock private CategoryRepository repository;
	@Mock private CategoryService service;
	@Mock private CategoryAdminController mockCategoryAdminController;
	@Spy private MockResult mockResult;

	public CategoryAdminControllerTestCase() {
		super(CategoryAdminController.class);
	}

	@Test
	public void delete() {
		when(mockResult.redirectTo(action)).thenReturn(mockCategoryAdminController);
			
		action.delete(1, 2);
		
		verify(mockCategoryAdminController).list();
		verify(service).delete(1, 2);
	}

	@Test
	public void addSave() {
		final Category c = new Category();

		c.setName(""c1"");
		c.setModerated(false);
		c.setDisplayOrder(1);
		
		when(mockResult.redirectTo(action)).thenReturn(mockCategoryAdminController);
			
		action.addSave(c);
		
		verify(mockCategoryAdminController).list();
		verify(service).add(c);
	}

	@Test
	public void editExpectACategory() {
		when(repository.get(5)).thenReturn(new Category());
		when(mockResult.forwardTo(action)).thenReturn(mockCategoryAdminController);
		
		action.edit(5);
		
		assertEquals(new Category(), mockResult.included(""category""));
		verify(mockCategoryAdminController).add();
	}

	@Test
	public void editSave() {
		final Category c = new Category();
		c.setId(2);
		
		when(mockResult.redirectTo(action)).thenReturn(mockCategoryAdminController);
			
		action.editSave(c);
		
		verify(service).update(c);
		verify(mockCategoryAdminController).list();
	}

	/**
	 * Test method for
	 * {@link net.jforum.controllers.CategoryAdminController#list()}.
	 */
	@Test
	public void list() {
		when(repository.getAllCategories()).thenReturn(new ArrayList<Category>());
			
		action.list();
		
		assertEquals(new ArrayList<Category>(), mockResult.included(""categories""));
	}

	/**
	 * Test method for
	 * {@link net.jforum.controllers.CategoryAdminController#up(java.lang.Integer)}
	 * .
	 */
	@Test
	public void up() {
		when(mockResult.redirectTo(action)).thenReturn(mockCategoryAdminController);
			
		action.up(1);
		
		verify(service).upCategoryOrder(1);
		verify(mockCategoryAdminController).list();
	}

	/**
	 * Test method for
	 * {@link net.jforum.controllers.CategoryAdminController#down(java.lang.Integer)}
	 * .
	 */
	@Test
	public void down() {
		when(mockResult.redirectTo(action)).thenReturn(mockCategoryAdminController);
			

		action.down(2);
		
		verify(service).downCategoryOrder(2);
		verify(mockCategoryAdminController).list();
	}

	@Before
	public void setup() {
		action = new CategoryAdminController(repository, service, mockResult);
	}
}"
net.jforum.controllers.AvatarAdminControllerTestCase,"public class AvatarAdminControllerTestCase extends AdminTestCase {
	
	@Mock private AvatarRepository repository;
	@Mock private AvatarService service;
	@Spy private MockResult mockResult;
	@Mock private AvatarAdminController mockAdminController;
	@InjectMocks private AvatarAdminController avatarAction;

	public AvatarAdminControllerTestCase() {
		super(SmilieAdminController.class);
	}

	@Test
	public void edit() {
		when(repository.get(1)).thenReturn(new Avatar());
			
		avatarAction.edit(1);

		assertEquals(new Avatar(), mockResult.included(""avatar""));
		verify(mockResult).forwardTo(Actions.ADD);
	}

	@Test
	public void editSave() {
		when(mockResult.redirectTo(avatarAction)).thenReturn(mockAdminController);

		avatarAction.editSave(new Avatar(), null);

		verify(service).update(notNull(Avatar.class), isNull(UploadedFile.class));
		verify(mockAdminController).list();
	}

	@Test
	public void delete() {
		final Avatar avatar = new Avatar();
		
		when(repository.get(1)).thenReturn(avatar);
		when(repository.get(2)).thenReturn(avatar);
		when(repository.get(3)).thenReturn(avatar);
		when(mockResult.redirectTo(avatarAction)).thenReturn(mockAdminController);

		avatarAction.delete(1, 2, 3);

		verify(repository, times(3)).remove(avatar);
		verify(mockAdminController).list();
	}

	@Test
	public void listExpectOneRecord() {
		when(repository.getGalleryAvatar()).thenReturn(new ArrayList<Avatar>());
		when(repository.getUploadedAvatar()).thenReturn(new ArrayList<Avatar>());
	
		avatarAction.list();

		assertEquals(new ArrayList<Avatar>(), mockResult.included(""GalleryAvatars""));
		assertEquals(new ArrayList<Avatar>(), mockResult.included(""UploadedAvatars""));
	}

	@Test
	public void addSave() {
		avatarAction.addSave(new Avatar(), null);
		
		verify(service).add(notNull(Avatar.class), isNull(UploadedFile.class));
		verify(mockResult).redirectTo(Actions.LIST);
	}
}"
net.jforum.controllers.UserAdminControllerTestCase,"public class UserAdminControllerTestCase extends AdminTestCase {	
	@Mock private UserRepository userRepository;
	@Mock private GroupRepository groupRepository;
	@Mock private JForumConfig config;
	@Mock private UserService userService;
	@Spy private MockResult mockResult;
	@Mock private UserSession userSession;
	
	@Mock private RoleManager roleManager;
	@Mock private UserAdminController mockUserAdminControllerRedirect;
	@Mock private UserController mockUserController;

	@InjectMocks private UserAdminController controller;
	
	public UserAdminControllerTestCase() {
		super(UserAdminController.class);
	}

	@Before
	public void setup() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(mockResult.redirectTo(controller)).thenReturn(mockUserAdminControllerRedirect);
	}
	
	@Test
	public void groupsSaveIsSuperAdministratorShouldAccept() {
		when(roleManager.isAdministrator()).thenReturn(true);
		
		controller.groupsSave(1, 1, 2);
		
		verify(userService).saveGroups(1, 1, 2);
		verify(mockUserAdminControllerRedirect).list(0);
	}

	@Test
	public void groupsNotSuperAdministratorIsGroupManagerShouldAccept() {
		when(roleManager.isAdministrator()).thenReturn(false);
		when(roleManager.isGroupManager(1)).thenReturn(true);
		when(roleManager.isGroupManager(2)).thenReturn(true);
		
		controller.groupsSave(1, 1, 2);
		
		verify(userService).saveGroups(1, 1, 2);
		verify(mockUserAdminControllerRedirect).list(0);
	}

	@Test
	public void groupsSaveNotSuperAdminNotGroupManagerShouldIgnore() {
		when(roleManager.isAdministrator()).thenReturn(false);
		when(roleManager.isGroupManager(1)).thenReturn(false);
		
		controller.groupsSave(1, 1, 2);
		
		verify(userService,never()).saveGroups(anyInt(),(int[])anyVararg());
		verify(mockUserAdminControllerRedirect).list(0);
	}

	@Test
	public void groups() {
		User user = new User();
		user.setId(1);
		ArrayList<Group> groups = new ArrayList<Group>();
		
		when(userRepository.get(1)).thenReturn(user);
		when(groupRepository.getAllGroups()).thenReturn(groups);
		
		controller.groups(1);
		
		assertEquals(user, mockResult.included(""user""));
		assertEquals(groups, mockResult.included(""groups""));
	}

	@Test
	public void edit() {
		when(mockResult.forwardTo(UserController.class)).thenReturn(mockUserController);
		
		controller.edit(1);

		verify(mockUserController).edit(1);
	}

	@Test
	public void list() {
		ArrayList<User> users = new ArrayList<User>();
		
		when(userRepository.getTotalUsers()).thenReturn(100);
		when(config.getInt(ConfigKeys.USERS_PER_PAGE)).thenReturn(10);
		when(userRepository.getAllUsers(0, 10)).thenReturn(users);
		
		controller.list(0);
		
		assertEquals(users, mockResult.included(""users""));
		assertNotNull(mockResult.included(""users""));
	}
}"
net.jforum.controllers.PostControllerTestCase,"public class PostControllerTestCase {
	@Mock private PostRepository postRepository;
	@Mock private SmilieRepository smilieRepository;
	@Mock private TopicRepository topicRepository;
	@Mock private PostService postService;
	@Mock private JForumConfig config;
	@Mock private UserSession userSession;
	@Mock private AttachmentService attachmentService;
	@Mock private HttpServletRequest mockResquest;
	@Spy private MockResult mockResult;
	
	@Mock private RoleManager roleManager;
	@Mock private TopicController mockTopicControllerRedirect;
	@Mock private TopicController mockTopicControllerForward;
	@Mock private ForumController mockForumControllerRedirect;
	@Mock private ForumController mockForumControllerForward;

	@InjectMocks private PostController controller;
	
	private ModerationLog moderationLog = new ModerationLog();
	private Post post;
	private Forum forum;
	@Spy private Topic topic;
	
	@Before
	public void setup() {
		forum = new Forum();
		forum.setId(3);
		
		topic = spy(new Topic(topicRepository));
		topic.setForum(forum);
		
		post = new Post();
		post.setId(2);
		post.setTopic(topic);
		post.setForum(forum);
		
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(mockResult.redirectTo(ForumController.class)).thenReturn(mockForumControllerRedirect);
		when(mockResult.forwardTo(ForumController.class)).thenReturn(mockForumControllerForward);
		when(mockResult.redirectTo(TopicController.class)).thenReturn(mockTopicControllerRedirect);
		when(mockResult.forwardTo(TopicController.class)).thenReturn(mockTopicControllerForward);
	}

	@Test
	public void deleteHasMorePostsShouldRedirectToTopicListing() {
		this.deleteRedirect(1, 0);
	}

	@Test
	public void deleteHasMorePostsShouldRedirectToPage3() {
		this.deleteRedirect(14, 3);
	}

	@Test
	public void deleteLastMessageShouldRedirectToForum() {
		when(postRepository.get(2)).thenReturn(post);
		topic.decrementTotalReplies(); // we simulate the event dispatch

		controller.delete(2);
		
		verify(postService).delete(post);
		verify(mockForumControllerRedirect).show(topic.getForum().getId(), 0);
		
	}

	@Test
	public void editSave() {
		PostFormOptions options = new PostFormOptions();
		
		when(postRepository.get(2)).thenReturn(post);

		controller.editSave(post, options, null, moderationLog);

		verify(postService).update(post, false, new ArrayList<PollOption>(),
				new ArrayList<AttachedFile>(), moderationLog);
		verify(mockTopicControllerRedirect).list(topic.getId(), 0, true);

	}

	@Test
	public void edit() {
		ArrayList<Smilie> smilies = new ArrayList<Smilie>();
		
		when(postRepository.get(1)).thenReturn(post);
		when(smilieRepository.getAllSmilies()).thenReturn(smilies);

		controller.edit(1);
		
		assertEquals(post, mockResult.included(""post""));
		assertEquals(true, mockResult.included(""isEdit""));
		assertEquals(new Topic(), mockResult.included(""topic""));
		assertEquals(forum, mockResult.included(""forum""));
		assertEquals(smilies, mockResult.included(""smilies""));

		verify(mockTopicControllerForward).add(0);

	}

	private void deleteRedirect(final int totalPosts, final int expectedPage) {
		when(topic.getTotalPosts()).thenReturn(totalPosts);
		topic.setId(7);
	
		when(postRepository.get(2)).thenReturn(post);
		when(config.getInt(ConfigKeys.POSTS_PER_PAGE)).thenReturn(5);
	
		controller.delete(2);
		
		this.redirectToPage(topic, expectedPage);
		verify(postService).delete(post);
	}

	private void redirectToPage(final Topic topic, final int expectedPage) {
		String url;
		

		if (expectedPage > 0) {
			url = String.format(""/%s/%s/%s/%s"", Domain.TOPICS, Actions.LIST, expectedPage, topic.getId());
		} else {
			url = String.format(""/%s/%s/%s"", Domain.TOPICS, Actions.LIST, topic.getId());
		}

		verify(mockResult).redirectTo(url);
	}
}"
net.jforum.controllers.PostReportControllerTestCase,"public class PostReportControllerTestCase {
	
	@Mock private UserSession userSession;
	@Mock private RoleManager roleManager;
	@Mock private PostReportRepository repository;
	@Mock private JForumConfig config;
	@Spy private MockResult mockResult;
	@Mock private PostReportController mockPostReportController;
	@InjectMocks private PostReportController controller;

	@Test
	public void listResolved() {
		when(config.getInt(ConfigKeys.TOPICS_PER_PAGE)).thenReturn(10);
		when(repository.getPaginated(0, 10, PostReportStatus.RESOLVED, new int[] {})).thenReturn(new PaginatedResult<PostReport>(new ArrayList<PostReport>(), 10));
		
		controller.listResolved(0);
		
		assertEquals(new Pagination(0, 0, 0, """", 0), mockResult.included(""pagination""));
		assertEquals(new ArrayList<PostReport>(), mockResult.included(""reports""));
	}

	@Test
	public void shouldHaveModerationRule() throws Exception {
		this.assertMethodModerationRule(""list"");
		this.assertMethodModerationRule(""resolve"", int.class);
		this.assertMethodModerationRule(""delete"", int.class);
		this.assertMethodModerationRule(""listResolved"", int.class);
	}

	private void assertMethodModerationRule(String methodName, Class<?>... argumentTypes) throws Exception {
		Method method = controller.getClass().getMethod(methodName, argumentTypes);
		assertNotNull(methodName, method);
		assertTrue(methodName, method.isAnnotationPresent(SecurityConstraint.class));
		assertEquals(methodName, ModerationRule.class, method.getAnnotation(SecurityConstraint.class).value());
	}

	@Test
	public void reportNotLoggedShouldIgnore() {
		when(userSession.isLogged()).thenReturn(false);
		
		controller.report(1, ""x"");
		
		verifyZeroInteractions(repository);
	}

	@Test
	public void reportLoggedShouldSucceed() {
		when(userSession.isLogged()).thenReturn(true);
		when(userSession.getUser()).thenReturn(new User());
		
		controller.report(1, ""x"");

		verify(repository).add(any(PostReport.class));
	}

	@Test
	public void deleteNotForumModeratorShouldIgnore() {
		int[] forumIds = new int[] {1};

		when(roleManager.getRoleValues(SecurityConstants.FORUM)).thenReturn(forumIds);
		PostReport report = new PostReport();
		report.setPost(new Post());
		report.getPost().setForum(new Forum());
		report.getPost().getForum().setId(2);
		when(repository.get(1)).thenReturn(report);
		when(mockResult.redirectTo(controller)).thenReturn(mockPostReportController);
		
		controller.delete(1);
		
		verify(mockPostReportController).list();
	}

	@Test
	public void deleteShouldSucceed() {
		int[] forumIds = new int[] {1};

		when(roleManager.getRoleValues(SecurityConstants.FORUM)).thenReturn(forumIds);
		PostReport report = new PostReport();
		report.setPost(new Post());
		report.getPost().setForum(new Forum());
		report.getPost().getForum().setId(1);
		when(repository.get(1)).thenReturn(report);
		when(mockResult.redirectTo(controller)).thenReturn(mockPostReportController);
	
		controller.delete(1);
		
		verify(repository).remove(report);
		verify(mockPostReportController).list();
	}

	@Test
	public void listNotAdministratorShouldFilterByForum() {
		int[] forumIds = new int[] {1, 2};

		when(roleManager.isAdministrator()).thenReturn(false);
		when(roleManager.isCoAdministrator()).thenReturn(false);
		when(roleManager.getRoleValues(SecurityConstants.FORUM)).thenReturn(forumIds);
		when(repository.getAll(PostReportStatus.UNRESOLVED, forumIds)).thenReturn(new ArrayList<PostReport>());
		
		controller.list();
		
		assertEquals(new ArrayList<PostReport>(), mockResult.included(""reports""));
	}

	@Test
	public void listNullStatusDefaultShouldBeUnresolved() {
		controller.list();
		
		verify(repository).getAll(PostReportStatus.UNRESOLVED, new int[] {});
	}

	@Test
	public void listIsAdministratorShouldNotFilterByForum() {
		when(roleManager.isAdministrator()).thenReturn(true);
		when(repository.getAll(PostReportStatus.UNRESOLVED, null)).thenReturn(new ArrayList<PostReport>());
		
		controller.list();
		
		assertEquals(new ArrayList<PostReport>(), mockResult.included(""reports""));
	}

	@Test
	public void listIsCoAdministratorShouldNotFilterByForum() {
		when(roleManager.isAdministrator()).thenReturn(false);
		when(roleManager.isCoAdministrator()).thenReturn(true);
		when(repository.getAll(PostReportStatus.UNRESOLVED, null)).thenReturn(new ArrayList<PostReport>());
		
		controller.list();
		
		assertEquals(new ArrayList<PostReport>(), mockResult.included(""reports""));
	}

	@Before
	public void setup() {
		when(roleManager.getRoleValues(SecurityConstants.FORUM)).thenReturn(new int[] {});
		when(userSession.getRoleManager()).thenReturn(roleManager);
	}
}"
net.jforum.controllers.RankingAdminControllerTestCase,"public class RankingAdminControllerTestCase extends AdminTestCase {
	
	@InjectMocks private RankingAdminController controller;
	@Mock private RankingRepository repository;
	@Mock private RankingService service;
	@Mock private RankingAdminController mockController;
	@Spy private MockResult mockResult;

	public RankingAdminControllerTestCase() {
		super(RankingAdminController.class);
	}

	@Test
	@Ignore(""is that suposed to test something"")
	public void add() {
		
	}

	@Test
	public void addSave() {
		when(mockResult.redirectTo(controller)).thenReturn(mockController);
	
		controller.addSave(new Ranking());
		
		verify(service).add(notNull(Ranking.class));
		verify(mockController).list();
	}

	@Test
	public void edit() {
		Ranking ranking = new Ranking();
		when(repository.get(1)).thenReturn(ranking);
		when(mockResult.forwardTo(controller)).thenReturn(mockController);
			
		controller.edit(1);
		
		assertEquals(ranking, mockResult.included(""ranking""));
		verify(mockController).add();
	}

	@Test
	public void editSave() {
		when(mockResult.redirectTo(controller)).thenReturn(mockController);
		
		controller.editSave(new Ranking());
		
		verify(service).update(notNull(Ranking.class));
		verify(mockController).list();
	}

	@Test
	public void delete() {
		when(mockResult.redirectTo(controller)).thenReturn(mockController);
			
		controller.delete(1, 2, 3, 4);
		
		verify(service).delete(1, 2, 3, 4);
		verify(mockController).list();
	}

	@Test
	public void listExpectOneRecord() {
		when(repository.getAllRankings()).thenReturn(Arrays.asList(new Ranking()));
	
		controller.list();
		
		assertEquals(Arrays.asList(new Ranking()), mockResult.included(""rankings""));
	}
}"
net.jforum.controllers.UserControllerTestCase,"public class UserControllerTestCase {
	@Mock private UserRepository userRepository;
	@Mock private UserSession userSession;
	@Mock private UserService userService;
	@Mock private SessionManager sessionManager;
	@Mock private JForumConfig config;
	@Mock private RoleManager roleManager;
	@Mock private LostPasswordService lostPasswordService;
	@Mock private AvatarService avatarService;
	@Mock private RankingRepository rankingRepository;
	@Spy private MockResult mockResult;
	@Mock private HttpServletRequest mockRequest;
	
	@Mock private ForumController mockForumController;
	@Mock private MessageController mockMessageController;
	
	@Mock private UserController mockForwardControler;
	@Mock private UserController mockRedirectController;
	
	@InjectMocks private UserController userController;
	
	private User user = new User();
	private List<User> userList = new ArrayList<User>();
	
	@Before 
	public void setup() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(mockResult.forwardTo(userController)).thenReturn(mockForwardControler);
		when(mockResult.redirectTo(userController)).thenReturn(mockRedirectController);
	}
	
	@Test
	public void edit() {
		when(userRepository.get(1)).thenReturn(user);
		
		userController.edit(1);

		assertEquals(user, mockResult.included(""user""));
	}

	@Test
	public void editSave() {
		user.setId(1);

		userController.editSave(user,null, null, null);

		verify(userService).update(user, false);
	}

	@Test
	public void recoverPassword() {
		userController.recoverPassword(""123"");
		
		assertEquals(""123"", mockResult.included(""hash""));
	}

	@Test
	public void recoverPasswordValidateUsingBadDataExpectFail() {
		userController.recoverPasswordValidate(""hash"", ""user"", ""123"");

		assertEquals(true, mockResult.included(""error""));
		assertEquals(""PasswordRecovery.invalidData"", mockResult.included(""message""));
	}

	@Test
	public void recoverPasswordValidateUsingGoodDataExpectSuccess() {
		when(userRepository.validateLostPasswordHash(""user"", ""hash"")).thenReturn(user);
		
		userController.recoverPasswordValidate(""hash"", ""user"", ""123"");

		assertEquals(""PasswordRecovery.ok"", mockResult.included(""message""));
	}

	@Test
	public void lostPasswordSend() {
		when(lostPasswordService.send(""username"", ""email"")).thenReturn(true);
		
		userController.lostPasswordSend(""username"", ""email"");

		assertEquals(true, mockResult.included(""success""));
	}

	@Test
	public void loginWithReferer() {
		when(config.getBoolean(ConfigKeys.LOGIN_IGNORE_REFERER)).thenReturn(false);
		when(mockRequest.getHeader(""Referer"")).thenReturn(""some referer"");
		
		userController.login(null, false);

		assertEquals(""some referer"", mockResult.included(""returnPath""));
	}

	@Test
	public void loginWithReturnPath() {
		userController.login(""some return path"", false);

		assertEquals(""some return path"", mockResult.included(""returnPath""));
	}

	@Test
	public void loginWithoutReturnPathAndIgnoringReferer() {
		when(config.getBoolean(ConfigKeys.LOGIN_IGNORE_REFERER)).thenReturn(true);
		when(mockRequest.getHeader(""Referer"")).thenReturn(""some referer"");
		
		userController.login(null, false);
		
		assertNull(mockResult.included(""returnPath""));
	}

	@Test
	public void editShouldHaveEditUserRule() throws Exception {
		Method method = userController.getClass().getMethod(""edit"", int.class);
		
		assertNotNull(method);
		assertTrue(method.isAnnotationPresent(SecurityConstraint.class));
		assertEquals(EditUserRule.class, method.getAnnotation(SecurityConstraint.class).value());
	}

	@Test
	public void editSaveShouldHaveEditUserRule() throws Exception {
		Method method = userController.getClass().getMethod(""editSave"", User.class, Integer.class,
			UploadedFile.class, Integer.class);
		
		assertNotNull(method);
		assertTrue(method.isAnnotationPresent(SecurityConstraint.class));
		assertEquals(EditUserRule.class, method.getAnnotation(SecurityConstraint.class).value());
	}

	@Test
	public void listUsingListingIsDisabledShouldForceEmptyList() {
		when(roleManager.isUserListingEnabled()).thenReturn(false);

		userController.list(0);
	
		assertEquals(userList, mockResult.included(""users""));
	}

	@Test
	public void listCanInteractWithOtherGroups() {
		when(roleManager.roleExists(SecurityConstants.INTERACT_OTHER_GROUPS)).thenReturn(true);
		when(roleManager.isUserListingEnabled()).thenReturn(true);
		
		userController.list(0);
		
		verify(userRepository).getAllUsers(0, 0);
	}

	@Test
	public void listCannotInteractWithOtherGroups() {
		when(roleManager.roleExists(SecurityConstants.INTERACT_OTHER_GROUPS)).thenReturn(false);
		when(roleManager.isUserListingEnabled()).thenReturn(true);
		when(userSession.getUser()).thenReturn(user);
		
		userController.list(0);
		
		verify(userRepository, never()).getAllUsers(0, 0);
	}

	@Test
	public void logout() {
		when(config.getInt(ConfigKeys.ANONYMOUS_USER_ID)).thenReturn(1);
		when(config.getValue(ConfigKeys.COOKIE_AUTO_LOGIN)).thenReturn(""x"");
		when(config.getValue(ConfigKeys.COOKIE_USER_HASH)).thenReturn(""y"");
		
		userController.logout();
		
		verify(userSession).becomeAnonymous(1);
		verify(userSession).removeCookie(""x"");
		verify(userSession).removeCookie(""y"");
	}

	@Test
	public void authenticateUserUsingInvalidCredentialsExpectsInvalidLogin() {		
		when(userService.validateLogin(""user"", ""passwd"")).thenReturn(null);

		userController.authenticateUser(""user"", ""passwd"", false, null);
	
		verify(mockRedirectController).login(anyString(), anyBoolean());
	}

	@Test
	public void authenticateUserUsingGoodCredentialsAndAutoLoginEnabledExpectsSuccess() {
		user.setId(26);
		when(userService.validateLogin(""user"", ""passwd"")).thenReturn(user);
		when(config.getValue(ConfigKeys.COOKIE_AUTO_LOGIN)).thenReturn(""x"");
		when(config.getValue(ConfigKeys.COOKIE_USER_HASH)).thenReturn(""y"");
		when(config.getValue(ConfigKeys.COOKIE_USER_ID)).thenReturn(""z"");
		when(userService.generateAutoLoginSecurityHash(26)).thenReturn(""456"");
		when(userService.generateAutoLoginUserHash(""456"")).thenReturn(""789"");
		
		userController.authenticateUser(""user"", ""passwd"", true, null);

		verify(userSession).becomeLogged();
		verify(userSession).addCookie(""x"", ""1"");
		verify(userSession).addCookie(""y"", ""789"");
		verify(userSession).addCookie(""z"", ""26"");
		Assert.assertEquals(""456"", user.getSecurityHash());
	}

	@Test
	public void authenticateUserUsingGoodCredentialsWithoutAutoLoginExpectsSuccess() {
		when(userService.validateLogin(""user"", ""passwd"")).thenReturn(user);
		
		userController.authenticateUser(""user"", ""passwd"", false, null);

		verify(userSession).becomeLogged();
		verify(userSession, never()).addCookie(anyString(), anyString());
	}

	@Test
	public void authenticateUserWithReturnPath() {
		when(userService.validateLogin(""user1"", ""pass1"")).thenReturn(user);
		
		userController.authenticateUser(""user1"", ""pass1"", false, ""return path"");
	
		verify(mockResult).redirectTo(""return path"");
	}

	@Test
	public void registrationCompletedWithAnonymousUserExpectRedirect() {
		when(userSession.isLogged()).thenReturn(false);
		
		userController.registrationCompleted();
		
		verify(mockRedirectController).insert();
	}

	@Test
	public void registrationCompletedWithValidUserExpectsPropertyBagWithUser() {
		when(userSession.isLogged()).thenReturn(true);
		when(userSession.getUser()).thenReturn(user);
		
		userController.registrationCompleted();
		
		assertEquals(user, mockResult.included(""user""));
	}

	@Test
	public void insertSaveUsernameTooBig() {
		when(config.getInt(ConfigKeys.USERNAME_MAX_LENGTH)).thenReturn(1);
		user.setUsername(""username1"");
		
		userController.insertSave(user);
		
		assertEquals(""User.usernameTooBig"", mockResult.included(""error""));
		verify(mockForwardControler).insert();
	}

	@Test
	public void insertSaveUsernameContainsInvalidChars() {
		when(config.getInt(ConfigKeys.USERNAME_MAX_LENGTH)).thenReturn(20);
		user.setUsername(""<username"");
		
		userController.insertSave(user);
		
		assertEquals(""User.usernameInvalidChars"", mockResult.included(""error""));
		verify(mockForwardControler).insert();
	}

	@Test
	public void insertSaveUsernameContainsInvalidChars2() {
		when(config.getInt(ConfigKeys.USERNAME_MAX_LENGTH)).thenReturn(20);
		user.setUsername("">username"");
		
		userController.insertSave(user);
		
		assertEquals(""User.usernameInvalidChars"", mockResult.included(""error""));
		verify(mockForwardControler).insert();
	}

	@Test
	public void insertSaveUsernameNotAvailable() {
		when(config.getInt(ConfigKeys.USERNAME_MAX_LENGTH)).thenReturn(20);
		when(userRepository.isUsernameAvailable(""username"", null)).thenReturn(false);
		user.setUsername(""username"");
		
		userController.insertSave(user);
		
		assertEquals(""User.usernameNotAvailable"", mockResult.included(""error""));
		verify(mockForwardControler).insert();
	}

	@Test
	public void insertSaveUser() {
		when(config.getInt(ConfigKeys.USERNAME_MAX_LENGTH)).thenReturn(20);
		when(userRepository.isUsernameAvailable(""username"", null)).thenReturn(true);
		user.setUsername(""username"");
		
		userController.insertSave(user);
		
		verify(userService).add(user);
		verify(mockRedirectController).registrationCompleted();
	}

	@Test
	public void insertLoginUser() {
		when(config.getInt(ConfigKeys.USERNAME_MAX_LENGTH)).thenReturn(20);
		when(userRepository.isUsernameAvailable(""username"", null)).thenReturn(true);
		user.setUsername(""username"");
		
		userController.insertSave(user);
		
		verify(userSession).becomeLogged();
	}

	@Test
	public void profileHasReadAccessRightsShouldAllowViewProfile() {
		when(roleManager.getCanViewProfile()).thenReturn(true);
		when(userSession.getUser()).thenReturn(user);
		
		userController.profile(1);
		
		verify(userRepository).get(1);
	}

	@Test
	public void profileHasWriteAccessRightsShouldAllowEditProfile() {
		when(roleManager.getCanViewProfile()).thenReturn(true);
		when(roleManager.getCanEditUser(any(User.class), anyListOf(Group.class))).thenReturn(true);
		when(userSession.getUser()).thenReturn(user);
		
		userController.profile(1);
		
		assertEquals(true, mockResult.included(""canEdit""));
	}

	@Test
	public void profileDoesNotHaveReadAccessRightShouldDenyViewProfile() {
		when(roleManager.getCanViewProfile()).thenReturn(false);
		when(mockResult.redirectTo(MessageController.class)).thenReturn(mockMessageController);
		
		userController.profile(1);
		
		verify(mockMessageController).accessDenied();
	}

	@Test
	public void profileDoesNotHaveWriteAccessRightShouldDenyEditProfile() {
		when(roleManager.getCanViewProfile()).thenReturn(true);
		when(roleManager.getCanEditUser(any(User.class), anyListOf(Group.class))).thenReturn(false);
		when(userSession.getUser()).thenReturn(user);
		
		userController.profile(1);
		
		assertEquals(false, mockResult.included(""canEdit""));
	}
}"
net.jforum.controllers.ForumAdminControllerTestCase,"public class ForumAdminControllerTestCase extends AdminTestCase {
	
	@InjectMocks private ForumAdminController controller;
	@Mock private CategoryRepository categoryRepository;
	@Mock private ForumService service;
	@Mock private ForumRepository forumRepository;
	@Mock private UserSession userSession;
	@Mock private RoleManager roleManager;
	@Mock private ForumAdminController mockForumAdminController;
	@Spy private MockResult mockResult;

	public ForumAdminControllerTestCase() {
		super(ForumAdminController.class);
	}

	@Test
	public void deleteIsFullAdministratorShouldAllow() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAdministrator()).thenReturn(true);
		when(mockResult.redirectTo(controller)).thenReturn(mockForumAdminController);
			
		controller.delete(1, 2);
		
		verify(service).delete(1, 2);
		verify(mockForumAdminController).list();
	}

	@Test
	public void deleteIsNotFullAdministratorShouldIgnore() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAdministrator()).thenReturn(false);
		when(mockResult.redirectTo(controller)).thenReturn(mockForumAdminController);
			
		controller.delete(1, 2);
		
		verify(mockForumAdminController).list();
	}

	@Test
	public void list() {
		final Category category = new Category(categoryRepository);

		when(categoryRepository.getAllCategories()).thenReturn(Arrays.asList(category));
			
		controller.list();
		
		assertEquals(Arrays.asList(category), mockResult.included(""categories""));
	}

	@Test
	public void addExpectCategories() {
		when(categoryRepository.getAllCategories()).thenReturn(Arrays.asList(new Category()));
			
		controller.add();
		
		assertEquals(Arrays.asList(new Category()), mockResult.included(""categories""));
	}

	@Test
	public void editExpectForumAndCategories() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.getCanModerateForum(3)).thenReturn(true);
		when(forumRepository.get(3)).thenReturn(new Forum());
		when(categoryRepository.getAllCategories()).thenReturn(Arrays.asList(new Category()));
		when(mockResult.forwardTo(controller)).thenReturn(mockForumAdminController);
			
		controller.edit(3);
		
		assertEquals(new Forum(), mockResult.included(""forum""));
		assertEquals(Arrays.asList(new Category()), mockResult.included(""categories""));
		verify(mockForumAdminController).add();
	}

	@Test
	public void editSaveIsSuperAdministratorExpectsSuccess() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAdministrator()).thenReturn(true);
		when(mockResult.redirectTo(controller)).thenReturn(mockForumAdminController);
			
		controller.editSave(new Forum());
		
		verify(service).update(notNull(Forum.class));
		verify(mockForumAdminController).list();
	}

	@Test
	public void editSaveIsCategoryAllowedExpectsSuccess() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAdministrator()).thenReturn(false);
		when(roleManager.getCanModerateForum(0)).thenReturn(true);
		when(mockResult.redirectTo(controller)).thenReturn(mockForumAdminController);
	
		Forum forum = new Forum();
		forum.setCategory(new Category());
		forum.getCategory().setId(1);

		controller.editSave(forum);
		
		verify(service).update(notNull(Forum.class));
		verify(mockForumAdminController).list();
	}

	@Test
	public void editSaveNotSuperAdministratorCategoryNotAllowedShouldIgnore() {
		final Forum forum = new Forum();
		forum.setCategory(new Category());
		forum.getCategory().setId(1);
		
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAdministrator()).thenReturn(false);
		when(roleManager.getCanModerateForum(0)).thenReturn(true);
		when(mockResult.redirectTo(controller)).thenReturn(mockForumAdminController);
			
		controller.editSave(forum);
		
		verify(service).update(forum);
		verify(mockForumAdminController).list();
	}

	@Test
	public void addSaveIsSuperAdministratorExpectSuccess() {
		final Forum f = new Forum();
		f.setName(""f1"");
		
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAdministrator()).thenReturn(true);
		when(mockResult.redirectTo(controller)).thenReturn(mockForumAdminController);
			
		controller.addSave(f);
		
		assertEquals(f, mockResult.included(""forum""));
		verify(service).add(f);
		verify(mockForumAdminController).list();
	}

	@Test
	public void addSaveIsCategoryAllowedExpectSuccess() {
		final Forum f = new Forum();
		f.setName(""f1"");
		f.setCategory(new Category());
		f.getCategory().setId(1);
		
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAdministrator()).thenReturn(false);
		when(roleManager.isCategoryAllowed(1)).thenReturn(true);
		when(mockResult.redirectTo(controller)).thenReturn(mockForumAdminController);
			
		controller.addSave(f);
		
		assertEquals(f, mockResult.included(""forum""));
		verify(service).add(f);
		verify(mockForumAdminController).list();
	}

	@Test
	public void addSaveNotSuperAdministratorCategoryNotAllowedShouldIgnore() {
		final Forum forum = new Forum();
		forum.setName(""f1"");
		forum.setCategory(new Category());
		forum.getCategory().setId(1);
		
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAdministrator()).thenReturn(false);
		when(roleManager.isCategoryAllowed(1)).thenReturn(true);
		when(mockResult.redirectTo(controller)).thenReturn(mockForumAdminController);
			
		controller.addSave(forum);
		
		verify(service).add(forum);
		assertEquals(forum, mockResult.included(""forum""));
		verify(mockForumAdminController).list();
	}

	@Test
	public void up() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.getCanModerateForum(1)).thenReturn(true);
		when(mockResult.redirectTo(controller)).thenReturn(mockForumAdminController);
			
		controller.up(1);
		
		verify(service).upForumOrder(1);
		verify(mockForumAdminController).list();
	}

	@Test
	public void down() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.getCanModerateForum(2)).thenReturn(true);
		when(mockResult.redirectTo(controller)).thenReturn(mockForumAdminController);
			

		controller.down(2);
		
		verify(service).downForumOrder(2);
		verify(mockForumAdminController).list();
	}
}"
net.jforum.controllers.RecentTopicsControllerTestCase,"public class RecentTopicsControllerTestCase {
	@Mock private RecentTopicsRepository repository;
	@Mock private JForumConfig config;
	@Mock private UserSession userSession;
	@Spy private MockResult mockResult;
	
	@InjectMocks private RecentTopicsController component;

	List<Topic> topicList = new ArrayList<Topic>();
	
	@Test
	public void listNew() {
		component.listNew();

		assertEquals(""recentTopicsNew"", mockResult.included(""recentTopicsSectionKey""));
		assertEquals(topicList, mockResult.included(""topics""));
	}

	@Test
	public void listUpdated() {
		component.listUpdated();

		assertEquals(""recentTopicsUpdated"", mockResult.included(""recentTopicsSectionKey""));
		assertEquals(topicList, mockResult.included(""topics""));
	}

	@Test
	public void listHot() {
		component.listHot();

		assertEquals(""recentTopicsHot"", mockResult.included(""recentTopicsSectionKey""));
		assertEquals(topicList, mockResult.included(""topics""));
	}
}"
net.jforum.services.TopicServiceTestCase,"public class TopicServiceTestCase {
	
	@Mock private TopicRepository topicRepository;
	@Mock private PostRepository postRepository;
	@Mock private ForumRepository forumRepository;
	@Mock private PollService pollService;
	@Mock private AttachmentService attachmentService;
	@Mock private UserRepository userRepository;
	@InjectMocks private TopicService topicService;

	@Test
	public void addTopicInvocationsShouldBeInOrder() {
		final Topic t = mock(Topic.class);

		when(t.getSubject()).thenReturn(""subject"");
		User user = new User();
		when(t.getUser()).thenReturn(user);
	
		Forum forum = new Forum(); forum.setId(1);
		when(t.getForum()).thenReturn(forum);
	
		Post post = mock(Post.class);
		when(post.getSubject()).thenReturn(""subject"");
		when(post.getText()).thenReturn(""text"");
		when(t.getFirstPost()).thenReturn(post);
		Date date = new Date();
		when(t.getDate()).thenReturn(date);
		when(t.isWaitingModeration()).thenReturn(true);
		
		
		topicService.addTopic(t, Collections.<PollOption>emptyList(), Collections.<AttachedFile>emptyList());
		
	
		verify(t).setFirstPost(null);
		verify(t).setHasAttachment(false);
	
		InOrder inOrder = inOrder(topicRepository, postRepository, post, t);
		inOrder.verify(topicRepository).add(t); 
		inOrder.verify(post).setForum(forum); 
		inOrder.verify(post).setTopic(t); 
		inOrder.verify(post).setDate(date); 
		inOrder.verify(post).setUser(user); 
		inOrder.verify(post).setSubject(""subject""); 
	
		inOrder.verify(postRepository).add(post);
		inOrder.verify(t).setFirstPost(post); 
		inOrder.verify(t).setLastPost(post); 
	
		verify(pollService).associatePoll(t, Collections.<PollOption>emptyList());
		verify(attachmentService).insertAttachments(Collections.<AttachedFile>emptyList(), post);
	}

	@Test
	public void replyPostRepositoryShouldBeCalledBeforeCurrentTopicSetLastPost() {
		final Post post = new Post(); post.setSubject(""subject""); post.setText(""msg"");
		post.setUser(new User());
		
		Topic topic = mock(Topic.class);
		when(topicRepository.get(1)).thenReturn(topic);
		when(topic.getForum()).thenReturn(new Forum());
		
		
		Topic topicCheck = new Topic(); topicCheck.setId(1);
		topicService.reply(topicCheck, post, Collections.<AttachedFile>emptyList());
		
		
		InOrder inOrder = inOrder(postRepository, topic);
		inOrder.verify(postRepository).add(post); 
		inOrder.verify(topic).setLastPost(post); 
		
		verify(topic).incrementTotalReplies();
		verify(attachmentService).insertAttachments(Collections.<AttachedFile>emptyList(), post);
	}


	@Test
	public void replyPostWithoutSubjectShouldUseTopicSubject() {
		final Topic topic = new Topic(); topic.setSubject(""topic subject""); topic.setId(1);
		when(topicRepository.get(topic.getId())).thenReturn(topic);
		
		
		Post post = new Post(); post.setText(""122""); post.setSubject(null); post.setUser(new User());
		topicService.reply(topic, post, Collections.<AttachedFile>emptyList());
		
		
		verify(attachmentService).insertAttachments(eq(Collections.<AttachedFile>emptyList()), any(Post.class));
		Assert.assertEquals(topic.getSubject(), post.getSubject());
	}

	@Test
	public void replyModeratedPostShouldNotUpdateSomeProperties() {
		final Topic topic = this.newTopic();
		int currentTotalReplies = topic.getTotalReplies();
		Post post2 = new Post();
		post2.setId(2);
		Post post5 = new Post();
		post5.setId(5);
		
		topic.setLastPost(post2);
		Forum forum = new Forum(1);
		forum.setLastPost(post5);

		when(topicRepository.get(topic.getId())).thenReturn(topic);

		
		Post post = new Post(); post.setSubject(""s1""); post.setText(""t1"");
		post.setDate(null); post.setTopic(null); post.setModerate(true); post.setUser(new User());

		topicService.reply(topic, post, Collections.<AttachedFile>emptyList());
		
		
		Assert.assertEquals(0, post.getUser().getTotalPosts());
		Assert.assertEquals(topic, post.getTopic());
		Assert.assertEquals(currentTotalReplies, topic.getTotalReplies());
		Assert.assertFalse(forum.getLastPost().equals(post));
		Assert.assertFalse(topic.getLastPost().equals(post));
	}

	@Test
	public void addModeratedTopicShouldNotUpdateForumLastPost() {
		final Topic topic = this.newTopic();
		topic.setPendingModeration(true);
		final Forum forum = new Forum(1);
		
		topicService.addTopic(topic, Collections.<PollOption>emptyList(), Collections.<AttachedFile>emptyList());
		
		Assert.assertEquals(0, topic.getUser().getTotalPosts());
		Assert.assertNull(forum.getLastPost());
	}

	@Test(expected = IllegalStateException.class)
	public void replyWithNullPostTextExpectsException() {
		Topic t = new Topic(); t.setSubject(""a"");
		when(topicRepository.get(0)).thenReturn(t);
		

		Post p = new Post();
		p.setSubject(""123"");
		p.setText(null);

		topicService.reply(new Topic(), p, null);
	}

	@Test
	public void replyPostExpectsChangesToUpdatableProperties() {
		final Post post = new Post(); post.setUser(new User());
		post.setSubject(""s1""); post.setText(""t1""); post.setDate(null); post.setTopic(null);
		final Topic current = new Topic(); current.setId(1); current.setForum(new Forum());
		int currentTotalReplies = current.getTotalReplies();
		
		when(topicRepository.get(1)).thenReturn(current);
			
		
		Topic tempTopic = new Topic(); tempTopic.setId(1);
		topicService.reply(tempTopic, post, Collections.<AttachedFile>emptyList());
		
		
		verify(postRepository).add(post);
		Assert.assertEquals(1, post.getUser().getTotalPosts());
		Assert.assertNotNull(post.getDate());
		Assert.assertEquals(current, post.getTopic());
		Assert.assertEquals(post, post.getTopic().getLastPost());
		Assert.assertEquals(post, current.getForum().getLastPost());
		Assert.assertEquals(currentTotalReplies + 1, current.getTotalReplies());
	}

	@Test(expected = IllegalStateException.class)
	public void addNewTopicWithNullUserExpectException() {
		Topic t = new Topic();
		t.setUser(null);

		topicService.addTopic(t, null, null);
	}

	@Test(expected = IllegalStateException.class)
	public void addNewTopicWithoutSubjectExpectException() {
		Topic t = new Topic();
		t.setUser(new User());
		t.setSubject(null);

		topicService.addTopic(t, null, null);
	}

	@Test(expected = IllegalStateException.class)
	public void addNewTopicWithoutPostSubjectExpectsException() {
		Topic t = new Topic();
		t.setUser(new User());
		t.setSubject(""123"");
		t.setFirstPost(new Post());
		t.getFirstPost().setSubject(null);

		topicService.addTopic(t, null, null);
	}

	@Test(expected = IllegalStateException.class)
	public void addNewTopicWithoutPostTextExpectsException() {
		Topic t = new Topic();
		t.setUser(new User());
		t.setSubject(""123"");
		t.setFirstPost(new Post());
		t.getFirstPost().setSubject(""123"");
		t.getFirstPost().setText(null);

		topicService.addTopic(t, null, null);
	}

	@Test
	public void addNewTopicShouldSaveFirstPostAndAllRelatedObjecUpdates() {
		final Topic topic = this.newTopic();
		final Forum forum = new Forum(1);
		
		when(forumRepository.get(1)).thenReturn(forum);
		when(userRepository.getTotalPosts(topic.getUser())).thenReturn(1);
		
		
		topicService.addTopic(topic, Collections.<PollOption>emptyList(), Collections.<AttachedFile>emptyList());
		
		
		verify(topicRepository).add(topic);
		verify(postRepository).add(topic.getFirstPost());
		Assert.assertEquals(1, topic.getUser().getTotalPosts());
		Assert.assertTrue(topic.getLastPost() == topic.getFirstPost());
		Assert.assertTrue(topic == topic.getFirstPost().getTopic());
		Assert.assertTrue(topic == topic.getLastPost().getTopic());
		Assert.assertNotNull(topic.getDate());
		Assert.assertNotNull(topic.getFirstPost().getDate());
		Assert.assertNotNull(topic.getLastPost().getDate());
		Assert.assertEquals(topic.getDate(), topic.getFirstPost().getDate());
		Assert.assertEquals(topic.getDate(), topic.getLastPost().getDate());
		Assert.assertEquals(topic.getFirstPost(), forum.getLastPost());
	}

	private Topic newTopic() {
		Topic topic = new Topic();
		User user = new User();
		user.setId(1);
		
		topic.setSubject(""topic 1"");
		topic.getForum().setId(1);
		topic.setUser(user);
		topic.setFirstPost(new Post());
		topic.getFirstPost().setSubject(""123"");
		topic.getFirstPost().setText(""some message"");
		topic.getFirstPost().setSignatureEnabled(true);

		return topic;
	}
}"
net.jforum.services.RankingServiceTestCase,"public class RankingServiceTestCase {

	@Mock private RankingRepository repository;
	@InjectMocks private RankingService service;

	@Test
	public void specialRankingShouldNotHaveMinPass10ShouldForceToZero() {
		Ranking r = new Ranking(); r.setTitle(""r1""); r.setSpecial(true); r.setMin(10);
		
		service.add(r);

		verify(repository).add(notNull(Ranking.class));
		Assert.assertEquals(0, r.getMin());
	}

	@Test(expected = ValidationException.class)
	public void minValueShouldNotBeLessThan1ExpectsValidationException() {
		Ranking r = new Ranking(); r.setTitle(""r1""); r.setSpecial(false); r.setMin(0);
		service.add(r);
	}

	@Test
	public void deleteUsingNullIdsShouldIgnore() {
		service.delete(null);

		verifyZeroInteractions(repository);
	}

	@Test
	public void delete() {
		when(repository.get(1)).thenReturn(new Ranking());
		when(repository.get(2)).thenReturn(new Ranking());

		service.delete(1, 2);

		verify(repository, times(2)).remove(notNull(Ranking.class));
	}

	@Test
	public void addExpectSuccess() {
		Ranking r = new Ranking(); r.setTitle(""r1""); r.setMin(1);

		service.add(r);

		verify(repository).add(notNull(Ranking.class));
	}

	@Test(expected = ValidationException.class)
	public void addWithIdBiggerThanZeroExpectsValidationException() {
		Ranking r = new Ranking(); r.setTitle(""r1""); r.setId(1); r.setMin(1);
		service.add(r);
	}

	@Test(expected = ValidationException.class)
	public void updateWithoutAnIdExpectsException() {
		Ranking r = new Ranking(); r.setTitle(""r1""); r.setMin(1); r.setId(0);
		service.update(r);
	}

	@Test
	public void updateExpectSuccess() {
		Ranking r = new Ranking(); r.setId(1); r.setTitle(""r1""); r.setMin(1);

		service.update(r);

		verify(repository).update(notNull(Ranking.class));
	}

	@Test(expected = NullPointerException.class)
	public void addUsingNullExpectsNPE() {
		service.add(null);
	}

	@Test(expected = ValidationException.class)
	public void addWithoutTitleExpectsValidationException() {
		service.add(new Ranking());
	}

	@Test(expected = NullPointerException.class)
	public void updateUsingNullExpectsNPE() {
		service.update(null);
	}

	@Test(expected = ValidationException.class)
	public void updateWithoutTitleExpectsValidationException() {
		Ranking r = new Ranking(); r.setTitle(null); r.setMin(1); r.setId(1);
		service.add(r);
	}
}"
net.jforum.services.TopicWatchServiceTestCase,"public class TopicWatchServiceTestCase {

	@Mock private TopicWatchRepository repository;
	@InjectMocks private TopicWatchService service;

	@Test
	public void unwatch() {
		final Topic topic = new Topic(); topic.setId(1);
		final User user = new User(); user.setId(2);

		service.unwatch(topic, user);

		verify(repository).removeSubscription(topic, user);
	}

	@Test
	public void watchUserNotSubscribedShouldAdd() {
		final Topic topic = new Topic(); topic.setId(1);
		final User user = new User(); user.setId(2);
		when(repository.getSubscription(topic, user)).thenReturn(null);

		service.watch(topic, user);

		verify(repository).add(notNull(TopicWatch.class));
	}

	@Test
	public void watchUserIsSubscribedShouldIgnore() {
		final Topic topic = new Topic(); topic.setId(1);
		final User user = new User(); user.setId(2);

		when(repository.getSubscription(topic, user)).thenReturn(new TopicWatch());

		service.watch(topic, user);
		
		verify(repository,never()).add(any(TopicWatch.class));
	}
}"
net.jforum.services.RSSServiceTestCase,"public class RSSServiceTestCase {

	@Mock private JForumConfig config;
	@Mock private RSSRepository rssRepository;
	@Mock private I18n i18n;
	@Mock private ForumRepository forumRepository;
	@InjectMocks private RSSService service;

	@Test
	public void forTopics() throws Exception {
		Forum forum = new Forum(); forum.setId(1); forum.setName(""forum x""); forum.setDescription(""forum description"");

		when(forumRepository.get(forum.getId())).thenReturn(forum);
		when(config.getInt(ConfigKeys.TOPICS_PER_PAGE)).thenReturn(10);
		when(rssRepository.getForumTopics(forum, 10)).thenReturn(Arrays.asList(newTopic(1, ""topic 1"", 1, ""post text 1"")));
		when(i18n.params(""forum x"")).thenReturn(new Object[] { ""forum x"" });
		when(i18n.getFormattedMessage(""RSS.ForumTopics.title"", new Object[] { ""forum x"" })).thenReturn(""channel title"");
		when(config.getValue(ConfigKeys.RSS_DATE_TIME_FORMAT)).thenReturn(""EEE, d MMM yyyy HH:mm:ss"");
		when(config.getString(ConfigKeys.FORUM_LINK)).thenReturn(""http://site.link/"");
		String result = service.forForum(1);

		XpathEngine xpath = XMLUnit.newXpathEngine();
		Document document = XMLUnit.buildControlDocument(result);

		assertEquals(""forum description"", xpath.evaluate(""//channel/description"", document));
		assertEquals(""http://site.link/forums/show/1.page"", xpath.evaluate(""//channel/link"", document));
		assertEquals(""channel title"", xpath.evaluate(""//channel/title"", document));
		assertEquals(""post text 1"", xpath.evaluate(""//channel/item/description"", document));
		assertEquals(""http://site.link/topics/preList/1/1.page"", xpath.evaluate(""//channel/item/link"", document));
		assertEquals(""topic 1"", xpath.evaluate(""//channel/item/title"", document));
	}

	@Before
	public void setup() {
		when(config.getValue(ConfigKeys.SERVLET_EXTENSION)).thenReturn("".page"");
	}

	private Topic newTopic(int id, String subject, int postId, String postText) {
		Topic topic = new Topic();

		topic.setId(1);
		topic.setDate(new Date());
		topic.setSubject(subject);
		topic.setLastPost(new Post());
		topic.getLastPost().setId(postId);
		topic.getLastPost().setText(postText);

		return topic;
	}
}"
net.jforum.services.PrivateMessageServiceTestCase,"public class PrivateMessageServiceTestCase {

	@Mock private PrivateMessageRepository repository;
	@InjectMocks private PrivateMessageService service;
	private PrivateMessage pm = new PrivateMessage();

	@Test
	public void deleteIsSenderTypeSentShouldAccept() {
		when(repository.get(1)).thenReturn(pm);
		pm.setToUser(this.newUser(3)); pm.setFromUser(this.newUser(2)); pm.setType(PrivateMessageType.SENT);

		service.delete(this.newUser(2), 1);

		verify(repository).remove(pm);
	}

	@Test
	public void deleteIsRecipientTypeNotSentShouldAccept() {
		when(repository.get(1)).thenReturn(pm);
		pm.setToUser(this.newUser(3)); pm.setFromUser(this.newUser(2)); pm.setType(PrivateMessageType.READ);

		service.delete(this.newUser(3), 1);

		verify(repository).remove(pm);
	}

	@Test
	public void deleteIsSenderTypeNotSentShouldIgnore() {
		when(repository.get(1)).thenReturn(pm);
		pm.setToUser(this.newUser(3)); pm.setFromUser(this.newUser(2)); pm.setType(PrivateMessageType.NEW);
		service.delete(this.newUser(2), 1);
	}

	@Test
	public void deleteIsRecipientTypeSentShouldIgnore() {
		when(repository.get(1)).thenReturn(pm);
		pm.setToUser(this.newUser(3)); pm.setFromUser(this.newUser(2)); pm.setType(PrivateMessageType.SENT);
		service.delete(this.newUser(3), 1);
	}

	@Test
	public void deleteNotRecipientNotSenderShouldIgnore() {
		when(repository.get(1)).thenReturn(pm);
		pm.setToUser(this.newUser(2)); pm.setFromUser(this.newUser(3));
		service.delete(this.newUser(1), 1);
	}

	@Test
	public void deleteNullIdsShouldIgnore() {
		service.delete(null, null);
	}

	@Test
	public void sendWithNullDateShouldForceAValue() {
		PrivateMessage pm = new PrivateMessage();
		pm.setFromUser(new User());
		pm.setToUser(new User());
		pm.setText(""text"");
		pm.setSubject(""subject"");
		pm.setDate(null);

		service.send(pm);

		assertNotNull(pm.getDate());
	}

	@Test
	public void sendExpectSuccess() {
		PrivateMessage pm = new PrivateMessage();
		pm.setFromUser(new User());
		pm.setToUser(new User());
		pm.setText(""text"");
		pm.setSubject(""subject"");

		service.send(pm);
		
		verify(repository).add(notNull(PrivateMessage.class));
	}

	@Test(expected = ValidationException.class)
	public void textNullExpectsException() {
		PrivateMessage pm = new PrivateMessage();
		pm.setFromUser(new User());
		pm.setToUser(new User());
		pm.setText(null);
		pm.setSubject(""subject"");

		service.send(pm);
	}

	@Test(expected = ValidationException.class)
	public void textEmptyExpectsException() {
		PrivateMessage pm = new PrivateMessage();
		pm.setFromUser(new User());
		pm.setToUser(new User());
		pm.setText("""");
		pm.setSubject(""subject"");

		service.send(pm);
	}

	@Test(expected = ValidationException.class)
	public void subjectEmptyExpectsException() {
		PrivateMessage pm = new PrivateMessage();
		pm.setFromUser(new User());
		pm.setToUser(new User());
		pm.setText(""text"");
		pm.setSubject("""");

		service.send(pm);
	}

	@Test(expected = ValidationException.class)
	public void subjectNullExpectsException() {
		PrivateMessage pm = new PrivateMessage();
		pm.setFromUser(new User());
		pm.setToUser(new User());
		pm.setText(""text"");
		pm.setSubject(null);

		service.send(pm);
	}

	@Test(expected = ValidationException.class)
	public void toUserNullExpectsException() {
		PrivateMessage pm = new PrivateMessage();
		pm.setFromUser(new User());
		pm.setToUser(null);
		pm.setText(""text"");
		pm.setSubject(""subject"");

		service.send(pm);
	}

	@Test(expected = ValidationException.class)
	public void fromUserNullExpectsException() {
		PrivateMessage pm = new PrivateMessage();
		pm.setFromUser(null);
		pm.setToUser(new User());
		pm.setText(""text"");
		pm.setSubject(""subject"");

		service.send(pm);
	}

	private User newUser(int id) {
		User user = new User(); user.setId(id);
		return user;
	}
}"
net.jforum.services.ModerationServiceTestCase,"public class ModerationServiceTestCase {

	@Mock private ForumRepository forumRepository;
	@Mock private PostRepository postRepository;
	@Mock private TopicRepository topicRepository;
	@Mock private JForumConfig config;
	private ModerationLog moderationLog = new ModerationLog();
	@Mock private ModerationLogRepository moderationLogRepository;
	private ModerationLogService moderationLogService;
	private ModerationService service;
	//private States state = context.states(""state"");
	private Post post1 = new Post();
	private Post post2 = new Post();
	private Post post5 = new Post();
	private Post post6 = new Post();

	@Before
	public void setup() {
		moderationLogService = new ModerationLogService(config, moderationLogRepository, topicRepository);
		service = new ModerationService(postRepository, forumRepository, topicRepository, moderationLogService);
		
		post1.setId(1);
		post2.setId(2);
		post5.setId(5);
		post6.setId(6);
		
		when(forumRepository.get(1)).thenReturn(new Forum()); //when(state.isNot(""move"");
	//	allowing(forumRepository); when(state.isNot(""move""));
	}

	@Test
	public void moveTopics() {
	//	state.become(""move"");

		final Forum oldForum = new Forum(); oldForum.setId(1); oldForum.setLastPost(null);
		final Forum targetForum = new Forum(); targetForum.setId(2); targetForum.setLastPost(null);
		final Topic topic = new Topic(); topic.setId(3); topic.setMovedId(0); topic.setForum(oldForum);

		when(config.getBoolean(ConfigKeys.MODERATION_LOGGING_ENABLED)).thenReturn(true);
		when(forumRepository.get(2)).thenReturn(targetForum);
		when(topicRepository.get(3)).thenReturn(topic);
		when(forumRepository.getLastPost(oldForum)).thenReturn(post5);
		when(forumRepository.getLastPost(targetForum)).thenReturn(post6);

		service.moveTopics(2, moderationLog, 3);

		verify(moderationLogRepository).add(any(ModerationLog.class));
		verify(forumRepository).moveTopics(targetForum, topic.getId());
		assertEquals(targetForum.getLastPost(), post6); 
		assertEquals(oldForum.getLastPost(), post5); 
	}

	@Test
	public void moveTopicsEmptyListShouldIgnore() {
		service.moveTopics(1, null);
		
		verifyZeroInteractions(forumRepository);
	}

	@Test
	public void lockUnlock() {
		final Topic lockedTopic = new Topic(); lockedTopic.lock();
		final Topic unlockedTopic = new Topic(); unlockedTopic.unlock();


		when(config.getBoolean(ConfigKeys.MODERATION_LOGGING_ENABLED)).thenReturn(false);
		when(topicRepository.get(1)).thenReturn(lockedTopic);
		when(topicRepository.get(2)).thenReturn(unlockedTopic);


		int[] ids = {1, 2};
		service.lockUnlock(ids, moderationLog);

		assertFalse(lockedTopic.isLocked());
		assertTrue(unlockedTopic.isLocked());
	}

	@Test
	public void lockUnlockNullIdsShouldIgnore() {
		service.lockUnlock(null, moderationLog);
	}

	@Test
	public void deleteTopics() {
		final Topic topic = new Topic(); topic.setId(1);

		when(config.getBoolean(ConfigKeys.MODERATION_LOGGING_ENABLED)).thenReturn(false);
		when(topicRepository.get(1)).thenReturn(topic);

		service.deleteTopics(Arrays.asList(topic), moderationLog);
		
		verify(topicRepository).remove(topic);
	}

	@Test
	public void reject() {
		when(postRepository.get(1)).thenReturn(post1);

		ApproveInfo info = new ApproveInfo();
		info.setPostId(1); info.setStatus(ApproveInfo.REJECT);
		service.doApproval(1, this.asList(info));

		verify(postRepository).remove(post1);
	}

	@Test
	public void approveEntireTopicIsWaitingModerationShouldChangeTopicStatusAndNotIncrementTotalRepliesAndTotalUserPosts() {
		final Post post = new Post(); post.setId(1); post.setModerate(true); post.setUser(new User());
		Topic topic = new Topic(); topic.setPendingModeration(true); topic.setLastPost(null);
		post.setTopic(topic);

		when(postRepository.get(1)).thenReturn(post);
		when(topicRepository.getLastPost(post.getTopic())).thenReturn(post);

		ApproveInfo info = new ApproveInfo();
		info.setPostId(1); info.setStatus(ApproveInfo.APPROVE);
		service.doApproval(1, this.asList(info));

		assertEquals(1, post.getUser().getTotalPosts());
		assertFalse(topic.isWaitingModeration());
		assertFalse(post.isWaitingModeration());
		assertEquals(0, topic.getTotalReplies());
		assertEquals(post, topic.getLastPost());
	}

	@Test
	public void approvePostInExistingTopicShouldIncrementTotalRepliesAndTotalUserPosts() {
		Topic topic = new Topic(); topic.setPendingModeration(false); topic.setLastPost(post2); 

		final Post post = new Post(); post.setId(1); post.setModerate(true);
		post.setTopic(topic); post.setUser(new User());

		when(postRepository.get(1)).thenReturn(post);
		when(topicRepository.getLastPost(post.getTopic())).thenReturn(post);

		ApproveInfo info = new ApproveInfo();
		info.setPostId(1); info.setStatus(ApproveInfo.APPROVE);
		service.doApproval(1, this.asList(info));

		assertEquals(1, post.getUser().getTotalPosts());
		assertFalse(post.isWaitingModeration());
		assertEquals(1, topic.getTotalReplies());
		assertEquals(post, topic.getLastPost());
	}

	@Test
	public void deferShouldDoNothing() {
		ApproveInfo info = new ApproveInfo();
		info.setPostId(1); info.setStatus(ApproveInfo.DEFER);
		service.doApproval(1, this.asList(info));
	}

	@Test
	public void approveNullInfoShouldIgnore() {
		service.doApproval(1, null);
	}

	private List<ApproveInfo> asList(ApproveInfo info) {
		return Arrays.asList(info);
	}
}"
net.jforum.services.CategoryServiceTestCase,"public class CategoryServiceTestCase {
	
	@Mock private CategoryRepository repository;
	@InjectMocks private CategoryService service = new CategoryService(repository);

	@Test
	public void deleteUsingNullIdsShouldIgnore() {
		service.delete(null);
	}

	@Test
	public void delete() {
		when(repository.get(1)).thenReturn(new Category());
		when(repository.get(2)).thenReturn(new Category());

		service.delete(1, 2);
		
		verify(repository,times(2)).remove(notNull(Category.class));
	}

	@Test
	public void add() {
		final Category c = newCategoryWithOrder(0, 2);
		
		service.add(c);
		
		verify(repository).add(c);
	}

	@Test(expected = ValidationException.class)
	public void addUsingACategoryWithIdBiggerThanZeroExpectsValidationException() {
		Category c = new Category();
		c.setName(""c1"");
		c.setId(2);

		service.add(c);
	}

	@Test(expected = ValidationException.class)
	public void updateUsingACategoryWithoutAnIdExpectsException() {
		service.update(new Category());
	}

	@Test
	public void updateUsingAGoodCategoryExpectSuccess() {
		final Category c = newCategoryWithOrder(1, 2);
		c.setId(2);
		
		service.update(c);
		
		verify(repository).update(c);
	}

	@Test(expected = NullPointerException.class)
	public void addUsingNullCategoryExpectsNPE() {
		service.add(null);
	}

	@Test(expected = ValidationException.class)
	public void addUsingCategoryWithoutNameExpectsValidationException() {
		service.add(new Category());
	}

	@Test(expected = NullPointerException.class)
	public void updateUsingNullCategoryExpectsNPE() {
		service.update(null);
	}

	@Test(expected = ValidationException.class)
	public void updateUsingCategoryWithoutNameExpectsValidationException() {
		Category c = new Category();
		c.setId(1);
		service.add(c);
	}

	@Test
	public void upCategoryOrderExpectToBeInFirstPosition() {
		final Category categoryToChange = newCategoryWithOrder(1, 2);
		
		when(repository.get(1)).thenReturn(categoryToChange);
		when(repository.getAllCategories()).thenReturn(Arrays.asList(newCategoryWithOrder(2, 1), newCategoryWithOrder(1, 2)));
		
		service.upCategoryOrder(1);
		
		verify(repository,times(2)).update(notNull(Category.class));
		Assert.assertEquals(1, categoryToChange.getDisplayOrder());
	}

	@Test
	public void downCategoryOrderExpectToBeInLastPosition() {
		final Category categoryToChange = newCategoryWithOrder(1, 1);
		
		when(repository.get(1)).thenReturn(categoryToChange);
		when(repository.getAllCategories()).thenReturn(Arrays.asList(newCategoryWithOrder(1, 1), newCategoryWithOrder(2, 2)));
		
		service.downCategoryOrder(1);

		verify(repository,times(2)).update(notNull(Category.class));
		Assert.assertEquals(2, categoryToChange.getDisplayOrder());
	}

	@Test
	public void upCategoryOrderCategoryAlreadyFistShouldIgnore() {
		final Category categoryToChange = newCategoryWithOrder(1, 1);
		when(repository.get(1)).thenReturn(categoryToChange);
		when(repository.getAllCategories()).thenReturn(Arrays.asList(newCategoryWithOrder(1, 1), newCategoryWithOrder(2, 2)));

		service.upCategoryOrder(1);
		
		verify(repository,never()).update(notNull(Category.class));
	}

	@Test
	public void downCategoryOrderCategoryAlredyLastShouldIgnore() {
		final Category categoryToChange = newCategoryWithOrder(2, 2);
		
		when(repository.get(2)).thenReturn(categoryToChange);
		when(repository.getAllCategories()).thenReturn(Arrays.asList(newCategoryWithOrder(1, 1), newCategoryWithOrder(2, 2)));
	
		service.downCategoryOrder(2);

		verify(repository,never()).update(notNull(Category.class));
	}

	private Category newCategoryWithOrder(int categoryId, int order) {
		Category c = new Category();
		c.setId(categoryId);
		c.setName(""c1"");
		c.setDisplayOrder(order);

		return c;
	}
}"
net.jforum.services.PollServiceTestCase,"public class PollServiceTestCase {
	@Test
	public void processChanges() {
		List<PollOption> allOptions = new ArrayList<PollOption>();
		allOptions.add(this.createOption(1, ""A changed""));
		allOptions.add(this.createOption(4, ""D""));
		allOptions.add(this.createOption(0, ""E""));

		Poll poll = this.createPoll();

		PollService service = new PollService();
		service.processChanges(poll, allOptions);

		assertEquals(3, poll.getOptions().size());
		assertFalse(poll.getOptions().contains(this.createOption(2, ""B"")));
		assertFalse(poll.getOptions().contains(this.createOption(3, ""c"")));
		assertTrue(poll.getOptions().contains(this.createOption(0, ""E"")));
		assertEquals(""A changed"", poll.getOptions().get(0).getText());
	}

	private Poll createPoll() {
		Poll p = new  Poll();

		p.getOptions().add(this.createOption(1, ""A""));
		p.getOptions().add(this.createOption(2, ""B""));
		p.getOptions().add(this.createOption(3, ""C""));
		p.getOptions().add(this.createOption(4, ""D""));

		return p;
	}

	private PollOption createOption(int id, String text) {
		PollOption o = new PollOption();

		o.setId(id);
		o.setText(text);

		return o;
	}
}"
net.jforum.services.UserServiceTestCase,"public class UserServiceTestCase {

	@Mock private UserRepository repository;
	@Mock private GroupRepository groupRepository;
	@Mock private JForumConfig config;
	@Mock private AvatarService avatarService;
	private UserService service;

	@Before
	public void setup() {
		service = new UserService(repository, groupRepository, config, new DefaultLoginAuthenticator(repository), avatarService);
	}

	@Test(expected = NullPointerException.class)
	public void updateNullUserExpectsException() {
		service.update(null, false);
	}

	@Test(expected = ValidationException.class)
	public void updateIdZeroExpectsException() {
		User user = new User(); user.setId(0);
		service.update(user, false);
	}

	@Test
	public void updateShouldChangeUsername() {
		final User current = new User();
		current.setUsername(""old"");
		when(repository.get(1)).thenReturn(current);

		User newUser = new User();
		newUser.setId(1);
		newUser.setUsername(""new username"");

		service.update(newUser, true);

		Assert.assertEquals(newUser.getUsername(), current.getUsername());
	}

	@Test
	public void updateExpectSuccess() {
		final User user = new User(); user.setId(1);
		final User current = new User();

		current.setAim(null);
		current.setAttachSignature(false);
		current.setAvatar(null);
		current.setBbCodeEnabled(false);
		current.setBiography(null);
		current.setFrom(null);
		current.setHtmlEnabled(false);
		current.setInterests(null);
		current.setLang(null);
		current.setMsn(null);
		current.setNotifyAlways(false);
		current.setOccupation(null);
		current.setViewEmailEnabled(false);
		current.setWebsite(null);
		current.setYim(null);
		current.setSignature(null);
		current.setNotifyReply(false);
		current.setNotifyPrivateMessages(false);
		current.setSmiliesEnabled(false);
		current.setNotifyText(false);

		when(repository.get(user.getId())).thenReturn(current);

		user.setAim(""aim"");
		user.setAttachSignature(true);
		user.setAvatar(null);
		user.setBbCodeEnabled(true);
		user.setBiography(""bio"");
		user.setFrom(""from"");
		user.setHtmlEnabled(true);
		user.setInterests(""interests"");
		user.setLang(""lang"");
		user.setMsn(""msn"");
		user.setNotifyAlways(true);
		user.setOccupation(""occ"");
		user.setViewEmailEnabled(true);
		user.setWebsite(""website"");
		user.setYim(""yim"");
		user.setSignature(""signature"");
		user.setNotifyReply(true);
		user.setNotifyPrivateMessages(true);
		user.setSmiliesEnabled(true);
		user.setNotifyText(true);

		service.update(user, false);

		verify(repository).update(current);
		Assert.assertEquals(user.getAim(), current.getAim());
		Assert.assertEquals(user.getAttachSignature(), current.getAttachSignature());
		Assert.assertEquals(user.isBbCodeEnabled(), current.isBbCodeEnabled());
		Assert.assertEquals(user.getBiography(), current.getBiography());
		Assert.assertEquals(user.getFrom(), current.getFrom());
		Assert.assertEquals(user.isHtmlEnabled(), current.isHtmlEnabled());
		Assert.assertEquals(user.getinterests(), current.getinterests());
		Assert.assertEquals(user.getLang(), current.getLang());
		Assert.assertEquals(user.getMsn(), current.getMsn());
		Assert.assertEquals(user.getNotifyAlways(), current.getNotifyAlways());
		Assert.assertEquals(user.getOccupation(), current.getOccupation());
		Assert.assertEquals(user.isViewEmailEnabled(), current.isViewEmailEnabled());
		Assert.assertEquals(user.getWebsite(), current.getWebsite());
		Assert.assertEquals(user.getYim(), current.getYim());
		Assert.assertEquals(user.getSignature(), current.getSignature());
		Assert.assertEquals(user.getNotifyReply(), current.getNotifyReply());
		Assert.assertEquals(user.getNotifyPrivateMessages(), current.getNotifyPrivateMessages());
		Assert.assertEquals(user.isSmiliesEnabled(), current.isSmiliesEnabled());
		Assert.assertEquals(user.getNotifyText(), current.getNotifyText());
	}

	@Test
	public void saveGroupsUsingNullIdsShouldDoNothing() {
		service.saveGroups(1, null);
	}

	@Test
	public void saveGroupsUsingZeroLengthArrayShouldDoNothing() {
		service.saveGroups(1, new int[0]);
	}

	@Test
	public void saveGroupsExpectSuccess() {
		Group g1 = new Group(); g1.setId(1);
		Group g5 = new Group(); g5.setId(5);
		Group g6 = new Group(); g6.setId(6);
		final User user = new User(); user.addGroup(g1);

		when(repository.get(1)).thenReturn(user);
		when(groupRepository.get(5)).thenReturn(g5);
		when(groupRepository.get(6)).thenReturn(g6);

		service.saveGroups(1, 5, 6);

		verify(repository).update(user);
		Assert.assertFalse(user.getGroups().contains(g1));
		Assert.assertTrue(user.getGroups().contains(g5));
		Assert.assertTrue(user.getGroups().contains(g6));
	}

	@Test
	public void validateLogin() {
		when(repository.validateLogin(""user"", MD5.hash(""passwd""))).thenReturn(new User());

		User user = service.validateLogin(""user"", ""passwd"");

		Assert.assertNotNull(user);
	}

	@Test
	public void addWithoutRegistrationDateShouldForceValue() {
		User user = new User(); user.setUsername(""u1""); user.setPassword(""pwd1""); user.setEmail(""email"");
		user.setRegistrationDate(null);
		user.addGroup(new Group());

		service.add(user);

		Assert.assertNotNull(user.getRegistrationDate());
	}

	@Test(expected = ValidationException.class)
	public void addEmptyUsernameExpectsException() {
		User user = new User();
		user.setUsername("""");
		user.setEmail(""email"");
		user.setPassword(""pwd"");

		service.add(user);
	}

	@Test(expected = ValidationException.class)
	public void addNullUsernameExpectsException() {
		User user = new User();
		user.setUsername(null);
		user.setEmail(""email"");
		user.setPassword(""pwd"");

		service.add(user);
	}

	@Test(expected = ValidationException.class)
	public void addEmptyEmailExpectsException() {
		User user = new User();
		user.setUsername(""username"");
		user.setEmail("""");
		user.setPassword(""pwd"");

		service.add(user);
	}

	@Test(expected = ValidationException.class)
	public void addNullEmailExpectsException() {
		User user = new User();
		user.setUsername(""username"");
		user.setEmail(null);
		user.setPassword(""pwd"");

		service.add(user);
	}

	@Test(expected = ValidationException.class)
	public void addEmptyPasswordExpectsException() {
		User user = new User();
		user.setUsername(""username"");
		user.setEmail(""email"");
		user.setPassword("""");

		service.add(user);
	}

	@Test(expected = ValidationException.class)
	public void addNullPasswordExpectsException() {
		User user = new User();
		user.setUsername(""username"");
		user.setEmail(""email"");
		user.setPassword(null);

		service.add(user);
	}

	@Test(expected = ValidationException.class)
	public void addIdBiggerThanZeroExpectsException() {
		User user = new User(); user.setUsername(""username"");
		user.setEmail(""email""); user.setPassword(""password"");
		user.setId(1);

		service.add(user);
	}

	@Test(expected = NullPointerException.class)
	public void addNullUserExpectsException() {
		service.add(null);
	}

	@Test
	public void addWithoutGroupShouldUseDefault() {
		final User user = new User();
		user.setPassword(""123"");
		user.setUsername(""username1"");
		user.setEmail(""email"");
		user.getGroups().clear();

		when(config.getInt(ConfigKeys.DEFAULT_USER_GROUP)).thenReturn(1);
		when(groupRepository.get(1)).thenReturn(new Group());

		service.add(user);

		verify(repository).add(user);
		Assert.assertTrue(user.getGroups().size() > 0);
	}

	@Test
	public void addWithGroupExpectsSuccess() {
		final User user = new User();
		user.setPassword(""123"");
		user.setUsername(""username1"");
		user.setEmail(""email"");
		user.addGroup(new Group());

		service.add(user);

		verify(repository).add(user);
	}
}"
net.jforum.services.AvatarServiceTestCase,"public class AvatarServiceTestCase {
	
	@Mock private AvatarRepository repository;
	@Mock private JForumConfig config;
	@InjectMocks private AvatarService service;

	@Test(expected = NullPointerException.class)
	public void addNullExpectException() {
		service.add(null, null);
	}

	@Test(expected = ValidationException.class)
	public void addWithIdExpectException() {
		Avatar avatar = new Avatar();
		avatar.setId(1);

		when(config.getBoolean(ConfigKeys.AVATAR_ALLOW_GALLERY)).thenReturn(true);
		when(config.getBoolean(ConfigKeys.AVATAR_ALLOW_UPLOAD)).thenReturn(true);

		service.add(avatar);
	}

	@Test(expected = ValidationException.class)
	public void updateWithoutIdExpectException() {
		Avatar avatar = new Avatar();
		avatar.setId(0);

		when(config.getBoolean(ConfigKeys.AVATAR_ALLOW_GALLERY)).thenReturn(true);
		when(config.getBoolean(ConfigKeys.AVATAR_ALLOW_UPLOAD)).thenReturn(true);

		service.update(avatar, null);
	}

	@Test
	public void addExpectSuccess() throws IOException {
		final Avatar avatar = new Avatar();
		File tempFile = File.createTempFile(""jforum"", ""tests"");
		tempFile.deleteOnExit();
		final String tempDir = tempFile.getParent();
		File file = new File(this.getClass().getResource(""/smilies/smilie.gif"").getFile());
		TestCaseUtils.copyFile(file, tempFile);
		UploadedFile uploadedFile = new DefaultUploadedFile(new FileInputStream(file), file.getAbsolutePath(), """");
		
		when(config.getApplicationPath()).thenReturn(tempDir);
		when(config.getValue(ConfigKeys.AVATAR_GALLERY_DIR)).thenReturn("""");
		when(config.getBoolean(ConfigKeys.AVATAR_ALLOW_GALLERY)).thenReturn(true);
		when(config.getBoolean(ConfigKeys.AVATAR_ALLOW_UPLOAD)).thenReturn(true);
		when(config.getLong(ConfigKeys.AVATAR_MAX_SIZE)).thenReturn(10000l);
		when(config.getInt(ConfigKeys.AVATAR_MAX_WIDTH)).thenReturn(800);
		when(config.getInt(ConfigKeys.AVATAR_MAX_HEIGHT)).thenReturn(600);
		when(config.getInt(ConfigKeys.AVATAR_MIN_WIDTH)).thenReturn(1);
		when(config.getInt(ConfigKeys.AVATAR_MIN_HEIGHT)).thenReturn(1);
		
		service.add(avatar, uploadedFile);
		
		verify(repository).add(avatar);
		Assert.assertNotNull(avatar.getFileName());
		File expectedFile = new File(String.format(""%s/%s/%s"", tempDir, """", avatar.getFileName()));
		expectedFile.deleteOnExit();
		Assert.assertTrue(expectedFile.exists());
	}

	@Test(expected = NullPointerException.class)
	public void updateNullExpectException() {
		service.update(null, null);
	}

	@Test
	public void updateImageShouldDeleteOldImage() throws IOException {
		final File currentFile = File.createTempFile(""avatar"", ""tests"");
		currentFile.deleteOnExit();

		final Avatar currentAvatar = new Avatar();
		currentAvatar.setId(1);
		currentAvatar.setAvatarType(AvatarType.AVATAR_GALLERY);
		currentAvatar.setFileName(currentFile.getName());
		
		when(repository.get(1)).thenReturn(currentAvatar);
		when(config.getApplicationPath()).thenReturn(currentFile.getParent());
		when(config.getValue(ConfigKeys.AVATAR_GALLERY_DIR)).thenReturn("""");
		when(config.getBoolean(ConfigKeys.AVATAR_ALLOW_GALLERY)).thenReturn(true);
		when(config.getBoolean(ConfigKeys.AVATAR_ALLOW_UPLOAD)).thenReturn(true);
		when(config.getLong(ConfigKeys.AVATAR_MAX_SIZE)).thenReturn(10000l);
		when(config.getInt(ConfigKeys.AVATAR_MAX_WIDTH)).thenReturn(800);
		when(config.getInt(ConfigKeys.AVATAR_MAX_HEIGHT)).thenReturn(600);
		when(config.getInt(ConfigKeys.AVATAR_MIN_WIDTH)).thenReturn(1);
		when(config.getInt(ConfigKeys.AVATAR_MIN_HEIGHT)).thenReturn(1);
			
		File originalFile = new File(this.getClass().getResource(""/smilies/smilie.gif"").getFile());
		File newFile = File.createTempFile(""jforum"", ""tests"");
		TestCaseUtils.copyFile(originalFile, newFile);

		UploadedFile uploadedFile = new DefaultUploadedFile(new FileInputStream(newFile), newFile.getAbsolutePath(), """");
		String oldDiskName = currentAvatar.getFileName();
		Avatar newAvatar = new Avatar();
		newAvatar.setId(1);
		newAvatar.setAvatarType(AvatarType.AVATAR_GALLERY);
		service.update(newAvatar, uploadedFile);
		
		verify(repository).update(currentAvatar);
		Assert.assertEquals(newAvatar.getAvatarType(), currentAvatar.getAvatarType());
		Assert.assertFalse(currentFile.exists());
		Assert.assertFalse(currentAvatar.getFileName().equals(oldDiskName));

		new File(String.format(""%s/%s"", currentFile.getParent(), currentAvatar.getFileName())).delete();
	}

	@Test
	public void deleteUsingNullShouldIgnore() {
		
			
		Avatar avatar = null;
		service.delete(avatar);
	}

	@Test
	public void deleteExpectSuccess() {
		
		Avatar s1 = new Avatar();
		s1.setId(1);
		s1.setFileName(Long.toString(System.currentTimeMillis()));
		Avatar s2 = new Avatar();
		s2.setId(2);
		s2.setFileName(Long.toString(System.currentTimeMillis()));
		String applicationPath = new File(this.getClass().getResource("""").getFile()).getParent();
		when(config.getApplicationPath()).thenReturn(applicationPath);
		when(config.getValue(ConfigKeys.AVATAR_GALLERY_DIR)).thenReturn("""");
		when(repository.get(1)).thenReturn(s1);
		when(repository.get(2)).thenReturn(s2);

		service.delete(1, 2);
		
		verify(repository).remove(s1);
		verify(repository).remove(s2);
	}
}"
net.jforum.services.MostUsersEverOnlineServiceTestCase,"public class MostUsersEverOnlineServiceTestCase {

	@Mock private ConfigRepository repository;
	@InjectMocks private MostUsersEverOnlineService service;

	@Test
	public void currenTotalIsBiggerExpectsNewTotalAndNewTime() {
		final long time = System.currentTimeMillis();
		Config c = new Config(); c.setName(ConfigKeys.MOST_USERS_EVER_ONLINE); c.setValue(Long.toString(time - 100) + ""/10"");
		when(repository.getByName(ConfigKeys.MOST_USERS_EVER_ONLINE)).thenReturn(c);

		MostUsersEverOnline most = service.getMostRecentData(20);

		verify(repository).update(notNull(Config.class));
		assertEquals(20, most.getTotal());
		assertTrue(most.getDate().getTime() >= time);
	}

	@Test
	public void currentTotalIsSmallerExpectsStoredTotal() {
		final long time = System.currentTimeMillis();
		Config c = new Config(); c.setValue(Long.toString(time) + ""/10"");
		when(repository.getByName(ConfigKeys.MOST_USERS_EVER_ONLINE)).thenReturn(c);

		MostUsersEverOnline most = service.getMostRecentData(5);

		assertEquals(time, most.getDate().getTime());
		assertEquals(10, most.getTotal());
	}

	@Test
	public void expectsEmptyShouldCreateNew() {
		when(repository.getByName(ConfigKeys.MOST_USERS_EVER_ONLINE)).thenReturn(null);

		MostUsersEverOnline most = service.getMostRecentData(2);

		verify(repository).add(notNull(Config.class));
		assertEquals(2, most.getTotal());
		assertTrue(System.currentTimeMillis() >= most.getDate().getTime());
	}
}"
net.jforum.services.SmilieServiceTestCase,"public class SmilieServiceTestCase {

	@Mock private SmilieRepository repository;
	@Mock private JForumConfig config;
	@InjectMocks private SmilieService service;

	@Test(expected = NullPointerException.class)
	public void addNullExpectException() {
		service.add(null, null);
	}

	@Test(expected = ValidationException.class)
	public void addUsingEmptyCodeExpectException() {
		Smilie s = new Smilie();
		s.setCode("""");
		service.add(s, null);
	}

	@Test(expected = ValidationException.class)
	public void addUsingNullCodeExpectException() {
		Smilie s = new Smilie();
		s.setCode(null);
		service.add(s, null);
	}

	@Test(expected = ValidationException.class)
	public void addUsingIdBiggerThanZeroExpectException() {
		Smilie s = new Smilie();
		s.setCode(""x"");
		s.setId(1);
		service.add(s, null);
	}

	@Test(expected = NullPointerException.class)
	public void addUsingNullImageExpectsException() {
		Smilie s = new Smilie();
		s.setCode("":)"");
		service.add(s, null);
	}

	@Test
	public void addExpectSuccess() throws IOException {
		final Smilie smilie = new Smilie();
		smilie.setCode("":)"");
		File tempFile = File.createTempFile(""jforum"", ""tests"");
		tempFile.deleteOnExit();
		final String tempDir = tempFile.getParent();

		File file = new File(this.getClass().getResource(""/smilies/smilie.gif"").getFile());
		TestCaseUtils.copyFile(file, tempFile);

		UploadedFile uploadedFile = new DefaultUploadedFile(
				new FileInputStream(file), file.getAbsolutePath(), """");

		when(config.getApplicationPath()).thenReturn(tempDir);
		when(config.getValue(ConfigKeys.SMILIE_IMAGE_DIR)).thenReturn("""");


		service.add(smilie, uploadedFile);

		verify(repository).add(smilie);
		Assert.assertNotNull(smilie.getDiskName());

		File expectedFile = new File(String.format(""%s/%s/%s"", tempDir, """",
				smilie.getDiskName()));
		expectedFile.deleteOnExit();

		Assert.assertTrue(expectedFile.exists());
	}

	@Test(expected = NullPointerException.class)
	public void updateNullExpectException() {
		service.update(null, null);
	}

	@Test(expected = ValidationException.class)
	public void updateUsingEmptyCodeExpectException() {
		Smilie s = new Smilie();
		s.setCode("""");
		s.setId(1);
		service.update(s, null);
	}

	@Test(expected = ValidationException.class)
	public void updateUsingNullCodeExpectException() {
		Smilie s = new Smilie();
		s.setCode(null);
		s.setId(1);
		service.update(s, null);
	}

	@Test(expected = ValidationException.class)
	public void updateUsingIdZeroExpectException() {
		Smilie s = new Smilie();
		s.setCode(""x"");
		s.setId(0);
		service.update(s, null);
	}

	@Test
	public void updateAllPropertiesShouldDeleteOldImage() throws IOException {
		final File currentFile = File.createTempFile(""jforum"", ""tests"");
		currentFile.deleteOnExit();
		final Smilie currentSmilie = new Smilie();
		currentSmilie.setId(1);
		currentSmilie.setCode("":)"");
		currentSmilie.setDiskName(currentFile.getName());

		when(repository.get(1)).thenReturn(currentSmilie);
		when(config.getApplicationPath()).thenReturn(currentFile.getParent());
		when(config.getValue(ConfigKeys.SMILIE_IMAGE_DIR)).thenReturn("""");

		File newFile = File.createTempFile(""jforum"", ""tests"");
		newFile.deleteOnExit();

		UploadedFile uploadedFile = new DefaultUploadedFile(
				new FileInputStream(newFile), newFile.getAbsolutePath(), """");

		String oldDiskName = currentSmilie.getDiskName();

		Smilie newSmilie = new Smilie();
		newSmilie.setId(1);
		newSmilie.setCode("":D"");
		service.update(newSmilie, uploadedFile);

		verify(repository).update(currentSmilie);
		Assert.assertEquals(newSmilie.getCode(), currentSmilie.getCode());
		Assert.assertFalse(currentFile.exists());
		Assert.assertFalse(currentSmilie.getDiskName().equals(oldDiskName));

		new File(String.format(""%s/%s"", currentFile.getParent(),
				currentSmilie.getDiskName())).delete();
	}

	@Test
	public void updateOnlyCodeExpectsSuccess() {
		final Smilie currentSmilie = new Smilie();
		currentSmilie.setCode("":)"");
		currentSmilie.setId(1);
		when(repository.get(1)).thenReturn(currentSmilie);
		Smilie newSmilie = new Smilie();
		newSmilie.setId(1);
		newSmilie.setCode("":D"");
		service.update(newSmilie, null);

		Assert.assertEquals(newSmilie.getCode(), currentSmilie.getCode());
		
		verify(repository).update(currentSmilie);
	}

	@Test
	public void deleteUsingNullShouldIgnore() {
		service.delete(null);
		
		verifyZeroInteractions(repository);
	}

	@Test
	public void deleteExpectSuccess() {
		Smilie s1 = new Smilie();
		s1.setId(1);
		s1.setDiskName(Long.toString(System.currentTimeMillis()));
		Smilie s2 = new Smilie();
		s2.setId(2);
		s2.setDiskName(Long.toString(System.currentTimeMillis()));
		String applicationPath = new File(this.getClass()
				.getResource("""").getFile()).getParent();
		when(config.getApplicationPath()).thenReturn(applicationPath);
		when(config.getValue(ConfigKeys.SMILIE_IMAGE_DIR)).thenReturn("""");
		when(repository.get(1)).thenReturn(s1);
		when(repository.get(2)).thenReturn(s2);

		service.delete(1, 2);

		verify(repository).remove(s1);
		verify(repository).remove(s2);
	}
}"
net.jforum.services.PostServiceTestCase,"public class PostServiceTestCase {

	@Mock private PostRepository postRepository;
	@Mock private AttachmentService attachmentService;
	@Mock private PollService pollService;
	@Mock private TopicRepository topicRepository;
	@Mock private ModerationLogService moderationLogService;
	private ModerationLog moderationLog = new ModerationLog();
	@InjectMocks private PostService service;

	@Test
	public void newOptionsExpectChanges() {
		final Post current = this.createCurrentPost();
		current.getTopic().getFirstPost().setId(1);
		current.setBbCodeEnabled(false);
		current.setHtmlEnabled(false);
		current.setSmiliesEnabled(false);
		current.setSignatureEnabled(false);

		when(postRepository.get(1)).thenReturn(current);

		Post newPost = new Post();
		newPost.setId(1);
		newPost.setText(""new text"");
		newPost.setSubject(""new subject"");
		newPost.setBbCodeEnabled(true);
		newPost.setHtmlEnabled(true);
		newPost.setSmiliesEnabled(true);
		newPost.setSignatureEnabled(true);
		newPost.setTopic(new Topic());

		service.update(newPost, false, null, null, moderationLog);

		verify(postRepository).update(current);
		verify(topicRepository).update(current.getTopic());
		assertEquals(true, current.isBbCodeEnabled());
		assertEquals(true, current.isHtmlEnabled());
		assertEquals(true, current.isSmiliesEnabled());
		assertEquals(true, current.isSignatureEnabled());
	}

	@Test
	public void changePoll() {
		final Post currentPost = this.createCurrentPost();
		Poll poll = new Poll();
		poll.setId(1);
		currentPost.getTopic().setPoll(poll); 
		currentPost.getTopic().getFirstPost().setId(1);

		PollOption pollOption = new PollOption(); pollOption.setText(""A"");
		final List<PollOption> pollOptions = Arrays.asList(pollOption);

		when(postRepository.get(1)).thenReturn(currentPost);

		Post newPost = new Post();
		newPost.setId(1);
		newPost.setText(""new text"");
		newPost.setSubject(""new subject"");

		Poll newPoll = new Poll();
		newPoll.setLabel(""new label"");
		newPoll.setLength(10);
		newPost.setTopic(new Topic());
		newPost.getTopic().setPoll(newPoll);

		service.update(newPost, false, pollOptions, null, moderationLog);

		verify(pollService).processChanges(currentPost.getTopic().getPoll(), pollOptions);
		verify(postRepository).update(currentPost);
		verify(topicRepository).update(currentPost.getTopic());
		assertEquals(10, currentPost.getTopic().getPoll().getLength());
		assertEquals(""new label"", currentPost.getTopic().getPoll().getLabel());
	}

	@Test
	public void changeFirstPost() {
		final Post current = this.createCurrentPost();
		current.getTopic().setType(Topic.TYPE_NORMAL);
		current.getTopic().getFirstPost().setId(1);

		when(postRepository.get(1)).thenReturn(current);

		Post newPost = new Post(); newPost.setId(1); newPost.setText(""new text""); newPost.setSubject(""new subject"");
		newPost.setTopic(new Topic()); newPost.getTopic().setType(Topic.TYPE_STICKY);
		service.update(newPost, true, null, null, moderationLog);

		verify(postRepository).update(current);
		verify(topicRepository).update(current.getTopic());
		assertEquals(newPost.getSubject(), current.getTopic().getSubject());
		assertEquals(Topic.TYPE_STICKY, current.getTopic().getType());
	}

	@Test
	public void changeFirstPostCannotChangeTopicType() {
		final Post current = this.createCurrentPost();
		current.getTopic().setType(Topic.TYPE_NORMAL);
		current.getTopic().getFirstPost().setId(1);

		when(postRepository.get(1)).thenReturn(current);

		Post newPost = new Post(); newPost.setId(1); newPost.setText(""new text""); newPost.setSubject(""new subject"");
		newPost.setTopic(new Topic()); newPost.getTopic().setType(Topic.TYPE_STICKY);
		service.update(newPost, false, null, null, moderationLog);

		verify(postRepository).update(current);
		verify(topicRepository).update(current.getTopic());
		assertEquals(newPost.getSubject(), current.getTopic().getSubject());
		assertEquals(Topic.TYPE_NORMAL, current.getTopic().getType());
	}

	@Test
	public void changeUpdatableProperties() {
		final Post current = this.createCurrentPost();

		when(postRepository.get(1)).thenReturn(current);

		Post newPost = new Post(); newPost.setId(1); newPost.setText(""new text""); newPost.setSubject(""new subject"");
		service.update(newPost, false, null, null, moderationLog);

		verify(postRepository).update(current);
		verify(topicRepository).update(current.getTopic());
		assertEquals(newPost.getSubject(), current.getSubject());
		assertEquals(newPost.getText(), current.getText());
		assertEquals(1, current.getEditCount());
		assertNotNull(current.getEditDate());
	}

	@Test(expected = IllegalStateException.class)
	public void withoutIdExpectsException() {
		Post p = new Post(); p.setId(0); p.setSubject(""aa""); p.setText(""bb"");
		service.update(p, false, null, null, moderationLog);
	}

	@Test(expected = IllegalStateException.class)
	public void emptyTextExpectsException() {
		Post p = new Post(); p.setId(1); p.setSubject(""aa""); p.setText("""");
		service.update(p, false, null, null, moderationLog);
	}

	@Test(expected = IllegalStateException.class)
	public void nullTextExpectsException() {
		Post p = new Post(); p.setId(1); p.setSubject(""bb""); p.setText(null);
		service.update(p, false, null, null, moderationLog);
	}

	@Test(expected = IllegalStateException.class)
	public void emptySubjectExpectsException() {
		Post p = new Post(); p.setId(1); p.setSubject(""""); p.setText(""xx"");
		service.update(p, false, null, null, moderationLog);
	}

	@Test(expected = IllegalStateException.class)
	public void nullSubjectExpectsException() {
		Post p = new Post(); p.setId(1); p.setSubject(null); p.setText(""ee"");
		service.update(p, false, null, null, moderationLog);
	}

	@Test(expected = NullPointerException.class)
	public void nullPostExpectException() {
		service.update(null, false, null, null, moderationLog);
	}

	private Post createCurrentPost() {
		Post post = new Post();
		post.setId(1);

		Topic topic = new Topic();
		topic.setFirstPost(new Post());
		post.setTopic(topic);

		return post;
	}
}"
net.jforum.services.GroupServiceTestCase,"public class GroupServiceTestCase {

	@Mock private GroupRepository repository;
	@Mock private SessionManager sessionManager;
	@Mock private UserSession userSession;
	@Mock private RoleManager roleManager;
	@Mock private UserRepository userRepository;
	@InjectMocks private GroupService service;

	@Test
	@Ignore(""test must be fixed, permission problem"")
	public void savePermissions() {
		final Group group = new Group();

		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAdministrator()).thenReturn(false);
		when(repository.get(1)).thenReturn(new Group());

		//TODO: service.savePermissions(1, new PermissionOptions());

		verify(userRepository).changeAllowAvatarState(false, group);
		verify(sessionManager).computeAllOnlineModerators();
		verify(repository).update(group);
	}

	@Test
	public void delete() {
		when(repository.get(1)).thenReturn(new Group());
		when(repository.get(2)).thenReturn(new Group());

		service.delete(1, 2);

		verify(repository, times(2)).remove(notNull(Group.class));
	}

	@Test(expected = NullPointerException.class)
	public void updateUsingNullGroupExpectsNPE() {
		service.update(null);
	}

	@Test(expected = ValidationException.class)
	public void updateUsingNullNameExpectsValidationException() {
		Group g = new Group();
		g.setId(1);
		g.setName(null);

		service.update(g);
	}

	@Test(expected = ValidationException.class)
	public void updateUsingEmptyNameExpectsValidationException() {
		Group g = new Group();
		g.setId(1);
		g.setName("""");

		service.update(g);
	}

	@Test(expected = ValidationException.class)
	public void updateUsingIdZeroExpectsValidationException() {
		Group g = new Group();
		g.setName(""g1"");
		g.setId(0);

		service.update(g);
	}

	@Test
	public void updateExpectsSuccess() {
		Group g = new Group();
		g.setName(""g1"");
		g.setId(2);

		service.update(g);

		verify(repository).update(notNull(Group.class));
	}

	@Test
	public void addExpectSuccess() {
		Group g = new Group();
		g.setName(""g1"");

		service.add(g);

		verify(repository).add(notNull(Group.class));
	}

	@Test(expected = NullPointerException.class)
	public void addUsingNullGroupExpectsNPE() {
		service.add(null);
	}

	@Test(expected = ValidationException.class)
	public void addUsingidBiggerThanZeroExpectsValidationException() {
		Group g = new Group();
		g.setName(""g1"");
		g.setId(1);

		service.add(g);
	}

	@Test(expected = ValidationException.class)
	public void addUsingEmtpyNameExpectsValidationException() {
		Group g = new Group();
		g.setName("""");

		service.add(g);
	}

	@Test(expected = ValidationException.class)
	public void addUsingNullNameExpectsValidationException() {
		Group g = new Group();
		g.setName(null);

		service.add(g);
	}
}"
net.jforum.services.ForumServiceTestCase,"public class ForumServiceTestCase {
	
	@Mock private ForumRepository repository;
	@InjectMocks private ForumService service;

	@Test
	public void deleteUsingNullIdsShouldIgnore() {
		service.delete(null);

		verifyZeroInteractions(repository);
	}

	@Test
	public void delete() {
		when(repository.get(1)).thenReturn(new Forum());
		when(repository.get(2)).thenReturn(new Forum());

		service.delete(1, 2);

		verify(repository, times(2)).remove(notNull(Forum.class));
	}

	@Test(expected = NullPointerException.class)
	public void updateUsingNullForumExpectsNPE() {
		service.update(null);
	}

	@Test(expected = ValidationException.class)
	public void updateUsingForumIdZeroExpectsValidationException() {
		Forum f = new Forum();
		f.setName(""f1"");
		Category category = new Category();
		category.setId(1);
		f.setCategory(category);
		f.setId(0);

		service.update(f);
	}

	@Test(expected = ValidationException.class)
	public void updateUsingCategoryNullExpectsValidationException() {
		Forum f = new Forum();
		f.setName(""f1"");
		f.setId(1);
		f.setCategory(null);

		service.update(f);
	}

	@Test(expected = ValidationException.class)
	public void updateUsingCategoryWithIdZeroExpectsValidationException() {
		Forum f = new Forum();
		f.setName(""f1"");
		f.setId(1);
		Category category = new Category();
		category.setId(0);
		f.setCategory(category);

		service.update(f);
	}

	@Test(expected = ValidationException.class)
	public void updateUsingEmptyNameExpectsValidationException() {
		Forum f = new Forum();
		f.setName("""");
		f.setId(1);
		Category category = new Category();
		category.setId(1);
		f.setCategory(category);

		service.update(f);
	}

	@Test(expected = ValidationException.class)
	public void updateUsingNullNameExpectsValidationException() {
		Forum f = new Forum();
		f.setName(null);
		f.setId(1);
		Category category = new Category();
		category.setId(1);
		f.setCategory(category);

		service.update(f);
	}

	@Test
	public void addExpectSuccess() {
		final Forum f = new Forum();
		f.setName(""f1"");
		Category category = new Category();
		category.setId(1);
		f.setCategory(category);

		service.add(f);

		verify(repository).add(f);
	}

	@Test(expected = ValidationException.class)
	public void addUsingForumIdBiggerThanZeroExpectValidationException() {
		Forum f = new Forum();
		Category category = new Category();
		category.setId(1);
		f.setCategory(category);
		f.setName(""f1"");
		f.setId(1);

		service.add(f);
	}

	@Test(expected = NullPointerException.class)
	public void addNullForumExpectNPE() {
		service.add(null);
	}

	@Test(expected = ValidationException.class)
	public void addForumWithoutNameExpectValidationException() {
		Forum f = new Forum();
		f.setName(null);
		Category category = new Category();
		category.setId(1);
		f.setCategory(category);
		service.add(f);
	}

	@Test(expected = ValidationException.class)
	public void addForumWithEmptyNameExpectValidationException() {
		Forum f = new Forum();
		f.setName("""");
		Category category = new Category();
		category.setId(1);
		f.setCategory(category);
		service.add(f);
	}

	@Test(expected = ValidationException.class)
	public void addForumWithNullCategoryExpectValidationException() {
		Forum f = new Forum();
		f.setName(""f1"");
		f.setCategory(null);
		service.add(f);
	}

	@Test(expected = ValidationException.class)
	public void addForumUsingCategoryWithoutIdExpectValidationException() {
		Forum f = new Forum();
		f.setName(""f1"");
		Category category = new Category();
		category.setId(0);
		f.setCategory(category);
		service.add(f);
	}

	@Test
	public void upCategoryOrderExpectToBeInFirstPosition() {
		final Forum forumToChange = newForumWithOrder(1, 2, newForumWithOrder(2, 1), newForumWithOrder(1, 2));
		when(repository.get(1)).thenReturn(forumToChange);

		service.upForumOrder(1);

		verify(repository, times(2)).update(notNull(Forum.class));
		Assert.assertEquals(1, forumToChange.getDisplayOrder());
	}

	@Test
	public void downCategoryOrderExpectToBeInLastPosition() {
		final Forum forumToChange = newForumWithOrder(1, 1, newForumWithOrder(1, 1), newForumWithOrder(2, 2));
		when(repository.get(1)).thenReturn(forumToChange);

		service.downForumOrder(1);

		verify(repository, times(2)).update(notNull(Forum.class));
		Assert.assertEquals(2, forumToChange.getDisplayOrder());
	}

	@Test
	public void upCategoryOrderCategoryAlreadyFistShouldIgnore() {
		final Forum forumToChange = newForumWithOrder(1, 1, newForumWithOrder(1, 1), newForumWithOrder(2, 2));
		when(repository.get(1)).thenReturn(forumToChange);

		service.upForumOrder(1);

		verify(repository, never()).update(notNull(Forum.class));
	}

	@Test
	public void downCategoryOrderCategoryAlredyLastShouldIgnore() {
		final Forum categoryToChange = newForumWithOrder(2, 2, newForumWithOrder(1, 1), newForumWithOrder(2, 2));
		when(repository.get(2)).thenReturn(categoryToChange);

		service.downForumOrder(2);

		verify(repository, never()).update(notNull(Forum.class));
	}

	private Forum newForumWithOrder(int forumId, int order, final Forum... categoryForums) {
		Forum f = new Forum();

		f.setId(forumId);
		f.setDisplayOrder(order);
		Category category = mock(Category.class);
		when(category.getForums()).thenReturn(Arrays.asList(categoryForums));

		f.setCategory(category);

		return f;
	}
}"
net.jforum.bbcode.AutoEmail_TestCase,"public class AutoEmail_TestCase extends TagBaseTest {
	@Test
	public void usingValidEmailAdddressShouldFormat() {
		BBCode bb = getBBCode();
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""send to %s now"", html(bb, ""email"", ""address.domain"")),
			formatter.format(""send to email@address.domain now"", defaultOptions()));
	}

	@Test
	public void usingValidEmailAndNewLineBeforeAddressShouldFormat() {
		BBCode bb = getBBCode();
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""send to\n%s now"", html(bb, ""email"", ""address.domain"")),
			formatter.format(""send to\nemail@address.domain now"", defaultOptions()));
	}

	@Test
	public void emailWithoutDomainShouldIgnore() {
		BBCode bb = getBBCode();
		formatter.addBb(bb);
		Assert.assertEquals(""send to email@address now"",
			formatter.format(""send to email@address now"", defaultOptions()));
	}

	@Test
	public void emailInUpperCaseShouldIgnore() {
		BBCode bb = getBBCode();
		formatter.addBb(bb);
		Assert.assertEquals(""send to EMAIL@address now"",
			formatter.format(""send to EMAIL@address now"", defaultOptions()));
	}

	@Test
	public void withSpecialCharsShouldFormat() {
		BBCode bb = getBBCode();
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""send to %s now"", html(bb, ""e.ma-il_and-3949223"", ""address234.domain789"")),
			formatter.format(""send to e.ma-il_and-3949223@address234.domain789 now"", defaultOptions()));
	}

	private BBCode getBBCode() {
		BBCode bb = bbCodes.get(""auto-email"");

		Assert.assertTrue(bb.alwaysProcess());

		return bb;
	}

	private String html(BBCode bb, String name, String domain) {
		return StringUtils.replace(bb.getReplace(), ""$1"", """")
			.replace(""$2"", name).replace(""$3"", domain);
	}
}"
net.jforum.bbcode.U_TestCase,"public class U_TestCase extends TagBaseTest {
	@Test
	public void singleLine() {
		formatter.addBb(bbCodes.get(""u""));
		Assert.assertEquals(""some <u>underline</u> text"", formatter.format(""some [u]underline[/u] text"", defaultOptions()));
	}

	@Test
	public void incompleteTagShouldDoNothing() {
		formatter.addBb(bbCodes.get(""u""));
		Assert.assertEquals(""some [u]underline text"", formatter.format(""some [u]underline text"", defaultOptions()));
	}

	@Test
	public void twoOpenZeroClosedShouldDoNothing() {
		formatter.addBb(bbCodes.get(""u""));
		Assert.assertEquals(""some [u]underline[u] text"", formatter.format(""some [u]underline[u] text"", defaultOptions()));
	}

	@Test
	public void twoOpenOneClosedExpectOneFormatted() {
		formatter.addBb(bbCodes.get(""u""));
		Assert.assertEquals(""some <u>underline[u] text</u>"", formatter.format(""some [u]underline[u] text[/u]"", defaultOptions()));
	}

	@Test
	public void multipleLines() {
		formatter.addBb(bbCodes.get(""u""));
		Assert.assertEquals(""some <u>\nunderline\n\n</u>\n text"", formatter.format(""some [u]\nunderline\n\n[/u]\n text"", defaultOptions()));
	}

	@Test
	public void mixedCase() {
		formatter.addBb(bbCodes.get(""u""));
		Assert.assertEquals(""some <u>underline</u> text"", formatter.format(""some [U]underline[/u] text"", defaultOptions()));
	}
}"
net.jforum.bbcode.TagBaseTest,"public abstract class TagBaseTest {
	protected BBConfigFormatter formatter = new BBConfigFormatter();
	protected Map<String, BBCode> bbCodes = new HashMap<String, BBCode>();

	@Before
	public void setup() {
		BBConfigFormatter customFormatter = new BBConfigFormatter() {
			@Override
			public void addBb(BBCode code) {
				bbCodes.put(code.getTagName(), code);
			}
		};

		new BBCodeConfigParser( customFormatter);
	}

	protected PostOptions defaultOptions() {
		return new PostOptions(false, false, true, false, null);
	}
}"
net.jforum.bbcode.Google_TestCase,"public class Google_TestCase extends TagBaseTest {
	@Test
	public void format() {
		BBCode bb = bbCodes.get(""google"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""search %s in google"", this.html(bb, ""java"")),
			formatter.format(""search [google]java[/google] in google"", defaultOptions()));
	}

	@Test
	public void incompleteTagShouldDoNothing() {
		formatter.addBb(bbCodes.get(""google""));
		Assert.assertEquals(""a [google]search"", formatter.format(""a [google]search"", defaultOptions()));
	}

	@Test
	public void twoOpenOneClosedExpectOneFormatted() {
		BBCode bb = bbCodes.get(""google"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""some %s search"", this.html(bb, ""search[google]"")),
			formatter.format(""some [google]search[google][/google] search"", defaultOptions()));
	}

	@Test
	public void multipleLinesShouldIgnore() {
		formatter.addBb(bbCodes.get(""google""));
		Assert.assertEquals(""some [google]\nsearch[/google]"",
			formatter.format(""some [google]\nsearch[/google]"", defaultOptions()));
	}

	@Test
	public void mixedCase() {
		BBCode bb = bbCodes.get(""google"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""search %s in google"", this.html(bb, ""java"")),
			formatter.format(""search [GoogLE]java[/gooGle] in google"", defaultOptions()));
	}

	private String html(BBCode bb, String input) {
		return StringUtils.replace(bb.getReplace(), ""$1"", input);
	}
}"
net.jforum.bbcode.IMG_TestCase,"public class IMG_TestCase extends TagBaseTest {
	@Test
	public void singleLine() {
		formatter.addBb(bbCodes.get(""img""));
		Assert.assertEquals(""some <img src=\""image\"" border=\""0\"" /> here"",
			formatter.format(""some [img]image[/img] here"", defaultOptions()));
	}

	@Test
	public void incompleteTagShouldDoNothing() {
		formatter.addBb(bbCodes.get(""img""));
		Assert.assertEquals(""some [img]image here"",
			formatter.format(""some [img]image here"", defaultOptions()));
	}

	@Test
	public void twoOpenZeroClosedShouldDoNothing() {
		formatter.addBb(bbCodes.get(""img""));
		Assert.assertEquals(""some [img]image[img] here"",
			formatter.format(""some [img]image[img] here"", defaultOptions()));
	}

	@Test
	public void twoOpenOneClosedExpectOneFormatted() {
		formatter.addBb(bbCodes.get(""img""));
		Assert.assertEquals(""some <img src=\""image[img]other\"" border=\""0\"" /> here"",
			formatter.format(""some [img]image[img]other[/img] here"", defaultOptions()));
	}

	@Test
	public void multipleLineShouldIgnore() {
		formatter.addBb(bbCodes.get(""img""));
		Assert.assertEquals(""some [img]\nimage here[/img]\n\n"",
			formatter.format(""some [img]\nimage here[/img]\n\n"", defaultOptions()));
	}

	@Test
	public void mixedCase() {
		formatter.addBb(bbCodes.get(""img""));
		Assert.assertEquals(""some <img src=\""image\"" border=\""0\"" /> here"",
			formatter.format(""some [img]image[/IMG] here"", defaultOptions()));
	}
}"
net.jforum.bbcode.HtmlEntitiesFormatterTestCase,"public class HtmlEntitiesFormatterTestCase {
	@Test
	public void htmlEnabledShouldNotFormat() {
		PostOptions options = new PostOptions(true, false, false, false, null);
		String input = ""some <b>content</b>"";
		String expected = input;

		Assert.assertEquals(expected, new HtmlEntitiesFormatter().format(input, options));
	}

	@Test
	public void format() {
		PostOptions options = new PostOptions(false, false, false, false, null);
		String input = ""some <b>bold</b> test and < other > stuff"";
		String expected = ""some &lt;b&gt;bold&lt;/b&gt; test and &lt; other &gt; stuff"";

		Assert.assertEquals(expected, new HtmlEntitiesFormatter().format(input, options));
	}
}"
net.jforum.bbcode.Size_TestCase,"public class Size_TestCase extends TagBaseTest {
	@Test
	public void singleLine() {
		BBCode bb = bbCodes.get(""size"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""10"", ""sized"")),
			formatter.format(""a [size=10]sized[/size] text"", defaultOptions()));
	}

	@Test
	public void incompleteTagShouldDoNothing() {
		formatter.addBb(bbCodes.get(""size""));
		Assert.assertEquals(""some [size=10]text"",
			formatter.format(""some [size=10]text"", defaultOptions()));
	}

	@Test
	public void withoutSizePortionShouldIgnore() {
		formatter.addBb(bbCodes.get(""size""));
		Assert.assertEquals(""some [size]text[/size]"",
			formatter.format(""some [size]text[/size]"", defaultOptions()));
	}

	@Test
	public void twoOpenOneClosedExpectOneFormatted() {
		BBCode bb = bbCodes.get(""size"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""some %s"", this.html(bb, ""10"", ""text[size=12]"")),
			formatter.format(""some [size=10]text[size=12][/size]"", defaultOptions()));
	}

	@Test
	public void multipleLines() {
		BBCode bb = bbCodes.get(""size"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""some %s"", this.html(bb, ""10"", ""\ntext\n\nhere"")),
			formatter.format(""some [size=10]\ntext\n\nhere[/size]"", defaultOptions()));
	}

	@Test
	public void mixedCase() {
		BBCode bb = bbCodes.get(""size"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""some %s here"", this.html(bb, ""10"", ""text"")),
			formatter.format(""some [siZE=10]text[/siZe] here"", defaultOptions()));
	}

	@Test
	public void withQuotes() {
		BBCode bb = bbCodes.get(""size"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""10"", ""sized"")),
			formatter.format(""a [size=\""10\""]sized[/size] text"", defaultOptions()));
	}

	@Test
	public void withSimpleQuotes() {
		BBCode bb = bbCodes.get(""size"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""10"", ""sized"")),
			formatter.format(""a [size='10']sized[/size] text"", defaultOptions()));
	}

	@Test
	public void withUnclosedQuoteShouldFormat() {
		BBCode bb = bbCodes.get(""size"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""10"", ""sized"")),
			formatter.format(""a [size=\""10]sized[/size] text"", defaultOptions()));
	}

	@Test
	public void withUnopenedQuoteShould() {
		BBCode bb = bbCodes.get(""size"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""10"", ""sized"")),
			formatter.format(""a [size=10\""]sized[/size] text"", defaultOptions()));
	}

	@Test
	public void withUnclosedSingleQuoteShouldFormat() {
		BBCode bb = bbCodes.get(""size"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""10"", ""sized"")),
			formatter.format(""a [size='10]sized[/size] text"", defaultOptions()));
	}

	@Test
	public void withUnopenedSingleQuoteShouldFormat() {
		BBCode bb = bbCodes.get(""size"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""10"", ""sized"")),
			formatter.format(""a [size=10']sized[/size] text"", defaultOptions()));
	}

	private String html(BBCode bb, String size, String text) {
		return StringUtils.replace(bb.getReplace(), ""$1"", size)
			.replace(""$2"", text);
	}
}"
net.jforum.bbcode.I_TestCase,"public class I_TestCase extends TagBaseTest {
	@Test
	public void singleLine() {
		formatter.addBb(bbCodes.get(""i""));
		Assert.assertEquals(""some <i>italic</i> text"", formatter.format(""some [i]italic[/i] text"", defaultOptions()));
	}

	@Test
	public void incompleteTagShouldDoNothing() {
		formatter.addBb(bbCodes.get(""i""));
		Assert.assertEquals(""some [i]italic text"", formatter.format(""some [i]italic text"", defaultOptions()));
	}

	@Test
	public void twoOpenZeroClosedShouldDoNothing() {
		formatter.addBb(bbCodes.get(""i""));
		Assert.assertEquals(""some [i]italic[i] text"", formatter.format(""some [i]italic[i] text"", defaultOptions()));
	}

	@Test
	public void twoOpenOneClosedExpectOneFormatted() {
		formatter.addBb(bbCodes.get(""i""));
		Assert.assertEquals(""some <i>italic[i] text</i>"", formatter.format(""some [i]italic[i] text[/i]"", defaultOptions()));
	}

	@Test
	public void multipleLines() {
		formatter.addBb(bbCodes.get(""i""));
		Assert.assertEquals(""some <i>\nitalic\n\n</i>\n text"", formatter.format(""some [i]\nitalic\n\n[/i]\n text"", defaultOptions()));
	}

	@Test
	public void mixedCase() {
		formatter.addBb(bbCodes.get(""i""));
		Assert.assertEquals(""some <i>italic</i> text"", formatter.format(""some [I]italic[/i] text"", defaultOptions()));
	}
}"
net.jforum.bbcode.BBCodeConfigParserTestCase,"public class BBCodeConfigParserTestCase {
	
	@Mock private BBConfigFormatter formatter;

	@Test
	public void parse() {
		// Tag 1
		BBCode tag1 = new BBCode();
		tag1.setRegex(""tag1-regex"");
		tag1.setReplace(""tag1-replace"");
		tag1.setTagName(""tag1"");

		// Tag 2
		BBCode tag2 = new BBCode();
		tag2.setRegex(""tag2-regex"");
		tag2.setReplace(""tag2-replace"");
		tag2.setTagName(""tag2"");
		tag2.enableAlwaysProcess();
		
		//File file = new File(this.getClass().getResource(""/bb_config_parser.xml"").getFile());
		new BBCodeConfigParser(/*file,*/ formatter);

		verify(formatter).addBb(tag1);
		verify(formatter).addBb(tag2);
	}
}"
net.jforum.bbcode.NewLineToHtmBreakFormatterTestCase,"public class NewLineToHtmBreakFormatterTestCase {
	@Test
	public void twoNewLinesExpectsTwoBreaks() {
		Assert.assertEquals(""some<br/>  text and some<br/>  more"",
			new NewLineToHtmlBreakFormatter().format(""some\n text and some\n more"", null));
	}

	@Test
	public void stringWithoutNewLineExpectNoChanges() {
		String input = ""this is a regular content"";
		Assert.assertEquals(input, new NewLineToHtmlBreakFormatter().format(input, null));
	}
}"
net.jforum.bbcode.SimpleUrl_TestCase,"public class SimpleUrl_TestCase extends TagBaseTest {
	@Test
	public void format() {
		BBCode bb = bbCodes.get(""simple-url"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""http://something"")),
			formatter.format(""a [url]http://something[/url] text"", defaultOptions()));
	}

	@Test
	public void incompleteTagShouldDoNothing() {
		formatter.addBb(bbCodes.get(""simple-url""));
		Assert.assertEquals(""some [url=http://something]text"",
			formatter.format(""some [url=http://something]text"", defaultOptions()));
	}

	@Test
	public void twoOpenOneClosedExpectOneFormatted() {
		BBCode bb = bbCodes.get(""simple-url"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""some %s"", this.html(bb, ""http://something[url]http://other.site"")),
			formatter.format(""some [url]http://something[url]http://other.site[/url]"", defaultOptions()));
	}

	@Test
	@Ignore(""bbcode need a major refactor to be able to test that case, the auto-url-simple rule conflict"")
	public void multipleLinesShouldIgnore() {
		BBCode bb = bbCodes.get(""simple-url"");
		formatter.addBb(bb);
		Assert.assertEquals(""some [url]\nhttp://something\n\n[/url]"",
			formatter.format(""some [url]\nhttp://something\n\n[/url]"", defaultOptions()));
	}

	@Test
	public void mixedCase() {
		BBCode bb = bbCodes.get(""simple-url"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""some %s here"", this.html(bb, ""http://something"")),
			formatter.format(""some [UrL]http://something[/URL] here"", defaultOptions()));
	}

	private String html(BBCode bb, String url) {
		return StringUtils.replace(bb.getReplace(), ""$1"", url);
	}
}"
net.jforum.bbcode.DescriptiveUrl_TestCase,"public class DescriptiveUrl_TestCase extends TagBaseTest {
	@Test
	public void format() {
		BBCode bb = bbCodes.get(""descriptive-url"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""http://something"", ""url description"")),
			formatter.format(""a [url=http://something]url description[/url] text"", defaultOptions()));
	}

	@Test
	public void incompleteTagShouldDoNothing() {
		formatter.addBb(bbCodes.get(""descriptive-url""));
		Assert.assertEquals(""some [url=http://something]text"",
			formatter.format(""some [url=http://something]text"", defaultOptions()));
	}

	@Test
	@Ignore(""bbcode need a major refactor to be able to test that case, the simple-url rule conflict"")
	public void withoutUrlAddressShouldIgnore() {
		formatter.addBb(bbCodes.get(""descriptive-url""));
		Assert.assertEquals(""some [url]text[/url]"",
			formatter.format(""some [url]text[/url]"", defaultOptions()));
	}

	@Test
	public void twoOpenOneClosedExpectOneFormatted() {
		BBCode bb = bbCodes.get(""descriptive-url"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""some %s"", this.html(bb, ""http://something"", ""url description[url=http://other.site]"")),
			formatter.format(""some [url=http://something]url description[url=http://other.site][/url]"", defaultOptions()));
	}

	@Test
	public void multipleLinesShouldIgnore() {
		BBCode bb = bbCodes.get(""descriptive-url"");
		formatter.addBb(bb);
		Assert.assertEquals(""some [url=http://something]\ntext\n\nhere[/url]"",
			formatter.format(""some [url=http://something]\ntext\n\nhere[/url]"", defaultOptions()));
	}

	@Test
	public void mixedCase() {
		BBCode bb = bbCodes.get(""descriptive-url"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""some %s here"", this.html(bb, ""http://something"", ""url description"")),
			formatter.format(""some [UrL=http://something]url description[/URL] here"", defaultOptions()));
	}

	@Test
	public void withQuotes() {
		BBCode bb = bbCodes.get(""descriptive-url"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""http://something"", ""url description"")),
			formatter.format(""a [url=\""http://something\""]url description[/url] text"", defaultOptions()));
	}

	@Test
	public void withSimpleQuotes() {
		BBCode bb = bbCodes.get(""descriptive-url"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""http://something"", ""url description"")),
			formatter.format(""a [url='http://something']url description[/url] text"", defaultOptions()));
	}

	@Test
	public void withUnclosedQuoteShouldFormat() {
		BBCode bb = bbCodes.get(""descriptive-url"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""something"", ""url description"")),
			formatter.format(""a [url=\""something]url description[/url] text"", defaultOptions()));
	}

	@Test
	public void withUnopenedQuoteShouldFormat() {
		BBCode bb = bbCodes.get(""descriptive-url"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""http://something"", ""url description"")),
			formatter.format(""a [url=http://something\""]url description[/url] text"", defaultOptions()));
	}

	@Test
	public void withUnclosedSingleQuoteShouldFormat() {
		BBCode bb = bbCodes.get(""descriptive-url"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""http://something"", ""url description"")),
			formatter.format(""a [url='http://something]url description[/url] text"", defaultOptions()));
	}

	@Test
	public void withUnopenedSingleQuoteShouldFormat() {
		BBCode bb = bbCodes.get(""descriptive-url"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""http://something"", ""url description"")),
			formatter.format(""a [url=http://something']url description[/url] text"", defaultOptions()));
	}

	private String html(BBCode bb, String url, String description) {
		return StringUtils.replace(bb.getReplace(), ""$1"", url)
			.replace(""$2"", description);
	}
}"
net.jforum.bbcode.YouTube_TestCase,"public class YouTube_TestCase extends TagBaseTest {
	@Test
	public void format() {
		BBCode bb = bbCodes.get(""youtube"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a video: %s"", this.tagHtml(bb, ""www."", ""123456"")),
			formatter.format(""a video: [youtube]http://www.youtube.com/watch?v=123456[/youtube]"", defaultOptions()));
	}

	@Test
	public void invalidUrlShouldNotFormat() {
		BBCode bb = bbCodes.get(""youtube"");
		formatter.addBb(bb);
		Assert.assertEquals(""a video: [youtube]http://something.else[/youtube]"",
			formatter.format(""a video: [youtube]http://something.else[/youtube]"", defaultOptions()));
	}

	@Test
	public void mixedCase() {
		BBCode bb = bbCodes.get(""youtube"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a video: %s"", this.tagHtml(bb, ""www."", ""123456"")),
			formatter.format(""a video: [YOUTUBE]http://www.youtube.com/watch?v=123456[/yOuTube]"", defaultOptions()));
	}

	private String tagHtml(BBCode bb, String url, String videoCode) {
		return StringUtils.replace(bb.getReplace(), ""$1"", url)
			.replace(""$2"", videoCode);
	}
}"
net.jforum.bbcode.SmiliesFormatterTestCase,"public class SmiliesFormatterTestCase {
	@Mock private SmilieRepository repository;
	@Mock private JForumConfig config;
	@Mock private Container container;

	@Test
	public void expectAllReplaces() {
		Smilie s1 = new Smilie();
		s1.setCode("":)"");
		s1.setDiskName(""#s1#"");

		Smilie s2 = new Smilie();
		s2.setCode("":D"");
		s2.setDiskName(""#s2#"");
		
		when(container.instanceFor(SmilieRepository.class)).thenReturn(repository);
		when(repository.getAllSmilies()).thenReturn(Arrays.asList(s1, s2));
		when(config.getValue(ConfigKeys.SMILIE_IMAGE_DIR)).thenReturn(""smilies"");
		
		String input = ""some text :). And another :D :):). This one not: :P"";
		String expected = ""some text <img src='/smilies/#s1#' border='0'/>. "" +
				""And another <img src='/smilies/#s2#' border='0'/> <img src=\'/smilies/#s1#\' border=\'0\'/>"" +
				""<img src=\'/smilies/#s1#\' border=\'0\'/>. This one not: :P"";
		PostOptions options = new PostOptions(false, true, false, false, """");

		SmiliesFormatter formatter = new SmiliesFormatter(config, container);
		Assert.assertEquals(expected, formatter.format(input, options));

	}

	@Test
	public void smliesDisabledShouldNotFormat() {
		String input = ""some :) smiles :D here"";
		String expected = input;

		PostOptions options = new PostOptions(false, false, false, false, null);

		Assert.assertEquals(expected, new SmiliesFormatter(null, container).format(input, options));
	}
}"
net.jforum.bbcode.B_TestCase,"public class B_TestCase extends TagBaseTest {
	@Test
	public void singleLine() {
		formatter.addBb(bbCodes.get(""b""));
		Assert.assertEquals(""some <strong>bold</strong> text"", formatter.format(""some [b]bold[/b] text"", defaultOptions()));
	}

	@Test
	public void incompleteTagShouldDoNothing() {
		formatter.addBb(bbCodes.get(""b""));
		Assert.assertEquals(""some [b]bold text"", formatter.format(""some [b]bold text"", defaultOptions()));
	}

	@Test
	public void twoOpenZeroClosedShouldDoNothing() {
		formatter.addBb(bbCodes.get(""b""));
		Assert.assertEquals(""some [b]bold[b] text"", formatter.format(""some [b]bold[b] text"", defaultOptions()));
	}

	@Test
	public void twoOpenOneClosedExpectOneFormatted() {
		formatter.addBb(bbCodes.get(""b""));
		Assert.assertEquals(""some <strong>bold[b] text</strong>"", formatter.format(""some [b]bold[b] text[/b]"", defaultOptions()));
	}

	@Test
	public void multipleLines() {
		formatter.addBb(bbCodes.get(""b""));
		Assert.assertEquals(""some <strong>\nbold\n\n</strong>\n text"", formatter.format(""some [b]\nbold\n\n[/b]\n text"", defaultOptions()));
	}

	@Test
	public void mixedCase() {
		formatter.addBb(bbCodes.get(""b""));
		Assert.assertEquals(""some <strong>bold</strong> text"", formatter.format(""some [B]bold[/b] text"", defaultOptions()));
	}
}"
net.jforum.bbcode.Color_TestCase,"public class Color_TestCase extends TagBaseTest {
	@Test
	public void singleLine() {
		BBCode bb = bbCodes.get(""color"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""red"", ""red text"")),
			formatter.format(""a [color=red]red text[/color] text"", defaultOptions()));
	}

	@Test
	public void incompleteTagShouldDoNothing() {
		formatter.addBb(bbCodes.get(""color""));
		Assert.assertEquals(""some [color=red]text"",
			formatter.format(""some [color=red]text"", defaultOptions()));
	}

	@Test
	public void withoutColorNameShouldIgnore() {
		formatter.addBb(bbCodes.get(""color""));
		Assert.assertEquals(""some [color]text[/color]"",
			formatter.format(""some [color]text[/color]"", defaultOptions()));
	}

	@Test
	public void twoOpenOneClosedExpectOneFormatted() {
		BBCode bb = bbCodes.get(""color"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""some %s"", this.html(bb, ""red"", ""text[color=yellow]"")),
			formatter.format(""some [color=red]text[color=yellow][/color]"", defaultOptions()));
	}

	@Test
	public void multipleLines() {
		BBCode bb = bbCodes.get(""color"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""some %s"", this.html(bb, ""red"", ""\ntext\n\nhere"")),
			formatter.format(""some [color=red]\ntext\n\nhere[/color]"", defaultOptions()));
	}

	@Test
	public void mixedCase() {
		BBCode bb = bbCodes.get(""color"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""some %s here"", this.html(bb, ""red"", ""text"")),
			formatter.format(""some [coLOr=red]text[/cOloR] here"", defaultOptions()));
	}

	@Test
	public void withQuotes() {
		BBCode bb = bbCodes.get(""color"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""red"", ""colored"")),
			formatter.format(""a [color=\""red\""]colored[/color] text"", defaultOptions()));
	}

	@Test
	public void withSimpleQuotes() {
		BBCode bb = bbCodes.get(""color"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""red"", ""colored"")),
			formatter.format(""a [color='red']colored[/color] text"", defaultOptions()));
	}

	@Test
	public void withUnclosedQuoteShouldFormat() {
		BBCode bb = bbCodes.get(""color"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""red"", ""colored"")),
			formatter.format(""a [color=\""red]colored[/color] text"", defaultOptions()));
	}

	@Test
	public void withUnopenedQuoteShouldFormat() {
		BBCode bb = bbCodes.get(""color"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""red"", ""colored"")),
			formatter.format(""a [color=red\""]colored[/color] text"", defaultOptions()));
	}

	@Test
	public void withUnclosedSingleQuoteShouldFormat() {
		BBCode bb = bbCodes.get(""color"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""red"", ""colored"")),
			formatter.format(""a [color='red]colored[/color] text"", defaultOptions()));
	}

	@Test
	public void withUnopenedSingleQuoteShouldFormat() {
		BBCode bb = bbCodes.get(""color"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""red"", ""colored"")),
			formatter.format(""a [color=red']colored[/color] text"", defaultOptions()));
	}

	private String html(BBCode bb, String color, String text) {
		return StringUtils.replace(bb.getReplace(), ""$1"", color)
			.replace(""$2"", text);
	}
}"
net.jforum.entities.GroupTestCase,"public class GroupTestCase {
	@Test
	public void roleExistNotFoundExpectFalse() {
		Role role = new Role();
		role.setName(""role1"");

		Group g = new Group();
		g.addRole(role);

		Assert.assertFalse(g.roleExist(""role2""));
	}

	@Test
	public void roleExistEntryIsFoundExpectTrue() {
		Role role = new Role();
		role.setName(""role1"");

		Group g = new Group();
		g.addRole(role);

		Assert.assertTrue(g.roleExist(""role1""));
	}
}"
net.jforum.entities.TopicTestCase,"public class TopicTestCase {

	@Mock private TopicRepository repository;

	@Test
	public void getPosts() {
		final Topic topic = new Topic(repository);

		topic.getPosts(0, 10);

		verify(repository).getPosts(topic, 0, 10);
	}

	@Test
	public void getTotalPosts() {
		final Topic topic = new Topic();
		topic.incrementTotalReplies();

		assertEquals(2, topic.getTotalPosts());
	}

	@Test(expected = IllegalStateException.class)
	public void getPostsWithoutRepositoryExpectException() {
		new Topic().getPosts(0, 10);
	}
}"
net.jforum.entities.ForumTestCase,"public class ForumTestCase {

	@Mock
	private ForumRepository repository;

	@Test
	public void getTotalTopics() {
		final Forum forum = new Forum(repository);

		forum.getTotalTopics();

		verify(repository).getTotalTopics(forum);
	}

	@Test
	public void getTopicsPendingModerationForumIsNotModeratedShouldReturnEmptyList() {
		Forum forum = new Forum();
		forum.setModerated(false);
		assertEquals(0, forum.getTopicsPendingModeration().size());
	}

	@Test
	public void getTopicsPendingModeration() {
		final Forum forum = new Forum(repository);
		forum.setModerated(true);

		forum.getTopicsPendingModeration();

		verify(repository).getTopicsPendingModeration(forum);
	}

	@Test
	public void getTopics() {
		final Forum forum = new Forum(repository);

		forum.getTopics(0, 10);

		verify(repository).getTopics(forum, 0, 10);
	}

	@Test
	public void getTotalPosts() {
		final Forum forum = new Forum(repository);

		forum.getTotalPosts();

		verify(repository).getTotalPosts(forum);
	}

	@Test
	public void getModeratorsForumIsNotModeratedExpectEmptyList() {
		Forum forum = new Forum();
		forum.setModerated(false);
		assertEquals(0, forum.getModerators().size());
	}

	@Test
	public void getModerators() {
		final Forum forum = new Forum(repository);
		forum.setModerated(true);

		forum.getModerators();

		verify(repository).getModerators(forum);
	}

	@Test(expected = IllegalStateException.class)
	public void getModeratorsWithoutRepositoryExpectException() {
		Forum forum = new Forum();
		forum.setModerated(true);
		forum.getModerators();
	}

	@Test(expected = IllegalStateException.class)
	public void getTotalTopicsWithoutRepositoryExpectException() {
		new Forum().getTotalTopics();
	}

	@Test(expected = IllegalStateException.class)
	public void getTotalPostsWithoutRepositoryExpectException() {
		new Forum().getTotalPosts();
	}

	@Test(expected = IllegalStateException.class)
	public void getTopicsWithoutRepositoryExpectException() {
		new Forum().getTopics(0, 10);
	}

	@Test(expected = IllegalStateException.class)
	public void getTopicsPendingModerationWithoutRepositoryExpectException() {
		Forum forum = new Forum();
		forum.setModerated(true);
		forum.getTopicsPendingModeration();
	}
}"
net.jforum.entities.SearchParamsTest,"public class SearchParamsTest {
	@Test
	public void testSearchParamsQueryWithOr() {
		SearchParams p = new SearchParams(); p.setQuery(""test query words""); p.setMatchType(SearchMatchType.OR);
		Assert.assertEquals(""(test query words  ) or (subject:test subject:query subject:words  )"", p.buildQuery());
	}
	@Test
	public void testSearchParamsQueryWithAnd() {
		SearchParams p = new SearchParams(); p.setQuery(""test query words""); p.setMatchType(SearchMatchType.AND);
		Assert.assertEquals(""(+test +query +words  ) or (+subject:test +subject:query +subject:words  )"", p.buildQuery());
	}
	@Test
	public void testSearchParamsQueryWithForumId() {
		Forum f = new Forum(); f.setId(1);
		SearchParams p = new SearchParams(); p.setQuery(""test query words""); p.setMatchType(SearchMatchType.AND); p.setForum(f);
		Assert.assertEquals(""(+test +query +words  and +topic.forum.id:1) or (+subject:test +subject:query +subject:words  and +topic.forum.id:1)"", p.buildQuery());
	}

	@Test
	public void testSearchParamsQueryWithQuotesAndAnd() {
		SearchParams p = new SearchParams(); p.setQuery(""test 'query words' with quotes""); p.setMatchType(SearchMatchType.AND);
		Assert.assertEquals(""(+test +'query words' +with +quotes  ) or (+subject:test +subject:'query words' +subject:with +subject:quotes  )"", p.buildQuery());
	}
	@Test
	public void testSearchParamsQueryWithDoubleQuotesAndAnd() {
		SearchParams p = new SearchParams(); p.setQuery(""test \""query words\"" with quotes""); p.setMatchType(SearchMatchType.AND);
		Assert.assertEquals(""(+test +\""query words\"" +with +quotes  ) or (+subject:test +subject:\""query words\"" +subject:with +subject:quotes  )"", p.buildQuery());
	}
}"
net.jforum.entities.UserSessionTestCase,"public class UserSessionTestCase {
	
	@Mock private HttpServletRequest request;
	@Mock private HttpSession httpSession;
	private Map<Integer, Long> topicsReadTime;
	private UserSession userSession;

	@Before
	public void setup() {
		userSession = new UserSession();
		userSession.setRequest(request);
		
		when(request.getSession()).thenReturn(httpSession);
		
		this.loadTopicsReadTime();
	}

	@Test
	public void isForumReadLastPostTimeNewerThanLastVisitTopicTrackingSmallerThanLastPostExpectFalse() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""1"");
		
		userSession.setLastVisit(10);
		Forum forum = this.newForum(1, 20); 
		forum.getLastPost().getTopic().setId(1);
		topicsReadTime.put(1, 15l);
		
		assertFalse(userSession.isForumRead(forum));
	}

	@Test
	public void isForumReadLastPostTimeNewerThanLastVisitTopicTrackingDoestNotExistExpectFalse() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""1"");
		
		userSession.setLastVisit(10);
		Forum forum = this.newForum(1, 20); 
		forum.getLastPost().getTopic().setId(1);
		topicsReadTime.put(2, 15l);
		
		assertFalse(userSession.isForumRead(forum));
	}

	@Test
	public void isForumReadLastPostTimeNewerThanLastVisitExpectFalse() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""1"");
		
		userSession.setLastVisit(1);
		
		assertFalse(userSession.isForumRead(this.newForum(1, 2)));
	}

	@Test
	public void isForumReadLastVisitNewerThanLastPostTimeExpectTrue() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""1"");
		
		userSession.setLastVisit(10);
		
		assertTrue(userSession.isForumRead(this.newForum(1, 5)));
	}

	@Test
	public void isForumReadLastPostIsNullExpectTrue() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""1"");
		
		Forum forum = this.newForum(1, 1);
		forum.setLastPost(null);
		
		assertTrue(userSession.isForumRead(forum));
	}

	@Test
	public void isForumReadZeroPostsExpectTrue() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""1"");
		
		Forum forum = this.newForum(0, 0);
		
		assertTrue(userSession.isForumRead(forum));
	}

	@Test
	public void isForumReadNotLoggedExpectTrue() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""0"");
		
		Forum forum = new Forum();
		
		assertTrue(userSession.isForumRead(forum));
	}

	@Test
	public void asSession() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""0"");
		when(request.getRemoteAddr()).thenReturn(""ip"");
		
		User user = new User();
		user.setId(2);
		userSession.setUser(user);
		userSession.setCreationTime(2);
		userSession.setLastAccessedTime(1);
		userSession.setLastVisit(5);

		Session session  = userSession.asSession();
		
		assertEquals(new Date(1), session.getLastAccessed());
		assertEquals(new Date(2), session.getStart());
		assertEquals(new Date(5), session.getLastVisit());
		assertEquals(""ip"", session.getIp());
		assertEquals(2, session.getUserId());
	}

	@Test
	public void isTopicReadNotLoggedShouldReturnTrue() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""0"");
		
		Topic topic = new Topic();
		
		assertFalse(userSession.isLogged());
		assertTrue(userSession.isTopicRead(topic));
	}

	@Test
	public void isTopicReadWhenLoggedLastVisitNewerThanTopicShouldReturnTrue() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""1"");
		
		Topic topic = new Topic(); topic.setLastPost(new Post());
		topic.getLastPost().setDate(new Date(1));
		userSession.setLastVisit(5l);

		assertTrue(userSession.isTopicRead(topic));
	}

	@Test
	public void isTopicReadWhenLoggedLastVisitAndReadTimeOlderThanTopicShouldReturnFalse() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""1"");
		
		Topic topic = new Topic(); topic.setLastPost(new Post());
		topic.getLastPost().setDate(new Date(10));
		userSession.setLastVisit(1);
		topicsReadTime.put(topic.getId(), 8L);

		assertFalse(userSession.isTopicRead(topic));
	}

	@Test
	public void isTopicReadWhenLoggedLastVisitOlderThanTopicReadTimeNewerThanTopicShouldReturnTrue() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""1"");
		
		Topic topic = new Topic(); topic.setLastPost(new Post());
		topic.getLastPost().setDate(new Date(10));
		userSession.setLastVisit(1);
		topicsReadTime.put(topic.getId(), 20L);

		assertTrue(userSession.isTopicRead(topic));
	}

	@Test
	public void isTopicReadWhenLoggedLastVisitOlderThanTopicShouldReturnFalse() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""1"");
		
		Topic topic = new Topic(); topic.setLastPost(new Post());
		topic.getLastPost().setDate(new Date(10));
		userSession.setLastVisit(5);

		assertFalse(userSession.isTopicRead(topic));
	}

	@Test
	public void markAsReadWhenLogged() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""1"");
		
		assertTrue(userSession.isLogged());
		assertEquals(0, topicsReadTime.size());
		userSession.markTopicAsRead(2);
		assertEquals(1, topicsReadTime.size());
		assertTrue(topicsReadTime.containsKey(2));
	}

	@Test
	public void markTopicAsReadNotLoggedShouldIgnore() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""0"");
		
		assertFalse(userSession.isLogged());
		assertEquals(0, topicsReadTime.size());
		userSession.markTopicAsRead(1);
		assertEquals(0, topicsReadTime.size());
	}

	@SuppressWarnings(""unchecked"")
	private void loadTopicsReadTime() {
		Field[] fields = userSession.getClass().getDeclaredFields();
		for (Field field: fields) {
			if (field.getName().equals(""topicReadTime"")) {
				field.setAccessible(true);
				try {
					topicsReadTime = (Map<Integer, Long>)field.get(userSession);
				}
				catch (Exception e) {
					throw new RuntimeException(e);
				}
			}
		}
	}

	private Forum newForum(final int totalPosts, long lastPostTime) {
		Forum forum = new Forum() {
			/**
			 *
			 */
			private static final long serialVersionUID = 1L;

			@Override
			public int getTotalPosts() { return totalPosts; }
		};

		forum.setLastPost(new Post());
		forum.getLastPost().setDate(new Date(lastPostTime));
		forum.getLastPost().setTopic(new Topic());

		return forum;
	}
}"
net.jforum.repository.ModerationLogRepository,"public class ModerationLogRepository extends HibernateGenericDAO<ModerationLog> implements Repository<ModerationLog> {
	public ModerationLogRepository(Session session) {
		super(session);
	}

	public int getTotalRecords() {
		return ((Number)session.createQuery(""select count(*) from ModerationLog"").uniqueResult()).intValue();
	}

	@SuppressWarnings(""unchecked"")
	public List<ModerationLog> getAll(int start, int count) {
		return session.createQuery(""from ModerationLog l order by l.id desc"")
			.setFirstResult(start)
			.setMaxResults(count)
			.list();
	}
}"
net.jforum.repository.ForumRepository,"public class ForumRepository extends HibernateGenericDAO<Forum> implements Repository<Forum> {
	private JForumConfig config;

	public ForumRepository(Session session) {
		super(session);
	}

	public void setJforumConfig(JForumConfig config) {
		this.config = config;
	}

	public void moveTopics(Forum toForum, int... topicIds) {
		session.createQuery(""update Topic t set t.movedId = t.forum.id, t.forum = :newForum "" +
			"" where t.id in (:ids)"")
			.setParameterList(""ids"", ArrayUtils.toObject(topicIds))
			.setParameter(""newForum"", toForum)
			.executeUpdate();

		session.createQuery(""update Post p set p.forum = :forum where p.topic.id in (:ids)"")
			.setParameterList(""ids"", ArrayUtils.toObject(topicIds))
			.setParameter(""forum"", toForum)
			.executeUpdate();
	}

	@Override
	public void add(Forum entity) {
		entity.setDisplayOrder(this.getMaxDisplayOrder());
		super.add(entity);
	}

	@SuppressWarnings(""unchecked"")
	public List<Group> getModerators(Forum forum) {
		return session.createQuery(""select distinct r.group from Role r "" +
			"" join r.roleValues rv "" +
			"" where r.name = 'moderate_forum' "" +
			"" and rv = :forum"")
			.setEntity(""forum"", forum)
			.setComment(""forumDAO.getModerators"")
			.setCacheable(true)
			.setCacheRegion(""forumDAO.getModerators"")
			.list();
	}

	@SuppressWarnings(""unchecked"")
	public List<Topic> getTopicsPendingModeration(Forum forum) {
		return session.createQuery(""select t from Topic t left join fetch t.posts post"" +
			"" where post.moderate = true"" +
			"" or t.pendingModeration = true"" +
			"" and t.forum = :forum"" +
			"" order by t.id, post.id"")
			.setEntity(""forum"", forum)
			.setResultTransformer(CriteriaSpecification.DISTINCT_ROOT_ENTITY)
			.setComment(""forumDAO.getTopicsPendingModeration"")
			.list();
	}

	public Post getLastPost(Forum forum) {
		return (Post)session.createQuery(""from Post p where p.id = (select max(p2.id) from Post p2"" +
			"" where p2.forum = :forum and p2.moderate = false)"")
			.setParameter(""forum"", forum)
			.setComment(""forumDao.getLastPost"")
			.uniqueResult();
	}

	public int getTotalMessages() {
		return (Integer)session.createCriteria(Post.class)
			.setProjection(Projections.rowCount())
			.setCacheable(true)
			.setCacheRegion(""forumDAO.getTotalMessages"")
			.setComment(""forumDAO.getTotalMessages"")
			.uniqueResult();
	}

	public int getTotalPosts(Forum forum) {
		return (Integer)session.createCriteria(Post.class)
			.setProjection(Projections.rowCount())
			.add(Restrictions.eq(""forum"", forum))
			.setCacheable(true)
			.setCacheRegion(""forumDAO.getTotalPosts#"" + forum.getId())
			.setComment(""forumDAO.getTotalPosts"")
			.uniqueResult();
	}

	public int getTotalTopics(Forum forum) {
		return (Integer)session.createCriteria(Topic.class)
			.setProjection(Projections.rowCount())
			.add(Restrictions.eq(""pendingModeration"", false))
			.add(Restrictions.eq(""forum"", forum))
			.setCacheable(true)
			.setCacheRegion(""forumDAO.getTotalTopics#"" + forum.getId())
			.setComment(""forumDAO.getTotalTopics"")
			.uniqueResult();
	}

	/**
	 * Selects all topics associated to a specific forum.
	 *
	 * @param forum The forum to select the topics
	 * @return <code>List</code> with all topics found. Each entry is a <code>net.jforum.Topic</code> object
     * @param startFrom int
     * @param count int
	 */
	@SuppressWarnings(""unchecked"")
	public List<Topic> getTopics(Forum forum, int startFrom, int count) {
		boolean includeMoved = this.config == null || !this.config.getBoolean(ConfigKeys.QUERY_IGNORE_TOPIC_MOVED);

		Criteria criteria = session.createCriteria(Topic.class)
			.createAlias(""firstPost"", ""fp"")
			.createAlias(""lastPost"", ""lp"");

		if (includeMoved) {
			criteria.add(Restrictions.or(Restrictions.eq(""forum"", forum), Restrictions.eq(""movedId"", forum.getId())));
		}
		else {
			criteria.add(Restrictions.eq(""forum"", forum));
		}

		return criteria.add(Restrictions.eq(""pendingModeration"", false))
			.addOrder(Order.desc(""type""))
			.addOrder(Order.desc(""lastPost""))
			.setFirstResult(startFrom)
			.setMaxResults(count)
			.setCacheable(startFrom == 0) // FIXME cache other pages? should find a good solution. Also, check the eviction rules if changing this
			.setCacheRegion(""forumDAO.getTopics#"" + forum.getId()) // Related to the fixme above
			.setComment(""forumDAO.getTopics"")
			.list();
	}

	@SuppressWarnings(""unchecked"")
	public PaginatedResult<Topic> getNewMessages(Date from, int start, int recordsPerPage) {
		int total = ((Number)session.createQuery(""select count(*) from Topic t "" +
			""where t.pendingModeration = false and t.lastPost.date >= :date"")
			.setParameter(""date"", from)
			.setComment(""forumDao.getNewMessagesCount"")
			.uniqueResult()).intValue();

		List<Topic> results = session.createQuery(""from Topic t "" +
			""join fetch t.lastPost lp where t.pendingModeration = false and lp.date >= :date"")
			.setParameter(""date"", from)
			.setFirstResult(start)
			.setMaxResults(recordsPerPage)
			.setComment(""forumDao.getNewMessages"")
			.list();

		return new PaginatedResult<Topic>(results, total);
	}

	@SuppressWarnings(""unchecked"")
	public List<Forum> findAll() {
		return session.createQuery(""select new Forum(forum.id) from Forum as forum)"").list();
	}

	private int getMaxDisplayOrder() {
		Integer displayOrder = (Integer)session.createCriteria(this.persistClass)
			.setProjection(Projections.max(""displayOrder""))
			.uniqueResult();

		return displayOrder == null ? 1 : displayOrder + 1;
	}

	public ForumStats getForumStats() {
		ForumStats s = new ForumStats();

		s.setPosts(this.getTotalMessages());
		s.setTotalUsers(((Number)session.createQuery(""select count(*) from User"").uniqueResult()).intValue());
		s.setTotalTopics(((Number)session.createQuery(""select count(*) from Topic"").uniqueResult()).intValue());

		Date today = new Date();
		Date firstPostDate = (Date)session.createQuery(""select min(p.date) from Post p"").uniqueResult();

		s.setPostsPerDay(firstPostDate != null ? (double)s.getPosts() / this.daysUntilToday(today, firstPostDate) : 0);
		s.setTopicsPerDay(firstPostDate != null ? (double)s.getTopics() / this.daysUntilToday(today, firstPostDate) : 0);

		Date firstRegisteredUserDate = (Date)session.createQuery(""select min(u.registrationDate) from User u"").uniqueResult();
		s.setUsersPerDay(firstRegisteredUserDate != null ? (double)s.getUsers() / this.daysUntilToday(today, firstRegisteredUserDate) : 0);

		return s;
	}

	public ForumStats getForumStats(List<Group> groups) {
		ForumStats s = new ForumStats();

		// Total users
		s.setTotalUsers(((Number)session.createQuery(""select count(*) from User u where u.groups in (:groups)"")
			.setParameterList(""groups"", groups)
			.uniqueResult()).intValue());

		return s;
	}

	private int daysUntilToday(Date today, Date from)
	{
		int days = (int) ((today.getTime() - from.getTime()) / (24 * 60 * 60 * 1000));
		return days == 0 ? 1 : days;
	}
}"
net.jforum.repository.ThemeRepository,"public class ThemeRepository extends HibernateGenericDAO<Theme> implements Repository<Theme> {
	public ThemeRepository(Session session) {
		super(session);
	}

	@SuppressWarnings(""unchecked"")
	public List<Theme> getAll() {
		return session.createCriteria(Theme.class).list();
	}
}"
net.jforum.repository.BadWordRepository,"public class BadWordRepository extends HibernateGenericDAO<BadWord> implements Repository<BadWord> {

	public BadWordRepository(Session session) {
		super(session);
	}

	@SuppressWarnings(""unchecked"")
	public List<BadWord> getAll() {
		return session.createCriteria(BadWord.class).list();
	}
}"
net.jforum.repository.RankingRepository,"public class RankingRepository extends HibernateGenericDAO<Ranking> implements Repository<Ranking> {
	public RankingRepository(Session session) {
		super(session);
	}

	@SuppressWarnings(""unchecked"")
	public List<Ranking> getAllRankings() {
		return session.createCriteria(this.persistClass)
			.addOrder(Order.asc(""min""))
			.setCacheable(true)
			.setCacheRegion(""rankingDAO"")
			.setComment(""rankingDAO.getAllRankings"")
			.list();
	}
}"
net.jforum.repository.AttachmentRepository,"public class AttachmentRepository extends HibernateGenericDAO<Attachment> implements Repository<Attachment> {
	public AttachmentRepository(Session session) {
		super(session);
	}
}"
net.jforum.repository.PostReportRepository,"public class PostReportRepository extends HibernateGenericDAO<PostReport> implements Repository<PostReport> {
	public PostReportRepository(Session session) {
		super(session);
	}

	@SuppressWarnings(""unchecked"")
	public PaginatedResult<PostReport> getPaginated(int start, int count, PostReportStatus status, int... forumIds) {
		int totalRecords = this.countTotalReportsByStatus(status, forumIds);

		List<PostReport> reports = this.createGetAllQuery(status, forumIds)
			.setFirstResult(start)
			.setMaxResults(count)
			.list();

		return new PaginatedResult<PostReport>(reports, totalRecords);
	}

	@SuppressWarnings(""unchecked"")
	public List<PostReport> getAll(PostReportStatus status, int... forumIds) {
		return this.createGetAllQuery(status, forumIds).list();
	}

	public int countPendingReports(int... forumIds) {
		return this.countTotalReportsByStatus(PostReportStatus.UNRESOLVED, forumIds);
	}

	private int countTotalReportsByStatus(PostReportStatus status, int... forumIds) {
		Criteria criteria = session.createCriteria(PostReport.class)
			.add(Restrictions.eq(""status"", status))
			.setProjection(Projections.rowCount());

		if (!ArrayUtils.isEmpty(forumIds)) {
			criteria.createAlias(""post"", ""post"").add(
				Restrictions.in(""post.forum.id"", this.primitiveToWrapper(forumIds)));
		}

		return ((Number)criteria.uniqueResult()).intValue();
	}

	private Integer[] primitiveToWrapper(int... ids) {
		Integer[] wrapped = new Integer[ids.length];

		for (int i = 0; i < ids.length; i++) {
			wrapped[i] = Integer.valueOf(ids[i]);
		}

		return wrapped;
	}

	private Query createGetAllQuery(PostReportStatus status, int... forumIds) {
		String query = ""select new PostReport(report.id, post.id, post.subject, post.topic.id, report.date, "" +
		""report.description, reportUser.username, reportUser.id, postUser.username, postUser.id, report.status)"" +
		"" from PostReport report "" +
		"" join report.user reportUser "" +
		"" join report.post post"" +
		"" join post.user postUser "" +
		"" where report.status = :status"";

		if (!ArrayUtils.isEmpty(forumIds)) {
			query += "" and post.forum.id in (:forumIds)"";
		}

		if (!ArrayUtils.isEmpty(forumIds)) {
			return session.createQuery(query)
				.setParameter(""status"", status)
				.setParameterList(""forumIds"", this.primitiveToWrapper(forumIds));
		}
		else {
			return session.createQuery(query).setParameter(""status"", status);
		}
	}
}"
net.jforum.repository.ConfigRepository,"public class ConfigRepository extends HibernateGenericDAO<Config> implements Repository<Config> {

	public ConfigRepository(Session session) {
		super(session);
	}

	@Override
	public void update(Config entity) {
		session.saveOrUpdate(entity);
	}

	public Config getByName(String configName) {
		return (Config)session.createCriteria(this.persistClass)
			.add(Restrictions.eq(""name"", configName))
			.setCacheable(true)
			.setCacheRegion(""configDAO"")
			.setComment(""configDAO.getByName"")
			.uniqueResult();
	}

	@SuppressWarnings(""unchecked"")
	public List<Config> getAll() {
		return session.createCriteria(this.persistClass).list();
	}
}"
net.jforum.repository.RSSRepository,"public class RSSRepository {
	private final Session session;

	public RSSRepository(Session session) {
		this.session = session;
	}

	/**
	 * @see net.jforum.repository.RSSRepository#getForumTopics(net.jforum.entities.Forum, int)
	 */
	@SuppressWarnings(""unchecked"")
	public List<Topic> getForumTopics(Forum forum, int count) {
		return session.createCriteria(Topic.class)
			.add(Restrictions.eq(""forum"", forum))
			.add(Restrictions.eq(""pendingModeration"", false))
			.addOrder(Order.desc(""date""))
			.setMaxResults(count)
			.setCacheable(true)
			.setCacheRegion(""rssDAO.getForumTopics#"" + forum.getId())
			.setComment(""rssDAO.getForumTopics#"" + forum.getId())
			.list();
	}

}"
net.jforum.repository.TopicWatchRepository,"public class TopicWatchRepository extends HibernateGenericDAO<TopicWatch> implements Repository<TopicWatch> {
	public TopicWatchRepository(Session session) {
		super(session);
	}

	@SuppressWarnings(""unchecked"")
	public List<User> getUsersWaitingNotification(Topic topic) {
		List<User> users = session.createQuery(""select u from TopicWatch tw "" +
			"" inner join tw.user u where tw.topic = :topic "" +
			"" and (tw.read = true or u.notifyAlways = true)"")
			.setEntity(""topic"", topic)
			.setComment(""topicWatchDAO.getUsersWaitingNotification"")
			.list();

		if (users.size() > 0) {
			this.markAllAsUnread(topic);
		}

		return users;
	}

	public TopicWatch getSubscription(Topic topic, User user) {
		return (TopicWatch)session.createCriteria(this.persistClass)
			.add(Restrictions.eq(""topic"", topic))
			.add(Restrictions.eq(""user"", user))
			.setComment(""topicWatchDAO.isUserSubscribed"")
			.uniqueResult();
	}

	public void removeSubscription(Topic topic, User user) {
		session.createQuery(""delete from TopicWatch tw where tw.topic = :topic and tw.user = :user"")
			.setEntity(""topic"", topic)
			.setEntity(""user"", user)
			.setComment(""topicWatchDAO.removeSubscriptionByUser"")
			.executeUpdate();
	}

	public void removeSubscription(Topic topic) {
		session.createQuery(""delete from TopicWatch tw where tw.topic = :topic"")
			.setEntity(""topic"", topic)
			.setComment(""topicWatchDAO.removeSubscription"")
			.executeUpdate();
	}

	private void markAllAsUnread(Topic topic) {
		session.createQuery(""update TopicWatch set read = false where topic = :topic"")
			.setEntity(""topic"", topic)
			.setComment(""topicWatchDAO.markAllAsRead"")
			.executeUpdate();
	}
}"
net.jforum.repository.HibernateGenericDAO,"public class HibernateGenericDAO<T> implements Repository<T> {
	protected Class<T> persistClass;
	protected final Session session;

	@SuppressWarnings(""unchecked"")
	public HibernateGenericDAO(Session session) {
		this.session = session;
		this.persistClass = (Class<T>)((ParameterizedType)this.getClass()
			.getGenericSuperclass()).getActualTypeArguments()[0];
	}

	/**
	 *
	 * @see net.jforum.repository.Repository#remove(java.lang.Object)
	 */
	@Override
	public void remove(T entity) {
		session.delete(entity);
	}

	/**
	 * @see net.jforum.repository.Repository#get(int)
	 */
	@Override
	@SuppressWarnings(""unchecked"")
	public T get(int id) {
		return (T)session.get(this.persistClass, id);
	}

	/**
	 * @see net.jforum.repository.Repository#add(java.lang.Object)
	 */
	@Override
	public void add(T entity) {
		session.save(entity);
	}

	/**
	 * @see net.jforum.repository.Repository#update(java.lang.Object)
	 */
	@Override
	public void update(T entity) {
		session.update(entity);
	}
}"
net.jforum.repository.PostRepository,"public class PostRepository extends HibernateGenericDAO<Post> implements Repository<Post> {
	public PostRepository(Session session) {
		super(session);
	}

	public int countPreviousPosts(int postId) {
		return ((Long)session.createQuery(""select count(*) from Post p "" +
			""where p.topic = (select p2.topic from Post p2 where p2.id = :id) and p.id <= :id"")
			.setParameter(""id"", postId)
			.setComment(""postDAO.countPreviousPosts"")
			.uniqueResult()).intValue();
	}
}"
net.jforum.repository.CategoryRepository,"public class CategoryRepository extends HibernateGenericDAO<Category> implements Repository<Category> {
	public CategoryRepository(Session session) {
		super(session);
	}

	@SuppressWarnings(""unchecked"")
	public List<Forum> getForums(Category category) {
		return session.createCriteria(Forum.class)
			.add(Restrictions.eq(""category"", category))
			.addOrder(Order.asc(""displayOrder""))
			.setCacheable(true)
			.setCacheRegion(""categoryDAO.getForums"")
			.setComment(""categoryDAO.getForums"")
			.list();
	}

	@Override
	public void add(Category entity) {
		entity.setDisplayOrder(this.getMaxDisplayOrder());
		super.add(entity);
	}

	@SuppressWarnings(""unchecked"")
	public List<Category> getAllCategories() {
		return session.createCriteria(this.persistClass)
			.addOrder(Order.asc(""displayOrder""))
			.setCacheable(true)
			.setCacheRegion(""categoryDAO.getAllCategories"")
			.setComment(""categoryDAO.getAllCategories"")
			.list();
	}

	private int getMaxDisplayOrder() {
		Integer displayOrder = (Integer)session.createCriteria(this.persistClass)
			.setProjection(Projections.max(""displayOrder""))
			.uniqueResult();

		return displayOrder == null ? 1 : displayOrder + 1;
	}
}"
net.jforum.repository.TopicRepository,"public class TopicRepository extends HibernateGenericDAO<Topic> implements Repository<Topic> {
	public TopicRepository(Session session) {
		super(session);
	}

	@Override
	@SuppressWarnings(""unchecked"")
	public void remove(Topic entity) {
		List<Integer> users = session.createQuery(""select p.user.id from Post p where p.topic = :topic"")
			.setParameter(""topic"", entity)
			.list();

		if (users.size() == 0) {
			// If no users were found, it means that all posts were already deleted,
			// probably by post delete instead of topic delete. In such case, consider
			// that the user whe should decrement from is the one who created the topic
			users = Arrays.asList(entity.getUser().getId());
		}

		session.createQuery(""delete from Post where topic = :topic"")
			.setParameter(""topic"", entity)
			.executeUpdate();

		session.createQuery(""update User u set u.totalPosts = (select count(*) from Post p where p.user = u) "" +
			""where u.id in (:users)"")
			.setParameterList(""users"", users)
			.executeUpdate();

		super.remove(entity);
	}

	public Post getLastPost(Topic topic) {
		DetachedCriteria lastPost = DetachedCriteria.forClass(Post.class)
			.setProjection(Projections.max(""id""))
			.add(Restrictions.eq(""topic"", topic))
			.add(Restrictions.eq(""moderate"", false))
			.setComment(""topicDAO.getLastPostID"");

		return (Post)session.createCriteria(Post.class)
			.add(Subqueries.propertyEq(""id"", lastPost))
			.setComment(""topicDAO.getLastPost"")
			.uniqueResult();
	}

	public int getTotalPosts(Topic topic) {
		return (Integer)session.createCriteria(Post.class)
			.setProjection(Projections.rowCount())
			.add(Restrictions.eq(""topic"", topic))
			.add(Restrictions.eq(""moderate"", false))
			.setComment(""topicDAO.getTotalPosts"")
			.uniqueResult();
	}

	public Post getFirstPost(Topic topic) {
		DetachedCriteria firstPost = DetachedCriteria.forClass(Post.class)
			.setProjection(Projections.min(""id""))
			.add(Restrictions.eq(""topic"", topic))
			.setComment(""topicDAO.getFirstPostID"");

		return (Post)session.createCriteria(Post.class)
			.add(Subqueries.propertyEq(""id"", firstPost))
			.setComment(""topicDAO.getFirstPost"")
			.uniqueResult();
	}

	@SuppressWarnings(""unchecked"")
	public List<Post> getPosts(Topic topic, int startFrom, int count) {
		return session.createQuery(""from Post p join fetch p.user user left join fetch user.avatar "" +
			"" where p.topic = :topic and p.moderate = false order by p.date asc"")
			.setParameter(""topic"", topic)
			.setFirstResult(startFrom)
			.setMaxResults(count)
			.setComment(""topicDAO.getPosts"")
			.list();
	}
}"
net.jforum.repository.PrivateMessageRepository,"public class PrivateMessageRepository extends HibernateGenericDAO<PrivateMessage> implements Repository<PrivateMessage> {
	public PrivateMessageRepository(Session session) {
		super(session);
	}

	@Override
	public void add(PrivateMessage entity) {
		PrivateMessage targetCopy = new PrivateMessage(entity);

		// First copy is to the sender's list
		entity.setType(PrivateMessageType.SENT);
		super.add(entity);

		// Second copy is the target
		targetCopy.setType(PrivateMessageType.NEW);
		super.add(targetCopy);
	}

	@SuppressWarnings(""unchecked"")
	public List<PrivateMessage> getFromInbox(User user) {
		return session.createCriteria(this.persistClass)
			.add(Restrictions.eq(""toUser"", user))
			.add(Restrictions.disjunction()
				.add(Restrictions.eq(""type"", PrivateMessageType.NEW))
				.add(Restrictions.eq(""type"", PrivateMessageType.READ))
				.add(Restrictions.eq(""type"", PrivateMessageType.UNREAD))
			)
			.setComment(""privateMessageDAO.getFromInbox"")
			.list();
	}

	@SuppressWarnings(""unchecked"")
	public List<PrivateMessage> getFromSentBox(User user) {
		return session.createCriteria(this.persistClass)
			.add(Restrictions.eq(""fromUser"", user))
			.add(Restrictions.eq(""type"", PrivateMessageType.SENT))
			.setComment(""privateMessageDAO.getFromSentBox"")
			.list();
	}

	/**
	 * This method will always throw UnsupportedOperationException
	 * @throws UnsupportedOperationException
	 */
	@Override
	public void update(PrivateMessage entity) {
		throw new UnsupportedOperationException(""Update is not supported for Private Messages"");
	}
}"
net.jforum.repository.SearchRepository,"public class SearchRepository {
	private final Session session;

	public SearchRepository(Session session) {
		this.session = session;
	}

	@SuppressWarnings(""unchecked"")
	public SearchResult search(SearchParams params) throws ParseException {
		String buildQuery = params.buildQuery();
		FullTextQuery query = this.createQuery(buildQuery);

		query.setFirstResult(params.getStart());
		query.setMaxResults(params.getMaxResults());
		query.setFetchSize(params.getMaxResults());

		if (params.getSort() == SearchSort.DATE) {
			query.setSort(new Sort(new SortField(""date"", params.getSortType() == SearchSortType.DESC)));
		}
		else if (params.getSort() == SearchSort.RELEVANCE) {
			query.setSort(Sort.RELEVANCE);
		}

		return new SearchResult(query.list(), query.getResultSize());
	}

	private FullTextQuery createQuery(String criteria) throws ParseException {
		// FIXME: Should not hardcode the analyzer
		QueryParser parser = new QueryParser(""text"", new StandardAnalyzer());
		Query luceneQuery = parser.parse(criteria);

		return Search.createFullTextSession(session).createFullTextQuery(luceneQuery, Post.class);
	}
}"
net.jforum.repository.AvatarRepository,"public class AvatarRepository extends HibernateGenericDAO<Avatar> implements Repository<Avatar> {
	public AvatarRepository(Session session) {
		super(session);
	}

	@SuppressWarnings(""unchecked"")
	public List<Avatar> getAll() {
		return session.createCriteria(this.persistClass)
			.setCacheable(true)
			.setCacheRegion(""avatarDAO"")
			.setComment(""avatarDAO.getAllAvatar"")
			.list();
	}

	/**
	 * Get all the Gallery Avatar
	 */
	public List<Avatar> getGalleryAvatar() {
		return this.getAllAvatars(AvatarType.AVATAR_GALLERY);
	}

	/**
	 * Get all the Upload Avatar
	 */
	public List<Avatar> getUploadedAvatar() {
		return this.getAllAvatars(AvatarType.AVATAR_UPLOAD);
	}

	@SuppressWarnings(""unchecked"")
	private List<Avatar> getAllAvatars(AvatarType type){
		return session.createCriteria(this.persistClass)
			.add(Restrictions.eq(""avatarType"", type))
			.setComment(""AvatarDAO.getAvatar."" + type)
			.list();
	}

	@Override
	public void remove(Avatar avatar) {
		Set<User> users = avatar.getUsers();

		if (users != null) {
			for(User user : users){
				user.setAvatar(null);
				session.save(user);
			}
		}

		super.remove(avatar);
	}
}"
net.jforum.repository.GroupRepository,"public class GroupRepository extends HibernateGenericDAO<Group> implements Repository<Group> {
	public GroupRepository(Session session) {
		super(session);
	}

	@SuppressWarnings(""unchecked"")
	public List<Group> getAllGroups() {
		return session.createCriteria(this.persistClass).list();
	}

	public Group getByName(String groupName) {
		return (Group) session.createCriteria(this.persistClass)
			   .add(Restrictions.eq(""name"", groupName))
			   .uniqueResult();
	}

	@Override
	public void remove(Group group) {
		List<User> users = group.getUsers();
		for(User user : users){
			List<Group> groups = user.getGroups();
			groups.remove(group);
			session.save(user);
		}
		super.remove(group);
	}


}"
net.jforum.repository.UserRepository,"public class UserRepository extends HibernateGenericDAO<User> implements Repository<User> {
	public UserRepository(Session session) {
		super(session);
	}

	/**
	 * Finds an user by his email
	 * @param email the email address to search for
	 * @return the user
	 */
	public User getByEmail(String email) {
		return (User)session.createCriteria(this.persistClass)
			.add(Restrictions.eq(""email"", email))
			.uniqueResult();
	}

	/**
	 * Checks if the given username is available for registering
	 * @param username the username to check
	 * @param email the email of the given username.
	 * @return true if the username is available, of false if either
	 * the username or the email address is already taken
	 */
	public boolean isUsernameAvailable(String username, String email) {
		return (Integer)session.createCriteria(User.class)
			.setProjection(Projections.rowCount())
			.add(Restrictions.or(
				Restrictions.eq(""username"", username).ignoreCase(),
				Restrictions.eq(""email"", email).ignoreCase())
			).uniqueResult() == 0;
	}

	/**
	 * @see net.jforum.repository.UserRepository#getTotalUnreadPrivateMessages(net.jforum.entities.User)
	 */
	public int getTotalUnreadPrivateMessages(User user) {
		return (Integer)session.createCriteria(PrivateMessage.class)
			.setProjection(Projections.rowCount())
			.add(Restrictions.eq(""toUser"", user))
			.add(Restrictions.eq(""type"", PrivateMessageType.NEW))
			.uniqueResult();
	}

	/**
	 * Get the number of posts sent by an user
	 * @param user the user
	 * @return the number of posts
	 */
	public int getTotalPosts(User user) {
		return (Integer)session.createCriteria(Post.class)
			.setProjection(Projections.rowCount())
			.add(Restrictions.eq(""user"", user))
			.uniqueResult();
	}

	/**
	 * Gets a specific <code>User</code>.
	 *
	 * @param username The User name to search
	 * @return <code>User</code> object containing all the information
	 * or <code>null</code> if no data was found.
	 */
	public User getByUsername(String username){
		return (User)session.createCriteria(this.persistClass)
			.add(Restrictions.eq(""username"", username))
			.setComment(""userDAO.getByUsername"")
			.uniqueResult();
	}

	/**
	 * Change the state of the ""allow avatar"" field, by group
	 * @param allowAvatar the new state
	 * @param group the group the users belong to
	 */
	public void changeAllowAvatarState(boolean allowAvatar, Group group) {
		session.createQuery(""update User u set avatarEnabled = :allow where :group in elements(u.groups)"")
			.setParameter(""allow"", allowAvatar)
			.setParameter(""group"", group)
			.executeUpdate();
	}

	/**
	 * Find a set of users who match an input
	 * @param username the search input
	 * @return the list of users matching the search input
	 */
	@SuppressWarnings(""unchecked"")
	public List<User> findByUserName(String username){
		return session.createCriteria(this.persistClass)
			.add(Restrictions.ilike(""username"", username, MatchMode.ANYWHERE))
			.addOrder(Order.asc(""username""))
			.setComment(""userDAO.findByUsername"")
			.list();
	}

	/**
	 * @see net.jforum.repository.UserRepository#findByUserName(java.lang.String, java.util.List)
	 */
	@SuppressWarnings(""unchecked"")
	public List<User> findByUserName(String username, List<Group> filterGroups) {
		return session.createQuery(""select distinct u from User u left join fetch u.groups g "" +
			""where lower(u.username) like lower(:username) "" +
			""and g in (:groups) "" +
			""order by u.username"")
			.setParameter(""username"", ""%"" + username + ""%"")
			.setParameterList(""groups"", filterGroups)
			.list();
	}

	/**
	 * Return all registered users
	 * @param start the first record to start fetching
	 * @param count how many records to fetch
	 * @return all registered users
	 */
	@SuppressWarnings(""unchecked"")
	public List<User> getAllUsers(int start, int count) {
		return session.createCriteria(this.persistClass)
			.addOrder(Order.asc(""username""))
			.setFirstResult(start)
			.setMaxResults(count)
			.setComment(""userDAO.getAllUsers"")
			.list();
	}

	/**
	 * Return the registered users, filtering by group.
	 * This return all users that are associated with at least one of the
	 * groups passed as parameter
	 * @param start the first record to start fetching
	 * @param count how many records to fetch
	 * @param filterGroups the groups to filter
	 * @return all registered users found
	 */
	@SuppressWarnings(""unchecked"")
	public List<User> getAllUsers(int start, int count, List<Group> filterGroups) {
		return session.createQuery(""select distinct u from User u join fetch u.groups g where g in(:groups)"")
			.setParameterList(""groups"", filterGroups)
			.list();
	}

	/**
	 * Gets the last registered user in the forum
	 * @return the user
	 */
	public User getLastRegisteredUser(){
		return (User)session.createCriteria(this.persistClass)
			.addOrder(Order.desc(""registrationDate""))
			.setMaxResults(1)
			.setCacheable(true)
			.setCacheRegion(""userDAO.getLastRegisteredUser"")
			.setComment(""userDAO.getLastRegisteredUser"")
			.list().get(0);
	}

	/**
	 * Get the number of users registered in the forum
	 * @return
	 */
	public int getTotalUsers() {
		return (Integer)session.createCriteria(this.persistClass)
			.setProjection(Projections.rowCount())
			.setCacheable(true)
			.setCacheRegion(""userDAO.getTotalUsers"")
			.setComment(""userDAO.getTotalUsers"")
			.uniqueResult();
	}

	/**
	 * Autheticates an user
	 * @param username the username
	 * @param password the password
	 * @return an {@link User} instance if sucess, or null otherwise
	 */
	public User validateLogin(String username, String password) {
		return (User)session.createCriteria(this.persistClass)
			.add(Restrictions.eq(""username"", username))
			.add(Restrictions.eq(""password"", password))
			.setComment(""userDAO.validateLogin"")
			.uniqueResult();
	}

	/**
	 * Validates the lost password hash
	 * @param username the username associated with the hash
	 * @param hash the hash to validate
	 * @return the user instance if the provided infromation matches, or null if not.
	 */
	public User validateLostPasswordHash(String username, String hash) {
		return (User)session.createCriteria(this.persistClass)
			.add(Restrictions.eq(""activationKey"", hash))
			.add(Restrictions.eq(""username"", username))
			.uniqueResult();
	}

	/**
	 * Get the number of topics sent by an user
	 * @param userId the user
	 * @return the number of posts
	 */
	public int getTotalTopics(int userId) {
		return (Integer) session.createCriteria(Topic.class)
			.setProjection(Projections.rowCount())
			.add(Restrictions.eq(""user.id"", userId))
			.uniqueResult();
	}

	@SuppressWarnings(""unchecked"")
	public List<Post> getPosts(User user, int start, int recordsPerPage) {
		return session.createCriteria(Post.class)
				.add(Restrictions.eq(""user"", user))
				.add(Restrictions.eq(""moderate"", false))
				.addOrder(Order.desc(""id""))
				.setFirstResult(start)
				.setMaxResults(recordsPerPage)
				.list();
	}

	@SuppressWarnings(""unchecked"")
	public List<Topic> getTopics(User user, int start, int recordsPerPage) {
		return session.createCriteria(Topic.class)
			.add(Restrictions.eq(""user"", user))
			.add(Restrictions.eq(""pendingModeration"", false))
			.addOrder(Order.desc(""id""))
			.setFirstResult(start)
			.setMaxResults(recordsPerPage)
			.list();
	}
}"
net.jforum.repository.SessionRepository,"public class SessionRepository extends HibernateGenericDAO<Session> implements Repository<Session> {
	public SessionRepository(org.hibernate.Session session) {
		super(session);
	}

	/**
	 * Always execute saveOrUpdate().
	 */
	@Override
	public void add(Session entity) {
		session.saveOrUpdate(entity);
	}

	/**
	 * Always execute saveOrUpdate()
	 */
	@Override
	public void update(Session entity) {
		session.saveOrUpdate(entity);
	}
}"
net.jforum.repository.PollRepository,"public class PollRepository extends HibernateGenericDAO<PollVoter> {
	public PollRepository(Session session) {
		super(session);
	}

	public void registerVote(PollVoter voter) {
		session.save(voter);
	}

	public boolean hasUserVoted(Poll poll, User user) {
		return session.createQuery(""from PollVoter voter where voter.user = :user and voter.poll = :poll"")
			.setParameter(""user"", user)
			.setParameter(""poll"", poll)
			.uniqueResult() != null;
	}

	public PollOption getOption(int optionId) {
		return (PollOption)session.createQuery(""from PollOption o where o.id = :id"")
			.setParameter(""id"", optionId)
			.uniqueResult();
	}
}"
net.jforum.repository.SmilieRepository,"public class SmilieRepository extends HibernateGenericDAO<Smilie> implements Repository<Smilie> {
	public SmilieRepository(Session session) {
		super(session);
	}

	@SuppressWarnings(""unchecked"")
	public List<Smilie> getAllSmilies() {
		return session.createCriteria(this.persistClass)
			.setCacheable(true)
			.setCacheRegion(""smilieDAO"")
			.setComment(""smilieDAO.getAllSmilies"")
			.list();
	}
}"
net.jforum.repository.BanlistRepository,"public class BanlistRepository extends HibernateGenericDAO<Banlist> implements Repository<Banlist> {
	public BanlistRepository(Session session) {
		super(session);
	}

	@SuppressWarnings(""unchecked"")
	public List<Banlist> getAllBanlists() {
		return session.createCriteria(this.persistClass).list();
	}
}"
net.jforum.repository.RecentTopicsRepository,"public class RecentTopicsRepository extends HibernateGenericDAO<Topic> implements Repository<Topic> {
	public RecentTopicsRepository(Session session) {
		super(session);
	}

	@SuppressWarnings(""unchecked"")
	public List<Topic> getNewTopics(int count) {
		return session.createCriteria(this.persistClass)
			.add(Restrictions.eq(""pendingModeration"", false))
			.addOrder(Order.desc(""id""))
			.setMaxResults(count)
			.setCacheable(true)
			.setCacheRegion(""recentTopicsDAO"")
			.setComment(""recentTopicsDAO.getRecentTopics"")
			.list();
	}

	@SuppressWarnings(""unchecked"")
	public List<Topic> getUpdatedTopics(int count) {
		return session.createCriteria(this.persistClass)
			.add(Restrictions.eq(""pendingModeration"", false))
			.createAlias(""lastPost"", ""lastPost"")
			.addOrder(Order.desc(""lastPost.id""))
			.setMaxResults(count)
			.setCacheable(true)
			.setCacheRegion(""recentTopicsDAO"")
			.setComment(""recentTopicsDAO.getRecentTopics"")
			.list();
	}

	@SuppressWarnings(""unchecked"")
	public List<Topic> getHotTopics(int count) {
		return session.createCriteria(this.persistClass)
			.add(Restrictions.eq(""pendingModeration"", false))
			.createAlias(""lastPost"", ""lastPost"")
			.addOrder(Order.desc(""totalReplies""))
			.setMaxResults(count)
			.setCacheable(true)
			.setCacheRegion(""recentTopicsDAO"")
			.setComment(""recentTopicsDAO.getRecentTopics"")
			.list();
	}
}"
net.jforum.core.VRaptorCustomPathResolver,"public class VRaptorCustomPathResolver extends DefaultPathResolver {
	private final JForumConfig config;

	public VRaptorCustomPathResolver(FormatResolver resolver, JForumConfig config) {
		super(resolver);
		this.config = config;
	}

	@Override
	protected String getPrefix() {
		return config.getValue(ConfigKeys.TEMPLATE_DIRECTORY);
	}
}"
net.jforum.core.PageExtensionRedirectFilter,"public class PageExtensionRedirectFilter implements Filter {
	@Override
	public void destroy() {
	}

	@Override
	public void doFilter(ServletRequest req, ServletResponse res, FilterChain filterChain) throws IOException, ServletException {
	}

	@Override
	public void init(FilterConfig filterConfig) throws ServletException {
	}

}"
net.jforum.core.VRaptorSpringProvider,"public class VRaptorSpringProvider extends SpringProvider {

	@Override
	protected void registerCustomComponents(ComponentRegistry registry) {
		registry.register(SessionCreator.class, SessionCreator.class);
		registry.register(SessionFactoryCreator.class, SessionFactoryCreator.class);
		registry.register(HibernateTransactionInterceptor.class, HibernateTransactionInterceptor.class);
	}

	@Override
	protected ConfigurableWebApplicationContext getParentApplicationContext(ServletContext context) {
		ConfigurableWebApplicationContext springContext = super.getParentApplicationContext(context);
		context.setAttribute(ConfigKeys.SPRING_CONTEXT, springContext);
		return springContext;
	}
}"
net.jforum.core.SessionManager,
net.jforum.core.UserSessionListener,"public class UserSessionListener implements HttpSessionListener {
	private static final Logger logger = Logger.getLogger(UserSessionListener.class);

	/**
	 * @see javax.servlet.http.HttpSessionListener#sessionCreated(javax.servlet.http.HttpSessionEvent)
	 */
	@Override
	public void sessionCreated(HttpSessionEvent event) {
	}

	/**
	 * @see javax.servlet.http.HttpSessionListener#sessionDestroyed(javax.servlet.http.HttpSessionEvent)
	 */
	@Override
	public void sessionDestroyed(HttpSessionEvent event) {
		HttpSession session = event.getSession();

		if (session == null) {
			return;
		}

		logger.info(""Destroying session "" + session.getId());

		ApplicationContext beanFactory = (ApplicationContext)event.getSession().getServletContext()
			.getAttribute(ConfigKeys.SPRING_CONTEXT);

		if (beanFactory == null) {
			logger.warn(""Spring Context was not found. This may cause problems with unregistered user sessions"");
		}
		else {
			String sessionId = session.getId();

			SessionManager sessionManager = beanFactory.getBean(SessionManager.class);

			try {
				sessionManager.storeSession(sessionId);
			}
			catch (Exception e) { }

			sessionManager.remove(sessionId);
		}
	}
}"
net.jforum.core.UrlPattern,"public class UrlPattern {
	private String value;
	private int size;
	private String[] vars;

	public UrlPattern(String value) {
		this.value = value;

		this.processPattern();
	}

	private void processPattern() {
		String[] p = this.value.split("","");

		this.vars = new String[p.length];
		this.size = ((((p[0]).trim()).equals("""")) ? 0 : p.length);

		for (int i = 0; i < this.size; i++) {
			this.vars[i] = (p[i]).trim();
		}
	}

	/**
	 * Get pattern's total vars
	 * 
	 * @return The total
	 */
	public int getSize() {
		return this.size;
	}

	/**
	 * Gets the vars. The URL variables are in the correct order, which means
	 * that the first position always will be ""something1"", the second
	 * ""something2"" and so on. The system expects this order never changes from
	 * requisition to requisition.
	 * 
	 * @return The vars
	 */
	public String[] getVars() {
		return this.vars;
	}
}"
net.jforum.core.exceptions.ValidationException,"public class ValidationException extends RuntimeException {
	private static final long serialVersionUID = -3577897862011575132L;

	public ValidationException(String message) {
		super(message);
	}
}"
net.jforum.core.exceptions.DatabaseException,"public class DatabaseException extends RuntimeException {
	private static final long serialVersionUID = 5979182004250721653L;

	public DatabaseException(String message) {
		super(message);
	}
	
	public DatabaseException(String message, Throwable t) {
		super(message, t);
		this.setStackTrace(t.getStackTrace());
	}
	
	public DatabaseException(Throwable t) {
		super(t);
		this.setStackTrace(t.getStackTrace());
	}
}"
net.jforum.core.exceptions.AccessRuleException,"public class AccessRuleException extends RuntimeException {
	private static final long serialVersionUID = -8835746830789016185L;

	public AccessRuleException(String message) {
		super(message);
	}
}"
net.jforum.core.exceptions.MailException,"public class MailException extends RuntimeException {
	private static final long serialVersionUID = 9027532170532585348L;

	public MailException(Throwable t) {
		super(t);
		this.setStackTrace(t.getStackTrace());
	}

	public MailException(String message, Throwable t) {
		super(message, t);
		this.setStackTrace(t.getStackTrace());
	}
}"
net.jforum.core.exceptions.ForumException,"public class ForumException extends RuntimeException {
	private static final long serialVersionUID = 4284828474973959205L;

	public ForumException(String message) {
		super(message);
	}

	public ForumException(Throwable t) {
		super(t);
		this.setStackTrace(t.getStackTrace());
	}

	public ForumException(String message, Throwable t) {
		super(message, t);
		this.setStackTrace(t.getStackTrace());
	}
}"
net.jforum.core.tags.I18nTag,"public class I18nTag extends JForumTag implements DynamicAttributes {
	private static I18n i18n;
	private String key;
	private List<Object> params = new ArrayList<Object>();

	public I18nTag() {
		if (i18n == null) {
			i18n = this.getBean(I18n.class);
		}
	}

	/**
	 * @see javax.servlet.jsp.tagext.SimpleTagSupport#doTag()
	 */
	@Override
	public void doTag() throws JspException, IOException {
		if (this.params.size() == 0) {
			String message = i18n.getMessage(this.key);

			if (message == null) {
				throw new IllegalArgumentException(this.key + "" was not found"");
			}

			this.write(message);
		}
		else {
			String message = i18n.getFormattedMessage(this.key, this.params.toArray());

			if (message == null) {
				throw new IllegalArgumentException(this.key + "" was not found"");
			}

			this.write(message);
		}
	}

	/**
	 * @param key the message to set
	 */
	public void setKey(String key) {
		this.key = key;
	}

	/**
	 * @see javax.servlet.jsp.tagext.DynamicAttributes#setDynamicAttribute(java.lang.String, java.lang.String, java.lang.Object)
	 */
	public void setDynamicAttribute(String uri, String localName, Object value) throws JspException {
		params.add(value);
	}
}"
net.jforum.core.tags.URLTag,"public class URLTag extends JForumTag {

	public static final String URL_ENCODE = ""UTF-8"";

	private String address;
	private boolean encode;

	/**
	 * @see javax.servlet.jsp.tagext.SimpleTagSupport#doTag()
	 */
	@Override
	public void doTag() throws JspException, IOException {

		StringBuilder urlBuilder = new StringBuilder(128).append(this.request().getContextPath());

		if (!encode) {
			urlBuilder.append(this.address);
		}
		else {
			if (this.address == null) {
				this.address = """";
			}

			String[] addresses = this.address.split(""/"");

			for (String _address : addresses) {
				if (StringUtils.isNotEmpty(_address)) {
					urlBuilder.append(""/"").append(URLEncoder.encode(_address, URL_ENCODE));
				}
			}
		}

		this.write(this.response().encodeURL(urlBuilder.toString()));
	}

	/**
	 * @param address the resource to set
	 */
	public void setAddress(String address) {
		this.address = address;
	}

	/**
	 * @param encode the encode to set
	 */
	public void setEncode(boolean encode) {
		this.encode = encode;
	}
}"
net.jforum.core.tags.DisplayFormattedMessageTag,"public class DisplayFormattedMessageTag extends JForumTag {
	private PostFormatters formatters;
	private Post post;
	private String rawMessage;

	public DisplayFormattedMessageTag() {
		formatters = this.getBean(PostFormatters.class);
	}

	/**
	 * @see javax.servlet.jsp.tagext.SimpleTagSupport#doTag()
	 */
	@Override
	public void doTag() throws JspException, IOException {
		if (this.post == null && !StringUtils.isEmpty(this.rawMessage)) {
			this.post = new Post();
			this.post.setText(this.rawMessage);
		}

		if (post == null) {
			return;
		}

		String text = post.getText();
		PostOptions options = new PostOptions(this.post.isHtmlEnabled(),
			this.post.isSmiliesEnabled(), this.post.isBbCodeEnabled(),
			this.post.isSignatureEnabled(), this.request().getContextPath());

		for (Formatter formatter : formatters) {
			text = formatter.format(text, options);
		}

		this.write(text);
	}

	public void setPost(Post post) {
		this.post = post;
	}

	public void setRawMessage(String message) {
		this.rawMessage = message;
	}
}"
net.jforum.core.tags.ImportResponseWrapper,"public class ImportResponseWrapper extends HttpServletResponseWrapper {

	// ************************************************************
	// Overview

	/*
	 * We provide either a Writer or an OutputStream as requested. We actually
	 * have a true Writer and an OutputStream backing both, since we don't want
	 * to use a character encoding both ways (Writer -> OutputStream -> Writer).
	 * So we use no encoding at all (as none is relevant) when the target
	 * resource uses a Writer. And we decode the OutputStream's bytes using OUR
	 * tag's 'charEncoding' attribute, or ISO-8859-1 as the default. We thus
	 * ignore setLocale() and setContentType() in this wrapper.
	 * 
	 * In other words, the target's asserted encoding is used to convert from a
	 * Writer to an OutputStream, which is typically the medium through with the
	 * target will communicate its ultimate response. Since we short-circuit
	 * that mechanism and read the target's characters directly if they're
	 * offered as such, we simply ignore the target's encoding assertion.
	 */

	// ************************************************************
	// Data
	/** Default character encoding for response. */
	public static final String DEFAULT_ENCODING = ""ISO-8859-1"";

	private String charEncoding = null; // 'charEncoding' attrib.

	/** The Writer we convey. */
	private StringWriter sw = new StringWriter();

	/** A buffer, alternatively, to accumulate bytes. */
	private ByteArrayOutputStream bos = new ByteArrayOutputStream();

	/** A ServletOutputStream we convey, tied to this Writer. */
	private ServletOutputStream sos = new ServletOutputStream() {
		public void write(int b) throws IOException {
			bos.write(b);
		}
	};

	/** 'True' if getWriter() was called; false otherwise. */
	private boolean isWriterUsed;

	/** 'True if getOutputStream() was called; false otherwise. */
	private boolean isStreamUsed;

	/** The HTTP status set by the target. */
	private int status = 200;

	// ************************************************************
	// Constructor and methods

	/** Constructs a new ImportResponseWrapper. */
	public ImportResponseWrapper(HttpServletResponse response) {
		super(response);
	}

	/** Returns a Writer designed to buffer the output. */
	public PrintWriter getWriter() {
		if (isStreamUsed)
			throw new IllegalStateException(Resources
					.getMessage(""IMPORT_ILLEGAL_STREAM""));
		isWriterUsed = true;
		return new PrintWriter(sw);
	}

	/** Returns a ServletOutputStream designed to buffer the output. */
	public ServletOutputStream getOutputStream() {
		if (isWriterUsed)
			throw new IllegalStateException(Resources
					.getMessage(""IMPORT_ILLEGAL_WRITER""));
		isStreamUsed = true;
		return sos;
	}

	/** Has no effect. */
	public void setContentType(String x) {
		// ignore
	}

	/** Has no effect. */
	public void setLocale(Locale x) {
		// ignore
	}

	public void setStatus(int status) {
		this.status = status;
	}

	public int getStatus() {
		return status;
	}

	public String getCharEncoding() {
		return charEncoding;
	}

	public void setCharEncoding(String charEncoding) {
		this.charEncoding = charEncoding;
	}

	/**
	 * Retrieves the buffered output, using the containing tag's 'charEncoding'
	 * attribute, or the tag's default encoding, <b>if necessary</b>.
	 */
	// not simply toString() because we need to throw
	// UnsupportedEncodingException
	public String getString() throws UnsupportedEncodingException {
		if (isWriterUsed)
			return sw.toString();
		else if (isStreamUsed) {
			if (charEncoding != null && !charEncoding.equals(""""))
				return bos.toString(charEncoding);
			else
				return bos.toString(DEFAULT_ENCODING);
		} else
			return """"; // target didn't write anything
	}
}"
net.jforum.core.tags.Functions,"public class Functions {
	/**
	 * Check if a list contains an element
	 * @param list the list with all elements
	 * @param element the element to search for
	 * @return true if the element exist in the list
	 */
	@SuppressWarnings(""unchecked"")
	public static boolean contains(List<?> list, Object element) {
		return list.contains(element);
	}

	public static String rankingTitle(List<Ranking> rankings, User user) {
		if (user.getTotalPosts() == 0) {
			return """";
		}

		if (user.getRanking() != null && user.getRanking().isSpecial()) {
			return user.getRanking().getTitle();
		}

		Ranking lastRanking = new Ranking();

		for (Ranking ranking : rankings) {
			if (user.getTotalPosts() == ranking.getMin() && !ranking.isSpecial()) {
				return ranking.getTitle();
			}
			else if (user.getTotalPosts() > lastRanking.getMin() && user.getTotalPosts() < ranking.getMin()) {
				return lastRanking.getTitle();
			}

			lastRanking = ranking;
		}

		return lastRanking.getTitle();
	}

	/**
	 * Calcule the last page of something`
	 * @param totalPosts the total of records
	 * @param postsPerPage the number of records per page
	 * @return the max possible page
	 */
	public static int lastPage(int totalPosts, int postsPerPage) {
		return (int)Math.ceil((double)totalPosts / (double)postsPerPage);
	}
}"
net.jforum.core.tags.ImportFileTag,"public abstract class ImportFileTag extends JForumTag {
	
	protected String charEncoding;                // 'charEncoding' attrib.
	
	protected String url;                                // 'url' attribute
	
	/**
	 * @param charEncoding the charEncoding to set
	 */
	public void setCharEncoding(String charEncoding) {
		this.charEncoding = charEncoding;
	}

	public void setUrl(String url) {
		this.url = url;
	}
	
	/**
	 * @see javax.servlet.jsp.tagext.SimpleTagSupport#doTag()
	 */
	@Override
	public void doTag() throws JspException, IOException {
		// check the URL
		if (StringUtils.isEmpty(url))
		    throw new NullAttributeException(""import"", ""url"");
		
		String jsp = this.getFile(url);
		
		ServletRequest request  = this.request();
		ServletResponse respose = this.response();
		HttpSession session = ((HttpServletRequest)request).getSession();
		ServletContext servletContext = session.getServletContext();
		
		String jspPath = servletContext.getRealPath(jsp);
		File jspFile = new File(jspPath);
		if(!jspFile.exists())
			return ;
		
		respose.flushBuffer();
		RequestDispatcher rd = this.pageContext().getRequest().getRequestDispatcher(jsp);
		try {
			 // include the resource, using our custom wrapper
		    ImportResponseWrapper irw = new ImportResponseWrapper((HttpServletResponse) respose);
		    irw.setCharacterEncoding(charEncoding);
			rd.include(request, irw);
			// disallow inappropriate response codes per JSTL spec
		    if (irw.getStatus() < 200 || irw.getStatus() > 299) {
		    	throw new JspTagException(irw.getStatus() + "" "" + jsp);
		    }

		    // recover the response String from our wrapper
		    pageContext().getOut().print(irw.getString());
		} catch (ServletException e) {
			e.printStackTrace();
		}
	}

	private String getFile(String item){
		return new StringBuilder(128)
		.append('/').append(this.config().getValue(ConfigKeys.TEMPLATE_DIRECTORY)).append('/')
		.append(this.config().getValue(ConfigKeys.TEMPLATE_NAME))
		.append(item)
		.toString();
	}
}"
net.jforum.core.tags.TemplateResourceTag,"public class TemplateResourceTag extends JForumTag {
	private String item;

	/**
	 * @see javax.servlet.jsp.tagext.SimpleTagSupport#doTag()
	 */
	@Override
	public void doTag() throws IOException {
		String path = new StringBuilder(128)
			.append(this.request().getContextPath())
			.append(config().getValue(ConfigKeys.TEMPLATE_DIRECTORY))
			.append(this.item)
			.toString();

		this.write(path);
	}

	/**
	 * @param item the resource to set
	 */
	public void setItem(String item) {
		this.item = item;
	}
}"
net.jforum.core.tags.FormatSignatureTag,"public class FormatSignatureTag extends JForumTag {
	private static PostFormatters formatters;
	private String signature;

	public FormatSignatureTag() {
		if (formatters == null) {
			formatters = this.getBean(PostFormatters.class);
		}
	}

	/**
	 * @see javax.servlet.jsp.tagext.SimpleTagSupport#doTag()
	 */
	@Override
	public void doTag() throws JspException, IOException {
		PostOptions options = new PostOptions(false, true, true, false, this.request().getContextPath());

		for (Formatter formatter : formatters) {
			signature = formatter.format(signature, options);
		}

		this.write(signature);
	}

	public void setSignature(String signature) {
		this.signature = signature;
	}
}"
net.jforum.core.tags.SettingsTag,"public class SettingsTag extends JForumTag {
	private String key;
	
	/**
	 * @see javax.servlet.jsp.tagext.SimpleTagSupport#doTag()
	 */
	@Override
	public void doTag() throws JspException, IOException {
		this.write(this.config().getValue(this.key));
	}
	
	public void setKey(String key) {
		this.key = key;
	}
}"
net.jforum.core.tags.JForumTag,"public abstract class JForumTag extends SimpleTagSupport {
	private static ApplicationContext springContext;

	protected HttpServletRequest request() {
		return (HttpServletRequest)this.pageContext().getRequest();
	}

	protected void setAttribute(String key, Object value) {
		this.request().setAttribute(key, value);
	}

	protected HttpServletResponse response() {
		return (HttpServletResponse)this.pageContext().getResponse();
	}

	protected JForumConfig config() {
		return this.getBean(JForumConfig.class);
	}

	protected void write(String content) throws IOException {
		this.pageContext().getOut().write(content);
	}

	protected void invokeJspBody() throws JspException, IOException {
		this.getJspBody().invoke(this.pageContext().getOut());
	}

	protected <T> T getBean(Class<T> beanId) {
		if (springContext == null) {
			springContext = (ApplicationContext)this.pageContext().getServletContext().getAttribute(ConfigKeys.SPRING_CONTEXT);
		}

		return springContext != null
			? springContext.getBean(beanId)
			: null;
	}

	protected PageContext pageContext() {
		return (PageContext)this.getJspContext();
	}
}"
net.jforum.core.tags.DisplayCategoriesTag,"public class DisplayCategoriesTag extends JForumTag {
	private List<Category> categories;
	private RoleManager roleManager;
	private String var;

	/**
	 * @see javax.servlet.jsp.tagext.SimpleTagSupport#doTag()
	 */
	@Override
	public void doTag() throws JspException, IOException {
		for (Category category : this.categories) {
			if (this.roleManager.isCategoryAllowed(category.getId())) {
				this.setAttribute(var, category);
				this.invokeJspBody();
			}
		}
	}

	public void setVar(String var) {
		this.var = var;
	}

	public void setRoleManager(RoleManager roleManager) {
		this.roleManager = roleManager;
	}

	public void setItems(List<Category> categories) {
		this.categories = categories;
	}
}"
net.jforum.core.tags.DisplayForumsTag,"public class DisplayForumsTag extends JForumTag {
	private String var;
	private List<Forum> forums;
	private RoleManager roleManager;
	private boolean isModerator;

	/**
	 * @see javax.servlet.jsp.tagext.SimpleTagSupport#doTag()
	 */
	@Override
	public void doTag() throws JspException, IOException {
		int counter = 1;

		for (Forum forum : this.forums) {
			if (this.roleManager.isForumAllowed(forum.getId())) {
				this.setAttribute(this.var, forum);
				this.setAttribute(this.var + ""Counter"", counter);
				this.invokeJspBody();

				counter++;
			}
		}
	}

	public void setVar(String var) {
		this.var = var;
	}

	public void setRoleManager(RoleManager roleManager) {
		this.roleManager = roleManager;
	}

	public void setItems(List<Forum> forums) {
		this.forums = forums;
	}

	public void setModerator(boolean isModerator) {
		this.isModerator = isModerator;
	}
}"
net.jforum.core.support.hibernate.SpringSessionFactory,"public class SpringSessionFactory implements SessionFactory {
	private final ApplicationContext applicationContext;
	private final SessionFactory original;

	public SpringSessionFactory(ApplicationContext applicationContext, SessionFactory original) {
		this.original = original;
		this.applicationContext = applicationContext;
	}

	@Override
	public Session openSession() throws HibernateException {
		return original.openSession(new SpringInterceptor(this.applicationContext, original));
	}

	@Override
	public Session openSession(Connection connection) {
		return original.openSession(connection, new SpringInterceptor(this.applicationContext, original));
	}

	@Override
	public Session openSession(Interceptor interceptor) throws HibernateException {
        return original.openSession(interceptor);
    }

    @Override
	public Session openSession(Connection connection, Interceptor interceptor) {
        return original.openSession(connection, interceptor);
    }

    @Override
	public Session getCurrentSession() throws HibernateException {
        return original.getCurrentSession();
    }

	@Override
	@SuppressWarnings(""rawtypes"")
	public ClassMetadata getClassMetadata(Class aClass) throws HibernateException {
        return original.getClassMetadata(aClass);
    }

    @Override
	public ClassMetadata getClassMetadata(String s) throws HibernateException {
        return original.getClassMetadata(s);
    }

    @Override
	public CollectionMetadata getCollectionMetadata(String s) throws HibernateException {
        return original.getCollectionMetadata(s);
    }

    @Override
	@SuppressWarnings(""rawtypes"")
	public Map getAllClassMetadata() throws HibernateException {
        return original.getAllClassMetadata();
    }

    @Override
	@SuppressWarnings(""rawtypes"")
	public Map getAllCollectionMetadata() throws HibernateException {
        return original.getAllCollectionMetadata();
    }

    @Override
	public Statistics getStatistics() {
        return original.getStatistics();
    }

    @Override
	public void close() throws HibernateException {
        original.close();
    }

    @Override
	public boolean isClosed() {
        return original.isClosed();
    }

	@Override
	@SuppressWarnings(""rawtypes"")
	public void evict(Class aClass) throws HibernateException {
        original.evict(aClass);
    }

	@Override
	@SuppressWarnings(""rawtypes"")
	public void evict(Class aClass, Serializable serializable) throws HibernateException {
        original.evict(aClass, serializable);
    }

    @Override
	public void evictEntity(String s) throws HibernateException {
        original.evictEntity(s);
    }

    @Override
	public void evictEntity(String s, Serializable serializable) throws HibernateException {
        original.evictEntity(s, serializable);
    }

    @Override
	public void evictCollection(String s) throws HibernateException {
        original.evictCollection(s);
    }

    @Override
	public void evictCollection(String s, Serializable serializable) throws HibernateException {
        original.evictCollection(s, serializable);
    }

    @Override
	public void evictQueries() throws HibernateException {
        original.evictQueries();
    }

    @Override
	public void evictQueries(String s) throws HibernateException {
        original.evictQueries(s);
    }

    @Override
	public StatelessSession openStatelessSession() {
        return original.openStatelessSession();
    }

    @Override
	public StatelessSession openStatelessSession(Connection connection) {
        return original.openStatelessSession(connection);
    }

	@Override
	public Set<?> getDefinedFilterNames() {
        return original.getDefinedFilterNames();
    }

    @Override
	public FilterDefinition getFilterDefinition(String s) throws HibernateException {
        return original.getFilterDefinition(s);
    }

    @Override
	public Reference getReference() throws NamingException {
        return original.getReference();
    }
}"
net.jforum.core.support.hibernate.QueryCache,"public class QueryCache extends StandardQueryCache {
	private boolean isUpToDate = true;

	/**
	 * @param settings
	 * @param props
	 * @param updateTimestampsCache
	 * @param regionName
	 * @throws HibernateException
	 */
	public QueryCache(Settings settings, Properties props, UpdateTimestampsCache updateTimestampsCache, String regionName)
			throws HibernateException {
		super(settings, props, updateTimestampsCache, regionName);
	}

	/**
	 * @see org.hibernate.cache.StandardQueryCache#clear()
	 */
	@Override
	public void clear() throws CacheException {
		super.clear();
		this.isUpToDate = true;
	}

	/**
	 * @see org.hibernate.cache.StandardQueryCache#isUpToDate(java.util.Set, java.lang.Long)
	 */
	@Override
	@SuppressWarnings(""unchecked"")
	protected boolean isUpToDate(Set spaces, Long timestamp) {
		return this.isUpToDate;
	}
}"
net.jforum.core.support.hibernate.SpringInterceptor,"public class SpringInterceptor extends EmptyInterceptor {
	private final SessionFactory sessionFactory;
	private final ApplicationContext beanRegistry;

	public SpringInterceptor(ApplicationContext beanRegistry, SessionFactory sessionFactory) {
		this.sessionFactory = sessionFactory;
		this.beanRegistry = beanRegistry;
	}

	@Override
	public Object instantiate(String entityName, EntityMode entityMode, Serializable id) {
		if (!EntityMode.POJO.equals(entityMode)) {
			return null;
		}

		Class<?> c = getClassByName(entityName);
		Object instance = this.beanRegistry.getBean(c);
		sessionFactory.getClassMetadata(c).setIdentifier(instance, id, EntityMode.POJO);

		return instance;
	}

	private Class<?> getClassByName(String name) {
		try {
			return Class.forName(name);
		} catch (ClassNotFoundException e) {
			throw new ForumException(e);
		}
	}
}"
net.jforum.core.support.hibernate.SessionFactoryCreator,"public class SessionFactoryCreator implements ComponentFactory<SessionFactory> {

	private SessionFactory factory;
	private final ApplicationContext applicationContext;

	public SessionFactoryCreator(ApplicationContext applicationContext) {
		this.applicationContext = applicationContext;
	}

	@PostConstruct
	public void create() {
		SessionFactory original = new AnnotationConfiguration().configure().buildSessionFactory();
		factory = new SpringSessionFactory(applicationContext, original);
	}

	@Override
	public SessionFactory getInstance() {
		return factory;
	}

	@PreDestroy
	public void destroy() {
		factory.close();
	}
}"
net.jforum.core.support.hibernate.CacheEvictionRules,"public class CacheEvictionRules {
	private SessionFactoryImplementor factoryImplementor;
	private SessionFactory sessionFactory;

	public CacheEvictionRules(SessionFactory factory) {
		if (factory instanceof SessionFactoryImplementor) {
			this.sessionFactory = factory;
			this.factoryImplementor = (SessionFactoryImplementor)factory;
		}
		else {
			this.sessionFactory = factory;
			//this.factoryImplementor = (SessionFactoryImplementor)((SpringSessionFactory)factory).getOriginal();
		}
	}

	/*
	 * ******************
	 * GROUPS SERVICE
	 * ******************
	 */
	@AfterReturning(""execution (* net.jforum.services.GroupService.savePermissions(..))"")
	public void permissionsChanged() {
		this.clearCacheRegion(this.factoryImplementor.getQueryCache(""forumDAO.getModerators""));
	}

	/*
	 * ****************************
	 * 		RANKING REPOSITORY
	 * ****************************
	 */
	@AfterReturning(""(execution (* net.jforum.repository.Repository.add(..))"" +
		"" || execution (* net.jforum.repository.Repository.update(..))"" +
		"" || execution (* net.jforum.repository.Repository.remove(..)))"" +
		"" && target(net.jforum.repository.RankingRepository)"")
	public void rankingChanged() {
		this.clearCacheRegion(this.factoryImplementor.getQueryCache(""rankingDAO""));
	}

	/*
	 * **************************
	 * 		SMILIE REPOSITORY
	 * **************************
	 *
	 */
	@AfterReturning(""(execution (* net.jforum.repository.Repository.add(..))"" +
		"" || execution (* net.jforum.repository.Repository.update(..))"" +
		"" || execution (* net.jforum.repository.Repository.remove(..)))"" +
		"" && target(net.jforum.repository.SmilieRepository)"")
	public void smilieChanged() {
		this.clearCacheRegion(this.factoryImplementor.getQueryCache(""smilieDAO""));
	}

	/*
	 * *************************
	 * 		USER REPOSITORY
	 * *************************
	 */
	@AfterReturning(""execution (* net.jforum.repository.Repository.add(..)) && target(net.jforum.repository.UserRepository)"")
	public void newUserRegistered() {
		this.clearCacheRegion(this.factoryImplementor.getQueryCache(""userDAO.getTotalUsers""));
		this.clearCacheRegion(this.factoryImplementor.getQueryCache(""userDAO.getLastRegisteredUser""));
	}

	/*
	 * *********************
	 *		 CONFIG
	 * *********************
	 * Changes to configurations stored in the database are very rare
	 */
	@AfterReturning(""(execution (* net.jforum.repository.Repository.add(..)) "" +
		"" || execution (* net.jforum.repository.Repository.update(..)))"" +
		"" && target(net.jforum.repository.ConfigRepository)"")
	public void configChanged() {
		this.clearCacheRegion(this.factoryImplementor.getQueryCache(""configDAO""));
	}

	/*
	 * **************************
	 *		 TOPIC REPOSITORY
	 * **************************
	 */
	@AfterReturning(""(execution (* net.jforum.repository.Repository.update(..)) && args(topic)) "" +
		"" && target(net.jforum.repository.TopicRepository)"")
	public void topicUpdated(Topic topic) {
		this.clearCacheRegion(this.factoryImplementor.getQueryCache(""forumDAO.getTopics#"" + topic.getForum().getId()));
	}

	/*
	 * *********************
	 *		 FORUM
	 * *********************
	 */
	@AfterReturning(""execution (* net.jforum.services.ModerationService.moveTopics(..)) && args(toForumId, log, topicIds)"")
	public void moveTopics(int toForumId, ModerationLog log, int... topicIds) {
		if (!ArrayUtils.isEmpty(topicIds)) {
			this.clearCacheRegion(this.factoryImplementor.getQueryCache(""forumDAO.getTotalPosts#"" + toForumId));
			this.clearCacheRegion(this.factoryImplementor.getQueryCache(""forumDAO.getTotalTopics#"" + toForumId));
			Cache cache = this.factoryImplementor.getSecondLevelCacheRegion(""net.jforum.entities.Forum"");

			if (cache != null) {
				cache.remove(""net.jforum.entities.Forum#"" + toForumId);
			}

			Topic topic = (Topic)this.sessionFactory.getCurrentSession().get(Topic.class, topicIds[0]);
			Forum forum = topic.getForum();

			this.clearCacheRegion(this.factoryImplementor.getQueryCache(""forumDAO.getTotalPosts#"" + forum.getId()));
			this.clearCacheRegion(this.factoryImplementor.getQueryCache(""forumDAO.getTotalTopics#"" + forum.getId()));

			Cache cache2 = this.factoryImplementor.getSecondLevelCacheRegion(""net.jforum.entities.Forum"");

			if (cache2 != null) {
				cache2.remove(""net.jforum.entities.Forum#"" + forum.getId());
			}
		}
	}

	/**
	 * Any change made by the Administrator. It's rare, to evict everything (easier)
	 * Admin operation on Forums are rare, so just evict the entire region, as it
	 * only happens rarely. Regular board usage may need to update a Forum
	 * when a new Post is created, so we only need to evict that specific instance
	 */
	@AfterReturning(""execution (* net.jforum.services.ForumService.*(..)) "")
	public void forumChangedByAdministration() {
		this.clearCacheRegion(this.factoryImplementor.getSecondLevelCacheRegion(""net.jforum.entities.Forum""));
		this.clearCacheRegion(this.factoryImplementor.getQueryCache(""categoryDAO.getForums""));
	}

	@AfterReturning(""execution (* net.jforum.services.PostService.delete(..)) && args(post)"")
	public void postDeleted(Post post) {
		// We force the eviction of both totalPosts and totalTopics as removing a post
		// may trigger the deletion of a topic as well
		this.postOrTopicAddedOrDeletedRules(post.getForum().getId());
	}

	@AfterReturning(""execution (* net.jforum.services.ModerationService.deleteTopics(..)) && args(topics, log)"")
	public void topicDeleted(List<Topic> topics, ModerationLog log) {
		if (topics.size() > 0) {
			// We're considering that all topics belong to the same forum
			Forum forum = topics.get(0).getForum();
			this.postOrTopicAddedOrDeletedRules(forum.getId());
			this.clearCacheRegion(this.factoryImplementor.getQueryCache(""rssDAO.getForumTopics#"" + forum.getId()));
		}
	}

	/**
	 * New post in the forum, so we must reload to it get the latest post instance
	 */
	@AfterReturning(""execution (* net.jforum.services.TopicService.addTopic(..)) && args(topic, pollOptions, attachments)"")
	public void forumNewTopic(Topic topic, List<PollOption> pollOptions, List<Attachment> attachments) {
		if (!topic.isWaitingModeration()) {
			this.newForumPostRule(topic);
		}
	}

	/**
	 * A new reply to an existing topic
	 */
	@AfterReturning(""execution (* net.jforum.services.TopicService.reply(..)) && args(topic, post, attachments)"")
	public void forumNewPost(Topic topic, Post post, List<Attachment> attachments) {
		if (!post.isWaitingModeration()) {
			this.newForumPostRule(topic);
		}
	}

	@AfterReturning(""execution (* net.jforum.services.ModerationService.approvePost(..)) && args(post)"")
	public void postApproved(Post post) {
		this.newForumPostRule(post.getTopic());
	}

	/*
	 * *********************
	 *		 CATEGORY
	 * *********************
	 * The rules for categories are simple, as they only change in the Admin,
	 * so it's not a problem to evict the entire region
	 */

	@AfterReturning(""execution(* net.jforum.services.CategoryService.*(..))"")
	public void categoryChanged() {
		this.clearCacheRegion(this.factoryImplementor.getSecondLevelCacheRegion(""net.jforum.entities.Category""));
		this.clearCacheRegion(this.factoryImplementor.getQueryCache(""categoryDAO.getAllCategories""));
	}

	private void newForumPostRule(Topic topic) {
		int forumId = topic.getForum().getId();
		this.postOrTopicAddedOrDeletedRules(forumId);
	}

	private void postOrTopicAddedOrDeletedRules(int forumId) {
		this.clearCacheRegion(this.factoryImplementor.getQueryCache(""recentTopicsDAO""));
		this.clearCacheRegion(this.factoryImplementor.getQueryCache(""forumDAO.getTotalPosts#"" + forumId));
		this.clearCacheRegion(this.factoryImplementor.getQueryCache(""forumDAO.getTotalTopics#"" + forumId));
		this.clearCacheRegion(this.factoryImplementor.getQueryCache(""forumDAO.getTotalMessages""));
		this.clearCacheRegion(this.factoryImplementor.getQueryCache(""forumDAO.getTopics#"" + forumId));
	}

	private void clearCacheRegion(Cache cache) {
		if (cache != null) {
			cache.clear();
		}
	}

	private void clearCacheRegion(QueryCache cache) {
		if (cache != null) {
			cache.clear();
		}
	}
}"
net.jforum.core.support.hibernate.QueryCacheFactory,"public class QueryCacheFactory implements org.hibernate.cache.QueryCacheFactory {
	/**
	 * @see org.hibernate.cache.QueryCacheFactory#getQueryCache(java.lang.String, org.hibernate.cache.UpdateTimestampsCache, org.hibernate.cfg.Settings, java.util.Properties)
	 */
	public QueryCache getQueryCache(String regionName, UpdateTimestampsCache updateTimestampsCache, Settings settings, Properties props)
			throws HibernateException {
		return new net.jforum.core.support.hibernate.QueryCache(settings, props, updateTimestampsCache, regionName);
	}

}"
net.jforum.core.support.spring.RoleManagerFactoryBean,"public class RoleManagerFactoryBean implements FactoryBean<RoleManager> {
	private SessionManager sessionManager;

	public RoleManagerFactoryBean(SessionManager sessionManager) {
		this.sessionManager = sessionManager;
	}

	/**
	 * @see org.springframework.beans.factory.FactoryBean#getObject()
	 */
	public RoleManager getObject() throws Exception {
		String sessionId = RequestContextHolder.currentRequestAttributes().getSessionId();
		UserSession userSession = this.sessionManager.getUserSession(sessionId);
		return userSession != null ? userSession.getRoleManager() : null;
	}

	/**
	 * @see org.springframework.beans.factory.FactoryBean#getObjectType()
	 */
	public Class<?> getObjectType() {
		return RoleManager.class;
	}

	/**
	 * @see org.springframework.beans.factory.FactoryBean#isSingleton()
	 */
	public boolean isSingleton() {
		return false;
	}

}"
net.jforum.core.support.spring.HttpServletRequestFactoryBean,"public class HttpServletRequestFactoryBean implements FactoryBean<HttpServletRequest> {
	/**
	 * @see org.springframework.beans.factory.FactoryBean#getObject()
	 */
	public HttpServletRequest getObject() throws Exception {
		RequestAttributes attributes = RequestContextHolder.currentRequestAttributes();
		return ((ServletRequestAttributes)attributes).getRequest();
	}
 
	/**
	 * @see org.springframework.beans.factory.FactoryBean#getObjectType()
	 */
	public Class<?> getObjectType() {
		return HttpServletRequest.class;
	}

	/**
	 * @see org.springframework.beans.factory.FactoryBean#isSingleton()
	 */
	public boolean isSingleton() {
		return false;
	}
}"
net.jforum.core.support.spring.HttpServletResponseFactoryBean,"public class HttpServletResponseFactoryBean implements FactoryBean<HttpServletResponse> {
	/**
	 * @see org.springframework.beans.factory.FactoryBean#getObject()
	 */
	public HttpServletResponse getObject() throws Exception {
		RequestAttributes attributes = RequestContextHolder.currentRequestAttributes();
		return (HttpServletResponse) attributes.getAttribute(ConfigKeys.HTTP_SERVLET_RESPONSE, RequestAttributes.SCOPE_REQUEST);
	}

	/**
	 * @see org.springframework.beans.factory.FactoryBean#getObjectType()
	 */
	public Class<?> getObjectType() {
		return HttpServletResponse.class;
	}

	/**
	 * @see org.springframework.beans.factory.FactoryBean#isSingleton()
	 */
	public boolean isSingleton() {
		return false;
	}
}"
net.jforum.core.events.post.ForumPostEvent,"public class ForumPostEvent extends EmptyPostEvent {
	private ForumRepository repository;

	public ForumPostEvent(ForumRepository repository) {
		this.repository = repository;
	}

	/**
	 * The actions are:
	 * <ul>
	 * 	<li> If last post, update forum.lastPost
	 * </ul>
	 */
	@Override
	public void deleted(Post post) {
		boolean isLastPost = false;

		try {
			// FIXME: Check TopicPostEvent#handleLastPostDeleted
			isLastPost = post.equals(post.getForum().getLastPost());
		}
		catch (ObjectNotFoundException e) {
			isLastPost = true;
		}

		if (isLastPost) {
			Post lastPost = this.repository.getLastPost(post.getForum());
			post.getForum().setLastPost(lastPost);
		}
	}
}"
net.jforum.core.events.post.TopicReplyEvent,"public class TopicReplyEvent extends EmptyPostEvent {
	private TopicWatchRepository watchRepository;
	private SpammerTaskExecutor taskExecutor;
	private JForumConfig config;
	private SpammerFactory spammerFactory;

	public TopicReplyEvent(TopicWatchRepository watchRepository, SpammerTaskExecutor taskExecutor,
		JForumConfig config, SpammerFactory spammerFactory) {
		this.watchRepository = watchRepository;
		this.taskExecutor = taskExecutor;
		this.config = config;
		this.spammerFactory = spammerFactory;
	}

	/**
	 * @see net.jforum.events.EmptyPostEvent#added(net.jforum.entities.Post)
	 */
	@Override
	public void added(Post post) {
		// TODO: should also consider moderated posts (and the respective moderation action)
		if (this.config.getBoolean(ConfigKeys.MAIL_NOTIFY_ANSWERS)) {
			List<User> users = this.watchRepository.getUsersWaitingNotification(post.getTopic());

			Spammer spammer = this.spammerFactory.newTopicReply(post.getTopic(), users);

			this.taskExecutor.dispatch(spammer);
		}
	}
}"
net.jforum.core.events.post.BadWordEvent,"public class BadWordEvent extends EmptyPostEvent {
	private BadWordRepository repository;

	public BadWordEvent(BadWordRepository repository) {
		this.repository = repository;
	}

	/**
	 * @see net.jforum.events.EmptyPostEvent#beforeAdd(net.jforum.entities.Post)
	 */
	@Override
	public void beforeAdd(Post post) {
		List<BadWord> words = this.repository.getAll();

		for (BadWord word : words) {
			Pattern pattern = Pattern.compile(""\\b"" + word.getWord() + ""\\b"", Pattern.CASE_INSENSITIVE);

			post.setText(this.applyFilter(post.getText(), word.getReplacement(), pattern));

			if (!StringUtils.isEmpty(post.getSubject())) {
				post.setSubject(this.applyFilter(post.getSubject(), word.getReplacement(), pattern));
			}

			if (!StringUtils.isEmpty(post.getTopic().getSubject())) {
				post.getTopic().setSubject(this.applyFilter(post.getTopic().getSubject(), word.getReplacement(), pattern));
			}
		}
	}

	/**
	 * @see net.jforum.events.EmptyPostEvent#updated(net.jforum.entities.Post)
	 */
	@Override
	public void updated(Post post) {
		this.beforeAdd(post);
	}

	private String applyFilter(String text, String replacement, Pattern pattern) {
		Matcher matcher = pattern.matcher(text);
		return matcher.replaceAll(replacement);
	}
}"
net.jforum.core.events.post.TopicWatchPostEvent,"public class TopicWatchPostEvent extends EmptyPostEvent {
	private TopicWatchService service;

	public TopicWatchPostEvent(TopicWatchService service) {
		this.service = service;
	}

	/**
	 * @see net.jforum.events.EmptyPostEvent#added(net.jforum.entities.Post)
	 */
	@Override
	public void added(Post post) {
		if (post.shouldNotifyReplies()) {
			this.service.watch(post.getTopic(), post.getUser());
		}
	}
}"
net.jforum.core.events.post.TopicPostEvent,"public class TopicPostEvent extends EmptyPostEvent {
	private TopicRepository topicRepository;
	private UserRepository userRepository;

	public TopicPostEvent(TopicRepository topicRepository, UserRepository userRepository) {
		this.topicRepository = topicRepository;
		this.userRepository = userRepository;
	}

	/**
	 * The actions are:
	 * <ul>
	 * 	<li> if topic.totalPosts == 0, delete topic
	 * 	<li> If 1st post, update topic.firstPost
	 * 	<li> If last post, update topic.lastPost
	 * 	<li> Decrement topic replies
	 * </ul>
	 */
	@Override
	public void deleted(Post post) {
		boolean isTopicDeleted = this.handleEmptyTopic(post);
		post.getTopic().decrementTotalReplies();

		if (!isTopicDeleted) {
			// If it wasn't the first post which was deleted,
			// then check if it was the last one. It never will
			// be both (which would result in a topic delete)
			if (!this.handleFirstPostDeleted(post)) {
				this.handleLastPostDeleted(post);
			}

			int userTotalPosts = this.userRepository.getTotalPosts(post.getUser());
			post.getUser().setTotalPosts(userTotalPosts);
		}
	}

	private boolean handleEmptyTopic(Post post) {
		if (this.topicRepository.getTotalPosts(post.getTopic()) < 1) {
			this.topicRepository.remove(post.getTopic());
			return true;
		}

		return false;
	}

	private void handleLastPostDeleted(Post post) {
		boolean isLastPost = false;

		try {
			// FIXME: post.getTopic.getLastPost() may throw this exception,
			// because the post itself was deleted before this method,
			// and a call to post.getTopic().getLastPost() may issue
			// a query to load the last post of such topic, which
			// won't exist, of course. So, is this expected, or should
			// we handle this using another approach?
			isLastPost = post.getTopic().getLastPost().equals(post);
		}
		catch (ObjectNotFoundException e) {
			isLastPost = true;
		}

		if (isLastPost) {
			post.getTopic().setLastPost(this.topicRepository.getLastPost(post.getTopic()));
		}
	}

	private boolean handleFirstPostDeleted(Post post) {
		boolean isFirstPost = false;

		try {
			isFirstPost = post.getTopic().getFirstPost().equals(post);
		}
		catch (ObjectNotFoundException e) {
			isFirstPost = true;
		}

		if (isFirstPost) {
			Post firstPost = this.topicRepository.getFirstPost(post.getTopic());
			post.getTopic().setFirstPost(firstPost);
			post.getTopic().setUser(firstPost.getUser());

			return true;
		}

		return false;
	}
}"
net.jforum.core.events.category.NewCategoryGroupPermissionsEvent,"public class NewCategoryGroupPermissionsEvent extends EmptyCategoryEvent {
	private GroupRepository groupRepository;
	private GroupService groupService;
	private final UserSession userSession;

	public NewCategoryGroupPermissionsEvent(GroupRepository groupRepository, GroupService groupService,
		UserSession userSession) {
		this.groupRepository = groupRepository;
		this.groupService = groupService;
		this.userSession = userSession;
	}

	/**
	 * When a new category is added, set group access automatically.
	 * Every group which is an Administrator and every user group which is
	 * Co Administrator will have access by default to the new category.
	 * @see net.jforum.events.EmptyCategoryEvent#added(net.jforum.entities.Category)
	 */
	@Override
	public void added(Category category) {
		List<Group> allGroups = this.groupRepository.getAllGroups();
		List<Group> userGroups = this.userSession.getUser().getGroups();
		List<Group> processedGroups = new ArrayList<Group>();

		for (Group group : userGroups) {
			if (this.isGoodCandidate(group)) {
				processedGroups.add(group);
				this.groupService.appendRole(group, SecurityConstants.CATEGORY, category.getId());
			}
		}

		for (Group group : allGroups) {
			if (!processedGroups.contains(group) && group.roleExist(SecurityConstants.ADMINISTRATOR)) {
				this.groupService.appendRole(group, SecurityConstants.CATEGORY, category.getId());
			}
		}
	}

	private boolean isGoodCandidate(Group group) {
		return group.roleExist(SecurityConstants.ADMINISTRATOR)
			|| group.roleExist(SecurityConstants.CO_ADMINISTRATOR);
	}
}"
net.jforum.core.events.topic.TopicWatchTopicEvent,"public class TopicWatchTopicEvent extends EmptyTopicEvent {
	private TopicWatchRepository repository;

	public TopicWatchTopicEvent(TopicWatchRepository repository) {
		this.repository = repository;
	}

	/**
	 * @see net.jforum.events.EmptyTopicEvent#deleted(net.jforum.entities.Topic)
	 */
	@Override
	public void deleted(Topic topic) {
		this.repository.removeSubscription(topic);
	}
}"
net.jforum.core.events.topic.ForumTopicEvent,"public class ForumTopicEvent extends EmptyTopicEvent {
	private ForumRepository repository;

	public ForumTopicEvent(ForumRepository repository) {
		this.repository = repository;
	}

	/**
	 * The actions are:
	 * <ul>
	 * 	<li> If topic.lastPost == forum.lastPost, update forum.lastPost
	 * </ul>
	 */
	@Override
	public void deleted(Topic topic) {
		Forum forum = topic.getForum();
		boolean topicMatches = false;

		try {
			// FIXME: Check TopiPostEvent#handleLastPostDeleted
			topicMatches = forum.getLastPost() == null
				? true
				: forum.getLastPost().getTopic().equals(topic);
		}
		catch (ObjectNotFoundException e) {
			topicMatches = true;
		}

		if (topicMatches) {
			forum.setLastPost(this.repository.getLastPost(forum));
		}
	}
}"
net.jforum.core.events.forum.NewForumGroupPermissionsEvent,"public class NewForumGroupPermissionsEvent extends EmptyForumEvent {
	private GroupRepository groupRepository;
	private GroupService groupService;
	private final UserSession userSession;

	public NewForumGroupPermissionsEvent(GroupRepository groupRepository, GroupService groupService, UserSession userSession) {
		this.groupRepository = groupRepository;
		this.groupService = groupService;
		this.userSession = userSession;
	}

	/**
	 * When a new forum is added, set group access automatically.
	 * Every group which is an Administrator and every user group which is
	 * Co Administrator will have access by default to the new forum.
	 * @see net.jforum.events.EmptyForumEvent#added(net.jforum.entities.Forum)
	 */
	@Override
	public void added(Forum forum) {
		List<Group> allGroups = this.groupRepository.getAllGroups();
		List<Group> userGroups = this.userSession.getUser().getGroups();
		List<Group> processedGroups = new ArrayList<Group>();

		for (Group group : userGroups) {
			if (this.isGoodCandidate(group)) {
				processedGroups.add(group);
				this.groupService.appendRole(group, SecurityConstants.FORUM, forum.getId());
			}
		}

		for (Group group : allGroups) {
			if (!processedGroups.contains(group) && group.roleExist(SecurityConstants.ADMINISTRATOR)) {
				this.groupService.appendRole(group, SecurityConstants.FORUM, forum.getId());
			}
		}
	}

	private boolean isGoodCandidate(Group group) {
		return group.roleExist(SecurityConstants.ADMINISTRATOR)
			|| group.roleExist(SecurityConstants.CO_ADMINISTRATOR);
	}
}"
net.jforum.util.MD5,"public class MD5 {
	/**
	 * Encodes a string
	 *
	 * @param str String to encode
	 * @return Encoded String
	 * @throws NoSuchAlgorithmException
	 */
	public static String hash(String str) {
		if (str == null || str.length() == 0) {
			throw new IllegalArgumentException(""String cannot be null or zero length"");
		}

		StringBuilder hexString = new StringBuilder();

		try {
			MessageDigest md = MessageDigest.getInstance(""MD5"");
			md.update(str.getBytes());
			byte[] hash = md.digest();

			for (byte element : hash) {
				if ((0xff & element) < 0x10) {
					hexString.append('0').append(Integer.toHexString((0xFF & element)));
				}
				else {
					hexString.append(Integer.toHexString(0xFF & element));
				}
			}
		}
		catch (NoSuchAlgorithmException e) {
			throw new ForumException(e);
		}

		return hexString.toString();
	}
}"
net.jforum.util.SafeHtml,"public class SafeHtml {
	private Set<String> welcomeTags = new HashSet<String>();
	private Set<String> welcomeAttributes = new HashSet<String>();
	private Set<String> allowedProtocols = new HashSet<String>();

	private JForumConfig config;

	public SafeHtml(JForumConfig config) {
		this.config = config;

		this.splitAndTrim(ConfigKeys.HTML_TAGS_WELCOME, this.welcomeTags);
		this.splitAndTrim(ConfigKeys.HTML_ATTRIBUTES_WELCOME, this.welcomeAttributes);
		this.splitAndTrim(ConfigKeys.HTML_LINKS_ALLOW_PROTOCOLS, this.allowedProtocols);
	}

	private void splitAndTrim(String s, Set<String> data) {
		if (this.config.containsKey(s)) {
			String value = this.config.getValue(s);
			String[] parts = value.split("","");

			for (String part : parts) {
				part = part.trim();

				if (!StringUtils.isEmpty(part)) {
					data.add(part.toUpperCase());
				}
			}
		}
	}

	/**
	 * Given an input, analyze each HTML tag and remove unsecure attributes from them.
	 *
	 * @param contents The content to verify
	 * @return the content, secure.
	 */
	public String ensureAllAttributesAreSafe(String contents) {
		StringBuilder sb = new StringBuilder(contents.length());

		try {
			Lexer lexer = new Lexer(contents);
			Node node;

			while ((node = lexer.nextNode()) != null) {
				if (node instanceof Tag) {
					Tag tag = (Tag) node;

					this.checkAndValidateAttributes(tag, false);

					sb.append(tag.toHtml());
				}
				else {
					sb.append(node.toHtml());
				}
			}
		}
		catch (Exception e) {
			throw new ForumException(""Problems while parsing HTML: "" + e, e);
		}

		return sb.toString();
	}

	/**
	 * Given an input, makes it safe for HTML displaying.
	 * Removes any not allowed HTML tag or attribute, as well unwanted
	 * Javascript statements inside the tags.
	 *
	 * @param contents the input to analyze
	 * @return the modified and safe string
	 */
	public String makeSafe(String contents) {
		if (contents == null || contents.length() == 0) {
			return contents;
		}

		StringBuilder sb = new StringBuilder(contents.length());

		try {
			Lexer lexer = new Lexer(contents);
			Node node;

			while ((node = lexer.nextNode()) != null) {
				boolean isTextNode = node instanceof TextNode;

				if (isTextNode) {
					// Text nodes are raw data, so we just
					// strip off all possible html content
					String text = node.toHtml();

					if (text.indexOf('>') > -1 || text.indexOf('<') > -1) {
						text = StringUtils.replace(text, ""<"", ""&lt;"");
						text = StringUtils.replace(text, "">"", ""&gt;"");
						text = StringUtils.replace(text, ""\"""", ""&quot;"");

						node.setText(text);
					}

					sb.append(node.toHtml());
				}
				else if (node instanceof Tag && this.isTagWelcome(node)) {
					sb.append(node.toHtml());
				}
				else {
					String text = node.toHtml();

					text = StringUtils.replace(text, ""<"", ""&lt;"");
					text = StringUtils.replace(text, "">"", ""&gt;"");

					sb.append(text);
				}
			}
		}
		catch (Exception e) {
			throw new ForumException(""Error while parsing HTML: "" + e, e);
		}

		return sb.toString();
	}

	/**
	 * Returns true if a given tag is allowed. Also, it checks and removes any unwanted attribute the tag may contain.
	 *
	 * @param node The tag node to analyze
	 * @return true if it is a valid tag.
	 */
	private boolean isTagWelcome(Node node) {
		Tag tag = (Tag) node;

		if (!welcomeTags.contains(tag.getTagName())) {
			return false;
		}

		this.checkAndValidateAttributes((Tag)node, true);

		return true;
	}

	/**
	 * Given a tag, check its attributes, removing those unwanted or not secure
	 *
	 * @param tag The tag to analyze
	 * @param checkIfAttributeIsWelcome true if the attribute name should be matched against the list of welcome attributes, set in the main
	 *            configuration file.
	 */
	@SuppressWarnings(""unchecked"")
	private void checkAndValidateAttributes(Tag tag, boolean checkIfAttributeIsWelcome) {
		Vector<Attribute> newAttributes = new Vector<Attribute>();

		for (Iterator<Attribute> iter = tag.getAttributesEx().iterator(); iter.hasNext();) {
			Attribute a = iter.next();
			String name = a.getName();

			if (name == null) {
				newAttributes.add(a);
			}
			else {
				name = name.toUpperCase();

				if (a.getValue() == null) {
					newAttributes.add(a);
					continue;
				}

				String value = a.getValue().toLowerCase();

				if (checkIfAttributeIsWelcome && !this.isAttributeWelcome(name)) {
					continue;
				}

				if (!this.isAttributeSafe(name, value)) {
					continue;
				}

				if (a.getValue().indexOf(""&#"") > -1) {
					a.setValue(StringUtils.replace(a.getValue(), ""&#"", ""&amp;#""));
				}

				newAttributes.add(a);
			}
		}

		tag.setAttributesEx(newAttributes);
	}

	/**
	 * Check if the given attribute name is in the list of allowed attributes
	 *
	 * @param name the attribute name
	 * @return true if it is an allowed attribute name
	 */
	private boolean isAttributeWelcome(String name) {
		return welcomeAttributes.contains(name);
	}

	/**
	 * Check if the attribute is safe, checking either its name and value.
	 *
	 * @param name the attribute name
	 * @param value the attribute value
	 * @return true if it is a safe attribute
	 */
	private boolean isAttributeSafe(String name, String value) {
		if (name.length() >= 2 && name.charAt(0) == 'O' && name.charAt(1) == 'N') {
			return false;
		}

		if (value.indexOf('\n') > -1 || value.indexOf('\r') > -1 || value.indexOf('\0') > -1) {
			return false;
		}

		if ((""HREF"".equals(name) || ""SRC"".equals(name))) {
			if (!this.isHrefValid(value)) {
				return false;
			}
		}
		else if (""STYLE"".equals(name)) {
			// It is much more a try to not allow constructions
			// like style=""background-color: url(javascript:xxxx)"" than anything else
			if (value.indexOf('(') > -1) {
				return false;
			}
		}

		return true;
	}

	/**
	 * Checks if a given address is valid
	 *
	 * @param href The address to check
	 * @return true if it is valid
	 */
	private boolean isHrefValid(String href) {
		if (this.config.getBoolean(ConfigKeys.HTML_LINKS_ALLOW_RELATIVE) && href.length() > 0 && href.charAt(0) == '/') {
			return true;
		}

		for (String string : allowedProtocols) {
			String protocol = string.toLowerCase();

			if (href.startsWith(protocol)) {
				return true;
			}
		}

		return false;
	}
}"
net.jforum.util.ConfigKeys,"public class ConfigKeys {

	public static final String SPRING_CONTEXT = ""springContext"";
	public static final String HTTP_SERVLET_RESPONSE = ""jforum.http.servlet.response"";
	public static final String CONFIG = ""config"";
	public static final String SERVLET_CONTEXT = ""__servletContext"";
	public static final String LOGGED = ""logged"";
	public static final String APPLICATION_PATH = ""application.path"";
	public static final String INSTALLATION = ""installation"";
	public static final String INSTALLED = ""installed"";

	public static final String INSTALL_DIR = ""install.dir"";

	public static final String FILECHANGES_DELAY = ""file.changes.delay"";
	public static final String C3P0_EXTRA_PARAMS = ""c3p0.extra.params"";

	public static final String MESSAGE_FORMATTERS = ""message.formatters"";
	public static final String FORUM_TIME_LIMITED_ENABLE = ""forum.time.limited.enable"";
	public static final String AUTHENTICATION_TYPE = ""authentication.type"";
	public static final String SSO_IMPLEMENTATION = ""sso.implementation"";
	public static final String LOGIN_AUTHENTICATOR = ""login.authenticator"";
	public static final String TYPE_DEFAULT = ""default"";
	public static final String TYPE_SSO = ""sso"";
	public static final String AUTO_LOGIN_ENABLED = ""auto.login.enabled"";

	public static final String SSO_PASSWORD_ATTRIBUTE = ""sso.password.attribute"";
	public static final String SSO_EMAIL_ATTRIBUTE = ""sso.email.attribute"";
	public static final String SSO_DEFAULT_PASSWORD = ""sso.default.password"";
	public static final String SSO_DEFAULT_EMAIL = ""sso.default.email"";
	public static final String SSO_REDIRECT = ""sso.redirect"";
	public static final String SSO_LOGOUT = ""sso.logout"";
	public static final String EXTERNAL_USER_MANAGEMENT = ""external.user.management"";

	public static final String RESOURCE_DIR = ""resource.dir"";

	public static final String TEMPLATES_MAPPING = ""templates.mapping"";
	public static final String TEMPLATE_DIRECTORY = ""template.directory"";
	public static final String TEMPLATE_NAME = ""template.name"";
	public static final String ENCODING = ""encoding"";
	public static final String DEFAULT_CONTAINER_ENCODING = ""default.container.encoding"";
	public static final String SERVLET_NAME = ""servlet.name"";
	public static final String DEFAULT_CONFIG = ""default.config"";
	public static final String CONTEXT_NAME = ""context.name"";
	public static final String SERVLET_EXTENSION = ""servlet.extension"";
	public static final String COOKIE_USER_ID = ""cookie.user.id"";
	public static final String COOKIE_NAME_USER = ""cookie.name.user"";
	public static final String COOKIE_AUTO_LOGIN = ""cookie.name.autologin"";
	public static final String COOKIE_USER_HASH = ""cookie.name.userHash"";

	public static final String ANONYMOUS_USER_ID = ""anonymousUserId"";
	public static final String DEFAULT_USER_GROUP = ""defaultUserGroup"";
	public static final String USER_HASH_SEQUENCE = ""user.hash.sequence"";
	public static final String TOPICS_TRACKING = ""topics.tracking"";

	public static final String VERSION = ""version"";

	public static final String FORUM_LINK = ""forum.link"";
	public static final String HOMEPAGE_LINK = ""homepage.link"";
	public static final String FORUM_NAME = ""forum.name"";
	public static final String FORUM_PAGE_TITLE = ""forum.page.title"";
	public static final String FORUM_PAGE_METATAG_KEYWORDS = ""forum.page.metatag.keywords"";
	public static final String FORUM_PAGE_METATAG_DESCRIPTION = ""forum.page.metatag.description"";

	public static final String TMP_DIR = ""tmp.dir"";
	public static final String CACHE_DIR = ""cache.dir"";

	public static final String DATE_TIME_FORMAT = ""dateTime.format"";
	public static final String RSS_DATE_TIME_FORMAT = ""rss.datetime.format"";
	public static final String RSS_ENABLED = ""rss.enabled"";
	public static final String HOT_TOPIC_BEGIN = ""hot.topic.begin"";

	public static final String TOPICS_PER_PAGE = ""topicsPerPage"";
	public static final String POSTS_PER_PAGE = ""postsPerPage"";
	public static final String USERS_PER_PAGE = ""usersPerPage"";
	public static final String RECENT_TOPICS = ""topic.recent"";
	public static final String HOTTEST_TOPICS = ""topic.hottest"";
	public static final String POSTS_CACHE_SIZE = ""posts.cache.size"";
	public static final String POSTS_CACHE_ENABLED = ""posts.cache.enabled"";

	public static final String CAPTCHA_IGNORE_CASE = ""captcha.ignore.case"";
	public static final String CAPTCHA_REGISTRATION = ""captcha.registration"";
	public static final String CAPTCHA_POSTS = ""captcha.posts"";
	public static final String CAPTCHA_WIDTH = ""captcha.width"";
	public static final String CAPTCHA_HEIGHT = ""captcha.height"";
	public static final String CAPTCHA_MIN_FONT_SIZE = ""captcha.min.font.size"";
	public static final String CAPTCHA_MAX_FONT_SIZE = ""captcha.max.font.size"";
	public static final String CAPTCHA_MIN_WORDS = ""captcha.min.words"";
	public static final String CAPTCHA_MAX_WORDS = ""captcha.max.words"";

	public static final String I18N_DEFAULT = ""i18n.board.default"";
	public static final String I18N_DEFAULT_ADMIN = ""i18n.internal"";
	public static final String I18N_IMAGES_DIR = ""i18n.images.dir"";

	public static final String MAIL_BATCH_SIZE = ""mail.batch.size"";
	public static final String MAIL_LOST_PASSWORD_MESSAGE_FILE = ""mail.lostPassword.messageFile"";
	public static final String MAIL_LOST_PASSWORD_SUBJECT = ""mail.lostPassword.subject"";
	public static final String MAIL_NOTIFY_ANSWERS = ""mail.notify.answers"";
	public static final String MAIL_SENDER = ""mail.sender"";
	public static final String MAIL_CHARSET = ""mail.charset"";
	public static final String MAIL_TEMPLATE_ENCODING = ""mail.template.encoding"";
	public static final String MAIL_NEW_ANSWER_MESSAGE_FILE = ""mail.newAnswer.messageFile"";
	public static final String MAIL_NEW_ANSWER_SUBJECT = ""mail.newAnswer.subject"";
	public static final String MAIL_NEW_PM_SUBJECT = ""mail.newPm.subject"";
	public static final String MAIL_NEW_PM_MESSAGE_FILE = ""mail.newPm.messageFile"";
	public static final String MAIL_MESSSAGE_FORMAT = ""mail.messageFormat"";

	public static final String MAIL_SMTP_AUTH = ""mail.smtp.auth"";
	public static final String MAIL_SMTP_HOST = ""mail.smtp.host"";
	public static final String MAIL_SMTP_PORT = ""mail.smtp.port"";

	public static final String MAIL_SMTP_SSL_AUTH = ""mail.smtps.auth"";
	public static final String MAIL_SMTP_SSL_HOST = ""mail.smtps.host"";
	public static final String MAIL_SMTP_SSL_PORT = ""mail.smtps.port"";
	public static final String MAIL_SMTP_SSL_LOCALHOST = ""mail.smtps.localhost"";

	public static final String MAIL_SMTP_SSL = ""mail.smtp.ssl"";

	public static final String MAIL_SMTP_LOCALHOST = ""mail.smtp.localhost"";
	public static final String MAIL_SMTP_USERNAME = ""mail.smtp.username"";
	public static final String MAIL_SMTP_PASSWORD = ""mail.smtp.password"";
	public static final String MAIL_SMTP_DELAY = ""mail.smtp.delay"";

	public static final String MAIL_USER_EMAIL_AUTH = ""mail.user.email.auth"";
	public static final String MAIL_ACTIVATION_KEY_MESSAGE_FILE = ""mail.activationKey.messageFile"";
	public static final String MAIL_ACTIVATION_KEY_SUBJECT = ""mail.activationKey.subject"";

	public static final String MAIL_NEW_TOPIC_MESSAGE_FILE = ""mail.newTopic.messageFile"";
	public static final String MAIL_NEW_TOPIC_SUBJECT = ""mail.newTopic.subject"";

	public static final String HTML_TAGS_WELCOME = ""html.tags.welcome"";
	public static final String HTML_ATTRIBUTES_WELCOME = ""html.attributes.welcome"";
	public static final String HTML_LINKS_ALLOW_RELATIVE = ""html.links.allow.relative"";
	public static final String HTML_LINKS_ALLOW_PROTOCOLS = ""html.links.allow.protocols"";

	public static final String SMILIE_IMAGE_DIR = ""smilie.image.dir"";

	public static final String AVATAR_GALLERY_DIR = ""avatar.gallery.dir"";
	public static final String AVATAR_UPLOAD_DIR = ""avatar.upload.dir"";
	public static final String AVATAR_MAX_SIZE = ""avatar.maxSize"";
	public static final String AVATAR_MIN_WIDTH = ""avatar.minWidth"";
	public static final String AVATAR_MIN_HEIGHT = ""avatar.minHeight"";
	public static final String AVATAR_MAX_WIDTH = ""avatar.maxWidth"";
	public static final String AVATAR_MAX_HEIGHT = ""avatar.maxHeight"";
	public static final String AVATAR_ALLOW_UPLOAD = ""avatar.allow.upload"";
	public static final String AVATAR_ALLOW_GALLERY = ""avatar.allow.gallery"";
	public static final String AVATAR_STORE_PATH = ""avatar.store.path"";

	public static final String MOST_USERS_EVER_ONLINE = ""most.users.ever.online"";

	public static final String ATTACHMENTS_MAX_POST = ""attachments.max.post"";
	public static final String ATTACHMENTS_IMAGES_CREATE_THUMB = ""attachments.images.createthumb"";
	public static final String ATTACHMENTS_IMAGES_MAX_THUMB_W = ""attachments.images.thumb.maxsize.w"";
	public static final String ATTACHMENTS_IMAGES_MAX_THUMB_H = ""attachments.images.thumb.maxsize.h"";
	public static final String ATTACHMENTS_IMAGES_THUMB_BOX_SHOW = ""attachments.images.thumb.box.show"";
	public static final String ATTACHMENTS_ICON = ""attachments.icon"";
	public static final String ATTACHMENTS_STORE_DIR = ""attachments.store.dir"";
	public static final String ATTACHMENTS_UPLOAD_DIR = ""attachments.upload.dir"";
	public static final String ATTACHMENTS_ANONYMOUS = ""attachments.anonymous"";

	public static final String AGREEMENT_SHOW = ""agreement.show"";
	public static final String AGREEMENT_ACCEPTED = ""agreement.accepted"";
	public static final String AGREEMENT_DEFAULT_FILE = ""agreement.default.file"";
	public static final String AGREEMENT_FILES_PATH = ""agreement.files.path"";
	public static final String REGISTRATION_ENABLED = ""registration.enabled"";
	public static final String USERNAME_MAX_LENGTH = ""username.max.length"";

	public static final String CLICKSTREAM_CONFIG = ""clickstream.config"";
	public static final String IS_BOT = ""clickstream.is.bot"";

	public static final String POSTS_NEW_DELAY = ""posts.new.delay"";
	public static final String LAST_POST_TIME = ""last.post.time"";

    public static final String LOGIN_IGNORE_XFORWARDEDHOST = ""login.ignore.xforwardedhost"";
	public static final String LOGIN_IGNORE_REFERER = ""login.ignore.referer"";

    public static final String JFORUM_VERSION_URL = ""jforum.version.url"";
	public static final String REQUEST_IGNORE_CAPTCHA = ""request.ignore.captcha"";

	public static final String MODERATION_LOGGING_ENABLED = ""moderation.logging.enabled"";
	public static final String BANLIST_SEND_403FORBIDDEN = ""banlist.send.403forbidden"";
	public static final String RENDER_CUSTOM_LOGIC = ""render.custom.logic"";
	public static final String RENDER_CUSTOM_COMPONENT = ""render.custom.component"";
	public static final String VRAPTOR_VIEW_PATTERN = ""vraptor.view.pattern"";
	public static final String IGNORE_VIEW_MANAGER_REDIRECT = ""ignore.viewmanager.redirect"";
	public static final String USER_SESSION = ""userSession"";
	public static final String ROLE_MANAGER = ""roleManager"";

	public static final String SEARCH_INDEXING_ENABLED = ""search.indexing.enabled"";
	public static final String LUCENE_ANALYZER = ""lucene.analyzer"";
	public static final String LUCENE_INDEX_WRITE_PATH = ""lucene.index.write.path"";
	public static final String LUCENE_SETTINGS = ""lucene.settings"";
	public static final String LUCENE_CURRENTLY_INDEXING = ""lucene.currently.indexing"";
	public static final String LUCENE_INDEXER_RAM_NUMDOCS = ""lucene.indexer.ram.numdocs"";
	public static final String LUCENE_BATCH_SIZE = ""lucene.batch.size"";
	public static final String QUERY_IGNORE_TOPIC_MOVED = ""query.ignore.topic.moved"";

	public static final String BLOCK_IP = ""jforum.block_ip"";


	private ConfigKeys() { }
}"
net.jforum.util.JForumConfig,"public class JForumConfig extends PropertiesConfiguration {
	private static final Logger logger = Logger.getLogger(JForumConfig.class);
	private final SessionFactory sessionFactory;

	public JForumConfig(ServletContext servletContext, SessionFactory sessionFactory) {
		this.sessionFactory = sessionFactory;
		this.setReloadingStrategy(new FileChangedReloadingStrategy());
		this.setDelimiterParsingDisabled(true);

		try {
			loadProps();
			if (servletContext != null) {
				setProperty(ConfigKeys.APPLICATION_PATH, servletContext.getRealPath(""""));
			}
			loadDatabaseProperties();
			normalizeTemplateDirectory();
		}
		catch (Exception e) {
			throw new ForumException(e);
		}
	}

	private void normalizeTemplateDirectory() {
		StringBuilder sb = new StringBuilder(getValue(ConfigKeys.TEMPLATE_DIRECTORY));

		if (sb.charAt(0) != '/') {
			sb.insert(0, '/');
		}

		if (sb.charAt(sb.length() - 1) != '/') {
			sb.append('/');
		}

		setProperty(ConfigKeys.TEMPLATE_DIRECTORY, sb.toString());
	}

	@Override
	public void setProperty(String key, Object value) {
		clearProperty(key);
		super.setProperty(key, value);
	}

	public List<String> getValueAsList(String key) {
		String value = getValue(key);
		List<String> l = new ArrayList<String>();

		if (value != null) {
			String[] parts = value.split("","");

			for (String p : parts) {
				l.add(p.trim());
			}
		}

		return l;
	}

	private void loadProps() throws ConfigurationException, Exception {
		this.load(this.getClass().getResourceAsStream(""/jforumConfig/SystemGlobals.properties""));
		this.loadCustomProperties();
	}

	private void loadCustomProperties() throws Exception {
		InputStream is = this.getClass().getResourceAsStream(""/jforumConfig/jforum-custom.properties"");

		if (is != null) {
			Properties custom = new Properties();
			custom.load(is);

			for (Enumeration<?> e = custom.keys(); e.hasMoreElements(); ) {
				String key = (String)e.nextElement();
				this.clearProperty(key);
				this.addProperty(key, custom.get(key));
			}
		}
	}

	private void loadDatabaseProperties() {
		Session session = null;

		try {
			session = sessionFactory.openSession();

			ConfigRepository repository = new ConfigRepository(session);
			List<Config> databasesProperties = repository.getAll();

			for (Config config : databasesProperties) {
				this.clearProperty(config.getName());
				this.addProperty(config.getName(), config.getValue());
			}
		}
		catch (Exception e) {
			logger.error(""Error while trying to load custom settings from the database: "" + e.getMessage(), e);
		}
		finally {
			try { session.close(); }
			catch (Exception e) {}
		}
	}

	/**
	 * @see org.apache.commons.configuration.BaseConfiguration#addPropertyDirect(java.lang.String, java.lang.Object)
	 */
	@Override
	protected void addPropertyDirect(String key, Object value) {
		super.addPropertyDirect(key, value);
	}

	/**
	 * Gets the complete path to the application root directory
	 * @return the path to the root directory
	 */
	public String getApplicationPath() {
		return this.getString(ConfigKeys.APPLICATION_PATH);
	}

	/**
	 * Delegates to {@link #getString(String)}
	 * @param key the key to retrieve
	 * @return the key's value
	 */
	public String getValue(String key) {
		return this.getString(key);
	}
}"
net.jforum.util.ImageUtils,"public class ImageUtils {
	public static final int IMAGE_UNKNOWN = -1;
	public static final int IMAGE_JPEG = 0;
	public static final int IMAGE_PNG = 1;
	public static final int IMAGE_GIF = 2;

	/**
	 * Resizes an image
	 *
	 * @param imgName The image name to resize. Must be the complet path to the file
	 * @param type int
	 * @param maxWidth The image's max width
	 * @param maxHeight The image's max height
	 * @return A resized <code>BufferedImage</code>
	 */
	public static BufferedImage resizeImage(String imgName, int type, int maxWidth, int maxHeight) {
		try {
			return resizeImage(ImageIO.read(new File(imgName)), type, maxWidth, maxHeight);
		}
		catch (IOException e) {
			throw new ForumException(e);
		}
	}

	/**
	 * Resizes an image.
	 *
	 * @param image The image to resize
	 * @param maxWidth The image's max width
	 * @param maxHeight The image's max height
	 * @return A resized <code>BufferedImage</code>
	 * @param type int
	 */
	public static BufferedImage resizeImage(BufferedImage image, int type, int maxWidth, int maxHeight) {
		Dimension largestDimension = new Dimension(maxWidth, maxHeight);

		// Original size
		int imageWidth = image.getWidth(null);
		int imageHeight = image.getHeight(null);

		float aspectRatio = (float) imageWidth / imageHeight;

		if (imageWidth > maxWidth || imageHeight > maxHeight) {
			if ((float) largestDimension.width / largestDimension.height > aspectRatio) {
				largestDimension.width = (int) Math.ceil(largestDimension.height * aspectRatio);
			}
			else {
				largestDimension.height = (int) Math.ceil(largestDimension.width / aspectRatio);
			}

			imageWidth = largestDimension.width;
			imageHeight = largestDimension.height;
		}

		return createHeadlessSmoothBufferedImage(image, type, imageWidth, imageHeight);
	}

	/**
	 * Saves an image to the disk.
	 *
	 * @param image The image to save
	 * @param toFileName The filename to use
	 * @param type The image type. Use <code>ImageUtils.IMAGE_JPEG</code> to save as JPEG images, or <code>ImageUtils.IMAGE_PNG</code> to save as PNG.
	 * @return <code>false</code> if no appropriate writer is found
	 */
	public static boolean saveImage(BufferedImage image, String toFileName, int type) {
		try {
			return ImageIO.write(image, type == IMAGE_JPEG ? ""jpg"" : ""png"", new File(toFileName));
		}
		catch (IOException e) {
			throw new ForumException(e);
		}
	}

	/**
	 * Compress and save an image to the disk. Currently this method only supports JPEG images.
	 *
	 * @param image The image to save
	 * @param toFileName The filename to use
	 * @param type The image type. Use <code>ImageUtils.IMAGE_JPEG</code> to save as JPEG images, or <code>ImageUtils.IMAGE_PNG</code> to save as PNG.
	 */
	public static void saveCompressedImage(BufferedImage image, String toFileName, int type) {
		try {
			if (type == IMAGE_PNG) {
				throw new UnsupportedOperationException(""PNG compression not implemented"");
			}

			Iterator<?> iter = ImageIO.getImageWritersByFormatName(""jpg"");
			ImageWriter writer;
			writer = (ImageWriter) iter.next();

			ImageOutputStream ios = ImageIO.createImageOutputStream(new File(toFileName));
			writer.setOutput(ios);

			ImageWriteParam iwparam = new JPEGImageWriteParam(Locale.getDefault());

			iwparam.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
			iwparam.setCompressionQuality(0.7F);

			writer.write(null, new IIOImage(image, null, null), iwparam);

			ios.flush();
			writer.dispose();
			ios.close();
		}
		catch (IOException e) {
			throw new ForumException(e);
		}
	}

	/**
	 * Creates a <code>BufferedImage</code> from an <code>Image</code>. This method can function on a completely headless system. This especially
	 * includes Linux and Unix systems that do not have the X11 libraries installed, which are required for the AWT subsystem to operate. This method
	 * uses nearest neighbor approximation, so it's quite fast. Unfortunately, the result is nowhere near as nice looking as the
	 * createHeadlessSmoothBufferedImage method.
	 *
	 * @param image The image to convert
	 * @param w The desired image width
	 * @param h The desired image height
	 * @return The converted image
	 * @param type int
	 */
	public static BufferedImage createHeadlessBufferedImage(BufferedImage image, int type, int width, int height) {
		if (type == ImageUtils.IMAGE_PNG && hasAlpha(image)) {
			type = BufferedImage.TYPE_INT_ARGB;
		}
		else {
			type = BufferedImage.TYPE_INT_RGB;
		}

		BufferedImage bi = new BufferedImage(width, height, type);

		for (int y = 0; y < height; y++) {
			for (int x = 0; x < width; x++) {
				bi.setRGB(x, y, image.getRGB(x * image.getWidth() / width, y * image.getHeight() / height));
			}
		}

		return bi;
	}

	/**
	 * Creates a <code>BufferedImage</code> from an <code>Image</code>. This method can function on a completely headless system. This especially
	 * includes Linux and Unix systems that do not have the X11 libraries installed, which are required for the AWT subsystem to operate. The
	 * resulting image will be smoothly scaled using bilinear filtering.
	 *
	 * @param source The image to convert
	 * @param w The desired image width
	 * @param h The desired image height
	 * @return The converted image
	 * @param type int
	 */
	public static BufferedImage createHeadlessSmoothBufferedImage(BufferedImage source, int type, int width, int height) {
		if (type == ImageUtils.IMAGE_PNG && hasAlpha(source)) {
			type = BufferedImage.TYPE_INT_ARGB;
		}
		else {
			type = BufferedImage.TYPE_INT_RGB;
		}

		BufferedImage dest = new BufferedImage(width, height, type);

		int sourcex;
		int sourcey;

		double scalex = (double) width / source.getWidth();
		double scaley = (double) height / source.getHeight();

		int x1;
		int y1;

		double xdiff;
		double ydiff;

		int rgb;
		int rgb1;
		int rgb2;

		for (int y = 0; y < height; y++) {
			sourcey = y * source.getHeight() / dest.getHeight();
			ydiff = scale(y, scaley) - sourcey;

			for (int x = 0; x < width; x++) {
				sourcex = x * source.getWidth() / dest.getWidth();
				xdiff = scale(x, scalex) - sourcex;

				x1 = Math.min(source.getWidth() - 1, sourcex + 1);
				y1 = Math.min(source.getHeight() - 1, sourcey + 1);

				rgb1 = getRGBInterpolation(source.getRGB(sourcex, sourcey), source.getRGB(x1, sourcey), xdiff);
				rgb2 = getRGBInterpolation(source.getRGB(sourcex, y1), source.getRGB(x1, y1), xdiff);

				rgb = getRGBInterpolation(rgb1, rgb2, ydiff);

				dest.setRGB(x, y, rgb);
			}
		}

		return dest;
	}

	private static double scale(int point, double scale) {
		return point / scale;
	}

	private static int getRGBInterpolation(int value1, int value2, double distance) {
		int alpha1 = (value1 & 0xFF000000) >>> 24;
		int red1 = (value1 & 0x00FF0000) >> 16;
		int green1 = (value1 & 0x0000FF00) >> 8;
		int blue1 = (value1 & 0x000000FF);

		int alpha2 = (value2 & 0xFF000000) >>> 24;
		int red2 = (value2 & 0x00FF0000) >> 16;
		int green2 = (value2 & 0x0000FF00) >> 8;
		int blue2 = (value2 & 0x000000FF);

		int rgb = ((int) (alpha1 * (1.0 - distance) + alpha2 * distance) << 24) | ((int) (red1 * (1.0 - distance) + red2 * distance) << 16)
				| ((int) (green1 * (1.0 - distance) + green2 * distance) << 8) | (int) (blue1 * (1.0 - distance) + blue2 * distance);

		return rgb;
	}

	/**
	 * Determines if the image has transparent pixels.
	 *
	 * @param image The image to check for transparent pixel.s
	 * @return <code>true</code> of <code>false</code>, according to the result
	 */
	public static boolean hasAlpha(Image image) {
		try {
			PixelGrabber pg = new PixelGrabber(image, 0, 0, 1, 1, false);
			pg.grabPixels();

			return pg.getColorModel().hasAlpha();
		}
		catch (InterruptedException e) {
			return false;
		}
	}
}"
net.jforum.util.ImageInfo,"public class ImageInfo {
	/**
	 * Return value of {@link #getFormat()} for JPEG streams.
	 * ImageInfo can extract physical resolution and comments
	 * from JPEGs (only from APP0 headers).
	 * Only one image can be stored in a file.
	 * It is determined whether the JPEG stream is progressive
	 * (see {@link #isProgressive()}).
	 */
	public static final int FORMAT_JPEG = 0;

	/**
	 * Return value of {@link #getFormat()} for GIF streams.
	 * ImageInfo can extract comments from GIFs and count the number
	 * of images (GIFs with more than one image are animations).
	 * It is determined whether the GIF stream is interlaced (see {@link #isProgressive()}).
	 */
	public static final int FORMAT_GIF = 1;

	/**
	 * Return value of {@link #getFormat()} for PNG streams.
	 * PNG only supports one image per file.
	 * Both physical resolution and comments can be stored with PNG,
	 * but ImageInfo is currently not able to extract those.
	 * It is determined whether the PNG stream is interlaced (see {@link #isProgressive()}).
	 */
	public static final int FORMAT_PNG = 2;

	/**
	 * Return value of {@link #getFormat()} for BMP streams.
	 * BMP only supports one image per file.
	 * BMP does not allow for comments.
	 * The physical resolution can be stored.
	 */
	public static final int FORMAT_BMP = 3;

	/**
	 * Return value of {@link #getFormat()} for PCX streams.
	 * PCX does not allow for comments or more than one image per file.
	 * However, the physical resolution can be stored.
	 */
	public static final int FORMAT_PCX = 4;

	/**
	 * Return value of {@link #getFormat()} for IFF streams.
	 */
	public static final int FORMAT_IFF = 5;

	/**
	 * Return value of {@link #getFormat()} for RAS streams.
	 * Sun Raster allows for one image per file only and is not able to
	 * store physical resolution or comments.
	 */
	public static final int FORMAT_RAS = 6;

	/** Return value of {@link #getFormat()} for PBM streams. */
	public static final int FORMAT_PBM = 7;

	/** Return value of {@link #getFormat()} for PGM streams. */
	public static final int FORMAT_PGM = 8;

	/** Return value of {@link #getFormat()} for PPM streams. */
	public static final int FORMAT_PPM = 9;

	/** Return value of {@link #getFormat()} for PSD streams. */
	public static final int FORMAT_PSD = 10;

/*	public static final int COLOR_TYPE_UNKNOWN = -1;
	public static final int COLOR_TYPE_TRUECOLOR_RGB = 0;
	public static final int COLOR_TYPE_PALETTED = 1;
	public static final int COLOR_TYPE_GRAYSCALE= 2;
	public static final int COLOR_TYPE_BLACK_AND_WHITE = 3;*/

	/**
	 * The names of all supported file formats.
	 * The FORMAT_xyz int constants can be used as index values for
	 * this array.
	 */
	private static final String[] FORMAT_NAMES =
		{""JPEG"", ""GIF"", ""PNG"", ""BMP"", ""PCX"",
		 ""IFF"", ""RAS"", ""PBM"", ""PGM"", ""PPM"",
		 ""PSD""};

	/**
	 * The names of the MIME types for all supported file formats.
	 * The FORMAT_xyz int constants can be used as index values for
	 * this array.
	 */
	private static final String[] MIME_TYPE_STRINGS =
		{""image/jpeg"", ""image/gif"", ""image/png"", ""image/bmp"", ""image/pcx"",
		 ""image/iff"", ""image/ras"", ""image/x-portable-bitmap"", ""image/x-portable-graymap"", ""image/x-portable-pixmap"",
		 ""image/psd""};

	private int width;
	private int height;
	private int bitsPerPixel;
	//private int colorType = COLOR_TYPE_UNKNOWN;
	private boolean progressive;
	private int format;
	private InputStream in;
	private DataInput din;
	private boolean collectComments = true;
	@SuppressWarnings(""unchecked"")
	private Vector<String> comments;
	private boolean determineNumberOfImages;
	private int numberOfImages;
	private int physicalHeightDpi;
	private int physicalWidthDpi;

	@SuppressWarnings(""unchecked"")
	private void addComment(String s) {
		if (comments == null) {
			comments = new Vector<String>();
		}
		comments.addElement(s);
	}

	/**
	 * Call this method after you have provided an input stream or file
	 * using {@link #setInput(InputStream)} or {@link #setInput(DataInput)}.
	 * If true is returned, the file format was known and information
	 * on the file's content can be retrieved using the various getXyz methods.
	 * @return if information could be retrieved from input
	 */
	public boolean check() {
		format = -1;
		width = -1;
		height = -1;
		bitsPerPixel = -1;
		numberOfImages = 1;
		physicalHeightDpi = -1;
		physicalWidthDpi = -1;
		comments = null;
		try {
			int b1 = read() & 0xff;
			int b2 = read() & 0xff;
			if (b1 == 0x47 && b2 == 0x49) {
				return checkGif();
			}
			else
			if (b1 == 0x89 && b2 == 0x50) {
				return checkPng();
			}
			else
			if (b1 == 0xff && b2 == 0xd8) {
				return checkJpeg();
			}
			else
			if (b1 == 0x42 && b2 == 0x4d) {
				return checkBmp();
			}
			else
			if (b1 == 0x0a && b2 < 0x06) {
				return checkPcx();
			}
			else
			if (b1 == 0x46 && b2 == 0x4f) {
				return checkIff();
			}
			else
			if (b1 == 0x59 && b2 == 0xa6) {
				return checkRas();
			}
			else
			if (b1 == 0x50 && b2 >= 0x31 && b2 <= 0x36) {
				return checkPnm(b2 - '0');
			}
			else
			if (b1 == 0x38 && b2 == 0x42) {
				return checkPsd();
			}
			else {
				return false;
			}
		} catch (IOException ioe) {
			return false;
		}
	}

	private boolean checkBmp() throws IOException {
		byte[] a = new byte[44];
		if (read(a) != a.length) {
			return false;
		}
		width = getIntLittleEndian(a, 16);
		height = getIntLittleEndian(a, 20);
		if (width < 1 || height < 1) {
			return false;
		}
		bitsPerPixel = getShortLittleEndian(a, 26);
		if (bitsPerPixel != 1 && bitsPerPixel != 4 &&
		    bitsPerPixel != 8 && bitsPerPixel != 16 &&
		    bitsPerPixel != 24 && bitsPerPixel != 32) {
		    return false;
		}
		int x = (int)(getIntLittleEndian(a, 36) * 0.0254);
		if (x > 0) {
			setPhysicalWidthDpi(x);
		}
		int y = (int)(getIntLittleEndian(a, 40) * 0.0254);
		if (y > 0) {
			setPhysicalHeightDpi(y);
		}
		format = FORMAT_BMP;
		return true;
	}

	private boolean checkGif() throws IOException {
		final byte[] GIF_MAGIC_87A = {0x46, 0x38, 0x37, 0x61};
		final byte[] GIF_MAGIC_89A = {0x46, 0x38, 0x39, 0x61};
		byte[] a = new byte[11]; // 4 from the GIF signature + 7 from the global header
		if (read(a) != 11) {
			return false;
		}
		if ((!equals(a, 0, GIF_MAGIC_89A, 0, 4)) &&
			(!equals(a, 0, GIF_MAGIC_87A, 0, 4))) {
			return false;
		}
		format = FORMAT_GIF;
		width = getShortLittleEndian(a, 4);
		height = getShortLittleEndian(a, 6);
		int flags = a[8] & 0xff;
		bitsPerPixel = ((flags >> 4) & 0x07) + 1;
		//progressive = (flags & 0x02) != 0;
		if (!determineNumberOfImages) {
			return true;
		}
		// skip global color palette
		if ((flags & 0x80) != 0) {
			int tableSize = (1 << ((flags & 7) + 1)) * 3;
			skip(tableSize);
		}
		numberOfImages = 0;
		int blockType;
		do
		{
			blockType = read();
			switch(blockType)
			{
				case(0x2c): // image separator
				{
					if (read(a, 0, 9) != 9) {
						return false;
					}
					flags = a[8] & 0xff;
					progressive = (flags & 0x40) != 0;
					/*int locWidth = getShortLittleEndian(a, 4);
					int locHeight = getShortLittleEndian(a, 6);
					System.out.println(""LOCAL: "" + locWidth + "" x "" + locHeight);*/
					int localBitsPerPixel = (flags & 0x07) + 1;
					if (localBitsPerPixel > bitsPerPixel) {
						bitsPerPixel = localBitsPerPixel;
					}
					if ((flags & 0x80) != 0) {
						skip((1 << localBitsPerPixel) * 3);
					}
					skip(1); // initial code length
					int n;
					do
					{
						n = read();
						if (n > 0) {
							skip(n);
						}
						else
						if (n == -1) {
							return false;
						}
					}
					while (n > 0);
					numberOfImages++;
					break;
				}
				case(0x21): // extension
				{
					int extensionType = read();
					if (collectComments && extensionType == 0xfe) {
						StringBuffer sb = new StringBuffer();
						int n;
						do
						{
							n = read();
							if (n == -1) {
								return false;
							}
							if (n > 0) {
								for (int i = 0; i < n; i++) {
									int ch = read();
									if (ch == -1) {
										return false;
									}
									sb.append((char)ch);
								}
							}
						}
						while (n > 0);
					} else {
						int n;
						do
						{
							n = read();
							if (n > 0) {
								skip(n);
							}
							else
							if (n == -1) {
								return false;
							}
						}
						while (n > 0);
					}
					break;
				}
				case(0x3b): // end of file
				{
					break;
				}
				default:
				{
					return false;
				}
			}
		}
		while (blockType != 0x3b);
		return true;
	}

	private boolean checkIff() throws IOException {
		byte[] a = new byte[10];
		// read remaining 2 bytes of file id, 4 bytes file size
		// and 4 bytes IFF subformat
		if (read(a, 0, 10) != 10) {
			return false;
		}
		final byte[] IFF_RM = {0x52, 0x4d};
		if (!equals(a, 0, IFF_RM, 0, 2)) {
			return false;
		}
		int type = getIntBigEndian(a, 6);
		if (type != 0x494c424d && // type must be ILBM...
		    type != 0x50424d20) { // ...or PBM
		    return false;
		}
		// loop chunks to find BMHD chunk
		do {
			if (read(a, 0, 8) != 8) {
				return false;
			}
			int chunkId = getIntBigEndian(a, 0);
			int size = getIntBigEndian(a, 4);
			if ((size & 1) == 1) {
				size++;
			}
			if (chunkId == 0x424d4844) { // BMHD chunk
				if (read(a, 0, 9) != 9) {
					return false;
				}
				format = FORMAT_IFF;
				width = getShortBigEndian(a, 0);
				height = getShortBigEndian(a, 2);
				bitsPerPixel = a[8] & 0xff;
				return (width > 0 && height > 0 && bitsPerPixel > 0 && bitsPerPixel < 33);
			} else {
				skip(size);
			}
		} while (true);
	}

	private boolean checkJpeg() throws IOException {
		byte[] data = new byte[12];
		while (true) {
			if (read(data, 0, 4) != 4) {
				return false;
			}
			int marker = getShortBigEndian(data, 0);
			int size = getShortBigEndian(data, 2);
			if ((marker & 0xff00) != 0xff00) {
				return false; // not a valid marker
			}
			if (marker == 0xffe0) { // APPx
				if (size < 14) {
					// not an APPx header as we know it, skip
					skip(size - 2);
					continue;
				}
				if (read(data, 0, 12) != 12) {
					return false;
				}
				final byte[] APP0_ID = {0x4a, 0x46, 0x49, 0x46, 0x00};
				if (equals(APP0_ID, 0, data, 0, 5)) {
					//System.out.println(""data 7="" + data[7]);
					if (data[7] == 1) {
						setPhysicalWidthDpi(getShortBigEndian(data, 8));
						setPhysicalHeightDpi(getShortBigEndian(data, 10));
					}
					else
					if (data[7] == 2) {
						int x = getShortBigEndian(data, 8);
						int y = getShortBigEndian(data, 10);
						setPhysicalWidthDpi((int)(x * 2.54f));
						setPhysicalHeightDpi((int)(y * 2.54f));
					}
				}
				skip(size - 14);
			}
			else
			if (collectComments && size > 2 && marker == 0xfffe) { // comment
				size -= 2;
				byte[] chars = new byte[size];
				if (read(chars, 0, size) != size) {
					return false;
				}
				String comment = new String(chars, ""iso-8859-1"");
				comment = comment.trim();
				addComment(comment);
			}
			else
			if (marker >= 0xffc0 && marker <= 0xffcf && marker != 0xffc4 && marker != 0xffc8) {
				if (read(data, 0, 6) != 6) {
					return false;
				}
				format = FORMAT_JPEG;
				bitsPerPixel = (data[0] & 0xff) * (data[5] & 0xff);
				progressive = marker == 0xffc2 || marker == 0xffc6 ||
					marker == 0xffca || marker == 0xffce;
				width = getShortBigEndian(data, 3);
				height = getShortBigEndian(data, 1);
				return true;
			} else {
				skip(size - 2);
			}
		}
	}

	private boolean checkPcx() throws IOException {
		byte[] a = new byte[64];
		if (read(a) != a.length) {
			return false;
		}
		if (a[0] != 1) { // encoding, 1=RLE is only valid value
			return false;
		}
		// width / height
		int x1 = getShortLittleEndian(a, 2);
		int y1 = getShortLittleEndian(a, 4);
		int x2 = getShortLittleEndian(a, 6);
		int y2 = getShortLittleEndian(a, 8);
		if (x1 < 0 || x2 < x1 || y1 < 0 || y2 < y1) {
			return false;
		}
		width = x2 - x1 + 1;
		height = y2 - y1 + 1;
		// color depth
		int bits = a[1];
		int planes = a[63];
		if (planes == 1 &&
		    (bits == 1 || bits == 2 || bits == 4 || bits == 8)) {
			// paletted
			bitsPerPixel = bits;
		} else
		if (planes == 3 && bits == 8) {
			// RGB truecolor
			bitsPerPixel = 24;
		} else {
			return false;
		}
		setPhysicalWidthDpi(getShortLittleEndian(a, 10));
		setPhysicalHeightDpi(getShortLittleEndian(a, 10));
		format = FORMAT_PCX;
		return true;
	}

	private boolean checkPng() throws IOException {
		final byte[] PNG_MAGIC = {0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a};
		byte[] a = new byte[27];
		if (read(a) != 27) {
			return false;
		}
		if (!equals(a, 0, PNG_MAGIC, 0, 6)) {
			return false;
		}
		format = FORMAT_PNG;
		width = getIntBigEndian(a, 14);
		height = getIntBigEndian(a, 18);
		bitsPerPixel = a[22] & 0xff;
		int colorType = a[23] & 0xff;
		if (colorType == 2 || colorType == 6) {
			bitsPerPixel *= 3;
		}
		progressive = (a[26] & 0xff) != 0;
		return true;
	}

	private boolean checkPnm(int id) throws IOException {
		if (id < 1 || id > 6) {
			return false;
		}
		final int[] PNM_FORMATS = {FORMAT_PBM, FORMAT_PGM, FORMAT_PPM};
		format = PNM_FORMATS[(id - 1) % 3];
		boolean hasPixelResolution = false;
		String s;
		while (true)
		{
			s = readLine();
			if (s != null) {
				s = s.trim();
			}
			if (s == null || s.length() < 1) {
				continue;
			}
			if (s.charAt(0) == '#') { // comment
				if (collectComments && s.length() > 1) {
					addComment(s.substring(1));
				}
				continue;
			}
			if (!hasPixelResolution) { // split ""343 966"" into width=343, height=966
				int spaceIndex = s.indexOf(' ');
				if (spaceIndex == -1) {
					return false;
				}
				String widthString = s.substring(0, spaceIndex);
				spaceIndex = s.lastIndexOf(' ');
				if (spaceIndex == -1) {
					return false;
				}
				String heightString = s.substring(spaceIndex + 1);
				try {
					width = Integer.parseInt(widthString);
					height = Integer.parseInt(heightString);
				} catch (NumberFormatException nfe) {
					return false;
				}
				if (width < 1 || height < 1) {
					return false;
				}
				if (format == FORMAT_PBM) {
					bitsPerPixel = 1;
					return true;
				}
				hasPixelResolution = true;
			}
			else
			{
				int maxSample;
				try {
					maxSample = Integer.parseInt(s);
				} catch (NumberFormatException nfe) {
					return false;
				}
				if (maxSample < 0) {
					return false;
				}
				for (int i = 0; i < 25; i++) {
					if (maxSample < (1 << (i + 1))) {
						bitsPerPixel = i + 1;
						if (format == FORMAT_PPM) {
							bitsPerPixel *= 3;
						}
						return true;
					}
				}
				return false;
			}
		}
	}

	private boolean checkPsd() throws IOException {
		byte[] a = new byte[24];
		if (read(a) != a.length) {
			return false;
		}
		final byte[] PSD_MAGIC = {0x50, 0x53};
		if (!equals(a, 0, PSD_MAGIC, 0, 2)) {
			return false;
		}
		format = FORMAT_PSD;
		width = getIntBigEndian(a, 16);
		height = getIntBigEndian(a, 12);
		int channels = getShortBigEndian(a, 10);
		int depth = getShortBigEndian(a, 20);
		bitsPerPixel = channels * depth;
		return (width > 0 && height > 0 && bitsPerPixel > 0 && bitsPerPixel <= 64);
	}

	private boolean checkRas() throws IOException {
		byte[] a = new byte[14];
		if (read(a) != a.length) {
			return false;
		}
		final byte[] RAS_MAGIC = {0x6a, (byte)0x95};
		if (!equals(a, 0, RAS_MAGIC, 0, 2)) {
			return false;
		}
		format = FORMAT_RAS;
		width = getIntBigEndian(a, 2);
		height = getIntBigEndian(a, 6);
		bitsPerPixel = getIntBigEndian(a, 10);
		return (width > 0 && height > 0 && bitsPerPixel > 0 && bitsPerPixel <= 24);
	}

	/**
	 * Run over String list, return false iff at least one of the arguments
	 * equals <code>-c</code>.
	 * @param args string list to check
	 */
	private static boolean determineVerbosity(String[] args) {
		if (args != null && args.length > 0) {
			for (String arg : args) {
				if (""-c"".equals(arg)) {
					return false;
				}
			}
		}
		return true;
	}

	private static boolean equals(byte[] a1, int offs1, byte[] a2, int offs2, int num) {
		while (num-- > 0) {
			if (a1[offs1++] != a2[offs2++]) {
				return false;
			}
		}
		return true;
	}

	/**
	 * If {@link #check()} was successful, returns the image's number of bits per pixel.
	 * Does not include transparency information like the alpha channel.
	 * @return number of bits per image pixel
	 */
	public int getBitsPerPixel() {
		return bitsPerPixel;
	}

	/**
	 * Returns the index'th comment retrieved from the file.
	 * @param index int index of comment to return
	 * @throws IllegalArgumentException if index is smaller than 0 or larger than or equal
	 * to the number of comments retrieved
	 * @see #getNumberOfComments
	 */
	public String getComment(int index) {
		if (comments == null || index < 0 || index >= comments.size()) {
			throw new IllegalArgumentException(""Not a valid comment index: "" + index);
		}
		return (String)comments.elementAt(index);
	}

	/**
	 * If {@link #check()} was successful, returns the image format as one
	 * of the FORMAT_xyz constants from this class.
	 * Use {@link #getFormatName()} to get a textual description of the file format.
	 * @return file format as a FORMAT_xyz constant
	 */
	public int getFormat() {
		return format;
	}

	/**
	 * If {@link #check()} was successful, returns the image format's name.
	 * Use {@link #getFormat()} to get a unique number.
	 * @return file format name
	 */
	public String getFormatName() {
		if (format >= 0 && format < FORMAT_NAMES.length) {
			return FORMAT_NAMES[format];
		} else {
			return ""?"";
		}
	}

	/**
	 * If {@link #check()} was successful, returns one the image's vertical
	 * resolution in pixels.
	 * @return image height in pixels
	 */
	public int getHeight() {
		return height;
	}

	private static int getIntBigEndian(byte[] a, int offs) {
		return
			(a[offs] & 0xff) << 24 |
			(a[offs + 1] & 0xff) << 16 |
			(a[offs + 2] & 0xff) << 8 |
			a[offs + 3] & 0xff;
	}

	private static int getIntLittleEndian(byte[] a, int offs) {
		return
			(a[offs + 3] & 0xff) << 24 |
			(a[offs + 2] & 0xff) << 16 |
			(a[offs + 1] & 0xff) << 8 |
			a[offs] & 0xff;
	}

	/**
	 * If {@link #check()} was successful, returns a String with the
	 * MIME type of the format.
	 * @return MIME type, e.g. <code>image/jpeg</code>
	 */
	public String getMimeType() {
		if (format >= 0 && format < MIME_TYPE_STRINGS.length) {
			if (format == FORMAT_JPEG && progressive)
			{
				return ""image/pjpeg"";
			}
			return MIME_TYPE_STRINGS[format];
		} else {
			return null;
		}
	}

	/**
	 * If {@link #check()} was successful and {@link #setCollectComments(boolean)} was called with
	 * <code>true</code> as argument, returns the number of comments retrieved
	 * from the input image stream / file.
	 * Any number &gt;= 0 and smaller than this number of comments is then a
	 * valid argument for the {@link #getComment(int)} method.
	 * @return number of comments retrieved from input image
	 */
	public int getNumberOfComments()
	{
		if (comments == null) {
			return 0;
		} else {
			return comments.size();
		}
	}

	/**
	 * Returns the number of images in the examined file.
	 * Assumes that <code>setDetermineImageNumber(true);</code> was called before
	 * a successful call to {@link #check()}.
	 * This value can currently be only different from <code>1</code> for GIF images.
	 * @return number of images in file
	 */
	public int getNumberOfImages()
	{
		return numberOfImages;
	}

	/**
	 * Returns the physical height of this image in dots per inch (dpi).
	 * Assumes that {@link #check()} was successful.
	 * Returns <code>-1</code> on failure.
	 * @return physical height (in dpi)
	 * @see #getPhysicalWidthDpi()
	 * @see #getPhysicalHeightInch()
	 */
	public int getPhysicalHeightDpi() {
		return physicalHeightDpi;
	}

	/**
	 * If {@link #check()} was successful, returns the physical width of this image in dpi (dots per inch)
	 * or -1 if no value could be found.
	 * @return physical height (in dpi)
	 * @see #getPhysicalHeightDpi()
	 * @see #getPhysicalWidthDpi()
	 * @see #getPhysicalWidthInch()
	 */
	public float getPhysicalHeightInch() {
		int h = getHeight();
		int ph = getPhysicalHeightDpi();
		if (h > 0 && ph > 0) {
			return ((float)h) / ((float)ph);
		} else {
			return -1.0f;
		}
	}

	/**
	 * If {@link #check()} was successful, returns the physical width of this image in dpi (dots per inch)
	 * or -1 if no value could be found.
	 * @return physical width (in dpi)
	 * @see #getPhysicalHeightDpi()
	 * @see #getPhysicalWidthInch()
	 * @see #getPhysicalHeightInch()
	 */
	public int getPhysicalWidthDpi() {
		return physicalWidthDpi;
	}

	/**
	 * Returns the physical width of an image in inches, or
	 * <code>-1.0f</code> if width information is not available.
	 * Assumes that {@link #check} has been called successfully.
	 * @return physical width in inches or <code>-1.0f</code> on failure
	 * @see #getPhysicalWidthDpi
	 * @see #getPhysicalHeightInch
	 */
	public float getPhysicalWidthInch() {
		int w = getWidth();
		int pw = getPhysicalWidthDpi();
		if (w > 0 && pw > 0) {
			return ((float)w) / ((float)pw);
		} else {
			return -1.0f;
		}
	}

	private static int getShortBigEndian(byte[] a, int offs) {
		return
			(a[offs] & 0xff) << 8 |
			(a[offs + 1] & 0xff);
	}

	private static int getShortLittleEndian(byte[] a, int offs) {
		return (a[offs] & 0xff) | (a[offs + 1] & 0xff) << 8;
	}

	/**
	 * If {@link #check()} was successful, returns one the image's horizontal
	 * resolution in pixels.
	 * @return image width in pixels
	 */
	public int getWidth() {
		return width;
	}

	/**
	 * Returns whether the image is stored in a progressive (also called: interlaced) way.
	 * @return true for progressive/interlaced, false otherwise
	 */
	public boolean isProgressive()
	{
		return progressive;
	}

	/**
	 * To use this class as a command line application, give it either
	 * some file names as parameters (information on them will be
	 * printed to standard output, one line per file) or call
	 * it with no parameters. It will then check data given to it
	 * via standard input.
	 * @param args the program arguments which must be file names
	 */
	public static void main(String[] args) {
		ImageInfo imageInfo = new ImageInfo();
		imageInfo.setDetermineImageNumber(true);
		boolean verbose = determineVerbosity(args);
		if (args.length == 0) {
			run(null, System.in, imageInfo, verbose);
		} else {
			int index = 0;
			while (index < args.length) {
				InputStream in = null;
				try {
					String name = args[index++];
					System.out.print(name + "";"");
					if (name.startsWith(""http://"")) {
						in = new URL(name).openConnection().getInputStream();
					} else {
						in = new FileInputStream(name);
					}
					run(name, in, imageInfo, verbose);
					in.close();
				} catch (IOException e) {
					System.out.println(e);
					try {
						if (in != null) {
							in.close();
						}
					} catch (IOException ee) {
					}
				}
			}
		}
	}

	private static void print(String sourceName, ImageInfo ii, boolean verbose) {
		if (verbose) {
			printVerbose(sourceName, ii);
		} else {
			printCompact(sourceName, ii);
		}
	}

	private static void printCompact(String sourceName, ImageInfo imageInfo) {
		final String SEP = ""\t"";
		System.out.println(
			sourceName + SEP +
			imageInfo.getFormatName() + SEP +
			imageInfo.getMimeType() + SEP +
			imageInfo.getWidth() + SEP +
			imageInfo.getHeight() + SEP +
			imageInfo.getBitsPerPixel() + SEP +
			imageInfo.getNumberOfImages() + SEP +
			imageInfo.getPhysicalWidthDpi() + SEP +
			imageInfo.getPhysicalHeightDpi() + SEP +
			imageInfo.getPhysicalWidthInch() + SEP +
			imageInfo.getPhysicalHeightInch() + SEP +
			imageInfo.isProgressive()
		);
	}

	private static void printLine(int indentLevels, String text, float value, float minValidValue) {
		if (value < minValidValue) {
			return;
		}
		printLine(indentLevels, text, Float.toString(value));
	}

	private static void printLine(int indentLevels, String text, int value, int minValidValue) {
		if (value >= minValidValue) {
			printLine(indentLevels, text, Integer.toString(value));
		}
	}

	private static void printLine(int indentLevels, String text, String value) {
		if (value == null || value.length() == 0) {
			return;
		}
		while (indentLevels-- > 0) {
			System.out.print(""\t"");
		}
		if (text != null && text.length() > 0) {
			System.out.print(text);
			System.out.print("" "");
		}
		System.out.println(value);
	}

	private static void printVerbose(String sourceName, ImageInfo ii) {
		printLine(0, null, sourceName);
		printLine(1, ""File format: "", ii.getFormatName());
		printLine(1, ""MIME type: "", ii.getMimeType());
		printLine(1, ""Width (pixels): "", ii.getWidth(), 1);
		printLine(1, ""Height (pixels): "", ii.getHeight(), 1);
		printLine(1, ""Bits per pixel: "", ii.getBitsPerPixel(), 1);
		printLine(1, ""Progressive: "", ii.isProgressive() ? ""yes"" : ""no"");
		printLine(1, ""Number of images: "", ii.getNumberOfImages(), 1);
		printLine(1, ""Physical width (dpi): "", ii.getPhysicalWidthDpi(), 1);
		printLine(1, ""Physical height (dpi): "", ii.getPhysicalHeightDpi(), 1);
		printLine(1, ""Physical width (inches): "", ii.getPhysicalWidthInch(), 1.0f);
		printLine(1, ""Physical height (inches): "", ii.getPhysicalHeightInch(), 1.0f);
		int numComments = ii.getNumberOfComments();
		printLine(1, ""Number of textual comments: "", numComments, 1);
		if (numComments > 0) {
			for (int i = 0; i < numComments; i++) {
				printLine(2, null, ii.getComment(i));
			}
		}
	}

	private int read() throws IOException {
		if (in != null) {
			return in.read();
		} else {
			return din.readByte();
		}
	}

	private int read(byte[] a) throws IOException {
		if (in != null) {
			return in.read(a);
		} else {
			din.readFully(a);
			return a.length;
		}
	}

	private int read(byte[] a, int offset, int num) throws IOException {
		if (in != null) {
			return in.read(a, offset, num);
		} else {
			din.readFully(a, offset, num);
			return num;
		}
	}

	private String readLine() throws IOException {
		return readLine(new StringBuffer());
	}

	private String readLine(StringBuffer sb) throws IOException {
		boolean finished;
		do {
			int value = read();
			finished = (value == -1 || value == 10);
			if (!finished) {
				sb.append((char)value);
			}
		} while (!finished);
		return sb.toString();
	}

	private static void run(String sourceName, InputStream in, ImageInfo imageInfo, boolean verbose) {
		imageInfo.setInput(in);
		imageInfo.setDetermineImageNumber(true);
		imageInfo.setCollectComments(verbose);
		if (imageInfo.check()) {
			print(sourceName, imageInfo, verbose);
		}
	}

	/**
	 * Specify whether textual comments are supposed to be extracted from input.
	 * Default is <code>false</code>.
	 * If enabled, comments will be added to an internal list.
	 * @param newValue if <code>true</code>, this class will read comments
	 * @see #getNumberOfComments
	 * @see #getComment
	 */
	public void setCollectComments(boolean newValue)
	{
		collectComments = newValue;
	}

	/**
	 * Specify whether the number of images in a file is to be
	 * determined - default is <code>false</code>.
	 * This is a special option because some file formats require running over
	 * the entire file to find out the number of images, a rather time-consuming
	 * task.
	 * Not all file formats support more than one image.
	 * If this method is called with <code>true</code> as argument,
	 * the actual number of images can be queried via
	 * {@link #getNumberOfImages()} after a successful call to
	 * {@link #check()}.
	 * @param newValue will the number of images be determined?
	 * @see #getNumberOfImages
	 */
	public void setDetermineImageNumber(boolean newValue)
	{
		determineNumberOfImages = newValue;
	}

	/**
	 * Set the input stream to the argument stream (or file).
	 * Note that {@link java.io.RandomAccessFile} implements
	 * {@link java.io.DataInput}.
	 * @param dataInput the input stream to read from
	 */
	public void setInput(DataInput dataInput) {
		din = dataInput;
		in = null;
	}

	/**
	 * Set the input stream to the argument stream (or file).
	 * @param inputStream the input stream to read from
	 */
	public void setInput(InputStream inputStream) {
		in = inputStream;
		din = null;
	}

	private void setPhysicalHeightDpi(int newValue) {
		physicalWidthDpi = newValue;
	}

	private void setPhysicalWidthDpi(int newValue) {
		physicalHeightDpi = newValue;
	}

    private void skip(int num) throws IOException {
        while (num > 0) {
            long result;
            if (in != null) {
                result = in.skip(num);
            } else {
                result = din.skipBytes(num);
            }
            if (result > 0) {
                num -= result;
            } else {
                if (in != null) {
                    result = in.read();
                } else {
                    result = din.readByte();
                }
                if (result == -1) {
                	throw new IOException(""Premature end of input."");
                } else {
                	num--;
                }
            }
        }
    }
}"
net.jforum.util.CategoryOrderComparator,"public class CategoryOrderComparator implements Comparator<Category>
{
	/** 
	 * @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)
	 */
	public int compare(Category c1, Category c2) 
	{
		if (c1.getDisplayOrder() > c2.getDisplayOrder()) {
			return 1;
		}
		else if (c1.getDisplayOrder() < c2.getDisplayOrder() ) {
			return -1;
		}
		else {
			return c1.getName().compareTo(c2.getName());
		}
	}

}"
net.jforum.util.I18n,"public class I18n {
	private Map<String, Properties> messages = new HashMap<String, Properties>();
	private Properties localeNames = new Properties();
	private String defaultLocaleName;
	private JForumConfig config;

	public I18n(JForumConfig config) {
		this.config = config;
		this.loadConfiguration();
	}

	/**
	 * Changes the deafult language for the entire board
	 * @param newDefaultLanguage
	 */
	public void changeBoardDefaultLanguage(String newDefaultLanguage) {
		if (!this.isLanguageLoaded(newDefaultLanguage)) {
			this.loadLanguage(newDefaultLanguage, this.config.getValue(ConfigKeys.I18N_DEFAULT_ADMIN));
		}

		this.defaultLocaleName = newDefaultLanguage;
	}

	/**
	 * Loads a new Language. If <code>language</code> is either null or empty, or if it is already loaded, the
	 * method will return without executing any code.
	 * The language file will be merged with the default board language
	 * @param language The language to load
	 */
	public void load(String language) {
		this.loadLanguage(language, this.defaultLocaleName);
	}

	/**
	 * Gets a I18N message.
	 * @param key The message name to retrieve. Must be a valid entry into the file specified by
	 * <code>i18n.file</code> property.
	 * @param language The locale name to retrieve the messages from
	 * @param args Parameters needed by some messages. The messages with extra parameters are formated according to
	 * {@link java.text.MessageFormat}specification
	 *
	 * @return String With the message
	 */
	public String getFormattedMessage(String key, String language, Object[] args) {
		return MessageFormat.format(this.messages.get(language).getProperty(key), args);
	}

	/**
	 * @see #getMessage(String, String, Object[])
	 * @param key String
	 * @param args Object
	 * @return String
	 */
	public String getFormattedMessage(String key, Object... args) {
		return this.getFormattedMessage(key, this.defaultLocaleName, args);
	}

	public Object[] params(Object... args) {
		return args;
	}

	/**
	 * Gets an I18n message.
	 * @param key The message name to retrieve. Must be a valid entry into the file specified by <code>i18n.file</code> property.
	 * @param language The locale name to load the message from. If it is not loaded yet,
	 * a load operation will be automatically called. In case of failure to find the
	 * requested message in such locale, the default board locale will be used.
	 * @return String With the localized message
	 */
	public String getMessage(String key, String language) {
		Properties p = this.messages.get(language);

		if (p == null) {
			this.load(language);
			p = this.messages.get(language);
		}

		return p.getProperty(key);
	}

	/**
	 * Gets an I18n message from the default board locale.
	 * @param key the message key
	 * @return string with the localized message
	 */
	public String getMessage(String key) {
		return this.getMessage(key, this.defaultLocaleName);
	}

	/**
	 * Check whether the language file is loaded
	 *
	 * @param language String
	 * @return boolean
	 */
	public boolean isLanguageLoaded(String language) {
		return this.messages.containsKey(language);
	}

	/**
	 * Check if the given language exist.
	 *
	 * @param language The language to check
	 * @return <code>true</code> if the language is a valid and registered translation.
	 */
	public boolean languageExists(String language) {
		return (this.localeNames.getProperty(language) != null);
	}

	/**
	 * Start I18n, loading the locales list and default language boards
	 */
	private void loadConfiguration() {
		this.loadLocales();

		this.defaultLocaleName = this.config.getValue(ConfigKeys.I18N_DEFAULT_ADMIN);
		this.loadLanguage(defaultLocaleName, null);

		String custom = this.config.getValue(ConfigKeys.I18N_DEFAULT);

		if (!custom.equals(defaultLocaleName)) {
			this.loadLanguage(custom, defaultLocaleName);
			this.defaultLocaleName = custom;
		}
	}

	/**
	 * Load all configured locale names
	 */
	private void loadLocales() {
		try {
			this.localeNames.load(this.getClass().getResourceAsStream(""/jforumConfig/languages/locales.properties""));
		}
		catch (IOException e) {
			throw new ForumException(e);
		}
	}

	/**
	 * Load a language file
	 * @param language the language name to load
	 * @param mergeWith if not null, merge the language file with the language
	 * specified in this parameter
	 */
	private void loadLanguage(String language, String mergeWith) {
		Properties p = new Properties();

		if (mergeWith != null) {
			if (!this.isLanguageLoaded(mergeWith)) {
				this.loadLanguage(mergeWith, null);
			}

			p.putAll(this.messages.get(mergeWith));
		}

		try {
			p.load(this.getClass().getResourceAsStream(""/jforumConfig/languages/"" + this.localeNames.getProperty(language)));
		}
		catch (IOException e) {
			throw new ForumException(e);
		}

		this.messages.put(language, p);
	}
}"
net.jforum.util.URLBuilder,"public class URLBuilder {
	/**
	 * Builds an URL by adding a '/' between each argument, and "".page"" in the end
	 * @param args The parts of the URL to build
	 * @return the URL
	 */
	public static String build(Object... args) {
		StringBuilder sb = new StringBuilder().append('/');

		for (int i = 0; i < args.length - 1; i++) {
			sb.append(args[i]).append('/');
		}

		sb.append(args[args.length - 1]);

		return sb.toString();
	}
}"
net.jforum.util.UploadUtils,"public class UploadUtils {
	private UploadedFile uploadedFile;

	public UploadUtils(UploadedFile uploadedFile) {
		this.uploadedFile = uploadedFile;
	}

	public String getExtension() {
		String fileName = this.uploadedFile.getFileName();
		return fileName.substring(fileName.lastIndexOf('.') + 1);
	}

	public void saveUploadedFile(String filename) {
		BufferedInputStream inputStream = null;
		FileOutputStream outputStream = null;

		try {
			inputStream = new BufferedInputStream(this.uploadedFile.getFile());
			outputStream = new FileOutputStream(filename);

			int c;
			byte[] b = new byte[4096];
			while ((c = inputStream.read(b)) != -1) {
				outputStream.write(b, 0, c);
			}
		}
		catch (IOException e) {
			throw new ForumException(e);
		}
		finally {
			try {
				outputStream.flush();
				outputStream.close();

				inputStream.close();
			}
			catch (Exception e) {
			}
		}
	}
}"
net.jforum.util.GroupInteractionFilter,"public class GroupInteractionFilter {
	/**
	 * Filter the property bag for forums/show, based on group interaction
	 * settings
	 *
	 * @param propertyBag the property bag for the ""show"" method of the {@link ForumController} action
	 * @param userSession the user session of the current logged user
	 */
	public void filterForumListing(Result result, UserSession userSession) {
		@SuppressWarnings(""unchecked"")
		Collection<UserSession> sessions = (Collection<UserSession>) result.included().get(""onlineUsers"");

		if (sessions == null) {
			sessions = new ArrayList<UserSession>();
		}

		Set<UserSession> newSessions = new HashSet<UserSession>();
		User currentUser = userSession.getUser();

		for (Group group : currentUser.getGroups()) {
			for (UserSession anotherUserSession : sessions) {
				User user = anotherUserSession.getUser();

				if (user != null && user.getGroups().contains(group)) {
					newSessions.add(anotherUserSession);
				}
			}
		}

		result.include(""totalLoggedUsers"", newSessions.size());
		result.include(""onlineUsers"", newSessions);
	}
}"
net.jforum.util.SecurityConstants,"public class SecurityConstants {
	public static final String ADMINISTRATOR = ""administrator"";
	public static final String APPROVE_MESSAGES = ""approve_messages"";
	public static final String ATTACHMENTS_ENABLED = ""attachments_enabled"";
	public static final String ATTACHMENTS_DOWNLOAD = ""attachments_download"";
	public static final String CATEGORY = ""category"";
	public static final String CREATE_STICKY_ANNOUNCEMENT_TOPICS = ""create_sticky_announcement_topics"";
	public static final String FORUM = ""forum"";
	public static final String FORUM_READ_ONLY = ""forum_read_only"";
	public static final String FORUM_REPLY_ONLY = ""forum_reply_only"";
	public static final String HTML_ALLOWED = ""html_allowed"";
	public static final String MODERATOR = ""moderator"";
	public static final String MODERATE_REPLIES = ""moderate_replies"";
	public static final String MODERATE_FORUM = ""moderate_forum"";
	public static final String POST_DELETE = ""post_delete"";
	public static final String POST_EDIT = ""post_edit"";
	public static final String POLL_CREATE = ""poll_create"";
	public static final String POLL_VOTE = ""poll_vote"";
	public static final String TOPIC_MOVE = ""topic_move"";
	public static final String TOPIC_LOCK_UNLOCK = ""topic_lock_unlock"";
	public static final String VIEW_MODERATION_LOG = ""view_moderation_log"";
	public static final String VIEW_FULL_MODERATION_LOG = ""view_full_moderation_log"";
	public static final String INTERACT_OTHER_GROUPS = ""interact_other_groups"";
	public static final String CAN_MANAGE_FORUMS = ""can_manage_forums"";
	public static final String CO_ADMINISTRATOR = ""co_administrator"";
	public static final String GROUPS = ""groups"";
	public static final String PRIVATE_MESSAGE = ""private_message"";
	public static final String USER_LISTING = ""user_listing"";
	public static final String VIEW_PROFILE = ""view_profile"";
	public static final String PROFILE_PICTURE = ""profile_picture"";
	public static final String POST_ONLY_WITH_MODERATOR_ONLINE = ""post_only_with_moderator_online"";
	public static final String PM_ONLY_TO_MODERATORS = ""pm_only_to_moderators"";

	private SecurityConstants() {}
}"
net.jforum.util.mail.TopicReplySpammer,"public class TopicReplySpammer extends Spammer {
	public TopicReplySpammer(JForumConfig config) throws MailException {
		super(config);
	}

	/**
	 * Creates a new instance with a message's contents send
	 *
	 * @param topic the topic we are replying to
	 * @param post the post instance, with the message's contents. If null, only a notification will be sent
	 * @param users list of users who'll be notified
	 */
	public void prepare(Topic topic, List<User> users) {
		int postsPerPage = this.getConfig().getInt(ConfigKeys.POSTS_PER_PAGE);

		Pagination pagination = new Pagination(this.getConfig(), 0).forTopic(topic);

		String page = """";

		if (topic.getTotalReplies() >= postsPerPage) {
			page = pagination.getStart() + ""/"";
		}

		String forumLink = this.buildForumLink();

		String path = this.buildMessageLink(topic, page, forumLink);
		String unwatch = this.buildUnwatchLink(topic, forumLink);

		Map<String, Object> params = new HashMap<String, Object>();

		params.put(""topic"", topic);
		params.put(""path"", path);
		params.put(""unwatch"", unwatch);

		this.setUsers(users);
		this.setTemplateParams(params);

		String subject = this.getConfig().getValue(ConfigKeys.MAIL_NEW_ANSWER_SUBJECT);

		this.prepareMessage(MessageFormat.format(subject, topic.getSubject()),
			this.getConfig().getValue(ConfigKeys.MAIL_NEW_ANSWER_MESSAGE_FILE));
	}

	/**
	 * Creates the ""unwatch"" link for the current topic
	 *
	 * @param topic the topic
	 * @param forumLink the forum's link
	 * @return the unwath link
	 */
	private String buildUnwatchLink(Topic topic, String forumLink) {
		return new StringBuilder(128)
			.append(forumLink)
			.append(""topics/unwatch/"")
			.append(topic.getId())
			.append(this.getConfig().getValue(ConfigKeys.SERVLET_EXTENSION))
			.toString();
	}

	/**
	 * Creates the link to read the message online
	 *
	 * @param topic the topic
	 * @param page the current topic's page
	 * @param forumLink the forum's link
	 * @return the link to the message
	 */
	private String buildMessageLink(Topic topic, String page, String forumLink) {
		return new StringBuilder(128)
			.append(forumLink)
			.append(""topics/list/"")
			.append(page)
			.append(topic.getId())
			.append(this.getConfig().getValue(ConfigKeys.SERVLET_EXTENSION))
			.append('#')
			.append(topic.getLastPost().getId())
			.toString();
	}
}"
net.jforum.util.mail.SpammerFactory,"public class SpammerFactory {
	private JForumConfig config;

	public SpammerFactory(JForumConfig config) {
		this.config = config;
	}

	/**
	 * Creates a {@link TopicReplySpammer} istance
	 * @param topic the topic being replies
	 * @param users the list of users who should be notified
	 * @return the spammer instance
	 */
	public Spammer newTopicReply(Topic topic, List<User> users) {
		TopicReplySpammer spammer = new TopicReplySpammer(this.config);
		spammer.prepare(topic, users);

		return spammer;
	}
}"
net.jforum.util.mail.ActivationKeySpammer,"public class ActivationKeySpammer extends Spammer {
	public ActivationKeySpammer(JForumConfig config) throws MailException {
		super(config);
	}

	public void prepare(User user) {
		String url = new StringBuilder()
			.append(this.buildForumLink())
			.append(""user/activateAccount/"")
			.append(user.getActivationKey())
			.append('/')
			.append(user.getId())
			.append(this.getConfig().getValue(ConfigKeys.SERVLET_EXTENSION))
			.toString();

		String manualUrl = new StringBuilder()
			.append(this.buildForumLink())
			.append(""user/activateManually"")
			.append(this.getConfig().getValue(ConfigKeys.SERVLET_EXTENSION))
			.toString();

		Map<String, Object> params = new HashMap<String, Object>();
		params.put(""url"", url);
		params.put(""user"", user);
		params.put(""manualUrl"", manualUrl);

		List<User> recipients = new ArrayList<User>();
		recipients.add(user);

		this.setUsers(recipients);
		this.setTemplateParams(params);

		this.prepareMessage(this.getConfig().getValue(ConfigKeys.MAIL_ACTIVATION_KEY_SUBJECT),
			this.getConfig().getValue(ConfigKeys.MAIL_ACTIVATION_KEY_MESSAGE_FILE));
	}
}"
net.jforum.util.mail.SpammerTaskExecutor,"public class SpammerTaskExecutor {
	private TaskExecutor taskExecutor;

	public SpammerTaskExecutor(TaskExecutor taskExecutor) {
		this.taskExecutor = taskExecutor;
	}

	public void dispatch(Spammer spammer) {
		this.taskExecutor.execute(new EmailSenderTask(spammer));
	}
}"
net.jforum.util.mail.EmailSenderTask,"public class EmailSenderTask implements Runnable {
	private static final Logger logger = Logger.getLogger(EmailSenderTask.class);

	private final Spammer spammer;

	public EmailSenderTask(Spammer spammer) {
		this.spammer = spammer;
	}

	/**
	 * @see java.lang.Runnable#run()
	 */
	public void run() {
		if (logger.isTraceEnabled()) {
			logger.trace(""Running job for "" + spammer);
		}

		this.spammer.dispatchMessages();
	}
}"
net.jforum.util.mail.MessageId,"public class MessageId {
	private int topicId;

	/**
	 * Returns the topic id this header holds.
	 *
	 * @return the topic id represented by this instance
	 */
	public int getTopicId() {
		return this.topicId;
	}

	/**
	 * Constructs the Message-ID header. The form is ""&lt;postId.topicId.forumId.randomNumber@jforum&gt;"".
	 *
	 * @param postId the post id of this message
	 * @param topicId the topic id of this message
	 * @param forumId the forum id of this message
	 * @return the Message-ID header
	 */
	public static String buildMessageId(int postId, int topicId, int forumId) {
		return new StringBuffer()
			.append('<')
			.append(postId)
			.append('.')
			.append(topicId)
			.append('.')
			.append(forumId)
			.append('.')
			.append(System.currentTimeMillis())
			.append(MD5.hash(Long.toString(System.currentTimeMillis())))
			.append(""@jforum>"").toString();
	}

	/**
	 * Constructs the In-Reply-To header.
	 * The form is ""&lt;topicFirstPostId.topicId.forumId.randomNumber@jforum&gt;"".
	 *
	 * @param topic The topic we're replying to. It should have at least the
	 * values for {@link Topic#getFirstPostId()}, {@link Topic#getId()} and {@link Topic#getForumId()}
	 * @return the In-Reply-To header
	 */
	public static String buildInReplyTo(Topic topic) {
		return buildMessageId(topic.getFirstPost().getId(), topic.getId(), topic.getForum().getId());
	}

	/**
	 * Parses the header, extracting the information it holds
	 *
	 * @param header the header's contents to parse
	 * @return the header information parsed
	 */
	public static MessageId parse(String header) {
		MessageId messageId = new MessageId();

		if (header != null) {
			// <postId.topicId.forumId.randomNumber@host>
			Matcher matcher = Pattern.compile(""<(.*?)\\.(.*?)\\.(.*?)\\.(.*?)@.*>"").matcher(header);

			if (matcher.matches()) {
				String s = matcher.group(2);

				try {
					messageId.topicId = Integer.parseInt(s);
				}
				catch (Exception e) { }
			}
		}

		return messageId;
	}
}"
net.jforum.util.mail.LostPasswordSpammer,"public class LostPasswordSpammer extends Spammer {
	public LostPasswordSpammer(JForumConfig config) throws MailException {
		super(config);
	}

	public void prepare(User user, String mailSubject) {
		String url = new StringBuilder()
			.append(this.buildForumLink())
			.append(""user/recoverPassword/"")
			.append(user.getActivationKey())
			.append(this.getConfig().getValue(ConfigKeys.SERVLET_EXTENSION))
			.toString();

		Map<String, Object> params = new HashMap<String, Object>();
		params.put(""url"", url);
		params.put(""user"", user);

		List<User> recipients = new ArrayList<User>();
		recipients.add(user);

		this.setUsers(recipients);
		this.setTemplateParams(params);

		super.prepareMessage(mailSubject, this.getConfig().getValue(ConfigKeys.MAIL_LOST_PASSWORD_MESSAGE_FILE));
	}
}"
net.jforum.util.mail.IdentifiableMimeMessage,"public class IdentifiableMimeMessage extends MimeMessage {
	private String messageId;

	public IdentifiableMimeMessage(Session session) {
		super(session);
	}

	/**
	 * Sets the Message-ID header for this message
	 *
	 * @param messageId the Message-ID
	 */
	public void setMessageId(String messageId) {
		this.messageId = messageId;
	}

	/**
	 * @see javax.mail.internet.MimeMessage#updateMessageID()
	 */
	@Override
	protected void updateMessageID() throws MessagingException {
		if (this.messageId != null) {
			this.addHeader(""Message-ID"", this.messageId);
		}
		else {
			super.updateMessageID();
		}
	}
}"
net.jforum.util.mail.PrivateMessageSpammer,"public class PrivateMessageSpammer extends Spammer {
	public PrivateMessageSpammer(JForumConfig config) throws MailException {
		super(config);
	}

	public void prepare(User user) {
		if (StringUtils.isEmpty(user.getEmail())) {
			return;
		}

		String path = new StringBuilder(128)
			.append(this.buildForumLink())
			.append(""pm/inbox"")
			.append(this.getConfig().getValue(ConfigKeys.SERVLET_EXTENSION))
			.toString();

		Map<String, Object> params = new HashMap<String, Object>();
		params.put(""path"", path);
		params.put(""user"", user);

		List<User> recipients = new ArrayList<User>();
		recipients.add(user);

		this.setUsers(recipients);
		this.setTemplateParams(params);

		super.prepareMessage(this.getConfig().getValue(ConfigKeys.MAIL_NEW_PM_SUBJECT),
			this.getConfig().getValue(ConfigKeys.MAIL_NEW_PM_MESSAGE_FILE));
	}
}"
net.jforum.util.mail.Spammer,"public abstract class Spammer {
	private static final Logger logger = Logger.getLogger(Spammer.class);

	private static final int MESSAGE_HTML = 0;
	private static final int MESSAGE_TEXT = 1;

	private Session session;
	private String username;
	private String password;
	private String messageId;
	private String inReplyTo;
	private int messageFormat;
	private boolean needCustomization;
	private MimeMessage message;
	private JForumConfig config;
	private File templateFile;
	private List<User> users = new ArrayList<User>();
	private Properties mailProperties = new Properties();
	private Map<String, Object> templateParams = new HashMap<String, Object>();
	private TemplateEngine templateEngine = new SimpleTemplateEngine();

	public Spammer(JForumConfig config) throws MailException {
		this.config = config;

		boolean ssl = config.getBoolean(ConfigKeys.MAIL_SMTP_SSL);

		String hostProperty = this.hostProperty(ssl);
		String portProperty = this.portProperty(ssl);
		String authProperty = this.authProperty(ssl);
		String localhostProperty = this.localhostProperty(ssl);

		this.mailProperties.put(hostProperty, config.getValue(ConfigKeys.MAIL_SMTP_HOST));
		this.mailProperties.put(portProperty, config.getValue(ConfigKeys.MAIL_SMTP_PORT));

		String localhost = this.config.getValue(ConfigKeys.MAIL_SMTP_LOCALHOST);

		if (!StringUtils.isEmpty(localhost)) {
			this.mailProperties.put(localhostProperty, localhost);
		}

		this.mailProperties.put(""mail.mime.address.strict"", ""false"");
		this.mailProperties.put(""mail.mime.charset"", this.config.getValue(ConfigKeys.MAIL_CHARSET));
		this.mailProperties.put(authProperty, this.config.getValue(ConfigKeys.MAIL_SMTP_AUTH));

		this.username = this.config.getValue(ConfigKeys.MAIL_SMTP_USERNAME);
		this.password = this.config.getValue(ConfigKeys.MAIL_SMTP_PASSWORD);

		messageFormat = this.config.getValue(ConfigKeys.MAIL_MESSSAGE_FORMAT).equals(""html"")
			? MESSAGE_HTML
			: MESSAGE_TEXT;

		this.session = Session.getInstance(mailProperties);
	}

	public boolean dispatchMessages() {
		try {
			if (this.config.getBoolean(ConfigKeys.MAIL_SMTP_AUTH)) {
				this.dispatchAuthenticatedMessage();
			}
			else {
				this.dispatchAnonymousMessage();
			}
		}
		catch (MessagingException e) {
			logger.error(""Error while dispatching the message."" + e, e);
		}

		return true;
	}

	protected JForumConfig getConfig() {
		return this.config;
	}

	private void dispatchAnonymousMessage() throws AddressException, MessagingException {
		int sendDelay = this.config.getInt(ConfigKeys.MAIL_SMTP_DELAY);

		for (User user : this.users) {
			if (StringUtils.isEmpty(user.getEmail())) {
				continue;
			}

			if (this.needCustomization) {
				this.defineUserMessage(user);
			}

			Address address = new InternetAddress(user.getEmail());

			if (logger.isTraceEnabled()) {
				logger.trace(""Sending mail to: "" + user.getEmail());
			}

			this.message.setRecipient(Message.RecipientType.TO, address);
			Transport.send(this.message, new Address[] { address });

			if (sendDelay > 0) {
				this.waitUntilNextMessage(sendDelay);
			}
		}
	}

	private void dispatchAuthenticatedMessage() throws NoSuchProviderException {
		if (!StringUtils.isEmpty(username) && !StringUtils.isEmpty(password)) {
			int batchSize = this.config.getInt(ConfigKeys.MAIL_BATCH_SIZE);
			int total = (int)Math.ceil((double)this.users.size() / (double)batchSize);

			Iterator<User> iterator = this.users.iterator();

			for (int i = 0; i < total; i++) {
				this.dispatchNoMoreThanBatchSize(iterator, batchSize);
			}
		}
	}

	private void dispatchNoMoreThanBatchSize(Iterator<User> iterator, int batchSize) throws NoSuchProviderException {
		boolean ssl = this.config.getBoolean(ConfigKeys.MAIL_SMTP_SSL);
		Transport transport = this.session.getTransport(ssl ? ""smtps"" : ""smtp"");

		try {
			String host = this.config.getValue(ConfigKeys.MAIL_SMTP_HOST);
			int sendDelay = this.config.getInt(ConfigKeys.MAIL_SMTP_DELAY);

			transport.connect(host, username, password);

			if (transport.isConnected()) {
				for (int counter = 0; counter < batchSize && iterator.hasNext(); counter++) {
					User user = iterator.next();

					if (StringUtils.isEmpty(user.getEmail())) {
						continue;
					}

					if (this.needCustomization) {
						this.defineUserMessage(user);
					}

					Address address = new InternetAddress(user.getEmail());

					if (logger.isDebugEnabled()) {
						logger.debug(""Sending mail to: "" + user.getEmail());
					}

					this.message.setRecipient(Message.RecipientType.TO, address);
					transport.sendMessage(this.message, new Address[] { address });

					if (sendDelay > 0) {
						this.waitUntilNextMessage(sendDelay);
					}
				}
			}
		}
		catch (Exception e) {
			logger.error(""Errow while sending emails: "" + e, e);
			throw new MailException(e);
		}
		finally {
			try {
				transport.close();
			}
			catch (Exception e) { }
		}
	}

	private void defineUserMessage(User user) {
		try {
			this.templateParams.put(""user"", user);

			String text = this.processTemplate();

			this.defineMessageText(text);
		}
		catch (Exception e) {
			throw new MailException(e);
		}
	}

	private void waitUntilNextMessage(int sendDelay) {
		try {
			Thread.sleep(sendDelay);
		}
		catch (InterruptedException ie) {
			logger.error(""Error while Thread.sleep."" + ie, ie);
		}
	}

	/**
	 * Prepares the mail message for sending.
	 *
	 * @param subject the subject of the email
	 * @param messageFile the path to the mail message template
	 * @throws MailException
	 */
	protected void prepareMessage(String subject, String messageFile) throws MailException {
		if (this.messageId == null) {
			this.message = new MimeMessage(session);
		}
		else {
			this.message = new IdentifiableMimeMessage(session);
			((IdentifiableMimeMessage) this.message).setMessageId(this.messageId);
		}

		this.templateParams.put(""forumName"", this.config.getValue(ConfigKeys.FORUM_NAME));

		try {
			this.message.setSentDate(new Date());
			this.message.setFrom(new InternetAddress(this.config.getValue(ConfigKeys.MAIL_SENDER)));
			this.message.setSubject(subject, this.config.getValue(ConfigKeys.MAIL_CHARSET));

			if (this.inReplyTo != null) {
				this.message.addHeader(""In-Reply-To"", this.inReplyTo);
			}

			this.createTemplate(messageFile);
			this.needCustomization = this.isCustomizationNeeded();

			// If we don't need to customize any part of the message,
			// then build the generic text right now
			if (!this.needCustomization) {
				String text = this.processTemplate();
				this.defineMessageText(text);
			}
		}
		catch (Exception e) {
			throw new MailException(e);
		}
	}

	/**
	 * Set the text contents of the email we're sending
	 *
	 * @param text the text to set
	 * @throws MessagingException
	 */
	private void defineMessageText(String text) throws MessagingException {

		if (messageFormat == MESSAGE_TEXT) {
			this.message.setText(text);
		}
		else {
			String charset = this.config.getValue(ConfigKeys.MAIL_CHARSET);
			this.message.setContent(text.replaceAll(""\n"", ""<br />""), ""text/html; charset="" + charset);
		}
	}

	/**
	 * Gets the message text to send in the email.
	 *
	 * @param templateName The file with the email template, relative to the application root
	 * @return The email message text
	 * @throws Exception
	 */
	protected void createTemplate(String templateName) throws Exception {
		this.templateFile = new File(this.config.getValue(ConfigKeys.APPLICATION_PATH) + templateName);
	}

	/**
	 * Merge the template data, creating the final content. T
	 * his method should only be called after {@link #createTemplate(String)} and
	 * {@link #setTemplateParams(SimpleHash)}
	 *
	 * @return the generated content
	 */
	protected String processTemplate() throws Exception {
		return this.templateEngine.createTemplate(this.templateFile)
			.make(this.templateParams).toString();
	}

	/**
	 * Set the parameters for the template being processed
	 *
	 * @param params the parameters to the template
	 */
	protected void setTemplateParams(Map<String, Object> params) {
		this.templateParams = params;
	}

	/**
	 * Check if we have to send customized emails
	 *
	 * @return true if there is a need for customized emails
	 */
	private boolean isCustomizationNeeded() {
		for (User user : this.users) {
			if (user.getNotifyText()) {
				return true;
			}
		}

		return false;
	}

	protected String buildForumLink() {
		String forumLink = this.getConfig().getValue(ConfigKeys.FORUM_LINK);

		if (forumLink.charAt(forumLink.length() - 1) != '/') {
			forumLink += ""/"";
		}
		return forumLink;
	}

	protected void setMessageId(String messageId) {
		this.messageId = messageId;
	}

	protected void setInReplyTo(String inReplyTo) {
		this.inReplyTo = inReplyTo;
	}

	protected void setUsers(List<User> users) {
		this.users = users;
	}

	private String localhostProperty(boolean ssl) {
		return ssl ? ConfigKeys.MAIL_SMTP_SSL_LOCALHOST : ConfigKeys.MAIL_SMTP_LOCALHOST;
	}

	private String authProperty(boolean ssl) {
		return ssl ? ConfigKeys.MAIL_SMTP_SSL_AUTH : ConfigKeys.MAIL_SMTP_AUTH;
	}

	private String portProperty(boolean ssl) {
		return ssl ? ConfigKeys.MAIL_SMTP_SSL_PORT : ConfigKeys.MAIL_SMTP_PORT;
	}

	private String hostProperty(boolean ssl) {
		return ssl ? ConfigKeys.MAIL_SMTP_SSL_HOST : ConfigKeys.MAIL_SMTP_HOST;
	}
}"
net.jforum.security.AccessForumRule,"public class AccessForumRule implements AccessRule {
	private TopicRepository topicRepository;

	public AccessForumRule(TopicRepository topicRepository) {
		this.topicRepository = topicRepository;
	}

	/**
	 * Applies the following rules:
	 * <ul>
	 * 	<li> User should have access to the requested topic
	 * </ul>
	 * It is expected that the parameter <i>topicId</i> or <i>forumId</i> exists in the request
	 */
	@Override
	public boolean shouldProceed(UserSession userSession, HttpServletRequest request) {
		int forumId = this.findForumId(request);
		return userSession.getRoleManager().isForumAllowed(forumId);
	}

	private int findForumId(HttpServletRequest request) {
		int forumId = 0;

		if (request.getParameterMap().containsKey(""forumId"")) {
			forumId = Integer.parseInt(request.getParameter(""forumId""));
		}
		else if (request.getParameterMap().containsKey(""topicId"")) {
			Topic topic = topicRepository.get(Integer.parseInt(request.getParameter(""topicId"")));
			forumId = topic.getForum().getId();
		}
		else {
			throw new AccessRuleException(""Could not find topicId in the current request"");
		}

		return forumId;
	}
}"
net.jforum.security.DownloadAttachmentRule,"public class DownloadAttachmentRule implements AccessRule {
	private final JForumConfig config;
	private final AttachmentRepository repository;

	public DownloadAttachmentRule(JForumConfig config, AttachmentRepository repository) {
		this.config = config;
		this.repository = repository;
	}

	/**
	 * @see net.jforum.security.AccessRule#shouldProceed(net.jforum.entities.UserSession, javax.servlet.http.HttpServletRequest)
	 */
	@Override
	public boolean shouldProceed(UserSession userSession, HttpServletRequest request) {
		if (!userSession.isLogged() && !this.config.getBoolean(ConfigKeys.ATTACHMENTS_ANONYMOUS)) {
			return false;
		}

		Attachment attachment = this.repository.get(Integer.parseInt(request.getParameter(""attachmentId"")));

		if (!userSession.getRoleManager().isAttachmentsAlllowed(attachment.getPost().getForum().getId())
			&& !userSession.getRoleManager().getCanDownloadAttachments(attachment.getPost().getForum().getId())) {
			return false;
		}

		return true;
	}
}"
net.jforum.security.AdministrationRule,"public class AdministrationRule implements AccessRule {
	/**
	 * Applies the following rules:
	 * <ul>
	 * 	<li> Must must be logged
	 * 	<li> Should be an Administrator
	 * </ul>
	 */
	@Override
	public boolean shouldProceed(UserSession userSession, HttpServletRequest request) {
		return userSession.isLogged()
			&& (userSession.getRoleManager().isAdministrator() || userSession.getRoleManager().isCoAdministrator());
	}
}"
net.jforum.security.CreateNewTopicRule,"public class CreateNewTopicRule implements AccessRule {
	private ForumRepository repository;
	private SessionManager sessionManager;

	public CreateNewTopicRule(ForumRepository repository, SessionManager sessionManager) {
		this.repository = repository;
		this.sessionManager = sessionManager;
	}

	/**
	 * Applies the following rules:
	 * <ul>
	 * 	<li> User must have access to the forum
	 * 	<li> Forum should not be read-only and not reply-only
	 * 	<li> User must be logged or anonymous posts allowed in the forum.
	 * </ul>
	 * It is expected that the parameter <i>forumId</i> or <i>topic.forum.id</i> exists in the request
	 */
	@Override
	public boolean shouldProceed(UserSession userSession, HttpServletRequest request) {
		RoleManager roleManager = userSession.getRoleManager();

		int forumId = this.findForumId(request);
		Forum forum = this.repository.get(forumId);

		return roleManager.isForumAllowed(forumId)
			&& (userSession.isLogged() || forum.isAllowAnonymousPosts())
			&& (!roleManager.isForumReadOnly(forumId) && !roleManager.isForumReplyOnly(forumId))
			&& (!roleManager.getPostOnlyWithModeratorOnline() || (roleManager.getPostOnlyWithModeratorOnline() && this.sessionManager.isModeratorOnline()));
	}

	/**
	 * Tries to find the forum id in the current request
	 */
	private int findForumId(HttpServletRequest request) {
		int forumId = 0;

		if (request.getParameterMap().containsKey(""forumId"")) {
			forumId = Integer.parseInt(request.getParameter(""forumId""));
		}
		else if (request.getParameterMap().containsKey(""topic.forum.id"")) {
			forumId = Integer.parseInt(request.getParameter(""topic.forum.id""));
		}
		else {
			throw new AccessRuleException(""Could not find forumId or topic.forum.id in the current request"");
		}

		return forumId;
	}
}"
net.jforum.security.ChangePostRule,"public class ChangePostRule implements AccessRule {
	private final PostRepository repository;
	private final SessionManager sessionManager;

	public ChangePostRule(PostRepository repository, SessionManager sessionManager) {
		this.repository = repository;
		this.sessionManager = sessionManager;
	}

	/**
	 * @see net.jforum.security.AccessRule#shouldProceed(net.jforum.entities.UserSession, javax.servlet.http.HttpServletRequest)
	 */
	@Override
	public boolean shouldProceed(UserSession userSession, HttpServletRequest request) {
		RoleManager roleManager = userSession.getRoleManager();

		if (roleManager.isAdministrator()) {
			return true;
		}

		int postId = this.findPostId(request);
		Post post = this.repository.get(postId);

		if (roleManager.isModerator() && roleManager.getCanModerateForum(post.getForum().getId())) {
			return true;
		}

		if(roleManager.getPostOnlyWithModeratorOnline() && !sessionManager.isModeratorOnline()) {
			return false;
		}

		return userSession.isLogged() && userSession.getUser().getId() == post.getUser().getId();
	}

	private int findPostId(HttpServletRequest request) {
		int postId = 0;

		if (request.getParameterMap().containsKey(""postId"")) {
			postId = Integer.parseInt(request.getParameter(""postId""));
		}
		else if (request.getParameterMap().containsKey(""post.id"")) {
			postId = Integer.parseInt(request.getParameter(""post.id""));
		}
		else {
			throw new AccessRuleException(""Could not find postId or post.id in the current request"");
		}

		return postId;
	}
}"
net.jforum.security.AuthenticatedRule,"public class AuthenticatedRule implements AccessRule {
	/**
	 * @see net.jforum.security.AccessRule#shouldProceed(net.jforum.entities.UserSession, javax.servlet.http.HttpServletRequest)
	 */
	@Override
	public boolean shouldProceed(UserSession userSession, HttpServletRequest request) {
		return userSession.isLogged();
	}

}"
net.jforum.security.ModerationRule,"public class ModerationRule implements AccessRule {
	/**
	 * @see net.jforum.security.AccessRule#shouldProceed(net.jforum.entities.UserSession, javax.servlet.http.HttpServletRequest)
	 */
	@Override
	public boolean shouldProceed(UserSession userSession, HttpServletRequest request) {
		return userSession.getRoleManager().isModerator();
	}
}"
net.jforum.security.EmptyRule,"public class EmptyRule implements AccessRule {

	/**
	 * @see net.jforum.security.AccessRule#shouldProceed(net.jforum.entities.UserSession, javax.servlet.http.HttpServletRequest)
	 */
	public boolean shouldProceed(UserSession userSession, HttpServletRequest request) {
		return false;
	}

}"
net.jforum.security.PrivateMessageEnabledRule,"public class PrivateMessageEnabledRule implements AccessRule {

	/**
	 * @see net.jforum.security.AccessRule#shouldProceed(net.jforum.entities.UserSession, javax.servlet.http.HttpServletRequest)
	 */
	@Override
	public boolean shouldProceed(UserSession userSession, HttpServletRequest request) {
		return userSession.getRoleManager().isPrivateMessageEnabled();
	}

}"
net.jforum.security.PrivateMessageOwnerRule,"public class PrivateMessageOwnerRule implements AccessRule {
	private PrivateMessageRepository repository;

	public PrivateMessageOwnerRule(PrivateMessageRepository repository) {
		this.repository = repository;
	}

	/**
	 * @see net.jforum.security.AccessRule#shouldProceed(net.jforum.entities.UserSession, javax.servlet.http.HttpServletRequest)
	 */
	@Override
	public boolean shouldProceed(UserSession userSession, HttpServletRequest request) {
		PrivateMessage pm = this.repository.get(this.findId(request));
		User currentUser = userSession.getUser();

		return pm != null && (pm.getToUser().equals(currentUser) || pm.getFromUser().equals(currentUser));
	}

	private int findId(HttpServletRequest request) {
		if (request.getParameterMap().containsKey(""id"")) {
			return Integer.parseInt(request.getParameter(""id""));
		}

		throw new AccessRuleException(""Could not find the parameter 'id' in the current request"");
	}
}"
net.jforum.security.TopicFilter,"public class TopicFilter {
	public List<Topic> filter(List<Topic> topics, RoleManager roleManager) {
		List<Topic> result = new ArrayList<Topic>();

		if (roleManager != null) {
			for (Topic topic : topics) {
				if (roleManager.isForumAllowed(topic.getForum().getId())) {
					result.add(topic);
				}
			}
		}

		return result;
	}
}"
net.jforum.security.ReplyTopicRule,"public class ReplyTopicRule implements AccessRule {
	private TopicRepository topicRepository;
	private PostRepository postRepository;
	private ForumRepository forumRepository;
	private SessionManager sessionManager;

	public ReplyTopicRule(TopicRepository topicRepository, PostRepository postRepository,
		ForumRepository forumRepository, SessionManager sessionManager) {
		this.topicRepository = topicRepository;
		this.postRepository = postRepository;
		this.forumRepository = forumRepository;
		this.sessionManager = sessionManager;
	}

	/**
	 * Applies the following rules:
	 * <ul>
	 * 	<li> User must have access to the forum
	 * 	<li> Forum should not be read-only
	 * 	<li> User must be logged or anonymous posts allowed in the forum.
	 * </ul>
	 * It is expected that the parameter <i>topicId</i>, <i>topic.forum.id</i>
	 * or <i>postId</i> exists in the request
	 */
	@Override
	public boolean shouldProceed(UserSession userSession, HttpServletRequest request) {
		RoleManager roleManager = userSession.getRoleManager();
		int forumId = this.findForumId(request);
		Forum forum = this.forumRepository.get(forumId);

		return roleManager.isForumAllowed(forumId)
			&& (userSession.isLogged() || forum.isAllowAnonymousPosts())
			&& !roleManager.isForumReadOnly(forumId)
			&& (!roleManager.getPostOnlyWithModeratorOnline() || (roleManager.getPostOnlyWithModeratorOnline() && this.sessionManager.isModeratorOnline()));
	}

	private int findForumId(HttpServletRequest request) {
		int forumId = 0;

		if (request.getParameterMap().containsKey(""topic.forum.id"")) {
			forumId = Integer.parseInt(request.getParameter(""topic.forum.id""));
		}
		else if (request.getParameterMap().containsKey(""topicId"")) {
			forumId = this.getForumIdFromTopic(Integer.parseInt(request.getParameter(""topicId"")));
		}
		else if (request.getParameterMap().containsKey(""postId"")) {
			forumId = this.getForumIdFromPost(Integer.parseInt(request.getParameter(""postId"")));
		}
		else {
			throw new AccessRuleException(""Could not find topicId, topic.forum.id or postId in the current request"");
		}

		return forumId;
	}

	private int getForumIdFromPost(int postId) {
		Post post = this.postRepository.get(postId);
		return post.getForum().getId();
	}

	private int getForumIdFromTopic(int topicId) {
		Topic topic = this.topicRepository.get(topicId);
		return topic.getForum().getId();
	}
}"
net.jforum.security.EditUserRule,"public class EditUserRule implements AccessRule {
	private final UserRepository userRepository;

	public EditUserRule(UserRepository repository) {
		this.userRepository = repository;
	}

	/**
	 * Applies the following rules:
	 * <ul>
	 * 	<li> User must be logged
	 * 	<li> His user id must be the same of the profile he wants to edit, or be an administraor
	 * </ul>
	 * It is expected that the parameter <i>userId</i> or <i>user.id</i> exists in the request
	 */
	@Override
	public boolean shouldProceed(UserSession userSession, HttpServletRequest request) {
		int userId = this.findUserId(request);
		boolean logged = userSession.isLogged();

		if (!logged) {
			return false;
		}

		User currentUser = userSession.getUser();

		if (currentUser.getId() == userId) {
			return true;
		}

		User user = userRepository.get(userId);
		return userSession.getRoleManager().getCanEditUser(user, currentUser.getGroups());
	}

	private int findUserId(HttpServletRequest request) {
		int userId = 0;

		if (request.getParameterMap().containsKey(""userId"")) {
			userId = Integer.parseInt(request.getParameter(""userId""));
		}
		else if (request.getParameterMap().containsKey(""user.id"")) {
			userId = Integer.parseInt(request.getParameter(""user.id""));
		}
		else {
			throw new AccessRuleException(""Could not find userId or user.id in the current request"");
		}

		return userId;
	}
}"
net.jforum.security.RoleManager,"public class RoleManager {
	private Map<String, Role> roles = new HashMap<String, Role>();

	/**
	 * Set the groups for this role manager
	 * This will replace any existing group that may exist already
	 * @param groups the groups to add
	 */
	public void setGroups(List<Group> groups) {
		this.roles = new HashMap<String, Role>();

		if (groups != null) {
			for (Group group : groups) {
				List<Role> currentGroupRoles = group.getRoles();

				for (Role role : currentGroupRoles) {
					Role existingRole = this.roles.get(role.getName());

					if (existingRole == null) {
						this.roles.put(role.getName(), new Role(role));
					}
					else {
						// Handle the very special case of read only and reply only
						if (role.getName().equals(SecurityConstants.FORUM_READ_ONLY)
								|| role.getName().equals(SecurityConstants.FORUM_REPLY_ONLY)) {
							existingRole.getRoleValues().retainAll(role.getRoleValues());
						}
						else {
							existingRole.getRoleValues().addAll(role.getRoleValues());
						}
					}
				}
			}

			this.readReplyOnlySecondPass(SecurityConstants.FORUM_READ_ONLY, groups);
			this.readReplyOnlySecondPass(SecurityConstants.FORUM_REPLY_ONLY, groups);
		}
	}

	private void readReplyOnlySecondPass(String roleName, List<Group> groups) {
		Role role = this.roles.get(roleName);

		if (role != null) {
			for (int forumId : new ArrayList<Integer>(role.getRoleValues())) {
				for (Group g : groups) {
					if (g.roleExists(SecurityConstants.FORUM, forumId) && !g.roleExists(roleName, forumId)) {
						role.getRoleValues().remove((Object)forumId);
					}
				}
			}
		}
	}

	public boolean getPostOnlyWithModeratorOnline() {
		return this.roleExists(SecurityConstants.POST_ONLY_WITH_MODERATOR_ONLINE);
	}

	/**
	 * Check if replies should be moderated in some forum
	 * @param forumId the forum id
	 * @return true if replies should be moderated
	 */
	public boolean isReplyModerationNeeded(int forumId) {
		return this.roleExists(SecurityConstants.MODERATE_REPLIES, forumId);
	}

	/**
	 * Check if it can download existing attachments from some forum
	 * @param forumId the forum id
	 * @return true if it can download attachments
	 */
	public boolean getCanDownloadAttachments(int forumId) {
		return this.roleExists(SecurityConstants.ATTACHMENTS_DOWNLOAD, forumId);
	}

	/**
	 * Check if it can add attachments to the messages of some forum
	 * @param forumId the forum id
	 * @return true if it can add attachments
	 */
	public boolean isAttachmentsAlllowed(int forumId) {
		return this.roleExists(SecurityConstants.ATTACHMENTS_ENABLED, forumId);
	}

	/**
	 * Check if some forum is reply only (no new messages allowed)
	 * @param forumId the forum id
	 * @return true if the forum id reply only
	 */
	public boolean isForumReplyOnly(int forumId) {
		return this.roleExists(SecurityConstants.FORUM_REPLY_ONLY, forumId);
	}

	/**
	 * Check if HTML is allowed in the messages of some forum
	 * @param forumId the forum id
	 * @return true if HTML is allowed
	 */
	public boolean isHtmlAllowed(int forumId) {
		return this.roleExists(SecurityConstants.HTML_ALLOWED, forumId);
	}

	/**
	 * Check it is a read only forum
	 * @param forumId the forum id
	 * @return true if it is a read only forum
	 */
	public boolean isForumReadOnly(int forumId) {
		return this.roleExists(SecurityConstants.FORUM_READ_ONLY, forumId);
	}

	/**
	 * Check if it can vote on existing polls
	 * @return true if it can vote on existing polls
	 */
	public boolean getCanVoteOnPolls() {
		return this.roleExists(SecurityConstants.POLL_VOTE);
	}

	/**
	 * Check if it can create polls
	 * @return true if it can create polls
	 */
	public boolean getCanCreatePolls() {
		return this.roleExists(SecurityConstants.POLL_CREATE);
	}

	/**
	 * Check if can create sticky and announcement topics
	 * @return true if can create sticky and announcement topics
	 */
	public boolean getCanCreateStickyAnnouncementTopics() {
		return this.roleExists(SecurityConstants.CREATE_STICKY_ANNOUNCEMENT_TOPICS);
	}

	/**
	 * Check if it can lock and unlock topics
	 * @return true if it can lock and unlock topics
	 */
	public boolean getCanLockUnlockTopics() {
		return this.roleExists(SecurityConstants.TOPIC_LOCK_UNLOCK);
	}

	/**
	 * Check if can move topics between forums
	 * @return true if it can move topics
	 */
	public boolean getCanMoveTopics() {
		return this.roleExists(SecurityConstants.TOPIC_MOVE);
	}

	/**
	 * Check if it can edit any message
	 * @return true if it can edit any message
	 */
	public boolean getCanEditPosts() {
		return this.roleExists(SecurityConstants.POST_EDIT);
	}

	/**
	 * Check if can remove any message
	 * @return true if it can remove any message
	 */
	public boolean getCanDeletePosts() {
		return this.roleExists(SecurityConstants.POST_DELETE);
	}

	/**
	 * Check if it can moderate some forum
	 * @param forumId the forum id
	 * @return true if it can moderate the forum
	 */
	public boolean getCanModerateForum(int forumId) {
		return isAdministrator() || this.roleExists(SecurityConstants.MODERATE_FORUM, forumId);
	}

	/**
	 * Check if it can approve messages in moderated forums
	 * @return
	 */
	public boolean getCanApproveMessages() {
		return this.roleExists(SecurityConstants.APPROVE_MESSAGES);
	}

	/**
	 * Check if it is a moderator
	 * @return true if it's a moderator
	 */
	public boolean isModerator() {
		return this.roleExists(SecurityConstants.MODERATOR);
	}

	/**
	 * Check if it has access to the forum
	 * @param forumId the forum id
	 * @return true if access is allowed
	 */
	public boolean isForumAllowed(int forumId) {
		return this.roleExists(SecurityConstants.FORUM, forumId);
	}

	/**
	 * Check if it has access to the category
	 * @param categoryId the category id
	 * @return true if access is allowed
	 */
	public boolean isCategoryAllowed(int categoryId) {
		return this.roleExists(SecurityConstants.CATEGORY, categoryId);
	}

	public boolean isCategoryModerated(List<Forum> forumsOfACategory) {
		for (Forum forum : forumsOfACategory) {
			if(this.roleExists(SecurityConstants.MODERATE_FORUM, forum.getId())) {
				return true;
			}
		}
		return false;
	}

	/**
	 * @return true if is an administrator
	 */
	public boolean isAdministrator() {
		return this.roleExists(SecurityConstants.ADMINISTRATOR);
	}

	public boolean isCoAdministrator() {
		return this.roleExists(SecurityConstants.CO_ADMINISTRATOR);
	}

	public boolean isGroupManager(int groupId) {
		return this.roleExists(SecurityConstants.GROUPS, groupId);
	}

	public boolean isPrivateMessageEnabled() {
		return this.roleExists(SecurityConstants.PRIVATE_MESSAGE);
	}

	public boolean isUserListingEnabled() {
		return this.roleExists(SecurityConstants.USER_LISTING);
	}

	public boolean getCanViewProfile() {
		return this.roleExists(SecurityConstants.VIEW_PROFILE);
	}

	public boolean getCanHaveProfilePicture() {
		return this.roleExists(SecurityConstants.PROFILE_PICTURE);
	}

	public boolean getCanOnlyContactModerators() {
		return this.roleExists(SecurityConstants.PM_ONLY_TO_MODERATORS);
	}

	/**
	 * Return all values (if any) associated to a specific role
	 * @param name the role name
	 * @return the role values (if any)
	 */
	public int[] getRoleValues(String name) {
		Role role = this.get(name);

		if (role == null || role.getRoleValues().size() == 0) {
			return new int[0];
		}

		// This is lame, but due to the dificulties of
		// working with int... versus Integer...
		// versus int[] and Integer[] in some other classes,
		// and that .toArray() does not work with int itself,
		// we do the copy by hand there.
		int[] data = new int[role.getRoleValues().size()];
		int counter = 0;
		for (int value : role.getRoleValues()) {
			data[counter++] = value;
		}

		return data;
	}

	public List<Integer> getRoleValuesAsList(String name) {
		Role role = this.get(name);
		return role != null ? role.getRoleValues() : new ArrayList<Integer>();
	}

	public boolean roleExists(String name) {
		return this.get(name) != null;
	}

	public boolean roleExists(String name, int value) {
		Role role = this.get(name);
		return role != null && role.getRoleValues().contains(value);
	}

	private Role get(String name) {
		return this.roles.get(name);
	}

	public boolean getCanEditUser(User userToEdit, List<Group> groups) {
		if (isAdministrator()) {
			return true;
		}

		for (Group group : groups) {
			for (Group group2 : userToEdit.getGroups()) {
				if (group.equals(group2)) {
					return true;
				}
			}
		}

		return false;
	}
}"
net.jforum.plugins.post.ForumLimitedTimeRepository,"public class ForumLimitedTimeRepository extends HibernateGenericDAO<ForumLimitedTime> implements Repository<ForumLimitedTime> {

	public ForumLimitedTimeRepository(Session session) {
		super(session);
	}

	/**
	 * @see net.jforum.plugins.post.ForumLimitedTimeRepository#getLimitedTime(net.jforum.entities.Forum)
	 */
	public long getLimitedTime(Forum forum) {
		ForumLimitedTime forumLimited = this.getForumLimitedTime(forum);
		return forumLimited != null ? forumLimited.getLimitedTime() : 0;
	}

	public ForumLimitedTime getForumLimitedTime(Forum forum) {
		return (ForumLimitedTime) session.createQuery(""from ForumLimitedTime f where f.forum = :forum"")
				.setParameter(""forum"", forum)
				.setMaxResults(1).uniqueResult();
	}

	/**
	 * @see net.jforum.plugins.post.ForumLimitedTimeRepository#saveOrUpdate(net.jforum.plugins.post.ForumLimitedTime)
	 */
	public void saveOrUpdate(ForumLimitedTime fourmLimitedTime) {
		session.saveOrUpdate(fourmLimitedTime);
	}
}"
net.jforum.plugins.post.ForumAdminExtension,"public class ForumAdminExtension {
	private ForumLimitedTimeRepository repository;
	private ForumRepository forumRepository;
	private JForumConfig config;
	private final Result result;
	private final UserSession userSession;

	public ForumAdminExtension(JForumConfig config, ForumRepository forumRepository,
			ForumLimitedTimeRepository repository,
			Result result, UserSession userSession) {
		this.config = config;
		this.forumRepository = forumRepository;
		this.result = result;
		this.repository = repository;
		this.userSession = userSession;
	}

	@Extends(Actions.EDIT)
	public void edit(int forumId) {
		boolean isEnabled = this.config.getBoolean(ConfigKeys.FORUM_TIME_LIMITED_ENABLE, false);

		if(isEnabled){
			Forum forum = forumRepository.get(forumId);
			long time = this.repository.getLimitedTime(forum);
			this.result.include(""forumTimeLimitedEnable"", true);
			this.result.include(""forumLimitedTime"", time);
		}
	}

	@Extends(Actions.EDITSAVE)
	public void editSave(Forum forum, long forumLimitedTime) {
		boolean isEnabled = this.config.getBoolean(ConfigKeys.FORUM_TIME_LIMITED_ENABLE, false);
		if(isEnabled){
			RoleManager roleManager = this.userSession.getRoleManager();

 			if (roleManager.isAdministrator() || roleManager.isCategoryAllowed(forum.getCategory().getId())) {
				ForumLimitedTime current = this.repository.getForumLimitedTime(forum);
				if(current == null){//maybe time limited function enabled after forum created
					current = new ForumLimitedTime();
					current.setForum(forum);
				}
				current.setLimitedTime(forumLimitedTime);
				this.repository.saveOrUpdate(current);
			}
		}
	}

	@Extends(Actions.ADD)
	public void add() {
		boolean isEnabled = this.config.getBoolean(ConfigKeys.FORUM_TIME_LIMITED_ENABLE, false);
		if(isEnabled){
			this.result.include(""fourmTimeLimitedEnable"", true);
			this.result.include(""fourmLimitedTime"", 0);
		}
	}

	@Extends(Actions.ADDSAVE)
	public void addSave(long fourmLimitedTime) {
		boolean isEnabled = this.config.getBoolean(ConfigKeys.FORUM_TIME_LIMITED_ENABLE, false);
		if(isEnabled){
			RoleManager roleManager = this.userSession.getRoleManager();

			Forum forum = (Forum) this.result.included().get(""forum"");

			if (forum != null && (roleManager.isAdministrator() || roleManager.isCategoryAllowed(forum.getCategory().getId()))) {
				if(fourmLimitedTime > 0){
					ForumLimitedTime current = new ForumLimitedTime();
					current.setForum(forum);
					current.setLimitedTime(fourmLimitedTime);
					this.repository.add(current);
				}
			}
		}
	}

	@Extends(""delete"")
	public void delete(int... forumsId) {
		boolean isEnabled = this.config.getBoolean(ConfigKeys.FORUM_TIME_LIMITED_ENABLE, false);
		if(isEnabled){
			RoleManager roleManager = this.userSession.getRoleManager();

			if (roleManager.isAdministrator()) {
				for(int forumId : forumsId){
					Forum forum = new Forum();
					forum.setId(forumId);
					ForumLimitedTime fourmLimitedTime =this.repository.getForumLimitedTime(forum);

					if(fourmLimitedTime!=null) {
						this.repository.remove(fourmLimitedTime);
					}
				}
			}
		}
	}
}"
net.jforum.plugins.post.PostEditInterceptor,"public class PostEditInterceptor implements Interceptor {
	private final ForumLimitedTimeRepository repository;
	private final PostRepository postRepository;
	private final JForumConfig config;
	private final HttpServletRequest request;
	private final Result result;
	private final UserSession userSession;
	private final SessionManager sessionManager;

	public PostEditInterceptor(PostRepository postRepository, ForumLimitedTimeRepository repository,
			JForumConfig config, HttpServletRequest request, Result result,
			UserSession userSession, SessionManager sessionManager) {
		this.postRepository = postRepository;
		this.repository = repository;
		this.config = config;
		this.userSession = userSession;
		this.request = request;
		this.result = result;
		this.sessionManager = sessionManager;
	}

	@Override
	public boolean accepts(ResourceMethod method) {
		return this.config.getBoolean(ConfigKeys.FORUM_TIME_LIMITED_ENABLE, false)
			&& method.getResource().getType().equals(PostController.class)
			&& method.getMethod().getName().equals(""edit"");
	}

	@Override
	public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws InterceptionException {
		RoleManager roleManager = userSession.getRoleManager();

		if (!roleManager.isAdministrator() && !roleManager.isModerator() && !roleManager.getCanEditPosts()) {
			int postId = Integer.parseInt(request.getParameter(""postId""));

			Post post = this.postRepository.get(postId);
			Forum forum = post.getForum();

			long time = this.repository.getLimitedTime(forum);

			if (time > 0) {
				long duration = (System.currentTimeMillis() - post.getDate().getTime()) / 1000;

				if (duration > time) {
					// TODO: Decide to where redirect the user
					throw new RuntimeException(""duration > time"");
				}
			}

			if (roleManager.getPostOnlyWithModeratorOnline() && !sessionManager.isModeratorOnline()) {
				// TODO
				throw new RuntimeException(""Posting is only allowed when moderators are online"");
			}
		}

		stack.next(method, resourceInstance);
	}
}"
net.jforum.plugins.post.ForumLimitedTime,"public class ForumLimitedTime implements Serializable {
	@Id
	@SequenceGenerator(name = ""sequence"", sequenceName = ""jforum_limited_time_seq"")
	@GeneratedValue(strategy = GenerationType.AUTO, generator = ""sequence"")
	@Column(name = ""id"")
	private int id;

	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = ""forum_id"", updatable = false,unique = true)
	private Forum forum;

	@Column(name =""limited_time"")
	private long limitedTime;

	/**
	 * @return the id
	 */
	public int getId() {
		return id;
	}

	/**
	 * @param id the id to set
	 */
	public void setId(int id) {
		this.id = id;
	}

	/**
	 * @return the forum
	 */
	public Forum getForum() {
		return forum;
	}

	/**
	 * @param forum the forum to set
	 */
	public void setForum(Forum forum) {
		this.forum = forum;
	}

	/**
	 * @return the limitedTime
	 */
	public long getLimitedTime() {
		return limitedTime;
	}

	/**
	 * @param limitedTime the limitedTime to set
	 */
	public void setLimitedTime(long limitedTime) {
		this.limitedTime = limitedTime;
	}
}"
net.jforum.formatters.SafeHtmlAttributesFormatter,"public class SafeHtmlAttributesFormatter implements Formatter {
	private SafeHtml safeHtml;

	public SafeHtmlAttributesFormatter(SafeHtml safeHtml) {
		this.safeHtml = safeHtml;
	}

	/**
	 * @see net.jforum.formatters.Formatter#format(java.lang.String, net.jforum.formatters.PostOptions)
	 */
	@Override
	public String format(String text, PostOptions postOptions) {
		return this.safeHtml.ensureAllAttributesAreSafe(text);
	}
}"
net.jforum.formatters.BBConfigFormatter,"public class BBConfigFormatter implements Formatter {
	private Map<String, BBCode> bbTags = new LinkedHashMap<String, BBCode>();
	private Map<String, BBCode> alwaysProcessTags = new LinkedHashMap<String, BBCode>();

	public BBConfigFormatter() {
		BBCodeConfigParser parser = new BBCodeConfigParser(this);
		parser.parse();
	}

	public void addBb(BBCode code) {
		if (code.alwaysProcess()) {
			this.alwaysProcessTags.put(code.getTagName(), code);
		}
		else {
			this.bbTags.put(code.getTagName(), code);
		}
	}

	/**
	 * @see net.jforum.formatters.Formatter#format(java.lang.String, net.jforum.formatters.PostOptions)
	 */
	@Override
	public String format(String text, PostOptions postOptions) {
		boolean hasTags = this.hasTags(text);

		if (postOptions.isBbCodeEnabled() && hasTags) {
			text = this.processBB(text, postOptions);
		}

		text = this.formatAlwaysProcessBBCodes(text);

		return text;
	}

	/**
	 * Applies bb code formatting to the text
	 *
	 * @param text the contents to be formatted
	 * @param options post options
	 * @return the formatted text
	 */
	private String processBB(String text, PostOptions options) {
		String startCodeFragment = ""[code"";
		String endCodeFragment = ""[/code]"";

		int codeIndex = text.indexOf(startCodeFragment);
		int codeEndIndex = codeIndex > -1 ? text.indexOf(endCodeFragment) : -1;

		if (codeIndex == -1 || codeEndIndex == -1 || codeEndIndex < codeIndex) {
			text = this.processBBExceptCodeTag(text, options);
		}
		else {
			int nextStartPos = 0;
			StringBuilder result = new StringBuilder(text.length());

			// Applies formatting in steps, as all contents inside a [code] tag
			// should be considered as plain text, thus not being elegible for processing
			while (codeIndex > -1 && codeEndIndex > -1 && codeEndIndex > codeIndex) {
				codeEndIndex += endCodeFragment.length();

				// Format only the text between [code] and [/code]
				String codeResult = this.processCodeTag(text.substring(codeIndex, codeEndIndex));

				// Format the text before [code]
				String nonCodeResult = this.processBBExceptCodeTag(text.substring(nextStartPos, codeIndex), options);

				result.append(nonCodeResult).append(codeResult);

				nextStartPos = codeEndIndex;
				codeIndex = text.indexOf(startCodeFragment, codeEndIndex);
				codeEndIndex = codeIndex > -1 ? text.indexOf(endCodeFragment, codeIndex) : -1;
			}

			if (nextStartPos > -1) {
				String nonCodeResult = processBBExceptCodeTag(text.substring(nextStartPos), options);
				result.append(nonCodeResult);
			}

			text = result.toString();
		}

		return text;
	}

	/**
	 * Formats only the [code] tag
	 *
	 * @param text the text to format
	 * @return the formatted text
	 */
	private String processCodeTag(String text) {
		for (BBCode bb : this.bbTags.values()) {
			// There is ""code"" and ""code-highlight""
			if (bb.getTagName().startsWith(""code"")) {
				Matcher matcher = Pattern.compile(bb.getRegex()).matcher(text);
				StringBuilder sb = new StringBuilder(text);

				while (matcher.find()) {
					String lang = null;
					String contents = null;

					if (""code"".equals(bb.getTagName())) {
					    contents = matcher.group(1);
					}
					else {
						lang = matcher.group(1);
						contents = matcher.group(2);
					}

					contents = StringUtils.replace(contents, ""<br/> "", ""\n"");

					// XML-like tags
					contents = StringUtils.replace(contents, ""<"", ""&lt;"");
					contents = StringUtils.replace(contents, "">"", ""&gt;"");

					// Note: there is no replacing for spaces and tabs as
					// we are relying on the Javascript SyntaxHighlighter library
					// to do it for us

					StringBuilder replace = new StringBuilder(bb.getReplace());
					int index = replace.indexOf(""$1"");

					if (""code"".equals(bb.getTagName())) {
						if (index > -1) {
							replace.replace(index, index + 2, contents.toString());
						}

						index = sb.indexOf(""[code]"");
					}
					else {
						if (index > -1) {
							replace.replace(index, index + 2, lang.toString());
						}

						index = replace.indexOf(""$2"");

						if (index > -1) {
							replace.replace(index, index + 2, contents.toString());
						}

						index = sb.indexOf(""[code="");
					}

					int lastIndex = sb.indexOf(""[/code]"", index) + ""[/code]"".length();

					if (lastIndex > index) {
						sb.replace(index, lastIndex, replace.toString());
					}
				}

				text = sb.toString();
			}
		}

		return text;
	}

	/**
	 * Process all bb codes, except [code]
	 *
	 * @param text the text to format
	 * @param options post options
	 * @return the formatted text
	 */
	private String processBBExceptCodeTag(String text, PostOptions options) {
		for (BBCode bb : this.bbTags.values()) {
			if (!bb.getTagName().startsWith(""code"")) {
				text = text.replaceAll(bb.getRegex(), bb.getReplace());
			}
		}

		return text;
	}

	/**
	 * Process the bb tags that always should be applied
	 *
	 * @param text the text to format
	 * @return the formatted text
	 */
	private String formatAlwaysProcessBBCodes(String text) {
		for (BBCode bb : this.alwaysProcessTags.values()) {
			text = text.replaceAll(bb.getRegex(), bb.getReplace());
		}

		return text;
	}

	/**
	 * Checks if there is any bb tag in the text
	 *
	 * @param text the text to search for tags
	 * @return true if there is at least one tag in the text
	 */
	private boolean hasTags(String text) {
		return text.indexOf('[') > -1 && text.indexOf(']') > -1;
	}
}"
net.jforum.formatters.PostFormatters,"public class PostFormatters extends ArrayList<Formatter> {
	public PostFormatters(JForumConfig config, Container container) throws Exception {

		List<String> formatters = config.getValueAsList(ConfigKeys.MESSAGE_FORMATTERS);

		for (String name : formatters) {
			Class<? extends Formatter> k = (Class<? extends Formatter>)Class.forName(name);
			add(container.instanceFor(k));
		}
	}
}"
net.jforum.formatters.HtmlEntitiesFormatter,"public class HtmlEntitiesFormatter implements Formatter {
	/**
	 * @see net.jforum.formatters.Formatter#format(java.lang.String, PostOptions)
	 */
	@Override
	public String format(String text, PostOptions postOptions) {
		if (!postOptions.isHtmlEnabled()) {
			text = StringUtils.replace(text, ""<"", ""&lt;"");
			text = StringUtils.replace(text, "">"", ""&gt;"");
		}

		return text;
	}
}"
net.jforum.formatters.SmiliesFormatter,"public class SmiliesFormatter implements Formatter {
	private JForumConfig config;
	private Container container;

	public SmiliesFormatter(JForumConfig config, Container container) {
		this.config = config;
		this.container = container;
	}

	/**
	 * @see net.jforum.formatters.Formatter#format(java.lang.String, net.jforum.formatters.PostOptions)
	 */
	@Override
	public String format(String text, PostOptions postOptions) {
		SmilieRepository repository = container.instanceFor(SmilieRepository.class);

		if (postOptions.isSmiliesEnabled()) {
			for (Smilie smilie : repository.getAllSmilies()) {
				text = StringUtils.replace(text, smilie.getCode(),
					this.imageTag(smilie.getDiskName(), postOptions.contextPath()));
			}
		}

		return text;
	}

	private String imageTag(String filename, String contextPath) {
		return new StringBuilder(128)
			.append(""<img src='"")
			.append(contextPath)
			.append('/')
			.append(this.config.getValue(ConfigKeys.SMILIE_IMAGE_DIR))
			.append('/')
			.append(filename).append(""' border='0'/>"")
			.toString();
	}
}"
net.jforum.formatters.PostOptions,"public class PostOptions {
	private boolean htmlEnabled;
	private boolean smiliesEnabled;
	private boolean bbCodeEnabled;
	private boolean appendSignature;
	private String contextPath;
	
	public PostOptions(boolean htmlEnabled, boolean smiliesEnabled, 
			boolean bbCodeEnabled, boolean appendSignature, String contextPath) {
		this.htmlEnabled = htmlEnabled;
		this.smiliesEnabled = smiliesEnabled;
		this.bbCodeEnabled = bbCodeEnabled;
		this.appendSignature = appendSignature;
		this.contextPath = contextPath;
	}

	public boolean isHtmlEnabled() {
		return this.htmlEnabled;
	}
	
	public boolean isSmiliesEnabled() {
		return this.smiliesEnabled;	
	}
	
	public boolean isBbCodeEnabled() {
		return this.bbCodeEnabled;
	}
	
	public boolean appendSignature() {
		return this.appendSignature;
	}
	
	public String contextPath() {
		return this.contextPath;
	}
}"
net.jforum.formatters.BBCodeConfigParser,"public class BBCodeConfigParser extends DefaultHandler {
	private BBConfigFormatter formatter;
	private String tagName = """";
	private StringBuffer sb;
	private BBCode bb;

	/**
	 * @param configFile bb_config.xml itself
	 * @param formatter the formatter that will handle the file contents
	 */
	public BBCodeConfigParser(BBConfigFormatter formatter) {
		this.formatter = formatter;
	}

	public void parse() {
		try {
			SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
			parser.parse(getClass().getResourceAsStream(""/bb_config.xml""), this);
		}
		catch (Exception e) {
			throw new ForumException(e);
		}
	}

	/**
	 * @see org.xml.sax.helpers.DefaultHandler#startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)
	 */
	@Override
	public void startElement(String uri, String localName, String tag, Attributes attrs) {
		if (tag.equals(""tag"")) {
			this.sb = new StringBuffer();
			this.bb = new BBCode();

			String tagName = attrs.getValue(""name"");

			if (tagName != null) {
				this.bb.setTagName(tagName);
			}

			if (""true"".equals(attrs.getValue(""alwaysProcess""))) {
				this.bb.enableAlwaysProcess();
			}
		}

		this.tagName = tag;
	}

	/**
	 * @see org.xml.sax.helpers.DefaultHandler#endElement(java.lang.String, java.lang.String, java.lang.String)
	 */
	@Override
	public void endElement(String uri, String localName, String tag) {
		if (tag.equals(""tag"")) {
			this.formatter.addBb(this.bb);
		}
		else if (this.tagName.equals(""replace"")) {
			this.bb.setReplace(this.sb.toString().trim());
			this.sb.delete(0, this.sb.length());
		}
		else if (this.tagName.equals(""regex"")) {
			this.bb.setRegex(this.sb.toString().trim());
			this.sb.delete(0, this.sb.length());
		}

		this.tagName = """";
	}

	/**
	 * @see org.xml.sax.helpers.DefaultHandler#characters(char[], int, int)
	 */
	@Override
	public void characters(char ch[], int start, int length) {
		if (this.tagName.equals(""replace"") || this.tagName.equals(""regex"")) {
			this.sb.append(ch, start, length);
		}
	}

	/**
	 * @see org.xml.sax.helpers.DefaultHandler#error(org.xml.sax.SAXParseException)
	 */
	@Override
	public void error(SAXParseException exception) throws SAXException {
		throw exception;
	}
}"
net.jforum.formatters.SafeHtmlTagsFormatter,"public class SafeHtmlTagsFormatter implements Formatter {
	private SafeHtml safeHtml;

	public SafeHtmlTagsFormatter(SafeHtml safeHtml) {
		this.safeHtml = safeHtml;
	}

	/**
	 * @see net.jforum.formatters.Formatter#format(java.lang.String, net.jforum.formatters.PostOptions)
	 */
	@Override
	public String format(String text, PostOptions postOptions) {
		return this.safeHtml.makeSafe(text);
	}
}"
net.jforum.formatters.NewLineToHtmlBreakFormatter,"public class NewLineToHtmlBreakFormatter implements Formatter {
	/**
	 * @see net.jforum.formatters.Formatter#format(java.lang.String, PostOptions)
	 */
	@Override
	public String format(String text, PostOptions postOptions) {
		return StringUtils.replace(text, ""\n"", ""<br/> "");
	}
}"
net.jforum.formatters.BBCode,"public class BBCode implements Serializable {
	private String tagName = """";
	private String regex;
	private String replace;
	private boolean alwaysProcess;

	/**
	 * Gets the regex
	 * 
	 * @return String witht the regex
	 */
	public String getRegex() {
		return this.regex;
	}

	/**
	 * Gets the replacement string
	 * 
	 * @return string with the replacement data
	 */
	public String getReplace() {
		return this.replace;
	}

	/**
	 * Getst the tag name
	 * 
	 * @return The tag name
	 */
	public String getTagName() {
		return this.tagName;
	}

	/**
	 * Sets the regular expression associated to the tag
	 * 
	 * @param regex Regular expression string
	 */
	public void setRegex(String regex) {
		this.regex = regex;
	}

	/**
	 * Sets the replacement string, to be aplyied when matching the code
	 * 
	 * @param replace The replacement string data
	 */
	public void setReplace(String replace) {
		this.replace = replace;
	}

	/**
	 * Setst the tag name
	 * 
	 * @param tagName The tag name
	 */
	public void setTagName(String tagName) {
		this.tagName = tagName;
	}

	public void enableAlwaysProcess() {
		this.alwaysProcess = true;
	}

	public boolean alwaysProcess() {
		return this.alwaysProcess;
	}
	
	/**
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		return (this.getRegex() + this.getReplace() + this.getTagName() + this.alwaysProcess).hashCode();
	}
	
	/**
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object o) {
		if (o == this) {
			return true;
		}
		
		if (!(o instanceof BBCode)) {
			return false;
		}
		
		BBCode code = (BBCode)o;
		return code.getTagName().equals(this.getTagName())
			&& code.getRegex().equals(this.getRegex())
			&& code.getReplace().equals(this.getReplace())
			&& code.alwaysProcess() == this.alwaysProcess();
	}
}"
net.jforum.extensions.RequestOperationChain,"public class RequestOperationChain implements ApplicationContextAware {
	private ApplicationContext applicationContext;
	private List<String> operations = new ArrayList<String>();

	public void setOperations(List<String> operations) {
		this.operations = operations;
	}

	public void callAllOperations() {
		for (String operationClassName : this.operations) {
			RequestOperation operation = (RequestOperation)this.applicationContext.getBean(operationClassName);
			operation.execute();
		}
	}

	/**
	 * @see org.springframework.context.ApplicationContextAware#setApplicationContext(org.springframework.context.ApplicationContext)
	 */
	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
		this.applicationContext = applicationContext;
	}
}"
net.jforum.extensions.PostReportCounterOperation,"public class PostReportCounterOperation implements RequestOperation {
	private final PostReportRepository repository;
	private final Result result;
	private final UserSession userSession;

	public PostReportCounterOperation(PostReportRepository repository, Result result, UserSession userSession) {
		this.repository = repository;
		this.result = result;
		this.userSession = userSession;
	}

	/**
	 * @see net.jforum.extensions.RequestOperation#execute()
	 */
	@Override
	public void execute() {
		int total = 0;
		if (userSession != null && userSession.isLogged() && userSession.getRoleManager().isModerator()) {
			total = this.repository.countPendingReports(userSession.getRoleManager().getRoleValues(SecurityConstants.FORUM));
		}

		result.include(""totalPostReports"", total);
	}
}"
net.jforum.extensions.ActionExtensionManager,"public class ActionExtensionManager {
	 // TODO
}"
net.jforum.sso.DefaultLoginAuthenticator,"public class DefaultLoginAuthenticator implements LoginAuthenticator {
	private UserRepository repository;

	public DefaultLoginAuthenticator(UserRepository repository) {
		this.repository = repository;
	}

	/**
	 * @see net.jforum.sso.LoginAuthenticator#validateLogin(String, String, java.util.Map)
	 */
	@Override
	public User validateLogin(String username, String password, Map<String, Object> extraParams) {
		User user = this.repository.validateLogin(username, password);

		if (user != null && !user.isDeleted() && (user.getActivationKey() == null || user.isActive())) {
			return user;
		}

		return null;
	}
}"
net.jforum.sso.SSOUtils,"public class SSOUtils {
	private String username;
	private boolean exists = true;
	private User user;
	private UserRepository userRepository;

	public SSOUtils(UserRepository userRepository) {
		this.userRepository = userRepository;
	}

	/**
	 * Checks if an user exists in the database
	 *
	 * @param username The username to check
	 * @return <code>true</code> if the user exists. If <code>false</code> is
	 * returned, then you can insert the user by calling {@link #register(String, String)}
	 * @see #register(String, String)
	 * @see #getUser()
	 */
	public boolean userExists(String username) {
		this.username = username;

		this.user = this.userRepository.getByUsername(username);
		this.exists = this.user != null;

		return this.exists;
	}

	/**
	 * Registers a new user. This method should be used together with {@link #userExists(String)}.
	 *
	 * @param password the user's password. It <em>should</em> be the
	 * real / final password. In other words, the data passed as
	 * password is the data that'll be written to the database
	 * @param email the user's email
	 * @see #getUser()
	 */
	public void register(String password, String email) {
		if (this.exists) {
			return;
		}

		// Is a new user for us. Register him
		this.user = new User();

		user.setUsername(this.username);
		user.setPassword(password);
		user.setEmail(email);
		user.setActive(true);

		this.userRepository.add(user);
	}

	/**
	 * Gets the user associated to this class instance.
	 *
	 * @return the user
	 */
	public User getUser() {
		return this.user;
	}
}"
net.jforum.sso.RemoteUserSSO,"public class RemoteUserSSO implements SSO {
	private JForumConfig config;

	/**
	 * @see net.jforum.sso.SSO#authenticateUser(net.jforum.context.RequestContext)
	 * @param request AWebContextRequest * @return String
	 */
	@Override
	public String authenticateUser(HttpServletRequest request) {
		return request.getRemoteUser();
	}

	@Override
	public boolean isSessionValid(UserSession userSession) {
		String remoteUser = userSession.getRequest().getRemoteUser();

		// user has since logged out
		if (remoteUser == null && userSession.getUser().getId() != this.config.getInt(ConfigKeys.ANONYMOUS_USER_ID)) {
			return false;
		}
		// user has since logged in
		else if (remoteUser != null && userSession.getUser().getId() == this.config.getInt(ConfigKeys.ANONYMOUS_USER_ID)) {
			return false;
		}
		// user has changed user
		else if (remoteUser != null && !remoteUser.equals(userSession.getUser().getUsername())) {
			return false;
		}

		return true;
	}

	/**
	 * @see net.jforum.sso.SSO#setConfig(net.jforum.util.JForumConfig)
	 */
	@Override
	public void setConfig(JForumConfig config) {
		this.config = config;
	}
}"
net.jforum.actions.interceptors.ControllerSecurityInterceptor,"public class ControllerSecurityInterceptor extends SecurityInterceptor {
	public ControllerSecurityInterceptor(HttpServletRequest request, Result result, UserSession userSession, Container container) {
		super(request, result, userSession, container);
	}

	@Override
	protected SecurityConstraint getAnnotation(ResourceMethod method) {
		return method.getResource().getType().getAnnotation(SecurityConstraint.class);
	}

	@Override
	protected boolean isAnnotationPresent(ResourceMethod method) {
		return method.getResource().getType().isAnnotationPresent(SecurityConstraint.class);
	}
}"
net.jforum.actions.interceptors.SecurityInterceptor,"public abstract class SecurityInterceptor implements Interceptor {
	private final HttpServletRequest request;
	private final Result result;
	private final UserSession userSession;
	private final Container container;

	public SecurityInterceptor(HttpServletRequest request, Result result, UserSession userSession, Container container) {
		this.request = request;
		this.result = result;
		this.userSession = userSession;
		this.container = container;
	}

	@Override
	public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws InterceptionException {
		SecurityConstraint annotation = this.getAnnotation(method);
		Class<? extends AccessRule> accessRuleClass = annotation.value();

		boolean shouldProceed = true;
		boolean displayLogin = true;

		if (!accessRuleClass.equals(EmptyRule.class)) {
			AccessRule accessRule = this.findAccessRule(annotation.value());
			shouldProceed = accessRule.shouldProceed(userSession, request);
			displayLogin = annotation.displayLogin();
		}
		else {
			Role[] multiRoles = annotation.multiRoles();

			if (multiRoles.length == 0) {
				throw new IllegalStateException(""@SecurityConstraint does not have an access rule nor multi roles. Cannot continue"");
			}
			else {
				for (Role role : multiRoles) {
					AccessRule accessRule = this.findAccessRule(role.value());

					if (!accessRule.shouldProceed(userSession, request)) {
						shouldProceed = false;
						displayLogin = role.displayLogin();
						break;
					}
				}
			}
		}

		if (shouldProceed) {
			stack.next(method, resourceInstance);
		}
		else {
			if (displayLogin) {
				this.result.redirectTo(UserController.class).login(null, false);
			}
			else {
				this.result.redirectTo(MessageController.class).accessDenied();
			}
		}
	}

	private AccessRule findAccessRule(Class<? extends AccessRule> klass) {
		AccessRule accessRule = container.instanceFor(klass);

		if (accessRule == null) {
			throw new NullPointerException(
				String.format(""Could not find the rule %s. Have you registered it in the configuration file?"", klass.getName()));
		}

		return accessRule;
	}


	protected abstract SecurityConstraint getAnnotation(ResourceMethod method);

	protected abstract boolean isAnnotationPresent(ResourceMethod method);


	@Override
	public boolean accepts(ResourceMethod method) {
		return this.isAnnotationPresent(method);
	}
}"
net.jforum.actions.interceptors.MethodSecurityInterceptor,"public class MethodSecurityInterceptor extends SecurityInterceptor {
	public MethodSecurityInterceptor(HttpServletRequest request, Result result, UserSession userSession, Container container) {
		super(request, result, userSession, container);
	}

	@Override
	protected SecurityConstraint getAnnotation(ResourceMethod method) {
		return method.getMethod().getAnnotation(SecurityConstraint.class);
	}

	@Override
	protected boolean isAnnotationPresent(ResourceMethod method) {
		return method.getMethod().isAnnotationPresent(SecurityConstraint.class);
	}
}"
net.jforum.actions.interceptors.ExtendsAnnotationInterceptor,"public class ExtendsAnnotationInterceptor implements Interceptor {
	private final ActionExtensionManager manager;

	public ExtendsAnnotationInterceptor(ActionExtensionManager manager) {
		this.manager = manager;
	}

	@Override
	public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws InterceptionException {
		stack.next(method, resourceInstance);
		// TODO
		throw new RuntimeException(""not implemented"");
	}

	@Override
	public boolean accepts(ResourceMethod method) {
		return method.getMethod().isAnnotationPresent(Extends.class);
	}
}"
net.jforum.actions.interceptors.SessionManagerInterceptor,"public class SessionManagerInterceptor implements Interceptor {
	private final UserSession userSession;
	private final SessionManager sessionManager;
	private final HttpServletRequest request;

	public SessionManagerInterceptor(UserSession userSession, SessionManager sessionManager,
			HttpServletRequest request, HttpServletResponse response) {
		this.request = request;
		userSession.setRequest(request);
		userSession.setResponse(response);
		this.userSession = userSession;
		this.sessionManager = sessionManager;
	}

	@Override
	public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws InterceptionException {
		sessionManager.refreshSession(userSession);
		request.setAttribute(""userSession"", userSession);
		request.setAttribute(""roleManager"", userSession.getRoleManager());
		stack.next(method, resourceInstance);
	}

	@Override
	public boolean accepts(ResourceMethod method) {
		return true;
	}
}"
net.jforum.actions.extensions.TopicWatchExtension,"public class TopicWatchExtension {

	private final TopicWatchService watchService;
	private final Result result;
	private final UserSession userSession;

	public TopicWatchExtension(TopicWatchService watchService, Result result, UserSession userSession) {
		this.userSession = userSession;
		this.watchService = watchService;
		this.result = result;
	}

	@Extends(Actions.LIST)
	public void afterList() {
		boolean isWatching = false;
		UserSession userSession = this.userSession;

		if (userSession.isLogged()) {
			Topic topic = (Topic) this.result.included().get(""topic"");
			TopicWatch subscription = this.watchService.getSubscription(topic,
					userSession.getUser());
			isWatching = subscription != null;

			if (!subscription.isRead()) {
				subscription.markAsRead();
			}
		}

		this.result.include(""isUserWatchingTopic"", isWatching);
	}

	/**
	 * Makes the current logged user watch a specific topic.
	 *
	 * @param topicId
	 *            the id of the topic to watch
	 */
	@SecurityConstraint(value = AuthenticatedRule.class, displayLogin = true)
	public void watch(int page, int topicId) {
		Topic topic = new Topic();
		topic.setId(topicId);

		UserSession userSession = this.userSession;

		this.watchService.watch(topic, userSession.getUser());
		this.result.redirectTo(Actions.LIST + ""/"" + topicId);
	}

	/**
	 * Makes the current user to unwatch a specific topic
	 *
	 * @param topicId
	 *            the id of the topic to unwatch
	 */
	@SecurityConstraint(value = AuthenticatedRule.class, displayLogin = true)
	public void unwatch(int page, int topicId) {
		Topic topic = new Topic();
		topic.setId(topicId);

		this.watchService.unwatch(topic, userSession.getUser());
		this.result.redirectTo(this).list(topicId);
	}
	public void list(int topicId) {


	}
}"
net.jforum.actions.helpers.Actions,"public class Actions {
	public static final String ADD = ""add"";
	public static final String LIST = ""list"";
	public static final String ADDSAVE = ""addSave"";
	public static final String INSERT = ""insert"";
	public static final String REGISTRATION_COMPLETED = ""registrationCompleted"";
	public static final String LOGIN = ""login"";
	public static final String ACCESS_DENIED = ""accessDenied"";
	public static final String PROFILE = ""profile"";
	public static final String EDIT = ""edit"";
	public static final String EDITSAVE = ""editSave"";
	public static final String MESSAGE = ""message"";
	public static final String MESSAGES = ""messages"";
	public static final String TOPIC_WAITING_MODERATION = ""topicWaitingModeration"";
	public static final String SHOW = ""show"";
	public static final String REPLY_WAITING_MODERATION = ""replyWaitingModeration"";
	public static final String INBOX = ""inbox"";
	public static final String EXECUTE = ""execute"";
	public static final String NEW_MESSAGES = ""newMessages"";
	public static final String FILTERS = ""filters"";
	public static final String PRE_LIST = ""preList"";
	public static final String RSS = ""rss"";
	public static final String LIST_RESOLVED = ""listResolved"";
	public static final String SHOW_ACTIVITY_LOG = ""showActivityLog"";
	public static final String POSTS = ""posts"";
	public static final String TOPICS = ""topics"";

	private Actions() {}
}"
net.jforum.actions.helpers.PostFormOptions,"public class PostFormOptions {
	private boolean disableHtml;
	private boolean disableSmilies;
	private boolean disableBbCode;
	private boolean appendSignature;
	private boolean notifyReplies;
	private int topicType;

	public boolean isHtmlEnabled() {
		return !this.disableHtml;
	}

	public boolean isSmiliesEnabled() {
		return !this.disableSmilies;
	}

	public boolean isBbCodeEnabled() {
		return !this.disableBbCode;
	}

	public boolean getAppendSignature() {
		return this.appendSignature;
	}

	public boolean getNotifyReplies() {
		return this.notifyReplies;
	}

	public int getTopicType() {
		return this.topicType;
	}

	/**
	 * @param topicType the topicType to set
	 */
	public void setTopicType(int topicType) {
		this.topicType = topicType;
	}

	/**
	 * @param disableHtml the disableHtml to set
	 */
	public void setDisableHtml(boolean disableHtml) {
		this.disableHtml = disableHtml;
	}

	/**
	 * @param disableSmilies the disableSmilies to set
	 */
	public void setDisableSmilies(boolean disableSmilies) {
		this.disableSmilies = disableSmilies;
	}

	/**
	 * @param disableBbCode the disableBbCode to set
	 */
	public void setDisableBbCode(boolean disableBbCode) {
		this.disableBbCode = disableBbCode;
	}

	/**
	 * @param appendSignature the appendSignature to set
	 */
	public void setAppendSignature(boolean appendSignature) {
		this.appendSignature = appendSignature;
	}

	/**
	 * @param notifyReplies the notifyReplies to set
	 */
	public void setNotifyReplies(boolean notifyReplies) {
		this.notifyReplies = notifyReplies;
	}
}"
net.jforum.actions.helpers.ActionUtils,"public class ActionUtils {
	/**
	 * Given a {@link PostFormOptions}, copy it to the respective {@link Post}
	 * @param post the post to be updated
	 * @param options the options to be set
	 */
	public static void definePostOptions(Post post, PostFormOptions options) {
		if (options != null) {
			post.setHtmlEnabled(options.isHtmlEnabled());
			post.setBbCodeEnabled(options.isBbCodeEnabled());
			post.setSmiliesEnabled(options.isSmiliesEnabled());
			post.setSignatureEnabled(options.getAppendSignature());
			post.setNotifyReplies(options.getNotifyReplies());
		}
	}

	/**
	 * Given a {@link PostFormOptions}, copy it to the respective {@link PrivateMessage}
	 * @param pm the private message to be updated
	 * @param options the options to be set
	 */
	public static void definePrivateMessageOptions(PrivateMessage pm, PostFormOptions options) {
		if (options != null) {
			pm.setHtmlEnabled(options.isHtmlEnabled());
			pm.setBbCodeEnabled(options.isBbCodeEnabled());
			pm.setSmiliesEnabled(options.isSmiliesEnabled());
			pm.setSignatureEnabled(options.getAppendSignature());
		}
	}
}"
net.jforum.actions.helpers.ApproveInfo,"public class ApproveInfo {
	public static final int APPROVE = 0;
	public static final int DEFER = 1;
	public static final int REJECT = 2;

	private int postId;
	private int status;

	/**
	 * @return the postId
	 */
	public int getPostId() {
		return this.postId;
	}

	/**
	 * @param postId the postId to set
	 */
	public void setPostId(int postId) {
		this.postId = postId;
	}

	/**
	 * @return the status
	 */
	public int getStatus() {
		return this.status;
	}

	/**
	 * @param status the status to set
	 */
	public void setStatus(int status) {
		this.status = status;
	}

	public boolean approve() {
		return this.getStatus() == APPROVE;
	}

	public boolean defer() {
		return this.getStatus() == DEFER;
	}

	public boolean reject() {
		return this.getStatus() == REJECT;
	}
}"
net.jforum.actions.helpers.AttachedFile,"public class AttachedFile {
	private UploadUtils uploadUtils;
	private Attachment attachment;

	public AttachedFile(Attachment attachment, UploadUtils uploadUtils) {
		this.attachment = attachment;
		this.uploadUtils = uploadUtils;
	}

	public UploadUtils getUploadUtils() {
		return this.uploadUtils;
	}

	public Attachment getAttachment() {
		return this.attachment;
	}
}"
net.jforum.actions.helpers.Domain,"public class Domain{
	public static final String AVATAR_ADMIN = ""adminAvatar"";
	public static final String BAD_WORD_ADMIN = ""adminBadWord"";
	public static final String TOPICS = ""topics"";
	public static final String POSTS = ""posts"";
	public static final String FORUMS = ""forums"";
	public static final String USER = ""user"";
	public static final String SMILIES_ADMIN = ""adminSmilies"";
	public static final String USERS_ADMIN = ""adminUsers"";
	public static final String ADMIN = ""admin"";
	public static final String BANNING_ADMIN = ""adminBanning"";
	public static final String CATEGORIES_ADMIN = ""adminCategories"";
	public static final String FORUMS_ADMIN = ""adminForums"";
	public static final String GROUPS_ADMIN = ""adminGroups"";
	public static final String RANKINGS_ADMIN = ""adminRankings"";
	public static final String MESSAGES = ""messages"";
	public static final String MODERATION = ""moderation"";
	public static final String PRIVATE_MESSAGES = ""pm"";
	public static final String SEARCH = ""search"";
	public static final String ADMIN_SEARCH = ""adminSearchStats"";
	public static final String HIBERNATE = ""hibernate"";
	public static final String RSS = ""rss"";
	public static final String POST_REPORT = ""postReport"";
	public static final String CONFIG_ADMIN = ""adminConfig"";
	public static final String SHOUTBOX_ADMIN = ""adminShoutBox"";
	public static final String THEMES_ADMIN = ""adminThemes"";
	public static final String RECENT_TOPICS = ""recentTopics"";

	private Domain() {}
}"
net.jforum.api.JForumExecutionContext,"public abstract class JForumExecutionContext {
	private ApplicationContext context;
	private HttpServletRequest request;
	private boolean initialized;

	public JForumExecutionContext(HttpServletRequest request) {
		this.request = request;
		this.context = (ApplicationContext)request.getSession().getServletContext()
			.getAttribute(ConfigKeys.SPRING_CONTEXT);

		this.initialized = this.context != null;
	}

	protected HttpServletRequest getReques() {
		return this.request;
	}

	/**
	 * Check if JForum is initialized and ready to use.
	 * @return true if JForum is ready for use
	 */
	protected boolean isInitialized() {
		return this.initialized;
	}

	public abstract void execute();

	@SuppressWarnings(""unchecked"")
	protected final <T> T getComponent(Class<T> k) {
		return (T)this.context.getBean(k.getName());
	}
}"
net.jforum.events.EmptyCategoryEvent,"public class EmptyCategoryEvent implements Event<Category> {

	/**
	 * @see net.jforum.events.Event#added(Category)
	 */
	public void added(Category entity) { }

	/**
	 * @see net.jforum.events.Event#deleted(Category)
	 */
	public void deleted(Category entity) { }

	/**
	 * @see net.jforum.events.Event#updated(Category)
	 */
	public void updated(Category entity) { }

	/**
	 * @see net.jforum.events.Event#beforeAdd(java.lang.Object)
	 */
	public void beforeAdd(Category entity) {}

	/**
	 * @see net.jforum.events.Event#beforeDeleted(java.lang.Object)
	 */
	public void beforeDeleted(Category entity) {}

	/**
	 * @see net.jforum.events.Event#beforeUpdated(java.lang.Object)
	 */
	public void beforeUpdated(Category entity) {
	}

}"
net.jforum.events.EmptyForumEvent,"public class EmptyForumEvent implements Event<Forum> {

	/**
	 * @see net.jforum.events.Event#added(java.lang.Object)
	 */
	public void added(Forum entity) {
	}

	/**
	 * @see net.jforum.events.Event#beforeAdd(java.lang.Object)
	 */
	public void beforeAdd(Forum entity) {
	}

	/**
	 * @see net.jforum.events.Event#deleted(java.lang.Object)
	 */
	public void deleted(Forum entity) {
	}

	/**
	 * @see net.jforum.events.Event#updated(java.lang.Object)
	 */
	public void updated(Forum entity) {
	}

	/**
	 * @see net.jforum.events.Event#beforeDeleted(java.lang.Object)
	 */
	public void beforeDeleted(Forum entity) {
	}

	/**
	 * @see net.jforum.events.Event#beforeUpdated(java.lang.Object)
	 */
	public void beforeUpdated(Forum entity) {
	}
}"
net.jforum.events.EmptyPostEvent,"public class EmptyPostEvent implements Event<Post> {
	/**
	 * @see net.jforum.events.PostEvent#added(net.jforum.entities.Post)
	 */
	public void added(Post post) { }

	/**
	 * @see net.jforum.events.PostEvent#deleted(net.jforum.entities.Post)
	 */
	public void deleted(Post post) { }

	/**
	 * @see net.jforum.events.PostEvent#updated(net.jforum.entities.Post)
	 */
	public void updated(Post post) { }

	/**
	 * @see net.jforum.events.Event#beforeAdd(java.lang.Object)
	 */
	public void beforeAdd(Post entity) { }

	/**
	 * @see net.jforum.events.Event#beforeAdd(java.lang.Object)
	 */
	public void beforeDeleted(Post entity) { }

	/**
	 * @see net.jforum.events.Event#beforeUpdated(java.lang.Object)
	 */
	public void beforeUpdated(Post entity) {
	}
}"
net.jforum.events.EmptyTopicEvent,"public class EmptyTopicEvent implements Event<Topic> {

	/**
	 * @see net.jforum.events.Event#added(java.lang.Object)
	 */
	public void added(Topic entity) {
	}

	/**
	 * @see net.jforum.events.Event#deleted(java.lang.Object)
	 */
	public void deleted(Topic entity) {
	}

	/**
	 * @see net.jforum.events.Event#updated(java.lang.Object)
	 */
	public void updated(Topic entity) {
	}

	/**
	 * @see net.jforum.events.Event#beforeAdd(java.lang.Object)
	 */
	public void beforeAdd(Topic entity) {
	}

	/**
	 * @see net.jforum.events.Event#beforeDeleted(java.lang.Object)
	 */
	public void beforeDeleted(Topic entity) {
	}

	/**
	 * @see net.jforum.events.Event#beforeUpdated(java.lang.Object)
	 */
	public void beforeUpdated(Topic entity) {
	}
}"
net.jforum.events.listeners.ForumEventListener,"public class ForumEventListener extends AbstractListener<Event<Forum>, Forum> {
	@Pointcut(""target(net.jforum.repository.ForumRepository)"")
	@SuppressWarnings(""all"")
	private void targetRepository() {}

	@Before(""repositoryAdd() && targetRepository() && args(forum)"")
	public void beforeAdd(Forum forum) {
		this.fireBeforeAdd(forum);
	}

	@AfterReturning(""repositoryAdd() && targetRepository() && args(forum)"")
	public void added(Forum forum) {
		this.fireAdd(forum);
	}

	@AfterReturning(""repositoryRemove() && targetRepository() && args(forum)"")
	public void removed(Forum forum) {
		this.fireRemove(forum);
	}

	@AfterReturning(""repositoryUpdate() && targetRepository() && args(forum)"")
	public void updated(Forum forum) {
		this.fireUpdated(forum);
	}
}"
net.jforum.events.listeners.PostEventListener,"public class PostEventListener extends AbstractListener<Event<Post>, Post> {
	@Pointcut(""target(net.jforum.repository.PostRepository)"")
	@SuppressWarnings(""all"")
	private void targetRepository() {}

	@Before(""repositoryAdd() && targetRepository() && args(post)"")
	public void beforeAdd(Post post) {
		this.fireBeforeAdd(post);
	}

	@Before(""repositoryUpdate() && targetRepository() && args(post)"")
	public void beforeUpdated(Post post) {
		this.fireBeforeUpdated(post);
	}

	@AfterReturning(""repositoryAdd() && targetRepository() && args(post)"")
	public void added(Post post) {
		this.fireAdd(post);
	}

	@AfterReturning(""repositoryRemove() && targetRepository() && args(post)"")
	public void removed(Post post) {
		this.fireRemove(post);
	}

	@AfterReturning(""repositoryUpdate() && targetRepository() && args(post)"")
	public void updated(Post post) {
		this.fireUpdated(post);
	}
}"
net.jforum.events.listeners.CategoryEventListener,"public class CategoryEventListener extends AbstractListener<Event<Category>, Category> {
	@Pointcut(""target(net.jforum.repository.CategoryRepository)"")
	@SuppressWarnings(""all"")
	private void targetRepository() {}

	@AfterReturning(""repositoryAdd() && targetRepository() && args(category)"")
	public void added(Category category) {
		this.fireAdd(category);
	}

	@AfterReturning(""repositoryRemove() && targetRepository() && args(category)"")
	public void removed(Category category) {
		this.fireRemove(category);
	}

	@AfterReturning(""repositoryUpdate() && targetRepository() && args(category)"")
	public void updated(Category category) {
		this.fireUpdated(category);
	}
	
	@Before(""repositoryRemove() && targetRepository() && args(category)"")
	public void beforeRemove(Category category) {
		this.fireBeforeRemove(category);
	}
}"
net.jforum.events.listeners.TopicEventListener,"public class TopicEventListener extends AbstractListener<Event<Topic>, Topic> {
	@Pointcut(""target(net.jforum.repository.TopicRepository)"")
	@SuppressWarnings(""all"")
	private void targetRepository() {}

	@AfterReturning(""repositoryAdd() && targetRepository() && args(topic)"")
	public void added(Topic topic) {
		this.fireAdd(topic);
	}

	@AfterReturning(""repositoryRemove() && targetRepository() && args(topic)"")
	public void removed(Topic topic) {
		this.fireRemove(topic);
	}

	@AfterReturning(""repositoryUpdate() && targetRepository() && args(topic)"")
	public void updated(Topic topic) {
		this.fireUpdated(topic);
	}
}"
net.jforum.events.listeners.AbstractListener,"public abstract class AbstractListener<EventType extends Event<TargetType>, TargetType> {
	private List<EventType> events = new ArrayList<EventType>();

	@Pointcut(""execution(* net.jforum.repository.Repository.add(..))"")
	@SuppressWarnings(""all"")
	protected void repositoryAdd() {}

	@Pointcut(""execution(* net.jforum.repository.Repository.remove(..))"")
	@SuppressWarnings(""all"")
	protected void repositoryRemove() {}

	@Pointcut(""execution(* net.jforum.repository.Repository.update(..))"")
	@SuppressWarnings(""all"")
	protected void repositoryUpdate() {}

	/**
	 * Defines the list the events
	 * @param events the events to set
	 */
	public void setEvents(List<EventType> events) {
		this.events = events;
	}

	protected void fireBeforeAdd(TargetType entity) {
		for (EventType event : this.events) {
			event.beforeAdd(entity);
		}
	}

	protected void fireAdd(TargetType entity) {
		for (EventType event : this.events) {
			event.added(entity);
		}
	}

	protected void fireBeforeRemove(TargetType entity) {
		for (EventType event : this.events) {
			event.beforeDeleted(entity);
		}
	}

	protected void fireRemove(TargetType entity) {
		for (EventType event : this.events) {
			event.deleted(entity);
		}
	}

	protected void fireBeforeUpdated(TargetType entity) {
		for (EventType event : this.events) {
			event.beforeUpdated(entity);
		}
	}

	protected void fireUpdated(TargetType entity) {
		for (EventType event : this.events) {
			event.updated(entity);
		}
	}
}"
net.jforum.controllers.RankingAdminController,"public class RankingAdminController {
	private RankingRepository repository;
	private RankingService service;
	private final Result result;

	public RankingAdminController(RankingRepository repository,
			RankingService service, Result result) {
		this.repository = repository;
		this.service = service;
		this.result = result;
	}

	public void list() {
		this.result.include(""rankings"", this.repository.getAllRankings());
	}

	public void add() {

	}

	public void addSave(Ranking ranking) {
		this.service.add(ranking);
		this.result.redirectTo(this).list();
	}

	public void edit(int rankingId) {
		this.result.include(""ranking"", this.repository.get(rankingId));
		this.result.forwardTo(this).add();
	}

	public void editSave(Ranking ranking) {
		this.service.update(ranking);
		this.result.redirectTo(this).list();
	}

	public void delete(int... rankingsId) {
		this.service.delete(rankingsId);
		this.result.redirectTo(this).list();
	}
}"
net.jforum.controllers.AdminController,"public class AdminController {
	private final SessionManager sessionManager;
	private final ForumRepository forumRepository;
	private final Result result;

	public AdminController(SessionManager sessionManager,
			ForumRepository forumRepository, Result result) {
		this.sessionManager = sessionManager;
		this.forumRepository = forumRepository;
		this.result = result;
	}

	/**
	 * Shows the main administration page (for logged users)
	 */
	public void index() {
	}

	/**
	 * The left navigation menu
	 */
	public void menu() {

	}

	/**
	 * The main admin page
	 */
	public void main() {
		this.result.include(""stats"", this.forumRepository.getForumStats());
		this.result .include(""sessions"", this.sessionManager.getLoggedSessions());
		this.result.include(""totalLoggedUsers"", this.sessionManager.getTotalLoggedUsers());
	}
}"
net.jforum.controllers.ThemeController,"public class ThemeController {
	private final ThemeRepository repository;
	private final Result result;

	public ThemeController(Result result, ThemeRepository repository) {
		this.result = result;
		this.repository = repository;
	}

	public void list() {
		this.result.include(""themes"", this.repository.getAll());
	}

	public void add() {

	}

	public void addSave(Theme theme) {
		this.repository.add(theme);
		this.result.redirectTo(this).list();
	}

	public void edit(int themeId) {
		this.result.include(""theme"", this.repository.get(themeId));
	}

	public void editSave(Theme theme) {
		this.repository.update(theme);
		this.result.redirectTo(this).list();
	}

	public void delete(int themeId) {
		Theme theme = this.repository.get(themeId);
		this.repository.remove(theme);
		this.result.redirectTo(this).list();
	}
}"
net.jforum.controllers.BadWordAdminController,"public class BadWordAdminController {
	private BadWordRepository repository;
	private final Result result;

	public BadWordAdminController(Result result, BadWordRepository repository) {
		this.result = result;
		this.repository = repository;
	}

	public void delete(int... badWordId) {
		if (badWordId != null) {
			for (int id : badWordId) {
				BadWord word = this.repository.get(id);
				this.repository.remove(word);
			}
		}

		this.result.redirectTo(this).list();
	}

	public void list() {
		this.result.include(""words"", this.repository.getAll());
	}

	public void add() {

	}

	public void addSave(BadWord word) {
		this.repository.add(word);
		this.result.redirectTo(this).list();
	}

	public void edit(int id) {
		BadWord word = this.repository.get(id);
		this.result.include(""word"", word);
		this.result.forwardTo(this).add();
	}

	public void editSave(BadWord word) {
		this.repository.update(word);
		this.result.redirectTo(this).list();
	}
}"
net.jforum.controllers.ForumController,"public class ForumController {
	private CategoryRepository categoryRepository;
	private ForumRepository forumRepository;
	private UserRepository userRepository;
	private MostUsersEverOnlineService mostUsersEverOnlineService;
	private JForumConfig config;
	private GroupInteractionFilter groupInteractionFilter;
	private final Result result;
	private final UserSession userSession;
	private final SessionManager sessionManager;

	public ForumController(CategoryRepository categoryRepository,
		ForumRepository forumRepository, UserSession userSession,
		UserRepository userRepository, MostUsersEverOnlineService mostUsersEverOnlineService,
		JForumConfig config, GroupInteractionFilter groupInteractionFilter,
		Result result, SessionManager sessionManager) {
		this.categoryRepository = categoryRepository;
		this.userSession = userSession;
		this.forumRepository = forumRepository;
		this.userRepository = userRepository;
		this.mostUsersEverOnlineService = mostUsersEverOnlineService;
		this.config = config;
		this.groupInteractionFilter = groupInteractionFilter;
		this.result = result;
		this.sessionManager = sessionManager;
	}

	/**
	 * Show the new messages since the last time the user did something in the forum
	 */
	@SecurityConstraint(value = AuthenticatedRule.class, displayLogin = true)
	public void newMessages(int page) {
		UserSession userSession = this.userSession;
		int recordsPerPage = this.config.getInt(ConfigKeys.TOPICS_PER_PAGE);

		PaginatedResult<Topic> newMessages = this.forumRepository.getNewMessages(new Date(userSession.getLastVisit()),
			new Pagination().calculeStart(page, recordsPerPage), recordsPerPage);

		Pagination pagination = new Pagination(this.config, page).forNewMessages(newMessages.getTotalRecords());

		this.result.include(""pagination"", pagination);
		this.result.include(""results"", newMessages.getResults());
		this.result.include(""categories"", this.categoryRepository.getAllCategories());
	}

	/**
	 * Show topics from a forum
	 */
	@SecurityConstraint(value = AccessForumRule.class, displayLogin = true)
	@Path({""/show/{forumId}"", ""/show/{forumId}/{page}""})
	public void show(int forumId, int page) {
		Forum forum = this.forumRepository.get(forumId);

		Pagination pagination = new Pagination(this.config, page).forForum(forum);

		this.result.include(""forum"", forum);
		this.result.include(""pagination"", pagination);
		this.result.include(""isModeratorOnline"", this.sessionManager.isModeratorOnline());
		this.result.include(""categories"", this.categoryRepository.getAllCategories());
		this.result.include(""topics"", forum.getTopics(pagination.getStart(),
			pagination.getRecordsPerPage()));
	}

	/**
	 * Listing of all forums
	 */
	public void list() {
		this.result.include(""categories"", this.categoryRepository.getAllCategories());
		this.result.include(""onlineUsers"", this.sessionManager.getLoggedSessions());
		this.result.include(""totalRegisteredUsers"", this.userRepository.getTotalUsers());
		this.result.include(""totalMessages"", this.forumRepository.getTotalMessages());
		this.result.include(""totalLoggedUsers"", this.sessionManager.getTotalLoggedUsers());
		this.result.include(""totalAnonymousUsers"", this.sessionManager.getTotalAnonymousUsers());
		this.result.include(""lastRegisteredUser"", this.userRepository.getLastRegisteredUser());
		this.result.include(""postsPerPage"", this.config.getInt(ConfigKeys.POSTS_PER_PAGE));
		this.result.include(""mostUsersEverOnline"", mostUsersEverOnlineService
			.getMostRecentData(this.sessionManager.getTotalUsers()));

		if (userSession.isLogged() && !userSession.getRoleManager().roleExists(SecurityConstants.INTERACT_OTHER_GROUPS)) {
			this.groupInteractionFilter.filterForumListing(this.result, userSession);
		}
	}
}"
net.jforum.controllers.RSSController,"public class RSSController {
	private RSSService rssService;
	private UserSession userSession;
	private JForumConfig config;
	private final Result result;

	public RSSController(Result result, RSSService rssService,
			UserSession userSession, JForumConfig config) {
		this.result = result;
		this.rssService = rssService;
		this.userSession = userSession;
		this.config = config;
	}

	/**
	 * Display the latest topics from a specific forum
	 *
	 * @param forumId the id of the forum to show
	 */
	public void forumTopics(int forumId) {
		if (!this.isRSSEnabled() || !this.userSession.getRoleManager().isForumAllowed(forumId)) {
			this.result.forwardTo(MessageController.class).accessDenied();
		}
		else {
			String contents = this.rssService.forForum(forumId);
			this.result.include(""contents"", contents);
			this.result.forwardTo(Actions.RSS);
		}
	}

	private boolean isRSSEnabled() {
		return this.config.getBoolean(ConfigKeys.RSS_ENABLED);
	}
}"
net.jforum.controllers.PostReportController,"public class PostReportController {
	private final PostReportRepository repository;
	private final JForumConfig config;
	private final Result result;
	private final UserSession userSession;

	public PostReportController(PostReportRepository repository, JForumConfig config,
			Result result, UserSession userSession) {
		this.repository = repository;
		this.userSession = userSession;
		this.config = config;
		this.result = result;
	}

	@SecurityConstraint(ModerationRule.class)
	public void list() {
		int[] forumIds = this.getForumIdsToFilter();
		this.result.include(""reports"",
				this.repository.getAll(PostReportStatus.UNRESOLVED, forumIds));
	}

	@SecurityConstraint(ModerationRule.class)
	public void listResolved(int page) {
		int[] forumIds = this.getForumIdsToFilter();
		int recordsPerPage = this.config.getInt(ConfigKeys.TOPICS_PER_PAGE);

		PaginatedResult<PostReport> reports = this.repository.getPaginated(
				new Pagination().calculeStart(page, recordsPerPage),
				recordsPerPage, PostReportStatus.RESOLVED, forumIds);

		Pagination pagination = new Pagination(this.config, page)
				.forPostReports(reports.getTotalRecords());

		this.result.include(""pagination"", pagination);
		this.result.include(""reports"", reports.getResults());
	}

	@SecurityConstraint(ModerationRule.class)
	public void resolve(int reportId) {
		PostReport report = this.repository.get(reportId);

		if (this.canManipulateReport(report)) {
			report.setStatus(PostReportStatus.RESOLVED);
			this.repository.update(report);
		}

		this.result.redirectTo(this).list();
	}

	@SecurityConstraint(ModerationRule.class)
	public void delete(int reportId) {
		PostReport report = this.repository.get(reportId);

		if (this.canManipulateReport(report)) {
			this.repository.remove(report);
		}

		this.result.redirectTo(this).list();
	}

	public void report(int postId, String description) {
		UserSession userSession = this.userSession;

		if (userSession.isLogged()) {
			PostReport report = new PostReport();
			report.setDate(new Date());
			report.setUser(userSession.getUser());
			report.setDescription(description);

			Post post = new Post();
			post.setId(postId);
			report.setPost(post);

			this.repository.add(report);
		}
	}

	private boolean canManipulateReport(PostReport report) {
		int[] forumIds = this.userSession.getRoleManager()
				.getRoleValues(SecurityConstants.FORUM);

		for (int forumId : forumIds) {
			// Make sure the user is removing a report from a forum he can
			// moderate
			try {
				if (forumId == report.getPost().getForum().getId()) {
					return true;
				}
			} catch (ObjectNotFoundException e) {
				return true;
			}
		}

		return false;
	}

	private int[] getForumIdsToFilter() {
		int[] forumIds = null;
		RoleManager roleManager = this.userSession
				.getRoleManager();

		if (!roleManager.isAdministrator() && !roleManager.isCoAdministrator()) {
			forumIds = roleManager.getRoleValues(SecurityConstants.FORUM);
		}

		return forumIds;
	}
}"
net.jforum.controllers.BanlistAdminController,"public class BanlistAdminController {
	private BanlistRepository repository;
	private final Result result;

	public BanlistAdminController(BanlistRepository repository, Result result) {
		this.repository = repository;
		this.result = result;
	}

	public void list() {
		this.result.include(""banlist"", this.repository.getAllBanlists());
	}
}"
net.jforum.controllers.ConfigController,"public class ConfigController {
	private final ConfigService service;
	private final HttpServletRequest request;
	private final JForumConfig config;
	private final Result result;

	public ConfigController(ConfigService service, HttpServletRequest request, JForumConfig config, Result result) {
		this.service = service;
		this.request = request;
		this.config = config;
		this.result = result;
	}

	public void list() throws Exception {
		this.result.include(""locales"", this.loadLocaleNames());
		this.result.include(""config"", this.config);
	}

	public void save() throws Exception {
		this.service.save(this.request);
		this.result.redirectTo(this).list();
	}

	private List<String> loadLocaleNames() throws Exception {
		Properties locales = new Properties();

		locales.load(this.getClass().getResourceAsStream(""/jforumConfig/languages/locales.properties""));

		List<String> localesList = new ArrayList<String>();

		for (Enumeration<?> e = locales.keys(); e.hasMoreElements();) {
			localesList.add((String) e.nextElement());
		}

		return localesList;
	}
}"
net.jforum.controllers.HibernateStatisticsController,"public class HibernateStatisticsController {
	private SessionFactory sessionFactory;
	private final Result result;

	public HibernateStatisticsController(SessionFactory sessionFactory,
			Result result) {
		this.sessionFactory = sessionFactory;
		this.result = result;
	}

	public void list() {
		boolean statsEnabled = this.sessionFactory.getStatistics()
				.isStatisticsEnabled();

		if (!statsEnabled) {
			this.result.forwardTo(""statsDisabled"");
		} else {
			this.result.include(""stats"", this.sessionFactory.getStatistics());
		}
	}
}"
net.jforum.controllers.MessageController,"public class MessageController {
	private I18n i18n;
	private final Result result;

	public MessageController(I18n i18n, Result result) {
		this.i18n = i18n;
		this.result = result;
	}

	/**
	 * Displays an ""access is denied"" message
	 */
	public void accessDenied() {
		this.result.include(""message"", this.i18n.getMessage(""Message.accessDenied""));
		result.of(this).message();
	}

	public void message() {

	}

	/**
	 * Displays a ""waiting moderation"" message for newly created topics in
	 * moderated forums
	 *
	 * @param forumId
	 */
	public void topicWaitingModeration(int forumId) {
		this.result.include(""message"", this.i18n.getFormattedMessage(
			""PostShow.waitingModeration"", URLBuilder.build(Domain.FORUMS, Actions.SHOW, forumId)));
		result.of(this).message();
	}

	/**
	 * Displays a ""waiting moderation"" message for replies in topics of
	 * moderated forums
	 *
	 * @param forumId
	 */
	public void replyWaitingModeration(int topicId) {
		this.result.include(""message"", this.i18n.getFormattedMessage(""PostShow.waitingModeration"",
			URLBuilder.build(Domain.TOPICS, Actions.LIST, topicId)));
		result.of(this).message();
	}
}"
net.jforum.controllers.PrivateMessageController,"public class PrivateMessageController {
	private PrivateMessageRepository repository;
	private UserRepository userRepository;
	private PrivateMessageService service;
	private final Result result;
	private final UserSession userSession;

	public PrivateMessageController(PrivateMessageRepository repository, UserRepository userRepository,
			PrivateMessageService service, Result result, UserSession userSession) {
		this.repository = repository;
		this.userRepository = userRepository;
		this.service = service;
		this.result = result;
		this.userSession = userSession;
	}

	public void messages() {

	}

	/**
	 * Delete a set of private message
	 *
	 * @param ids the id of the messages to delete
	 */
	public void delete(int... ids) {
		this.service.delete(this.userSession.getUser(), ids);
		this.result.redirectTo(Actions.INBOX);
	}

	/**
	 * Shows the page to review a private message while writing a reply
	 *
	 * @param id the id of the message being replied
	 */
	@SecurityConstraint(PrivateMessageOwnerRule.class)
	public void review(int id) {
		PrivateMessage pm = this.repository.get(id);
		this.result.include(""pm"", pm);
		this.result.include(""post"", pm.asPost());
	}

	/**
	 * Shows the page to quote a private message
	 *
	 * @param id the id of the message
	 */
	@SecurityConstraint(PrivateMessageOwnerRule.class)
	public void quote(int id) {
		PrivateMessage pm = this.repository.get(id);

		this.send();

		this.result.include(""pm"", pm);
		this.result.include(""isPrivateMessageQuote"", true);
	}

	/**
	 * Shows the page to reply a private message
	 *
	 * @param id the id of the message to reply
	 */
	@SecurityConstraint(PrivateMessageOwnerRule.class)
	public void reply(int id) {
		PrivateMessage pm = this.repository.get(id);

		this.result.include(""pm"", pm);
		this.result.include(""isPrivateMessageReply"", true);

		this.send();
	}

	/**
	 * Shows the page to read a specific message
	 *
	 * @param id the message id
	 */
	@SecurityConstraint(PrivateMessageOwnerRule.class)
	@Path(""/read/{id}"")
	public void read(int id) {
		PrivateMessage pm = this.repository.get(id);

		if (pm.isNew()) {
			pm.markAsRead();
		}

		this.result.include(""pm"", pm);
		this.result.include(""post"", pm.asPost());
	}

	/**
	 * Shows the page to sent messages
	 */
	public void sent() {
		User user = this.userSession.getUser();
		this.result.include(""privateMessages"", this.repository.getFromSentBox(user));
		this.result.include(""sentbox"", true);
		result.of(this).messages();
	}

	/**
	 * Send a private message to some user
	 *
	 * @param post  the subject and the text
	 * @param options formatting options
	 * @param toUsername recipient username, only necessary if <code>toUserId</code> not set
	 * @param toUserId recipient id, only necessary if <code>toUsername</code> not set
	 */
	public void sendSave(Post post, PostFormOptions options, String toUsername, int toUserId) {
		User toUser = this.findToUser(toUserId, toUsername);

		if (toUser == null || !this.canSendMessageTo(toUser)) {
			// TODO Show a nice message
			throw new ForumException(""User not found"");
		}

		PrivateMessage pm = new PrivateMessage();
		pm.setFromUser(this.userSession.getUser());
		pm.setToUser(toUser);
		pm.setSubject(post.getSubject());
		pm.setText(post.getText());
		pm.setIp(this.userSession.getIp());

		ActionUtils.definePrivateMessageOptions(pm, options);

		this.service.send(pm);
		this.result.redirectTo(Actions.INBOX);
	}

	/**
	 * Shows the page to search for users
	 *
	 * @param username if set, search for this username
	 */
	public void findUser(String username) {
		if (!StringUtils.isEmpty(username)) {
			RoleManager roleManager = this.userSession.getRoleManager();

			if (roleManager.getCanOnlyContactModerators()) {
				List<User> users = this.userRepository.findByUserName(username);
				List<User> result = new ArrayList<User>();

				for (User user : users) {
					RoleManager roles = new RoleManager();
					roles.setGroups(user.getGroups());

					if (roles.isModerator() || roles.isAdministrator() || roles.isCoAdministrator()) {
						result.add(user);
					}
				}

				this.result.include(""users"", result);
			}
			else {
				if (roleManager.roleExists(SecurityConstants.INTERACT_OTHER_GROUPS)) {
					this.result.include(""users"", this.userRepository.findByUserName(username));
				} else {
					User currentUser = this.userSession.getUser();
					this.result.include(""users"", this.userRepository.findByUserName(username, currentUser.getGroups()));
				}
			}
		}

		this.result.include(""username"", username);
	}

	/**
	 * Shows the page to send a new private message
	 */
	public void send() {
		this.result.include(""post"", new Post());
		this.result.include(""isPrivateMessage"", true);
		this.result.include(""attachmentsEnabled"", false);
		this.result.include(""user"", this.userSession.getUser());

		this.result.forwardTo(TopicController.class).add(0);
	}

	/**
	 * Send a private message to a specific user
	 *
	 * @param userId
	 */
	public void sendTo(int userId) {
		User recipient = this.userRepository.get(userId);

		if (this.canSendMessageTo(recipient)) {
			this.result.include(""pmRecipient"", recipient);
			this.send();
		} else {
			this.result.forwardTo(""sendToDenied"");
		}
	}

	private boolean canSendMessageTo(User toUser) {
		UserSession userSession = this.userSession;
		RoleManager roleManager = userSession.getRoleManager();

		if (roleManager.roleExists(SecurityConstants.INTERACT_OTHER_GROUPS)) {
			return true;
		}

		User currentUser = userSession.getUser();

		for (Group group : toUser.getGroups()) {
			if (currentUser.getGroups().contains(group)) {
				if (roleManager.getCanOnlyContactModerators()) {
					RoleManager roles = new RoleManager();
					roles.setGroups(toUser.getGroups());

					return roles.isModerator() || roles.isAdministrator() || roles.isCoAdministrator();
				}

				return true;
			}
		}

		return false;
	}

	/**
	 * Shows the inbox of the current logged user
	 */
	public void inbox() {
		User user = this.userSession.getUser();
		this.result.include(""inbox"", true);
		this.result.include(""privateMessages"", this.repository.getFromInbox(user));
		result.of(this).messages();
	}

	private User findToUser(int userId, String username) {
		return userId == 0 ? this.userRepository.getByUsername(username) : this.userRepository.get(userId);
	}
}"
net.jforum.controllers.ForumAdminController,"public class ForumAdminController {
	private CategoryRepository categoryRepository;
	private ForumRepository forumRepository;
	private ForumService forumService;
	private final Result result;
	private final UserSession userSession;

	public ForumAdminController(ForumService service, ForumRepository forumRepository,
			CategoryRepository categoryRepository, Result result, UserSession userSession) {
		this.forumService = service;
		this.categoryRepository = categoryRepository;
		this.forumRepository = forumRepository;
		this.result = result;
		this.userSession = userSession;
	}

	/**
	 * List all existing forums. In fact, this method act on top of all
	 * categories, where the forums are retrieved from.
	 */
	public void list() {
		this.result.include(""categories"",
			this.categoryRepository.getAllCategories());
	}

	/**
	 * Removes a list of forums
	 */
	public void delete(int... forumsId) {
		RoleManager roleManager = this.userSession.getRoleManager();

		if (roleManager.isAdministrator()) {
			this.forumService.delete(forumsId);
		}

		this.result.redirectTo(this).list();
	}

	/**
	 * Shows the page to add a new forum
	 */
	public void add() {
		this.result.include(""categories"", this.categoryRepository.getAllCategories());
	}

	/**
	 * Saves a new forum
	 *
	 * @param forum
	 */
	public void addSave(Forum forum) {
		RoleManager roleManager = this.userSession.getRoleManager();

		if (roleManager.isAdministrator() || roleManager.isCategoryAllowed(forum.getCategory().getId())) {
			this.forumService.add(forum);
			this.result.include(""forum"", forum);
		}

		this.result.redirectTo(this).list();
	}

	/**
	 * Shows the page to edit a forum
	 *
	 * @param forumId
	 */
	public void edit(int forumId) {
		RoleManager roleManager = this.userSession.getRoleManager();

		if (!roleManager.getCanModerateForum(forumId)) {
			this.result.redirectTo(this).list();
		}
		else {
			this.result.include(""forum"", this.forumRepository.get(forumId));
			this.result.include(""categories"", this.categoryRepository.getAllCategories());
			this.result.forwardTo(this).add();
		}
	}

	/**
	 * Updates the data of an existing forum
	 *
	 * @param forum
	 */
	public void editSave(Forum forum) {
		RoleManager roleManager = this.userSession
				.getRoleManager();

		if (roleManager.isAdministrator()
				|| roleManager.getCanModerateForum(forum.getId())) {
			this.forumService.update(forum);
		}

		this.result.redirectTo(this).list();
	}

	/**
	 * Changes the order of the specified category, adding it one level up.
	 *
	 * @param forumId
	 *            the id of the category to change
	 */
	public void up(int forumId) {
		RoleManager roleManager = this.userSession.getRoleManager();

		if (roleManager.getCanModerateForum(forumId)) {
			this.forumService.upForumOrder(forumId);
		}

		this.result.redirectTo(this).list();
	}

	/**
	 * Changes the order of the specified category, adding it one level down.
	 *
	 * @param forumId
	 *            the id of the category to change
	 */
	public void down(int forumId) {
		RoleManager roleManager = this.userSession.getRoleManager();

		if (roleManager.getCanModerateForum(forumId)) {
			this.forumService.downForumOrder(forumId);
		}

		this.result.redirectTo(this).list();
	}
}"
net.jforum.controllers.TopicController,"public class TopicController {
	private ForumRepository forumRepository;
	private PostRepository postRepository;
	private SmilieRepository smilieRepository;
	private TopicService topicService;
	private JForumConfig config;
	private TopicRepository topicRepository;
	private CategoryRepository categoryRepository;
	private RankingRepository rankingRepository;
	private SessionManager sessionManager;
	private PollRepository pollRepository;
	private AttachmentService attachmentService;
	private HttpServletRequest request;
	private final ForumLimitedTimeRepository forumLimitedTimeRepository;
	private final Result result;
	private final UserSession userSession;

	public TopicController(Result result, JForumConfig config,
			TopicService topicService, ForumRepository forumRepository,
			SmilieRepository smilieRepository, PostRepository postRepository,
			TopicRepository topicRepository,
			CategoryRepository categoryRepository,
			RankingRepository rankingRepository, SessionManager sessionManager,
			PollRepository pollRepository,
			ForumLimitedTimeRepository forumLimitedTimeRepository,
			AttachmentService attachmentService, HttpServletRequest request, UserSession userSession) {
		this.result = result;
		this.forumRepository = forumRepository;
		this.smilieRepository = smilieRepository;
		this.topicService = topicService;
		this.postRepository = postRepository;
		this.config = config;
		this.topicRepository = topicRepository;
		this.categoryRepository = categoryRepository;
		this.rankingRepository = rankingRepository;
		this.sessionManager = sessionManager;
		this.pollRepository = pollRepository;
		this.forumLimitedTimeRepository = forumLimitedTimeRepository;
		this.attachmentService = attachmentService;
		this.request = request;
		this.userSession = userSession;
	}

	public void preList(int topicId, int postId) {
		int count = this.postRepository.countPreviousPosts(postId);
		int postsPerPage = this.config.getInt(ConfigKeys.POSTS_PER_PAGE);

		if (topicId == 0) {
			Post post = this.postRepository.get(postId);
			topicId = post.getTopic().getId();
		}

		String url = null;

		if (count > postsPerPage) {
			int page = new Pagination().calculeStartFromCount(count, postsPerPage);
			url = URLBuilder.build(Domain.TOPICS, Actions.LIST, page, topicId);
		}
		else {
			url = URLBuilder.build(Domain.TOPICS, Actions.LIST, topicId);
		}

		this.result.redirectTo(url + ""#"" + postId);
	}

	/**
	 * Shows the page to quote an existing message
	 *
	 * @param postId
	 *            the id of the post to quote
	 */
	@SecurityConstraint(ReplyTopicRule.class)
	public void quote(int postId) {
		Post post = this.postRepository.get(postId);

		this.result.include(""post"", post);
		this.result.include(""isQuote"", true);
		this.result.include(""isReply"", true);
		this.result.include(""topic"", post.getTopic());
		this.result.include(""forum"", post.getForum());
		this.result.include(""smilies"", this.smilieRepository.getAllSmilies());

		this.result.of(this).add(0);
	}

	public void vote(int topicId, int pollId, int optionId) {
		UserSession userSession = this.userSession;

		if (userSession.isLogged() && optionId != 0) {
			User user = userSession.getUser();
			Poll poll = this.topicRepository.get(topicId).getPoll();

			if (!this.pollRepository.hasUserVoted(poll, user) && poll.isOpen()) {

				PollVoter voter = new PollVoter();
				voter.setIp(userSession.getIp());
				voter.setPoll(poll);
				voter.setUser(user);

				this.pollRepository.registerVote(voter);

				PollOption option = this.pollRepository.getOption(optionId);
				option.incrementVotes();
			}
		}

		// TODO pass 0 and true?
		this.result.redirectTo(this).list(topicId, 0, true);
	}

	/**
	 * Shows the message review page
	 *
	 * @param topicId
	 *            the id of the topic being replies
	 */
	@SecurityConstraint(ReplyTopicRule.class)
	public void replyReview(int topicId) {
		Topic topic = this.topicRepository.get(topicId);

		Pagination pagination = new Pagination(this.config, 0).forTopic(topic);
		int start = pagination.calculeStart(pagination.getTotalPages(),
				this.config.getInt(ConfigKeys.POSTS_PER_PAGE));

		this.result.include(""topic"", topic);
		this.result.include(""posts"",
				topic.getPosts(start, pagination.getRecordsPerPage()));
	}

	/**
	 * Displays the page to preview a message before posting it
	 *
	 * @param message
	 *            the message to preview
	 * @param options
	 *            the formatting options
	 */
	public void preview(String message, PostFormOptions options) {
		Post post = new Post();

		post.setText(message);
		post.setBbCodeEnabled(options.isBbCodeEnabled());
		post.setHtmlEnabled(options.isHtmlEnabled());
		post.setSmiliesEnabled(options.isSmiliesEnabled());

		this.result.include(""post"", post);
	}

	/**
	 * Shows the page to create a new topic
	 *
	 * @param forumId
	 *            the forum where the topic should be created
	 */
	@SecurityConstraint(CreateNewTopicRule.class)
	public void add(int forumId) {
		Forum forum = this.forumRepository.get(forumId);

		if (!result.included().containsKey(""forum"")) {
			this.result.include(""forum"", forum);
		}

		if (!result.included().containsKey(""post"")) {
			this.result.include(""post"", new Post());
		}

		this.result.include(""isNewTopic"", true);
		this.result.include(""smilies"", this.smilieRepository.getAllSmilies());
	}

	/**
	 * Shows the page to reply an existing topic
	 *
	 * @param topicId the id of the topic to reply
	 */
	@SecurityConstraint(ReplyTopicRule.class)
	public void reply(int topicId) {
		Topic topic = this.topicRepository.get(topicId);
		Forum forum = topic.getForum();

		this.result.include(""isReply"", true);
		this.result.include(""post"", new Post());
		this.result.include(""topic"", topic);
		this.result.include(""forum"", forum);
		this.result.include(""smilies"", this.smilieRepository.getAllSmilies());

		result.of(this).add(forum.getId());
	}

	/**
	 * Adds a reply to an existing topic.
	 *
	 * @param topic the topic the reply is made
	 * @param post the reply itself
	 * @param options post formatting options
	 */
	@SecurityConstraint(ReplyTopicRule.class)
	public void replySave(Topic topic, Post post, PostFormOptions options) {

		UserSession userSession = this.userSession;

		post.setUserIp(userSession.getIp());
		post.setUser(userSession.getUser());

		ActionUtils.definePostOptions(post, options);

		RoleManager roleManager = userSession.getRoleManager();
		List<AttachedFile> attachments = new ArrayList<AttachedFile>();

		if (roleManager.isAttachmentsAlllowed(topic.getForum().getId())) {
			attachments = this.attachmentService.processNewAttachments(request);
		}

		topic = this.topicRepository.get(topic.getId());

		if (topic.getForum().isModerated() && !roleManager.isModerator()) {
			post.setModerate(true);
		}

		this.topicService.reply(topic, post, attachments);

		if (post.isWaitingModeration()) {
			this.result.redirectTo(MessageController.class).replyWaitingModeration(topic.getId());
		}
		else {
			this.redirecToListing(topic, post);
		}
	}

	/**
	 * List all posts from a given topic
	 *
	 * @param topicId the id of the topic to show
	 * @param page the initial page to start showing
	 */
	@SecurityConstraint(value = AccessForumRule.class, displayLogin = true)
	@Path(""/list/{topicId}"")
	public void list(int topicId, int page, boolean viewPollResults) {
		Topic topic = this.topicRepository.get(topicId);

		if (topic.isWaitingModeration()) {
			this.result.redirectTo(MessageController.class).topicWaitingModeration(topic.getForum().getId());
			return;
		}

		// FIXME resolve cache issues
		// topic.incrementViews();
		UserSession userSession = this.userSession;
		userSession.markTopicAsRead(topicId);

		Pagination pagination = new Pagination(this.config, page).forTopic(topic);

		boolean canVoteOnPolls = userSession.isLogged()
				&& userSession.getRoleManager().getCanVoteOnPolls();

		if (canVoteOnPolls && topic.isPollEnabled()) {
			canVoteOnPolls = !this.pollRepository.hasUserVoted(topic.getPoll(),
					userSession.getUser());
		}

		this.result.include(""canVoteOnPolls"", canVoteOnPolls);
		this.result.include(""viewPollResults"", viewPollResults);
		this.result.include(""topic"", topic);
		this.result.include(""forum"", topic.getForum());
		this.result.include(""pagination"", pagination);
		this.result.include(""isModeratorOnline"",
				this.sessionManager.isModeratorOnline());
		this.result
				.include(""rankings"", this.rankingRepository.getAllRankings());
		this.result.include(""categories"",
				this.categoryRepository.getAllCategories());

		List<Post> posts = topic.getPosts(pagination.getStart(),
				pagination.getRecordsPerPage());
		if (posts.isEmpty() == false) {
			long limitedTime = this.forumLimitedTimeRepository
					.getLimitedTime(posts.get(0).getForum());

			if (limitedTime > 0) {
				Date now = new Date();
				for (Post post : posts) {
					post.calculateHasEditTimeExpired(limitedTime, now);
				}
			}
		}
		this.result.include(""posts"", posts);
	}

	/**
	 * Saves a new topic.
	 *
	 * @param topic the topic to save.
	 * @param post the post itself
	 * @param opti the formatting options
	 */
	@SecurityConstraint(CreateNewTopicRule.class)
	public void addSave(Topic topic, Post post, PostFormOptions postOptions, List<PollOption> pollOptions) {

		ActionUtils.definePostOptions(post, postOptions);
		UserSession userSession = this.userSession;
		List<AttachedFile> attachments = new ArrayList<AttachedFile>();

		if (userSession.getRoleManager().isAttachmentsAlllowed(topic.getForum().getId())) {
			attachments = this.attachmentService.processNewAttachments(this.request);
		}

		topic.setType(postOptions.getTopicType());
		topic.setSubject(post.getSubject());
		topic.setUser(userSession.getUser());
		post.setUserIp(userSession.getIp());
		topic.setFirstPost(post);

		Forum forum = this.forumRepository.get(topic.getForum().getId());

		if (forum.isModerated() && !userSession.getRoleManager().isModerator()) {
			topic.setPendingModeration(true);
		}

		if (!userSession.getRoleManager().getCanCreateStickyAnnouncementTopics()) {
			topic.setType(Topic.TYPE_NORMAL);
		}

		if (!userSession.getRoleManager().getCanCreatePolls()) {
			topic.setPoll(null);
		}

		topicService.addTopic(topic, pollOptions, attachments);
		this.result.include(""topic"", topic);

		if (topic.isWaitingModeration()) {
			this.result.redirectTo(MessageController.class).topicWaitingModeration(topic.getForum().getId());
		} else {
			this.redirecToListing(topic, post);
		}
	}

	public void listSmilies() {
		this.result.include(""smilies"", this.smilieRepository.getAllSmilies());
	}

	@SecurityConstraint(value = DownloadAttachmentRule.class)
	public File downloadAttachment(int attachmentId) {
		Attachment attachment = this.attachmentService.getAttachmentForDownload(attachmentId);
		String downloadPath = this.attachmentService.buildDownloadPath(attachment);

		if (!new File(downloadPath).exists()) {
			// TODO show a nice message instead
			throw new ForumException(""Attachment not found"");
		}

		return new File(attachment.getRealFilename());
	}

	private void redirecToListing(Topic topic, Post post) {
		Pagination pagination = new Pagination(this.config, 0).forTopic(topic);

		StringBuilder url = new StringBuilder(
			pagination.getTotalPages() > 1
				? URLBuilder.build(Domain.TOPICS, Actions.LIST,pagination.getTotalPages(), topic.getId())
				: URLBuilder.build(Domain.TOPICS, Actions.LIST, topic.getId()));

		url.append('#').append(post.getId());

		this.result.redirectTo(url.toString());
	}
}"
net.jforum.controllers.GroupAdminController,"public class GroupAdminController {
	private GroupRepository groupRepository;
	private CategoryRepository categoryRepository;
	private GroupService service;
	private final Result result;
	private final UserSession userSession;
	private final HttpServletRequest request;

	public GroupAdminController(GroupService service, GroupRepository repository,
			CategoryRepository categoryRepository, Result result, UserSession userSession,
			HttpServletRequest request) {
		this.service = service;
		this.groupRepository = repository;
		this.categoryRepository = categoryRepository;
		this.userSession = userSession;
		this.result = result;
		this.request = request;
	}

	/**
	 * Shows the page to set permissions for a specific group
	 *
	 * @param groupId the group id
	 */
	public void permissions(int groupId) {
		Group group = this.groupRepository.get(groupId);
		RoleManager roleManager = this.userSession.getRoleManager();

		if (!roleManager.isAdministrator() && !roleManager.isGroupManager(groupId)) {
			this.result.redirectTo(this).list();
		}
		else {
			this.result.include(""group"", group);
			this.result.include(""groups"", this.groupRepository.getAllGroups());
			this.result.include(""categories"", this.categoryRepository.getAllCategories());

			RoleManager groupRoleManager = new RoleManager();
			groupRoleManager.setGroups(Arrays.asList(group));
			this.result.include(""roleManager"", groupRoleManager);
		}
	}

	/**
	 * Save the permissions for this group
	 *
	 * @param groupId the id of the group to save
	 * @param permissions the set of permissions of this group
	 */
	public void permissionsSave(int groupId) {
		RoleManager roleManager = this.userSession.getRoleManager();

		if (roleManager.isAdministrator() || roleManager.isGroupManager(groupId)) {
			this.service.savePermissions(groupId, extractPermissionsFromRequest());
		}

		this.result.redirectTo(this).list();
	}

	private Map<String, Map<String, List<?>>> extractPermissionsFromRequest() {
		Map<String, Map<String, List<?>>> m = new HashMap<String, Map<String,List<?>>>();
		m.put(""boolean"", new HashMap<String, List<?>>());
		m.put(""multiple"", new HashMap<String, List<?>>());

		for (Enumeration<?> e = request.getParameterNames(); e.hasMoreElements(); ) {
			String fieldName = (String)e.nextElement();

			if (fieldName.startsWith(""role_"")) {
				String key = fieldName.substring(7);

				if (fieldName.startsWith(""role_b$"")) {
					m.get(""boolean"").put(key, Arrays.asList(""true"".equals(request.getParameter(fieldName))));
				}
				else {
					List<Integer> l = new ArrayList<Integer>();
					for (String v : request.getParameterValues(fieldName)) {
						l.add(Integer.parseInt(v));
					}
					m.get(""multiple"").put(key, l);
				}
			}
		}

		return m;
	}

	/**
	 * List all existing groups
	 */
	public void list() {
		this.result.include(""groups"", this.groupRepository.getAllGroups());
	}

	/**
	 * Shows the page to add a new group
	 */
	public void add() {
		RoleManager roleManager = this.userSession.getRoleManager();

		if (!roleManager.isAdministrator()) {
			this.result.redirectTo(this).list();
		}
	}

	/**
	 * Delete one or more groups
	 *
	 * @param groupId
	 *            the id of the groups to delete
	 */
	public void delete(int... groupId) {
		RoleManager roleManager = this.userSession.getRoleManager();

		if (roleManager.isAdministrator()) {
			this.service.delete(groupId);
		}

		this.result.redirectTo(this).list();
	}

	/**
	 * Shows the page to edit a group
	 *
	 * @param groupId
	 */
	public void edit(int groupId) {
		RoleManager roleManager = this.userSession.getRoleManager();

		if (!roleManager.isAdministrator() && !roleManager.isGroupManager(groupId)) {
			this.result.redirectTo(this).list();
		}
		else {
			this.result.include(""group"", this.groupRepository.get(groupId));
			this.result.forwardTo(this).add();
		}
	}

	/**
	 * Saves the new information of an existing group
	 *
	 * @param group
	 */
	public void editSave(Group group) {
		RoleManager roleManager = this.userSession.getRoleManager();

		if (roleManager.isAdministrator() || roleManager.isGroupManager(group.getId())) {
			this.service.update(group);
		}

		this.result.redirectTo(this).list();
	}

	/**
	 * Save a new grop
	 *
	 * @param group
	 */
	public void addSave(Group group) {
		RoleManager roleManager = this.userSession.getRoleManager();

		if (roleManager.isAdministrator()) {
			this.service.add(group);
		}

		this.result.redirectTo(this).list();
	}
}"
net.jforum.controllers.SearchController,"public class SearchController {
	private JForumConfig config;
	private SearchRepository searchRepository;
	private CategoryRepository categoryRepository;
	private UserSession userSession;
	private final Result result;

	public SearchController(CategoryRepository categoryRepository,
			JForumConfig config, SearchRepository searchRepository,
			UserSession userSession, Result result) {
		this.categoryRepository = categoryRepository;
		this.config = config;
		this.searchRepository = searchRepository;
		this.userSession = userSession;
		this.result = result;
	}

	/**
	 * Shows the page to start a new search
	 */
	public void filters() {
		this.result.include(""categories"",
				this.categoryRepository.getAllCategories());
	}

	public void execute(SearchParams params) {
		if (StringUtils.isEmpty(params.getQuery())
				&& StringUtils.isEmpty(params.getUser())) {
			this.result.redirectTo(Actions.FILTERS);
		} else {
			try {
				params.setMaxResults(this.config
						.getInt(ConfigKeys.TOPICS_PER_PAGE));

				SearchResult result = this.searchRepository.search(params)
						.filter(this.userSession.getRoleManager());

				Pagination pagination = new Pagination(this.config,
						params.getStart()).forSearch(result.getTotalRecords());

				this.result.include(""results"", result.getResults());
				this.result.include(""searchParams"", params);
				this.result.include(""pagination"", pagination);
				this.result.include(""categories"",
						this.categoryRepository.getAllCategories());
			} catch (ParseException e) {
				this.result.include(""parseError"", true);
				this.result.include(""parseErrorMessage"", e.toString());
			}
		}
	}
}"
net.jforum.controllers.ModerationController,"public class ModerationController {
	private final RoleManager roleManager;
	private final ModerationService moderationService;
	private final CategoryRepository categoryRepository;
	private final TopicRepository topicRepository;
	private final JForumConfig config;
	private final ModerationLogRepository logRepository;
	private final UserSession userSession;
	private final Result result;

	public ModerationController(Result result, RoleManager roleManager,
			ModerationService moderationService,
			CategoryRepository categoryRepository,
			TopicRepository topicRepository, JForumConfig config,
			ModerationLogRepository logRepository, UserSession userSession) {
		this.result = result;
		this.roleManager = roleManager;
		this.moderationService = moderationService;
		this.categoryRepository = categoryRepository;
		this.topicRepository = topicRepository;
		this.config = config;
		this.logRepository = logRepository;
		this.userSession = userSession;
	}

	public void showActivityLog(int page) {
		if (!roleManager.roleExists(SecurityConstants.VIEW_MODERATION_LOG)) {
			this.result.redirectTo(MessageController.class).accessDenied();
			return;
		}

		Pagination pagination = new Pagination(this.config, page)
				.forModerationLog(this.logRepository.getTotalRecords());
		List<ModerationLog> logs = this.logRepository.getAll(
				pagination.getStart(), pagination.getRecordsPerPage());

		this.result.include(""logs"", logs);
		this.result.include(""pagination"", pagination);
	}

	/**
	 * Move a set of topics to another forum
	 * 
	 * @param toForumId
	 *            the destination forum
	 * @param returnUrl
	 *            the url to redirect after the operation completes
	 * @param topicIds
	 *            the id of the topics to move
	 */
	@SecurityConstraint(ModerationRule.class)
	public void moveTopics(int toForumId, String returnUrl,
			ModerationLog moderationLog, int... topicIds) {

		if (this.roleManager.getCanMoveTopics()) {
			if (moderationLog != null) {
				moderationLog.setUser(this.userSession.getUser());
			}

			this.moderationService.moveTopics(toForumId, moderationLog,
					topicIds);
		}

		this.result.redirectTo(returnUrl);
	}

	/**
	 * Shows the page to ask for the destination forum for a set of topics to
	 * move
	 * 
	 * @param returnUrl
	 *            the return url to redirect after the operation is done
	 * @param topicIds
	 *            the id of the topics to move
	 */
	@SecurityConstraint(ModerationRule.class)
	public void askMoveDestination(String returnUrl, int forumId,
			int... topicIds) {
		if (!this.roleManager.getCanMoveTopics()) {
			this.result.redirectTo(returnUrl);
		} else {
			this.result.include(""fromForumId"", forumId);
			this.result.include(""topicIds"", topicIds);
			this.result.include(""returnUrl"", returnUrl);
			this.result.include(""categories"",
					this.categoryRepository.getAllCategories());
		}
	}

	/**
	 * Lock or unlock a set of topics
	 * 
	 * @param forumId
	 *            the forum
	 * @param returnUrl
	 *            the return url, if any
	 * @param topicIds
	 *            the id of the topics to lock or unlock
	 */
	@SecurityConstraint(ModerationRule.class)
	public void lockUnlock(int forumId, String returnUrl,
			ModerationLog moderationLog, int[] topicIds) {

		if (this.roleManager.getCanLockUnlockTopics()) {
			if (moderationLog != null) {
				moderationLog.setUser(this.userSession.getUser());
			}

			this.moderationService.lockUnlock(topicIds, moderationLog);
		}

		if (!StringUtils.isEmpty(returnUrl)) {
			this.result.forwardTo(returnUrl);
		} else {
			// TODO pass zero?
			this.result.redirectTo(ForumController.class).show(forumId, 0);
		}
	}

	/**
	 * Delete a set of topics
	 * 
	 * @param forumId
	 *            the forum
	 * @param topicIds
	 *            the id of the topics to delete
	 */
	@SecurityConstraint(ModerationRule.class)
	public void deleteTopics(int forumId, String returnUrl, int[] topicIds,
			ModerationLog moderationLog) {

		if (this.roleManager.getCanDeletePosts()) {
			List<Topic> topics = new ArrayList<Topic>();

			for (int topicId : topicIds) {
				Topic topic = this.topicRepository.get(topicId);
				topics.add(topic);
			}

			if (moderationLog != null) {
				moderationLog.setUser(this.userSession.getUser());
			}

			this.moderationService.deleteTopics(topics, moderationLog);
		}

		if (!StringUtils.isEmpty(returnUrl)) {
			this.result.redirectTo(returnUrl);
		} else {
			// TODO pass zero?
			this.result.redirectTo(ForumController.class).show(forumId, 0);
		}
	}

	/**
	 * Approves ou denies currently moderated messages
	 * 
	 * @param forumId
	 *            the forum
	 * @param info
	 *            the set of posts to approve or deny, and the respective status
	 *            of each one
	 */
	@SecurityConstraint(ModerationRule.class)
	public void approve(int forumId, List<ApproveInfo> info) {
		if (this.roleManager.getCanApproveMessages()) {
			this.moderationService.doApproval(forumId, info);
		}

		// TODO pass zero?
		this.result.redirectTo(ForumController.class).show(forumId, 0);
	}
}"
net.jforum.controllers.SmilieAdminController,"public class SmilieAdminController {
	private SmilieRepository repository;
	private SmilieService service;
	private final Result result;

	public SmilieAdminController(SmilieService service,
			SmilieRepository repository, Result result) {
		this.service = service;
		this.repository = repository;
		this.result = result;
	}

	/**
	 * List all smilies
	 */
	public void list() {
		this.result.include(""smilies"", this.repository.getAllSmilies());
	}

	/**
	 * Shows the page to insert a new smilie
	 */
	public void add() {

	}

	/**
	 * Saves a new smilie
	 *
	 * @param smilie
	 */
	public void addSave(Smilie smilie, UploadedFile image) {
		this.service.add(smilie, image);
		this.result.redirectTo(this).list();
	}

	/**
	 * Shows the page to edit a existing smilie
	 */
	public void edit(int smilieId) {
		this.result.include(""smilie"", this.repository.get(smilieId));
		this.result.forwardTo(this).add();
	}

	public void editSave(Smilie smilie, UploadedFile image) {
		this.service.update(smilie, image);
		this.result.redirectTo(this).list();
	}

	/**
	 * Deletes smilies
	 *
	 * @param smiliesId
	 */
	public void delete(int... smiliesId) {
		this.service.delete(smiliesId);
		this.result.redirectTo(this).list();
	}
}"
net.jforum.controllers.UserAdminController,"public class UserAdminController {
	private UserRepository userRepository;
	private GroupRepository groupRepository;
	private JForumConfig config;
	private UserService userService;
	private final Result result;
	private final UserSession userSession;

	public UserAdminController(UserRepository repository, GroupRepository groupRepository, JForumConfig config,
			UserService userService, Result result, UserSession userSession) {
		this.userRepository = repository;
		this.groupRepository = groupRepository;
		this.config = config;
		this.userService = userService;
		this.result = result;
		this.userSession = userSession;
	}

	/**
	 * Shows the page to edit an user
	 *
	 * @param userId the id of the user to edit
	 */
	public void edit(int userId) {
		result.forwardTo(UserController.class).edit(userId);
	}

	/**
	 * Shows the page to edit the user groups
	 *
	 * @param userId
	 */
	public void groups(int userId) {
		this.result.include(""user"", this.userRepository.get(userId));
		this.result.include(""groups"", this.groupRepository.getAllGroups());
	}

	public void lockUnlock(int[] userIds) {
		result.of(this).list(0);
	}

	/**
	 * Save the groups
	 *
	 * @param userId the user id
	 * @param groupIds the id of the groups for the user
	 */
	public void groupsSave(int userId, int... groupIds) {
		RoleManager roleManager = this.userSession.getRoleManager();
		boolean canSave = roleManager.isAdministrator();

		if (!canSave) {
			canSave = true;

			for (int groupId : groupIds) {
				canSave = canSave && roleManager.isGroupManager(groupId);
			}
		}

		if (canSave) {
			this.userService.saveGroups(userId, groupIds);
		}

		this.result.redirectTo(this).list(0);
	}

	/**
	 * Search for users
	 *
	 * @param username the username to search
	 */
	public void search(String username) {
		List<User> users = this.userRepository.findByUserName(username);
		this.result.include(""users"", users);
		this.result.include(""username"", username);

		this.result.of(this).list(0);
	}

	/**
	 * List all users
	 *
	 * @param page
	 */
	public void list(int page) {
		Pagination pagination = new Pagination(this.config, page).forUsers(this.userRepository.getTotalUsers());

		this.result.include(""pagination"", pagination);
		this.result.include(""users"", this.userRepository.getAllUsers(pagination.getStart(), pagination.getRecordsPerPage()));
	}
}"
net.jforum.controllers.AvatarAdminController,"public class AvatarAdminController {

	private AvatarService avatarService;
	private AvatarRepository repository;
	private final Result result;

	public AvatarAdminController(Result result, AvatarRepository repository,
			AvatarService service) {
		this.result = result;
		this.repository = repository;
		this.avatarService = service;
	}

	/**
	 * Deletes avatars
	 * 
	 * @param avatarId
	 *            One or many avatar id's for the avatars to be deleted.
	 */
	public void delete(int... avatarId) {
		if (avatarId != null) {
			for (int id : avatarId) {
				Avatar avatar = this.repository.get(id);
				this.repository.remove(avatar);
			}
		}

		this.result.redirectTo(this).list();
	}

	/**
	 * List all avatars
	 */
	public void list() {
		this.result.include(""GalleryAvatars"",
				this.repository.getGalleryAvatar());
		this.result.include(""UploadedAvatars"",
				this.repository.getUploadedAvatar());
	}

	public void add() {

	}

	/**
	 * Saves a new avatar
	 * 
	 * @param avatar
	 *            The avatar to be saved.
	 * @param image
	 *            Vraptor information object carrying info about the uploaded
	 *            avatar.
	 */
	public void addSave(Avatar avatar, UploadedFile image) {
		this.avatarService.add(avatar, image);
		this.result.redirectTo(Actions.LIST);
	}

	/**
	 * Shows the page to edit a existing avatar
	 * 
	 * @param avatarId
	 *            The avatar id for the avatar to be edited.
	 */
	public void edit(int avatarId) {
		this.result.include(""avatar"", this.repository.get(avatarId));
		this.result.forwardTo(Actions.ADD);
	}

	public void editSave(Avatar avatar, UploadedFile image) {
		this.avatarService.update(avatar, image);
		this.result.redirectTo(this).list();
	}

}"
net.jforum.controllers.PostController,"public class PostController {
	private PostRepository postRepository;
	private SmilieRepository smilieRepository;
	private PostService postService;
	private JForumConfig config;
	private UserSession userSession;
	private AttachmentService attachmentService;
	private HttpServletRequest request;
	private final Result result;

	public PostController(PostRepository postRepository, SmilieRepository smilieRepository,
			PostService postService, JForumConfig config, UserSession userSession,
		AttachmentService attachmentService, HttpServletRequest request, Result result) {
		this.postRepository = postRepository;
		this.smilieRepository = smilieRepository;
		this.postService = postService;
		this.config = config;
		this.userSession = userSession;
		this.attachmentService = attachmentService;
		this.request = request;
		this.result = result;
	}

	/**
	 * Deletes an existing post
	 * @param postId
	 */
	@SecurityConstraint(value = ChangePostRule.class)
	public void delete(int postId) {
		Post post = this.postRepository.get(postId);
		Topic topic = post.getTopic();
		this.postService.delete(post);

		if (topic.getTotalPosts() > 0) {
			this.redirecToListing(topic);
		}
		else {
			//TODO pass zero?
			this.result.redirectTo(ForumController.class).show(topic.getForum().getId(), 0);
		}
	}

	/**
	 * Saves an existing message
	 * @param post the message to save
	 * @param postOptions the formatting options
	 */
	@SecurityConstraint(value = ChangePostRule.class)
	public void editSave( Post post,  PostFormOptions postOptions, List<PollOption> pollOptions,  ModerationLog moderationLog) {

		ActionUtils.definePostOptions(post, postOptions);
		post.getTopic().setType(postOptions.getTopicType());

		Post currentPost = this.postRepository.get(post.getId());
		List<AttachedFile> attachments = new ArrayList<AttachedFile>();

		RoleManager roleManager = this.userSession.getRoleManager();

		if (roleManager.isAttachmentsAlllowed(currentPost.getForum().getId())) {
			attachments = this.attachmentService.processNewAttachments(this.request);
			this.attachmentService.editAttachments(currentPost, request);
		}

		if (!roleManager.getCanCreatePolls()) {
			pollOptions = new ArrayList<PollOption>();
		}

		if (moderationLog != null) {
			moderationLog.setUser(this.userSession.getUser());
		}

		this.postService.update(post, roleManager.getCanCreateStickyAnnouncementTopics(), pollOptions, attachments, moderationLog);
		this.result.redirectTo(TopicController.class).list(post.getTopic().getId(), 0, true);
	}

	/**
	 * Shows the page to edit an existing post
	 * @param postId the id of the post to edit
	 */
	@SecurityConstraint(value = ChangePostRule.class)
	public void edit(int postId) {
		Post post = this.postRepository.get(postId);

		this.result.include(""isEdit"", true);
		this.result.include(""post"", post);
		this.result.include(""topic"", post.getTopic());
		this.result.include(""forum"", post.getTopic().getForum());
		this.result.include(""smilies"", this.smilieRepository.getAllSmilies());

		this.result.forwardTo(TopicController.class).add(0);

	}

	private void redirecToListing(Topic topic) {
		Pagination pagination = new Pagination(this.config, 0).forTopic(topic);

		String url;
		if(pagination.getTotalPages() > 1) {
			url = URLBuilder.build(Domain.TOPICS, Actions.LIST, pagination.getTotalPages(), topic.getId());
		} else {
			url = URLBuilder.build(Domain.TOPICS, Actions.LIST, topic.getId());
		}

		this.result.redirectTo(url);
	}
}"
net.jforum.controllers.CategoryAdminController,"public class CategoryAdminController {
	private CategoryRepository categoryRepository;
	private CategoryService categoryService;
	private final Result result;

	public CategoryAdminController(CategoryRepository categoryRepository,
			CategoryService categoryService, Result result) {
		this.categoryRepository = categoryRepository;
		this.categoryService = categoryService;
		this.result = result;
	}

	public void add() {

	}

	/**
	 * Add a new category
	 *
	 * @param category
	 */
	public void addSave(Category category) {
		this.categoryService.add(category);
		this.result.redirectTo(this).list();
	}

	/**
	 * Edit an existing category
	 *
	 * @param categoryId
	 */
	public void edit(int categoryId) {
		this.result.include(""category"", this.categoryRepository.get(categoryId));
		this.result.forwardTo(this).add();
	}

	/**
	 * Saves the information of an existing category
	 *
	 * @param category
	 */
	public void editSave(Category category) {
		this.categoryService.update(category);
		this.result.redirectTo(this).list();
	}

	/**
	 * Removes a list of categories
	 */
	public void delete(int... categoriesId) {
		this.categoryService.delete(categoriesId);
		this.result.redirectTo(this).list();
	}

	/**
	 * List all existing categories
	 */
	public void list() {
		this.result.include(""categories"", this.categoryRepository.getAllCategories());
	}

	/**
	 * Changes the order of the specified category, adding it one level up.
	 *
	 * @param categoryId
	 *            the id of the category to change
	 */
	public void up(int categoryId) {
		this.categoryService.upCategoryOrder(categoryId);
		this.result.redirectTo(this).list();
	}

	/**
	 * Changes the order of the specified category, adding it one level down.
	 *
	 * @param categoryId
	 *            the id of the category to change
	 */
	public void down(int categoryId) {
		this.categoryService.downCategoryOrder(categoryId);
		this.result.redirectTo(this).list();
	}
}"
net.jforum.controllers.RecentTopicsController,"public class RecentTopicsController {
	private final RecentTopicsRepository repository;
	private final JForumConfig config;
	private final UserSession userSession;
	private final Result result;

	public RecentTopicsController(RecentTopicsRepository repository, JForumConfig config, UserSession userSession, Result result) {
		this.repository = repository;
		this.config = config;
		this.userSession = userSession;
		this.result = result;
	}

	public void list() {

	}

	public void listNew() {
		this.list(this.repository.getNewTopics(this.config.getInt(ConfigKeys.RECENT_TOPICS)), ""recentTopicsNew"");
	}

	public void listUpdated() {
		this.list(this.repository.getUpdatedTopics(this.config.getInt(ConfigKeys.RECENT_TOPICS)), ""recentTopicsUpdated"");
	}

	public void listHot() {
		this.list(this.repository.getHotTopics(this.config.getInt(ConfigKeys.RECENT_TOPICS)), ""recentTopicsHot"");
	}

	private void list(List<Topic> topics, String key) {
		TopicFilter filter = new TopicFilter();

		this.result.include(""topics"", filter.filter(topics, this.userSession.getRoleManager()));
		this.result.include(""recentTopicsSectionKey"", key);

		result.of(this).list();
	}
}"
net.jforum.controllers.LuceneAdminController,"public class LuceneAdminController {
	private JForumConfig config;
	private ForumRepository forumRepository;
	private SessionFactory sessionFactory;
	private final Result result;

	public LuceneAdminController(JForumConfig config,
			ForumRepository forumRepository, SessionFactory sessionFactory,
			Result result) {
		this.config = config;
		this.forumRepository = forumRepository;
		this.sessionFactory = sessionFactory;
		this.result = result;
	}

	public void rebuildIndex() {

		Runnable indexingJob = new Runnable() {
			public void run() {
				Session session = null;

				try {
					session = sessionFactory.openSession();

					FullTextSession fullTextSession = Search
							.createFullTextSession(session);
					fullTextSession.setFlushMode(FlushMode.MANUAL);
					fullTextSession.setCacheMode(CacheMode.IGNORE);

					session.beginTransaction();

					int index = 0;
					int batchSize = config.getInt(ConfigKeys.LUCENE_BATCH_SIZE);

					ScrollableResults results = fullTextSession
							.createCriteria(Post.class)
							.createAlias(""topic"", ""t"")
							.scroll(ScrollMode.FORWARD_ONLY);

					while (results.next()
							&& ""1"".equals(config
									.getValue(ConfigKeys.LUCENE_CURRENTLY_INDEXING))) {
						index++;

						fullTextSession.index(results.get(0));

						if (index % batchSize == 0) {
							session.clear();
						}
					}

					session.getTransaction().commit();
				} catch (Exception e) {
					if (session.getTransaction().isActive()) {
						session.getTransaction().rollback();
					}
				} finally {
					if (session.isOpen() && session.isConnected()) {
						session.close();
					}
				}
			}
		};

		this.config.addProperty(ConfigKeys.LUCENE_CURRENTLY_INDEXING, ""1"");

		Thread thread = new Thread(indexingJob);
		thread.start();

		this.result.redirectTo(this).list();
	}

	public void cancelIndexing() {
		this.config.addProperty(ConfigKeys.LUCENE_CURRENTLY_INDEXING, ""0"");
		this.result.redirectTo(this).list();
	}

	/**
	 * Shows the main statistics page
	 */
	public void list() {
		IndexReader indexReader = null;
		ReaderProvider readerProvider = null;

		try {
			SearchFactory searchFactory = Search.createFullTextSession(
					this.sessionFactory.getCurrentSession()).getSearchFactory();

			DirectoryProvider<?> directoryProvider = searchFactory
					.getDirectoryProviders(Post.class)[0];
			readerProvider = searchFactory.getReaderProvider();
			indexReader = readerProvider.openReader(directoryProvider);

			String indexDirectory = directoryProvider.getDirectory().toString();
			indexDirectory = indexDirectory.substring(indexDirectory
					.indexOf('@') + 1);

			boolean indexExists = IndexReader.indexExists(indexDirectory);

			this.result.include(""indexExists"", indexExists);

			if (indexExists) {
				this.result.include(""numberOfDocs"", indexReader.numDocs());
				this.result.include(""indexLocation"", indexDirectory);
				this.result.include(""totalMessages"",
						this.forumRepository.getTotalMessages());
				this.result.include(""isLocked"",
						IndexReader.isLocked(indexDirectory));
				this.result.include(""lastModified"",
						new Date(IndexReader.lastModified(indexDirectory)));
			}
		} catch (IOException e) {
			throw new ForumException(e);
		} finally {
			if (readerProvider != null && indexReader != null) {
				readerProvider.closeReader(indexReader);
			}
		}
	}
}"
net.jforum.controllers.UserController,"public class UserController {
	private UserRepository userRepository;
	private UserService userService;
	private UserSession userSession;
	private SessionManager sessionManager;
	private LostPasswordService lostPasswordService;
	private JForumConfig config;
	private AvatarService avatarService;
	private RankingRepository rankingRepository;
	private final Result result;
	private final HttpServletRequest request;

	public UserController(UserRepository userRepository, UserSession userSession, UserService userService,
		SessionManager sessionFacade, JForumConfig config, LostPasswordService lostPasswordService,
		AvatarService avatarService, RankingRepository rankingRepository, Result result,
		HttpServletRequest request) {
		this.userRepository = userRepository;
		this.userService = userService;
		this.sessionManager = sessionFacade;
		this.userSession = userSession;
		this.config = config;
		this.lostPasswordService = lostPasswordService;
		this.avatarService = avatarService;
		this.rankingRepository = rankingRepository;
		this.result = result;
		this.request = request;
	}

	/**
	 * Shows the page with all registered users
	 * @param page the pagination first record to start showing
	 */
	public void list(int page) {
		RoleManager roleManager = this.userSession.getRoleManager();

		if (!roleManager.isUserListingEnabled()) {
			this.result.include(""users"", new ArrayList<User>());
		}
		else {
			Pagination pagination = new Pagination(this.config, page)
				.forUsers(this.userRepository.getTotalUsers());

			if (roleManager.roleExists(SecurityConstants.INTERACT_OTHER_GROUPS)) {
				this.result.include(""users"", this.userRepository.getAllUsers(pagination.getStart(),
					pagination.getRecordsPerPage()));
			}
			else {
				User currentUser = this.userSession.getUser();
				this.result.include(""users"", this.userRepository.getAllUsers(pagination.getStart(),
					pagination.getRecordsPerPage(), currentUser.getGroups()));
			}

			this.result.include(""pagination"", pagination);
		}
	}

	/**
	 * Logout an authenticated user
	 */
	public void logout() {
		UserSession us = this.userSession;
		this.sessionManager.storeSession(us.getSessionId());

		us.becomeAnonymous(this.config.getInt(ConfigKeys.ANONYMOUS_USER_ID));

		this.sessionManager.remove(us.getSessionId());
		this.sessionManager.add(us);
		this.removeAutoLoginCookies(us);

		this.result.redirectTo(ForumController.class).list();
	}

	/**
	 * Shows the form to log in
	 */
	public void login(String returnPath, boolean failed) {
		if (StringUtils.isEmpty(returnPath) && !this.config.getBoolean(ConfigKeys.LOGIN_IGNORE_REFERER)) {
			returnPath = this.request.getHeader(""Referer"");
		}

		result.include(""invalidLogin"", failed);

		if (!StringUtils.isEmpty(returnPath)) {
			this.result.include(""returnPath"", returnPath);
		}
	}

	/**
	 * Called from {@link #login(String)}, to validate the user credentials
	 *
	 * @param username the username
	 * @param password the password
	 * @param autoLogin autoLogin
	 */
	@br.com.caelum.vraptor.Post
	public void authenticateUser(String username,
		String password, boolean autoLogin,
		String returnPath) {
		User user = this.userService.validateLogin(username, password);

		if (user == null) {
			result.redirectTo(this).login(returnPath, true);
		}
		else {
			this.userSession.setUser(user);
			this.userSession.becomeLogged();

			if (autoLogin) {
				this.activateAutoLogin(user);
			}
			else {
				this.removeAutoLoginCookies(this.userSession);
			}

			this.sessionManager.add(this.userSession);

			if (!StringUtils.isEmpty(returnPath)) {
				this.result.redirectTo(returnPath);
			}
			else {
				this.result.redirectTo(ForumController.class).list();
			}
		}
	}

	/**
	 * Shows the page to edit the user profile
	 * @param userId the user id
	 */
	@SecurityConstraint(EditUserRule.class)
	@Path(""/edit/{userId}"")
	public void edit(int userId) {
		User userToEdit = this.userRepository.get(userId);
		this.result.include(""user"", userToEdit);
		this.result.include(""rankings"", this.rankingRepository.getAllRankings());
		this.result.include(""avatars"", this.avatarService.getAvatarGallery());
	}

	/**
	 * Updates an existing user
	 * @param user the user to update
	 */
	@SecurityConstraint(EditUserRule.class)
	public void editSave(User user, Integer avatarId, UploadedFile image, Integer rankingId) {

		Avatar avatar = null;

		if (avatarId != null){
			avatar = new Avatar();
			avatar.setId(avatarId);
			avatar.setAvatarType(AvatarType.AVATAR_GALLERY);
		}
		else if (image != null) {
			avatar = new Avatar();
			avatar.setAvatarType(AvatarType.AVATAR_UPLOAD);
			this.avatarService.add(avatar, image);
		}

		user.setAvatar(avatar);

		if (rankingId == null) {
			user.setRanking(null);
		}
		else {
			Ranking ranking = new Ranking();
			ranking.setId(rankingId);
			user.setRanking(ranking);
		}

		RoleManager roleManager = this.userSession.getRoleManager();
		boolean canChangeUserName = roleManager.isAdministrator() || roleManager.isCoAdministrator();

		boolean isSSOAuthentication = ConfigKeys.TYPE_SSO.equals(this.config.getValue(ConfigKeys.AUTHENTICATION_TYPE));
		canChangeUserName = canChangeUserName && !isSSOAuthentication;

		this.userService.update(user, canChangeUserName);
		this.result.redirectTo(this).edit(user.getId());
	}

	/**
	 * Shows the page to create a new user
	 */
	//@InterceptedBy(ExternalUserManagementInterceptor.class)
	public void insert() {

	}

	/**
	 * Adds a new user
	 * @param user the user to add
	 */
	@br.com.caelum.vraptor.Post
	public void insertSave(User user) {
		boolean error = false;

		if (!error && user.getUsername().length() > this.config.getInt(ConfigKeys.USERNAME_MAX_LENGTH)) {
			this.result.include(""error"", ""User.usernameTooBig"");
			error = true;
		}

		if (!error && user.getUsername().indexOf('<') > -1 || user.getUsername().indexOf('>') > -1) {
			this.result.include(""error"", ""User.usernameInvalidChars"");
			error = true;
		}

		if (!error && !this.userRepository.isUsernameAvailable(user.getUsername(), user.getEmail())) {
			this.result.include(""error"", ""User.usernameNotAvailable"");
			error = true;
		}

		if (error) {
			this.result.forwardTo(this).insert();
			return;
		}

		this.userService.add(user);
		this.registerUserInSession(user);
		this.result.redirectTo(this).registrationCompleted();
	}

	/**
	 * Shows the profile of some user
	 * @param userId the user to show
	 */
	@Path(""/profile/{userId}"")
	public void profile(int userId) {
		if (!this.userSession.getRoleManager().getCanViewProfile()) {
			this.result.redirectTo(MessageController.class).accessDenied();
		}
		else {
			User userToEdit = this.userRepository.get(userId);
			this.result.include(""user"", userToEdit);
			this.result.include(""userTotalTopics"", this.userRepository.getTotalTopics(userId));
			this.result.include(""rankings"", this.rankingRepository.getAllRankings());
			this.result.include(""isAnonymousUser"", userId == this.config.getInt(ConfigKeys.ANONYMOUS_USER_ID));

			boolean canEdit = userSession.getRoleManager().getCanEditUser(userToEdit, userSession.getUser().getGroups());
			this.result.include(""canEdit"", canEdit);
		}
	}

	/**
	 * Shows a nice message after a sucessful registration
	 */
	public void registrationCompleted() {
		if (!this.userSession.isLogged()) {
			this.result.redirectTo(this).insert();
		}
		else {
			this.result.include(""user"", this.userSession.getUser());
		}
	}

	public void lostPassword() {

	}

	public void lostPasswordSend(String username,
		String email) {

		boolean success = this.lostPasswordService.send(username, email);
		this.result.include(""success"", success);
	}

	/**
	 * Shows the page asking the user a new password
	 * @param hash the validation hash
	 */
	public void recoverPassword(String hash) {
		this.result.include(""hash"", hash);
	}

	/**
	 * Validate the new password hash
	 * @param hash the hash received by email
	 * @param username the username associated with the hash
	 * @param newPassword the new password to set
	 */
	public void recoverPasswordValidate(String hash,
		String username, String newPassword) {
		User user = this.userRepository.validateLostPasswordHash(username, hash);

		if (user == null) {
			this.result.include(""error"", true);
			this.result.include(""message"", ""PasswordRecovery.invalidData"");
		}
		else {
			user.setPassword(newPassword);
			this.result.include(""message"", ""PasswordRecovery.ok"");
		}
	}

	/**
	 * Lists all the posts made by an user
	 * @param userId the user id
	 */
	public void posts(int userId, int page) {
		User user = userRepository.get(userId);

		Pagination pagination = new Pagination(this.config, page).forUserPosts(user);

		List<Post> posts = userRepository.getPosts(user, pagination.getStart(), pagination.getRecordsPerPage());

		this.result.include(""pagination"", pagination);
		this.result.include(""posts"", posts);
		this.result.include(""user"", user);
	}

	/**
	 * Lists all the topics made by an user
	 * @param userId the user id
	 */
	public void topics(int userId, int page) {
		User user = userRepository.get(userId);

		Pagination pagination = new Pagination(this.config, page).forUserTopics(user, userRepository.getTotalTopics(userId));

		List<Topic> topics = userRepository.getTopics(user, pagination.getStart(), pagination.getRecordsPerPage());

		this.result.include(""pagination"", pagination);
		this.result.include(""topics"", topics);
		this.result.include(""user"", user);
	}

	private void registerUserInSession(User user) {
		this.userSession.setUser(user);
		this.userSession.becomeLogged();
		this.sessionManager.add(this.userSession);
	}

	private void removeAutoLoginCookies(UserSession us) {
		us.removeCookie(this.config.getValue(ConfigKeys.COOKIE_AUTO_LOGIN));
		us.removeCookie(this.config.getValue(ConfigKeys.COOKIE_USER_HASH));
	}

	private void activateAutoLogin(User user) {
		String securityHash = this.userService.generateAutoLoginSecurityHash(user.getId());
		user.setSecurityHash(securityHash);

		String userHash = this.userService.generateAutoLoginUserHash(securityHash);

		this.userSession.addCookie(this.config.getValue(ConfigKeys.COOKIE_AUTO_LOGIN), ""1"");
		this.userSession.addCookie(this.config.getValue(ConfigKeys.COOKIE_USER_HASH), userHash);
		this.userSession.addCookie(this.config.getValue(ConfigKeys.COOKIE_USER_ID), Integer.toString(user.getId()));
	}
}"
net.jforum.services.PollService,"public class PollService {
	public void processChanges(Poll originalPoll, List<PollOption> options) {
		PollChanges changes = new PollChanges(originalPoll);
		changes.processChanges(options);
	}

	public void associatePoll(Topic topic, List<PollOption> pollOptions) {
		if (topic.getPoll() == null) {
			return;
		}

		if (StringUtils.isEmpty(topic.getPoll().getLabel()) || pollOptions == null) {
			topic.setPoll(null);
			return;
		}

		topic.getPoll().setStartDate(new Date());

		for (Iterator<PollOption> iterator = pollOptions.iterator(); iterator.hasNext();) {
			PollOption option = iterator.next();

			if (StringUtils.isEmpty(option.getText())) {
				iterator.remove();
			}
			else {
				option.setPoll(topic.getPoll());
			}
		}

		if (pollOptions.size() == 0) {
			topic.setPoll(null);
		}
		else {
			topic.getPoll().setOptions(pollOptions);
		}
	}

	private class PollChanges {
		private Poll originalPoll;
		private List<PollOption> newOptions = new ArrayList<PollOption>();

		public PollChanges(Poll originalPoll) {
			this.originalPoll = originalPoll;
		}

		public void processChanges(List<PollOption> allOptions) {
			this.processNewAndChangedOptions(allOptions);
			this.processDeletedOptions(allOptions);
		}

		private void processDeletedOptions(List<PollOption> allOptions) {
			for (Iterator<PollOption> iterator = this.originalPoll.getOptions().iterator(); iterator.hasNext(); ) {
				PollOption currentOption = iterator.next();

				if (this.findOption(currentOption.getId(), allOptions) == null) {
					iterator.remove();
				}
			}
		}

		private void processNewAndChangedOptions(List<PollOption> allOptions) {
			for (PollOption option : allOptions) {
				if (option.getId() == 0) {
					this.newOptions.add(option);
					option.setPoll(this.originalPoll);
				}
				else {
					PollOption originalOption = this.findOption(option.getId(), this.originalPoll.getOptions());

					if (originalOption != null && !StringUtils.isEmpty(option.getText())
							&& !originalOption.getText().equals(option.getText())) {
						originalOption.setText(option.getText());
					}
				}
			}

			this.originalPoll.getOptions().addAll(this.newOptions);
		}

		private PollOption findOption(int optionId, List<PollOption> options) {
			for (PollOption option : options) {
				if (option.getId() == optionId) {
					return option;
				}
			}

			return null;
		}
	}
}"
netjforumservices.PollChanges,"	private class PollChanges {
		private Poll originalPoll;
		private List<PollOption> newOptions = new ArrayList<PollOption>();

		public PollChanges(Poll originalPoll) {
			this.originalPoll = originalPoll;
		}

		public void processChanges(List<PollOption> allOptions) {
			this.processNewAndChangedOptions(allOptions);
			this.processDeletedOptions(allOptions);
		}

		private void processDeletedOptions(List<PollOption> allOptions) {
			for (Iterator<PollOption> iterator = this.originalPoll.getOptions().iterator(); iterator.hasNext(); ) {
				PollOption currentOption = iterator.next();

				if (this.findOption(currentOption.getId(), allOptions) == null) {
					iterator.remove();
				}
			}
		}

		private void processNewAndChangedOptions(List<PollOption> allOptions) {
			for (PollOption option : allOptions) {
				if (option.getId() == 0) {
					this.newOptions.add(option);
					option.setPoll(this.originalPoll);
				}
				else {
					PollOption originalOption = this.findOption(option.getId(), this.originalPoll.getOptions());

					if (originalOption != null && !StringUtils.isEmpty(option.getText())
							&& !originalOption.getText().equals(option.getText())) {
						originalOption.setText(option.getText());
					}
				}
			}

			this.originalPoll.getOptions().addAll(this.newOptions);
		}

		private PollOption findOption(int optionId, List<PollOption> options) {
			for (PollOption option : options) {
				if (option.getId() == optionId) {
					return option;
				}
			}

			return null;
		}
	}"
net.jforum.services.UserService,"public class UserService {
	private UserRepository userRepository;
	private GroupRepository groupRepository;
	private JForumConfig config;
	private LoginAuthenticator loginAuthenticator;
	private AvatarService avatarService;

	public UserService(UserRepository userReposistory, GroupRepository groupRepository,
		JForumConfig config, LoginAuthenticator loginAuthenticator, AvatarService avatarService) {
		this.userRepository = userReposistory;
		this.groupRepository = groupRepository;
		this.config = config;
		this.loginAuthenticator = loginAuthenticator;
		this.avatarService = avatarService;
	}

	/**
	 * Add a new user
	 * @param user the user to add. The password should be in
	 * plain text, as it hashed internaly before persisting.
	 */
	public void add(User user) {
		this.performAddValidations(user);

		if (user.getId() > 0) {
			throw new ValidationException(""Cannot add an existing (id > 0) user"");
		}

		if (user.getRegistrationDate() == null) {
			user.setRegistrationDate(new Date());
		}

		user.setPassword(MD5.hash(user.getPassword()));

		if (user.getGroups().size() == 0) {
			Group defaultGroup = this.groupRepository.get(this.config.getInt(ConfigKeys.DEFAULT_USER_GROUP));
			user.addGroup(defaultGroup);
		}

		this.userRepository.add(user);
	}

	/**
	 * Updates an existing user
	 * @param user
	 */
	public void update(User user, boolean changeUsername) {
		if (user == null) {
			throw new NullPointerException(""Cannot save a null user"");
		}

		if (user.getId() == 0) {
			throw new ValidationException(""Cannot update an user without an id"");
		}

		User currentUser = this.userRepository.get(user.getId());
		this.copyUpdatableProperties(user, currentUser);

		Avatar userAvatar = user.getAvatar();
		Avatar currentAvatar = currentUser.getAvatar();

		if (userAvatar == null || !userAvatar.equals(currentAvatar)) {
			if (currentAvatar != null && currentAvatar.getAvatarType() == AvatarType.AVATAR_UPLOAD) {
				this.avatarService.delete(currentAvatar);
			}

			currentUser.setAvatar(userAvatar);
		}

		if (changeUsername && StringUtils.isNotEmpty(user.getUsername())) {
			currentUser.setUsername(user.getUsername());
		}

		this.userRepository.update(currentUser);
	}

	/**
	 * Create a security hash to be used as extra security for auto logins.
	 * @param userId the id of the user to generate the hash
	 * @return the hash
	 */
	public String generateAutoLoginSecurityHash(int userId) {
		String systemHash = MD5.hash(this.config.getValue(ConfigKeys.USER_HASH_SEQUENCE) + userId);
		return MD5.hash(System.currentTimeMillis() + systemHash);
	}

	/**
	 * Generate a hash based on the security hash of an user
	 * @param securityHash the user's current security hash
	 * @return the hash
	 */
	public String generateAutoLoginUserHash(String securityHash) {
		return MD5.hash(securityHash);
	}

	private void copyUpdatableProperties(User from, User to) {
		to.setRanking(from.getRanking());
		to.setAim(from.getAim());
		to.setAttachSignature(from.getAttachSignature());
		to.setBbCodeEnabled(from.isBbCodeEnabled());
		to.setBiography(from.getBiography());
		to.setFrom(from.getFrom());
		to.setHtmlEnabled(from.isHtmlEnabled());
		to.setInterests(from.getinterests());
		to.setLang(from.getLang());
		to.setMsn(from.getMsn());
		to.setNotifyAlways(from.getNotifyAlways());
		to.setNotifyReply(from.getNotifyReply());
		to.setOccupation(from.getOccupation());
		to.setViewEmailEnabled(from.isViewEmailEnabled());
		to.setViewOnlineEnabled(from.isViewOnlineEnabled());
		to.setSignature(from.getSignature());
		to.setWebsite(from.getWebsite());
		to.setYim(from.getYim());
		to.setNotifyReply(from.getNotifyReply());
		to.setNotifyPrivateMessages(from.getNotifyPrivateMessages());
		to.setSmiliesEnabled(from.isSmiliesEnabled());
		to.setNotifyText(from.getNotifyText());
	}

	/**
	 * Authenticates an user
	 * @param username the username
	 * @param password the password, in plain text
	 * @return an instance of an {@link User}, of null if authentication failed
	 */
	public User validateLogin(String username, String password) {
		return this.loginAuthenticator.validateLogin(username, MD5.hash(password), null);
	}

	/**
	 * Save the gropus for the user
	 * @param userId
	 * @param groupIds
	 */
	public void saveGroups(int userId, int... groupIds) {
		if (groupIds != null && groupIds.length > 0) {
			User user = this.userRepository.get(userId);
			user.getGroups().clear();

			for (int groupId : groupIds) {
				Group group = this.groupRepository.get(groupId);
				user.addGroup(group);
			}

			this.userRepository.update(user);
		}
	}

	private void performAddValidations(User user) {
		if (user == null) {
			throw new NullPointerException(""User cannot be null"");
		}

		if (StringUtils.isEmpty(user.getUsername())) {
			throw new ValidationException(""Username cannot be null"");
		}

		if (StringUtils.isEmpty(user.getPassword())) {
			throw new ValidationException(""Password cannot be null"");
		}

		if (StringUtils.isEmpty(user.getEmail())) {
			throw new ValidationException(""Email cannot be null"");
		}
	}
}"
net.jforum.services.LostPasswordService,"public class LostPasswordService {
	private UserRepository userRepository;

	public LostPasswordService(UserRepository userRepository) {
		this.userRepository = userRepository;
	}

	/**
	 * Dispatches the email asking for a new password
	 * @param requestedUser the username who lost the password. This parameter
	 * is optional if requestedEmail is provided.
	 * @param requestedEmail the email who lost the password. This parameter
	 * is optional if requestedUser is provided
	 * @return true if the email was sent, or false if no user matching the
	 * parameters was found.
	 */
	public boolean send(String requestedUser, String requestedEmail) {
		User user = this.findUser(requestedUser, requestedEmail);

		if (user == null) {
			return false;
		}

		String hash = MD5.hash(user.getEmail() + System.currentTimeMillis());
		user.setActivationKey(hash);
		this.userRepository.update(user);

		return true;
	}

	private User findUser(String username, String email)
	{
		User user = null;

		if (!StringUtils.isEmpty(username)) {
			user = this.userRepository.getByUsername(username);
		}
		else if (!StringUtils.isEmpty(email)) {
			user = this.userRepository.getByEmail(email);
		}

		if (user == null) {
			return null;
		}

		return user;
	}
}"
net.jforum.services.MostUsersEverOnlineService,"public class MostUsersEverOnlineService {
	private ConfigRepository repository;

	public MostUsersEverOnlineService(ConfigRepository repository) {
		this.repository = repository;
	}

	public MostUsersEverOnline getMostRecentData(int totalCurrentUsers) {
		Config config = this.repository.getByName(ConfigKeys.MOST_USERS_EVER_ONLINE);

		if (config == null) {
			MostUsersEverOnline most = new MostUsersEverOnline();
			most.setDate(new Date());
			most.setTotal(totalCurrentUsers);

			config = new Config();
			config.setName(ConfigKeys.MOST_USERS_EVER_ONLINE);
			config.setValue(most.getDate().getTime() + ""/"" + most.getTotal());

			this.repository.add(config);

			return most;

		}
		else {
			String[] p = config.getValue().split(""/"");
			MostUsersEverOnline most = new MostUsersEverOnline();

			int total = p.length == 2 ? Integer.parseInt(p[1]) : 0;

			if (totalCurrentUsers > total) {
				most.setDate(new Date());
				most.setTotal(totalCurrentUsers);

				config.setValue(most.getDate().getTime() + ""/"" + most.getTotal());

				this.repository.update(config);

				return most;
			}
			else {
				most.setDate(new Date(Long.parseLong(p[0])));
				most.setTotal(Integer.parseInt(p[1]));

				return most;
			}
		}
	}
}"
net.jforum.services.RSSService,"public class RSSService {
	private JForumConfig config;
	private RSSRepository rssRepository;
	private I18n i18n;
	private ForumRepository forumRepository;

	public RSSService(JForumConfig config, RSSRepository rssRepository, I18n i18n, ForumRepository forumRepository) {
		this.config = config;
		this.rssRepository = rssRepository;
		this.i18n = i18n;
		this.forumRepository = forumRepository;
	}

	/**
	 * Generate RSS for the latest topics of a given forum
	 * @param forumId the forum id
	 * @return the rss contents
	 */
	public String forForum(int forumId) {
		Forum forum = this.forumRepository.get(forumId);

		List<Topic> topics = this.rssRepository.getForumTopics(forum,
			this.config.getInt(ConfigKeys.TOPICS_PER_PAGE));

		ChannelFeed feed = new ChannelFeed()
			.setTitle(this.i18n.getFormattedMessage(""RSS.ForumTopics.title"", this.i18n.params(forum.getName())))
			.addLink(this.buildForumLink(forum))
			.setDescriptionOrSubtitle(forum.getDescription());

		for (Topic topic : topics) {
			String topicLink = this.buildTopicLink(topic);

			feed.addItem(new ItemEntry()
				.addLink(topicLink)
				.setUid(topicLink)
				.setTitle(topic.getSubject())
				.setPubDate(this.formatDate(topic.getDate()))
				.setDescriptionOrSummary(topic.getLastPost().getText())); // TODO: do some formatting
		}

		return this.generateRSS(feed);
	}

	/**
	 * Create the RSS
	 * @param feed the feed to use as source
	 * @return the rss contents
	 */
	private String generateRSS(ChannelFeed feed) {
		ByteArrayOutputStream os = new ByteArrayOutputStream();

		try {
			FeedWriter.writeChannel(FeedFormat.RSS20, feed, os);
		}
		catch (YarfrawException e) {
			throw new ForumException(e);
		}

		return os.toString();
	}

	/**
	 * Build the link for a specific forum
	 * @param forum the forum
	 * @return the forum link
	 */
	private String buildForumLink(Forum forum) {
		return new StringBuilder().append(this.config.getString(ConfigKeys.FORUM_LINK))
			.append(Domain.FORUMS).append('/').append(Actions.SHOW)
			.append('/').append(forum.getId()).append(this.config.getValue(ConfigKeys.SERVLET_EXTENSION))
			.toString();
	}

	/**
	 * Build the link to a specific topic
	 * @param topic the topic
	 * @return the link
	 */
	private String buildTopicLink(Topic topic) {
		return new StringBuilder().append(this.config.getString(ConfigKeys.FORUM_LINK))
			.append(Domain.TOPICS).append('/').append(Actions.PRE_LIST)
			.append('/').append(topic.getId()).append('/').append(topic.getLastPost().getId())
			.append(this.config.getValue(ConfigKeys.SERVLET_EXTENSION))
			.toString();
	}

	/**
	 * Format a date to the RSS format
	 * @param date the date format
	 * @return the formatted date
	 */
	private String formatDate(Date date) {
		SimpleDateFormat df = new SimpleDateFormat(this.config.getValue(
			ConfigKeys.RSS_DATE_TIME_FORMAT), Locale.ENGLISH);
		return df.format(date);
	}
}"
net.jforum.services.AvatarService,"public class AvatarService {
	private AvatarRepository repository;
	private JForumConfig config;

	public AvatarService(JForumConfig config, AvatarRepository repository) {
		this.config = config;
		this.repository = repository;
	}

	public List<Avatar> getAvatarGallery() {
		boolean allowGallery = this.config.getBoolean(ConfigKeys.AVATAR_ALLOW_GALLERY);

		if (allowGallery) {
			return this.repository.getGalleryAvatar();
		}

		return new ArrayList<Avatar>();
	}

	/**
	 * Adds a new avatar
	 *
	 * @param avatar
	 * @param image
	 */
	public void add(Avatar avatar, UploadedFile uploadedFile) {
		if (uploadedFile == null) {
			this.add(avatar);
			return;
		}

		this.isAllowed(avatar);

		if (avatar.getId() > 0) {
			throw new ValidationException(""Cannot add an existing (id > 0) avatar"");
		}

		String imgName = this.processImageUpload(avatar, uploadedFile);

		if (imgName != null) {
			this.repository.add(avatar);
		}
	}

	/**
	 * Add avatar without upload the image no operation on Image
	 *
	 * @param avatar
	 */
	public void add(Avatar avatar) {
		this.isAllowed(avatar);

		if (avatar.getId() > 0) {
			throw new ValidationException(""Cannot add an existing (id > 0) avatar"");
		}

		this.checkImageSize(avatar);
		this.repository.add(avatar);
	}

	/**
	 * Updates a existing avatar
	 *
	 * @param avatar
	 * @param image
	 */
	public void update(Avatar avatar, UploadedFile uploadedFile) {
		this.isAllowed(avatar);

		if (avatar.getId() == 0) {
			throw new ValidationException(""update() expects a avatar with an existing id"");
		}

		Avatar current = this.repository.get(avatar.getId());
		avatar.setAvatarType(current.getAvatarType());

		// upload the img and get the upload img info
		String imageDiskName = this.processImageUpload(avatar, uploadedFile);

		if (imageDiskName != null) {
			this.deleteImage(current);

			current.setFileName(imageDiskName);
			current.setHeight(avatar.getHeight());
			current.setWidth(avatar.getWidth());
		}

		this.repository.update(current);
	}

	/**
	 * Delete Avatars
	 *
	 * @param avatarId
	 */
	public void delete(int... avatarId) {
		if (avatarId != null) {
			for (int id : avatarId) {
				Avatar avatar = this.repository.get(id);
				this.delete(avatar);
			}
		}
	}

	/**
	 * remove Avatar and del its image
	 *
	 * @param avatar
	 */
	public void delete(Avatar avatar) {
		if (avatar != null) {
			this.repository.remove(avatar);
			this.deleteImage(avatar);
		}
	}

	private void deleteImage(Avatar avatar) {
		File img = this.getAvatarImageFile(avatar);

		if (img != null) {
			img.delete();
		}
	}

	/**
	 * get the key in config that for give avatar to find the path
	 *
	 * @param avatar
	 * @return
	 */
	private String getAvatarPathConfigKey(Avatar avatar) {
		String avatarConfigKey = null;

		if (avatar == null) {
			return avatarConfigKey;
		}

		if (avatar.getAvatarType() == AvatarType.AVATAR_UPLOAD) {
			avatarConfigKey = ConfigKeys.AVATAR_UPLOAD_DIR;
		}
		else if (avatar.getAvatarType() == AvatarType.AVATAR_GALLERY) {
			avatarConfigKey = ConfigKeys.AVATAR_GALLERY_DIR;
		}

		return avatarConfigKey;
	}

	/**
	 * check the user can do this operation according to config
	 *
	 * @param avatar
	 */
	private void isAllowed(Avatar avatar) {
		this.applyCommonConstraints(avatar);

		boolean allowGallery = this.config.getBoolean(ConfigKeys.AVATAR_ALLOW_GALLERY);
		boolean allowUpload = this.config.getBoolean(ConfigKeys.AVATAR_ALLOW_UPLOAD);

		if (avatar.getAvatarType() == AvatarType.AVATAR_UPLOAD && !allowUpload
				|| avatar.getAvatarType() == AvatarType.AVATAR_GALLERY && !allowGallery) {
			throw new ValidationException(avatar.getAvatarType() + ""is not allowed!"");
		}
	}

	/**
	 * upload avatar image and resize the images if need
	 *
	 * @param avatar
	 * @param uploadedFile
	 * @return file name
	 */
	private String processImageUpload(Avatar avatar, UploadedFile uploadedFile) {
		File file = this.saveImage(avatar, uploadedFile);

		if (file == null) {
			return null;
		}

		avatar.setFileName(file.getName());

		try {
			long size = file.length();
			long maxSize = this.config.getLong(ConfigKeys.AVATAR_MAX_SIZE);

			if (size > maxSize) {
				throw new ValidationException(""File size too big"");
			}

			ImageInfo ii = new ImageInfo();

			try {
				ii.setInput(new FileInputStream(file));
			}
			catch (FileNotFoundException e) {
				throw new ForumException(e);
			}

			if (!ii.check()) {
				throw new ValidationException(""Not a supported image file format."");
			}

			avatar.setHeight(ii.getHeight());
			avatar.setWidth(ii.getWidth());

			// check the image size
			this.checkImageSize(avatar);
		}
		catch (ValidationException e) {
			file.delete();
			throw e;
		}

		return file.getName();
	}

	/**
	 * Save image to avatar dir
	 *
	 * @param avatar
	 * @param uploadedFile
	 * @return
	 */
	private File saveImage(Avatar avatar, UploadedFile uploadedFile) {
		String configKey = getAvatarPathConfigKey(avatar);

		if (configKey != null && uploadedFile != null) {
			UploadUtils upload = new UploadUtils(uploadedFile);

			String imageName = String.format(""%s.%s"", MD5.hash(uploadedFile.getFileName() + System.currentTimeMillis()),
				upload.getExtension());

			String filePath = String.format(""%s/%s/%s"", this.config.getApplicationPath(), this.config.getValue(configKey), imageName);

			upload.saveUploadedFile(filePath);

			return new File(filePath);
		}

		return null;
	}

	/**
	 * fix the size of the image true, chenged the image size false, not change
	 *
	 * @param avatar
	 */
	private void checkImageSize(Avatar avatar) {
		int maxWidth = this.config.getInt(ConfigKeys.AVATAR_MAX_WIDTH);
		int maxHeight = this.config.getInt(ConfigKeys.AVATAR_MAX_HEIGHT);
		int minWidth = this.config.getInt(ConfigKeys.AVATAR_MIN_WIDTH);
		int minHeight = this.config.getInt(ConfigKeys.AVATAR_MIN_HEIGHT);

		int height = avatar.getHeight();
		int width = avatar.getWidth();

		if (height < minHeight || height > maxHeight || width < minWidth || width > maxWidth) {
			throw new ValidationException(""This image size is not allowed!"");
		}
	}

	private File getAvatarImageFile(Avatar avatar) {
		String avatarConfigKey = getAvatarPathConfigKey(avatar);

		if (avatarConfigKey == null) {
			return null;
		}
		else {
			String imageName = avatar.getFileName();
			String imageFilePath = String.format(""%s/%s/%s"", this.config.getApplicationPath(),
				this.config.getValue(avatarConfigKey), imageName);

			return new File(imageFilePath);
		}

	}

	private void applyCommonConstraints(Avatar avatar) {
		if (avatar == null) {
			throw new NullPointerException(""Cannot savel a null avatar"");
		}
	}
}"
net.jforum.services.ModerationService,"public class ModerationService {
	private PostRepository postRepository;
	private ForumRepository forumRepository;
	private TopicRepository topicRepository;
	private ModerationLogService moderationLogService;

	public ModerationService(PostRepository postRepository, ForumRepository forumRepository, TopicRepository topicRepository,
			ModerationLogService moderationLogService) {
		this.postRepository = postRepository;
		this.forumRepository = forumRepository;
		this.topicRepository = topicRepository;
		this.moderationLogService = moderationLogService;
	}

	/**
	 * Move a set of topics to another forum
	 * @param toForumId the id of the new forum
	 * @param topicIds the id of the topics to move
	 * @param moderationLog
	 */
	public void moveTopics(int toForumId, ModerationLog moderationLog, int... topicIds) {
		if (ArrayUtils.isEmpty(topicIds)) {
			return;
		}

		Forum newForum = this.forumRepository.get(toForumId);
		Forum oldForum = this.topicRepository.get(topicIds[0]).getForum();

		this.forumRepository.moveTopics(newForum, topicIds);

		newForum.setLastPost(this.forumRepository.getLastPost(newForum));
		oldForum.setLastPost(this.forumRepository.getLastPost(oldForum));

		this.moderationLogService.registerMovedTopics(moderationLog, topicIds);
	}

	/**
	 * Lock or unlock a set of topics
	 * @param topicIds the id of the topics to lock or unlock
	 * @param moderationLog
	 */
	public void lockUnlock(int[] topicIds, ModerationLog moderationLog) {
		if (ArrayUtils.isEmpty(topicIds)) {
			return;
		}

		for (int topicId : topicIds) {
			Topic topic = this.topicRepository.get(topicId);

			if (topic.isLocked()) {
				topic.unlock();
			}
			else {
				topic.lock();
			}
		}

		this.moderationLogService.registerLockedTopics(moderationLog, topicIds);
	}

	/**
	 * Delete a set of topics.
	 * @param topics the topics to delete
	 * @param moderationLog
	 */
	public void deleteTopics(List<Topic> topics, ModerationLog moderationLog) {
		List<Topic> topicsForModeration = new ArrayList<Topic>();

		for (Topic topic : topics) {
			topicsForModeration.add(this.topicRepository.get(topic.getId()));
			this.topicRepository.remove(topic);
		}

		this.moderationLogService.registerDeleteTopics(topicsForModeration, moderationLog);
	}

	/**
	 * Process a set of approval data
	 * @param forumId
	 * @param infos
	 */
	public void doApproval(int forumId, List<ApproveInfo> infos) {
		if (infos == null || infos.size() == 0) {
			return;
		}

		for (ApproveInfo info : infos) {
			if (!info.defer()) {
				Post post = this.postRepository.get(info.getPostId());

				if (post != null) {
					if (info.approve()) {
						this.approvePost(post);
					}
					else if (info.reject()) {
						this.denyPost(post);
					}
				}
			}
		}

		Forum forum = this.forumRepository.get(forumId);
		forum.setLastPost(this.forumRepository.getLastPost(forum));
	}

	private void denyPost(Post post) {
		this.postRepository.remove(post);
	}

	public void approvePost(Post post) {
		Topic topic = post.getTopic();

		if (topic.isWaitingModeration()) {
			topic.setPendingModeration(false);
		}
		else {
			topic.incrementTotalReplies();
		}

		post.setModerate(false);
		post.getUser().incrementTotalPosts();
		topic.setLastPost(this.topicRepository.getLastPost(topic));
	}
}"
net.jforum.services.AttachmentService,"public class AttachmentService {
	private static Logger logger = Logger.getLogger(AttachmentService.class);

	private final JForumConfig config;
	private final AttachmentRepository repository;

	public AttachmentService(JForumConfig config, AttachmentRepository repository) {
		this.config = config;
		this.repository = repository;
	}

	public Attachment getAttachmentForDownload(int attachmentId) {
		Attachment attachment = this.repository.get(attachmentId);
		attachment.incrementDownloadCount();
		return attachment;
	}

	public List<AttachedFile> processNewAttachments(HttpServletRequest request) {
		String t = request.getParameter(""total_attachments"");
		List<AttachedFile> attachedFiles = new ArrayList<AttachedFile>();

		if (StringUtils.isEmpty(t)) {
			return attachedFiles;
		}

		int total = Integer.parseInt(t);

		if (total < 1) {
			return attachedFiles;
		}

		long totalSize = 0;

		for (int i = 0; i < total; i++) {
			UploadedFile fileInfo = (UploadedFile) request.getAttribute(""attachment_"" + i);

			if (fileInfo == null) {
				continue;
			}

			if (fileInfo.getFileName().indexOf('\000') > -1) {
				logger.warn(""Possible bad attachment (null char): "" + fileInfo.getFileName());
				continue;
			}

			UploadUtils uploadUtils = new UploadUtils(fileInfo);
			String description = request.getParameter(""attachment_description_"" + i);

			Attachment attachment = new Attachment();
			try {
				attachment.setFilesize(fileInfo.getFile().available());
			} catch (IOException e) {
				throw new ForumException(e);
			}
			attachment.setDescription(description);
			attachment.setMimetype(fileInfo.getContentType());

			// Get only the filename, without the path (IE does that)
			String realName = this.stripPath(fileInfo.getFileName());

			attachment.setRealFilename(realName);
			attachment.setUploadDate(new Date());

			attachment.setFileExtension(uploadUtils.getExtension());

			String savePath = this.buildStoreFilename(attachment);
			attachment.setPhysicalFilename(savePath);

			attachedFiles.add(new AttachedFile(attachment, uploadUtils));
			totalSize += attachment.getFilesize();
		}

		return attachedFiles;
	}

	/**
	 * @param realName String
	 * @return String
	 */
	public String stripPath(String realName) {
		String separator = ""/"";
		int index = realName.lastIndexOf(separator);

		if (index == -1) {
			separator = ""\\"";
			index = realName.lastIndexOf(separator);
		}

		if (index > -1) {
			realName = realName.substring(index + 1);
		}

		return realName;
	}

	public void insertAttachments(List<AttachedFile> attachedFiles, Post post) {
		if (attachedFiles.size() > 0) {
			post.setHasAttachments(true);

			for (AttachedFile attachedFile : attachedFiles) {
				String path = this.config.getValue(ConfigKeys.ATTACHMENTS_STORE_DIR)
					+ ""/"" + attachedFile.getAttachment().getPhysicalFilename();

				attachedFile.getUploadUtils().saveUploadedFile(path);

				if (this.shouldCreateThumb(attachedFile.getAttachment())) {
					attachedFile.getAttachment().setHasThumb(true);
					this.createSaveThumb(path);
				}

				post.addAttachment(attachedFile.getAttachment());
			}
		}
	}

	private boolean shouldCreateThumb(Attachment attachment) {
		String extension = attachment.getFileExtension();

		return this.config.getBoolean(ConfigKeys.ATTACHMENTS_IMAGES_CREATE_THUMB)
			&& (""jpg"".equals(extension) || ""jpeg"".equals(extension) || ""gif"".equals(extension) || ""png"".equals(extension));
	}

	private void createSaveThumb(String path) {
		try {
			BufferedImage image = ImageUtils.resizeImage(path, ImageUtils.IMAGE_JPEG,
				this.config.getInt(ConfigKeys.ATTACHMENTS_IMAGES_MAX_THUMB_W), this.config.getInt(ConfigKeys.ATTACHMENTS_IMAGES_MAX_THUMB_H));
			ImageUtils.saveImage(image, path + ""_thumb"", ImageUtils.IMAGE_JPEG);
		}
		catch (Exception e) {
			logger.error(e.toString(), e);
		}
	}

	public void editAttachments(Post post, HttpServletRequest request) {
		// Check for attachments to remove
		List<String> deleteList = new ArrayList<String>();
		String[] delete = null;
		String s = request.getParameter(""delete_attach"");

		if (!StringUtils.isEmpty(s)) {
			delete = s.split("","");
		}

		if (!ArrayUtils.isEmpty(delete)) {
			for (String deleteId : delete) {
				if (!StringUtils.isEmpty(deleteId)) {
					int attachmentId = Integer.parseInt(deleteId);

					Attachment attachment = this.repository.get(attachmentId);
					post.getAttachments().remove(attachment);

					this.removeAttachmentFiles(attachment);
				}
			}

			deleteList = Arrays.asList(delete);
		}

		// Update
		String[] attachIds = null;
		s = request.getParameter(""edit_attach_ids"");
		if (!StringUtils.isEmpty(s)) {
			attachIds = s.split("","");
		}

		if (!ArrayUtils.isEmpty(attachIds)) {
			for (String x : attachIds) {
				if (deleteList.contains(x) || StringUtils.isEmpty(x)) {
					continue;
				}

				int attachmentId = Integer.parseInt(x);

				Attachment attachment = this.repository.get(attachmentId);
				attachment.setDescription(request.getParameter(""edit_description_"" + attachmentId));
			}
		}
	}

	public void deleteAllAttachments(Post post) {
		for (Attachment attachment : post.getAttachments()) {
			this.removeAttachmentFiles(attachment);
		}
	}

	private void removeAttachmentFiles(Attachment attachment) {
		String filename = this.buildDownloadPath(attachment);

		File f = new File(filename);

		if (f.exists()) {
			f.delete();
		}

		// Check if we have a thumb to delete
		f = new File(filename + ""_thumb"");

		if (f.exists()) {
			f.delete();
		}
	}

	private String buildStoreFilename(Attachment attachment) {
		int year = Calendar.getInstance().get(Calendar.YEAR);
		int month = Calendar.getInstance().get(Calendar.MONTH) + 1;
		int day = Calendar.getInstance().get(Calendar.DAY_OF_MONTH);

		StringBuilder dir = new StringBuilder(256);
		dir.append(year).append('/').append(month).append('/').append(day).append('/');

		new File(this.config.getValue(ConfigKeys.ATTACHMENTS_STORE_DIR) + ""/"" + dir).mkdirs();

		return dir.append(MD5.hash(attachment.getRealFilename() + System.currentTimeMillis()))
			.append('.').append(attachment.getFileExtension())
			.toString();
	}

	public String buildDownloadPath(Attachment attachment) {
		return String.format(""%s/%s"", this.config.getValue(ConfigKeys.ATTACHMENTS_STORE_DIR), attachment.getPhysicalFilename());
	}
}"
net.jforum.services.MessageFormatService,"public class MessageFormatService {

	private PostFormatters formatters;

	//----------Getter & Setter----------
	public PostFormatters getFormatters() {
		return formatters;
	}

	public void setFormatters(PostFormatters formatters) {
		this.formatters = formatters;
	}
	
	//---------- Business Logic----------
	
	/**
	 * format the text
	 */
	public String format(String text,PostOptions options){
		for (Formatter formatter : formatters) {
			text = formatter.format(text, options);
		}
		return text;
	}
	
}"
net.jforum.services.TopicService,"public class TopicService {
	private TopicRepository topicRepository;
	private PostRepository postRepository;
	private ForumRepository forumRepository;
	private AttachmentService attachmentService;
	private PollService pollService;
	private UserRepository userRepository;

	public TopicService(TopicRepository topicRepository, PostRepository postRepository,
		ForumRepository forumRepository, AttachmentService attachmentService, PollService pollService, UserRepository userRepository) {
		this.topicRepository = topicRepository;
		this.postRepository = postRepository;
		this.forumRepository = forumRepository;
		this.attachmentService = attachmentService;
		this.pollService = pollService;
		this.userRepository = userRepository;
	}

	/**
	 * Create a new topic.
	 * Saves a topic, as well the related first post. Date, user and subject
	 * of the associated post are forced to be the same value used
	 * by the topic.
	 * @param topic the topic to save
	 * @param pollOptions
	 * @param attachments
	 */
	public void addTopic(Topic topic, List<PollOption> pollOptions, List<AttachedFile> attachments) {
		this.performAddValidations(topic);

		if (topic.getDate() == null) {
			topic.setDate(new Date());
		}

		Post post = topic.getFirstPost();
		topic.setFirstPost(null);

		this.pollService.associatePoll(topic, pollOptions);

		topic.setHasAttachment(attachments.size() > 0);
		this.topicRepository.add(topic);

		post.setForum(topic.getForum());
		post.setTopic(topic);
		post.setDate(topic.getDate());
		post.setUser(topic.getUser());
		post.setSubject(topic.getSubject());

		this.attachmentService.insertAttachments(attachments, post);
		this.postRepository.add(post);

		topic.setFirstPost(post);
		topic.setLastPost(post);

		if (!topic.isWaitingModeration()) {
			Forum forum = this.forumRepository.get(topic.getForum().getId());
			forum.setLastPost(post);

			int userTotalPosts = this.userRepository.getTotalPosts(post.getUser());
			topic.getUser().setTotalPosts(userTotalPosts);
		}
	}

	/**
	 * Posts a reply to a topic
	 * @param topic the topic which will receive the reply
	 * @param post the reply itself
	 * @param attachments
	 */
	public void reply(Topic topic, Post post, List<AttachedFile> attachments) {
		Topic current = this.topicRepository.get(topic.getId());

		if (StringUtils.isEmpty(post.getSubject())) {
			post.setSubject(current.getSubject());
		}

		this.performReplyValidations(post);
		this.attachmentService.insertAttachments(attachments, post);

		if (attachments.size() > 0) {
			current.setHasAttachment(true);
		}

		topic.setForum(current.getForum());

		post.setTopic(current);
		post.setDate(new Date());
		post.setForum(current.getForum());

		this.postRepository.add(post);

		if (!post.isWaitingModeration()) {
			current.setLastPost(post);
			current.getForum().setLastPost(post);
			current.incrementTotalReplies();
			post.getUser().incrementTotalPosts();
		}
	}

	private void performReplyValidations(Post post) {
		this.performCommonPostValidations(post);
	}

	private void performAddValidations(Topic topic) {
		if (topic.getUser() == null) {
			throw new IllegalStateException(""Cannot save a topic without an user"");
		}

		if (StringUtils.isEmpty(topic.getSubject())) {
			throw new IllegalStateException(""Cannot save a topic without a subject"");
		}

		if (topic.getForum().getId() == 0) {
			throw new IllegalStateException(""Cannot save a Topic without a forum"");
		}

		this.performCommonPostValidations(topic.getFirstPost());
	}

	private void performCommonPostValidations(Post post) {
		if (StringUtils.isEmpty(post.getSubject())) {
			throw new IllegalStateException(""Cannot save a post without a subject"");
		}

		if (StringUtils.isEmpty(post.getText())) {
			throw new IllegalStateException(""Cannot save a post without a message"");
		}
	}
}"
net.jforum.services.GroupService,"public class GroupService {
	private GroupRepository repository;
	private UserRepository userRepository;
	private UserSession userSession;
	private SessionManager sessionManager;

	public GroupService(GroupRepository repository, UserRepository userRepository,
			UserSession userSession, SessionManager sessionManager) {
		this.repository = repository;
		this.userSession = userSession;
		this.userRepository = userRepository;
		this.sessionManager = sessionManager;
	}

	/**
	 * Save the permissions for this group
	 */
	@SuppressWarnings(""unchecked"")
	public void savePermissions(int groupId, Map<String, Map<String, List<?>>> map) {
		Group group = this.repository.get(groupId);

		RoleManager currentRoles = new RoleManager();
		currentRoles.setGroups(Arrays.asList(group));

		group.getRoles().clear();

		boolean isAdministrator = currentRoles.isAdministrator();
		boolean canManageForums = currentRoles.roleExists(SecurityConstants.CAN_MANAGE_FORUMS);
		boolean isCoAdministrator = currentRoles.isCoAdministrator();

		List<Integer> groups = new ArrayList<Integer>();
		for (int gid : currentRoles.getRoleValues(SecurityConstants.GROUPS)) {
			groups.add(gid);
		}

		boolean canInteractwithOtherGroups = currentRoles.roleExists(SecurityConstants.INTERACT_OTHER_GROUPS);
		boolean isSuperAdministrator = this.userSession.getRoleManager().isAdministrator();

		for (Map.Entry<String, List<?>> entry : map.get(""boolean"").entrySet()) {
			String key = entry.getKey();
			Boolean value = (Boolean)entry.getValue().get(0);

			if (SecurityConstants.ADMINISTRATOR.equals(key)) {
				registerRole(group, key, isSuperAdministrator ? value : isAdministrator);
			}
			else if (SecurityConstants.CAN_MANAGE_FORUMS.equals(key)) {
				registerRole(group, key, isSuperAdministrator ? value : canManageForums);
			}
			else if (SecurityConstants.CO_ADMINISTRATOR.equals(key)) {
				registerRole(group, key, isSuperAdministrator ? value : isCoAdministrator);
			}
			else if (SecurityConstants.INTERACT_OTHER_GROUPS.equals(key)) {
				registerRole(group, key, isSuperAdministrator ? value : canInteractwithOtherGroups);
			}
			else {
				registerRole(group, key, (Boolean)entry.getValue().get(0));
			}
		}

		for (Map.Entry<String, List<?>> entry : map.get(""multiple"").entrySet()) {
			String key = entry.getKey();
			List<Integer> value = (List<Integer>) entry.getValue();

			if (SecurityConstants.GROUPS.equals(key)) {
				registerRole(group, key, isSuperAdministrator ? value : groups);
			}
			else {
				registerRole(group, key, value);
			}
		}

		this.repository.update(group);

		this.sessionManager.computeAllOnlineModerators();
		//this.userRepository.changeAllowAvatarState(map.getCanHaveProfilePicture(), group);
	}

	/**
	 * Add a new group
	 * @param group
	 */
	public void add(Group group) {
		this.applyCommonConstraints(group);

		if (group.getId() > 0) {
			throw new ValidationException(""Cannot save an existing (id > 0) group"");
		}

		this.repository.add(group);
	}

	/**
	 * Updates the information of an existing group
	 * @param group
	 */
	public void update(Group group) {
		this.applyCommonConstraints(group);

		if (group.getId() == 0) {
			throw new ValidationException(""update() expects a group with an existing id"");
		}

		this.repository.update(group);
	}

	/**
	 * Deletes one or more groups
	 * @param ids
	 */
	public void delete(int... ids) {
		if (ids != null) {
			// FIXME: Must not delete a group if it has users
			for (int groupId : ids) {
				Group group = this.repository.get(groupId);
				this.repository.remove(group);
			}
		}
	}

	public void appendRole(Group group, String roleName, int roleValue) {
		for (Role role : group.getRoles()) {
			if (role.getName().equals(roleName)) {
				role.getRoleValues().add(roleValue);
				break;
			}
		}

		this.repository.update(group);
	}

	private void applyCommonConstraints(Group group) {
		if (group == null) {
			throw new NullPointerException(""Cannot save a null group"");
		}

		if (StringUtils.isEmpty(group.getName())) {
			throw new ValidationException(""A group should have a name"");
		}
	}

	private void registerRole(Group group, String name, List<Integer> values) {
		if (values.size() > 0) {
			group.addRole(this.createRole(name, values));
		}
	}

	private void registerRole(Group group, String name, boolean isAllowed) {
		if (isAllowed) {
			group.addRole(this.createRole(name, null));
		}
	}

	private Role createRole(String name, List<Integer> values) {
		Role role = new Role();
		role.setName(name);

		if (values != null) {
			for (int value : values) {
				role.addRoleValue(value);
			}
		}

		return role;
	}
}"
net.jforum.services.RankingService,"public class RankingService {
	private RankingRepository repository;

	public RankingService(RankingRepository repository) {
		this.repository = repository;
	}

	/**
	 * Add a new ranking
	 * @param ranking
	 */
	public void add(Ranking ranking) {
		this.applySaveConstraints(ranking);

		if (ranking.getId() > 0) {
			throw new ValidationException(""This appears to be an existing ranking (id > 0). Please use update() instead"");
		}

		this.normalizeRankingInstance(ranking);
		this.repository.add(ranking);
	}

	/**
	 * Update an existing ranking
	 * @param ranking
	 */
	public void update(Ranking ranking) {
		this.applySaveConstraints(ranking);

		if (ranking.getId() == 0) {
			throw new ValidationException(""update() expects a ranking with an existing id"");
		}

		this.normalizeRankingInstance(ranking);
		this.repository.update(ranking);
	}

	/**
	 * Deletes a ranking
	 * @param ids
	 */
	public void delete(int... ids) {
		if (ids != null) {
			for (int id : ids) {
				Ranking ranking = this.repository.get(id);
				this.repository.remove(ranking);
			}
		}
	}

	/**
	 * A special ranking should not have a minimum number of posts
	 * @param ranking
	 */
	private void normalizeRankingInstance(Ranking ranking) {
		if (ranking.isSpecial()) {
			ranking.setMin(0);
		}
	}

	private void applySaveConstraints(Ranking ranking) {
		if (ranking == null) {
			throw new NullPointerException(""Ranking to save cannot be null"");
		}

		if (StringUtils.isEmpty(ranking.getTitle())) {
			throw new ValidationException(""The ranking should have a name"");
		}

		if (!ranking.isSpecial() && ranking.getMin() < 1) {
			throw new ValidationException(""The minimum number of messages should be bigger than zero"");
		}
	}
}"
net.jforum.services.PrivateMessageService,"public class PrivateMessageService {
	private PrivateMessageRepository repository;

	public PrivateMessageService(PrivateMessageRepository repository) {
		this.repository = repository;
	}

	/**
	 * Delete a set of private messages
	 * @param owner the owner of the messages
	 * @param ids the id of the messages to delete
	 */
	public void delete(User owner, int... ids) {
		if (ids == null || ids.length == 0) {
			return;
		}

		for (int id : ids) {
			PrivateMessage pm = this.repository.get(id);

			if (this.canDeleteMessage(owner, pm)) {
				this.repository.remove(pm);
			}
		}
	}

	private boolean canDeleteMessage(User owner, PrivateMessage pm) {
		return (pm.getToUser().equals(owner) && pm.getType() != PrivateMessageType.SENT)
			|| (pm.getFromUser().equals(owner) && pm.getType() == PrivateMessageType.SENT);
	}

	/**
	 * Send a private message
	 * @param pm the private message to send
	 */
	public void send(PrivateMessage pm) {
		this.applySendConstraints(pm);

		if (pm.getDate() == null) {
			pm.setDate(new Date());
		}

		this.repository.add(pm);
	}

	private void applySendConstraints(PrivateMessage pm) {
		if (pm.getFromUser() == null) {
			throw new ValidationException(""The sender was not specified"");
		}

		if (pm.getToUser() == null) {
			throw new ValidationException(""The recipient was not specified"");
		}

		if (StringUtils.isEmpty(pm.getSubject())) {
			throw new ValidationException(""The subject was not specified"");
		}

		if (StringUtils.isEmpty(pm.getText())) {
			throw new ValidationException(""The text was not specified"");
		}
	}
}"
net.jforum.services.TopicWatchService,"public class TopicWatchService {
	private TopicWatchRepository repository;

	public TopicWatchService(TopicWatchRepository repository) {
		this.repository = repository;
	}


	public TopicWatch getSubscription(Topic topic, User user) {
		return this.repository.getSubscription(topic, user);
	}

	/**
	 * Watch a specific topic
	 * @param topic the topic to watch
	 * @param user the user who wants to watch
	 */
	public void watch(Topic topic, User user) {
		TopicWatch watch = this.repository.getSubscription(topic, user);

		if (watch == null) {
			watch = new TopicWatch();
			watch.markAsRead();
			watch.setTopic(topic);
			watch.setUser(user);

			this.repository.add(watch);
		}
	}

	/**
	 * Unwatch a specific topic
	 * @param topic the topic to unwatch
	 * @param user the user who wants to unwatch
	 */
	public void unwatch(Topic topic, User user) {
		this.repository.removeSubscription(topic, user);
	}
}"
net.jforum.services.ConfigService,"public class ConfigService {
	private final JForumConfig config;
	private final ConfigRepository repository;
	private final I18n i18n;

	public ConfigService(JForumConfig config, ConfigRepository repository, I18n i18n) {
		this.config = config;
		this.repository = repository;
		this.i18n = i18n;
	}

	public void save(HttpServletRequest request) {
		for (Enumeration<?> e = request.getParameterNames(); e.hasMoreElements();) {
			String key = (String) e.nextElement();

			if (key.startsWith(""p_"")) {
				String value = request.getParameter(key);

				String name = key.substring(key.indexOf('_') + 1);
				Config entry = this.repository.getByName(name);

				if (entry == null) {
					entry = new Config();
					entry.setName(name);
				}

				entry.setValue(value);

				this.config.clearProperty(name);
				this.config.setProperty(name, value);

				this.repository.update(entry);
			}
		}

		this.i18n.changeBoardDefaultLanguage(this.config.getValue(ConfigKeys.I18N_DEFAULT));
	}
}"
net.jforum.services.ForumService,"public class ForumService {
	private ForumRepository repository;

	public ForumService(ForumRepository repository) {
		this.repository = repository;
	}

	/**
	 * Add a new forum
	 * @param forum
	 */
	public void add(Forum forum) {
		this.applyCommonConstraints(forum);

		if (forum.getId() > 0) {
			throw new ValidationException(""This appears to be an existing forum (id > 0). Please use update() instead."");
		}

		this.repository.add(forum);
	}

	/**
	 * Updates the information of an existing forum
	 * @param forum
	 */
	public void update(Forum forum) {
		this.applyCommonConstraints(forum);

		if (forum.getId() == 0) {
			throw new ValidationException(""update() expects a forum with an existing id"");
		}

		Forum currentForum = this.repository.get(forum.getId());

		currentForum.setName(forum.getName());
		currentForum.setDescription(forum.getDescription());
		currentForum.setModerated(forum.isModerated());
		currentForum.setAllowAnonymousPosts(forum.isAllowAnonymousPosts());
		currentForum.setCategory(forum.getCategory());

		this.repository.update(currentForum);
	}

	/**
	 * Deletes on or more forums
	 * @param ids
	 */
	public void delete(int... ids) {
		if (ids != null) {
			for (int id : ids) {
				Forum forum = this.repository.get(id);

				this.repository.remove(forum);
			}
		}
	}

	/**
	 * Changes the forum order one level up
	 * @param forumId
	 */
	public void upForumOrder(int forumId) {
		this.processOrdering(true, forumId);
	}

	/**
	 * Changes the forum order one level down
	 * @param forumId
	 */
	public void downForumOrder(int forumId) {
		this.processOrdering(false, forumId);
	}

	/**
	 * Changes the order of the specified forum, adding it one level or one level down
	 * @param up if true, sets the forum one level up. If false, one level down
	 * @param forumId the id of the category to change
	 */
	private void processOrdering(boolean up, int forumId) {
		Forum toChange = this.repository.get(forumId);
		List<Forum> forums = toChange.getCategory().getForums();

		int index = forums.indexOf(toChange);

		if (index > -1 && (up && index > 0) || (!up && index + 1 < forums.size())) {
			Forum otherForum = up ? forums.get(index - 1) : forums.get(index + 1);

			int oldOrder = toChange.getDisplayOrder();

			toChange.setDisplayOrder(otherForum.getDisplayOrder());
			otherForum.setDisplayOrder(oldOrder);

			this.repository.update(toChange);
			this.repository.update(otherForum);
		}
	}

	private void applyCommonConstraints(Forum forum) {
		if (forum == null) {
			throw new NullPointerException(""Cannot save a null forum"");
		}

		if (forum.getCategory() == null || forum.getCategory().getId() == 0) {
			throw new ValidationException(""A forum must be associated to a category"");
		}

		if (StringUtils.isEmpty(forum.getName())) {
			throw new ValidationException(""A forum must have a name"");
		}
	}
}"
net.jforum.services.ModerationLogService,"public class ModerationLogService {
	private final JForumConfig config;
	private final ModerationLogRepository repository;
	private final TopicRepository topicRepository;

	public ModerationLogService(JForumConfig config, ModerationLogRepository repository, TopicRepository topicRepository) {
		this.config = config;
		this.repository = repository;
		this.topicRepository = topicRepository;
	}

	public void registerPostEdit(ModerationLog log, Post post, String originalPostMessage) {
		if (this.isLoggingEnabled(log)) {
			log.setDate(new Date());
			log.setOriginalMessage(originalPostMessage);
			log.setPosterUser(post.getUser());
			log.setPostId(post.getId());
			log.setTopicId(post.getTopic().getId());

			this.repository.add(log);
		}
	}

	public void registerMovedTopics(ModerationLog log, int... topicIds) {
		if (this.isLoggingEnabled(log)) {
			for (int topicId : topicIds) {
				ModerationLog ml = this.createModerationLog(log.getType(), log.getUser(), log.getDescription(),
					this.topicRepository.get(topicId).getUser());

				ml.setTopicId(topicId);

				this.repository.add(ml);
			}
		}
	}

	public void registerLockedTopics(ModerationLog log, int[] topicIds) {
		if (this.isLoggingEnabled(log)) {
			for (int topicId : topicIds) {
				ModerationLog ml = this.createModerationLog(log.getType(), log.getUser(), log.getDescription(),
					this.topicRepository.get(topicId).getUser());

				ml.setTopicId(topicId);

				this.repository.add(ml);
			}
		}
	}

	public void registerDeleteTopics(List<Topic> topics, ModerationLog log) {
		if (this.isLoggingEnabled(log)) {
			for (Topic topic : topics) {
				ModerationLog ml = this.createModerationLog(log.getType(), log.getUser(), log.getDescription(), topic.getUser());
				this.repository.add(ml);
			}
		}
	}

	private ModerationLog createModerationLog(int type, User user, String description, User posterUser) {
		ModerationLog ml = new ModerationLog();

		ml.setDate(new Date());
		ml.setType(type);
		ml.setUser(user);
		ml.setDescription(description);
		ml.setPosterUser(posterUser);

		return ml;
	}

	private boolean isLoggingEnabled(ModerationLog log) {
		return log != null && this.config.getBoolean(ConfigKeys.MODERATION_LOGGING_ENABLED);
	}
}"
net.jforum.services.CategoryService,"public class CategoryService {
	private CategoryRepository repository;

	public CategoryService(CategoryRepository repository) {
		this.repository = repository;
	}

	/**
	 * Adds a new category
	 * @param category
	 * @throws ValidationException if the instance is not good for saving
	 */
	public void add(Category category) {
		this.applyCommonConstraints(category);

		if (category.getId() > 0) {
			throw new ValidationException(""This appears to be an existing category (id > 0). Please use update() instead"");
		}

		this.repository.add(category);
	}

	/**
	 * Deletes on or more categories
	 * @param ids
	 */
	public void delete(int... ids) {
		if (ids != null) {
			for (int id : ids) {
				Category c = this.repository.get(id);
				this.repository.remove(c);
			}
		}
	}

	/**
	 * Updates an existing category
	 * @param category
	 */
	public void update(Category category) {
		this.applyCommonConstraints(category);

		if (category.getId() == 0) {
			throw new ValidationException(""update() expects a category with an existing id"");
		}

		this.repository.update(category);
	}

	/**
	 * Changes the category order one level up
	 * @param categoryId
	 */
	public void upCategoryOrder(int categoryId) {
		this.processOrdering(true, categoryId);
	}

	/**
	 * Changes the category order one level down
	 * @param categoryId
	 */
	public void downCategoryOrder(int categoryId) {
		this.processOrdering(false, categoryId);
	}

	/**
	 * Changes the order of the specified category, adding it
	 * one level or one level down
	 * @param up if true, sets the category one level up. If false, one level down
	 * @param categoryId the id of the category to change
	 */
	private void processOrdering(boolean up, int categoryId) {
		Category toChange = this.repository.get(categoryId);
		List<Category> categories = this.repository.getAllCategories();

		int index = categories.indexOf(toChange);

		if (index > -1 && (up && index > 0) || (!up && index + 1 < categories.size())) {
			Category otherCategory = up ? categories.get(index - 1) : categories.get(index + 1);

			int oldOrder = toChange.getDisplayOrder();

			toChange.setDisplayOrder(otherCategory.getDisplayOrder());
			otherCategory.setDisplayOrder(oldOrder);

			this.repository.update(toChange);
			this.repository.update(otherCategory);
		}
	}

	private void applyCommonConstraints(Category c) {
		if (c == null) {
			throw new NullPointerException(""Cannot save a null category"");
		}

		if (StringUtils.isEmpty(c.getName())) {
			throw new ValidationException(""Category name cannot be blank or null"");
		}
	}
}"
net.jforum.services.SmilieService,"public class SmilieService {
	private SmilieRepository repository;
	private JForumConfig config;

	public SmilieService(SmilieRepository repository, JForumConfig config) {
		this.repository = repository;
		this.config = config;
	}

	/**
	 * Adds a new smilie
	 *
	 * @param smilie
	 */
	public void add(Smilie smilie, UploadedFile uploadedFile) {
		this.applyCommonConstraints(smilie);

		if (smilie.getId() > 0) {
			throw new ValidationException(
					""Cannot add an existing (id > 0) smilie"");
		}

		String imageDiskName = this.saveImage(uploadedFile);

		if (imageDiskName == null) {
			throw new NullPointerException(
					""Could not find the smile file to save"");
		}

		smilie.setDiskName(imageDiskName);

		this.repository.add(smilie);
	}

	/**
	 * Updates a existing smilie
	 *
	 * @param smilie
	 * @param file
	 */
	public void update(Smilie smilie, UploadedFile uploadedFile) {
		this.applyCommonConstraints(smilie);

		if (smilie.getId() == 0) {
			throw new ValidationException(
					""update() expects a smilie with an existing id"");
		}

		String imageDiskName = this.saveImage(uploadedFile);

		Smilie current = this.repository.get(smilie.getId());
		current.setCode(smilie.getCode());

		if (imageDiskName != null) {
			this.deleteImage(current);
			current.setDiskName(imageDiskName);
		}

		this.repository.update(current);
	}

	/**
	 * Delete smilies
	 *
	 * @param smiliesId
	 */
	public void delete(int... smiliesId) {
		if (smiliesId != null) {
			for (int id : smiliesId) {
				Smilie s = this.repository.get(id);
				this.repository.remove(s);

				this.deleteImage(s);
			}
		}
	}

	private void deleteImage(Smilie smilie) {
		String filename = String.format(""%s/%s/%s"",
				this.config.getApplicationPath(),
				this.config.getValue(ConfigKeys.SMILIE_IMAGE_DIR),
				smilie.getDiskName());

		new File(filename).delete();
	}

	private String saveImage(UploadedFile uploadedFile) {
		if (uploadedFile != null) {
			UploadUtils upload = new UploadUtils(uploadedFile);

			String imageName = String.format(
					""%s.%s"",
					MD5.hash(uploadedFile.getFileName()
							+ System.currentTimeMillis()),
					upload.getExtension());

			upload.saveUploadedFile(String.format(""%s/%s/%s"",
					this.config.getApplicationPath(),
					this.config.getValue(ConfigKeys.SMILIE_IMAGE_DIR),
					imageName));

			return imageName;
		}

		return null;
	}

	private void applyCommonConstraints(Smilie smilie) {
		if (smilie == null) {
			throw new NullPointerException(""Cannot save a null smilie"");
		}

		if (StringUtils.isEmpty(smilie.getCode())) {
			throw new ValidationException(""Smilie code cannot be empty"");
		}
	}
}"
net.jforum.services.PostService,"public class PostService {
	private PostRepository postRepository;
	private AttachmentService attachmentService;
	private PollService pollService;
	private TopicRepository topicRepository;
	private ModerationLogService moderationLogService;

	public PostService(PostRepository postRepository, AttachmentService attachmentService,
			PollService pollService, TopicRepository topicRepository, ModerationLogService moderationLogService) {
		this.postRepository = postRepository;
		this.attachmentService = attachmentService;
		this.pollService = pollService;
		this.topicRepository = topicRepository;
		this.moderationLogService = moderationLogService;
	}

	/**
	 * Deletes an existing post
	 * @param postId
	 */
	public void delete(Post post) {
		this.attachmentService.deleteAllAttachments(post);
		this.postRepository.remove(post);
	}

	/**
	 * Updates an existing post
	 * @param post the post to update
	 * @param canChangeTopicType
	 * @param pollOptions
	 * @param attachments
	 * @param moderationLog
	 */
	public void update(Post post, boolean canChangeTopicType, List<PollOption> pollOptions,
			List<AttachedFile> attachments, ModerationLog moderationLog) {
		this.applySaveConstraints(post);

		Post currentPost = this.postRepository.get(post.getId());
		String originalPostMessage = currentPost.getText();

		currentPost.setSubject(post.getSubject());
		currentPost.setText(post.getText());
		currentPost.setEditDate(new Date());
		currentPost.incrementEditCount();

		this.copyFormattingOptions(post, currentPost);
		this.attachmentService.insertAttachments(attachments, currentPost);

		// TODO: Move to TopicPostEvent (?)
		Topic currentTopic = currentPost.getTopic();

		currentPost.setHasAttachments(currentPost.getAttachments().size() > 0);

		// FIXME: this will ovewrite the topic information about attachments
		currentTopic.setHasAttachment(currentPost.getHasAttachments());

		if (currentTopic.getFirstPost().equals(currentPost)) {
			currentTopic.setSubject(post.getSubject());

			if (canChangeTopicType) {
				currentTopic.setType(post.getTopic().getType());
			}

			if (!currentTopic.isPollEnabled()) {
				// Set a new poll
				currentTopic.setPoll(post.getTopic().getPoll());
				this.pollService.associatePoll(currentTopic, pollOptions);
			}
			else {
				// Update existing poll
				currentTopic.getPoll().setLabel(post.getTopic().getPoll().getLabel());
				currentTopic.getPoll().setLength(post.getTopic().getPoll().getLength());

				if (pollOptions != null && pollOptions.size() > 0) {
					this.pollService.processChanges(currentTopic.getPoll(), pollOptions);
				}
			}
		}

		this.postRepository.update(currentPost);
		this.topicRepository.update(currentTopic);

		this.moderationLogService.registerPostEdit(moderationLog, currentPost, originalPostMessage);
	}

	private void copyFormattingOptions(Post from, Post to) {
		to.setBbCodeEnabled(from.isBbCodeEnabled());
		to.setHtmlEnabled(from.isHtmlEnabled());
		to.setSmiliesEnabled(from.isSmiliesEnabled());
		to.setSignatureEnabled(from.isSignatureEnabled());
	}

	private void applySaveConstraints(Post post) {
		if (post == null) {
			throw new NullPointerException(""Cannot update a null post"");
		}

		if (post.getId() == 0) {
			throw new IllegalStateException(""The post does not have an id"");
		}

		if (StringUtils.isEmpty(post.getSubject())) {
			throw new IllegalStateException(""The post should have a subject"");
		}

		if (StringUtils.isEmpty(post.getText())) {
			throw new IllegalStateException(""The post should have a message"");
		}
	}
}"
net.jforum.entities.MostUsersEverOnline,"public class MostUsersEverOnline implements Serializable {
	private int total;
	private Date date;

	public int getTotal() {
		return this.total;
	}

	public Date getDate() {
		return this.date;
	}

	public void setTotal(int total) {
		this.total = total;
	}

	public void setDate(Date date) {
		this.date = date;
	}
}"
net.jforum.entities.Post,"public class Post implements Serializable {
	@Id
	@DocumentId
	@SequenceGenerator(name = ""sequence"", sequenceName = ""jforum_posts_seq"")
	@GeneratedValue(strategy = GenerationType.AUTO, generator = ""sequence"")
	@Column(name = ""post_id"")
	private int id;

	@Column(name = ""post_date"")
	@Field(index=Index.UN_TOKENIZED, store=Store.NO)
	@DateBridge(resolution=Resolution.MINUTE)
	private Date date;

	@Column(name = ""post_text"")
	@Field(store = Store.NO, index = Index.TOKENIZED)
	private String text;

	@Column(name = ""post_subject"")
	@Field(store = Store.NO, index = Index.TOKENIZED)
	private String subject;

	@Column(name = ""enable_bbcode"")
	private boolean bbCodeEnabled = true;

	@Column(name = ""enable_html"")
	private boolean htmlEnabled = false;

	@Column(name = ""enable_smilies"")
	private boolean smiliesEnabled = true;

	@Column(name = ""enable_sig"")
	private boolean signatureEnabled = true;

	@Column(name = ""poster_ip"")
	private String userIp;

	@Column(name = ""attach"")
	private boolean hasAttachments;

	@Column(name = ""need_moderate"")
	private boolean moderate;

	@Column(name = ""post_edit_count"")
	private int editCount;

	@Column(name = ""post_edit_time"")
	private Date editDate;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = ""topic_id"")
	@IndexedEmbedded
	private Topic topic;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = ""forum_id"")
	private Forum forum;

	@ManyToOne
	@JoinColumn(name = ""user_id"")
	@IndexedEmbedded
	private User user;

	@OneToMany(mappedBy = ""post"")
	@Cascade({ CascadeType.ALL, CascadeType.DELETE_ORPHAN })
	private List<Attachment> attachments = new ArrayList<Attachment>();
	@Transient
	private boolean notifyReplies;

	@Transient
	private Boolean hasEditTimeExpired = Boolean.FALSE;

	public boolean shouldNotifyReplies() {
		return this.notifyReplies;
	}

	public void setNotifyReplies(boolean notify) {
		this.notifyReplies = notify;
	}

	public void setModerate(boolean status) {
		this.moderate = status;
	}

	public boolean isWaitingModeration() {
		return this.moderate;
	}

	/**
	 * Checks if the BB code is enabled
	 *
	 * @return boolean value representing the result
	 */
	public boolean isBbCodeEnabled() {
		return this.bbCodeEnabled;
	}

	/**
	 * Checks if HTML is enabled in the topic
	 *
	 * @return boolean value representing the result
	 */
	public boolean isHtmlEnabled() {
		return this.htmlEnabled;
	}

	/**
	 * Gets the ID of the post
	 *
	 * @return int value with the ID
	 */
	public int getId() {
		return this.id;
	}

	/**
	 * Checks if signature is allowd in the message
	 *
	 * @return boolean representing the result
	 */
	public boolean isSignatureEnabled() {
		return this.signatureEnabled;
	}

	/**
	 * Checks if smart Smilies are enabled :)
	 *
	 * @return boolean representing the result
	 */
	public boolean isSmiliesEnabled() {
		return this.smiliesEnabled;
	}

	/**
	 * Gets the time, represented as long, of the message post
	 *
	 * @return long representing the post time
	 */
	public Date getDate() {
		return this.date;
	}

	/**
	 * Gets the forum this post belongs to. In fact, this method makes a call to
	 * {@link #getTopic().getForum()}
	 *
	 * @return the forum
	 */
	public Forum getForum() {
		return this.forum;
	}

	public void setForum(Forum forum) {
		this.forum = forum;
	}

	/**
	 * Gets the id of the topic this message is associated
	 *
	 * @return int value with the topic id
	 */
	public Topic getTopic() {
		return this.topic;
	}

	/**
	 * Gets the User who has posted the message
	 *
	 * @return int value with the user id
	 */
	public User getUser() {
		return this.user;
	}

	/**
	 * Gets the IP of the user who have posted the message
	 *
	 * @return String value with the user IP
	 */
	public String getUserIp() {
		return this.userIp;
	}

	/**
	 * Sets the status for BB code in the message
	 *
	 * @param bbCodeEnabled
	 *            <code>true</code> or <code>false</code>, depending the
	 *            intention
	 */
	public void setBbCodeEnabled(boolean bbCodeEnabled) {
		this.bbCodeEnabled = bbCodeEnabled;
	}

	/**
	 * Sets the status for HTML code in the message
	 *
	 * @param htmlEnabled
	 *            <code>true</code> or <code>false</code>, depending the
	 *            intention
	 */
	public void setHtmlEnabled(boolean htmlEnabled) {
		this.htmlEnabled = htmlEnabled;
	}

	/**
	 * Sets the id for the message
	 *
	 * @param id
	 *            The id
	 */
	public void setId(int id) {
		this.id = id;
	}

	/**
	 * Sets the status for signatures in the message
	 *
	 * @param signatureEnabled
	 *            <code>true</code> or <code>false</code>, depending the
	 *            intention
	 */
	public void setSignatureEnabled(boolean signatureEnabled) {
		this.signatureEnabled = signatureEnabled;
	}

	/**
	 * Sets the status for smilies in the message
	 *
	 * @param smiliesEnabled
	 *            <code>true</code> or <code>false</code>, depending the
	 *            intention
	 */
	public void setSmiliesEnabled(boolean smiliesEnabled) {
		this.smiliesEnabled = smiliesEnabled;
	}

	/**
	 * Sets the time the message was sent
	 *
	 * @param date
	 *            The time
	 */
	public void setDate(Date date) {
		this.date = date;
	}

	/**
	 * Sets the id of the topic that the message belongs to
	 *
	 * @param topicId
	 *            The id of the topic
	 */
	public void setTopic(Topic topic) {
		this.topic = topic;
	}

	/**
	 * Sets the User that sent the message
	 *
	 * @param userId
	 *            The user Id
	 */
	public void setUser(User user) {
		this.user = user;
	}

	/**
	 * Gets the message of the post
	 *
	 * @return String containing the text
	 */
	public String getText() {
		return this.text;
	}

	/**
	 * Sets the text of the post
	 *
	 * @param text
	 *            The text to set
	 */
	public void setText(String text) {
		this.text = text;
	}

	/**
	 * Gets the subject of the post
	 *
	 * @return String with the subject
	 */
	public String getSubject() {
		return this.subject;
	}

	/**
	 * Sets the subject for the message
	 *
	 * @param subject
	 *            The subject to set
	 */
	public void setSubject(String subject) {
		this.subject = subject;
	}

	/**
	 * Sets the IP of the user
	 *
	 * @param userIP
	 *            The IP address of the user
	 */
	public void setUserIp(String userIp) {
		this.userIp = userIp;
	}

	/**
	 * @return Returns the hasAttachments.
	 */
	public boolean getHasAttachments() {
		return this.hasAttachments;
	}

	/**
	 * @param hasAttachments
	 *            The hasAttachments to set.
	 */
	public void setHasAttachments(boolean hasAttachments) {
		this.hasAttachments = hasAttachments;
	}

	/**
	 * @return the editDate
	 */
	public Date getEditDate() {
		return this.editDate;
	}

	/**
	 * @param editDate
	 *            the editDate to set
	 */
	public void setEditDate(Date editDate) {
		this.editDate = editDate;
	}

	/**
	 * @param editCount
	 *            the editCount to set
	 */
	public void incrementEditCount() {
		this.editCount++;
	}

	/**
	 * Gets the total number of times the post was edited
	 *
	 * @return int value with the total number of times the post was edited
	 */
	public int getEditCount() {
		return this.editCount;
	}

	/**
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object o) {
		if (o == this) {
			return true;
		}

		if (!(o instanceof Post)) {
			return false;
		}

		return ((Post) o).getId() == this.id;
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		return this.id;
	}

	public void addAttachment(Attachment attachment) {
		attachment.setPost(this);
		this.attachments.add(attachment);
	}

	/**
	 * @param attachments the attachments to set
	 */
	public void setAttachments(List<Attachment> attachments) {
		this.attachments = attachments;
	}

	/**
	 * @return the attachments
	 */
	public List<Attachment> getAttachments() {
		return attachments;
	}

	public Boolean getHasEditTimeExpired() {
		return hasEditTimeExpired;
	}

	public void setHasEditTimeExpired(Boolean hasEditTimeExpired) {
		this.hasEditTimeExpired = hasEditTimeExpired;
	}
	public void calculateHasEditTimeExpired(long limitedTime, Date now) {
		this.hasEditTimeExpired = now.getTime() - date.getTime() > limitedTime;
	}
}"
net.jforum.entities.Poll,"public class Poll implements Serializable {
	@Id
	@SequenceGenerator(name = ""sequence"", sequenceName = ""jforum_vote_desc_seq"")
	@GeneratedValue(strategy = GenerationType.AUTO, generator = ""sequence"")
	@Column(name = ""vote_id"")
	private int id;

	@Column(name = ""vote_text"")
	private String label;

	@Column(name = ""vote_start"")
	private Date startDate;

	@OneToMany(mappedBy = ""poll"")
	@Cascade({CascadeType.ALL, CascadeType.DELETE_ORPHAN})
	private List<PollOption> options = new ArrayList<PollOption>();

	@Column(name = ""vote_length"")
	private int length;

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getLabel() {
		return label;
	}

	public void setLabel(String label) {
		this.label = label;
	}

	public Date getStartDate() {
		return startDate;
	}

	public void setStartDate(Date startDate) {
		this.startDate = startDate;
	}

	public List<PollOption> getOptions() {
		return options;
	}

	public int getTotalVotes() {
		int votes = 0;

		for (PollOption option : this.options) {
			votes += option.getVoteCount();
		}

		return votes;
	}

	public boolean isOpen() {
		if (this.length == 0) {
			return true;
		}

		Calendar endTime = Calendar.getInstance();
		endTime.setTime(startDate);
		endTime.add(Calendar.DAY_OF_YEAR, this.length);

		return System.currentTimeMillis() < endTime.getTimeInMillis();
	}

	/**
	 * @param options the options to set
	 */
	public void setOptions(List<PollOption> options) {
		this.options = options;
	}

	/**
	 * @param length the length to set
	 */
	public void setLength(int length) {
		this.length = length;
	}

	/**
	 * @return the length
	 */
	public int getLength() {
		return length;
	}
}"
net.jforum.entities.Group,"public class Group implements Serializable {
	@Id
	@SequenceGenerator(name = ""sequence"", sequenceName = ""jforum_groups_seq"")
	@GeneratedValue(strategy = GenerationType.AUTO, generator = ""sequence"")
	@Column(name = ""group_id"")
	private int id;

	@Column(name = ""group_name"")
	private String name;

	@Column(name = ""group_description"")
	private String description;

	@OneToMany(mappedBy = ""group"")
	@Cascade({CascadeType.ALL, CascadeType.DELETE_ORPHAN})
	@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
	private List<Role> roles = new ArrayList<Role>();

	@ManyToMany(mappedBy = ""groups"")
	private List<User> users = new ArrayList<User>();

	public boolean roleExist(String roleName) {
		for (Role role : this.roles) {
			if (role.getName().equals(roleName)) {
				return true;
			}
		}

		return false;
	}

	public boolean roleExists(String name, int value) {
		for (Role role : this.roles) {
			if (role.getName().equals(name)) {
				return role.getRoleValues().contains(value);
			}
		}

		return false;
	}

	/**
	 * Add a new security role to this group
	 * @param role the role to add
	 */
	public void addRole(Role role) {
		this.roles.add(role);
		role.setGroup(this);
	}

	public List<Role> getRoles() {
		return this.roles;
	}

	/**
	 * @return the users
	 */
	public List<User> getUsers() {
		return users;
	}

	/**
	 * @return String
	 */
	public String getDescription() {
		return this.description;
	}

	/**
	 * @return int
	 */
	public int getId() {
		return this.id;
	}

	/**
	 * @return String
	 */
	public String getName() {
		return this.name;
	}

	/**
	 * Sets the description.
	 *
	 * @param description The description to set
	 */
	public void setDescription(String description) {
		this.description = description;
	}

	/**
	 * Sets the id.
	 *
	 * @param id The id to set
	 */
	public void setId(int id) {
		this.id = id;
	}

	/**
	 * Sets the name.
	 *
	 * @param name The name to set
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object o) {
		if (o == this) {
			return true;
		}

		if (!(o instanceof Group)) {
			return false;
		}

		return ((Group)o).getId()  == this.getId();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		return this.getId();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return String.format(""%d, %s"", this.id, this.name);
	}
}"
net.jforum.entities.BadWord,"public class BadWord {
	@Id
	@SequenceGenerator(name = ""sequence"", sequenceName = ""jforum_words_seq"")
	@GeneratedValue(strategy = GenerationType.AUTO, generator = ""sequence"")
	@Column(name = ""word_id"")
	private int id;

	@Column(name = ""word"")
	private String word;

	@Column(name = ""replacement"")
	private String replacement;

	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getWord() {
		return this.word;
	}

	public void setWord(String word) {
		this.word = word;
	}

	public String getReplacement() {
		return this.replacement;
	}

	public void setReplacement(String replacement) {
		this.replacement = replacement;
	}
}"
net.jforum.entities.Avatar,"public class Avatar implements Serializable {
	@Id
	@SequenceGenerator(name = ""sequence"", sequenceName = ""jforum_avatar_seq"")
	@GeneratedValue(strategy = GenerationType.AUTO, generator = ""sequence"")
	@Column(name = ""id"")
	private int id;

	@Column(name = ""file_name"")
	private String fileName;

	@Column(name = ""avatar_type"", updatable = false)
	@Enumerated(EnumType.STRING)
	private AvatarType avatarType = AvatarType.AVATAR_GALLERY;

	@Column(name = ""width"")
	private int width;

	@Column(name = ""height"")
	private int height;

	@OneToMany(mappedBy = ""avatar"", fetch = FetchType.LAZY)
	private Set<User> users;

	public Set<User> getUsers() {
		return users;
	}

	public void setUsers(Set<User> users) {
		this.users = users;
	}

	public User getUploadedBy(){
		if (avatarType == AvatarType.AVATAR_UPLOAD && users != null && users.size( ) == 1) {
			return users.iterator().next();
		}

		return null;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getFileName() {
		return fileName;
	}

	public void setFileName(String fileName) {
		this.fileName = fileName;
	}

	public Integer getWidth() {
		return width;
	}

	public void setWidth(Integer width) {
		this.width = width;
	}

	public Integer getHeight() {
		return height;
	}

	public void setHeight(Integer height) {
		this.height = height;
	}

	public AvatarType getAvatarType() {
		return avatarType;
	}

	public void setAvatarType(AvatarType avatarType) {
		this.avatarType = avatarType;
	}

	@Override
	public String toString() {
		return fileName;
	}

	@Override
	public int hashCode() {
		return Integer.valueOf(this.id).hashCode();
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		Avatar other = (Avatar) obj;
		if (id != other.id) {
			return false;
		}
		return true;
	}
}"
net.jforum.entities.UserSession,"public class UserSession implements Serializable {
	private static final long serialVersionUID = 1L;
	
	private static final Logger logger = Logger.getLogger(UserSession.class);
	private User user = new User(null);
	private RoleManager roleManager;
	private Map<Integer, Long> topicReadTime = new HashMap<Integer, Long>();
	private long lastAccessedTime;
	private long creationTime;
	private long lastVisit;
	private String sessionId;
	private HttpServletRequest request;
	private HttpServletResponse response;

	public void setResponse(HttpServletResponse response) {
		this.response = response;
	}

	/**
	 * Flag a specific topic as ""read"" by the user
	 * It will be ignored if the user is not logged
	 * @param topicId the id of the topic to mark as read
	 */
	public void markTopicAsRead(int topicId) {
		if (this.isLogged()) {
			this.topicReadTime.put(topicId, System.currentTimeMillis());
		}
	}

	public void setRequest(HttpServletRequest request) {
		this.request = request;
	}

	/**
	 * Check if the user has read a specific topic.o
	 * @param topic the topic. Check will be made against <code>topic.lastPost.date</code>
	 * @return  true if the topic is read or if the user is not logged.
	 */
	public boolean isTopicRead(Topic topic) {
		if (!this.isLogged()) {
			return true;
		}

		long lastVisit = this.getLastVisit();
		long postTime = topic.getLastPost().getDate().getTime();

		if (postTime <= lastVisit) {
			return true;
		}

		Long readTime = this.topicReadTime.get(topic.getId());
		return readTime != null && postTime <= readTime;
	}

	/**
	 * Check if there are unread messages in a specific forum
	 * FIXME this currently only checks for the time of the last message in the forum.
	 * A correct implementation should check all posts in the forum (while not hurting performance)
	 * @param forum the forum to check
	 * @return true if there are no unread messages in the forum, or if the user is not logged
	 */
	public boolean isForumRead(Forum forum) {
		if (!this.isLogged() || forum.getTotalPosts() == 0 || forum.getLastPost() == null) {
			return true;
		}

		long lastVisit = this.getLastVisit();
		long postTime = forum.getLastPost().getDate().getTime();

		if (postTime <= lastVisit) {
			return true;
		}

		Long readTime = this.topicReadTime.get(forum.getLastPost().getTopic().getId());
		return readTime != null && postTime <= readTime;
	}

	public void setRoleManager(RoleManager roleManager) {
		this.roleManager = roleManager;
	}

	public RoleManager getRoleManager() {
		return this.roleManager;
	}

	public HttpServletRequest getRequest() {
		return request;
	}

	public String getIp() {
		/*
		if(new JForumConfig().getBoolean(ConfigKeys.BLOCK_IP)) {
			return null;
		}
		*/

		// We look if the request is forwarded
		// If it is not call the older function.
		String ip = request.getHeader(""X-Pounded-For"");

		if (ip != null) {
			return ip;
		}

        ip = request.getHeader(""x-forwarded-for"");

        if (ip == null) {
        	return request.getRemoteAddr();
        }
        else {
        	// Process the IP to keep the last IP (real ip of the computer on the net)
            StringTokenizer tokenizer = new StringTokenizer(ip, "","");

            // Ignore all tokens, except the last one
            for (int i = 0; i < tokenizer.countTokens() -1 ; i++) {
            	tokenizer.nextElement();
            }

            ip = tokenizer.nextToken().trim();

            if (ip.equals("""")) {
            	ip = null;
            }
        }

        // If the ip is still null, we put 0.0.0.0 to avoid null values
        if (ip == null) {
        	ip = ""0.0.0.0"";
        }

        return ip;
	}

	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;

		if (user == null) {
			try {
				throw new RuntimeException(""userSession.setUser with null value. See the stack trace for more information about the call stack. Session ID: ""
					+ this.sessionId);
			}
			catch (RuntimeException e) {
				Writer writer = new StringWriter();
				PrintWriter printWriter = new PrintWriter(writer);
				e.printStackTrace(printWriter);
				logger.warn(writer.toString());
			}
		}
	}

	/**
	 * Gets user's session start time
	 *
	 * @return Start time in miliseconds
	 */
	public long getCreationTime() {
		return this.creationTime;
	}

	public void setCreationTime(long start) {
		this.creationTime = start;
		this.lastAccessedTime = start;
		this.lastVisit = start;
	}

	/**
	 * Gets user's last visit time
	 *
	 * @return Time in miliseconds
	 */
	public long getLastAccessedTime() {
		return this.lastAccessedTime;
	}

	public Date getLastAccessedDate() {
		return new Date(this.getLastAccessedTime());
	}

	/**
	 * @return the lastVisit
	 */
	public long getLastVisit() {
		return this.lastVisit;
	}

	/**
	 * @return the lastVisit as a date
	 */
	public Date getLastVisitDate() {
		return new Date(this.lastVisit);
	}

	/**
	 * @param lastVisit the lastVisit to set
	 */
	public void setLastVisit(long lastVisit) {
		this.lastVisit = lastVisit;
	}

	/**
	 * Updates this instance with the last accessed time of the session
	 */
	public void ping() {
		this.lastAccessedTime = System.currentTimeMillis();
	}

	/**
	 * Gets the session id related to this user session
	 *
	 * @return A string with the session id
	 */
	public String getSessionId() {
		return this.sessionId;
	}

	public void setSessionId(String sessionId) {
		this.sessionId = sessionId;
	}

	public boolean isBot() {
		return false;
	}

	/**
	 * Makes the user session anonymous
	 */
	public void becomeAnonymous(int anonymousUserId) {
		User user = new User();
		user.setId(anonymousUserId);
		this.setUser(user);
		setAttribute(ConfigKeys.LOGGED, ""0"");
	}

	public void becomeLogged() {
		this.setAttribute(ConfigKeys.LOGGED, ""1"");
	}

	public boolean isLogged() {
		return ""1"".equals(this.getAttribute(ConfigKeys.LOGGED));
	}
	/**
	 * Gets a cookie by its name.
	 *
	 * @param name The cookie name to retrieve
	 * @return The <code>Cookie</code> object if found, or <code>null</code> oterwhise
	 */
	public Cookie getCookie(String name) {
		Cookie[] cookies = request.getCookies();

		if (cookies != null) {
			for (Cookie c : cookies) {
				if (c.getName().equals(name)) {
					return c;
				}
			}
		}

		return null;
	}

	/**
	 * Add or update a cookie. This method adds a cookie, serializing its value using XML.
	 *
	 * @param name The cookie name.
	 * @param value The cookie value
	 */
	public void addCookie(String name, String value) {
		int maxAge = 3600 * 24 * 365;

		if (value == null) {
			maxAge = 0;
			value = """";
		}

		Cookie cookie = new Cookie(name, value);
		cookie.setMaxAge(maxAge);
		cookie.setPath(""/"");

		response.addCookie(cookie);
	}

	/**
	 * Removes a cookie
	 * @param name the name of the cookie to remove
	 */
	public void removeCookie(String name) {
		this.addCookie(name, null);
	}

	public void setAttribute(String name, Object value) {
		request.getSession().setAttribute(name, value);
	}

	public Object getAttribute(String name) {
		return request.getSession().getAttribute(name);
	}

	/**
	 * Convert this instance to a {@link Session}
	 * @return
	 */
	public Session asSession() {
		Session session = new Session();

		session.setUserId(this.user.getId());
		session.setIp(this.getIp());
		session.setStart(new Date(this.getCreationTime()));
		session.setLastAccessed(new Date(this.getLastAccessedTime()));
		session.setLastVisit(new Date(this.getLastVisit()));

		return session;
	}

	/**
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	//@Override
	public boolean eequals(Object o) {
		if (o == this) {
			return true;
		}

		if (!(o instanceof UserSession)) {
			return false;
		}

		return this.getSessionId().equals(((UserSession)o).getSessionId());
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		return this.getSessionId().hashCode();
	}

	/**
	 * @param time
	 */
	public void setLastAccessedTime(long time) {
		this.lastAccessedTime = time;
	}
}"
net.jforum.entities.ModerationLogType,"public class ModerationLogType {
	public static final int MOVE = 0;
	public static final int DELETE = 1;
	public static final int EDIT = 2;
	public static final int LOCK_UNLOCK = 3;

	private ModerationLogType() {
	}
}"
net.jforum.entities.Category,"public class Category implements Serializable {
	@Id
	@SequenceGenerator(name = ""sequence"", sequenceName = ""jforum_categories_seq"")
	@GeneratedValue(strategy = GenerationType.AUTO, generator = ""sequence"")
	@Column(name = ""category_id"")
	private int id;

	@Column(name = ""category_order"")
	private int displayOrder;

	@Column(name = ""category_moderated"")
	private boolean moderated;

	@Column(name = ""category_title"")
	private String name;

	//@ManyToOne
	//@JoinColumn(name = ""category_theme_id"")
	@Transient
	private Theme theme;

	@Transient
	private CategoryRepository repository;

	public Category() {}

	@Autowired
	public Category(CategoryRepository repository) {
		this.repository = repository;
	}

	public void setModerated(boolean status) {
		this.moderated = status;
	}

	public boolean isModerated() {
		return this.moderated;
	}

	/**
	 * @return int
	 */
	public int getId() {
		return this.id;
	}

	/**
	 * @return String
	 */
	public String getName() {
		return this.name;
	}

	/**
	 * @return int
	 */
	public int getDisplayOrder() {
		return this.displayOrder;
	}

	/**
	 * Sets the id.
	 *
	 * @param id The id to set
	 */
	public void setId(int id) {
		this.id = id;
	}

	/**
	 * Sets the name.
	 *
	 * @param name The name to set
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * Sets the order.
	 *
	 * @param order The order to set
	 */
	public void setDisplayOrder(int order) {
		this.displayOrder = order;
	}

	/**
	 * Get all forums from this category.
	 *
	 * @return All forums, regardless it is accessible to the user or not.
	 */
	public List<Forum> getForums() {
		// We do not use @OneToMany because forums are ordered,
		// thus changing the display order of a single forum will not
		// automatically change its order in the collection, and manually
		// executing a sort() appears to be a worst approach
		return this.repository.getForums(this);
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		return this.getId();
	}

	/**
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object o) {
		if (o == this) {
			return true;
		}

		if (!(o instanceof Category)) {
			return false;
		}

		return ((Category)o).getId() == this.getId();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return new StringBuilder(64)
			.append('[')
			.append(this.getName())
			.append("", id="").append(this.getId())
			.append("", order="").append(this.getDisplayOrder())
			.toString();
	}

	public Theme getTheme() {
		return theme;
	}

	public void setTheme(Theme theme) {
		this.theme = theme;
	}
}"
net.jforum.entities.PollVoter,"public class PollVoter {
	@Id
	@SequenceGenerator(name = ""sequence"", sequenceName = ""jforum_vote_voters_seq"")
	@GeneratedValue(strategy = GenerationType.AUTO, generator = ""sequence"")
	@Column(name = ""voter_id"")
	public int id;

	@ManyToOne
	@JoinColumn(name = ""vote_id"")
	private Poll poll;

	@ManyToOne
	@JoinColumn(name = ""vote_user_id"")
	private User user;

	@Column(name = ""vote_user_ip"")
	private String ip;

	public Poll getPoll() {
		return this.poll;
	}

	public void setPoll(Poll poll) {
		this.poll = poll;
	}

	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	public String getIp() {
		return this.ip;
	}

	public void setIp(String ip) {
		this.ip = ip;
	}
}"
net.jforum.entities.User,"public class User implements Serializable {
	@Id
	@SequenceGenerator(name = ""sequence"", sequenceName = ""jforum_users_seq"")
	@GeneratedValue(strategy = GenerationType.AUTO, generator = ""sequence"")
	@Column(name = ""user_id"")
	private int id;

	@Column(name = ""user_posts"")
	private int totalPosts;

	@Column(name = ""user_attachsig"")
	private boolean attachSignature = true;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = ""rank_id"")
	private Ranking ranking;

	@Column(name = ""user_allowhtml"")
	private boolean htmlEnabled = true;

	@Column(name = ""user_allowbbcode"")
	private boolean bbCodeEnabled = true;

	@Column(name = ""user_allowsmilies"")
	private boolean smiliesEnabled = true;

	@Column(name = ""user_allowavatar"")
	private boolean avatarEnabled = true;

	@Column(name = ""user_allow_pm"")
	private boolean privateMessagesEnabled = true;

	@Column(name = ""user_allow_viewonline"")
	private boolean viewOnlineEnabled = true;

	@Column(name = ""user_notify_pm"")
	private boolean notifyPrivateMessages = true;

	@Column(name = ""user_notify"")
	private boolean notifyReply = true;

	@Column(name = ""user_notify_always"")
	private boolean notifyAlways;

	@Column(name = ""user_notify_text"")
	private boolean notifyText;

	@Column(name = ""username"")
	@Field(store = Store.NO, index = Index.TOKENIZED)
	private String username;

	@Column(name = ""user_password"")
	private String password;

	@Column(name = ""user_lastvisit"")
	private Date lastVisit;

	@Column(name = ""user_regdate"")
	private Date registrationDate;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = ""avatar_id"", referencedColumnName = ""id"")
	private Avatar avatar;

	@Column(name = ""user_email"")
	@Field(store = Store.NO, index = Index.TOKENIZED)
	private String email;

	@Column(name = ""user_website"")
	private String website;

	@Column(name = ""user_from"")
	private String from;

	@Column(name = ""user_sig"")
	private String signature;

	@Column(name = ""user_aim"")
	private String aim;

	@Column(name = ""user_yim"")
	private String yim;

	@Column(name = ""user_msnm"")
	private String msn;

	@Column(name = ""user_occ"")
	private String occupation;

	@Column(name = ""user_interests"")
	private String interests;

	@Column(name = ""user_biography"")
	private String biography;

	@Column(name = ""gender"")
	private String gender;

	@Column(name = ""user_timezone"")
	private String timezone;

	@Column(name = ""user_lang"")
	private String lang;

	@Column(name = ""user_dateformat"")
	private String dateFormat;

	@Column(name = ""user_viewemail"")
	private boolean viewEmailEnabled = true;

	@ManyToMany(cascade = CascadeType.PERSIST)
	@JoinTable(name = ""jforum_user_groups"", joinColumns = { @JoinColumn(name = ""user_id"") }, inverseJoinColumns = { @JoinColumn(name = ""group_id"") })
	@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
	private List<Group> groups = new ArrayList<Group>();

	@Column(name = ""user_active"")
	private boolean active = true;

	@Column(name = ""user_actkey"")
	private String activationKey;

	@Column(name = ""deleted"")
	private boolean isDeleted;

	@Transient
	@Field(store = Store.NO, index = Index.TOKENIZED)
	private String firstName;

	@Transient
	@Field(store = Store.NO, index = Index.TOKENIZED)
	private String lastName;

	@Column(name = ""security_hash"")
	private String securityHash;

	@Transient
	private Map<Object, Object> extra = new HashMap<Object, Object>();

	@ContainedIn
	@OneToMany(mappedBy = ""user"")
	@SuppressWarnings(""unused"")
	private List<Post> posts;

	@Transient
	private UserRepository userRepository;

	public User() { }

	@Autowired
	public User(UserRepository userRepository) {
		this.userRepository = userRepository;
	}

	public void addExtra(String name, Object value) {
		this.extra.put(name, value);
	}

	public Object getExtra(String name) {
		return this.extra.get(name);
	}

	public void setFirstName(String name) {
		this.firstName = name;
	}

	public String getFirstName() {
		return this.firstName;
	}

	public void setLastName(String name) {
		this.lastName = name;
	}

	public String getLastNmame() {
		return this.lastName;
	}

	public String getName() {
		return this.firstName + "" "" + this.lastName;
	}

	public boolean isDeleted() {
		return this.isDeleted;
	}

	public void setDeleted(boolean isDeleted) {
		this.isDeleted = isDeleted;
	}

	public void addGroup(Group group) {
		if (!this.groups.contains(group)) {
			this.groups.add(group);
		}
	}

	/**
	 * Gets the AIM identification
	 *
	 * @return String with the AIM ID
	 */
	public String getAim() {
		return this.aim;
	}

	/**
	 * Gets the avatar of the user
	 *
	 * @return String with the avatar
	 */
	public Avatar getAvatar() {
		return this.avatar;
	}

	/**
	 * Checks if avatar is enabled
	 *
	 * @return boolean value
	 */
	public boolean isAvatarEnabled() {
		return this.avatarEnabled;
	}

	/**
	 * Checks if BB code is enabled
	 *
	 * @return boolean value
	 */
	public boolean isBbCodeEnabled() {
		return this.bbCodeEnabled;
	}

	/**
	 * Gets the format to represent dates and time
	 *
	 * @return String with the format
	 */
	public String getDateFormat() {
		return this.dateFormat;
	}

	/**
	 * Gets the user email
	 *
	 * @return String with the email
	 */
	public String getEmail() {
		return this.email;
	}

	/**
	 * Gets the user location ( where he lives )
	 *
	 * @return String with the location
	 */
	public String getFrom() {
		return this.from;
	}

	/**
	 * Gets the user gender
	 *
	 * @return String value. Possible values are <code>M</code> or <code>F</code>
	 */
	public String getGender() {
		return this.gender;
	}

	/**
	 * Checks if HTML code is enabled by default in user messages
	 *
	 * @return boolean value
	 */
	public boolean isHtmlEnabled() {
		return this.htmlEnabled;
	}

	/**
	 * Gets the user id
	 *
	 * @return int value with the id
	 */
	public int getId() {
		return this.id;
	}

	/**
	 * Gets the user interests
	 *
	 * @return String literal
	 */
	public String getinterests() {
		return this.interests;
	}

	/**
	 * Gets the user language
	 *
	 * @return String value with the language chosen
	 */
	public String getLang() {
		return this.lang;
	}

	/**
	 * Gets the last visit time the user was in the forum
	 *
	 * @return long value representing the time
	 */
	public Date getLastVisit() {
		return this.lastVisit;
	}

	/**
	 * Checks if notification of new private messages is enabled
	 *
	 * @return boolean value
	 */
	public boolean getNotifyPrivateMessages() {
		return this.notifyPrivateMessages;
	}

	/**
	 * Gets the OCC
	 *
	 * @return String
	 */
	public String getOccupation() {
		return this.occupation;
	}

	/**
	 * Gets the user password
	 *
	 * @return String with the password ( in plain/text )
	 */
	public String getPassword() {
		return this.password;
	}

	/**
	 * Checks if user permits other people to sent private messages to him
	 *
	 * @return boolean value
	 */
	public boolean isPrivateMessagesEnabled() {
		return this.privateMessagesEnabled;
	}

	/**
	 * Gets the ranking ID of the user
	 *
	 * @return int
	 */
	public Ranking getRanking() {
		return this.ranking;
	}

	/**
	 * Gets the registration date of the user
	 *
	 * @return String value with the registration date
	 */
	public Date getRegistrationDate() {
		return this.registrationDate;
	}

	/**
	 * Gets the user signature
	 *
	 * @return String literal with the signature
	 */
	public String getSignature() {
		return this.signature;
	}

	/**
	 * Checks if smilies are enabled
	 *
	 * @return boolean value
	 */
	public boolean isSmiliesEnabled() {
		return this.smiliesEnabled;
	}

	/**
	 * Gets the timezone
	 *
	 * @return String value with the timezone
	 */
	public String getTimeZone() {
		return this.timezone;
	}

	/**
	 * Gets the total number of messages posted by the user
	 *
	 * @return int value with the total of messages
	 */
	public int getTotalPosts() {
		return this.totalPosts;
	}

	/**
	 * Gets the username
	 *
	 * @return String with the username
	 */
	public String getUsername() {
		return this.username;
	}

	/**
	 * Checks if the user permits other people to see he online
	 *
	 * @return boolean value
	 */
	public boolean isViewOnlineEnabled() {
		return this.viewOnlineEnabled;
	}

	/**
	 * Gets the user website address
	 *
	 * @return String with the URL
	 */
	public String getWebsite() {
		return this.website;
	}

	/**
	 * Gets the Yahoo messenger ID
	 *
	 * @return String with the ID
	 */
	public String getYim() {
		return this.yim;
	}

	/**
	 * Is the user's email authenticated?
	 *
	 * @return integer 1 if true
	 */
	public boolean isActive() {
		return this.active;
	}

	/**
	 * Gets the Yahoo messenger ID
	 *
	 * @return String with the activation key that is created during user registration
	 */
	public String getActivationKey() {
		return this.activationKey;
	}

	/**
	 * Sets the aim.
	 *
	 * @param aim The aim ID to set
	 */
	public void setAim(String aim) {
		this.aim = aim;
	}

	/**
	 * Sets the avatar.
	 *
	 * @param avatar The avatar to set
	 */
	public void setAvatar(Avatar avatar) {
		this.avatar = avatar;
	}

	/**
	 * Indicates if the avatar is uploaded by user
	 *
	 * @return <code>true</code> if the avatar is current user upload
	 */
	public boolean isCustomizeAvatar(){
		return avatar != null && this.equals(avatar.getUploadedBy());
	}

	/**
	 * Sets avatar status
	 *
	 * @param avatarEnabled <code>true</code> or <code>false</code>
	 */
	public void setAvatarEnabled(boolean avatarEnabled) {
		this.avatarEnabled = avatarEnabled;
	}

	/**
	 * Sets the status for BB codes
	 *
	 * @param bbCodeEnabled <code>true</code> or <code>false</code>
	 */
	public void setBbCodeEnabled(boolean bbCodeEnabled) {
		this.bbCodeEnabled = bbCodeEnabled;
	}

	/**
	 * Sets the date format.
	 *
	 * @param dateFormat The date format to set
	 */
	public void setDateFormat(String dateFormat) {
		this.dateFormat = dateFormat;
	}

	/**
	 * Sets the email.
	 *
	 * @param email The email to set
	 */
	public void setEmail(String email) {
		this.email = email;
	}

	/**
	 * Sets the user location ( where he lives )
	 *
	 * @param from The location
	 */
	public void setFrom(String from) {
		this.from = from;
	}

	/**
	 * Sets the gender.
	 *
	 * @param gender The gender to set. Possible values must be <code>M</code> or <code>F</code>
	 */
	public void setGender(String gender) {
		this.gender = gender;
	}

	/**
	 * Enable or not HTML code into the messages
	 *
	 * @param htmlEnabled <code>true</code> or <code>false</code>
	 */
	public void setHtmlEnabled(boolean htmlEnabled) {
		this.htmlEnabled = htmlEnabled;
	}

	/**
	 * Sets the user id.
	 *
	 * @param id The user id to set
	 */
	public void setId(int id) {
		this.id = id;
	}

	/**
	 * Sets the interests.
	 *
	 * @param interests The interests to set
	 */
	public void setInterests(String interests) {
		this.interests = interests;
	}

	/**
	 * Sets the language.
	 *
	 * @param lang The lang to set
	 */
	public void setLang(String lang) {
		this.lang = lang;
	}

	/**
	 * Sets the last visit time
	 *
	 * @param lastVisit Last visit time, represented as a long value
	 */
	public void setLastVisit(Date lastVisit) {
		this.lastVisit = lastVisit;
	}

	/**
	 * Sets the status for notification of new private messages
	 *
	 * @param notify <code>true</code> or <code>false</code>
	 */
	public void setNotifyPrivateMessages(boolean notify) {
		this.notifyPrivateMessages = notify;
	}

	/**
	 * Sets the occ.
	 *
	 * @param occupation The occupation to set
	 */
	public void setOccupation(String occupation) {
		this.occupation = occupation;
	}

	/**
	 * Sets the password.
	 *
	 * @param password The password to set
	 */
	public void setPassword(String password) {
		this.password = password;
	}

	/**
	 * Enable or not private messages to the user
	 *
	 * @param privateMessagesEnabled <code>true</code> or <code>false</code>
	 */
	public void setPrivateMessagesEnabled(boolean privateMessagesEnabled) {
		this.privateMessagesEnabled = privateMessagesEnabled;
	}

	/**
	 * Sets the ranking id
	 *
	 * @param rankId The id of the ranking
	 */
	public void setRanking(Ranking ranking) {
		this.ranking = ranking;
	}

	/**
	 * Sets the registration date.
	 *
	 * @param registrationDate The registration date to set
	 */
	public void setRegistrationDate(Date registrationDate) {
		this.registrationDate = registrationDate;
	}

	/**
	 * Sets the signature.
	 *
	 * @param signature The signature to set
	 */
	public void setSignature(String signature) {
		this.signature = signature;
	}

	/**
	 * Enable or not smilies in messages
	 *
	 * @param smilesEnabled <code>true</code> or <code>false</code>
	 */
	public void setSmiliesEnabled(boolean smilesEnabled) {
		this.smiliesEnabled = smilesEnabled;
	}

	/**
	 * Sets the Timezone.
	 *
	 * @param timeZone The Timezone to set
	 */
	public void setTimeZone(String timeZone) {
		this.timezone = timeZone;
	}

	/**
	 * Sets the total number of posts by the user
	 *
	 * @param totalPosts int value with the total of messages posted by the user
	 */
	public void setTotalPosts(int totalPosts) {
		this.totalPosts = totalPosts;
	}

	/**
	 * Sets the username.
	 *
	 * @param username The username to set
	 */
	public void setUsername(String username) {
		this.username = username;
	}

	/**
	 * Sets the viewOnlineEnabled.
	 *
	 * @param viewOnlineEnabled The viewOnlineEnabled to set
	 */
	public void setViewOnlineEnabled(boolean viewOnlineEnabled) {
		this.viewOnlineEnabled = viewOnlineEnabled;
	}

	/**
	 * Sets the webSite.
	 *
	 * @param webSite The webSite to set
	 */
	public void setWebsite(String webSite) {
		this.website = webSite;
	}

	/**
	 * Sets the Yahoo messenger ID
	 *
	 * @param yim The yim to set
	 */
	public void setYim(String yim) {
		this.yim = yim;
	}

	/**
	 * @return
	 */
	public String getMsn() {
		return this.msn;
	}

	/**
	 * @param string
	 */
	public void setMsn(String string) {
		this.msn = string;
	}

	/**
	 * @return
	 */
	public boolean getNotifyReply() {
		return this.notifyReply;
	}

	/**
	 * @param notify
	 */
	public void setNotifyReply(boolean notify) {
		this.notifyReply = notify;
	}

	/**
	 * @return
	 */
	public boolean isViewEmailEnabled() {
		return this.viewEmailEnabled;
	}

	/**
	 * @param b
	 */
	public void setViewEmailEnabled(boolean b) {
		this.viewEmailEnabled = b;
	}

	/**
	 * @return
	 */
	public boolean getAttachSignature() {
		return this.attachSignature;
	}

	/**
	 * @param attach
	 */
	public void setAttachSignature(boolean attach) {
		this.attachSignature = attach;
	}

	/**
	 * @return Returns the privateMessagesCount.
	 */
	public int getTotalUnreadPrivateMessages() {
		this.validateUserRepository();
		return this.userRepository.getTotalUnreadPrivateMessages(this);
	}

	/**
	 * Set when user authenticates his email after user registration
	 */
	public void setActive(boolean active) {
		this.active = active;
	}

	public void setActivationKey(String activationKey) {
		this.activationKey = activationKey;
	}

	/**
	 * Gets the user's biography
	 *
	 * @return the user biography
	 */
	public String getBiography() {
		return biography;
	}

	/**
	 * Sets the user's biography
	 *
	 * @param biography the user's biography
	 */
	public void setBiography(String biography) {
		this.biography = biography;
	}

	/**
	 * @return the notifyAlways
	 */
	public boolean getNotifyAlways() {
		return this.notifyAlways;
	}

	/**
	 * @return the notifyText
	 */
	public boolean getNotifyText() {
		return this.notifyText;
	}

	/**
	 * @param notifyAlways the notifyAlways to set
	 */
	public void setNotifyAlways(boolean notifyAlways) {
		this.notifyAlways = notifyAlways;
	}

	/**
	 * @param notifyText the notifyText to set
	 */
	public void setNotifyText(boolean notifyText) {
		this.notifyText = notifyText;
	}

	public String getSecurityHash() {
		return this.securityHash;
	}

	public void setSecurityHash(String securityHash) {
		this.securityHash = securityHash;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof User)) {
			return false;
		}

		User u = (User) obj;
		return this.getId() == u.getId();
	}

	public List<Group> getGroups() {
		return groups;
	}

	/**
	 * Increment by 1 the number of posts of this user
	 */
	public void incrementTotalPosts() {
		this.totalPosts++;
	}

	/**
	 * Decrement by 1 the number of posts of this user
	 */
	public void decrementTotalPosts() {
		this.totalPosts--;
	}

	private void validateUserRepository() {
		if (this.userRepository == null) {
			throw new IllegalStateException(""UserRepository was not set"");
		}
	}
}"
net.jforum.entities.Forum,"public class Forum implements Serializable {
	@Id
	@SequenceGenerator(name = ""sequence"", sequenceName = ""jforum_forums_seq"")
	@GeneratedValue(strategy = GenerationType.AUTO, generator = ""sequence"")
	@Column(name = ""forum_id"")
	@Field(store = Store.NO, index = Index.TOKENIZED)
	private int id;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = ""category_id"")
	private Category category;

	@Column(name = ""forum_name"")
	private String name;

	@Column(name = ""forum_description"")
	private String description;

	@Column(name = ""forum_order"")
	private int displayOrder;

	@Column(name = ""forum_moderated"")
	private boolean moderated;

	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = ""forum_last_post_id"")
	private Post lastPost;

	@Column(name = ""forum_allow_anonymous_posts"")
	private boolean allowAnonymousPosts;

	@ContainedIn
	@OneToMany(mappedBy = ""forum"")
	@SuppressWarnings(""unused"")
	private List<Topic> topics;

	@Transient
	private boolean unread;

	@Transient
	private ForumRepository repository;

	public Forum() {}

	public Forum(int id) {
		this.id = id;
	}

	@Autowired
	public Forum(ForumRepository repository) {
		this.repository = repository;
	}

	public boolean isAllowAnonymousPosts() {
		return this.allowAnonymousPosts;
	}

	public void setAllowAnonymousPosts(boolean allowAnonymousPosts) {
		this.allowAnonymousPosts = allowAnonymousPosts;
	}

	/**
	 * Get the last post in this forum
	 * @return the last post of this forum
	 */
	public Post getLastPost() {
		return this.lastPost;
	}

	public void setLastPost(Post post) {
		this.lastPost = post;
	}

	/**
	 * Gets the forum's description
	 *
	 * @return String with the description
	 */
	public String getDescription() {
		return this.description;
	}

	/**
	 * Get the moderators of this forum
	 * @return the moderators
	 */
	public List<Group> getModerators() {
		if (this.isModerated()) {
			this.assertRepository();
			return this.repository.getModerators(this);
		}
		else {
			return new ArrayList<Group>();
		}
	}

	/**
	 * Gets the forum's ID
	 *
	 * @return int value representing the ID
	 */
	public int getId() {
		return this.id;
	}

	/**
	 * Gets the category which the forum belongs to
	 *
	 * @return int value representing the ID of the category
	 */
	public Category getCategory() {
		return this.category;
	}

	/**
	 * Checks if is a moderated forum
	 *
	 * @return boolean value. <code>true</code> if the forum is moderated, <code>false</code> if not.
	 */
	public boolean isModerated() {
		return this.moderated;
	}

	/**
	 * Gets the name of the forum
	 *
	 * @return String with the name
	 */
	public String getName() {
		return this.name;
	}

	/**
	 * Gets the order
	 *
	 * @return int value representing the order of the forum
	 */
	public int getDisplayOrder() {
		return this.displayOrder;
	}

	public boolean isUnread() {
		return this.unread;
	}

	/**
	 * Sets the description.
	 *
	 * @param description The description to set
	 */
	public void setDescription(String description) {
		this.description = description;
	}

	/**
	 * Sets the id.
	 *
	 * @param id The id to set
	 */
	public void setId(int id) {
		this.id = id;
	}

	/**
	 * Sets the category id
	 *
	 * @param idCategories The ID of the category to set to the forum
	 */
	public void setCategory(Category category) {
		this.category = category;
	}

	/**
	 * Sets the moderated flag to the forum
	 *
	 * @param moderated <code>true</code> or <code>false</code>
	 */
	public void setModerated(boolean moderated) {
		this.moderated = moderated;
	}

	/**
	 * Sets the name of the forum
	 *
	 * @param name The name to set
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * Sets the order.
	 *
	 * @param order The order to set
	 */
	public void setDisplayOrder(int order) {
		this.displayOrder = order;
	}

	public void setUnread(boolean status) {
		this.unread = status;
	}

	/**
	 * Get the total of posts in this forum
	 * @return the total of posts
	 */
	public int getTotalPosts() {
		this.assertRepository();
		return this.repository.getTotalPosts(this);
	}

	/**
	 * Gets the total number of topics posted in the forum
	 * @return int value with the total number of the topics
	 */
	public int getTotalTopics() {
		this.assertRepository();
		return this.repository.getTotalTopics(this);
	}

	/**
	 * @see {@link ForumRepository#getTopics(Forum, int, int)}
	 */
	public List<Topic> getTopics(int start, int count) {
		this.assertRepository();
		return this.repository.getTopics(this, start, count);
	}

	/**
	 * @see {@link ForumRepository#getTopicsPendingModeration(Forum)}
	 */
	public List<Topic> getTopicsPendingModeration() {
		if (this.isModerated()) {
			this.assertRepository();
			return this.repository.getTopicsPendingModeration(this);
		}
		else {
			return new ArrayList<Topic>();
		}
	}

	/**
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object o) {
		if (o == this) {
			return true;
		}

		if (!(o instanceof Forum)) {
			return false;
		}

		Forum f = (Forum) o;
		return f.getId() == this.getId();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		return this.getId();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return new StringBuilder(64)
			.append('[').append(this.getName())
			.append("", id="").append(this.getId())
			.append("", order="").append(this.getDisplayOrder())
			.append(']').toString();
	}

	private void assertRepository() {
		if (this.repository == null) {
			throw new IllegalStateException(""repository was not initialized"");
		}
	}
}"
net.jforum.entities.Ranking,"public class Ranking implements Serializable {
	@Id
	@SequenceGenerator(name = ""sequence"", sequenceName = ""jforum_ranks_seq"")
	@GeneratedValue(strategy = GenerationType.AUTO, generator = ""sequence"")
	@Column(name = ""rank_id"")
	private int id;

	@Column(name = ""rank_title"")
	private String title;

	@Column(name = ""rank_special"")
	private boolean special;

	@Column(name = ""rank_image"")
	private String image;

	@Column(name = ""rank_min"")
	private int min;

	/**
	 * @return int
	 */
	public int getId() {
		return this.id;
	}

	/**
	 * @return String
	 */
	public String getImage() {
		return this.image;
	}

	/**
	 * @return String
	 */
	public boolean isSpecial() {
		return this.special;
	}

	/**
	 * @return String
	 */
	public String getTitle() {
		return (this.title == null ? """" : this.title);
	}

	/**
	 * Sets the id.
	 *
	 * @param id The id to set
	 */
	public void setId(int id) {
		this.id = id;
	}

	/**
	 * Sets the image.
	 *
	 * @param image The image to set
	 */
	public void setImage(String image) {
		this.image = image;
	}

	/**
	 * Sets the special.
	 *
	 * @param special The special to set
	 */
	public void setSpecial(boolean special) {
		this.special = special;
	}

	/**
	 * Sets the title.
	 *
	 * @param title The title to set
	 */
	public void setTitle(String title) {
		this.title = title;
	}

	/**
	 * @return
	 */
	public int getMin() {
		return this.min;
	}

	/**
	 * @param i
	 */
	public void setMin(int i) {
		this.min = i;
	}

	/**
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object o) {
		if (o == this) {
			return true;
		}

		if (!(o instanceof Ranking)) {
			return false;
		}

		return ((Ranking) o).getId() == this.getId();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		return this.getId();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return this.getTitle();
	}
}"
net.jforum.entities.Banlist,"public class Banlist implements Serializable {
	@Id
	@SequenceGenerator(name = ""sequence"", sequenceName = ""jforum_banlist_seq"")
	@GeneratedValue(strategy = GenerationType.AUTO, generator = ""sequence"")
	@Column(name = ""banlist_id"")
	private int id;

	@Column(name = ""user_id"")
	private int userId;

	@Column(name = ""banlist_ip"")
	private String ip;

	@Column(name = ""banlist_email"")
	private String email;

	/**
	 * @return the id
	 */
	public int getId() {
		return this.id;
	}

	/**
	 * @return the userId
	 */
	public int getUserId() {
		return this.userId;
	}

	/**
	 * @return the ip
	 */
	public String getIp() {
		return this.ip;
	}

	/**
	 * @return the email
	 */
	public String getEmail() {
		return this.email;
	}

	/**
	 * @param id the id to set
	 */
	public void setId(int id) {
		this.id = id;
	}

	/**
	 * @param userId the userId to set
	 */
	public void setUserId(int userId) {
		this.userId = userId;
	}

	/**
	 * @param ip the ip to set
	 */
	public void setIp(String ip) {
		this.ip = ip;
	}

	/**
	 * @param email the email to set
	 */
	public void setEmail(String email) {
		this.email = email;
	}

	public boolean matches(Banlist b) {
		boolean status = false;

		if (this.matchesUserId(b) || this.matchesEmail(b)) {
			status = true;
		}
		else if (!StringUtils.isEmpty(b.getIp()) && !StringUtils.isEmpty(this.getIp())) {
			if (b.getIp().equalsIgnoreCase(this.getIp())) {
				status = true;
			}
			else {
				status = this.matchIp(b);
			}
		}

		return status;
	}

	private boolean matchesEmail(Banlist b) {
		return (!StringUtils.isEmpty(b.getEmail()) && b.getEmail().equals(this.getEmail()));
	}

	private boolean matchesUserId(Banlist b) {
		return b.getUserId() > 0 && this.getUserId() > 0 && b.getUserId() == this.getUserId();
	}

	private boolean matchIp(Banlist b) {
		boolean status = false;

		StringTokenizer userToken = new StringTokenizer(b.getIp(), ""."");
		StringTokenizer thisToken = new StringTokenizer(this.getIp(), ""."");

		if (userToken.countTokens() == thisToken.countTokens()) {
			String[] userValues = this.tokenizerAsArray(userToken);
			String[] thisValues = this.tokenizerAsArray(thisToken);

			status = this.compareIpValues(userValues, thisValues);
		}
		return status;
	}

	private boolean compareIpValues(String[] userValues, String[] thisValues) {
		boolean helperStatus = true;
		boolean onlyStars = true;

		for (int i = 0; i < thisValues.length; i++) {
			if (thisValues[i].charAt(0) != '*') {
				onlyStars = false;

				if (!thisValues[i].equals(userValues[i])) {
					helperStatus = false;
				}
			}
		}

		return helperStatus && !onlyStars;
	}

	private String[] tokenizerAsArray(StringTokenizer token) {
		String[] values = new String[token.countTokens()];

		for (int i = 0; token.hasMoreTokens(); i++) {
			values[i] = token.nextToken();
		}

		return values;
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		return this.getId();
	}

	/**
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object o) {
		if (o == this) {
			return true;
		}

		if (!(o instanceof Banlist)) {
			return false;
		}

		return ((Banlist)o).getId() == this.getId();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return new StringBuilder()
			.append(""id="").append(this.getId()).append(',')
			.append(""ip="").append(this.getIp()).append(',')
			.append(""userId="").append(this.getUserId()).append(',')
			.append(""email="").append(this.getEmail())
			.toString();
	}
}"
net.jforum.entities.ForumWatch,"public class ForumWatch implements Serializable {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private int id;

	@Column(name = ""forum_id"")
	private int forumId;

	@Column(name = ""user_id"")
	private int userId;

	public ForumWatch() {}

	public ForumWatch(int forumId, int userId) {
		this.setUserId(userId);
		this.setForumId(forumId);
	}

	/**
	 * @return the forumId
	 */
	public int getForumId() {
		return this.forumId;
	}

	/**
	 * @param forumId the forumId to set
	 */
	public void setForumId(int forumId) {
		this.forumId = forumId;
	}

	/**
	 * @return the userId
	 */
	public int getUserId() {
		return this.userId;
	}

	/**
	 * @param userId the userId to set
	 */
	public void setUserId(int userId) {
		this.userId = userId;
	}

	/**
	 * @return the id
	 */
	public int getId() {
		return this.id;
	}

	/**
	 * @param id the id to set
	 */
	public void setId(int id) {
		this.id = id;
	}

	/**
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object o) {
		if (o == this) {
			return true;
		}

		if (!(o instanceof ForumWatch)) {
			return false;
		}

		ForumWatch fw = (ForumWatch)o;
		return fw.getForumId() == this.getForumId()
			&& fw.getUserId() == this.getUserId();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		return new StringBuffer()
			.append(this.getForumId())
			.append(this.getUserId())
			.hashCode();
	}
}"
net.jforum.entities.PostReport,"public class PostReport {
	@Id
	@SequenceGenerator(name = ""sequence"", sequenceName = ""jforum_post_report_seq"")
	@GeneratedValue(strategy = GenerationType.AUTO, generator = ""sequence"")
	@Column(name = ""report_id"")
	private int id;

	@ManyToOne
	@JoinColumn(name = ""post_id"")
	private Post post;

	@Column(name = ""report_date"")
	private Date date;

	@Column(name = ""report_description"")
	private String description;

	@ManyToOne
	@JoinColumn(name = ""user_id"")
	private User user;

	@Enumerated(EnumType.STRING)
	@Column(name = ""report_status"")
	private PostReportStatus status = PostReportStatus.UNRESOLVED;

	public PostReport() {
	}

	public PostReport(int id, int postId, String postSubject, int topicId, Date reportDate, String description,
		String reporterName, int reporterId, String postUser, int postUserId, PostReportStatus status) {
		this.id = id;
		this.description = description;

		this.date = reportDate;
		this.status = status;
		this.post = new Post();
		this.post.setId(postId);
		this.post.setSubject(postSubject);
		this.post.setTopic(new Topic());
		this.post.getTopic().setId(topicId);
		this.post.setUser(new User());
		this.post.getUser().setUsername(postUser);
		this.post.getUser().setId(postUserId);

		this.user = new User();
		this.user.setUsername(reporterName);
		this.user.setId(reporterId);
	}

	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public Post getPost() {
		return this.post;
	}

	public void setPost(Post post) {
		this.post = post;
	}

	public Date getDate() {
		return this.date;
	}

	public void setDate(Date date) {
		this.date = date;
	}

	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	/**
	 * @param status the status to set
	 */
	public void setStatus(PostReportStatus status) {
		this.status = status;
	}

	/**
	 * @return the status
	 */
	public PostReportStatus getStatus() {
		return status;
	}
}"
net.jforum.entities.ModerationLog,"public class ModerationLog {
	@Id
	@SequenceGenerator(name = ""sequence"", sequenceName = ""jforum_moderation_log_seq"")
	@GeneratedValue(strategy = GenerationType.AUTO, generator = ""sequence"")
	@Column(name = ""log_id"")
	private int id;

	@Column(name = ""post_id"")
	private int postId;

	@Column(name = ""topic_id"")
	private int topicId;

	@ManyToOne
	@JoinColumn(name = ""user_id"")
	private User user;

	@ManyToOne
	@JoinColumn(name = ""post_user_id"")
	private User posterUser = new User();

	@Column(name = ""log_description"")
	private String description = """";

	@Column(name = ""log_original_message"")
	private String originalMessage;

	@Column(name = ""log_date"")
	private Date date;

	@Column(name = ""log_type"")
	private int type;

	public int getId() {
		return this.id;
	}

	public User getUser() {
		return this.user;
	}

	public String getDescription() {
		return this.description;
	}

	public String getOriginalMessage() {
		return this.originalMessage;
	}

	public Date getDate() {
		return this.date;
	}

	public int getType() {
		return this.type;
	}

	public void setId(int id) {
		this.id = id;
	}

	public void setUser(User user) {
		this.user = user;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public void setOriginalMessage(String originalMessage) {
		this.originalMessage = originalMessage;
	}

	public void setDate(Date date) {
		this.date = date;
	}

	public void setType(int type) {
		this.type = type;
	}

	public int getPostId() {
		return this.postId;
	}

	public int getTopicId() {
		return this.topicId;
	}

	public void setPostId(int postId) {
		this.postId = postId;
	}

	public void setTopicId(int topicId) {
		this.topicId = topicId;
	}

	public User getPosterUser() {
		return this.posterUser;
	}

	public void setPosterUser(User posterUser) {
		this.posterUser = posterUser;
	}
}"
net.jforum.entities.Config,"public class Config {
	@Id
	@SequenceGenerator(name = ""sequence"", sequenceName = ""jforum_config_seq"")
	@GeneratedValue(strategy = GenerationType.AUTO, generator = ""sequence"")
	@Column(name = ""config_id"")
	private int id;

	@Column(name = ""config_name"")
	private String name;

	@Column(name = ""config_value"")
	private String value;

	/**
	 * Gets the entry name
	 *
	 * @return The Entry name
	 */
	public String getName() {
		return this.name;
	}

	/**
	 * Gets the entry value
	 *
	 * @return The Entry value
	 */
	public String getValue() {
		return this.value;
	}

	public int getId() {
		return this.id;
	}

	/**
	 * Sets the entry name
	 *
	 * @param string The entry name to set
	 */
	public void setName(String string) {
		this.name = string;
	}

	/**
	 * Sets the entry value
	 *
	 * @param string The entry value to set
	 */
	public void setValue(String string) {
		this.value = string;
	}

	public void setId(int id) {
		this.id = id;
	}

	/**
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object o) {
		if (o == this) {
			return true;
		}

		if (!(o instanceof Config)) {
			return false;
		}

		Config c = (Config)o;
		return c.getId() == this.getId()
			&& c.getName().equals(this.getName())
			&& c.getValue().equals(this.getValue());
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		return this.getId();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return new StringBuilder()
			.append('[').append(this.getId()).append(',')
			.append(this.getName()).append(',')
			.append(this.getValue())
			.append(']')
			.toString();

	}
}"
net.jforum.entities.AttachmentExtension,"public class AttachmentExtension {
	@Id
	@Column(name = ""extension_id"")
	@GeneratedValue
	private int id;

	@ManyToMany
	@JoinColumn(name = ""extension_group_id"")
	private AttachmentExtensionGroup extensionGroup;

	@Column(name = ""allow"")
	private boolean allow;

	@Transient
	private boolean unknown;

	@Column(name = ""description"")
	private String description;

	@Column(name = ""extension"")
	private String extension;

	/**
	 * @return Returns the allow.
	 */
	public boolean isAllowed() {
		return this.allow;
	}

	/**
	 * @param allow The allow to set.
	 */
	public void setAllowed(boolean allow) {
		this.allow = allow;
	}

	/**
	 * @return Returns the comment.
	 */
	public String getComment() {
		return this.description;
	}

	/**
	 * @param comment The comment to set.
	 */
	public void setComment(String comment) {
		this.description = comment;
	}

	/**
	 * @return Returns the extension.
	 */
	public String getExtension() {
		return this.extension;
	}

	/**
	 * @param extension The extension to set.
	 */
	public void setExtension(String extension) {
		if (extension != null) {
			this.extension = extension.toLowerCase();
		}
	}

	/**
	 * @return Returns the extensionGroupId.
	 */
	public AttachmentExtensionGroup getExtensionGroup() {
		return this.extensionGroup;
	}

	/**
	 * @param extensionGroupId The extensionGroupId to set.
	 */
	public void setExtensionGroup(AttachmentExtensionGroup extensionGroup) {
		this.extensionGroup = extensionGroup;
	}

	/**
	 * @return Returns the id.
	 */
	public int getId() {
		return this.id;
	}

	/**
	 * @param id The id to set.
	 */
	public void setId(int id) {
		this.id = id;
	}

	/**
	 * @return Returns the unknown.
	 */
	public boolean isUnknown() {
		return this.unknown;
	}

	/**
	 * @param unknown The unknown to set.
	 */
	public void setUnknown(boolean unknown) {
		this.unknown = unknown;
	}
}"
net.jforum.entities.Attachment,"public class Attachment {
	@Id
	@Column(name = ""attach_id"")
	@SequenceGenerator(name = ""sequence"", sequenceName = ""jforum_attach_seq"")
	@GeneratedValue(strategy = GenerationType.AUTO, generator = ""sequence"")
	private int id;

	@ManyToOne
	@JoinColumn(name = ""post_id"")
	private Post post;

	@Column(name = ""download_count"")
	private int downloadCount;

	@Column(name = ""physical_filename"")
	private String physicalFilename;

	@Column(name = ""real_filename"")
	private String realFilename;

	@Column(name = ""description"")
	private String description;

	@Column(name = ""mimetype"")
	private String mimetype;

	@Column(name = ""upload_date"")
	private Date uploadDate;

	@Column(name = ""filesize"")
	private long filesize;

	@Column(name = ""thumb"")
	private boolean hasThumb;

	@Column(name = ""file_extension"")
	private String fileExtension;

	/**
	 * @return the downloadCount
	 */
	public int getDownloadCount() {
		return this.downloadCount;
	}

	/**
	 * @param downloadCount the downloadCount to set
	 */
	public void setDownloadCount(int downloadCount) {
		this.downloadCount = downloadCount;
	}

	/**
	 * @return the physicalFilename
	 */
	public String getPhysicalFilename() {
		return this.physicalFilename;
	}

	/**
	 * @param physicalFilename the physicalFilename to set
	 */
	public void setPhysicalFilename(String physicalFilename) {
		this.physicalFilename = physicalFilename;
	}

	/**
	 * @return the realFilename
	 */
	public String getRealFilename() {
		return this.realFilename;
	}

	/**
	 * @param realFilename the realFilename to set
	 */
	public void setRealFilename(String realFilename) {
		this.realFilename = realFilename;
	}

	/**
	 * @return the description
	 */
	public String getDescription() {
		return this.description;
	}

	/**
	 * @param description the description to set
	 */
	public void setDescription(String description) {
		this.description = description;
	}

	/**
	 * @return the mimetype
	 */
	public String getMimetype() {
		return this.mimetype;
	}

	/**
	 * @param mimetype the mimetype to set
	 */
	public void setMimetype(String mimetype) {
		this.mimetype = mimetype;
	}

	/**
	 * @return the uploadDate
	 */
	public Date getUploadDate() {
		return this.uploadDate;
	}

	/**
	 * @param uploadDate the uploadDate to set
	 */
	public void setUploadDate(Date uploadDate) {
		this.uploadDate = uploadDate;
	}

	/**
	 * @return the filesize
	 */
	public long getFilesize() {
		return this.filesize;
	}

	/**
	 * @param filesize the filesize to set
	 */
	public void setFilesize(long filesize) {
		this.filesize = filesize;
	}

	/**
	 * @return the hasThumb
	 */
	public boolean isHasThumb() {
		return this.hasThumb;
	}

	/**
	 * @param hasThumb the hasThumb to set
	 */
	public void setHasThumb(boolean hasThumb) {
		this.hasThumb = hasThumb;
	}

	/**
	 * @return Returns the id.
	 */
	public int getId() {
		return this.id;
	}

	/**
	 * @param id The id to set.
	 */
	public void setId(int id) {
		this.id = id;
	}

	/**
	 * @param post the post to set
	 */
	public void setPost(Post post) {
		this.post = post;
	}

	/**
	 * @return the post
	 */
	public Post getPost() {
		return post;
	}

	/**
	 * @param fileExtension the fileExtension to set
	 */
	public void setFileExtension(String fileExtension) {
		this.fileExtension = fileExtension;
	}

	/**
	 * @return the fileExtension
	 */
	public String getFileExtension() {
		return fileExtension;
	}

	public void incrementDownloadCount() {
		this.downloadCount++;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + this.id;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		Attachment other = (Attachment) obj;
		if (this.id != other.id) {
			return false;
		}
		return true;
	}
}"
net.jforum.entities.AttachmentQuota,"public class AttachmentQuota {
	@Transient
	public static final int KB = 1;

	@Transient
	public static final int MB = 2;

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;

	@Column(name = ""quota_desc"")
	private String description;

	@Column(name = ""quota_limit"")
	private int size;

	@Column(name = ""quota_type"")
	private int type;

	/**
	 * Checks if the size passed as argument is greater than the quota's limit.
	 *
	 * @param size
	 *            The size to check
	 * @return <code>true</code> if the size is greater than quota's limit.
	 */
	public boolean exceedsQuota(long size) {
		if (this.type == AttachmentQuota.KB) {
			return (size > this.size * 1024);
		}

		return (size > this.size * 1024 * 1024);
	}

	public int getSizeInBytes() {
		if (this.type == AttachmentQuota.KB) {
			return (this.size * 1024);
		}

		return (this.size * 1024 * 1024);
	}

	/**
	 * @return Returns the description.
	 */
	public String getDescription() {
		return this.description;
	}

	/**
	 * @param description
	 *            The description to set.
	 */
	public void setDescription(String description) {
		this.description = description;
	}

	/**
	 * @return Returns the id.
	 */
	public Integer getId() {
		return this.id;
	}

	/**
	 * @param id
	 *            The id to set.
	 */
	public void setId(Integer id) {
		this.id = id;
	}

	/**
	 * @return Returns the size.
	 */
	public int getSize() {
		return this.size;
	}

	/**
	 * @param size
	 *            The size to set.
	 */
	public void setSize(int size) {
		this.size = size;
	}

	/**
	 * @return Returns the type.
	 */
	public int getType() {
		return this.type;
	}

	/**
	 * @param type
	 *            The type to set.
	 */
	public void setType(int type) {
		this.type = type;
	}

	@Override
	public boolean equals(Object obj) {
		if(obj == this){
			return true;
		}

		if(!(obj instanceof AttachmentQuota)){
			return false;
		}

		AttachmentQuota other = (AttachmentQuota) obj;
		return this.id.equals(other.id);
	}

	@Override
	public int hashCode() {
		return id.hashCode();
	}
}"
net.jforum.entities.Topic,"public class Topic implements Serializable {
	public static final int TYPE_NORMAL = 0;
	public static final int TYPE_STICKY = 1;
	public static final int TYPE_ANNOUNCE = 2;
	public static final int STATUS_UNLOCKED = 0;
	public static final int STATUS_LOCKED = 1;

	@Id
	@SequenceGenerator(name = ""sequence"", sequenceName = ""jforum_topics_seq"")
	@GeneratedValue(strategy = GenerationType.AUTO, generator = ""sequence"")
	@Column(name = ""topic_id"")
	private int id;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = ""forum_id"")
	@IndexedEmbedded
	private Forum forum = new Forum();

	@Column(name = ""topic_views"")
	private int totalViews;

	@Column(name = ""topic_replies"")
	private int totalReplies;

	@Column(name = ""topic_status"")
	private int status;

	@Column(name = ""topic_type"")
	private int type;

	@Column(name = ""has_attachment"")
	private boolean hasAttachment;

	@Transient
	private boolean paginate;

	@Column(name = ""topic_subject"")
	private String subject;

	@Column(name = ""topic_date"")
	private Date date;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = ""user_id"")
	private User user;

	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = ""topic_first_post_id"")
	private Post firstPost;

	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = ""topic_last_post_id"")
	private Post lastPost;

	@OneToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinColumn(name = ""topic_vote_id"")
	private Poll poll;

	@Column(name = ""topic_vote_id"", updatable = false, insertable = false)
	private Integer pollId;

	@ContainedIn
	@OneToMany(mappedBy = ""topic"")
	private List<Post> posts = new ArrayList<Post>();

	@Column(name = ""need_moderate"")
	private boolean pendingModeration;

	@Column(name = ""topic_moved_id"")
	private int movedId;

	@Transient
	private TopicRepository repository;

	public Topic() {}

	/**
	 * sometimes,in HQL, if we just want to load the id of the topic
	 * rather all the properites, this is quit usefull
	 * @param id
	 */
	public Topic(int id) {
		this.id = id;
	}

	@Autowired
	public Topic(TopicRepository repository) {
		this.repository = repository;
	}

	public void setPendingModeration(boolean status) {
		this.pendingModeration = status;
	}

	public void setRepository(TopicRepository repository) {
		this.repository = repository;
	}

	/**
	 * @return the movedId
	 */
	public int getMovedId() {
		return this.movedId;
	}

	/**
	 * Check if this topic was moved to another forum
	 * @return true if it was moved to another forum
	 */
	public boolean getHasMoved() {
		return this.movedId > 0;
	}

	/**
	 * @param movedId the movedId to set
	 */
	public void setMovedId(int movedId) {
		this.movedId = movedId;
	}

	/**
	 * Returns the ID of the topic
	 *
	 * @return int value with the ID
	 */
	public int getId() {
		return this.id;
	}

	/**
	 * Return all posts from this topic
	 * @return all non-pending moderation posts
	 */
	public List<Post> getPosts() {
		return this.posts;
	}

	/**
	 * Get all posts from this topic
	 * @param start the first record to start fetching
	 * @param count how many records to fetch
	 * @return all non-pending moderation posts in the specified range
	 */
	public List<Post> getPosts(int start, int count) {
		this.assertRepository();
		return this.repository.getPosts(this, start, count);
	}

	/**
	 * Returns the Forum this topic belongs to
	 *
	 * @return Forum this topic belongs to
	 */
	public Forum getForum() {
		return this.forum;
	}

	/**
	 * Teturns the ID of the last post in the topic
	 *
	 * @return int value with the ID
	 */
	public Post getLastPost() {
		return this.lastPost;
	}

	/**
	 * Returns the status
	 *
	 * @return int value with the status
	 */
	public int getStatus() {
		return this.status;
	}

	/**
	 * Returns the time the topic was posted
	 *
	 * @return int value representing the time
	 */
	public Date getDate() {
		return this.date;
	}

	/**
	 * Returns the title of the topci
	 *
	 * @return String with the topic title
	 */
	public String getSubject() {
		return this.subject == null ? """" : this.subject;
	}

	/**
	 * Returns the total number of replies
	 *
	 * @return int value with the total
	 */
	public int getTotalReplies() {
		return this.totalReplies;
	}

	/**
	 * Returns the number of posts in this topic.
	 * This includes only non-pending moderation posts.
	 * In fact, the result of this method is a call to {@link #getTotalReplies()} + 1
	 * @return the number of posts
	 */
	public int getTotalPosts() {
		return this.getTotalReplies() + 1;
	}

	/**
	 * Returns the total number of views
	 *
	 * @return int value with the total number of views
	 */
	public int getTotalViews() {
		return this.totalViews;
	}

	public User getUser() {
		return this.user;
	}

	/**
	 * Returns the type
	 *
	 * @return int value representing the type
	 */
	public int getType() {
		return this.type;
	}

	/**
	 * Sets the id to the topic
	 *
	 * @param id The id to set
	 */
	public void setId(int id) {
		this.id = id;
	}

	/**
	 * Sets the Forum associeted with this topic
	 *
	 * @param Forum The Forum to set
	 */
	public void setForum(Forum forum) {
		this.forum = forum;
	}

	/**
	 * Sets the status.
	 *
	 * @param status The status to set
	 */
	public void setStatus(int status) {
		this.status = status;
	}

	/**
	 * Sets the time.
	 *
	 * @param date The time to set
	 */
	public void setDate(Date date) {
		this.date = date;
	}

	/**
	 * Sets the title.
	 *
	 * @param title The title to set
	 */
	public void setSubject(String title) {
		this.subject = title;
	}

	/**
	 * Increment by 1 the number of replies of this topic
	 */
	public void incrementTotalReplies() {
		this.totalReplies++;
	}

	/**
	 * Decrement by 1 the number of replies of this topic
	 */
	public void decrementTotalReplies() {
		this.totalReplies--;
	}

	/**
	 * Sets the type.
	 *
	 * @param type The type to set
	 */
	public void setType(int type) {
		this.type = type;
	}

	public void setUser(User u) {
		this.user = u;
	}

	public void setPaginate(boolean paginate) {
		this.paginate = paginate;
	}

	public boolean getPaginate() {
		return this.paginate;
	}

	public void setHasAttachment(boolean b) {
		this.hasAttachment = b;
	}

	public boolean getHasAttachment() {
		return this.hasAttachment;
	}

	/**
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object o) {
		if (o == this) {
			return true;
		}

		if (!(o instanceof Topic)) {
			return false;
		}

		return ((Topic) o).getId() == this.id;
	}

	/**
	 * @return true if {@link #getType()} == {@link #TYPE_NORMAL}
	 */
	public boolean isNormal() {
		return this.getType() == TYPE_NORMAL;
	}

	/**
	 * @return true if {@link #getType()} == {@link #TYPE_STICKY}
	 */
	public boolean isSticky() {
		return this.getType() == TYPE_STICKY;
	}

	/**
	 * @return true if {@link #getType()} == {@link #TYPE_ANNOUNCE}
	 */
	public boolean isAnnounce() {
		return this.getType() == TYPE_ANNOUNCE;
	}

	/**
	 * @return true if {@link #getStatus()} == {@link #STATUS_LOCKED}
	 */
	public boolean isLocked() {
		return this.getStatus() == STATUS_LOCKED;
	}

	/**
	 * Unlock this topic, if locked.
	 */
	public void unlock() {
		this.status = STATUS_UNLOCKED;
	}

	/**
	 * Lock this topic
	 */
	public void lock() {
		this.status = STATUS_LOCKED;
	}

	/**
	 * Get the first post in this topic
	 * @return the first post
	 */
	public Post getFirstPost() {
		return this.firstPost;
	}

	public void setFirstPost(Post firstPost) {
		this.firstPost = firstPost;
	}

	public void setLastPost(Post lastPost) {
		this.lastPost = lastPost;
	}

	/**
	 * Increment by 1 the number of views of this topic
	 */
	public void incrementViews() {
		this.totalViews++;
	}

	/**
	 * Check is this topic is waiting for moderation
	 * @return true if moderation is needed
	 */
	public boolean isWaitingModeration() {
		return this.pendingModeration;
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		return this.id;
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return new StringBuilder(64)
			.append('[')
			.append(this.id)
			.append("", "").append(this.subject)
			.append(']')
			.toString();
	}

	private void assertRepository() {
		if (this.repository == null) {
			throw new IllegalStateException(""repository was not initialized"");
		}
	}

	/**
	 * @param poll the poll to set
	 */
	public void setPoll(Poll poll) {
		this.poll = poll;

		if (poll != null) {
			this.pollId = poll.getId();
		}
	}

	/**
	 * @return the poll
	 */
	public Poll getPoll() {
		return poll;
	}

	public boolean isPollEnabled() {
		return this.pollId != null && this.pollId > 0;
	}
}"
net.jforum.entities.PollOption,"public class PollOption implements Serializable {
	@Id
	@SequenceGenerator(name = ""sequence"", sequenceName = ""jforum_vote_results_seq"")
	@GeneratedValue(strategy = GenerationType.AUTO, generator = ""sequence"")
	@Column(name = ""vote_option_id"")
	private int id;

	@Column(name = ""vote_option_text"")
	private String text;

	@Column(name = ""vote_result"")
	private int voteCount;

	@ManyToOne
	@JoinColumn(name = ""vote_id"")
	private Poll poll;

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getText() {
		return text;
	}

	public void setText(String text) {
		this.text = text;
	}

	public int getVoteCount() {
		return voteCount;
	}

	public void setVoteCount(int voteCount) {
		this.voteCount = voteCount;
	}

	public int getVotePercentage() {
		int percent = 0;

		if (this.poll != null) {
			int totalCount = this.poll.getTotalVotes();
			percent = Math.round(100f * this.voteCount / totalCount);
		}

		return percent;
	}

	public Poll getPoll() {
		return poll;
	}

	public void setPoll(Poll poll) {
		this.poll = poll;
	}

	public void incrementVotes() {
		this.voteCount++;
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return new StringBuilder(128).append('[').append(this.id).append("", "")
			.append(this.text).append("", "").append(this.voteCount).append(']')
			.toString();
	}

	/**
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object o) {
		if (!(o instanceof PollOption)) {
			return false;
		}

		PollOption po = (PollOption) o;
		return po.getId() == this.id
			&& po.getText().equals(this.text)
			&& po.getVoteCount() == this.voteCount;
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		int result = 17;

		result *= 37 + this.id;
		result *= 37 + this.text.hashCode();
		result *= 37 + this.voteCount;

		return result;
	}
}"
net.jforum.entities.Role,"public class Role {
	@Id
	@SequenceGenerator(name = ""sequence"", sequenceName = ""jforum_roles_seq"")
	@GeneratedValue(strategy = GenerationType.AUTO, generator = ""sequence"")
	@Column(name = ""role_id"")
	private int id;

	@Column(name = ""name"")
	private String name;

	@ManyToOne
	@JoinColumn(name = ""group_id"")
	private Group group;

	@CollectionOfElements(fetch = FetchType.EAGER)
	@JoinTable(name = ""jforum_role_values"", joinColumns = @JoinColumn(name = ""role_id""))
	@Column(name = ""role_value"")
	@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
	@Fetch(FetchMode.SUBSELECT)
	private List<Integer> roleValues = new ArrayList<Integer>();

	public Role() { }

	public Role(Role role) {
		this.id = role.id;
		this.name = role.name;
		this.group = role.group;
		this.roleValues = new ArrayList<Integer>(role.roleValues);
	}

	/**
	 * @return the id
	 */
	public int getId() {
		return id;
	}

	/**
	 * @param id the id to set
	 */
	public void setId(int id) {
		this.id = id;
	}

	/**
	 * @return the name
	 */
	public String getName() {
		return name;
	}

	/**
	 * @param name the name to set
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * @return the group
	 */
	public Group getGroup() {
		return group;
	}

	/**
	 * @param group the group to set
	 */
	public void setGroup(Group group) {
		this.group = group;
	}

	/**
	 * @return the values
	 */
	public List<Integer> getRoleValues() {
		return roleValues;
	}

	/**
	 * Add a new role value to this role
	 * @param value
	 */
	public void addRoleValue(int value) {
		this.roleValues.add(value);
	}

	/**
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object o) {
		if (o == this) {
			return true;
		}

		if (!(o instanceof Role)) {
			return false;
		}

		return ((Role)o).getId() == this.getId();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		return this.getId();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return String.format(""%d => %s (%s)"", this.getId(), this.getName(), this.roleValues);
	}
}"
net.jforum.entities.AttachmentExtensionGroup,"public class AttachmentExtensionGroup
{
	public static final int DOWNLOAD_INLINE = 1;
	public static final int DOWNLOAD_PHYSICAL = 2;

	private int id;
	private String name;
	private boolean allow;
	private String uploadIcon;
	private int downloadMode;

	/**
	 * @return Returns the downloadMode.
	 */
	public int getDownloadMode()
	{
		return this.downloadMode;
	}

	/**
	 * @param downloadMode The downloadMode to set.
	 */
	public void setDownloadMode(int downloadMode)
	{
		this.downloadMode = downloadMode;
	}

	/**
	 * @return Returns the allow.
	 */
	public boolean isAllow()
	{
		return this.allow;
	}

	/**
	 * @param allow The allow to set.
	 */
	public void setAllow(boolean allow)
	{
		this.allow = allow;
	}

	/**
	 * @return Returns the id.
	 */
	public int getId()
	{
		return this.id;
	}

	/**
	 * @param id The id to set.
	 */
	public void setId(int id)
	{
		this.id = id;
	}

	/**
	 * @return Returns the name.
	 */
	public String getName()
	{
		return this.name;
	}

	/**
	 * @param name The name to set.
	 */
	public void setName(String name)
	{
		this.name = name;
	}

	/**
	 * @return Returns the uploadIcon.
	 */
	public String getUploadIcon()
	{
		return this.uploadIcon;
	}

	/**
	 * @param uploadIcon The uploadIcon to set.
	 */
	public void setUploadIcon(String uploadIcon)
	{
		this.uploadIcon = uploadIcon;
	}
}"
net.jforum.entities.Theme,"public class Theme {
	@Id
	@SequenceGenerator(name = ""sequence"", sequenceName = ""jforum_themes_seq"")
	@GeneratedValue(strategy = GenerationType.AUTO, generator = ""sequence"")
	@Column(name = ""theme_id"")
	private int id;

	@Column(name = ""style_name"")
	private String styleName;

	@Column(name = ""template_name"")
	private String templateName;

	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getStyleName() {
		return this.styleName;
	}

	public void setStyleName(String styleName) {
		this.styleName = styleName;
	}

	public String getTemplateName() {
		return this.templateName;
	}

	public void setTemplateName(String templateName) {
		this.templateName = templateName;
	}
}"
net.jforum.entities.Session,"public class Session {
	@Id
	@Column(name = ""user_id"")
	private int userId;

	@Column(name = ""session_start"")
	private Date start;

	@Column(name = ""session_last_accessed"")
	private Date lastAccessed;

	@Column(name = ""session_last_visit"")
	private Date lastVisit;

	@Column(name = ""session_ip"")
	private String ip;


	/**
	 * @return the lastVisit
	 */
	public Date getLastVisit() {
		return this.lastVisit;
	}

	/**
	 * @param lastVisit the lastVisit to set
	 */
	public void setLastVisit(Date lastVisit) {
		this.lastVisit = lastVisit;
	}

	/**
	 * @return the userId
	 */
	public int getUserId() {
		return this.userId;
	}

	/**
	 * @param userId the userId to set
	 */
	public void setUserId(int userId) {
		this.userId = userId;
	}

	/**
	 * @return the sessionStart
	 */
	public Date getStart() {
		return this.start;
	}

	/**
	 * @param Start the sessionStart to set
	 */
	public void setStart(Date start) {
		this.start = start;
	}

	/**
	 * @return the sessionTime
	 */
	public Date getLastAccessed() {
		return this.lastAccessed;
	}

	/**
	 * @param sessionTime the sessionTime to set
	 */
	public void setLastAccessed(Date date) {
		this.lastAccessed = date;
	}

	/**
	 * @return the sessionIp
	 */
	public String getIp() {
		return this.ip;
	}

	/**
	 * @param ip the ip to set
	 */
	public void setIp(String ip) {
		this.ip = ip;
	}
}"
net.jforum.entities.Smilie,"public class Smilie implements Serializable {
	@Id
	@SequenceGenerator(name = ""sequence"", sequenceName = ""jforum_smilies_seq"")
	@GeneratedValue(strategy = GenerationType.AUTO, generator = ""sequence"")
	@Column(name = ""smilie_id"")
	private int id;

	@Column(name = ""code"")
	private String code;

	@Column(name = ""disk_name"")
	private String diskName;

	/**
	 * @return
	 */
	public String getCode() {
		return this.code;
	}

	/**
	 * @param code
	 */
	public void setCode(String code) {
		this.code = code;
	}

	/**
	 * @param diskName
	 */
	public void setDiskName(String diskName) {
		this.diskName = diskName;
	}

	/**
	 * @return
	 */
	public int getId() {
		return this.id;
	}

	/**
	 * @param id
	 */
	public void setId(int id) {
		this.id = id;
	}

	/**
	 * @return
	 */
	public String getDiskName() {
		return this.diskName;
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		return this.getId();
	}

	/**
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object o) {
		if (o == this) {
			return true;
		}

		if (!(o instanceof Smilie)) {
			return false;
		}

		return ((Smilie)o).getId() == this.getId();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return ""[smilie="" + this.getCode() + "", id="" + this.getId() + ""]"";
	}
}"
net.jforum.entities.TopicWatch,"public class TopicWatch implements Serializable {
	@Id
	@SequenceGenerator(name = ""sequence"", sequenceName = ""jforum_topics_watch_seq"")
	@GeneratedValue(strategy = GenerationType.AUTO, generator = ""sequence"")
	@Column(name = ""topics_watch_id"")
	private int id;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = ""topic_id"")
	private Topic topic;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = ""user_id"")
	private User user;

	@Column(name = ""is_read"")
	private boolean read;

	/**
	 * @return the id
	 */
	public int getId() {
		return this.id;
	}

	/**
	 * @param id the id to set
	 */
	public void setId(int id) {
		this.id = id;
	}

	/**
	 * @return the topicId
	 */
	public Topic getTopic() {
		return this.topic;
	}

	/**
	 * @param topicId the topicId to set
	 */
	public void setTopic(Topic topic) {
		this.topic = topic;
	}

	/**
	 * @return the userId
	 */
	public User getUser() {
		return this.user;
	}

	/**
	 * @param userId the userId to set
	 */
	public void setUser(User user) {
		this.user = user;
	}

	/**
	 * @return the read
	 */
	public boolean isRead() {
		return this.read;
	}

	/**
	 * Mark this instance as read
	 */
	public void markAsRead() {
		this.read = true;
	}

	/**
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object o) {
		if (o == this) {
			return true;
		}

		if (!(o instanceof TopicWatch)) {
			return false;
		}

		return ((TopicWatch)o).getId() == this.getId();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		return this.getId();
	}
}"
net.jforum.entities.PrivateMessage,"public class PrivateMessage implements Serializable {
	@Id
	@SequenceGenerator(name = ""sequence"", sequenceName = ""jforum_privmsgs_seq"")
	@GeneratedValue(strategy = GenerationType.AUTO, generator = ""sequence"")
	@Column(name = ""privmsgs_id"")
	private int id;

	@Column(name = ""privmsgs_type"")
	private int type;

	@ManyToOne
	@JoinColumn(name = ""privmsgs_from_userid"")
	private User fromUser;

	@ManyToOne
	@JoinColumn(name = ""privmsgs_to_userid"")
	private User toUser;

	@Column(name = ""privmsgs_date"")
	private Date date;

	@Column(name = ""privmsgs_text"")
	private String text;

	@Column(name = ""privmsgs_subject"")
	private String subject;

	@Column(name = ""privmsgs_enable_bbcode"")
	private boolean bbCodeEnabled = true;

	@Column(name = ""privmsgs_enable_html"")
	private boolean htmlEnabled = true;

	@Column(name = ""privmsgs_enable_smilies"")
	private boolean smiliesEnabled = true;

	@Column(name = ""privmsgs_attach_sig"")
	private boolean signatureEnabled = true;

	@Column(name = ""privmsgs_ip"")
	private String ip;

	public PrivateMessage() { }

	/**
	 * Copy constructor
	 *
	 * @param pm the object to copy from
	 */
	public PrivateMessage(PrivateMessage pm) {
		this.setId(pm.getId());
		this.setType(pm.getType());
		this.setText(pm.getText());
		this.setSubject(pm.getSubject());
		this.setFromUser(pm.getFromUser());
		this.setToUser(pm.getToUser());
		this.setDate(pm.getDate());
	}

	/**
	 * @return Returns the fromUser.
	 */
	public User getFromUser() {
		return fromUser;
	}

	/**
	 * @param fromUser The fromUser to set.
	 */
	public void setFromUser(User fromUser) {
		this.fromUser = fromUser;
	}

	/**
	 * @return Returns the toUser.
	 */
	public User getToUser() {
		return toUser;
	}

	/**
	 * @param toUser The toUser to set.
	 */
	public void setToUser(User toUser) {
		this.toUser = toUser;
	}

	/**
	 * @return Returns the type.
	 */
	public int getType() {
		return type;
	}

	/**
	 * @param type The type to set.
	 */
	public void setType(int type) {
		this.type = type;
	}

	/**
	 * @return Returns the id.
	 */
	public int getId() {
		return id;
	}

	/**
	 * @param id The id to set.
	 */
	public void setId(int id) {
		this.id = id;
	}

	/**
	 * @return the time
	 */
	public Date getDate() {
		return this.date;
	}

	/**
	 * @param date the time to set
	 */
	public void setDate(Date date) {
		this.date = date;
	}

	/**
	 * @return the text
	 */
	public String getText() {
		return this.text;
	}

	/**
	 * @param text the text to set
	 */
	public void setText(String text) {
		this.text = text;
	}

	/**
	 * @return the subject
	 */
	public String getSubject() {
		return this.subject;
	}

	/**
	 * @param subject the subject to set
	 */
	public void setSubject(String subject) {
		this.subject = subject;
	}

	/**
	 * @return the bbCodeEnabled
	 */
	public boolean isBbCodeEnabled() {
		return this.bbCodeEnabled;
	}

	/**
	 * @param bbCodeEnabled the bbCodeEnabled to set
	 */
	public void setBbCodeEnabled(boolean bbCodeEnabled) {
		this.bbCodeEnabled = bbCodeEnabled;
	}

	/**
	 * @return the htmlEnabled
	 */
	public boolean isHtmlEnabled() {
		return this.htmlEnabled;
	}

	/**
	 * @param htmlEnabled the htmlEnabled to set
	 */
	public void setHtmlEnabled(boolean htmlEnabled) {
		this.htmlEnabled = htmlEnabled;
	}

	/**
	 * @return the smiliesEnabled
	 */
	public boolean isSmiliesEnabled() {
		return this.smiliesEnabled;
	}

	/**
	 * @param smiliesEnabled the smiliesEnabled to set
	 */
	public void setSmiliesEnabled(boolean smiliesEnabled) {
		this.smiliesEnabled = smiliesEnabled;
	}

	/**
	 * @return the signatureEnabled
	 */
	public boolean isSignatureEnabled() {
		return this.signatureEnabled;
	}

	/**
	 * @param signatureEnabled the signatureEnabled to set
	 */
	public void setSignatureEnabled(boolean signatureEnabled) {
		this.signatureEnabled = signatureEnabled;
	}

	public boolean isNew() {
		return this.type == PrivateMessageType.NEW;
	}

	/**
	 * Flag this message as read
	 */
	public void markAsRead() {
		this.type = PrivateMessageType.READ;
	}

	/**
	 * Transorm this instance in a post
	 * Used only for displaying the formatted message
	 * @return the post
	 */
	public Post asPost() {
		Post post = new Post();

		post.setSubject(this.subject);
		post.setText(this.text);
		post.setBbCodeEnabled(this.isBbCodeEnabled());
		post.setHtmlEnabled(this.isHtmlEnabled());
		post.setSmiliesEnabled(this.isSmiliesEnabled());
		post.setSignatureEnabled(this.isSignatureEnabled());

		return post;
	}

	/**
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object o) {
		if (o == this) {
			return true;
		}

		if (!(o instanceof PrivateMessage)) {
			return false;
		}

		return ((PrivateMessage) o).getId() == this.getId();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		return this.getId();
	}

	/**
	 * @param ip the ip to set
	 */
	public void setIp(String ip) {
		this.ip = ip;
	}

	/**
	 * @return the ip
	 */
	public String getIp() {
		return ip;
	}
}"
net.jforum.entities.ForumStats,"public class ForumStats {
	private int users;
	private int posts;
	private int topics;
	private double postsPerDay;
	private double topicsPerDay;
	private double usersPerDay;

	/**
	 * @return Returns the posts.
	 */
	public int getPosts() {
		return this.posts;
	}

	/**
	 * @param posts The posts to set.
	 */
	public void setPosts(int posts) {
		this.posts = posts;
	}

	/**
	 * @return Returns the postsPerDay.
	 */
	public double getPostsPerDay() {
		return this.postsPerDay;
	}

	/**
	 * @param postsPerDay The postsPerDay to set.
	 */
	public void setPostsPerDay(double postsPerDay) {
		this.postsPerDay = postsPerDay;
	}

	/**
	 * @return Returns the topics.
	 */
	public int getTopics() {
		return this.topics;
	}

	/**
	 * @param topics The topics to set.
	 */
	public void setTotalTopics(int topics) {
		this.topics = topics;
	}

	/**
	 * @return Returns the topicsPerDay.
	 */
	public double getTopicsPerDay() {
		return this.topicsPerDay;
	}

	/**
	 * @param topicsPerDay The topicsPerDay to set.
	 */
	public void setTopicsPerDay(double topicsPerDay) {
		this.topicsPerDay = topicsPerDay;
	}

	/**
	 * @return Returns the users.
	 */
	public int getUsers() {
		return this.users;
	}

	/**
	 * @param users The users to set.
	 */
	public void setTotalUsers(int users) {
		this.users = users;
	}

	/**
	 * @return Returns the usersPerDay.
	 */
	public double getUsersPerDay() {
		return this.usersPerDay;
	}

	/**
	 * @param usersPerDay The usersPerDay to set.
	 */
	public void setUsersPerDay(double usersPerDay) {
		this.usersPerDay = usersPerDay;
	}
}"
net.jforum.entities.PrivateMessageType,"public class PrivateMessageType {
	public static final int READ = 0;
	public static final int NEW = 1;
	public static final int SENT = 2;
	public static final int SAVED_IN = 3;
	public static final int SAVED_OUT = 4;
	public static final int UNREAD = 5;

	private PrivateMessageType() { }
}"
net.jforum.entities.util.PaginatedResult,"public class PaginatedResult<T> {
	protected List<T> results = new ArrayList<T>();
	protected int totalRecords;

	public PaginatedResult(List<T> results, int totalRecords) {
		this.results = results;
		this.totalRecords = totalRecords;
	}

	/**
	 * @return the results
	 */
	public List<T> getResults() {
		return this.results;
	}

	/**
	 * @return the totalRecords
	 */
	public int getTotalRecords() {
		return this.totalRecords;
	}
}"
net.jforum.entities.util.Pagination,"public class Pagination {
	private int totalPages;
	private int recordsPerPage;
	private long totalRecords;
	private int thisPage;
	private int id;
	private int start;
	private String baseUrl;
	private JForumConfig config;

	public Pagination() {}

	public Pagination(JForumConfig config, int page) {
		this.config = config;
		this.start = page;
	}

	/**
	 * @param totalRecords the total number of records
	 * @param recordsPerPage how many records show per page
	 * @param start the number of the first record to start showing
	 */
	public Pagination(long totalRecords, int recordsPerPage, int page, String baseUrl, int id) {
		this.recordsPerPage = recordsPerPage;
		this.totalRecords = totalRecords;
		this.totalPages = this.calculeTotalPages();
		this.start = this.calculeStart(page, this.recordsPerPage);
		this.thisPage = this.calculeThisPage(page);
		this.baseUrl = baseUrl;
		this.id = id;
	}

	/**
	 * Create pagination for user listing
	 * @param totalUsers the total of users
	 * @return the pagination instance
	 */
	public Pagination forUsers(int totalUsers) {
		this.recordsPerPage = this.config.getInt(ConfigKeys.USERS_PER_PAGE);
		this.totalRecords = totalUsers;
		this.totalPages = this.calculeTotalPages();
		this.thisPage = this.calculeThisPage(this.start);
		this.start = this.calculeStart(this.start, this.recordsPerPage);
		this.baseUrl = String.format(""/%s/%s"", Domain.USERS_ADMIN, Actions.LIST);
		this.id = 0;

		return this;
	}

	/**
	 * Create pagination for user listing
	 * @param totalUsers the total of users
	 * @return the pagination instance
	 */
	public Pagination forModerationLog(int totalRecords) {
		this.recordsPerPage = this.config.getInt(ConfigKeys.TOPICS_PER_PAGE);
		this.totalRecords = totalRecords;
		this.totalPages = this.calculeTotalPages();
		this.thisPage = this.calculeThisPage(this.start);
		this.start = this.calculeStart(this.start, this.recordsPerPage);
		this.baseUrl = String.format(""/%s/%s"", Domain.MODERATION, Actions.SHOW_ACTIVITY_LOG);
		this.id = 0;

		return this;
	}

	/**
	 * Create pagination for search
	 * @param totalRecords the total of records
	 * @return the proper pagination instance
	 */
	public Pagination forSearch(int totalRecords) {
		this.recordsPerPage = this.config.getInt(ConfigKeys.TOPICS_PER_PAGE);
		this.totalRecords = totalRecords;
		this.totalPages = this.calculeTotalPages();
		this.thisPage = this.calculeThisPage(this.start);
		this.start = this.calculeStart(this.start, this.recordsPerPage);
		this.baseUrl = String.format(""/%s/%s"", Domain.SEARCH, Actions.EXECUTE);
		this.id = 0;

		return this;
	}

	/**
	 * Create pagination for post reports
	 * @param totalRecords the total of records
	 * @return
	 */
	public Pagination forPostReports(int totalRecords) {
		this.recordsPerPage = this.config.getInt(ConfigKeys.TOPICS_PER_PAGE);
		this.totalRecords = totalRecords;
		this.totalPages = this.calculeTotalPages();
		this.thisPage = this.calculeThisPage(this.start);
		this.start = this.calculeStart(this.start, this.recordsPerPage);
		this.baseUrl = String.format(""/%s/%s"", Domain.POST_REPORT, Actions.LIST_RESOLVED);
		this.id = 0;

		return this;
	}

	/**
	 * Create pagination for new messages
	 * @param totalRecords the total of records
	 * @return the proper pagination instance
	 */
	public Pagination forNewMessages(int totalRecords) {
		this.recordsPerPage = this.config.getInt(ConfigKeys.TOPICS_PER_PAGE);
		this.totalRecords = totalRecords;
		this.totalPages = this.calculeTotalPages();
		this.thisPage = this.calculeThisPage(this.start);
		this.start = this.calculeStart(this.start, this.recordsPerPage);
		this.baseUrl = String.format(""/%s/%s"", Domain.FORUMS, Actions.NEW_MESSAGES);
		this.id = 0;

		return this;
	}

	/**
	 * Create pagination for a forum
	 * @param forum the forum
	 * @return the proper pagination instance
	 */
	public Pagination forForum(Forum forum) {
		this.recordsPerPage = this.config.getInt(ConfigKeys.TOPICS_PER_PAGE);
		this.totalRecords = forum.getTotalTopics();
		this.totalPages = this.calculeTotalPages();
		this.thisPage = this.calculeThisPage(this.start);
		this.start = this.calculeStart(this.start, this.recordsPerPage);
		this.baseUrl = String.format(""/%s/%s"", Domain.FORUMS, Actions.SHOW);
		this.id = forum.getId();

		return this;
	}

	/**
	 * Create pagination for a topic
	 * @param topic the topic
	 * @return the proper pagination instance
	 */
	public Pagination forTopic(Topic topic) {
		this.recordsPerPage = this.config.getInt(ConfigKeys.POSTS_PER_PAGE);
		this.totalRecords = topic.getTotalPosts();
		this.totalPages = this.calculeTotalPages();
		this.thisPage = this.calculeThisPage(this.start);
		this.start = this.calculeStart(this.start, this.recordsPerPage);
		this.baseUrl = String.format(""/%s/%s"", Domain.TOPICS, Actions.LIST);
		this.id = topic.getId();

		return this;
	}

	/**
	 * @param user the user from which the posts will be selected
	 * @return
	 */
	public Pagination forUserPosts(User user) {
		this.recordsPerPage = this.config.getInt(ConfigKeys.POSTS_PER_PAGE);
		this.totalRecords = user.getTotalPosts();
		this.totalPages = this.calculeTotalPages();
		this.thisPage = this.calculeThisPage(this.start);
		this.start = this.calculeStart(this.start, this.recordsPerPage);
		this.baseUrl = String.format(""/%s/%s"", Domain.USER, Actions.POSTS);
		this.id = user.getId();

		return this;
	}

	/**
	 * @param user the user from which the topics will be selected
	 * @return
	 */
	public Pagination forUserTopics(User user, int totalTopics) {
		this.recordsPerPage = this.config.getInt(ConfigKeys.TOPICS_PER_PAGE);
		this.totalRecords = totalTopics;
		this.totalPages = this.calculeTotalPages();
		this.thisPage = this.calculeThisPage(this.start);
		this.start = this.calculeStart(this.start, this.recordsPerPage);
		this.baseUrl = String.format(""/%s/%s"", Domain.USER, Actions.TOPICS);
		this.id = user.getId();

		return this;
	}

	public int getStart() {
		return this.start;
	}

	public int getId() {
		return this.id;
	}

	/**
	 * @return the base url to use in the pagination links
	 */
	public String getBaseUrl() {
		return this.baseUrl;
	}

	/**
	 * @return how many pages there are
	 */
	public int getTotalPages() {
		return totalPages;
	}

	/**
	 * @return how many records show per page
	 */
	public int getRecordsPerPage() {
		return recordsPerPage;
	}

	/**
	 * @return the total number of records
	 */
	public long getTotalRecords() {
		return totalRecords;
	}

	/**
	 * @return the number of the current page being viewed
	 */
	public int getThisPage() {
		return thisPage;
	}

	/**
	 * Just check for the reference or instanceof.
	 * This is a wrong implementation of equals(), and it only
	 * exists because it's needed in the test cases
	 */
	@Override
	public boolean equals(Object o) {
		return o == this || o instanceof Pagination;
	}

	public int calculeThisPage(int page) {
		return Math.min(this.totalPages, Math.max(1, page));
	}

	public int calculeStartFromCount(int count, int recordsPerPage) {
		return count / recordsPerPage + (count % recordsPerPage > 0 ? 1 : 0);
	}
	public int calculeStart(int page, int recordsPerPage) {
		return page <= 1 ? 0 : (page - 1) * recordsPerPage;
	}

	private int calculeTotalPages() {
		return (int)Math.ceil((double)this.totalRecords / (double)this.recordsPerPage);
	}
}"
net.jforum.entities.util.SearchParams,"public class SearchParams {
	private final String regex = ""(^| (?!\\w.*[\'\""]))"";

	private String query, user;
	private Forum forum = new Forum();
	private SearchMatchType matchType = SearchMatchType.AND;
	private SearchSort sort = SearchSort.DATE;
	private SearchSortType sortType = SearchSortType.DESC;
	private int maxResults;
	private int start;

	/**
	 * Set the forum to filter
	 * @param forum
	 */
	public void setForum(Forum forum) {
		this.forum = forum;
	}

	/**
	 * Set the sort type
	 * @param sortType
	 */
	public void setSortType(SearchSortType sortType) {
		this.sortType = sortType;
	}

	/**
	 * Set the sort
	 * @param sort
	 */
	public void setSort(SearchSort sort) {
		this.sort = sort;
	}

	/**
	 * Set the result match type
	 * @param matchType
	 */
	public void setMatchType(SearchMatchType matchType) {
		this.matchType = matchType;
	}

	/**
	 * Set the query itself
	 * @param query
	 */
	public void setQuery(String query) {
		this.query = query;
	}

	/**
	 * Set the max number of results to fetch on each iteration
	 * @param max
	 */
	public void setMaxResults(int max) {
		this.maxResults = max;
	}

	/**
	 * Set the first record to retrieve
	 * @param start
	 */
	public void setStart(int start) {
		this.start = start;
	}

	/**
	 * Return the match type
	 * @return
	 */
	public SearchMatchType getMatchType() {
		return this.matchType;
	}

	public String getQuery() {
		return this.query;
	}

	/**
	 * Return the sort type
	 * @return
	 */
	public SearchSortType getSortType() {
		return this.sortType;
	}

	/**
	 * Return the sort
	 * @return
	 */
	public SearchSort getSort() {
		return this.sort;
	}

	/**
	 * Get the number of results to show on each page
	 * @return
	 */
	public int getMaxResults() {
		return this.maxResults;
	}

	/**
	 * Return the forum to filter
	 * @return
	 */
	public Forum getForum() {
		return this.forum;
	}

	/**
	 * @return
	 */
	public int getStart() {
		return this.start;
	}

	/**
	 * @return the username, firstName, lastName or email to filter
	 */
	public String getUser() {
		return user;
	}

	/**
	 * @param user the username, firstName, lastName or email to filter
	 */
	public void setUser(String user) {
		this.user = user;
	}

	/**
	 * Builds the query itself.
	 *
	 *<p>
	 * This is complicated, so I will explain with examples. It is presumed that
	 * you know how the Lucene query engine works. The default search field is
	 * Post.text
	 * </p>
	 *
	 *<p>
	 * query ('and' option off): how to parse a date result: (how to parse a
	 * date) OR (subject:how subject:to subject:parse subject:a subject:date)
	 * </p>
	 *
	 *<p>
	 * query ('and' option on): how to parse a date result: (+how +to +parse +a
	 * +date) OR (+subject:how +subject:to +subject:parse +subject:a
	 * +subject:date)
	 * </p>
	 *
	 * @return the query text
	 */
	public String buildQuery() {
		String userQuery = StringUtils.isNotEmpty(user) ? MessageFormat.format(""+(user.username:{0} user.firstName:{0} user.lastName:{0} user.email:{0})"", user) : """";

		String text = """";
		if (StringUtils.isNotEmpty(query)) {
			text = this.matchType == SearchMatchType.AND
				? this.query.replaceAll(this.regex, "" +"")
				: this.query;
		}

		String subject = """";
		if (StringUtils.isNotEmpty(query)) {
			subject = this.query.replaceAll(this.regex,
					(this.matchType == SearchMatchType.AND ? "" +subject:"" : "" subject:""));
		}

		String forumQuery = """";
		if (this.forum != null && this.forum.getId() > 0) {
			forumQuery = ""and +topic.forum.id:"" + this.forum.getId();
		}

		return String.format(""(%s %s %s) or (%s %s %s)"", text.trim(), userQuery, forumQuery, subject.trim(), userQuery, forumQuery).trim();
	}
}"
net.jforum.entities.util.SearchResult,"public class SearchResult extends PaginatedResult<Post> {
	public SearchResult(List<Post> results, int totalRecords) {
		super(results, totalRecords);
	}

	/**
	 * Apply security filters on the results
	 * FIXME the best approach would probably be to filter the documents directly in Lucene
	 * when they are being retrieved. Filtering here *may* mess up some records
	 * @param roleManager the set of roles to be used as filters
	 * @return the filtered data
	 */
	@SuppressWarnings(""unchecked"")
	public SearchResult filter(RoleManager roleManager) {
		for (Iterator<Post> iter = this.getResults().iterator(); iter.hasNext(); ) {
			Post post = iter.next();

			if (!roleManager.isForumAllowed(post.getForum().getId())) {
				iter.remove();
				this.totalRecords--;
			}
		}

		return this;
	}
}"
