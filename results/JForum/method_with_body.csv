net.jforum.core.SessionManagerTestCase.setup,SessionManagerTestCase.java,"void setup() {
		goodCookie = new Cookie[] {
			new Cookie(""cookieNameData"", ""2""),
			new Cookie(""cookieUserHash"", MD5.hash(""123"")),
			new Cookie(""cookieAutoLogin"", ""1"")
		};
		
		
		when(config.getInt(ConfigKeys.ANONYMOUS_USER_ID)).thenReturn(1);
		when(config.getValue(ConfigKeys.ANONYMOUS_USER_ID)).thenReturn(""1"");
		when(config.getValue(ConfigKeys.COOKIE_USER_ID)).thenReturn(""cookieNameData"");
		when(config.getValue(ConfigKeys.COOKIE_USER_HASH)).thenReturn(""cookieUserHash"");
		when(config.getValue(ConfigKeys.COOKIE_AUTO_LOGIN)).thenReturn(""cookieAutoLogin"");
		when(config.getValue(ConfigKeys.AUTHENTICATION_TYPE)).thenReturn(""x"");
		when(request.getSession()).thenReturn(httpSession);
	}
"
net.jforum.core.SessionManagerTestCase.tearDown,SessionManagerTestCase.java,"void tearDown() {
		// FIXME: that shouldn't be needed...
		manager.reinitialiseAllSessions();
	}
"
net.jforum.core.SessionManagerTestCase.loginAfterTimeoutShouldFetchFromSessionRepositoryExpectLastVisitCorrect,SessionManagerTestCase.java,"void loginAfterTimeoutShouldFetchFromSessionRepositoryExpectLastVisitCorrect() {
		UserSession us = this.newUserSession(""123"");
		us.getUser().setId(2);
		us.setCreationTime(1);
		us.setLastAccessedTime(2);
		us.setLastVisit(3);
		
		Session session = new Session();
		session.setLastVisit(new Date(7));
		
		when(sessionRepository.get(2)).thenReturn(session);
		
		manager.add(us);
		
		assertEquals(7, us.getLastVisit());
	}
"
net.jforum.core.SessionManagerTestCase.loginBackBeforeExpireExpectLastVisitCorrect,SessionManagerTestCase.java,"void loginBackBeforeExpireExpectLastVisitCorrect() {
		UserSession us = this.newUserSession(""123""); us.getUser().setId(2);
		us.setCreationTime(1); us.setLastVisit(9);

		manager.add(us);
		assertEquals(1, manager.getTotalUsers());

		UserSession us2 = this.newUserSession(""456""); us2.getUser().setId(2);
		us2.setCreationTime(1); us2.setLastVisit(5);

		manager.add(us2);
		
		assertEquals(9, us2.getLastVisit());
		assertEquals(1, manager.getTotalUsers());
	}
"
net.jforum.core.SessionManagerTestCase.storeSessionNotRegisteredShouldIgnore,SessionManagerTestCase.java,"void storeSessionNotRegisteredShouldIgnore() {
		manager.storeSession(""invalid"");
	}
"
net.jforum.core.SessionManagerTestCase.storeSessionExpectSuccess,SessionManagerTestCase.java,"void storeSessionExpectSuccess() {
		when(httpSession.getId()).thenReturn(""123"");
	
		UserSession us = new UserSession();
		us.setSessionId(""123"");
		us.setRequest(request);
		us.setResponse(response);
		us.getUser().setId(2);

		manager.add(us);
		manager.storeSession(""123"");
		
		verify(sessionRepository).add(notNull(Session.class));
	}
"
net.jforum.core.SessionManagerTestCase.storeSessionIsAnonymousShouldIgnore,SessionManagerTestCase.java,"void storeSessionIsAnonymousShouldIgnore() {
		when(httpSession.getId()).thenReturn(""123"");
	
		UserSession us = new UserSession();
		us.setSessionId(""123"");
		us.getUser().setId(1);

		manager.add(us);
		manager.storeSession(""123"");
	}
"
net.jforum.core.SessionManagerTestCase.autoLoginAllInformationIsGoodShouldAccept,SessionManagerTestCase.java,"void autoLoginAllInformationIsGoodShouldAccept() {
		commonAutoLoginMockAction();
		User user = new User();
		user.setId(2);
		user.setSecurityHash(""123"");
		
		UserSession userSession = new UserSession();
		userSession.setRequest(request);
		userSession.setResponse(response);

		when(request.getCookies()).thenReturn(goodCookie);
		when(userRepository.get(2)).thenReturn(user);
		
		manager.refreshSession(userSession);

		verify(httpSession).setAttribute(ConfigKeys.LOGGED, ""1"");
	}
"
net.jforum.core.SessionManagerTestCase.autoLoginValidUserInvalidSecurityHashShouldDeny,SessionManagerTestCase.java,"void autoLoginValidUserInvalidSecurityHashShouldDeny() {
		this.commonAutoLoginMockAction();
		User user = new User();
		user.setId(2);
		user.setSecurityHash(""abc"");

		UserSession userSession = new UserSession();
		userSession.setRequest(request);
		userSession.setResponse(response);

		when(request.getCookies()).thenReturn(goodCookie);
		when(userRepository.get(2)).thenReturn(user);
		when(userRepository.get(1)).thenReturn(new User());
		
		manager.refreshSession(userSession);
	}
"
net.jforum.core.SessionManagerTestCase.autoLoginValidUserEmptySecurityHashShouldDeny,SessionManagerTestCase.java,"void autoLoginValidUserEmptySecurityHashShouldDeny() {
		this.commonAutoLoginMockAction();
		User user = new User();
		user.setId(2);
		user.setSecurityHash(null);
		
		UserSession userSession = new UserSession();
		userSession.setRequest(request);
		userSession.setResponse(response);

		when(request.getCookies()).thenReturn(goodCookie);
		when(userRepository.get(2)).thenReturn(user);
		when(userRepository.get(1)).thenReturn(new User());

		manager.refreshSession(userSession);
	}
"
net.jforum.core.SessionManagerTestCase.autoLoginValidUserHasDeletedFlagShouldDeny,SessionManagerTestCase.java,"void autoLoginValidUserHasDeletedFlagShouldDeny() {
		this.commonAutoLoginMockAction();
		User user = new User();
		user.setId(2);
		user.setDeleted(true);
		
		when(request.getCookies()).thenReturn(goodCookie);
		when(userRepository.get(2)).thenReturn(user);
		when(userRepository.get(1)).thenReturn(new User());
		
		UserSession userSession = new UserSession();
		userSession.setRequest(request);
		userSession.setResponse(response);

		manager.refreshSession(userSession);
	}
"
net.jforum.core.SessionManagerTestCase.autoLoginValidUserNotfoundInRepositoryShouldDeny,SessionManagerTestCase.java,"void autoLoginValidUserNotfoundInRepositoryShouldDeny() {
		this.commonAutoLoginMockAction();

		UserSession userSession = new UserSession();
		userSession.setRequest(request);
		userSession.setResponse(response);
		
		when(request.getCookies()).thenReturn(goodCookie);
		when(userRepository.get(2)).thenReturn(null);
		when(userRepository.get(1)).thenReturn(new User());
		
		manager.refreshSession(userSession);
	}
"
net.jforum.core.SessionManagerTestCase.autoLoginValidUserCookieValueNot1ShouldDeny,SessionManagerTestCase.java,"void autoLoginValidUserCookieValueNot1ShouldDeny() {
		this.commonAutoLoginMockAction();
		
		Cookie[] cookies = new Cookie[] {
			new Cookie(""cookieNameData"", ""2""),
			new Cookie(""cookieUserHash"", ""a""),
			new Cookie(""cookieAutoLogin"", ""0"")
		};
	
		when(request.getCookies()).thenReturn(cookies);
		when(userRepository.get(1)).thenReturn(new User());
		
		UserSession userSession = new UserSession();
		userSession.setRequest(request);
		userSession.setResponse(response);

		manager.refreshSession(userSession);
	}
"
net.jforum.core.SessionManagerTestCase.autoLoginAnonymousUserShouldDeny,SessionManagerTestCase.java,"void autoLoginAnonymousUserShouldDeny() {
		this.commonAutoLoginMockAction();

		Cookie[] cookies = new Cookie[] {
			new Cookie(""cookieNameData"", ""1""),
			new Cookie(""cookieUserHash"", ""a""),
			new Cookie(""cookieAutoLogin"", ""1"")
		};
		when(request.getCookies()).thenReturn(cookies);
		when(userRepository.get(1)).thenReturn(new User());
		
		UserSession userSession = new UserSession();
		userSession.setRequest(request);
		userSession.setResponse(response);

		manager.refreshSession(userSession);
	}
"
net.jforum.core.SessionManagerTestCase.autoLoginDoestNotHaveCookiesShouldDeny,SessionManagerTestCase.java,"void autoLoginDoestNotHaveCookiesShouldDeny() {
		this.commonAutoLoginMockAction();
		UserSession userSession = new UserSession();
		userSession.setRequest(request);
		userSession.setResponse(response);
		
		when(userRepository.get(1)).thenReturn(new User());
		
		manager.refreshSession(userSession);
	}
"
net.jforum.core.SessionManagerTestCase.refreshExistingSessionShouldFetchUserAndRoleManager,SessionManagerTestCase.java,"void refreshExistingSessionShouldFetchUserAndRoleManager() {
		User user = new User();
		user.setId(1);
		UserSession us = this.newUserSession(""123"");
		us.setRequest(request);
		us.setResponse(response);
		us.setUser(user);
		
		when(httpSession.getId()).thenReturn(""123"");
		when(userRepository.get(user.getId())).thenReturn(user);
		
		manager.add(us);
		manager.refreshSession(us);
		
		assertNotNull(us.getRoleManager());
	}
"
net.jforum.core.SessionManagerTestCase.refreshSessionIsNewShouldCreateAutoLoginDisabledUsingAnonymousUser,SessionManagerTestCase.java,"void refreshSessionIsNewShouldCreateAutoLoginDisabledUsingAnonymousUser() {
		User anonymousUser = new User();
		anonymousUser.setId(1);
		UserSession userSession = new UserSession();
		userSession.setRequest(request);
		userSession.setResponse(response);

		when(httpSession.getId()).thenReturn(""123"");
		when(config.getBoolean(ConfigKeys.AUTO_LOGIN_ENABLED)).thenReturn(false);
		when(userRepository.get(1)).thenReturn(anonymousUser);
		when(config.getValue(ConfigKeys.SSO_LOGOUT)).thenReturn(""x"");
		
		UserSession us = manager.refreshSession(userSession);
		
		assertNotNull(us);
		assertEquals(anonymousUser, us.getUser());
		assertNotNull(us.getRoleManager());
		assertEquals(""123"", us.getSessionId());
		
		verify(request).setAttribute(""sso"", false);
		verify(request).setAttribute(""ssoLogout"", ""x"");
	}
"
net.jforum.core.SessionManagerTestCase.isUserInSessionExpectNull,SessionManagerTestCase.java,"void isUserInSessionExpectNull() {
		assertNull(manager.isUserInSession(10));
	}
"
net.jforum.core.SessionManagerTestCase.isUserInSessionExpectMatch,SessionManagerTestCase.java,"void isUserInSessionExpectMatch() {
		UserSession us1 = this.newUserSession(""1"");
		us1.getUser().setId(2);
		
		manager.add(us1);
		
		UserSession expected = manager.isUserInSession(2);
		
		assertNotNull(expected);
		assertEquals(""1"", expected.getSessionId());
	}
"
net.jforum.core.SessionManagerTestCase.getUserSessionShouldAlwaysFind,SessionManagerTestCase.java,"void getUserSessionShouldAlwaysFind() {
		UserSession us1 = this.newUserSession(""1"");
		us1.getUser().setId(2);
		manager.add(us1);
		UserSession us2 = this.newUserSession(""2"");
		us2.getUser().setId(3);
		manager.add(us2);
		UserSession us3 = this.newUserSession(""3"");
		manager.add(us3);

		assertNotNull(manager.getUserSession(""1""));
		assertNotNull(manager.getUserSession(""2""));
		assertNotNull(manager.getUserSession(""3""));
		assertNull(manager.getUserSession(""4""));
	}
"
net.jforum.core.SessionManagerTestCase.getLoggedSessions,SessionManagerTestCase.java,"void getLoggedSessions() {
		UserSession us1 = this.newUserSession(""1"");
		us1.getUser().setId(2);
		manager.add(us1);
		UserSession us2 = this.newUserSession(""2"");
		us2.getUser().setId(3);
		manager.add(us2);
		UserSession us3 = this.newUserSession(""3"");
		manager.add(us3);

		Collection<UserSession> sessions = manager.getLoggedSessions();
		
		assertTrue(sessions.contains(us1));
		assertTrue(sessions.contains(us2));
		assertFalse(sessions.contains(us3));
	}
"
net.jforum.core.SessionManagerTestCase.getAllSessions,SessionManagerTestCase.java,"void getAllSessions() {
		UserSession us1 = this.newUserSession(""1"");
		manager.add(us1);
		UserSession us2 = this.newUserSession(""2"");
		manager.add(us2);

		List<UserSession> sessions = manager.getAllSessions();
		
		assertEquals(2, sessions.size());
		assertTrue(sessions.contains(us1));
		assertTrue(sessions.contains(us2));
	}
"
net.jforum.core.SessionManagerTestCase.getTotalAnonymousUsers,SessionManagerTestCase.java,"void getTotalAnonymousUsers() {
		manager.add(this.newUserSession(""1""));
		manager.add(this.newUserSession(""2""));
		manager.add(this.newUserSession(""3""));

		assertEquals(3, manager.getTotalAnonymousUsers());
		assertEquals(0, manager.getTotalLoggedUsers());
	}
"
net.jforum.core.SessionManagerTestCase.getTotalLoggedUsers,SessionManagerTestCase.java,"void getTotalLoggedUsers() {
		UserSession us1 = this.newUserSession(""1"");
		us1.getUser().setId(3);
		manager.add(us1);
		UserSession us2 = this.newUserSession(""2"");
		us2.getUser().setId(4);
		
		manager.add(us2);

		assertEquals(2, manager.getTotalLoggedUsers());
		assertEquals(0, manager.getTotalAnonymousUsers());
	}
"
net.jforum.core.SessionManagerTestCase.getTotalUsers,SessionManagerTestCase.java,"void getTotalUsers() {
		manager.add(this.newUserSession(""1""));
		manager.add(this.newUserSession(""2""));
		UserSession us3 = this.newUserSession(""3"");
		us3.getUser().setId(3);
		manager.add(us3);

		assertEquals(2, manager.getTotalAnonymousUsers());
		assertEquals(1, manager.getTotalLoggedUsers());
		assertEquals(3, manager.getTotalUsers());
	}
"
net.jforum.core.SessionManagerTestCase.removeAnonymousUser,SessionManagerTestCase.java,"void removeAnonymousUser() {
		UserSession us = this.newUserSession(""1"");
		manager.add(us);

		manager.remove(us.getSessionId());
		
		assertEquals(0, manager.getTotalAnonymousUsers());
		assertEquals(0, manager.getTotalLoggedUsers());
	}
"
net.jforum.core.SessionManagerTestCase.removeLoggedUser,SessionManagerTestCase.java,"void removeLoggedUser() {
		UserSession us = this.newUserSession(""1"");
		us.getUser().setId(2);
		manager.add(us);
		assertEquals(1, manager.getTotalLoggedUsers());

		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""1"");
		
		manager.remove(us.getSessionId());
		
		assertEquals(0, manager.getTotalLoggedUsers());
		assertEquals(0, manager.getTotalAnonymousUsers());
		
	}
"
net.jforum.core.SessionManagerTestCase.addDuplicatedSessionIdShouldReplace,SessionManagerTestCase.java,"void addDuplicatedSessionIdShouldReplace() {
		// First session
		UserSession session1 = this.newUserSession(""1"");
		session1.getUser().setUsername(""user1"");
		
		manager.add(session1);
		
		assertEquals(1, manager.getTotalAnonymousUsers());
		assertEquals(""user1"", manager.getUserSession(""1"").getUser().getUsername());

		// Duplicated session
		UserSession session2 = this.newUserSession(""1"");
		session2.getUser().setUsername(""user2"");
		
		manager.add(session2);
		
		assertEquals(1, manager.getTotalAnonymousUsers());
		assertEquals(""user2"", manager.getUserSession(""1"").getUser().getUsername());
	}
"
net.jforum.core.SessionManagerTestCase.addModeratorShouldIncrementTotalModeratorsOnline,SessionManagerTestCase.java,"void addModeratorShouldIncrementTotalModeratorsOnline() {
		UserSession us = this.newUserSession(""1"");
		Group g = new Group();
		Role role = new Role(); role.setName(SecurityConstants.MODERATOR);
		g.addRole(role);
		us.getUser().addGroup(g);
		us.getUser().setId(2);

		assertFalse(manager.isModeratorOnline());

		manager.add(us);

		assertTrue(manager.isModeratorOnline());
	}
"
net.jforum.core.SessionManagerTestCase.removeModeratorShouldDecrementModeratorsOnline,SessionManagerTestCase.java,"void removeModeratorShouldDecrementModeratorsOnline() {
		UserSession us = this.newUserSession(""1"");
		Group g = new Group();
		Role role = new Role(); role.setName(SecurityConstants.MODERATOR);
		g.addRole(role);
		us.getUser().addGroup(g);
		us.getUser().setId(2);

		RoleManager roleManager = new RoleManager(); roleManager.setGroups(Arrays.asList(g));
		us.setRoleManager(roleManager);

		manager.add(us);
		assertTrue(manager.isModeratorOnline());

		manager.remove(us.getSessionId());
		assertFalse(manager.isModeratorOnline());
	}
"
net.jforum.core.SessionManagerTestCase.addBotShouldIgnore,SessionManagerTestCase.java,"void addBotShouldIgnore() {
		UserSession us = mock(UserSession.class);
		when(us.isBot()).thenReturn(true);
		when(us.getSessionId()).thenReturn(""123"");
		
		assertEquals(0, manager.getTotalUsers());
		manager.add(us);
		assertEquals(0, manager.getTotalUsers());
	}
"
net.jforum.core.SessionManagerTestCase.addLoggedUser,SessionManagerTestCase.java,"void addLoggedUser() {
		UserSession us = this.newUserSession(""1"");
		us.getUser().setId(2);
		manager.add(us);
		assertEquals(1, manager.getTotalLoggedUsers());
	}
"
net.jforum.core.SessionManagerTestCase.addAnonymousUser,SessionManagerTestCase.java,"void addAnonymousUser() {
		UserSession us = this.newUserSession(""1"");
		manager.add(us);
		assertEquals(1, manager.getTotalAnonymousUsers());
	}
"
net.jforum.core.SessionManagerTestCase.addUsingEmptySessionIdExpectException,SessionManagerTestCase.java,"void addUsingEmptySessionIdExpectException() {
		manager.add(this.newUserSession(""""));
	}
"
net.jforum.core.SessionManagerTestCase.addUsingNullSessionIdExpectException,SessionManagerTestCase.java,"void addUsingNullSessionIdExpectException() {
		manager.add(this.newUserSession(null));
	}
"
net.jforum.core.SessionManagerTestCase.commonAutoLoginMockAction,SessionManagerTestCase.java,"void commonAutoLoginMockAction() {
		when(httpSession.getId()).thenReturn(""123"");
		when(config.getBoolean(ConfigKeys.AUTO_LOGIN_ENABLED)).thenReturn(true);
	}
"
net.jforum.core.SessionManagerTestCase.newUserSession,SessionManagerTestCase.java,"UserSession newUserSession(String sessionId) {
		UserSession us = new UserSession();

		us.setSessionId(sessionId);
		us.getUser().setId(1);

		return us;
	}
"
net.jforum.core.hibernate.TopicWatchDAOTestCase.getUsersWaitingNotificationNoWatchExpectEmptyList,TopicWatchDAOTestCase.java,"void getUsersWaitingNotificationNoWatchExpectEmptyList() {
		TopicWatchRepository dao = this.newDao();
		Topic topic = new Topic(); topic.setId(13);
		List<User> users = dao.getUsersWaitingNotification(topic);
		Assert.assertEquals(0, users.size());
	}
"
net.jforum.core.hibernate.TopicWatchDAOTestCase.getUsersWaitingNotificationTwoWatchesOneReadExpectOneResultShouldUpdate,TopicWatchDAOTestCase.java,"void getUsersWaitingNotificationTwoWatchesOneReadExpectOneResultShouldUpdate() {
		TopicWatchRepository dao = this.newDao();

		TopicWatch watch = this.newWatch(1, 1); watch.markAsRead();
		this.insert(watch, dao);
		this.insert(this.newWatch(1, 2), dao);

		Topic topic = new Topic(); topic.setId(1);

		List<User> users = dao.getUsersWaitingNotification(topic);
		Assert.assertEquals(1, users.size());
		Assert.assertEquals(1, users.get(0).getId());

		// Check the update
		users = dao.getUsersWaitingNotification(topic);
		Assert.assertEquals(0, users.size());
	}
"
net.jforum.core.hibernate.TopicWatchDAOTestCase.removeSubscriptionByTopic,TopicWatchDAOTestCase.java,"void removeSubscriptionByTopic() {
		TopicWatchRepository dao = this.newDao();

		this.insert(this.newWatch(1, 1), dao);

		Topic topic = new Topic(); topic.setId(1);
		User user = new User(); user.setId(1);

		dao.removeSubscription(topic);

		Assert.assertNull(dao.getSubscription(topic, user));
	}
"
net.jforum.core.hibernate.TopicWatchDAOTestCase.removeSubscriptionByUser,TopicWatchDAOTestCase.java,"void removeSubscriptionByUser() {
		TopicWatchRepository dao = this.newDao();

		this.insert(this.newWatch(1, 1), dao);
		this.insert(this.newWatch(1, 2), dao);

		Topic topic = new Topic(); topic.setId(1);
		User user = new User(); user.setId(1);

		dao.removeSubscription(topic, user);

		Assert.assertNull(dao.getSubscription(topic, user));

		user.setId(2);
		Assert.assertNotNull(dao.getSubscription(topic, user));
	}
"
net.jforum.core.hibernate.TopicWatchDAOTestCase.isUserSubscribedExpectFalse,TopicWatchDAOTestCase.java,"void isUserSubscribedExpectFalse() {
		TopicWatchRepository dao = this.newDao();

		Topic topic = new Topic(); topic.setId(1);
		User user = new User(); user.setId(1);

		Assert.assertNull(dao.getSubscription(topic, user));
	}
"
net.jforum.core.hibernate.TopicWatchDAOTestCase.isUserSubscribedExpectTrue,TopicWatchDAOTestCase.java,"void isUserSubscribedExpectTrue() {
		TopicWatchRepository dao = this.newDao();

		this.insert(this.newWatch(1, 1), dao);

		Topic topic = new Topic(); topic.setId(1);
		User user = new User(); user.setId(1);

		Assert.assertNotNull(dao.getSubscription(topic, user));
	}
"
net.jforum.core.hibernate.TopicWatchDAOTestCase.delete,TopicWatchDAOTestCase.java,"void delete() {
		TopicWatchRepository dao = this.newDao();

		TopicWatch watch = this.newWatch(1, 1);
		this.insert(watch, dao);

		TopicWatch loaded = dao.get(watch.getId());
		this.delete(loaded, dao);

		Assert.assertNull(dao.get(watch.getId()));
	}
"
net.jforum.core.hibernate.TopicWatchDAOTestCase.insert,TopicWatchDAOTestCase.java,"void insert() {
		TopicWatchRepository dao = this.newDao();

		TopicWatch watch = this.newWatch(1, 1);
		this.insert(watch, dao);

		Assert.assertTrue(watch.getId() > 0);

		TopicWatch loaded = dao.get(watch.getId());
		Assert.assertNotNull(loaded);
		Assert.assertEquals(1, loaded.getTopic().getId());
		Assert.assertEquals(1, loaded.getUser().getId());
	}
"
net.jforum.core.hibernate.TopicWatchDAOTestCase.setup,TopicWatchDAOTestCase.java,"void setup() {
		User user = new User(); user.setUsername(""u1"");
		User user2 = new User(); user2.setUsername(""u2"");
		new UserRepository(session()).add(user);
		new UserRepository(session()).add(user2);

		Topic topic = new Topic(); topic.setSubject(""t1""); topic.setFirstPost(null); topic.setLastPost(null); topic.setForum(null);
		new TopicRepository(session()).add(topic);
	}
"
net.jforum.core.hibernate.TopicWatchDAOTestCase.newWatch,TopicWatchDAOTestCase.java,"TopicWatch newWatch(int topicId, int userId) {
		TopicWatch watch = new TopicWatch();

		Topic topic = new Topic(); topic.setId(topicId);
		User user = new User(); user.setId(userId);
		watch.setTopic(topic);
		watch.setUser(user);

		return watch;
	}
"
net.jforum.core.hibernate.TopicWatchDAOTestCase.newDao,TopicWatchDAOTestCase.java,"TopicWatchRepository newDao() {
		return new TopicWatchRepository(session());
	}
"
net.jforum.core.hibernate.PostReportDAOTestCase.countPendingReportsShouldFilterByForum,PostReportDAOTestCase.java,"void countPendingReportsShouldFilterByForum() {
		new JDBCLoader(this.session()).run(""/postreport/countPendingReports.sql"");
		PostReportRepository dao = this.newDAO();
		assertEquals(1, dao.countPendingReports(1));
	}
"
net.jforum.core.hibernate.PostReportDAOTestCase.countPendingReportsWithoutFilteringShouldReturnAllResultsExceptResolved,PostReportDAOTestCase.java,"void countPendingReportsWithoutFilteringShouldReturnAllResultsExceptResolved() {
		new JDBCLoader(this.session()).run(""/postreport/countPendingReports.sql"");
		PostReportRepository dao = this.newDAO();
		assertEquals(2, dao.countPendingReports());
	}
"
net.jforum.core.hibernate.PostReportDAOTestCase.getAllShouldFilterByForumExpectOneResult,PostReportDAOTestCase.java,"void getAllShouldFilterByForumExpectOneResult() {
		new JDBCLoader(this.session()).run(""/postreport/getAll.sql"");
		PostReport report = this.createPostReport(1, 1, PostReportStatus.UNRESOLVED);
		this.createPostReport(2, 2, PostReportStatus.UNRESOLVED);

		List<PostReport> reports = this.getAll(1, 1);

		this.assertPostReport(report, reports.get(0));
	}
"
net.jforum.core.hibernate.PostReportDAOTestCase.getAllResolvedReports,PostReportDAOTestCase.java,"void getAllResolvedReports() {
		new JDBCLoader(this.session()).run(""/postreport/getAll.sql"");
		this.createPostReport(1, 1, PostReportStatus.UNRESOLVED);
		PostReport report1 = this.createPostReport(2, 2, PostReportStatus.RESOLVED);
		PostReport report2 = this.createPostReport(2, 2, PostReportStatus.RESOLVED);

		PostReportRepository dao = this.newDAO();
		List<PostReport> reports = dao.getAll(PostReportStatus.RESOLVED, null);

		assertEquals(2, reports.size());

		this.assertPostReport(report1, reports.get(0));
		this.assertPostReport(report2, reports.get(1));
	}
"
net.jforum.core.hibernate.PostReportDAOTestCase.getAllWithoutFilterShouldReturnAllReults,PostReportDAOTestCase.java,"void getAllWithoutFilterShouldReturnAllReults() {
		new JDBCLoader(this.session()).run(""/postreport/getAll.sql"");
		PostReport report = this.createPostReport(1, 1, PostReportStatus.UNRESOLVED);
		PostReport report2 = this.createPostReport(1, 2, PostReportStatus.UNRESOLVED);

		List<PostReport> reports = this.getAll(2, null);

		this.assertPostReport(report, reports.get(0));
		this.assertPostReport(report2, reports.get(1));
	}
"
net.jforum.core.hibernate.PostReportDAOTestCase.getAll,PostReportDAOTestCase.java,"List<PostReport> getAll(int expectedCount, int... forumIds) {
		PostReportRepository dao = this.newDAO();

		List<PostReport> reports = dao.getAll(PostReportStatus.UNRESOLVED, forumIds);
		assertEquals(expectedCount, reports.size());

		return reports;
	}
"
net.jforum.core.hibernate.PostReportDAOTestCase.assertPostReport,PostReportDAOTestCase.java,"void assertPostReport(PostReport report, PostReport report2) {
		assertEquals(report.getPost().getId(), report2.getPost().getId());
		assertEquals(report.getPost().getTopic().getId(), report2.getPost().getTopic().getId());
		assertEquals(report.getDate(), report2.getDate());
		assertEquals(report.getDescription(), report2.getDescription());
		assertEquals(report.getPost().getSubject(), report2.getPost().getSubject());
		assertEquals(report.getPost().getUser().getId(), report2.getPost().getUser().getId());
		assertEquals(report.getUser().getId(), report2.getUser().getId());
	}
"
net.jforum.core.hibernate.PostReportDAOTestCase.createPostReport,PostReportDAOTestCase.java,"PostReport createPostReport(int forumId, int postId, PostReportStatus status) {
		PostReport report = new PostReport();

		report.setDate(new Date());
		report.setDescription(""description"");
		report.setPost(new Post());
		report.getPost().setId(postId);
		report.getPost().setForum(new Forum());
		report.getPost().getForum().setId(forumId);
		report.getPost().setTopic(new Topic());
		report.getPost().getTopic().setId(1);
		report.getPost().setUser(new User());
		report.getPost().getUser().setId(1);
		report.setUser(new User());
		report.getUser().setId(1);
		report.setStatus(status);

		PostReportRepository dao = this.newDAO();
		this.insert(report, dao);

		return report;
	}
"
net.jforum.core.hibernate.PostReportDAOTestCase.newDAO,PostReportDAOTestCase.java,"PostReportRepository newDAO() {
		return new PostReportRepository(session());
	}
"
net.jforum.core.hibernate.BadWordDAOTestCase.getAll,BadWordDAOTestCase.java,"void getAll() {
		BadWord w1 = new BadWord(); w1.setWord(""w1"");
		BadWord w2 = new BadWord(); w2.setWord(""w2"");

		BadWordRepository dao = this.newDao();

		this.insert(w1, dao);
		this.insert(w2, dao);

		List<BadWord> words = dao.getAll();
		assertEquals(2, words.size());
	}
"
net.jforum.core.hibernate.BadWordDAOTestCase.newDao,BadWordDAOTestCase.java,"BadWordRepository newDao() {
		return new BadWordRepository(session());
	}
"
net.jforum.core.hibernate.BanlistDAOTestCase.getAllBanlistsExpectEmptyList,BanlistDAOTestCase.java,"void getAllBanlistsExpectEmptyList() {
		BanlistRepository dao = this.newDao();
		List<Banlist> banlists = dao.getAllBanlists();
		Assert.assertNotNull(banlists);
		Assert.assertEquals(0, banlists.size());
	}
"
net.jforum.core.hibernate.BanlistDAOTestCase.getAllBanlistsExpectTwoRecords,BanlistDAOTestCase.java,"void getAllBanlistsExpectTwoRecords() {
		BanlistRepository dao = this.newDao();

		Banlist b1 = new Banlist(); b1.setEmail(""email@1""); this.insert(b1, dao);
		Banlist b2 = new Banlist(); b2.setUserId(3); this.insert(b2, dao);

		List<Banlist> banlists = dao.getAllBanlists();

		Assert.assertEquals(2, banlists.size());
		Assert.assertEquals(""email@1"", banlists.get(0).getEmail());
		Assert.assertEquals(3, banlists.get(1).getUserId());
	}
"
net.jforum.core.hibernate.BanlistDAOTestCase.newDao,BanlistDAOTestCase.java,"BanlistRepository newDao() {
		return new BanlistRepository(session());
	}
"
net.jforum.core.hibernate.SmilieDAOTestCase.getAllSmiliesExpectTwoResults,SmilieDAOTestCase.java,"void getAllSmiliesExpectTwoResults() {
		SmilieRepository dao = this.newDao();

		this.insert(this.createSmilie(""[b1]"", ""diskname1""), dao);
		this.insert(this.createSmilie(""[b1]"", ""diskname2""), dao);

		List<Smilie> smilies = dao.getAllSmilies();

		Assert.assertNotNull(smilies);
		Assert.assertEquals(2, smilies.size());
	}
"
net.jforum.core.hibernate.SmilieDAOTestCase.insert,SmilieDAOTestCase.java,"void insert() {
		SmilieRepository dao = this.newDao();
		Smilie s = this.createSmilie(""x"", ""diskname"");
		this.insert(s, dao);

		Assert.assertTrue(s.getId() > 0);

		Smilie loaded = dao.get(s.getId());

		Assert.assertNotNull(loaded);
		Assert.assertEquals(""x"", loaded.getCode());
		Assert.assertEquals(""diskname"", loaded.getDiskName());
	}
"
net.jforum.core.hibernate.SmilieDAOTestCase.getAllSmiliesExpectEmtpyList,SmilieDAOTestCase.java,"void getAllSmiliesExpectEmtpyList() {
		SmilieRepository dao = this.newDao();
		Assert.assertEquals(0, dao.getAllSmilies().size());
	}
"
net.jforum.core.hibernate.SmilieDAOTestCase.newDao,SmilieDAOTestCase.java,"SmilieRepository newDao() {
		return new SmilieRepository(session());
	}
"
net.jforum.core.hibernate.SmilieDAOTestCase.createSmilie,SmilieDAOTestCase.java,"Smilie createSmilie(String code, String diskName) {
		Smilie s = new Smilie();

		s.setCode(code);
		s.setDiskName(diskName);

		return s;
	}
"
net.jforum.core.hibernate.UserDAOTestCase.changeAllowAvatarState,UserDAOTestCase.java,"void changeAllowAvatarState() {
		new JDBCLoader(this.session()).run(""/userdao/changeAllowAvatarState.sql"");

		GroupRepository groupDao = this.newGroupDao();
		UserRepository dao = this.newDao();

		Group group1 = groupDao.get(1);
		Group group2 = groupDao.get(2);

		List<User> users = dao.getAllUsers(0, 10, Arrays.asList(group1));
		Assert.assertFalse(users.get(0).isAvatarEnabled());
		Assert.assertFalse(users.get(1).isAvatarEnabled());

		dao.changeAllowAvatarState(true, group1);
		this.commit();
		this.beginTransaction();

		users = dao.getAllUsers(0, 10, Arrays.asList(group1));
		Assert.assertEquals(2, users.size());
		Assert.assertTrue(users.get(0).isAvatarEnabled());
		Assert.assertTrue(users.get(1).isAvatarEnabled());

		Assert.assertFalse(dao.getAllUsers(0, 10, Arrays.asList(group2)).get(0).isAvatarEnabled());
	}
"
net.jforum.core.hibernate.UserDAOTestCase.findByUsernameFilteringByGroup,UserDAOTestCase.java,"void findByUsernameFilteringByGroup() {
		new JDBCLoader(this.session()).run(""/userdao/findByUsernameFilteringByGroup.sql"");

		UserRepository dao = this.newDao();
		User user = dao.get(1);

		List<User> users = dao.findByUserName(""user"", user.getGroups());
		Assert.assertEquals(2, users.size());

		Assert.assertEquals(""USER1"", users.get(0).getUsername());
		Assert.assertEquals(""user2"", users.get(1).getUsername());
	}
"
net.jforum.core.hibernate.UserDAOTestCase.getAllUsersFilteringByGroup,UserDAOTestCase.java,"void getAllUsersFilteringByGroup() {
		new JDBCLoader(this.session()).run(""/userdao/getAllUsersFilteringByGroup.sql"");

		UserRepository dao = this.newDao();
		User user = dao.get(1);

		List<User> users = dao.getAllUsers(0, 10, user.getGroups());
		Assert.assertEquals(2, users.size());

		Assert.assertEquals(""u1"", users.get(0).getUsername());
		Assert.assertEquals(""u2"", users.get(1).getUsername());
	}
"
net.jforum.core.hibernate.UserDAOTestCase.getByEmailShouldFindAMatch,UserDAOTestCase.java,"void getByEmailShouldFindAMatch() {
		User user = new User();
		user.setUsername(""user1"");
		user.setEmail(""email1"");

		UserRepository dao = this.newDao();
		this.insert(user, dao);

		user = dao.getByEmail(""email1"");
		Assert.assertNotNull(user);
		Assert.assertEquals(""user1"", user.getUsername());
	}
"
net.jforum.core.hibernate.UserDAOTestCase.validateLostPasswordHashUsingBadDataExpectFail,UserDAOTestCase.java,"void validateLostPasswordHashUsingBadDataExpectFail() {
		UserRepository dao = this.newDao();
		User user = dao.validateLostPasswordHash(""bad username"", ""bad hash"");
		Assert.assertNull(user);
	}
"
net.jforum.core.hibernate.UserDAOTestCase.validateLostPasswordHashUsingGoodDataExpectSuccess,UserDAOTestCase.java,"void validateLostPasswordHashUsingGoodDataExpectSuccess() {
		UserRepository dao = this.newDao();

		User user = new User();
		user.setUsername(""rafael"");
		user.setActivationKey(""act key 1"");

		this.insert(user, dao);

		user = dao.validateLostPasswordHash(""rafael"", ""act key 1"");
		Assert.assertNotNull(user);
	}
"
net.jforum.core.hibernate.UserDAOTestCase.getTotalPostsExpectTwoResults,UserDAOTestCase.java,"void getTotalPostsExpectTwoResults() {
		new JDBCLoader(session())
			.run(""/userdao/getTotalPostsExpectTwoResults.sql"");
		User user = new User(); user.setId(1);
		int total = this.newDao().getTotalPosts(user);
		Assert.assertEquals(2, total);
	}
"
net.jforum.core.hibernate.UserDAOTestCase.isUsernaneAvailableTestingUsernameExpectFalse,UserDAOTestCase.java,"void isUsernaneAvailableTestingUsernameExpectFalse() {
		User user = new User(); user.setUsername(""username1""); user.setEmail(""email1"");
		UserRepository dao = this.newDao();
		this.insert(user, dao);
		Assert.assertFalse(dao.isUsernameAvailable(""UserNaMe1"", ""email2""));
	}
"
net.jforum.core.hibernate.UserDAOTestCase.isUsernaneAvailableTestingEmailExpectFalse,UserDAOTestCase.java,"void isUsernaneAvailableTestingEmailExpectFalse() {
		User user = new User(); user.setUsername(""username1""); user.setEmail(""email1"");
		UserRepository dao = this.newDao();
		this.insert(user, dao);
		Assert.assertFalse(dao.isUsernameAvailable(""UserNaMe2"", ""eMAil1""));
	}
"
net.jforum.core.hibernate.UserDAOTestCase.isUsernaneAvailableExpectTrue,UserDAOTestCase.java,"void isUsernaneAvailableExpectTrue() {
		User user = new User(); user.setUsername(""username1""); user.setEmail(""email1"");
		UserRepository dao = this.newDao();
		this.insert(user, dao);
		Assert.assertTrue(dao.isUsernameAvailable(""UserNaMe2"", ""email2""));
	}
"
net.jforum.core.hibernate.UserDAOTestCase.getTotalUnreadPrivateMessages,UserDAOTestCase.java,"void getTotalUnreadPrivateMessages() {
		new JDBCLoader(session())
			.run(""/userdao/getTotalUnreadPrivateMessages.sql"");
		User user = new User(); user.setId(1);
		Assert.assertEquals(1, this.newDao().getTotalUnreadPrivateMessages(user));
	}
"
net.jforum.core.hibernate.UserDAOTestCase.findByUserNameExpectThreeResults,UserDAOTestCase.java,"void findByUserNameExpectThreeResults() {
		User user1 = new User(); user1.setUsername(""Amy Winehouse"");
		User user2 = new User(); user2.setUsername(""John Amy"");
		User user3 = new User(); user3.setUsername(""Something With Amy inside"");
		User user4 = new User(); user4.setUsername(""another username"");

		UserRepository dao = this.newDao();

		this.insert(user1, dao);
		this.insert(user3, dao);
		this.insert(user4, dao);
		this.insert(user2, dao);

		List<User> users = dao.findByUserName(""amy"");
		Assert.assertEquals(3, users.size());
		Assert.assertEquals(""Amy Winehouse"", users.get(0).getUsername());
		Assert.assertEquals(""John Amy"", users.get(1).getUsername());
		Assert.assertEquals(""Something With Amy inside"", users.get(2).getUsername());
	}
"
net.jforum.core.hibernate.UserDAOTestCase.userGroupsCascade,UserDAOTestCase.java,"void userGroupsCascade() {
		User user = new User(); user.setUsername(""u1"");
		Group g = new Group(); g.setName(""g1"");
		this.newGroupDao().add(g);

		user.addGroup(g);

		UserRepository dao = this.newDao();
		this.insert(user, dao);

		user = dao.get(user.getId());
		Assert.assertEquals(1, user.getGroups().size());
	}
"
net.jforum.core.hibernate.UserDAOTestCase.userGroupsCascadeCleanThenAddNewExpectDeletesAndInsertsOk,UserDAOTestCase.java,"void userGroupsCascadeCleanThenAddNewExpectDeletesAndInsertsOk() {
		User user = new User();
		user.setUsername(""u1"");

		Group g = new Group(); g.setName(""g1"");
		Group g2 = new Group(); g2.setName(""g2"");
		Group g3 = new Group(); g3.setName(""g3"");

		GroupRepository groupDao = this.newGroupDao();
		groupDao.add(g);
		groupDao.add(g2);
		groupDao.add(g3);

		this.commit();
		this.beginTransaction();

		user.addGroup(g);
		user.addGroup(g2);

		UserRepository dao = this.newDao();
		this.insert(user, dao);

		user = dao.get(user.getId());
		Assert.assertEquals(2, user.getGroups().size());
		Assert.assertTrue(user.getGroups().contains(g));
		Assert.assertTrue(user.getGroups().contains(g2));

		user.getGroups().remove(g);
		user.addGroup(g3);

		this.update(user, dao);

		user = dao.get(user.getId());
		Assert.assertEquals(2, user.getGroups().size());
		Assert.assertTrue(user.getGroups().contains(g2));
		Assert.assertTrue(user.getGroups().contains(g3));
	}
"
net.jforum.core.hibernate.UserDAOTestCase.validateLoginUsingInvalidCredentialsExpectsInvalidLogin,UserDAOTestCase.java,"void validateLoginUsingInvalidCredentialsExpectsInvalidLogin() {
		User user = new User();
		user.setUsername(""username1"");
		user.setPassword(""password1"");

		UserRepository dao = this.newDao();
		this.insert(user, dao);

		Assert.assertNull(dao.validateLogin(""a"", ""b""));
	}
"
net.jforum.core.hibernate.UserDAOTestCase.validateLoginUsingGoodCredentialsExpectsSuccess,UserDAOTestCase.java,"void validateLoginUsingGoodCredentialsExpectsSuccess() {
		User user = new User();
		user.setUsername(""username2"");
		user.setPassword(""password2"");

		UserRepository dao = this.newDao();
		this.insert(user, dao);

		Assert.assertNotNull(dao.validateLogin(""username2"", ""password2""));
	}
"
net.jforum.core.hibernate.UserDAOTestCase.addExpectsSuccess,UserDAOTestCase.java,"void addExpectsSuccess() {
		User user = new User();
		user.setUsername(""u1"");
		user.setPassword(""pwd1"");
		user.setEmail(""email1"");

		UserRepository dao = this.newDao();

		this.insert(user, dao);

		Assert.assertTrue(user.getId() > 0);

		User loaded = dao.get(user.getId());
		Assert.assertEquals(user.getUsername(), loaded.getUsername());
		Assert.assertEquals(user.getPassword(), loaded.getPassword());
		Assert.assertEquals(user.getEmail(), loaded.getEmail());
	}
"
net.jforum.core.hibernate.UserDAOTestCase.getByUsernameUsingInexistentValueExpectsNull,UserDAOTestCase.java,"void getByUsernameUsingInexistentValueExpectsNull() {
		UserRepository dao = this.newDao();
		Assert.assertNull(dao.getByUsername(""non existent username""));
	}
"
net.jforum.core.hibernate.UserDAOTestCase.getByUsernameExpectsValidUser,UserDAOTestCase.java,"void getByUsernameExpectsValidUser() {
		UserRepository dao = this.newDao();
		User u = new User(); u.setUsername(""usernameX""); this.insert(u, dao);
		User u2 = dao.getByUsername(""usernameX"");
		Assert.assertNotNull(u2);
		Assert.assertEquals(u.getUsername(), u2.getUsername());
	}
"
net.jforum.core.hibernate.UserDAOTestCase.geTotalUsers,UserDAOTestCase.java,"void geTotalUsers() {
		UserRepository dao = this.newDao();
		User u1 = new User(); u1.setUsername(""u1""); this.insert(u1, dao);
		User u2 = new User(); u2.setUsername(""u1""); this.insert(u2, dao);
		User u3 = new User(); u3.setUsername(""u1""); this.insert(u3, dao);

		Assert.assertEquals(3, dao.getTotalUsers());
	}
"
net.jforum.core.hibernate.UserDAOTestCase.getLastRegisteredUser,UserDAOTestCase.java,"void getLastRegisteredUser() {
		UserRepository dao = this.newDao();
		User u1 = new User(); u1.setUsername(""u1""); u1.setRegistrationDate(new GregorianCalendar(2008, 3, 19, 20, 03, 10).getTime()); this.insert(u1, dao);
		User u2 = new User(); u2.setUsername(""u2""); u2.setRegistrationDate(new GregorianCalendar(2008, 3, 5, 7, 19, 10).getTime()); this.insert(u2, dao);

		User lastRegisteredUser = dao.getLastRegisteredUser();

		Assert.assertNotNull(lastRegisteredUser);
		Assert.assertEquals(u1.getUsername(), lastRegisteredUser.getUsername());
		Assert.assertEquals(u1.getId(), lastRegisteredUser.getId());
	}
"
net.jforum.core.hibernate.UserDAOTestCase.listExpectEmptyList,UserDAOTestCase.java,"void listExpectEmptyList() {
		UserRepository dao = this.newDao();
		Assert.assertEquals(0, dao.getAllUsers(0, 10).size());
	}
"
net.jforum.core.hibernate.UserDAOTestCase.listExpectTwoRecords,UserDAOTestCase.java,"void listExpectTwoRecords() {
		UserRepository dao = this.newDao();

		User u1 = new User(); u1.setUsername(""u1""); this.insert(u1, dao);
		User u2 = new User(); u1.setUsername(""u2""); this.insert(u2, dao);

		List<User> users = dao.getAllUsers(0, 10);

		Assert.assertEquals(2, users.size());
		Assert.assertTrue(users.contains(u1));
		Assert.assertTrue(users.contains(u2));
	}
"
net.jforum.core.hibernate.UserDAOTestCase.newDao,UserDAOTestCase.java,"UserRepository newDao() {
		return new UserRepository(session());
	}
"
net.jforum.core.hibernate.UserDAOTestCase.newGroupDao,UserDAOTestCase.java,"GroupRepository newGroupDao() {
		return new GroupRepository(session());
	}
"
net.jforum.core.hibernate.ForumDAOTestCase.moveTopics,ForumDAOTestCase.java,"void moveTopics() {
		new JDBCLoader(session())
			.run(""/forumdao/moveTopics.sql"");

		ForumRepository dao = this.newForumDao();
		Forum toForum = dao.get(2);

		Assert.assertEquals(1, dao.getTotalTopics(toForum));
		Assert.assertEquals(1, dao.getTotalPosts(toForum));

		dao.moveTopics(toForum, 1);

		Assert.assertEquals(2, dao.getTotalTopics(toForum));
		Assert.assertEquals(2, dao.getTotalPosts(toForum));
	}
"
net.jforum.core.hibernate.ForumDAOTestCase.getNewMessages,ForumDAOTestCase.java,"void getNewMessages() {
		new JDBCLoader(session())
			.run(""/forumdao/getNewMessages.sql"");

		Calendar from = Calendar.getInstance();
		from.set(2008, 5, 11, 14, 50);

		ForumRepository dao = this.newForumDao();
		PaginatedResult<Topic> messages = dao.getNewMessages(from.getTime(), 0, 3);

		Assert.assertEquals(3, messages.getResults().size());
		Assert.assertEquals(5, messages.getTotalRecords());
	}
"
net.jforum.core.hibernate.ForumDAOTestCase.getModerators,ForumDAOTestCase.java,"void getModerators() {
		new JDBCLoader(session())
			.run(""/forumdao/getModerators.sql"");

		Forum forum = new Forum(); forum.setId(1);
		List<Group> moderators = this.newForumDao().getModerators(forum);

		Assert.assertEquals(2, moderators.size());
		Assert.assertTrue(moderators.contains(new Group() {/**
			 *
			 */
			private static final long serialVersionUID = 1L;

		{ setId(1); }}));
		Assert.assertTrue(moderators.contains(new Group() {/**
			 *
			 */
			private static final long serialVersionUID = 1L;

		{ setId(2); }}));
	}
"
net.jforum.core.hibernate.ForumDAOTestCase.getLastPost,ForumDAOTestCase.java,"void getLastPost() {
		new JDBCLoader(session())
			.run(""/topicdao/firstLastPost.sql"");

		ForumRepository dao = this.newForumDao();
		Forum f = new Forum(); f.setId(1);
		Post expectedFirst = new Post(); expectedFirst.setId(2);

		Assert.assertEquals(expectedFirst, dao.getLastPost(f));
	}
"
net.jforum.core.hibernate.ForumDAOTestCase.getLastPostShouldIgnorePendingModerationPost,ForumDAOTestCase.java,"void getLastPostShouldIgnorePendingModerationPost() {
		new JDBCLoader(session())
			.run(""/forumdao/getLastPostShouldIgnorePendingModerationPost.sql"");

		ForumRepository dao = this.newForumDao();
		Forum forum = dao.get(1);
		Post expected = new Post(); expected.setId(2);
		Assert.assertEquals(expected, dao.getLastPost(forum));
	}
"
net.jforum.core.hibernate.ForumDAOTestCase.getTopicsShouldIgnoreModeratedExpectThreeResults,ForumDAOTestCase.java,"void getTopicsShouldIgnoreModeratedExpectThreeResults() {
		this.createGetTopicsPosts();

		new JDBCLoader(session())
			.run(""/forumdao/getTopicsShouldIgnoreModeratedExpectThreeResults.sql"");

		ForumRepository dao = this.newForumDao();
		Forum forum = dao.get(1);

		List<Topic> topics = dao.getTopics(forum, 0, 10);
		Assert.assertEquals(3, topics.size());

		Assert.assertEquals(""t1.3"", topics.get(0).getSubject());
		Assert.assertEquals(""t1.2"", topics.get(1).getSubject());
		Assert.assertEquals(""t1.1"", topics.get(2).getSubject());
	}
"
net.jforum.core.hibernate.ForumDAOTestCase.getTopicsPendingModerationExpectTwoResults,ForumDAOTestCase.java,"void getTopicsPendingModerationExpectTwoResults() {
		this.createGetTopicsPosts();

		ForumRepository dao = this.newForumDao();
		Forum forum = dao.get(1);

		List<Topic> moderatedTopics = dao.getTopicsPendingModeration(forum);
		Assert.assertEquals(2, moderatedTopics.size());

		Assert.assertEquals(""t1.1"", moderatedTopics.get(0).getSubject());
		Assert.assertEquals(""t1.2"", moderatedTopics.get(1).getSubject());
		Assert.assertEquals(2, moderatedTopics.get(0).getPosts().size());
		Assert.assertEquals(1, moderatedTopics.get(1).getPosts().size());
	}
"
net.jforum.core.hibernate.ForumDAOTestCase.insertShouldIncrementDisplayOrder,ForumDAOTestCase.java,"void insertShouldIncrementDisplayOrder() {
		Forum f1 = this.newForum();
		Forum f2 = this.newForum();

		ForumRepository dao = this.newForumDao();

		this.insert(f1, dao);
		this.insert(f2, dao);

		Assert.assertEquals(1, f1.getDisplayOrder());
		Assert.assertEquals(2, f2.getDisplayOrder());
	}
"
net.jforum.core.hibernate.ForumDAOTestCase.getTotalMessage,ForumDAOTestCase.java,"void getTotalMessage() {
		ForumRepository forumDao = this.newForumDao();
		PostRepository postDao = this.newPostDao();
		Post p = new Post(); p.setText(""x""); p.setSubject(""y"");
		postDao.add(p);
		Assert.assertEquals(1, forumDao.getTotalMessages());
	}
"
net.jforum.core.hibernate.ForumDAOTestCase.getTotalPosts,ForumDAOTestCase.java,"void getTotalPosts() {
		new JDBCLoader(session())
			.run(""/forumdao/getTotalPosts.sql"");

		ForumRepository dao = this.newForumDao();
		Forum forum = dao.get(1);

		int totalPosts = dao.getTotalPosts(forum);
		Assert.assertEquals(2, totalPosts);
	}
"
net.jforum.core.hibernate.ForumDAOTestCase.getTopicsShouldFetchFromForumAndFromMovedIdExpectTwoResults,ForumDAOTestCase.java,"void getTopicsShouldFetchFromForumAndFromMovedIdExpectTwoResults() {
		new JDBCLoader(session())
			.run(""/forumdao/getTopicsShouldFetchFromForumAndFromMovedIdExpectTwoResults.sql"");

		ForumRepository dao = this.newForumDao();
		Forum forum = new Forum(); forum.setId(1);
		List<Topic> topics = dao.getTopics(forum, 0, 10);
		Assert.assertEquals(2, topics.size());
	}
"
net.jforum.core.hibernate.ForumDAOTestCase.getTopicsShouldIgnoreMovedIdExpectOneResult,ForumDAOTestCase.java,"void getTopicsShouldIgnoreMovedIdExpectOneResult() {
		new JDBCLoader(session())
			.run(""/forumdao/getTopicsShouldFetchFromForumAndFromMovedIdExpectTwoResults.sql"");

		final JForumConfig config = mock(JForumConfig.class);
		
		when(config.getBoolean(ConfigKeys.QUERY_IGNORE_TOPIC_MOVED)).thenReturn(true);
		
		ForumRepository dao = this.newForumDao();
		dao.setJforumConfig(config);
		Forum forum = new Forum(); forum.setId(1);
		List<Topic> topics = dao.getTopics(forum, 0, 10);
		Assert.assertEquals(1, topics.size());
	}
"
net.jforum.core.hibernate.ForumDAOTestCase.getTotalTopicsShouldFetchOnlyNonModeratedExpectTwoResults,ForumDAOTestCase.java,"void getTotalTopicsShouldFetchOnlyNonModeratedExpectTwoResults() {
		new JDBCLoader(session())
			.run(""/forumdao/getTotalTopics.sql"");

		Forum forum = new Forum(this.newForumDao()); forum.setId(1);
		Assert.assertEquals(2, forum.getTotalTopics());
	}
"
net.jforum.core.hibernate.ForumDAOTestCase.insert,ForumDAOTestCase.java,"void insert() {
		ForumRepository dao = this.newForumDao();

		Forum f = newForum();

		this.insert(f, dao);

		Assert.assertTrue(f.getId() > 0);

		Forum loaded = dao.get(f.getId());

		Assert.assertEquals(""desc1"", loaded.getDescription());
		Assert.assertEquals(""forum1"", loaded.getName());
		Assert.assertEquals(false, loaded.isModerated());
		Assert.assertEquals(1, loaded.getDisplayOrder());
		Assert.assertNotNull(loaded.getCategory());
		Assert.assertEquals(f.getCategory().getId(), loaded.getCategory().getId());
		Assert.assertNull(f.getLastPost());
	}
"
net.jforum.core.hibernate.ForumDAOTestCase.update,ForumDAOTestCase.java,"void update() {
		ForumRepository dao = this.newForumDao();
		Forum f = newForum();
		this.insert(f, dao);
		f = dao.get(f.getId());

		// We'll change the category as well
		Category c = new Category(); c.setName(""c2"");
		CategoryRepository categoryDao = new CategoryRepository(session());
		categoryDao.add(c);

		f.setName(""changed"");
		f.setDescription(""changed description"");
		f.setModerated(true);
		f.setDisplayOrder(6);
		f.setCategory(c);

		this.update(f, dao);

		Forum loaded = dao.get(f.getId());

		Assert.assertEquals(f.getName(), loaded.getName());
		Assert.assertEquals(f.getDescription(), loaded.getDescription());
		Assert.assertEquals(f.isModerated(), loaded.isModerated());
		Assert.assertEquals(f.getDisplayOrder(), loaded.getDisplayOrder());
		Assert.assertEquals(f.getCategory().getId(), loaded.getCategory().getId());
	}
"
net.jforum.core.hibernate.ForumDAOTestCase.newForum,ForumDAOTestCase.java,"Forum newForum() {
		Forum f = new Forum();

		f.setDescription(""desc1"");
		f.setModerated(false);
		f.setName(""forum1"");
		f.setDisplayOrder(1);

		// Create the category before creating the forum
		CategoryRepository categoryDao = new CategoryRepository(session());

		Category c = new Category();
		c.setName(""c1"");

		categoryDao.add(c);

		f.setCategory(c);

		return f;
	}
"
net.jforum.core.hibernate.ForumDAOTestCase.newForumDao,ForumDAOTestCase.java,"ForumRepository newForumDao() {
		return new ForumRepository(session());
	}
"
net.jforum.core.hibernate.ForumDAOTestCase.newPostDao,ForumDAOTestCase.java,"PostRepository newPostDao() {
		return new PostRepository(session());
	}
"
net.jforum.core.hibernate.ForumDAOTestCase.createGetTopicsPosts,ForumDAOTestCase.java,"void createGetTopicsPosts() {
		new JDBCLoader(session())
			.run(""/forumdao/getTopics.sql"");

		// Topic 1
		PostRepository postDao = this.newPostDao();
		Post p1 = new Post(); p1.setSubject(""p1.1""); p1.setTopic(new Topic() {/**
			 *
			 */
			private static final long serialVersionUID = 1L;

		{ setId(1); }}); p1.setModerate(false);
		Post p2 = new Post(); p2.setSubject(""p1.2""); p2.setTopic(new Topic() {/**
			 *
			 */
			private static final long serialVersionUID = 1L;

		{ setId(1); }}); p2.setModerate(true);
		Post p3 = new Post(); p3.setSubject(""p1.3""); p3.setTopic(new Topic() {/**
			 *
			 */
			private static final long serialVersionUID = 1L;

		{ setId(1); }}); p3.setModerate(true);

		postDao.add(p1); postDao.add(p2); postDao.add(p3);

		// Topic 2
		Post p4 = new Post(); p4.setSubject(""p2.1""); p4.setTopic(new Topic() {/**
			 *
			 */
			private static final long serialVersionUID = 1L;

		{ setId(2); }}); p4.setModerate(false);
		Post p5 = new Post(); p5.setSubject(""p2.2""); p5.setTopic(new Topic() {/**
			 *
			 */
			private static final long serialVersionUID = 1L;

		{ setId(2); }}); p5.setModerate(true);

		postDao.add(p4); postDao.add(p5);

		// Topic 3
		Post p6 = new Post(); p6.setSubject(""p3.1""); p6.setTopic(new Topic() {/**
			 *
			 */
			private static final long serialVersionUID = 1L;

		{ setId(3); }}); p6.setModerate(false);
		postDao.add(p6);

		this.commit();
		this.beginTransaction();
	}
"
net.jforum.core.hibernate.AbstractDAOTestCase.insert,AbstractDAOTestCase.java,"void insert(T entity, HibernateGenericDAO<T> dao) {
		dao.add(entity);
		commit();
		beginTransaction();
	}
"
net.jforum.core.hibernate.AbstractDAOTestCase.update,AbstractDAOTestCase.java,"void update(T entity, HibernateGenericDAO<T> dao) {
		dao.update(entity);
		commit();
		beginTransaction();
	}
"
net.jforum.core.hibernate.AbstractDAOTestCase.delete,AbstractDAOTestCase.java,"void delete(T entity, HibernateGenericDAO<T> dao) {
		dao.remove(entity);
		commit();
		beginTransaction();
	}
"
net.jforum.core.hibernate.AbstractDAOTestCase.session,AbstractDAOTestCase.java,"Session session() {
		return session;
	}
"
net.jforum.core.hibernate.AbstractDAOTestCase.commit,AbstractDAOTestCase.java,"void commit() {
		session.getTransaction().commit();
	}
"
net.jforum.core.hibernate.AbstractDAOTestCase.setUp,AbstractDAOTestCase.java,"void setUp() throws Exception {
		Configuration config = new AnnotationConfiguration();
		config.configure(""/hibernate-tests.cfg.xml"");
		sessionFactory = config.buildSessionFactory();
		session = sessionFactory.openSession();
		beginTransaction();
	}
"
net.jforum.core.hibernate.AbstractDAOTestCase.beginTransaction,AbstractDAOTestCase.java,"Transaction beginTransaction() {
		return session.beginTransaction();
	}
"
net.jforum.core.hibernate.AbstractDAOTestCase.tearDown,AbstractDAOTestCase.java,"void tearDown() throws Exception {
		if(session != null) {
			session.close();
		}
		if (sessionFactory != null) {
			sessionFactory.close();
		}
	}
"
net.jforum.core.hibernate.PrivateMessageDAOTestCase.deleteFromSentShouldNotRemoveOtherUserMessage,PrivateMessageDAOTestCase.java,"void deleteFromSentShouldNotRemoveOtherUserMessage() {
		User fromUser = this.createUser(""fromUser"");
		User toUser = this.createUser(""toUser"");

		PrivateMessageRepository dao = this.newDao();
		PrivateMessage pm = this.newPm(""subject"", ""text"", fromUser, toUser);

		this.insert(pm, dao);

		List<PrivateMessage> sent = dao.getFromSentBox(fromUser);
		Assert.assertEquals(1, sent.size());

		this.delete(sent.get(0), dao);

		pm = dao.get(sent.get(0).getId());
		Assert.assertNull(pm);

		List<PrivateMessage> toUserInbox = dao.getFromInbox(toUser);
		Assert.assertEquals(1, toUserInbox.size());
	}
"
net.jforum.core.hibernate.PrivateMessageDAOTestCase.deleteFromInboxShouldNotRemoveOtherUserSentBox,PrivateMessageDAOTestCase.java,"void deleteFromInboxShouldNotRemoveOtherUserSentBox() {
		PrivateMessageRepository dao = this.newDao();

		User fromUser = this.createUser(""fromUser"");
		User toUser = this.createUser(""toUser"");

		PrivateMessage pm = this.newPm(""subject"", ""text"", fromUser, toUser);
		this.insert(pm, dao);

		List<PrivateMessage> inbox = dao.getFromInbox(toUser);
		Assert.assertEquals(1, inbox.size());

		this.delete(inbox.get(0), dao);

		pm = dao.get(inbox.get(0).getId());
		Assert.assertNull(pm);

		List<PrivateMessage> fromUserSentBox = dao.getFromSentBox(fromUser);
		Assert.assertEquals(1, fromUserSentBox.size());
	}
"
net.jforum.core.hibernate.PrivateMessageDAOTestCase.insert,PrivateMessageDAOTestCase.java,"void insert() {
		PrivateMessageRepository dao = this.newDao();

		User fromUser = this.createUser(""fromUser"");
		User toUser = this.createUser(""toUser"");

		PrivateMessage pm = this.newPm(""subject"", ""text"", fromUser, toUser);
		this.insert(pm, dao);

		Assert.assertTrue(pm.getId() > 0);

		PrivateMessage loaded = dao.get(pm.getId());
		Assert.assertNotNull(loaded);

		Assert.assertEquals(""text"", loaded.getText());
		Assert.assertEquals(""subject"", loaded.getSubject());
		Assert.assertEquals(fromUser, loaded.getFromUser());
		Assert.assertEquals(toUser, loaded.getToUser());
		Assert.assertEquals(PrivateMessageType.SENT, loaded.getType());

		// Check if the message is in the ""Sent"" folder
		List<PrivateMessage> sent = dao.getFromSentBox(fromUser);
		Assert.assertEquals(1, sent.size());
		Assert.assertEquals(loaded.getId(), sent.get(0).getId());

		// Check if the message is in the ""Inbox"" folder of the target user
		List<PrivateMessage> inbox = dao.getFromInbox(toUser);
		Assert.assertEquals(1, inbox.size());

		loaded = inbox.get(0);

		Assert.assertEquals(""text"", loaded.getText());
		Assert.assertEquals(""subject"", loaded.getSubject());
		Assert.assertEquals(fromUser, loaded.getFromUser());
		Assert.assertEquals(toUser, loaded.getToUser());
		Assert.assertEquals(PrivateMessageType.NEW, loaded.getType());
	}
"
net.jforum.core.hibernate.PrivateMessageDAOTestCase.selectFromInboxExpectZeroResults,PrivateMessageDAOTestCase.java,"void selectFromInboxExpectZeroResults() {
		PrivateMessageRepository dao = this.newDao();

		User user = new User(); user.setId(99);

		Assert.assertEquals(0, dao.getFromInbox(user).size());
	}
"
net.jforum.core.hibernate.PrivateMessageDAOTestCase.selectFromSentExpectZeroResults,PrivateMessageDAOTestCase.java,"void selectFromSentExpectZeroResults() {
		PrivateMessageRepository dao = this.newDao();

		User user = new User(); user.setId(88);

		Assert.assertEquals(0, dao.getFromSentBox(user).size());
	}
"
net.jforum.core.hibernate.PrivateMessageDAOTestCase.updateExpectsException,PrivateMessageDAOTestCase.java,"void updateExpectsException() {
		this.newDao().update(new PrivateMessage());
	}
"
net.jforum.core.hibernate.PrivateMessageDAOTestCase.newPm,PrivateMessageDAOTestCase.java,"PrivateMessage newPm(String subject, String text, User fromUser, User toUser) {
		PrivateMessage pm = new PrivateMessage();

		pm.setSubject(subject);
		pm.setText(text);

		pm.setFromUser(fromUser);
		pm.setToUser(toUser);

		return pm;
	}
"
net.jforum.core.hibernate.PrivateMessageDAOTestCase.newDao,PrivateMessageDAOTestCase.java,"PrivateMessageRepository newDao() {
		return new PrivateMessageRepository(session());
	}
"
net.jforum.core.hibernate.PrivateMessageDAOTestCase.createUser,PrivateMessageDAOTestCase.java,"User createUser(String username) {
		User user = new User();
		user.setUsername(username);

		UserRepository dao = new UserRepository(session());
		dao.add(user);

		return user;
	}
"
net.jforum.core.hibernate.TopicDAOTestCase.saveTopicWithPollExpectingCascadeToWork,TopicDAOTestCase.java,"void saveTopicWithPollExpectingCascadeToWork() {
		Topic t = new Topic(); t.setForum(null);

		Poll p = new Poll(); p.setLabel(""poll1"");
		PollOption o1 = new PollOption();
		o1.setPoll(p);
		o1.setText(""o1"");

		PollOption o2 = new PollOption();
		o2.setPoll(p);
		o2.setText(""o2"");

		p.setOptions(Arrays.asList(o1, o2));

		t.setPoll(p);

		TopicRepository dao = this.newTopicDao();
		this.insert(t, dao);

		t = dao.get(t.getId());
		Assert.assertNotNull(t.getPoll());
		Assert.assertEquals(""poll1"", t.getPoll().getLabel());
		Assert.assertEquals(2, t.getPoll().getOptions().size());
	}
"
net.jforum.core.hibernate.TopicDAOTestCase.removeShouldDeletePostsAndUpdateUserTotalMessages,TopicDAOTestCase.java,"void removeShouldDeletePostsAndUpdateUserTotalMessages() {
		new JDBCLoader(session())
			.run(""/topicdao/removeShouldDeletePostsAndUpdateUserTotalMessages.sql"");

		TopicRepository dao = this.newTopicDao();
		Topic topic = dao.get(1);

		Assert.assertEquals(3, dao.getTotalPosts(topic));

		this.delete(topic, dao);

		Assert.assertEquals(0, dao.getTotalPosts(topic));

		UserRepository userDao = this.newUserDao();
		Assert.assertEquals(1, userDao.get(1).getTotalPosts());
	}
"
net.jforum.core.hibernate.TopicDAOTestCase.getPostsShouldNotFetchModeratedExpectTwoResults,TopicDAOTestCase.java,"void getPostsShouldNotFetchModeratedExpectTwoResults() {
		new JDBCLoader(session()) .run(""/postdao/dump.sql"");

		PostRepository postDao = this.newPostDao();
		Post post1 = this.newPost(); postDao.add(post1);
		Post post2 = this.newPost(); postDao.add(post2);
		Post post3 = this.newPost(); post3.setModerate(true); postDao.add(post3);

		TopicRepository topicDao = this.newTopicDao();
		Topic topic = topicDao.get(1);
		List<Post> posts = topicDao.getPosts(topic, 0, 10);

		Assert.assertEquals(2, posts.size());
		Assert.assertTrue(posts.contains(post1));
		Assert.assertTrue(posts.contains(post2));
	}
"
net.jforum.core.hibernate.TopicDAOTestCase.totalPostsExpectTwoResults,TopicDAOTestCase.java,"void totalPostsExpectTwoResults() {
		new JDBCLoader(session())
			.run(""/topicdao/totalPostsExpectTwoResults.sql"");

		TopicRepository dao = this.newTopicDao();
		Topic topic = dao.get(1);
		Assert.assertEquals(2, dao.getTotalPosts(topic));
	}
"
net.jforum.core.hibernate.TopicDAOTestCase.lastPost,TopicDAOTestCase.java,"void lastPost() {
		new JDBCLoader(session())
			.run(""/topicdao/firstLastPost.sql"");

		TopicRepository dao = this.newTopicDao();
		Topic t = new Topic(); t.setId(1);
		Post expectedFirst = new Post(); expectedFirst.setId(2);

		Assert.assertEquals(expectedFirst, dao.getLastPost(t));
	}
"
net.jforum.core.hibernate.TopicDAOTestCase.firstPost,TopicDAOTestCase.java,"void firstPost() {
		new JDBCLoader(session())
			.run(""/topicdao/firstLastPost.sql"");

		TopicRepository dao = this.newTopicDao();
		Topic t = new Topic(); t.setId(1);
		Post expectedFirst = new Post(); expectedFirst.setId(1);

		Assert.assertEquals(expectedFirst, dao.getFirstPost(t));
	}
"
net.jforum.core.hibernate.TopicDAOTestCase.newUserDao,TopicDAOTestCase.java,"UserRepository newUserDao() {
		return new UserRepository(session());
	}
"
net.jforum.core.hibernate.TopicDAOTestCase.newPostDao,TopicDAOTestCase.java,"PostRepository newPostDao() {
		return new PostRepository(session());
	}
"
net.jforum.core.hibernate.TopicDAOTestCase.newTopicDao,TopicDAOTestCase.java,"TopicRepository newTopicDao() {
		return new TopicRepository(session());
	}
"
net.jforum.core.hibernate.TopicDAOTestCase.newPost,TopicDAOTestCase.java,"Post newPost() {
		Post post = new Post();
		post.setSubject(""teste"");
		post.setText(""teste"");
		post.setUser(this.newUserDao().get(1));
		post.setTopic(this.newTopicDao().get(1));

		return post;
	}
"
net.jforum.core.hibernate.RankingDAOTestCase.delete,RankingDAOTestCase.java,"void delete() {
		RankingRepository dao = this.newDao();
		Ranking r = this.createRanking(""image1"", ""title1"", 7, false);

		this.insert(r, dao);
		this.delete(r, dao);

		Assert.assertNull(dao.get(r.getId()));
	}
"
net.jforum.core.hibernate.RankingDAOTestCase.update,RankingDAOTestCase.java,"void update() {
		RankingRepository dao = this.newDao();

		Ranking r = this.createRanking(""image1"", ""title1"", 7, false);

		this.insert(r, dao);

		Ranking loaded = dao.get(r.getId());
		loaded.setImage(""image 1.1"");
		loaded.setTitle(""title1.1"");
		loaded.setMin(8);
		loaded.setSpecial(true);

		this.update(loaded, dao);

		loaded = dao.get(r.getId());

		Assert.assertEquals(""image 1.1"", loaded.getImage());
		Assert.assertEquals(""title1.1"", loaded.getTitle());
		Assert.assertEquals(8, loaded.getMin());
		Assert.assertEquals(true, loaded.isSpecial());
	}
"
net.jforum.core.hibernate.RankingDAOTestCase.getAllRankingsExpectEmptyList,RankingDAOTestCase.java,"void getAllRankingsExpectEmptyList() {
		RankingRepository dao = this.newDao();
		List<Ranking> rankings = dao.getAllRankings();
		Assert.assertNotNull(rankings);
		Assert.assertEquals(0, rankings.size());
	}
"
net.jforum.core.hibernate.RankingDAOTestCase.getAllRankingsExpectTwoRecordsOrderedAsc,RankingDAOTestCase.java,"void getAllRankingsExpectTwoRecordsOrderedAsc() {
		RankingRepository dao = this.newDao();

		this.insert(this.createRanking(""img"", ""r1"", 1, false), dao);
		this.insert(this.createRanking(""img2"", ""r2"", 2, false), dao);

		List<Ranking> rankings = dao.getAllRankings();

		Assert.assertEquals(2, rankings.size());
		Assert.assertEquals(""r1"", rankings.get(0).getTitle());
		Assert.assertEquals(""r2"", rankings.get(1).getTitle());
	}
"
net.jforum.core.hibernate.RankingDAOTestCase.insert,RankingDAOTestCase.java,"void insert() {
		RankingRepository dao = this.newDao();

		Ranking r = this.createRanking(""some image"", ""ranking title"", 10, true);

		this.insert(r, dao);

		Assert.assertTrue(r.getId() > 0);

		Ranking loaded = dao.get(r.getId());
		Assert.assertEquals(""some image"", loaded.getImage());
		Assert.assertEquals(""ranking title"", loaded.getTitle());
		Assert.assertEquals(10, loaded.getMin());
		Assert.assertEquals(true, loaded.isSpecial());
	}
"
net.jforum.core.hibernate.RankingDAOTestCase.newDao,RankingDAOTestCase.java,"RankingRepository newDao() {
		return new RankingRepository(session());
	}
"
net.jforum.core.hibernate.RankingDAOTestCase.createRanking,RankingDAOTestCase.java,"Ranking createRanking(String image, String title, int min, boolean special) {
		Ranking r = new Ranking();

		r.setImage(image);
		r.setMin(min);
		r.setSpecial(special);
		r.setTitle(title);

		return r;
	}
"
net.jforum.core.hibernate.PostDAOTestCase.countPreviousPostsShouldReturn6,PostDAOTestCase.java,"void countPreviousPostsShouldReturn6() {
		new JDBCLoader(session())
			.run(""/postdao/countPreviousPosts.sql"");
		this.commit();
		this.beginTransaction();

		PostRepository dao = this.newDao();
		int total = dao.countPreviousPosts(6);
		Assert.assertEquals(6, total);
	}
"
net.jforum.core.hibernate.PostDAOTestCase.countPreviousPostsShouldReturn3,PostDAOTestCase.java,"void countPreviousPostsShouldReturn3() {
		new JDBCLoader(session())
			.run(""/postdao/countPreviousPosts.sql"");
		this.commit();
		this.beginTransaction();

		PostRepository dao = this.newDao();
		int total = dao.countPreviousPosts(3);
		Assert.assertEquals(3, total);
	}
"
net.jforum.core.hibernate.PostDAOTestCase.add,PostDAOTestCase.java,"void add() {
		new JDBCLoader(session()) .run(""/postdao/dump.sql"");

		PostRepository dao = this.newDao();
		Post post = this.newPost();
		this.insert(post, dao);

		Assert.assertTrue(post.getId() > 0);
	}
"
net.jforum.core.hibernate.PostDAOTestCase.newPost,PostDAOTestCase.java,"Post newPost() {
		Post post = new Post();
		post.setSubject(""teste"");
		post.setText(""teste"");
		post.setUser(this.newUserDao().get(1));
		post.setTopic(this.newTopicDao().get(1));

		return post;
	}
"
net.jforum.core.hibernate.PostDAOTestCase.newTopicDao,PostDAOTestCase.java,"TopicRepository newTopicDao() {
		return new TopicRepository(session());
	}
"
net.jforum.core.hibernate.PostDAOTestCase.newUserDao,PostDAOTestCase.java,"UserRepository newUserDao() {
		return new UserRepository(session());
	}
"
net.jforum.core.hibernate.PostDAOTestCase.newDao,PostDAOTestCase.java,"PostRepository newDao() {
		return new PostRepository(session());
	}
"
net.jforum.core.hibernate.GroupDAOTestCase.removeAllPermissions,GroupDAOTestCase.java,"void removeAllPermissions() {
		GroupRepository dao = this.newDao();
		Group group = this.newGroup();

		Role r1 = new Role(); r1.setName(""r1"");
		Role r2 = new Role(); r2.setName(""r2"");
		r2.addRoleValue(1);
		r2.addRoleValue(2);

		group.addRole(r1);
		group.addRole(r2);

		this.insert(group, dao);

		group = dao.get(group.getId());
		Assert.assertEquals(2, group.getRoles().size());

		group.getRoles().clear();
		this.update(group, dao);

		group = dao.get(group.getId());
		Assert.assertEquals(0, group.getRoles().size());
	}
"
net.jforum.core.hibernate.GroupDAOTestCase.clearAllRolesInsertOneNewUseJustOneUpdate,GroupDAOTestCase.java,"void clearAllRolesInsertOneNewUseJustOneUpdate() {
		GroupRepository dao = this.newDao();
		Group group = this.newGroup();

		Role role = new Role(); role.setName(""r2"");
		role.addRoleValue(1);
		role.addRoleValue(2);

		group.addRole(role);

		this.insert(group, dao);

		group = dao.get(group.getId());
		Assert.assertEquals(1, group.getRoles().size());

		group.getRoles().clear();
		role = new Role(); role.setName(""r3"");
		group.addRole(role);

		this.update(group, dao);

		group = dao.get(group.getId());
		Assert.assertEquals(1, group.getRoles().size());
		Assert.assertEquals(""r3"", group.getRoles().get(0).getName());
	}
"
net.jforum.core.hibernate.GroupDAOTestCase.addRoleWithoutRoleValue,GroupDAOTestCase.java,"void addRoleWithoutRoleValue() {
		GroupRepository dao = this.newDao();
		Group group = this.newGroup();
		this.insert(group, dao);

		Role role = new Role(); role.setName(""r1"");
		group.addRole(role);

		this.update(group, dao);

		Group loadedGroup = dao.get(group.getId());
		Assert.assertEquals(1, loadedGroup.getRoles().size());
		Assert.assertEquals(0, loadedGroup.getRoles().get(0).getRoleValues().size());
	}
"
net.jforum.core.hibernate.GroupDAOTestCase.addTwoRolesOneWithRoleValues,GroupDAOTestCase.java,"void addTwoRolesOneWithRoleValues() {
		GroupRepository dao = this.newDao();
		Group group = this.newGroup();
		this.insert(group, dao);

		// Role 1
		Role role1 = new Role(); role1.setName(""r1"");
		role1.addRoleValue(1);
		role1.addRoleValue(5);
		role1.addRoleValue(9);

		group.addRole(role1);

		// Role 2
		Role role2 = new Role(); role2.setName(""r2"");
		group.addRole(role2);

		this.update(group, dao);

		Group loaded = dao.get(group.getId());

		Assert.assertEquals(2, loaded.getRoles().size());
		role1 = loaded.getRoles().get(0);

		Assert.assertEquals(3, role1.getRoleValues().size());
		Assert.assertTrue(role1.getRoleValues().contains(1));
		Assert.assertTrue(role1.getRoleValues().contains(5));
		Assert.assertTrue(role1.getRoleValues().contains(9));
		Assert.assertEquals(0, loaded.getRoles().get(1).getRoleValues().size());
	}
"
net.jforum.core.hibernate.GroupDAOTestCase.insert,GroupDAOTestCase.java,"void insert() {
		GroupRepository dao = this.newDao();
		Group group = this.newGroup();

		this.insert(group, dao);

		Assert.assertTrue(group.getId() > 0);

		Group loaded = dao.get(group.getId());

		Assert.assertEquals(group.getDescription(), loaded.getDescription());
		Assert.assertEquals(group.getName(), loaded.getName());
	}
"
net.jforum.core.hibernate.GroupDAOTestCase.update,GroupDAOTestCase.java,"void update() {
		GroupRepository dao = this.newDao();
		Group g = this.newGroup();
		this.insert(g, dao);

		g = dao.get(g.getId());

		g.setName(""changed name"");
		g.setDescription(""changed description"");

		this.update(g, dao);

		Group loaded = dao.get(g.getId());

		Assert.assertEquals(g.getName(), loaded.getName());
		Assert.assertEquals(g.getDescription(), loaded.getDescription());
	}
"
net.jforum.core.hibernate.GroupDAOTestCase.delete,GroupDAOTestCase.java,"void delete() {
		GroupRepository dao = this.newDao();
		Group parent = this.newGroup();

		this.insert(parent, dao);

		Group loaded = dao.get(parent.getId());
		Assert.assertNotNull(loaded);

		this.delete(loaded, dao);

		Assert.assertNull(dao.get(parent.getId()));
	}
"
net.jforum.core.hibernate.GroupDAOTestCase.allGroups,GroupDAOTestCase.java,"void allGroups() {
		GroupRepository dao = this.newDao();

		Group g1 = new Group(); g1.setName(""g1""); this.insert(g1, dao);
		Group g2 = new Group(); g1.setName(""g2""); this.insert(g2, dao);
		Group g3 = new Group(); g1.setName(""g3""); this.insert(g3, dao);

		List<Group> groups = dao.getAllGroups();
		Assert.assertEquals(3, groups.size());
	}
"
net.jforum.core.hibernate.GroupDAOTestCase.newGroup,GroupDAOTestCase.java,"Group newGroup() {
		Group group = new Group();

		group.setDescription(""description"");
		group.setName(""name"");

		return group;
	}
"
net.jforum.core.hibernate.GroupDAOTestCase.newDao,GroupDAOTestCase.java,"GroupRepository newDao() {
		return new GroupRepository(session());
	}
"
net.jforum.core.hibernate.RecentTopicsDAOTestCase.expectZeroResultsShouldReturnEmptyList,RecentTopicsDAOTestCase.java,"void expectZeroResultsShouldReturnEmptyList() {
		RecentTopicsRepository dao = this.newDao();
		List<Topic> list = dao.getNewTopics(10);
		Assert.assertEquals(0, list.size());

		dao = this.newDao();
		list = dao.getUpdatedTopics(10);
		Assert.assertEquals(0, list.size());

		dao = this.newDao();
		list = dao.getHotTopics(10);
		Assert.assertEquals(0, list.size());
	}
"
net.jforum.core.hibernate.RecentTopicsDAOTestCase.postsInModerationExpectOneResult,RecentTopicsDAOTestCase.java,"void postsInModerationExpectOneResult() {
		this.loadDump(""/recenttopics/dump.sql"");
		this.loadDump(""/recenttopics/moderation.sql"");

		RecentTopicsRepository dao = this.newDao();
		List<Topic> list = dao.getNewTopics(10);

		Assert.assertEquals(1, list.size());
		Assert.assertEquals(6, list.get(0).getId());
	}
"
net.jforum.core.hibernate.RecentTopicsDAOTestCase.recentTopics,RecentTopicsDAOTestCase.java,"void recentTopics() {
		this.loadDump(""/recenttopics/dump.sql"");

		RecentTopicsRepository dao = this.newDao();
		List<Topic> list = dao.getNewTopics(10);
		Assert.assertEquals(8, list.size());

		Assert.assertEquals(8, list.get(0).getId());
		Assert.assertEquals(7, list.get(1).getId());
		Assert.assertEquals(6, list.get(2).getId());
		Assert.assertEquals(5, list.get(3).getId());
		Assert.assertEquals(4, list.get(4).getId());
		Assert.assertEquals(3, list.get(5).getId());
		Assert.assertEquals(2, list.get(6).getId());
		Assert.assertEquals(1, list.get(7).getId());

		Assert.assertEquals(4, list.get(0).getFirstPost().getId());
		Assert.assertEquals(12, list.get(0).getLastPost().getId());
		Assert.assertEquals(2, list.get(0).getFirstPost().getUser().getId());
		Assert.assertEquals(2, list.get(0).getLastPost().getUser().getId());
		Assert.assertEquals(3, list.get(0).getForum().getId());

		Assert.assertEquals(3, list.get(1).getFirstPost().getId());
		Assert.assertEquals(11, list.get(1).getLastPost().getId());
		Assert.assertEquals(2, list.get(1).getFirstPost().getUser().getId());
		Assert.assertEquals(2, list.get(1).getLastPost().getUser().getId());
		Assert.assertEquals(2, list.get(1).getForum().getId());

		Assert.assertEquals(2, list.get(2).getFirstPost().getId());
		Assert.assertEquals(10, list.get(2).getLastPost().getId());
		Assert.assertEquals(1, list.get(2).getFirstPost().getUser().getId());
		Assert.assertEquals(1, list.get(2).getLastPost().getUser().getId());
		Assert.assertEquals(1, list.get(2).getForum().getId());

		Assert.assertEquals(1, list.get(3).getFirstPost().getId());
		Assert.assertEquals(9, list.get(3).getLastPost().getId());
		Assert.assertEquals(1, list.get(3).getFirstPost().getUser().getId());
		Assert.assertEquals(2, list.get(3).getLastPost().getUser().getId());
		Assert.assertEquals(3, list.get(3).getForum().getId());

		Assert.assertEquals(8, list.get(4).getFirstPost().getId());
		Assert.assertEquals(8, list.get(4).getLastPost().getId());
		Assert.assertEquals(1, list.get(4).getFirstPost().getUser().getId());
		Assert.assertEquals(1, list.get(4).getLastPost().getUser().getId());
		Assert.assertEquals(3, list.get(4).getForum().getId());

		Assert.assertEquals(7, list.get(5).getFirstPost().getId());
		Assert.assertEquals(7, list.get(5).getLastPost().getId());
		Assert.assertEquals(2, list.get(5).getFirstPost().getUser().getId());
		Assert.assertEquals(2, list.get(5).getLastPost().getUser().getId());
		Assert.assertEquals(2, list.get(5).getForum().getId());

		Assert.assertEquals(6, list.get(6).getFirstPost().getId());
		Assert.assertEquals(6, list.get(6).getLastPost().getId());
		Assert.assertEquals(1, list.get(6).getFirstPost().getUser().getId());
		Assert.assertEquals(1, list.get(6).getLastPost().getUser().getId());
		Assert.assertEquals(1, list.get(6).getForum().getId());

		Assert.assertEquals(5, list.get(7).getFirstPost().getId());
		Assert.assertEquals(5, list.get(7).getLastPost().getId());
		Assert.assertEquals(1, list.get(7).getFirstPost().getUser().getId());
		Assert.assertEquals(1, list.get(7).getLastPost().getUser().getId());
		Assert.assertEquals(1, list.get(7).getForum().getId());
	}
"
net.jforum.core.hibernate.RecentTopicsDAOTestCase.loadDump,RecentTopicsDAOTestCase.java,"void loadDump(String file) {
		session().beginTransaction();
		JDBCLoader loader = new JDBCLoader(session());
		loader.run(file);
		session().getTransaction().commit();
		session().beginTransaction();
	}
"
net.jforum.core.hibernate.RecentTopicsDAOTestCase.newDao,RecentTopicsDAOTestCase.java,"RecentTopicsRepository newDao() {
		return new RecentTopicsRepository(session());
	}
"
net.jforum.core.hibernate.RSSDAOTestCase.getForumTopics,RSSDAOTestCase.java,"void getForumTopics() {
		new JDBCLoader(session())
			.run(""/rssdao/getForumTopics.sql"");

		RSSRepository dao = this.newDao();
		Forum forum = new Forum(); forum.setId(1);
		List<Topic> topics = dao.getForumTopics(forum, 10);

		assertEquals(3, topics.size());

		assertEquals(2, topics.get(0).getId());
		assertEquals(1, topics.get(1).getId());
		assertEquals(3, topics.get(2).getId());
	}
"
net.jforum.core.hibernate.RSSDAOTestCase.newDao,RSSDAOTestCase.java,"RSSRepository newDao() {
		return new RSSRepository(session());
	}
"
net.jforum.core.hibernate.SessionDAOTestCase.addNew,SessionDAOTestCase.java,"void addNew() {
		SessionRepository dao = this.newDao();
		assertNull(dao.get(1));
		this.insert(this.newSession(1), dao);
		assertNotNull(dao.get(1));
	}
"
net.jforum.core.hibernate.SessionDAOTestCase.updateDoesNotExistShouldAdd,SessionDAOTestCase.java,"void updateDoesNotExistShouldAdd() {
		SessionRepository dao = this.newDao();
		assertNull(dao.get(1));
		this.update(this.newSession(1), dao);
		assertNotNull(dao.get(1));
	}
"
net.jforum.core.hibernate.SessionDAOTestCase.newSession,SessionDAOTestCase.java,"Session newSession(int userId) {
		Session session = new Session();

		session.setUserId(userId);

		return session;
	}
"
net.jforum.core.hibernate.SessionDAOTestCase.newDao,SessionDAOTestCase.java,"SessionRepository newDao() {
		return new SessionRepository(session());
	}
"
net.jforum.core.hibernate.ConfigDAOTestCase.update,ConfigDAOTestCase.java,"void update() {
		ConfigRepository dao = this.newDao();
		Config c = this.newConfig(""k1"", ""v1""); this.insert(c, dao);
		c = dao.get(c.getId());
		c.setValue(""new value"");
		this.update(c, dao);
		Config loaded = dao.get(c.getId());
		Assert.assertEquals(""k1"", loaded.getName());
		Assert.assertEquals(""new value"", loaded.getValue());
	}
"
net.jforum.core.hibernate.ConfigDAOTestCase.getByNameUsingInvalidKeyExpectsNul,ConfigDAOTestCase.java,"void getByNameUsingInvalidKeyExpectsNul() {
		ConfigRepository dao = this.newDao();
		Assert.assertNull(dao.getByName(""some invalid key name""));
	}
"
net.jforum.core.hibernate.ConfigDAOTestCase.getByNameExpectSuccess,ConfigDAOTestCase.java,"void getByNameExpectSuccess() {

		ConfigRepository dao = this.newDao();
		Config c = this.newConfig(""k1"", ""v1""); this.insert(c, dao);
		Config loaded = dao.getByName(""k1"");
		Assert.assertNotNull(loaded);
		Assert.assertEquals(c.getId(), loaded.getId());
		Assert.assertEquals(c.getName(), loaded.getName());
		Assert.assertEquals(c.getValue(), loaded.getValue());
	}
"
net.jforum.core.hibernate.ConfigDAOTestCase.insert,ConfigDAOTestCase.java,"void insert() {
		ConfigRepository dao = this.newDao();
		Config c = this.newConfig(""name1"", ""value1""); this.insert(c, dao);

		Assert.assertTrue(c.getId() > 0);

		Config loaded = dao.get(c.getId());
		Assert.assertEquals(c.getName(), loaded.getName());
		Assert.assertEquals(c.getValue(), loaded.getValue());
	}
"
net.jforum.core.hibernate.ConfigDAOTestCase.newConfig,ConfigDAOTestCase.java,"Config newConfig(String name, String value) {
		Config c = new Config();

		c.setName(name);
		c.setValue(value);

		return c;
	}
"
net.jforum.core.hibernate.ConfigDAOTestCase.newDao,ConfigDAOTestCase.java,"ConfigRepository newDao() {
		return new ConfigRepository(session());
	}
"
net.jforum.core.hibernate.CategoryDAOTestCase.insertShouldIncrementDisplayOrder,CategoryDAOTestCase.java,"void insertShouldIncrementDisplayOrder() {
		Category c1 = this.newCategory(""c1"", false);
		Category c2 = this.newCategory(""c2"", false);

		CategoryRepository dao = this.newDao();

		this.insert(c1, dao);
		this.insert(c2, dao);

		Assert.assertEquals(1, c1.getDisplayOrder());
		Assert.assertEquals(2, c2.getDisplayOrder());
	}
"
net.jforum.core.hibernate.CategoryDAOTestCase.insert,CategoryDAOTestCase.java,"void insert() {
		String name = ""category test 1"";
		boolean moderated = false;

		Category c = this.newCategory(name, moderated);
		CategoryRepository dao = this.newDao();

		this.insert(c, dao);
		Assert.assertTrue(c.getId() > 0);

		Category loaded = dao.get(c.getId());

		Assert.assertNotNull(loaded);
		Assert.assertEquals(name, loaded.getName());
		Assert.assertEquals(moderated, c.isModerated());
		Assert.assertEquals(1, c.getDisplayOrder());
	}
"
net.jforum.core.hibernate.CategoryDAOTestCase.updateChangingAnInstanceLoadedFromTheDb,CategoryDAOTestCase.java,"void updateChangingAnInstanceLoadedFromTheDb() {
		CategoryRepository dao = this.newDao();
		Category c = this.newCategory(""c1"", false);

		this.insert(c, dao);

		Category loaded = dao.get(c.getId());

		loaded.setName(""changed"");
		loaded.setModerated(true);
		loaded.setDisplayOrder(3);

		this.update(loaded, dao);

		loaded = dao.get(c.getId());

		Assert.assertEquals(""changed"", loaded.getName());
		Assert.assertEquals(true, loaded.isModerated());
		Assert.assertEquals(3, loaded.getDisplayOrder());
	}
"
net.jforum.core.hibernate.CategoryDAOTestCase.updateChangingAnInstanceCreatedByHandUsingARealIdShouldFail,CategoryDAOTestCase.java,"void updateChangingAnInstanceCreatedByHandUsingARealIdShouldFail() {
		CategoryRepository dao = this.newDao();
		Category c = this.newCategory(""c1"", false);
		this.insert(c, dao);
		this.commit();
		
		int id = c.getId();
		
		Category c2 = new Category();
		c2.setId(id);
		c2.setName(""c2"");
		c2.setModerated(true);
		c2.setDisplayOrder(2);

		this.update(c2, dao);

		Category loaded = dao.get(id);
		Assert.assertEquals(""c2"", loaded.getName());
		Assert.assertEquals(true, loaded.isModerated());
		Assert.assertEquals(2, loaded.getDisplayOrder());
	}
"
net.jforum.core.hibernate.CategoryDAOTestCase.delete,CategoryDAOTestCase.java,"void delete() {
		CategoryRepository dao = this.newDao();
		Category c = this.newCategory(""c3"", false);
		this.insert(c, dao);

		c = dao.get(c.getId());
		this.delete(c, dao);

		c = dao.get(c.getId());
		Assert.assertNull(c);
	}
"
net.jforum.core.hibernate.CategoryDAOTestCase.selectAll,CategoryDAOTestCase.java,"void selectAll() {
		CategoryRepository dao = this.newDao();

		for (int i = 0; i < 3; i++) {
			this.insert(this.newCategory(""name"" + i, false), dao);
		}

		List<Category> categories = dao.getAllCategories();

		Assert.assertEquals(3, categories.size());

		int lastDisplayOrder = -1;

		for (int i = 0; i < 3; i++) {
			Category c = categories.get(i);

			Assert.assertEquals(""name"" + i, c.getName());
			Assert.assertTrue(c.getDisplayOrder() > lastDisplayOrder);
			lastDisplayOrder = c.getDisplayOrder();
		}
	}
"
net.jforum.core.hibernate.CategoryDAOTestCase.insertThreeCategoriesWithTwoForumsEachExpectSelectInCorrectOrder,CategoryDAOTestCase.java,"void insertThreeCategoriesWithTwoForumsEachExpectSelectInCorrectOrder() {
		CategoryRepository dao = this.newDao();
		ForumRepository forumDao = new ForumRepository(session());
		int totalCategories = 3;

		for (int i = 1; i <= totalCategories; i++) {
			Category category = this.newCategory(""name"" + i, false);
			this.insert(category, dao);

			forumDao.add(this.newForum(String.format(""f%d.1"", i), category));
			forumDao.add(this.newForum(String.format(""f%d.2"", i), category));
		}

		List<Category> categories = dao.getAllCategories();

		Assert.assertEquals(totalCategories, categories.size());

		String[] expectedForumNames = { ""f1.1"", ""f1.2"", ""f2.1"", ""f2.2"", ""f3.1"", ""f3.2"" };

		int lastDisplayOrder = -1;

		int forumCounter = 0;
		int nameCounter = 1;
		for (Category c : categories) {
			this.injectRepository(c);

			Assert.assertEquals(""name"" + nameCounter++, c.getName());
			Assert.assertTrue(c.getDisplayOrder() > lastDisplayOrder);

			List<Forum> forums = c.getForums();
			Assert.assertEquals(2, forums.size());

			Assert.assertEquals(expectedForumNames[forumCounter], forums.get(0).getName());
			Assert.assertEquals(expectedForumNames[forumCounter + 1], forums.get(1).getName());

			lastDisplayOrder = c.getDisplayOrder();

			forumCounter += 2;
		}
	}
"
net.jforum.core.hibernate.CategoryDAOTestCase.injectRepository,CategoryDAOTestCase.java,"void injectRepository(Category c) {
		Field[] fields = c.getClass().getDeclaredFields();

		try {
			for (Field field: fields) {
				if (field.getName().equals(""repository"")) {
					field.setAccessible(true);
					field.set(c, this.newDao());
					break;
				}
			}
		}
		catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
"
net.jforum.core.hibernate.CategoryDAOTestCase.createCategoryAndTwoForumsGetCategoryExpectForumsInCorrectOrder,CategoryDAOTestCase.java,"void createCategoryAndTwoForumsGetCategoryExpectForumsInCorrectOrder() {
		CategoryRepository dao = this.newDao();
		Category category = this.newCategory(""cat1"", false);
		this.insert(category, dao);

		ForumRepository forumDao = new ForumRepository(session());

		forumDao.add(this.newForum(""f1"", category));
		forumDao.add(this.newForum(""f2"", category));

		category = dao.get(category.getId());
		this.injectRepository(category);

		Assert.assertNotNull(category.getForums());
		Assert.assertEquals(2, category.getForums().size());
		Assert.assertEquals(""f1"", category.getForums().get(0).getName());
		Assert.assertEquals(""f2"", category.getForums().get(1).getName());
	}
"
net.jforum.core.hibernate.CategoryDAOTestCase.newForum,CategoryDAOTestCase.java,"Forum newForum(String name, Category category) {
		Forum f = new Forum();

		f.setName(name);
		f.setCategory(category);

		return f;
	}
"
net.jforum.core.hibernate.CategoryDAOTestCase.newCategory,CategoryDAOTestCase.java,"Category newCategory(String name, boolean moderated) {
		Category c = new Category(this.newDao());

		c.setName(name);
		c.setModerated(moderated);

		return c;
	}
"
net.jforum.core.hibernate.CategoryDAOTestCase.newDao,CategoryDAOTestCase.java,"CategoryRepository newDao() {
		return new CategoryRepository(session());
	}
"
net.jforum.core.hibernate.AvatarDAOTestCase.getAllSmiliesExpectTwoResults,AvatarDAOTestCase.java,"void getAllSmiliesExpectTwoResults() {
		AvatarRepository dao = this.newDao();

		this.insert(this.createAvatar(120,150, ""diskname1""), dao);
		this.insert(this.createAvatar(130,140, ""diskname2""), dao);

		List<Avatar> avatars = dao.getAll();

		Assert.assertNotNull(avatars);
		Assert.assertEquals(2, avatars.size());
	}
"
net.jforum.core.hibernate.AvatarDAOTestCase.insert,AvatarDAOTestCase.java,"void insert() {
		AvatarRepository dao = this.newDao();
		Avatar s = this.createAvatar(120,150, ""diskname"");
		this.insert(s, dao);

		Assert.assertTrue(s.getId() > 0);

		Avatar loaded = dao.get(s.getId());

		Assert.assertNotNull(loaded);
		Assert.assertEquals(new Integer(120), loaded.getWidth());
		Assert.assertEquals(new Integer(150), loaded.getHeight());
		Assert.assertEquals(""diskname"", loaded.getFileName());
	}
"
net.jforum.core.hibernate.AvatarDAOTestCase.getAllAvatarsExpectEmtpyList,AvatarDAOTestCase.java,"void getAllAvatarsExpectEmtpyList() {
		AvatarRepository dao = this.newDao();
		Assert.assertEquals(0, dao.getAll().size());
	}
"
net.jforum.core.hibernate.AvatarDAOTestCase.newDao,AvatarDAOTestCase.java,"AvatarRepository newDao() {
		return new AvatarRepository(session());
	}
"
net.jforum.core.hibernate.AvatarDAOTestCase.createAvatar,AvatarDAOTestCase.java,"Avatar createAvatar(Integer width,Integer height, String diskName) {
		Avatar a = new Avatar();

		a.setAvatarType(AvatarType.AVATAR_GALLERY);
		a.setHeight(height);
		a.setWidth(width);
		a.setFileName(diskName);

		return a;
	}
"
net.jforum.core.hibernate.tests.EmptyCache.get,EmptyCache.java,"Object get(Object key) throws CacheException {
		return null;
	}
"
net.jforum.core.hibernate.tests.EmptyCache.getElementCountInMemory,EmptyCache.java,"long getElementCountInMemory() {
		return 0;
	}
"
net.jforum.core.hibernate.tests.EmptyCache.getElementCountOnDisk,EmptyCache.java,"long getElementCountOnDisk() {
		return 0;
	}
"
net.jforum.core.hibernate.tests.EmptyCache.getRegionName,EmptyCache.java,"String getRegionName() {
		return null;
	}
"
net.jforum.core.hibernate.tests.EmptyCache.getSizeInMemory,EmptyCache.java,"long getSizeInMemory() {
		return 0;
	}
"
net.jforum.core.hibernate.tests.EmptyCache.getTimeout,EmptyCache.java,"int getTimeout() {
		return 0;
	}
"
net.jforum.core.hibernate.tests.EmptyCache.nextTimestamp,EmptyCache.java,"long nextTimestamp() {
		return 0;
	}
"
net.jforum.core.hibernate.tests.EmptyCache.read,EmptyCache.java,"Object read(Object key) throws CacheException {
		return null;
	}
"
net.jforum.core.hibernate.tests.EmptyCache.toMap,EmptyCache.java,"Map toMap() {
		return null;
	}
"
net.jforum.core.hibernate.tests.EmptyCacheProvider.buildCache,EmptyCacheProvider.java,"Cache buildCache(String regionName, Properties properties) throws CacheException {
		return new EmptyCache();
	}
"
net.jforum.core.hibernate.tests.EmptyCacheProvider.isMinimalPutsEnabledByDefault,EmptyCacheProvider.java,"boolean isMinimalPutsEnabledByDefault() {
		return false;
	}
"
net.jforum.core.hibernate.tests.EmptyCacheProvider.nextTimestamp,EmptyCacheProvider.java,"long nextTimestamp() {
		return 0;
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.testPermissionsChaged,CacheEvictionRulesTestCase.java,"void testPermissionsChaged() throws Exception {
		this.expectQueryCacheEviction(""forumDAO.getModerators"");
		this.executeTargetMethod(GroupService.class, ""savePermissions"", 0, null);
		
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.testRankingAdded,CacheEvictionRulesTestCase.java,"void testRankingAdded() throws Exception {
		this.runRankingRepository(""add"");
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.testRankingUpdated,CacheEvictionRulesTestCase.java,"void testRankingUpdated() throws Exception {
		this.runRankingRepository(""update"");
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.testRankingDeleted,CacheEvictionRulesTestCase.java,"void testRankingDeleted() throws Exception {
		this.runRankingRepository(""remove"");
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.runRankingRepository,CacheEvictionRulesTestCase.java,"void runRankingRepository(String methodName) throws Exception {
		this.expectQueryCacheEviction(""rankingDAO"");
		this.executeTargetMethod(RankingRepository.class, methodName);
		
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.testSmilieAdded,CacheEvictionRulesTestCase.java,"void testSmilieAdded() throws Exception {
		this.runSmilieRepository(""add"");
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.testSmilieUpdated,CacheEvictionRulesTestCase.java,"void testSmilieUpdated() throws Exception {
		this.runSmilieRepository(""update"");
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.testSmilieDeleted,CacheEvictionRulesTestCase.java,"void testSmilieDeleted() throws Exception {
		this.runSmilieRepository(""remove"");
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.runSmilieRepository,CacheEvictionRulesTestCase.java,"void runSmilieRepository(String methodName) throws Exception {
		this.expectQueryCacheEviction(""smilieDAO"");
		this.executeTargetMethod(SmilieRepository.class, methodName);
		
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.testUserRepositoryAdd,CacheEvictionRulesTestCase.java,"void testUserRepositoryAdd() throws Exception {
		this.expectQueryCacheEviction(""userDAO.getTotalUsers"");
		this.expectQueryCacheEviction(""userDAO.getLastRegisteredUser"");

		this.executeTargetMethod(UserRepository.class, ""add"");

		
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.testConfigRepositoryAdd,CacheEvictionRulesTestCase.java,"void testConfigRepositoryAdd() throws Exception {
		this.runConfigRepositoryAddOrUpdate(""add"");
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.testConfigRepositoryUpdate,CacheEvictionRulesTestCase.java,"void testConfigRepositoryUpdate() throws Exception {
		this.runConfigRepositoryAddOrUpdate(""update"");
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.runConfigRepositoryAddOrUpdate,CacheEvictionRulesTestCase.java,"void runConfigRepositoryAddOrUpdate(String methodName) throws Exception {
		this.expectQueryCacheEviction(""configDAO"");
		this.executeTargetMethod(ConfigRepository.class, methodName);
		
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.testForumServiceAdd,CacheEvictionRulesTestCase.java,"void testForumServiceAdd() throws Exception {
		this.runForumServiceTest(""add"");
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.testForumServiceUpdate,CacheEvictionRulesTestCase.java,"void testForumServiceUpdate() throws Exception {
		this.runForumServiceTest(""update"");
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.testForumServiceDelete,CacheEvictionRulesTestCase.java,"void testForumServiceDelete() throws Exception {
		this.runForumServiceTest(""delete"");
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.testForumServiceUpForumOrder,CacheEvictionRulesTestCase.java,"void testForumServiceUpForumOrder() throws Exception {
		this.runForumServiceTest(""upForumOrder"");
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.testForumServiceDownForumOrder,CacheEvictionRulesTestCase.java,"void testForumServiceDownForumOrder() throws Exception {
		this.runForumServiceTest(""downForumOrder"");
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.runForumServiceTest,CacheEvictionRulesTestCase.java,"void runForumServiceTest(String methodName) throws Exception {
		this.expectQueryCacheEviction(""categoryDAO.getForums"");
		this.expect2ndLevelCacheEviction(""net.jforum.entities.Forum"");
		this.executeTargetMethod(ForumService.class, methodName);
		
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.testDeletePost,CacheEvictionRulesTestCase.java,"void testDeletePost() throws Exception {
		Forum forum = new Forum(); forum.setId(1);
		Post post = new Post(); post.setForum(forum);

		this.expectQueryCacheEviction(""forumDAO.getTotalMessages"");
		this.expectQueryCacheEviction(""forumDAO.getTotalPosts#"" + forum.getId());
		this.expectQueryCacheEviction(""forumDAO.getTotalTopics#"" + forum.getId());
		this.expectQueryCacheEviction(""recentTopicsDAO"");
		this.expectQueryCacheEviction(""forumDAO.getTopics#"" + forum.getId());

		this.executeTargetMethod(PostService.class, ""delete"", post);

		
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.testTopicDeleted,CacheEvictionRulesTestCase.java,"void testTopicDeleted() throws Exception {
		Topic topic = new Topic(); topic.getForum().setId(1);

		List<Topic> topics = new ArrayList<Topic>();
		topics.add(topic);

		this.expectQueryCacheEviction(""forumDAO.getTotalMessages"");
		this.expectQueryCacheEviction(""forumDAO.getTotalPosts#1"");
		this.expectQueryCacheEviction(""forumDAO.getTotalTopics#1"");
		this.expectQueryCacheEviction(""forumDAO.getTopics#1"");
		this.expectQueryCacheEviction(""rssDAO.getForumTopics#1"");
		this.expectQueryCacheEviction(""recentTopicsDAO"");

		this.executeVerySpecificTargetMethod(ModerationService.class, ""deleteTopics"", List.class, topics);

		
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.testModerationApprovedPost,CacheEvictionRulesTestCase.java,"void testModerationApprovedPost() throws Exception {
		this.newTopicOrPostCommonAssertions();

		Forum forum = new Forum(); forum.setId(1);
		Topic topic = new Topic(); topic.setPendingModeration(false); topic.setForum(forum);
		Post post = new Post(); post.setTopic(topic);

		this.executeTargetMethod(ModerationService.class, ""approvePost"", post);

		
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.testModerationTopicMoved,CacheEvictionRulesTestCase.java,"void testModerationTopicMoved() throws Exception {
		this.expectQueryCacheEviction(""forumDAO.getTotalPosts#1"");
		this.expectQueryCacheEviction(""forumDAO.getTotalPosts#2"");
		this.expectQueryCacheEviction(""forumDAO.getTotalTopics#1"");
		this.expectQueryCacheEviction(""forumDAO.getTotalTopics#2"");
		
		Session session = mock(Session.class);
		when(sessionFactory.getCurrentSession()).thenReturn(session);

		Topic topic = new Topic(); topic.getForum().setId(2);
		when(session.get(Topic.class, 5)).thenReturn(topic);

		Cache cache = mock(Cache.class);
		when(sessionFactory.getSecondLevelCacheRegion(""net.jforum.entities.Forum"")).thenReturn(cache);
		
		this.executeTargetMethod(ModerationService.class, ""moveTopics"", 1, new int[] { 5 });
		
		verify(cache).remove(""net.jforum.entities.Forum#1"");
		verify(cache).remove(""net.jforum.entities.Forum#2"");
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.testTopicServiceAdd,CacheEvictionRulesTestCase.java,"void testTopicServiceAdd() throws Exception {
		this.runTopicServiceAddOrReply(""addTopic"");
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.testTopicServiceReply,CacheEvictionRulesTestCase.java,"void testTopicServiceReply() throws Exception {
		this.runTopicServiceAddOrReply(""reply"");
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.runTopicServiceAddOrReply,CacheEvictionRulesTestCase.java,"void runTopicServiceAddOrReply(String methodName) throws Exception {
		this.newTopicOrPostCommonAssertions();

		Forum forum = new Forum(); forum.setId(1);
		Topic topic = new Topic(); topic.setPendingModeration(false); topic.setForum(forum);

		if (""addTopic"".equals(methodName)) {
			this.executeTargetMethod(TopicService.class, methodName, topic, new ArrayList<PollOption>(), new ArrayList<AttachedFile>());
		}
		else {
			this.executeTargetMethod(TopicService.class, methodName, topic, new Post(), new ArrayList<AttachedFile>());
		}

		
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.newTopicOrPostCommonAssertions,CacheEvictionRulesTestCase.java,"void newTopicOrPostCommonAssertions() {
		this.expectQueryCacheEviction(""forumDAO.getTotalPosts#1"");
		this.expectQueryCacheEviction(""forumDAO.getTotalTopics#1"");
		this.expectQueryCacheEviction(""recentTopicsDAO"");
		this.expectQueryCacheEviction(""forumDAO.getTotalMessages"");
		this.expectQueryCacheEviction(""forumDAO.getTopics#1"");
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.testCategoryServiceAdd,CacheEvictionRulesTestCase.java,"void testCategoryServiceAdd() throws Exception {
		this.runCategoryServiceTest(""add"");
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.testCategoryServiceUpdate,CacheEvictionRulesTestCase.java,"void testCategoryServiceUpdate() throws Exception {
		this.runCategoryServiceTest(""update"");
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.testCategoryServiceDelete,CacheEvictionRulesTestCase.java,"void testCategoryServiceDelete() throws Exception {
		this.runCategoryServiceTest(""delete"");
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.testCategoryServiceUpCategoryOrder,CacheEvictionRulesTestCase.java,"void testCategoryServiceUpCategoryOrder() throws Exception {
		this.runCategoryServiceTest(""upCategoryOrder"");
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.testCategoryServiceDownCategoryOrder,CacheEvictionRulesTestCase.java,"void testCategoryServiceDownCategoryOrder() throws Exception {
		this.runCategoryServiceTest(""downCategoryOrder"");
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.runCategoryServiceTest,CacheEvictionRulesTestCase.java,"void runCategoryServiceTest(String methodName) throws Exception {
		this.expectQueryCacheEviction(""categoryDAO.getAllCategories"");
		this.expect2ndLevelCacheEviction(""net.jforum.entities.Category"");

		this.executeTargetMethod(CategoryService.class, methodName);

		
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.getBean,CacheEvictionRulesTestCase.java,"Object getBean(String name) {
		return this.getApplicationContext().getBean(name);
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.executeTargetMethod,CacheEvictionRulesTestCase.java,"void executeTargetMethod(Class<?> entityClass, String methodName, Object... args) throws Exception {
		Object entity = this.getBean(entityClass.getName());

		Set<Method> methods = new HashSet<Method>(Arrays.asList(entityClass.getMethods()));
		methods.addAll(Arrays.asList(entityClass.getDeclaredMethods()));

		for (Method method : methods) {
			if (method.getName().equals(methodName)) {
				if (args != null && args.length > 0) {
					method.invoke(entity, args);
				}
				else {
					Class<?>[] parameterTypes = method.getParameterTypes();

					if (parameterTypes.length == 1 && parameterTypes[0] == int.class) {
						//method.setAccessible(true);
						method.invoke(entity, 0);
					}
					else {
						args = new Object[parameterTypes.length];
						//method.setAccessible(true);
						method.invoke(entity, args);
					}
				}
			}
		}
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.executeVerySpecificTargetMethod,CacheEvictionRulesTestCase.java,"void executeVerySpecificTargetMethod(Class<?> entityClass, String methodName, Class<?> argumentType, Object... args) throws Exception {
		Object entity = this.getBean(entityClass.getName());
		Method method = entity.getClass().getMethod(methodName, argumentType);
		method.invoke(entity, args);
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.expectQueryCacheEviction,CacheEvictionRulesTestCase.java,"void expectQueryCacheEviction(final String regionName) {
		org.hibernate.cache.QueryCache cache = mock(org.hibernate.cache.QueryCache.class, regionName);
		when(sessionFactory.getQueryCache(regionName)).thenReturn(cache);
		verify(cache).clear();
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.expect2ndLevelCacheEviction,CacheEvictionRulesTestCase.java,"void expect2ndLevelCacheEviction(final String regionName) {
		Cache secondLevelCache = mock(Cache.class, regionName);
		when(sessionFactory.getSecondLevelCacheRegion(regionName)).thenReturn(secondLevelCache);
		verify(secondLevelCache).clear();
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.onSetUp,CacheEvictionRulesTestCase.java,"void onSetUp() throws Exception {
		super.onSetUp();

		Object o = this.getBean(""evictionRules"");
		Field[] fields = o.getClass().getDeclaredFields();

		for (Field field : fields) {
			if (field.getName().equals(""factoryImplementor"")) {
				field.setAccessible(true);
				field.set(o, sessionFactory);
			}
			else if (field.getName().equals(""sessionFactory"")) {
				field.setAccessible(true);
				field.set(o, sessionFactory);
			}
		}
	}
"
net.jforum.core.support.hibernate.CacheEvictionRulesTestCase.getConfigLocations,CacheEvictionRulesTestCase.java,"String[] getConfigLocations() {
		return new String[]{ ""/cache/cache-eviction-rules-test.xml"" };                          
	}
"
net.jforum.core.events.post.BadWordEventTestCase.replaceAllShouldNotReplaceInsideAnotherWord,BadWordEventTestCase.java,"void replaceAllShouldNotReplaceInsideAnotherWord() {
		BadWord w1 = new BadWord(); w1.setWord(""abc""); w1.setReplacement(""REPLACEMENT"");
	
		when(repository.getAll()).thenReturn(Arrays.asList(w1));
		
		Post p = new Post();
		Topic topic = new Topic();
		topic.setSubject(""title"");
		p.setTopic(topic);
		p.setText(""some content wordABCeditor more content"");

		event.beforeAdd(p);
		
		assertEquals(""some content wordABCeditor more content"", p.getText());
	}
"
net.jforum.core.events.post.BadWordEventTestCase.replaceAll,BadWordEventTestCase.java,"void replaceAll() {
		BadWord w1 = new BadWord(); w1.setWord(""word1""); w1.setReplacement(""replacement1"");
		BadWord w2 = new BadWord(); w2.setWord(""word2""); w2.setReplacement(""replacement2"");

		when(repository.getAll()).thenReturn(Arrays.asList(w1, w2));
		
		Post p = new Post();
		Topic topic = new Topic();
		topic.setSubject(""title"");
		p.setTopic(topic);
		p.setText(""some content of post 1. This is word1, and this is WORD2. End"");

		event.beforeAdd(p);
		
		assertEquals(""some content of post 1. This is replacement1, and this is replacement2. End"", p.getText());
	}
"
net.jforum.core.events.post.ForumPostEventTestCase.deleteLastPostExpectUpdate,ForumPostEventTestCase.java,"void deleteLastPostExpectUpdate() {
		final Post post = this.newPost();
		post.setId(2);
	
		Post newLastPost = new Post(); newLastPost.setId(13);
		when(repository.getLastPost(post.getForum())).thenReturn(newLastPost);
	
		event.deleted(post);
		
		Post expected = new Post(); expected.setId(13);
		Assert.assertEquals(expected, post.getForum().getLastPost());
	}
"
net.jforum.core.events.post.ForumPostEventTestCase.deleteOrdinaryPostShouldDoNothing,ForumPostEventTestCase.java,"void deleteOrdinaryPostShouldDoNothing() {
		Post post = this.newPost();
		post.setId(10);
		event.deleted(post);
		
	}
"
net.jforum.core.events.post.ForumPostEventTestCase.newPost,ForumPostEventTestCase.java,"Post newPost() {
		Post p = new Post(); p.setId(1);
		Topic t = new Topic();
		t.setId(1);
		t.setFirstPost(new Post()); t.getFirstPost().setId(1);
		t.setLastPost(new Post()); t.getLastPost().setId(2);
		t.setForum(new Forum()); t.getForum().setId(1); t.getForum().setLastPost(t.getLastPost());
		p.setForum(t.getForum());
		p.setTopic(t);

		return p;
	}
"
net.jforum.core.events.post.TopicPostEventTestCase.shouldUpdateUserTotalPost,TopicPostEventTestCase.java,"void shouldUpdateUserTotalPost() {
		final Post post = this.newPost();
		post.getUser().setTotalPosts(5);
	
		when(repository.getTotalPosts(post.getTopic())).thenReturn(1);
		when(userRepository.getTotalPosts(post.getUser())).thenReturn(2);
		when(repository.getFirstPost(any(Topic.class))).thenReturn(newPost());
	
		event.deleted(post);
		
		Assert.assertEquals(2, post.getUser().getTotalPosts());
	}
"
net.jforum.core.events.post.TopicPostEventTestCase.emptyPostsShouldRemoveTopic,TopicPostEventTestCase.java,"void emptyPostsShouldRemoveTopic() {
		final Post post = this.newPost();
		int totalPosts = post.getTopic().getTotalPosts();
		
		when(repository.getTotalPosts(post.getTopic())).thenReturn(0);
		
		event.deleted(post);
		
		verify(repository).remove(post.getTopic());
		Assert.assertEquals(totalPosts - 1, post.getTopic().getTotalPosts());
	}
"
net.jforum.core.events.post.TopicPostEventTestCase.removeLastPostOnly,TopicPostEventTestCase.java,"void removeLastPostOnly() {
		final Post post = this.newPost();
		post.getTopic().getFirstPost().setId(3);
		post.getTopic().getLastPost().setId(4);
		int totalPosts = post.getTopic().getTotalPosts();
	
		Post lastPost = new Post(); lastPost.setId(5);
		when(repository.getTotalPosts(post.getTopic())).thenReturn(2);
		when(repository.getLastPost(post.getTopic())).thenReturn(lastPost);
		
		post.setId(4);
		event.deleted(post);
		
		verify(userRepository).getTotalPosts(post.getUser());
		Post expected = new Post(); expected.setId(5);
		Assert.assertEquals(expected, post.getTopic().getLastPost());
		Assert.assertEquals(totalPosts - 1, post.getTopic().getTotalPosts());
	}
"
net.jforum.core.events.post.TopicPostEventTestCase.removeFirstPostOnly,TopicPostEventTestCase.java,"void removeFirstPostOnly() {
		final Post post = this.newPost();
		int totalPosts = post.getTopic().getTotalPosts();
	
		Post newFirst = newPost(); newFirst.setId(6);
		newFirst.getUser().setId(9);

		when(repository.getTotalPosts(post.getTopic())).thenReturn(2);
		when(repository.getFirstPost(post.getTopic())).thenReturn(newFirst);
		
		event.deleted(post);
		
		verify(userRepository).getTotalPosts(post.getUser());
		
		Post expected = new Post(); expected.setId(6);
		Assert.assertEquals(expected, post.getTopic().getFirstPost());

		User expectedUser = new User(); expectedUser.setId(9);
		Assert.assertEquals(expectedUser, post.getTopic().getUser());
		Assert.assertEquals(totalPosts - 1, post.getTopic().getTotalPosts());
	}
"
net.jforum.core.events.post.TopicPostEventTestCase.newPost,TopicPostEventTestCase.java,"Post newPost() {
		Post p = new Post(); p.setId(1); p.setUser(new User());
		Topic t = new Topic(); t.setId(1);
		t.setUser(new User());
		t.setFirstPost(new Post()); t.getFirstPost().setId(1);
		t.setLastPost(new Post()); t.getLastPost().setId(2);
		p.setTopic(t);

		return p;
	}
"
net.jforum.core.events.post.TopicWatchPostEventTestCase.addedPostNotifyEnabledExpectWatch,TopicWatchPostEventTestCase.java,"void addedPostNotifyEnabledExpectWatch() {
		final Post post = new Post(); post.setNotifyReplies(true);
		post.setTopic(new Topic(1));
		User user = new User();
		user.setId(2);
		post.setUser(user);
		
		event.added(post);
		
		verify(service).watch(post.getTopic(), post.getUser());
	}
"
net.jforum.core.events.post.TopicWatchPostEventTestCase.addedPostNotifyDisabledShouldDoNothing,TopicWatchPostEventTestCase.java,"void addedPostNotifyDisabledShouldDoNothing() {
		Post post = new Post(); post.setNotifyReplies(false);
		event.added(post);
	}
"
net.jforum.core.events.category.NewCategoryGroupPermissionsEventTestCase.added,NewCategoryGroupPermissionsEventTestCase.java,"void added() {
		Group group1 = createGroupWithRole(1, SecurityConstants.ADMINISTRATOR, SecurityConstants.APPROVE_MESSAGES);
		Group group2 = createGroupWithRole(2, SecurityConstants.CO_ADMINISTRATOR);
		Group group3 = createGroupWithRole(3, SecurityConstants.CATEGORY);
		Group group4 = createGroupWithRole(4, SecurityConstants.CATEGORY);

		when(groupRepository.getAllGroups()).thenReturn(Arrays.asList(group1, group2, group3, group4));

		User user = new User();
		user.getGroups().add(group2);
		user.getGroups().add(group4);

		when(userSession.getUser()).thenReturn(user);

		Category c = new Category();
		c.setId(1);

		event.added(c);

		verify(groupService).appendRole(group1, SecurityConstants.CATEGORY, 1);
		verify(groupService).appendRole(group2, SecurityConstants.CATEGORY, 1);
	}
"
net.jforum.core.events.category.NewCategoryGroupPermissionsEventTestCase.createGroupWithRole,NewCategoryGroupPermissionsEventTestCase.java,"Group createGroupWithRole(int groupId, String... roleNames) {
		Group g = new Group();
		g.setId(groupId);

		for (String roleName : roleNames) {
			Role r = new Role();
			r.setName(roleName);

			g.addRole(r);
		}

		return g;
	}
"
net.jforum.core.events.topic.ForumTopicEventTestCase.deleteTopicLastPostIsNullShouldForceReload,ForumTopicEventTestCase.java,"void deleteTopicLastPostIsNullShouldForceReload() {
		final Topic topic = this.newTopic();
		topic.getForum().setLastPost(null);
		Post post = new Post(); post.setId(11);
		when(repository.getLastPost(topic.getForum())).thenReturn(post);
		
		event.deleted(topic);
		
		Post expected = new Post(); expected.setId(11);
		Assert.assertEquals(expected, topic.getForum().getLastPost());
	}
"
net.jforum.core.events.topic.ForumTopicEventTestCase.deleteTopicExpectSuccess,ForumTopicEventTestCase.java,"void deleteTopicExpectSuccess() {
		final Topic topic = this.newTopic();
		Post post = new Post(); post.setId(11);
		when(repository.getLastPost(topic.getForum())).thenReturn(post);
		topic.getLastPost().getTopic().setId(topic.getId());
		
		event.deleted(topic);
		
		Post expected = new Post(); expected.setId(11);
		Assert.assertEquals(expected, topic.getForum().getLastPost());
	}
"
net.jforum.core.events.topic.ForumTopicEventTestCase.deleteOrdinaryTopicShoulDoNothing,ForumTopicEventTestCase.java,"void deleteOrdinaryTopicShoulDoNothing() {
		final Topic topic = this.newTopic();
		topic.getForum().getLastPost().getTopic().setId(9);

		event.deleted(topic);
	}
"
net.jforum.core.events.topic.ForumTopicEventTestCase.newTopic,ForumTopicEventTestCase.java,"Topic newTopic() {
		Topic t = new Topic(); t.setId(1); t.setUser(new User());

		t.setFirstPost(new Post()); t.getFirstPost().setId(1); t.getFirstPost().setTopic(new Topic());
		t.setLastPost(new Post()); t.getLastPost().setId(2); t.getLastPost().setTopic(new Topic());
		t.setForum(new Forum()); t.getForum().setId(1); t.getForum().setLastPost(t.getLastPost());

		return t;
	}
"
net.jforum.core.events.topic.TopicWatchTopicEventTestCase.deleted,TopicWatchTopicEventTestCase.java,"void deleted() {
		final Topic topic = new Topic(); topic.setId(2);
		
		event.deleted(topic);

		verify(repository).removeSubscription(topic);
	}
"
net.jforum.core.events.forum.NewForumGroupPermissionsEventTestCase.added,NewForumGroupPermissionsEventTestCase.java,"void added() {
		Group group1 = createGroupWithRole(1, SecurityConstants.ADMINISTRATOR, SecurityConstants.APPROVE_MESSAGES);
		Group group2 = createGroupWithRole(2, SecurityConstants.CO_ADMINISTRATOR);
		Group group3 = createGroupWithRole(3, SecurityConstants.CATEGORY);
		Group group4 = createGroupWithRole(4, SecurityConstants.FORUM);

		when(groupRepository.getAllGroups()).thenReturn(Arrays.asList(group1, group2, group3, group4));

		User user = new User();
		user.getGroups().add(group2);
		user.getGroups().add(group4);

		when(userSession.getUser()).thenReturn(user);
		
		Forum forum = new Forum();
		forum.setId(1);

		event.added(forum);

		verify(groupService).appendRole(group1, SecurityConstants.FORUM, 1);
		verify(groupService).appendRole(group2, SecurityConstants.FORUM, 1);
	}
"
net.jforum.core.events.forum.NewForumGroupPermissionsEventTestCase.createGroupWithRole,NewForumGroupPermissionsEventTestCase.java,"Group createGroupWithRole(int groupId, String... roleNames) {
		Group g = new Group();
		g.setId(groupId);

		for (String roleName : roleNames) {
			Role r = new Role();
			r.setName(roleName);

			g.addRole(r);
		}

		return g;
	}
"
net.jforum.util.TestCaseUtils.getApplicationRoot,TestCaseUtils.java,"String getApplicationRoot() {
		String filePath = TestCaseUtils.class.getResource(""."").getFile();
		int index = filePath.indexOf(""/target/test"");
		return filePath.substring(0, index)+""/src/main"";
	}
"
net.jforum.util.TestCaseUtils.executePrivateMethod,TestCaseUtils.java,"Object executePrivateMethod(String methodName, Object instance, Object... args) throws Exception {
		Method method = searchMethod(methodName, instance.getClass());

		if (method == null) {
			method = searchMethod(methodName, instance.getClass().getSuperclass());
		}

		if (method != null) {
			return method.invoke(instance, args);
		}

		throw new IllegalArgumentException(""Method not found"");
	}
"
net.jforum.util.TestCaseUtils.searchMethod,TestCaseUtils.java,"Method searchMethod(String methodName, Class<?> klass) {
		for (Method method : klass.getDeclaredMethods()) {
			if (method.getName().equals(methodName)) {
				method.setAccessible(true);
				return method;
			}
		}

		return null;
	}
"
net.jforum.util.TestCaseUtils.getPrivateField,TestCaseUtils.java,"Object getPrivateField(String fieldName, Object instance) throws Exception {
		for (Field field : instance.getClass().getDeclaredFields()) {
			if (field.getName().equals(fieldName)) {
				field.setAccessible(true);
				return field.get(instance);
			}
		}

		throw new IllegalArgumentException(""Field not found"");
	}
"
net.jforum.util.TestCaseUtils.copyFile,TestCaseUtils.java,"void copyFile(File in, File out) {
		try {
			FileInputStream fis = new FileInputStream(in);
			FileOutputStream fos = new FileOutputStream(out);

			byte[] buf = new byte[1024];
			int i = 0;

			while ((i = fis.read(buf)) != -1) {
				fos.write(buf, 0, i);
			}

			fis.close();
			fos.close();
		}
		catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
"
net.jforum.util.GroupInteractionFilterTestCase.filterForumListing,GroupInteractionFilterTestCase.java,"void filterForumListing() {
		User u1 = new User(); User u2 = new User(); User u3 = new User();

		Group g1 = new Group(); g1.setId(1);
		Group g2 = new Group(); g2.setId(2);
		Group g3 = new Group(); g3.setId(3);

		u1.addGroup(g1);
		u2.addGroup(g1); u2.addGroup(g2);
		u3.addGroup(g3);

		final UserSession us1 = new UserSession(); us1.setSessionId(""1""); us1.setUser(u1);
		final UserSession us2 = new UserSession(); us2.setSessionId(""2""); us2.setUser(u2);
		final UserSession us3 = new UserSession(); us3.setSessionId(""3""); us3.setUser(u3);

		when(userSession.getUser()).thenReturn(u1);

		Map<String, Object> m = new HashMap<String, Object>();
		m.put(""onlineUsers"", Arrays.asList(us1, us2, us3));
		when(mockResult.included()).thenReturn(m);
		
		GroupInteractionFilter filter = new GroupInteractionFilter();
		filter.filterForumListing(mockResult, userSession);
		
		assertEquals(2, mockResult.included(""totalLoggedUsers""));
		assertEquals(new HashSet<UserSession>(Arrays.asList(us1, us2)), mockResult.included(""onlineUsers""));
	}
"
net.jforum.util.JDBCLoader.run,JDBCLoader.java,"void run(String sqlfile) {
		BufferedReader reader = null;
		FileReader fileReader = null;

		try {
			fileReader = new FileReader(this.getClass().getResource(sqlfile).getFile());
			reader = new BufferedReader(fileReader);

			String line = null;

			while ((line = reader.readLine()) != null) {
				if (!StringUtils.isEmpty(line)) {
					logger.debug(""JDBCLoader: [Running] "" + line);
					this.runStatement(line);
				}
			}
		}
		catch (Exception e) {
			throw new RuntimeException(e);
		}
		finally {
			if (fileReader != null) {
				try { fileReader.close(); }
				catch (Exception e) {}
			}

			if (reader != null) {
				try { reader.close(); }
				catch (Exception e) {}
			}
		}
	}
"
net.jforum.util.JDBCLoader.runStatement,JDBCLoader.java,"void runStatement(String sql) throws SQLException {
		SQLQuery query = session.createSQLQuery(sql);
		query.executeUpdate();
	}
"
net.jforum.util.SafeHtmlTestCase.setUp,SafeHtmlTestCase.java,"void setUp() throws Exception {
		when(config.containsKey(ConfigKeys.HTML_TAGS_WELCOME)).thenReturn(true);
		when(config.containsKey(ConfigKeys.HTML_ATTRIBUTES_WELCOME)).thenReturn(true);
		when(config.containsKey(ConfigKeys.HTML_LINKS_ALLOW_PROTOCOLS)).thenReturn(true);
		when(config.getValue(ConfigKeys.HTML_TAGS_WELCOME)).thenReturn(""u, a, img, i, u, li, ul, font, br, p, b, hr"");
		when(config.getValue(ConfigKeys.HTML_ATTRIBUTES_WELCOME)).thenReturn(""src, href, size, face, color, target, rel"");
		when(config.getValue(ConfigKeys.HTML_LINKS_ALLOW_PROTOCOLS)).thenReturn(""http://, https://, mailto:, ftp://"");
		when(config.getBoolean(ConfigKeys.HTML_LINKS_ALLOW_RELATIVE)).thenReturn(true);
		
		safeHtml = new SafeHtml(config);
	}
"
net.jforum.util.SafeHtmlTestCase.javascriptInsideURLTagExpectItToBeRemoved,SafeHtmlTestCase.java,"void javascriptInsideURLTagExpectItToBeRemoved() {
		String input = ""<a class=\""snap_shots\"" rel=\""nofollow\"" target=\""_new\"" onmouseover=\""javascript:alert('test2');\"" href=\""before\"">test</a>"";
		String expected = ""<a class=\""snap_shots\"" rel=\""nofollow\"" target=\""_new\""  >test</a>"";

		String result = safeHtml.ensureAllAttributesAreSafe(input);

		assertEquals(expected, result);
	}
"
net.jforum.util.SafeHtmlTestCase.javascriptInsideImageTagExpectItToBeRemoved,SafeHtmlTestCase.java,"void javascriptInsideImageTagExpectItToBeRemoved() {
		String input = ""<img border=\""0\"" onmouseover=\""javascript:alert('buuuh!!!');\""\""\"" src=\""javascript:alert('hi from an alert!');\""/>"";
		String expected = ""<img border=\""0\"" \""\"" />"";

		String result = safeHtml.ensureAllAttributesAreSafe(input);

		assertEquals(expected, result);
	}
"
net.jforum.util.SafeHtmlTestCase.iframe,SafeHtmlTestCase.java,"void iframe() {
		String input = ""<iframe src='http://www.google.com' onload='javascript:parent.document.body.style.display=\'none\'; alert(\'where is the forum?\'); ' style='display:none;'></iframe>"";
		String expected = ""&lt;iframe src='http://www.google.com' onload='javascript:parent.document.body.style.display=\'none\'; alert(\'where is the forum?\'); ' style='display:none;'&gt;&lt;/iframe&gt;"";

		String result = safeHtml.makeSafe(input);
				
		assertEquals(expected, result);
	}
"
net.jforum.util.SafeHtmlTestCase.makeSafe,SafeHtmlTestCase.java,"void makeSafe() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append(""<a href='http://somelink'>Some Link</a>"");
		sb.append(""bla <b>bla</b> <pre>code code</pre>"");
		sb.append(""<script>document.location = 'xxx';</script>"");
		sb.append(""<img src='http://imgPath' onLoad='window.close();'>"");
		sb.append(""<a href='javascript:alert(bleh)'>xxxx</a>"");
		sb.append(""<img src='javascript:alert(bloh)'>"");
		sb.append(""<img src=\""&#106ava&#115cript&#58aler&#116&#40&#39Oops&#39&#41&#59\"">"");
		sb.append(""\""> TTTTT <"");
		sb.append(""<img src='http://some.image' onLoad=\""javascript:alert('boo')\"">"");
		sb.append(""<b>heeelooo, nurse</b>"");
		sb.append(""<b style='some style'>1, 2, 3</b>"");
		String input = sb.toString();

		sb = new StringBuilder();
		sb.append(""<a href='http://somelink'>Some Link</a>"");
		sb.append(""bla <b>bla</b> &lt;pre&gt;code code&lt;/pre&gt;"");
		sb.append(""&lt;script&gt;document.location = 'xxx';&lt;/script&gt;"");
		sb.append(""<img src='http://imgPath' >"");
		sb.append(""<a >xxxx</a>"");
		sb.append(""<img >"");
		sb.append(""<img >"");
		sb.append(""&quot;&gt; TTTTT &lt;"");
		sb.append(""<img src='http://some.image' >"");
		sb.append(""<b>heeelooo, nurse</b>"");
		sb.append(""<b >1, 2, 3</b>"");
		String expected = sb.toString();

		String result = safeHtml.makeSafe(input);
				
		assertEquals(expected, result);
	}
"
net.jforum.util.I18nTestCase.setUp,I18nTestCase.java,"void setUp() throws Exception {
		String applicationPath = TestCaseUtils.getApplicationRoot();

		when(config.getApplicationPath()).thenReturn(applicationPath);
		when(config.getValue(ConfigKeys.I18N_DEFAULT_ADMIN)).thenReturn(""default"");
		when(config.getValue(ConfigKeys.I18N_DEFAULT)).thenReturn(""default"");
		
		i18n = new I18n(config);
	}
"
net.jforum.util.I18nTestCase.loadExpectDefaultLanguageToBeLoaded,I18nTestCase.java,"void loadExpectDefaultLanguageToBeLoaded() throws Exception {
		assertTrue(i18n.isLanguageLoaded(""default""));
	}
"
net.jforum.util.I18nTestCase.allDefaultKeysShouldBeCorrectlyLoadedAndRetrieved,I18nTestCase.java,"void allDefaultKeysShouldBeCorrectlyLoadedAndRetrieved() {
		assertEquals(""default value 1"", i18n.getMessage(""defaultKey1""));
		assertEquals(""default value 2"", i18n.getMessage(""defaultKey2""));
		assertEquals(""default value 3"", i18n.getMessage(""defaultKey3""));
		assertEquals(""default value 4"", i18n.getMessage(""defaultKey4""));
		assertEquals(""default value 5"", i18n.getMessage(""defaultKey5""));
	}
"
net.jforum.util.I18nTestCase.loadCheeseLanguageExpectSuccess,I18nTestCase.java,"void loadCheeseLanguageExpectSuccess() throws Exception {
		assertFalse(i18n.isLanguageLoaded(""cheese""));
		i18n.load(""cheese"");
		assertTrue(i18n.isLanguageLoaded(""cheese""));
	}
"
net.jforum.util.I18nTestCase.retrieveCheeseKeysExpectSuccessAndKey5ShouldBeDefault,I18nTestCase.java,"void retrieveCheeseKeysExpectSuccessAndKey5ShouldBeDefault() {
		assertEquals(""default cheese 1"", i18n.getMessage(""defaultKey1"", ""cheese""));
		assertEquals(""default cheese 2"", i18n.getMessage(""defaultKey2"", ""cheese""));
		assertEquals(""default cheese 3"", i18n.getMessage(""defaultKey3"", ""cheese""));
		assertEquals(""default cheese 4"", i18n.getMessage(""defaultKey4"", ""cheese""));
		assertEquals(""default value 5"", i18n.getMessage(""defaultKey5"", ""cheese""));
	}
"
net.jforum.util.I18nTestCase.loadOrangeLanguageExpectSuccess,I18nTestCase.java,"void loadOrangeLanguageExpectSuccess() throws Exception {
		assertFalse(i18n.isLanguageLoaded(""orange""));
		i18n.load(""orange"");
		assertTrue(i18n.isLanguageLoaded(""orange""));
	}
"
net.jforum.util.I18nTestCase.retrieveOrangeKeysExpectSuccessAndTwoDefaultValuesAndOneExtraOrangeKey,I18nTestCase.java,"void retrieveOrangeKeysExpectSuccessAndTwoDefaultValuesAndOneExtraOrangeKey() {
		assertEquals(""default orange 1"", i18n.getMessage(""defaultKey1"", ""orange""));
		assertEquals(""default orange 2"", i18n.getMessage(""defaultKey2"", ""orange""));
		assertEquals(""default orange 3"", i18n.getMessage(""defaultKey3"", ""orange""));
		assertEquals(""default value 4"", i18n.getMessage(""defaultKey4"", ""orange""));
		assertEquals(""default value 5"", i18n.getMessage(""defaultKey5"", ""orange""));
		assertEquals(""orange is not cheese"", i18n.getMessage(""orange"", ""orange""));
	}
"
net.jforum.util.I18nTestCase.orangeIsDefault,I18nTestCase.java,"void orangeIsDefault() {
		assertFalse(i18n.isLanguageLoaded(""orange""));
		i18n.changeBoardDefaultLanguage(""orange"");
		assertTrue(i18n.isLanguageLoaded(""default""));
		assertTrue(i18n.isLanguageLoaded(""orange""));
		this.retrieveOrangeKeysExpectSuccessAndTwoDefaultValuesAndOneExtraOrangeKey();
	}
"
net.jforum.util.mail.TopicReplySpammerTestCase.send,TopicReplySpammerTestCase.java,"void send() {
		when(repository.getTotalPosts(notNull(Topic.class))).thenReturn(10);
		
		TopicReplySpammer spammer = new TopicReplySpammer(config);
		List<User> users = new ArrayList<User>();

		User u1 = new User(); u1.setEmail(""email@addres.verify"");
		User u2 = new User(); u2.setEmail(""email@addres.two"");

		users.add(u1); users.add(u2);

		Topic topic = new Topic(repository); topic.setId(1); topic.setSubject(""subject x"");
		topic.setLastPost(new Post()); topic.getLastPost().setId(123);

		spammer.prepare(topic, users);

		SimpleSmtpServer server = null;

		try {
			server = SimpleSmtpServer.start(config.getInt(ConfigKeys.MAIL_SMTP_PORT));
			spammer.dispatchMessages();
		}
		finally {
			if (server != null) {
				server.stop();
			}
		}

		Assert.assertEquals(2, server.getReceivedEmailSize());
		SmtpMessage message = (SmtpMessage)server.getReceivedEmail().next();
		Assert.assertTrue(message.getBody().indexOf(""subject x"") > -1);
		Assert.assertTrue(message.getBody().indexOf(""http://localhost/topics/list/1.page#123"") > -1);
		Assert.assertTrue(message.getBody().indexOf(""http://localhost/topics/unwatch/1.page"") > -1);
	}
"
net.jforum.util.mail.LostPasswordSpammerTestCase.send,LostPasswordSpammerTestCase.java,"void send() {
		LostPasswordSpammer spammer = new LostPasswordSpammer(config);

		User user = new User();
		user.setEmail(""email@addres.one"");
		user.setActivationKey(""123"");

		spammer.prepare(user, ""lost subject"");

		SimpleSmtpServer server = null;

		try {
			server = SimpleSmtpServer.start(config.getInt(ConfigKeys.MAIL_SMTP_PORT));
			spammer.dispatchMessages();
		}
		finally {
			if (server != null) {
				server.stop();
			}
		}

		Assert.assertEquals(1, server.getReceivedEmailSize());
		SmtpMessage message = (SmtpMessage)server.getReceivedEmail().next();
		Assert.assertTrue(message.getBody().indexOf(""http://localhost/user/recoverPassword/123.page"") > -1);
	}
"
net.jforum.util.mail.MailTestCase.setup,MailTestCase.java,"void setup() {
		when(config.getBoolean(ConfigKeys.MAIL_SMTP_SSL)).thenReturn(false);
		when(config.getValue(ConfigKeys.MAIL_SMTP_LOCALHOST)).thenReturn(""localhost"");
		when(config.getValue(ConfigKeys.MAIL_SMTP_AUTH)).thenReturn(""true"");
		when(config.getBoolean(ConfigKeys.MAIL_SMTP_AUTH)).thenReturn(true);
		when(config.getValue(ConfigKeys.MAIL_SMTP_PORT)).thenReturn(""25123"");
		when(config.getInt(ConfigKeys.MAIL_SMTP_PORT)).thenReturn(25123);
		when(config.getValue(ConfigKeys.MAIL_SMTP_HOST)).thenReturn(""127.0.0.1"");
		when(config.getValue(ConfigKeys.MAIL_CHARSET)).thenReturn(""ISO-8859-1"");
		when(config.getValue(ConfigKeys.MAIL_SMTP_USERNAME)).thenReturn(""username"");
		when(config.getValue(ConfigKeys.MAIL_SMTP_PASSWORD)).thenReturn(""password"");
		when(config.getValue(ConfigKeys.MAIL_MESSSAGE_FORMAT)).thenReturn(""text"");
		when(config.getInt(ConfigKeys.MAIL_SMTP_DELAY)).thenReturn(0);
		when(config.getValue(ConfigKeys.FORUM_NAME)).thenReturn(""forum name"");
		when(config.getValue(ConfigKeys.MAIL_SENDER)).thenReturn(""sender@example.com"");
		when(config.getValue(ConfigKeys.FORUM_LINK)).thenReturn(""http://localhost"");
		when(config.getInt(ConfigKeys.POSTS_PER_PAGE)).thenReturn(10);
		when(config.getValue(ConfigKeys.MAIL_NEW_ANSWER_SUBJECT)).thenReturn(""new reply"");
		when(config.getValue(ConfigKeys.SERVLET_EXTENSION)).thenReturn("".page"");
		when(config.getValue(ConfigKeys.APPLICATION_PATH)).thenReturn(TestCaseUtils.getApplicationRoot());
		when(config.getValue(ConfigKeys.MAIL_NEW_ANSWER_MESSAGE_FILE)).thenReturn(""/webapp/templates/mail/mailNewReply.txt"");
		when(config.getValue(ConfigKeys.MAIL_LOST_PASSWORD_MESSAGE_FILE)).thenReturn(""/webapp/templates/mail/lostPassword.txt"");
		when(config.getInt(ConfigKeys.MAIL_BATCH_SIZE)).thenReturn(50);
	}
"
net.jforum.security.ModerationRuleTestCase.moderatorShouldProceed,ModerationRuleTestCase.java,"void moderatorShouldProceed() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isModerator()).thenReturn(true);

		assertTrue(rule.shouldProceed(userSession, request));
	}
"
net.jforum.security.ModerationRuleTestCase.notModeratorShouldDeny,ModerationRuleTestCase.java,"void notModeratorShouldDeny() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isModerator()).thenReturn(false);

		assertFalse(rule.shouldProceed(userSession, request));
	}
"
net.jforum.security.RoleManagerTestCase.readOnlyGroupACantAccessForumGroupBIsReadOnlyShoudlNotBeAbleToCreateTopics,RoleManagerTestCase.java,"void readOnlyGroupACantAccessForumGroupBIsReadOnlyShoudlNotBeAbleToCreateTopics() {
		Group g1 = new Group();
		g1.addRole(this.newRole(SecurityConstants.FORUM_READ_ONLY, Arrays.asList(1)));
		g1.addRole(this.newRole(SecurityConstants.FORUM_REPLY_ONLY, Arrays.asList(5)));
		g1.addRole(this.newRole(SecurityConstants.FORUM, Arrays.asList(1)));
		g1.addRole(this.newRole(SecurityConstants.FORUM, Arrays.asList(5)));

		Group g2 = new Group();
		g2.addRole(this.newRole(""some role""));

		RoleManager manager = new RoleManager();
		manager.setGroups(Arrays.asList(g1, g2));

		Assert.assertTrue(manager.isForumAllowed(1));
		Assert.assertTrue(manager.isForumReadOnly(1));
		Assert.assertTrue(manager.isForumReplyOnly(5));
	}
"
net.jforum.security.RoleManagerTestCase.readReplyOnlyShouldRetainOnlyCommonValues,RoleManagerTestCase.java,"void readReplyOnlyShouldRetainOnlyCommonValues() {
		Group g1 = new Group();
		g1.addRole(this.newRole(SecurityConstants.FORUM_READ_ONLY, Arrays.asList(1, 2, 3)));
		g1.addRole(this.newRole(SecurityConstants.FORUM_REPLY_ONLY, Arrays.asList(7)));

		Group g2 = new Group();
		g2.addRole(this.newRole(SecurityConstants.FORUM_READ_ONLY, Arrays.asList(2, 3)));
		g2.addRole(this.newRole(SecurityConstants.FORUM_REPLY_ONLY, Arrays.asList(7, 9)));

		Group g3 = new Group();
		g3.addRole(this.newRole(SecurityConstants.FORUM_READ_ONLY, Arrays.asList(3)));
		g3.addRole(this.newRole(SecurityConstants.FORUM_REPLY_ONLY, Arrays.asList(9, 13, 14)));

		RoleManager manager = new RoleManager();
		manager.setGroups(Arrays.asList(g1, g2, g3));

		Assert.assertFalse(manager.isForumReadOnly(1));
		Assert.assertFalse(manager.isForumReadOnly(2));
		Assert.assertTrue(manager.isForumReadOnly(3));

		Assert.assertFalse(manager.isForumReplyOnly(7));
		Assert.assertFalse(manager.isForumReplyOnly(9));
		Assert.assertFalse(manager.isForumReplyOnly(13));
		Assert.assertFalse(manager.isForumReplyOnly(14));
	}
"
net.jforum.security.RoleManagerTestCase.readReplyOnlyShouldAllowEverything,RoleManagerTestCase.java,"void readReplyOnlyShouldAllowEverything() {
		Group g1 = new Group();
		g1.addRole(this.newRole(SecurityConstants.FORUM, Arrays.asList(1, 2, 3, 7)));
		g1.addRole(this.newRole(SecurityConstants.FORUM_READ_ONLY, Arrays.asList(1, 2, 3)));
		g1.addRole(this.newRole(SecurityConstants.FORUM_REPLY_ONLY, Arrays.asList(7)));

		Group g2 = new Group();
		g2.addRole(this.newRole(SecurityConstants.FORUM, Arrays.asList(1, 2, 3, 7)));
		g2.addRole(this.newRole(""some role""));

		RoleManager manager = new RoleManager();
		manager.setGroups(Arrays.asList(g1, g2));

		Assert.assertFalse(manager.isForumReadOnly(1));
		Assert.assertFalse(manager.isForumReadOnly(2));
		Assert.assertFalse(manager.isForumReadOnly(3));
		Assert.assertFalse(manager.isForumReadOnly(7));
		Assert.assertFalse(manager.isForumReplyOnly(7));
		Assert.assertTrue(manager.roleExists(""some role""));
	}
"
net.jforum.security.RoleManagerTestCase.singleRoleExists,RoleManagerTestCase.java,"void singleRoleExists() {
		Group g = new Group(); g.addRole(this.newRole(""role1""));
		RoleManager manager = new RoleManager(); manager.setGroups(Arrays.asList(g));
		Assert.assertTrue(manager.roleExists(""role1""));
	}
"
net.jforum.security.RoleManagerTestCase.roleWithValuesExists,RoleManagerTestCase.java,"void roleWithValuesExists() {
		Group g = new Group(); g.addRole(this.newRole(""role1"", Arrays.asList(1, 2)));
		RoleManager manager = new RoleManager(); manager.setGroups(Arrays.asList(g));
		Assert.assertTrue(manager.roleExists(""role1""));
		Assert.assertTrue(manager.roleExists(""role1"", 1));
		Assert.assertTrue(manager.roleExists(""role1"", 2));
		Assert.assertFalse(manager.roleExists(""role1"", 3));
	}
"
net.jforum.security.RoleManagerTestCase.twoGroupsSameRoleWithDifferentValuesShouldMerge,RoleManagerTestCase.java,"void twoGroupsSameRoleWithDifferentValuesShouldMerge() {
		Group g1 = new Group(); g1.addRole(this.newRole(""role1"", Arrays.asList(1, 2)));
		Group g2 = new Group(); g2.addRole(this.newRole(""role1"", Arrays.asList(2, 3, 4)));
		RoleManager manager = new RoleManager(); manager.setGroups(Arrays.asList(g1, g2));
		Assert.assertTrue(manager.roleExists(""role1""));
		Assert.assertTrue(manager.roleExists(""role1"", 1));
		Assert.assertTrue(manager.roleExists(""role1"", 2));
		Assert.assertTrue(manager.roleExists(""role1"", 3));
		Assert.assertTrue(manager.roleExists(""role1"", 4));
	}
"
net.jforum.security.RoleManagerTestCase.twoGroupsUniqueRoles,RoleManagerTestCase.java,"void twoGroupsUniqueRoles() {
		Group g1 = new Group(); g1.addRole(this.newRole(""role1""));
		Group g2 = new Group(); g2.addRole(this.newRole(""role2""));
		RoleManager manager = new RoleManager(); manager.setGroups(Arrays.asList(g1, g2));
		Assert.assertTrue(manager.roleExists(""role1""));
		Assert.assertTrue(manager.roleExists(""role2""));
	}
"
net.jforum.security.RoleManagerTestCase.twoGroupsSameRoleShouldExist,RoleManagerTestCase.java,"void twoGroupsSameRoleShouldExist() {
		Group g1 = new Group(); g1.addRole(this.newRole(""role1""));
		Group g2 = new Group(); g2.addRole(this.newRole(""role1""));
		RoleManager manager = new RoleManager(); manager.setGroups(Arrays.asList(g1, g2));
		Assert.assertTrue(manager.roleExists(""role1""));
	}
"
net.jforum.security.RoleManagerTestCase.newRole,RoleManagerTestCase.java,"Role newRole(String name, List<Integer> values) {
		Role role = new Role();
		role.setName(name);
		role.getRoleValues().addAll(values);
		return role;
	}
"
net.jforum.security.RoleManagerTestCase.newRole,RoleManagerTestCase.java,"Role newRole(String name) {
		Role role = new Role();
		role.setName(name);
		return role;
	}
"
net.jforum.security.EditUserRuleTestCase.setup,EditUserRuleTestCase.java,"void setup() {
		parameterMap = new HashMap<String, String[]>();
		parameterMap.put(""userId"", Arrays.asList(""1"").toArray(new String[1]));
		when(request.getParameterMap()).thenReturn(parameterMap);
		when(userSession.getRoleManager()).thenReturn(roleManager);
	}
"
net.jforum.security.EditUserRuleTestCase.loggedSameUserIdExpectSuccess,EditUserRuleTestCase.java,"void loggedSameUserIdExpectSuccess() {
		when(request.getParameter(""userId"")).thenReturn(""1"");
		when(userSession.isLogged()).thenReturn(true);

		User user = new User(); user.setId(1);
		when(userSession.getUser()).thenReturn(user);

		assertTrue(rule.shouldProceed(userSession, request));
	}
"
net.jforum.security.EditUserRuleTestCase.loggedDifferentUserIdIsAdministratorExpectSuccess,EditUserRuleTestCase.java,"void loggedDifferentUserIdIsAdministratorExpectSuccess() {
		when(request.getParameter(""userId"")).thenReturn(""1"");
		when(userSession.isLogged()).thenReturn(true);

		User currentUser = new User(); currentUser.setId(9);
		when(userSession.getUser()).thenReturn(currentUser);

		User user1 = new User(); user1.setId(1);
		when(userRepository.get(1)).thenReturn(user1);

		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.getCanEditUser(user1, currentUser.getGroups())).thenReturn(true);


		boolean shouldProceed = rule.shouldProceed(userSession, request);

		assertTrue(shouldProceed);
	}
"
net.jforum.security.EditUserRuleTestCase.notLoggedShouldDeny,EditUserRuleTestCase.java,"void notLoggedShouldDeny() {
		when(request.getParameter(""userId"")).thenReturn(""1"");
		when(userSession.isLogged()).thenReturn(false);

		boolean shouldProceed = rule.shouldProceed(userSession, request);

		assertFalse(shouldProceed);
	}
"
net.jforum.security.EditUserRuleTestCase.doestNotHaveUserIdExpectsException,EditUserRuleTestCase.java,"void doestNotHaveUserIdExpectsException() {
		parameterMap.clear();
		
		rule.shouldProceed(userSession, request);
	}
"
net.jforum.security.EditUserRuleTestCase.containsUserDotId,EditUserRuleTestCase.java,"void containsUserDotId() {
		parameterMap.clear(); parameterMap.put(""user.id"", Arrays.asList(""1"").toArray(new String[1]));
		when(request.getParameter(""user.id"")).thenReturn(""1"");
		when(userRepository.get(1)).thenReturn(new User());

		rule.shouldProceed(userSession, request);
	}
"
net.jforum.security.EditUserRuleTestCase.containsUserId,EditUserRuleTestCase.java,"void containsUserId() {
		when(request.getParameter(""userId"")).thenReturn(""1"");
		when(userRepository.get(1)).thenReturn(new User());

		rule.shouldProceed(userSession, request);
	}
"
net.jforum.security.AdministrationRuleTestCase.loggedIsAdministratorShouldAccept,AdministrationRuleTestCase.java,"void loggedIsAdministratorShouldAccept() {
		when(userSession.isLogged()).thenReturn(true);
		when(roleManager.isAdministrator()).thenReturn(true);

		assertTrue(rule.shouldProceed(userSession, request));
	}
"
net.jforum.security.AdministrationRuleTestCase.loggedIsCoAdministratorShouldAccept,AdministrationRuleTestCase.java,"void loggedIsCoAdministratorShouldAccept() {
		when(userSession.isLogged()).thenReturn(true);
		when(roleManager.isAdministrator()).thenReturn(false);
		when(roleManager.isCoAdministrator()).thenReturn(true);


		assertTrue(rule.shouldProceed(userSession, request));
	}
"
net.jforum.security.AdministrationRuleTestCase.notAdministratorShouldDeny,AdministrationRuleTestCase.java,"void notAdministratorShouldDeny() {
		when(userSession.isLogged()).thenReturn(true);
		when(roleManager.isAdministrator()).thenReturn(false);
		when(roleManager.isCoAdministrator()).thenReturn(false);

		assertFalse(rule.shouldProceed(userSession, request));
	}
"
net.jforum.security.AdministrationRuleTestCase.notLoggedShouldDeny,AdministrationRuleTestCase.java,"void notLoggedShouldDeny() {
		when(userSession.isLogged()).thenReturn(false);

		assertFalse(rule.shouldProceed(userSession, request));
	}
"
net.jforum.security.AdministrationRuleTestCase.setup,AdministrationRuleTestCase.java,"void setup() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
	}
"
net.jforum.security.PrivateMessageOwnerRuleTestCase.setup,PrivateMessageOwnerRuleTestCase.java,"void setup() {
		parameters = new HashMap<String, String[]>();
		parameters.put(""id"", Arrays.asList(""1"").toArray(new String[1]));
		when(request.getParameterMap()).thenReturn(parameters);
		when(request.getParameter(""id"")).thenReturn(""1"");
	}
"
net.jforum.security.PrivateMessageOwnerRuleTestCase.invalidMessageShouldDeny,PrivateMessageOwnerRuleTestCase.java,"void invalidMessageShouldDeny() {
		
		when(repository.get(1)).thenReturn(null);
		when(userSession.getUser()).thenReturn(new User());
		
		assertFalse(rule.shouldProceed(userSession, request));
	}
"
net.jforum.security.PrivateMessageOwnerRuleTestCase.toUserDifferentFromCurrentUserAlsoNotSenderShouldDeny,PrivateMessageOwnerRuleTestCase.java,"void toUserDifferentFromCurrentUserAlsoNotSenderShouldDeny() {
		PrivateMessage pm = new PrivateMessage();
		User user1 = new User();
		user1.setId(1);
		User user2 = new User();
		user1.setId(2);
		User user3 = new User();
		user1.setId(3);
		
		pm.setToUser(user2);
		pm.setFromUser(user3);
		when(userSession.getUser()).thenReturn(user1);
		when(repository.get(1)).thenReturn(pm);
		
		assertFalse(rule.shouldProceed(userSession, request));
	}
"
net.jforum.security.PrivateMessageOwnerRuleTestCase.toUserDifferentFromCurrentUserIsSenderShouldAccept,PrivateMessageOwnerRuleTestCase.java,"void toUserDifferentFromCurrentUserIsSenderShouldAccept() {
		PrivateMessage pm = new PrivateMessage();
		User user1 = new User();
		user1.setId(1);
		User user2 = new User();
		user1.setId(2);
		
		pm.setToUser(user2);
		pm.setFromUser(user1);
		when(userSession.getUser()).thenReturn(user1);
		when(repository.get(1)).thenReturn(pm);
		
		assertTrue(rule.shouldProceed(userSession, request));
		
	}
"
net.jforum.security.PrivateMessageOwnerRuleTestCase.idNotFoundExpectException,PrivateMessageOwnerRuleTestCase.java,"void idNotFoundExpectException() {
		parameters.clear();
		rule.shouldProceed(userSession, request);
	}
"
net.jforum.security.CreateNewTopicRuleTestCase.setup,CreateNewTopicRuleTestCase.java,"void setup() {
		parameterMap = new HashMap<String, String[]>();
		parameterMap.put(""forumId"", Arrays.asList(""1"").toArray(new String[1]));
		when(request.getParameterMap()).thenReturn(parameterMap);
		when(userSession.getRoleManager()).thenReturn(roleManager);
	}
"
net.jforum.security.CreateNewTopicRuleTestCase.findForumIdInTopicForumId,CreateNewTopicRuleTestCase.java,"void findForumIdInTopicForumId() {
		parameterMap.clear();
		parameterMap.put(""topic.forum.id"", Arrays.asList(""1"").toArray(new String[1]));

		when(request.getParameter(""topic.forum.id"")).thenReturn(""1"");
		when(repository.get(1)).thenReturn(new Forum());

		CreateNewTopicRule rule = new CreateNewTopicRule(repository, sessionManager);
		rule.shouldProceed(userSession, request);
	}
"
net.jforum.security.CreateNewTopicRuleTestCase.findForumIdKey,CreateNewTopicRuleTestCase.java,"void findForumIdKey() {
		when(request.getParameter(""forumId"")).thenReturn(""1"");
		when(repository.get(1)).thenReturn(new Forum());

		CreateNewTopicRule rule = new CreateNewTopicRule(repository, sessionManager);
		rule.shouldProceed(userSession, request);
	}
"
net.jforum.security.CreateNewTopicRuleTestCase.forumIdNotFoundExpectsException,CreateNewTopicRuleTestCase.java,"void forumIdNotFoundExpectsException() {
		parameterMap.clear();

		CreateNewTopicRule rule = new CreateNewTopicRule(repository, sessionManager);
		rule.shouldProceed(userSession, request);
	}
"
net.jforum.security.CreateNewTopicRuleTestCase.loggedNotReadOnlyNotReplyOnlyForumAllowedShouldAccept,CreateNewTopicRuleTestCase.java,"void loggedNotReadOnlyNotReplyOnlyForumAllowedShouldAccept() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(request.getParameter(""forumId"")).thenReturn(""1"");
		when(userSession.isLogged()).thenReturn(true);
		when(roleManager.isForumAllowed(1)).thenReturn(true);
		when(roleManager.isForumReadOnly(1)).thenReturn(false);
		when(roleManager.isForumReplyOnly(1)).thenReturn(false);
		when(roleManager.getPostOnlyWithModeratorOnline()).thenReturn(false);
		when(repository.get(1)).thenReturn(new Forum());

		CreateNewTopicRule rule = new CreateNewTopicRule(repository, sessionManager);
		assertTrue(rule.shouldProceed(userSession, request));
	}
"
net.jforum.security.CreateNewTopicRuleTestCase.postOnlyWithModeratorOnlineModeratorIsOffLineShouldDeny,CreateNewTopicRuleTestCase.java,"void postOnlyWithModeratorOnlineModeratorIsOffLineShouldDeny() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(request.getParameter(""forumId"")).thenReturn(""1"");
		when(userSession.isLogged()).thenReturn(true);
		when(roleManager.isForumAllowed(1)).thenReturn(true);
		when(roleManager.isForumReadOnly(1)).thenReturn(false);
		when(roleManager.isForumReplyOnly(1)).thenReturn(false);
		when(roleManager.getPostOnlyWithModeratorOnline()).thenReturn(true);
		when(sessionManager.isModeratorOnline()).thenReturn(false);
		when(repository.get(1)).thenReturn(new Forum());

		CreateNewTopicRule rule = new CreateNewTopicRule(repository, sessionManager);
		assertFalse(rule.shouldProceed(userSession, request));
	}
"
net.jforum.security.CreateNewTopicRuleTestCase.postOnlyWithModeratorOnlineModeratorIsOnlineShouldAccept,CreateNewTopicRuleTestCase.java,"void postOnlyWithModeratorOnlineModeratorIsOnlineShouldAccept() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(request.getParameter(""forumId"")).thenReturn(""1"");
		when(userSession.isLogged()).thenReturn(true);
		when(roleManager.isForumAllowed(1)).thenReturn(true);
		when(roleManager.isForumReadOnly(1)).thenReturn(false);
		when(roleManager.isForumReplyOnly(1)).thenReturn(false);
		when(roleManager.getPostOnlyWithModeratorOnline()).thenReturn(true);
		when(sessionManager.isModeratorOnline()).thenReturn(true);
		when(repository.get(1)).thenReturn(new Forum());

		CreateNewTopicRule rule = new CreateNewTopicRule(repository, sessionManager);
		assertTrue(rule.shouldProceed(userSession, request));
	}
"
net.jforum.security.CreateNewTopicRuleTestCase.anonymousPostsNotAllowedShouldDeny,CreateNewTopicRuleTestCase.java,"void anonymousPostsNotAllowedShouldDeny() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(request.getParameter(""forumId"")).thenReturn(""1"");
		when(userSession.isLogged()).thenReturn(false);
		when(roleManager.isForumAllowed(1)).thenReturn(true);

		Forum forum = new Forum();
		forum.setAllowAnonymousPosts(false);
		when(repository.get(1)).thenReturn(forum);

		CreateNewTopicRule rule = new CreateNewTopicRule(repository, sessionManager);
		assertFalse(rule.shouldProceed(userSession, request));
	}
"
net.jforum.security.CreateNewTopicRuleTestCase.forumReplyOnlyShouldDeny,CreateNewTopicRuleTestCase.java,"void forumReplyOnlyShouldDeny() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(request.getParameter(""forumId"")).thenReturn(""1"");
		when(userSession.isLogged()).thenReturn(true);
		when(roleManager.isForumAllowed(1)).thenReturn(true);
		when(roleManager.isForumReadOnly(1)).thenReturn(false);
		when(roleManager.isForumReplyOnly(1)).thenReturn(true);
		when(repository.get(1)).thenReturn(new Forum());

		CreateNewTopicRule rule = new CreateNewTopicRule(repository, sessionManager);
		assertFalse(rule.shouldProceed(userSession, request));
	}
"
net.jforum.security.CreateNewTopicRuleTestCase.forumNotAllowedShouldDeny,CreateNewTopicRuleTestCase.java,"void forumNotAllowedShouldDeny() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(request.getParameter(""forumId"")).thenReturn(""1"");
		when(roleManager.isForumAllowed(1)).thenReturn(false);
		when(repository.get(1)).thenReturn(new Forum());

		CreateNewTopicRule rule = new CreateNewTopicRule(repository, sessionManager);
		assertFalse(rule.shouldProceed(userSession, request));
	}
"
net.jforum.security.CreateNewTopicRuleTestCase.forumReadOnlyShouldDeny,CreateNewTopicRuleTestCase.java,"void forumReadOnlyShouldDeny() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(request.getParameter(""forumId"")).thenReturn(""1"");
		when(userSession.isLogged()).thenReturn(true);
		when(roleManager.isForumAllowed(1)).thenReturn(true);
		when(roleManager.isForumReadOnly(1)).thenReturn(true);
		when(repository.get(1)).thenReturn(new Forum());

		CreateNewTopicRule rule = new CreateNewTopicRule(repository, sessionManager);
		assertFalse(rule.shouldProceed(userSession, request));
	}
"
net.jforum.security.PrivateMessageEnabledRuleTestCase.shouldProceed,PrivateMessageEnabledRuleTestCase.java,"void shouldProceed() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isPrivateMessageEnabled()).thenReturn(true);

		assertTrue(rule.shouldProceed(userSession, null));
	}
"
net.jforum.security.AuthenticatedRuleTestCase.notLoggedShouldDeny,AuthenticatedRuleTestCase.java,"void notLoggedShouldDeny() {
		when(userSession.isLogged()).thenReturn(false);

		assertFalse(rule.shouldProceed(userSession, request));
	}
"
net.jforum.security.AuthenticatedRuleTestCase.loggedShouldProceed,AuthenticatedRuleTestCase.java,"void loggedShouldProceed() {
		when(userSession.isLogged()).thenReturn(true);

		assertTrue(rule.shouldProceed(userSession, request));
	}
"
net.jforum.security.AccessForumRuleTestCase.setup,AccessForumRuleTestCase.java,"void setup() {
		parameterMap = new HashMap<String, String[]>();
		parameterMap.put(""topicId"", Arrays.asList(""1"").toArray(new String[1]));
		when(request.getParameterMap()).thenReturn(parameterMap);
	}
"
net.jforum.security.AccessForumRuleTestCase.forumIdNotFoundExpectsException,AccessForumRuleTestCase.java,"void forumIdNotFoundExpectsException() {
		parameterMap.clear();
		
			
		rule.shouldProceed(userSession, request);
	}
"
net.jforum.security.AccessForumRuleTestCase.forumIdInForumIdParameter,AccessForumRuleTestCase.java,"void forumIdInForumIdParameter() {
		parameterMap.clear(); parameterMap.put(""forumId"", Arrays.asList(""1"").toArray(new String[1]));

		when(request.getParameter(""forumId"")).thenReturn(""1"");
			
		rule.shouldProceed(userSession, request);
	}
"
net.jforum.security.AccessForumRuleTestCase.forumIsAllowedShouldProceed,AccessForumRuleTestCase.java,"void forumIsAllowedShouldProceed() {
		when(request.getParameter(""topicId"")).thenReturn(""1"");

		Topic topic = new Topic(); topic.getForum().setId(7);

		when(topicRepository.get(1)).thenReturn(topic);
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isForumAllowed(7)).thenReturn(true);
	
		assertTrue(rule.shouldProceed(userSession, request));
	}
"
net.jforum.security.AccessForumRuleTestCase.forumIsBlockedShouldNotProceed,AccessForumRuleTestCase.java,"void forumIsBlockedShouldNotProceed() {
		when(request.getParameter(""topicId"")).thenReturn(""1"");

		Topic topic = new Topic(); topic.getForum().setId(7);

		when(topicRepository.get(1)).thenReturn(topic);
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isForumAllowed(7)).thenReturn(false);
	
		Assert.assertFalse(rule.shouldProceed(userSession, request));
		
	}
"
net.jforum.security.ReplyTopicRuleTestCase.setup,ReplyTopicRuleTestCase.java,"void setup() {
		parameterMap = new HashMap<String, String[]>();
		parameterMap.put(""topic.forum.id"", Arrays.asList(""1"").toArray(new String[1]));
		when(request.getParameterMap()).thenReturn(parameterMap);
		when(userSession.getRoleManager()).thenReturn(roleManager);
	}
"
net.jforum.security.ReplyTopicRuleTestCase.forumIdNotFoundExpectsException,ReplyTopicRuleTestCase.java,"void forumIdNotFoundExpectsException() {
		parameterMap.clear();

		rule.shouldProceed(userSession, request);
	}
"
net.jforum.security.ReplyTopicRuleTestCase.forumIdFromPostId,ReplyTopicRuleTestCase.java,"void forumIdFromPostId() {
		parameterMap.clear(); parameterMap.put(""postId"", Arrays.asList(""2"").toArray(new String[1]));
		when(request.getParameter(""postId"")).thenReturn(""2"");
		when(forumRepository.get(0)).thenReturn(new Forum());
		Post post = new Post(); post.setForum(new Forum());
		when(postRepository.get(2)).thenReturn(post);

		rule.shouldProceed(userSession, request);
	}
"
net.jforum.security.ReplyTopicRuleTestCase.forumIdFromTopicId,ReplyTopicRuleTestCase.java,"void forumIdFromTopicId() {
		parameterMap.clear(); parameterMap.put(""topicId"", Arrays.asList(""2"").toArray(new String[1]));
		when(request.getParameter(""topicId"")).thenReturn(""2"");
		when(topicRepository.get(2)).thenReturn(new Topic());
		when(forumRepository.get(0)).thenReturn(new Forum());

		rule.shouldProceed(userSession, request);
	}
"
net.jforum.security.ReplyTopicRuleTestCase.forumIdFromTopicForumId,ReplyTopicRuleTestCase.java,"void forumIdFromTopicForumId() {
		when(request.getParameter(""topic.forum.id"")).thenReturn(""1"");
		when(forumRepository.get(1)).thenReturn(new Forum());

		rule.shouldProceed(userSession, request);
	}
"
net.jforum.security.ReplyTopicRuleTestCase.loggedNotReadOnlyForumAllowedShouldAccept,ReplyTopicRuleTestCase.java,"void loggedNotReadOnlyForumAllowedShouldAccept() {
		when(request.getParameter(""topic.forum.id"")).thenReturn(""1"");
		when(userSession.isLogged()).thenReturn(true);
		when(roleManager.isForumAllowed(1)).thenReturn(true);
		when(roleManager.isForumReadOnly(1)).thenReturn(false);
		when(roleManager.getPostOnlyWithModeratorOnline()).thenReturn(false);
		when(forumRepository.get(1)).thenReturn(new Forum());

		assertTrue(rule.shouldProceed(userSession, request));
	}
"
net.jforum.security.ReplyTopicRuleTestCase.postOnlyWithModeratorOnlineModeratorIsOfflineShouldDeny,ReplyTopicRuleTestCase.java,"void postOnlyWithModeratorOnlineModeratorIsOfflineShouldDeny() {
		when(request.getParameter(""topic.forum.id"")).thenReturn(""1"");
		when(userSession.isLogged()).thenReturn(true);
		when(roleManager.isForumAllowed(1)).thenReturn(true);
		when(roleManager.isForumReadOnly(1)).thenReturn(false);
		when(roleManager.getPostOnlyWithModeratorOnline()).thenReturn(true);
		when(sessionManager.isModeratorOnline()).thenReturn(false);
		when(forumRepository.get(1)).thenReturn(new Forum());

		assertFalse(rule.shouldProceed(userSession, request));

	}
"
net.jforum.security.ReplyTopicRuleTestCase.postOnlyWithModeratorOnlineModeratorIsOnlineShouldAccept,ReplyTopicRuleTestCase.java,"void postOnlyWithModeratorOnlineModeratorIsOnlineShouldAccept() {
		when(request.getParameter(""topic.forum.id"")).thenReturn(""1"");
		when(userSession.isLogged()).thenReturn(true);
		when(roleManager.isForumAllowed(1)).thenReturn(true);
		when(roleManager.isForumReadOnly(1)).thenReturn(false);
		when(roleManager.getPostOnlyWithModeratorOnline()).thenReturn(true);
		when(sessionManager.isModeratorOnline()).thenReturn(true);
		when(forumRepository.get(1)).thenReturn(new Forum());

		assertTrue(rule.shouldProceed(userSession, request));

	}
"
net.jforum.security.ReplyTopicRuleTestCase.anonymousPostsNotAllowedShouldDeny,ReplyTopicRuleTestCase.java,"void anonymousPostsNotAllowedShouldDeny() {
		when(request.getParameter(""topic.forum.id"")).thenReturn(""1"");
		when(userSession.isLogged()).thenReturn(false);
		when(roleManager.isForumAllowed(1)).thenReturn(true);
		Forum forum = new Forum();
		forum.setAllowAnonymousPosts(false);

		when(forumRepository.get(1)).thenReturn(forum);

		assertFalse(rule.shouldProceed(userSession, request));
	}
"
net.jforum.security.ReplyTopicRuleTestCase.forumNotAllowedShouldDeny,ReplyTopicRuleTestCase.java,"void forumNotAllowedShouldDeny() {
		when(request.getParameter(""topic.forum.id"")).thenReturn(""1"");
		when(roleManager.isForumAllowed(1)).thenReturn(false);
		when(forumRepository.get(1)).thenReturn(new Forum());

		assertFalse(rule.shouldProceed(userSession, request));
	}
"
net.jforum.security.ReplyTopicRuleTestCase.forumReadOnlyShouldDeny,ReplyTopicRuleTestCase.java,"void forumReadOnlyShouldDeny() {
		when(request.getParameterMap()).thenReturn(parameterMap);
		when(request.getParameter(""topic.forum.id"")).thenReturn(""1"");
		when(userSession.isLogged()).thenReturn(true);
		when(roleManager.isForumAllowed(1)).thenReturn(true);
		when(roleManager.isForumReadOnly(1)).thenReturn(true);
		when(forumRepository.get(1)).thenReturn(new Forum());

		assertFalse(rule.shouldProceed(userSession, request));

	}
"
net.jforum.security.ChangePostRuleTestCase.setup,ChangePostRuleTestCase.java,"void setup() {
		parameterMap = new HashMap<String, String[]>();
		parameterMap.put(""postId"", Arrays.asList(""1"").toArray(new String[1]));
		when(request.getParameterMap()).thenReturn(parameterMap);
		when(userSession.getRoleManager()).thenReturn(roleManager);
	}
"
net.jforum.security.ChangePostRuleTestCase.postIdNotFoundExpectsException,ChangePostRuleTestCase.java,"void postIdNotFoundExpectsException() {
		parameterMap.clear();

		rule.shouldProceed(userSession, request);
	}
"
net.jforum.security.ChangePostRuleTestCase.postIdInPostIdParameterExpectSuccess,ChangePostRuleTestCase.java,"void postIdInPostIdParameterExpectSuccess() throws Exception {
		when(request.getParameter(""postId"")).thenReturn(""1"");
		
		TestCaseUtils.executePrivateMethod(""findPostId"", rule, request);
	}
"
net.jforum.security.ChangePostRuleTestCase.postIdInPostDotIdParameterExpectSuccess,ChangePostRuleTestCase.java,"void postIdInPostDotIdParameterExpectSuccess() throws Exception {
		parameterMap.clear(); parameterMap.put(""post.id"", Arrays.asList(""1"").toArray(new String[1]));
		when(request.getParameter(""post.id"")).thenReturn(""1"");
		
		TestCaseUtils.executePrivateMethod(""findPostId"", rule, request);
	}
"
net.jforum.plugins.post.FourmLimitedTimeDAOTestCase.getFourmLimitedTime,FourmLimitedTimeDAOTestCase.java,"void getFourmLimitedTime() {
		new JDBCLoader(session())
			.run(""/posteditlimited/dump.sql"");

		ForumLimitedTimeRepository dao = this.newFourmLimitedTimeDAO();
		Forum forum = new Forum();
		forum.setId(2);

		ForumLimitedTime fourmLimitedTime = dao.getForumLimitedTime(forum);

		Assert.assertNotNull(fourmLimitedTime);
		Assert.assertEquals(4, fourmLimitedTime.getId());
	}
"
net.jforum.plugins.post.FourmLimitedTimeDAOTestCase.getFourmLimitedTimeReturnNullIfNotFound,FourmLimitedTimeDAOTestCase.java,"void getFourmLimitedTimeReturnNullIfNotFound() {
		new JDBCLoader(session())
			.run(""/posteditlimited/dump.sql"");

		ForumLimitedTimeRepository dao = this.newFourmLimitedTimeDAO();
		Forum forum = new Forum();
		forum.setId(5);

		ForumLimitedTime fourmLimitedTime = dao.getForumLimitedTime(forum);

		Assert.assertNull(fourmLimitedTime);
	}
"
net.jforum.plugins.post.FourmLimitedTimeDAOTestCase.getLimitedTime,FourmLimitedTimeDAOTestCase.java,"void getLimitedTime() {
		new JDBCLoader(session())
		.run(""/posteditlimited/dump.sql"");

		ForumLimitedTimeRepository dao = this.newFourmLimitedTimeDAO();
		Forum forum = new Forum();
		forum.setId(1);

		long limitedTime = dao.getLimitedTime(forum);

		Assert.assertEquals(125, limitedTime);
	}
"
net.jforum.plugins.post.FourmLimitedTimeDAOTestCase.getLimitedTimeReturn0IfNotFound,FourmLimitedTimeDAOTestCase.java,"void getLimitedTimeReturn0IfNotFound() {
		new JDBCLoader(session())
		.run(""/posteditlimited/dump.sql"");

		ForumLimitedTimeRepository dao = this.newFourmLimitedTimeDAO();
		Forum forum = new Forum();
		forum.setId(5);

		long limitedTime = dao.getLimitedTime(forum);

		Assert.assertEquals(0, limitedTime);
	}
"
net.jforum.plugins.post.FourmLimitedTimeDAOTestCase.newFourmLimitedTimeDAO,FourmLimitedTimeDAOTestCase.java,"ForumLimitedTimeRepository newFourmLimitedTimeDAO() {
		return new ForumLimitedTimeRepository(session());
	}
"
net.jforum.plugins.post.ForumAdminTestCase.edit,ForumAdminTestCase.java,"void edit() {
		final int forumId = 1;

		when(config.getBoolean(""forum.time.limited.enable"", false)).thenReturn(true);
		when(forumRepository.get(forumId)).thenReturn(new Forum(1));
		when(repository.getLimitedTime(any(Forum.class))).thenReturn(0L);

		extension.edit(forumId);

		assertEquals(true, mockResult.included(""forumTimeLimitedEnable""));
		assertEquals(0L, mockResult.included(""forumLimitedTime""));

	}
"
net.jforum.plugins.post.ForumAdminTestCase.add,ForumAdminTestCase.java,"void add() {
		when(config.getBoolean(""forum.time.limited.enable"", false)).thenReturn(true);

		extension.add();

		assertEquals(true, mockResult.included(""fourmTimeLimitedEnable""));
		assertEquals(0, mockResult.included(""fourmLimitedTime""));
	}
"
net.jforum.plugins.post.ForumAdminTestCase.editSave,ForumAdminTestCase.java,"void editSave() {
		this.securityChecking();
		final Forum forum = new Forum();
		forum.setCategory(new Category());
		final ForumLimitedTime forumLimitedTime = new ForumLimitedTime();

		when(config.getBoolean(""forum.time.limited.enable"", false)).thenReturn(true);
		when(roleManager.isAdministrator()).thenReturn(true);
		when(repository.getForumLimitedTime(forum)).thenReturn(forumLimitedTime);

		extension.editSave(forum, 23);

		verify(repository).saveOrUpdate(forumLimitedTime);
	}
"
net.jforum.plugins.post.ForumAdminTestCase.addSave,ForumAdminTestCase.java,"void addSave() {
		this.securityChecking();
		final Forum forum = new Forum();
		forum.setId(1);
		Map<String, Object> m = new HashMap<String, Object>();
		m.put(""forum"", forum);

		when(config.getBoolean(""forum.time.limited.enable"", false)).thenReturn(true);
		when(roleManager.isAdministrator()).thenReturn(true);
		when(mockResult.included()).thenReturn(m);

		extension.addSave(23);

		verify(repository).add(any(ForumLimitedTime.class));
	}
"
net.jforum.plugins.post.ForumAdminTestCase.delete,ForumAdminTestCase.java,"void delete() {
		this.securityChecking();
		final Forum forum = new Forum(23);
		ForumLimitedTime forumLimitedTime = new ForumLimitedTime();
		forumLimitedTime.setId(1);
		when(config.getBoolean(""forum.time.limited.enable"", false)).thenReturn(true);
		when(roleManager.isAdministrator()).thenReturn(true);
		when(repository.getForumLimitedTime(forum)).thenReturn(forumLimitedTime);

		extension.delete(23);

		verify(repository).remove(forumLimitedTime);
	}
"
net.jforum.plugins.post.ForumAdminTestCase.securityChecking,ForumAdminTestCase.java,"void securityChecking() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(userSession.getUser()).thenReturn(new User());
	}
"
net.jforum.plugins.post.ForumAdminTestCase.editShouldExtendEdit,ForumAdminTestCase.java,"void editShouldExtendEdit() throws Exception {
		Method method = extension.getClass().getMethod(""edit"", int.class);
		assertNotNull(method);
		assertTrue(method.isAnnotationPresent(Extends.class));
		assertEquals(Actions.EDIT, method.getAnnotation(Extends.class).value()[0]);
	}
"
net.jforum.plugins.post.ForumAdminTestCase.editSaveShouldExtendEditSave,ForumAdminTestCase.java,"void editSaveShouldExtendEditSave() throws Exception {
		Method method = extension.getClass().getMethod(""editSave"", Forum.class, long.class);
		assertNotNull(method);
		assertTrue(method.isAnnotationPresent(Extends.class));
		assertEquals(Actions.EDITSAVE, method.getAnnotation(Extends.class).value()[0]);
	}
"
net.jforum.plugins.post.ForumAdminTestCase.addShouldExtendAdd,ForumAdminTestCase.java,"void addShouldExtendAdd() throws Exception {
		Method method = extension.getClass().getMethod(""add"");
		assertNotNull(method);
		assertTrue(method.isAnnotationPresent(Extends.class));
		assertEquals(Actions.ADD, method.getAnnotation(Extends.class).value()[0]);
	}
"
net.jforum.plugins.post.ForumAdminTestCase.addSaveShouldExtendAddSave,ForumAdminTestCase.java,"void addSaveShouldExtendAddSave() throws Exception {
		Method method = extension.getClass().getMethod(""addSave"", long.class);
		assertNotNull(method);
		assertTrue(method.isAnnotationPresent(Extends.class));
		assertEquals(Actions.ADDSAVE, method.getAnnotation(Extends.class).value()[0]);
	}
"
net.jforum.plugins.post.ForumAdminTestCase.deleteShouldExtendSelete,ForumAdminTestCase.java,"void deleteShouldExtendSelete() throws Exception {
		Method method = extension.getClass().getMethod(""delete"", int[].class);
		assertNotNull(method);
		assertTrue(method.isAnnotationPresent(Extends.class));
		assertEquals(""delete"", method.getAnnotation(Extends.class).value()[0]);
	}
"
net.jforum.plugins.post.ForumAdminTestCase.shouldBeAnExtensionOfAdminForums,ForumAdminTestCase.java,"void shouldBeAnExtensionOfAdminForums() {
		assertTrue(extension.getClass().isAnnotationPresent(ActionExtension.class));
		ActionExtension annotation = extension.getClass().getAnnotation(ActionExtension.class);
		assertEquals(Domain.FORUMS_ADMIN, annotation.value());
	}
"
net.jforum.extensions.PostReportCounterOperationTestCase.notLoggedExpectZero,PostReportCounterOperationTestCase.java,"void notLoggedExpectZero() {
		when(userSession.isLogged()).thenReturn(false);

		operation.execute();
		
		assertEquals(0, mockResult.included(""totalPostReports""));
	}
"
net.jforum.extensions.PostReportCounterOperationTestCase.notModeratorExpectZero,PostReportCounterOperationTestCase.java,"void notModeratorExpectZero() {
		when(userSession.isLogged()).thenReturn(true);
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isModerator()).thenReturn(false);

		operation.execute();
		
		assertEquals(0, mockResult.included(""totalPostReports""));
	}
"
net.jforum.extensions.PostReportCounterOperationTestCase.moderatorExpect10,PostReportCounterOperationTestCase.java,"void moderatorExpect10() {
		int[] forumIds = { 1, 2 };

		when(userSession.isLogged()).thenReturn(true);
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isModerator()).thenReturn(true);
		when(roleManager.getRoleValues(SecurityConstants.FORUM)).thenReturn(forumIds);
		when(repository.countPendingReports(forumIds)).thenReturn(10);

		operation.execute();
		
		assertEquals(10, mockResult.included(""totalPostReports""));
	}
"
net.jforum.sso.DefaultLoginAuthenticatorTestCase.userHasActivationKeyButNotActiveExpectFail,DefaultLoginAuthenticatorTestCase.java,"void userHasActivationKeyButNotActiveExpectFail() {
		User user = new User();
		user.setDeleted(false);
		user.setActivationKey(""some key"");
		user.setActive(false);

		when(repository.validateLogin(""user"", ""passwd"")).thenReturn(user);

		User userValidated = authenticator.validateLogin(""user"", ""passwd"", null);
		Assert.assertNull(userValidated);
	}
"
net.jforum.sso.DefaultLoginAuthenticatorTestCase.activationKeyNotNullNotActiveExpectFail,DefaultLoginAuthenticatorTestCase.java,"void activationKeyNotNullNotActiveExpectFail() {
		User user = new User();
		user.setDeleted(false);
		user.setActive(false);
		user.setActivationKey(""some key"");

		when(repository.validateLogin(""user"", ""passwd"")).thenReturn(user);

		User userValidated = authenticator.validateLogin(""user"", ""passwd"", null);
		Assert.assertNull(userValidated);
	}
"
net.jforum.sso.DefaultLoginAuthenticatorTestCase.userDeletedExpectFail,DefaultLoginAuthenticatorTestCase.java,"void userDeletedExpectFail() {
		User user = new User();
		user.setDeleted(true);

		when(repository.validateLogin(""user"", ""passwd"")).thenReturn(user);

		User userValidated = authenticator.validateLogin(""user"", ""passwd"", null);
		Assert.assertNull(userValidated);
	}
"
net.jforum.sso.DefaultLoginAuthenticatorTestCase.invalidLoginFail,DefaultLoginAuthenticatorTestCase.java,"void invalidLoginFail() {
		when(repository.validateLogin(""user"", ""passwd"")).thenReturn(null);

		User userValidated = authenticator.validateLogin(""user"", ""passwd"", null);
		Assert.assertNull(userValidated);
	}
"
net.jforum.sso.RemoteUserSSOTestCase.remoteUserNotNullSessionUserNameDoesNotMatchExpectFalse,RemoteUserSSOTestCase.java,"void remoteUserNotNullSessionUserNameDoesNotMatchExpectFalse() {
		when(request.getRemoteUser()).thenReturn(""user"");

		us.getUser().setUsername(""another user"");

		Assert.assertFalse(sso.isSessionValid(us));
	}
"
net.jforum.sso.RemoteUserSSOTestCase.remoteUserNotNullAnonymousUserExpectFalse,RemoteUserSSOTestCase.java,"void remoteUserNotNullAnonymousUserExpectFalse() {
		when(request.getRemoteUser()).thenReturn(""user"");

		us.getUser().setId(1);

		Assert.assertFalse(sso.isSessionValid(us));
	}
"
net.jforum.sso.RemoteUserSSOTestCase.remoteUserNullExpectFalse,RemoteUserSSOTestCase.java,"void remoteUserNullExpectFalse() {
		when(request.getRemoteUser()).thenReturn(null);

		Assert.assertFalse(sso.isSessionValid(us));
	}
"
net.jforum.sso.RemoteUserSSOTestCase.setup,RemoteUserSSOTestCase.java,"void setup() {
		us.setRequest(request);

		sso = new RemoteUserSSO();
		sso.setConfig(config);

		when(config.getInt(ConfigKeys.ANONYMOUS_USER_ID)).thenReturn(1);
	}
"
net.jforum.actions.extensions.TopicWatchExtensionTestCase.afterListNogLoggedWatchingShouldBeFalse,TopicWatchExtensionTestCase.java,"void afterListNogLoggedWatchingShouldBeFalse() {
		this.afterListExpectations(false);

		extension.afterList();

		assertEquals(false, mockResult.included(""isUserWatchingTopic""));
	}
"
net.jforum.actions.extensions.TopicWatchExtensionTestCase.afterListLoggedWatchingShouldBeTrue,TopicWatchExtensionTestCase.java,"void afterListLoggedWatchingShouldBeTrue() {
		this.afterListExpectations(true);
		Topic t = new Topic();
		t.setId(1);
		when(service.getSubscription(t, new User())).thenReturn(new TopicWatch());

		extension.afterList();

		assertEquals(true, mockResult.included(""isUserWatchingTopic""));
	}
"
net.jforum.actions.extensions.TopicWatchExtensionTestCase.afterListExpectations,TopicWatchExtensionTestCase.java,"void afterListExpectations(final boolean isLogged) {
		Topic t = new Topic();
		t.setId(1);

		if (isLogged) {
			Map<String, Object> m = new HashMap<String, Object>();
			m.put(""topic"", t);
			when(mockResult.included()).thenReturn(m);
		}

		when(userSession.isLogged()).thenReturn(isLogged);
		when(userSession.getUser()).thenReturn(new User());
	}
"
net.jforum.actions.extensions.TopicWatchExtensionTestCase.afterListShouldExtendList,TopicWatchExtensionTestCase.java,"void afterListShouldExtendList() throws Exception {
		Method method = extension.getClass().getMethod(""afterList"", new Class[0]);
		Assert.assertNotNull(method);
		Assert.assertTrue(method.isAnnotationPresent(Extends.class));
		Assert.assertEquals(Actions.LIST, method.getAnnotation(Extends.class).value()[0]);
	}
"
net.jforum.actions.extensions.TopicWatchExtensionTestCase.watchShouldHaveAuthenticatedRuleAndDisplayLogin,TopicWatchExtensionTestCase.java,"void watchShouldHaveAuthenticatedRuleAndDisplayLogin() throws Exception {
		this.shouldHaveAuthenticatedRuleAndDisplayLogin(""watch"");
	}
"
net.jforum.actions.extensions.TopicWatchExtensionTestCase.unwatchShouldHaveAuthenticatedRuleAndDisplayLogin,TopicWatchExtensionTestCase.java,"void unwatchShouldHaveAuthenticatedRuleAndDisplayLogin() throws Exception {
		this.shouldHaveAuthenticatedRuleAndDisplayLogin(""unwatch"");
	}
"
net.jforum.actions.extensions.TopicWatchExtensionTestCase.shouldHaveAuthenticatedRuleAndDisplayLogin,TopicWatchExtensionTestCase.java,"void shouldHaveAuthenticatedRuleAndDisplayLogin(String methodName) throws Exception {
		Method method = extension.getClass().getMethod(methodName, int.class, int.class);
		Assert.assertNotNull(method);
		Assert.assertTrue(method.isAnnotationPresent(SecurityConstraint.class));
		Assert.assertEquals(AuthenticatedRule.class, method.getAnnotation(SecurityConstraint.class).value());
		Assert.assertTrue(method.getAnnotation(SecurityConstraint.class).displayLogin());
	}
"
net.jforum.actions.extensions.TopicWatchExtensionTestCase.shouldBeAnExtensionOfTopics,TopicWatchExtensionTestCase.java,"void shouldBeAnExtensionOfTopics() {
		Assert.assertTrue(extension.getClass().isAnnotationPresent(ActionExtension.class));
		ActionExtension annotation = extension.getClass().getAnnotation(ActionExtension.class);
		Assert.assertEquals(Domain.TOPICS, annotation.value());
	}
"
net.jforum.actions.helpers.PaginationTestCase.pagination1,PaginationTestCase.java,"void pagination1() {
		Pagination p = this.newPagination(5, 20, 0);

		assertEquals(1, p.getThisPage());
		assertEquals(4, p.getTotalPages());
	}
"
net.jforum.actions.helpers.PaginationTestCase.pagination2,PaginationTestCase.java,"void pagination2() {
		Pagination p = this.newPagination(5, 19, 0);
		assertEquals(4, p.getTotalPages());
	}
"
net.jforum.actions.helpers.PaginationTestCase.pagination3,PaginationTestCase.java,"void pagination3() {
		Pagination p = this.newPagination(3, 30, 0);
		assertEquals(10, p.getTotalPages());
	}
"
net.jforum.actions.helpers.PaginationTestCase.pagination4,PaginationTestCase.java,"void pagination4() {
		Pagination p = this.newPagination(3, 31, 0);
		assertEquals(11, p.getTotalPages());
	}
"
net.jforum.actions.helpers.PaginationTestCase.pagination5,PaginationTestCase.java,"void pagination5() {
		Pagination p = this.newPagination(7, 543, 0);
		assertEquals(78, p.getTotalPages());
	}
"
net.jforum.actions.helpers.PaginationTestCase.pageShouldNotBeBiggerThanTotalPages,PaginationTestCase.java,"void pageShouldNotBeBiggerThanTotalPages() {
		Pagination p = this.newPagination(10, 50, 100);
		assertEquals(p.getTotalPages(), p.getThisPage());
	}
"
net.jforum.actions.helpers.PaginationTestCase.pageZeroThisPageShouldBeOne,PaginationTestCase.java,"void pageZeroThisPageShouldBeOne() {
		Pagination p = this.newPagination(30, 100, 0);
		assertEquals(1, p.getThisPage());
	}
"
net.jforum.actions.helpers.PaginationTestCase.pageZeroStartShouldBeZero,PaginationTestCase.java,"void pageZeroStartShouldBeZero() {
		Pagination p = this.newPagination(30, 100, 0);
		assertEquals(0, p.getStart());
	}
"
net.jforum.actions.helpers.PaginationTestCase.pageOneStartShouldBeZero,PaginationTestCase.java,"void pageOneStartShouldBeZero() {
		Pagination p = this.newPagination(30, 100, 1);
		assertEquals(0, p.getStart());
	}
"
net.jforum.actions.helpers.PaginationTestCase.pageTwoStartShouldBeProportional,PaginationTestCase.java,"void pageTwoStartShouldBeProportional() {
		Pagination p = this.newPagination(30, 100, 2);
		assertEquals(30, p.getStart());
	}
"
net.jforum.actions.helpers.PaginationTestCase.forForum,PaginationTestCase.java,"void forForum() {
		final Forum forum = mock(Forum.class);
		final JForumConfig config = mock(JForumConfig.class);

		when(config.getInt(ConfigKeys.TOPICS_PER_PAGE)).thenReturn(10);
		when(forum.getTotalTopics()).thenReturn(50);
		when(forum.getId()).thenReturn(1);

		Pagination p = new Pagination(config, 3).forForum(forum);

		assertEquals(10, p.getRecordsPerPage());
		assertEquals(50, p.getTotalRecords());
		assertEquals(5, p.getTotalPages());
		assertEquals(3, p.getThisPage());
		assertEquals(20, p.getStart());
		assertEquals(String.format(""/%s/%s"", Domain.FORUMS, Actions.SHOW), p.getBaseUrl());
	}
"
net.jforum.actions.helpers.PaginationTestCase.forTopic,PaginationTestCase.java,"void forTopic() {
		final Topic topic = mock(Topic.class);
		final JForumConfig config = mock(JForumConfig.class);

		when(config.getInt(ConfigKeys.POSTS_PER_PAGE)).thenReturn(10);
		when(topic.getTotalPosts()).thenReturn(50);
		when(topic.getId()).thenReturn(1);

		Pagination p = new Pagination(config, 3).forTopic(topic);

		assertEquals(10, p.getRecordsPerPage());
		assertEquals(50, p.getTotalRecords());
		assertEquals(5, p.getTotalPages());
		assertEquals(3, p.getThisPage());
		assertEquals(20, p.getStart());
		assertEquals(String.format(""/%s/%s"", Domain.TOPICS, Actions.LIST), p.getBaseUrl());
	}
"
net.jforum.actions.helpers.PaginationTestCase.newPagination,PaginationTestCase.java,"Pagination newPagination(int recordsPerPage, int totalRecords, int page) {
		return new Pagination(totalRecords, recordsPerPage, page, """", 0);
	}
"
net.jforum.controllers.GroupAdminControllerTestCase.setup,GroupAdminControllerTestCase.java,"void setup() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(mockResult.redirectTo(controller)).thenReturn(mockGroupAdminControllerRedirect);
		when(mockResult.forwardTo(controller)).thenReturn(mockGroupAdminControllerForward);
	}
"
net.jforum.controllers.GroupAdminControllerTestCase.permissions,GroupAdminControllerTestCase.java,"void permissions() {
		when(repository.get(1)).thenReturn(new Group());
		when(roleManager.isAdministrator()).thenReturn(true);
		when(categoryRepository.getAllCategories()).thenReturn(new ArrayList<Category>());
		when(repository.getAllGroups()).thenReturn(new ArrayList<Group>());

		controller.permissions(1);

		verify(mockResult).include(""group"", new Group());
		verify(mockResult).include(""groups"", new ArrayList<Group>());
		verify(mockResult).include(""categories"", new ArrayList<Category>());
	}
"
net.jforum.controllers.GroupAdminControllerTestCase.permissionsSave,GroupAdminControllerTestCase.java,"void permissionsSave() {
		when(roleManager.isAdministrator()).thenReturn(true);
		when(mockRequest.getParameterNames()).thenReturn(Collections.enumeration(Collections.<String>emptyList()));
		
		controller.permissionsSave(1);

		verify(service).savePermissions(eq(1), anyMap());
		verify(mockGroupAdminControllerRedirect).list();
	}
"
net.jforum.controllers.GroupAdminControllerTestCase.deleteIsFullAdministratorShouldAllow,GroupAdminControllerTestCase.java,"void deleteIsFullAdministratorShouldAllow() {
		when(roleManager.isAdministrator()).thenReturn(true);

		controller.delete(1, 2);

		verify(service).delete(1, 2);
		verify(mockGroupAdminControllerRedirect).list();
	}
"
net.jforum.controllers.GroupAdminControllerTestCase.deleteIsNotFullAdministratorShouldIgnore,GroupAdminControllerTestCase.java,"void deleteIsNotFullAdministratorShouldIgnore() {
		when(roleManager.isAdministrator()).thenReturn(false);

		controller.delete(1, 2);

		verify(mockGroupAdminControllerRedirect).list();
	}
"
net.jforum.controllers.GroupAdminControllerTestCase.list,GroupAdminControllerTestCase.java,"void list() {
		ArrayList<Group> groups = new ArrayList<Group>();

		when(repository.getAllGroups()).thenReturn(groups);

		controller.list();

		assertEquals(groups, mockResult.included(""groups""));
	}
"
net.jforum.controllers.GroupAdminControllerTestCase.editExpectsAGroup,GroupAdminControllerTestCase.java,"void editExpectsAGroup() {
		when(roleManager.isAdministrator()).thenReturn(true);
		when(repository.get(2)).thenReturn(group);

		controller.edit(2);

		verify(mockResult).include(""group"", group);
		verify(mockGroupAdminControllerForward).add();
	}
"
net.jforum.controllers.GroupAdminControllerTestCase.editSaveIsFullAdministratorExpectsSuccess,GroupAdminControllerTestCase.java,"void editSaveIsFullAdministratorExpectsSuccess() {
		when(roleManager.isAdministrator()).thenReturn(true);

		controller.editSave(group);

		verify(service).update(group);
		verify(mockGroupAdminControllerRedirect).list();
	}
"
net.jforum.controllers.GroupAdminControllerTestCase.editSaveIsGroupManagerExpectsSuccess,GroupAdminControllerTestCase.java,"void editSaveIsGroupManagerExpectsSuccess() {
		when(roleManager.isAdministrator()).thenReturn(false);
		when(roleManager.isGroupManager(group.getId())).thenReturn(true);

		controller.editSave(group);

		verify(service).update(group);
		verify(mockGroupAdminControllerRedirect).list();
	}
"
net.jforum.controllers.GroupAdminControllerTestCase.editSaveIsNotFullAdministratorAndNotGroupManagerShouldIgnore,GroupAdminControllerTestCase.java,"void editSaveIsNotFullAdministratorAndNotGroupManagerShouldIgnore() {
		when(roleManager.isAdministrator()).thenReturn(false);
		when(roleManager.isGroupManager(group.getId())).thenReturn(false);

		controller.editSave(group);

		verify(mockGroupAdminControllerRedirect).list();
	}
"
net.jforum.controllers.GroupAdminControllerTestCase.addSaveIsFullAdministratorShouldAllow,GroupAdminControllerTestCase.java,"void addSaveIsFullAdministratorShouldAllow() {
		when(roleManager.isAdministrator()).thenReturn(true);

		controller.addSave(new Group());

		verify(service).add(notNull(Group.class));
		verify(mockGroupAdminControllerRedirect).list();
	}
"
net.jforum.controllers.GroupAdminControllerTestCase.addSaveIsNotFullAdministratorShouldIgnore,GroupAdminControllerTestCase.java,"void addSaveIsNotFullAdministratorShouldIgnore() {
		when(roleManager.isAdministrator()).thenReturn(false);

		controller.addSave(new Group());

		verify(mockGroupAdminControllerRedirect).list();
	}
"
net.jforum.controllers.GroupAdminControllerTestCase.addIsNotFullAdministratorShouldIgnore,GroupAdminControllerTestCase.java,"void addIsNotFullAdministratorShouldIgnore() {
		when(roleManager.isAdministrator()).thenReturn(false);

		controller.add();

		verify(mockGroupAdminControllerRedirect).list();
	}
"
net.jforum.controllers.GroupAdminControllerTestCase.addIsFullAdministratorShouldAllow,GroupAdminControllerTestCase.java,"void addIsFullAdministratorShouldAllow() {
		when(roleManager.isAdministrator()).thenReturn(true);

		controller.add();

		verify(mockGroupAdminControllerRedirect,never()).list();
	}
"
net.jforum.controllers.SearchControllerTestCase.executeWithEmptyQueryShouldRedirectToFilters,SearchControllerTestCase.java,"void executeWithEmptyQueryShouldRedirectToFilters() {
		SearchParams params = new SearchParams();
		params.setQuery("""");
		
		controller.execute(params);
		
		verify(mockResult).redirectTo(Actions.FILTERS);
	}
"
net.jforum.controllers.SearchControllerTestCase.executeFindThreeRecordsOneIsNotAllowedShouldRemoveExpectTwoRecords,SearchControllerTestCase.java,"void executeFindThreeRecordsOneIsNotAllowedShouldRemoveExpectTwoRecords() throws Exception {
		final SearchResult result = new SearchResult(new ArrayList<Post>(Arrays.asList(this.newPost(1, 1), this.newPost(2, 1), this.newPost(3, 2))), 3);
		final SearchParams params = new SearchParams();
		params.setQuery(""abc"");

		when(config.getInt(ConfigKeys.TOPICS_PER_PAGE)).thenReturn(30);
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(searchRepository.search(params)).thenReturn(result);
		when(roleManager.isForumAllowed(1)).thenReturn(true);
		when(roleManager.isForumAllowed(2)).thenReturn(false);
		when(categoryRepository.getAllCategories()).thenReturn(new ArrayList<Category>());
			
		controller.execute(params);
		
		assertEquals(result.getResults(), mockResult.included(""results""));
		assertEquals(params, mockResult.included(""searchParams""));
		assertEquals(new Pagination(config, 0), mockResult.included(""pagination""));
		assertEquals(new ArrayList<Category>(), mockResult.included(""categories""));
		assertEquals(2, result.getTotalRecords());
		assertEquals(2, result.getResults().size());
		Post post = new Post();
		post.setId(3);
		assertFalse(result.getResults().contains(post));
	}
"
net.jforum.controllers.SearchControllerTestCase.filter,SearchControllerTestCase.java,"void filter() {
		when(categoryRepository.getAllCategories()).thenReturn(new ArrayList<Category>());
	
		controller.filters();
		
		assertEquals(new ArrayList<Category>(), mockResult.included(""categories""));
	}
"
net.jforum.controllers.SearchControllerTestCase.newPost,SearchControllerTestCase.java,"Post newPost(int postId, int forumId) {
		Post post = new Post();
		post.setId(postId);
		post.setForum(new Forum());
		post.getForum().setId(forumId);
		return post;
	}
"
net.jforum.controllers.SmilieAdminControllerTestCase.edit,SmilieAdminControllerTestCase.java,"void edit() {
		when(repository.get(1)).thenReturn(new Smilie());
		when(mockResult.forwardTo(controller)).thenReturn(mockSmilieAdminController);
			
		controller.edit(1);
		
		assertEquals(new Smilie(), mockResult.included(""smilie""));
		verify(mockSmilieAdminController).add();
	}
"
net.jforum.controllers.SmilieAdminControllerTestCase.editSave,SmilieAdminControllerTestCase.java,"void editSave() {
		when(mockResult.redirectTo(controller)).thenReturn(mockSmilieAdminController);
			
		controller.editSave(new Smilie(), null);
		
		verify(service).update(notNull(Smilie.class), isNull(UploadedFile.class));
		verify(mockSmilieAdminController).list();
	}
"
net.jforum.controllers.SmilieAdminControllerTestCase.delete,SmilieAdminControllerTestCase.java,"void delete() {
		when(mockResult.redirectTo(controller)).thenReturn(mockSmilieAdminController );
			
		controller.delete(1, 2, 3);
		
		verify(service).delete(1, 2, 3);
		verify(mockSmilieAdminController).list();
	}
"
net.jforum.controllers.SmilieAdminControllerTestCase.listExpectOneRecord,SmilieAdminControllerTestCase.java,"void listExpectOneRecord() {
		when(repository.getAllSmilies()).thenReturn(new ArrayList<Smilie>());
			
		controller.list();
		
		assertEquals(new ArrayList<Smilie>(), mockResult.included(""smilies""));
	}
"
net.jforum.controllers.SmilieAdminControllerTestCase.addSave,SmilieAdminControllerTestCase.java,"void addSave() {
		when(mockResult.redirectTo(controller)).thenReturn(mockSmilieAdminController);
			
		controller.addSave(new Smilie(), null);
		
		verify(service).add(notNull(Smilie.class), isNull(UploadedFile.class));
		verify(mockSmilieAdminController).list();
	}
"
net.jforum.controllers.AdminTestCase.shouldHaveAdministrationRule,AdminTestCase.java,"void shouldHaveAdministrationRule() throws Exception {
		assertTrue(type.isAnnotationPresent(SecurityConstraint.class));
		assertEquals(AdministrationRule.class, type.getAnnotation(SecurityConstraint.class).value());
		assertTrue(type.getAnnotation(SecurityConstraint.class).displayLogin());
	}
"
net.jforum.controllers.ModerationControllerTestCase.moveTopics,ModerationControllerTestCase.java,"void moveTopics() {
		when(userSession.getUser()).thenReturn(user);
		when(roleManager.getCanMoveTopics()).thenReturn(true);
			
		controller.moveTopics(1, ""return path"", moderationLog, 2, 3, 4);
		
		verify(service).moveTopics(1, moderationLog, 2, 3, 4);
		verify(mockResult).redirectTo(""return path"");
	}
"
net.jforum.controllers.ModerationControllerTestCase.moveTopicsDoesNotHaveRoleShouldIgnore,ModerationControllerTestCase.java,"void moveTopicsDoesNotHaveRoleShouldIgnore() {
		when(roleManager.getCanMoveTopics()).thenReturn(false);
			
		controller.moveTopics(1, ""return path"", moderationLog, 1, 2);
		
		verify(mockResult).redirectTo(""return path"");
	}
"
net.jforum.controllers.ModerationControllerTestCase.askMoveDestination,ModerationControllerTestCase.java,"void askMoveDestination() {
		when(roleManager.getCanMoveTopics()).thenReturn(true);
		when(categoryRepository.getAllCategories()).thenReturn(new ArrayList<Category>());
			
		controller.askMoveDestination(""return path"", 10, 1, 2, 3);
		
		assertArrayEquals(new int[] { 1, 2, 3 }, (int[])mockResult.included(""topicIds""));
		assertEquals(10, mockResult.included(""fromForumId""));
		assertEquals(""return path"", mockResult.included(""returnUrl""));
		assertEquals(new ArrayList<Category>(), mockResult.included(""categories""));
	}
"
net.jforum.controllers.ModerationControllerTestCase.askMoveDestinationDoesNotHaveRoleShouldIgnore,ModerationControllerTestCase.java,"void askMoveDestinationDoesNotHaveRoleShouldIgnore() {
		when(roleManager.getCanMoveTopics()).thenReturn(false);
			
		controller.askMoveDestination(""return path"", 1, 2, 3);
		
		verify(mockResult).redirectTo(""return path"");
	}
"
net.jforum.controllers.ModerationControllerTestCase.lockUnlock,ModerationControllerTestCase.java,"void lockUnlock() {
		when(userSession.getUser()).thenReturn(user);
		when(roleManager.getCanLockUnlockTopics()).thenReturn(true);
		when(mockResult.redirectTo(ForumController.class)).thenReturn(mockForumController);
	
		controller.lockUnlock(1, null, moderationLog, new int[] { 1, 2, 3 });

		verify(service).lockUnlock(new int[] { 1, 2, 3 }, moderationLog);
		verify(mockForumController).show(1, 0);
	}
"
net.jforum.controllers.ModerationControllerTestCase.lockUnlockDoesNotHaveRoleShouldIgnore,ModerationControllerTestCase.java,"void lockUnlockDoesNotHaveRoleShouldIgnore() {
		when(roleManager.getCanLockUnlockTopics()).thenReturn(false);
		when(mockResult.redirectTo(ForumController.class)).thenReturn(mockForumController);
			
		controller.lockUnlock(1, null, moderationLog, new int[] { 1 });
		
		verify(mockForumController).show(1, 0);
	}
"
net.jforum.controllers.ModerationControllerTestCase.deleteTopicsExpectSuccess,ModerationControllerTestCase.java,"void deleteTopicsExpectSuccess() {
		when(userSession.getUser()).thenReturn(user);
		when(roleManager.getCanDeletePosts()).thenReturn(true);
		when(topicRepository.get(4)).thenReturn(new Topic());
		when(topicRepository.get(5)).thenReturn(new Topic());
		when(mockResult.redirectTo(ForumController.class)).thenReturn(mockForumController);

		controller.deleteTopics(1, null, new int[] { 4, 5 }, moderationLog);
		
		verify(service).deleteTopics(Arrays.asList(new Topic(), new Topic()), moderationLog);
		// TODO pass zero?
		verify(mockForumController).show(1, 0);
	}
"
net.jforum.controllers.ModerationControllerTestCase.deleteTopicsDoesNotHaveRoleShouldIgnore,ModerationControllerTestCase.java,"void deleteTopicsDoesNotHaveRoleShouldIgnore() {
		when(roleManager.getCanDeletePosts()).thenReturn(false);
		// TODO pass zero?
		when(mockResult.redirectTo(ForumController.class)).thenReturn(mockForumController);
			
		controller.deleteTopics(1, null, new int[] { 4 }, moderationLog);
		
		verify(mockForumController).show(1, 0);
	}
"
net.jforum.controllers.ModerationControllerTestCase.approveExpectSuccess,ModerationControllerTestCase.java,"void approveExpectSuccess() {
		when(roleManager.getCanApproveMessages()).thenReturn(true);
		when(mockResult.redirectTo(ForumController.class)).thenReturn(mockForumController);
			
		controller.approve(1, Arrays.asList(new ApproveInfo[0]));
		
		verify(service).doApproval(1, Arrays.asList(new ApproveInfo[0]));
		// TODO pass zero?
		verify(mockForumController).show(1, 0);
	}
"
net.jforum.controllers.ModerationControllerTestCase.approveDoesNotHaveRequiredRoleShouldIgnore,ModerationControllerTestCase.java,"void approveDoesNotHaveRequiredRoleShouldIgnore() {
		when(roleManager.getCanApproveMessages()).thenReturn(false);
		when(mockResult.redirectTo(ForumController.class)).thenReturn(mockForumController);
			
		controller.approve(1, Arrays.asList(new ApproveInfo[0]));
		
		verify(mockForumController).show(1, 0);
	}
"
net.jforum.controllers.TopicControllerTestCase.setup,TopicControllerTestCase.java,"void setup() {
		topic = spy(new Topic(topicRepository));
		when(mockResult.redirectTo(MessageController.class)).thenReturn(mockMessageControllerRedirect);
	}
"
net.jforum.controllers.TopicControllerTestCase.replyReview,TopicControllerTestCase.java,"void replyReview() {
		topic.setId(1);
		
		when(topicRepository.get(1)).thenReturn(topic);
		when(config.getInt(ConfigKeys.POSTS_PER_PAGE)).thenReturn(10);
		when(topicRepository.getPosts(topic, 0, 10)).thenReturn(new ArrayList<Post>());
		when(topicRepository.getTotalPosts(topic)).thenReturn(5);
		

		topicController.replyReview(1);
		
		assertEquals(topic, mockResult.included(""topic""));
		assertEquals(new ArrayList<Post>(), mockResult.included(""posts""));
	}
"
net.jforum.controllers.TopicControllerTestCase.listTopicIsWaitingModerationShouldRedirect,TopicControllerTestCase.java,"void listTopicIsWaitingModerationShouldRedirect() {
		topic.setId(1);
		topic.getForum().setId(2);
		topic.setPendingModeration(true);
		
		when(topicRepository.get(1)).thenReturn(topic);
		
		topicController.list(1, 0, false);
		
		verify(mockMessageControllerRedirect).topicWaitingModeration(2);
		
	}
"
net.jforum.controllers.TopicControllerTestCase.listShouldHaveAccessForumConstraint,TopicControllerTestCase.java,"void listShouldHaveAccessForumConstraint() throws Exception {
		Method method = topicController.getClass().getMethod(""list"", int.class, int.class, boolean.class);
		assertNotNull(method);
		assertTrue(method.isAnnotationPresent(SecurityConstraint.class));
		assertEquals(AccessForumRule.class, method.getAnnotation(SecurityConstraint.class).value());
		assertTrue(method.getAnnotation(SecurityConstraint.class).displayLogin());
	}
"
net.jforum.controllers.TopicControllerTestCase.addShouldHaveCreateNewTopicConstraint,TopicControllerTestCase.java,"void addShouldHaveCreateNewTopicConstraint() throws Exception {
		Method method = topicController.getClass().getMethod(""add"", int.class);
		assertNotNull(method);
		assertTrue(method.isAnnotationPresent(SecurityConstraint.class));
		assertEquals(CreateNewTopicRule.class, method.getAnnotation(SecurityConstraint.class).value());
	}
"
net.jforum.controllers.TopicControllerTestCase.addSaveShouldHaveCreateNewTopicConstraint,TopicControllerTestCase.java,"void addSaveShouldHaveCreateNewTopicConstraint() throws Exception {
		Method method = topicController.getClass().getMethod(""addSave"", Topic.class, Post.class, PostFormOptions.class, List.class);
		assertNotNull(method);
		assertTrue(method.isAnnotationPresent(SecurityConstraint.class));
		assertEquals(CreateNewTopicRule.class, method.getAnnotation(SecurityConstraint.class).value());
	}
"
net.jforum.controllers.TopicControllerTestCase.addSaveRedirectShouldSendToPage3,TopicControllerTestCase.java,"void addSaveRedirectShouldSendToPage3() {
		when(topic.getTotalPosts()).thenReturn(14);
		setupAddReplyPaginationRedirect(topic);
		when(forumRepository.get(anyInt())).thenReturn(new Forum());
		
		topicController.addSave(topic, new Post(), new PostFormOptions(), null);
	
		checkAddReplyPaginationRedirect(topic, 3);
		assertEquals(topic, mockResult.included(""topic""));
		
	}
"
net.jforum.controllers.TopicControllerTestCase.replySaveRedirectShouldSendToPage4,TopicControllerTestCase.java,"void replySaveRedirectShouldSendToPage4() {
		topic.setId(10);
		when(topic.getTotalPosts()).thenReturn(17);
		setupAddReplyPaginationRedirect(topic);

		topicController.replySave(topic, new Post(), new PostFormOptions());
		
		checkAddReplyPaginationRedirect(topic, 4);
	}
"
net.jforum.controllers.TopicControllerTestCase.setupAddReplyPaginationRedirect,TopicControllerTestCase.java,"void setupAddReplyPaginationRedirect(final Topic topic) {
		if (topic.getId() > 0) {
			when(topicRepository.get(topic.getId())).thenReturn(topic);
		}
		
		when(config.getInt(ConfigKeys.POSTS_PER_PAGE)).thenReturn(5);
		when(userSession.getRoleManager()).thenReturn(roleManager);
	}
"
net.jforum.controllers.TopicControllerTestCase.checkAddReplyPaginationRedirect,TopicControllerTestCase.java,"void checkAddReplyPaginationRedirect(final Topic topic, final int pageExpected) {
		String url = String.format(""/%s/%s/%s/%s"", Domain.TOPICS, Actions.LIST, pageExpected, topic.getId());
		verify(mockResult).redirectTo(url + ""#0"");
	
	}
"
net.jforum.controllers.TopicControllerTestCase.add,TopicControllerTestCase.java,"void add() {
		ArrayList<Smilie> smilies = new ArrayList<Smilie>();
		Forum forum = new Forum();
		
		when(forumRepository.get(1)).thenReturn(forum);
		when(smilieRepository.getAllSmilies()).thenReturn(smilies);
		

		topicController.add(1);
	
		assertEquals(forum, mockResult.included(""forum""));
		assertEquals(new Post(), mockResult.included(""post""));
		assertEquals(true, mockResult.included(""isNewTopic""));
		assertEquals(smilies, mockResult.included(""smilies""));
	}
"
net.jforum.controllers.TopicControllerTestCase.listSmilie,TopicControllerTestCase.java,"void listSmilie() {
		ArrayList<Smilie> smilies = new ArrayList<Smilie>();
		when(smilieRepository.getAllSmilies()).thenReturn(smilies);
		
		topicController.listSmilies();
		
		assertEquals(smilies, mockResult.included(""smilies""));
	}
"
net.jforum.controllers.TopicControllerTestCase.addSaveCannotCreateStickyTypeShouldBeNormal,TopicControllerTestCase.java,"void addSaveCannotCreateStickyTypeShouldBeNormal() {
		Forum forum = new Forum();
		forum.setId(3);
		forum.setModerated(false);
		
		topic.setType(Topic.TYPE_ANNOUNCE);
		topic.setForum(forum);
		
		when(forumRepository.get(3)).thenReturn(forum);
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAttachmentsAlllowed(3)).thenReturn(false);
		when(roleManager.getCanCreateStickyAnnouncementTopics()).thenReturn(false);
		when(roleManager.getCanCreatePolls()).thenReturn(false);
		when(config.getInt(ConfigKeys.POSTS_PER_PAGE)).thenReturn(10);
		
		topicController.addSave(topic, new Post(), new PostFormOptions(), null);
		
		assertEquals(topic, mockResult.included(""topic""));
		verify(mockResult).redirectTo(""/topics/list/0#0"");
		assertEquals(Topic.TYPE_NORMAL, topic.getType());
	}
"
net.jforum.controllers.TopicControllerTestCase.addSaveForumModeratedIsModeratorTopicStatusShouldNotChange,TopicControllerTestCase.java,"void addSaveForumModeratedIsModeratorTopicStatusShouldNotChange() {
		Forum forum = new Forum();
		forum.setId(3);
		forum.setModerated(true);
		
		topic.setPendingModeration(false);
		topic.setForum(forum);

		when(forumRepository.get(3)).thenReturn(forum);
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAttachmentsAlllowed(3)).thenReturn(false);
		when(roleManager.isModerator()).thenReturn(true);
		when(roleManager.getCanCreatePolls()).thenReturn(false);
		when(config.getInt(ConfigKeys.POSTS_PER_PAGE)).thenReturn(10);
		
		topicController.addSave(topic, new Post(), new PostFormOptions(), null);
		
		assertEquals(topic, mockResult.included(""topic""));
		verify(mockResult).redirectTo(""/topics/list/0#0"");
		assertFalse(topic.isWaitingModeration());
	}
"
net.jforum.controllers.TopicControllerTestCase.addSaveForumModeratedNotModeratorStatusShouldBePending,TopicControllerTestCase.java,"void addSaveForumModeratedNotModeratorStatusShouldBePending() {
		Forum forum = new Forum();
		forum.setId(3);
		forum.setModerated(true);
		
		topic.setPendingModeration(false);
		topic.setForum(forum);

		when(forumRepository.get(3)).thenReturn(forum);
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAttachmentsAlllowed(3)).thenReturn(false);
		when(roleManager.isModerator()).thenReturn(false);
		when(roleManager.getCanCreatePolls()).thenReturn(false);

		topicController.addSave(topic, new Post(), new PostFormOptions(), null);
	
		verify(mockMessageControllerRedirect).topicWaitingModeration(topic.getForum().getId());
		assertEquals(topic, mockResult.included(""topic""));
		assertTrue(topic.isWaitingModeration());
	}
"
net.jforum.controllers.TopicControllerTestCase.addSave,TopicControllerTestCase.java,"void addSave() {
		Forum forum = new Forum();
		forum.setId(3);
		forum.setModerated(false);
		
		topic.setForum(forum);
		
		Post post = new Post();

		when(userSession.getUser()).thenReturn(new User());
		when(userSession.getIp()).thenReturn(""123"");
		when(forumRepository.get(3)).thenReturn(forum);
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(config.getInt(ConfigKeys.POSTS_PER_PAGE)).thenReturn(10);
			
		topicController.addSave(topic, post, new PostFormOptions(), Collections.<PollOption>emptyList());
	
		String url = ""/topics/list/0"";
		verify(mockResult).redirectTo(url + ""#0"");
		verify(topicService).addTopic(eq(topic), notNull(List.class), notNull(List.class));
		
		assertEquals(topic, mockResult.included(""topic""));
		assertNotNull(topic.getUser());
		assertEquals(new User(), topic.getUser());
		assertEquals(""123"", post.getUserIp());
	}
"
net.jforum.controllers.TopicControllerTestCase.list,TopicControllerTestCase.java,"void list() {
		when(topic.getTotalPosts()).thenReturn(10);
		ArrayList<Category> categories = new ArrayList<Category>();
		ArrayList<Post> posts = new ArrayList<Post>();
		ArrayList<Ranking> rankings = new ArrayList<Ranking>();
		
		when(userSession.isLogged()).thenReturn(false);
		when(topicRepository.get(1)).thenReturn(topic);
		when(config.getInt(ConfigKeys.POSTS_PER_PAGE)).thenReturn(10);
		when(categoryRepository.getAllCategories()).thenReturn(categories);
		when(topicRepository.getPosts(topic, 0, 10)).thenReturn(posts);
		when(rankingRepository.getAllRankings()).thenReturn(rankings);
		when(sessionManager.isModeratorOnline()).thenReturn(true);

		topicController.list(1, 0, false);
		
		verify(userSession).markTopicAsRead(1);
		assertEquals(true, mockResult.included(""isModeratorOnline""));
		assertEquals(topic, mockResult.included(""topic""));
		assertEquals(topic.getForum(), mockResult.included(""forum""));
		assertNotNull(mockResult.included(""pagination""));
		assertEquals(categories, mockResult.included(""categories""));
		assertEquals(posts, mockResult.included(""posts""));
		assertEquals(rankings, mockResult.included(""rankings""));
		assertEquals(false, mockResult.included(""canVoteOnPolls""));
		assertEquals(false, mockResult.included(""viewPollResults""));
	}
"
net.jforum.controllers.TopicControllerTestCase.replySave,TopicControllerTestCase.java,"void replySave() {
		topic.setId(1);
		topic.getForum().setId(1);
		Post post = new Post();
		User user = new User();
		
		when(userSession.getIp()).thenReturn(""123"");
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAttachmentsAlllowed(1)).thenReturn(false);
		when(userSession.getUser()).thenReturn(user);
		when(topicRepository.get(1)).thenReturn(topic);
		when(config.getInt(ConfigKeys.POSTS_PER_PAGE)).thenReturn(10);
		
		topicController.replySave(topic, post, new PostFormOptions());
		
		String url = ""/topics/list/1"";
		verify(mockResult).redirectTo(url + ""#0"");
		verify(topicService).reply(notNull(Topic.class), notNull(Post.class), notNull(List.class));
		assertEquals(""123"", post.getUserIp());
		assertNotNull(post.getUser());
		assertEquals(user, post.getUser());
	}
"
net.jforum.controllers.TopicControllerTestCase.replySaveForumModeratedIsModeratorShouldPass,TopicControllerTestCase.java,"void replySaveForumModeratedIsModeratorShouldPass() {
		topic.setId(2);
		topic.getForum().setId(1);
		topic.getForum().setModerated(true);
		
		Post post = new Post();
		post.setModerate(false);
	
		when(topicRepository.get(2)).thenReturn(topic);
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAttachmentsAlllowed(1)).thenReturn(false);
		when(roleManager.isModerator()).thenReturn(true);
		when(config.getInt(ConfigKeys.POSTS_PER_PAGE)).thenReturn(10);
	
		topicController.replySave(topic, post, new PostFormOptions());
	
		String url = ""/topics/list/2"";
		verify(mockResult).redirectTo(url + ""#0"");
		assertFalse(post.isWaitingModeration());
	}
"
net.jforum.controllers.TopicControllerTestCase.replySaveForumModeratedPostStatusShouldBePending,TopicControllerTestCase.java,"void replySaveForumModeratedPostStatusShouldBePending() {
		topic.setId(2);
		topic.getForum().setId(1);
		topic.getForum().setModerated(true);

		Post post = new Post(); post.setModerate(false);
		
		when(topicRepository.get(2)).thenReturn(topic);
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAttachmentsAlllowed(1)).thenReturn(false);
		when(roleManager.isModerator()).thenReturn(false);
		
		topicController.replySave(topic, post, new PostFormOptions());
		
		verify(mockMessageControllerRedirect).replyWaitingModeration(2);
		assertTrue(post.isWaitingModeration());
	}
"
net.jforum.controllers.TopicControllerTestCase.replySaveWaitingModerationShouldRedirect,TopicControllerTestCase.java,"void replySaveWaitingModerationShouldRedirect() {
		topic.setId(1);
		topic.getForum().setId(1);

		Post post = new Post();
		post.setModerate(true);
		
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(topicRepository.get(1)).thenReturn(topic);

		topicController.replySave(topic, post, new PostFormOptions());
		
		verify(mockMessageControllerRedirect).replyWaitingModeration(1);
	}
"
net.jforum.controllers.TopicControllerTestCase.reply,TopicControllerTestCase.java,"void reply() {
		ArrayList<Smilie> smilies = new ArrayList<Smilie>();
		
		when(topicRepository.get(1)).thenReturn(topic);
		when(smilieRepository.getAllSmilies()).thenReturn(smilies);
	
		topicController.reply(1);
		
		assertEquals(true, mockResult.included(""isReply""));
		assertEquals(new Post(), mockResult.included(""post""));
		assertEquals(topic, mockResult.included(""topic""));
		assertEquals(new Forum(), mockResult.included(""forum""));
		assertEquals(smilies, mockResult.included(""smilies""));
	}
"
net.jforum.controllers.TopicControllerTestCase.vote,TopicControllerTestCase.java,"void vote() {
		fail(""to implement"");
	}
"
net.jforum.controllers.TopicControllerTestCase.quote,TopicControllerTestCase.java,"void quote() {
		topic.setId(2);
		
		Forum forum = new Forum();
		forum.setId(3);
		
		Post post = new Post();
		post.setId(1);
		post.setTopic(topic);
		post.setForum(forum);
		
		ArrayList<Smilie> smilies = new ArrayList<Smilie>();
		
		when(postRepository.get(1)).thenReturn(post);
		when(smilieRepository.getAllSmilies()).thenReturn(smilies);

		topicController.quote(1);

		assertEquals(post, mockResult.included(""post""));
		assertEquals(true, mockResult.included(""isQuote""));
		assertEquals(true, mockResult.included(""isReply""));
		assertEquals(post.getTopic(), mockResult.included(""topic""));
		assertEquals(post.getForum(), mockResult.included(""forum""));
		assertEquals(smilies, mockResult.included(""smilies""));
	}
"
net.jforum.controllers.BanlistAdminControllerTestCase.listExpectOneRecord,BanlistAdminControllerTestCase.java,"void listExpectOneRecord() {
		when(repository.getAllBanlists()).thenReturn(new ArrayList<Banlist>());
			
		compverifynt.list();
		
		assertEquals(new ArrayList<Banlist>(), mockResult.included(""banlist""));
	}
"
net.jforum.controllers.BanlistAdminControllerTestCase.setup,BanlistAdminControllerTestCase.java,"void setup() {
		compverifynt = new BanlistAdminController(repository, mockResult);
	}
"
net.jforum.controllers.PrivateMessageControllerTestCase.review,PrivateMessageControllerTestCase.java,"void review() {
		PrivateMessage pm = new PrivateMessage();
		pm.setId(1);
		when(repository.get(1)).thenReturn(pm);

		controller.review(1);

		assertEquals(pm, mockResult.included(""pm""));
		assertEquals(pm.asPost(), mockResult.included(""post""));
	}
"
net.jforum.controllers.PrivateMessageControllerTestCase.delete,PrivateMessageControllerTestCase.java,"void delete() {
		when(userSession.getUser()).thenReturn(new User());

		controller.delete(1, 2, 3);

		verify(service).delete(new User(), 1, 2, 3);
		verify(mockResult).redirectTo(Actions.INBOX);
	}
"
net.jforum.controllers.PrivateMessageControllerTestCase.readExpectSuccess,PrivateMessageControllerTestCase.java,"void readExpectSuccess() {
		PrivateMessage pm = new PrivateMessage();
		User toUser = new User();
		toUser.setId(1);
		User fromUser = new User();
		fromUser.setId(3);

		pm.setToUser(toUser);
		pm.setFromUser(fromUser);

		when(repository.get(1)).thenReturn(pm);

		controller.read(1);

		assertEquals(pm, mockResult.included(""pm""));
		assertEquals(new Post(), mockResult.included(""post""));
	}
"
net.jforum.controllers.PrivateMessageControllerTestCase.readStatusIsNewShouldMarkAsRead,PrivateMessageControllerTestCase.java,"void readStatusIsNewShouldMarkAsRead() {
		PrivateMessage pm = new PrivateMessage();
		User toUser = new User();
		toUser.setId(1);
		User fromUser = new User();
		fromUser.setId(3);

		pm.setToUser(toUser);
		pm.setFromUser(fromUser);
		pm.setType(PrivateMessageType.NEW);

		when(repository.get(1)).thenReturn(pm);

		controller.read(1);

		Assert.assertEquals(PrivateMessageType.READ, pm.getType());
	}
"
net.jforum.controllers.PrivateMessageControllerTestCase.sent,PrivateMessageControllerTestCase.java,"void sent() {
		when(userSession.getUser()).thenReturn(new User());
		ArrayList<PrivateMessage> privateMessages = new ArrayList<PrivateMessage>();
		when(repository.getFromSentBox(new User())).thenReturn(privateMessages);

		controller.sent();

		assertEquals(privateMessages, mockResult.included(""privateMessages""));
		assertEquals(true, mockResult.included(""sentbox""));
	}
"
net.jforum.controllers.PrivateMessageControllerTestCase.sendSaveExpectSuccess,PrivateMessageControllerTestCase.java,"void sendSaveExpectSuccess() {
		when(userSession.getIp()).thenReturn(""0.0.0.0"");
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.roleExists(SecurityConstants.INTERACT_OTHER_GROUPS)).thenReturn(true);
		when(userRepository.get(1)).thenReturn(new User());
		when(userSession.getUser()).thenReturn(new User());

		controller.sendSave(new Post(), new PostFormOptions(), null, 1);

		verify(service).send(notNull(PrivateMessage.class));
		verify(mockResult).redirectTo(Actions.INBOX);
	}
"
net.jforum.controllers.PrivateMessageControllerTestCase.sendSaveWithoutUserIdShouldTryInvalidUsernameExpectsException,PrivateMessageControllerTestCase.java,"void sendSaveWithoutUserIdShouldTryInvalidUsernameExpectsException() {
		when(userRepository.getByUsername(""invalid user"")).thenReturn(null);

		controller.sendSave(null, null, ""invalid user"", 0);
	}
"
net.jforum.controllers.PrivateMessageControllerTestCase.sendSaveWithInvalidUserIdExpectsException,PrivateMessageControllerTestCase.java,"void sendSaveWithInvalidUserIdExpectsException() {
		when(userRepository.get(1)).thenReturn(null);

		controller.sendSave(null, null, null, 1);
	}
"
net.jforum.controllers.PrivateMessageControllerTestCase.sendToCanInteractWithOtherGroups,PrivateMessageControllerTestCase.java,"void sendToCanInteractWithOtherGroups() {
		User recipient = new User();
		when(userRepository.get(1)).thenReturn(recipient);
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(userSession.getUser()).thenReturn(new User());
		when(roleManager.roleExists(SecurityConstants.INTERACT_OTHER_GROUPS)).thenReturn(true);
		when(mockResult.forwardTo(TopicController.class)).thenReturn(mockTopicController);

		controller.sendTo(1);

		verify(mockTopicController).add(0);
		assertEquals(recipient, mockResult.included(""pmRecipient""));
		assertEquals(true, mockResult.included(""isPrivateMessage""));
		assertEquals(false, mockResult.included(""attachmentsEnabled""));
		assertEquals(recipient, mockResult.included(""user""));
		assertEquals(new Post(), mockResult.included(""post""));
	}
"
net.jforum.controllers.PrivateMessageControllerTestCase.sendToCanotInteractWithOtherGroupsMatchingGroupFoundShouldFillPropertyBag,PrivateMessageControllerTestCase.java,"void sendToCanotInteractWithOtherGroupsMatchingGroupFoundShouldFillPropertyBag() {
		Group g1 = new Group();
		g1.setId(1);
		Group g2 = new Group();
		g2.setId(2);
		
		User recipient = new User();
		recipient.addGroup(g1);

		User currentUser = new User();
		currentUser.addGroup(g2);
		currentUser.addGroup(g1);

		when(userRepository.get(1)).thenReturn(recipient);
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.roleExists(SecurityConstants.INTERACT_OTHER_GROUPS)).thenReturn(false);
		when(userSession.getUser()).thenReturn(currentUser);
		when(roleManager.getCanOnlyContactModerators()).thenReturn(true);

		controller.sendTo(1);

		verify(mockResult).forwardTo(""sendToDenied"");
	}
"
net.jforum.controllers.PrivateMessageControllerTestCase.sendToCanotInteractWithOtherGroupsNoMatchingGroupFoundShouldNotFillPropertyBag,PrivateMessageControllerTestCase.java,"void sendToCanotInteractWithOtherGroupsNoMatchingGroupFoundShouldNotFillPropertyBag() {
		Group g1 = new Group();
		User recipient = new User();
		recipient.addGroup(g1);

		Group g2 = new Group();
		User currentUser = new User();
		currentUser.addGroup(g2);
		
		when(userRepository.get(1)).thenReturn(recipient);
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.roleExists(SecurityConstants.INTERACT_OTHER_GROUPS)).thenReturn(false);
		when(userSession.getUser()).thenReturn(currentUser);
		when(roleManager.getCanOnlyContactModerators()).thenReturn(true);

		controller.sendTo(1);
		
		verify(mockResult).forwardTo(""sendToDenied"");
	}
"
net.jforum.controllers.PrivateMessageControllerTestCase.findUserWithUsernameCanInteractWithOtherGroups,PrivateMessageControllerTestCase.java,"void findUserWithUsernameCanInteractWithOtherGroups() {
		ArrayList<User> users = new ArrayList<User>();
		
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.getCanOnlyContactModerators()).thenReturn(true);
		when(userRepository.findByUserName(""an user"")).thenReturn(users);

		controller.findUser(""an user"");

		assertEquals(users, mockResult.included(""users""));
		assertEquals(""an user"", mockResult.included(""username""));
	}
"
net.jforum.controllers.PrivateMessageControllerTestCase.findUserWithUsernameCannotInteractWithOtherGroups,PrivateMessageControllerTestCase.java,"void findUserWithUsernameCannotInteractWithOtherGroups() {
		User user = new User();
		ArrayList<User> users = new ArrayList<User>();
		
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.getCanOnlyContactModerators()).thenReturn(false);
		when(roleManager.roleExists(""interact_other_groups"")).thenReturn(false);
		when(userSession.getUser()).thenReturn(user);
		when(userRepository.findByUserName(""an user"", user.getGroups())).thenReturn(users);

		controller.findUser(""an user"");

		assertEquals(users, mockResult.included(""users""));
		assertEquals(""an user"", mockResult.included(""username""));
	}
"
net.jforum.controllers.PrivateMessageControllerTestCase.findUserWithoutUsername,PrivateMessageControllerTestCase.java,"void findUserWithoutUsername() {
		controller.findUser(null);
		
		assertEquals(null, mockResult.included(""username""));
	}
"
net.jforum.controllers.PrivateMessageControllerTestCase.send,PrivateMessageControllerTestCase.java,"void send() {
		User user = new User();
		user.setId(1);
		
		when(userSession.getUser()).thenReturn(user);
		when(mockResult.forwardTo(TopicController.class)).thenReturn(mockTopicController);

		controller.send();

		verify(mockTopicController).add(0);
		assertEquals(new Post(), mockResult.included(""post""));
		assertEquals(true, mockResult.included(""isPrivateMessage""));
		assertEquals(false, mockResult.included(""attachmentsEnabled""));
		assertEquals(user, mockResult.included(""user""));
	}
"
net.jforum.controllers.PrivateMessageControllerTestCase.inbox,PrivateMessageControllerTestCase.java,"void inbox() {
		User user = new User();
		user.setId(1);
		ArrayList<PrivateMessage> privateMessages = new ArrayList<PrivateMessage>();
		
		when(userSession.getUser()).thenReturn(user);
		when(repository.getFromInbox(user)).thenReturn(privateMessages);
		
		controller.inbox();
		
		assertEquals(true, mockResult.included(""inbox""));
		assertEquals(privateMessages, mockResult.included(""privateMessages""));
	}
"
net.jforum.controllers.PrivateMessageControllerTestCase.quoteShouldHaveOwnerConstraint,PrivateMessageControllerTestCase.java,"void quoteShouldHaveOwnerConstraint() throws Exception {
		Method method = controller.getClass().getMethod(""quote"", int.class);
		Assert.assertTrue(method.isAnnotationPresent(SecurityConstraint.class));
		Assert.assertEquals(PrivateMessageOwnerRule.class, method.getAnnotation(SecurityConstraint.class).value());
	}
"
net.jforum.controllers.PrivateMessageControllerTestCase.replyShouldHaveOwnerConstraint,PrivateMessageControllerTestCase.java,"void replyShouldHaveOwnerConstraint() throws Exception {
		Method method = controller.getClass().getMethod(""reply"", int.class);
		Assert.assertTrue(method.isAnnotationPresent(SecurityConstraint.class));
		Assert.assertEquals(PrivateMessageOwnerRule.class, method.getAnnotation(SecurityConstraint.class).value());
	}
"
net.jforum.controllers.PrivateMessageControllerTestCase.readShouldHaveOwnerConstraint,PrivateMessageControllerTestCase.java,"void readShouldHaveOwnerConstraint() throws Exception {
		Method method = controller.getClass().getMethod(""read"", int.class);
		Assert.assertTrue(method.isAnnotationPresent(SecurityConstraint.class));
		Assert.assertEquals(PrivateMessageOwnerRule.class, method.getAnnotation(SecurityConstraint.class).value());
	}
"
net.jforum.controllers.PrivateMessageControllerTestCase.reviewShouldHaveOwnerConstraint,PrivateMessageControllerTestCase.java,"void reviewShouldHaveOwnerConstraint() throws Exception {
		Method method = controller.getClass().getMethod(""review"", int.class);
		Assert.assertTrue(method.isAnnotationPresent(SecurityConstraint.class));
		Assert.assertEquals(PrivateMessageOwnerRule.class, method.getAnnotation(SecurityConstraint.class).value());
	}
"
net.jforum.controllers.PrivateMessageControllerTestCase.shouldHaveAuthenticatedConstraintAndDisplayLogin,PrivateMessageControllerTestCase.java,"void shouldHaveAuthenticatedConstraintAndDisplayLogin() throws Exception {
		Assert.assertTrue(controller.getClass().isAnnotationPresent(SecurityConstraint.class));
		SecurityConstraint annotation = controller.getClass().getAnnotation(SecurityConstraint.class);
		Role[] roles = annotation.multiRoles();
		boolean found = false;

		for (Role role : roles) {
			if (role.value().equals(AuthenticatedRule.class)) {
				found = true;
				Assert.assertTrue(role.displayLogin());
			}
		}

		Assert.assertTrue(found);
	}
"
net.jforum.controllers.BadWordControllerActionsTestCase.deleteUsingNullShouldIgnore,BadWordControllerActionsTestCase.java,"void deleteUsingNullShouldIgnore() {
		when(mockResult.redirectTo(action)).thenReturn(mockBadWordAdminController);
	
		action.delete(null);

		verify(mockBadWordAdminController).list();
	}
"
net.jforum.controllers.BadWordControllerActionsTestCase.delete,BadWordControllerActionsTestCase.java,"void delete() {
		BadWord w1 = new BadWord();
		BadWord w2 = new BadWord();

		when(repository.get(1)).thenReturn(w1);
		when(repository.get(2)).thenReturn(w2);
		when(mockResult.redirectTo(action)).thenReturn(mockBadWordAdminController);
			
		action.delete(1, 2);

		verify(repository).remove(w1);
		verify(repository).remove(w2);
		verify(mockBadWordAdminController).list();
	}
"
net.jforum.controllers.BadWordControllerActionsTestCase.list,BadWordControllerActionsTestCase.java,"void list() {
		List<BadWord> list = new ArrayList<BadWord>();
		when(repository.getAll()).thenReturn(list);
			
		action.list();

		assertEquals(list, mockResult.included(""words""));
	}
"
net.jforum.controllers.BadWordControllerActionsTestCase.addSave,BadWordControllerActionsTestCase.java,"void addSave() {
		final BadWord word = new BadWord();
		when(mockResult.redirectTo(action)).thenReturn(mockBadWordAdminController);
	
		action.addSave(word);

		verify(repository).add(word);
		verify(mockBadWordAdminController).list();
	}
"
net.jforum.controllers.BadWordControllerActionsTestCase.edit,BadWordControllerActionsTestCase.java,"void edit() {
		final BadWord word = new BadWord();
		
		when(repository.get(1)).thenReturn(word);
		when(mockResult.forwardTo(action)).thenReturn(mockBadWordAdminController);
			
		action.edit(1);
		
		assertEquals(word, mockResult.included(""word""));
		verify(mockBadWordAdminController).add();
	}
"
net.jforum.controllers.BadWordControllerActionsTestCase.editSave,BadWordControllerActionsTestCase.java,"void editSave() {
		final BadWord word = new BadWord();
		when(mockResult.redirectTo(action)).thenReturn(mockBadWordAdminController);
			
		action.editSave(word);
		
		verify(repository).update(word);
		verify(mockBadWordAdminController).list();
	}
"
net.jforum.controllers.RSSControllerTestCase.forumTopicsExpectSuccess,RSSControllerTestCase.java,"void forumTopicsExpectSuccess() {
		when(config.getBoolean(ConfigKeys.RSS_ENABLED)).thenReturn(true);
		when(roleManager.isForumAllowed(1)).thenReturn(true);
		when(rssService.forForum(1)).thenReturn(""contents"");
			
		controller.forumTopics(1);
		
		assertEquals(""contents"", mockResult.included(""contents""));
		verify(mockResult).forwardTo(Actions.RSS);
	}
"
net.jforum.controllers.RSSControllerTestCase.forumTopicsUserDoesNotHaveRightsShouldDeny,RSSControllerTestCase.java,"void forumTopicsUserDoesNotHaveRightsShouldDeny() {
		when(config.getBoolean(ConfigKeys.RSS_ENABLED)).thenReturn(true);
		when(roleManager.isForumAllowed(1)).thenReturn(false);
		when(mockResult.forwardTo(MessageController.class)).thenReturn(mockMessageController);
			
		controller.forumTopics(1);
		
		verify(mockMessageController).accessDenied();
	}
"
net.jforum.controllers.RSSControllerTestCase.forumTopicsRSSDisabledShouldDeny,RSSControllerTestCase.java,"void forumTopicsRSSDisabledShouldDeny() {
		when(config.getBoolean(ConfigKeys.RSS_ENABLED)).thenReturn(false);
		when(mockResult.forwardTo(MessageController.class)).thenReturn(mockMessageController);
			
		controller.forumTopics(1);
		
		verify(mockMessageController).accessDenied();
	}
"
net.jforum.controllers.RSSControllerTestCase.setup,RSSControllerTestCase.java,"void setup() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
	}
"
net.jforum.controllers.MessageControllerTestCase.replyWaitingModeration,MessageControllerTestCase.java,"void replyWaitingModeration() {
		when(i18n.getFormattedMessage(""PostShow.waitingModeration"", URLBuilder.build(Domain.TOPICS, Actions.LIST, 1))).thenReturn(""msg moderation 1"");
		
		
		controller.replyWaitingModeration(1);
		
		assertEquals(""msg moderation 1"", mockResult.included(""message""));
		verify(mockMessageController).message();;
	}
"
net.jforum.controllers.MessageControllerTestCase.topicWaitingModeration,MessageControllerTestCase.java,"void topicWaitingModeration() {
		when(i18n.getFormattedMessage(""PostShow.waitingModeration"", URLBuilder.build(Domain.FORUMS, Actions.SHOW, 1))).thenReturn(""msg moderation 1"");

		controller.topicWaitingModeration(1);
		
		assertEquals(""msg moderation 1"", mockResult.included(""message""));
		verify(mockMessageController).message();;
	}
"
net.jforum.controllers.MessageControllerTestCase.accessDenied,MessageControllerTestCase.java,"void accessDenied() {
		when(i18n.getMessage(""Message.accessDenied"")).thenReturn(""msg denied"");
		
		controller.accessDenied();

		assertEquals(""msg denied"", mockResult.included(""message""));
		verify(mockMessageController).message();;
	}
"
net.jforum.controllers.MessageControllerTestCase.setup,MessageControllerTestCase.java,"void setup() {
		when(mockResult.of(controller)).thenReturn(mockMessageController);
	}
"
net.jforum.controllers.ForumControllerTestCase.showShouldHaveAccessForumConstraint,ForumControllerTestCase.java,"void showShouldHaveAccessForumConstraint() throws Exception {
		Method method = controller.getClass().getMethod(""show"", int.class, int.class);
		Assert.assertNotNull(method);
		Assert.assertTrue(method.isAnnotationPresent(SecurityConstraint.class));
		Assert.assertEquals(AccessForumRule.class, method.getAnnotation(SecurityConstraint.class).value());
		Assert.assertTrue(method.getAnnotation(SecurityConstraint.class).displayLogin());
	}
"
net.jforum.controllers.ForumControllerTestCase.show,ForumControllerTestCase.java,"void show() {
		Forum forum = new Forum(forumRepository);
		ArrayList<Category> categories = new ArrayList<Category>();
		
		when(forumRepository.getTotalTopics(forum)).thenReturn(1);
		when(forumRepository.get(1)).thenReturn(forum);
		when(config.getInt(ConfigKeys.TOPICS_PER_PAGE)).thenReturn(10);
		when(categoryRepository.getAllCategories()).thenReturn(categories);
		when(sessionManager.isModeratorOnline()).thenReturn(true);
				
		controller.show(1, 0);
		
		verify(forumRepository).getTopics(forum, 0, 10);
		assertEquals(new ArrayList<Topic>(), mockResult.included(""topics""));
		assertEquals(forum, mockResult.included(""forum""));
		assertEquals(categories, mockResult.included(""categories""));
		assertNotNull(mockResult.included(""pagination""));
		assertEquals(true, mockResult.included(""isModeratorOnline""));
		
	}
"
net.jforum.controllers.ForumControllerTestCase.listCannotInteractWitOtherGroups,ForumControllerTestCase.java,"void listCannotInteractWitOtherGroups() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(userSession.isLogged()).thenReturn(true);
		when(roleManager.roleExists(SecurityConstants.INTERACT_OTHER_GROUPS)).thenReturn(false);

		controller.list();

		verify(groupInteractionFilter).filterForumListing(mockResult, userSession);
	}
"
net.jforum.controllers.ForumControllerTestCase.list,ForumControllerTestCase.java,"void list() {
		MostUsersEverOnline most = new MostUsersEverOnline();
		ArrayList<Category> categories = new ArrayList<Category>();
		ArrayList<UserSession> userSessions = new ArrayList<UserSession>();
		
		when(categoryRepository.getAllCategories()).thenReturn(categories);
		when(sessionManager.getLoggedSessions()).thenReturn(userSessions);
		when(userRepository.getTotalUsers()).thenReturn(1);
		when(forumRepository.getTotalMessages()).thenReturn(2);
		when(sessionManager.getTotalLoggedUsers()).thenReturn(3);
		when(sessionManager.getTotalAnonymousUsers()).thenReturn(4);
		when(userRepository.getLastRegisteredUser()).thenReturn(new User());
		when(mostUsersEverOnlineService.getMostRecentData(anyInt())).thenReturn(most);
		when(sessionManager.getTotalUsers()).thenReturn(3);
		when(config.getInt(ConfigKeys.POSTS_PER_PAGE)).thenReturn(7);
		when(userSession.isLogged()).thenReturn(false);

		controller.list();

		assertEquals(categories,mockResult.included(""categories""));
		assertEquals(userSessions,mockResult.included(""onlineUsers""));
		assertEquals(1,mockResult.included(""totalRegisteredUsers""));
		assertEquals(2,mockResult.included(""totalMessages""));
		assertEquals(3,mockResult.included(""totalLoggedUsers""));
		assertEquals(4,mockResult.included(""totalAnonymousUsers""));
		assertEquals(new User(),mockResult.included(""lastRegisteredUser""));
		assertEquals(most,mockResult.included(""mostUsersEverOnline""));
		assertEquals(7,mockResult.included(""postsPerPage""));
	}
"
net.jforum.controllers.CategoryAdminControllerTestCase.delete,CategoryAdminControllerTestCase.java,"void delete() {
		when(mockResult.redirectTo(action)).thenReturn(mockCategoryAdminController);
			
		action.delete(1, 2);
		
		verify(mockCategoryAdminController).list();
		verify(service).delete(1, 2);
	}
"
net.jforum.controllers.CategoryAdminControllerTestCase.addSave,CategoryAdminControllerTestCase.java,"void addSave() {
		final Category c = new Category();

		c.setName(""c1"");
		c.setModerated(false);
		c.setDisplayOrder(1);
		
		when(mockResult.redirectTo(action)).thenReturn(mockCategoryAdminController);
			
		action.addSave(c);
		
		verify(mockCategoryAdminController).list();
		verify(service).add(c);
	}
"
net.jforum.controllers.CategoryAdminControllerTestCase.editExpectACategory,CategoryAdminControllerTestCase.java,"void editExpectACategory() {
		when(repository.get(5)).thenReturn(new Category());
		when(mockResult.forwardTo(action)).thenReturn(mockCategoryAdminController);
		
		action.edit(5);
		
		assertEquals(new Category(), mockResult.included(""category""));
		verify(mockCategoryAdminController).add();
	}
"
net.jforum.controllers.CategoryAdminControllerTestCase.editSave,CategoryAdminControllerTestCase.java,"void editSave() {
		final Category c = new Category();
		c.setId(2);
		
		when(mockResult.redirectTo(action)).thenReturn(mockCategoryAdminController);
			
		action.editSave(c);
		
		verify(service).update(c);
		verify(mockCategoryAdminController).list();
	}
"
net.jforum.controllers.CategoryAdminControllerTestCase.list,CategoryAdminControllerTestCase.java,"void list() {
		when(repository.getAllCategories()).thenReturn(new ArrayList<Category>());
			
		action.list();
		
		assertEquals(new ArrayList<Category>(), mockResult.included(""categories""));
	}
"
net.jforum.controllers.CategoryAdminControllerTestCase.up,CategoryAdminControllerTestCase.java,"void up() {
		when(mockResult.redirectTo(action)).thenReturn(mockCategoryAdminController);
			
		action.up(1);
		
		verify(service).upCategoryOrder(1);
		verify(mockCategoryAdminController).list();
	}
"
net.jforum.controllers.CategoryAdminControllerTestCase.down,CategoryAdminControllerTestCase.java,"void down() {
		when(mockResult.redirectTo(action)).thenReturn(mockCategoryAdminController);
			

		action.down(2);
		
		verify(service).downCategoryOrder(2);
		verify(mockCategoryAdminController).list();
	}
"
net.jforum.controllers.CategoryAdminControllerTestCase.setup,CategoryAdminControllerTestCase.java,"void setup() {
		action = new CategoryAdminController(repository, service, mockResult);
	}
"
net.jforum.controllers.AvatarAdminControllerTestCase.edit,AvatarAdminControllerTestCase.java,"void edit() {
		when(repository.get(1)).thenReturn(new Avatar());
			
		avatarAction.edit(1);

		assertEquals(new Avatar(), mockResult.included(""avatar""));
		verify(mockResult).forwardTo(Actions.ADD);
	}
"
net.jforum.controllers.AvatarAdminControllerTestCase.editSave,AvatarAdminControllerTestCase.java,"void editSave() {
		when(mockResult.redirectTo(avatarAction)).thenReturn(mockAdminController);

		avatarAction.editSave(new Avatar(), null);

		verify(service).update(notNull(Avatar.class), isNull(UploadedFile.class));
		verify(mockAdminController).list();
	}
"
net.jforum.controllers.AvatarAdminControllerTestCase.delete,AvatarAdminControllerTestCase.java,"void delete() {
		final Avatar avatar = new Avatar();
		
		when(repository.get(1)).thenReturn(avatar);
		when(repository.get(2)).thenReturn(avatar);
		when(repository.get(3)).thenReturn(avatar);
		when(mockResult.redirectTo(avatarAction)).thenReturn(mockAdminController);

		avatarAction.delete(1, 2, 3);

		verify(repository, times(3)).remove(avatar);
		verify(mockAdminController).list();
	}
"
net.jforum.controllers.AvatarAdminControllerTestCase.listExpectOneRecord,AvatarAdminControllerTestCase.java,"void listExpectOneRecord() {
		when(repository.getGalleryAvatar()).thenReturn(new ArrayList<Avatar>());
		when(repository.getUploadedAvatar()).thenReturn(new ArrayList<Avatar>());
	
		avatarAction.list();

		assertEquals(new ArrayList<Avatar>(), mockResult.included(""GalleryAvatars""));
		assertEquals(new ArrayList<Avatar>(), mockResult.included(""UploadedAvatars""));
	}
"
net.jforum.controllers.AvatarAdminControllerTestCase.addSave,AvatarAdminControllerTestCase.java,"void addSave() {
		avatarAction.addSave(new Avatar(), null);
		
		verify(service).add(notNull(Avatar.class), isNull(UploadedFile.class));
		verify(mockResult).redirectTo(Actions.LIST);
	}
"
net.jforum.controllers.UserAdminControllerTestCase.setup,UserAdminControllerTestCase.java,"void setup() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(mockResult.redirectTo(controller)).thenReturn(mockUserAdminControllerRedirect);
	}
"
net.jforum.controllers.UserAdminControllerTestCase.groupsSaveIsSuperAdministratorShouldAccept,UserAdminControllerTestCase.java,"void groupsSaveIsSuperAdministratorShouldAccept() {
		when(roleManager.isAdministrator()).thenReturn(true);
		
		controller.groupsSave(1, 1, 2);
		
		verify(userService).saveGroups(1, 1, 2);
		verify(mockUserAdminControllerRedirect).list(0);
	}
"
net.jforum.controllers.UserAdminControllerTestCase.groupsNotSuperAdministratorIsGroupManagerShouldAccept,UserAdminControllerTestCase.java,"void groupsNotSuperAdministratorIsGroupManagerShouldAccept() {
		when(roleManager.isAdministrator()).thenReturn(false);
		when(roleManager.isGroupManager(1)).thenReturn(true);
		when(roleManager.isGroupManager(2)).thenReturn(true);
		
		controller.groupsSave(1, 1, 2);
		
		verify(userService).saveGroups(1, 1, 2);
		verify(mockUserAdminControllerRedirect).list(0);
	}
"
net.jforum.controllers.UserAdminControllerTestCase.groupsSaveNotSuperAdminNotGroupManagerShouldIgnore,UserAdminControllerTestCase.java,"void groupsSaveNotSuperAdminNotGroupManagerShouldIgnore() {
		when(roleManager.isAdministrator()).thenReturn(false);
		when(roleManager.isGroupManager(1)).thenReturn(false);
		
		controller.groupsSave(1, 1, 2);
		
		verify(userService,never()).saveGroups(anyInt(),(int[])anyVararg());
		verify(mockUserAdminControllerRedirect).list(0);
	}
"
net.jforum.controllers.UserAdminControllerTestCase.groups,UserAdminControllerTestCase.java,"void groups() {
		User user = new User();
		user.setId(1);
		ArrayList<Group> groups = new ArrayList<Group>();
		
		when(userRepository.get(1)).thenReturn(user);
		when(groupRepository.getAllGroups()).thenReturn(groups);
		
		controller.groups(1);
		
		assertEquals(user, mockResult.included(""user""));
		assertEquals(groups, mockResult.included(""groups""));
	}
"
net.jforum.controllers.UserAdminControllerTestCase.edit,UserAdminControllerTestCase.java,"void edit() {
		when(mockResult.forwardTo(UserController.class)).thenReturn(mockUserController);
		
		controller.edit(1);

		verify(mockUserController).edit(1);
	}
"
net.jforum.controllers.UserAdminControllerTestCase.list,UserAdminControllerTestCase.java,"void list() {
		ArrayList<User> users = new ArrayList<User>();
		
		when(userRepository.getTotalUsers()).thenReturn(100);
		when(config.getInt(ConfigKeys.USERS_PER_PAGE)).thenReturn(10);
		when(userRepository.getAllUsers(0, 10)).thenReturn(users);
		
		controller.list(0);
		
		assertEquals(users, mockResult.included(""users""));
		assertNotNull(mockResult.included(""users""));
	}
"
net.jforum.controllers.PostControllerTestCase.setup,PostControllerTestCase.java,"void setup() {
		forum = new Forum();
		forum.setId(3);
		
		topic = spy(new Topic(topicRepository));
		topic.setForum(forum);
		
		post = new Post();
		post.setId(2);
		post.setTopic(topic);
		post.setForum(forum);
		
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(mockResult.redirectTo(ForumController.class)).thenReturn(mockForumControllerRedirect);
		when(mockResult.forwardTo(ForumController.class)).thenReturn(mockForumControllerForward);
		when(mockResult.redirectTo(TopicController.class)).thenReturn(mockTopicControllerRedirect);
		when(mockResult.forwardTo(TopicController.class)).thenReturn(mockTopicControllerForward);
	}
"
net.jforum.controllers.PostControllerTestCase.deleteHasMorePostsShouldRedirectToTopicListing,PostControllerTestCase.java,"void deleteHasMorePostsShouldRedirectToTopicListing() {
		this.deleteRedirect(1, 0);
	}
"
net.jforum.controllers.PostControllerTestCase.deleteHasMorePostsShouldRedirectToPage3,PostControllerTestCase.java,"void deleteHasMorePostsShouldRedirectToPage3() {
		this.deleteRedirect(14, 3);
	}
"
net.jforum.controllers.PostControllerTestCase.deleteLastMessageShouldRedirectToForum,PostControllerTestCase.java,"void deleteLastMessageShouldRedirectToForum() {
		when(postRepository.get(2)).thenReturn(post);
		topic.decrementTotalReplies(); // we simulate the event dispatch

		controller.delete(2);
		
		verify(postService).delete(post);
		verify(mockForumControllerRedirect).show(topic.getForum().getId(), 0);
		
	}
"
net.jforum.controllers.PostControllerTestCase.editSave,PostControllerTestCase.java,"void editSave() {
		PostFormOptions options = new PostFormOptions();
		
		when(postRepository.get(2)).thenReturn(post);

		controller.editSave(post, options, null, moderationLog);

		verify(postService).update(post, false, new ArrayList<PollOption>(),
				new ArrayList<AttachedFile>(), moderationLog);
		verify(mockTopicControllerRedirect).list(topic.getId(), 0, true);

	}
"
net.jforum.controllers.PostControllerTestCase.edit,PostControllerTestCase.java,"void edit() {
		ArrayList<Smilie> smilies = new ArrayList<Smilie>();
		
		when(postRepository.get(1)).thenReturn(post);
		when(smilieRepository.getAllSmilies()).thenReturn(smilies);

		controller.edit(1);
		
		assertEquals(post, mockResult.included(""post""));
		assertEquals(true, mockResult.included(""isEdit""));
		assertEquals(new Topic(), mockResult.included(""topic""));
		assertEquals(forum, mockResult.included(""forum""));
		assertEquals(smilies, mockResult.included(""smilies""));

		verify(mockTopicControllerForward).add(0);

	}
"
net.jforum.controllers.PostControllerTestCase.deleteRedirect,PostControllerTestCase.java,"void deleteRedirect(final int totalPosts, final int expectedPage) {
		when(topic.getTotalPosts()).thenReturn(totalPosts);
		topic.setId(7);
	
		when(postRepository.get(2)).thenReturn(post);
		when(config.getInt(ConfigKeys.POSTS_PER_PAGE)).thenReturn(5);
	
		controller.delete(2);
		
		this.redirectToPage(topic, expectedPage);
		verify(postService).delete(post);
	}
"
net.jforum.controllers.PostControllerTestCase.redirectToPage,PostControllerTestCase.java,"void redirectToPage(final Topic topic, final int expectedPage) {
		String url;
		

		if (expectedPage > 0) {
			url = String.format(""/%s/%s/%s/%s"", Domain.TOPICS, Actions.LIST, expectedPage, topic.getId());
		} else {
			url = String.format(""/%s/%s/%s"", Domain.TOPICS, Actions.LIST, topic.getId());
		}

		verify(mockResult).redirectTo(url);
	}
"
net.jforum.controllers.PostReportControllerTestCase.listResolved,PostReportControllerTestCase.java,"void listResolved() {
		when(config.getInt(ConfigKeys.TOPICS_PER_PAGE)).thenReturn(10);
		when(repository.getPaginated(0, 10, PostReportStatus.RESOLVED, new int[] {})).thenReturn(new PaginatedResult<PostReport>(new ArrayList<PostReport>(), 10));
		
		controller.listResolved(0);
		
		assertEquals(new Pagination(0, 0, 0, """", 0), mockResult.included(""pagination""));
		assertEquals(new ArrayList<PostReport>(), mockResult.included(""reports""));
	}
"
net.jforum.controllers.PostReportControllerTestCase.shouldHaveModerationRule,PostReportControllerTestCase.java,"void shouldHaveModerationRule() throws Exception {
		this.assertMethodModerationRule(""list"");
		this.assertMethodModerationRule(""resolve"", int.class);
		this.assertMethodModerationRule(""delete"", int.class);
		this.assertMethodModerationRule(""listResolved"", int.class);
	}
"
net.jforum.controllers.PostReportControllerTestCase.assertMethodModerationRule,PostReportControllerTestCase.java,"void assertMethodModerationRule(String methodName, Class<?>... argumentTypes) throws Exception {
		Method method = controller.getClass().getMethod(methodName, argumentTypes);
		assertNotNull(methodName, method);
		assertTrue(methodName, method.isAnnotationPresent(SecurityConstraint.class));
		assertEquals(methodName, ModerationRule.class, method.getAnnotation(SecurityConstraint.class).value());
	}
"
net.jforum.controllers.PostReportControllerTestCase.reportNotLoggedShouldIgnore,PostReportControllerTestCase.java,"void reportNotLoggedShouldIgnore() {
		when(userSession.isLogged()).thenReturn(false);
		
		controller.report(1, ""x"");
		
		verifyZeroInteractions(repository);
	}
"
net.jforum.controllers.PostReportControllerTestCase.reportLoggedShouldSucceed,PostReportControllerTestCase.java,"void reportLoggedShouldSucceed() {
		when(userSession.isLogged()).thenReturn(true);
		when(userSession.getUser()).thenReturn(new User());
		
		controller.report(1, ""x"");

		verify(repository).add(any(PostReport.class));
	}
"
net.jforum.controllers.PostReportControllerTestCase.deleteNotForumModeratorShouldIgnore,PostReportControllerTestCase.java,"void deleteNotForumModeratorShouldIgnore() {
		int[] forumIds = new int[] {1};

		when(roleManager.getRoleValues(SecurityConstants.FORUM)).thenReturn(forumIds);
		PostReport report = new PostReport();
		report.setPost(new Post());
		report.getPost().setForum(new Forum());
		report.getPost().getForum().setId(2);
		when(repository.get(1)).thenReturn(report);
		when(mockResult.redirectTo(controller)).thenReturn(mockPostReportController);
		
		controller.delete(1);
		
		verify(mockPostReportController).list();
	}
"
net.jforum.controllers.PostReportControllerTestCase.deleteShouldSucceed,PostReportControllerTestCase.java,"void deleteShouldSucceed() {
		int[] forumIds = new int[] {1};

		when(roleManager.getRoleValues(SecurityConstants.FORUM)).thenReturn(forumIds);
		PostReport report = new PostReport();
		report.setPost(new Post());
		report.getPost().setForum(new Forum());
		report.getPost().getForum().setId(1);
		when(repository.get(1)).thenReturn(report);
		when(mockResult.redirectTo(controller)).thenReturn(mockPostReportController);
	
		controller.delete(1);
		
		verify(repository).remove(report);
		verify(mockPostReportController).list();
	}
"
net.jforum.controllers.PostReportControllerTestCase.listNotAdministratorShouldFilterByForum,PostReportControllerTestCase.java,"void listNotAdministratorShouldFilterByForum() {
		int[] forumIds = new int[] {1, 2};

		when(roleManager.isAdministrator()).thenReturn(false);
		when(roleManager.isCoAdministrator()).thenReturn(false);
		when(roleManager.getRoleValues(SecurityConstants.FORUM)).thenReturn(forumIds);
		when(repository.getAll(PostReportStatus.UNRESOLVED, forumIds)).thenReturn(new ArrayList<PostReport>());
		
		controller.list();
		
		assertEquals(new ArrayList<PostReport>(), mockResult.included(""reports""));
	}
"
net.jforum.controllers.PostReportControllerTestCase.listNullStatusDefaultShouldBeUnresolved,PostReportControllerTestCase.java,"void listNullStatusDefaultShouldBeUnresolved() {
		controller.list();
		
		verify(repository).getAll(PostReportStatus.UNRESOLVED, new int[] {});
	}
"
net.jforum.controllers.PostReportControllerTestCase.listIsAdministratorShouldNotFilterByForum,PostReportControllerTestCase.java,"void listIsAdministratorShouldNotFilterByForum() {
		when(roleManager.isAdministrator()).thenReturn(true);
		when(repository.getAll(PostReportStatus.UNRESOLVED, null)).thenReturn(new ArrayList<PostReport>());
		
		controller.list();
		
		assertEquals(new ArrayList<PostReport>(), mockResult.included(""reports""));
	}
"
net.jforum.controllers.PostReportControllerTestCase.listIsCoAdministratorShouldNotFilterByForum,PostReportControllerTestCase.java,"void listIsCoAdministratorShouldNotFilterByForum() {
		when(roleManager.isAdministrator()).thenReturn(false);
		when(roleManager.isCoAdministrator()).thenReturn(true);
		when(repository.getAll(PostReportStatus.UNRESOLVED, null)).thenReturn(new ArrayList<PostReport>());
		
		controller.list();
		
		assertEquals(new ArrayList<PostReport>(), mockResult.included(""reports""));
	}
"
net.jforum.controllers.PostReportControllerTestCase.setup,PostReportControllerTestCase.java,"void setup() {
		when(roleManager.getRoleValues(SecurityConstants.FORUM)).thenReturn(new int[] {});
		when(userSession.getRoleManager()).thenReturn(roleManager);
	}
"
net.jforum.controllers.RankingAdminControllerTestCase.addSave,RankingAdminControllerTestCase.java,"void addSave() {
		when(mockResult.redirectTo(controller)).thenReturn(mockController);
	
		controller.addSave(new Ranking());
		
		verify(service).add(notNull(Ranking.class));
		verify(mockController).list();
	}
"
net.jforum.controllers.RankingAdminControllerTestCase.edit,RankingAdminControllerTestCase.java,"void edit() {
		Ranking ranking = new Ranking();
		when(repository.get(1)).thenReturn(ranking);
		when(mockResult.forwardTo(controller)).thenReturn(mockController);
			
		controller.edit(1);
		
		assertEquals(ranking, mockResult.included(""ranking""));
		verify(mockController).add();
	}
"
net.jforum.controllers.RankingAdminControllerTestCase.editSave,RankingAdminControllerTestCase.java,"void editSave() {
		when(mockResult.redirectTo(controller)).thenReturn(mockController);
		
		controller.editSave(new Ranking());
		
		verify(service).update(notNull(Ranking.class));
		verify(mockController).list();
	}
"
net.jforum.controllers.RankingAdminControllerTestCase.delete,RankingAdminControllerTestCase.java,"void delete() {
		when(mockResult.redirectTo(controller)).thenReturn(mockController);
			
		controller.delete(1, 2, 3, 4);
		
		verify(service).delete(1, 2, 3, 4);
		verify(mockController).list();
	}
"
net.jforum.controllers.RankingAdminControllerTestCase.listExpectOneRecord,RankingAdminControllerTestCase.java,"void listExpectOneRecord() {
		when(repository.getAllRankings()).thenReturn(Arrays.asList(new Ranking()));
	
		controller.list();
		
		assertEquals(Arrays.asList(new Ranking()), mockResult.included(""rankings""));
	}
"
net.jforum.controllers.UserControllerTestCase.setup,UserControllerTestCase.java,"void setup() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(mockResult.forwardTo(userController)).thenReturn(mockForwardControler);
		when(mockResult.redirectTo(userController)).thenReturn(mockRedirectController);
	}
"
net.jforum.controllers.UserControllerTestCase.edit,UserControllerTestCase.java,"void edit() {
		when(userRepository.get(1)).thenReturn(user);
		
		userController.edit(1);

		assertEquals(user, mockResult.included(""user""));
	}
"
net.jforum.controllers.UserControllerTestCase.editSave,UserControllerTestCase.java,"void editSave() {
		user.setId(1);

		userController.editSave(user,null, null, null);

		verify(userService).update(user, false);
	}
"
net.jforum.controllers.UserControllerTestCase.recoverPassword,UserControllerTestCase.java,"void recoverPassword() {
		userController.recoverPassword(""123"");
		
		assertEquals(""123"", mockResult.included(""hash""));
	}
"
net.jforum.controllers.UserControllerTestCase.recoverPasswordValidateUsingBadDataExpectFail,UserControllerTestCase.java,"void recoverPasswordValidateUsingBadDataExpectFail() {
		userController.recoverPasswordValidate(""hash"", ""user"", ""123"");

		assertEquals(true, mockResult.included(""error""));
		assertEquals(""PasswordRecovery.invalidData"", mockResult.included(""message""));
	}
"
net.jforum.controllers.UserControllerTestCase.recoverPasswordValidateUsingGoodDataExpectSuccess,UserControllerTestCase.java,"void recoverPasswordValidateUsingGoodDataExpectSuccess() {
		when(userRepository.validateLostPasswordHash(""user"", ""hash"")).thenReturn(user);
		
		userController.recoverPasswordValidate(""hash"", ""user"", ""123"");

		assertEquals(""PasswordRecovery.ok"", mockResult.included(""message""));
	}
"
net.jforum.controllers.UserControllerTestCase.lostPasswordSend,UserControllerTestCase.java,"void lostPasswordSend() {
		when(lostPasswordService.send(""username"", ""email"")).thenReturn(true);
		
		userController.lostPasswordSend(""username"", ""email"");

		assertEquals(true, mockResult.included(""success""));
	}
"
net.jforum.controllers.UserControllerTestCase.loginWithReferer,UserControllerTestCase.java,"void loginWithReferer() {
		when(config.getBoolean(ConfigKeys.LOGIN_IGNORE_REFERER)).thenReturn(false);
		when(mockRequest.getHeader(""Referer"")).thenReturn(""some referer"");
		
		userController.login(null, false);

		assertEquals(""some referer"", mockResult.included(""returnPath""));
	}
"
net.jforum.controllers.UserControllerTestCase.loginWithReturnPath,UserControllerTestCase.java,"void loginWithReturnPath() {
		userController.login(""some return path"", false);

		assertEquals(""some return path"", mockResult.included(""returnPath""));
	}
"
net.jforum.controllers.UserControllerTestCase.loginWithoutReturnPathAndIgnoringReferer,UserControllerTestCase.java,"void loginWithoutReturnPathAndIgnoringReferer() {
		when(config.getBoolean(ConfigKeys.LOGIN_IGNORE_REFERER)).thenReturn(true);
		when(mockRequest.getHeader(""Referer"")).thenReturn(""some referer"");
		
		userController.login(null, false);
		
		assertNull(mockResult.included(""returnPath""));
	}
"
net.jforum.controllers.UserControllerTestCase.editShouldHaveEditUserRule,UserControllerTestCase.java,"void editShouldHaveEditUserRule() throws Exception {
		Method method = userController.getClass().getMethod(""edit"", int.class);
		
		assertNotNull(method);
		assertTrue(method.isAnnotationPresent(SecurityConstraint.class));
		assertEquals(EditUserRule.class, method.getAnnotation(SecurityConstraint.class).value());
	}
"
net.jforum.controllers.UserControllerTestCase.editSaveShouldHaveEditUserRule,UserControllerTestCase.java,"void editSaveShouldHaveEditUserRule() throws Exception {
		Method method = userController.getClass().getMethod(""editSave"", User.class, Integer.class,
			UploadedFile.class, Integer.class);
		
		assertNotNull(method);
		assertTrue(method.isAnnotationPresent(SecurityConstraint.class));
		assertEquals(EditUserRule.class, method.getAnnotation(SecurityConstraint.class).value());
	}
"
net.jforum.controllers.UserControllerTestCase.listUsingListingIsDisabledShouldForceEmptyList,UserControllerTestCase.java,"void listUsingListingIsDisabledShouldForceEmptyList() {
		when(roleManager.isUserListingEnabled()).thenReturn(false);

		userController.list(0);
	
		assertEquals(userList, mockResult.included(""users""));
	}
"
net.jforum.controllers.UserControllerTestCase.listCanInteractWithOtherGroups,UserControllerTestCase.java,"void listCanInteractWithOtherGroups() {
		when(roleManager.roleExists(SecurityConstants.INTERACT_OTHER_GROUPS)).thenReturn(true);
		when(roleManager.isUserListingEnabled()).thenReturn(true);
		
		userController.list(0);
		
		verify(userRepository).getAllUsers(0, 0);
	}
"
net.jforum.controllers.UserControllerTestCase.listCannotInteractWithOtherGroups,UserControllerTestCase.java,"void listCannotInteractWithOtherGroups() {
		when(roleManager.roleExists(SecurityConstants.INTERACT_OTHER_GROUPS)).thenReturn(false);
		when(roleManager.isUserListingEnabled()).thenReturn(true);
		when(userSession.getUser()).thenReturn(user);
		
		userController.list(0);
		
		verify(userRepository, never()).getAllUsers(0, 0);
	}
"
net.jforum.controllers.UserControllerTestCase.logout,UserControllerTestCase.java,"void logout() {
		when(config.getInt(ConfigKeys.ANONYMOUS_USER_ID)).thenReturn(1);
		when(config.getValue(ConfigKeys.COOKIE_AUTO_LOGIN)).thenReturn(""x"");
		when(config.getValue(ConfigKeys.COOKIE_USER_HASH)).thenReturn(""y"");
		
		userController.logout();
		
		verify(userSession).becomeAnonymous(1);
		verify(userSession).removeCookie(""x"");
		verify(userSession).removeCookie(""y"");
	}
"
net.jforum.controllers.UserControllerTestCase.authenticateUserUsingInvalidCredentialsExpectsInvalidLogin,UserControllerTestCase.java,"void authenticateUserUsingInvalidCredentialsExpectsInvalidLogin() {		
		when(userService.validateLogin(""user"", ""passwd"")).thenReturn(null);

		userController.authenticateUser(""user"", ""passwd"", false, null);
	
		verify(mockRedirectController).login(anyString(), anyBoolean());
	}
"
net.jforum.controllers.UserControllerTestCase.authenticateUserUsingGoodCredentialsAndAutoLoginEnabledExpectsSuccess,UserControllerTestCase.java,"void authenticateUserUsingGoodCredentialsAndAutoLoginEnabledExpectsSuccess() {
		user.setId(26);
		when(userService.validateLogin(""user"", ""passwd"")).thenReturn(user);
		when(config.getValue(ConfigKeys.COOKIE_AUTO_LOGIN)).thenReturn(""x"");
		when(config.getValue(ConfigKeys.COOKIE_USER_HASH)).thenReturn(""y"");
		when(config.getValue(ConfigKeys.COOKIE_USER_ID)).thenReturn(""z"");
		when(userService.generateAutoLoginSecurityHash(26)).thenReturn(""456"");
		when(userService.generateAutoLoginUserHash(""456"")).thenReturn(""789"");
		
		userController.authenticateUser(""user"", ""passwd"", true, null);

		verify(userSession).becomeLogged();
		verify(userSession).addCookie(""x"", ""1"");
		verify(userSession).addCookie(""y"", ""789"");
		verify(userSession).addCookie(""z"", ""26"");
		Assert.assertEquals(""456"", user.getSecurityHash());
	}
"
net.jforum.controllers.UserControllerTestCase.authenticateUserUsingGoodCredentialsWithoutAutoLoginExpectsSuccess,UserControllerTestCase.java,"void authenticateUserUsingGoodCredentialsWithoutAutoLoginExpectsSuccess() {
		when(userService.validateLogin(""user"", ""passwd"")).thenReturn(user);
		
		userController.authenticateUser(""user"", ""passwd"", false, null);

		verify(userSession).becomeLogged();
		verify(userSession, never()).addCookie(anyString(), anyString());
	}
"
net.jforum.controllers.UserControllerTestCase.authenticateUserWithReturnPath,UserControllerTestCase.java,"void authenticateUserWithReturnPath() {
		when(userService.validateLogin(""user1"", ""pass1"")).thenReturn(user);
		
		userController.authenticateUser(""user1"", ""pass1"", false, ""return path"");
	
		verify(mockResult).redirectTo(""return path"");
	}
"
net.jforum.controllers.UserControllerTestCase.registrationCompletedWithAnonymousUserExpectRedirect,UserControllerTestCase.java,"void registrationCompletedWithAnonymousUserExpectRedirect() {
		when(userSession.isLogged()).thenReturn(false);
		
		userController.registrationCompleted();
		
		verify(mockRedirectController).insert();
	}
"
net.jforum.controllers.UserControllerTestCase.registrationCompletedWithValidUserExpectsPropertyBagWithUser,UserControllerTestCase.java,"void registrationCompletedWithValidUserExpectsPropertyBagWithUser() {
		when(userSession.isLogged()).thenReturn(true);
		when(userSession.getUser()).thenReturn(user);
		
		userController.registrationCompleted();
		
		assertEquals(user, mockResult.included(""user""));
	}
"
net.jforum.controllers.UserControllerTestCase.insertSaveUsernameTooBig,UserControllerTestCase.java,"void insertSaveUsernameTooBig() {
		when(config.getInt(ConfigKeys.USERNAME_MAX_LENGTH)).thenReturn(1);
		user.setUsername(""username1"");
		
		userController.insertSave(user);
		
		assertEquals(""User.usernameTooBig"", mockResult.included(""error""));
		verify(mockForwardControler).insert();
	}
"
net.jforum.controllers.UserControllerTestCase.insertSaveUsernameContainsInvalidChars,UserControllerTestCase.java,"void insertSaveUsernameContainsInvalidChars() {
		when(config.getInt(ConfigKeys.USERNAME_MAX_LENGTH)).thenReturn(20);
		user.setUsername(""<username"");
		
		userController.insertSave(user);
		
		assertEquals(""User.usernameInvalidChars"", mockResult.included(""error""));
		verify(mockForwardControler).insert();
	}
"
net.jforum.controllers.UserControllerTestCase.insertSaveUsernameContainsInvalidChars2,UserControllerTestCase.java,"void insertSaveUsernameContainsInvalidChars2() {
		when(config.getInt(ConfigKeys.USERNAME_MAX_LENGTH)).thenReturn(20);
		user.setUsername("">username"");
		
		userController.insertSave(user);
		
		assertEquals(""User.usernameInvalidChars"", mockResult.included(""error""));
		verify(mockForwardControler).insert();
	}
"
net.jforum.controllers.UserControllerTestCase.insertSaveUsernameNotAvailable,UserControllerTestCase.java,"void insertSaveUsernameNotAvailable() {
		when(config.getInt(ConfigKeys.USERNAME_MAX_LENGTH)).thenReturn(20);
		when(userRepository.isUsernameAvailable(""username"", null)).thenReturn(false);
		user.setUsername(""username"");
		
		userController.insertSave(user);
		
		assertEquals(""User.usernameNotAvailable"", mockResult.included(""error""));
		verify(mockForwardControler).insert();
	}
"
net.jforum.controllers.UserControllerTestCase.insertSaveUser,UserControllerTestCase.java,"void insertSaveUser() {
		when(config.getInt(ConfigKeys.USERNAME_MAX_LENGTH)).thenReturn(20);
		when(userRepository.isUsernameAvailable(""username"", null)).thenReturn(true);
		user.setUsername(""username"");
		
		userController.insertSave(user);
		
		verify(userService).add(user);
		verify(mockRedirectController).registrationCompleted();
	}
"
net.jforum.controllers.UserControllerTestCase.insertLoginUser,UserControllerTestCase.java,"void insertLoginUser() {
		when(config.getInt(ConfigKeys.USERNAME_MAX_LENGTH)).thenReturn(20);
		when(userRepository.isUsernameAvailable(""username"", null)).thenReturn(true);
		user.setUsername(""username"");
		
		userController.insertSave(user);
		
		verify(userSession).becomeLogged();
	}
"
net.jforum.controllers.UserControllerTestCase.profileHasReadAccessRightsShouldAllowViewProfile,UserControllerTestCase.java,"void profileHasReadAccessRightsShouldAllowViewProfile() {
		when(roleManager.getCanViewProfile()).thenReturn(true);
		when(userSession.getUser()).thenReturn(user);
		
		userController.profile(1);
		
		verify(userRepository).get(1);
	}
"
net.jforum.controllers.UserControllerTestCase.profileHasWriteAccessRightsShouldAllowEditProfile,UserControllerTestCase.java,"void profileHasWriteAccessRightsShouldAllowEditProfile() {
		when(roleManager.getCanViewProfile()).thenReturn(true);
		when(roleManager.getCanEditUser(any(User.class), anyListOf(Group.class))).thenReturn(true);
		when(userSession.getUser()).thenReturn(user);
		
		userController.profile(1);
		
		assertEquals(true, mockResult.included(""canEdit""));
	}
"
net.jforum.controllers.UserControllerTestCase.profileDoesNotHaveReadAccessRightShouldDenyViewProfile,UserControllerTestCase.java,"void profileDoesNotHaveReadAccessRightShouldDenyViewProfile() {
		when(roleManager.getCanViewProfile()).thenReturn(false);
		when(mockResult.redirectTo(MessageController.class)).thenReturn(mockMessageController);
		
		userController.profile(1);
		
		verify(mockMessageController).accessDenied();
	}
"
net.jforum.controllers.UserControllerTestCase.profileDoesNotHaveWriteAccessRightShouldDenyEditProfile,UserControllerTestCase.java,"void profileDoesNotHaveWriteAccessRightShouldDenyEditProfile() {
		when(roleManager.getCanViewProfile()).thenReturn(true);
		when(roleManager.getCanEditUser(any(User.class), anyListOf(Group.class))).thenReturn(false);
		when(userSession.getUser()).thenReturn(user);
		
		userController.profile(1);
		
		assertEquals(false, mockResult.included(""canEdit""));
	}
"
net.jforum.controllers.ForumAdminControllerTestCase.deleteIsFullAdministratorShouldAllow,ForumAdminControllerTestCase.java,"void deleteIsFullAdministratorShouldAllow() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAdministrator()).thenReturn(true);
		when(mockResult.redirectTo(controller)).thenReturn(mockForumAdminController);
			
		controller.delete(1, 2);
		
		verify(service).delete(1, 2);
		verify(mockForumAdminController).list();
	}
"
net.jforum.controllers.ForumAdminControllerTestCase.deleteIsNotFullAdministratorShouldIgnore,ForumAdminControllerTestCase.java,"void deleteIsNotFullAdministratorShouldIgnore() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAdministrator()).thenReturn(false);
		when(mockResult.redirectTo(controller)).thenReturn(mockForumAdminController);
			
		controller.delete(1, 2);
		
		verify(mockForumAdminController).list();
	}
"
net.jforum.controllers.ForumAdminControllerTestCase.list,ForumAdminControllerTestCase.java,"void list() {
		final Category category = new Category(categoryRepository);

		when(categoryRepository.getAllCategories()).thenReturn(Arrays.asList(category));
			
		controller.list();
		
		assertEquals(Arrays.asList(category), mockResult.included(""categories""));
	}
"
net.jforum.controllers.ForumAdminControllerTestCase.addExpectCategories,ForumAdminControllerTestCase.java,"void addExpectCategories() {
		when(categoryRepository.getAllCategories()).thenReturn(Arrays.asList(new Category()));
			
		controller.add();
		
		assertEquals(Arrays.asList(new Category()), mockResult.included(""categories""));
	}
"
net.jforum.controllers.ForumAdminControllerTestCase.editExpectForumAndCategories,ForumAdminControllerTestCase.java,"void editExpectForumAndCategories() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.getCanModerateForum(3)).thenReturn(true);
		when(forumRepository.get(3)).thenReturn(new Forum());
		when(categoryRepository.getAllCategories()).thenReturn(Arrays.asList(new Category()));
		when(mockResult.forwardTo(controller)).thenReturn(mockForumAdminController);
			
		controller.edit(3);
		
		assertEquals(new Forum(), mockResult.included(""forum""));
		assertEquals(Arrays.asList(new Category()), mockResult.included(""categories""));
		verify(mockForumAdminController).add();
	}
"
net.jforum.controllers.ForumAdminControllerTestCase.editSaveIsSuperAdministratorExpectsSuccess,ForumAdminControllerTestCase.java,"void editSaveIsSuperAdministratorExpectsSuccess() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAdministrator()).thenReturn(true);
		when(mockResult.redirectTo(controller)).thenReturn(mockForumAdminController);
			
		controller.editSave(new Forum());
		
		verify(service).update(notNull(Forum.class));
		verify(mockForumAdminController).list();
	}
"
net.jforum.controllers.ForumAdminControllerTestCase.editSaveIsCategoryAllowedExpectsSuccess,ForumAdminControllerTestCase.java,"void editSaveIsCategoryAllowedExpectsSuccess() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAdministrator()).thenReturn(false);
		when(roleManager.getCanModerateForum(0)).thenReturn(true);
		when(mockResult.redirectTo(controller)).thenReturn(mockForumAdminController);
	
		Forum forum = new Forum();
		forum.setCategory(new Category());
		forum.getCategory().setId(1);

		controller.editSave(forum);
		
		verify(service).update(notNull(Forum.class));
		verify(mockForumAdminController).list();
	}
"
net.jforum.controllers.ForumAdminControllerTestCase.editSaveNotSuperAdministratorCategoryNotAllowedShouldIgnore,ForumAdminControllerTestCase.java,"void editSaveNotSuperAdministratorCategoryNotAllowedShouldIgnore() {
		final Forum forum = new Forum();
		forum.setCategory(new Category());
		forum.getCategory().setId(1);
		
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAdministrator()).thenReturn(false);
		when(roleManager.getCanModerateForum(0)).thenReturn(true);
		when(mockResult.redirectTo(controller)).thenReturn(mockForumAdminController);
			
		controller.editSave(forum);
		
		verify(service).update(forum);
		verify(mockForumAdminController).list();
	}
"
net.jforum.controllers.ForumAdminControllerTestCase.addSaveIsSuperAdministratorExpectSuccess,ForumAdminControllerTestCase.java,"void addSaveIsSuperAdministratorExpectSuccess() {
		final Forum f = new Forum();
		f.setName(""f1"");
		
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAdministrator()).thenReturn(true);
		when(mockResult.redirectTo(controller)).thenReturn(mockForumAdminController);
			
		controller.addSave(f);
		
		assertEquals(f, mockResult.included(""forum""));
		verify(service).add(f);
		verify(mockForumAdminController).list();
	}
"
net.jforum.controllers.ForumAdminControllerTestCase.addSaveIsCategoryAllowedExpectSuccess,ForumAdminControllerTestCase.java,"void addSaveIsCategoryAllowedExpectSuccess() {
		final Forum f = new Forum();
		f.setName(""f1"");
		f.setCategory(new Category());
		f.getCategory().setId(1);
		
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAdministrator()).thenReturn(false);
		when(roleManager.isCategoryAllowed(1)).thenReturn(true);
		when(mockResult.redirectTo(controller)).thenReturn(mockForumAdminController);
			
		controller.addSave(f);
		
		assertEquals(f, mockResult.included(""forum""));
		verify(service).add(f);
		verify(mockForumAdminController).list();
	}
"
net.jforum.controllers.ForumAdminControllerTestCase.addSaveNotSuperAdministratorCategoryNotAllowedShouldIgnore,ForumAdminControllerTestCase.java,"void addSaveNotSuperAdministratorCategoryNotAllowedShouldIgnore() {
		final Forum forum = new Forum();
		forum.setName(""f1"");
		forum.setCategory(new Category());
		forum.getCategory().setId(1);
		
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAdministrator()).thenReturn(false);
		when(roleManager.isCategoryAllowed(1)).thenReturn(true);
		when(mockResult.redirectTo(controller)).thenReturn(mockForumAdminController);
			
		controller.addSave(forum);
		
		verify(service).add(forum);
		assertEquals(forum, mockResult.included(""forum""));
		verify(mockForumAdminController).list();
	}
"
net.jforum.controllers.ForumAdminControllerTestCase.up,ForumAdminControllerTestCase.java,"void up() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.getCanModerateForum(1)).thenReturn(true);
		when(mockResult.redirectTo(controller)).thenReturn(mockForumAdminController);
			
		controller.up(1);
		
		verify(service).upForumOrder(1);
		verify(mockForumAdminController).list();
	}
"
net.jforum.controllers.ForumAdminControllerTestCase.down,ForumAdminControllerTestCase.java,"void down() {
		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.getCanModerateForum(2)).thenReturn(true);
		when(mockResult.redirectTo(controller)).thenReturn(mockForumAdminController);
			

		controller.down(2);
		
		verify(service).downForumOrder(2);
		verify(mockForumAdminController).list();
	}
"
net.jforum.controllers.RecentTopicsControllerTestCase.listNew,RecentTopicsControllerTestCase.java,"void listNew() {
		component.listNew();

		assertEquals(""recentTopicsNew"", mockResult.included(""recentTopicsSectionKey""));
		assertEquals(topicList, mockResult.included(""topics""));
	}
"
net.jforum.controllers.RecentTopicsControllerTestCase.listUpdated,RecentTopicsControllerTestCase.java,"void listUpdated() {
		component.listUpdated();

		assertEquals(""recentTopicsUpdated"", mockResult.included(""recentTopicsSectionKey""));
		assertEquals(topicList, mockResult.included(""topics""));
	}
"
net.jforum.controllers.RecentTopicsControllerTestCase.listHot,RecentTopicsControllerTestCase.java,"void listHot() {
		component.listHot();

		assertEquals(""recentTopicsHot"", mockResult.included(""recentTopicsSectionKey""));
		assertEquals(topicList, mockResult.included(""topics""));
	}
"
net.jforum.services.TopicServiceTestCase.addTopicInvocationsShouldBeInOrder,TopicServiceTestCase.java,"void addTopicInvocationsShouldBeInOrder() {
		final Topic t = mock(Topic.class);

		when(t.getSubject()).thenReturn(""subject"");
		User user = new User();
		when(t.getUser()).thenReturn(user);
	
		Forum forum = new Forum(); forum.setId(1);
		when(t.getForum()).thenReturn(forum);
	
		Post post = mock(Post.class);
		when(post.getSubject()).thenReturn(""subject"");
		when(post.getText()).thenReturn(""text"");
		when(t.getFirstPost()).thenReturn(post);
		Date date = new Date();
		when(t.getDate()).thenReturn(date);
		when(t.isWaitingModeration()).thenReturn(true);
		
		
		topicService.addTopic(t, Collections.<PollOption>emptyList(), Collections.<AttachedFile>emptyList());
		
	
		verify(t).setFirstPost(null);
		verify(t).setHasAttachment(false);
	
		InOrder inOrder = inOrder(topicRepository, postRepository, post, t);
		inOrder.verify(topicRepository).add(t); 
		inOrder.verify(post).setForum(forum); 
		inOrder.verify(post).setTopic(t); 
		inOrder.verify(post).setDate(date); 
		inOrder.verify(post).setUser(user); 
		inOrder.verify(post).setSubject(""subject""); 
	
		inOrder.verify(postRepository).add(post);
		inOrder.verify(t).setFirstPost(post); 
		inOrder.verify(t).setLastPost(post); 
	
		verify(pollService).associatePoll(t, Collections.<PollOption>emptyList());
		verify(attachmentService).insertAttachments(Collections.<AttachedFile>emptyList(), post);
	}
"
net.jforum.services.TopicServiceTestCase.replyPostRepositoryShouldBeCalledBeforeCurrentTopicSetLastPost,TopicServiceTestCase.java,"void replyPostRepositoryShouldBeCalledBeforeCurrentTopicSetLastPost() {
		final Post post = new Post(); post.setSubject(""subject""); post.setText(""msg"");
		post.setUser(new User());
		
		Topic topic = mock(Topic.class);
		when(topicRepository.get(1)).thenReturn(topic);
		when(topic.getForum()).thenReturn(new Forum());
		
		
		Topic topicCheck = new Topic(); topicCheck.setId(1);
		topicService.reply(topicCheck, post, Collections.<AttachedFile>emptyList());
		
		
		InOrder inOrder = inOrder(postRepository, topic);
		inOrder.verify(postRepository).add(post); 
		inOrder.verify(topic).setLastPost(post); 
		
		verify(topic).incrementTotalReplies();
		verify(attachmentService).insertAttachments(Collections.<AttachedFile>emptyList(), post);
	}
"
net.jforum.services.TopicServiceTestCase.replyPostWithoutSubjectShouldUseTopicSubject,TopicServiceTestCase.java,"void replyPostWithoutSubjectShouldUseTopicSubject() {
		final Topic topic = new Topic(); topic.setSubject(""topic subject""); topic.setId(1);
		when(topicRepository.get(topic.getId())).thenReturn(topic);
		
		
		Post post = new Post(); post.setText(""122""); post.setSubject(null); post.setUser(new User());
		topicService.reply(topic, post, Collections.<AttachedFile>emptyList());
		
		
		verify(attachmentService).insertAttachments(eq(Collections.<AttachedFile>emptyList()), any(Post.class));
		Assert.assertEquals(topic.getSubject(), post.getSubject());
	}
"
net.jforum.services.TopicServiceTestCase.replyModeratedPostShouldNotUpdateSomeProperties,TopicServiceTestCase.java,"void replyModeratedPostShouldNotUpdateSomeProperties() {
		final Topic topic = this.newTopic();
		int currentTotalReplies = topic.getTotalReplies();
		Post post2 = new Post();
		post2.setId(2);
		Post post5 = new Post();
		post5.setId(5);
		
		topic.setLastPost(post2);
		Forum forum = new Forum(1);
		forum.setLastPost(post5);

		when(topicRepository.get(topic.getId())).thenReturn(topic);

		
		Post post = new Post(); post.setSubject(""s1""); post.setText(""t1"");
		post.setDate(null); post.setTopic(null); post.setModerate(true); post.setUser(new User());

		topicService.reply(topic, post, Collections.<AttachedFile>emptyList());
		
		
		Assert.assertEquals(0, post.getUser().getTotalPosts());
		Assert.assertEquals(topic, post.getTopic());
		Assert.assertEquals(currentTotalReplies, topic.getTotalReplies());
		Assert.assertFalse(forum.getLastPost().equals(post));
		Assert.assertFalse(topic.getLastPost().equals(post));
	}
"
net.jforum.services.TopicServiceTestCase.addModeratedTopicShouldNotUpdateForumLastPost,TopicServiceTestCase.java,"void addModeratedTopicShouldNotUpdateForumLastPost() {
		final Topic topic = this.newTopic();
		topic.setPendingModeration(true);
		final Forum forum = new Forum(1);
		
		topicService.addTopic(topic, Collections.<PollOption>emptyList(), Collections.<AttachedFile>emptyList());
		
		Assert.assertEquals(0, topic.getUser().getTotalPosts());
		Assert.assertNull(forum.getLastPost());
	}
"
net.jforum.services.TopicServiceTestCase.replyWithNullPostTextExpectsException,TopicServiceTestCase.java,"void replyWithNullPostTextExpectsException() {
		Topic t = new Topic(); t.setSubject(""a"");
		when(topicRepository.get(0)).thenReturn(t);
		

		Post p = new Post();
		p.setSubject(""123"");
		p.setText(null);

		topicService.reply(new Topic(), p, null);
	}
"
net.jforum.services.TopicServiceTestCase.replyPostExpectsChangesToUpdatableProperties,TopicServiceTestCase.java,"void replyPostExpectsChangesToUpdatableProperties() {
		final Post post = new Post(); post.setUser(new User());
		post.setSubject(""s1""); post.setText(""t1""); post.setDate(null); post.setTopic(null);
		final Topic current = new Topic(); current.setId(1); current.setForum(new Forum());
		int currentTotalReplies = current.getTotalReplies();
		
		when(topicRepository.get(1)).thenReturn(current);
			
		
		Topic tempTopic = new Topic(); tempTopic.setId(1);
		topicService.reply(tempTopic, post, Collections.<AttachedFile>emptyList());
		
		
		verify(postRepository).add(post);
		Assert.assertEquals(1, post.getUser().getTotalPosts());
		Assert.assertNotNull(post.getDate());
		Assert.assertEquals(current, post.getTopic());
		Assert.assertEquals(post, post.getTopic().getLastPost());
		Assert.assertEquals(post, current.getForum().getLastPost());
		Assert.assertEquals(currentTotalReplies + 1, current.getTotalReplies());
	}
"
net.jforum.services.TopicServiceTestCase.addNewTopicWithNullUserExpectException,TopicServiceTestCase.java,"void addNewTopicWithNullUserExpectException() {
		Topic t = new Topic();
		t.setUser(null);

		topicService.addTopic(t, null, null);
	}
"
net.jforum.services.TopicServiceTestCase.addNewTopicWithoutSubjectExpectException,TopicServiceTestCase.java,"void addNewTopicWithoutSubjectExpectException() {
		Topic t = new Topic();
		t.setUser(new User());
		t.setSubject(null);

		topicService.addTopic(t, null, null);
	}
"
net.jforum.services.TopicServiceTestCase.addNewTopicWithoutPostSubjectExpectsException,TopicServiceTestCase.java,"void addNewTopicWithoutPostSubjectExpectsException() {
		Topic t = new Topic();
		t.setUser(new User());
		t.setSubject(""123"");
		t.setFirstPost(new Post());
		t.getFirstPost().setSubject(null);

		topicService.addTopic(t, null, null);
	}
"
net.jforum.services.TopicServiceTestCase.addNewTopicWithoutPostTextExpectsException,TopicServiceTestCase.java,"void addNewTopicWithoutPostTextExpectsException() {
		Topic t = new Topic();
		t.setUser(new User());
		t.setSubject(""123"");
		t.setFirstPost(new Post());
		t.getFirstPost().setSubject(""123"");
		t.getFirstPost().setText(null);

		topicService.addTopic(t, null, null);
	}
"
net.jforum.services.TopicServiceTestCase.addNewTopicShouldSaveFirstPostAndAllRelatedObjecUpdates,TopicServiceTestCase.java,"void addNewTopicShouldSaveFirstPostAndAllRelatedObjecUpdates() {
		final Topic topic = this.newTopic();
		final Forum forum = new Forum(1);
		
		when(forumRepository.get(1)).thenReturn(forum);
		when(userRepository.getTotalPosts(topic.getUser())).thenReturn(1);
		
		
		topicService.addTopic(topic, Collections.<PollOption>emptyList(), Collections.<AttachedFile>emptyList());
		
		
		verify(topicRepository).add(topic);
		verify(postRepository).add(topic.getFirstPost());
		Assert.assertEquals(1, topic.getUser().getTotalPosts());
		Assert.assertTrue(topic.getLastPost() == topic.getFirstPost());
		Assert.assertTrue(topic == topic.getFirstPost().getTopic());
		Assert.assertTrue(topic == topic.getLastPost().getTopic());
		Assert.assertNotNull(topic.getDate());
		Assert.assertNotNull(topic.getFirstPost().getDate());
		Assert.assertNotNull(topic.getLastPost().getDate());
		Assert.assertEquals(topic.getDate(), topic.getFirstPost().getDate());
		Assert.assertEquals(topic.getDate(), topic.getLastPost().getDate());
		Assert.assertEquals(topic.getFirstPost(), forum.getLastPost());
	}
"
net.jforum.services.TopicServiceTestCase.newTopic,TopicServiceTestCase.java,"Topic newTopic() {
		Topic topic = new Topic();
		User user = new User();
		user.setId(1);
		
		topic.setSubject(""topic 1"");
		topic.getForum().setId(1);
		topic.setUser(user);
		topic.setFirstPost(new Post());
		topic.getFirstPost().setSubject(""123"");
		topic.getFirstPost().setText(""some message"");
		topic.getFirstPost().setSignatureEnabled(true);

		return topic;
	}
"
net.jforum.services.RankingServiceTestCase.specialRankingShouldNotHaveMinPass10ShouldForceToZero,RankingServiceTestCase.java,"void specialRankingShouldNotHaveMinPass10ShouldForceToZero() {
		Ranking r = new Ranking(); r.setTitle(""r1""); r.setSpecial(true); r.setMin(10);
		
		service.add(r);

		verify(repository).add(notNull(Ranking.class));
		Assert.assertEquals(0, r.getMin());
	}
"
net.jforum.services.RankingServiceTestCase.minValueShouldNotBeLessThan1ExpectsValidationException,RankingServiceTestCase.java,"void minValueShouldNotBeLessThan1ExpectsValidationException() {
		Ranking r = new Ranking(); r.setTitle(""r1""); r.setSpecial(false); r.setMin(0);
		service.add(r);
	}
"
net.jforum.services.RankingServiceTestCase.deleteUsingNullIdsShouldIgnore,RankingServiceTestCase.java,"void deleteUsingNullIdsShouldIgnore() {
		service.delete(null);

		verifyZeroInteractions(repository);
	}
"
net.jforum.services.RankingServiceTestCase.delete,RankingServiceTestCase.java,"void delete() {
		when(repository.get(1)).thenReturn(new Ranking());
		when(repository.get(2)).thenReturn(new Ranking());

		service.delete(1, 2);

		verify(repository, times(2)).remove(notNull(Ranking.class));
	}
"
net.jforum.services.RankingServiceTestCase.addExpectSuccess,RankingServiceTestCase.java,"void addExpectSuccess() {
		Ranking r = new Ranking(); r.setTitle(""r1""); r.setMin(1);

		service.add(r);

		verify(repository).add(notNull(Ranking.class));
	}
"
net.jforum.services.RankingServiceTestCase.addWithIdBiggerThanZeroExpectsValidationException,RankingServiceTestCase.java,"void addWithIdBiggerThanZeroExpectsValidationException() {
		Ranking r = new Ranking(); r.setTitle(""r1""); r.setId(1); r.setMin(1);
		service.add(r);
	}
"
net.jforum.services.RankingServiceTestCase.updateWithoutAnIdExpectsException,RankingServiceTestCase.java,"void updateWithoutAnIdExpectsException() {
		Ranking r = new Ranking(); r.setTitle(""r1""); r.setMin(1); r.setId(0);
		service.update(r);
	}
"
net.jforum.services.RankingServiceTestCase.updateExpectSuccess,RankingServiceTestCase.java,"void updateExpectSuccess() {
		Ranking r = new Ranking(); r.setId(1); r.setTitle(""r1""); r.setMin(1);

		service.update(r);

		verify(repository).update(notNull(Ranking.class));
	}
"
net.jforum.services.RankingServiceTestCase.addUsingNullExpectsNPE,RankingServiceTestCase.java,"void addUsingNullExpectsNPE() {
		service.add(null);
	}
"
net.jforum.services.RankingServiceTestCase.addWithoutTitleExpectsValidationException,RankingServiceTestCase.java,"void addWithoutTitleExpectsValidationException() {
		service.add(new Ranking());
	}
"
net.jforum.services.RankingServiceTestCase.updateUsingNullExpectsNPE,RankingServiceTestCase.java,"void updateUsingNullExpectsNPE() {
		service.update(null);
	}
"
net.jforum.services.RankingServiceTestCase.updateWithoutTitleExpectsValidationException,RankingServiceTestCase.java,"void updateWithoutTitleExpectsValidationException() {
		Ranking r = new Ranking(); r.setTitle(null); r.setMin(1); r.setId(1);
		service.add(r);
	}
"
net.jforum.services.TopicWatchServiceTestCase.unwatch,TopicWatchServiceTestCase.java,"void unwatch() {
		final Topic topic = new Topic(); topic.setId(1);
		final User user = new User(); user.setId(2);

		service.unwatch(topic, user);

		verify(repository).removeSubscription(topic, user);
	}
"
net.jforum.services.TopicWatchServiceTestCase.watchUserNotSubscribedShouldAdd,TopicWatchServiceTestCase.java,"void watchUserNotSubscribedShouldAdd() {
		final Topic topic = new Topic(); topic.setId(1);
		final User user = new User(); user.setId(2);
		when(repository.getSubscription(topic, user)).thenReturn(null);

		service.watch(topic, user);

		verify(repository).add(notNull(TopicWatch.class));
	}
"
net.jforum.services.TopicWatchServiceTestCase.watchUserIsSubscribedShouldIgnore,TopicWatchServiceTestCase.java,"void watchUserIsSubscribedShouldIgnore() {
		final Topic topic = new Topic(); topic.setId(1);
		final User user = new User(); user.setId(2);

		when(repository.getSubscription(topic, user)).thenReturn(new TopicWatch());

		service.watch(topic, user);
		
		verify(repository,never()).add(any(TopicWatch.class));
	}
"
net.jforum.services.RSSServiceTestCase.forTopics,RSSServiceTestCase.java,"void forTopics() throws Exception {
		Forum forum = new Forum(); forum.setId(1); forum.setName(""forum x""); forum.setDescription(""forum description"");

		when(forumRepository.get(forum.getId())).thenReturn(forum);
		when(config.getInt(ConfigKeys.TOPICS_PER_PAGE)).thenReturn(10);
		when(rssRepository.getForumTopics(forum, 10)).thenReturn(Arrays.asList(newTopic(1, ""topic 1"", 1, ""post text 1"")));
		when(i18n.params(""forum x"")).thenReturn(new Object[] { ""forum x"" });
		when(i18n.getFormattedMessage(""RSS.ForumTopics.title"", new Object[] { ""forum x"" })).thenReturn(""channel title"");
		when(config.getValue(ConfigKeys.RSS_DATE_TIME_FORMAT)).thenReturn(""EEE, d MMM yyyy HH:mm:ss"");
		when(config.getString(ConfigKeys.FORUM_LINK)).thenReturn(""http://site.link/"");
		String result = service.forForum(1);

		XpathEngine xpath = XMLUnit.newXpathEngine();
		Document document = XMLUnit.buildControlDocument(result);

		assertEquals(""forum description"", xpath.evaluate(""//channel/description"", document));
		assertEquals(""http://site.link/forums/show/1.page"", xpath.evaluate(""//channel/link"", document));
		assertEquals(""channel title"", xpath.evaluate(""//channel/title"", document));
		assertEquals(""post text 1"", xpath.evaluate(""//channel/item/description"", document));
		assertEquals(""http://site.link/topics/preList/1/1.page"", xpath.evaluate(""//channel/item/link"", document));
		assertEquals(""topic 1"", xpath.evaluate(""//channel/item/title"", document));
	}
"
net.jforum.services.RSSServiceTestCase.setup,RSSServiceTestCase.java,"void setup() {
		when(config.getValue(ConfigKeys.SERVLET_EXTENSION)).thenReturn("".page"");
	}
"
net.jforum.services.RSSServiceTestCase.newTopic,RSSServiceTestCase.java,"Topic newTopic(int id, String subject, int postId, String postText) {
		Topic topic = new Topic();

		topic.setId(1);
		topic.setDate(new Date());
		topic.setSubject(subject);
		topic.setLastPost(new Post());
		topic.getLastPost().setId(postId);
		topic.getLastPost().setText(postText);

		return topic;
	}
"
net.jforum.services.PrivateMessageServiceTestCase.deleteIsSenderTypeSentShouldAccept,PrivateMessageServiceTestCase.java,"void deleteIsSenderTypeSentShouldAccept() {
		when(repository.get(1)).thenReturn(pm);
		pm.setToUser(this.newUser(3)); pm.setFromUser(this.newUser(2)); pm.setType(PrivateMessageType.SENT);

		service.delete(this.newUser(2), 1);

		verify(repository).remove(pm);
	}
"
net.jforum.services.PrivateMessageServiceTestCase.deleteIsRecipientTypeNotSentShouldAccept,PrivateMessageServiceTestCase.java,"void deleteIsRecipientTypeNotSentShouldAccept() {
		when(repository.get(1)).thenReturn(pm);
		pm.setToUser(this.newUser(3)); pm.setFromUser(this.newUser(2)); pm.setType(PrivateMessageType.READ);

		service.delete(this.newUser(3), 1);

		verify(repository).remove(pm);
	}
"
net.jforum.services.PrivateMessageServiceTestCase.deleteIsSenderTypeNotSentShouldIgnore,PrivateMessageServiceTestCase.java,"void deleteIsSenderTypeNotSentShouldIgnore() {
		when(repository.get(1)).thenReturn(pm);
		pm.setToUser(this.newUser(3)); pm.setFromUser(this.newUser(2)); pm.setType(PrivateMessageType.NEW);
		service.delete(this.newUser(2), 1);
	}
"
net.jforum.services.PrivateMessageServiceTestCase.deleteIsRecipientTypeSentShouldIgnore,PrivateMessageServiceTestCase.java,"void deleteIsRecipientTypeSentShouldIgnore() {
		when(repository.get(1)).thenReturn(pm);
		pm.setToUser(this.newUser(3)); pm.setFromUser(this.newUser(2)); pm.setType(PrivateMessageType.SENT);
		service.delete(this.newUser(3), 1);
	}
"
net.jforum.services.PrivateMessageServiceTestCase.deleteNotRecipientNotSenderShouldIgnore,PrivateMessageServiceTestCase.java,"void deleteNotRecipientNotSenderShouldIgnore() {
		when(repository.get(1)).thenReturn(pm);
		pm.setToUser(this.newUser(2)); pm.setFromUser(this.newUser(3));
		service.delete(this.newUser(1), 1);
	}
"
net.jforum.services.PrivateMessageServiceTestCase.deleteNullIdsShouldIgnore,PrivateMessageServiceTestCase.java,"void deleteNullIdsShouldIgnore() {
		service.delete(null, null);
	}
"
net.jforum.services.PrivateMessageServiceTestCase.sendWithNullDateShouldForceAValue,PrivateMessageServiceTestCase.java,"void sendWithNullDateShouldForceAValue() {
		PrivateMessage pm = new PrivateMessage();
		pm.setFromUser(new User());
		pm.setToUser(new User());
		pm.setText(""text"");
		pm.setSubject(""subject"");
		pm.setDate(null);

		service.send(pm);

		assertNotNull(pm.getDate());
	}
"
net.jforum.services.PrivateMessageServiceTestCase.sendExpectSuccess,PrivateMessageServiceTestCase.java,"void sendExpectSuccess() {
		PrivateMessage pm = new PrivateMessage();
		pm.setFromUser(new User());
		pm.setToUser(new User());
		pm.setText(""text"");
		pm.setSubject(""subject"");

		service.send(pm);
		
		verify(repository).add(notNull(PrivateMessage.class));
	}
"
net.jforum.services.PrivateMessageServiceTestCase.textNullExpectsException,PrivateMessageServiceTestCase.java,"void textNullExpectsException() {
		PrivateMessage pm = new PrivateMessage();
		pm.setFromUser(new User());
		pm.setToUser(new User());
		pm.setText(null);
		pm.setSubject(""subject"");

		service.send(pm);
	}
"
net.jforum.services.PrivateMessageServiceTestCase.textEmptyExpectsException,PrivateMessageServiceTestCase.java,"void textEmptyExpectsException() {
		PrivateMessage pm = new PrivateMessage();
		pm.setFromUser(new User());
		pm.setToUser(new User());
		pm.setText("""");
		pm.setSubject(""subject"");

		service.send(pm);
	}
"
net.jforum.services.PrivateMessageServiceTestCase.subjectEmptyExpectsException,PrivateMessageServiceTestCase.java,"void subjectEmptyExpectsException() {
		PrivateMessage pm = new PrivateMessage();
		pm.setFromUser(new User());
		pm.setToUser(new User());
		pm.setText(""text"");
		pm.setSubject("""");

		service.send(pm);
	}
"
net.jforum.services.PrivateMessageServiceTestCase.subjectNullExpectsException,PrivateMessageServiceTestCase.java,"void subjectNullExpectsException() {
		PrivateMessage pm = new PrivateMessage();
		pm.setFromUser(new User());
		pm.setToUser(new User());
		pm.setText(""text"");
		pm.setSubject(null);

		service.send(pm);
	}
"
net.jforum.services.PrivateMessageServiceTestCase.toUserNullExpectsException,PrivateMessageServiceTestCase.java,"void toUserNullExpectsException() {
		PrivateMessage pm = new PrivateMessage();
		pm.setFromUser(new User());
		pm.setToUser(null);
		pm.setText(""text"");
		pm.setSubject(""subject"");

		service.send(pm);
	}
"
net.jforum.services.PrivateMessageServiceTestCase.fromUserNullExpectsException,PrivateMessageServiceTestCase.java,"void fromUserNullExpectsException() {
		PrivateMessage pm = new PrivateMessage();
		pm.setFromUser(null);
		pm.setToUser(new User());
		pm.setText(""text"");
		pm.setSubject(""subject"");

		service.send(pm);
	}
"
net.jforum.services.PrivateMessageServiceTestCase.newUser,PrivateMessageServiceTestCase.java,"User newUser(int id) {
		User user = new User(); user.setId(id);
		return user;
	}
"
net.jforum.services.ModerationServiceTestCase.setup,ModerationServiceTestCase.java,"void setup() {
		moderationLogService = new ModerationLogService(config, moderationLogRepository, topicRepository);
		service = new ModerationService(postRepository, forumRepository, topicRepository, moderationLogService);
		
		post1.setId(1);
		post2.setId(2);
		post5.setId(5);
		post6.setId(6);
		
		when(forumRepository.get(1)).thenReturn(new Forum()); //when(state.isNot(""move"");
	//	allowing(forumRepository); when(state.isNot(""move""));
	}
"
net.jforum.services.ModerationServiceTestCase.moveTopics,ModerationServiceTestCase.java,"void moveTopics() {
	//	state.become(""move"");

		final Forum oldForum = new Forum(); oldForum.setId(1); oldForum.setLastPost(null);
		final Forum targetForum = new Forum(); targetForum.setId(2); targetForum.setLastPost(null);
		final Topic topic = new Topic(); topic.setId(3); topic.setMovedId(0); topic.setForum(oldForum);

		when(config.getBoolean(ConfigKeys.MODERATION_LOGGING_ENABLED)).thenReturn(true);
		when(forumRepository.get(2)).thenReturn(targetForum);
		when(topicRepository.get(3)).thenReturn(topic);
		when(forumRepository.getLastPost(oldForum)).thenReturn(post5);
		when(forumRepository.getLastPost(targetForum)).thenReturn(post6);

		service.moveTopics(2, moderationLog, 3);

		verify(moderationLogRepository).add(any(ModerationLog.class));
		verify(forumRepository).moveTopics(targetForum, topic.getId());
		assertEquals(targetForum.getLastPost(), post6); 
		assertEquals(oldForum.getLastPost(), post5); 
	}
"
net.jforum.services.ModerationServiceTestCase.moveTopicsEmptyListShouldIgnore,ModerationServiceTestCase.java,"void moveTopicsEmptyListShouldIgnore() {
		service.moveTopics(1, null);
		
		verifyZeroInteractions(forumRepository);
	}
"
net.jforum.services.ModerationServiceTestCase.lockUnlock,ModerationServiceTestCase.java,"void lockUnlock() {
		final Topic lockedTopic = new Topic(); lockedTopic.lock();
		final Topic unlockedTopic = new Topic(); unlockedTopic.unlock();


		when(config.getBoolean(ConfigKeys.MODERATION_LOGGING_ENABLED)).thenReturn(false);
		when(topicRepository.get(1)).thenReturn(lockedTopic);
		when(topicRepository.get(2)).thenReturn(unlockedTopic);


		int[] ids = {1, 2};
		service.lockUnlock(ids, moderationLog);

		assertFalse(lockedTopic.isLocked());
		assertTrue(unlockedTopic.isLocked());
	}
"
net.jforum.services.ModerationServiceTestCase.lockUnlockNullIdsShouldIgnore,ModerationServiceTestCase.java,"void lockUnlockNullIdsShouldIgnore() {
		service.lockUnlock(null, moderationLog);
	}
"
net.jforum.services.ModerationServiceTestCase.deleteTopics,ModerationServiceTestCase.java,"void deleteTopics() {
		final Topic topic = new Topic(); topic.setId(1);

		when(config.getBoolean(ConfigKeys.MODERATION_LOGGING_ENABLED)).thenReturn(false);
		when(topicRepository.get(1)).thenReturn(topic);

		service.deleteTopics(Arrays.asList(topic), moderationLog);
		
		verify(topicRepository).remove(topic);
	}
"
net.jforum.services.ModerationServiceTestCase.reject,ModerationServiceTestCase.java,"void reject() {
		when(postRepository.get(1)).thenReturn(post1);

		ApproveInfo info = new ApproveInfo();
		info.setPostId(1); info.setStatus(ApproveInfo.REJECT);
		service.doApproval(1, this.asList(info));

		verify(postRepository).remove(post1);
	}
"
net.jforum.services.ModerationServiceTestCase.approveEntireTopicIsWaitingModerationShouldChangeTopicStatusAndNotIncrementTotalRepliesAndTotalUserPosts,ModerationServiceTestCase.java,"void approveEntireTopicIsWaitingModerationShouldChangeTopicStatusAndNotIncrementTotalRepliesAndTotalUserPosts() {
		final Post post = new Post(); post.setId(1); post.setModerate(true); post.setUser(new User());
		Topic topic = new Topic(); topic.setPendingModeration(true); topic.setLastPost(null);
		post.setTopic(topic);

		when(postRepository.get(1)).thenReturn(post);
		when(topicRepository.getLastPost(post.getTopic())).thenReturn(post);

		ApproveInfo info = new ApproveInfo();
		info.setPostId(1); info.setStatus(ApproveInfo.APPROVE);
		service.doApproval(1, this.asList(info));

		assertEquals(1, post.getUser().getTotalPosts());
		assertFalse(topic.isWaitingModeration());
		assertFalse(post.isWaitingModeration());
		assertEquals(0, topic.getTotalReplies());
		assertEquals(post, topic.getLastPost());
	}
"
net.jforum.services.ModerationServiceTestCase.approvePostInExistingTopicShouldIncrementTotalRepliesAndTotalUserPosts,ModerationServiceTestCase.java,"void approvePostInExistingTopicShouldIncrementTotalRepliesAndTotalUserPosts() {
		Topic topic = new Topic(); topic.setPendingModeration(false); topic.setLastPost(post2); 

		final Post post = new Post(); post.setId(1); post.setModerate(true);
		post.setTopic(topic); post.setUser(new User());

		when(postRepository.get(1)).thenReturn(post);
		when(topicRepository.getLastPost(post.getTopic())).thenReturn(post);

		ApproveInfo info = new ApproveInfo();
		info.setPostId(1); info.setStatus(ApproveInfo.APPROVE);
		service.doApproval(1, this.asList(info));

		assertEquals(1, post.getUser().getTotalPosts());
		assertFalse(post.isWaitingModeration());
		assertEquals(1, topic.getTotalReplies());
		assertEquals(post, topic.getLastPost());
	}
"
net.jforum.services.ModerationServiceTestCase.deferShouldDoNothing,ModerationServiceTestCase.java,"void deferShouldDoNothing() {
		ApproveInfo info = new ApproveInfo();
		info.setPostId(1); info.setStatus(ApproveInfo.DEFER);
		service.doApproval(1, this.asList(info));
	}
"
net.jforum.services.ModerationServiceTestCase.approveNullInfoShouldIgnore,ModerationServiceTestCase.java,"void approveNullInfoShouldIgnore() {
		service.doApproval(1, null);
	}
"
net.jforum.services.ModerationServiceTestCase.asList,ModerationServiceTestCase.java,"List<ApproveInfo> asList(ApproveInfo info) {
		return Arrays.asList(info);
	}
"
net.jforum.services.CategoryServiceTestCase.deleteUsingNullIdsShouldIgnore,CategoryServiceTestCase.java,"void deleteUsingNullIdsShouldIgnore() {
		service.delete(null);
	}
"
net.jforum.services.CategoryServiceTestCase.delete,CategoryServiceTestCase.java,"void delete() {
		when(repository.get(1)).thenReturn(new Category());
		when(repository.get(2)).thenReturn(new Category());

		service.delete(1, 2);
		
		verify(repository,times(2)).remove(notNull(Category.class));
	}
"
net.jforum.services.CategoryServiceTestCase.add,CategoryServiceTestCase.java,"void add() {
		final Category c = newCategoryWithOrder(0, 2);
		
		service.add(c);
		
		verify(repository).add(c);
	}
"
net.jforum.services.CategoryServiceTestCase.addUsingACategoryWithIdBiggerThanZeroExpectsValidationException,CategoryServiceTestCase.java,"void addUsingACategoryWithIdBiggerThanZeroExpectsValidationException() {
		Category c = new Category();
		c.setName(""c1"");
		c.setId(2);

		service.add(c);
	}
"
net.jforum.services.CategoryServiceTestCase.updateUsingACategoryWithoutAnIdExpectsException,CategoryServiceTestCase.java,"void updateUsingACategoryWithoutAnIdExpectsException() {
		service.update(new Category());
	}
"
net.jforum.services.CategoryServiceTestCase.updateUsingAGoodCategoryExpectSuccess,CategoryServiceTestCase.java,"void updateUsingAGoodCategoryExpectSuccess() {
		final Category c = newCategoryWithOrder(1, 2);
		c.setId(2);
		
		service.update(c);
		
		verify(repository).update(c);
	}
"
net.jforum.services.CategoryServiceTestCase.addUsingNullCategoryExpectsNPE,CategoryServiceTestCase.java,"void addUsingNullCategoryExpectsNPE() {
		service.add(null);
	}
"
net.jforum.services.CategoryServiceTestCase.addUsingCategoryWithoutNameExpectsValidationException,CategoryServiceTestCase.java,"void addUsingCategoryWithoutNameExpectsValidationException() {
		service.add(new Category());
	}
"
net.jforum.services.CategoryServiceTestCase.updateUsingNullCategoryExpectsNPE,CategoryServiceTestCase.java,"void updateUsingNullCategoryExpectsNPE() {
		service.update(null);
	}
"
net.jforum.services.CategoryServiceTestCase.updateUsingCategoryWithoutNameExpectsValidationException,CategoryServiceTestCase.java,"void updateUsingCategoryWithoutNameExpectsValidationException() {
		Category c = new Category();
		c.setId(1);
		service.add(c);
	}
"
net.jforum.services.CategoryServiceTestCase.upCategoryOrderExpectToBeInFirstPosition,CategoryServiceTestCase.java,"void upCategoryOrderExpectToBeInFirstPosition() {
		final Category categoryToChange = newCategoryWithOrder(1, 2);
		
		when(repository.get(1)).thenReturn(categoryToChange);
		when(repository.getAllCategories()).thenReturn(Arrays.asList(newCategoryWithOrder(2, 1), newCategoryWithOrder(1, 2)));
		
		service.upCategoryOrder(1);
		
		verify(repository,times(2)).update(notNull(Category.class));
		Assert.assertEquals(1, categoryToChange.getDisplayOrder());
	}
"
net.jforum.services.CategoryServiceTestCase.downCategoryOrderExpectToBeInLastPosition,CategoryServiceTestCase.java,"void downCategoryOrderExpectToBeInLastPosition() {
		final Category categoryToChange = newCategoryWithOrder(1, 1);
		
		when(repository.get(1)).thenReturn(categoryToChange);
		when(repository.getAllCategories()).thenReturn(Arrays.asList(newCategoryWithOrder(1, 1), newCategoryWithOrder(2, 2)));
		
		service.downCategoryOrder(1);

		verify(repository,times(2)).update(notNull(Category.class));
		Assert.assertEquals(2, categoryToChange.getDisplayOrder());
	}
"
net.jforum.services.CategoryServiceTestCase.upCategoryOrderCategoryAlreadyFistShouldIgnore,CategoryServiceTestCase.java,"void upCategoryOrderCategoryAlreadyFistShouldIgnore() {
		final Category categoryToChange = newCategoryWithOrder(1, 1);
		when(repository.get(1)).thenReturn(categoryToChange);
		when(repository.getAllCategories()).thenReturn(Arrays.asList(newCategoryWithOrder(1, 1), newCategoryWithOrder(2, 2)));

		service.upCategoryOrder(1);
		
		verify(repository,never()).update(notNull(Category.class));
	}
"
net.jforum.services.CategoryServiceTestCase.downCategoryOrderCategoryAlredyLastShouldIgnore,CategoryServiceTestCase.java,"void downCategoryOrderCategoryAlredyLastShouldIgnore() {
		final Category categoryToChange = newCategoryWithOrder(2, 2);
		
		when(repository.get(2)).thenReturn(categoryToChange);
		when(repository.getAllCategories()).thenReturn(Arrays.asList(newCategoryWithOrder(1, 1), newCategoryWithOrder(2, 2)));
	
		service.downCategoryOrder(2);

		verify(repository,never()).update(notNull(Category.class));
	}
"
net.jforum.services.CategoryServiceTestCase.newCategoryWithOrder,CategoryServiceTestCase.java,"Category newCategoryWithOrder(int categoryId, int order) {
		Category c = new Category();
		c.setId(categoryId);
		c.setName(""c1"");
		c.setDisplayOrder(order);

		return c;
	}
"
net.jforum.services.PollServiceTestCase.processChanges,PollServiceTestCase.java,"void processChanges() {
		List<PollOption> allOptions = new ArrayList<PollOption>();
		allOptions.add(this.createOption(1, ""A changed""));
		allOptions.add(this.createOption(4, ""D""));
		allOptions.add(this.createOption(0, ""E""));

		Poll poll = this.createPoll();

		PollService service = new PollService();
		service.processChanges(poll, allOptions);

		assertEquals(3, poll.getOptions().size());
		assertFalse(poll.getOptions().contains(this.createOption(2, ""B"")));
		assertFalse(poll.getOptions().contains(this.createOption(3, ""c"")));
		assertTrue(poll.getOptions().contains(this.createOption(0, ""E"")));
		assertEquals(""A changed"", poll.getOptions().get(0).getText());
	}
"
net.jforum.services.PollServiceTestCase.createPoll,PollServiceTestCase.java,"Poll createPoll() {
		Poll p = new  Poll();

		p.getOptions().add(this.createOption(1, ""A""));
		p.getOptions().add(this.createOption(2, ""B""));
		p.getOptions().add(this.createOption(3, ""C""));
		p.getOptions().add(this.createOption(4, ""D""));

		return p;
	}
"
net.jforum.services.PollServiceTestCase.createOption,PollServiceTestCase.java,"PollOption createOption(int id, String text) {
		PollOption o = new PollOption();

		o.setId(id);
		o.setText(text);

		return o;
	}
"
net.jforum.services.UserServiceTestCase.setup,UserServiceTestCase.java,"void setup() {
		service = new UserService(repository, groupRepository, config, new DefaultLoginAuthenticator(repository), avatarService);
	}
"
net.jforum.services.UserServiceTestCase.updateNullUserExpectsException,UserServiceTestCase.java,"void updateNullUserExpectsException() {
		service.update(null, false);
	}
"
net.jforum.services.UserServiceTestCase.updateIdZeroExpectsException,UserServiceTestCase.java,"void updateIdZeroExpectsException() {
		User user = new User(); user.setId(0);
		service.update(user, false);
	}
"
net.jforum.services.UserServiceTestCase.updateShouldChangeUsername,UserServiceTestCase.java,"void updateShouldChangeUsername() {
		final User current = new User();
		current.setUsername(""old"");
		when(repository.get(1)).thenReturn(current);

		User newUser = new User();
		newUser.setId(1);
		newUser.setUsername(""new username"");

		service.update(newUser, true);

		Assert.assertEquals(newUser.getUsername(), current.getUsername());
	}
"
net.jforum.services.UserServiceTestCase.updateExpectSuccess,UserServiceTestCase.java,"void updateExpectSuccess() {
		final User user = new User(); user.setId(1);
		final User current = new User();

		current.setAim(null);
		current.setAttachSignature(false);
		current.setAvatar(null);
		current.setBbCodeEnabled(false);
		current.setBiography(null);
		current.setFrom(null);
		current.setHtmlEnabled(false);
		current.setInterests(null);
		current.setLang(null);
		current.setMsn(null);
		current.setNotifyAlways(false);
		current.setOccupation(null);
		current.setViewEmailEnabled(false);
		current.setWebsite(null);
		current.setYim(null);
		current.setSignature(null);
		current.setNotifyReply(false);
		current.setNotifyPrivateMessages(false);
		current.setSmiliesEnabled(false);
		current.setNotifyText(false);

		when(repository.get(user.getId())).thenReturn(current);

		user.setAim(""aim"");
		user.setAttachSignature(true);
		user.setAvatar(null);
		user.setBbCodeEnabled(true);
		user.setBiography(""bio"");
		user.setFrom(""from"");
		user.setHtmlEnabled(true);
		user.setInterests(""interests"");
		user.setLang(""lang"");
		user.setMsn(""msn"");
		user.setNotifyAlways(true);
		user.setOccupation(""occ"");
		user.setViewEmailEnabled(true);
		user.setWebsite(""website"");
		user.setYim(""yim"");
		user.setSignature(""signature"");
		user.setNotifyReply(true);
		user.setNotifyPrivateMessages(true);
		user.setSmiliesEnabled(true);
		user.setNotifyText(true);

		service.update(user, false);

		verify(repository).update(current);
		Assert.assertEquals(user.getAim(), current.getAim());
		Assert.assertEquals(user.getAttachSignature(), current.getAttachSignature());
		Assert.assertEquals(user.isBbCodeEnabled(), current.isBbCodeEnabled());
		Assert.assertEquals(user.getBiography(), current.getBiography());
		Assert.assertEquals(user.getFrom(), current.getFrom());
		Assert.assertEquals(user.isHtmlEnabled(), current.isHtmlEnabled());
		Assert.assertEquals(user.getinterests(), current.getinterests());
		Assert.assertEquals(user.getLang(), current.getLang());
		Assert.assertEquals(user.getMsn(), current.getMsn());
		Assert.assertEquals(user.getNotifyAlways(), current.getNotifyAlways());
		Assert.assertEquals(user.getOccupation(), current.getOccupation());
		Assert.assertEquals(user.isViewEmailEnabled(), current.isViewEmailEnabled());
		Assert.assertEquals(user.getWebsite(), current.getWebsite());
		Assert.assertEquals(user.getYim(), current.getYim());
		Assert.assertEquals(user.getSignature(), current.getSignature());
		Assert.assertEquals(user.getNotifyReply(), current.getNotifyReply());
		Assert.assertEquals(user.getNotifyPrivateMessages(), current.getNotifyPrivateMessages());
		Assert.assertEquals(user.isSmiliesEnabled(), current.isSmiliesEnabled());
		Assert.assertEquals(user.getNotifyText(), current.getNotifyText());
	}
"
net.jforum.services.UserServiceTestCase.saveGroupsUsingNullIdsShouldDoNothing,UserServiceTestCase.java,"void saveGroupsUsingNullIdsShouldDoNothing() {
		service.saveGroups(1, null);
	}
"
net.jforum.services.UserServiceTestCase.saveGroupsUsingZeroLengthArrayShouldDoNothing,UserServiceTestCase.java,"void saveGroupsUsingZeroLengthArrayShouldDoNothing() {
		service.saveGroups(1, new int[0]);
	}
"
net.jforum.services.UserServiceTestCase.saveGroupsExpectSuccess,UserServiceTestCase.java,"void saveGroupsExpectSuccess() {
		Group g1 = new Group(); g1.setId(1);
		Group g5 = new Group(); g5.setId(5);
		Group g6 = new Group(); g6.setId(6);
		final User user = new User(); user.addGroup(g1);

		when(repository.get(1)).thenReturn(user);
		when(groupRepository.get(5)).thenReturn(g5);
		when(groupRepository.get(6)).thenReturn(g6);

		service.saveGroups(1, 5, 6);

		verify(repository).update(user);
		Assert.assertFalse(user.getGroups().contains(g1));
		Assert.assertTrue(user.getGroups().contains(g5));
		Assert.assertTrue(user.getGroups().contains(g6));
	}
"
net.jforum.services.UserServiceTestCase.validateLogin,UserServiceTestCase.java,"void validateLogin() {
		when(repository.validateLogin(""user"", MD5.hash(""passwd""))).thenReturn(new User());

		User user = service.validateLogin(""user"", ""passwd"");

		Assert.assertNotNull(user);
	}
"
net.jforum.services.UserServiceTestCase.addWithoutRegistrationDateShouldForceValue,UserServiceTestCase.java,"void addWithoutRegistrationDateShouldForceValue() {
		User user = new User(); user.setUsername(""u1""); user.setPassword(""pwd1""); user.setEmail(""email"");
		user.setRegistrationDate(null);
		user.addGroup(new Group());

		service.add(user);

		Assert.assertNotNull(user.getRegistrationDate());
	}
"
net.jforum.services.UserServiceTestCase.addEmptyUsernameExpectsException,UserServiceTestCase.java,"void addEmptyUsernameExpectsException() {
		User user = new User();
		user.setUsername("""");
		user.setEmail(""email"");
		user.setPassword(""pwd"");

		service.add(user);
	}
"
net.jforum.services.UserServiceTestCase.addNullUsernameExpectsException,UserServiceTestCase.java,"void addNullUsernameExpectsException() {
		User user = new User();
		user.setUsername(null);
		user.setEmail(""email"");
		user.setPassword(""pwd"");

		service.add(user);
	}
"
net.jforum.services.UserServiceTestCase.addEmptyEmailExpectsException,UserServiceTestCase.java,"void addEmptyEmailExpectsException() {
		User user = new User();
		user.setUsername(""username"");
		user.setEmail("""");
		user.setPassword(""pwd"");

		service.add(user);
	}
"
net.jforum.services.UserServiceTestCase.addNullEmailExpectsException,UserServiceTestCase.java,"void addNullEmailExpectsException() {
		User user = new User();
		user.setUsername(""username"");
		user.setEmail(null);
		user.setPassword(""pwd"");

		service.add(user);
	}
"
net.jforum.services.UserServiceTestCase.addEmptyPasswordExpectsException,UserServiceTestCase.java,"void addEmptyPasswordExpectsException() {
		User user = new User();
		user.setUsername(""username"");
		user.setEmail(""email"");
		user.setPassword("""");

		service.add(user);
	}
"
net.jforum.services.UserServiceTestCase.addNullPasswordExpectsException,UserServiceTestCase.java,"void addNullPasswordExpectsException() {
		User user = new User();
		user.setUsername(""username"");
		user.setEmail(""email"");
		user.setPassword(null);

		service.add(user);
	}
"
net.jforum.services.UserServiceTestCase.addIdBiggerThanZeroExpectsException,UserServiceTestCase.java,"void addIdBiggerThanZeroExpectsException() {
		User user = new User(); user.setUsername(""username"");
		user.setEmail(""email""); user.setPassword(""password"");
		user.setId(1);

		service.add(user);
	}
"
net.jforum.services.UserServiceTestCase.addNullUserExpectsException,UserServiceTestCase.java,"void addNullUserExpectsException() {
		service.add(null);
	}
"
net.jforum.services.UserServiceTestCase.addWithoutGroupShouldUseDefault,UserServiceTestCase.java,"void addWithoutGroupShouldUseDefault() {
		final User user = new User();
		user.setPassword(""123"");
		user.setUsername(""username1"");
		user.setEmail(""email"");
		user.getGroups().clear();

		when(config.getInt(ConfigKeys.DEFAULT_USER_GROUP)).thenReturn(1);
		when(groupRepository.get(1)).thenReturn(new Group());

		service.add(user);

		verify(repository).add(user);
		Assert.assertTrue(user.getGroups().size() > 0);
	}
"
net.jforum.services.UserServiceTestCase.addWithGroupExpectsSuccess,UserServiceTestCase.java,"void addWithGroupExpectsSuccess() {
		final User user = new User();
		user.setPassword(""123"");
		user.setUsername(""username1"");
		user.setEmail(""email"");
		user.addGroup(new Group());

		service.add(user);

		verify(repository).add(user);
	}
"
net.jforum.services.AvatarServiceTestCase.addNullExpectException,AvatarServiceTestCase.java,"void addNullExpectException() {
		service.add(null, null);
	}
"
net.jforum.services.AvatarServiceTestCase.addWithIdExpectException,AvatarServiceTestCase.java,"void addWithIdExpectException() {
		Avatar avatar = new Avatar();
		avatar.setId(1);

		when(config.getBoolean(ConfigKeys.AVATAR_ALLOW_GALLERY)).thenReturn(true);
		when(config.getBoolean(ConfigKeys.AVATAR_ALLOW_UPLOAD)).thenReturn(true);

		service.add(avatar);
	}
"
net.jforum.services.AvatarServiceTestCase.updateWithoutIdExpectException,AvatarServiceTestCase.java,"void updateWithoutIdExpectException() {
		Avatar avatar = new Avatar();
		avatar.setId(0);

		when(config.getBoolean(ConfigKeys.AVATAR_ALLOW_GALLERY)).thenReturn(true);
		when(config.getBoolean(ConfigKeys.AVATAR_ALLOW_UPLOAD)).thenReturn(true);

		service.update(avatar, null);
	}
"
net.jforum.services.AvatarServiceTestCase.addExpectSuccess,AvatarServiceTestCase.java,"void addExpectSuccess() throws IOException {
		final Avatar avatar = new Avatar();
		File tempFile = File.createTempFile(""jforum"", ""tests"");
		tempFile.deleteOnExit();
		final String tempDir = tempFile.getParent();
		File file = new File(this.getClass().getResource(""/smilies/smilie.gif"").getFile());
		TestCaseUtils.copyFile(file, tempFile);
		UploadedFile uploadedFile = new DefaultUploadedFile(new FileInputStream(file), file.getAbsolutePath(), """");
		
		when(config.getApplicationPath()).thenReturn(tempDir);
		when(config.getValue(ConfigKeys.AVATAR_GALLERY_DIR)).thenReturn("""");
		when(config.getBoolean(ConfigKeys.AVATAR_ALLOW_GALLERY)).thenReturn(true);
		when(config.getBoolean(ConfigKeys.AVATAR_ALLOW_UPLOAD)).thenReturn(true);
		when(config.getLong(ConfigKeys.AVATAR_MAX_SIZE)).thenReturn(10000l);
		when(config.getInt(ConfigKeys.AVATAR_MAX_WIDTH)).thenReturn(800);
		when(config.getInt(ConfigKeys.AVATAR_MAX_HEIGHT)).thenReturn(600);
		when(config.getInt(ConfigKeys.AVATAR_MIN_WIDTH)).thenReturn(1);
		when(config.getInt(ConfigKeys.AVATAR_MIN_HEIGHT)).thenReturn(1);
		
		service.add(avatar, uploadedFile);
		
		verify(repository).add(avatar);
		Assert.assertNotNull(avatar.getFileName());
		File expectedFile = new File(String.format(""%s/%s/%s"", tempDir, """", avatar.getFileName()));
		expectedFile.deleteOnExit();
		Assert.assertTrue(expectedFile.exists());
	}
"
net.jforum.services.AvatarServiceTestCase.updateNullExpectException,AvatarServiceTestCase.java,"void updateNullExpectException() {
		service.update(null, null);
	}
"
net.jforum.services.AvatarServiceTestCase.updateImageShouldDeleteOldImage,AvatarServiceTestCase.java,"void updateImageShouldDeleteOldImage() throws IOException {
		final File currentFile = File.createTempFile(""avatar"", ""tests"");
		currentFile.deleteOnExit();

		final Avatar currentAvatar = new Avatar();
		currentAvatar.setId(1);
		currentAvatar.setAvatarType(AvatarType.AVATAR_GALLERY);
		currentAvatar.setFileName(currentFile.getName());
		
		when(repository.get(1)).thenReturn(currentAvatar);
		when(config.getApplicationPath()).thenReturn(currentFile.getParent());
		when(config.getValue(ConfigKeys.AVATAR_GALLERY_DIR)).thenReturn("""");
		when(config.getBoolean(ConfigKeys.AVATAR_ALLOW_GALLERY)).thenReturn(true);
		when(config.getBoolean(ConfigKeys.AVATAR_ALLOW_UPLOAD)).thenReturn(true);
		when(config.getLong(ConfigKeys.AVATAR_MAX_SIZE)).thenReturn(10000l);
		when(config.getInt(ConfigKeys.AVATAR_MAX_WIDTH)).thenReturn(800);
		when(config.getInt(ConfigKeys.AVATAR_MAX_HEIGHT)).thenReturn(600);
		when(config.getInt(ConfigKeys.AVATAR_MIN_WIDTH)).thenReturn(1);
		when(config.getInt(ConfigKeys.AVATAR_MIN_HEIGHT)).thenReturn(1);
			
		File originalFile = new File(this.getClass().getResource(""/smilies/smilie.gif"").getFile());
		File newFile = File.createTempFile(""jforum"", ""tests"");
		TestCaseUtils.copyFile(originalFile, newFile);

		UploadedFile uploadedFile = new DefaultUploadedFile(new FileInputStream(newFile), newFile.getAbsolutePath(), """");
		String oldDiskName = currentAvatar.getFileName();
		Avatar newAvatar = new Avatar();
		newAvatar.setId(1);
		newAvatar.setAvatarType(AvatarType.AVATAR_GALLERY);
		service.update(newAvatar, uploadedFile);
		
		verify(repository).update(currentAvatar);
		Assert.assertEquals(newAvatar.getAvatarType(), currentAvatar.getAvatarType());
		Assert.assertFalse(currentFile.exists());
		Assert.assertFalse(currentAvatar.getFileName().equals(oldDiskName));

		new File(String.format(""%s/%s"", currentFile.getParent(), currentAvatar.getFileName())).delete();
	}
"
net.jforum.services.AvatarServiceTestCase.deleteUsingNullShouldIgnore,AvatarServiceTestCase.java,"void deleteUsingNullShouldIgnore() {
		
			
		Avatar avatar = null;
		service.delete(avatar);
	}
"
net.jforum.services.AvatarServiceTestCase.deleteExpectSuccess,AvatarServiceTestCase.java,"void deleteExpectSuccess() {
		
		Avatar s1 = new Avatar();
		s1.setId(1);
		s1.setFileName(Long.toString(System.currentTimeMillis()));
		Avatar s2 = new Avatar();
		s2.setId(2);
		s2.setFileName(Long.toString(System.currentTimeMillis()));
		String applicationPath = new File(this.getClass().getResource("""").getFile()).getParent();
		when(config.getApplicationPath()).thenReturn(applicationPath);
		when(config.getValue(ConfigKeys.AVATAR_GALLERY_DIR)).thenReturn("""");
		when(repository.get(1)).thenReturn(s1);
		when(repository.get(2)).thenReturn(s2);

		service.delete(1, 2);
		
		verify(repository).remove(s1);
		verify(repository).remove(s2);
	}
"
net.jforum.services.MostUsersEverOnlineServiceTestCase.currenTotalIsBiggerExpectsNewTotalAndNewTime,MostUsersEverOnlineServiceTestCase.java,"void currenTotalIsBiggerExpectsNewTotalAndNewTime() {
		final long time = System.currentTimeMillis();
		Config c = new Config(); c.setName(ConfigKeys.MOST_USERS_EVER_ONLINE); c.setValue(Long.toString(time - 100) + ""/10"");
		when(repository.getByName(ConfigKeys.MOST_USERS_EVER_ONLINE)).thenReturn(c);

		MostUsersEverOnline most = service.getMostRecentData(20);

		verify(repository).update(notNull(Config.class));
		assertEquals(20, most.getTotal());
		assertTrue(most.getDate().getTime() >= time);
	}
"
net.jforum.services.MostUsersEverOnlineServiceTestCase.currentTotalIsSmallerExpectsStoredTotal,MostUsersEverOnlineServiceTestCase.java,"void currentTotalIsSmallerExpectsStoredTotal() {
		final long time = System.currentTimeMillis();
		Config c = new Config(); c.setValue(Long.toString(time) + ""/10"");
		when(repository.getByName(ConfigKeys.MOST_USERS_EVER_ONLINE)).thenReturn(c);

		MostUsersEverOnline most = service.getMostRecentData(5);

		assertEquals(time, most.getDate().getTime());
		assertEquals(10, most.getTotal());
	}
"
net.jforum.services.MostUsersEverOnlineServiceTestCase.expectsEmptyShouldCreateNew,MostUsersEverOnlineServiceTestCase.java,"void expectsEmptyShouldCreateNew() {
		when(repository.getByName(ConfigKeys.MOST_USERS_EVER_ONLINE)).thenReturn(null);

		MostUsersEverOnline most = service.getMostRecentData(2);

		verify(repository).add(notNull(Config.class));
		assertEquals(2, most.getTotal());
		assertTrue(System.currentTimeMillis() >= most.getDate().getTime());
	}
"
net.jforum.services.SmilieServiceTestCase.addNullExpectException,SmilieServiceTestCase.java,"void addNullExpectException() {
		service.add(null, null);
	}
"
net.jforum.services.SmilieServiceTestCase.addUsingEmptyCodeExpectException,SmilieServiceTestCase.java,"void addUsingEmptyCodeExpectException() {
		Smilie s = new Smilie();
		s.setCode("""");
		service.add(s, null);
	}
"
net.jforum.services.SmilieServiceTestCase.addUsingNullCodeExpectException,SmilieServiceTestCase.java,"void addUsingNullCodeExpectException() {
		Smilie s = new Smilie();
		s.setCode(null);
		service.add(s, null);
	}
"
net.jforum.services.SmilieServiceTestCase.addUsingIdBiggerThanZeroExpectException,SmilieServiceTestCase.java,"void addUsingIdBiggerThanZeroExpectException() {
		Smilie s = new Smilie();
		s.setCode(""x"");
		s.setId(1);
		service.add(s, null);
	}
"
net.jforum.services.SmilieServiceTestCase.addUsingNullImageExpectsException,SmilieServiceTestCase.java,"void addUsingNullImageExpectsException() {
		Smilie s = new Smilie();
		s.setCode("":)"");
		service.add(s, null);
	}
"
net.jforum.services.SmilieServiceTestCase.addExpectSuccess,SmilieServiceTestCase.java,"void addExpectSuccess() throws IOException {
		final Smilie smilie = new Smilie();
		smilie.setCode("":)"");
		File tempFile = File.createTempFile(""jforum"", ""tests"");
		tempFile.deleteOnExit();
		final String tempDir = tempFile.getParent();

		File file = new File(this.getClass().getResource(""/smilies/smilie.gif"").getFile());
		TestCaseUtils.copyFile(file, tempFile);

		UploadedFile uploadedFile = new DefaultUploadedFile(
				new FileInputStream(file), file.getAbsolutePath(), """");

		when(config.getApplicationPath()).thenReturn(tempDir);
		when(config.getValue(ConfigKeys.SMILIE_IMAGE_DIR)).thenReturn("""");


		service.add(smilie, uploadedFile);

		verify(repository).add(smilie);
		Assert.assertNotNull(smilie.getDiskName());

		File expectedFile = new File(String.format(""%s/%s/%s"", tempDir, """",
				smilie.getDiskName()));
		expectedFile.deleteOnExit();

		Assert.assertTrue(expectedFile.exists());
	}
"
net.jforum.services.SmilieServiceTestCase.updateNullExpectException,SmilieServiceTestCase.java,"void updateNullExpectException() {
		service.update(null, null);
	}
"
net.jforum.services.SmilieServiceTestCase.updateUsingEmptyCodeExpectException,SmilieServiceTestCase.java,"void updateUsingEmptyCodeExpectException() {
		Smilie s = new Smilie();
		s.setCode("""");
		s.setId(1);
		service.update(s, null);
	}
"
net.jforum.services.SmilieServiceTestCase.updateUsingNullCodeExpectException,SmilieServiceTestCase.java,"void updateUsingNullCodeExpectException() {
		Smilie s = new Smilie();
		s.setCode(null);
		s.setId(1);
		service.update(s, null);
	}
"
net.jforum.services.SmilieServiceTestCase.updateUsingIdZeroExpectException,SmilieServiceTestCase.java,"void updateUsingIdZeroExpectException() {
		Smilie s = new Smilie();
		s.setCode(""x"");
		s.setId(0);
		service.update(s, null);
	}
"
net.jforum.services.SmilieServiceTestCase.updateAllPropertiesShouldDeleteOldImage,SmilieServiceTestCase.java,"void updateAllPropertiesShouldDeleteOldImage() throws IOException {
		final File currentFile = File.createTempFile(""jforum"", ""tests"");
		currentFile.deleteOnExit();
		final Smilie currentSmilie = new Smilie();
		currentSmilie.setId(1);
		currentSmilie.setCode("":)"");
		currentSmilie.setDiskName(currentFile.getName());

		when(repository.get(1)).thenReturn(currentSmilie);
		when(config.getApplicationPath()).thenReturn(currentFile.getParent());
		when(config.getValue(ConfigKeys.SMILIE_IMAGE_DIR)).thenReturn("""");

		File newFile = File.createTempFile(""jforum"", ""tests"");
		newFile.deleteOnExit();

		UploadedFile uploadedFile = new DefaultUploadedFile(
				new FileInputStream(newFile), newFile.getAbsolutePath(), """");

		String oldDiskName = currentSmilie.getDiskName();

		Smilie newSmilie = new Smilie();
		newSmilie.setId(1);
		newSmilie.setCode("":D"");
		service.update(newSmilie, uploadedFile);

		verify(repository).update(currentSmilie);
		Assert.assertEquals(newSmilie.getCode(), currentSmilie.getCode());
		Assert.assertFalse(currentFile.exists());
		Assert.assertFalse(currentSmilie.getDiskName().equals(oldDiskName));

		new File(String.format(""%s/%s"", currentFile.getParent(),
				currentSmilie.getDiskName())).delete();
	}
"
net.jforum.services.SmilieServiceTestCase.updateOnlyCodeExpectsSuccess,SmilieServiceTestCase.java,"void updateOnlyCodeExpectsSuccess() {
		final Smilie currentSmilie = new Smilie();
		currentSmilie.setCode("":)"");
		currentSmilie.setId(1);
		when(repository.get(1)).thenReturn(currentSmilie);
		Smilie newSmilie = new Smilie();
		newSmilie.setId(1);
		newSmilie.setCode("":D"");
		service.update(newSmilie, null);

		Assert.assertEquals(newSmilie.getCode(), currentSmilie.getCode());
		
		verify(repository).update(currentSmilie);
	}
"
net.jforum.services.SmilieServiceTestCase.deleteUsingNullShouldIgnore,SmilieServiceTestCase.java,"void deleteUsingNullShouldIgnore() {
		service.delete(null);
		
		verifyZeroInteractions(repository);
	}
"
net.jforum.services.SmilieServiceTestCase.deleteExpectSuccess,SmilieServiceTestCase.java,"void deleteExpectSuccess() {
		Smilie s1 = new Smilie();
		s1.setId(1);
		s1.setDiskName(Long.toString(System.currentTimeMillis()));
		Smilie s2 = new Smilie();
		s2.setId(2);
		s2.setDiskName(Long.toString(System.currentTimeMillis()));
		String applicationPath = new File(this.getClass()
				.getResource("""").getFile()).getParent();
		when(config.getApplicationPath()).thenReturn(applicationPath);
		when(config.getValue(ConfigKeys.SMILIE_IMAGE_DIR)).thenReturn("""");
		when(repository.get(1)).thenReturn(s1);
		when(repository.get(2)).thenReturn(s2);

		service.delete(1, 2);

		verify(repository).remove(s1);
		verify(repository).remove(s2);
	}
"
net.jforum.services.PostServiceTestCase.newOptionsExpectChanges,PostServiceTestCase.java,"void newOptionsExpectChanges() {
		final Post current = this.createCurrentPost();
		current.getTopic().getFirstPost().setId(1);
		current.setBbCodeEnabled(false);
		current.setHtmlEnabled(false);
		current.setSmiliesEnabled(false);
		current.setSignatureEnabled(false);

		when(postRepository.get(1)).thenReturn(current);

		Post newPost = new Post();
		newPost.setId(1);
		newPost.setText(""new text"");
		newPost.setSubject(""new subject"");
		newPost.setBbCodeEnabled(true);
		newPost.setHtmlEnabled(true);
		newPost.setSmiliesEnabled(true);
		newPost.setSignatureEnabled(true);
		newPost.setTopic(new Topic());

		service.update(newPost, false, null, null, moderationLog);

		verify(postRepository).update(current);
		verify(topicRepository).update(current.getTopic());
		assertEquals(true, current.isBbCodeEnabled());
		assertEquals(true, current.isHtmlEnabled());
		assertEquals(true, current.isSmiliesEnabled());
		assertEquals(true, current.isSignatureEnabled());
	}
"
net.jforum.services.PostServiceTestCase.changePoll,PostServiceTestCase.java,"void changePoll() {
		final Post currentPost = this.createCurrentPost();
		Poll poll = new Poll();
		poll.setId(1);
		currentPost.getTopic().setPoll(poll); 
		currentPost.getTopic().getFirstPost().setId(1);

		PollOption pollOption = new PollOption(); pollOption.setText(""A"");
		final List<PollOption> pollOptions = Arrays.asList(pollOption);

		when(postRepository.get(1)).thenReturn(currentPost);

		Post newPost = new Post();
		newPost.setId(1);
		newPost.setText(""new text"");
		newPost.setSubject(""new subject"");

		Poll newPoll = new Poll();
		newPoll.setLabel(""new label"");
		newPoll.setLength(10);
		newPost.setTopic(new Topic());
		newPost.getTopic().setPoll(newPoll);

		service.update(newPost, false, pollOptions, null, moderationLog);

		verify(pollService).processChanges(currentPost.getTopic().getPoll(), pollOptions);
		verify(postRepository).update(currentPost);
		verify(topicRepository).update(currentPost.getTopic());
		assertEquals(10, currentPost.getTopic().getPoll().getLength());
		assertEquals(""new label"", currentPost.getTopic().getPoll().getLabel());
	}
"
net.jforum.services.PostServiceTestCase.changeFirstPost,PostServiceTestCase.java,"void changeFirstPost() {
		final Post current = this.createCurrentPost();
		current.getTopic().setType(Topic.TYPE_NORMAL);
		current.getTopic().getFirstPost().setId(1);

		when(postRepository.get(1)).thenReturn(current);

		Post newPost = new Post(); newPost.setId(1); newPost.setText(""new text""); newPost.setSubject(""new subject"");
		newPost.setTopic(new Topic()); newPost.getTopic().setType(Topic.TYPE_STICKY);
		service.update(newPost, true, null, null, moderationLog);

		verify(postRepository).update(current);
		verify(topicRepository).update(current.getTopic());
		assertEquals(newPost.getSubject(), current.getTopic().getSubject());
		assertEquals(Topic.TYPE_STICKY, current.getTopic().getType());
	}
"
net.jforum.services.PostServiceTestCase.changeFirstPostCannotChangeTopicType,PostServiceTestCase.java,"void changeFirstPostCannotChangeTopicType() {
		final Post current = this.createCurrentPost();
		current.getTopic().setType(Topic.TYPE_NORMAL);
		current.getTopic().getFirstPost().setId(1);

		when(postRepository.get(1)).thenReturn(current);

		Post newPost = new Post(); newPost.setId(1); newPost.setText(""new text""); newPost.setSubject(""new subject"");
		newPost.setTopic(new Topic()); newPost.getTopic().setType(Topic.TYPE_STICKY);
		service.update(newPost, false, null, null, moderationLog);

		verify(postRepository).update(current);
		verify(topicRepository).update(current.getTopic());
		assertEquals(newPost.getSubject(), current.getTopic().getSubject());
		assertEquals(Topic.TYPE_NORMAL, current.getTopic().getType());
	}
"
net.jforum.services.PostServiceTestCase.changeUpdatableProperties,PostServiceTestCase.java,"void changeUpdatableProperties() {
		final Post current = this.createCurrentPost();

		when(postRepository.get(1)).thenReturn(current);

		Post newPost = new Post(); newPost.setId(1); newPost.setText(""new text""); newPost.setSubject(""new subject"");
		service.update(newPost, false, null, null, moderationLog);

		verify(postRepository).update(current);
		verify(topicRepository).update(current.getTopic());
		assertEquals(newPost.getSubject(), current.getSubject());
		assertEquals(newPost.getText(), current.getText());
		assertEquals(1, current.getEditCount());
		assertNotNull(current.getEditDate());
	}
"
net.jforum.services.PostServiceTestCase.withoutIdExpectsException,PostServiceTestCase.java,"void withoutIdExpectsException() {
		Post p = new Post(); p.setId(0); p.setSubject(""aa""); p.setText(""bb"");
		service.update(p, false, null, null, moderationLog);
	}
"
net.jforum.services.PostServiceTestCase.emptyTextExpectsException,PostServiceTestCase.java,"void emptyTextExpectsException() {
		Post p = new Post(); p.setId(1); p.setSubject(""aa""); p.setText("""");
		service.update(p, false, null, null, moderationLog);
	}
"
net.jforum.services.PostServiceTestCase.nullTextExpectsException,PostServiceTestCase.java,"void nullTextExpectsException() {
		Post p = new Post(); p.setId(1); p.setSubject(""bb""); p.setText(null);
		service.update(p, false, null, null, moderationLog);
	}
"
net.jforum.services.PostServiceTestCase.emptySubjectExpectsException,PostServiceTestCase.java,"void emptySubjectExpectsException() {
		Post p = new Post(); p.setId(1); p.setSubject(""""); p.setText(""xx"");
		service.update(p, false, null, null, moderationLog);
	}
"
net.jforum.services.PostServiceTestCase.nullSubjectExpectsException,PostServiceTestCase.java,"void nullSubjectExpectsException() {
		Post p = new Post(); p.setId(1); p.setSubject(null); p.setText(""ee"");
		service.update(p, false, null, null, moderationLog);
	}
"
net.jforum.services.PostServiceTestCase.nullPostExpectException,PostServiceTestCase.java,"void nullPostExpectException() {
		service.update(null, false, null, null, moderationLog);
	}
"
net.jforum.services.PostServiceTestCase.createCurrentPost,PostServiceTestCase.java,"Post createCurrentPost() {
		Post post = new Post();
		post.setId(1);

		Topic topic = new Topic();
		topic.setFirstPost(new Post());
		post.setTopic(topic);

		return post;
	}
"
net.jforum.services.GroupServiceTestCase.savePermissions,GroupServiceTestCase.java,"void savePermissions() {
		final Group group = new Group();

		when(userSession.getRoleManager()).thenReturn(roleManager);
		when(roleManager.isAdministrator()).thenReturn(false);
		when(repository.get(1)).thenReturn(new Group());

		//TODO: service.savePermissions(1, new PermissionOptions());

		verify(userRepository).changeAllowAvatarState(false, group);
		verify(sessionManager).computeAllOnlineModerators();
		verify(repository).update(group);
	}
"
net.jforum.services.GroupServiceTestCase.delete,GroupServiceTestCase.java,"void delete() {
		when(repository.get(1)).thenReturn(new Group());
		when(repository.get(2)).thenReturn(new Group());

		service.delete(1, 2);

		verify(repository, times(2)).remove(notNull(Group.class));
	}
"
net.jforum.services.GroupServiceTestCase.updateUsingNullGroupExpectsNPE,GroupServiceTestCase.java,"void updateUsingNullGroupExpectsNPE() {
		service.update(null);
	}
"
net.jforum.services.GroupServiceTestCase.updateUsingNullNameExpectsValidationException,GroupServiceTestCase.java,"void updateUsingNullNameExpectsValidationException() {
		Group g = new Group();
		g.setId(1);
		g.setName(null);

		service.update(g);
	}
"
net.jforum.services.GroupServiceTestCase.updateUsingEmptyNameExpectsValidationException,GroupServiceTestCase.java,"void updateUsingEmptyNameExpectsValidationException() {
		Group g = new Group();
		g.setId(1);
		g.setName("""");

		service.update(g);
	}
"
net.jforum.services.GroupServiceTestCase.updateUsingIdZeroExpectsValidationException,GroupServiceTestCase.java,"void updateUsingIdZeroExpectsValidationException() {
		Group g = new Group();
		g.setName(""g1"");
		g.setId(0);

		service.update(g);
	}
"
net.jforum.services.GroupServiceTestCase.updateExpectsSuccess,GroupServiceTestCase.java,"void updateExpectsSuccess() {
		Group g = new Group();
		g.setName(""g1"");
		g.setId(2);

		service.update(g);

		verify(repository).update(notNull(Group.class));
	}
"
net.jforum.services.GroupServiceTestCase.addExpectSuccess,GroupServiceTestCase.java,"void addExpectSuccess() {
		Group g = new Group();
		g.setName(""g1"");

		service.add(g);

		verify(repository).add(notNull(Group.class));
	}
"
net.jforum.services.GroupServiceTestCase.addUsingNullGroupExpectsNPE,GroupServiceTestCase.java,"void addUsingNullGroupExpectsNPE() {
		service.add(null);
	}
"
net.jforum.services.GroupServiceTestCase.addUsingidBiggerThanZeroExpectsValidationException,GroupServiceTestCase.java,"void addUsingidBiggerThanZeroExpectsValidationException() {
		Group g = new Group();
		g.setName(""g1"");
		g.setId(1);

		service.add(g);
	}
"
net.jforum.services.GroupServiceTestCase.addUsingEmtpyNameExpectsValidationException,GroupServiceTestCase.java,"void addUsingEmtpyNameExpectsValidationException() {
		Group g = new Group();
		g.setName("""");

		service.add(g);
	}
"
net.jforum.services.GroupServiceTestCase.addUsingNullNameExpectsValidationException,GroupServiceTestCase.java,"void addUsingNullNameExpectsValidationException() {
		Group g = new Group();
		g.setName(null);

		service.add(g);
	}
"
net.jforum.services.ForumServiceTestCase.deleteUsingNullIdsShouldIgnore,ForumServiceTestCase.java,"void deleteUsingNullIdsShouldIgnore() {
		service.delete(null);

		verifyZeroInteractions(repository);
	}
"
net.jforum.services.ForumServiceTestCase.delete,ForumServiceTestCase.java,"void delete() {
		when(repository.get(1)).thenReturn(new Forum());
		when(repository.get(2)).thenReturn(new Forum());

		service.delete(1, 2);

		verify(repository, times(2)).remove(notNull(Forum.class));
	}
"
net.jforum.services.ForumServiceTestCase.updateUsingNullForumExpectsNPE,ForumServiceTestCase.java,"void updateUsingNullForumExpectsNPE() {
		service.update(null);
	}
"
net.jforum.services.ForumServiceTestCase.updateUsingForumIdZeroExpectsValidationException,ForumServiceTestCase.java,"void updateUsingForumIdZeroExpectsValidationException() {
		Forum f = new Forum();
		f.setName(""f1"");
		Category category = new Category();
		category.setId(1);
		f.setCategory(category);
		f.setId(0);

		service.update(f);
	}
"
net.jforum.services.ForumServiceTestCase.updateUsingCategoryNullExpectsValidationException,ForumServiceTestCase.java,"void updateUsingCategoryNullExpectsValidationException() {
		Forum f = new Forum();
		f.setName(""f1"");
		f.setId(1);
		f.setCategory(null);

		service.update(f);
	}
"
net.jforum.services.ForumServiceTestCase.updateUsingCategoryWithIdZeroExpectsValidationException,ForumServiceTestCase.java,"void updateUsingCategoryWithIdZeroExpectsValidationException() {
		Forum f = new Forum();
		f.setName(""f1"");
		f.setId(1);
		Category category = new Category();
		category.setId(0);
		f.setCategory(category);

		service.update(f);
	}
"
net.jforum.services.ForumServiceTestCase.updateUsingEmptyNameExpectsValidationException,ForumServiceTestCase.java,"void updateUsingEmptyNameExpectsValidationException() {
		Forum f = new Forum();
		f.setName("""");
		f.setId(1);
		Category category = new Category();
		category.setId(1);
		f.setCategory(category);

		service.update(f);
	}
"
net.jforum.services.ForumServiceTestCase.updateUsingNullNameExpectsValidationException,ForumServiceTestCase.java,"void updateUsingNullNameExpectsValidationException() {
		Forum f = new Forum();
		f.setName(null);
		f.setId(1);
		Category category = new Category();
		category.setId(1);
		f.setCategory(category);

		service.update(f);
	}
"
net.jforum.services.ForumServiceTestCase.addExpectSuccess,ForumServiceTestCase.java,"void addExpectSuccess() {
		final Forum f = new Forum();
		f.setName(""f1"");
		Category category = new Category();
		category.setId(1);
		f.setCategory(category);

		service.add(f);

		verify(repository).add(f);
	}
"
net.jforum.services.ForumServiceTestCase.addUsingForumIdBiggerThanZeroExpectValidationException,ForumServiceTestCase.java,"void addUsingForumIdBiggerThanZeroExpectValidationException() {
		Forum f = new Forum();
		Category category = new Category();
		category.setId(1);
		f.setCategory(category);
		f.setName(""f1"");
		f.setId(1);

		service.add(f);
	}
"
net.jforum.services.ForumServiceTestCase.addNullForumExpectNPE,ForumServiceTestCase.java,"void addNullForumExpectNPE() {
		service.add(null);
	}
"
net.jforum.services.ForumServiceTestCase.addForumWithoutNameExpectValidationException,ForumServiceTestCase.java,"void addForumWithoutNameExpectValidationException() {
		Forum f = new Forum();
		f.setName(null);
		Category category = new Category();
		category.setId(1);
		f.setCategory(category);
		service.add(f);
	}
"
net.jforum.services.ForumServiceTestCase.addForumWithEmptyNameExpectValidationException,ForumServiceTestCase.java,"void addForumWithEmptyNameExpectValidationException() {
		Forum f = new Forum();
		f.setName("""");
		Category category = new Category();
		category.setId(1);
		f.setCategory(category);
		service.add(f);
	}
"
net.jforum.services.ForumServiceTestCase.addForumWithNullCategoryExpectValidationException,ForumServiceTestCase.java,"void addForumWithNullCategoryExpectValidationException() {
		Forum f = new Forum();
		f.setName(""f1"");
		f.setCategory(null);
		service.add(f);
	}
"
net.jforum.services.ForumServiceTestCase.addForumUsingCategoryWithoutIdExpectValidationException,ForumServiceTestCase.java,"void addForumUsingCategoryWithoutIdExpectValidationException() {
		Forum f = new Forum();
		f.setName(""f1"");
		Category category = new Category();
		category.setId(0);
		f.setCategory(category);
		service.add(f);
	}
"
net.jforum.services.ForumServiceTestCase.upCategoryOrderExpectToBeInFirstPosition,ForumServiceTestCase.java,"void upCategoryOrderExpectToBeInFirstPosition() {
		final Forum forumToChange = newForumWithOrder(1, 2, newForumWithOrder(2, 1), newForumWithOrder(1, 2));
		when(repository.get(1)).thenReturn(forumToChange);

		service.upForumOrder(1);

		verify(repository, times(2)).update(notNull(Forum.class));
		Assert.assertEquals(1, forumToChange.getDisplayOrder());
	}
"
net.jforum.services.ForumServiceTestCase.downCategoryOrderExpectToBeInLastPosition,ForumServiceTestCase.java,"void downCategoryOrderExpectToBeInLastPosition() {
		final Forum forumToChange = newForumWithOrder(1, 1, newForumWithOrder(1, 1), newForumWithOrder(2, 2));
		when(repository.get(1)).thenReturn(forumToChange);

		service.downForumOrder(1);

		verify(repository, times(2)).update(notNull(Forum.class));
		Assert.assertEquals(2, forumToChange.getDisplayOrder());
	}
"
net.jforum.services.ForumServiceTestCase.upCategoryOrderCategoryAlreadyFistShouldIgnore,ForumServiceTestCase.java,"void upCategoryOrderCategoryAlreadyFistShouldIgnore() {
		final Forum forumToChange = newForumWithOrder(1, 1, newForumWithOrder(1, 1), newForumWithOrder(2, 2));
		when(repository.get(1)).thenReturn(forumToChange);

		service.upForumOrder(1);

		verify(repository, never()).update(notNull(Forum.class));
	}
"
net.jforum.services.ForumServiceTestCase.downCategoryOrderCategoryAlredyLastShouldIgnore,ForumServiceTestCase.java,"void downCategoryOrderCategoryAlredyLastShouldIgnore() {
		final Forum categoryToChange = newForumWithOrder(2, 2, newForumWithOrder(1, 1), newForumWithOrder(2, 2));
		when(repository.get(2)).thenReturn(categoryToChange);

		service.downForumOrder(2);

		verify(repository, never()).update(notNull(Forum.class));
	}
"
net.jforum.services.ForumServiceTestCase.newForumWithOrder,ForumServiceTestCase.java,"Forum newForumWithOrder(int forumId, int order, final Forum... categoryForums) {
		Forum f = new Forum();

		f.setId(forumId);
		f.setDisplayOrder(order);
		Category category = mock(Category.class);
		when(category.getForums()).thenReturn(Arrays.asList(categoryForums));

		f.setCategory(category);

		return f;
	}
"
net.jforum.bbcode.AutoEmail_TestCase.usingValidEmailAdddressShouldFormat,AutoEmail_TestCase.java,"void usingValidEmailAdddressShouldFormat() {
		BBCode bb = getBBCode();
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""send to %s now"", html(bb, ""email"", ""address.domain"")),
			formatter.format(""send to email@address.domain now"", defaultOptions()));
	}
"
net.jforum.bbcode.AutoEmail_TestCase.usingValidEmailAndNewLineBeforeAddressShouldFormat,AutoEmail_TestCase.java,"void usingValidEmailAndNewLineBeforeAddressShouldFormat() {
		BBCode bb = getBBCode();
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""send to\n%s now"", html(bb, ""email"", ""address.domain"")),
			formatter.format(""send to\nemail@address.domain now"", defaultOptions()));
	}
"
net.jforum.bbcode.AutoEmail_TestCase.emailWithoutDomainShouldIgnore,AutoEmail_TestCase.java,"void emailWithoutDomainShouldIgnore() {
		BBCode bb = getBBCode();
		formatter.addBb(bb);
		Assert.assertEquals(""send to email@address now"",
			formatter.format(""send to email@address now"", defaultOptions()));
	}
"
net.jforum.bbcode.AutoEmail_TestCase.emailInUpperCaseShouldIgnore,AutoEmail_TestCase.java,"void emailInUpperCaseShouldIgnore() {
		BBCode bb = getBBCode();
		formatter.addBb(bb);
		Assert.assertEquals(""send to EMAIL@address now"",
			formatter.format(""send to EMAIL@address now"", defaultOptions()));
	}
"
net.jforum.bbcode.AutoEmail_TestCase.withSpecialCharsShouldFormat,AutoEmail_TestCase.java,"void withSpecialCharsShouldFormat() {
		BBCode bb = getBBCode();
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""send to %s now"", html(bb, ""e.ma-il_and-3949223"", ""address234.domain789"")),
			formatter.format(""send to e.ma-il_and-3949223@address234.domain789 now"", defaultOptions()));
	}
"
net.jforum.bbcode.AutoEmail_TestCase.getBBCode,AutoEmail_TestCase.java,"BBCode getBBCode() {
		BBCode bb = bbCodes.get(""auto-email"");

		Assert.assertTrue(bb.alwaysProcess());

		return bb;
	}
"
net.jforum.bbcode.AutoEmail_TestCase.html,AutoEmail_TestCase.java,"String html(BBCode bb, String name, String domain) {
		return StringUtils.replace(bb.getReplace(), ""$1"", """")
			.replace(""$2"", name).replace(""$3"", domain);
	}
"
net.jforum.bbcode.U_TestCase.singleLine,U_TestCase.java,"void singleLine() {
		formatter.addBb(bbCodes.get(""u""));
		Assert.assertEquals(""some <u>underline</u> text"", formatter.format(""some [u]underline[/u] text"", defaultOptions()));
	}
"
net.jforum.bbcode.U_TestCase.incompleteTagShouldDoNothing,U_TestCase.java,"void incompleteTagShouldDoNothing() {
		formatter.addBb(bbCodes.get(""u""));
		Assert.assertEquals(""some [u]underline text"", formatter.format(""some [u]underline text"", defaultOptions()));
	}
"
net.jforum.bbcode.U_TestCase.twoOpenZeroClosedShouldDoNothing,U_TestCase.java,"void twoOpenZeroClosedShouldDoNothing() {
		formatter.addBb(bbCodes.get(""u""));
		Assert.assertEquals(""some [u]underline[u] text"", formatter.format(""some [u]underline[u] text"", defaultOptions()));
	}
"
net.jforum.bbcode.U_TestCase.twoOpenOneClosedExpectOneFormatted,U_TestCase.java,"void twoOpenOneClosedExpectOneFormatted() {
		formatter.addBb(bbCodes.get(""u""));
		Assert.assertEquals(""some <u>underline[u] text</u>"", formatter.format(""some [u]underline[u] text[/u]"", defaultOptions()));
	}
"
net.jforum.bbcode.U_TestCase.multipleLines,U_TestCase.java,"void multipleLines() {
		formatter.addBb(bbCodes.get(""u""));
		Assert.assertEquals(""some <u>\nunderline\n\n</u>\n text"", formatter.format(""some [u]\nunderline\n\n[/u]\n text"", defaultOptions()));
	}
"
net.jforum.bbcode.U_TestCase.mixedCase,U_TestCase.java,"void mixedCase() {
		formatter.addBb(bbCodes.get(""u""));
		Assert.assertEquals(""some <u>underline</u> text"", formatter.format(""some [U]underline[/u] text"", defaultOptions()));
	}
"
net.jforum.bbcode.TagBaseTest.setup,TagBaseTest.java,"void setup() {
		BBConfigFormatter customFormatter = new BBConfigFormatter() {
			@Override
			public void addBb(BBCode code) {
				bbCodes.put(code.getTagName(), code);
			}
		};

		new BBCodeConfigParser( customFormatter);
	}
"
net.jforum.bbcode.TagBaseTest.addBb,TagBaseTest.java,"void addBb(BBCode code) {
				bbCodes.put(code.getTagName(), code);
			}
"
net.jforum.bbcode.TagBaseTest.defaultOptions,TagBaseTest.java,"PostOptions defaultOptions() {
		return new PostOptions(false, false, true, false, null);
	}
"
net.jforum.bbcode.Google_TestCase.format,Google_TestCase.java,"void format() {
		BBCode bb = bbCodes.get(""google"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""search %s in google"", this.html(bb, ""java"")),
			formatter.format(""search [google]java[/google] in google"", defaultOptions()));
	}
"
net.jforum.bbcode.Google_TestCase.incompleteTagShouldDoNothing,Google_TestCase.java,"void incompleteTagShouldDoNothing() {
		formatter.addBb(bbCodes.get(""google""));
		Assert.assertEquals(""a [google]search"", formatter.format(""a [google]search"", defaultOptions()));
	}
"
net.jforum.bbcode.Google_TestCase.twoOpenOneClosedExpectOneFormatted,Google_TestCase.java,"void twoOpenOneClosedExpectOneFormatted() {
		BBCode bb = bbCodes.get(""google"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""some %s search"", this.html(bb, ""search[google]"")),
			formatter.format(""some [google]search[google][/google] search"", defaultOptions()));
	}
"
net.jforum.bbcode.Google_TestCase.multipleLinesShouldIgnore,Google_TestCase.java,"void multipleLinesShouldIgnore() {
		formatter.addBb(bbCodes.get(""google""));
		Assert.assertEquals(""some [google]\nsearch[/google]"",
			formatter.format(""some [google]\nsearch[/google]"", defaultOptions()));
	}
"
net.jforum.bbcode.Google_TestCase.mixedCase,Google_TestCase.java,"void mixedCase() {
		BBCode bb = bbCodes.get(""google"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""search %s in google"", this.html(bb, ""java"")),
			formatter.format(""search [GoogLE]java[/gooGle] in google"", defaultOptions()));
	}
"
net.jforum.bbcode.Google_TestCase.html,Google_TestCase.java,"String html(BBCode bb, String input) {
		return StringUtils.replace(bb.getReplace(), ""$1"", input);
	}
"
net.jforum.bbcode.IMG_TestCase.singleLine,IMG_TestCase.java,"void singleLine() {
		formatter.addBb(bbCodes.get(""img""));
		Assert.assertEquals(""some <img src=\""image\"" border=\""0\"" /> here"",
			formatter.format(""some [img]image[/img] here"", defaultOptions()));
	}
"
net.jforum.bbcode.IMG_TestCase.incompleteTagShouldDoNothing,IMG_TestCase.java,"void incompleteTagShouldDoNothing() {
		formatter.addBb(bbCodes.get(""img""));
		Assert.assertEquals(""some [img]image here"",
			formatter.format(""some [img]image here"", defaultOptions()));
	}
"
net.jforum.bbcode.IMG_TestCase.twoOpenZeroClosedShouldDoNothing,IMG_TestCase.java,"void twoOpenZeroClosedShouldDoNothing() {
		formatter.addBb(bbCodes.get(""img""));
		Assert.assertEquals(""some [img]image[img] here"",
			formatter.format(""some [img]image[img] here"", defaultOptions()));
	}
"
net.jforum.bbcode.IMG_TestCase.twoOpenOneClosedExpectOneFormatted,IMG_TestCase.java,"void twoOpenOneClosedExpectOneFormatted() {
		formatter.addBb(bbCodes.get(""img""));
		Assert.assertEquals(""some <img src=\""image[img]other\"" border=\""0\"" /> here"",
			formatter.format(""some [img]image[img]other[/img] here"", defaultOptions()));
	}
"
net.jforum.bbcode.IMG_TestCase.multipleLineShouldIgnore,IMG_TestCase.java,"void multipleLineShouldIgnore() {
		formatter.addBb(bbCodes.get(""img""));
		Assert.assertEquals(""some [img]\nimage here[/img]\n\n"",
			formatter.format(""some [img]\nimage here[/img]\n\n"", defaultOptions()));
	}
"
net.jforum.bbcode.IMG_TestCase.mixedCase,IMG_TestCase.java,"void mixedCase() {
		formatter.addBb(bbCodes.get(""img""));
		Assert.assertEquals(""some <img src=\""image\"" border=\""0\"" /> here"",
			formatter.format(""some [img]image[/IMG] here"", defaultOptions()));
	}
"
net.jforum.bbcode.HtmlEntitiesFormatterTestCase.htmlEnabledShouldNotFormat,HtmlEntitiesFormatterTestCase.java,"void htmlEnabledShouldNotFormat() {
		PostOptions options = new PostOptions(true, false, false, false, null);
		String input = ""some <b>content</b>"";
		String expected = input;

		Assert.assertEquals(expected, new HtmlEntitiesFormatter().format(input, options));
	}
"
net.jforum.bbcode.HtmlEntitiesFormatterTestCase.format,HtmlEntitiesFormatterTestCase.java,"void format() {
		PostOptions options = new PostOptions(false, false, false, false, null);
		String input = ""some <b>bold</b> test and < other > stuff"";
		String expected = ""some &lt;b&gt;bold&lt;/b&gt; test and &lt; other &gt; stuff"";

		Assert.assertEquals(expected, new HtmlEntitiesFormatter().format(input, options));
	}
"
net.jforum.bbcode.Size_TestCase.singleLine,Size_TestCase.java,"void singleLine() {
		BBCode bb = bbCodes.get(""size"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""10"", ""sized"")),
			formatter.format(""a [size=10]sized[/size] text"", defaultOptions()));
	}
"
net.jforum.bbcode.Size_TestCase.incompleteTagShouldDoNothing,Size_TestCase.java,"void incompleteTagShouldDoNothing() {
		formatter.addBb(bbCodes.get(""size""));
		Assert.assertEquals(""some [size=10]text"",
			formatter.format(""some [size=10]text"", defaultOptions()));
	}
"
net.jforum.bbcode.Size_TestCase.withoutSizePortionShouldIgnore,Size_TestCase.java,"void withoutSizePortionShouldIgnore() {
		formatter.addBb(bbCodes.get(""size""));
		Assert.assertEquals(""some [size]text[/size]"",
			formatter.format(""some [size]text[/size]"", defaultOptions()));
	}
"
net.jforum.bbcode.Size_TestCase.twoOpenOneClosedExpectOneFormatted,Size_TestCase.java,"void twoOpenOneClosedExpectOneFormatted() {
		BBCode bb = bbCodes.get(""size"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""some %s"", this.html(bb, ""10"", ""text[size=12]"")),
			formatter.format(""some [size=10]text[size=12][/size]"", defaultOptions()));
	}
"
net.jforum.bbcode.Size_TestCase.multipleLines,Size_TestCase.java,"void multipleLines() {
		BBCode bb = bbCodes.get(""size"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""some %s"", this.html(bb, ""10"", ""\ntext\n\nhere"")),
			formatter.format(""some [size=10]\ntext\n\nhere[/size]"", defaultOptions()));
	}
"
net.jforum.bbcode.Size_TestCase.mixedCase,Size_TestCase.java,"void mixedCase() {
		BBCode bb = bbCodes.get(""size"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""some %s here"", this.html(bb, ""10"", ""text"")),
			formatter.format(""some [siZE=10]text[/siZe] here"", defaultOptions()));
	}
"
net.jforum.bbcode.Size_TestCase.withQuotes,Size_TestCase.java,"void withQuotes() {
		BBCode bb = bbCodes.get(""size"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""10"", ""sized"")),
			formatter.format(""a [size=\""10\""]sized[/size] text"", defaultOptions()));
	}
"
net.jforum.bbcode.Size_TestCase.withSimpleQuotes,Size_TestCase.java,"void withSimpleQuotes() {
		BBCode bb = bbCodes.get(""size"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""10"", ""sized"")),
			formatter.format(""a [size='10']sized[/size] text"", defaultOptions()));
	}
"
net.jforum.bbcode.Size_TestCase.withUnclosedQuoteShouldFormat,Size_TestCase.java,"void withUnclosedQuoteShouldFormat() {
		BBCode bb = bbCodes.get(""size"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""10"", ""sized"")),
			formatter.format(""a [size=\""10]sized[/size] text"", defaultOptions()));
	}
"
net.jforum.bbcode.Size_TestCase.withUnopenedQuoteShould,Size_TestCase.java,"void withUnopenedQuoteShould() {
		BBCode bb = bbCodes.get(""size"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""10"", ""sized"")),
			formatter.format(""a [size=10\""]sized[/size] text"", defaultOptions()));
	}
"
net.jforum.bbcode.Size_TestCase.withUnclosedSingleQuoteShouldFormat,Size_TestCase.java,"void withUnclosedSingleQuoteShouldFormat() {
		BBCode bb = bbCodes.get(""size"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""10"", ""sized"")),
			formatter.format(""a [size='10]sized[/size] text"", defaultOptions()));
	}
"
net.jforum.bbcode.Size_TestCase.withUnopenedSingleQuoteShouldFormat,Size_TestCase.java,"void withUnopenedSingleQuoteShouldFormat() {
		BBCode bb = bbCodes.get(""size"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""10"", ""sized"")),
			formatter.format(""a [size=10']sized[/size] text"", defaultOptions()));
	}
"
net.jforum.bbcode.Size_TestCase.html,Size_TestCase.java,"String html(BBCode bb, String size, String text) {
		return StringUtils.replace(bb.getReplace(), ""$1"", size)
			.replace(""$2"", text);
	}
"
net.jforum.bbcode.I_TestCase.singleLine,I_TestCase.java,"void singleLine() {
		formatter.addBb(bbCodes.get(""i""));
		Assert.assertEquals(""some <i>italic</i> text"", formatter.format(""some [i]italic[/i] text"", defaultOptions()));
	}
"
net.jforum.bbcode.I_TestCase.incompleteTagShouldDoNothing,I_TestCase.java,"void incompleteTagShouldDoNothing() {
		formatter.addBb(bbCodes.get(""i""));
		Assert.assertEquals(""some [i]italic text"", formatter.format(""some [i]italic text"", defaultOptions()));
	}
"
net.jforum.bbcode.I_TestCase.twoOpenZeroClosedShouldDoNothing,I_TestCase.java,"void twoOpenZeroClosedShouldDoNothing() {
		formatter.addBb(bbCodes.get(""i""));
		Assert.assertEquals(""some [i]italic[i] text"", formatter.format(""some [i]italic[i] text"", defaultOptions()));
	}
"
net.jforum.bbcode.I_TestCase.twoOpenOneClosedExpectOneFormatted,I_TestCase.java,"void twoOpenOneClosedExpectOneFormatted() {
		formatter.addBb(bbCodes.get(""i""));
		Assert.assertEquals(""some <i>italic[i] text</i>"", formatter.format(""some [i]italic[i] text[/i]"", defaultOptions()));
	}
"
net.jforum.bbcode.I_TestCase.multipleLines,I_TestCase.java,"void multipleLines() {
		formatter.addBb(bbCodes.get(""i""));
		Assert.assertEquals(""some <i>\nitalic\n\n</i>\n text"", formatter.format(""some [i]\nitalic\n\n[/i]\n text"", defaultOptions()));
	}
"
net.jforum.bbcode.I_TestCase.mixedCase,I_TestCase.java,"void mixedCase() {
		formatter.addBb(bbCodes.get(""i""));
		Assert.assertEquals(""some <i>italic</i> text"", formatter.format(""some [I]italic[/i] text"", defaultOptions()));
	}
"
net.jforum.bbcode.BBCodeConfigParserTestCase.parse,BBCodeConfigParserTestCase.java,"void parse() {
		// Tag 1
		BBCode tag1 = new BBCode();
		tag1.setRegex(""tag1-regex"");
		tag1.setReplace(""tag1-replace"");
		tag1.setTagName(""tag1"");

		// Tag 2
		BBCode tag2 = new BBCode();
		tag2.setRegex(""tag2-regex"");
		tag2.setReplace(""tag2-replace"");
		tag2.setTagName(""tag2"");
		tag2.enableAlwaysProcess();
		
		//File file = new File(this.getClass().getResource(""/bb_config_parser.xml"").getFile());
		new BBCodeConfigParser(/*file,*/ formatter);

		verify(formatter).addBb(tag1);
		verify(formatter).addBb(tag2);
	}
"
net.jforum.bbcode.NewLineToHtmBreakFormatterTestCase.twoNewLinesExpectsTwoBreaks,NewLineToHtmBreakFormatterTestCase.java,"void twoNewLinesExpectsTwoBreaks() {
		Assert.assertEquals(""some<br/>  text and some<br/>  more"",
			new NewLineToHtmlBreakFormatter().format(""some\n text and some\n more"", null));
	}
"
net.jforum.bbcode.NewLineToHtmBreakFormatterTestCase.stringWithoutNewLineExpectNoChanges,NewLineToHtmBreakFormatterTestCase.java,"void stringWithoutNewLineExpectNoChanges() {
		String input = ""this is a regular content"";
		Assert.assertEquals(input, new NewLineToHtmlBreakFormatter().format(input, null));
	}
"
net.jforum.bbcode.SimpleUrl_TestCase.format,SimpleUrl_TestCase.java,"void format() {
		BBCode bb = bbCodes.get(""simple-url"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""http://something"")),
			formatter.format(""a [url]http://something[/url] text"", defaultOptions()));
	}
"
net.jforum.bbcode.SimpleUrl_TestCase.incompleteTagShouldDoNothing,SimpleUrl_TestCase.java,"void incompleteTagShouldDoNothing() {
		formatter.addBb(bbCodes.get(""simple-url""));
		Assert.assertEquals(""some [url=http://something]text"",
			formatter.format(""some [url=http://something]text"", defaultOptions()));
	}
"
net.jforum.bbcode.SimpleUrl_TestCase.twoOpenOneClosedExpectOneFormatted,SimpleUrl_TestCase.java,"void twoOpenOneClosedExpectOneFormatted() {
		BBCode bb = bbCodes.get(""simple-url"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""some %s"", this.html(bb, ""http://something[url]http://other.site"")),
			formatter.format(""some [url]http://something[url]http://other.site[/url]"", defaultOptions()));
	}
"
net.jforum.bbcode.SimpleUrl_TestCase.multipleLinesShouldIgnore,SimpleUrl_TestCase.java,"void multipleLinesShouldIgnore() {
		BBCode bb = bbCodes.get(""simple-url"");
		formatter.addBb(bb);
		Assert.assertEquals(""some [url]\nhttp://something\n\n[/url]"",
			formatter.format(""some [url]\nhttp://something\n\n[/url]"", defaultOptions()));
	}
"
net.jforum.bbcode.SimpleUrl_TestCase.mixedCase,SimpleUrl_TestCase.java,"void mixedCase() {
		BBCode bb = bbCodes.get(""simple-url"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""some %s here"", this.html(bb, ""http://something"")),
			formatter.format(""some [UrL]http://something[/URL] here"", defaultOptions()));
	}
"
net.jforum.bbcode.SimpleUrl_TestCase.html,SimpleUrl_TestCase.java,"String html(BBCode bb, String url) {
		return StringUtils.replace(bb.getReplace(), ""$1"", url);
	}
"
net.jforum.bbcode.DescriptiveUrl_TestCase.format,DescriptiveUrl_TestCase.java,"void format() {
		BBCode bb = bbCodes.get(""descriptive-url"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""http://something"", ""url description"")),
			formatter.format(""a [url=http://something]url description[/url] text"", defaultOptions()));
	}
"
net.jforum.bbcode.DescriptiveUrl_TestCase.incompleteTagShouldDoNothing,DescriptiveUrl_TestCase.java,"void incompleteTagShouldDoNothing() {
		formatter.addBb(bbCodes.get(""descriptive-url""));
		Assert.assertEquals(""some [url=http://something]text"",
			formatter.format(""some [url=http://something]text"", defaultOptions()));
	}
"
net.jforum.bbcode.DescriptiveUrl_TestCase.withoutUrlAddressShouldIgnore,DescriptiveUrl_TestCase.java,"void withoutUrlAddressShouldIgnore() {
		formatter.addBb(bbCodes.get(""descriptive-url""));
		Assert.assertEquals(""some [url]text[/url]"",
			formatter.format(""some [url]text[/url]"", defaultOptions()));
	}
"
net.jforum.bbcode.DescriptiveUrl_TestCase.twoOpenOneClosedExpectOneFormatted,DescriptiveUrl_TestCase.java,"void twoOpenOneClosedExpectOneFormatted() {
		BBCode bb = bbCodes.get(""descriptive-url"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""some %s"", this.html(bb, ""http://something"", ""url description[url=http://other.site]"")),
			formatter.format(""some [url=http://something]url description[url=http://other.site][/url]"", defaultOptions()));
	}
"
net.jforum.bbcode.DescriptiveUrl_TestCase.multipleLinesShouldIgnore,DescriptiveUrl_TestCase.java,"void multipleLinesShouldIgnore() {
		BBCode bb = bbCodes.get(""descriptive-url"");
		formatter.addBb(bb);
		Assert.assertEquals(""some [url=http://something]\ntext\n\nhere[/url]"",
			formatter.format(""some [url=http://something]\ntext\n\nhere[/url]"", defaultOptions()));
	}
"
net.jforum.bbcode.DescriptiveUrl_TestCase.mixedCase,DescriptiveUrl_TestCase.java,"void mixedCase() {
		BBCode bb = bbCodes.get(""descriptive-url"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""some %s here"", this.html(bb, ""http://something"", ""url description"")),
			formatter.format(""some [UrL=http://something]url description[/URL] here"", defaultOptions()));
	}
"
net.jforum.bbcode.DescriptiveUrl_TestCase.withQuotes,DescriptiveUrl_TestCase.java,"void withQuotes() {
		BBCode bb = bbCodes.get(""descriptive-url"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""http://something"", ""url description"")),
			formatter.format(""a [url=\""http://something\""]url description[/url] text"", defaultOptions()));
	}
"
net.jforum.bbcode.DescriptiveUrl_TestCase.withSimpleQuotes,DescriptiveUrl_TestCase.java,"void withSimpleQuotes() {
		BBCode bb = bbCodes.get(""descriptive-url"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""http://something"", ""url description"")),
			formatter.format(""a [url='http://something']url description[/url] text"", defaultOptions()));
	}
"
net.jforum.bbcode.DescriptiveUrl_TestCase.withUnclosedQuoteShouldFormat,DescriptiveUrl_TestCase.java,"void withUnclosedQuoteShouldFormat() {
		BBCode bb = bbCodes.get(""descriptive-url"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""something"", ""url description"")),
			formatter.format(""a [url=\""something]url description[/url] text"", defaultOptions()));
	}
"
net.jforum.bbcode.DescriptiveUrl_TestCase.withUnopenedQuoteShouldFormat,DescriptiveUrl_TestCase.java,"void withUnopenedQuoteShouldFormat() {
		BBCode bb = bbCodes.get(""descriptive-url"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""http://something"", ""url description"")),
			formatter.format(""a [url=http://something\""]url description[/url] text"", defaultOptions()));
	}
"
net.jforum.bbcode.DescriptiveUrl_TestCase.withUnclosedSingleQuoteShouldFormat,DescriptiveUrl_TestCase.java,"void withUnclosedSingleQuoteShouldFormat() {
		BBCode bb = bbCodes.get(""descriptive-url"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""http://something"", ""url description"")),
			formatter.format(""a [url='http://something]url description[/url] text"", defaultOptions()));
	}
"
net.jforum.bbcode.DescriptiveUrl_TestCase.withUnopenedSingleQuoteShouldFormat,DescriptiveUrl_TestCase.java,"void withUnopenedSingleQuoteShouldFormat() {
		BBCode bb = bbCodes.get(""descriptive-url"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""http://something"", ""url description"")),
			formatter.format(""a [url=http://something']url description[/url] text"", defaultOptions()));
	}
"
net.jforum.bbcode.DescriptiveUrl_TestCase.html,DescriptiveUrl_TestCase.java,"String html(BBCode bb, String url, String description) {
		return StringUtils.replace(bb.getReplace(), ""$1"", url)
			.replace(""$2"", description);
	}
"
net.jforum.bbcode.YouTube_TestCase.format,YouTube_TestCase.java,"void format() {
		BBCode bb = bbCodes.get(""youtube"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a video: %s"", this.tagHtml(bb, ""www."", ""123456"")),
			formatter.format(""a video: [youtube]http://www.youtube.com/watch?v=123456[/youtube]"", defaultOptions()));
	}
"
net.jforum.bbcode.YouTube_TestCase.invalidUrlShouldNotFormat,YouTube_TestCase.java,"void invalidUrlShouldNotFormat() {
		BBCode bb = bbCodes.get(""youtube"");
		formatter.addBb(bb);
		Assert.assertEquals(""a video: [youtube]http://something.else[/youtube]"",
			formatter.format(""a video: [youtube]http://something.else[/youtube]"", defaultOptions()));
	}
"
net.jforum.bbcode.YouTube_TestCase.mixedCase,YouTube_TestCase.java,"void mixedCase() {
		BBCode bb = bbCodes.get(""youtube"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a video: %s"", this.tagHtml(bb, ""www."", ""123456"")),
			formatter.format(""a video: [YOUTUBE]http://www.youtube.com/watch?v=123456[/yOuTube]"", defaultOptions()));
	}
"
net.jforum.bbcode.YouTube_TestCase.tagHtml,YouTube_TestCase.java,"String tagHtml(BBCode bb, String url, String videoCode) {
		return StringUtils.replace(bb.getReplace(), ""$1"", url)
			.replace(""$2"", videoCode);
	}
"
net.jforum.bbcode.SmiliesFormatterTestCase.expectAllReplaces,SmiliesFormatterTestCase.java,"void expectAllReplaces() {
		Smilie s1 = new Smilie();
		s1.setCode("":)"");
		s1.setDiskName(""#s1#"");

		Smilie s2 = new Smilie();
		s2.setCode("":D"");
		s2.setDiskName(""#s2#"");
		
		when(container.instanceFor(SmilieRepository.class)).thenReturn(repository);
		when(repository.getAllSmilies()).thenReturn(Arrays.asList(s1, s2));
		when(config.getValue(ConfigKeys.SMILIE_IMAGE_DIR)).thenReturn(""smilies"");
		
		String input = ""some text :). And another :D :):). This one not: :P"";
		String expected = ""some text <img src='/smilies/#s1#' border='0'/>. "" +
				""And another <img src='/smilies/#s2#' border='0'/> <img src=\'/smilies/#s1#\' border=\'0\'/>"" +
				""<img src=\'/smilies/#s1#\' border=\'0\'/>. This one not: :P"";
		PostOptions options = new PostOptions(false, true, false, false, """");

		SmiliesFormatter formatter = new SmiliesFormatter(config, container);
		Assert.assertEquals(expected, formatter.format(input, options));

	}
"
net.jforum.bbcode.SmiliesFormatterTestCase.smliesDisabledShouldNotFormat,SmiliesFormatterTestCase.java,"void smliesDisabledShouldNotFormat() {
		String input = ""some :) smiles :D here"";
		String expected = input;

		PostOptions options = new PostOptions(false, false, false, false, null);

		Assert.assertEquals(expected, new SmiliesFormatter(null, container).format(input, options));
	}
"
net.jforum.bbcode.B_TestCase.singleLine,B_TestCase.java,"void singleLine() {
		formatter.addBb(bbCodes.get(""b""));
		Assert.assertEquals(""some <strong>bold</strong> text"", formatter.format(""some [b]bold[/b] text"", defaultOptions()));
	}
"
net.jforum.bbcode.B_TestCase.incompleteTagShouldDoNothing,B_TestCase.java,"void incompleteTagShouldDoNothing() {
		formatter.addBb(bbCodes.get(""b""));
		Assert.assertEquals(""some [b]bold text"", formatter.format(""some [b]bold text"", defaultOptions()));
	}
"
net.jforum.bbcode.B_TestCase.twoOpenZeroClosedShouldDoNothing,B_TestCase.java,"void twoOpenZeroClosedShouldDoNothing() {
		formatter.addBb(bbCodes.get(""b""));
		Assert.assertEquals(""some [b]bold[b] text"", formatter.format(""some [b]bold[b] text"", defaultOptions()));
	}
"
net.jforum.bbcode.B_TestCase.twoOpenOneClosedExpectOneFormatted,B_TestCase.java,"void twoOpenOneClosedExpectOneFormatted() {
		formatter.addBb(bbCodes.get(""b""));
		Assert.assertEquals(""some <strong>bold[b] text</strong>"", formatter.format(""some [b]bold[b] text[/b]"", defaultOptions()));
	}
"
net.jforum.bbcode.B_TestCase.multipleLines,B_TestCase.java,"void multipleLines() {
		formatter.addBb(bbCodes.get(""b""));
		Assert.assertEquals(""some <strong>\nbold\n\n</strong>\n text"", formatter.format(""some [b]\nbold\n\n[/b]\n text"", defaultOptions()));
	}
"
net.jforum.bbcode.B_TestCase.mixedCase,B_TestCase.java,"void mixedCase() {
		formatter.addBb(bbCodes.get(""b""));
		Assert.assertEquals(""some <strong>bold</strong> text"", formatter.format(""some [B]bold[/b] text"", defaultOptions()));
	}
"
net.jforum.bbcode.Color_TestCase.singleLine,Color_TestCase.java,"void singleLine() {
		BBCode bb = bbCodes.get(""color"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""red"", ""red text"")),
			formatter.format(""a [color=red]red text[/color] text"", defaultOptions()));
	}
"
net.jforum.bbcode.Color_TestCase.incompleteTagShouldDoNothing,Color_TestCase.java,"void incompleteTagShouldDoNothing() {
		formatter.addBb(bbCodes.get(""color""));
		Assert.assertEquals(""some [color=red]text"",
			formatter.format(""some [color=red]text"", defaultOptions()));
	}
"
net.jforum.bbcode.Color_TestCase.withoutColorNameShouldIgnore,Color_TestCase.java,"void withoutColorNameShouldIgnore() {
		formatter.addBb(bbCodes.get(""color""));
		Assert.assertEquals(""some [color]text[/color]"",
			formatter.format(""some [color]text[/color]"", defaultOptions()));
	}
"
net.jforum.bbcode.Color_TestCase.twoOpenOneClosedExpectOneFormatted,Color_TestCase.java,"void twoOpenOneClosedExpectOneFormatted() {
		BBCode bb = bbCodes.get(""color"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""some %s"", this.html(bb, ""red"", ""text[color=yellow]"")),
			formatter.format(""some [color=red]text[color=yellow][/color]"", defaultOptions()));
	}
"
net.jforum.bbcode.Color_TestCase.multipleLines,Color_TestCase.java,"void multipleLines() {
		BBCode bb = bbCodes.get(""color"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""some %s"", this.html(bb, ""red"", ""\ntext\n\nhere"")),
			formatter.format(""some [color=red]\ntext\n\nhere[/color]"", defaultOptions()));
	}
"
net.jforum.bbcode.Color_TestCase.mixedCase,Color_TestCase.java,"void mixedCase() {
		BBCode bb = bbCodes.get(""color"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""some %s here"", this.html(bb, ""red"", ""text"")),
			formatter.format(""some [coLOr=red]text[/cOloR] here"", defaultOptions()));
	}
"
net.jforum.bbcode.Color_TestCase.withQuotes,Color_TestCase.java,"void withQuotes() {
		BBCode bb = bbCodes.get(""color"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""red"", ""colored"")),
			formatter.format(""a [color=\""red\""]colored[/color] text"", defaultOptions()));
	}
"
net.jforum.bbcode.Color_TestCase.withSimpleQuotes,Color_TestCase.java,"void withSimpleQuotes() {
		BBCode bb = bbCodes.get(""color"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""red"", ""colored"")),
			formatter.format(""a [color='red']colored[/color] text"", defaultOptions()));
	}
"
net.jforum.bbcode.Color_TestCase.withUnclosedQuoteShouldFormat,Color_TestCase.java,"void withUnclosedQuoteShouldFormat() {
		BBCode bb = bbCodes.get(""color"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""red"", ""colored"")),
			formatter.format(""a [color=\""red]colored[/color] text"", defaultOptions()));
	}
"
net.jforum.bbcode.Color_TestCase.withUnopenedQuoteShouldFormat,Color_TestCase.java,"void withUnopenedQuoteShouldFormat() {
		BBCode bb = bbCodes.get(""color"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""red"", ""colored"")),
			formatter.format(""a [color=red\""]colored[/color] text"", defaultOptions()));
	}
"
net.jforum.bbcode.Color_TestCase.withUnclosedSingleQuoteShouldFormat,Color_TestCase.java,"void withUnclosedSingleQuoteShouldFormat() {
		BBCode bb = bbCodes.get(""color"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""red"", ""colored"")),
			formatter.format(""a [color='red]colored[/color] text"", defaultOptions()));
	}
"
net.jforum.bbcode.Color_TestCase.withUnopenedSingleQuoteShouldFormat,Color_TestCase.java,"void withUnopenedSingleQuoteShouldFormat() {
		BBCode bb = bbCodes.get(""color"");
		formatter.addBb(bb);
		Assert.assertEquals(String.format(""a %s text"", this.html(bb, ""red"", ""colored"")),
			formatter.format(""a [color=red']colored[/color] text"", defaultOptions()));
	}
"
net.jforum.bbcode.Color_TestCase.html,Color_TestCase.java,"String html(BBCode bb, String color, String text) {
		return StringUtils.replace(bb.getReplace(), ""$1"", color)
			.replace(""$2"", text);
	}
"
net.jforum.entities.GroupTestCase.roleExistNotFoundExpectFalse,GroupTestCase.java,"void roleExistNotFoundExpectFalse() {
		Role role = new Role();
		role.setName(""role1"");

		Group g = new Group();
		g.addRole(role);

		Assert.assertFalse(g.roleExist(""role2""));
	}
"
net.jforum.entities.GroupTestCase.roleExistEntryIsFoundExpectTrue,GroupTestCase.java,"void roleExistEntryIsFoundExpectTrue() {
		Role role = new Role();
		role.setName(""role1"");

		Group g = new Group();
		g.addRole(role);

		Assert.assertTrue(g.roleExist(""role1""));
	}
"
net.jforum.entities.TopicTestCase.getPosts,TopicTestCase.java,"void getPosts() {
		final Topic topic = new Topic(repository);

		topic.getPosts(0, 10);

		verify(repository).getPosts(topic, 0, 10);
	}
"
net.jforum.entities.TopicTestCase.getTotalPosts,TopicTestCase.java,"void getTotalPosts() {
		final Topic topic = new Topic();
		topic.incrementTotalReplies();

		assertEquals(2, topic.getTotalPosts());
	}
"
net.jforum.entities.TopicTestCase.getPostsWithoutRepositoryExpectException,TopicTestCase.java,"void getPostsWithoutRepositoryExpectException() {
		new Topic().getPosts(0, 10);
	}
"
net.jforum.entities.ForumTestCase.getTotalTopics,ForumTestCase.java,"void getTotalTopics() {
		final Forum forum = new Forum(repository);

		forum.getTotalTopics();

		verify(repository).getTotalTopics(forum);
	}
"
net.jforum.entities.ForumTestCase.getTopicsPendingModerationForumIsNotModeratedShouldReturnEmptyList,ForumTestCase.java,"void getTopicsPendingModerationForumIsNotModeratedShouldReturnEmptyList() {
		Forum forum = new Forum();
		forum.setModerated(false);
		assertEquals(0, forum.getTopicsPendingModeration().size());
	}
"
net.jforum.entities.ForumTestCase.getTopicsPendingModeration,ForumTestCase.java,"void getTopicsPendingModeration() {
		final Forum forum = new Forum(repository);
		forum.setModerated(true);

		forum.getTopicsPendingModeration();

		verify(repository).getTopicsPendingModeration(forum);
	}
"
net.jforum.entities.ForumTestCase.getTopics,ForumTestCase.java,"void getTopics() {
		final Forum forum = new Forum(repository);

		forum.getTopics(0, 10);

		verify(repository).getTopics(forum, 0, 10);
	}
"
net.jforum.entities.ForumTestCase.getTotalPosts,ForumTestCase.java,"void getTotalPosts() {
		final Forum forum = new Forum(repository);

		forum.getTotalPosts();

		verify(repository).getTotalPosts(forum);
	}
"
net.jforum.entities.ForumTestCase.getModeratorsForumIsNotModeratedExpectEmptyList,ForumTestCase.java,"void getModeratorsForumIsNotModeratedExpectEmptyList() {
		Forum forum = new Forum();
		forum.setModerated(false);
		assertEquals(0, forum.getModerators().size());
	}
"
net.jforum.entities.ForumTestCase.getModerators,ForumTestCase.java,"void getModerators() {
		final Forum forum = new Forum(repository);
		forum.setModerated(true);

		forum.getModerators();

		verify(repository).getModerators(forum);
	}
"
net.jforum.entities.ForumTestCase.getModeratorsWithoutRepositoryExpectException,ForumTestCase.java,"void getModeratorsWithoutRepositoryExpectException() {
		Forum forum = new Forum();
		forum.setModerated(true);
		forum.getModerators();
	}
"
net.jforum.entities.ForumTestCase.getTotalTopicsWithoutRepositoryExpectException,ForumTestCase.java,"void getTotalTopicsWithoutRepositoryExpectException() {
		new Forum().getTotalTopics();
	}
"
net.jforum.entities.ForumTestCase.getTotalPostsWithoutRepositoryExpectException,ForumTestCase.java,"void getTotalPostsWithoutRepositoryExpectException() {
		new Forum().getTotalPosts();
	}
"
net.jforum.entities.ForumTestCase.getTopicsWithoutRepositoryExpectException,ForumTestCase.java,"void getTopicsWithoutRepositoryExpectException() {
		new Forum().getTopics(0, 10);
	}
"
net.jforum.entities.ForumTestCase.getTopicsPendingModerationWithoutRepositoryExpectException,ForumTestCase.java,"void getTopicsPendingModerationWithoutRepositoryExpectException() {
		Forum forum = new Forum();
		forum.setModerated(true);
		forum.getTopicsPendingModeration();
	}
"
net.jforum.entities.SearchParamsTest.testSearchParamsQueryWithOr,SearchParamsTest.java,"void testSearchParamsQueryWithOr() {
		SearchParams p = new SearchParams(); p.setQuery(""test query words""); p.setMatchType(SearchMatchType.OR);
		Assert.assertEquals(""(test query words  ) or (subject:test subject:query subject:words  )"", p.buildQuery());
	}
"
net.jforum.entities.SearchParamsTest.testSearchParamsQueryWithAnd,SearchParamsTest.java,"void testSearchParamsQueryWithAnd() {
		SearchParams p = new SearchParams(); p.setQuery(""test query words""); p.setMatchType(SearchMatchType.AND);
		Assert.assertEquals(""(+test +query +words  ) or (+subject:test +subject:query +subject:words  )"", p.buildQuery());
	}
"
net.jforum.entities.SearchParamsTest.testSearchParamsQueryWithForumId,SearchParamsTest.java,"void testSearchParamsQueryWithForumId() {
		Forum f = new Forum(); f.setId(1);
		SearchParams p = new SearchParams(); p.setQuery(""test query words""); p.setMatchType(SearchMatchType.AND); p.setForum(f);
		Assert.assertEquals(""(+test +query +words  and +topic.forum.id:1) or (+subject:test +subject:query +subject:words  and +topic.forum.id:1)"", p.buildQuery());
	}
"
net.jforum.entities.SearchParamsTest.testSearchParamsQueryWithQuotesAndAnd,SearchParamsTest.java,"void testSearchParamsQueryWithQuotesAndAnd() {
		SearchParams p = new SearchParams(); p.setQuery(""test 'query words' with quotes""); p.setMatchType(SearchMatchType.AND);
		Assert.assertEquals(""(+test +'query words' +with +quotes  ) or (+subject:test +subject:'query words' +subject:with +subject:quotes  )"", p.buildQuery());
	}
"
net.jforum.entities.SearchParamsTest.testSearchParamsQueryWithDoubleQuotesAndAnd,SearchParamsTest.java,"void testSearchParamsQueryWithDoubleQuotesAndAnd() {
		SearchParams p = new SearchParams(); p.setQuery(""test \""query words\"" with quotes""); p.setMatchType(SearchMatchType.AND);
		Assert.assertEquals(""(+test +\""query words\"" +with +quotes  ) or (+subject:test +subject:\""query words\"" +subject:with +subject:quotes  )"", p.buildQuery());
	}
"
net.jforum.entities.UserSessionTestCase.setup,UserSessionTestCase.java,"void setup() {
		userSession = new UserSession();
		userSession.setRequest(request);
		
		when(request.getSession()).thenReturn(httpSession);
		
		this.loadTopicsReadTime();
	}
"
net.jforum.entities.UserSessionTestCase.isForumReadLastPostTimeNewerThanLastVisitTopicTrackingSmallerThanLastPostExpectFalse,UserSessionTestCase.java,"void isForumReadLastPostTimeNewerThanLastVisitTopicTrackingSmallerThanLastPostExpectFalse() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""1"");
		
		userSession.setLastVisit(10);
		Forum forum = this.newForum(1, 20); 
		forum.getLastPost().getTopic().setId(1);
		topicsReadTime.put(1, 15l);
		
		assertFalse(userSession.isForumRead(forum));
	}
"
net.jforum.entities.UserSessionTestCase.isForumReadLastPostTimeNewerThanLastVisitTopicTrackingDoestNotExistExpectFalse,UserSessionTestCase.java,"void isForumReadLastPostTimeNewerThanLastVisitTopicTrackingDoestNotExistExpectFalse() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""1"");
		
		userSession.setLastVisit(10);
		Forum forum = this.newForum(1, 20); 
		forum.getLastPost().getTopic().setId(1);
		topicsReadTime.put(2, 15l);
		
		assertFalse(userSession.isForumRead(forum));
	}
"
net.jforum.entities.UserSessionTestCase.isForumReadLastPostTimeNewerThanLastVisitExpectFalse,UserSessionTestCase.java,"void isForumReadLastPostTimeNewerThanLastVisitExpectFalse() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""1"");
		
		userSession.setLastVisit(1);
		
		assertFalse(userSession.isForumRead(this.newForum(1, 2)));
	}
"
net.jforum.entities.UserSessionTestCase.isForumReadLastVisitNewerThanLastPostTimeExpectTrue,UserSessionTestCase.java,"void isForumReadLastVisitNewerThanLastPostTimeExpectTrue() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""1"");
		
		userSession.setLastVisit(10);
		
		assertTrue(userSession.isForumRead(this.newForum(1, 5)));
	}
"
net.jforum.entities.UserSessionTestCase.isForumReadLastPostIsNullExpectTrue,UserSessionTestCase.java,"void isForumReadLastPostIsNullExpectTrue() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""1"");
		
		Forum forum = this.newForum(1, 1);
		forum.setLastPost(null);
		
		assertTrue(userSession.isForumRead(forum));
	}
"
net.jforum.entities.UserSessionTestCase.isForumReadZeroPostsExpectTrue,UserSessionTestCase.java,"void isForumReadZeroPostsExpectTrue() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""1"");
		
		Forum forum = this.newForum(0, 0);
		
		assertTrue(userSession.isForumRead(forum));
	}
"
net.jforum.entities.UserSessionTestCase.isForumReadNotLoggedExpectTrue,UserSessionTestCase.java,"void isForumReadNotLoggedExpectTrue() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""0"");
		
		Forum forum = new Forum();
		
		assertTrue(userSession.isForumRead(forum));
	}
"
net.jforum.entities.UserSessionTestCase.asSession,UserSessionTestCase.java,"void asSession() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""0"");
		when(request.getRemoteAddr()).thenReturn(""ip"");
		
		User user = new User();
		user.setId(2);
		userSession.setUser(user);
		userSession.setCreationTime(2);
		userSession.setLastAccessedTime(1);
		userSession.setLastVisit(5);

		Session session  = userSession.asSession();
		
		assertEquals(new Date(1), session.getLastAccessed());
		assertEquals(new Date(2), session.getStart());
		assertEquals(new Date(5), session.getLastVisit());
		assertEquals(""ip"", session.getIp());
		assertEquals(2, session.getUserId());
	}
"
net.jforum.entities.UserSessionTestCase.isTopicReadNotLoggedShouldReturnTrue,UserSessionTestCase.java,"void isTopicReadNotLoggedShouldReturnTrue() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""0"");
		
		Topic topic = new Topic();
		
		assertFalse(userSession.isLogged());
		assertTrue(userSession.isTopicRead(topic));
	}
"
net.jforum.entities.UserSessionTestCase.isTopicReadWhenLoggedLastVisitNewerThanTopicShouldReturnTrue,UserSessionTestCase.java,"void isTopicReadWhenLoggedLastVisitNewerThanTopicShouldReturnTrue() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""1"");
		
		Topic topic = new Topic(); topic.setLastPost(new Post());
		topic.getLastPost().setDate(new Date(1));
		userSession.setLastVisit(5l);

		assertTrue(userSession.isTopicRead(topic));
	}
"
net.jforum.entities.UserSessionTestCase.isTopicReadWhenLoggedLastVisitAndReadTimeOlderThanTopicShouldReturnFalse,UserSessionTestCase.java,"void isTopicReadWhenLoggedLastVisitAndReadTimeOlderThanTopicShouldReturnFalse() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""1"");
		
		Topic topic = new Topic(); topic.setLastPost(new Post());
		topic.getLastPost().setDate(new Date(10));
		userSession.setLastVisit(1);
		topicsReadTime.put(topic.getId(), 8L);

		assertFalse(userSession.isTopicRead(topic));
	}
"
net.jforum.entities.UserSessionTestCase.isTopicReadWhenLoggedLastVisitOlderThanTopicReadTimeNewerThanTopicShouldReturnTrue,UserSessionTestCase.java,"void isTopicReadWhenLoggedLastVisitOlderThanTopicReadTimeNewerThanTopicShouldReturnTrue() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""1"");
		
		Topic topic = new Topic(); topic.setLastPost(new Post());
		topic.getLastPost().setDate(new Date(10));
		userSession.setLastVisit(1);
		topicsReadTime.put(topic.getId(), 20L);

		assertTrue(userSession.isTopicRead(topic));
	}
"
net.jforum.entities.UserSessionTestCase.isTopicReadWhenLoggedLastVisitOlderThanTopicShouldReturnFalse,UserSessionTestCase.java,"void isTopicReadWhenLoggedLastVisitOlderThanTopicShouldReturnFalse() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""1"");
		
		Topic topic = new Topic(); topic.setLastPost(new Post());
		topic.getLastPost().setDate(new Date(10));
		userSession.setLastVisit(5);

		assertFalse(userSession.isTopicRead(topic));
	}
"
net.jforum.entities.UserSessionTestCase.markAsReadWhenLogged,UserSessionTestCase.java,"void markAsReadWhenLogged() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""1"");
		
		assertTrue(userSession.isLogged());
		assertEquals(0, topicsReadTime.size());
		userSession.markTopicAsRead(2);
		assertEquals(1, topicsReadTime.size());
		assertTrue(topicsReadTime.containsKey(2));
	}
"
net.jforum.entities.UserSessionTestCase.markTopicAsReadNotLoggedShouldIgnore,UserSessionTestCase.java,"void markTopicAsReadNotLoggedShouldIgnore() {
		when(httpSession.getAttribute(ConfigKeys.LOGGED)).thenReturn(""0"");
		
		assertFalse(userSession.isLogged());
		assertEquals(0, topicsReadTime.size());
		userSession.markTopicAsRead(1);
		assertEquals(0, topicsReadTime.size());
	}
"
net.jforum.entities.UserSessionTestCase.loadTopicsReadTime,UserSessionTestCase.java,"void loadTopicsReadTime() {
		Field[] fields = userSession.getClass().getDeclaredFields();
		for (Field field: fields) {
			if (field.getName().equals(""topicReadTime"")) {
				field.setAccessible(true);
				try {
					topicsReadTime = (Map<Integer, Long>)field.get(userSession);
				}
				catch (Exception e) {
					throw new RuntimeException(e);
				}
			}
		}
	}
"
net.jforum.entities.UserSessionTestCase.newForum,UserSessionTestCase.java,"Forum newForum(final int totalPosts, long lastPostTime) {
		Forum forum = new Forum() {
			/**
			 *
			 */
			private static final long serialVersionUID = 1L;

			@Override
			public int getTotalPosts() { return totalPosts; }
		};

		forum.setLastPost(new Post());
		forum.getLastPost().setDate(new Date(lastPostTime));
		forum.getLastPost().setTopic(new Topic());

		return forum;
	}
"
net.jforum.entities.UserSessionTestCase.getTotalPosts,UserSessionTestCase.java,"int getTotalPosts() { return totalPosts; }
"
net.jforum.repository.ModerationLogRepository.getTotalRecords,ModerationLogRepository.java,"int getTotalRecords() {
		return ((Number)session.createQuery(""select count(*) from ModerationLog"").uniqueResult()).intValue();
	}
"
net.jforum.repository.ModerationLogRepository.getAll,ModerationLogRepository.java,"List<ModerationLog> getAll(int start, int count) {
		return session.createQuery(""from ModerationLog l order by l.id desc"")
			.setFirstResult(start)
			.setMaxResults(count)
			.list();
	}
"
net.jforum.repository.ForumRepository.setJforumConfig,ForumRepository.java,"void setJforumConfig(JForumConfig config) {
		this.config = config;
	}
"
net.jforum.repository.ForumRepository.moveTopics,ForumRepository.java,"void moveTopics(Forum toForum, int... topicIds) {
		session.createQuery(""update Topic t set t.movedId = t.forum.id, t.forum = :newForum "" +
			"" where t.id in (:ids)"")
			.setParameterList(""ids"", ArrayUtils.toObject(topicIds))
			.setParameter(""newForum"", toForum)
			.executeUpdate();

		session.createQuery(""update Post p set p.forum = :forum where p.topic.id in (:ids)"")
			.setParameterList(""ids"", ArrayUtils.toObject(topicIds))
			.setParameter(""forum"", toForum)
			.executeUpdate();
	}
"
net.jforum.repository.ForumRepository.add,ForumRepository.java,"void add(Forum entity) {
		entity.setDisplayOrder(this.getMaxDisplayOrder());
		super.add(entity);
	}
"
net.jforum.repository.ForumRepository.getModerators,ForumRepository.java,"List<Group> getModerators(Forum forum) {
		return session.createQuery(""select distinct r.group from Role r "" +
			"" join r.roleValues rv "" +
			"" where r.name = 'moderate_forum' "" +
			"" and rv = :forum"")
			.setEntity(""forum"", forum)
			.setComment(""forumDAO.getModerators"")
			.setCacheable(true)
			.setCacheRegion(""forumDAO.getModerators"")
			.list();
	}
"
net.jforum.repository.ForumRepository.getTopicsPendingModeration,ForumRepository.java,"List<Topic> getTopicsPendingModeration(Forum forum) {
		return session.createQuery(""select t from Topic t left join fetch t.posts post"" +
			"" where post.moderate = true"" +
			"" or t.pendingModeration = true"" +
			"" and t.forum = :forum"" +
			"" order by t.id, post.id"")
			.setEntity(""forum"", forum)
			.setResultTransformer(CriteriaSpecification.DISTINCT_ROOT_ENTITY)
			.setComment(""forumDAO.getTopicsPendingModeration"")
			.list();
	}
"
net.jforum.repository.ForumRepository.getLastPost,ForumRepository.java,"Post getLastPost(Forum forum) {
		return (Post)session.createQuery(""from Post p where p.id = (select max(p2.id) from Post p2"" +
			"" where p2.forum = :forum and p2.moderate = false)"")
			.setParameter(""forum"", forum)
			.setComment(""forumDao.getLastPost"")
			.uniqueResult();
	}
"
net.jforum.repository.ForumRepository.getTotalMessages,ForumRepository.java,"int getTotalMessages() {
		return (Integer)session.createCriteria(Post.class)
			.setProjection(Projections.rowCount())
			.setCacheable(true)
			.setCacheRegion(""forumDAO.getTotalMessages"")
			.setComment(""forumDAO.getTotalMessages"")
			.uniqueResult();
	}
"
net.jforum.repository.ForumRepository.getTotalPosts,ForumRepository.java,"int getTotalPosts(Forum forum) {
		return (Integer)session.createCriteria(Post.class)
			.setProjection(Projections.rowCount())
			.add(Restrictions.eq(""forum"", forum))
			.setCacheable(true)
			.setCacheRegion(""forumDAO.getTotalPosts#"" + forum.getId())
			.setComment(""forumDAO.getTotalPosts"")
			.uniqueResult();
	}
"
net.jforum.repository.ForumRepository.getTotalTopics,ForumRepository.java,"int getTotalTopics(Forum forum) {
		return (Integer)session.createCriteria(Topic.class)
			.setProjection(Projections.rowCount())
			.add(Restrictions.eq(""pendingModeration"", false))
			.add(Restrictions.eq(""forum"", forum))
			.setCacheable(true)
			.setCacheRegion(""forumDAO.getTotalTopics#"" + forum.getId())
			.setComment(""forumDAO.getTotalTopics"")
			.uniqueResult();
	}
"
net.jforum.repository.ForumRepository.getTopics,ForumRepository.java,"List<Topic> getTopics(Forum forum, int startFrom, int count) {
		boolean includeMoved = this.config == null || !this.config.getBoolean(ConfigKeys.QUERY_IGNORE_TOPIC_MOVED);

		Criteria criteria = session.createCriteria(Topic.class)
			.createAlias(""firstPost"", ""fp"")
			.createAlias(""lastPost"", ""lp"");

		if (includeMoved) {
			criteria.add(Restrictions.or(Restrictions.eq(""forum"", forum), Restrictions.eq(""movedId"", forum.getId())));
		}
		else {
			criteria.add(Restrictions.eq(""forum"", forum));
		}

		return criteria.add(Restrictions.eq(""pendingModeration"", false))
			.addOrder(Order.desc(""type""))
			.addOrder(Order.desc(""lastPost""))
			.setFirstResult(startFrom)
			.setMaxResults(count)
			.setCacheable(startFrom == 0) // FIXME cache other pages? should find a good solution. Also, check the eviction rules if changing this
			.setCacheRegion(""forumDAO.getTopics#"" + forum.getId()) // Related to the fixme above
			.setComment(""forumDAO.getTopics"")
			.list();
	}
"
net.jforum.repository.ForumRepository.getNewMessages,ForumRepository.java,"PaginatedResult<Topic> getNewMessages(Date from, int start, int recordsPerPage) {
		int total = ((Number)session.createQuery(""select count(*) from Topic t "" +
			""where t.pendingModeration = false and t.lastPost.date >= :date"")
			.setParameter(""date"", from)
			.setComment(""forumDao.getNewMessagesCount"")
			.uniqueResult()).intValue();

		List<Topic> results = session.createQuery(""from Topic t "" +
			""join fetch t.lastPost lp where t.pendingModeration = false and lp.date >= :date"")
			.setParameter(""date"", from)
			.setFirstResult(start)
			.setMaxResults(recordsPerPage)
			.setComment(""forumDao.getNewMessages"")
			.list();

		return new PaginatedResult<Topic>(results, total);
	}
"
net.jforum.repository.ForumRepository.findAll,ForumRepository.java,"List<Forum> findAll() {
		return session.createQuery(""select new Forum(forum.id) from Forum as forum)"").list();
	}
"
net.jforum.repository.ForumRepository.getMaxDisplayOrder,ForumRepository.java,"int getMaxDisplayOrder() {
		Integer displayOrder = (Integer)session.createCriteria(this.persistClass)
			.setProjection(Projections.max(""displayOrder""))
			.uniqueResult();

		return displayOrder == null ? 1 : displayOrder + 1;
	}
"
net.jforum.repository.ForumRepository.getForumStats,ForumRepository.java,"ForumStats getForumStats() {
		ForumStats s = new ForumStats();

		s.setPosts(this.getTotalMessages());
		s.setTotalUsers(((Number)session.createQuery(""select count(*) from User"").uniqueResult()).intValue());
		s.setTotalTopics(((Number)session.createQuery(""select count(*) from Topic"").uniqueResult()).intValue());

		Date today = new Date();
		Date firstPostDate = (Date)session.createQuery(""select min(p.date) from Post p"").uniqueResult();

		s.setPostsPerDay(firstPostDate != null ? (double)s.getPosts() / this.daysUntilToday(today, firstPostDate) : 0);
		s.setTopicsPerDay(firstPostDate != null ? (double)s.getTopics() / this.daysUntilToday(today, firstPostDate) : 0);

		Date firstRegisteredUserDate = (Date)session.createQuery(""select min(u.registrationDate) from User u"").uniqueResult();
		s.setUsersPerDay(firstRegisteredUserDate != null ? (double)s.getUsers() / this.daysUntilToday(today, firstRegisteredUserDate) : 0);

		return s;
	}
"
net.jforum.repository.ForumRepository.getForumStats,ForumRepository.java,"ForumStats getForumStats(List<Group> groups) {
		ForumStats s = new ForumStats();

		// Total users
		s.setTotalUsers(((Number)session.createQuery(""select count(*) from User u where u.groups in (:groups)"")
			.setParameterList(""groups"", groups)
			.uniqueResult()).intValue());

		return s;
	}
"
net.jforum.repository.ForumRepository.daysUntilToday,ForumRepository.java,"int daysUntilToday(Date today, Date from)
	{
		int days = (int) ((today.getTime() - from.getTime()) / (24 * 60 * 60 * 1000));
		return days == 0 ? 1 : days;
	}
"
net.jforum.repository.ThemeRepository.getAll,ThemeRepository.java,"List<Theme> getAll() {
		return session.createCriteria(Theme.class).list();
	}
"
net.jforum.repository.BadWordRepository.getAll,BadWordRepository.java,"List<BadWord> getAll() {
		return session.createCriteria(BadWord.class).list();
	}
"
net.jforum.repository.RankingRepository.getAllRankings,RankingRepository.java,"List<Ranking> getAllRankings() {
		return session.createCriteria(this.persistClass)
			.addOrder(Order.asc(""min""))
			.setCacheable(true)
			.setCacheRegion(""rankingDAO"")
			.setComment(""rankingDAO.getAllRankings"")
			.list();
	}
"
net.jforum.repository.PostReportRepository.getPaginated,PostReportRepository.java,"PaginatedResult<PostReport> getPaginated(int start, int count, PostReportStatus status, int... forumIds) {
		int totalRecords = this.countTotalReportsByStatus(status, forumIds);

		List<PostReport> reports = this.createGetAllQuery(status, forumIds)
			.setFirstResult(start)
			.setMaxResults(count)
			.list();

		return new PaginatedResult<PostReport>(reports, totalRecords);
	}
"
net.jforum.repository.PostReportRepository.getAll,PostReportRepository.java,"List<PostReport> getAll(PostReportStatus status, int... forumIds) {
		return this.createGetAllQuery(status, forumIds).list();
	}
"
net.jforum.repository.PostReportRepository.countPendingReports,PostReportRepository.java,"int countPendingReports(int... forumIds) {
		return this.countTotalReportsByStatus(PostReportStatus.UNRESOLVED, forumIds);
	}
"
net.jforum.repository.PostReportRepository.countTotalReportsByStatus,PostReportRepository.java,"int countTotalReportsByStatus(PostReportStatus status, int... forumIds) {
		Criteria criteria = session.createCriteria(PostReport.class)
			.add(Restrictions.eq(""status"", status))
			.setProjection(Projections.rowCount());

		if (!ArrayUtils.isEmpty(forumIds)) {
			criteria.createAlias(""post"", ""post"").add(
				Restrictions.in(""post.forum.id"", this.primitiveToWrapper(forumIds)));
		}

		return ((Number)criteria.uniqueResult()).intValue();
	}
"
net.jforum.repository.PostReportRepository.primitiveToWrapper,PostReportRepository.java,"Integer[] primitiveToWrapper(int... ids) {
		Integer[] wrapped = new Integer[ids.length];

		for (int i = 0; i < ids.length; i++) {
			wrapped[i] = Integer.valueOf(ids[i]);
		}

		return wrapped;
	}
"
net.jforum.repository.PostReportRepository.createGetAllQuery,PostReportRepository.java,"Query createGetAllQuery(PostReportStatus status, int... forumIds) {
		String query = ""select new PostReport(report.id, post.id, post.subject, post.topic.id, report.date, "" +
		""report.description, reportUser.username, reportUser.id, postUser.username, postUser.id, report.status)"" +
		"" from PostReport report "" +
		"" join report.user reportUser "" +
		"" join report.post post"" +
		"" join post.user postUser "" +
		"" where report.status = :status"";

		if (!ArrayUtils.isEmpty(forumIds)) {
			query += "" and post.forum.id in (:forumIds)"";
		}

		if (!ArrayUtils.isEmpty(forumIds)) {
			return session.createQuery(query)
				.setParameter(""status"", status)
				.setParameterList(""forumIds"", this.primitiveToWrapper(forumIds));
		}
		else {
			return session.createQuery(query).setParameter(""status"", status);
		}
	}
"
net.jforum.repository.ConfigRepository.update,ConfigRepository.java,"void update(Config entity) {
		session.saveOrUpdate(entity);
	}
"
net.jforum.repository.ConfigRepository.getByName,ConfigRepository.java,"Config getByName(String configName) {
		return (Config)session.createCriteria(this.persistClass)
			.add(Restrictions.eq(""name"", configName))
			.setCacheable(true)
			.setCacheRegion(""configDAO"")
			.setComment(""configDAO.getByName"")
			.uniqueResult();
	}
"
net.jforum.repository.ConfigRepository.getAll,ConfigRepository.java,"List<Config> getAll() {
		return session.createCriteria(this.persistClass).list();
	}
"
net.jforum.repository.RSSRepository.getForumTopics,RSSRepository.java,"List<Topic> getForumTopics(Forum forum, int count) {
		return session.createCriteria(Topic.class)
			.add(Restrictions.eq(""forum"", forum))
			.add(Restrictions.eq(""pendingModeration"", false))
			.addOrder(Order.desc(""date""))
			.setMaxResults(count)
			.setCacheable(true)
			.setCacheRegion(""rssDAO.getForumTopics#"" + forum.getId())
			.setComment(""rssDAO.getForumTopics#"" + forum.getId())
			.list();
	}
"
net.jforum.repository.TopicWatchRepository.getUsersWaitingNotification,TopicWatchRepository.java,"List<User> getUsersWaitingNotification(Topic topic) {
		List<User> users = session.createQuery(""select u from TopicWatch tw "" +
			"" inner join tw.user u where tw.topic = :topic "" +
			"" and (tw.read = true or u.notifyAlways = true)"")
			.setEntity(""topic"", topic)
			.setComment(""topicWatchDAO.getUsersWaitingNotification"")
			.list();

		if (users.size() > 0) {
			this.markAllAsUnread(topic);
		}

		return users;
	}
"
net.jforum.repository.TopicWatchRepository.getSubscription,TopicWatchRepository.java,"TopicWatch getSubscription(Topic topic, User user) {
		return (TopicWatch)session.createCriteria(this.persistClass)
			.add(Restrictions.eq(""topic"", topic))
			.add(Restrictions.eq(""user"", user))
			.setComment(""topicWatchDAO.isUserSubscribed"")
			.uniqueResult();
	}
"
net.jforum.repository.TopicWatchRepository.removeSubscription,TopicWatchRepository.java,"void removeSubscription(Topic topic, User user) {
		session.createQuery(""delete from TopicWatch tw where tw.topic = :topic and tw.user = :user"")
			.setEntity(""topic"", topic)
			.setEntity(""user"", user)
			.setComment(""topicWatchDAO.removeSubscriptionByUser"")
			.executeUpdate();
	}
"
net.jforum.repository.TopicWatchRepository.removeSubscription,TopicWatchRepository.java,"void removeSubscription(Topic topic) {
		session.createQuery(""delete from TopicWatch tw where tw.topic = :topic"")
			.setEntity(""topic"", topic)
			.setComment(""topicWatchDAO.removeSubscription"")
			.executeUpdate();
	}
"
net.jforum.repository.TopicWatchRepository.markAllAsUnread,TopicWatchRepository.java,"void markAllAsUnread(Topic topic) {
		session.createQuery(""update TopicWatch set read = false where topic = :topic"")
			.setEntity(""topic"", topic)
			.setComment(""topicWatchDAO.markAllAsRead"")
			.executeUpdate();
	}
"
net.jforum.repository.HibernateGenericDAO.remove,HibernateGenericDAO.java,"void remove(T entity) {
		session.delete(entity);
	}
"
net.jforum.repository.HibernateGenericDAO.get,HibernateGenericDAO.java,"T get(int id) {
		return (T)session.get(this.persistClass, id);
	}
"
net.jforum.repository.HibernateGenericDAO.add,HibernateGenericDAO.java,"void add(T entity) {
		session.save(entity);
	}
"
net.jforum.repository.HibernateGenericDAO.update,HibernateGenericDAO.java,"void update(T entity) {
		session.update(entity);
	}
"
net.jforum.repository.PostRepository.countPreviousPosts,PostRepository.java,"int countPreviousPosts(int postId) {
		return ((Long)session.createQuery(""select count(*) from Post p "" +
			""where p.topic = (select p2.topic from Post p2 where p2.id = :id) and p.id <= :id"")
			.setParameter(""id"", postId)
			.setComment(""postDAO.countPreviousPosts"")
			.uniqueResult()).intValue();
	}
"
net.jforum.repository.CategoryRepository.getForums,CategoryRepository.java,"List<Forum> getForums(Category category) {
		return session.createCriteria(Forum.class)
			.add(Restrictions.eq(""category"", category))
			.addOrder(Order.asc(""displayOrder""))
			.setCacheable(true)
			.setCacheRegion(""categoryDAO.getForums"")
			.setComment(""categoryDAO.getForums"")
			.list();
	}
"
net.jforum.repository.CategoryRepository.add,CategoryRepository.java,"void add(Category entity) {
		entity.setDisplayOrder(this.getMaxDisplayOrder());
		super.add(entity);
	}
"
net.jforum.repository.CategoryRepository.getAllCategories,CategoryRepository.java,"List<Category> getAllCategories() {
		return session.createCriteria(this.persistClass)
			.addOrder(Order.asc(""displayOrder""))
			.setCacheable(true)
			.setCacheRegion(""categoryDAO.getAllCategories"")
			.setComment(""categoryDAO.getAllCategories"")
			.list();
	}
"
net.jforum.repository.CategoryRepository.getMaxDisplayOrder,CategoryRepository.java,"int getMaxDisplayOrder() {
		Integer displayOrder = (Integer)session.createCriteria(this.persistClass)
			.setProjection(Projections.max(""displayOrder""))
			.uniqueResult();

		return displayOrder == null ? 1 : displayOrder + 1;
	}
"
net.jforum.repository.TopicRepository.remove,TopicRepository.java,"void remove(Topic entity) {
		List<Integer> users = session.createQuery(""select p.user.id from Post p where p.topic = :topic"")
			.setParameter(""topic"", entity)
			.list();

		if (users.size() == 0) {
			// If no users were found, it means that all posts were already deleted,
			// probably by post delete instead of topic delete. In such case, consider
			// that the user whe should decrement from is the one who created the topic
			users = Arrays.asList(entity.getUser().getId());
		}

		session.createQuery(""delete from Post where topic = :topic"")
			.setParameter(""topic"", entity)
			.executeUpdate();

		session.createQuery(""update User u set u.totalPosts = (select count(*) from Post p where p.user = u) "" +
			""where u.id in (:users)"")
			.setParameterList(""users"", users)
			.executeUpdate();

		super.remove(entity);
	}
"
net.jforum.repository.TopicRepository.getLastPost,TopicRepository.java,"Post getLastPost(Topic topic) {
		DetachedCriteria lastPost = DetachedCriteria.forClass(Post.class)
			.setProjection(Projections.max(""id""))
			.add(Restrictions.eq(""topic"", topic))
			.add(Restrictions.eq(""moderate"", false))
			.setComment(""topicDAO.getLastPostID"");

		return (Post)session.createCriteria(Post.class)
			.add(Subqueries.propertyEq(""id"", lastPost))
			.setComment(""topicDAO.getLastPost"")
			.uniqueResult();
	}
"
net.jforum.repository.TopicRepository.getTotalPosts,TopicRepository.java,"int getTotalPosts(Topic topic) {
		return (Integer)session.createCriteria(Post.class)
			.setProjection(Projections.rowCount())
			.add(Restrictions.eq(""topic"", topic))
			.add(Restrictions.eq(""moderate"", false))
			.setComment(""topicDAO.getTotalPosts"")
			.uniqueResult();
	}
"
net.jforum.repository.TopicRepository.getFirstPost,TopicRepository.java,"Post getFirstPost(Topic topic) {
		DetachedCriteria firstPost = DetachedCriteria.forClass(Post.class)
			.setProjection(Projections.min(""id""))
			.add(Restrictions.eq(""topic"", topic))
			.setComment(""topicDAO.getFirstPostID"");

		return (Post)session.createCriteria(Post.class)
			.add(Subqueries.propertyEq(""id"", firstPost))
			.setComment(""topicDAO.getFirstPost"")
			.uniqueResult();
	}
"
net.jforum.repository.TopicRepository.getPosts,TopicRepository.java,"List<Post> getPosts(Topic topic, int startFrom, int count) {
		return session.createQuery(""from Post p join fetch p.user user left join fetch user.avatar "" +
			"" where p.topic = :topic and p.moderate = false order by p.date asc"")
			.setParameter(""topic"", topic)
			.setFirstResult(startFrom)
			.setMaxResults(count)
			.setComment(""topicDAO.getPosts"")
			.list();
	}
"
net.jforum.repository.PrivateMessageRepository.add,PrivateMessageRepository.java,"void add(PrivateMessage entity) {
		PrivateMessage targetCopy = new PrivateMessage(entity);

		// First copy is to the sender's list
		entity.setType(PrivateMessageType.SENT);
		super.add(entity);

		// Second copy is the target
		targetCopy.setType(PrivateMessageType.NEW);
		super.add(targetCopy);
	}
"
net.jforum.repository.PrivateMessageRepository.getFromInbox,PrivateMessageRepository.java,"List<PrivateMessage> getFromInbox(User user) {
		return session.createCriteria(this.persistClass)
			.add(Restrictions.eq(""toUser"", user))
			.add(Restrictions.disjunction()
				.add(Restrictions.eq(""type"", PrivateMessageType.NEW))
				.add(Restrictions.eq(""type"", PrivateMessageType.READ))
				.add(Restrictions.eq(""type"", PrivateMessageType.UNREAD))
			)
			.setComment(""privateMessageDAO.getFromInbox"")
			.list();
	}
"
net.jforum.repository.PrivateMessageRepository.getFromSentBox,PrivateMessageRepository.java,"List<PrivateMessage> getFromSentBox(User user) {
		return session.createCriteria(this.persistClass)
			.add(Restrictions.eq(""fromUser"", user))
			.add(Restrictions.eq(""type"", PrivateMessageType.SENT))
			.setComment(""privateMessageDAO.getFromSentBox"")
			.list();
	}
"
net.jforum.repository.PrivateMessageRepository.update,PrivateMessageRepository.java,"void update(PrivateMessage entity) {
		throw new UnsupportedOperationException(""Update is not supported for Private Messages"");
	}
"
net.jforum.repository.SearchRepository.search,SearchRepository.java,"SearchResult search(SearchParams params) throws ParseException {
		String buildQuery = params.buildQuery();
		FullTextQuery query = this.createQuery(buildQuery);

		query.setFirstResult(params.getStart());
		query.setMaxResults(params.getMaxResults());
		query.setFetchSize(params.getMaxResults());

		if (params.getSort() == SearchSort.DATE) {
			query.setSort(new Sort(new SortField(""date"", params.getSortType() == SearchSortType.DESC)));
		}
		else if (params.getSort() == SearchSort.RELEVANCE) {
			query.setSort(Sort.RELEVANCE);
		}

		return new SearchResult(query.list(), query.getResultSize());
	}
"
net.jforum.repository.SearchRepository.createQuery,SearchRepository.java,"FullTextQuery createQuery(String criteria) throws ParseException {
		// FIXME: Should not hardcode the analyzer
		QueryParser parser = new QueryParser(""text"", new StandardAnalyzer());
		Query luceneQuery = parser.parse(criteria);

		return Search.createFullTextSession(session).createFullTextQuery(luceneQuery, Post.class);
	}
"
net.jforum.repository.AvatarRepository.getAll,AvatarRepository.java,"List<Avatar> getAll() {
		return session.createCriteria(this.persistClass)
			.setCacheable(true)
			.setCacheRegion(""avatarDAO"")
			.setComment(""avatarDAO.getAllAvatar"")
			.list();
	}
"
net.jforum.repository.AvatarRepository.getGalleryAvatar,AvatarRepository.java,"List<Avatar> getGalleryAvatar() {
		return this.getAllAvatars(AvatarType.AVATAR_GALLERY);
	}
"
net.jforum.repository.AvatarRepository.getUploadedAvatar,AvatarRepository.java,"List<Avatar> getUploadedAvatar() {
		return this.getAllAvatars(AvatarType.AVATAR_UPLOAD);
	}
"
net.jforum.repository.AvatarRepository.getAllAvatars,AvatarRepository.java,"List<Avatar> getAllAvatars(AvatarType type){
		return session.createCriteria(this.persistClass)
			.add(Restrictions.eq(""avatarType"", type))
			.setComment(""AvatarDAO.getAvatar."" + type)
			.list();
	}
"
net.jforum.repository.AvatarRepository.remove,AvatarRepository.java,"void remove(Avatar avatar) {
		Set<User> users = avatar.getUsers();

		if (users != null) {
			for(User user : users){
				user.setAvatar(null);
				session.save(user);
			}
		}

		super.remove(avatar);
	}
"
net.jforum.repository.GroupRepository.getAllGroups,GroupRepository.java,"List<Group> getAllGroups() {
		return session.createCriteria(this.persistClass).list();
	}
"
net.jforum.repository.GroupRepository.getByName,GroupRepository.java,"Group getByName(String groupName) {
		return (Group) session.createCriteria(this.persistClass)
			   .add(Restrictions.eq(""name"", groupName))
			   .uniqueResult();
	}
"
net.jforum.repository.GroupRepository.remove,GroupRepository.java,"void remove(Group group) {
		List<User> users = group.getUsers();
		for(User user : users){
			List<Group> groups = user.getGroups();
			groups.remove(group);
			session.save(user);
		}
		super.remove(group);
	}
"
net.jforum.repository.UserRepository.getByEmail,UserRepository.java,"User getByEmail(String email) {
		return (User)session.createCriteria(this.persistClass)
			.add(Restrictions.eq(""email"", email))
			.uniqueResult();
	}
"
net.jforum.repository.UserRepository.isUsernameAvailable,UserRepository.java,"boolean isUsernameAvailable(String username, String email) {
		return (Integer)session.createCriteria(User.class)
			.setProjection(Projections.rowCount())
			.add(Restrictions.or(
				Restrictions.eq(""username"", username).ignoreCase(),
				Restrictions.eq(""email"", email).ignoreCase())
			).uniqueResult() == 0;
	}
"
net.jforum.repository.UserRepository.getTotalUnreadPrivateMessages,UserRepository.java,"int getTotalUnreadPrivateMessages(User user) {
		return (Integer)session.createCriteria(PrivateMessage.class)
			.setProjection(Projections.rowCount())
			.add(Restrictions.eq(""toUser"", user))
			.add(Restrictions.eq(""type"", PrivateMessageType.NEW))
			.uniqueResult();
	}
"
net.jforum.repository.UserRepository.getTotalPosts,UserRepository.java,"int getTotalPosts(User user) {
		return (Integer)session.createCriteria(Post.class)
			.setProjection(Projections.rowCount())
			.add(Restrictions.eq(""user"", user))
			.uniqueResult();
	}
"
net.jforum.repository.UserRepository.getByUsername,UserRepository.java,"User getByUsername(String username){
		return (User)session.createCriteria(this.persistClass)
			.add(Restrictions.eq(""username"", username))
			.setComment(""userDAO.getByUsername"")
			.uniqueResult();
	}
"
net.jforum.repository.UserRepository.changeAllowAvatarState,UserRepository.java,"void changeAllowAvatarState(boolean allowAvatar, Group group) {
		session.createQuery(""update User u set avatarEnabled = :allow where :group in elements(u.groups)"")
			.setParameter(""allow"", allowAvatar)
			.setParameter(""group"", group)
			.executeUpdate();
	}
"
net.jforum.repository.UserRepository.findByUserName,UserRepository.java,"List<User> findByUserName(String username){
		return session.createCriteria(this.persistClass)
			.add(Restrictions.ilike(""username"", username, MatchMode.ANYWHERE))
			.addOrder(Order.asc(""username""))
			.setComment(""userDAO.findByUsername"")
			.list();
	}
"
net.jforum.repository.UserRepository.findByUserName,UserRepository.java,"List<User> findByUserName(String username, List<Group> filterGroups) {
		return session.createQuery(""select distinct u from User u left join fetch u.groups g "" +
			""where lower(u.username) like lower(:username) "" +
			""and g in (:groups) "" +
			""order by u.username"")
			.setParameter(""username"", ""%"" + username + ""%"")
			.setParameterList(""groups"", filterGroups)
			.list();
	}
"
net.jforum.repository.UserRepository.getAllUsers,UserRepository.java,"List<User> getAllUsers(int start, int count) {
		return session.createCriteria(this.persistClass)
			.addOrder(Order.asc(""username""))
			.setFirstResult(start)
			.setMaxResults(count)
			.setComment(""userDAO.getAllUsers"")
			.list();
	}
"
net.jforum.repository.UserRepository.getAllUsers,UserRepository.java,"List<User> getAllUsers(int start, int count, List<Group> filterGroups) {
		return session.createQuery(""select distinct u from User u join fetch u.groups g where g in(:groups)"")
			.setParameterList(""groups"", filterGroups)
			.list();
	}
"
net.jforum.repository.UserRepository.getLastRegisteredUser,UserRepository.java,"User getLastRegisteredUser(){
		return (User)session.createCriteria(this.persistClass)
			.addOrder(Order.desc(""registrationDate""))
			.setMaxResults(1)
			.setCacheable(true)
			.setCacheRegion(""userDAO.getLastRegisteredUser"")
			.setComment(""userDAO.getLastRegisteredUser"")
			.list().get(0);
	}
"
net.jforum.repository.UserRepository.getTotalUsers,UserRepository.java,"int getTotalUsers() {
		return (Integer)session.createCriteria(this.persistClass)
			.setProjection(Projections.rowCount())
			.setCacheable(true)
			.setCacheRegion(""userDAO.getTotalUsers"")
			.setComment(""userDAO.getTotalUsers"")
			.uniqueResult();
	}
"
net.jforum.repository.UserRepository.validateLogin,UserRepository.java,"User validateLogin(String username, String password) {
		return (User)session.createCriteria(this.persistClass)
			.add(Restrictions.eq(""username"", username))
			.add(Restrictions.eq(""password"", password))
			.setComment(""userDAO.validateLogin"")
			.uniqueResult();
	}
"
net.jforum.repository.UserRepository.validateLostPasswordHash,UserRepository.java,"User validateLostPasswordHash(String username, String hash) {
		return (User)session.createCriteria(this.persistClass)
			.add(Restrictions.eq(""activationKey"", hash))
			.add(Restrictions.eq(""username"", username))
			.uniqueResult();
	}
"
net.jforum.repository.UserRepository.getTotalTopics,UserRepository.java,"int getTotalTopics(int userId) {
		return (Integer) session.createCriteria(Topic.class)
			.setProjection(Projections.rowCount())
			.add(Restrictions.eq(""user.id"", userId))
			.uniqueResult();
	}
"
net.jforum.repository.UserRepository.getPosts,UserRepository.java,"List<Post> getPosts(User user, int start, int recordsPerPage) {
		return session.createCriteria(Post.class)
				.add(Restrictions.eq(""user"", user))
				.add(Restrictions.eq(""moderate"", false))
				.addOrder(Order.desc(""id""))
				.setFirstResult(start)
				.setMaxResults(recordsPerPage)
				.list();
	}
"
net.jforum.repository.UserRepository.getTopics,UserRepository.java,"List<Topic> getTopics(User user, int start, int recordsPerPage) {
		return session.createCriteria(Topic.class)
			.add(Restrictions.eq(""user"", user))
			.add(Restrictions.eq(""pendingModeration"", false))
			.addOrder(Order.desc(""id""))
			.setFirstResult(start)
			.setMaxResults(recordsPerPage)
			.list();
	}
"
net.jforum.repository.SessionRepository.add,SessionRepository.java,"void add(Session entity) {
		session.saveOrUpdate(entity);
	}
"
net.jforum.repository.SessionRepository.update,SessionRepository.java,"void update(Session entity) {
		session.saveOrUpdate(entity);
	}
"
net.jforum.repository.PollRepository.registerVote,PollRepository.java,"void registerVote(PollVoter voter) {
		session.save(voter);
	}
"
net.jforum.repository.PollRepository.hasUserVoted,PollRepository.java,"boolean hasUserVoted(Poll poll, User user) {
		return session.createQuery(""from PollVoter voter where voter.user = :user and voter.poll = :poll"")
			.setParameter(""user"", user)
			.setParameter(""poll"", poll)
			.uniqueResult() != null;
	}
"
net.jforum.repository.PollRepository.getOption,PollRepository.java,"PollOption getOption(int optionId) {
		return (PollOption)session.createQuery(""from PollOption o where o.id = :id"")
			.setParameter(""id"", optionId)
			.uniqueResult();
	}
"
net.jforum.repository.SmilieRepository.getAllSmilies,SmilieRepository.java,"List<Smilie> getAllSmilies() {
		return session.createCriteria(this.persistClass)
			.setCacheable(true)
			.setCacheRegion(""smilieDAO"")
			.setComment(""smilieDAO.getAllSmilies"")
			.list();
	}
"
net.jforum.repository.BanlistRepository.getAllBanlists,BanlistRepository.java,"List<Banlist> getAllBanlists() {
		return session.createCriteria(this.persistClass).list();
	}
"
net.jforum.repository.RecentTopicsRepository.getNewTopics,RecentTopicsRepository.java,"List<Topic> getNewTopics(int count) {
		return session.createCriteria(this.persistClass)
			.add(Restrictions.eq(""pendingModeration"", false))
			.addOrder(Order.desc(""id""))
			.setMaxResults(count)
			.setCacheable(true)
			.setCacheRegion(""recentTopicsDAO"")
			.setComment(""recentTopicsDAO.getRecentTopics"")
			.list();
	}
"
net.jforum.repository.RecentTopicsRepository.getUpdatedTopics,RecentTopicsRepository.java,"List<Topic> getUpdatedTopics(int count) {
		return session.createCriteria(this.persistClass)
			.add(Restrictions.eq(""pendingModeration"", false))
			.createAlias(""lastPost"", ""lastPost"")
			.addOrder(Order.desc(""lastPost.id""))
			.setMaxResults(count)
			.setCacheable(true)
			.setCacheRegion(""recentTopicsDAO"")
			.setComment(""recentTopicsDAO.getRecentTopics"")
			.list();
	}
"
net.jforum.repository.RecentTopicsRepository.getHotTopics,RecentTopicsRepository.java,"List<Topic> getHotTopics(int count) {
		return session.createCriteria(this.persistClass)
			.add(Restrictions.eq(""pendingModeration"", false))
			.createAlias(""lastPost"", ""lastPost"")
			.addOrder(Order.desc(""totalReplies""))
			.setMaxResults(count)
			.setCacheable(true)
			.setCacheRegion(""recentTopicsDAO"")
			.setComment(""recentTopicsDAO.getRecentTopics"")
			.list();
	}
"
net.jforum.core.VRaptorCustomPathResolver.getPrefix,VRaptorCustomPathResolver.java,"String getPrefix() {
		return config.getValue(ConfigKeys.TEMPLATE_DIRECTORY);
	}
"
net.jforum.core.VRaptorSpringProvider.registerCustomComponents,VRaptorSpringProvider.java,"void registerCustomComponents(ComponentRegistry registry) {
		registry.register(SessionCreator.class, SessionCreator.class);
		registry.register(SessionFactoryCreator.class, SessionFactoryCreator.class);
		registry.register(HibernateTransactionInterceptor.class, HibernateTransactionInterceptor.class);
	}
"
net.jforum.core.VRaptorSpringProvider.getParentApplicationContext,VRaptorSpringProvider.java,"ConfigurableWebApplicationContext getParentApplicationContext(ServletContext context) {
		ConfigurableWebApplicationContext springContext = super.getParentApplicationContext(context);
		context.setAttribute(ConfigKeys.SPRING_CONTEXT, springContext);
		return springContext;
	}
"
net.jforum.core.SessionManager.add,SessionManager.java,"void add(UserSession userSession) {
		if (StringUtils.isEmpty(userSession.getSessionId())) {
			throw new ForumException(""An UserSession instance must have a session ID"");
		}

		if (!userSession.isBot()) {
			this.preventDuplicates(userSession);

			if (userSession.getUser().getId() == this.config.getInt(ConfigKeys.ANONYMOUS_USER_ID)) {
				anonymousSessions.put(userSession.getSessionId(), userSession);
			}
			else {
				UserSession existing = this.isUserInSession(userSession.getUser().getId());

				if (existing != null) {
					userSession.setLastVisit(existing.getLastVisit());
					this.remove(existing.getSessionId());
				}
				else {
					Session session = this.sessionRepository.get(userSession.getUser().getId());

					if (session != null && session.getLastVisit() != null) {
						userSession.setLastVisit(session.getLastVisit().getTime());
					}
				}

				this.checkIfIsModerator(userSession);

				loggedSessions.put(userSession.getSessionId(), userSession);
			}
		}
	}
"
net.jforum.core.SessionManager.checkIfIsModerator,SessionManager.java,"void checkIfIsModerator(UserSession userSession) {
		RoleManager roleManager = new RoleManager();
		roleManager.setGroups(userSession.getUser().getGroups());

		if (roleManager.isModerator()) {
			this.moderatorsOnline++;
		}
	}
"
net.jforum.core.SessionManager.computeAllOnlineModerators,SessionManager.java,"void computeAllOnlineModerators() {
		this.moderatorsOnline = 0;
		Collection<UserSession> sessions = loggedSessions.values();

		for (UserSession session : sessions) {
			this.checkIfIsModerator(session);
		}
	}
"
net.jforum.core.SessionManager.isModeratorOnline,SessionManager.java,"boolean isModeratorOnline() {
		return this.moderatorsOnline > 0;
	}
"
net.jforum.core.SessionManager.preventDuplicates,SessionManager.java,"void preventDuplicates(UserSession us) {
		if (this.getUserSession(us.getSessionId()) != null) {
			this.remove(us.getSessionId());
		}
	}
"
net.jforum.core.SessionManager.remove,SessionManager.java,"void remove(String sessionId) {
		if (loggedSessions.containsKey(sessionId)) {
			UserSession userSession = this.getUserSession(sessionId);

			if (userSession.getRoleManager() != null
				&& userSession.getRoleManager().isModerator() && this.moderatorsOnline > 0) {
				this.moderatorsOnline--;
			}

			loggedSessions.remove(sessionId);
		}
		else {
			anonymousSessions.remove(sessionId);
		}
	}
"
net.jforum.core.SessionManager.getAllSessions,SessionManager.java,"List<UserSession> getAllSessions() {
		List<UserSession> list = new ArrayList<UserSession>(loggedSessions.values());
		list.addAll(anonymousSessions.values());

		return list;
	}
"
net.jforum.core.SessionManager.getLoggedSessions,SessionManager.java,"Collection<UserSession> getLoggedSessions() {
		return loggedSessions.values();
	}
"
net.jforum.core.SessionManager.getTotalLoggedUsers,SessionManager.java,"int getTotalLoggedUsers() {
		return loggedSessions.size();
	}
"
net.jforum.core.SessionManager.getTotalAnonymousUsers,SessionManager.java,"int getTotalAnonymousUsers() {
		return anonymousSessions.size();
	}
"
net.jforum.core.SessionManager.getUserSession,SessionManager.java,"UserSession getUserSession(String sessionId) {
		UserSession us = anonymousSessions.get(sessionId);
		return us != null ? us : loggedSessions.get(sessionId);
	}
"
net.jforum.core.SessionManager.getTotalUsers,SessionManager.java,"int getTotalUsers() {
		return anonymousSessions.size() + loggedSessions.size();
	}
"
net.jforum.core.SessionManager.isUserInSession,SessionManager.java,"UserSession isUserInSession(int userId) {
		for (UserSession us : loggedSessions.values()) {
			if (us.getUser().getId() == userId) {
				return us;
			}
		}

		return null;
	}
"
net.jforum.core.SessionManager.refreshSession,SessionManager.java,"UserSession refreshSession(UserSession userSession) {
		boolean isSSOAuthentication = ConfigKeys.TYPE_SSO.equals(this.config.getValue(ConfigKeys.AUTHENTICATION_TYPE));
		userSession.getRequest().setAttribute(""sso"", isSSOAuthentication);
		userSession.getRequest().setAttribute(""ssoLogout"", this.config.getValue(ConfigKeys.SSO_LOGOUT));

		int anonymousUserId = this.config.getInt(ConfigKeys.ANONYMOUS_USER_ID);

		if (this.getUserSession(userSession.getRequest().getSession().getId()) == null) {
			userSession.setSessionId(userSession.getRequest().getSession().getId());
			userSession.setCreationTime(System.currentTimeMillis());

			//if (!JForumExecutionContext.getForumContext().isBot()) {
			if (true) {
				if (isSSOAuthentication) {
					this.checkSSO(userSession);
				}
				else {
					boolean autoLoginEnabled = this.config.getBoolean(ConfigKeys.AUTO_LOGIN_ENABLED);
					boolean autoLoginSuccess = autoLoginEnabled && this.checkAutoLogin(userSession);

					if (!autoLoginSuccess) {
						userSession.becomeAnonymous(anonymousUserId);
						userSession.setUser(this.userRepository.get(anonymousUserId));
					}
				}
			}

			this.add(userSession);

			logger.info(""Registered new userSession: "" + userSession.getSessionId());
		}
		else {
			// FIXME: Force a reload of the user instance, because if it's kept in the usersession,
			// changes made to the group (like permissions) won't be seen.
			userSession.setUser(this.userRepository.get(userSession.getUser().getId()));
		}

		userSession.ping();

		if (userSession.getUser() == null || userSession.getUser().getId() == 0) {
			logger.warn(""After userSession.ping() -> userSession.getUser returned null or user.id is zero. "" +
				""User is null? "" + ( userSession.getUser() == null ) + "". user.id is: ""
					+ (userSession.getUser() == null ? ""getUser() returned null"" : userSession.getUser().getId())
					+ "". As we have a problem, will force the user to become anonymous. Session ID: "" + userSession.getSessionId());
			userSession.becomeAnonymous(anonymousUserId);

			User anonymousUser = this.userRepository.get(userSession.getUser().getId());

			if (anonymousUser == null) {
				logger.warn(""Could not find the anonymous user in the database. Tried using id "" + anonymousUserId);
			}
			else {
				userSession.setUser(anonymousUser);
			}
		}

		RoleManager roleManager = new RoleManager();

		if (userSession.getUser() != null) {
			roleManager.setGroups(userSession.getUser().getGroups());
		}
		else {
			logger.warn(""At last step userSession.getUser() still returned null. Ignoring the roles. Session ID: "" + userSession.getSessionId());
		}

		userSession.setRoleManager(roleManager);

		return userSession;
	}

	/**
	 * Persist the user session to the database
	 * @param sessionId the id of the session to persist
	 */
	public void storeSession(String sessionId) {
		UserSession userSession = this.getUserSession(sessionId);

		if (userSession != null && userSession.getUser().getId() != this.config.getInt(ConfigKeys.ANONYMOUS_USER_ID)) {
			Session session = userSession.asSession();
			session.setLastVisit(session.getLastAccessed());
			this.sessionRepository.add(session);
		}
	}

	/**
	 * Checks user credentials / automatic login.
	 *
	 * @param userSession The UserSession instance associated to the user's session
	 * @return <code>true</code> if auto login was enabled and the user was sucessfuly logged in.
	 */
	private boolean checkAutoLogin(UserSession userSession) {
		Cookie userIdCookie = userSession.getCookie(this.config.getValue(ConfigKeys.COOKIE_USER_ID));
		Cookie hashCookie = userSession.getCookie(this.config.getValue(ConfigKeys.COOKIE_USER_HASH));
		Cookie autoLoginCookie = userSession.getCookie(this.config.getValue(ConfigKeys.COOKIE_AUTO_LOGIN));

		if (hashCookie != null && userIdCookie != null
				&& !userIdCookie.getValue().equals(this.config.getValue(ConfigKeys.ANONYMOUS_USER_ID))
				&& autoLoginCookie != null && ""1"".equals(autoLoginCookie.getValue())) {
			String userId = userIdCookie.getValue();
			String uidHash = hashCookie.getValue();

			User user = this.userRepository.get(Integer.parseInt(userId));

			if (user == null || user.isDeleted() || StringUtils.isEmpty(user.getSecurityHash())) {
				userSession.becomeAnonymous(this.config.getInt(ConfigKeys.ANONYMOUS_USER_ID));
				return false;
			}

			String securityHash = MD5.hash(user.getSecurityHash());

			if (!securityHash.equals(uidHash)) {
				userSession.becomeAnonymous(this.config.getInt(ConfigKeys.ANONYMOUS_USER_ID));
				return false;
			}
			else {
				userSession.setUser(user);
				this.configureUserSession(userSession, user);
				return true;
			}
		}

		return false;
	}

	/**
	 * Setup optios and values for the user's session if authentication was ok.
	 *
	 * @param userSession The UserSession instance of the user
	 * @param user The User instance of the authenticated user
	 */
	private void configureUserSession(UserSession userSession, User user) {
		userSession.setUser(user);
		userSession.becomeLogged();
	}

	/**
	 * Checks for user authentication using some SSO implementation
	 *
	 * @param userSession UserSession
	 * @param request TODO
	 */
	private void checkSSO(UserSession userSession) {
		try {
			SSO sso = (SSO)Class.forName(this.config.getValue(ConfigKeys.SSO_IMPLEMENTATION)).newInstance();
			sso.setConfig(this.config);
			String username = sso.authenticateUser(userSession.getRequest());

			logger.info(String.format(""SSO authenticated an user with username %s. Session ID %s"", username, userSession.getSessionId()));

			if (StringUtils.isEmpty(username)) {
				logger.warn(String.format(""checkSSO found an empty / null username. Going anonymous. Session ID %s"", userSession.getSessionId()));
				userSession.becomeAnonymous(this.config.getInt(ConfigKeys.ANONYMOUS_USER_ID));
			}
			else {
				SSOUtils utils = new SSOUtils(this.userRepository);
				boolean userExists = utils.userExists(username);

				logger.info(String.format(""SSO user %s exists? %s"", username, userExists));

				if (!userExists) {
					String email = (String)userSession.getAttribute(
						this.config.getValue(ConfigKeys.SSO_EMAIL_ATTRIBUTE));

					String password = (String)userSession.getAttribute(
						this.config.getValue(ConfigKeys.SSO_PASSWORD_ATTRIBUTE));

					if (email == null) {
						email = this.config.getValue(ConfigKeys.SSO_DEFAULT_EMAIL);
					}

					if (password == null) {
						password = this.config.getValue(ConfigKeys.SSO_DEFAULT_PASSWORD);
					}

					utils.register(password, email);
				}

				User user = utils.getUser();

				logger.info(String.format(""g: username=%s, jforumUserId=%s"",
					user != null ? user.getUsername() : ""returned null"",
					user != null ? user.getId() : ""returned null""));

				this.configureUserSession(userSession, user);

				if (user == null || user.getId() == 0) {
					logger.warn(""checkSSO -> utils.getUser() returned null or user.id is zero"");
				}
			}
		}
		catch (Exception e) {
			e.printStackTrace();
			throw new ForumException(""Error while executing SSO actions: "" + e, e);
		}
	}
	
	protected void reinitialiseAllSessions() {
		loggedSessions = new HashMap<String, UserSession>();
		anonymousSessions = new HashMap<String, UserSession>();
	}
}
"
net.jforum.core.SessionManager.storeSession,SessionManager.java,"void storeSession(String sessionId) {
		UserSession userSession = this.getUserSession(sessionId);

		if (userSession != null && userSession.getUser().getId() != this.config.getInt(ConfigKeys.ANONYMOUS_USER_ID)) {
			Session session = userSession.asSession();
			session.setLastVisit(session.getLastAccessed());
			this.sessionRepository.add(session);
		}
	}
"
net.jforum.core.SessionManager.checkAutoLogin,SessionManager.java,"boolean checkAutoLogin(UserSession userSession) {
		Cookie userIdCookie = userSession.getCookie(this.config.getValue(ConfigKeys.COOKIE_USER_ID));
		Cookie hashCookie = userSession.getCookie(this.config.getValue(ConfigKeys.COOKIE_USER_HASH));
		Cookie autoLoginCookie = userSession.getCookie(this.config.getValue(ConfigKeys.COOKIE_AUTO_LOGIN));

		if (hashCookie != null && userIdCookie != null
				&& !userIdCookie.getValue().equals(this.config.getValue(ConfigKeys.ANONYMOUS_USER_ID))
				&& autoLoginCookie != null && ""1"".equals(autoLoginCookie.getValue())) {
			String userId = userIdCookie.getValue();
			String uidHash = hashCookie.getValue();

			User user = this.userRepository.get(Integer.parseInt(userId));

			if (user == null || user.isDeleted() || StringUtils.isEmpty(user.getSecurityHash())) {
				userSession.becomeAnonymous(this.config.getInt(ConfigKeys.ANONYMOUS_USER_ID));
				return false;
			}

			String securityHash = MD5.hash(user.getSecurityHash());

			if (!securityHash.equals(uidHash)) {
				userSession.becomeAnonymous(this.config.getInt(ConfigKeys.ANONYMOUS_USER_ID));
				return false;
			}
			else {
				userSession.setUser(user);
				this.configureUserSession(userSession, user);
				return true;
			}
		}

		return false;
	}
"
net.jforum.core.SessionManager.configureUserSession,SessionManager.java,"void configureUserSession(UserSession userSession, User user) {
		userSession.setUser(user);
		userSession.becomeLogged();
	}
"
net.jforum.core.SessionManager.checkSSO,SessionManager.java,"void checkSSO(UserSession userSession) {
		try {
			SSO sso = (SSO)Class.forName(this.config.getValue(ConfigKeys.SSO_IMPLEMENTATION)).newInstance();
			sso.setConfig(this.config);
			String username = sso.authenticateUser(userSession.getRequest());

			logger.info(String.format(""SSO authenticated an user with username %s. Session ID %s"", username, userSession.getSessionId()));

			if (StringUtils.isEmpty(username)) {
				logger.warn(String.format(""checkSSO found an empty / null username. Going anonymous. Session ID %s"", userSession.getSessionId()));
				userSession.becomeAnonymous(this.config.getInt(ConfigKeys.ANONYMOUS_USER_ID));
			}
			else {
				SSOUtils utils = new SSOUtils(this.userRepository);
				boolean userExists = utils.userExists(username);

				logger.info(String.format(""SSO user %s exists? %s"", username, userExists));

				if (!userExists) {
					String email = (String)userSession.getAttribute(
						this.config.getValue(ConfigKeys.SSO_EMAIL_ATTRIBUTE));

					String password = (String)userSession.getAttribute(
						this.config.getValue(ConfigKeys.SSO_PASSWORD_ATTRIBUTE));

					if (email == null) {
						email = this.config.getValue(ConfigKeys.SSO_DEFAULT_EMAIL);
					}

					if (password == null) {
						password = this.config.getValue(ConfigKeys.SSO_DEFAULT_PASSWORD);
					}

					utils.register(password, email);
				}

				User user = utils.getUser();

				logger.info(String.format(""g: username=%s, jforumUserId=%s"",
					user != null ? user.getUsername() : ""returned null"",
					user != null ? user.getId() : ""returned null""));

				this.configureUserSession(userSession, user);

				if (user == null || user.getId() == 0) {
					logger.warn(""checkSSO -> utils.getUser() returned null or user.id is zero"");
				}
			}
		}
		catch (Exception e) {
			e.printStackTrace();
			throw new ForumException(""Error while executing SSO actions: "" + e, e);
		}
	}
"
net.jforum.core.SessionManager.reinitialiseAllSessions,SessionManager.java,"void reinitialiseAllSessions() {
		loggedSessions = new HashMap<String, UserSession>();
		anonymousSessions = new HashMap<String, UserSession>();
	}
"
net.jforum.core.UserSessionListener.sessionDestroyed,UserSessionListener.java,"void sessionDestroyed(HttpSessionEvent event) {
		HttpSession session = event.getSession();

		if (session == null) {
			return;
		}

		logger.info(""Destroying session "" + session.getId());

		ApplicationContext beanFactory = (ApplicationContext)event.getSession().getServletContext()
			.getAttribute(ConfigKeys.SPRING_CONTEXT);

		if (beanFactory == null) {
			logger.warn(""Spring Context was not found. This may cause problems with unregistered user sessions"");
		}
		else {
			String sessionId = session.getId();

			SessionManager sessionManager = beanFactory.getBean(SessionManager.class);

			try {
				sessionManager.storeSession(sessionId);
			}
			catch (Exception e) { }

			sessionManager.remove(sessionId);
		}
	}
"
net.jforum.core.UrlPattern.processPattern,UrlPattern.java,"void processPattern() {
		String[] p = this.value.split("","");

		this.vars = new String[p.length];
		this.size = ((((p[0]).trim()).equals("""")) ? 0 : p.length);

		for (int i = 0; i < this.size; i++) {
			this.vars[i] = (p[i]).trim();
		}
	}
"
net.jforum.core.UrlPattern.getSize,UrlPattern.java,"int getSize() {
		return this.size;
	}
"
net.jforum.core.UrlPattern.getVars,UrlPattern.java,"String[] getVars() {
		return this.vars;
	}
"
net.jforum.core.tags.I18nTag.doTag,I18nTag.java,"void doTag() throws JspException, IOException {
		if (this.params.size() == 0) {
			String message = i18n.getMessage(this.key);

			if (message == null) {
				throw new IllegalArgumentException(this.key + "" was not found"");
			}

			this.write(message);
		}
		else {
			String message = i18n.getFormattedMessage(this.key, this.params.toArray());

			if (message == null) {
				throw new IllegalArgumentException(this.key + "" was not found"");
			}

			this.write(message);
		}
	}
"
net.jforum.core.tags.I18nTag.setKey,I18nTag.java,"void setKey(String key) {
		this.key = key;
	}
"
net.jforum.core.tags.I18nTag.setDynamicAttribute,I18nTag.java,"void setDynamicAttribute(String uri, String localName, Object value) throws JspException {
		params.add(value);
	}
"
net.jforum.core.tags.URLTag.doTag,URLTag.java,"void doTag() throws JspException, IOException {

		StringBuilder urlBuilder = new StringBuilder(128).append(this.request().getContextPath());

		if (!encode) {
			urlBuilder.append(this.address);
		}
		else {
			if (this.address == null) {
				this.address = """";
			}

			String[] addresses = this.address.split(""/"");

			for (String _address : addresses) {
				if (StringUtils.isNotEmpty(_address)) {
					urlBuilder.append(""/"").append(URLEncoder.encode(_address, URL_ENCODE));
				}
			}
		}

		this.write(this.response().encodeURL(urlBuilder.toString()));
	}
"
net.jforum.core.tags.URLTag.setAddress,URLTag.java,"void setAddress(String address) {
		this.address = address;
	}
"
net.jforum.core.tags.URLTag.setEncode,URLTag.java,"void setEncode(boolean encode) {
		this.encode = encode;
	}
"
net.jforum.core.tags.DisplayFormattedMessageTag.doTag,DisplayFormattedMessageTag.java,"void doTag() throws JspException, IOException {
		if (this.post == null && !StringUtils.isEmpty(this.rawMessage)) {
			this.post = new Post();
			this.post.setText(this.rawMessage);
		}

		if (post == null) {
			return;
		}

		String text = post.getText();
		PostOptions options = new PostOptions(this.post.isHtmlEnabled(),
			this.post.isSmiliesEnabled(), this.post.isBbCodeEnabled(),
			this.post.isSignatureEnabled(), this.request().getContextPath());

		for (Formatter formatter : formatters) {
			text = formatter.format(text, options);
		}

		this.write(text);
	}
"
net.jforum.core.tags.DisplayFormattedMessageTag.setPost,DisplayFormattedMessageTag.java,"void setPost(Post post) {
		this.post = post;
	}
"
net.jforum.core.tags.DisplayFormattedMessageTag.setRawMessage,DisplayFormattedMessageTag.java,"void setRawMessage(String message) {
		this.rawMessage = message;
	}
"
net.jforum.core.tags.ImportResponseWrapper.write,ImportResponseWrapper.java,"void write(int b) throws IOException {
			bos.write(b);
		}
"
net.jforum.core.tags.ImportResponseWrapper.getWriter,ImportResponseWrapper.java,"PrintWriter getWriter() {
		if (isStreamUsed)
			throw new IllegalStateException(Resources
					.getMessage(""IMPORT_ILLEGAL_STREAM""));
		isWriterUsed = true;
		return new PrintWriter(sw);
	}
"
net.jforum.core.tags.ImportResponseWrapper.getOutputStream,ImportResponseWrapper.java,"ServletOutputStream getOutputStream() {
		if (isWriterUsed)
			throw new IllegalStateException(Resources
					.getMessage(""IMPORT_ILLEGAL_WRITER""));
		isStreamUsed = true;
		return sos;
	}
"
net.jforum.core.tags.ImportResponseWrapper.setStatus,ImportResponseWrapper.java,"void setStatus(int status) {
		this.status = status;
	}
"
net.jforum.core.tags.ImportResponseWrapper.getStatus,ImportResponseWrapper.java,"int getStatus() {
		return status;
	}
"
net.jforum.core.tags.ImportResponseWrapper.getCharEncoding,ImportResponseWrapper.java,"String getCharEncoding() {
		return charEncoding;
	}
"
net.jforum.core.tags.ImportResponseWrapper.setCharEncoding,ImportResponseWrapper.java,"void setCharEncoding(String charEncoding) {
		this.charEncoding = charEncoding;
	}
"
net.jforum.core.tags.ImportResponseWrapper.getString,ImportResponseWrapper.java,"String getString() throws UnsupportedEncodingException {
		if (isWriterUsed)
			return sw.toString();
		else if (isStreamUsed) {
			if (charEncoding != null && !charEncoding.equals(""""))
				return bos.toString(charEncoding);
			else
				return bos.toString(DEFAULT_ENCODING);
		} else
			return """"; // target didn't write anything
	}
"
net.jforum.core.tags.Functions.contains,Functions.java,"boolean contains(List<?> list, Object element) {
		return list.contains(element);
	}
"
net.jforum.core.tags.Functions.rankingTitle,Functions.java,"String rankingTitle(List<Ranking> rankings, User user) {
		if (user.getTotalPosts() == 0) {
			return """";
		}

		if (user.getRanking() != null && user.getRanking().isSpecial()) {
			return user.getRanking().getTitle();
		}

		Ranking lastRanking = new Ranking();

		for (Ranking ranking : rankings) {
			if (user.getTotalPosts() == ranking.getMin() && !ranking.isSpecial()) {
				return ranking.getTitle();
			}
			else if (user.getTotalPosts() > lastRanking.getMin() && user.getTotalPosts() < ranking.getMin()) {
				return lastRanking.getTitle();
			}

			lastRanking = ranking;
		}

		return lastRanking.getTitle();
	}
"
net.jforum.core.tags.Functions.lastPage,Functions.java,"int lastPage(int totalPosts, int postsPerPage) {
		return (int)Math.ceil((double)totalPosts / (double)postsPerPage);
	}
"
net.jforum.core.tags.ImportFileTag.setCharEncoding,ImportFileTag.java,"void setCharEncoding(String charEncoding) {
		this.charEncoding = charEncoding;
	}
"
net.jforum.core.tags.ImportFileTag.setUrl,ImportFileTag.java,"void setUrl(String url) {
		this.url = url;
	}
"
net.jforum.core.tags.ImportFileTag.doTag,ImportFileTag.java,"void doTag() throws JspException, IOException {
		// check the URL
		if (StringUtils.isEmpty(url))
		    throw new NullAttributeException(""import"", ""url"");
		
		String jsp = this.getFile(url);
		
		ServletRequest request  = this.request();
		ServletResponse respose = this.response();
		HttpSession session = ((HttpServletRequest)request).getSession();
		ServletContext servletContext = session.getServletContext();
		
		String jspPath = servletContext.getRealPath(jsp);
		File jspFile = new File(jspPath);
		if(!jspFile.exists())
			return ;
		
		respose.flushBuffer();
		RequestDispatcher rd = this.pageContext().getRequest().getRequestDispatcher(jsp);
		try {
			 // include the resource, using our custom wrapper
		    ImportResponseWrapper irw = new ImportResponseWrapper((HttpServletResponse) respose);
		    irw.setCharacterEncoding(charEncoding);
			rd.include(request, irw);
			// disallow inappropriate response codes per JSTL spec
		    if (irw.getStatus() < 200 || irw.getStatus() > 299) {
		    	throw new JspTagException(irw.getStatus() + "" "" + jsp);
		    }

		    // recover the response String from our wrapper
		    pageContext().getOut().print(irw.getString());
		} catch (ServletException e) {
			e.printStackTrace();
		}
	}
"
net.jforum.core.tags.ImportFileTag.getFile,ImportFileTag.java,"String getFile(String item){
		return new StringBuilder(128)
		.append('/').append(this.config().getValue(ConfigKeys.TEMPLATE_DIRECTORY)).append('/')
		.append(this.config().getValue(ConfigKeys.TEMPLATE_NAME))
		.append(item)
		.toString();
	}
"
net.jforum.core.tags.TemplateResourceTag.doTag,TemplateResourceTag.java,"void doTag() throws IOException {
		String path = new StringBuilder(128)
			.append(this.request().getContextPath())
			.append(config().getValue(ConfigKeys.TEMPLATE_DIRECTORY))
			.append(this.item)
			.toString();

		this.write(path);
	}
"
net.jforum.core.tags.TemplateResourceTag.setItem,TemplateResourceTag.java,"void setItem(String item) {
		this.item = item;
	}
"
net.jforum.core.tags.FormatSignatureTag.doTag,FormatSignatureTag.java,"void doTag() throws JspException, IOException {
		PostOptions options = new PostOptions(false, true, true, false, this.request().getContextPath());

		for (Formatter formatter : formatters) {
			signature = formatter.format(signature, options);
		}

		this.write(signature);
	}
"
net.jforum.core.tags.FormatSignatureTag.setSignature,FormatSignatureTag.java,"void setSignature(String signature) {
		this.signature = signature;
	}
"
net.jforum.core.tags.SettingsTag.doTag,SettingsTag.java,"void doTag() throws JspException, IOException {
		this.write(this.config().getValue(this.key));
	}
"
net.jforum.core.tags.SettingsTag.setKey,SettingsTag.java,"void setKey(String key) {
		this.key = key;
	}
"
net.jforum.core.tags.JForumTag.request,JForumTag.java,"HttpServletRequest request() {
		return (HttpServletRequest)this.pageContext().getRequest();
	}
"
net.jforum.core.tags.JForumTag.setAttribute,JForumTag.java,"void setAttribute(String key, Object value) {
		this.request().setAttribute(key, value);
	}
"
net.jforum.core.tags.JForumTag.response,JForumTag.java,"HttpServletResponse response() {
		return (HttpServletResponse)this.pageContext().getResponse();
	}
"
net.jforum.core.tags.JForumTag.config,JForumTag.java,"JForumConfig config() {
		return this.getBean(JForumConfig.class);
	}
"
net.jforum.core.tags.JForumTag.write,JForumTag.java,"void write(String content) throws IOException {
		this.pageContext().getOut().write(content);
	}
"
net.jforum.core.tags.JForumTag.invokeJspBody,JForumTag.java,"void invokeJspBody() throws JspException, IOException {
		this.getJspBody().invoke(this.pageContext().getOut());
	}
"
net.jforum.core.tags.JForumTag.getBean,JForumTag.java,"<T> T getBean(Class<T> beanId) {
		if (springContext == null) {
			springContext = (ApplicationContext)this.pageContext().getServletContext().getAttribute(ConfigKeys.SPRING_CONTEXT);
		}

		return springContext != null
			? springContext.getBean(beanId)
			: null;
	}
"
net.jforum.core.tags.JForumTag.pageContext,JForumTag.java,"PageContext pageContext() {
		return (PageContext)this.getJspContext();
	}
"
net.jforum.core.tags.DisplayCategoriesTag.doTag,DisplayCategoriesTag.java,"void doTag() throws JspException, IOException {
		for (Category category : this.categories) {
			if (this.roleManager.isCategoryAllowed(category.getId())) {
				this.setAttribute(var, category);
				this.invokeJspBody();
			}
		}
	}
"
net.jforum.core.tags.DisplayCategoriesTag.setVar,DisplayCategoriesTag.java,"void setVar(String var) {
		this.var = var;
	}
"
net.jforum.core.tags.DisplayCategoriesTag.setRoleManager,DisplayCategoriesTag.java,"void setRoleManager(RoleManager roleManager) {
		this.roleManager = roleManager;
	}
"
net.jforum.core.tags.DisplayCategoriesTag.setItems,DisplayCategoriesTag.java,"void setItems(List<Category> categories) {
		this.categories = categories;
	}
"
net.jforum.core.tags.DisplayForumsTag.doTag,DisplayForumsTag.java,"void doTag() throws JspException, IOException {
		int counter = 1;

		for (Forum forum : this.forums) {
			if (this.roleManager.isForumAllowed(forum.getId())) {
				this.setAttribute(this.var, forum);
				this.setAttribute(this.var + ""Counter"", counter);
				this.invokeJspBody();

				counter++;
			}
		}
	}
"
net.jforum.core.tags.DisplayForumsTag.setVar,DisplayForumsTag.java,"void setVar(String var) {
		this.var = var;
	}
"
net.jforum.core.tags.DisplayForumsTag.setRoleManager,DisplayForumsTag.java,"void setRoleManager(RoleManager roleManager) {
		this.roleManager = roleManager;
	}
"
net.jforum.core.tags.DisplayForumsTag.setItems,DisplayForumsTag.java,"void setItems(List<Forum> forums) {
		this.forums = forums;
	}
"
net.jforum.core.tags.DisplayForumsTag.setModerator,DisplayForumsTag.java,"void setModerator(boolean isModerator) {
		this.isModerator = isModerator;
	}
"
net.jforum.core.support.hibernate.SpringSessionFactory.openSession,SpringSessionFactory.java,"Session openSession() throws HibernateException {
		return original.openSession(new SpringInterceptor(this.applicationContext, original));
	}
"
net.jforum.core.support.hibernate.SpringSessionFactory.openSession,SpringSessionFactory.java,"Session openSession(Connection connection) {
		return original.openSession(connection, new SpringInterceptor(this.applicationContext, original));
	}
"
net.jforum.core.support.hibernate.SpringSessionFactory.openSession,SpringSessionFactory.java,"Session openSession(Interceptor interceptor) throws HibernateException {
        return original.openSession(interceptor);
    }
"
net.jforum.core.support.hibernate.SpringSessionFactory.openSession,SpringSessionFactory.java,"Session openSession(Connection connection, Interceptor interceptor) {
        return original.openSession(connection, interceptor);
    }
"
net.jforum.core.support.hibernate.SpringSessionFactory.getCurrentSession,SpringSessionFactory.java,"Session getCurrentSession() throws HibernateException {
        return original.getCurrentSession();
    }
"
net.jforum.core.support.hibernate.SpringSessionFactory.getClassMetadata,SpringSessionFactory.java,"ClassMetadata getClassMetadata(Class aClass) throws HibernateException {
        return original.getClassMetadata(aClass);
    }
"
net.jforum.core.support.hibernate.SpringSessionFactory.getClassMetadata,SpringSessionFactory.java,"ClassMetadata getClassMetadata(String s) throws HibernateException {
        return original.getClassMetadata(s);
    }
"
net.jforum.core.support.hibernate.SpringSessionFactory.getCollectionMetadata,SpringSessionFactory.java,"CollectionMetadata getCollectionMetadata(String s) throws HibernateException {
        return original.getCollectionMetadata(s);
    }
"
net.jforum.core.support.hibernate.SpringSessionFactory.getAllClassMetadata,SpringSessionFactory.java,"Map getAllClassMetadata() throws HibernateException {
        return original.getAllClassMetadata();
    }
"
net.jforum.core.support.hibernate.SpringSessionFactory.getAllCollectionMetadata,SpringSessionFactory.java,"Map getAllCollectionMetadata() throws HibernateException {
        return original.getAllCollectionMetadata();
    }
"
net.jforum.core.support.hibernate.SpringSessionFactory.getStatistics,SpringSessionFactory.java,"Statistics getStatistics() {
        return original.getStatistics();
    }
"
net.jforum.core.support.hibernate.SpringSessionFactory.close,SpringSessionFactory.java,"void close() throws HibernateException {
        original.close();
    }
"
net.jforum.core.support.hibernate.SpringSessionFactory.isClosed,SpringSessionFactory.java,"boolean isClosed() {
        return original.isClosed();
    }
"
net.jforum.core.support.hibernate.SpringSessionFactory.evict,SpringSessionFactory.java,"void evict(Class aClass) throws HibernateException {
        original.evict(aClass);
    }
"
net.jforum.core.support.hibernate.SpringSessionFactory.evict,SpringSessionFactory.java,"void evict(Class aClass, Serializable serializable) throws HibernateException {
        original.evict(aClass, serializable);
    }
"
net.jforum.core.support.hibernate.SpringSessionFactory.evictEntity,SpringSessionFactory.java,"void evictEntity(String s) throws HibernateException {
        original.evictEntity(s);
    }
"
net.jforum.core.support.hibernate.SpringSessionFactory.evictEntity,SpringSessionFactory.java,"void evictEntity(String s, Serializable serializable) throws HibernateException {
        original.evictEntity(s, serializable);
    }
"
net.jforum.core.support.hibernate.SpringSessionFactory.evictCollection,SpringSessionFactory.java,"void evictCollection(String s) throws HibernateException {
        original.evictCollection(s);
    }
"
net.jforum.core.support.hibernate.SpringSessionFactory.evictCollection,SpringSessionFactory.java,"void evictCollection(String s, Serializable serializable) throws HibernateException {
        original.evictCollection(s, serializable);
    }
"
net.jforum.core.support.hibernate.SpringSessionFactory.evictQueries,SpringSessionFactory.java,"void evictQueries() throws HibernateException {
        original.evictQueries();
    }
"
net.jforum.core.support.hibernate.SpringSessionFactory.evictQueries,SpringSessionFactory.java,"void evictQueries(String s) throws HibernateException {
        original.evictQueries(s);
    }
"
net.jforum.core.support.hibernate.SpringSessionFactory.openStatelessSession,SpringSessionFactory.java,"StatelessSession openStatelessSession() {
        return original.openStatelessSession();
    }
"
net.jforum.core.support.hibernate.SpringSessionFactory.openStatelessSession,SpringSessionFactory.java,"StatelessSession openStatelessSession(Connection connection) {
        return original.openStatelessSession(connection);
    }
"
net.jforum.core.support.hibernate.SpringSessionFactory.getDefinedFilterNames,SpringSessionFactory.java,"Set<?> getDefinedFilterNames() {
        return original.getDefinedFilterNames();
    }
"
net.jforum.core.support.hibernate.SpringSessionFactory.getFilterDefinition,SpringSessionFactory.java,"FilterDefinition getFilterDefinition(String s) throws HibernateException {
        return original.getFilterDefinition(s);
    }
"
net.jforum.core.support.hibernate.SpringSessionFactory.getReference,SpringSessionFactory.java,"Reference getReference() throws NamingException {
        return original.getReference();
    }
"
net.jforum.core.support.hibernate.QueryCache.clear,QueryCache.java,"void clear() throws CacheException {
		super.clear();
		this.isUpToDate = true;
	}
"
net.jforum.core.support.hibernate.QueryCache.isUpToDate,QueryCache.java,"boolean isUpToDate(Set spaces, Long timestamp) {
		return this.isUpToDate;
	}
"
net.jforum.core.support.hibernate.SpringInterceptor.instantiate,SpringInterceptor.java,"Object instantiate(String entityName, EntityMode entityMode, Serializable id) {
		if (!EntityMode.POJO.equals(entityMode)) {
			return null;
		}

		Class<?> c = getClassByName(entityName);
		Object instance = this.beanRegistry.getBean(c);
		sessionFactory.getClassMetadata(c).setIdentifier(instance, id, EntityMode.POJO);

		return instance;
	}
"
net.jforum.core.support.hibernate.SpringInterceptor.getClassByName,SpringInterceptor.java,"Class<?> getClassByName(String name) {
		try {
			return Class.forName(name);
		} catch (ClassNotFoundException e) {
			throw new ForumException(e);
		}
	}
"
net.jforum.core.support.hibernate.SessionFactoryCreator.create,SessionFactoryCreator.java,"void create() {
		SessionFactory original = new AnnotationConfiguration().configure().buildSessionFactory();
		factory = new SpringSessionFactory(applicationContext, original);
	}
"
net.jforum.core.support.hibernate.SessionFactoryCreator.getInstance,SessionFactoryCreator.java,"SessionFactory getInstance() {
		return factory;
	}
"
net.jforum.core.support.hibernate.SessionFactoryCreator.destroy,SessionFactoryCreator.java,"void destroy() {
		factory.close();
	}
"
net.jforum.core.support.hibernate.CacheEvictionRules.permissionsChanged,CacheEvictionRules.java,"void permissionsChanged() {
		this.clearCacheRegion(this.factoryImplementor.getQueryCache(""forumDAO.getModerators""));
	}
"
net.jforum.core.support.hibernate.CacheEvictionRules.rankingChanged,CacheEvictionRules.java,"void rankingChanged() {
		this.clearCacheRegion(this.factoryImplementor.getQueryCache(""rankingDAO""));
	}
"
net.jforum.core.support.hibernate.CacheEvictionRules.smilieChanged,CacheEvictionRules.java,"void smilieChanged() {
		this.clearCacheRegion(this.factoryImplementor.getQueryCache(""smilieDAO""));
	}
"
net.jforum.core.support.hibernate.CacheEvictionRules.newUserRegistered,CacheEvictionRules.java,"void newUserRegistered() {
		this.clearCacheRegion(this.factoryImplementor.getQueryCache(""userDAO.getTotalUsers""));
		this.clearCacheRegion(this.factoryImplementor.getQueryCache(""userDAO.getLastRegisteredUser""));
	}
"
net.jforum.core.support.hibernate.CacheEvictionRules.configChanged,CacheEvictionRules.java,"void configChanged() {
		this.clearCacheRegion(this.factoryImplementor.getQueryCache(""configDAO""));
	}
"
net.jforum.core.support.hibernate.CacheEvictionRules.topicUpdated,CacheEvictionRules.java,"void topicUpdated(Topic topic) {
		this.clearCacheRegion(this.factoryImplementor.getQueryCache(""forumDAO.getTopics#"" + topic.getForum().getId()));
	}
"
net.jforum.core.support.hibernate.CacheEvictionRules.moveTopics,CacheEvictionRules.java,"void moveTopics(int toForumId, ModerationLog log, int... topicIds) {
		if (!ArrayUtils.isEmpty(topicIds)) {
			this.clearCacheRegion(this.factoryImplementor.getQueryCache(""forumDAO.getTotalPosts#"" + toForumId));
			this.clearCacheRegion(this.factoryImplementor.getQueryCache(""forumDAO.getTotalTopics#"" + toForumId));
			Cache cache = this.factoryImplementor.getSecondLevelCacheRegion(""net.jforum.entities.Forum"");

			if (cache != null) {
				cache.remove(""net.jforum.entities.Forum#"" + toForumId);
			}

			Topic topic = (Topic)this.sessionFactory.getCurrentSession().get(Topic.class, topicIds[0]);
			Forum forum = topic.getForum();

			this.clearCacheRegion(this.factoryImplementor.getQueryCache(""forumDAO.getTotalPosts#"" + forum.getId()));
			this.clearCacheRegion(this.factoryImplementor.getQueryCache(""forumDAO.getTotalTopics#"" + forum.getId()));

			Cache cache2 = this.factoryImplementor.getSecondLevelCacheRegion(""net.jforum.entities.Forum"");

			if (cache2 != null) {
				cache2.remove(""net.jforum.entities.Forum#"" + forum.getId());
			}
		}
	}
"
net.jforum.core.support.hibernate.CacheEvictionRules.forumChangedByAdministration,CacheEvictionRules.java,"void forumChangedByAdministration() {
		this.clearCacheRegion(this.factoryImplementor.getSecondLevelCacheRegion(""net.jforum.entities.Forum""));
		this.clearCacheRegion(this.factoryImplementor.getQueryCache(""categoryDAO.getForums""));
	}
"
net.jforum.core.support.hibernate.CacheEvictionRules.postDeleted,CacheEvictionRules.java,"void postDeleted(Post post) {
		// We force the eviction of both totalPosts and totalTopics as removing a post
		// may trigger the deletion of a topic as well
		this.postOrTopicAddedOrDeletedRules(post.getForum().getId());
	}
"
net.jforum.core.support.hibernate.CacheEvictionRules.topicDeleted,CacheEvictionRules.java,"void topicDeleted(List<Topic> topics, ModerationLog log) {
		if (topics.size() > 0) {
			// We're considering that all topics belong to the same forum
			Forum forum = topics.get(0).getForum();
			this.postOrTopicAddedOrDeletedRules(forum.getId());
			this.clearCacheRegion(this.factoryImplementor.getQueryCache(""rssDAO.getForumTopics#"" + forum.getId()));
		}
	}
"
net.jforum.core.support.hibernate.CacheEvictionRules.forumNewTopic,CacheEvictionRules.java,"void forumNewTopic(Topic topic, List<PollOption> pollOptions, List<Attachment> attachments) {
		if (!topic.isWaitingModeration()) {
			this.newForumPostRule(topic);
		}
	}
"
net.jforum.core.support.hibernate.CacheEvictionRules.forumNewPost,CacheEvictionRules.java,"void forumNewPost(Topic topic, Post post, List<Attachment> attachments) {
		if (!post.isWaitingModeration()) {
			this.newForumPostRule(topic);
		}
	}
"
net.jforum.core.support.hibernate.CacheEvictionRules.postApproved,CacheEvictionRules.java,"void postApproved(Post post) {
		this.newForumPostRule(post.getTopic());
	}
"
net.jforum.core.support.hibernate.CacheEvictionRules.categoryChanged,CacheEvictionRules.java,"void categoryChanged() {
		this.clearCacheRegion(this.factoryImplementor.getSecondLevelCacheRegion(""net.jforum.entities.Category""));
		this.clearCacheRegion(this.factoryImplementor.getQueryCache(""categoryDAO.getAllCategories""));
	}
"
net.jforum.core.support.hibernate.CacheEvictionRules.newForumPostRule,CacheEvictionRules.java,"void newForumPostRule(Topic topic) {
		int forumId = topic.getForum().getId();
		this.postOrTopicAddedOrDeletedRules(forumId);
	}
"
net.jforum.core.support.hibernate.CacheEvictionRules.postOrTopicAddedOrDeletedRules,CacheEvictionRules.java,"void postOrTopicAddedOrDeletedRules(int forumId) {
		this.clearCacheRegion(this.factoryImplementor.getQueryCache(""recentTopicsDAO""));
		this.clearCacheRegion(this.factoryImplementor.getQueryCache(""forumDAO.getTotalPosts#"" + forumId));
		this.clearCacheRegion(this.factoryImplementor.getQueryCache(""forumDAO.getTotalTopics#"" + forumId));
		this.clearCacheRegion(this.factoryImplementor.getQueryCache(""forumDAO.getTotalMessages""));
		this.clearCacheRegion(this.factoryImplementor.getQueryCache(""forumDAO.getTopics#"" + forumId));
	}
"
net.jforum.core.support.hibernate.CacheEvictionRules.clearCacheRegion,CacheEvictionRules.java,"void clearCacheRegion(Cache cache) {
		if (cache != null) {
			cache.clear();
		}
	}
"
net.jforum.core.support.hibernate.CacheEvictionRules.clearCacheRegion,CacheEvictionRules.java,"void clearCacheRegion(QueryCache cache) {
		if (cache != null) {
			cache.clear();
		}
	}
"
net.jforum.core.support.hibernate.QueryCacheFactory.getQueryCache,QueryCacheFactory.java,"QueryCache getQueryCache(String regionName, UpdateTimestampsCache updateTimestampsCache, Settings settings, Properties props)
			throws HibernateException {
		return new net.jforum.core.support.hibernate.QueryCache(settings, props, updateTimestampsCache, regionName);
	}
"
net.jforum.core.support.spring.RoleManagerFactoryBean.getObject,RoleManagerFactoryBean.java,"RoleManager getObject() throws Exception {
		String sessionId = RequestContextHolder.currentRequestAttributes().getSessionId();
		UserSession userSession = this.sessionManager.getUserSession(sessionId);
		return userSession != null ? userSession.getRoleManager() : null;
	}
"
net.jforum.core.support.spring.RoleManagerFactoryBean.getObjectType,RoleManagerFactoryBean.java,"Class<?> getObjectType() {
		return RoleManager.class;
	}
"
net.jforum.core.support.spring.RoleManagerFactoryBean.isSingleton,RoleManagerFactoryBean.java,"boolean isSingleton() {
		return false;
	}
"
net.jforum.core.support.spring.HttpServletRequestFactoryBean.getObject,HttpServletRequestFactoryBean.java,"HttpServletRequest getObject() throws Exception {
		RequestAttributes attributes = RequestContextHolder.currentRequestAttributes();
		return ((ServletRequestAttributes)attributes).getRequest();
	}
"
net.jforum.core.support.spring.HttpServletRequestFactoryBean.getObjectType,HttpServletRequestFactoryBean.java,"Class<?> getObjectType() {
		return HttpServletRequest.class;
	}
"
net.jforum.core.support.spring.HttpServletRequestFactoryBean.isSingleton,HttpServletRequestFactoryBean.java,"boolean isSingleton() {
		return false;
	}
"
net.jforum.core.support.spring.HttpServletResponseFactoryBean.getObject,HttpServletResponseFactoryBean.java,"HttpServletResponse getObject() throws Exception {
		RequestAttributes attributes = RequestContextHolder.currentRequestAttributes();
		return (HttpServletResponse) attributes.getAttribute(ConfigKeys.HTTP_SERVLET_RESPONSE, RequestAttributes.SCOPE_REQUEST);
	}
"
net.jforum.core.support.spring.HttpServletResponseFactoryBean.getObjectType,HttpServletResponseFactoryBean.java,"Class<?> getObjectType() {
		return HttpServletResponse.class;
	}
"
net.jforum.core.support.spring.HttpServletResponseFactoryBean.isSingleton,HttpServletResponseFactoryBean.java,"boolean isSingleton() {
		return false;
	}
"
net.jforum.core.events.post.ForumPostEvent.deleted,ForumPostEvent.java,"void deleted(Post post) {
		boolean isLastPost = false;

		try {
			// FIXME: Check TopicPostEvent#handleLastPostDeleted
			isLastPost = post.equals(post.getForum().getLastPost());
		}
		catch (ObjectNotFoundException e) {
			isLastPost = true;
		}

		if (isLastPost) {
			Post lastPost = this.repository.getLastPost(post.getForum());
			post.getForum().setLastPost(lastPost);
		}
	}
"
net.jforum.core.events.post.TopicReplyEvent.added,TopicReplyEvent.java,"void added(Post post) {
		// TODO: should also consider moderated posts (and the respective moderation action)
		if (this.config.getBoolean(ConfigKeys.MAIL_NOTIFY_ANSWERS)) {
			List<User> users = this.watchRepository.getUsersWaitingNotification(post.getTopic());

			Spammer spammer = this.spammerFactory.newTopicReply(post.getTopic(), users);

			this.taskExecutor.dispatch(spammer);
		}
	}
"
net.jforum.core.events.post.BadWordEvent.beforeAdd,BadWordEvent.java,"void beforeAdd(Post post) {
		List<BadWord> words = this.repository.getAll();

		for (BadWord word : words) {
			Pattern pattern = Pattern.compile(""\\b"" + word.getWord() + ""\\b"", Pattern.CASE_INSENSITIVE);

			post.setText(this.applyFilter(post.getText(), word.getReplacement(), pattern));

			if (!StringUtils.isEmpty(post.getSubject())) {
				post.setSubject(this.applyFilter(post.getSubject(), word.getReplacement(), pattern));
			}

			if (!StringUtils.isEmpty(post.getTopic().getSubject())) {
				post.getTopic().setSubject(this.applyFilter(post.getTopic().getSubject(), word.getReplacement(), pattern));
			}
		}
	}
"
net.jforum.core.events.post.BadWordEvent.updated,BadWordEvent.java,"void updated(Post post) {
		this.beforeAdd(post);
	}
"
net.jforum.core.events.post.BadWordEvent.applyFilter,BadWordEvent.java,"String applyFilter(String text, String replacement, Pattern pattern) {
		Matcher matcher = pattern.matcher(text);
		return matcher.replaceAll(replacement);
	}
"
net.jforum.core.events.post.TopicWatchPostEvent.added,TopicWatchPostEvent.java,"void added(Post post) {
		if (post.shouldNotifyReplies()) {
			this.service.watch(post.getTopic(), post.getUser());
		}
	}
"
net.jforum.core.events.post.TopicPostEvent.deleted,TopicPostEvent.java,"void deleted(Post post) {
		boolean isTopicDeleted = this.handleEmptyTopic(post);
		post.getTopic().decrementTotalReplies();

		if (!isTopicDeleted) {
			// If it wasn't the first post which was deleted,
			// then check if it was the last one. It never will
			// be both (which would result in a topic delete)
			if (!this.handleFirstPostDeleted(post)) {
				this.handleLastPostDeleted(post);
			}

			int userTotalPosts = this.userRepository.getTotalPosts(post.getUser());
			post.getUser().setTotalPosts(userTotalPosts);
		}
	}
"
net.jforum.core.events.post.TopicPostEvent.handleEmptyTopic,TopicPostEvent.java,"boolean handleEmptyTopic(Post post) {
		if (this.topicRepository.getTotalPosts(post.getTopic()) < 1) {
			this.topicRepository.remove(post.getTopic());
			return true;
		}

		return false;
	}
"
net.jforum.core.events.post.TopicPostEvent.handleLastPostDeleted,TopicPostEvent.java,"void handleLastPostDeleted(Post post) {
		boolean isLastPost = false;

		try {
			// FIXME: post.getTopic.getLastPost() may throw this exception,
			// because the post itself was deleted before this method,
			// and a call to post.getTopic().getLastPost() may issue
			// a query to load the last post of such topic, which
			// won't exist, of course. So, is this expected, or should
			// we handle this using another approach?
			isLastPost = post.getTopic().getLastPost().equals(post);
		}
		catch (ObjectNotFoundException e) {
			isLastPost = true;
		}

		if (isLastPost) {
			post.getTopic().setLastPost(this.topicRepository.getLastPost(post.getTopic()));
		}
	}
"
net.jforum.core.events.post.TopicPostEvent.handleFirstPostDeleted,TopicPostEvent.java,"boolean handleFirstPostDeleted(Post post) {
		boolean isFirstPost = false;

		try {
			isFirstPost = post.getTopic().getFirstPost().equals(post);
		}
		catch (ObjectNotFoundException e) {
			isFirstPost = true;
		}

		if (isFirstPost) {
			Post firstPost = this.topicRepository.getFirstPost(post.getTopic());
			post.getTopic().setFirstPost(firstPost);
			post.getTopic().setUser(firstPost.getUser());

			return true;
		}

		return false;
	}
"
net.jforum.core.events.category.NewCategoryGroupPermissionsEvent.added,NewCategoryGroupPermissionsEvent.java,"void added(Category category) {
		List<Group> allGroups = this.groupRepository.getAllGroups();
		List<Group> userGroups = this.userSession.getUser().getGroups();
		List<Group> processedGroups = new ArrayList<Group>();

		for (Group group : userGroups) {
			if (this.isGoodCandidate(group)) {
				processedGroups.add(group);
				this.groupService.appendRole(group, SecurityConstants.CATEGORY, category.getId());
			}
		}

		for (Group group : allGroups) {
			if (!processedGroups.contains(group) && group.roleExist(SecurityConstants.ADMINISTRATOR)) {
				this.groupService.appendRole(group, SecurityConstants.CATEGORY, category.getId());
			}
		}
	}
"
net.jforum.core.events.category.NewCategoryGroupPermissionsEvent.isGoodCandidate,NewCategoryGroupPermissionsEvent.java,"boolean isGoodCandidate(Group group) {
		return group.roleExist(SecurityConstants.ADMINISTRATOR)
			|| group.roleExist(SecurityConstants.CO_ADMINISTRATOR);
	}
"
net.jforum.core.events.topic.TopicWatchTopicEvent.deleted,TopicWatchTopicEvent.java,"void deleted(Topic topic) {
		this.repository.removeSubscription(topic);
	}
"
net.jforum.core.events.topic.ForumTopicEvent.deleted,ForumTopicEvent.java,"void deleted(Topic topic) {
		Forum forum = topic.getForum();
		boolean topicMatches = false;

		try {
			// FIXME: Check TopiPostEvent#handleLastPostDeleted
			topicMatches = forum.getLastPost() == null
				? true
				: forum.getLastPost().getTopic().equals(topic);
		}
		catch (ObjectNotFoundException e) {
			topicMatches = true;
		}

		if (topicMatches) {
			forum.setLastPost(this.repository.getLastPost(forum));
		}
	}
"
net.jforum.core.events.forum.NewForumGroupPermissionsEvent.added,NewForumGroupPermissionsEvent.java,"void added(Forum forum) {
		List<Group> allGroups = this.groupRepository.getAllGroups();
		List<Group> userGroups = this.userSession.getUser().getGroups();
		List<Group> processedGroups = new ArrayList<Group>();

		for (Group group : userGroups) {
			if (this.isGoodCandidate(group)) {
				processedGroups.add(group);
				this.groupService.appendRole(group, SecurityConstants.FORUM, forum.getId());
			}
		}

		for (Group group : allGroups) {
			if (!processedGroups.contains(group) && group.roleExist(SecurityConstants.ADMINISTRATOR)) {
				this.groupService.appendRole(group, SecurityConstants.FORUM, forum.getId());
			}
		}
	}
"
net.jforum.core.events.forum.NewForumGroupPermissionsEvent.isGoodCandidate,NewForumGroupPermissionsEvent.java,"boolean isGoodCandidate(Group group) {
		return group.roleExist(SecurityConstants.ADMINISTRATOR)
			|| group.roleExist(SecurityConstants.CO_ADMINISTRATOR);
	}
"
net.jforum.util.MD5.hash,MD5.java,"String hash(String str) {
		if (str == null || str.length() == 0) {
			throw new IllegalArgumentException(""String cannot be null or zero length"");
		}

		StringBuilder hexString = new StringBuilder();

		try {
			MessageDigest md = MessageDigest.getInstance(""MD5"");
			md.update(str.getBytes());
			byte[] hash = md.digest();

			for (byte element : hash) {
				if ((0xff & element) < 0x10) {
					hexString.append('0').append(Integer.toHexString((0xFF & element)));
				}
				else {
					hexString.append(Integer.toHexString(0xFF & element));
				}
			}
		}
		catch (NoSuchAlgorithmException e) {
			throw new ForumException(e);
		}

		return hexString.toString();
	}
"
net.jforum.util.SafeHtml.splitAndTrim,SafeHtml.java,"void splitAndTrim(String s, Set<String> data) {
		if (this.config.containsKey(s)) {
			String value = this.config.getValue(s);
			String[] parts = value.split("","");

			for (String part : parts) {
				part = part.trim();

				if (!StringUtils.isEmpty(part)) {
					data.add(part.toUpperCase());
				}
			}
		}
	}
"
net.jforum.util.SafeHtml.ensureAllAttributesAreSafe,SafeHtml.java,"String ensureAllAttributesAreSafe(String contents) {
		StringBuilder sb = new StringBuilder(contents.length());

		try {
			Lexer lexer = new Lexer(contents);
			Node node;

			while ((node = lexer.nextNode()) != null) {
				if (node instanceof Tag) {
					Tag tag = (Tag) node;

					this.checkAndValidateAttributes(tag, false);

					sb.append(tag.toHtml());
				}
				else {
					sb.append(node.toHtml());
				}
			}
		}
		catch (Exception e) {
			throw new ForumException(""Problems while parsing HTML: "" + e, e);
		}

		return sb.toString();
	}
"
net.jforum.util.SafeHtml.makeSafe,SafeHtml.java,"String makeSafe(String contents) {
		if (contents == null || contents.length() == 0) {
			return contents;
		}

		StringBuilder sb = new StringBuilder(contents.length());

		try {
			Lexer lexer = new Lexer(contents);
			Node node;

			while ((node = lexer.nextNode()) != null) {
				boolean isTextNode = node instanceof TextNode;

				if (isTextNode) {
					// Text nodes are raw data, so we just
					// strip off all possible html content
					String text = node.toHtml();

					if (text.indexOf('>') > -1 || text.indexOf('<') > -1) {
						text = StringUtils.replace(text, ""<"", ""&lt;"");
						text = StringUtils.replace(text, "">"", ""&gt;"");
						text = StringUtils.replace(text, ""\"""", ""&quot;"");

						node.setText(text);
					}

					sb.append(node.toHtml());
				}
				else if (node instanceof Tag && this.isTagWelcome(node)) {
					sb.append(node.toHtml());
				}
				else {
					String text = node.toHtml();

					text = StringUtils.replace(text, ""<"", ""&lt;"");
					text = StringUtils.replace(text, "">"", ""&gt;"");

					sb.append(text);
				}
			}
		}
		catch (Exception e) {
			throw new ForumException(""Error while parsing HTML: "" + e, e);
		}

		return sb.toString();
	}
"
net.jforum.util.SafeHtml.isTagWelcome,SafeHtml.java,"boolean isTagWelcome(Node node) {
		Tag tag = (Tag) node;

		if (!welcomeTags.contains(tag.getTagName())) {
			return false;
		}

		this.checkAndValidateAttributes((Tag)node, true);

		return true;
	}
"
net.jforum.util.SafeHtml.checkAndValidateAttributes,SafeHtml.java,"void checkAndValidateAttributes(Tag tag, boolean checkIfAttributeIsWelcome) {
		Vector<Attribute> newAttributes = new Vector<Attribute>();

		for (Iterator<Attribute> iter = tag.getAttributesEx().iterator(); iter.hasNext();) {
			Attribute a = iter.next();
			String name = a.getName();

			if (name == null) {
				newAttributes.add(a);
			}
			else {
				name = name.toUpperCase();

				if (a.getValue() == null) {
					newAttributes.add(a);
					continue;
				}

				String value = a.getValue().toLowerCase();

				if (checkIfAttributeIsWelcome && !this.isAttributeWelcome(name)) {
					continue;
				}

				if (!this.isAttributeSafe(name, value)) {
					continue;
				}

				if (a.getValue().indexOf(""&#"") > -1) {
					a.setValue(StringUtils.replace(a.getValue(), ""&#"", ""&amp;#""));
				}

				newAttributes.add(a);
			}
		}

		tag.setAttributesEx(newAttributes);
	}
"
net.jforum.util.SafeHtml.isAttributeWelcome,SafeHtml.java,"boolean isAttributeWelcome(String name) {
		return welcomeAttributes.contains(name);
	}
"
net.jforum.util.SafeHtml.isAttributeSafe,SafeHtml.java,"boolean isAttributeSafe(String name, String value) {
		if (name.length() >= 2 && name.charAt(0) == 'O' && name.charAt(1) == 'N') {
			return false;
		}

		if (value.indexOf('\n') > -1 || value.indexOf('\r') > -1 || value.indexOf('\0') > -1) {
			return false;
		}

		if ((""HREF"".equals(name) || ""SRC"".equals(name))) {
			if (!this.isHrefValid(value)) {
				return false;
			}
		}
		else if (""STYLE"".equals(name)) {
			// It is much more a try to not allow constructions
			// like style=""background-color: url(javascript:xxxx)"" than anything else
			if (value.indexOf('(') > -1) {
				return false;
			}
		}

		return true;
	}
"
net.jforum.util.SafeHtml.isHrefValid,SafeHtml.java,"boolean isHrefValid(String href) {
		if (this.config.getBoolean(ConfigKeys.HTML_LINKS_ALLOW_RELATIVE) && href.length() > 0 && href.charAt(0) == '/') {
			return true;
		}

		for (String string : allowedProtocols) {
			String protocol = string.toLowerCase();

			if (href.startsWith(protocol)) {
				return true;
			}
		}

		return false;
	}
"
net.jforum.util.JForumConfig.normalizeTemplateDirectory,JForumConfig.java,"void normalizeTemplateDirectory() {
		StringBuilder sb = new StringBuilder(getValue(ConfigKeys.TEMPLATE_DIRECTORY));

		if (sb.charAt(0) != '/') {
			sb.insert(0, '/');
		}

		if (sb.charAt(sb.length() - 1) != '/') {
			sb.append('/');
		}

		setProperty(ConfigKeys.TEMPLATE_DIRECTORY, sb.toString());
	}
"
net.jforum.util.JForumConfig.setProperty,JForumConfig.java,"void setProperty(String key, Object value) {
		clearProperty(key);
		super.setProperty(key, value);
	}
"
net.jforum.util.JForumConfig.getValueAsList,JForumConfig.java,"List<String> getValueAsList(String key) {
		String value = getValue(key);
		List<String> l = new ArrayList<String>();

		if (value != null) {
			String[] parts = value.split("","");

			for (String p : parts) {
				l.add(p.trim());
			}
		}

		return l;
	}
"
net.jforum.util.JForumConfig.loadProps,JForumConfig.java,"void loadProps() throws ConfigurationException, Exception {
		this.load(this.getClass().getResourceAsStream(""/jforumConfig/SystemGlobals.properties""));
		this.loadCustomProperties();
	}
"
net.jforum.util.JForumConfig.loadCustomProperties,JForumConfig.java,"void loadCustomProperties() throws Exception {
		InputStream is = this.getClass().getResourceAsStream(""/jforumConfig/jforum-custom.properties"");

		if (is != null) {
			Properties custom = new Properties();
			custom.load(is);

			for (Enumeration<?> e = custom.keys(); e.hasMoreElements(); ) {
				String key = (String)e.nextElement();
				this.clearProperty(key);
				this.addProperty(key, custom.get(key));
			}
		}
	}
"
net.jforum.util.JForumConfig.loadDatabaseProperties,JForumConfig.java,"void loadDatabaseProperties() {
		Session session = null;

		try {
			session = sessionFactory.openSession();

			ConfigRepository repository = new ConfigRepository(session);
			List<Config> databasesProperties = repository.getAll();

			for (Config config : databasesProperties) {
				this.clearProperty(config.getName());
				this.addProperty(config.getName(), config.getValue());
			}
		}
		catch (Exception e) {
			logger.error(""Error while trying to load custom settings from the database: "" + e.getMessage(), e);
		}
		finally {
			try { session.close(); }
			catch (Exception e) {}
		}
	}
"
net.jforum.util.JForumConfig.addPropertyDirect,JForumConfig.java,"void addPropertyDirect(String key, Object value) {
		super.addPropertyDirect(key, value);
	}
"
net.jforum.util.JForumConfig.getApplicationPath,JForumConfig.java,"String getApplicationPath() {
		return this.getString(ConfigKeys.APPLICATION_PATH);
	}
"
net.jforum.util.JForumConfig.getValue,JForumConfig.java,"String getValue(String key) {
		return this.getString(key);
	}
"
net.jforum.util.ImageUtils.resizeImage,ImageUtils.java,"BufferedImage resizeImage(String imgName, int type, int maxWidth, int maxHeight) {
		try {
			return resizeImage(ImageIO.read(new File(imgName)), type, maxWidth, maxHeight);
		}
		catch (IOException e) {
			throw new ForumException(e);
		}
	}
"
net.jforum.util.ImageUtils.resizeImage,ImageUtils.java,"BufferedImage resizeImage(BufferedImage image, int type, int maxWidth, int maxHeight) {
		Dimension largestDimension = new Dimension(maxWidth, maxHeight);

		// Original size
		int imageWidth = image.getWidth(null);
		int imageHeight = image.getHeight(null);

		float aspectRatio = (float) imageWidth / imageHeight;

		if (imageWidth > maxWidth || imageHeight > maxHeight) {
			if ((float) largestDimension.width / largestDimension.height > aspectRatio) {
				largestDimension.width = (int) Math.ceil(largestDimension.height * aspectRatio);
			}
			else {
				largestDimension.height = (int) Math.ceil(largestDimension.width / aspectRatio);
			}

			imageWidth = largestDimension.width;
			imageHeight = largestDimension.height;
		}

		return createHeadlessSmoothBufferedImage(image, type, imageWidth, imageHeight);
	}
"
net.jforum.util.ImageUtils.saveImage,ImageUtils.java,"boolean saveImage(BufferedImage image, String toFileName, int type) {
		try {
			return ImageIO.write(image, type == IMAGE_JPEG ? ""jpg"" : ""png"", new File(toFileName));
		}
		catch (IOException e) {
			throw new ForumException(e);
		}
	}
"
net.jforum.util.ImageUtils.saveCompressedImage,ImageUtils.java,"void saveCompressedImage(BufferedImage image, String toFileName, int type) {
		try {
			if (type == IMAGE_PNG) {
				throw new UnsupportedOperationException(""PNG compression not implemented"");
			}

			Iterator<?> iter = ImageIO.getImageWritersByFormatName(""jpg"");
			ImageWriter writer;
			writer = (ImageWriter) iter.next();

			ImageOutputStream ios = ImageIO.createImageOutputStream(new File(toFileName));
			writer.setOutput(ios);

			ImageWriteParam iwparam = new JPEGImageWriteParam(Locale.getDefault());

			iwparam.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
			iwparam.setCompressionQuality(0.7F);

			writer.write(null, new IIOImage(image, null, null), iwparam);

			ios.flush();
			writer.dispose();
			ios.close();
		}
		catch (IOException e) {
			throw new ForumException(e);
		}
	}
"
net.jforum.util.ImageUtils.createHeadlessBufferedImage,ImageUtils.java,"BufferedImage createHeadlessBufferedImage(BufferedImage image, int type, int width, int height) {
		if (type == ImageUtils.IMAGE_PNG && hasAlpha(image)) {
			type = BufferedImage.TYPE_INT_ARGB;
		}
		else {
			type = BufferedImage.TYPE_INT_RGB;
		}

		BufferedImage bi = new BufferedImage(width, height, type);

		for (int y = 0; y < height; y++) {
			for (int x = 0; x < width; x++) {
				bi.setRGB(x, y, image.getRGB(x * image.getWidth() / width, y * image.getHeight() / height));
			}
		}

		return bi;
	}
"
net.jforum.util.ImageUtils.createHeadlessSmoothBufferedImage,ImageUtils.java,"BufferedImage createHeadlessSmoothBufferedImage(BufferedImage source, int type, int width, int height) {
		if (type == ImageUtils.IMAGE_PNG && hasAlpha(source)) {
			type = BufferedImage.TYPE_INT_ARGB;
		}
		else {
			type = BufferedImage.TYPE_INT_RGB;
		}

		BufferedImage dest = new BufferedImage(width, height, type);

		int sourcex;
		int sourcey;

		double scalex = (double) width / source.getWidth();
		double scaley = (double) height / source.getHeight();

		int x1;
		int y1;

		double xdiff;
		double ydiff;

		int rgb;
		int rgb1;
		int rgb2;

		for (int y = 0; y < height; y++) {
			sourcey = y * source.getHeight() / dest.getHeight();
			ydiff = scale(y, scaley) - sourcey;

			for (int x = 0; x < width; x++) {
				sourcex = x * source.getWidth() / dest.getWidth();
				xdiff = scale(x, scalex) - sourcex;

				x1 = Math.min(source.getWidth() - 1, sourcex + 1);
				y1 = Math.min(source.getHeight() - 1, sourcey + 1);

				rgb1 = getRGBInterpolation(source.getRGB(sourcex, sourcey), source.getRGB(x1, sourcey), xdiff);
				rgb2 = getRGBInterpolation(source.getRGB(sourcex, y1), source.getRGB(x1, y1), xdiff);

				rgb = getRGBInterpolation(rgb1, rgb2, ydiff);

				dest.setRGB(x, y, rgb);
			}
		}

		return dest;
	}
"
net.jforum.util.ImageUtils.scale,ImageUtils.java,"double scale(int point, double scale) {
		return point / scale;
	}
"
net.jforum.util.ImageUtils.getRGBInterpolation,ImageUtils.java,"int getRGBInterpolation(int value1, int value2, double distance) {
		int alpha1 = (value1 & 0xFF000000) >>> 24;
		int red1 = (value1 & 0x00FF0000) >> 16;
		int green1 = (value1 & 0x0000FF00) >> 8;
		int blue1 = (value1 & 0x000000FF);

		int alpha2 = (value2 & 0xFF000000) >>> 24;
		int red2 = (value2 & 0x00FF0000) >> 16;
		int green2 = (value2 & 0x0000FF00) >> 8;
		int blue2 = (value2 & 0x000000FF);

		int rgb = ((int) (alpha1 * (1.0 - distance) + alpha2 * distance) << 24) | ((int) (red1 * (1.0 - distance) + red2 * distance) << 16)
				| ((int) (green1 * (1.0 - distance) + green2 * distance) << 8) | (int) (blue1 * (1.0 - distance) + blue2 * distance);

		return rgb;
	}
"
net.jforum.util.ImageUtils.hasAlpha,ImageUtils.java,"boolean hasAlpha(Image image) {
		try {
			PixelGrabber pg = new PixelGrabber(image, 0, 0, 1, 1, false);
			pg.grabPixels();

			return pg.getColorModel().hasAlpha();
		}
		catch (InterruptedException e) {
			return false;
		}
	}
"
net.jforum.util.ImageInfo.addComment,ImageInfo.java,"void addComment(String s) {
		if (comments == null) {
			comments = new Vector<String>();
		}
		comments.addElement(s);
	}
"
net.jforum.util.ImageInfo.check,ImageInfo.java,"boolean check() {
		format = -1;
		width = -1;
		height = -1;
		bitsPerPixel = -1;
		numberOfImages = 1;
		physicalHeightDpi = -1;
		physicalWidthDpi = -1;
		comments = null;
		try {
			int b1 = read() & 0xff;
			int b2 = read() & 0xff;
			if (b1 == 0x47 && b2 == 0x49) {
				return checkGif();
			}
			else
			if (b1 == 0x89 && b2 == 0x50) {
				return checkPng();
			}
			else
			if (b1 == 0xff && b2 == 0xd8) {
				return checkJpeg();
			}
			else
			if (b1 == 0x42 && b2 == 0x4d) {
				return checkBmp();
			}
			else
			if (b1 == 0x0a && b2 < 0x06) {
				return checkPcx();
			}
			else
			if (b1 == 0x46 && b2 == 0x4f) {
				return checkIff();
			}
			else
			if (b1 == 0x59 && b2 == 0xa6) {
				return checkRas();
			}
			else
			if (b1 == 0x50 && b2 >= 0x31 && b2 <= 0x36) {
				return checkPnm(b2 - '0');
			}
			else
			if (b1 == 0x38 && b2 == 0x42) {
				return checkPsd();
			}
			else {
				return false;
			}
		} catch (IOException ioe) {
			return false;
		}
	}
"
net.jforum.util.ImageInfo.checkBmp,ImageInfo.java,"boolean checkBmp() throws IOException {
		byte[] a = new byte[44];
		if (read(a) != a.length) {
			return false;
		}
		width = getIntLittleEndian(a, 16);
		height = getIntLittleEndian(a, 20);
		if (width < 1 || height < 1) {
			return false;
		}
		bitsPerPixel = getShortLittleEndian(a, 26);
		if (bitsPerPixel != 1 && bitsPerPixel != 4 &&
		    bitsPerPixel != 8 && bitsPerPixel != 16 &&
		    bitsPerPixel != 24 && bitsPerPixel != 32) {
		    return false;
		}
		int x = (int)(getIntLittleEndian(a, 36) * 0.0254);
		if (x > 0) {
			setPhysicalWidthDpi(x);
		}
		int y = (int)(getIntLittleEndian(a, 40) * 0.0254);
		if (y > 0) {
			setPhysicalHeightDpi(y);
		}
		format = FORMAT_BMP;
		return true;
	}
"
net.jforum.util.ImageInfo.checkGif,ImageInfo.java,"boolean checkGif() throws IOException {
		final byte[] GIF_MAGIC_87A = {0x46, 0x38, 0x37, 0x61};
		final byte[] GIF_MAGIC_89A = {0x46, 0x38, 0x39, 0x61};
		byte[] a = new byte[11]; // 4 from the GIF signature + 7 from the global header
		if (read(a) != 11) {
			return false;
		}
		if ((!equals(a, 0, GIF_MAGIC_89A, 0, 4)) &&
			(!equals(a, 0, GIF_MAGIC_87A, 0, 4))) {
			return false;
		}
		format = FORMAT_GIF;
		width = getShortLittleEndian(a, 4);
		height = getShortLittleEndian(a, 6);
		int flags = a[8] & 0xff;
		bitsPerPixel = ((flags >> 4) & 0x07) + 1;
		//progressive = (flags & 0x02) != 0;
		if (!determineNumberOfImages) {
			return true;
		}
		// skip global color palette
		if ((flags & 0x80) != 0) {
			int tableSize = (1 << ((flags & 7) + 1)) * 3;
			skip(tableSize);
		}
		numberOfImages = 0;
		int blockType;
		do
		{
			blockType = read();
			switch(blockType)
			{
				case(0x2c): // image separator
				{
					if (read(a, 0, 9) != 9) {
						return false;
					}
					flags = a[8] & 0xff;
					progressive = (flags & 0x40) != 0;
					/*int locWidth = getShortLittleEndian(a, 4);
					int locHeight = getShortLittleEndian(a, 6);
					System.out.println(""LOCAL: "" + locWidth + "" x "" + locHeight);*/
					int localBitsPerPixel = (flags & 0x07) + 1;
					if (localBitsPerPixel > bitsPerPixel) {
						bitsPerPixel = localBitsPerPixel;
					}
					if ((flags & 0x80) != 0) {
						skip((1 << localBitsPerPixel) * 3);
					}
					skip(1); // initial code length
					int n;
					do
					{
						n = read();
						if (n > 0) {
							skip(n);
						}
						else
						if (n == -1) {
							return false;
						}
					}
					while (n > 0);
					numberOfImages++;
					break;
				}
				case(0x21): // extension
				{
					int extensionType = read();
					if (collectComments && extensionType == 0xfe) {
						StringBuffer sb = new StringBuffer();
						int n;
						do
						{
							n = read();
							if (n == -1) {
								return false;
							}
							if (n > 0) {
								for (int i = 0; i < n; i++) {
									int ch = read();
									if (ch == -1) {
										return false;
									}
									sb.append((char)ch);
								}
							}
						}
						while (n > 0);
					} else {
						int n;
						do
						{
							n = read();
							if (n > 0) {
								skip(n);
							}
							else
							if (n == -1) {
								return false;
							}
						}
						while (n > 0);
					}
					break;
				}
				case(0x3b): // end of file
				{
					break;
				}
				default:
				{
					return false;
				}
			}
		}
		while (blockType != 0x3b);
		return true;
	}
"
net.jforum.util.ImageInfo.checkIff,ImageInfo.java,"boolean checkIff() throws IOException {
		byte[] a = new byte[10];
		// read remaining 2 bytes of file id, 4 bytes file size
		// and 4 bytes IFF subformat
		if (read(a, 0, 10) != 10) {
			return false;
		}
		final byte[] IFF_RM = {0x52, 0x4d};
		if (!equals(a, 0, IFF_RM, 0, 2)) {
			return false;
		}
		int type = getIntBigEndian(a, 6);
		if (type != 0x494c424d && // type must be ILBM...
		    type != 0x50424d20) { // ...or PBM
		    return false;
		}
		// loop chunks to find BMHD chunk
		do {
			if (read(a, 0, 8) != 8) {
				return false;
			}
			int chunkId = getIntBigEndian(a, 0);
			int size = getIntBigEndian(a, 4);
			if ((size & 1) == 1) {
				size++;
			}
			if (chunkId == 0x424d4844) { // BMHD chunk
				if (read(a, 0, 9) != 9) {
					return false;
				}
				format = FORMAT_IFF;
				width = getShortBigEndian(a, 0);
				height = getShortBigEndian(a, 2);
				bitsPerPixel = a[8] & 0xff;
				return (width > 0 && height > 0 && bitsPerPixel > 0 && bitsPerPixel < 33);
			} else {
				skip(size);
			}
		} while (true);
	}
"
net.jforum.util.ImageInfo.checkJpeg,ImageInfo.java,"boolean checkJpeg() throws IOException {
		byte[] data = new byte[12];
		while (true) {
			if (read(data, 0, 4) != 4) {
				return false;
			}
			int marker = getShortBigEndian(data, 0);
			int size = getShortBigEndian(data, 2);
			if ((marker & 0xff00) != 0xff00) {
				return false; // not a valid marker
			}
			if (marker == 0xffe0) { // APPx
				if (size < 14) {
					// not an APPx header as we know it, skip
					skip(size - 2);
					continue;
				}
				if (read(data, 0, 12) != 12) {
					return false;
				}
				final byte[] APP0_ID = {0x4a, 0x46, 0x49, 0x46, 0x00};
				if (equals(APP0_ID, 0, data, 0, 5)) {
					//System.out.println(""data 7="" + data[7]);
					if (data[7] == 1) {
						setPhysicalWidthDpi(getShortBigEndian(data, 8));
						setPhysicalHeightDpi(getShortBigEndian(data, 10));
					}
					else
					if (data[7] == 2) {
						int x = getShortBigEndian(data, 8);
						int y = getShortBigEndian(data, 10);
						setPhysicalWidthDpi((int)(x * 2.54f));
						setPhysicalHeightDpi((int)(y * 2.54f));
					}
				}
				skip(size - 14);
			}
			else
			if (collectComments && size > 2 && marker == 0xfffe) { // comment
				size -= 2;
				byte[] chars = new byte[size];
				if (read(chars, 0, size) != size) {
					return false;
				}
				String comment = new String(chars, ""iso-8859-1"");
				comment = comment.trim();
				addComment(comment);
			}
			else
			if (marker >= 0xffc0 && marker <= 0xffcf && marker != 0xffc4 && marker != 0xffc8) {
				if (read(data, 0, 6) != 6) {
					return false;
				}
				format = FORMAT_JPEG;
				bitsPerPixel = (data[0] & 0xff) * (data[5] & 0xff);
				progressive = marker == 0xffc2 || marker == 0xffc6 ||
					marker == 0xffca || marker == 0xffce;
				width = getShortBigEndian(data, 3);
				height = getShortBigEndian(data, 1);
				return true;
			} else {
				skip(size - 2);
			}
		}
	}
"
net.jforum.util.ImageInfo.checkPcx,ImageInfo.java,"boolean checkPcx() throws IOException {
		byte[] a = new byte[64];
		if (read(a) != a.length) {
			return false;
		}
		if (a[0] != 1) { // encoding, 1=RLE is only valid value
			return false;
		}
		// width / height
		int x1 = getShortLittleEndian(a, 2);
		int y1 = getShortLittleEndian(a, 4);
		int x2 = getShortLittleEndian(a, 6);
		int y2 = getShortLittleEndian(a, 8);
		if (x1 < 0 || x2 < x1 || y1 < 0 || y2 < y1) {
			return false;
		}
		width = x2 - x1 + 1;
		height = y2 - y1 + 1;
		// color depth
		int bits = a[1];
		int planes = a[63];
		if (planes == 1 &&
		    (bits == 1 || bits == 2 || bits == 4 || bits == 8)) {
			// paletted
			bitsPerPixel = bits;
		} else
		if (planes == 3 && bits == 8) {
			// RGB truecolor
			bitsPerPixel = 24;
		} else {
			return false;
		}
		setPhysicalWidthDpi(getShortLittleEndian(a, 10));
		setPhysicalHeightDpi(getShortLittleEndian(a, 10));
		format = FORMAT_PCX;
		return true;
	}
"
net.jforum.util.ImageInfo.checkPng,ImageInfo.java,"boolean checkPng() throws IOException {
		final byte[] PNG_MAGIC = {0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a};
		byte[] a = new byte[27];
		if (read(a) != 27) {
			return false;
		}
		if (!equals(a, 0, PNG_MAGIC, 0, 6)) {
			return false;
		}
		format = FORMAT_PNG;
		width = getIntBigEndian(a, 14);
		height = getIntBigEndian(a, 18);
		bitsPerPixel = a[22] & 0xff;
		int colorType = a[23] & 0xff;
		if (colorType == 2 || colorType == 6) {
			bitsPerPixel *= 3;
		}
		progressive = (a[26] & 0xff) != 0;
		return true;
	}
"
net.jforum.util.ImageInfo.checkPnm,ImageInfo.java,"boolean checkPnm(int id) throws IOException {
		if (id < 1 || id > 6) {
			return false;
		}
		final int[] PNM_FORMATS = {FORMAT_PBM, FORMAT_PGM, FORMAT_PPM};
		format = PNM_FORMATS[(id - 1) % 3];
		boolean hasPixelResolution = false;
		String s;
		while (true)
		{
			s = readLine();
			if (s != null) {
				s = s.trim();
			}
			if (s == null || s.length() < 1) {
				continue;
			}
			if (s.charAt(0) == '#') { // comment
				if (collectComments && s.length() > 1) {
					addComment(s.substring(1));
				}
				continue;
			}
			if (!hasPixelResolution) { // split ""343 966"" into width=343, height=966
				int spaceIndex = s.indexOf(' ');
				if (spaceIndex == -1) {
					return false;
				}
				String widthString = s.substring(0, spaceIndex);
				spaceIndex = s.lastIndexOf(' ');
				if (spaceIndex == -1) {
					return false;
				}
				String heightString = s.substring(spaceIndex + 1);
				try {
					width = Integer.parseInt(widthString);
					height = Integer.parseInt(heightString);
				} catch (NumberFormatException nfe) {
					return false;
				}
				if (width < 1 || height < 1) {
					return false;
				}
				if (format == FORMAT_PBM) {
					bitsPerPixel = 1;
					return true;
				}
				hasPixelResolution = true;
			}
			else
			{
				int maxSample;
				try {
					maxSample = Integer.parseInt(s);
				} catch (NumberFormatException nfe) {
					return false;
				}
				if (maxSample < 0) {
					return false;
				}
				for (int i = 0; i < 25; i++) {
					if (maxSample < (1 << (i + 1))) {
						bitsPerPixel = i + 1;
						if (format == FORMAT_PPM) {
							bitsPerPixel *= 3;
						}
						return true;
					}
				}
				return false;
			}
		}
	}
"
net.jforum.util.ImageInfo.checkPsd,ImageInfo.java,"boolean checkPsd() throws IOException {
		byte[] a = new byte[24];
		if (read(a) != a.length) {
			return false;
		}
		final byte[] PSD_MAGIC = {0x50, 0x53};
		if (!equals(a, 0, PSD_MAGIC, 0, 2)) {
			return false;
		}
		format = FORMAT_PSD;
		width = getIntBigEndian(a, 16);
		height = getIntBigEndian(a, 12);
		int channels = getShortBigEndian(a, 10);
		int depth = getShortBigEndian(a, 20);
		bitsPerPixel = channels * depth;
		return (width > 0 && height > 0 && bitsPerPixel > 0 && bitsPerPixel <= 64);
	}
"
net.jforum.util.ImageInfo.checkRas,ImageInfo.java,"boolean checkRas() throws IOException {
		byte[] a = new byte[14];
		if (read(a) != a.length) {
			return false;
		}
		final byte[] RAS_MAGIC = {0x6a, (byte)0x95};
		if (!equals(a, 0, RAS_MAGIC, 0, 2)) {
			return false;
		}
		format = FORMAT_RAS;
		width = getIntBigEndian(a, 2);
		height = getIntBigEndian(a, 6);
		bitsPerPixel = getIntBigEndian(a, 10);
		return (width > 0 && height > 0 && bitsPerPixel > 0 && bitsPerPixel <= 24);
	}
"
net.jforum.util.ImageInfo.determineVerbosity,ImageInfo.java,"boolean determineVerbosity(String[] args) {
		if (args != null && args.length > 0) {
			for (String arg : args) {
				if (""-c"".equals(arg)) {
					return false;
				}
			}
		}
		return true;
	}
"
net.jforum.util.ImageInfo.equals,ImageInfo.java,"boolean equals(byte[] a1, int offs1, byte[] a2, int offs2, int num) {
		while (num-- > 0) {
			if (a1[offs1++] != a2[offs2++]) {
				return false;
			}
		}
		return true;
	}
"
net.jforum.util.ImageInfo.getBitsPerPixel,ImageInfo.java,"int getBitsPerPixel() {
		return bitsPerPixel;
	}
"
net.jforum.util.ImageInfo.getComment,ImageInfo.java,"String getComment(int index) {
		if (comments == null || index < 0 || index >= comments.size()) {
			throw new IllegalArgumentException(""Not a valid comment index: "" + index);
		}
		return (String)comments.elementAt(index);
	}
"
net.jforum.util.ImageInfo.getFormat,ImageInfo.java,"int getFormat() {
		return format;
	}
"
net.jforum.util.ImageInfo.getFormatName,ImageInfo.java,"String getFormatName() {
		if (format >= 0 && format < FORMAT_NAMES.length) {
			return FORMAT_NAMES[format];
		} else {
			return ""?"";
		}
	}
"
net.jforum.util.ImageInfo.getHeight,ImageInfo.java,"int getHeight() {
		return height;
	}
"
net.jforum.util.ImageInfo.getIntBigEndian,ImageInfo.java,"int getIntBigEndian(byte[] a, int offs) {
		return
			(a[offs] & 0xff) << 24 |
			(a[offs + 1] & 0xff) << 16 |
			(a[offs + 2] & 0xff) << 8 |
			a[offs + 3] & 0xff;
	}
"
net.jforum.util.ImageInfo.getIntLittleEndian,ImageInfo.java,"int getIntLittleEndian(byte[] a, int offs) {
		return
			(a[offs + 3] & 0xff) << 24 |
			(a[offs + 2] & 0xff) << 16 |
			(a[offs + 1] & 0xff) << 8 |
			a[offs] & 0xff;
	}
"
net.jforum.util.ImageInfo.getMimeType,ImageInfo.java,"String getMimeType() {
		if (format >= 0 && format < MIME_TYPE_STRINGS.length) {
			if (format == FORMAT_JPEG && progressive)
			{
				return ""image/pjpeg"";
			}
			return MIME_TYPE_STRINGS[format];
		} else {
			return null;
		}
	}
"
net.jforum.util.ImageInfo.getNumberOfComments,ImageInfo.java,"int getNumberOfComments()
	{
		if (comments == null) {
			return 0;
		} else {
			return comments.size();
		}
	}
"
net.jforum.util.ImageInfo.getNumberOfImages,ImageInfo.java,"int getNumberOfImages()
	{
		return numberOfImages;
	}
"
net.jforum.util.ImageInfo.getPhysicalHeightDpi,ImageInfo.java,"int getPhysicalHeightDpi() {
		return physicalHeightDpi;
	}
"
net.jforum.util.ImageInfo.getPhysicalHeightInch,ImageInfo.java,"float getPhysicalHeightInch() {
		int h = getHeight();
		int ph = getPhysicalHeightDpi();
		if (h > 0 && ph > 0) {
			return ((float)h) / ((float)ph);
		} else {
			return -1.0f;
		}
	}
"
net.jforum.util.ImageInfo.getPhysicalWidthDpi,ImageInfo.java,"int getPhysicalWidthDpi() {
		return physicalWidthDpi;
	}
"
net.jforum.util.ImageInfo.getPhysicalWidthInch,ImageInfo.java,"float getPhysicalWidthInch() {
		int w = getWidth();
		int pw = getPhysicalWidthDpi();
		if (w > 0 && pw > 0) {
			return ((float)w) / ((float)pw);
		} else {
			return -1.0f;
		}
	}
"
net.jforum.util.ImageInfo.getShortBigEndian,ImageInfo.java,"int getShortBigEndian(byte[] a, int offs) {
		return
			(a[offs] & 0xff) << 8 |
			(a[offs + 1] & 0xff);
	}
"
net.jforum.util.ImageInfo.getShortLittleEndian,ImageInfo.java,"int getShortLittleEndian(byte[] a, int offs) {
		return (a[offs] & 0xff) | (a[offs + 1] & 0xff) << 8;
	}
"
net.jforum.util.ImageInfo.getWidth,ImageInfo.java,"int getWidth() {
		return width;
	}
"
net.jforum.util.ImageInfo.isProgressive,ImageInfo.java,"boolean isProgressive()
	{
		return progressive;
	}
"
net.jforum.util.ImageInfo.main,ImageInfo.java,"void main(String[] args) {
		ImageInfo imageInfo = new ImageInfo();
		imageInfo.setDetermineImageNumber(true);
		boolean verbose = determineVerbosity(args);
		if (args.length == 0) {
			run(null, System.in, imageInfo, verbose);
		} else {
			int index = 0;
			while (index < args.length) {
				InputStream in = null;
				try {
					String name = args[index++];
					System.out.print(name + "";"");
					if (name.startsWith(""http://"")) {
						in = new URL(name).openConnection().getInputStream();
					} else {
						in = new FileInputStream(name);
					}
					run(name, in, imageInfo, verbose);
					in.close();
				} catch (IOException e) {
					System.out.println(e);
					try {
						if (in != null) {
							in.close();
						}
					} catch (IOException ee) {
					}
				}
			}
		}
	}
"
net.jforum.util.ImageInfo.print,ImageInfo.java,"void print(String sourceName, ImageInfo ii, boolean verbose) {
		if (verbose) {
			printVerbose(sourceName, ii);
		} else {
			printCompact(sourceName, ii);
		}
	}
"
net.jforum.util.ImageInfo.printCompact,ImageInfo.java,"void printCompact(String sourceName, ImageInfo imageInfo) {
		final String SEP = ""\t"";
		System.out.println(
			sourceName + SEP +
			imageInfo.getFormatName() + SEP +
			imageInfo.getMimeType() + SEP +
			imageInfo.getWidth() + SEP +
			imageInfo.getHeight() + SEP +
			imageInfo.getBitsPerPixel() + SEP +
			imageInfo.getNumberOfImages() + SEP +
			imageInfo.getPhysicalWidthDpi() + SEP +
			imageInfo.getPhysicalHeightDpi() + SEP +
			imageInfo.getPhysicalWidthInch() + SEP +
			imageInfo.getPhysicalHeightInch() + SEP +
			imageInfo.isProgressive()
		);
	}
"
net.jforum.util.ImageInfo.printLine,ImageInfo.java,"void printLine(int indentLevels, String text, float value, float minValidValue) {
		if (value < minValidValue) {
			return;
		}
		printLine(indentLevels, text, Float.toString(value));
	}
"
net.jforum.util.ImageInfo.printLine,ImageInfo.java,"void printLine(int indentLevels, String text, int value, int minValidValue) {
		if (value >= minValidValue) {
			printLine(indentLevels, text, Integer.toString(value));
		}
	}
"
net.jforum.util.ImageInfo.printLine,ImageInfo.java,"void printLine(int indentLevels, String text, String value) {
		if (value == null || value.length() == 0) {
			return;
		}
		while (indentLevels-- > 0) {
			System.out.print(""\t"");
		}
		if (text != null && text.length() > 0) {
			System.out.print(text);
			System.out.print("" "");
		}
		System.out.println(value);
	}
"
net.jforum.util.ImageInfo.printVerbose,ImageInfo.java,"void printVerbose(String sourceName, ImageInfo ii) {
		printLine(0, null, sourceName);
		printLine(1, ""File format: "", ii.getFormatName());
		printLine(1, ""MIME type: "", ii.getMimeType());
		printLine(1, ""Width (pixels): "", ii.getWidth(), 1);
		printLine(1, ""Height (pixels): "", ii.getHeight(), 1);
		printLine(1, ""Bits per pixel: "", ii.getBitsPerPixel(), 1);
		printLine(1, ""Progressive: "", ii.isProgressive() ? ""yes"" : ""no"");
		printLine(1, ""Number of images: "", ii.getNumberOfImages(), 1);
		printLine(1, ""Physical width (dpi): "", ii.getPhysicalWidthDpi(), 1);
		printLine(1, ""Physical height (dpi): "", ii.getPhysicalHeightDpi(), 1);
		printLine(1, ""Physical width (inches): "", ii.getPhysicalWidthInch(), 1.0f);
		printLine(1, ""Physical height (inches): "", ii.getPhysicalHeightInch(), 1.0f);
		int numComments = ii.getNumberOfComments();
		printLine(1, ""Number of textual comments: "", numComments, 1);
		if (numComments > 0) {
			for (int i = 0; i < numComments; i++) {
				printLine(2, null, ii.getComment(i));
			}
		}
	}
"
net.jforum.util.ImageInfo.read,ImageInfo.java,"int read() throws IOException {
		if (in != null) {
			return in.read();
		} else {
			return din.readByte();
		}
	}
"
net.jforum.util.ImageInfo.read,ImageInfo.java,"int read(byte[] a) throws IOException {
		if (in != null) {
			return in.read(a);
		} else {
			din.readFully(a);
			return a.length;
		}
	}
"
net.jforum.util.ImageInfo.read,ImageInfo.java,"int read(byte[] a, int offset, int num) throws IOException {
		if (in != null) {
			return in.read(a, offset, num);
		} else {
			din.readFully(a, offset, num);
			return num;
		}
	}
"
net.jforum.util.ImageInfo.readLine,ImageInfo.java,"String readLine() throws IOException {
		return readLine(new StringBuffer());
	}
"
net.jforum.util.ImageInfo.readLine,ImageInfo.java,"String readLine(StringBuffer sb) throws IOException {
		boolean finished;
		do {
			int value = read();
			finished = (value == -1 || value == 10);
			if (!finished) {
				sb.append((char)value);
			}
		} while (!finished);
		return sb.toString();
	}
"
net.jforum.util.ImageInfo.run,ImageInfo.java,"void run(String sourceName, InputStream in, ImageInfo imageInfo, boolean verbose) {
		imageInfo.setInput(in);
		imageInfo.setDetermineImageNumber(true);
		imageInfo.setCollectComments(verbose);
		if (imageInfo.check()) {
			print(sourceName, imageInfo, verbose);
		}
	}
"
net.jforum.util.ImageInfo.setCollectComments,ImageInfo.java,"void setCollectComments(boolean newValue)
	{
		collectComments = newValue;
	}
"
net.jforum.util.ImageInfo.setDetermineImageNumber,ImageInfo.java,"void setDetermineImageNumber(boolean newValue)
	{
		determineNumberOfImages = newValue;
	}
"
net.jforum.util.ImageInfo.setInput,ImageInfo.java,"void setInput(DataInput dataInput) {
		din = dataInput;
		in = null;
	}
"
net.jforum.util.ImageInfo.setInput,ImageInfo.java,"void setInput(InputStream inputStream) {
		in = inputStream;
		din = null;
	}
"
net.jforum.util.ImageInfo.setPhysicalHeightDpi,ImageInfo.java,"void setPhysicalHeightDpi(int newValue) {
		physicalWidthDpi = newValue;
	}
"
net.jforum.util.ImageInfo.setPhysicalWidthDpi,ImageInfo.java,"void setPhysicalWidthDpi(int newValue) {
		physicalHeightDpi = newValue;
	}
"
net.jforum.util.ImageInfo.skip,ImageInfo.java,"void skip(int num) throws IOException {
        while (num > 0) {
            long result;
            if (in != null) {
                result = in.skip(num);
            } else {
                result = din.skipBytes(num);
            }
            if (result > 0) {
                num -= result;
            } else {
                if (in != null) {
                    result = in.read();
                } else {
                    result = din.readByte();
                }
                if (result == -1) {
                	throw new IOException(""Premature end of input."");
                } else {
                	num--;
                }
            }
        }
    }
"
net.jforum.util.CategoryOrderComparator.compare,CategoryOrderComparator.java,"int compare(Category c1, Category c2) 
	{
		if (c1.getDisplayOrder() > c2.getDisplayOrder()) {
			return 1;
		}
		else if (c1.getDisplayOrder() < c2.getDisplayOrder() ) {
			return -1;
		}
		else {
			return c1.getName().compareTo(c2.getName());
		}
	}
"
net.jforum.util.I18n.changeBoardDefaultLanguage,I18n.java,"void changeBoardDefaultLanguage(String newDefaultLanguage) {
		if (!this.isLanguageLoaded(newDefaultLanguage)) {
			this.loadLanguage(newDefaultLanguage, this.config.getValue(ConfigKeys.I18N_DEFAULT_ADMIN));
		}

		this.defaultLocaleName = newDefaultLanguage;
	}
"
net.jforum.util.I18n.load,I18n.java,"void load(String language) {
		this.loadLanguage(language, this.defaultLocaleName);
	}
"
net.jforum.util.I18n.getFormattedMessage,I18n.java,"String getFormattedMessage(String key, String language, Object[] args) {
		return MessageFormat.format(this.messages.get(language).getProperty(key), args);
	}
"
net.jforum.util.I18n.getFormattedMessage,I18n.java,"String getFormattedMessage(String key, Object... args) {
		return this.getFormattedMessage(key, this.defaultLocaleName, args);
	}
"
net.jforum.util.I18n.params,I18n.java,"Object[] params(Object... args) {
		return args;
	}
"
net.jforum.util.I18n.getMessage,I18n.java,"String getMessage(String key, String language) {
		Properties p = this.messages.get(language);

		if (p == null) {
			this.load(language);
			p = this.messages.get(language);
		}

		return p.getProperty(key);
	}
"
net.jforum.util.I18n.getMessage,I18n.java,"String getMessage(String key) {
		return this.getMessage(key, this.defaultLocaleName);
	}
"
net.jforum.util.I18n.isLanguageLoaded,I18n.java,"boolean isLanguageLoaded(String language) {
		return this.messages.containsKey(language);
	}
"
net.jforum.util.I18n.languageExists,I18n.java,"boolean languageExists(String language) {
		return (this.localeNames.getProperty(language) != null);
	}
"
net.jforum.util.I18n.loadConfiguration,I18n.java,"void loadConfiguration() {
		this.loadLocales();

		this.defaultLocaleName = this.config.getValue(ConfigKeys.I18N_DEFAULT_ADMIN);
		this.loadLanguage(defaultLocaleName, null);

		String custom = this.config.getValue(ConfigKeys.I18N_DEFAULT);

		if (!custom.equals(defaultLocaleName)) {
			this.loadLanguage(custom, defaultLocaleName);
			this.defaultLocaleName = custom;
		}
	}
"
net.jforum.util.I18n.loadLocales,I18n.java,"void loadLocales() {
		try {
			this.localeNames.load(this.getClass().getResourceAsStream(""/jforumConfig/languages/locales.properties""));
		}
		catch (IOException e) {
			throw new ForumException(e);
		}
	}
"
net.jforum.util.I18n.loadLanguage,I18n.java,"void loadLanguage(String language, String mergeWith) {
		Properties p = new Properties();

		if (mergeWith != null) {
			if (!this.isLanguageLoaded(mergeWith)) {
				this.loadLanguage(mergeWith, null);
			}

			p.putAll(this.messages.get(mergeWith));
		}

		try {
			p.load(this.getClass().getResourceAsStream(""/jforumConfig/languages/"" + this.localeNames.getProperty(language)));
		}
		catch (IOException e) {
			throw new ForumException(e);
		}

		this.messages.put(language, p);
	}
"
net.jforum.util.URLBuilder.build,URLBuilder.java,"String build(Object... args) {
		StringBuilder sb = new StringBuilder().append('/');

		for (int i = 0; i < args.length - 1; i++) {
			sb.append(args[i]).append('/');
		}

		sb.append(args[args.length - 1]);

		return sb.toString();
	}
"
net.jforum.util.UploadUtils.getExtension,UploadUtils.java,"String getExtension() {
		String fileName = this.uploadedFile.getFileName();
		return fileName.substring(fileName.lastIndexOf('.') + 1);
	}
"
net.jforum.util.UploadUtils.saveUploadedFile,UploadUtils.java,"void saveUploadedFile(String filename) {
		BufferedInputStream inputStream = null;
		FileOutputStream outputStream = null;

		try {
			inputStream = new BufferedInputStream(this.uploadedFile.getFile());
			outputStream = new FileOutputStream(filename);

			int c;
			byte[] b = new byte[4096];
			while ((c = inputStream.read(b)) != -1) {
				outputStream.write(b, 0, c);
			}
		}
		catch (IOException e) {
			throw new ForumException(e);
		}
		finally {
			try {
				outputStream.flush();
				outputStream.close();

				inputStream.close();
			}
			catch (Exception e) {
			}
		}
	}
"
net.jforum.util.GroupInteractionFilter.filterForumListing,GroupInteractionFilter.java,"void filterForumListing(Result result, UserSession userSession) {
		@SuppressWarnings(""unchecked"")
		Collection<UserSession> sessions = (Collection<UserSession>) result.included().get(""onlineUsers"");

		if (sessions == null) {
			sessions = new ArrayList<UserSession>();
		}

		Set<UserSession> newSessions = new HashSet<UserSession>();
		User currentUser = userSession.getUser();

		for (Group group : currentUser.getGroups()) {
			for (UserSession anotherUserSession : sessions) {
				User user = anotherUserSession.getUser();

				if (user != null && user.getGroups().contains(group)) {
					newSessions.add(anotherUserSession);
				}
			}
		}

		result.include(""totalLoggedUsers"", newSessions.size());
		result.include(""onlineUsers"", newSessions);
	}
"
net.jforum.util.mail.TopicReplySpammer.prepare,TopicReplySpammer.java,"void prepare(Topic topic, List<User> users) {
		int postsPerPage = this.getConfig().getInt(ConfigKeys.POSTS_PER_PAGE);

		Pagination pagination = new Pagination(this.getConfig(), 0).forTopic(topic);

		String page = """";

		if (topic.getTotalReplies() >= postsPerPage) {
			page = pagination.getStart() + ""/"";
		}

		String forumLink = this.buildForumLink();

		String path = this.buildMessageLink(topic, page, forumLink);
		String unwatch = this.buildUnwatchLink(topic, forumLink);

		Map<String, Object> params = new HashMap<String, Object>();

		params.put(""topic"", topic);
		params.put(""path"", path);
		params.put(""unwatch"", unwatch);

		this.setUsers(users);
		this.setTemplateParams(params);

		String subject = this.getConfig().getValue(ConfigKeys.MAIL_NEW_ANSWER_SUBJECT);

		this.prepareMessage(MessageFormat.format(subject, topic.getSubject()),
			this.getConfig().getValue(ConfigKeys.MAIL_NEW_ANSWER_MESSAGE_FILE));
	}
"
net.jforum.util.mail.TopicReplySpammer.buildUnwatchLink,TopicReplySpammer.java,"String buildUnwatchLink(Topic topic, String forumLink) {
		return new StringBuilder(128)
			.append(forumLink)
			.append(""topics/unwatch/"")
			.append(topic.getId())
			.append(this.getConfig().getValue(ConfigKeys.SERVLET_EXTENSION))
			.toString();
	}
"
net.jforum.util.mail.TopicReplySpammer.buildMessageLink,TopicReplySpammer.java,"String buildMessageLink(Topic topic, String page, String forumLink) {
		return new StringBuilder(128)
			.append(forumLink)
			.append(""topics/list/"")
			.append(page)
			.append(topic.getId())
			.append(this.getConfig().getValue(ConfigKeys.SERVLET_EXTENSION))
			.append('#')
			.append(topic.getLastPost().getId())
			.toString();
	}
"
net.jforum.util.mail.SpammerFactory.newTopicReply,SpammerFactory.java,"Spammer newTopicReply(Topic topic, List<User> users) {
		TopicReplySpammer spammer = new TopicReplySpammer(this.config);
		spammer.prepare(topic, users);

		return spammer;
	}
"
net.jforum.util.mail.ActivationKeySpammer.prepare,ActivationKeySpammer.java,"void prepare(User user) {
		String url = new StringBuilder()
			.append(this.buildForumLink())
			.append(""user/activateAccount/"")
			.append(user.getActivationKey())
			.append('/')
			.append(user.getId())
			.append(this.getConfig().getValue(ConfigKeys.SERVLET_EXTENSION))
			.toString();

		String manualUrl = new StringBuilder()
			.append(this.buildForumLink())
			.append(""user/activateManually"")
			.append(this.getConfig().getValue(ConfigKeys.SERVLET_EXTENSION))
			.toString();

		Map<String, Object> params = new HashMap<String, Object>();
		params.put(""url"", url);
		params.put(""user"", user);
		params.put(""manualUrl"", manualUrl);

		List<User> recipients = new ArrayList<User>();
		recipients.add(user);

		this.setUsers(recipients);
		this.setTemplateParams(params);

		this.prepareMessage(this.getConfig().getValue(ConfigKeys.MAIL_ACTIVATION_KEY_SUBJECT),
			this.getConfig().getValue(ConfigKeys.MAIL_ACTIVATION_KEY_MESSAGE_FILE));
	}
"
net.jforum.util.mail.SpammerTaskExecutor.dispatch,SpammerTaskExecutor.java,"void dispatch(Spammer spammer) {
		this.taskExecutor.execute(new EmailSenderTask(spammer));
	}
"
net.jforum.util.mail.EmailSenderTask.run,EmailSenderTask.java,"void run() {
		if (logger.isTraceEnabled()) {
			logger.trace(""Running job for "" + spammer);
		}

		this.spammer.dispatchMessages();
	}
"
net.jforum.util.mail.MessageId.getTopicId,MessageId.java,"int getTopicId() {
		return this.topicId;
	}
"
net.jforum.util.mail.MessageId.buildMessageId,MessageId.java,"String buildMessageId(int postId, int topicId, int forumId) {
		return new StringBuffer()
			.append('<')
			.append(postId)
			.append('.')
			.append(topicId)
			.append('.')
			.append(forumId)
			.append('.')
			.append(System.currentTimeMillis())
			.append(MD5.hash(Long.toString(System.currentTimeMillis())))
			.append(""@jforum>"").toString();
	}
"
net.jforum.util.mail.MessageId.buildInReplyTo,MessageId.java,"String buildInReplyTo(Topic topic) {
		return buildMessageId(topic.getFirstPost().getId(), topic.getId(), topic.getForum().getId());
	}
"
net.jforum.util.mail.MessageId.parse,MessageId.java,"MessageId parse(String header) {
		MessageId messageId = new MessageId();

		if (header != null) {
			// <postId.topicId.forumId.randomNumber@host>
			Matcher matcher = Pattern.compile(""<(.*?)\\.(.*?)\\.(.*?)\\.(.*?)@.*>"").matcher(header);

			if (matcher.matches()) {
				String s = matcher.group(2);

				try {
					messageId.topicId = Integer.parseInt(s);
				}
				catch (Exception e) { }
			}
		}

		return messageId;
	}
"
net.jforum.util.mail.LostPasswordSpammer.prepare,LostPasswordSpammer.java,"void prepare(User user, String mailSubject) {
		String url = new StringBuilder()
			.append(this.buildForumLink())
			.append(""user/recoverPassword/"")
			.append(user.getActivationKey())
			.append(this.getConfig().getValue(ConfigKeys.SERVLET_EXTENSION))
			.toString();

		Map<String, Object> params = new HashMap<String, Object>();
		params.put(""url"", url);
		params.put(""user"", user);

		List<User> recipients = new ArrayList<User>();
		recipients.add(user);

		this.setUsers(recipients);
		this.setTemplateParams(params);

		super.prepareMessage(mailSubject, this.getConfig().getValue(ConfigKeys.MAIL_LOST_PASSWORD_MESSAGE_FILE));
	}
"
net.jforum.util.mail.IdentifiableMimeMessage.setMessageId,IdentifiableMimeMessage.java,"void setMessageId(String messageId) {
		this.messageId = messageId;
	}
"
net.jforum.util.mail.IdentifiableMimeMessage.updateMessageID,IdentifiableMimeMessage.java,"void updateMessageID() throws MessagingException {
		if (this.messageId != null) {
			this.addHeader(""Message-ID"", this.messageId);
		}
		else {
			super.updateMessageID();
		}
	}
"
net.jforum.util.mail.PrivateMessageSpammer.prepare,PrivateMessageSpammer.java,"void prepare(User user) {
		if (StringUtils.isEmpty(user.getEmail())) {
			return;
		}

		String path = new StringBuilder(128)
			.append(this.buildForumLink())
			.append(""pm/inbox"")
			.append(this.getConfig().getValue(ConfigKeys.SERVLET_EXTENSION))
			.toString();

		Map<String, Object> params = new HashMap<String, Object>();
		params.put(""path"", path);
		params.put(""user"", user);

		List<User> recipients = new ArrayList<User>();
		recipients.add(user);

		this.setUsers(recipients);
		this.setTemplateParams(params);

		super.prepareMessage(this.getConfig().getValue(ConfigKeys.MAIL_NEW_PM_SUBJECT),
			this.getConfig().getValue(ConfigKeys.MAIL_NEW_PM_MESSAGE_FILE));
	}
"
net.jforum.util.mail.Spammer.dispatchMessages,Spammer.java,"boolean dispatchMessages() {
		try {
			if (this.config.getBoolean(ConfigKeys.MAIL_SMTP_AUTH)) {
				this.dispatchAuthenticatedMessage();
			}
			else {
				this.dispatchAnonymousMessage();
			}
		}
		catch (MessagingException e) {
			logger.error(""Error while dispatching the message."" + e, e);
		}

		return true;
	}
"
net.jforum.util.mail.Spammer.getConfig,Spammer.java,"JForumConfig getConfig() {
		return this.config;
	}
"
net.jforum.util.mail.Spammer.dispatchAnonymousMessage,Spammer.java,"void dispatchAnonymousMessage() throws AddressException, MessagingException {
		int sendDelay = this.config.getInt(ConfigKeys.MAIL_SMTP_DELAY);

		for (User user : this.users) {
			if (StringUtils.isEmpty(user.getEmail())) {
				continue;
			}

			if (this.needCustomization) {
				this.defineUserMessage(user);
			}

			Address address = new InternetAddress(user.getEmail());

			if (logger.isTraceEnabled()) {
				logger.trace(""Sending mail to: "" + user.getEmail());
			}

			this.message.setRecipient(Message.RecipientType.TO, address);
			Transport.send(this.message, new Address[] { address });

			if (sendDelay > 0) {
				this.waitUntilNextMessage(sendDelay);
			}
		}
	}
"
net.jforum.util.mail.Spammer.dispatchAuthenticatedMessage,Spammer.java,"void dispatchAuthenticatedMessage() throws NoSuchProviderException {
		if (!StringUtils.isEmpty(username) && !StringUtils.isEmpty(password)) {
			int batchSize = this.config.getInt(ConfigKeys.MAIL_BATCH_SIZE);
			int total = (int)Math.ceil((double)this.users.size() / (double)batchSize);

			Iterator<User> iterator = this.users.iterator();

			for (int i = 0; i < total; i++) {
				this.dispatchNoMoreThanBatchSize(iterator, batchSize);
			}
		}
	}
"
net.jforum.util.mail.Spammer.dispatchNoMoreThanBatchSize,Spammer.java,"void dispatchNoMoreThanBatchSize(Iterator<User> iterator, int batchSize) throws NoSuchProviderException {
		boolean ssl = this.config.getBoolean(ConfigKeys.MAIL_SMTP_SSL);
		Transport transport = this.session.getTransport(ssl ? ""smtps"" : ""smtp"");

		try {
			String host = this.config.getValue(ConfigKeys.MAIL_SMTP_HOST);
			int sendDelay = this.config.getInt(ConfigKeys.MAIL_SMTP_DELAY);

			transport.connect(host, username, password);

			if (transport.isConnected()) {
				for (int counter = 0; counter < batchSize && iterator.hasNext(); counter++) {
					User user = iterator.next();

					if (StringUtils.isEmpty(user.getEmail())) {
						continue;
					}

					if (this.needCustomization) {
						this.defineUserMessage(user);
					}

					Address address = new InternetAddress(user.getEmail());

					if (logger.isDebugEnabled()) {
						logger.debug(""Sending mail to: "" + user.getEmail());
					}

					this.message.setRecipient(Message.RecipientType.TO, address);
					transport.sendMessage(this.message, new Address[] { address });

					if (sendDelay > 0) {
						this.waitUntilNextMessage(sendDelay);
					}
				}
			}
		}
		catch (Exception e) {
			logger.error(""Errow while sending emails: "" + e, e);
			throw new MailException(e);
		}
		finally {
			try {
				transport.close();
			}
			catch (Exception e) { }
		}
	}
"
net.jforum.util.mail.Spammer.defineUserMessage,Spammer.java,"void defineUserMessage(User user) {
		try {
			this.templateParams.put(""user"", user);

			String text = this.processTemplate();

			this.defineMessageText(text);
		}
		catch (Exception e) {
			throw new MailException(e);
		}
	}
"
net.jforum.util.mail.Spammer.waitUntilNextMessage,Spammer.java,"void waitUntilNextMessage(int sendDelay) {
		try {
			Thread.sleep(sendDelay);
		}
		catch (InterruptedException ie) {
			logger.error(""Error while Thread.sleep."" + ie, ie);
		}
	}
"
net.jforum.util.mail.Spammer.prepareMessage,Spammer.java,"void prepareMessage(String subject, String messageFile) throws MailException {
		if (this.messageId == null) {
			this.message = new MimeMessage(session);
		}
		else {
			this.message = new IdentifiableMimeMessage(session);
			((IdentifiableMimeMessage) this.message).setMessageId(this.messageId);
		}

		this.templateParams.put(""forumName"", this.config.getValue(ConfigKeys.FORUM_NAME));

		try {
			this.message.setSentDate(new Date());
			this.message.setFrom(new InternetAddress(this.config.getValue(ConfigKeys.MAIL_SENDER)));
			this.message.setSubject(subject, this.config.getValue(ConfigKeys.MAIL_CHARSET));

			if (this.inReplyTo != null) {
				this.message.addHeader(""In-Reply-To"", this.inReplyTo);
			}

			this.createTemplate(messageFile);
			this.needCustomization = this.isCustomizationNeeded();

			// If we don't need to customize any part of the message,
			// then build the generic text right now
			if (!this.needCustomization) {
				String text = this.processTemplate();
				this.defineMessageText(text);
			}
		}
		catch (Exception e) {
			throw new MailException(e);
		}
	}
"
net.jforum.util.mail.Spammer.defineMessageText,Spammer.java,"void defineMessageText(String text) throws MessagingException {

		if (messageFormat == MESSAGE_TEXT) {
			this.message.setText(text);
		}
		else {
			String charset = this.config.getValue(ConfigKeys.MAIL_CHARSET);
			this.message.setContent(text.replaceAll(""\n"", ""<br />""), ""text/html; charset="" + charset);
		}
	}
"
net.jforum.util.mail.Spammer.createTemplate,Spammer.java,"void createTemplate(String templateName) throws Exception {
		this.templateFile = new File(this.config.getValue(ConfigKeys.APPLICATION_PATH) + templateName);
	}
"
net.jforum.util.mail.Spammer.processTemplate,Spammer.java,"String processTemplate() throws Exception {
		return this.templateEngine.createTemplate(this.templateFile)
			.make(this.templateParams).toString();
	}
"
net.jforum.util.mail.Spammer.setTemplateParams,Spammer.java,"void setTemplateParams(Map<String, Object> params) {
		this.templateParams = params;
	}
"
net.jforum.util.mail.Spammer.isCustomizationNeeded,Spammer.java,"boolean isCustomizationNeeded() {
		for (User user : this.users) {
			if (user.getNotifyText()) {
				return true;
			}
		}

		return false;
	}
"
net.jforum.util.mail.Spammer.buildForumLink,Spammer.java,"String buildForumLink() {
		String forumLink = this.getConfig().getValue(ConfigKeys.FORUM_LINK);

		if (forumLink.charAt(forumLink.length() - 1) != '/') {
			forumLink += ""/"";
		}
		return forumLink;
	}
"
net.jforum.util.mail.Spammer.setMessageId,Spammer.java,"void setMessageId(String messageId) {
		this.messageId = messageId;
	}
"
net.jforum.util.mail.Spammer.setInReplyTo,Spammer.java,"void setInReplyTo(String inReplyTo) {
		this.inReplyTo = inReplyTo;
	}
"
net.jforum.util.mail.Spammer.setUsers,Spammer.java,"void setUsers(List<User> users) {
		this.users = users;
	}
"
net.jforum.util.mail.Spammer.localhostProperty,Spammer.java,"String localhostProperty(boolean ssl) {
		return ssl ? ConfigKeys.MAIL_SMTP_SSL_LOCALHOST : ConfigKeys.MAIL_SMTP_LOCALHOST;
	}
"
net.jforum.util.mail.Spammer.authProperty,Spammer.java,"String authProperty(boolean ssl) {
		return ssl ? ConfigKeys.MAIL_SMTP_SSL_AUTH : ConfigKeys.MAIL_SMTP_AUTH;
	}
"
net.jforum.util.mail.Spammer.portProperty,Spammer.java,"String portProperty(boolean ssl) {
		return ssl ? ConfigKeys.MAIL_SMTP_SSL_PORT : ConfigKeys.MAIL_SMTP_PORT;
	}
"
net.jforum.util.mail.Spammer.hostProperty,Spammer.java,"String hostProperty(boolean ssl) {
		return ssl ? ConfigKeys.MAIL_SMTP_SSL_HOST : ConfigKeys.MAIL_SMTP_HOST;
	}
"
net.jforum.security.AccessForumRule.shouldProceed,AccessForumRule.java,"boolean shouldProceed(UserSession userSession, HttpServletRequest request) {
		int forumId = this.findForumId(request);
		return userSession.getRoleManager().isForumAllowed(forumId);
	}
"
net.jforum.security.AccessForumRule.findForumId,AccessForumRule.java,"int findForumId(HttpServletRequest request) {
		int forumId = 0;

		if (request.getParameterMap().containsKey(""forumId"")) {
			forumId = Integer.parseInt(request.getParameter(""forumId""));
		}
		else if (request.getParameterMap().containsKey(""topicId"")) {
			Topic topic = topicRepository.get(Integer.parseInt(request.getParameter(""topicId"")));
			forumId = topic.getForum().getId();
		}
		else {
			throw new AccessRuleException(""Could not find topicId in the current request"");
		}

		return forumId;
	}
"
net.jforum.security.DownloadAttachmentRule.shouldProceed,DownloadAttachmentRule.java,"boolean shouldProceed(UserSession userSession, HttpServletRequest request) {
		if (!userSession.isLogged() && !this.config.getBoolean(ConfigKeys.ATTACHMENTS_ANONYMOUS)) {
			return false;
		}

		Attachment attachment = this.repository.get(Integer.parseInt(request.getParameter(""attachmentId"")));

		if (!userSession.getRoleManager().isAttachmentsAlllowed(attachment.getPost().getForum().getId())
			&& !userSession.getRoleManager().getCanDownloadAttachments(attachment.getPost().getForum().getId())) {
			return false;
		}

		return true;
	}
"
net.jforum.security.AdministrationRule.shouldProceed,AdministrationRule.java,"boolean shouldProceed(UserSession userSession, HttpServletRequest request) {
		return userSession.isLogged()
			&& (userSession.getRoleManager().isAdministrator() || userSession.getRoleManager().isCoAdministrator());
	}
"
net.jforum.security.CreateNewTopicRule.shouldProceed,CreateNewTopicRule.java,"boolean shouldProceed(UserSession userSession, HttpServletRequest request) {
		RoleManager roleManager = userSession.getRoleManager();

		int forumId = this.findForumId(request);
		Forum forum = this.repository.get(forumId);

		return roleManager.isForumAllowed(forumId)
			&& (userSession.isLogged() || forum.isAllowAnonymousPosts())
			&& (!roleManager.isForumReadOnly(forumId) && !roleManager.isForumReplyOnly(forumId))
			&& (!roleManager.getPostOnlyWithModeratorOnline() || (roleManager.getPostOnlyWithModeratorOnline() && this.sessionManager.isModeratorOnline()));
	}
"
net.jforum.security.CreateNewTopicRule.findForumId,CreateNewTopicRule.java,"int findForumId(HttpServletRequest request) {
		int forumId = 0;

		if (request.getParameterMap().containsKey(""forumId"")) {
			forumId = Integer.parseInt(request.getParameter(""forumId""));
		}
		else if (request.getParameterMap().containsKey(""topic.forum.id"")) {
			forumId = Integer.parseInt(request.getParameter(""topic.forum.id""));
		}
		else {
			throw new AccessRuleException(""Could not find forumId or topic.forum.id in the current request"");
		}

		return forumId;
	}
"
net.jforum.security.ChangePostRule.shouldProceed,ChangePostRule.java,"boolean shouldProceed(UserSession userSession, HttpServletRequest request) {
		RoleManager roleManager = userSession.getRoleManager();

		if (roleManager.isAdministrator()) {
			return true;
		}

		int postId = this.findPostId(request);
		Post post = this.repository.get(postId);

		if (roleManager.isModerator() && roleManager.getCanModerateForum(post.getForum().getId())) {
			return true;
		}

		if(roleManager.getPostOnlyWithModeratorOnline() && !sessionManager.isModeratorOnline()) {
			return false;
		}

		return userSession.isLogged() && userSession.getUser().getId() == post.getUser().getId();
	}
"
net.jforum.security.ChangePostRule.findPostId,ChangePostRule.java,"int findPostId(HttpServletRequest request) {
		int postId = 0;

		if (request.getParameterMap().containsKey(""postId"")) {
			postId = Integer.parseInt(request.getParameter(""postId""));
		}
		else if (request.getParameterMap().containsKey(""post.id"")) {
			postId = Integer.parseInt(request.getParameter(""post.id""));
		}
		else {
			throw new AccessRuleException(""Could not find postId or post.id in the current request"");
		}

		return postId;
	}
"
net.jforum.security.AuthenticatedRule.shouldProceed,AuthenticatedRule.java,"boolean shouldProceed(UserSession userSession, HttpServletRequest request) {
		return userSession.isLogged();
	}
"
net.jforum.security.ModerationRule.shouldProceed,ModerationRule.java,"boolean shouldProceed(UserSession userSession, HttpServletRequest request) {
		return userSession.getRoleManager().isModerator();
	}
"
net.jforum.security.EmptyRule.shouldProceed,EmptyRule.java,"boolean shouldProceed(UserSession userSession, HttpServletRequest request) {
		return false;
	}
"
net.jforum.security.PrivateMessageEnabledRule.shouldProceed,PrivateMessageEnabledRule.java,"boolean shouldProceed(UserSession userSession, HttpServletRequest request) {
		return userSession.getRoleManager().isPrivateMessageEnabled();
	}
"
net.jforum.security.PrivateMessageOwnerRule.shouldProceed,PrivateMessageOwnerRule.java,"boolean shouldProceed(UserSession userSession, HttpServletRequest request) {
		PrivateMessage pm = this.repository.get(this.findId(request));
		User currentUser = userSession.getUser();

		return pm != null && (pm.getToUser().equals(currentUser) || pm.getFromUser().equals(currentUser));
	}
"
net.jforum.security.PrivateMessageOwnerRule.findId,PrivateMessageOwnerRule.java,"int findId(HttpServletRequest request) {
		if (request.getParameterMap().containsKey(""id"")) {
			return Integer.parseInt(request.getParameter(""id""));
		}

		throw new AccessRuleException(""Could not find the parameter 'id' in the current request"");
	}
"
net.jforum.security.TopicFilter.filter,TopicFilter.java,"List<Topic> filter(List<Topic> topics, RoleManager roleManager) {
		List<Topic> result = new ArrayList<Topic>();

		if (roleManager != null) {
			for (Topic topic : topics) {
				if (roleManager.isForumAllowed(topic.getForum().getId())) {
					result.add(topic);
				}
			}
		}

		return result;
	}
"
net.jforum.security.ReplyTopicRule.shouldProceed,ReplyTopicRule.java,"boolean shouldProceed(UserSession userSession, HttpServletRequest request) {
		RoleManager roleManager = userSession.getRoleManager();
		int forumId = this.findForumId(request);
		Forum forum = this.forumRepository.get(forumId);

		return roleManager.isForumAllowed(forumId)
			&& (userSession.isLogged() || forum.isAllowAnonymousPosts())
			&& !roleManager.isForumReadOnly(forumId)
			&& (!roleManager.getPostOnlyWithModeratorOnline() || (roleManager.getPostOnlyWithModeratorOnline() && this.sessionManager.isModeratorOnline()));
	}
"
net.jforum.security.ReplyTopicRule.findForumId,ReplyTopicRule.java,"int findForumId(HttpServletRequest request) {
		int forumId = 0;

		if (request.getParameterMap().containsKey(""topic.forum.id"")) {
			forumId = Integer.parseInt(request.getParameter(""topic.forum.id""));
		}
		else if (request.getParameterMap().containsKey(""topicId"")) {
			forumId = this.getForumIdFromTopic(Integer.parseInt(request.getParameter(""topicId"")));
		}
		else if (request.getParameterMap().containsKey(""postId"")) {
			forumId = this.getForumIdFromPost(Integer.parseInt(request.getParameter(""postId"")));
		}
		else {
			throw new AccessRuleException(""Could not find topicId, topic.forum.id or postId in the current request"");
		}

		return forumId;
	}
"
net.jforum.security.ReplyTopicRule.getForumIdFromPost,ReplyTopicRule.java,"int getForumIdFromPost(int postId) {
		Post post = this.postRepository.get(postId);
		return post.getForum().getId();
	}
"
net.jforum.security.ReplyTopicRule.getForumIdFromTopic,ReplyTopicRule.java,"int getForumIdFromTopic(int topicId) {
		Topic topic = this.topicRepository.get(topicId);
		return topic.getForum().getId();
	}
"
net.jforum.security.EditUserRule.shouldProceed,EditUserRule.java,"boolean shouldProceed(UserSession userSession, HttpServletRequest request) {
		int userId = this.findUserId(request);
		boolean logged = userSession.isLogged();

		if (!logged) {
			return false;
		}

		User currentUser = userSession.getUser();

		if (currentUser.getId() == userId) {
			return true;
		}

		User user = userRepository.get(userId);
		return userSession.getRoleManager().getCanEditUser(user, currentUser.getGroups());
	}
"
net.jforum.security.EditUserRule.findUserId,EditUserRule.java,"int findUserId(HttpServletRequest request) {
		int userId = 0;

		if (request.getParameterMap().containsKey(""userId"")) {
			userId = Integer.parseInt(request.getParameter(""userId""));
		}
		else if (request.getParameterMap().containsKey(""user.id"")) {
			userId = Integer.parseInt(request.getParameter(""user.id""));
		}
		else {
			throw new AccessRuleException(""Could not find userId or user.id in the current request"");
		}

		return userId;
	}
"
net.jforum.security.RoleManager.setGroups,RoleManager.java,"void setGroups(List<Group> groups) {
		this.roles = new HashMap<String, Role>();

		if (groups != null) {
			for (Group group : groups) {
				List<Role> currentGroupRoles = group.getRoles();

				for (Role role : currentGroupRoles) {
					Role existingRole = this.roles.get(role.getName());

					if (existingRole == null) {
						this.roles.put(role.getName(), new Role(role));
					}
					else {
						// Handle the very special case of read only and reply only
						if (role.getName().equals(SecurityConstants.FORUM_READ_ONLY)
								|| role.getName().equals(SecurityConstants.FORUM_REPLY_ONLY)) {
							existingRole.getRoleValues().retainAll(role.getRoleValues());
						}
						else {
							existingRole.getRoleValues().addAll(role.getRoleValues());
						}
					}
				}
			}

			this.readReplyOnlySecondPass(SecurityConstants.FORUM_READ_ONLY, groups);
			this.readReplyOnlySecondPass(SecurityConstants.FORUM_REPLY_ONLY, groups);
		}
	}
"
net.jforum.security.RoleManager.readReplyOnlySecondPass,RoleManager.java,"void readReplyOnlySecondPass(String roleName, List<Group> groups) {
		Role role = this.roles.get(roleName);

		if (role != null) {
			for (int forumId : new ArrayList<Integer>(role.getRoleValues())) {
				for (Group g : groups) {
					if (g.roleExists(SecurityConstants.FORUM, forumId) && !g.roleExists(roleName, forumId)) {
						role.getRoleValues().remove((Object)forumId);
					}
				}
			}
		}
	}
"
net.jforum.security.RoleManager.getPostOnlyWithModeratorOnline,RoleManager.java,"boolean getPostOnlyWithModeratorOnline() {
		return this.roleExists(SecurityConstants.POST_ONLY_WITH_MODERATOR_ONLINE);
	}
"
net.jforum.security.RoleManager.isReplyModerationNeeded,RoleManager.java,"boolean isReplyModerationNeeded(int forumId) {
		return this.roleExists(SecurityConstants.MODERATE_REPLIES, forumId);
	}
"
net.jforum.security.RoleManager.getCanDownloadAttachments,RoleManager.java,"boolean getCanDownloadAttachments(int forumId) {
		return this.roleExists(SecurityConstants.ATTACHMENTS_DOWNLOAD, forumId);
	}
"
net.jforum.security.RoleManager.isAttachmentsAlllowed,RoleManager.java,"boolean isAttachmentsAlllowed(int forumId) {
		return this.roleExists(SecurityConstants.ATTACHMENTS_ENABLED, forumId);
	}
"
net.jforum.security.RoleManager.isForumReplyOnly,RoleManager.java,"boolean isForumReplyOnly(int forumId) {
		return this.roleExists(SecurityConstants.FORUM_REPLY_ONLY, forumId);
	}
"
net.jforum.security.RoleManager.isHtmlAllowed,RoleManager.java,"boolean isHtmlAllowed(int forumId) {
		return this.roleExists(SecurityConstants.HTML_ALLOWED, forumId);
	}
"
net.jforum.security.RoleManager.isForumReadOnly,RoleManager.java,"boolean isForumReadOnly(int forumId) {
		return this.roleExists(SecurityConstants.FORUM_READ_ONLY, forumId);
	}
"
net.jforum.security.RoleManager.getCanVoteOnPolls,RoleManager.java,"boolean getCanVoteOnPolls() {
		return this.roleExists(SecurityConstants.POLL_VOTE);
	}
"
net.jforum.security.RoleManager.getCanCreatePolls,RoleManager.java,"boolean getCanCreatePolls() {
		return this.roleExists(SecurityConstants.POLL_CREATE);
	}
"
net.jforum.security.RoleManager.getCanCreateStickyAnnouncementTopics,RoleManager.java,"boolean getCanCreateStickyAnnouncementTopics() {
		return this.roleExists(SecurityConstants.CREATE_STICKY_ANNOUNCEMENT_TOPICS);
	}
"
net.jforum.security.RoleManager.getCanLockUnlockTopics,RoleManager.java,"boolean getCanLockUnlockTopics() {
		return this.roleExists(SecurityConstants.TOPIC_LOCK_UNLOCK);
	}
"
net.jforum.security.RoleManager.getCanMoveTopics,RoleManager.java,"boolean getCanMoveTopics() {
		return this.roleExists(SecurityConstants.TOPIC_MOVE);
	}
"
net.jforum.security.RoleManager.getCanEditPosts,RoleManager.java,"boolean getCanEditPosts() {
		return this.roleExists(SecurityConstants.POST_EDIT);
	}
"
net.jforum.security.RoleManager.getCanDeletePosts,RoleManager.java,"boolean getCanDeletePosts() {
		return this.roleExists(SecurityConstants.POST_DELETE);
	}
"
net.jforum.security.RoleManager.getCanModerateForum,RoleManager.java,"boolean getCanModerateForum(int forumId) {
		return isAdministrator() || this.roleExists(SecurityConstants.MODERATE_FORUM, forumId);
	}
"
net.jforum.security.RoleManager.getCanApproveMessages,RoleManager.java,"boolean getCanApproveMessages() {
		return this.roleExists(SecurityConstants.APPROVE_MESSAGES);
	}
"
net.jforum.security.RoleManager.isModerator,RoleManager.java,"boolean isModerator() {
		return this.roleExists(SecurityConstants.MODERATOR);
	}
"
net.jforum.security.RoleManager.isForumAllowed,RoleManager.java,"boolean isForumAllowed(int forumId) {
		return this.roleExists(SecurityConstants.FORUM, forumId);
	}
"
net.jforum.security.RoleManager.isCategoryAllowed,RoleManager.java,"boolean isCategoryAllowed(int categoryId) {
		return this.roleExists(SecurityConstants.CATEGORY, categoryId);
	}
"
net.jforum.security.RoleManager.isCategoryModerated,RoleManager.java,"boolean isCategoryModerated(List<Forum> forumsOfACategory) {
		for (Forum forum : forumsOfACategory) {
			if(this.roleExists(SecurityConstants.MODERATE_FORUM, forum.getId())) {
				return true;
			}
		}
		return false;
	}
"
net.jforum.security.RoleManager.isAdministrator,RoleManager.java,"boolean isAdministrator() {
		return this.roleExists(SecurityConstants.ADMINISTRATOR);
	}
"
net.jforum.security.RoleManager.isCoAdministrator,RoleManager.java,"boolean isCoAdministrator() {
		return this.roleExists(SecurityConstants.CO_ADMINISTRATOR);
	}
"
net.jforum.security.RoleManager.isGroupManager,RoleManager.java,"boolean isGroupManager(int groupId) {
		return this.roleExists(SecurityConstants.GROUPS, groupId);
	}
"
net.jforum.security.RoleManager.isPrivateMessageEnabled,RoleManager.java,"boolean isPrivateMessageEnabled() {
		return this.roleExists(SecurityConstants.PRIVATE_MESSAGE);
	}
"
net.jforum.security.RoleManager.isUserListingEnabled,RoleManager.java,"boolean isUserListingEnabled() {
		return this.roleExists(SecurityConstants.USER_LISTING);
	}
"
net.jforum.security.RoleManager.getCanViewProfile,RoleManager.java,"boolean getCanViewProfile() {
		return this.roleExists(SecurityConstants.VIEW_PROFILE);
	}
"
net.jforum.security.RoleManager.getCanHaveProfilePicture,RoleManager.java,"boolean getCanHaveProfilePicture() {
		return this.roleExists(SecurityConstants.PROFILE_PICTURE);
	}
"
net.jforum.security.RoleManager.getCanOnlyContactModerators,RoleManager.java,"boolean getCanOnlyContactModerators() {
		return this.roleExists(SecurityConstants.PM_ONLY_TO_MODERATORS);
	}
"
net.jforum.security.RoleManager.getRoleValues,RoleManager.java,"int[] getRoleValues(String name) {
		Role role = this.get(name);

		if (role == null || role.getRoleValues().size() == 0) {
			return new int[0];
		}

		// This is lame, but due to the dificulties of
		// working with int... versus Integer...
		// versus int[] and Integer[] in some other classes,
		// and that .toArray() does not work with int itself,
		// we do the copy by hand there.
		int[] data = new int[role.getRoleValues().size()];
		int counter = 0;
		for (int value : role.getRoleValues()) {
			data[counter++] = value;
		}

		return data;
	}
"
net.jforum.security.RoleManager.getRoleValuesAsList,RoleManager.java,"List<Integer> getRoleValuesAsList(String name) {
		Role role = this.get(name);
		return role != null ? role.getRoleValues() : new ArrayList<Integer>();
	}
"
net.jforum.security.RoleManager.roleExists,RoleManager.java,"boolean roleExists(String name) {
		return this.get(name) != null;
	}
"
net.jforum.security.RoleManager.roleExists,RoleManager.java,"boolean roleExists(String name, int value) {
		Role role = this.get(name);
		return role != null && role.getRoleValues().contains(value);
	}
"
net.jforum.security.RoleManager.get,RoleManager.java,"Role get(String name) {
		return this.roles.get(name);
	}
"
net.jforum.security.RoleManager.getCanEditUser,RoleManager.java,"boolean getCanEditUser(User userToEdit, List<Group> groups) {
		if (isAdministrator()) {
			return true;
		}

		for (Group group : groups) {
			for (Group group2 : userToEdit.getGroups()) {
				if (group.equals(group2)) {
					return true;
				}
			}
		}

		return false;
	}
"
net.jforum.plugins.post.ForumLimitedTimeRepository.getLimitedTime,ForumLimitedTimeRepository.java,"long getLimitedTime(Forum forum) {
		ForumLimitedTime forumLimited = this.getForumLimitedTime(forum);
		return forumLimited != null ? forumLimited.getLimitedTime() : 0;
	}
"
net.jforum.plugins.post.ForumLimitedTimeRepository.getForumLimitedTime,ForumLimitedTimeRepository.java,"ForumLimitedTime getForumLimitedTime(Forum forum) {
		return (ForumLimitedTime) session.createQuery(""from ForumLimitedTime f where f.forum = :forum"")
				.setParameter(""forum"", forum)
				.setMaxResults(1).uniqueResult();
	}
"
net.jforum.plugins.post.ForumLimitedTimeRepository.saveOrUpdate,ForumLimitedTimeRepository.java,"void saveOrUpdate(ForumLimitedTime fourmLimitedTime) {
		session.saveOrUpdate(fourmLimitedTime);
	}
"
net.jforum.plugins.post.ForumAdminExtension.edit,ForumAdminExtension.java,"void edit(int forumId) {
		boolean isEnabled = this.config.getBoolean(ConfigKeys.FORUM_TIME_LIMITED_ENABLE, false);

		if(isEnabled){
			Forum forum = forumRepository.get(forumId);
			long time = this.repository.getLimitedTime(forum);
			this.result.include(""forumTimeLimitedEnable"", true);
			this.result.include(""forumLimitedTime"", time);
		}
	}
"
net.jforum.plugins.post.ForumAdminExtension.editSave,ForumAdminExtension.java,"void editSave(Forum forum, long forumLimitedTime) {
		boolean isEnabled = this.config.getBoolean(ConfigKeys.FORUM_TIME_LIMITED_ENABLE, false);
		if(isEnabled){
			RoleManager roleManager = this.userSession.getRoleManager();

 			if (roleManager.isAdministrator() || roleManager.isCategoryAllowed(forum.getCategory().getId())) {
				ForumLimitedTime current = this.repository.getForumLimitedTime(forum);
				if(current == null){//maybe time limited function enabled after forum created
					current = new ForumLimitedTime();
					current.setForum(forum);
				}
				current.setLimitedTime(forumLimitedTime);
				this.repository.saveOrUpdate(current);
			}
		}
	}
"
net.jforum.plugins.post.ForumAdminExtension.add,ForumAdminExtension.java,"void add() {
		boolean isEnabled = this.config.getBoolean(ConfigKeys.FORUM_TIME_LIMITED_ENABLE, false);
		if(isEnabled){
			this.result.include(""fourmTimeLimitedEnable"", true);
			this.result.include(""fourmLimitedTime"", 0);
		}
	}
"
net.jforum.plugins.post.ForumAdminExtension.addSave,ForumAdminExtension.java,"void addSave(long fourmLimitedTime) {
		boolean isEnabled = this.config.getBoolean(ConfigKeys.FORUM_TIME_LIMITED_ENABLE, false);
		if(isEnabled){
			RoleManager roleManager = this.userSession.getRoleManager();

			Forum forum = (Forum) this.result.included().get(""forum"");

			if (forum != null && (roleManager.isAdministrator() || roleManager.isCategoryAllowed(forum.getCategory().getId()))) {
				if(fourmLimitedTime > 0){
					ForumLimitedTime current = new ForumLimitedTime();
					current.setForum(forum);
					current.setLimitedTime(fourmLimitedTime);
					this.repository.add(current);
				}
			}
		}
	}
"
net.jforum.plugins.post.ForumAdminExtension.delete,ForumAdminExtension.java,"void delete(int... forumsId) {
		boolean isEnabled = this.config.getBoolean(ConfigKeys.FORUM_TIME_LIMITED_ENABLE, false);
		if(isEnabled){
			RoleManager roleManager = this.userSession.getRoleManager();

			if (roleManager.isAdministrator()) {
				for(int forumId : forumsId){
					Forum forum = new Forum();
					forum.setId(forumId);
					ForumLimitedTime fourmLimitedTime =this.repository.getForumLimitedTime(forum);

					if(fourmLimitedTime!=null) {
						this.repository.remove(fourmLimitedTime);
					}
				}
			}
		}
	}
"
net.jforum.plugins.post.PostEditInterceptor.accepts,PostEditInterceptor.java,"boolean accepts(ResourceMethod method) {
		return this.config.getBoolean(ConfigKeys.FORUM_TIME_LIMITED_ENABLE, false)
			&& method.getResource().getType().equals(PostController.class)
			&& method.getMethod().getName().equals(""edit"");
	}
"
net.jforum.plugins.post.PostEditInterceptor.intercept,PostEditInterceptor.java,"void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws InterceptionException {
		RoleManager roleManager = userSession.getRoleManager();

		if (!roleManager.isAdministrator() && !roleManager.isModerator() && !roleManager.getCanEditPosts()) {
			int postId = Integer.parseInt(request.getParameter(""postId""));

			Post post = this.postRepository.get(postId);
			Forum forum = post.getForum();

			long time = this.repository.getLimitedTime(forum);

			if (time > 0) {
				long duration = (System.currentTimeMillis() - post.getDate().getTime()) / 1000;

				if (duration > time) {
					// TODO: Decide to where redirect the user
					throw new RuntimeException(""duration > time"");
				}
			}

			if (roleManager.getPostOnlyWithModeratorOnline() && !sessionManager.isModeratorOnline()) {
				// TODO
				throw new RuntimeException(""Posting is only allowed when moderators are online"");
			}
		}

		stack.next(method, resourceInstance);
	}
"
net.jforum.plugins.post.ForumLimitedTime.getId,ForumLimitedTime.java,"int getId() {
		return id;
	}
"
net.jforum.plugins.post.ForumLimitedTime.setId,ForumLimitedTime.java,"void setId(int id) {
		this.id = id;
	}
"
net.jforum.plugins.post.ForumLimitedTime.getForum,ForumLimitedTime.java,"Forum getForum() {
		return forum;
	}
"
net.jforum.plugins.post.ForumLimitedTime.setForum,ForumLimitedTime.java,"void setForum(Forum forum) {
		this.forum = forum;
	}
"
net.jforum.plugins.post.ForumLimitedTime.getLimitedTime,ForumLimitedTime.java,"long getLimitedTime() {
		return limitedTime;
	}
"
net.jforum.plugins.post.ForumLimitedTime.setLimitedTime,ForumLimitedTime.java,"void setLimitedTime(long limitedTime) {
		this.limitedTime = limitedTime;
	}
"
net.jforum.formatters.SafeHtmlAttributesFormatter.format,SafeHtmlAttributesFormatter.java,"String format(String text, PostOptions postOptions) {
		return this.safeHtml.ensureAllAttributesAreSafe(text);
	}
"
net.jforum.formatters.BBConfigFormatter.addBb,BBConfigFormatter.java,"void addBb(BBCode code) {
		if (code.alwaysProcess()) {
			this.alwaysProcessTags.put(code.getTagName(), code);
		}
		else {
			this.bbTags.put(code.getTagName(), code);
		}
	}
"
net.jforum.formatters.BBConfigFormatter.format,BBConfigFormatter.java,"String format(String text, PostOptions postOptions) {
		boolean hasTags = this.hasTags(text);

		if (postOptions.isBbCodeEnabled() && hasTags) {
			text = this.processBB(text, postOptions);
		}

		text = this.formatAlwaysProcessBBCodes(text);

		return text;
	}
"
net.jforum.formatters.BBConfigFormatter.processBB,BBConfigFormatter.java,"String processBB(String text, PostOptions options) {
		String startCodeFragment = ""[code"";
		String endCodeFragment = ""[/code]"";

		int codeIndex = text.indexOf(startCodeFragment);
		int codeEndIndex = codeIndex > -1 ? text.indexOf(endCodeFragment) : -1;

		if (codeIndex == -1 || codeEndIndex == -1 || codeEndIndex < codeIndex) {
			text = this.processBBExceptCodeTag(text, options);
		}
		else {
			int nextStartPos = 0;
			StringBuilder result = new StringBuilder(text.length());

			// Applies formatting in steps, as all contents inside a [code] tag
			// should be considered as plain text, thus not being elegible for processing
			while (codeIndex > -1 && codeEndIndex > -1 && codeEndIndex > codeIndex) {
				codeEndIndex += endCodeFragment.length();

				// Format only the text between [code] and [/code]
				String codeResult = this.processCodeTag(text.substring(codeIndex, codeEndIndex));

				// Format the text before [code]
				String nonCodeResult = this.processBBExceptCodeTag(text.substring(nextStartPos, codeIndex), options);

				result.append(nonCodeResult).append(codeResult);

				nextStartPos = codeEndIndex;
				codeIndex = text.indexOf(startCodeFragment, codeEndIndex);
				codeEndIndex = codeIndex > -1 ? text.indexOf(endCodeFragment, codeIndex) : -1;
			}

			if (nextStartPos > -1) {
				String nonCodeResult = processBBExceptCodeTag(text.substring(nextStartPos), options);
				result.append(nonCodeResult);
			}

			text = result.toString();
		}

		return text;
	}
"
net.jforum.formatters.BBConfigFormatter.processCodeTag,BBConfigFormatter.java,"String processCodeTag(String text) {
		for (BBCode bb : this.bbTags.values()) {
			// There is ""code"" and ""code-highlight""
			if (bb.getTagName().startsWith(""code"")) {
				Matcher matcher = Pattern.compile(bb.getRegex()).matcher(text);
				StringBuilder sb = new StringBuilder(text);

				while (matcher.find()) {
					String lang = null;
					String contents = null;

					if (""code"".equals(bb.getTagName())) {
					    contents = matcher.group(1);
					}
					else {
						lang = matcher.group(1);
						contents = matcher.group(2);
					}

					contents = StringUtils.replace(contents, ""<br/> "", ""\n"");

					// XML-like tags
					contents = StringUtils.replace(contents, ""<"", ""&lt;"");
					contents = StringUtils.replace(contents, "">"", ""&gt;"");

					// Note: there is no replacing for spaces and tabs as
					// we are relying on the Javascript SyntaxHighlighter library
					// to do it for us

					StringBuilder replace = new StringBuilder(bb.getReplace());
					int index = replace.indexOf(""$1"");

					if (""code"".equals(bb.getTagName())) {
						if (index > -1) {
							replace.replace(index, index + 2, contents.toString());
						}

						index = sb.indexOf(""[code]"");
					}
					else {
						if (index > -1) {
							replace.replace(index, index + 2, lang.toString());
						}

						index = replace.indexOf(""$2"");

						if (index > -1) {
							replace.replace(index, index + 2, contents.toString());
						}

						index = sb.indexOf(""[code="");
					}

					int lastIndex = sb.indexOf(""[/code]"", index) + ""[/code]"".length();

					if (lastIndex > index) {
						sb.replace(index, lastIndex, replace.toString());
					}
				}

				text = sb.toString();
			}
		}

		return text;
	}
"
net.jforum.formatters.BBConfigFormatter.processBBExceptCodeTag,BBConfigFormatter.java,"String processBBExceptCodeTag(String text, PostOptions options) {
		for (BBCode bb : this.bbTags.values()) {
			if (!bb.getTagName().startsWith(""code"")) {
				text = text.replaceAll(bb.getRegex(), bb.getReplace());
			}
		}

		return text;
	}
"
net.jforum.formatters.BBConfigFormatter.formatAlwaysProcessBBCodes,BBConfigFormatter.java,"String formatAlwaysProcessBBCodes(String text) {
		for (BBCode bb : this.alwaysProcessTags.values()) {
			text = text.replaceAll(bb.getRegex(), bb.getReplace());
		}

		return text;
	}
"
net.jforum.formatters.BBConfigFormatter.hasTags,BBConfigFormatter.java,"boolean hasTags(String text) {
		return text.indexOf('[') > -1 && text.indexOf(']') > -1;
	}
"
net.jforum.formatters.HtmlEntitiesFormatter.format,HtmlEntitiesFormatter.java,"String format(String text, PostOptions postOptions) {
		if (!postOptions.isHtmlEnabled()) {
			text = StringUtils.replace(text, ""<"", ""&lt;"");
			text = StringUtils.replace(text, "">"", ""&gt;"");
		}

		return text;
	}
"
net.jforum.formatters.SmiliesFormatter.format,SmiliesFormatter.java,"String format(String text, PostOptions postOptions) {
		SmilieRepository repository = container.instanceFor(SmilieRepository.class);

		if (postOptions.isSmiliesEnabled()) {
			for (Smilie smilie : repository.getAllSmilies()) {
				text = StringUtils.replace(text, smilie.getCode(),
					this.imageTag(smilie.getDiskName(), postOptions.contextPath()));
			}
		}

		return text;
	}
"
net.jforum.formatters.SmiliesFormatter.imageTag,SmiliesFormatter.java,"String imageTag(String filename, String contextPath) {
		return new StringBuilder(128)
			.append(""<img src='"")
			.append(contextPath)
			.append('/')
			.append(this.config.getValue(ConfigKeys.SMILIE_IMAGE_DIR))
			.append('/')
			.append(filename).append(""' border='0'/>"")
			.toString();
	}
"
net.jforum.formatters.PostOptions.isHtmlEnabled,PostOptions.java,"boolean isHtmlEnabled() {
		return this.htmlEnabled;
	}
"
net.jforum.formatters.PostOptions.isSmiliesEnabled,PostOptions.java,"boolean isSmiliesEnabled() {
		return this.smiliesEnabled;	
	}
"
net.jforum.formatters.PostOptions.isBbCodeEnabled,PostOptions.java,"boolean isBbCodeEnabled() {
		return this.bbCodeEnabled;
	}
"
net.jforum.formatters.PostOptions.appendSignature,PostOptions.java,"boolean appendSignature() {
		return this.appendSignature;
	}
"
net.jforum.formatters.PostOptions.contextPath,PostOptions.java,"String contextPath() {
		return this.contextPath;
	}
"
net.jforum.formatters.BBCodeConfigParser.parse,BBCodeConfigParser.java,"void parse() {
		try {
			SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
			parser.parse(getClass().getResourceAsStream(""/bb_config.xml""), this);
		}
		catch (Exception e) {
			throw new ForumException(e);
		}
	}
"
net.jforum.formatters.BBCodeConfigParser.startElement,BBCodeConfigParser.java,"void startElement(String uri, String localName, String tag, Attributes attrs) {
		if (tag.equals(""tag"")) {
			this.sb = new StringBuffer();
			this.bb = new BBCode();

			String tagName = attrs.getValue(""name"");

			if (tagName != null) {
				this.bb.setTagName(tagName);
			}

			if (""true"".equals(attrs.getValue(""alwaysProcess""))) {
				this.bb.enableAlwaysProcess();
			}
		}

		this.tagName = tag;
	}
"
net.jforum.formatters.BBCodeConfigParser.endElement,BBCodeConfigParser.java,"void endElement(String uri, String localName, String tag) {
		if (tag.equals(""tag"")) {
			this.formatter.addBb(this.bb);
		}
		else if (this.tagName.equals(""replace"")) {
			this.bb.setReplace(this.sb.toString().trim());
			this.sb.delete(0, this.sb.length());
		}
		else if (this.tagName.equals(""regex"")) {
			this.bb.setRegex(this.sb.toString().trim());
			this.sb.delete(0, this.sb.length());
		}

		this.tagName = """";
	}
"
net.jforum.formatters.BBCodeConfigParser.characters,BBCodeConfigParser.java,"void characters(char ch[], int start, int length) {
		if (this.tagName.equals(""replace"") || this.tagName.equals(""regex"")) {
			this.sb.append(ch, start, length);
		}
	}
"
net.jforum.formatters.BBCodeConfigParser.error,BBCodeConfigParser.java,"void error(SAXParseException exception) throws SAXException {
		throw exception;
	}
"
net.jforum.formatters.SafeHtmlTagsFormatter.format,SafeHtmlTagsFormatter.java,"String format(String text, PostOptions postOptions) {
		return this.safeHtml.makeSafe(text);
	}
"
net.jforum.formatters.NewLineToHtmlBreakFormatter.format,NewLineToHtmlBreakFormatter.java,"String format(String text, PostOptions postOptions) {
		return StringUtils.replace(text, ""\n"", ""<br/> "");
	}
"
net.jforum.formatters.BBCode.getRegex,BBCode.java,"String getRegex() {
		return this.regex;
	}
"
net.jforum.formatters.BBCode.getReplace,BBCode.java,"String getReplace() {
		return this.replace;
	}
"
net.jforum.formatters.BBCode.getTagName,BBCode.java,"String getTagName() {
		return this.tagName;
	}
"
net.jforum.formatters.BBCode.setRegex,BBCode.java,"void setRegex(String regex) {
		this.regex = regex;
	}
"
net.jforum.formatters.BBCode.setReplace,BBCode.java,"void setReplace(String replace) {
		this.replace = replace;
	}
"
net.jforum.formatters.BBCode.setTagName,BBCode.java,"void setTagName(String tagName) {
		this.tagName = tagName;
	}
"
net.jforum.formatters.BBCode.enableAlwaysProcess,BBCode.java,"void enableAlwaysProcess() {
		this.alwaysProcess = true;
	}
"
net.jforum.formatters.BBCode.alwaysProcess,BBCode.java,"boolean alwaysProcess() {
		return this.alwaysProcess;
	}
"
net.jforum.formatters.BBCode.hashCode,BBCode.java,"int hashCode() {
		return (this.getRegex() + this.getReplace() + this.getTagName() + this.alwaysProcess).hashCode();
	}
"
net.jforum.formatters.BBCode.equals,BBCode.java,"boolean equals(Object o) {
		if (o == this) {
			return true;
		}
		
		if (!(o instanceof BBCode)) {
			return false;
		}
		
		BBCode code = (BBCode)o;
		return code.getTagName().equals(this.getTagName())
			&& code.getRegex().equals(this.getRegex())
			&& code.getReplace().equals(this.getReplace())
			&& code.alwaysProcess() == this.alwaysProcess();
	}
"
net.jforum.extensions.RequestOperationChain.setOperations,RequestOperationChain.java,"void setOperations(List<String> operations) {
		this.operations = operations;
	}
"
net.jforum.extensions.RequestOperationChain.callAllOperations,RequestOperationChain.java,"void callAllOperations() {
		for (String operationClassName : this.operations) {
			RequestOperation operation = (RequestOperation)this.applicationContext.getBean(operationClassName);
			operation.execute();
		}
	}
"
net.jforum.extensions.RequestOperationChain.setApplicationContext,RequestOperationChain.java,"void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
		this.applicationContext = applicationContext;
	}
"
net.jforum.extensions.PostReportCounterOperation.execute,PostReportCounterOperation.java,"void execute() {
		int total = 0;
		if (userSession != null && userSession.isLogged() && userSession.getRoleManager().isModerator()) {
			total = this.repository.countPendingReports(userSession.getRoleManager().getRoleValues(SecurityConstants.FORUM));
		}

		result.include(""totalPostReports"", total);
	}
"
net.jforum.sso.DefaultLoginAuthenticator.validateLogin,DefaultLoginAuthenticator.java,"User validateLogin(String username, String password, Map<String, Object> extraParams) {
		User user = this.repository.validateLogin(username, password);

		if (user != null && !user.isDeleted() && (user.getActivationKey() == null || user.isActive())) {
			return user;
		}

		return null;
	}
"
net.jforum.sso.SSOUtils.userExists,SSOUtils.java,"boolean userExists(String username) {
		this.username = username;

		this.user = this.userRepository.getByUsername(username);
		this.exists = this.user != null;

		return this.exists;
	}
"
net.jforum.sso.SSOUtils.register,SSOUtils.java,"void register(String password, String email) {
		if (this.exists) {
			return;
		}

		// Is a new user for us. Register him
		this.user = new User();

		user.setUsername(this.username);
		user.setPassword(password);
		user.setEmail(email);
		user.setActive(true);

		this.userRepository.add(user);
	}
"
net.jforum.sso.SSOUtils.getUser,SSOUtils.java,"User getUser() {
		return this.user;
	}
"
net.jforum.sso.RemoteUserSSO.authenticateUser,RemoteUserSSO.java,"String authenticateUser(HttpServletRequest request) {
		return request.getRemoteUser();
	}
"
net.jforum.sso.RemoteUserSSO.isSessionValid,RemoteUserSSO.java,"boolean isSessionValid(UserSession userSession) {
		String remoteUser = userSession.getRequest().getRemoteUser();

		// user has since logged out
		if (remoteUser == null && userSession.getUser().getId() != this.config.getInt(ConfigKeys.ANONYMOUS_USER_ID)) {
			return false;
		}
		// user has since logged in
		else if (remoteUser != null && userSession.getUser().getId() == this.config.getInt(ConfigKeys.ANONYMOUS_USER_ID)) {
			return false;
		}
		// user has changed user
		else if (remoteUser != null && !remoteUser.equals(userSession.getUser().getUsername())) {
			return false;
		}

		return true;
	}
"
net.jforum.sso.RemoteUserSSO.setConfig,RemoteUserSSO.java,"void setConfig(JForumConfig config) {
		this.config = config;
	}
"
net.jforum.actions.interceptors.ControllerSecurityInterceptor.getAnnotation,ControllerSecurityInterceptor.java,"SecurityConstraint getAnnotation(ResourceMethod method) {
		return method.getResource().getType().getAnnotation(SecurityConstraint.class);
	}
"
net.jforum.actions.interceptors.ControllerSecurityInterceptor.isAnnotationPresent,ControllerSecurityInterceptor.java,"boolean isAnnotationPresent(ResourceMethod method) {
		return method.getResource().getType().isAnnotationPresent(SecurityConstraint.class);
	}
"
net.jforum.actions.interceptors.SecurityInterceptor.intercept,SecurityInterceptor.java,"void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws InterceptionException {
		SecurityConstraint annotation = this.getAnnotation(method);
		Class<? extends AccessRule> accessRuleClass = annotation.value();

		boolean shouldProceed = true;
		boolean displayLogin = true;

		if (!accessRuleClass.equals(EmptyRule.class)) {
			AccessRule accessRule = this.findAccessRule(annotation.value());
			shouldProceed = accessRule.shouldProceed(userSession, request);
			displayLogin = annotation.displayLogin();
		}
		else {
			Role[] multiRoles = annotation.multiRoles();

			if (multiRoles.length == 0) {
				throw new IllegalStateException(""@SecurityConstraint does not have an access rule nor multi roles. Cannot continue"");
			}
			else {
				for (Role role : multiRoles) {
					AccessRule accessRule = this.findAccessRule(role.value());

					if (!accessRule.shouldProceed(userSession, request)) {
						shouldProceed = false;
						displayLogin = role.displayLogin();
						break;
					}
				}
			}
		}

		if (shouldProceed) {
			stack.next(method, resourceInstance);
		}
		else {
			if (displayLogin) {
				this.result.redirectTo(UserController.class).login(null, false);
			}
			else {
				this.result.redirectTo(MessageController.class).accessDenied();
			}
		}
	}
"
net.jforum.actions.interceptors.SecurityInterceptor.findAccessRule,SecurityInterceptor.java,"AccessRule findAccessRule(Class<? extends AccessRule> klass) {
		AccessRule accessRule = container.instanceFor(klass);

		if (accessRule == null) {
			throw new NullPointerException(
				String.format(""Could not find the rule %s. Have you registered it in the configuration file?"", klass.getName()));
		}

		return accessRule;
	}
"
net.jforum.actions.interceptors.SecurityInterceptor.accepts,SecurityInterceptor.java,"boolean accepts(ResourceMethod method) {
		return this.isAnnotationPresent(method);
	}
"
net.jforum.actions.interceptors.MethodSecurityInterceptor.getAnnotation,MethodSecurityInterceptor.java,"SecurityConstraint getAnnotation(ResourceMethod method) {
		return method.getMethod().getAnnotation(SecurityConstraint.class);
	}
"
net.jforum.actions.interceptors.MethodSecurityInterceptor.isAnnotationPresent,MethodSecurityInterceptor.java,"boolean isAnnotationPresent(ResourceMethod method) {
		return method.getMethod().isAnnotationPresent(SecurityConstraint.class);
	}
"
net.jforum.actions.interceptors.ExtendsAnnotationInterceptor.intercept,ExtendsAnnotationInterceptor.java,"void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws InterceptionException {
		stack.next(method, resourceInstance);
		// TODO
		throw new RuntimeException(""not implemented"");
	}
"
net.jforum.actions.interceptors.ExtendsAnnotationInterceptor.accepts,ExtendsAnnotationInterceptor.java,"boolean accepts(ResourceMethod method) {
		return method.getMethod().isAnnotationPresent(Extends.class);
	}
"
net.jforum.actions.interceptors.SessionManagerInterceptor.intercept,SessionManagerInterceptor.java,"void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws InterceptionException {
		sessionManager.refreshSession(userSession);
		request.setAttribute(""userSession"", userSession);
		request.setAttribute(""roleManager"", userSession.getRoleManager());
		stack.next(method, resourceInstance);
	}
"
net.jforum.actions.interceptors.SessionManagerInterceptor.accepts,SessionManagerInterceptor.java,"boolean accepts(ResourceMethod method) {
		return true;
	}
"
net.jforum.actions.extensions.TopicWatchExtension.afterList,TopicWatchExtension.java,"void afterList() {
		boolean isWatching = false;
		UserSession userSession = this.userSession;

		if (userSession.isLogged()) {
			Topic topic = (Topic) this.result.included().get(""topic"");
			TopicWatch subscription = this.watchService.getSubscription(topic,
					userSession.getUser());
			isWatching = subscription != null;

			if (!subscription.isRead()) {
				subscription.markAsRead();
			}
		}

		this.result.include(""isUserWatchingTopic"", isWatching);
	}
"
net.jforum.actions.extensions.TopicWatchExtension.watch,TopicWatchExtension.java,"void watch(int page, int topicId) {
		Topic topic = new Topic();
		topic.setId(topicId);

		UserSession userSession = this.userSession;

		this.watchService.watch(topic, userSession.getUser());
		this.result.redirectTo(Actions.LIST + ""/"" + topicId);
	}
"
net.jforum.actions.extensions.TopicWatchExtension.unwatch,TopicWatchExtension.java,"void unwatch(int page, int topicId) {
		Topic topic = new Topic();
		topic.setId(topicId);

		this.watchService.unwatch(topic, userSession.getUser());
		this.result.redirectTo(this).list(topicId);
	}
"
net.jforum.actions.helpers.PostFormOptions.isHtmlEnabled,PostFormOptions.java,"boolean isHtmlEnabled() {
		return !this.disableHtml;
	}
"
net.jforum.actions.helpers.PostFormOptions.isSmiliesEnabled,PostFormOptions.java,"boolean isSmiliesEnabled() {
		return !this.disableSmilies;
	}
"
net.jforum.actions.helpers.PostFormOptions.isBbCodeEnabled,PostFormOptions.java,"boolean isBbCodeEnabled() {
		return !this.disableBbCode;
	}
"
net.jforum.actions.helpers.PostFormOptions.getAppendSignature,PostFormOptions.java,"boolean getAppendSignature() {
		return this.appendSignature;
	}
"
net.jforum.actions.helpers.PostFormOptions.getNotifyReplies,PostFormOptions.java,"boolean getNotifyReplies() {
		return this.notifyReplies;
	}
"
net.jforum.actions.helpers.PostFormOptions.getTopicType,PostFormOptions.java,"int getTopicType() {
		return this.topicType;
	}
"
net.jforum.actions.helpers.PostFormOptions.setTopicType,PostFormOptions.java,"void setTopicType(int topicType) {
		this.topicType = topicType;
	}
"
net.jforum.actions.helpers.PostFormOptions.setDisableHtml,PostFormOptions.java,"void setDisableHtml(boolean disableHtml) {
		this.disableHtml = disableHtml;
	}
"
net.jforum.actions.helpers.PostFormOptions.setDisableSmilies,PostFormOptions.java,"void setDisableSmilies(boolean disableSmilies) {
		this.disableSmilies = disableSmilies;
	}
"
net.jforum.actions.helpers.PostFormOptions.setDisableBbCode,PostFormOptions.java,"void setDisableBbCode(boolean disableBbCode) {
		this.disableBbCode = disableBbCode;
	}
"
net.jforum.actions.helpers.PostFormOptions.setAppendSignature,PostFormOptions.java,"void setAppendSignature(boolean appendSignature) {
		this.appendSignature = appendSignature;
	}
"
net.jforum.actions.helpers.PostFormOptions.setNotifyReplies,PostFormOptions.java,"void setNotifyReplies(boolean notifyReplies) {
		this.notifyReplies = notifyReplies;
	}
"
net.jforum.actions.helpers.ActionUtils.definePostOptions,ActionUtils.java,"void definePostOptions(Post post, PostFormOptions options) {
		if (options != null) {
			post.setHtmlEnabled(options.isHtmlEnabled());
			post.setBbCodeEnabled(options.isBbCodeEnabled());
			post.setSmiliesEnabled(options.isSmiliesEnabled());
			post.setSignatureEnabled(options.getAppendSignature());
			post.setNotifyReplies(options.getNotifyReplies());
		}
	}
"
net.jforum.actions.helpers.ActionUtils.definePrivateMessageOptions,ActionUtils.java,"void definePrivateMessageOptions(PrivateMessage pm, PostFormOptions options) {
		if (options != null) {
			pm.setHtmlEnabled(options.isHtmlEnabled());
			pm.setBbCodeEnabled(options.isBbCodeEnabled());
			pm.setSmiliesEnabled(options.isSmiliesEnabled());
			pm.setSignatureEnabled(options.getAppendSignature());
		}
	}
"
net.jforum.actions.helpers.ApproveInfo.getPostId,ApproveInfo.java,"int getPostId() {
		return this.postId;
	}
"
net.jforum.actions.helpers.ApproveInfo.setPostId,ApproveInfo.java,"void setPostId(int postId) {
		this.postId = postId;
	}
"
net.jforum.actions.helpers.ApproveInfo.getStatus,ApproveInfo.java,"int getStatus() {
		return this.status;
	}
"
net.jforum.actions.helpers.ApproveInfo.setStatus,ApproveInfo.java,"void setStatus(int status) {
		this.status = status;
	}
"
net.jforum.actions.helpers.ApproveInfo.approve,ApproveInfo.java,"boolean approve() {
		return this.getStatus() == APPROVE;
	}
"
net.jforum.actions.helpers.ApproveInfo.defer,ApproveInfo.java,"boolean defer() {
		return this.getStatus() == DEFER;
	}
"
net.jforum.actions.helpers.ApproveInfo.reject,ApproveInfo.java,"boolean reject() {
		return this.getStatus() == REJECT;
	}
"
net.jforum.actions.helpers.AttachedFile.getUploadUtils,AttachedFile.java,"UploadUtils getUploadUtils() {
		return this.uploadUtils;
	}
"
net.jforum.actions.helpers.AttachedFile.getAttachment,AttachedFile.java,"Attachment getAttachment() {
		return this.attachment;
	}
"
net.jforum.api.JForumExecutionContext.getReques,JForumExecutionContext.java,"HttpServletRequest getReques() {
		return this.request;
	}
"
net.jforum.api.JForumExecutionContext.isInitialized,JForumExecutionContext.java,"boolean isInitialized() {
		return this.initialized;
	}
"
net.jforum.api.JForumExecutionContext.getComponent,JForumExecutionContext.java,"<T> T getComponent(Class<T> k) {
		return (T)this.context.getBean(k.getName());
	}
"
net.jforum.events.listeners.ForumEventListener.beforeAdd,ForumEventListener.java,"void beforeAdd(Forum forum) {
		this.fireBeforeAdd(forum);
	}
"
net.jforum.events.listeners.ForumEventListener.added,ForumEventListener.java,"void added(Forum forum) {
		this.fireAdd(forum);
	}
"
net.jforum.events.listeners.ForumEventListener.removed,ForumEventListener.java,"void removed(Forum forum) {
		this.fireRemove(forum);
	}
"
net.jforum.events.listeners.ForumEventListener.updated,ForumEventListener.java,"void updated(Forum forum) {
		this.fireUpdated(forum);
	}
"
net.jforum.events.listeners.PostEventListener.beforeAdd,PostEventListener.java,"void beforeAdd(Post post) {
		this.fireBeforeAdd(post);
	}
"
net.jforum.events.listeners.PostEventListener.beforeUpdated,PostEventListener.java,"void beforeUpdated(Post post) {
		this.fireBeforeUpdated(post);
	}
"
net.jforum.events.listeners.PostEventListener.added,PostEventListener.java,"void added(Post post) {
		this.fireAdd(post);
	}
"
net.jforum.events.listeners.PostEventListener.removed,PostEventListener.java,"void removed(Post post) {
		this.fireRemove(post);
	}
"
net.jforum.events.listeners.PostEventListener.updated,PostEventListener.java,"void updated(Post post) {
		this.fireUpdated(post);
	}
"
net.jforum.events.listeners.CategoryEventListener.added,CategoryEventListener.java,"void added(Category category) {
		this.fireAdd(category);
	}
"
net.jforum.events.listeners.CategoryEventListener.removed,CategoryEventListener.java,"void removed(Category category) {
		this.fireRemove(category);
	}
"
net.jforum.events.listeners.CategoryEventListener.updated,CategoryEventListener.java,"void updated(Category category) {
		this.fireUpdated(category);
	}
"
net.jforum.events.listeners.CategoryEventListener.beforeRemove,CategoryEventListener.java,"void beforeRemove(Category category) {
		this.fireBeforeRemove(category);
	}
"
net.jforum.events.listeners.TopicEventListener.added,TopicEventListener.java,"void added(Topic topic) {
		this.fireAdd(topic);
	}
"
net.jforum.events.listeners.TopicEventListener.removed,TopicEventListener.java,"void removed(Topic topic) {
		this.fireRemove(topic);
	}
"
net.jforum.events.listeners.TopicEventListener.updated,TopicEventListener.java,"void updated(Topic topic) {
		this.fireUpdated(topic);
	}
"
net.jforum.events.listeners.AbstractListener.setEvents,AbstractListener.java,"void setEvents(List<EventType> events) {
		this.events = events;
	}
"
net.jforum.events.listeners.AbstractListener.fireBeforeAdd,AbstractListener.java,"void fireBeforeAdd(TargetType entity) {
		for (EventType event : this.events) {
			event.beforeAdd(entity);
		}
	}
"
net.jforum.events.listeners.AbstractListener.fireAdd,AbstractListener.java,"void fireAdd(TargetType entity) {
		for (EventType event : this.events) {
			event.added(entity);
		}
	}
"
net.jforum.events.listeners.AbstractListener.fireBeforeRemove,AbstractListener.java,"void fireBeforeRemove(TargetType entity) {
		for (EventType event : this.events) {
			event.beforeDeleted(entity);
		}
	}
"
net.jforum.events.listeners.AbstractListener.fireRemove,AbstractListener.java,"void fireRemove(TargetType entity) {
		for (EventType event : this.events) {
			event.deleted(entity);
		}
	}
"
net.jforum.events.listeners.AbstractListener.fireBeforeUpdated,AbstractListener.java,"void fireBeforeUpdated(TargetType entity) {
		for (EventType event : this.events) {
			event.beforeUpdated(entity);
		}
	}
"
net.jforum.events.listeners.AbstractListener.fireUpdated,AbstractListener.java,"void fireUpdated(TargetType entity) {
		for (EventType event : this.events) {
			event.updated(entity);
		}
	}
"
net.jforum.controllers.RankingAdminController.list,RankingAdminController.java,"void list() {
		this.result.include(""rankings"", this.repository.getAllRankings());
	}
"
net.jforum.controllers.RankingAdminController.addSave,RankingAdminController.java,"void addSave(Ranking ranking) {
		this.service.add(ranking);
		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.RankingAdminController.edit,RankingAdminController.java,"void edit(int rankingId) {
		this.result.include(""ranking"", this.repository.get(rankingId));
		this.result.forwardTo(this).add();
	}
"
net.jforum.controllers.RankingAdminController.editSave,RankingAdminController.java,"void editSave(Ranking ranking) {
		this.service.update(ranking);
		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.RankingAdminController.delete,RankingAdminController.java,"void delete(int... rankingsId) {
		this.service.delete(rankingsId);
		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.AdminController.main,AdminController.java,"void main() {
		this.result.include(""stats"", this.forumRepository.getForumStats());
		this.result .include(""sessions"", this.sessionManager.getLoggedSessions());
		this.result.include(""totalLoggedUsers"", this.sessionManager.getTotalLoggedUsers());
	}
"
net.jforum.controllers.ThemeController.list,ThemeController.java,"void list() {
		this.result.include(""themes"", this.repository.getAll());
	}
"
net.jforum.controllers.ThemeController.addSave,ThemeController.java,"void addSave(Theme theme) {
		this.repository.add(theme);
		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.ThemeController.edit,ThemeController.java,"void edit(int themeId) {
		this.result.include(""theme"", this.repository.get(themeId));
	}
"
net.jforum.controllers.ThemeController.editSave,ThemeController.java,"void editSave(Theme theme) {
		this.repository.update(theme);
		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.ThemeController.delete,ThemeController.java,"void delete(int themeId) {
		Theme theme = this.repository.get(themeId);
		this.repository.remove(theme);
		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.BadWordAdminController.delete,BadWordAdminController.java,"void delete(int... badWordId) {
		if (badWordId != null) {
			for (int id : badWordId) {
				BadWord word = this.repository.get(id);
				this.repository.remove(word);
			}
		}

		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.BadWordAdminController.list,BadWordAdminController.java,"void list() {
		this.result.include(""words"", this.repository.getAll());
	}
"
net.jforum.controllers.BadWordAdminController.addSave,BadWordAdminController.java,"void addSave(BadWord word) {
		this.repository.add(word);
		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.BadWordAdminController.edit,BadWordAdminController.java,"void edit(int id) {
		BadWord word = this.repository.get(id);
		this.result.include(""word"", word);
		this.result.forwardTo(this).add();
	}
"
net.jforum.controllers.BadWordAdminController.editSave,BadWordAdminController.java,"void editSave(BadWord word) {
		this.repository.update(word);
		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.ForumController.newMessages,ForumController.java,"void newMessages(int page) {
		UserSession userSession = this.userSession;
		int recordsPerPage = this.config.getInt(ConfigKeys.TOPICS_PER_PAGE);

		PaginatedResult<Topic> newMessages = this.forumRepository.getNewMessages(new Date(userSession.getLastVisit()),
			new Pagination().calculeStart(page, recordsPerPage), recordsPerPage);

		Pagination pagination = new Pagination(this.config, page).forNewMessages(newMessages.getTotalRecords());

		this.result.include(""pagination"", pagination);
		this.result.include(""results"", newMessages.getResults());
		this.result.include(""categories"", this.categoryRepository.getAllCategories());
	}
"
net.jforum.controllers.ForumController.show,ForumController.java,"void show(int forumId, int page) {
		Forum forum = this.forumRepository.get(forumId);

		Pagination pagination = new Pagination(this.config, page).forForum(forum);

		this.result.include(""forum"", forum);
		this.result.include(""pagination"", pagination);
		this.result.include(""isModeratorOnline"", this.sessionManager.isModeratorOnline());
		this.result.include(""categories"", this.categoryRepository.getAllCategories());
		this.result.include(""topics"", forum.getTopics(pagination.getStart(),
			pagination.getRecordsPerPage()));
	}
"
net.jforum.controllers.ForumController.list,ForumController.java,"void list() {
		this.result.include(""categories"", this.categoryRepository.getAllCategories());
		this.result.include(""onlineUsers"", this.sessionManager.getLoggedSessions());
		this.result.include(""totalRegisteredUsers"", this.userRepository.getTotalUsers());
		this.result.include(""totalMessages"", this.forumRepository.getTotalMessages());
		this.result.include(""totalLoggedUsers"", this.sessionManager.getTotalLoggedUsers());
		this.result.include(""totalAnonymousUsers"", this.sessionManager.getTotalAnonymousUsers());
		this.result.include(""lastRegisteredUser"", this.userRepository.getLastRegisteredUser());
		this.result.include(""postsPerPage"", this.config.getInt(ConfigKeys.POSTS_PER_PAGE));
		this.result.include(""mostUsersEverOnline"", mostUsersEverOnlineService
			.getMostRecentData(this.sessionManager.getTotalUsers()));

		if (userSession.isLogged() && !userSession.getRoleManager().roleExists(SecurityConstants.INTERACT_OTHER_GROUPS)) {
			this.groupInteractionFilter.filterForumListing(this.result, userSession);
		}
	}
"
net.jforum.controllers.RSSController.forumTopics,RSSController.java,"void forumTopics(int forumId) {
		if (!this.isRSSEnabled() || !this.userSession.getRoleManager().isForumAllowed(forumId)) {
			this.result.forwardTo(MessageController.class).accessDenied();
		}
		else {
			String contents = this.rssService.forForum(forumId);
			this.result.include(""contents"", contents);
			this.result.forwardTo(Actions.RSS);
		}
	}
"
net.jforum.controllers.RSSController.isRSSEnabled,RSSController.java,"boolean isRSSEnabled() {
		return this.config.getBoolean(ConfigKeys.RSS_ENABLED);
	}
"
net.jforum.controllers.PostReportController.list,PostReportController.java,"void list() {
		int[] forumIds = this.getForumIdsToFilter();
		this.result.include(""reports"",
				this.repository.getAll(PostReportStatus.UNRESOLVED, forumIds));
	}
"
net.jforum.controllers.PostReportController.listResolved,PostReportController.java,"void listResolved(int page) {
		int[] forumIds = this.getForumIdsToFilter();
		int recordsPerPage = this.config.getInt(ConfigKeys.TOPICS_PER_PAGE);

		PaginatedResult<PostReport> reports = this.repository.getPaginated(
				new Pagination().calculeStart(page, recordsPerPage),
				recordsPerPage, PostReportStatus.RESOLVED, forumIds);

		Pagination pagination = new Pagination(this.config, page)
				.forPostReports(reports.getTotalRecords());

		this.result.include(""pagination"", pagination);
		this.result.include(""reports"", reports.getResults());
	}
"
net.jforum.controllers.PostReportController.resolve,PostReportController.java,"void resolve(int reportId) {
		PostReport report = this.repository.get(reportId);

		if (this.canManipulateReport(report)) {
			report.setStatus(PostReportStatus.RESOLVED);
			this.repository.update(report);
		}

		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.PostReportController.delete,PostReportController.java,"void delete(int reportId) {
		PostReport report = this.repository.get(reportId);

		if (this.canManipulateReport(report)) {
			this.repository.remove(report);
		}

		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.PostReportController.report,PostReportController.java,"void report(int postId, String description) {
		UserSession userSession = this.userSession;

		if (userSession.isLogged()) {
			PostReport report = new PostReport();
			report.setDate(new Date());
			report.setUser(userSession.getUser());
			report.setDescription(description);

			Post post = new Post();
			post.setId(postId);
			report.setPost(post);

			this.repository.add(report);
		}
	}
"
net.jforum.controllers.PostReportController.canManipulateReport,PostReportController.java,"boolean canManipulateReport(PostReport report) {
		int[] forumIds = this.userSession.getRoleManager()
				.getRoleValues(SecurityConstants.FORUM);

		for (int forumId : forumIds) {
			// Make sure the user is removing a report from a forum he can
			// moderate
			try {
				if (forumId == report.getPost().getForum().getId()) {
					return true;
				}
			} catch (ObjectNotFoundException e) {
				return true;
			}
		}

		return false;
	}
"
net.jforum.controllers.PostReportController.getForumIdsToFilter,PostReportController.java,"int[] getForumIdsToFilter() {
		int[] forumIds = null;
		RoleManager roleManager = this.userSession
				.getRoleManager();

		if (!roleManager.isAdministrator() && !roleManager.isCoAdministrator()) {
			forumIds = roleManager.getRoleValues(SecurityConstants.FORUM);
		}

		return forumIds;
	}
"
net.jforum.controllers.BanlistAdminController.list,BanlistAdminController.java,"void list() {
		this.result.include(""banlist"", this.repository.getAllBanlists());
	}
"
net.jforum.controllers.ConfigController.list,ConfigController.java,"void list() throws Exception {
		this.result.include(""locales"", this.loadLocaleNames());
		this.result.include(""config"", this.config);
	}
"
net.jforum.controllers.ConfigController.save,ConfigController.java,"void save() throws Exception {
		this.service.save(this.request);
		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.ConfigController.loadLocaleNames,ConfigController.java,"List<String> loadLocaleNames() throws Exception {
		Properties locales = new Properties();

		locales.load(this.getClass().getResourceAsStream(""/jforumConfig/languages/locales.properties""));

		List<String> localesList = new ArrayList<String>();

		for (Enumeration<?> e = locales.keys(); e.hasMoreElements();) {
			localesList.add((String) e.nextElement());
		}

		return localesList;
	}
"
net.jforum.controllers.HibernateStatisticsController.list,HibernateStatisticsController.java,"void list() {
		boolean statsEnabled = this.sessionFactory.getStatistics()
				.isStatisticsEnabled();

		if (!statsEnabled) {
			this.result.forwardTo(""statsDisabled"");
		} else {
			this.result.include(""stats"", this.sessionFactory.getStatistics());
		}
	}
"
net.jforum.controllers.MessageController.accessDenied,MessageController.java,"void accessDenied() {
		this.result.include(""message"", this.i18n.getMessage(""Message.accessDenied""));
		result.of(this).message();
	}
"
net.jforum.controllers.MessageController.topicWaitingModeration,MessageController.java,"void topicWaitingModeration(int forumId) {
		this.result.include(""message"", this.i18n.getFormattedMessage(
			""PostShow.waitingModeration"", URLBuilder.build(Domain.FORUMS, Actions.SHOW, forumId)));
		result.of(this).message();
	}
"
net.jforum.controllers.MessageController.replyWaitingModeration,MessageController.java,"void replyWaitingModeration(int topicId) {
		this.result.include(""message"", this.i18n.getFormattedMessage(""PostShow.waitingModeration"",
			URLBuilder.build(Domain.TOPICS, Actions.LIST, topicId)));
		result.of(this).message();
	}
"
net.jforum.controllers.PrivateMessageController.delete,PrivateMessageController.java,"void delete(int... ids) {
		this.service.delete(this.userSession.getUser(), ids);
		this.result.redirectTo(Actions.INBOX);
	}
"
net.jforum.controllers.PrivateMessageController.review,PrivateMessageController.java,"void review(int id) {
		PrivateMessage pm = this.repository.get(id);
		this.result.include(""pm"", pm);
		this.result.include(""post"", pm.asPost());
	}
"
net.jforum.controllers.PrivateMessageController.quote,PrivateMessageController.java,"void quote(int id) {
		PrivateMessage pm = this.repository.get(id);

		this.send();

		this.result.include(""pm"", pm);
		this.result.include(""isPrivateMessageQuote"", true);
	}
"
net.jforum.controllers.PrivateMessageController.reply,PrivateMessageController.java,"void reply(int id) {
		PrivateMessage pm = this.repository.get(id);

		this.result.include(""pm"", pm);
		this.result.include(""isPrivateMessageReply"", true);

		this.send();
	}
"
net.jforum.controllers.PrivateMessageController.read,PrivateMessageController.java,"void read(int id) {
		PrivateMessage pm = this.repository.get(id);

		if (pm.isNew()) {
			pm.markAsRead();
		}

		this.result.include(""pm"", pm);
		this.result.include(""post"", pm.asPost());
	}
"
net.jforum.controllers.PrivateMessageController.sent,PrivateMessageController.java,"void sent() {
		User user = this.userSession.getUser();
		this.result.include(""privateMessages"", this.repository.getFromSentBox(user));
		this.result.include(""sentbox"", true);
		result.of(this).messages();
	}
"
net.jforum.controllers.PrivateMessageController.sendSave,PrivateMessageController.java,"void sendSave(Post post, PostFormOptions options, String toUsername, int toUserId) {
		User toUser = this.findToUser(toUserId, toUsername);

		if (toUser == null || !this.canSendMessageTo(toUser)) {
			// TODO Show a nice message
			throw new ForumException(""User not found"");
		}

		PrivateMessage pm = new PrivateMessage();
		pm.setFromUser(this.userSession.getUser());
		pm.setToUser(toUser);
		pm.setSubject(post.getSubject());
		pm.setText(post.getText());
		pm.setIp(this.userSession.getIp());

		ActionUtils.definePrivateMessageOptions(pm, options);

		this.service.send(pm);
		this.result.redirectTo(Actions.INBOX);
	}
"
net.jforum.controllers.PrivateMessageController.findUser,PrivateMessageController.java,"void findUser(String username) {
		if (!StringUtils.isEmpty(username)) {
			RoleManager roleManager = this.userSession.getRoleManager();

			if (roleManager.getCanOnlyContactModerators()) {
				List<User> users = this.userRepository.findByUserName(username);
				List<User> result = new ArrayList<User>();

				for (User user : users) {
					RoleManager roles = new RoleManager();
					roles.setGroups(user.getGroups());

					if (roles.isModerator() || roles.isAdministrator() || roles.isCoAdministrator()) {
						result.add(user);
					}
				}

				this.result.include(""users"", result);
			}
			else {
				if (roleManager.roleExists(SecurityConstants.INTERACT_OTHER_GROUPS)) {
					this.result.include(""users"", this.userRepository.findByUserName(username));
				} else {
					User currentUser = this.userSession.getUser();
					this.result.include(""users"", this.userRepository.findByUserName(username, currentUser.getGroups()));
				}
			}
		}

		this.result.include(""username"", username);
	}
"
net.jforum.controllers.PrivateMessageController.send,PrivateMessageController.java,"void send() {
		this.result.include(""post"", new Post());
		this.result.include(""isPrivateMessage"", true);
		this.result.include(""attachmentsEnabled"", false);
		this.result.include(""user"", this.userSession.getUser());

		this.result.forwardTo(TopicController.class).add(0);
	}
"
net.jforum.controllers.PrivateMessageController.sendTo,PrivateMessageController.java,"void sendTo(int userId) {
		User recipient = this.userRepository.get(userId);

		if (this.canSendMessageTo(recipient)) {
			this.result.include(""pmRecipient"", recipient);
			this.send();
		} else {
			this.result.forwardTo(""sendToDenied"");
		}
	}
"
net.jforum.controllers.PrivateMessageController.canSendMessageTo,PrivateMessageController.java,"boolean canSendMessageTo(User toUser) {
		UserSession userSession = this.userSession;
		RoleManager roleManager = userSession.getRoleManager();

		if (roleManager.roleExists(SecurityConstants.INTERACT_OTHER_GROUPS)) {
			return true;
		}

		User currentUser = userSession.getUser();

		for (Group group : toUser.getGroups()) {
			if (currentUser.getGroups().contains(group)) {
				if (roleManager.getCanOnlyContactModerators()) {
					RoleManager roles = new RoleManager();
					roles.setGroups(toUser.getGroups());

					return roles.isModerator() || roles.isAdministrator() || roles.isCoAdministrator();
				}

				return true;
			}
		}

		return false;
	}
"
net.jforum.controllers.PrivateMessageController.inbox,PrivateMessageController.java,"void inbox() {
		User user = this.userSession.getUser();
		this.result.include(""inbox"", true);
		this.result.include(""privateMessages"", this.repository.getFromInbox(user));
		result.of(this).messages();
	}
"
net.jforum.controllers.PrivateMessageController.findToUser,PrivateMessageController.java,"User findToUser(int userId, String username) {
		return userId == 0 ? this.userRepository.getByUsername(username) : this.userRepository.get(userId);
	}
"
net.jforum.controllers.ForumAdminController.list,ForumAdminController.java,"void list() {
		this.result.include(""categories"",
			this.categoryRepository.getAllCategories());
	}
"
net.jforum.controllers.ForumAdminController.delete,ForumAdminController.java,"void delete(int... forumsId) {
		RoleManager roleManager = this.userSession.getRoleManager();

		if (roleManager.isAdministrator()) {
			this.forumService.delete(forumsId);
		}

		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.ForumAdminController.add,ForumAdminController.java,"void add() {
		this.result.include(""categories"", this.categoryRepository.getAllCategories());
	}
"
net.jforum.controllers.ForumAdminController.addSave,ForumAdminController.java,"void addSave(Forum forum) {
		RoleManager roleManager = this.userSession.getRoleManager();

		if (roleManager.isAdministrator() || roleManager.isCategoryAllowed(forum.getCategory().getId())) {
			this.forumService.add(forum);
			this.result.include(""forum"", forum);
		}

		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.ForumAdminController.edit,ForumAdminController.java,"void edit(int forumId) {
		RoleManager roleManager = this.userSession.getRoleManager();

		if (!roleManager.getCanModerateForum(forumId)) {
			this.result.redirectTo(this).list();
		}
		else {
			this.result.include(""forum"", this.forumRepository.get(forumId));
			this.result.include(""categories"", this.categoryRepository.getAllCategories());
			this.result.forwardTo(this).add();
		}
	}
"
net.jforum.controllers.ForumAdminController.editSave,ForumAdminController.java,"void editSave(Forum forum) {
		RoleManager roleManager = this.userSession
				.getRoleManager();

		if (roleManager.isAdministrator()
				|| roleManager.getCanModerateForum(forum.getId())) {
			this.forumService.update(forum);
		}

		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.ForumAdminController.up,ForumAdminController.java,"void up(int forumId) {
		RoleManager roleManager = this.userSession.getRoleManager();

		if (roleManager.getCanModerateForum(forumId)) {
			this.forumService.upForumOrder(forumId);
		}

		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.ForumAdminController.down,ForumAdminController.java,"void down(int forumId) {
		RoleManager roleManager = this.userSession.getRoleManager();

		if (roleManager.getCanModerateForum(forumId)) {
			this.forumService.downForumOrder(forumId);
		}

		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.TopicController.preList,TopicController.java,"void preList(int topicId, int postId) {
		int count = this.postRepository.countPreviousPosts(postId);
		int postsPerPage = this.config.getInt(ConfigKeys.POSTS_PER_PAGE);

		if (topicId == 0) {
			Post post = this.postRepository.get(postId);
			topicId = post.getTopic().getId();
		}

		String url = null;

		if (count > postsPerPage) {
			int page = new Pagination().calculeStartFromCount(count, postsPerPage);
			url = URLBuilder.build(Domain.TOPICS, Actions.LIST, page, topicId);
		}
		else {
			url = URLBuilder.build(Domain.TOPICS, Actions.LIST, topicId);
		}

		this.result.redirectTo(url + ""#"" + postId);
	}
"
net.jforum.controllers.TopicController.quote,TopicController.java,"void quote(int postId) {
		Post post = this.postRepository.get(postId);

		this.result.include(""post"", post);
		this.result.include(""isQuote"", true);
		this.result.include(""isReply"", true);
		this.result.include(""topic"", post.getTopic());
		this.result.include(""forum"", post.getForum());
		this.result.include(""smilies"", this.smilieRepository.getAllSmilies());

		this.result.of(this).add(0);
	}
"
net.jforum.controllers.TopicController.vote,TopicController.java,"void vote(int topicId, int pollId, int optionId) {
		UserSession userSession = this.userSession;

		if (userSession.isLogged() && optionId != 0) {
			User user = userSession.getUser();
			Poll poll = this.topicRepository.get(topicId).getPoll();

			if (!this.pollRepository.hasUserVoted(poll, user) && poll.isOpen()) {

				PollVoter voter = new PollVoter();
				voter.setIp(userSession.getIp());
				voter.setPoll(poll);
				voter.setUser(user);

				this.pollRepository.registerVote(voter);

				PollOption option = this.pollRepository.getOption(optionId);
				option.incrementVotes();
			}
		}

		// TODO pass 0 and true?
		this.result.redirectTo(this).list(topicId, 0, true);
	}
"
net.jforum.controllers.TopicController.replyReview,TopicController.java,"void replyReview(int topicId) {
		Topic topic = this.topicRepository.get(topicId);

		Pagination pagination = new Pagination(this.config, 0).forTopic(topic);
		int start = pagination.calculeStart(pagination.getTotalPages(),
				this.config.getInt(ConfigKeys.POSTS_PER_PAGE));

		this.result.include(""topic"", topic);
		this.result.include(""posts"",
				topic.getPosts(start, pagination.getRecordsPerPage()));
	}
"
net.jforum.controllers.TopicController.preview,TopicController.java,"void preview(String message, PostFormOptions options) {
		Post post = new Post();

		post.setText(message);
		post.setBbCodeEnabled(options.isBbCodeEnabled());
		post.setHtmlEnabled(options.isHtmlEnabled());
		post.setSmiliesEnabled(options.isSmiliesEnabled());

		this.result.include(""post"", post);
	}
"
net.jforum.controllers.TopicController.add,TopicController.java,"void add(int forumId) {
		Forum forum = this.forumRepository.get(forumId);

		if (!result.included().containsKey(""forum"")) {
			this.result.include(""forum"", forum);
		}

		if (!result.included().containsKey(""post"")) {
			this.result.include(""post"", new Post());
		}

		this.result.include(""isNewTopic"", true);
		this.result.include(""smilies"", this.smilieRepository.getAllSmilies());
	}
"
net.jforum.controllers.TopicController.reply,TopicController.java,"void reply(int topicId) {
		Topic topic = this.topicRepository.get(topicId);
		Forum forum = topic.getForum();

		this.result.include(""isReply"", true);
		this.result.include(""post"", new Post());
		this.result.include(""topic"", topic);
		this.result.include(""forum"", forum);
		this.result.include(""smilies"", this.smilieRepository.getAllSmilies());

		result.of(this).add(forum.getId());
	}
"
net.jforum.controllers.TopicController.replySave,TopicController.java,"void replySave(Topic topic, Post post, PostFormOptions options) {

		UserSession userSession = this.userSession;

		post.setUserIp(userSession.getIp());
		post.setUser(userSession.getUser());

		ActionUtils.definePostOptions(post, options);

		RoleManager roleManager = userSession.getRoleManager();
		List<AttachedFile> attachments = new ArrayList<AttachedFile>();

		if (roleManager.isAttachmentsAlllowed(topic.getForum().getId())) {
			attachments = this.attachmentService.processNewAttachments(request);
		}

		topic = this.topicRepository.get(topic.getId());

		if (topic.getForum().isModerated() && !roleManager.isModerator()) {
			post.setModerate(true);
		}

		this.topicService.reply(topic, post, attachments);

		if (post.isWaitingModeration()) {
			this.result.redirectTo(MessageController.class).replyWaitingModeration(topic.getId());
		}
		else {
			this.redirecToListing(topic, post);
		}
	}
"
net.jforum.controllers.TopicController.list,TopicController.java,"void list(int topicId, int page, boolean viewPollResults) {
		Topic topic = this.topicRepository.get(topicId);

		if (topic.isWaitingModeration()) {
			this.result.redirectTo(MessageController.class).topicWaitingModeration(topic.getForum().getId());
			return;
		}

		// FIXME resolve cache issues
		// topic.incrementViews();
		UserSession userSession = this.userSession;
		userSession.markTopicAsRead(topicId);

		Pagination pagination = new Pagination(this.config, page).forTopic(topic);

		boolean canVoteOnPolls = userSession.isLogged()
				&& userSession.getRoleManager().getCanVoteOnPolls();

		if (canVoteOnPolls && topic.isPollEnabled()) {
			canVoteOnPolls = !this.pollRepository.hasUserVoted(topic.getPoll(),
					userSession.getUser());
		}

		this.result.include(""canVoteOnPolls"", canVoteOnPolls);
		this.result.include(""viewPollResults"", viewPollResults);
		this.result.include(""topic"", topic);
		this.result.include(""forum"", topic.getForum());
		this.result.include(""pagination"", pagination);
		this.result.include(""isModeratorOnline"",
				this.sessionManager.isModeratorOnline());
		this.result
				.include(""rankings"", this.rankingRepository.getAllRankings());
		this.result.include(""categories"",
				this.categoryRepository.getAllCategories());

		List<Post> posts = topic.getPosts(pagination.getStart(),
				pagination.getRecordsPerPage());
		if (posts.isEmpty() == false) {
			long limitedTime = this.forumLimitedTimeRepository
					.getLimitedTime(posts.get(0).getForum());

			if (limitedTime > 0) {
				Date now = new Date();
				for (Post post : posts) {
					post.calculateHasEditTimeExpired(limitedTime, now);
				}
			}
		}
		this.result.include(""posts"", posts);
	}
"
net.jforum.controllers.TopicController.addSave,TopicController.java,"void addSave(Topic topic, Post post, PostFormOptions postOptions, List<PollOption> pollOptions) {

		ActionUtils.definePostOptions(post, postOptions);
		UserSession userSession = this.userSession;
		List<AttachedFile> attachments = new ArrayList<AttachedFile>();

		if (userSession.getRoleManager().isAttachmentsAlllowed(topic.getForum().getId())) {
			attachments = this.attachmentService.processNewAttachments(this.request);
		}

		topic.setType(postOptions.getTopicType());
		topic.setSubject(post.getSubject());
		topic.setUser(userSession.getUser());
		post.setUserIp(userSession.getIp());
		topic.setFirstPost(post);

		Forum forum = this.forumRepository.get(topic.getForum().getId());

		if (forum.isModerated() && !userSession.getRoleManager().isModerator()) {
			topic.setPendingModeration(true);
		}

		if (!userSession.getRoleManager().getCanCreateStickyAnnouncementTopics()) {
			topic.setType(Topic.TYPE_NORMAL);
		}

		if (!userSession.getRoleManager().getCanCreatePolls()) {
			topic.setPoll(null);
		}

		topicService.addTopic(topic, pollOptions, attachments);
		this.result.include(""topic"", topic);

		if (topic.isWaitingModeration()) {
			this.result.redirectTo(MessageController.class).topicWaitingModeration(topic.getForum().getId());
		} else {
			this.redirecToListing(topic, post);
		}
	}
"
net.jforum.controllers.TopicController.listSmilies,TopicController.java,"void listSmilies() {
		this.result.include(""smilies"", this.smilieRepository.getAllSmilies());
	}
"
net.jforum.controllers.TopicController.downloadAttachment,TopicController.java,"File downloadAttachment(int attachmentId) {
		Attachment attachment = this.attachmentService.getAttachmentForDownload(attachmentId);
		String downloadPath = this.attachmentService.buildDownloadPath(attachment);

		if (!new File(downloadPath).exists()) {
			// TODO show a nice message instead
			throw new ForumException(""Attachment not found"");
		}

		return new File(attachment.getRealFilename());
	}
"
net.jforum.controllers.TopicController.redirecToListing,TopicController.java,"void redirecToListing(Topic topic, Post post) {
		Pagination pagination = new Pagination(this.config, 0).forTopic(topic);

		StringBuilder url = new StringBuilder(
			pagination.getTotalPages() > 1
				? URLBuilder.build(Domain.TOPICS, Actions.LIST,pagination.getTotalPages(), topic.getId())
				: URLBuilder.build(Domain.TOPICS, Actions.LIST, topic.getId()));

		url.append('#').append(post.getId());

		this.result.redirectTo(url.toString());
	}
"
net.jforum.controllers.GroupAdminController.permissions,GroupAdminController.java,"void permissions(int groupId) {
		Group group = this.groupRepository.get(groupId);
		RoleManager roleManager = this.userSession.getRoleManager();

		if (!roleManager.isAdministrator() && !roleManager.isGroupManager(groupId)) {
			this.result.redirectTo(this).list();
		}
		else {
			this.result.include(""group"", group);
			this.result.include(""groups"", this.groupRepository.getAllGroups());
			this.result.include(""categories"", this.categoryRepository.getAllCategories());

			RoleManager groupRoleManager = new RoleManager();
			groupRoleManager.setGroups(Arrays.asList(group));
			this.result.include(""roleManager"", groupRoleManager);
		}
	}
"
net.jforum.controllers.GroupAdminController.permissionsSave,GroupAdminController.java,"void permissionsSave(int groupId) {
		RoleManager roleManager = this.userSession.getRoleManager();

		if (roleManager.isAdministrator() || roleManager.isGroupManager(groupId)) {
			this.service.savePermissions(groupId, extractPermissionsFromRequest());
		}

		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.GroupAdminController.extractPermissionsFromRequest,GroupAdminController.java,"Map<String, Map<String, List<?>>> extractPermissionsFromRequest() {
		Map<String, Map<String, List<?>>> m = new HashMap<String, Map<String,List<?>>>();
		m.put(""boolean"", new HashMap<String, List<?>>());
		m.put(""multiple"", new HashMap<String, List<?>>());

		for (Enumeration<?> e = request.getParameterNames(); e.hasMoreElements(); ) {
			String fieldName = (String)e.nextElement();

			if (fieldName.startsWith(""role_"")) {
				String key = fieldName.substring(7);

				if (fieldName.startsWith(""role_b$"")) {
					m.get(""boolean"").put(key, Arrays.asList(""true"".equals(request.getParameter(fieldName))));
				}
				else {
					List<Integer> l = new ArrayList<Integer>();
					for (String v : request.getParameterValues(fieldName)) {
						l.add(Integer.parseInt(v));
					}
					m.get(""multiple"").put(key, l);
				}
			}
		}

		return m;
	}
"
net.jforum.controllers.GroupAdminController.list,GroupAdminController.java,"void list() {
		this.result.include(""groups"", this.groupRepository.getAllGroups());
	}
"
net.jforum.controllers.GroupAdminController.add,GroupAdminController.java,"void add() {
		RoleManager roleManager = this.userSession.getRoleManager();

		if (!roleManager.isAdministrator()) {
			this.result.redirectTo(this).list();
		}
	}
"
net.jforum.controllers.GroupAdminController.delete,GroupAdminController.java,"void delete(int... groupId) {
		RoleManager roleManager = this.userSession.getRoleManager();

		if (roleManager.isAdministrator()) {
			this.service.delete(groupId);
		}

		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.GroupAdminController.edit,GroupAdminController.java,"void edit(int groupId) {
		RoleManager roleManager = this.userSession.getRoleManager();

		if (!roleManager.isAdministrator() && !roleManager.isGroupManager(groupId)) {
			this.result.redirectTo(this).list();
		}
		else {
			this.result.include(""group"", this.groupRepository.get(groupId));
			this.result.forwardTo(this).add();
		}
	}
"
net.jforum.controllers.GroupAdminController.editSave,GroupAdminController.java,"void editSave(Group group) {
		RoleManager roleManager = this.userSession.getRoleManager();

		if (roleManager.isAdministrator() || roleManager.isGroupManager(group.getId())) {
			this.service.update(group);
		}

		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.GroupAdminController.addSave,GroupAdminController.java,"void addSave(Group group) {
		RoleManager roleManager = this.userSession.getRoleManager();

		if (roleManager.isAdministrator()) {
			this.service.add(group);
		}

		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.SearchController.filters,SearchController.java,"void filters() {
		this.result.include(""categories"",
				this.categoryRepository.getAllCategories());
	}
"
net.jforum.controllers.SearchController.execute,SearchController.java,"void execute(SearchParams params) {
		if (StringUtils.isEmpty(params.getQuery())
				&& StringUtils.isEmpty(params.getUser())) {
			this.result.redirectTo(Actions.FILTERS);
		} else {
			try {
				params.setMaxResults(this.config
						.getInt(ConfigKeys.TOPICS_PER_PAGE));

				SearchResult result = this.searchRepository.search(params)
						.filter(this.userSession.getRoleManager());

				Pagination pagination = new Pagination(this.config,
						params.getStart()).forSearch(result.getTotalRecords());

				this.result.include(""results"", result.getResults());
				this.result.include(""searchParams"", params);
				this.result.include(""pagination"", pagination);
				this.result.include(""categories"",
						this.categoryRepository.getAllCategories());
			} catch (ParseException e) {
				this.result.include(""parseError"", true);
				this.result.include(""parseErrorMessage"", e.toString());
			}
		}
	}
"
net.jforum.controllers.ModerationController.showActivityLog,ModerationController.java,"void showActivityLog(int page) {
		if (!roleManager.roleExists(SecurityConstants.VIEW_MODERATION_LOG)) {
			this.result.redirectTo(MessageController.class).accessDenied();
			return;
		}

		Pagination pagination = new Pagination(this.config, page)
				.forModerationLog(this.logRepository.getTotalRecords());
		List<ModerationLog> logs = this.logRepository.getAll(
				pagination.getStart(), pagination.getRecordsPerPage());

		this.result.include(""logs"", logs);
		this.result.include(""pagination"", pagination);
	}
"
net.jforum.controllers.ModerationController.moveTopics,ModerationController.java,"void moveTopics(int toForumId, String returnUrl,
			ModerationLog moderationLog, int... topicIds) {

		if (this.roleManager.getCanMoveTopics()) {
			if (moderationLog != null) {
				moderationLog.setUser(this.userSession.getUser());
			}

			this.moderationService.moveTopics(toForumId, moderationLog,
					topicIds);
		}

		this.result.redirectTo(returnUrl);
	}
"
net.jforum.controllers.ModerationController.askMoveDestination,ModerationController.java,"void askMoveDestination(String returnUrl, int forumId,
			int... topicIds) {
		if (!this.roleManager.getCanMoveTopics()) {
			this.result.redirectTo(returnUrl);
		} else {
			this.result.include(""fromForumId"", forumId);
			this.result.include(""topicIds"", topicIds);
			this.result.include(""returnUrl"", returnUrl);
			this.result.include(""categories"",
					this.categoryRepository.getAllCategories());
		}
	}
"
net.jforum.controllers.ModerationController.lockUnlock,ModerationController.java,"void lockUnlock(int forumId, String returnUrl,
			ModerationLog moderationLog, int[] topicIds) {

		if (this.roleManager.getCanLockUnlockTopics()) {
			if (moderationLog != null) {
				moderationLog.setUser(this.userSession.getUser());
			}

			this.moderationService.lockUnlock(topicIds, moderationLog);
		}

		if (!StringUtils.isEmpty(returnUrl)) {
			this.result.forwardTo(returnUrl);
		} else {
			// TODO pass zero?
			this.result.redirectTo(ForumController.class).show(forumId, 0);
		}
	}
"
net.jforum.controllers.ModerationController.deleteTopics,ModerationController.java,"void deleteTopics(int forumId, String returnUrl, int[] topicIds,
			ModerationLog moderationLog) {

		if (this.roleManager.getCanDeletePosts()) {
			List<Topic> topics = new ArrayList<Topic>();

			for (int topicId : topicIds) {
				Topic topic = this.topicRepository.get(topicId);
				topics.add(topic);
			}

			if (moderationLog != null) {
				moderationLog.setUser(this.userSession.getUser());
			}

			this.moderationService.deleteTopics(topics, moderationLog);
		}

		if (!StringUtils.isEmpty(returnUrl)) {
			this.result.redirectTo(returnUrl);
		} else {
			// TODO pass zero?
			this.result.redirectTo(ForumController.class).show(forumId, 0);
		}
	}
"
net.jforum.controllers.ModerationController.approve,ModerationController.java,"void approve(int forumId, List<ApproveInfo> info) {
		if (this.roleManager.getCanApproveMessages()) {
			this.moderationService.doApproval(forumId, info);
		}

		// TODO pass zero?
		this.result.redirectTo(ForumController.class).show(forumId, 0);
	}
"
net.jforum.controllers.SmilieAdminController.list,SmilieAdminController.java,"void list() {
		this.result.include(""smilies"", this.repository.getAllSmilies());
	}
"
net.jforum.controllers.SmilieAdminController.addSave,SmilieAdminController.java,"void addSave(Smilie smilie, UploadedFile image) {
		this.service.add(smilie, image);
		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.SmilieAdminController.edit,SmilieAdminController.java,"void edit(int smilieId) {
		this.result.include(""smilie"", this.repository.get(smilieId));
		this.result.forwardTo(this).add();
	}
"
net.jforum.controllers.SmilieAdminController.editSave,SmilieAdminController.java,"void editSave(Smilie smilie, UploadedFile image) {
		this.service.update(smilie, image);
		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.SmilieAdminController.delete,SmilieAdminController.java,"void delete(int... smiliesId) {
		this.service.delete(smiliesId);
		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.UserAdminController.edit,UserAdminController.java,"void edit(int userId) {
		result.forwardTo(UserController.class).edit(userId);
	}
"
net.jforum.controllers.UserAdminController.groups,UserAdminController.java,"void groups(int userId) {
		this.result.include(""user"", this.userRepository.get(userId));
		this.result.include(""groups"", this.groupRepository.getAllGroups());
	}
"
net.jforum.controllers.UserAdminController.lockUnlock,UserAdminController.java,"void lockUnlock(int[] userIds) {
		result.of(this).list(0);
	}
"
net.jforum.controllers.UserAdminController.groupsSave,UserAdminController.java,"void groupsSave(int userId, int... groupIds) {
		RoleManager roleManager = this.userSession.getRoleManager();
		boolean canSave = roleManager.isAdministrator();

		if (!canSave) {
			canSave = true;

			for (int groupId : groupIds) {
				canSave = canSave && roleManager.isGroupManager(groupId);
			}
		}

		if (canSave) {
			this.userService.saveGroups(userId, groupIds);
		}

		this.result.redirectTo(this).list(0);
	}
"
net.jforum.controllers.UserAdminController.search,UserAdminController.java,"void search(String username) {
		List<User> users = this.userRepository.findByUserName(username);
		this.result.include(""users"", users);
		this.result.include(""username"", username);

		this.result.of(this).list(0);
	}
"
net.jforum.controllers.UserAdminController.list,UserAdminController.java,"void list(int page) {
		Pagination pagination = new Pagination(this.config, page).forUsers(this.userRepository.getTotalUsers());

		this.result.include(""pagination"", pagination);
		this.result.include(""users"", this.userRepository.getAllUsers(pagination.getStart(), pagination.getRecordsPerPage()));
	}
"
net.jforum.controllers.AvatarAdminController.delete,AvatarAdminController.java,"void delete(int... avatarId) {
		if (avatarId != null) {
			for (int id : avatarId) {
				Avatar avatar = this.repository.get(id);
				this.repository.remove(avatar);
			}
		}

		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.AvatarAdminController.list,AvatarAdminController.java,"void list() {
		this.result.include(""GalleryAvatars"",
				this.repository.getGalleryAvatar());
		this.result.include(""UploadedAvatars"",
				this.repository.getUploadedAvatar());
	}
"
net.jforum.controllers.AvatarAdminController.addSave,AvatarAdminController.java,"void addSave(Avatar avatar, UploadedFile image) {
		this.avatarService.add(avatar, image);
		this.result.redirectTo(Actions.LIST);
	}
"
net.jforum.controllers.AvatarAdminController.edit,AvatarAdminController.java,"void edit(int avatarId) {
		this.result.include(""avatar"", this.repository.get(avatarId));
		this.result.forwardTo(Actions.ADD);
	}
"
net.jforum.controllers.AvatarAdminController.editSave,AvatarAdminController.java,"void editSave(Avatar avatar, UploadedFile image) {
		this.avatarService.update(avatar, image);
		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.PostController.delete,PostController.java,"void delete(int postId) {
		Post post = this.postRepository.get(postId);
		Topic topic = post.getTopic();
		this.postService.delete(post);

		if (topic.getTotalPosts() > 0) {
			this.redirecToListing(topic);
		}
		else {
			//TODO pass zero?
			this.result.redirectTo(ForumController.class).show(topic.getForum().getId(), 0);
		}
	}
"
net.jforum.controllers.PostController.editSave,PostController.java,"void editSave( Post post,  PostFormOptions postOptions, List<PollOption> pollOptions,  ModerationLog moderationLog) {

		ActionUtils.definePostOptions(post, postOptions);
		post.getTopic().setType(postOptions.getTopicType());

		Post currentPost = this.postRepository.get(post.getId());
		List<AttachedFile> attachments = new ArrayList<AttachedFile>();

		RoleManager roleManager = this.userSession.getRoleManager();

		if (roleManager.isAttachmentsAlllowed(currentPost.getForum().getId())) {
			attachments = this.attachmentService.processNewAttachments(this.request);
			this.attachmentService.editAttachments(currentPost, request);
		}

		if (!roleManager.getCanCreatePolls()) {
			pollOptions = new ArrayList<PollOption>();
		}

		if (moderationLog != null) {
			moderationLog.setUser(this.userSession.getUser());
		}

		this.postService.update(post, roleManager.getCanCreateStickyAnnouncementTopics(), pollOptions, attachments, moderationLog);
		this.result.redirectTo(TopicController.class).list(post.getTopic().getId(), 0, true);
	}
"
net.jforum.controllers.PostController.edit,PostController.java,"void edit(int postId) {
		Post post = this.postRepository.get(postId);

		this.result.include(""isEdit"", true);
		this.result.include(""post"", post);
		this.result.include(""topic"", post.getTopic());
		this.result.include(""forum"", post.getTopic().getForum());
		this.result.include(""smilies"", this.smilieRepository.getAllSmilies());

		this.result.forwardTo(TopicController.class).add(0);

	}
"
net.jforum.controllers.PostController.redirecToListing,PostController.java,"void redirecToListing(Topic topic) {
		Pagination pagination = new Pagination(this.config, 0).forTopic(topic);

		String url;
		if(pagination.getTotalPages() > 1) {
			url = URLBuilder.build(Domain.TOPICS, Actions.LIST, pagination.getTotalPages(), topic.getId());
		} else {
			url = URLBuilder.build(Domain.TOPICS, Actions.LIST, topic.getId());
		}

		this.result.redirectTo(url);
	}
"
net.jforum.controllers.CategoryAdminController.addSave,CategoryAdminController.java,"void addSave(Category category) {
		this.categoryService.add(category);
		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.CategoryAdminController.edit,CategoryAdminController.java,"void edit(int categoryId) {
		this.result.include(""category"", this.categoryRepository.get(categoryId));
		this.result.forwardTo(this).add();
	}
"
net.jforum.controllers.CategoryAdminController.editSave,CategoryAdminController.java,"void editSave(Category category) {
		this.categoryService.update(category);
		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.CategoryAdminController.delete,CategoryAdminController.java,"void delete(int... categoriesId) {
		this.categoryService.delete(categoriesId);
		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.CategoryAdminController.list,CategoryAdminController.java,"void list() {
		this.result.include(""categories"", this.categoryRepository.getAllCategories());
	}
"
net.jforum.controllers.CategoryAdminController.up,CategoryAdminController.java,"void up(int categoryId) {
		this.categoryService.upCategoryOrder(categoryId);
		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.CategoryAdminController.down,CategoryAdminController.java,"void down(int categoryId) {
		this.categoryService.downCategoryOrder(categoryId);
		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.RecentTopicsController.listNew,RecentTopicsController.java,"void listNew() {
		this.list(this.repository.getNewTopics(this.config.getInt(ConfigKeys.RECENT_TOPICS)), ""recentTopicsNew"");
	}
"
net.jforum.controllers.RecentTopicsController.listUpdated,RecentTopicsController.java,"void listUpdated() {
		this.list(this.repository.getUpdatedTopics(this.config.getInt(ConfigKeys.RECENT_TOPICS)), ""recentTopicsUpdated"");
	}
"
net.jforum.controllers.RecentTopicsController.listHot,RecentTopicsController.java,"void listHot() {
		this.list(this.repository.getHotTopics(this.config.getInt(ConfigKeys.RECENT_TOPICS)), ""recentTopicsHot"");
	}
"
net.jforum.controllers.RecentTopicsController.list,RecentTopicsController.java,"void list(List<Topic> topics, String key) {
		TopicFilter filter = new TopicFilter();

		this.result.include(""topics"", filter.filter(topics, this.userSession.getRoleManager()));
		this.result.include(""recentTopicsSectionKey"", key);

		result.of(this).list();
	}
"
net.jforum.controllers.LuceneAdminController.rebuildIndex,LuceneAdminController.java,"void rebuildIndex() {

		Runnable indexingJob = new Runnable() {
			public void run() {
				Session session = null;

				try {
					session = sessionFactory.openSession();

					FullTextSession fullTextSession = Search
							.createFullTextSession(session);
					fullTextSession.setFlushMode(FlushMode.MANUAL);
					fullTextSession.setCacheMode(CacheMode.IGNORE);

					session.beginTransaction();

					int index = 0;
					int batchSize = config.getInt(ConfigKeys.LUCENE_BATCH_SIZE);

					ScrollableResults results = fullTextSession
							.createCriteria(Post.class)
							.createAlias(""topic"", ""t"")
							.scroll(ScrollMode.FORWARD_ONLY);

					while (results.next()
							&& ""1"".equals(config
									.getValue(ConfigKeys.LUCENE_CURRENTLY_INDEXING))) {
						index++;

						fullTextSession.index(results.get(0));

						if (index % batchSize == 0) {
							session.clear();
						}
					}

					session.getTransaction().commit();
				} catch (Exception e) {
					if (session.getTransaction().isActive()) {
						session.getTransaction().rollback();
					}
				} finally {
					if (session.isOpen() && session.isConnected()) {
						session.close();
					}
				}
			}
		};

		this.config.addProperty(ConfigKeys.LUCENE_CURRENTLY_INDEXING, ""1"");

		Thread thread = new Thread(indexingJob);
		thread.start();

		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.LuceneAdminController.run,LuceneAdminController.java,"void run() {
				Session session = null;

				try {
					session = sessionFactory.openSession();

					FullTextSession fullTextSession = Search
							.createFullTextSession(session);
					fullTextSession.setFlushMode(FlushMode.MANUAL);
					fullTextSession.setCacheMode(CacheMode.IGNORE);

					session.beginTransaction();

					int index = 0;
					int batchSize = config.getInt(ConfigKeys.LUCENE_BATCH_SIZE);

					ScrollableResults results = fullTextSession
							.createCriteria(Post.class)
							.createAlias(""topic"", ""t"")
							.scroll(ScrollMode.FORWARD_ONLY);

					while (results.next()
							&& ""1"".equals(config
									.getValue(ConfigKeys.LUCENE_CURRENTLY_INDEXING))) {
						index++;

						fullTextSession.index(results.get(0));

						if (index % batchSize == 0) {
							session.clear();
						}
					}

					session.getTransaction().commit();
				} catch (Exception e) {
					if (session.getTransaction().isActive()) {
						session.getTransaction().rollback();
					}
				} finally {
					if (session.isOpen() && session.isConnected()) {
						session.close();
					}
				}
			}
"
net.jforum.controllers.LuceneAdminController.cancelIndexing,LuceneAdminController.java,"void cancelIndexing() {
		this.config.addProperty(ConfigKeys.LUCENE_CURRENTLY_INDEXING, ""0"");
		this.result.redirectTo(this).list();
	}
"
net.jforum.controllers.LuceneAdminController.list,LuceneAdminController.java,"void list() {
		IndexReader indexReader = null;
		ReaderProvider readerProvider = null;

		try {
			SearchFactory searchFactory = Search.createFullTextSession(
					this.sessionFactory.getCurrentSession()).getSearchFactory();

			DirectoryProvider<?> directoryProvider = searchFactory
					.getDirectoryProviders(Post.class)[0];
			readerProvider = searchFactory.getReaderProvider();
			indexReader = readerProvider.openReader(directoryProvider);

			String indexDirectory = directoryProvider.getDirectory().toString();
			indexDirectory = indexDirectory.substring(indexDirectory
					.indexOf('@') + 1);

			boolean indexExists = IndexReader.indexExists(indexDirectory);

			this.result.include(""indexExists"", indexExists);

			if (indexExists) {
				this.result.include(""numberOfDocs"", indexReader.numDocs());
				this.result.include(""indexLocation"", indexDirectory);
				this.result.include(""totalMessages"",
						this.forumRepository.getTotalMessages());
				this.result.include(""isLocked"",
						IndexReader.isLocked(indexDirectory));
				this.result.include(""lastModified"",
						new Date(IndexReader.lastModified(indexDirectory)));
			}
		} catch (IOException e) {
			throw new ForumException(e);
		} finally {
			if (readerProvider != null && indexReader != null) {
				readerProvider.closeReader(indexReader);
			}
		}
	}
"
net.jforum.controllers.UserController.list,UserController.java,"void list(int page) {
		RoleManager roleManager = this.userSession.getRoleManager();

		if (!roleManager.isUserListingEnabled()) {
			this.result.include(""users"", new ArrayList<User>());
		}
		else {
			Pagination pagination = new Pagination(this.config, page)
				.forUsers(this.userRepository.getTotalUsers());

			if (roleManager.roleExists(SecurityConstants.INTERACT_OTHER_GROUPS)) {
				this.result.include(""users"", this.userRepository.getAllUsers(pagination.getStart(),
					pagination.getRecordsPerPage()));
			}
			else {
				User currentUser = this.userSession.getUser();
				this.result.include(""users"", this.userRepository.getAllUsers(pagination.getStart(),
					pagination.getRecordsPerPage(), currentUser.getGroups()));
			}

			this.result.include(""pagination"", pagination);
		}
	}
"
net.jforum.controllers.UserController.logout,UserController.java,"void logout() {
		UserSession us = this.userSession;
		this.sessionManager.storeSession(us.getSessionId());

		us.becomeAnonymous(this.config.getInt(ConfigKeys.ANONYMOUS_USER_ID));

		this.sessionManager.remove(us.getSessionId());
		this.sessionManager.add(us);
		this.removeAutoLoginCookies(us);

		this.result.redirectTo(ForumController.class).list();
	}
"
net.jforum.controllers.UserController.login,UserController.java,"void login(String returnPath, boolean failed) {
		if (StringUtils.isEmpty(returnPath) && !this.config.getBoolean(ConfigKeys.LOGIN_IGNORE_REFERER)) {
			returnPath = this.request.getHeader(""Referer"");
		}

		result.include(""invalidLogin"", failed);

		if (!StringUtils.isEmpty(returnPath)) {
			this.result.include(""returnPath"", returnPath);
		}
	}
"
net.jforum.controllers.UserController.authenticateUser,UserController.java,"void authenticateUser(String username,
		String password, boolean autoLogin,
		String returnPath) {
		User user = this.userService.validateLogin(username, password);

		if (user == null) {
			result.redirectTo(this).login(returnPath, true);
		}
		else {
			this.userSession.setUser(user);
			this.userSession.becomeLogged();

			if (autoLogin) {
				this.activateAutoLogin(user);
			}
			else {
				this.removeAutoLoginCookies(this.userSession);
			}

			this.sessionManager.add(this.userSession);

			if (!StringUtils.isEmpty(returnPath)) {
				this.result.redirectTo(returnPath);
			}
			else {
				this.result.redirectTo(ForumController.class).list();
			}
		}
	}
"
net.jforum.controllers.UserController.edit,UserController.java,"void edit(int userId) {
		User userToEdit = this.userRepository.get(userId);
		this.result.include(""user"", userToEdit);
		this.result.include(""rankings"", this.rankingRepository.getAllRankings());
		this.result.include(""avatars"", this.avatarService.getAvatarGallery());
	}
"
net.jforum.controllers.UserController.editSave,UserController.java,"void editSave(User user, Integer avatarId, UploadedFile image, Integer rankingId) {

		Avatar avatar = null;

		if (avatarId != null){
			avatar = new Avatar();
			avatar.setId(avatarId);
			avatar.setAvatarType(AvatarType.AVATAR_GALLERY);
		}
		else if (image != null) {
			avatar = new Avatar();
			avatar.setAvatarType(AvatarType.AVATAR_UPLOAD);
			this.avatarService.add(avatar, image);
		}

		user.setAvatar(avatar);

		if (rankingId == null) {
			user.setRanking(null);
		}
		else {
			Ranking ranking = new Ranking();
			ranking.setId(rankingId);
			user.setRanking(ranking);
		}

		RoleManager roleManager = this.userSession.getRoleManager();
		boolean canChangeUserName = roleManager.isAdministrator() || roleManager.isCoAdministrator();

		boolean isSSOAuthentication = ConfigKeys.TYPE_SSO.equals(this.config.getValue(ConfigKeys.AUTHENTICATION_TYPE));
		canChangeUserName = canChangeUserName && !isSSOAuthentication;

		this.userService.update(user, canChangeUserName);
		this.result.redirectTo(this).edit(user.getId());
	}
"
net.jforum.controllers.UserController.insertSave,UserController.java,"void insertSave(User user) {
		boolean error = false;

		if (!error && user.getUsername().length() > this.config.getInt(ConfigKeys.USERNAME_MAX_LENGTH)) {
			this.result.include(""error"", ""User.usernameTooBig"");
			error = true;
		}

		if (!error && user.getUsername().indexOf('<') > -1 || user.getUsername().indexOf('>') > -1) {
			this.result.include(""error"", ""User.usernameInvalidChars"");
			error = true;
		}

		if (!error && !this.userRepository.isUsernameAvailable(user.getUsername(), user.getEmail())) {
			this.result.include(""error"", ""User.usernameNotAvailable"");
			error = true;
		}

		if (error) {
			this.result.forwardTo(this).insert();
			return;
		}

		this.userService.add(user);
		this.registerUserInSession(user);
		this.result.redirectTo(this).registrationCompleted();
	}
"
net.jforum.controllers.UserController.profile,UserController.java,"void profile(int userId) {
		if (!this.userSession.getRoleManager().getCanViewProfile()) {
			this.result.redirectTo(MessageController.class).accessDenied();
		}
		else {
			User userToEdit = this.userRepository.get(userId);
			this.result.include(""user"", userToEdit);
			this.result.include(""userTotalTopics"", this.userRepository.getTotalTopics(userId));
			this.result.include(""rankings"", this.rankingRepository.getAllRankings());
			this.result.include(""isAnonymousUser"", userId == this.config.getInt(ConfigKeys.ANONYMOUS_USER_ID));

			boolean canEdit = userSession.getRoleManager().getCanEditUser(userToEdit, userSession.getUser().getGroups());
			this.result.include(""canEdit"", canEdit);
		}
	}
"
net.jforum.controllers.UserController.registrationCompleted,UserController.java,"void registrationCompleted() {
		if (!this.userSession.isLogged()) {
			this.result.redirectTo(this).insert();
		}
		else {
			this.result.include(""user"", this.userSession.getUser());
		}
	}
"
net.jforum.controllers.UserController.lostPasswordSend,UserController.java,"void lostPasswordSend(String username,
		String email) {

		boolean success = this.lostPasswordService.send(username, email);
		this.result.include(""success"", success);
	}
"
net.jforum.controllers.UserController.recoverPassword,UserController.java,"void recoverPassword(String hash) {
		this.result.include(""hash"", hash);
	}
"
net.jforum.controllers.UserController.recoverPasswordValidate,UserController.java,"void recoverPasswordValidate(String hash,
		String username, String newPassword) {
		User user = this.userRepository.validateLostPasswordHash(username, hash);

		if (user == null) {
			this.result.include(""error"", true);
			this.result.include(""message"", ""PasswordRecovery.invalidData"");
		}
		else {
			user.setPassword(newPassword);
			this.result.include(""message"", ""PasswordRecovery.ok"");
		}
	}
"
net.jforum.controllers.UserController.posts,UserController.java,"void posts(int userId, int page) {
		User user = userRepository.get(userId);

		Pagination pagination = new Pagination(this.config, page).forUserPosts(user);

		List<Post> posts = userRepository.getPosts(user, pagination.getStart(), pagination.getRecordsPerPage());

		this.result.include(""pagination"", pagination);
		this.result.include(""posts"", posts);
		this.result.include(""user"", user);
	}
"
net.jforum.controllers.UserController.topics,UserController.java,"void topics(int userId, int page) {
		User user = userRepository.get(userId);

		Pagination pagination = new Pagination(this.config, page).forUserTopics(user, userRepository.getTotalTopics(userId));

		List<Topic> topics = userRepository.getTopics(user, pagination.getStart(), pagination.getRecordsPerPage());

		this.result.include(""pagination"", pagination);
		this.result.include(""topics"", topics);
		this.result.include(""user"", user);
	}
"
net.jforum.controllers.UserController.registerUserInSession,UserController.java,"void registerUserInSession(User user) {
		this.userSession.setUser(user);
		this.userSession.becomeLogged();
		this.sessionManager.add(this.userSession);
	}
"
net.jforum.controllers.UserController.removeAutoLoginCookies,UserController.java,"void removeAutoLoginCookies(UserSession us) {
		us.removeCookie(this.config.getValue(ConfigKeys.COOKIE_AUTO_LOGIN));
		us.removeCookie(this.config.getValue(ConfigKeys.COOKIE_USER_HASH));
	}
"
net.jforum.controllers.UserController.activateAutoLogin,UserController.java,"void activateAutoLogin(User user) {
		String securityHash = this.userService.generateAutoLoginSecurityHash(user.getId());
		user.setSecurityHash(securityHash);

		String userHash = this.userService.generateAutoLoginUserHash(securityHash);

		this.userSession.addCookie(this.config.getValue(ConfigKeys.COOKIE_AUTO_LOGIN), ""1"");
		this.userSession.addCookie(this.config.getValue(ConfigKeys.COOKIE_USER_HASH), userHash);
		this.userSession.addCookie(this.config.getValue(ConfigKeys.COOKIE_USER_ID), Integer.toString(user.getId()));
	}
"
net.jforum.services.PollChanges.processChanges,PollService.java,"void processChanges(Poll originalPoll, List<PollOption> options) {
		PollChanges changes = new PollChanges(originalPoll);
		changes.processChanges(options);
	}
"
net.jforum.services.PollChanges.associatePoll,PollService.java,"void associatePoll(Topic topic, List<PollOption> pollOptions) {
		if (topic.getPoll() == null) {
			return;
		}

		if (StringUtils.isEmpty(topic.getPoll().getLabel()) || pollOptions == null) {
			topic.setPoll(null);
			return;
		}

		topic.getPoll().setStartDate(new Date());

		for (Iterator<PollOption> iterator = pollOptions.iterator(); iterator.hasNext();) {
			PollOption option = iterator.next();

			if (StringUtils.isEmpty(option.getText())) {
				iterator.remove();
			}
			else {
				option.setPoll(topic.getPoll());
			}
		}

		if (pollOptions.size() == 0) {
			topic.setPoll(null);
		}
		else {
			topic.getPoll().setOptions(pollOptions);
		}
	}
"
net.jforum.services.PollChanges.processChanges,PollService.java,"void processChanges(List<PollOption> allOptions) {
			this.processNewAndChangedOptions(allOptions);
			this.processDeletedOptions(allOptions);
		}
"
net.jforum.services.PollChanges.processDeletedOptions,PollService.java,"void processDeletedOptions(List<PollOption> allOptions) {
			for (Iterator<PollOption> iterator = this.originalPoll.getOptions().iterator(); iterator.hasNext(); ) {
				PollOption currentOption = iterator.next();

				if (this.findOption(currentOption.getId(), allOptions) == null) {
					iterator.remove();
				}
			}
		}
"
net.jforum.services.PollChanges.processNewAndChangedOptions,PollService.java,"void processNewAndChangedOptions(List<PollOption> allOptions) {
			for (PollOption option : allOptions) {
				if (option.getId() == 0) {
					this.newOptions.add(option);
					option.setPoll(this.originalPoll);
				}
				else {
					PollOption originalOption = this.findOption(option.getId(), this.originalPoll.getOptions());

					if (originalOption != null && !StringUtils.isEmpty(option.getText())
							&& !originalOption.getText().equals(option.getText())) {
						originalOption.setText(option.getText());
					}
				}
			}

			this.originalPoll.getOptions().addAll(this.newOptions);
		}
"
net.jforum.services.PollChanges.findOption,PollService.java,"PollOption findOption(int optionId, List<PollOption> options) {
			for (PollOption option : options) {
				if (option.getId() == optionId) {
					return option;
				}
			}

			return null;
		}
"
net.jforum.services.UserService.add,UserService.java,"void add(User user) {
		this.performAddValidations(user);

		if (user.getId() > 0) {
			throw new ValidationException(""Cannot add an existing (id > 0) user"");
		}

		if (user.getRegistrationDate() == null) {
			user.setRegistrationDate(new Date());
		}

		user.setPassword(MD5.hash(user.getPassword()));

		if (user.getGroups().size() == 0) {
			Group defaultGroup = this.groupRepository.get(this.config.getInt(ConfigKeys.DEFAULT_USER_GROUP));
			user.addGroup(defaultGroup);
		}

		this.userRepository.add(user);
	}
"
net.jforum.services.UserService.update,UserService.java,"void update(User user, boolean changeUsername) {
		if (user == null) {
			throw new NullPointerException(""Cannot save a null user"");
		}

		if (user.getId() == 0) {
			throw new ValidationException(""Cannot update an user without an id"");
		}

		User currentUser = this.userRepository.get(user.getId());
		this.copyUpdatableProperties(user, currentUser);

		Avatar userAvatar = user.getAvatar();
		Avatar currentAvatar = currentUser.getAvatar();

		if (userAvatar == null || !userAvatar.equals(currentAvatar)) {
			if (currentAvatar != null && currentAvatar.getAvatarType() == AvatarType.AVATAR_UPLOAD) {
				this.avatarService.delete(currentAvatar);
			}

			currentUser.setAvatar(userAvatar);
		}

		if (changeUsername && StringUtils.isNotEmpty(user.getUsername())) {
			currentUser.setUsername(user.getUsername());
		}

		this.userRepository.update(currentUser);
	}
"
net.jforum.services.UserService.generateAutoLoginSecurityHash,UserService.java,"String generateAutoLoginSecurityHash(int userId) {
		String systemHash = MD5.hash(this.config.getValue(ConfigKeys.USER_HASH_SEQUENCE) + userId);
		return MD5.hash(System.currentTimeMillis() + systemHash);
	}
"
net.jforum.services.UserService.generateAutoLoginUserHash,UserService.java,"String generateAutoLoginUserHash(String securityHash) {
		return MD5.hash(securityHash);
	}
"
net.jforum.services.UserService.copyUpdatableProperties,UserService.java,"void copyUpdatableProperties(User from, User to) {
		to.setRanking(from.getRanking());
		to.setAim(from.getAim());
		to.setAttachSignature(from.getAttachSignature());
		to.setBbCodeEnabled(from.isBbCodeEnabled());
		to.setBiography(from.getBiography());
		to.setFrom(from.getFrom());
		to.setHtmlEnabled(from.isHtmlEnabled());
		to.setInterests(from.getinterests());
		to.setLang(from.getLang());
		to.setMsn(from.getMsn());
		to.setNotifyAlways(from.getNotifyAlways());
		to.setNotifyReply(from.getNotifyReply());
		to.setOccupation(from.getOccupation());
		to.setViewEmailEnabled(from.isViewEmailEnabled());
		to.setViewOnlineEnabled(from.isViewOnlineEnabled());
		to.setSignature(from.getSignature());
		to.setWebsite(from.getWebsite());
		to.setYim(from.getYim());
		to.setNotifyReply(from.getNotifyReply());
		to.setNotifyPrivateMessages(from.getNotifyPrivateMessages());
		to.setSmiliesEnabled(from.isSmiliesEnabled());
		to.setNotifyText(from.getNotifyText());
	}
"
net.jforum.services.UserService.validateLogin,UserService.java,"User validateLogin(String username, String password) {
		return this.loginAuthenticator.validateLogin(username, MD5.hash(password), null);
	}
"
net.jforum.services.UserService.saveGroups,UserService.java,"void saveGroups(int userId, int... groupIds) {
		if (groupIds != null && groupIds.length > 0) {
			User user = this.userRepository.get(userId);
			user.getGroups().clear();

			for (int groupId : groupIds) {
				Group group = this.groupRepository.get(groupId);
				user.addGroup(group);
			}

			this.userRepository.update(user);
		}
	}
"
net.jforum.services.UserService.performAddValidations,UserService.java,"void performAddValidations(User user) {
		if (user == null) {
			throw new NullPointerException(""User cannot be null"");
		}

		if (StringUtils.isEmpty(user.getUsername())) {
			throw new ValidationException(""Username cannot be null"");
		}

		if (StringUtils.isEmpty(user.getPassword())) {
			throw new ValidationException(""Password cannot be null"");
		}

		if (StringUtils.isEmpty(user.getEmail())) {
			throw new ValidationException(""Email cannot be null"");
		}
	}
"
net.jforum.services.LostPasswordService.send,LostPasswordService.java,"boolean send(String requestedUser, String requestedEmail) {
		User user = this.findUser(requestedUser, requestedEmail);

		if (user == null) {
			return false;
		}

		String hash = MD5.hash(user.getEmail() + System.currentTimeMillis());
		user.setActivationKey(hash);
		this.userRepository.update(user);

		return true;
	}
"
net.jforum.services.LostPasswordService.findUser,LostPasswordService.java,"User findUser(String username, String email)
	{
		User user = null;

		if (!StringUtils.isEmpty(username)) {
			user = this.userRepository.getByUsername(username);
		}
		else if (!StringUtils.isEmpty(email)) {
			user = this.userRepository.getByEmail(email);
		}

		if (user == null) {
			return null;
		}

		return user;
	}
"
net.jforum.services.MostUsersEverOnlineService.getMostRecentData,MostUsersEverOnlineService.java,"MostUsersEverOnline getMostRecentData(int totalCurrentUsers) {
		Config config = this.repository.getByName(ConfigKeys.MOST_USERS_EVER_ONLINE);

		if (config == null) {
			MostUsersEverOnline most = new MostUsersEverOnline();
			most.setDate(new Date());
			most.setTotal(totalCurrentUsers);

			config = new Config();
			config.setName(ConfigKeys.MOST_USERS_EVER_ONLINE);
			config.setValue(most.getDate().getTime() + ""/"" + most.getTotal());

			this.repository.add(config);

			return most;

		}
		else {
			String[] p = config.getValue().split(""/"");
			MostUsersEverOnline most = new MostUsersEverOnline();

			int total = p.length == 2 ? Integer.parseInt(p[1]) : 0;

			if (totalCurrentUsers > total) {
				most.setDate(new Date());
				most.setTotal(totalCurrentUsers);

				config.setValue(most.getDate().getTime() + ""/"" + most.getTotal());

				this.repository.update(config);

				return most;
			}
			else {
				most.setDate(new Date(Long.parseLong(p[0])));
				most.setTotal(Integer.parseInt(p[1]));

				return most;
			}
		}
	}
"
net.jforum.services.RSSService.forForum,RSSService.java,"String forForum(int forumId) {
		Forum forum = this.forumRepository.get(forumId);

		List<Topic> topics = this.rssRepository.getForumTopics(forum,
			this.config.getInt(ConfigKeys.TOPICS_PER_PAGE));

		ChannelFeed feed = new ChannelFeed()
			.setTitle(this.i18n.getFormattedMessage(""RSS.ForumTopics.title"", this.i18n.params(forum.getName())))
			.addLink(this.buildForumLink(forum))
			.setDescriptionOrSubtitle(forum.getDescription());

		for (Topic topic : topics) {
			String topicLink = this.buildTopicLink(topic);

			feed.addItem(new ItemEntry()
				.addLink(topicLink)
				.setUid(topicLink)
				.setTitle(topic.getSubject())
				.setPubDate(this.formatDate(topic.getDate()))
				.setDescriptionOrSummary(topic.getLastPost().getText())); // TODO: do some formatting
		}

		return this.generateRSS(feed);
	}
"
net.jforum.services.RSSService.generateRSS,RSSService.java,"String generateRSS(ChannelFeed feed) {
		ByteArrayOutputStream os = new ByteArrayOutputStream();

		try {
			FeedWriter.writeChannel(FeedFormat.RSS20, feed, os);
		}
		catch (YarfrawException e) {
			throw new ForumException(e);
		}

		return os.toString();
	}
"
net.jforum.services.RSSService.buildForumLink,RSSService.java,"String buildForumLink(Forum forum) {
		return new StringBuilder().append(this.config.getString(ConfigKeys.FORUM_LINK))
			.append(Domain.FORUMS).append('/').append(Actions.SHOW)
			.append('/').append(forum.getId()).append(this.config.getValue(ConfigKeys.SERVLET_EXTENSION))
			.toString();
	}
"
net.jforum.services.RSSService.buildTopicLink,RSSService.java,"String buildTopicLink(Topic topic) {
		return new StringBuilder().append(this.config.getString(ConfigKeys.FORUM_LINK))
			.append(Domain.TOPICS).append('/').append(Actions.PRE_LIST)
			.append('/').append(topic.getId()).append('/').append(topic.getLastPost().getId())
			.append(this.config.getValue(ConfigKeys.SERVLET_EXTENSION))
			.toString();
	}
"
net.jforum.services.RSSService.formatDate,RSSService.java,"String formatDate(Date date) {
		SimpleDateFormat df = new SimpleDateFormat(this.config.getValue(
			ConfigKeys.RSS_DATE_TIME_FORMAT), Locale.ENGLISH);
		return df.format(date);
	}
"
net.jforum.services.AvatarService.getAvatarGallery,AvatarService.java,"List<Avatar> getAvatarGallery() {
		boolean allowGallery = this.config.getBoolean(ConfigKeys.AVATAR_ALLOW_GALLERY);

		if (allowGallery) {
			return this.repository.getGalleryAvatar();
		}

		return new ArrayList<Avatar>();
	}
"
net.jforum.services.AvatarService.add,AvatarService.java,"void add(Avatar avatar, UploadedFile uploadedFile) {
		if (uploadedFile == null) {
			this.add(avatar);
			return;
		}

		this.isAllowed(avatar);

		if (avatar.getId() > 0) {
			throw new ValidationException(""Cannot add an existing (id > 0) avatar"");
		}

		String imgName = this.processImageUpload(avatar, uploadedFile);

		if (imgName != null) {
			this.repository.add(avatar);
		}
	}
"
net.jforum.services.AvatarService.add,AvatarService.java,"void add(Avatar avatar) {
		this.isAllowed(avatar);

		if (avatar.getId() > 0) {
			throw new ValidationException(""Cannot add an existing (id > 0) avatar"");
		}

		this.checkImageSize(avatar);
		this.repository.add(avatar);
	}
"
net.jforum.services.AvatarService.update,AvatarService.java,"void update(Avatar avatar, UploadedFile uploadedFile) {
		this.isAllowed(avatar);

		if (avatar.getId() == 0) {
			throw new ValidationException(""update() expects a avatar with an existing id"");
		}

		Avatar current = this.repository.get(avatar.getId());
		avatar.setAvatarType(current.getAvatarType());

		// upload the img and get the upload img info
		String imageDiskName = this.processImageUpload(avatar, uploadedFile);

		if (imageDiskName != null) {
			this.deleteImage(current);

			current.setFileName(imageDiskName);
			current.setHeight(avatar.getHeight());
			current.setWidth(avatar.getWidth());
		}

		this.repository.update(current);
	}
"
net.jforum.services.AvatarService.delete,AvatarService.java,"void delete(int... avatarId) {
		if (avatarId != null) {
			for (int id : avatarId) {
				Avatar avatar = this.repository.get(id);
				this.delete(avatar);
			}
		}
	}
"
net.jforum.services.AvatarService.delete,AvatarService.java,"void delete(Avatar avatar) {
		if (avatar != null) {
			this.repository.remove(avatar);
			this.deleteImage(avatar);
		}
	}
"
net.jforum.services.AvatarService.deleteImage,AvatarService.java,"void deleteImage(Avatar avatar) {
		File img = this.getAvatarImageFile(avatar);

		if (img != null) {
			img.delete();
		}
	}
"
net.jforum.services.AvatarService.getAvatarPathConfigKey,AvatarService.java,"String getAvatarPathConfigKey(Avatar avatar) {
		String avatarConfigKey = null;

		if (avatar == null) {
			return avatarConfigKey;
		}

		if (avatar.getAvatarType() == AvatarType.AVATAR_UPLOAD) {
			avatarConfigKey = ConfigKeys.AVATAR_UPLOAD_DIR;
		}
		else if (avatar.getAvatarType() == AvatarType.AVATAR_GALLERY) {
			avatarConfigKey = ConfigKeys.AVATAR_GALLERY_DIR;
		}

		return avatarConfigKey;
	}
"
net.jforum.services.AvatarService.isAllowed,AvatarService.java,"void isAllowed(Avatar avatar) {
		this.applyCommonConstraints(avatar);

		boolean allowGallery = this.config.getBoolean(ConfigKeys.AVATAR_ALLOW_GALLERY);
		boolean allowUpload = this.config.getBoolean(ConfigKeys.AVATAR_ALLOW_UPLOAD);

		if (avatar.getAvatarType() == AvatarType.AVATAR_UPLOAD && !allowUpload
				|| avatar.getAvatarType() == AvatarType.AVATAR_GALLERY && !allowGallery) {
			throw new ValidationException(avatar.getAvatarType() + ""is not allowed!"");
		}
	}
"
net.jforum.services.AvatarService.processImageUpload,AvatarService.java,"String processImageUpload(Avatar avatar, UploadedFile uploadedFile) {
		File file = this.saveImage(avatar, uploadedFile);

		if (file == null) {
			return null;
		}

		avatar.setFileName(file.getName());

		try {
			long size = file.length();
			long maxSize = this.config.getLong(ConfigKeys.AVATAR_MAX_SIZE);

			if (size > maxSize) {
				throw new ValidationException(""File size too big"");
			}

			ImageInfo ii = new ImageInfo();

			try {
				ii.setInput(new FileInputStream(file));
			}
			catch (FileNotFoundException e) {
				throw new ForumException(e);
			}

			if (!ii.check()) {
				throw new ValidationException(""Not a supported image file format."");
			}

			avatar.setHeight(ii.getHeight());
			avatar.setWidth(ii.getWidth());

			// check the image size
			this.checkImageSize(avatar);
		}
		catch (ValidationException e) {
			file.delete();
			throw e;
		}

		return file.getName();
	}
"
net.jforum.services.AvatarService.saveImage,AvatarService.java,"File saveImage(Avatar avatar, UploadedFile uploadedFile) {
		String configKey = getAvatarPathConfigKey(avatar);

		if (configKey != null && uploadedFile != null) {
			UploadUtils upload = new UploadUtils(uploadedFile);

			String imageName = String.format(""%s.%s"", MD5.hash(uploadedFile.getFileName() + System.currentTimeMillis()),
				upload.getExtension());

			String filePath = String.format(""%s/%s/%s"", this.config.getApplicationPath(), this.config.getValue(configKey), imageName);

			upload.saveUploadedFile(filePath);

			return new File(filePath);
		}

		return null;
	}
"
net.jforum.services.AvatarService.checkImageSize,AvatarService.java,"void checkImageSize(Avatar avatar) {
		int maxWidth = this.config.getInt(ConfigKeys.AVATAR_MAX_WIDTH);
		int maxHeight = this.config.getInt(ConfigKeys.AVATAR_MAX_HEIGHT);
		int minWidth = this.config.getInt(ConfigKeys.AVATAR_MIN_WIDTH);
		int minHeight = this.config.getInt(ConfigKeys.AVATAR_MIN_HEIGHT);

		int height = avatar.getHeight();
		int width = avatar.getWidth();

		if (height < minHeight || height > maxHeight || width < minWidth || width > maxWidth) {
			throw new ValidationException(""This image size is not allowed!"");
		}
	}
"
net.jforum.services.AvatarService.getAvatarImageFile,AvatarService.java,"File getAvatarImageFile(Avatar avatar) {
		String avatarConfigKey = getAvatarPathConfigKey(avatar);

		if (avatarConfigKey == null) {
			return null;
		}
		else {
			String imageName = avatar.getFileName();
			String imageFilePath = String.format(""%s/%s/%s"", this.config.getApplicationPath(),
				this.config.getValue(avatarConfigKey), imageName);

			return new File(imageFilePath);
		}

	}
"
net.jforum.services.AvatarService.applyCommonConstraints,AvatarService.java,"void applyCommonConstraints(Avatar avatar) {
		if (avatar == null) {
			throw new NullPointerException(""Cannot savel a null avatar"");
		}
	}
"
net.jforum.services.ModerationService.moveTopics,ModerationService.java,"void moveTopics(int toForumId, ModerationLog moderationLog, int... topicIds) {
		if (ArrayUtils.isEmpty(topicIds)) {
			return;
		}

		Forum newForum = this.forumRepository.get(toForumId);
		Forum oldForum = this.topicRepository.get(topicIds[0]).getForum();

		this.forumRepository.moveTopics(newForum, topicIds);

		newForum.setLastPost(this.forumRepository.getLastPost(newForum));
		oldForum.setLastPost(this.forumRepository.getLastPost(oldForum));

		this.moderationLogService.registerMovedTopics(moderationLog, topicIds);
	}
"
net.jforum.services.ModerationService.lockUnlock,ModerationService.java,"void lockUnlock(int[] topicIds, ModerationLog moderationLog) {
		if (ArrayUtils.isEmpty(topicIds)) {
			return;
		}

		for (int topicId : topicIds) {
			Topic topic = this.topicRepository.get(topicId);

			if (topic.isLocked()) {
				topic.unlock();
			}
			else {
				topic.lock();
			}
		}

		this.moderationLogService.registerLockedTopics(moderationLog, topicIds);
	}
"
net.jforum.services.ModerationService.deleteTopics,ModerationService.java,"void deleteTopics(List<Topic> topics, ModerationLog moderationLog) {
		List<Topic> topicsForModeration = new ArrayList<Topic>();

		for (Topic topic : topics) {
			topicsForModeration.add(this.topicRepository.get(topic.getId()));
			this.topicRepository.remove(topic);
		}

		this.moderationLogService.registerDeleteTopics(topicsForModeration, moderationLog);
	}
"
net.jforum.services.ModerationService.doApproval,ModerationService.java,"void doApproval(int forumId, List<ApproveInfo> infos) {
		if (infos == null || infos.size() == 0) {
			return;
		}

		for (ApproveInfo info : infos) {
			if (!info.defer()) {
				Post post = this.postRepository.get(info.getPostId());

				if (post != null) {
					if (info.approve()) {
						this.approvePost(post);
					}
					else if (info.reject()) {
						this.denyPost(post);
					}
				}
			}
		}

		Forum forum = this.forumRepository.get(forumId);
		forum.setLastPost(this.forumRepository.getLastPost(forum));
	}
"
net.jforum.services.ModerationService.denyPost,ModerationService.java,"void denyPost(Post post) {
		this.postRepository.remove(post);
	}
"
net.jforum.services.ModerationService.approvePost,ModerationService.java,"void approvePost(Post post) {
		Topic topic = post.getTopic();

		if (topic.isWaitingModeration()) {
			topic.setPendingModeration(false);
		}
		else {
			topic.incrementTotalReplies();
		}

		post.setModerate(false);
		post.getUser().incrementTotalPosts();
		topic.setLastPost(this.topicRepository.getLastPost(topic));
	}
"
net.jforum.services.AttachmentService.getAttachmentForDownload,AttachmentService.java,"Attachment getAttachmentForDownload(int attachmentId) {
		Attachment attachment = this.repository.get(attachmentId);
		attachment.incrementDownloadCount();
		return attachment;
	}
"
net.jforum.services.AttachmentService.processNewAttachments,AttachmentService.java,"List<AttachedFile> processNewAttachments(HttpServletRequest request) {
		String t = request.getParameter(""total_attachments"");
		List<AttachedFile> attachedFiles = new ArrayList<AttachedFile>();

		if (StringUtils.isEmpty(t)) {
			return attachedFiles;
		}

		int total = Integer.parseInt(t);

		if (total < 1) {
			return attachedFiles;
		}

		long totalSize = 0;

		for (int i = 0; i < total; i++) {
			UploadedFile fileInfo = (UploadedFile) request.getAttribute(""attachment_"" + i);

			if (fileInfo == null) {
				continue;
			}

			if (fileInfo.getFileName().indexOf('\000') > -1) {
				logger.warn(""Possible bad attachment (null char): "" + fileInfo.getFileName());
				continue;
			}

			UploadUtils uploadUtils = new UploadUtils(fileInfo);
			String description = request.getParameter(""attachment_description_"" + i);

			Attachment attachment = new Attachment();
			try {
				attachment.setFilesize(fileInfo.getFile().available());
			} catch (IOException e) {
				throw new ForumException(e);
			}
			attachment.setDescription(description);
			attachment.setMimetype(fileInfo.getContentType());

			// Get only the filename, without the path (IE does that)
			String realName = this.stripPath(fileInfo.getFileName());

			attachment.setRealFilename(realName);
			attachment.setUploadDate(new Date());

			attachment.setFileExtension(uploadUtils.getExtension());

			String savePath = this.buildStoreFilename(attachment);
			attachment.setPhysicalFilename(savePath);

			attachedFiles.add(new AttachedFile(attachment, uploadUtils));
			totalSize += attachment.getFilesize();
		}

		return attachedFiles;
	}
"
net.jforum.services.AttachmentService.stripPath,AttachmentService.java,"String stripPath(String realName) {
		String separator = ""/"";
		int index = realName.lastIndexOf(separator);

		if (index == -1) {
			separator = ""\\"";
			index = realName.lastIndexOf(separator);
		}

		if (index > -1) {
			realName = realName.substring(index + 1);
		}

		return realName;
	}
"
net.jforum.services.AttachmentService.insertAttachments,AttachmentService.java,"void insertAttachments(List<AttachedFile> attachedFiles, Post post) {
		if (attachedFiles.size() > 0) {
			post.setHasAttachments(true);

			for (AttachedFile attachedFile : attachedFiles) {
				String path = this.config.getValue(ConfigKeys.ATTACHMENTS_STORE_DIR)
					+ ""/"" + attachedFile.getAttachment().getPhysicalFilename();

				attachedFile.getUploadUtils().saveUploadedFile(path);

				if (this.shouldCreateThumb(attachedFile.getAttachment())) {
					attachedFile.getAttachment().setHasThumb(true);
					this.createSaveThumb(path);
				}

				post.addAttachment(attachedFile.getAttachment());
			}
		}
	}
"
net.jforum.services.AttachmentService.shouldCreateThumb,AttachmentService.java,"boolean shouldCreateThumb(Attachment attachment) {
		String extension = attachment.getFileExtension();

		return this.config.getBoolean(ConfigKeys.ATTACHMENTS_IMAGES_CREATE_THUMB)
			&& (""jpg"".equals(extension) || ""jpeg"".equals(extension) || ""gif"".equals(extension) || ""png"".equals(extension));
	}
"
net.jforum.services.AttachmentService.createSaveThumb,AttachmentService.java,"void createSaveThumb(String path) {
		try {
			BufferedImage image = ImageUtils.resizeImage(path, ImageUtils.IMAGE_JPEG,
				this.config.getInt(ConfigKeys.ATTACHMENTS_IMAGES_MAX_THUMB_W), this.config.getInt(ConfigKeys.ATTACHMENTS_IMAGES_MAX_THUMB_H));
			ImageUtils.saveImage(image, path + ""_thumb"", ImageUtils.IMAGE_JPEG);
		}
		catch (Exception e) {
			logger.error(e.toString(), e);
		}
	}
"
net.jforum.services.AttachmentService.editAttachments,AttachmentService.java,"void editAttachments(Post post, HttpServletRequest request) {
		// Check for attachments to remove
		List<String> deleteList = new ArrayList<String>();
		String[] delete = null;
		String s = request.getParameter(""delete_attach"");

		if (!StringUtils.isEmpty(s)) {
			delete = s.split("","");
		}

		if (!ArrayUtils.isEmpty(delete)) {
			for (String deleteId : delete) {
				if (!StringUtils.isEmpty(deleteId)) {
					int attachmentId = Integer.parseInt(deleteId);

					Attachment attachment = this.repository.get(attachmentId);
					post.getAttachments().remove(attachment);

					this.removeAttachmentFiles(attachment);
				}
			}

			deleteList = Arrays.asList(delete);
		}

		// Update
		String[] attachIds = null;
		s = request.getParameter(""edit_attach_ids"");
		if (!StringUtils.isEmpty(s)) {
			attachIds = s.split("","");
		}

		if (!ArrayUtils.isEmpty(attachIds)) {
			for (String x : attachIds) {
				if (deleteList.contains(x) || StringUtils.isEmpty(x)) {
					continue;
				}

				int attachmentId = Integer.parseInt(x);

				Attachment attachment = this.repository.get(attachmentId);
				attachment.setDescription(request.getParameter(""edit_description_"" + attachmentId));
			}
		}
	}
"
net.jforum.services.AttachmentService.deleteAllAttachments,AttachmentService.java,"void deleteAllAttachments(Post post) {
		for (Attachment attachment : post.getAttachments()) {
			this.removeAttachmentFiles(attachment);
		}
	}
"
net.jforum.services.AttachmentService.removeAttachmentFiles,AttachmentService.java,"void removeAttachmentFiles(Attachment attachment) {
		String filename = this.buildDownloadPath(attachment);

		File f = new File(filename);

		if (f.exists()) {
			f.delete();
		}

		// Check if we have a thumb to delete
		f = new File(filename + ""_thumb"");

		if (f.exists()) {
			f.delete();
		}
	}
"
net.jforum.services.AttachmentService.buildStoreFilename,AttachmentService.java,"String buildStoreFilename(Attachment attachment) {
		int year = Calendar.getInstance().get(Calendar.YEAR);
		int month = Calendar.getInstance().get(Calendar.MONTH) + 1;
		int day = Calendar.getInstance().get(Calendar.DAY_OF_MONTH);

		StringBuilder dir = new StringBuilder(256);
		dir.append(year).append('/').append(month).append('/').append(day).append('/');

		new File(this.config.getValue(ConfigKeys.ATTACHMENTS_STORE_DIR) + ""/"" + dir).mkdirs();

		return dir.append(MD5.hash(attachment.getRealFilename() + System.currentTimeMillis()))
			.append('.').append(attachment.getFileExtension())
			.toString();
	}
"
net.jforum.services.AttachmentService.buildDownloadPath,AttachmentService.java,"String buildDownloadPath(Attachment attachment) {
		return String.format(""%s/%s"", this.config.getValue(ConfigKeys.ATTACHMENTS_STORE_DIR), attachment.getPhysicalFilename());
	}
"
net.jforum.services.MessageFormatService.getFormatters,MessageFormatService.java,"PostFormatters getFormatters() {
		return formatters;
	}
"
net.jforum.services.MessageFormatService.setFormatters,MessageFormatService.java,"void setFormatters(PostFormatters formatters) {
		this.formatters = formatters;
	}
"
net.jforum.services.MessageFormatService.format,MessageFormatService.java,"String format(String text,PostOptions options){
		for (Formatter formatter : formatters) {
			text = formatter.format(text, options);
		}
		return text;
	}
"
net.jforum.services.TopicService.addTopic,TopicService.java,"void addTopic(Topic topic, List<PollOption> pollOptions, List<AttachedFile> attachments) {
		this.performAddValidations(topic);

		if (topic.getDate() == null) {
			topic.setDate(new Date());
		}

		Post post = topic.getFirstPost();
		topic.setFirstPost(null);

		this.pollService.associatePoll(topic, pollOptions);

		topic.setHasAttachment(attachments.size() > 0);
		this.topicRepository.add(topic);

		post.setForum(topic.getForum());
		post.setTopic(topic);
		post.setDate(topic.getDate());
		post.setUser(topic.getUser());
		post.setSubject(topic.getSubject());

		this.attachmentService.insertAttachments(attachments, post);
		this.postRepository.add(post);

		topic.setFirstPost(post);
		topic.setLastPost(post);

		if (!topic.isWaitingModeration()) {
			Forum forum = this.forumRepository.get(topic.getForum().getId());
			forum.setLastPost(post);

			int userTotalPosts = this.userRepository.getTotalPosts(post.getUser());
			topic.getUser().setTotalPosts(userTotalPosts);
		}
	}
"
net.jforum.services.TopicService.reply,TopicService.java,"void reply(Topic topic, Post post, List<AttachedFile> attachments) {
		Topic current = this.topicRepository.get(topic.getId());

		if (StringUtils.isEmpty(post.getSubject())) {
			post.setSubject(current.getSubject());
		}

		this.performReplyValidations(post);
		this.attachmentService.insertAttachments(attachments, post);

		if (attachments.size() > 0) {
			current.setHasAttachment(true);
		}

		topic.setForum(current.getForum());

		post.setTopic(current);
		post.setDate(new Date());
		post.setForum(current.getForum());

		this.postRepository.add(post);

		if (!post.isWaitingModeration()) {
			current.setLastPost(post);
			current.getForum().setLastPost(post);
			current.incrementTotalReplies();
			post.getUser().incrementTotalPosts();
		}
	}
"
net.jforum.services.TopicService.performReplyValidations,TopicService.java,"void performReplyValidations(Post post) {
		this.performCommonPostValidations(post);
	}
"
net.jforum.services.TopicService.performAddValidations,TopicService.java,"void performAddValidations(Topic topic) {
		if (topic.getUser() == null) {
			throw new IllegalStateException(""Cannot save a topic without an user"");
		}

		if (StringUtils.isEmpty(topic.getSubject())) {
			throw new IllegalStateException(""Cannot save a topic without a subject"");
		}

		if (topic.getForum().getId() == 0) {
			throw new IllegalStateException(""Cannot save a Topic without a forum"");
		}

		this.performCommonPostValidations(topic.getFirstPost());
	}
"
net.jforum.services.TopicService.performCommonPostValidations,TopicService.java,"void performCommonPostValidations(Post post) {
		if (StringUtils.isEmpty(post.getSubject())) {
			throw new IllegalStateException(""Cannot save a post without a subject"");
		}

		if (StringUtils.isEmpty(post.getText())) {
			throw new IllegalStateException(""Cannot save a post without a message"");
		}
	}
"
net.jforum.services.GroupService.savePermissions,GroupService.java,"void savePermissions(int groupId, Map<String, Map<String, List<?>>> map) {
		Group group = this.repository.get(groupId);

		RoleManager currentRoles = new RoleManager();
		currentRoles.setGroups(Arrays.asList(group));

		group.getRoles().clear();

		boolean isAdministrator = currentRoles.isAdministrator();
		boolean canManageForums = currentRoles.roleExists(SecurityConstants.CAN_MANAGE_FORUMS);
		boolean isCoAdministrator = currentRoles.isCoAdministrator();

		List<Integer> groups = new ArrayList<Integer>();
		for (int gid : currentRoles.getRoleValues(SecurityConstants.GROUPS)) {
			groups.add(gid);
		}

		boolean canInteractwithOtherGroups = currentRoles.roleExists(SecurityConstants.INTERACT_OTHER_GROUPS);
		boolean isSuperAdministrator = this.userSession.getRoleManager().isAdministrator();

		for (Map.Entry<String, List<?>> entry : map.get(""boolean"").entrySet()) {
			String key = entry.getKey();
			Boolean value = (Boolean)entry.getValue().get(0);

			if (SecurityConstants.ADMINISTRATOR.equals(key)) {
				registerRole(group, key, isSuperAdministrator ? value : isAdministrator);
			}
			else if (SecurityConstants.CAN_MANAGE_FORUMS.equals(key)) {
				registerRole(group, key, isSuperAdministrator ? value : canManageForums);
			}
			else if (SecurityConstants.CO_ADMINISTRATOR.equals(key)) {
				registerRole(group, key, isSuperAdministrator ? value : isCoAdministrator);
			}
			else if (SecurityConstants.INTERACT_OTHER_GROUPS.equals(key)) {
				registerRole(group, key, isSuperAdministrator ? value : canInteractwithOtherGroups);
			}
			else {
				registerRole(group, key, (Boolean)entry.getValue().get(0));
			}
		}

		for (Map.Entry<String, List<?>> entry : map.get(""multiple"").entrySet()) {
			String key = entry.getKey();
			List<Integer> value = (List<Integer>) entry.getValue();

			if (SecurityConstants.GROUPS.equals(key)) {
				registerRole(group, key, isSuperAdministrator ? value : groups);
			}
			else {
				registerRole(group, key, value);
			}
		}

		this.repository.update(group);

		this.sessionManager.computeAllOnlineModerators();
		//this.userRepository.changeAllowAvatarState(map.getCanHaveProfilePicture(), group);
	}
"
net.jforum.services.GroupService.add,GroupService.java,"void add(Group group) {
		this.applyCommonConstraints(group);

		if (group.getId() > 0) {
			throw new ValidationException(""Cannot save an existing (id > 0) group"");
		}

		this.repository.add(group);
	}
"
net.jforum.services.GroupService.update,GroupService.java,"void update(Group group) {
		this.applyCommonConstraints(group);

		if (group.getId() == 0) {
			throw new ValidationException(""update() expects a group with an existing id"");
		}

		this.repository.update(group);
	}
"
net.jforum.services.GroupService.delete,GroupService.java,"void delete(int... ids) {
		if (ids != null) {
			// FIXME: Must not delete a group if it has users
			for (int groupId : ids) {
				Group group = this.repository.get(groupId);
				this.repository.remove(group);
			}
		}
	}
"
net.jforum.services.GroupService.appendRole,GroupService.java,"void appendRole(Group group, String roleName, int roleValue) {
		for (Role role : group.getRoles()) {
			if (role.getName().equals(roleName)) {
				role.getRoleValues().add(roleValue);
				break;
			}
		}

		this.repository.update(group);
	}
"
net.jforum.services.GroupService.applyCommonConstraints,GroupService.java,"void applyCommonConstraints(Group group) {
		if (group == null) {
			throw new NullPointerException(""Cannot save a null group"");
		}

		if (StringUtils.isEmpty(group.getName())) {
			throw new ValidationException(""A group should have a name"");
		}
	}
"
net.jforum.services.GroupService.registerRole,GroupService.java,"void registerRole(Group group, String name, List<Integer> values) {
		if (values.size() > 0) {
			group.addRole(this.createRole(name, values));
		}
	}
"
net.jforum.services.GroupService.registerRole,GroupService.java,"void registerRole(Group group, String name, boolean isAllowed) {
		if (isAllowed) {
			group.addRole(this.createRole(name, null));
		}
	}
"
net.jforum.services.GroupService.createRole,GroupService.java,"Role createRole(String name, List<Integer> values) {
		Role role = new Role();
		role.setName(name);

		if (values != null) {
			for (int value : values) {
				role.addRoleValue(value);
			}
		}

		return role;
	}
"
net.jforum.services.RankingService.add,RankingService.java,"void add(Ranking ranking) {
		this.applySaveConstraints(ranking);

		if (ranking.getId() > 0) {
			throw new ValidationException(""This appears to be an existing ranking (id > 0). Please use update() instead"");
		}

		this.normalizeRankingInstance(ranking);
		this.repository.add(ranking);
	}
"
net.jforum.services.RankingService.update,RankingService.java,"void update(Ranking ranking) {
		this.applySaveConstraints(ranking);

		if (ranking.getId() == 0) {
			throw new ValidationException(""update() expects a ranking with an existing id"");
		}

		this.normalizeRankingInstance(ranking);
		this.repository.update(ranking);
	}
"
net.jforum.services.RankingService.delete,RankingService.java,"void delete(int... ids) {
		if (ids != null) {
			for (int id : ids) {
				Ranking ranking = this.repository.get(id);
				this.repository.remove(ranking);
			}
		}
	}
"
net.jforum.services.RankingService.normalizeRankingInstance,RankingService.java,"void normalizeRankingInstance(Ranking ranking) {
		if (ranking.isSpecial()) {
			ranking.setMin(0);
		}
	}
"
net.jforum.services.RankingService.applySaveConstraints,RankingService.java,"void applySaveConstraints(Ranking ranking) {
		if (ranking == null) {
			throw new NullPointerException(""Ranking to save cannot be null"");
		}

		if (StringUtils.isEmpty(ranking.getTitle())) {
			throw new ValidationException(""The ranking should have a name"");
		}

		if (!ranking.isSpecial() && ranking.getMin() < 1) {
			throw new ValidationException(""The minimum number of messages should be bigger than zero"");
		}
	}
"
net.jforum.services.PrivateMessageService.delete,PrivateMessageService.java,"void delete(User owner, int... ids) {
		if (ids == null || ids.length == 0) {
			return;
		}

		for (int id : ids) {
			PrivateMessage pm = this.repository.get(id);

			if (this.canDeleteMessage(owner, pm)) {
				this.repository.remove(pm);
			}
		}
	}
"
net.jforum.services.PrivateMessageService.canDeleteMessage,PrivateMessageService.java,"boolean canDeleteMessage(User owner, PrivateMessage pm) {
		return (pm.getToUser().equals(owner) && pm.getType() != PrivateMessageType.SENT)
			|| (pm.getFromUser().equals(owner) && pm.getType() == PrivateMessageType.SENT);
	}
"
net.jforum.services.PrivateMessageService.send,PrivateMessageService.java,"void send(PrivateMessage pm) {
		this.applySendConstraints(pm);

		if (pm.getDate() == null) {
			pm.setDate(new Date());
		}

		this.repository.add(pm);
	}
"
net.jforum.services.PrivateMessageService.applySendConstraints,PrivateMessageService.java,"void applySendConstraints(PrivateMessage pm) {
		if (pm.getFromUser() == null) {
			throw new ValidationException(""The sender was not specified"");
		}

		if (pm.getToUser() == null) {
			throw new ValidationException(""The recipient was not specified"");
		}

		if (StringUtils.isEmpty(pm.getSubject())) {
			throw new ValidationException(""The subject was not specified"");
		}

		if (StringUtils.isEmpty(pm.getText())) {
			throw new ValidationException(""The text was not specified"");
		}
	}
"
net.jforum.services.TopicWatchService.getSubscription,TopicWatchService.java,"TopicWatch getSubscription(Topic topic, User user) {
		return this.repository.getSubscription(topic, user);
	}
"
net.jforum.services.TopicWatchService.watch,TopicWatchService.java,"void watch(Topic topic, User user) {
		TopicWatch watch = this.repository.getSubscription(topic, user);

		if (watch == null) {
			watch = new TopicWatch();
			watch.markAsRead();
			watch.setTopic(topic);
			watch.setUser(user);

			this.repository.add(watch);
		}
	}
"
net.jforum.services.TopicWatchService.unwatch,TopicWatchService.java,"void unwatch(Topic topic, User user) {
		this.repository.removeSubscription(topic, user);
	}
"
net.jforum.services.ConfigService.save,ConfigService.java,"void save(HttpServletRequest request) {
		for (Enumeration<?> e = request.getParameterNames(); e.hasMoreElements();) {
			String key = (String) e.nextElement();

			if (key.startsWith(""p_"")) {
				String value = request.getParameter(key);

				String name = key.substring(key.indexOf('_') + 1);
				Config entry = this.repository.getByName(name);

				if (entry == null) {
					entry = new Config();
					entry.setName(name);
				}

				entry.setValue(value);

				this.config.clearProperty(name);
				this.config.setProperty(name, value);

				this.repository.update(entry);
			}
		}

		this.i18n.changeBoardDefaultLanguage(this.config.getValue(ConfigKeys.I18N_DEFAULT));
	}
"
net.jforum.services.ForumService.add,ForumService.java,"void add(Forum forum) {
		this.applyCommonConstraints(forum);

		if (forum.getId() > 0) {
			throw new ValidationException(""This appears to be an existing forum (id > 0). Please use update() instead."");
		}

		this.repository.add(forum);
	}
"
net.jforum.services.ForumService.update,ForumService.java,"void update(Forum forum) {
		this.applyCommonConstraints(forum);

		if (forum.getId() == 0) {
			throw new ValidationException(""update() expects a forum with an existing id"");
		}

		Forum currentForum = this.repository.get(forum.getId());

		currentForum.setName(forum.getName());
		currentForum.setDescription(forum.getDescription());
		currentForum.setModerated(forum.isModerated());
		currentForum.setAllowAnonymousPosts(forum.isAllowAnonymousPosts());
		currentForum.setCategory(forum.getCategory());

		this.repository.update(currentForum);
	}
"
net.jforum.services.ForumService.delete,ForumService.java,"void delete(int... ids) {
		if (ids != null) {
			for (int id : ids) {
				Forum forum = this.repository.get(id);

				this.repository.remove(forum);
			}
		}
	}
"
net.jforum.services.ForumService.upForumOrder,ForumService.java,"void upForumOrder(int forumId) {
		this.processOrdering(true, forumId);
	}
"
net.jforum.services.ForumService.downForumOrder,ForumService.java,"void downForumOrder(int forumId) {
		this.processOrdering(false, forumId);
	}
"
net.jforum.services.ForumService.processOrdering,ForumService.java,"void processOrdering(boolean up, int forumId) {
		Forum toChange = this.repository.get(forumId);
		List<Forum> forums = toChange.getCategory().getForums();

		int index = forums.indexOf(toChange);

		if (index > -1 && (up && index > 0) || (!up && index + 1 < forums.size())) {
			Forum otherForum = up ? forums.get(index - 1) : forums.get(index + 1);

			int oldOrder = toChange.getDisplayOrder();

			toChange.setDisplayOrder(otherForum.getDisplayOrder());
			otherForum.setDisplayOrder(oldOrder);

			this.repository.update(toChange);
			this.repository.update(otherForum);
		}
	}
"
net.jforum.services.ForumService.applyCommonConstraints,ForumService.java,"void applyCommonConstraints(Forum forum) {
		if (forum == null) {
			throw new NullPointerException(""Cannot save a null forum"");
		}

		if (forum.getCategory() == null || forum.getCategory().getId() == 0) {
			throw new ValidationException(""A forum must be associated to a category"");
		}

		if (StringUtils.isEmpty(forum.getName())) {
			throw new ValidationException(""A forum must have a name"");
		}
	}
"
net.jforum.services.ModerationLogService.registerPostEdit,ModerationLogService.java,"void registerPostEdit(ModerationLog log, Post post, String originalPostMessage) {
		if (this.isLoggingEnabled(log)) {
			log.setDate(new Date());
			log.setOriginalMessage(originalPostMessage);
			log.setPosterUser(post.getUser());
			log.setPostId(post.getId());
			log.setTopicId(post.getTopic().getId());

			this.repository.add(log);
		}
	}
"
net.jforum.services.ModerationLogService.registerMovedTopics,ModerationLogService.java,"void registerMovedTopics(ModerationLog log, int... topicIds) {
		if (this.isLoggingEnabled(log)) {
			for (int topicId : topicIds) {
				ModerationLog ml = this.createModerationLog(log.getType(), log.getUser(), log.getDescription(),
					this.topicRepository.get(topicId).getUser());

				ml.setTopicId(topicId);

				this.repository.add(ml);
			}
		}
	}
"
net.jforum.services.ModerationLogService.registerLockedTopics,ModerationLogService.java,"void registerLockedTopics(ModerationLog log, int[] topicIds) {
		if (this.isLoggingEnabled(log)) {
			for (int topicId : topicIds) {
				ModerationLog ml = this.createModerationLog(log.getType(), log.getUser(), log.getDescription(),
					this.topicRepository.get(topicId).getUser());

				ml.setTopicId(topicId);

				this.repository.add(ml);
			}
		}
	}
"
net.jforum.services.ModerationLogService.registerDeleteTopics,ModerationLogService.java,"void registerDeleteTopics(List<Topic> topics, ModerationLog log) {
		if (this.isLoggingEnabled(log)) {
			for (Topic topic : topics) {
				ModerationLog ml = this.createModerationLog(log.getType(), log.getUser(), log.getDescription(), topic.getUser());
				this.repository.add(ml);
			}
		}
	}
"
net.jforum.services.ModerationLogService.createModerationLog,ModerationLogService.java,"ModerationLog createModerationLog(int type, User user, String description, User posterUser) {
		ModerationLog ml = new ModerationLog();

		ml.setDate(new Date());
		ml.setType(type);
		ml.setUser(user);
		ml.setDescription(description);
		ml.setPosterUser(posterUser);

		return ml;
	}
"
net.jforum.services.ModerationLogService.isLoggingEnabled,ModerationLogService.java,"boolean isLoggingEnabled(ModerationLog log) {
		return log != null && this.config.getBoolean(ConfigKeys.MODERATION_LOGGING_ENABLED);
	}
"
net.jforum.services.CategoryService.add,CategoryService.java,"void add(Category category) {
		this.applyCommonConstraints(category);

		if (category.getId() > 0) {
			throw new ValidationException(""This appears to be an existing category (id > 0). Please use update() instead"");
		}

		this.repository.add(category);
	}
"
net.jforum.services.CategoryService.delete,CategoryService.java,"void delete(int... ids) {
		if (ids != null) {
			for (int id : ids) {
				Category c = this.repository.get(id);
				this.repository.remove(c);
			}
		}
	}
"
net.jforum.services.CategoryService.update,CategoryService.java,"void update(Category category) {
		this.applyCommonConstraints(category);

		if (category.getId() == 0) {
			throw new ValidationException(""update() expects a category with an existing id"");
		}

		this.repository.update(category);
	}
"
net.jforum.services.CategoryService.upCategoryOrder,CategoryService.java,"void upCategoryOrder(int categoryId) {
		this.processOrdering(true, categoryId);
	}
"
net.jforum.services.CategoryService.downCategoryOrder,CategoryService.java,"void downCategoryOrder(int categoryId) {
		this.processOrdering(false, categoryId);
	}
"
net.jforum.services.CategoryService.processOrdering,CategoryService.java,"void processOrdering(boolean up, int categoryId) {
		Category toChange = this.repository.get(categoryId);
		List<Category> categories = this.repository.getAllCategories();

		int index = categories.indexOf(toChange);

		if (index > -1 && (up && index > 0) || (!up && index + 1 < categories.size())) {
			Category otherCategory = up ? categories.get(index - 1) : categories.get(index + 1);

			int oldOrder = toChange.getDisplayOrder();

			toChange.setDisplayOrder(otherCategory.getDisplayOrder());
			otherCategory.setDisplayOrder(oldOrder);

			this.repository.update(toChange);
			this.repository.update(otherCategory);
		}
	}
"
net.jforum.services.CategoryService.applyCommonConstraints,CategoryService.java,"void applyCommonConstraints(Category c) {
		if (c == null) {
			throw new NullPointerException(""Cannot save a null category"");
		}

		if (StringUtils.isEmpty(c.getName())) {
			throw new ValidationException(""Category name cannot be blank or null"");
		}
	}
"
net.jforum.services.SmilieService.add,SmilieService.java,"void add(Smilie smilie, UploadedFile uploadedFile) {
		this.applyCommonConstraints(smilie);

		if (smilie.getId() > 0) {
			throw new ValidationException(
					""Cannot add an existing (id > 0) smilie"");
		}

		String imageDiskName = this.saveImage(uploadedFile);

		if (imageDiskName == null) {
			throw new NullPointerException(
					""Could not find the smile file to save"");
		}

		smilie.setDiskName(imageDiskName);

		this.repository.add(smilie);
	}
"
net.jforum.services.SmilieService.update,SmilieService.java,"void update(Smilie smilie, UploadedFile uploadedFile) {
		this.applyCommonConstraints(smilie);

		if (smilie.getId() == 0) {
			throw new ValidationException(
					""update() expects a smilie with an existing id"");
		}

		String imageDiskName = this.saveImage(uploadedFile);

		Smilie current = this.repository.get(smilie.getId());
		current.setCode(smilie.getCode());

		if (imageDiskName != null) {
			this.deleteImage(current);
			current.setDiskName(imageDiskName);
		}

		this.repository.update(current);
	}
"
net.jforum.services.SmilieService.delete,SmilieService.java,"void delete(int... smiliesId) {
		if (smiliesId != null) {
			for (int id : smiliesId) {
				Smilie s = this.repository.get(id);
				this.repository.remove(s);

				this.deleteImage(s);
			}
		}
	}
"
net.jforum.services.SmilieService.deleteImage,SmilieService.java,"void deleteImage(Smilie smilie) {
		String filename = String.format(""%s/%s/%s"",
				this.config.getApplicationPath(),
				this.config.getValue(ConfigKeys.SMILIE_IMAGE_DIR),
				smilie.getDiskName());

		new File(filename).delete();
	}
"
net.jforum.services.SmilieService.saveImage,SmilieService.java,"String saveImage(UploadedFile uploadedFile) {
		if (uploadedFile != null) {
			UploadUtils upload = new UploadUtils(uploadedFile);

			String imageName = String.format(
					""%s.%s"",
					MD5.hash(uploadedFile.getFileName()
							+ System.currentTimeMillis()),
					upload.getExtension());

			upload.saveUploadedFile(String.format(""%s/%s/%s"",
					this.config.getApplicationPath(),
					this.config.getValue(ConfigKeys.SMILIE_IMAGE_DIR),
					imageName));

			return imageName;
		}

		return null;
	}
"
net.jforum.services.SmilieService.applyCommonConstraints,SmilieService.java,"void applyCommonConstraints(Smilie smilie) {
		if (smilie == null) {
			throw new NullPointerException(""Cannot save a null smilie"");
		}

		if (StringUtils.isEmpty(smilie.getCode())) {
			throw new ValidationException(""Smilie code cannot be empty"");
		}
	}
"
net.jforum.services.PostService.delete,PostService.java,"void delete(Post post) {
		this.attachmentService.deleteAllAttachments(post);
		this.postRepository.remove(post);
	}
"
net.jforum.services.PostService.update,PostService.java,"void update(Post post, boolean canChangeTopicType, List<PollOption> pollOptions,
			List<AttachedFile> attachments, ModerationLog moderationLog) {
		this.applySaveConstraints(post);

		Post currentPost = this.postRepository.get(post.getId());
		String originalPostMessage = currentPost.getText();

		currentPost.setSubject(post.getSubject());
		currentPost.setText(post.getText());
		currentPost.setEditDate(new Date());
		currentPost.incrementEditCount();

		this.copyFormattingOptions(post, currentPost);
		this.attachmentService.insertAttachments(attachments, currentPost);

		// TODO: Move to TopicPostEvent (?)
		Topic currentTopic = currentPost.getTopic();

		currentPost.setHasAttachments(currentPost.getAttachments().size() > 0);

		// FIXME: this will ovewrite the topic information about attachments
		currentTopic.setHasAttachment(currentPost.getHasAttachments());

		if (currentTopic.getFirstPost().equals(currentPost)) {
			currentTopic.setSubject(post.getSubject());

			if (canChangeTopicType) {
				currentTopic.setType(post.getTopic().getType());
			}

			if (!currentTopic.isPollEnabled()) {
				// Set a new poll
				currentTopic.setPoll(post.getTopic().getPoll());
				this.pollService.associatePoll(currentTopic, pollOptions);
			}
			else {
				// Update existing poll
				currentTopic.getPoll().setLabel(post.getTopic().getPoll().getLabel());
				currentTopic.getPoll().setLength(post.getTopic().getPoll().getLength());

				if (pollOptions != null && pollOptions.size() > 0) {
					this.pollService.processChanges(currentTopic.getPoll(), pollOptions);
				}
			}
		}

		this.postRepository.update(currentPost);
		this.topicRepository.update(currentTopic);

		this.moderationLogService.registerPostEdit(moderationLog, currentPost, originalPostMessage);
	}
"
net.jforum.services.PostService.copyFormattingOptions,PostService.java,"void copyFormattingOptions(Post from, Post to) {
		to.setBbCodeEnabled(from.isBbCodeEnabled());
		to.setHtmlEnabled(from.isHtmlEnabled());
		to.setSmiliesEnabled(from.isSmiliesEnabled());
		to.setSignatureEnabled(from.isSignatureEnabled());
	}
"
net.jforum.services.PostService.applySaveConstraints,PostService.java,"void applySaveConstraints(Post post) {
		if (post == null) {
			throw new NullPointerException(""Cannot update a null post"");
		}

		if (post.getId() == 0) {
			throw new IllegalStateException(""The post does not have an id"");
		}

		if (StringUtils.isEmpty(post.getSubject())) {
			throw new IllegalStateException(""The post should have a subject"");
		}

		if (StringUtils.isEmpty(post.getText())) {
			throw new IllegalStateException(""The post should have a message"");
		}
	}
"
net.jforum.entities.MostUsersEverOnline.getTotal,MostUsersEverOnline.java,"int getTotal() {
		return this.total;
	}
"
net.jforum.entities.MostUsersEverOnline.getDate,MostUsersEverOnline.java,"Date getDate() {
		return this.date;
	}
"
net.jforum.entities.MostUsersEverOnline.setTotal,MostUsersEverOnline.java,"void setTotal(int total) {
		this.total = total;
	}
"
net.jforum.entities.MostUsersEverOnline.setDate,MostUsersEverOnline.java,"void setDate(Date date) {
		this.date = date;
	}
"
net.jforum.entities.Post.shouldNotifyReplies,Post.java,"boolean shouldNotifyReplies() {
		return this.notifyReplies;
	}
"
net.jforum.entities.Post.setNotifyReplies,Post.java,"void setNotifyReplies(boolean notify) {
		this.notifyReplies = notify;
	}
"
net.jforum.entities.Post.setModerate,Post.java,"void setModerate(boolean status) {
		this.moderate = status;
	}
"
net.jforum.entities.Post.isWaitingModeration,Post.java,"boolean isWaitingModeration() {
		return this.moderate;
	}
"
net.jforum.entities.Post.isBbCodeEnabled,Post.java,"boolean isBbCodeEnabled() {
		return this.bbCodeEnabled;
	}
"
net.jforum.entities.Post.isHtmlEnabled,Post.java,"boolean isHtmlEnabled() {
		return this.htmlEnabled;
	}
"
net.jforum.entities.Post.getId,Post.java,"int getId() {
		return this.id;
	}
"
net.jforum.entities.Post.isSignatureEnabled,Post.java,"boolean isSignatureEnabled() {
		return this.signatureEnabled;
	}
"
net.jforum.entities.Post.isSmiliesEnabled,Post.java,"boolean isSmiliesEnabled() {
		return this.smiliesEnabled;
	}
"
net.jforum.entities.Post.getDate,Post.java,"Date getDate() {
		return this.date;
	}
"
net.jforum.entities.Post.getForum,Post.java,"Forum getForum() {
		return this.forum;
	}
"
net.jforum.entities.Post.setForum,Post.java,"void setForum(Forum forum) {
		this.forum = forum;
	}
"
net.jforum.entities.Post.getTopic,Post.java,"Topic getTopic() {
		return this.topic;
	}
"
net.jforum.entities.Post.getUser,Post.java,"User getUser() {
		return this.user;
	}
"
net.jforum.entities.Post.getUserIp,Post.java,"String getUserIp() {
		return this.userIp;
	}
"
net.jforum.entities.Post.setBbCodeEnabled,Post.java,"void setBbCodeEnabled(boolean bbCodeEnabled) {
		this.bbCodeEnabled = bbCodeEnabled;
	}
"
net.jforum.entities.Post.setHtmlEnabled,Post.java,"void setHtmlEnabled(boolean htmlEnabled) {
		this.htmlEnabled = htmlEnabled;
	}
"
net.jforum.entities.Post.setId,Post.java,"void setId(int id) {
		this.id = id;
	}
"
net.jforum.entities.Post.setSignatureEnabled,Post.java,"void setSignatureEnabled(boolean signatureEnabled) {
		this.signatureEnabled = signatureEnabled;
	}
"
net.jforum.entities.Post.setSmiliesEnabled,Post.java,"void setSmiliesEnabled(boolean smiliesEnabled) {
		this.smiliesEnabled = smiliesEnabled;
	}
"
net.jforum.entities.Post.setDate,Post.java,"void setDate(Date date) {
		this.date = date;
	}
"
net.jforum.entities.Post.setTopic,Post.java,"void setTopic(Topic topic) {
		this.topic = topic;
	}
"
net.jforum.entities.Post.setUser,Post.java,"void setUser(User user) {
		this.user = user;
	}
"
net.jforum.entities.Post.getText,Post.java,"String getText() {
		return this.text;
	}
"
net.jforum.entities.Post.setText,Post.java,"void setText(String text) {
		this.text = text;
	}
"
net.jforum.entities.Post.getSubject,Post.java,"String getSubject() {
		return this.subject;
	}
"
net.jforum.entities.Post.setSubject,Post.java,"void setSubject(String subject) {
		this.subject = subject;
	}
"
net.jforum.entities.Post.setUserIp,Post.java,"void setUserIp(String userIp) {
		this.userIp = userIp;
	}
"
net.jforum.entities.Post.getHasAttachments,Post.java,"boolean getHasAttachments() {
		return this.hasAttachments;
	}
"
net.jforum.entities.Post.setHasAttachments,Post.java,"void setHasAttachments(boolean hasAttachments) {
		this.hasAttachments = hasAttachments;
	}
"
net.jforum.entities.Post.getEditDate,Post.java,"Date getEditDate() {
		return this.editDate;
	}
"
net.jforum.entities.Post.setEditDate,Post.java,"void setEditDate(Date editDate) {
		this.editDate = editDate;
	}
"
net.jforum.entities.Post.incrementEditCount,Post.java,"void incrementEditCount() {
		this.editCount++;
	}
"
net.jforum.entities.Post.getEditCount,Post.java,"int getEditCount() {
		return this.editCount;
	}
"
net.jforum.entities.Post.equals,Post.java,"boolean equals(Object o) {
		if (o == this) {
			return true;
		}

		if (!(o instanceof Post)) {
			return false;
		}

		return ((Post) o).getId() == this.id;
	}
"
net.jforum.entities.Post.hashCode,Post.java,"int hashCode() {
		return this.id;
	}
"
net.jforum.entities.Post.addAttachment,Post.java,"void addAttachment(Attachment attachment) {
		attachment.setPost(this);
		this.attachments.add(attachment);
	}
"
net.jforum.entities.Post.setAttachments,Post.java,"void setAttachments(List<Attachment> attachments) {
		this.attachments = attachments;
	}
"
net.jforum.entities.Post.getAttachments,Post.java,"List<Attachment> getAttachments() {
		return attachments;
	}
"
net.jforum.entities.Post.getHasEditTimeExpired,Post.java,"Boolean getHasEditTimeExpired() {
		return hasEditTimeExpired;
	}
"
net.jforum.entities.Post.setHasEditTimeExpired,Post.java,"void setHasEditTimeExpired(Boolean hasEditTimeExpired) {
		this.hasEditTimeExpired = hasEditTimeExpired;
	}
"
net.jforum.entities.Post.calculateHasEditTimeExpired,Post.java,"void calculateHasEditTimeExpired(long limitedTime, Date now) {
		this.hasEditTimeExpired = now.getTime() - date.getTime() > limitedTime;
	}
"
net.jforum.entities.Poll.getId,Poll.java,"int getId() {
		return id;
	}
"
net.jforum.entities.Poll.setId,Poll.java,"void setId(int id) {
		this.id = id;
	}
"
net.jforum.entities.Poll.getLabel,Poll.java,"String getLabel() {
		return label;
	}
"
net.jforum.entities.Poll.setLabel,Poll.java,"void setLabel(String label) {
		this.label = label;
	}
"
net.jforum.entities.Poll.getStartDate,Poll.java,"Date getStartDate() {
		return startDate;
	}
"
net.jforum.entities.Poll.setStartDate,Poll.java,"void setStartDate(Date startDate) {
		this.startDate = startDate;
	}
"
net.jforum.entities.Poll.getOptions,Poll.java,"List<PollOption> getOptions() {
		return options;
	}
"
net.jforum.entities.Poll.getTotalVotes,Poll.java,"int getTotalVotes() {
		int votes = 0;

		for (PollOption option : this.options) {
			votes += option.getVoteCount();
		}

		return votes;
	}
"
net.jforum.entities.Poll.isOpen,Poll.java,"boolean isOpen() {
		if (this.length == 0) {
			return true;
		}

		Calendar endTime = Calendar.getInstance();
		endTime.setTime(startDate);
		endTime.add(Calendar.DAY_OF_YEAR, this.length);

		return System.currentTimeMillis() < endTime.getTimeInMillis();
	}
"
net.jforum.entities.Poll.setOptions,Poll.java,"void setOptions(List<PollOption> options) {
		this.options = options;
	}
"
net.jforum.entities.Poll.setLength,Poll.java,"void setLength(int length) {
		this.length = length;
	}
"
net.jforum.entities.Poll.getLength,Poll.java,"int getLength() {
		return length;
	}
"
net.jforum.entities.Group.roleExist,Group.java,"boolean roleExist(String roleName) {
		for (Role role : this.roles) {
			if (role.getName().equals(roleName)) {
				return true;
			}
		}

		return false;
	}
"
net.jforum.entities.Group.roleExists,Group.java,"boolean roleExists(String name, int value) {
		for (Role role : this.roles) {
			if (role.getName().equals(name)) {
				return role.getRoleValues().contains(value);
			}
		}

		return false;
	}
"
net.jforum.entities.Group.addRole,Group.java,"void addRole(Role role) {
		this.roles.add(role);
		role.setGroup(this);
	}
"
net.jforum.entities.Group.getRoles,Group.java,"List<Role> getRoles() {
		return this.roles;
	}
"
net.jforum.entities.Group.getUsers,Group.java,"List<User> getUsers() {
		return users;
	}
"
net.jforum.entities.Group.getDescription,Group.java,"String getDescription() {
		return this.description;
	}
"
net.jforum.entities.Group.getId,Group.java,"int getId() {
		return this.id;
	}
"
net.jforum.entities.Group.getName,Group.java,"String getName() {
		return this.name;
	}
"
net.jforum.entities.Group.setDescription,Group.java,"void setDescription(String description) {
		this.description = description;
	}
"
net.jforum.entities.Group.setId,Group.java,"void setId(int id) {
		this.id = id;
	}
"
net.jforum.entities.Group.setName,Group.java,"void setName(String name) {
		this.name = name;
	}
"
net.jforum.entities.Group.equals,Group.java,"boolean equals(Object o) {
		if (o == this) {
			return true;
		}

		if (!(o instanceof Group)) {
			return false;
		}

		return ((Group)o).getId()  == this.getId();
	}
"
net.jforum.entities.Group.hashCode,Group.java,"int hashCode() {
		return this.getId();
	}
"
net.jforum.entities.Group.toString,Group.java,"String toString() {
		return String.format(""%d, %s"", this.id, this.name);
	}
"
net.jforum.entities.BadWord.getId,BadWord.java,"int getId() {
		return this.id;
	}
"
net.jforum.entities.BadWord.setId,BadWord.java,"void setId(int id) {
		this.id = id;
	}
"
net.jforum.entities.BadWord.getWord,BadWord.java,"String getWord() {
		return this.word;
	}
"
net.jforum.entities.BadWord.setWord,BadWord.java,"void setWord(String word) {
		this.word = word;
	}
"
net.jforum.entities.BadWord.getReplacement,BadWord.java,"String getReplacement() {
		return this.replacement;
	}
"
net.jforum.entities.BadWord.setReplacement,BadWord.java,"void setReplacement(String replacement) {
		this.replacement = replacement;
	}
"
net.jforum.entities.Avatar.getUsers,Avatar.java,"Set<User> getUsers() {
		return users;
	}
"
net.jforum.entities.Avatar.setUsers,Avatar.java,"void setUsers(Set<User> users) {
		this.users = users;
	}
"
net.jforum.entities.Avatar.getUploadedBy,Avatar.java,"User getUploadedBy(){
		if (avatarType == AvatarType.AVATAR_UPLOAD && users != null && users.size( ) == 1) {
			return users.iterator().next();
		}

		return null;
	}
"
net.jforum.entities.Avatar.getId,Avatar.java,"Integer getId() {
		return id;
	}
"
net.jforum.entities.Avatar.setId,Avatar.java,"void setId(Integer id) {
		this.id = id;
	}
"
net.jforum.entities.Avatar.getFileName,Avatar.java,"String getFileName() {
		return fileName;
	}
"
net.jforum.entities.Avatar.setFileName,Avatar.java,"void setFileName(String fileName) {
		this.fileName = fileName;
	}
"
net.jforum.entities.Avatar.getWidth,Avatar.java,"Integer getWidth() {
		return width;
	}
"
net.jforum.entities.Avatar.setWidth,Avatar.java,"void setWidth(Integer width) {
		this.width = width;
	}
"
net.jforum.entities.Avatar.getHeight,Avatar.java,"Integer getHeight() {
		return height;
	}
"
net.jforum.entities.Avatar.setHeight,Avatar.java,"void setHeight(Integer height) {
		this.height = height;
	}
"
net.jforum.entities.Avatar.getAvatarType,Avatar.java,"AvatarType getAvatarType() {
		return avatarType;
	}
"
net.jforum.entities.Avatar.setAvatarType,Avatar.java,"void setAvatarType(AvatarType avatarType) {
		this.avatarType = avatarType;
	}
"
net.jforum.entities.Avatar.toString,Avatar.java,"String toString() {
		return fileName;
	}
"
net.jforum.entities.Avatar.hashCode,Avatar.java,"int hashCode() {
		return Integer.valueOf(this.id).hashCode();
	}
"
net.jforum.entities.Avatar.equals,Avatar.java,"boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		Avatar other = (Avatar) obj;
		if (id != other.id) {
			return false;
		}
		return true;
	}
"
net.jforum.entities.UserSession.setResponse,UserSession.java,"void setResponse(HttpServletResponse response) {
		this.response = response;
	}
"
net.jforum.entities.UserSession.markTopicAsRead,UserSession.java,"void markTopicAsRead(int topicId) {
		if (this.isLogged()) {
			this.topicReadTime.put(topicId, System.currentTimeMillis());
		}
	}
"
net.jforum.entities.UserSession.setRequest,UserSession.java,"void setRequest(HttpServletRequest request) {
		this.request = request;
	}
"
net.jforum.entities.UserSession.isTopicRead,UserSession.java,"boolean isTopicRead(Topic topic) {
		if (!this.isLogged()) {
			return true;
		}

		long lastVisit = this.getLastVisit();
		long postTime = topic.getLastPost().getDate().getTime();

		if (postTime <= lastVisit) {
			return true;
		}

		Long readTime = this.topicReadTime.get(topic.getId());
		return readTime != null && postTime <= readTime;
	}
"
net.jforum.entities.UserSession.isForumRead,UserSession.java,"boolean isForumRead(Forum forum) {
		if (!this.isLogged() || forum.getTotalPosts() == 0 || forum.getLastPost() == null) {
			return true;
		}

		long lastVisit = this.getLastVisit();
		long postTime = forum.getLastPost().getDate().getTime();

		if (postTime <= lastVisit) {
			return true;
		}

		Long readTime = this.topicReadTime.get(forum.getLastPost().getTopic().getId());
		return readTime != null && postTime <= readTime;
	}
"
net.jforum.entities.UserSession.setRoleManager,UserSession.java,"void setRoleManager(RoleManager roleManager) {
		this.roleManager = roleManager;
	}
"
net.jforum.entities.UserSession.getRoleManager,UserSession.java,"RoleManager getRoleManager() {
		return this.roleManager;
	}
"
net.jforum.entities.UserSession.getRequest,UserSession.java,"HttpServletRequest getRequest() {
		return request;
	}
"
net.jforum.entities.UserSession.getIp,UserSession.java,"String getIp() {
		/*
		if(new JForumConfig().getBoolean(ConfigKeys.BLOCK_IP)) {
			return null;
		}
		*/

		// We look if the request is forwarded
		// If it is not call the older function.
		String ip = request.getHeader(""X-Pounded-For"");

		if (ip != null) {
			return ip;
		}

        ip = request.getHeader(""x-forwarded-for"");

        if (ip == null) {
        	return request.getRemoteAddr();
        }
        else {
        	// Process the IP to keep the last IP (real ip of the computer on the net)
            StringTokenizer tokenizer = new StringTokenizer(ip, "","");

            // Ignore all tokens, except the last one
            for (int i = 0; i < tokenizer.countTokens() -1 ; i++) {
            	tokenizer.nextElement();
            }

            ip = tokenizer.nextToken().trim();

            if (ip.equals("""")) {
            	ip = null;
            }
        }

        // If the ip is still null, we put 0.0.0.0 to avoid null values
        if (ip == null) {
        	ip = ""0.0.0.0"";
        }

        return ip;
	}
"
net.jforum.entities.UserSession.getUser,UserSession.java,"User getUser() {
		return this.user;
	}
"
net.jforum.entities.UserSession.setUser,UserSession.java,"void setUser(User user) {
		this.user = user;

		if (user == null) {
			try {
				throw new RuntimeException(""userSession.setUser with null value. See the stack trace for more information about the call stack. Session ID: ""
					+ this.sessionId);
			}
			catch (RuntimeException e) {
				Writer writer = new StringWriter();
				PrintWriter printWriter = new PrintWriter(writer);
				e.printStackTrace(printWriter);
				logger.warn(writer.toString());
			}
		}
	}
"
net.jforum.entities.UserSession.getCreationTime,UserSession.java,"long getCreationTime() {
		return this.creationTime;
	}
"
net.jforum.entities.UserSession.setCreationTime,UserSession.java,"void setCreationTime(long start) {
		this.creationTime = start;
		this.lastAccessedTime = start;
		this.lastVisit = start;
	}
"
net.jforum.entities.UserSession.getLastAccessedTime,UserSession.java,"long getLastAccessedTime() {
		return this.lastAccessedTime;
	}
"
net.jforum.entities.UserSession.getLastAccessedDate,UserSession.java,"Date getLastAccessedDate() {
		return new Date(this.getLastAccessedTime());
	}
"
net.jforum.entities.UserSession.getLastVisit,UserSession.java,"long getLastVisit() {
		return this.lastVisit;
	}
"
net.jforum.entities.UserSession.getLastVisitDate,UserSession.java,"Date getLastVisitDate() {
		return new Date(this.lastVisit);
	}
"
net.jforum.entities.UserSession.setLastVisit,UserSession.java,"void setLastVisit(long lastVisit) {
		this.lastVisit = lastVisit;
	}
"
net.jforum.entities.UserSession.ping,UserSession.java,"void ping() {
		this.lastAccessedTime = System.currentTimeMillis();
	}
"
net.jforum.entities.UserSession.getSessionId,UserSession.java,"String getSessionId() {
		return this.sessionId;
	}
"
net.jforum.entities.UserSession.setSessionId,UserSession.java,"void setSessionId(String sessionId) {
		this.sessionId = sessionId;
	}
"
net.jforum.entities.UserSession.isBot,UserSession.java,"boolean isBot() {
		return false;
	}
"
net.jforum.entities.UserSession.becomeAnonymous,UserSession.java,"void becomeAnonymous(int anonymousUserId) {
		User user = new User();
		user.setId(anonymousUserId);
		this.setUser(user);
		setAttribute(ConfigKeys.LOGGED, ""0"");
	}
"
net.jforum.entities.UserSession.becomeLogged,UserSession.java,"void becomeLogged() {
		this.setAttribute(ConfigKeys.LOGGED, ""1"");
	}
"
net.jforum.entities.UserSession.isLogged,UserSession.java,"boolean isLogged() {
		return ""1"".equals(this.getAttribute(ConfigKeys.LOGGED));
	}
"
net.jforum.entities.UserSession.getCookie,UserSession.java,"Cookie getCookie(String name) {
		Cookie[] cookies = request.getCookies();

		if (cookies != null) {
			for (Cookie c : cookies) {
				if (c.getName().equals(name)) {
					return c;
				}
			}
		}

		return null;
	}
"
net.jforum.entities.UserSession.addCookie,UserSession.java,"void addCookie(String name, String value) {
		int maxAge = 3600 * 24 * 365;

		if (value == null) {
			maxAge = 0;
			value = """";
		}

		Cookie cookie = new Cookie(name, value);
		cookie.setMaxAge(maxAge);
		cookie.setPath(""/"");

		response.addCookie(cookie);
	}
"
net.jforum.entities.UserSession.removeCookie,UserSession.java,"void removeCookie(String name) {
		this.addCookie(name, null);
	}
"
net.jforum.entities.UserSession.setAttribute,UserSession.java,"void setAttribute(String name, Object value) {
		request.getSession().setAttribute(name, value);
	}
"
net.jforum.entities.UserSession.getAttribute,UserSession.java,"Object getAttribute(String name) {
		return request.getSession().getAttribute(name);
	}
"
net.jforum.entities.UserSession.asSession,UserSession.java,"Session asSession() {
		Session session = new Session();

		session.setUserId(this.user.getId());
		session.setIp(this.getIp());
		session.setStart(new Date(this.getCreationTime()));
		session.setLastAccessed(new Date(this.getLastAccessedTime()));
		session.setLastVisit(new Date(this.getLastVisit()));

		return session;
	}
"
net.jforum.entities.UserSession.eequals,UserSession.java,"boolean eequals(Object o) {
		if (o == this) {
			return true;
		}

		if (!(o instanceof UserSession)) {
			return false;
		}

		return this.getSessionId().equals(((UserSession)o).getSessionId());
	}
"
net.jforum.entities.UserSession.hashCode,UserSession.java,"int hashCode() {
		return this.getSessionId().hashCode();
	}
"
net.jforum.entities.UserSession.setLastAccessedTime,UserSession.java,"void setLastAccessedTime(long time) {
		this.lastAccessedTime = time;
	}
"
net.jforum.entities.Category.setModerated,Category.java,"void setModerated(boolean status) {
		this.moderated = status;
	}
"
net.jforum.entities.Category.isModerated,Category.java,"boolean isModerated() {
		return this.moderated;
	}
"
net.jforum.entities.Category.getId,Category.java,"int getId() {
		return this.id;
	}
"
net.jforum.entities.Category.getName,Category.java,"String getName() {
		return this.name;
	}
"
net.jforum.entities.Category.getDisplayOrder,Category.java,"int getDisplayOrder() {
		return this.displayOrder;
	}
"
net.jforum.entities.Category.setId,Category.java,"void setId(int id) {
		this.id = id;
	}
"
net.jforum.entities.Category.setName,Category.java,"void setName(String name) {
		this.name = name;
	}
"
net.jforum.entities.Category.setDisplayOrder,Category.java,"void setDisplayOrder(int order) {
		this.displayOrder = order;
	}
"
net.jforum.entities.Category.getForums,Category.java,"List<Forum> getForums() {
		// We do not use @OneToMany because forums are ordered,
		// thus changing the display order of a single forum will not
		// automatically change its order in the collection, and manually
		// executing a sort() appears to be a worst approach
		return this.repository.getForums(this);
	}
"
net.jforum.entities.Category.hashCode,Category.java,"int hashCode() {
		return this.getId();
	}
"
net.jforum.entities.Category.equals,Category.java,"boolean equals(Object o) {
		if (o == this) {
			return true;
		}

		if (!(o instanceof Category)) {
			return false;
		}

		return ((Category)o).getId() == this.getId();
	}
"
net.jforum.entities.Category.toString,Category.java,"String toString() {
		return new StringBuilder(64)
			.append('[')
			.append(this.getName())
			.append("", id="").append(this.getId())
			.append("", order="").append(this.getDisplayOrder())
			.toString();
	}
"
net.jforum.entities.Category.getTheme,Category.java,"Theme getTheme() {
		return theme;
	}
"
net.jforum.entities.Category.setTheme,Category.java,"void setTheme(Theme theme) {
		this.theme = theme;
	}
"
net.jforum.entities.PollVoter.getPoll,PollVoter.java,"Poll getPoll() {
		return this.poll;
	}
"
net.jforum.entities.PollVoter.setPoll,PollVoter.java,"void setPoll(Poll poll) {
		this.poll = poll;
	}
"
net.jforum.entities.PollVoter.getUser,PollVoter.java,"User getUser() {
		return this.user;
	}
"
net.jforum.entities.PollVoter.setUser,PollVoter.java,"void setUser(User user) {
		this.user = user;
	}
"
net.jforum.entities.PollVoter.getIp,PollVoter.java,"String getIp() {
		return this.ip;
	}
"
net.jforum.entities.PollVoter.setIp,PollVoter.java,"void setIp(String ip) {
		this.ip = ip;
	}
"
net.jforum.entities.User.addExtra,User.java,"void addExtra(String name, Object value) {
		this.extra.put(name, value);
	}
"
net.jforum.entities.User.getExtra,User.java,"Object getExtra(String name) {
		return this.extra.get(name);
	}
"
net.jforum.entities.User.setFirstName,User.java,"void setFirstName(String name) {
		this.firstName = name;
	}
"
net.jforum.entities.User.getFirstName,User.java,"String getFirstName() {
		return this.firstName;
	}
"
net.jforum.entities.User.setLastName,User.java,"void setLastName(String name) {
		this.lastName = name;
	}
"
net.jforum.entities.User.getLastNmame,User.java,"String getLastNmame() {
		return this.lastName;
	}
"
net.jforum.entities.User.getName,User.java,"String getName() {
		return this.firstName + "" "" + this.lastName;
	}
"
net.jforum.entities.User.isDeleted,User.java,"boolean isDeleted() {
		return this.isDeleted;
	}
"
net.jforum.entities.User.setDeleted,User.java,"void setDeleted(boolean isDeleted) {
		this.isDeleted = isDeleted;
	}
"
net.jforum.entities.User.addGroup,User.java,"void addGroup(Group group) {
		if (!this.groups.contains(group)) {
			this.groups.add(group);
		}
	}
"
net.jforum.entities.User.getAim,User.java,"String getAim() {
		return this.aim;
	}
"
net.jforum.entities.User.getAvatar,User.java,"Avatar getAvatar() {
		return this.avatar;
	}
"
net.jforum.entities.User.isAvatarEnabled,User.java,"boolean isAvatarEnabled() {
		return this.avatarEnabled;
	}
"
net.jforum.entities.User.isBbCodeEnabled,User.java,"boolean isBbCodeEnabled() {
		return this.bbCodeEnabled;
	}
"
net.jforum.entities.User.getDateFormat,User.java,"String getDateFormat() {
		return this.dateFormat;
	}
"
net.jforum.entities.User.getEmail,User.java,"String getEmail() {
		return this.email;
	}
"
net.jforum.entities.User.getFrom,User.java,"String getFrom() {
		return this.from;
	}
"
net.jforum.entities.User.getGender,User.java,"String getGender() {
		return this.gender;
	}
"
net.jforum.entities.User.isHtmlEnabled,User.java,"boolean isHtmlEnabled() {
		return this.htmlEnabled;
	}
"
net.jforum.entities.User.getId,User.java,"int getId() {
		return this.id;
	}
"
net.jforum.entities.User.getinterests,User.java,"String getinterests() {
		return this.interests;
	}
"
net.jforum.entities.User.getLang,User.java,"String getLang() {
		return this.lang;
	}
"
net.jforum.entities.User.getLastVisit,User.java,"Date getLastVisit() {
		return this.lastVisit;
	}
"
net.jforum.entities.User.getNotifyPrivateMessages,User.java,"boolean getNotifyPrivateMessages() {
		return this.notifyPrivateMessages;
	}
"
net.jforum.entities.User.getOccupation,User.java,"String getOccupation() {
		return this.occupation;
	}
"
net.jforum.entities.User.getPassword,User.java,"String getPassword() {
		return this.password;
	}
"
net.jforum.entities.User.isPrivateMessagesEnabled,User.java,"boolean isPrivateMessagesEnabled() {
		return this.privateMessagesEnabled;
	}
"
net.jforum.entities.User.getRanking,User.java,"Ranking getRanking() {
		return this.ranking;
	}
"
net.jforum.entities.User.getRegistrationDate,User.java,"Date getRegistrationDate() {
		return this.registrationDate;
	}
"
net.jforum.entities.User.getSignature,User.java,"String getSignature() {
		return this.signature;
	}
"
net.jforum.entities.User.isSmiliesEnabled,User.java,"boolean isSmiliesEnabled() {
		return this.smiliesEnabled;
	}
"
net.jforum.entities.User.getTimeZone,User.java,"String getTimeZone() {
		return this.timezone;
	}
"
net.jforum.entities.User.getTotalPosts,User.java,"int getTotalPosts() {
		return this.totalPosts;
	}
"
net.jforum.entities.User.getUsername,User.java,"String getUsername() {
		return this.username;
	}
"
net.jforum.entities.User.isViewOnlineEnabled,User.java,"boolean isViewOnlineEnabled() {
		return this.viewOnlineEnabled;
	}
"
net.jforum.entities.User.getWebsite,User.java,"String getWebsite() {
		return this.website;
	}
"
net.jforum.entities.User.getYim,User.java,"String getYim() {
		return this.yim;
	}
"
net.jforum.entities.User.isActive,User.java,"boolean isActive() {
		return this.active;
	}
"
net.jforum.entities.User.getActivationKey,User.java,"String getActivationKey() {
		return this.activationKey;
	}
"
net.jforum.entities.User.setAim,User.java,"void setAim(String aim) {
		this.aim = aim;
	}
"
net.jforum.entities.User.setAvatar,User.java,"void setAvatar(Avatar avatar) {
		this.avatar = avatar;
	}
"
net.jforum.entities.User.isCustomizeAvatar,User.java,"boolean isCustomizeAvatar(){
		return avatar != null && this.equals(avatar.getUploadedBy());
	}
"
net.jforum.entities.User.setAvatarEnabled,User.java,"void setAvatarEnabled(boolean avatarEnabled) {
		this.avatarEnabled = avatarEnabled;
	}
"
net.jforum.entities.User.setBbCodeEnabled,User.java,"void setBbCodeEnabled(boolean bbCodeEnabled) {
		this.bbCodeEnabled = bbCodeEnabled;
	}
"
net.jforum.entities.User.setDateFormat,User.java,"void setDateFormat(String dateFormat) {
		this.dateFormat = dateFormat;
	}
"
net.jforum.entities.User.setEmail,User.java,"void setEmail(String email) {
		this.email = email;
	}
"
net.jforum.entities.User.setFrom,User.java,"void setFrom(String from) {
		this.from = from;
	}
"
net.jforum.entities.User.setGender,User.java,"void setGender(String gender) {
		this.gender = gender;
	}
"
net.jforum.entities.User.setHtmlEnabled,User.java,"void setHtmlEnabled(boolean htmlEnabled) {
		this.htmlEnabled = htmlEnabled;
	}
"
net.jforum.entities.User.setId,User.java,"void setId(int id) {
		this.id = id;
	}
"
net.jforum.entities.User.setInterests,User.java,"void setInterests(String interests) {
		this.interests = interests;
	}
"
net.jforum.entities.User.setLang,User.java,"void setLang(String lang) {
		this.lang = lang;
	}
"
net.jforum.entities.User.setLastVisit,User.java,"void setLastVisit(Date lastVisit) {
		this.lastVisit = lastVisit;
	}
"
net.jforum.entities.User.setNotifyPrivateMessages,User.java,"void setNotifyPrivateMessages(boolean notify) {
		this.notifyPrivateMessages = notify;
	}
"
net.jforum.entities.User.setOccupation,User.java,"void setOccupation(String occupation) {
		this.occupation = occupation;
	}
"
net.jforum.entities.User.setPassword,User.java,"void setPassword(String password) {
		this.password = password;
	}
"
net.jforum.entities.User.setPrivateMessagesEnabled,User.java,"void setPrivateMessagesEnabled(boolean privateMessagesEnabled) {
		this.privateMessagesEnabled = privateMessagesEnabled;
	}
"
net.jforum.entities.User.setRanking,User.java,"void setRanking(Ranking ranking) {
		this.ranking = ranking;
	}
"
net.jforum.entities.User.setRegistrationDate,User.java,"void setRegistrationDate(Date registrationDate) {
		this.registrationDate = registrationDate;
	}
"
net.jforum.entities.User.setSignature,User.java,"void setSignature(String signature) {
		this.signature = signature;
	}
"
net.jforum.entities.User.setSmiliesEnabled,User.java,"void setSmiliesEnabled(boolean smilesEnabled) {
		this.smiliesEnabled = smilesEnabled;
	}
"
net.jforum.entities.User.setTimeZone,User.java,"void setTimeZone(String timeZone) {
		this.timezone = timeZone;
	}
"
net.jforum.entities.User.setTotalPosts,User.java,"void setTotalPosts(int totalPosts) {
		this.totalPosts = totalPosts;
	}
"
net.jforum.entities.User.setUsername,User.java,"void setUsername(String username) {
		this.username = username;
	}
"
net.jforum.entities.User.setViewOnlineEnabled,User.java,"void setViewOnlineEnabled(boolean viewOnlineEnabled) {
		this.viewOnlineEnabled = viewOnlineEnabled;
	}
"
net.jforum.entities.User.setWebsite,User.java,"void setWebsite(String webSite) {
		this.website = webSite;
	}
"
net.jforum.entities.User.setYim,User.java,"void setYim(String yim) {
		this.yim = yim;
	}
"
net.jforum.entities.User.getMsn,User.java,"String getMsn() {
		return this.msn;
	}
"
net.jforum.entities.User.setMsn,User.java,"void setMsn(String string) {
		this.msn = string;
	}
"
net.jforum.entities.User.getNotifyReply,User.java,"boolean getNotifyReply() {
		return this.notifyReply;
	}
"
net.jforum.entities.User.setNotifyReply,User.java,"void setNotifyReply(boolean notify) {
		this.notifyReply = notify;
	}
"
net.jforum.entities.User.isViewEmailEnabled,User.java,"boolean isViewEmailEnabled() {
		return this.viewEmailEnabled;
	}
"
net.jforum.entities.User.setViewEmailEnabled,User.java,"void setViewEmailEnabled(boolean b) {
		this.viewEmailEnabled = b;
	}
"
net.jforum.entities.User.getAttachSignature,User.java,"boolean getAttachSignature() {
		return this.attachSignature;
	}
"
net.jforum.entities.User.setAttachSignature,User.java,"void setAttachSignature(boolean attach) {
		this.attachSignature = attach;
	}
"
net.jforum.entities.User.getTotalUnreadPrivateMessages,User.java,"int getTotalUnreadPrivateMessages() {
		this.validateUserRepository();
		return this.userRepository.getTotalUnreadPrivateMessages(this);
	}
"
net.jforum.entities.User.setActive,User.java,"void setActive(boolean active) {
		this.active = active;
	}
"
net.jforum.entities.User.setActivationKey,User.java,"void setActivationKey(String activationKey) {
		this.activationKey = activationKey;
	}
"
net.jforum.entities.User.getBiography,User.java,"String getBiography() {
		return biography;
	}
"
net.jforum.entities.User.setBiography,User.java,"void setBiography(String biography) {
		this.biography = biography;
	}
"
net.jforum.entities.User.getNotifyAlways,User.java,"boolean getNotifyAlways() {
		return this.notifyAlways;
	}
"
net.jforum.entities.User.getNotifyText,User.java,"boolean getNotifyText() {
		return this.notifyText;
	}
"
net.jforum.entities.User.setNotifyAlways,User.java,"void setNotifyAlways(boolean notifyAlways) {
		this.notifyAlways = notifyAlways;
	}
"
net.jforum.entities.User.setNotifyText,User.java,"void setNotifyText(boolean notifyText) {
		this.notifyText = notifyText;
	}
"
net.jforum.entities.User.getSecurityHash,User.java,"String getSecurityHash() {
		return this.securityHash;
	}
"
net.jforum.entities.User.setSecurityHash,User.java,"void setSecurityHash(String securityHash) {
		this.securityHash = securityHash;
	}
"
net.jforum.entities.User.equals,User.java,"boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof User)) {
			return false;
		}

		User u = (User) obj;
		return this.getId() == u.getId();
	}
"
net.jforum.entities.User.getGroups,User.java,"List<Group> getGroups() {
		return groups;
	}
"
net.jforum.entities.User.incrementTotalPosts,User.java,"void incrementTotalPosts() {
		this.totalPosts++;
	}
"
net.jforum.entities.User.decrementTotalPosts,User.java,"void decrementTotalPosts() {
		this.totalPosts--;
	}
"
net.jforum.entities.User.validateUserRepository,User.java,"void validateUserRepository() {
		if (this.userRepository == null) {
			throw new IllegalStateException(""UserRepository was not set"");
		}
	}
"
net.jforum.entities.Forum.isAllowAnonymousPosts,Forum.java,"boolean isAllowAnonymousPosts() {
		return this.allowAnonymousPosts;
	}
"
net.jforum.entities.Forum.setAllowAnonymousPosts,Forum.java,"void setAllowAnonymousPosts(boolean allowAnonymousPosts) {
		this.allowAnonymousPosts = allowAnonymousPosts;
	}
"
net.jforum.entities.Forum.getLastPost,Forum.java,"Post getLastPost() {
		return this.lastPost;
	}
"
net.jforum.entities.Forum.setLastPost,Forum.java,"void setLastPost(Post post) {
		this.lastPost = post;
	}
"
net.jforum.entities.Forum.getDescription,Forum.java,"String getDescription() {
		return this.description;
	}
"
net.jforum.entities.Forum.getModerators,Forum.java,"List<Group> getModerators() {
		if (this.isModerated()) {
			this.assertRepository();
			return this.repository.getModerators(this);
		}
		else {
			return new ArrayList<Group>();
		}
	}
"
net.jforum.entities.Forum.getId,Forum.java,"int getId() {
		return this.id;
	}
"
net.jforum.entities.Forum.getCategory,Forum.java,"Category getCategory() {
		return this.category;
	}
"
net.jforum.entities.Forum.isModerated,Forum.java,"boolean isModerated() {
		return this.moderated;
	}
"
net.jforum.entities.Forum.getName,Forum.java,"String getName() {
		return this.name;
	}
"
net.jforum.entities.Forum.getDisplayOrder,Forum.java,"int getDisplayOrder() {
		return this.displayOrder;
	}
"
net.jforum.entities.Forum.isUnread,Forum.java,"boolean isUnread() {
		return this.unread;
	}
"
net.jforum.entities.Forum.setDescription,Forum.java,"void setDescription(String description) {
		this.description = description;
	}
"
net.jforum.entities.Forum.setId,Forum.java,"void setId(int id) {
		this.id = id;
	}
"
net.jforum.entities.Forum.setCategory,Forum.java,"void setCategory(Category category) {
		this.category = category;
	}
"
net.jforum.entities.Forum.setModerated,Forum.java,"void setModerated(boolean moderated) {
		this.moderated = moderated;
	}
"
net.jforum.entities.Forum.setName,Forum.java,"void setName(String name) {
		this.name = name;
	}
"
net.jforum.entities.Forum.setDisplayOrder,Forum.java,"void setDisplayOrder(int order) {
		this.displayOrder = order;
	}
"
net.jforum.entities.Forum.setUnread,Forum.java,"void setUnread(boolean status) {
		this.unread = status;
	}
"
net.jforum.entities.Forum.getTotalPosts,Forum.java,"int getTotalPosts() {
		this.assertRepository();
		return this.repository.getTotalPosts(this);
	}
"
net.jforum.entities.Forum.getTotalTopics,Forum.java,"int getTotalTopics() {
		this.assertRepository();
		return this.repository.getTotalTopics(this);
	}
"
net.jforum.entities.Forum.getTopics,Forum.java,"List<Topic> getTopics(int start, int count) {
		this.assertRepository();
		return this.repository.getTopics(this, start, count);
	}
"
net.jforum.entities.Forum.getTopicsPendingModeration,Forum.java,"List<Topic> getTopicsPendingModeration() {
		if (this.isModerated()) {
			this.assertRepository();
			return this.repository.getTopicsPendingModeration(this);
		}
		else {
			return new ArrayList<Topic>();
		}
	}
"
net.jforum.entities.Forum.equals,Forum.java,"boolean equals(Object o) {
		if (o == this) {
			return true;
		}

		if (!(o instanceof Forum)) {
			return false;
		}

		Forum f = (Forum) o;
		return f.getId() == this.getId();
	}
"
net.jforum.entities.Forum.hashCode,Forum.java,"int hashCode() {
		return this.getId();
	}
"
net.jforum.entities.Forum.toString,Forum.java,"String toString() {
		return new StringBuilder(64)
			.append('[').append(this.getName())
			.append("", id="").append(this.getId())
			.append("", order="").append(this.getDisplayOrder())
			.append(']').toString();
	}
"
net.jforum.entities.Forum.assertRepository,Forum.java,"void assertRepository() {
		if (this.repository == null) {
			throw new IllegalStateException(""repository was not initialized"");
		}
	}
"
net.jforum.entities.Ranking.getId,Ranking.java,"int getId() {
		return this.id;
	}
"
net.jforum.entities.Ranking.getImage,Ranking.java,"String getImage() {
		return this.image;
	}
"
net.jforum.entities.Ranking.isSpecial,Ranking.java,"boolean isSpecial() {
		return this.special;
	}
"
net.jforum.entities.Ranking.getTitle,Ranking.java,"String getTitle() {
		return (this.title == null ? """" : this.title);
	}
"
net.jforum.entities.Ranking.setId,Ranking.java,"void setId(int id) {
		this.id = id;
	}
"
net.jforum.entities.Ranking.setImage,Ranking.java,"void setImage(String image) {
		this.image = image;
	}
"
net.jforum.entities.Ranking.setSpecial,Ranking.java,"void setSpecial(boolean special) {
		this.special = special;
	}
"
net.jforum.entities.Ranking.setTitle,Ranking.java,"void setTitle(String title) {
		this.title = title;
	}
"
net.jforum.entities.Ranking.getMin,Ranking.java,"int getMin() {
		return this.min;
	}
"
net.jforum.entities.Ranking.setMin,Ranking.java,"void setMin(int i) {
		this.min = i;
	}
"
net.jforum.entities.Ranking.equals,Ranking.java,"boolean equals(Object o) {
		if (o == this) {
			return true;
		}

		if (!(o instanceof Ranking)) {
			return false;
		}

		return ((Ranking) o).getId() == this.getId();
	}
"
net.jforum.entities.Ranking.hashCode,Ranking.java,"int hashCode() {
		return this.getId();
	}
"
net.jforum.entities.Ranking.toString,Ranking.java,"String toString() {
		return this.getTitle();
	}
"
net.jforum.entities.Banlist.getId,Banlist.java,"int getId() {
		return this.id;
	}
"
net.jforum.entities.Banlist.getUserId,Banlist.java,"int getUserId() {
		return this.userId;
	}
"
net.jforum.entities.Banlist.getIp,Banlist.java,"String getIp() {
		return this.ip;
	}
"
net.jforum.entities.Banlist.getEmail,Banlist.java,"String getEmail() {
		return this.email;
	}
"
net.jforum.entities.Banlist.setId,Banlist.java,"void setId(int id) {
		this.id = id;
	}
"
net.jforum.entities.Banlist.setUserId,Banlist.java,"void setUserId(int userId) {
		this.userId = userId;
	}
"
net.jforum.entities.Banlist.setIp,Banlist.java,"void setIp(String ip) {
		this.ip = ip;
	}
"
net.jforum.entities.Banlist.setEmail,Banlist.java,"void setEmail(String email) {
		this.email = email;
	}
"
net.jforum.entities.Banlist.matches,Banlist.java,"boolean matches(Banlist b) {
		boolean status = false;

		if (this.matchesUserId(b) || this.matchesEmail(b)) {
			status = true;
		}
		else if (!StringUtils.isEmpty(b.getIp()) && !StringUtils.isEmpty(this.getIp())) {
			if (b.getIp().equalsIgnoreCase(this.getIp())) {
				status = true;
			}
			else {
				status = this.matchIp(b);
			}
		}

		return status;
	}
"
net.jforum.entities.Banlist.matchesEmail,Banlist.java,"boolean matchesEmail(Banlist b) {
		return (!StringUtils.isEmpty(b.getEmail()) && b.getEmail().equals(this.getEmail()));
	}
"
net.jforum.entities.Banlist.matchesUserId,Banlist.java,"boolean matchesUserId(Banlist b) {
		return b.getUserId() > 0 && this.getUserId() > 0 && b.getUserId() == this.getUserId();
	}
"
net.jforum.entities.Banlist.matchIp,Banlist.java,"boolean matchIp(Banlist b) {
		boolean status = false;

		StringTokenizer userToken = new StringTokenizer(b.getIp(), ""."");
		StringTokenizer thisToken = new StringTokenizer(this.getIp(), ""."");

		if (userToken.countTokens() == thisToken.countTokens()) {
			String[] userValues = this.tokenizerAsArray(userToken);
			String[] thisValues = this.tokenizerAsArray(thisToken);

			status = this.compareIpValues(userValues, thisValues);
		}
		return status;
	}
"
net.jforum.entities.Banlist.compareIpValues,Banlist.java,"boolean compareIpValues(String[] userValues, String[] thisValues) {
		boolean helperStatus = true;
		boolean onlyStars = true;

		for (int i = 0; i < thisValues.length; i++) {
			if (thisValues[i].charAt(0) != '*') {
				onlyStars = false;

				if (!thisValues[i].equals(userValues[i])) {
					helperStatus = false;
				}
			}
		}

		return helperStatus && !onlyStars;
	}
"
net.jforum.entities.Banlist.tokenizerAsArray,Banlist.java,"String[] tokenizerAsArray(StringTokenizer token) {
		String[] values = new String[token.countTokens()];

		for (int i = 0; token.hasMoreTokens(); i++) {
			values[i] = token.nextToken();
		}

		return values;
	}
"
net.jforum.entities.Banlist.hashCode,Banlist.java,"int hashCode() {
		return this.getId();
	}
"
net.jforum.entities.Banlist.equals,Banlist.java,"boolean equals(Object o) {
		if (o == this) {
			return true;
		}

		if (!(o instanceof Banlist)) {
			return false;
		}

		return ((Banlist)o).getId() == this.getId();
	}
"
net.jforum.entities.Banlist.toString,Banlist.java,"String toString() {
		return new StringBuilder()
			.append(""id="").append(this.getId()).append(',')
			.append(""ip="").append(this.getIp()).append(',')
			.append(""userId="").append(this.getUserId()).append(',')
			.append(""email="").append(this.getEmail())
			.toString();
	}
"
net.jforum.entities.ForumWatch.getForumId,ForumWatch.java,"int getForumId() {
		return this.forumId;
	}
"
net.jforum.entities.ForumWatch.setForumId,ForumWatch.java,"void setForumId(int forumId) {
		this.forumId = forumId;
	}
"
net.jforum.entities.ForumWatch.getUserId,ForumWatch.java,"int getUserId() {
		return this.userId;
	}
"
net.jforum.entities.ForumWatch.setUserId,ForumWatch.java,"void setUserId(int userId) {
		this.userId = userId;
	}
"
net.jforum.entities.ForumWatch.getId,ForumWatch.java,"int getId() {
		return this.id;
	}
"
net.jforum.entities.ForumWatch.setId,ForumWatch.java,"void setId(int id) {
		this.id = id;
	}
"
net.jforum.entities.ForumWatch.equals,ForumWatch.java,"boolean equals(Object o) {
		if (o == this) {
			return true;
		}

		if (!(o instanceof ForumWatch)) {
			return false;
		}

		ForumWatch fw = (ForumWatch)o;
		return fw.getForumId() == this.getForumId()
			&& fw.getUserId() == this.getUserId();
	}
"
net.jforum.entities.ForumWatch.hashCode,ForumWatch.java,"int hashCode() {
		return new StringBuffer()
			.append(this.getForumId())
			.append(this.getUserId())
			.hashCode();
	}
"
net.jforum.entities.PostReport.getId,PostReport.java,"int getId() {
		return this.id;
	}
"
net.jforum.entities.PostReport.setId,PostReport.java,"void setId(int id) {
		this.id = id;
	}
"
net.jforum.entities.PostReport.getPost,PostReport.java,"Post getPost() {
		return this.post;
	}
"
net.jforum.entities.PostReport.setPost,PostReport.java,"void setPost(Post post) {
		this.post = post;
	}
"
net.jforum.entities.PostReport.getDate,PostReport.java,"Date getDate() {
		return this.date;
	}
"
net.jforum.entities.PostReport.setDate,PostReport.java,"void setDate(Date date) {
		this.date = date;
	}
"
net.jforum.entities.PostReport.getDescription,PostReport.java,"String getDescription() {
		return this.description;
	}
"
net.jforum.entities.PostReport.setDescription,PostReport.java,"void setDescription(String description) {
		this.description = description;
	}
"
net.jforum.entities.PostReport.getUser,PostReport.java,"User getUser() {
		return this.user;
	}
"
net.jforum.entities.PostReport.setUser,PostReport.java,"void setUser(User user) {
		this.user = user;
	}
"
net.jforum.entities.PostReport.setStatus,PostReport.java,"void setStatus(PostReportStatus status) {
		this.status = status;
	}
"
net.jforum.entities.PostReport.getStatus,PostReport.java,"PostReportStatus getStatus() {
		return status;
	}
"
net.jforum.entities.ModerationLog.getId,ModerationLog.java,"int getId() {
		return this.id;
	}
"
net.jforum.entities.ModerationLog.getUser,ModerationLog.java,"User getUser() {
		return this.user;
	}
"
net.jforum.entities.ModerationLog.getDescription,ModerationLog.java,"String getDescription() {
		return this.description;
	}
"
net.jforum.entities.ModerationLog.getOriginalMessage,ModerationLog.java,"String getOriginalMessage() {
		return this.originalMessage;
	}
"
net.jforum.entities.ModerationLog.getDate,ModerationLog.java,"Date getDate() {
		return this.date;
	}
"
net.jforum.entities.ModerationLog.getType,ModerationLog.java,"int getType() {
		return this.type;
	}
"
net.jforum.entities.ModerationLog.setId,ModerationLog.java,"void setId(int id) {
		this.id = id;
	}
"
net.jforum.entities.ModerationLog.setUser,ModerationLog.java,"void setUser(User user) {
		this.user = user;
	}
"
net.jforum.entities.ModerationLog.setDescription,ModerationLog.java,"void setDescription(String description) {
		this.description = description;
	}
"
net.jforum.entities.ModerationLog.setOriginalMessage,ModerationLog.java,"void setOriginalMessage(String originalMessage) {
		this.originalMessage = originalMessage;
	}
"
net.jforum.entities.ModerationLog.setDate,ModerationLog.java,"void setDate(Date date) {
		this.date = date;
	}
"
net.jforum.entities.ModerationLog.setType,ModerationLog.java,"void setType(int type) {
		this.type = type;
	}
"
net.jforum.entities.ModerationLog.getPostId,ModerationLog.java,"int getPostId() {
		return this.postId;
	}
"
net.jforum.entities.ModerationLog.getTopicId,ModerationLog.java,"int getTopicId() {
		return this.topicId;
	}
"
net.jforum.entities.ModerationLog.setPostId,ModerationLog.java,"void setPostId(int postId) {
		this.postId = postId;
	}
"
net.jforum.entities.ModerationLog.setTopicId,ModerationLog.java,"void setTopicId(int topicId) {
		this.topicId = topicId;
	}
"
net.jforum.entities.ModerationLog.getPosterUser,ModerationLog.java,"User getPosterUser() {
		return this.posterUser;
	}
"
net.jforum.entities.ModerationLog.setPosterUser,ModerationLog.java,"void setPosterUser(User posterUser) {
		this.posterUser = posterUser;
	}
"
net.jforum.entities.Config.getName,Config.java,"String getName() {
		return this.name;
	}
"
net.jforum.entities.Config.getValue,Config.java,"String getValue() {
		return this.value;
	}
"
net.jforum.entities.Config.getId,Config.java,"int getId() {
		return this.id;
	}
"
net.jforum.entities.Config.setName,Config.java,"void setName(String string) {
		this.name = string;
	}
"
net.jforum.entities.Config.setValue,Config.java,"void setValue(String string) {
		this.value = string;
	}
"
net.jforum.entities.Config.setId,Config.java,"void setId(int id) {
		this.id = id;
	}
"
net.jforum.entities.Config.equals,Config.java,"boolean equals(Object o) {
		if (o == this) {
			return true;
		}

		if (!(o instanceof Config)) {
			return false;
		}

		Config c = (Config)o;
		return c.getId() == this.getId()
			&& c.getName().equals(this.getName())
			&& c.getValue().equals(this.getValue());
	}
"
net.jforum.entities.Config.hashCode,Config.java,"int hashCode() {
		return this.getId();
	}
"
net.jforum.entities.Config.toString,Config.java,"String toString() {
		return new StringBuilder()
			.append('[').append(this.getId()).append(',')
			.append(this.getName()).append(',')
			.append(this.getValue())
			.append(']')
			.toString();

	}
"
net.jforum.entities.AttachmentExtension.isAllowed,AttachmentExtension.java,"boolean isAllowed() {
		return this.allow;
	}
"
net.jforum.entities.AttachmentExtension.setAllowed,AttachmentExtension.java,"void setAllowed(boolean allow) {
		this.allow = allow;
	}
"
net.jforum.entities.AttachmentExtension.getComment,AttachmentExtension.java,"String getComment() {
		return this.description;
	}
"
net.jforum.entities.AttachmentExtension.setComment,AttachmentExtension.java,"void setComment(String comment) {
		this.description = comment;
	}
"
net.jforum.entities.AttachmentExtension.getExtension,AttachmentExtension.java,"String getExtension() {
		return this.extension;
	}
"
net.jforum.entities.AttachmentExtension.setExtension,AttachmentExtension.java,"void setExtension(String extension) {
		if (extension != null) {
			this.extension = extension.toLowerCase();
		}
	}
"
net.jforum.entities.AttachmentExtension.getExtensionGroup,AttachmentExtension.java,"AttachmentExtensionGroup getExtensionGroup() {
		return this.extensionGroup;
	}
"
net.jforum.entities.AttachmentExtension.setExtensionGroup,AttachmentExtension.java,"void setExtensionGroup(AttachmentExtensionGroup extensionGroup) {
		this.extensionGroup = extensionGroup;
	}
"
net.jforum.entities.AttachmentExtension.getId,AttachmentExtension.java,"int getId() {
		return this.id;
	}
"
net.jforum.entities.AttachmentExtension.setId,AttachmentExtension.java,"void setId(int id) {
		this.id = id;
	}
"
net.jforum.entities.AttachmentExtension.isUnknown,AttachmentExtension.java,"boolean isUnknown() {
		return this.unknown;
	}
"
net.jforum.entities.AttachmentExtension.setUnknown,AttachmentExtension.java,"void setUnknown(boolean unknown) {
		this.unknown = unknown;
	}
"
net.jforum.entities.Attachment.getDownloadCount,Attachment.java,"int getDownloadCount() {
		return this.downloadCount;
	}
"
net.jforum.entities.Attachment.setDownloadCount,Attachment.java,"void setDownloadCount(int downloadCount) {
		this.downloadCount = downloadCount;
	}
"
net.jforum.entities.Attachment.getPhysicalFilename,Attachment.java,"String getPhysicalFilename() {
		return this.physicalFilename;
	}
"
net.jforum.entities.Attachment.setPhysicalFilename,Attachment.java,"void setPhysicalFilename(String physicalFilename) {
		this.physicalFilename = physicalFilename;
	}
"
net.jforum.entities.Attachment.getRealFilename,Attachment.java,"String getRealFilename() {
		return this.realFilename;
	}
"
net.jforum.entities.Attachment.setRealFilename,Attachment.java,"void setRealFilename(String realFilename) {
		this.realFilename = realFilename;
	}
"
net.jforum.entities.Attachment.getDescription,Attachment.java,"String getDescription() {
		return this.description;
	}
"
net.jforum.entities.Attachment.setDescription,Attachment.java,"void setDescription(String description) {
		this.description = description;
	}
"
net.jforum.entities.Attachment.getMimetype,Attachment.java,"String getMimetype() {
		return this.mimetype;
	}
"
net.jforum.entities.Attachment.setMimetype,Attachment.java,"void setMimetype(String mimetype) {
		this.mimetype = mimetype;
	}
"
net.jforum.entities.Attachment.getUploadDate,Attachment.java,"Date getUploadDate() {
		return this.uploadDate;
	}
"
net.jforum.entities.Attachment.setUploadDate,Attachment.java,"void setUploadDate(Date uploadDate) {
		this.uploadDate = uploadDate;
	}
"
net.jforum.entities.Attachment.getFilesize,Attachment.java,"long getFilesize() {
		return this.filesize;
	}
"
net.jforum.entities.Attachment.setFilesize,Attachment.java,"void setFilesize(long filesize) {
		this.filesize = filesize;
	}
"
net.jforum.entities.Attachment.isHasThumb,Attachment.java,"boolean isHasThumb() {
		return this.hasThumb;
	}
"
net.jforum.entities.Attachment.setHasThumb,Attachment.java,"void setHasThumb(boolean hasThumb) {
		this.hasThumb = hasThumb;
	}
"
net.jforum.entities.Attachment.getId,Attachment.java,"int getId() {
		return this.id;
	}
"
net.jforum.entities.Attachment.setId,Attachment.java,"void setId(int id) {
		this.id = id;
	}
"
net.jforum.entities.Attachment.setPost,Attachment.java,"void setPost(Post post) {
		this.post = post;
	}
"
net.jforum.entities.Attachment.getPost,Attachment.java,"Post getPost() {
		return post;
	}
"
net.jforum.entities.Attachment.setFileExtension,Attachment.java,"void setFileExtension(String fileExtension) {
		this.fileExtension = fileExtension;
	}
"
net.jforum.entities.Attachment.getFileExtension,Attachment.java,"String getFileExtension() {
		return fileExtension;
	}
"
net.jforum.entities.Attachment.incrementDownloadCount,Attachment.java,"void incrementDownloadCount() {
		this.downloadCount++;
	}
"
net.jforum.entities.Attachment.hashCode,Attachment.java,"int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + this.id;
		return result;
	}
"
net.jforum.entities.Attachment.equals,Attachment.java,"boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		Attachment other = (Attachment) obj;
		if (this.id != other.id) {
			return false;
		}
		return true;
	}
"
net.jforum.entities.AttachmentQuota.exceedsQuota,AttachmentQuota.java,"boolean exceedsQuota(long size) {
		if (this.type == AttachmentQuota.KB) {
			return (size > this.size * 1024);
		}

		return (size > this.size * 1024 * 1024);
	}
"
net.jforum.entities.AttachmentQuota.getSizeInBytes,AttachmentQuota.java,"int getSizeInBytes() {
		if (this.type == AttachmentQuota.KB) {
			return (this.size * 1024);
		}

		return (this.size * 1024 * 1024);
	}
"
net.jforum.entities.AttachmentQuota.getDescription,AttachmentQuota.java,"String getDescription() {
		return this.description;
	}
"
net.jforum.entities.AttachmentQuota.setDescription,AttachmentQuota.java,"void setDescription(String description) {
		this.description = description;
	}
"
net.jforum.entities.AttachmentQuota.getId,AttachmentQuota.java,"Integer getId() {
		return this.id;
	}
"
net.jforum.entities.AttachmentQuota.setId,AttachmentQuota.java,"void setId(Integer id) {
		this.id = id;
	}
"
net.jforum.entities.AttachmentQuota.getSize,AttachmentQuota.java,"int getSize() {
		return this.size;
	}
"
net.jforum.entities.AttachmentQuota.setSize,AttachmentQuota.java,"void setSize(int size) {
		this.size = size;
	}
"
net.jforum.entities.AttachmentQuota.getType,AttachmentQuota.java,"int getType() {
		return this.type;
	}
"
net.jforum.entities.AttachmentQuota.setType,AttachmentQuota.java,"void setType(int type) {
		this.type = type;
	}
"
net.jforum.entities.AttachmentQuota.equals,AttachmentQuota.java,"boolean equals(Object obj) {
		if(obj == this){
			return true;
		}

		if(!(obj instanceof AttachmentQuota)){
			return false;
		}

		AttachmentQuota other = (AttachmentQuota) obj;
		return this.id.equals(other.id);
	}
"
net.jforum.entities.AttachmentQuota.hashCode,AttachmentQuota.java,"int hashCode() {
		return id.hashCode();
	}
"
net.jforum.entities.Topic.setPendingModeration,Topic.java,"void setPendingModeration(boolean status) {
		this.pendingModeration = status;
	}
"
net.jforum.entities.Topic.setRepository,Topic.java,"void setRepository(TopicRepository repository) {
		this.repository = repository;
	}
"
net.jforum.entities.Topic.getMovedId,Topic.java,"int getMovedId() {
		return this.movedId;
	}
"
net.jforum.entities.Topic.getHasMoved,Topic.java,"boolean getHasMoved() {
		return this.movedId > 0;
	}
"
net.jforum.entities.Topic.setMovedId,Topic.java,"void setMovedId(int movedId) {
		this.movedId = movedId;
	}
"
net.jforum.entities.Topic.getId,Topic.java,"int getId() {
		return this.id;
	}
"
net.jforum.entities.Topic.getPosts,Topic.java,"List<Post> getPosts() {
		return this.posts;
	}
"
net.jforum.entities.Topic.getPosts,Topic.java,"List<Post> getPosts(int start, int count) {
		this.assertRepository();
		return this.repository.getPosts(this, start, count);
	}
"
net.jforum.entities.Topic.getForum,Topic.java,"Forum getForum() {
		return this.forum;
	}
"
net.jforum.entities.Topic.getLastPost,Topic.java,"Post getLastPost() {
		return this.lastPost;
	}
"
net.jforum.entities.Topic.getStatus,Topic.java,"int getStatus() {
		return this.status;
	}
"
net.jforum.entities.Topic.getDate,Topic.java,"Date getDate() {
		return this.date;
	}
"
net.jforum.entities.Topic.getSubject,Topic.java,"String getSubject() {
		return this.subject == null ? """" : this.subject;
	}
"
net.jforum.entities.Topic.getTotalReplies,Topic.java,"int getTotalReplies() {
		return this.totalReplies;
	}
"
net.jforum.entities.Topic.getTotalPosts,Topic.java,"int getTotalPosts() {
		return this.getTotalReplies() + 1;
	}
"
net.jforum.entities.Topic.getTotalViews,Topic.java,"int getTotalViews() {
		return this.totalViews;
	}
"
net.jforum.entities.Topic.getUser,Topic.java,"User getUser() {
		return this.user;
	}
"
net.jforum.entities.Topic.getType,Topic.java,"int getType() {
		return this.type;
	}
"
net.jforum.entities.Topic.setId,Topic.java,"void setId(int id) {
		this.id = id;
	}
"
net.jforum.entities.Topic.setForum,Topic.java,"void setForum(Forum forum) {
		this.forum = forum;
	}
"
net.jforum.entities.Topic.setStatus,Topic.java,"void setStatus(int status) {
		this.status = status;
	}
"
net.jforum.entities.Topic.setDate,Topic.java,"void setDate(Date date) {
		this.date = date;
	}
"
net.jforum.entities.Topic.setSubject,Topic.java,"void setSubject(String title) {
		this.subject = title;
	}
"
net.jforum.entities.Topic.incrementTotalReplies,Topic.java,"void incrementTotalReplies() {
		this.totalReplies++;
	}
"
net.jforum.entities.Topic.decrementTotalReplies,Topic.java,"void decrementTotalReplies() {
		this.totalReplies--;
	}
"
net.jforum.entities.Topic.setType,Topic.java,"void setType(int type) {
		this.type = type;
	}
"
net.jforum.entities.Topic.setUser,Topic.java,"void setUser(User u) {
		this.user = u;
	}
"
net.jforum.entities.Topic.setPaginate,Topic.java,"void setPaginate(boolean paginate) {
		this.paginate = paginate;
	}
"
net.jforum.entities.Topic.getPaginate,Topic.java,"boolean getPaginate() {
		return this.paginate;
	}
"
net.jforum.entities.Topic.setHasAttachment,Topic.java,"void setHasAttachment(boolean b) {
		this.hasAttachment = b;
	}
"
net.jforum.entities.Topic.getHasAttachment,Topic.java,"boolean getHasAttachment() {
		return this.hasAttachment;
	}
"
net.jforum.entities.Topic.equals,Topic.java,"boolean equals(Object o) {
		if (o == this) {
			return true;
		}

		if (!(o instanceof Topic)) {
			return false;
		}

		return ((Topic) o).getId() == this.id;
	}
"
net.jforum.entities.Topic.isNormal,Topic.java,"boolean isNormal() {
		return this.getType() == TYPE_NORMAL;
	}
"
net.jforum.entities.Topic.isSticky,Topic.java,"boolean isSticky() {
		return this.getType() == TYPE_STICKY;
	}
"
net.jforum.entities.Topic.isAnnounce,Topic.java,"boolean isAnnounce() {
		return this.getType() == TYPE_ANNOUNCE;
	}
"
net.jforum.entities.Topic.isLocked,Topic.java,"boolean isLocked() {
		return this.getStatus() == STATUS_LOCKED;
	}
"
net.jforum.entities.Topic.unlock,Topic.java,"void unlock() {
		this.status = STATUS_UNLOCKED;
	}
"
net.jforum.entities.Topic.lock,Topic.java,"void lock() {
		this.status = STATUS_LOCKED;
	}
"
net.jforum.entities.Topic.getFirstPost,Topic.java,"Post getFirstPost() {
		return this.firstPost;
	}
"
net.jforum.entities.Topic.setFirstPost,Topic.java,"void setFirstPost(Post firstPost) {
		this.firstPost = firstPost;
	}
"
net.jforum.entities.Topic.setLastPost,Topic.java,"void setLastPost(Post lastPost) {
		this.lastPost = lastPost;
	}
"
net.jforum.entities.Topic.incrementViews,Topic.java,"void incrementViews() {
		this.totalViews++;
	}
"
net.jforum.entities.Topic.isWaitingModeration,Topic.java,"boolean isWaitingModeration() {
		return this.pendingModeration;
	}
"
net.jforum.entities.Topic.hashCode,Topic.java,"int hashCode() {
		return this.id;
	}
"
net.jforum.entities.Topic.toString,Topic.java,"String toString() {
		return new StringBuilder(64)
			.append('[')
			.append(this.id)
			.append("", "").append(this.subject)
			.append(']')
			.toString();
	}
"
net.jforum.entities.Topic.assertRepository,Topic.java,"void assertRepository() {
		if (this.repository == null) {
			throw new IllegalStateException(""repository was not initialized"");
		}
	}
"
net.jforum.entities.Topic.setPoll,Topic.java,"void setPoll(Poll poll) {
		this.poll = poll;

		if (poll != null) {
			this.pollId = poll.getId();
		}
	}
"
net.jforum.entities.Topic.getPoll,Topic.java,"Poll getPoll() {
		return poll;
	}
"
net.jforum.entities.Topic.isPollEnabled,Topic.java,"boolean isPollEnabled() {
		return this.pollId != null && this.pollId > 0;
	}
"
net.jforum.entities.PollOption.getId,PollOption.java,"int getId() {
		return id;
	}
"
net.jforum.entities.PollOption.setId,PollOption.java,"void setId(int id) {
		this.id = id;
	}
"
net.jforum.entities.PollOption.getText,PollOption.java,"String getText() {
		return text;
	}
"
net.jforum.entities.PollOption.setText,PollOption.java,"void setText(String text) {
		this.text = text;
	}
"
net.jforum.entities.PollOption.getVoteCount,PollOption.java,"int getVoteCount() {
		return voteCount;
	}
"
net.jforum.entities.PollOption.setVoteCount,PollOption.java,"void setVoteCount(int voteCount) {
		this.voteCount = voteCount;
	}
"
net.jforum.entities.PollOption.getVotePercentage,PollOption.java,"int getVotePercentage() {
		int percent = 0;

		if (this.poll != null) {
			int totalCount = this.poll.getTotalVotes();
			percent = Math.round(100f * this.voteCount / totalCount);
		}

		return percent;
	}
"
net.jforum.entities.PollOption.getPoll,PollOption.java,"Poll getPoll() {
		return poll;
	}
"
net.jforum.entities.PollOption.setPoll,PollOption.java,"void setPoll(Poll poll) {
		this.poll = poll;
	}
"
net.jforum.entities.PollOption.incrementVotes,PollOption.java,"void incrementVotes() {
		this.voteCount++;
	}
"
net.jforum.entities.PollOption.toString,PollOption.java,"String toString() {
		return new StringBuilder(128).append('[').append(this.id).append("", "")
			.append(this.text).append("", "").append(this.voteCount).append(']')
			.toString();
	}
"
net.jforum.entities.PollOption.equals,PollOption.java,"boolean equals(Object o) {
		if (!(o instanceof PollOption)) {
			return false;
		}

		PollOption po = (PollOption) o;
		return po.getId() == this.id
			&& po.getText().equals(this.text)
			&& po.getVoteCount() == this.voteCount;
	}
"
net.jforum.entities.PollOption.hashCode,PollOption.java,"int hashCode() {
		int result = 17;

		result *= 37 + this.id;
		result *= 37 + this.text.hashCode();
		result *= 37 + this.voteCount;

		return result;
	}
"
net.jforum.entities.Role.getId,Role.java,"int getId() {
		return id;
	}
"
net.jforum.entities.Role.setId,Role.java,"void setId(int id) {
		this.id = id;
	}
"
net.jforum.entities.Role.getName,Role.java,"String getName() {
		return name;
	}
"
net.jforum.entities.Role.setName,Role.java,"void setName(String name) {
		this.name = name;
	}
"
net.jforum.entities.Role.getGroup,Role.java,"Group getGroup() {
		return group;
	}
"
net.jforum.entities.Role.setGroup,Role.java,"void setGroup(Group group) {
		this.group = group;
	}
"
net.jforum.entities.Role.getRoleValues,Role.java,"List<Integer> getRoleValues() {
		return roleValues;
	}
"
net.jforum.entities.Role.addRoleValue,Role.java,"void addRoleValue(int value) {
		this.roleValues.add(value);
	}
"
net.jforum.entities.Role.equals,Role.java,"boolean equals(Object o) {
		if (o == this) {
			return true;
		}

		if (!(o instanceof Role)) {
			return false;
		}

		return ((Role)o).getId() == this.getId();
	}
"
net.jforum.entities.Role.hashCode,Role.java,"int hashCode() {
		return this.getId();
	}
"
net.jforum.entities.Role.toString,Role.java,"String toString() {
		return String.format(""%d => %s (%s)"", this.getId(), this.getName(), this.roleValues);
	}
"
net.jforum.entities.AttachmentExtensionGroup.getDownloadMode,AttachmentExtensionGroup.java,"int getDownloadMode()
	{
		return this.downloadMode;
	}
"
net.jforum.entities.AttachmentExtensionGroup.setDownloadMode,AttachmentExtensionGroup.java,"void setDownloadMode(int downloadMode)
	{
		this.downloadMode = downloadMode;
	}
"
net.jforum.entities.AttachmentExtensionGroup.isAllow,AttachmentExtensionGroup.java,"boolean isAllow()
	{
		return this.allow;
	}
"
net.jforum.entities.AttachmentExtensionGroup.setAllow,AttachmentExtensionGroup.java,"void setAllow(boolean allow)
	{
		this.allow = allow;
	}
"
net.jforum.entities.AttachmentExtensionGroup.getId,AttachmentExtensionGroup.java,"int getId()
	{
		return this.id;
	}
"
net.jforum.entities.AttachmentExtensionGroup.setId,AttachmentExtensionGroup.java,"void setId(int id)
	{
		this.id = id;
	}
"
net.jforum.entities.AttachmentExtensionGroup.getName,AttachmentExtensionGroup.java,"String getName()
	{
		return this.name;
	}
"
net.jforum.entities.AttachmentExtensionGroup.setName,AttachmentExtensionGroup.java,"void setName(String name)
	{
		this.name = name;
	}
"
net.jforum.entities.AttachmentExtensionGroup.getUploadIcon,AttachmentExtensionGroup.java,"String getUploadIcon()
	{
		return this.uploadIcon;
	}
"
net.jforum.entities.AttachmentExtensionGroup.setUploadIcon,AttachmentExtensionGroup.java,"void setUploadIcon(String uploadIcon)
	{
		this.uploadIcon = uploadIcon;
	}
"
net.jforum.entities.Theme.getId,Theme.java,"int getId() {
		return this.id;
	}
"
net.jforum.entities.Theme.setId,Theme.java,"void setId(int id) {
		this.id = id;
	}
"
net.jforum.entities.Theme.getStyleName,Theme.java,"String getStyleName() {
		return this.styleName;
	}
"
net.jforum.entities.Theme.setStyleName,Theme.java,"void setStyleName(String styleName) {
		this.styleName = styleName;
	}
"
net.jforum.entities.Theme.getTemplateName,Theme.java,"String getTemplateName() {
		return this.templateName;
	}
"
net.jforum.entities.Theme.setTemplateName,Theme.java,"void setTemplateName(String templateName) {
		this.templateName = templateName;
	}
"
net.jforum.entities.Session.getLastVisit,Session.java,"Date getLastVisit() {
		return this.lastVisit;
	}
"
net.jforum.entities.Session.setLastVisit,Session.java,"void setLastVisit(Date lastVisit) {
		this.lastVisit = lastVisit;
	}
"
net.jforum.entities.Session.getUserId,Session.java,"int getUserId() {
		return this.userId;
	}
"
net.jforum.entities.Session.setUserId,Session.java,"void setUserId(int userId) {
		this.userId = userId;
	}
"
net.jforum.entities.Session.getStart,Session.java,"Date getStart() {
		return this.start;
	}
"
net.jforum.entities.Session.setStart,Session.java,"void setStart(Date start) {
		this.start = start;
	}
"
net.jforum.entities.Session.getLastAccessed,Session.java,"Date getLastAccessed() {
		return this.lastAccessed;
	}
"
net.jforum.entities.Session.setLastAccessed,Session.java,"void setLastAccessed(Date date) {
		this.lastAccessed = date;
	}
"
net.jforum.entities.Session.getIp,Session.java,"String getIp() {
		return this.ip;
	}
"
net.jforum.entities.Session.setIp,Session.java,"void setIp(String ip) {
		this.ip = ip;
	}
"
net.jforum.entities.Smilie.getCode,Smilie.java,"String getCode() {
		return this.code;
	}
"
net.jforum.entities.Smilie.setCode,Smilie.java,"void setCode(String code) {
		this.code = code;
	}
"
net.jforum.entities.Smilie.setDiskName,Smilie.java,"void setDiskName(String diskName) {
		this.diskName = diskName;
	}
"
net.jforum.entities.Smilie.getId,Smilie.java,"int getId() {
		return this.id;
	}
"
net.jforum.entities.Smilie.setId,Smilie.java,"void setId(int id) {
		this.id = id;
	}
"
net.jforum.entities.Smilie.getDiskName,Smilie.java,"String getDiskName() {
		return this.diskName;
	}
"
net.jforum.entities.Smilie.hashCode,Smilie.java,"int hashCode() {
		return this.getId();
	}
"
net.jforum.entities.Smilie.equals,Smilie.java,"boolean equals(Object o) {
		if (o == this) {
			return true;
		}

		if (!(o instanceof Smilie)) {
			return false;
		}

		return ((Smilie)o).getId() == this.getId();
	}
"
net.jforum.entities.Smilie.toString,Smilie.java,"String toString() {
		return ""[smilie="" + this.getCode() + "", id="" + this.getId() + ""]"";
	}
"
net.jforum.entities.TopicWatch.getId,TopicWatch.java,"int getId() {
		return this.id;
	}
"
net.jforum.entities.TopicWatch.setId,TopicWatch.java,"void setId(int id) {
		this.id = id;
	}
"
net.jforum.entities.TopicWatch.getTopic,TopicWatch.java,"Topic getTopic() {
		return this.topic;
	}
"
net.jforum.entities.TopicWatch.setTopic,TopicWatch.java,"void setTopic(Topic topic) {
		this.topic = topic;
	}
"
net.jforum.entities.TopicWatch.getUser,TopicWatch.java,"User getUser() {
		return this.user;
	}
"
net.jforum.entities.TopicWatch.setUser,TopicWatch.java,"void setUser(User user) {
		this.user = user;
	}
"
net.jforum.entities.TopicWatch.isRead,TopicWatch.java,"boolean isRead() {
		return this.read;
	}
"
net.jforum.entities.TopicWatch.markAsRead,TopicWatch.java,"void markAsRead() {
		this.read = true;
	}
"
net.jforum.entities.TopicWatch.equals,TopicWatch.java,"boolean equals(Object o) {
		if (o == this) {
			return true;
		}

		if (!(o instanceof TopicWatch)) {
			return false;
		}

		return ((TopicWatch)o).getId() == this.getId();
	}
"
net.jforum.entities.TopicWatch.hashCode,TopicWatch.java,"int hashCode() {
		return this.getId();
	}
"
net.jforum.entities.PrivateMessage.getFromUser,PrivateMessage.java,"User getFromUser() {
		return fromUser;
	}
"
net.jforum.entities.PrivateMessage.setFromUser,PrivateMessage.java,"void setFromUser(User fromUser) {
		this.fromUser = fromUser;
	}
"
net.jforum.entities.PrivateMessage.getToUser,PrivateMessage.java,"User getToUser() {
		return toUser;
	}
"
net.jforum.entities.PrivateMessage.setToUser,PrivateMessage.java,"void setToUser(User toUser) {
		this.toUser = toUser;
	}
"
net.jforum.entities.PrivateMessage.getType,PrivateMessage.java,"int getType() {
		return type;
	}
"
net.jforum.entities.PrivateMessage.setType,PrivateMessage.java,"void setType(int type) {
		this.type = type;
	}
"
net.jforum.entities.PrivateMessage.getId,PrivateMessage.java,"int getId() {
		return id;
	}
"
net.jforum.entities.PrivateMessage.setId,PrivateMessage.java,"void setId(int id) {
		this.id = id;
	}
"
net.jforum.entities.PrivateMessage.getDate,PrivateMessage.java,"Date getDate() {
		return this.date;
	}
"
net.jforum.entities.PrivateMessage.setDate,PrivateMessage.java,"void setDate(Date date) {
		this.date = date;
	}
"
net.jforum.entities.PrivateMessage.getText,PrivateMessage.java,"String getText() {
		return this.text;
	}
"
net.jforum.entities.PrivateMessage.setText,PrivateMessage.java,"void setText(String text) {
		this.text = text;
	}
"
net.jforum.entities.PrivateMessage.getSubject,PrivateMessage.java,"String getSubject() {
		return this.subject;
	}
"
net.jforum.entities.PrivateMessage.setSubject,PrivateMessage.java,"void setSubject(String subject) {
		this.subject = subject;
	}
"
net.jforum.entities.PrivateMessage.isBbCodeEnabled,PrivateMessage.java,"boolean isBbCodeEnabled() {
		return this.bbCodeEnabled;
	}
"
net.jforum.entities.PrivateMessage.setBbCodeEnabled,PrivateMessage.java,"void setBbCodeEnabled(boolean bbCodeEnabled) {
		this.bbCodeEnabled = bbCodeEnabled;
	}
"
net.jforum.entities.PrivateMessage.isHtmlEnabled,PrivateMessage.java,"boolean isHtmlEnabled() {
		return this.htmlEnabled;
	}
"
net.jforum.entities.PrivateMessage.setHtmlEnabled,PrivateMessage.java,"void setHtmlEnabled(boolean htmlEnabled) {
		this.htmlEnabled = htmlEnabled;
	}
"
net.jforum.entities.PrivateMessage.isSmiliesEnabled,PrivateMessage.java,"boolean isSmiliesEnabled() {
		return this.smiliesEnabled;
	}
"
net.jforum.entities.PrivateMessage.setSmiliesEnabled,PrivateMessage.java,"void setSmiliesEnabled(boolean smiliesEnabled) {
		this.smiliesEnabled = smiliesEnabled;
	}
"
net.jforum.entities.PrivateMessage.isSignatureEnabled,PrivateMessage.java,"boolean isSignatureEnabled() {
		return this.signatureEnabled;
	}
"
net.jforum.entities.PrivateMessage.setSignatureEnabled,PrivateMessage.java,"void setSignatureEnabled(boolean signatureEnabled) {
		this.signatureEnabled = signatureEnabled;
	}
"
net.jforum.entities.PrivateMessage.isNew,PrivateMessage.java,"boolean isNew() {
		return this.type == PrivateMessageType.NEW;
	}
"
net.jforum.entities.PrivateMessage.markAsRead,PrivateMessage.java,"void markAsRead() {
		this.type = PrivateMessageType.READ;
	}
"
net.jforum.entities.PrivateMessage.asPost,PrivateMessage.java,"Post asPost() {
		Post post = new Post();

		post.setSubject(this.subject);
		post.setText(this.text);
		post.setBbCodeEnabled(this.isBbCodeEnabled());
		post.setHtmlEnabled(this.isHtmlEnabled());
		post.setSmiliesEnabled(this.isSmiliesEnabled());
		post.setSignatureEnabled(this.isSignatureEnabled());

		return post;
	}
"
net.jforum.entities.PrivateMessage.equals,PrivateMessage.java,"boolean equals(Object o) {
		if (o == this) {
			return true;
		}

		if (!(o instanceof PrivateMessage)) {
			return false;
		}

		return ((PrivateMessage) o).getId() == this.getId();
	}
"
net.jforum.entities.PrivateMessage.hashCode,PrivateMessage.java,"int hashCode() {
		return this.getId();
	}
"
net.jforum.entities.PrivateMessage.setIp,PrivateMessage.java,"void setIp(String ip) {
		this.ip = ip;
	}
"
net.jforum.entities.PrivateMessage.getIp,PrivateMessage.java,"String getIp() {
		return ip;
	}
"
net.jforum.entities.ForumStats.getPosts,ForumStats.java,"int getPosts() {
		return this.posts;
	}
"
net.jforum.entities.ForumStats.setPosts,ForumStats.java,"void setPosts(int posts) {
		this.posts = posts;
	}
"
net.jforum.entities.ForumStats.getPostsPerDay,ForumStats.java,"double getPostsPerDay() {
		return this.postsPerDay;
	}
"
net.jforum.entities.ForumStats.setPostsPerDay,ForumStats.java,"void setPostsPerDay(double postsPerDay) {
		this.postsPerDay = postsPerDay;
	}
"
net.jforum.entities.ForumStats.getTopics,ForumStats.java,"int getTopics() {
		return this.topics;
	}
"
net.jforum.entities.ForumStats.setTotalTopics,ForumStats.java,"void setTotalTopics(int topics) {
		this.topics = topics;
	}
"
net.jforum.entities.ForumStats.getTopicsPerDay,ForumStats.java,"double getTopicsPerDay() {
		return this.topicsPerDay;
	}
"
net.jforum.entities.ForumStats.setTopicsPerDay,ForumStats.java,"void setTopicsPerDay(double topicsPerDay) {
		this.topicsPerDay = topicsPerDay;
	}
"
net.jforum.entities.ForumStats.getUsers,ForumStats.java,"int getUsers() {
		return this.users;
	}
"
net.jforum.entities.ForumStats.setTotalUsers,ForumStats.java,"void setTotalUsers(int users) {
		this.users = users;
	}
"
net.jforum.entities.ForumStats.getUsersPerDay,ForumStats.java,"double getUsersPerDay() {
		return this.usersPerDay;
	}
"
net.jforum.entities.ForumStats.setUsersPerDay,ForumStats.java,"void setUsersPerDay(double usersPerDay) {
		this.usersPerDay = usersPerDay;
	}
"
net.jforum.entities.util.PaginatedResult.getResults,PaginatedResult.java,"List<T> getResults() {
		return this.results;
	}
"
net.jforum.entities.util.PaginatedResult.getTotalRecords,PaginatedResult.java,"int getTotalRecords() {
		return this.totalRecords;
	}
"
net.jforum.entities.util.Pagination.forUsers,Pagination.java,"Pagination forUsers(int totalUsers) {
		this.recordsPerPage = this.config.getInt(ConfigKeys.USERS_PER_PAGE);
		this.totalRecords = totalUsers;
		this.totalPages = this.calculeTotalPages();
		this.thisPage = this.calculeThisPage(this.start);
		this.start = this.calculeStart(this.start, this.recordsPerPage);
		this.baseUrl = String.format(""/%s/%s"", Domain.USERS_ADMIN, Actions.LIST);
		this.id = 0;

		return this;
	}
"
net.jforum.entities.util.Pagination.forModerationLog,Pagination.java,"Pagination forModerationLog(int totalRecords) {
		this.recordsPerPage = this.config.getInt(ConfigKeys.TOPICS_PER_PAGE);
		this.totalRecords = totalRecords;
		this.totalPages = this.calculeTotalPages();
		this.thisPage = this.calculeThisPage(this.start);
		this.start = this.calculeStart(this.start, this.recordsPerPage);
		this.baseUrl = String.format(""/%s/%s"", Domain.MODERATION, Actions.SHOW_ACTIVITY_LOG);
		this.id = 0;

		return this;
	}
"
net.jforum.entities.util.Pagination.forSearch,Pagination.java,"Pagination forSearch(int totalRecords) {
		this.recordsPerPage = this.config.getInt(ConfigKeys.TOPICS_PER_PAGE);
		this.totalRecords = totalRecords;
		this.totalPages = this.calculeTotalPages();
		this.thisPage = this.calculeThisPage(this.start);
		this.start = this.calculeStart(this.start, this.recordsPerPage);
		this.baseUrl = String.format(""/%s/%s"", Domain.SEARCH, Actions.EXECUTE);
		this.id = 0;

		return this;
	}
"
net.jforum.entities.util.Pagination.forPostReports,Pagination.java,"Pagination forPostReports(int totalRecords) {
		this.recordsPerPage = this.config.getInt(ConfigKeys.TOPICS_PER_PAGE);
		this.totalRecords = totalRecords;
		this.totalPages = this.calculeTotalPages();
		this.thisPage = this.calculeThisPage(this.start);
		this.start = this.calculeStart(this.start, this.recordsPerPage);
		this.baseUrl = String.format(""/%s/%s"", Domain.POST_REPORT, Actions.LIST_RESOLVED);
		this.id = 0;

		return this;
	}
"
net.jforum.entities.util.Pagination.forNewMessages,Pagination.java,"Pagination forNewMessages(int totalRecords) {
		this.recordsPerPage = this.config.getInt(ConfigKeys.TOPICS_PER_PAGE);
		this.totalRecords = totalRecords;
		this.totalPages = this.calculeTotalPages();
		this.thisPage = this.calculeThisPage(this.start);
		this.start = this.calculeStart(this.start, this.recordsPerPage);
		this.baseUrl = String.format(""/%s/%s"", Domain.FORUMS, Actions.NEW_MESSAGES);
		this.id = 0;

		return this;
	}
"
net.jforum.entities.util.Pagination.forForum,Pagination.java,"Pagination forForum(Forum forum) {
		this.recordsPerPage = this.config.getInt(ConfigKeys.TOPICS_PER_PAGE);
		this.totalRecords = forum.getTotalTopics();
		this.totalPages = this.calculeTotalPages();
		this.thisPage = this.calculeThisPage(this.start);
		this.start = this.calculeStart(this.start, this.recordsPerPage);
		this.baseUrl = String.format(""/%s/%s"", Domain.FORUMS, Actions.SHOW);
		this.id = forum.getId();

		return this;
	}
"
net.jforum.entities.util.Pagination.forTopic,Pagination.java,"Pagination forTopic(Topic topic) {
		this.recordsPerPage = this.config.getInt(ConfigKeys.POSTS_PER_PAGE);
		this.totalRecords = topic.getTotalPosts();
		this.totalPages = this.calculeTotalPages();
		this.thisPage = this.calculeThisPage(this.start);
		this.start = this.calculeStart(this.start, this.recordsPerPage);
		this.baseUrl = String.format(""/%s/%s"", Domain.TOPICS, Actions.LIST);
		this.id = topic.getId();

		return this;
	}
"
net.jforum.entities.util.Pagination.forUserPosts,Pagination.java,"Pagination forUserPosts(User user) {
		this.recordsPerPage = this.config.getInt(ConfigKeys.POSTS_PER_PAGE);
		this.totalRecords = user.getTotalPosts();
		this.totalPages = this.calculeTotalPages();
		this.thisPage = this.calculeThisPage(this.start);
		this.start = this.calculeStart(this.start, this.recordsPerPage);
		this.baseUrl = String.format(""/%s/%s"", Domain.USER, Actions.POSTS);
		this.id = user.getId();

		return this;
	}
"
net.jforum.entities.util.Pagination.forUserTopics,Pagination.java,"Pagination forUserTopics(User user, int totalTopics) {
		this.recordsPerPage = this.config.getInt(ConfigKeys.TOPICS_PER_PAGE);
		this.totalRecords = totalTopics;
		this.totalPages = this.calculeTotalPages();
		this.thisPage = this.calculeThisPage(this.start);
		this.start = this.calculeStart(this.start, this.recordsPerPage);
		this.baseUrl = String.format(""/%s/%s"", Domain.USER, Actions.TOPICS);
		this.id = user.getId();

		return this;
	}
"
net.jforum.entities.util.Pagination.getStart,Pagination.java,"int getStart() {
		return this.start;
	}
"
net.jforum.entities.util.Pagination.getId,Pagination.java,"int getId() {
		return this.id;
	}
"
net.jforum.entities.util.Pagination.getBaseUrl,Pagination.java,"String getBaseUrl() {
		return this.baseUrl;
	}
"
net.jforum.entities.util.Pagination.getTotalPages,Pagination.java,"int getTotalPages() {
		return totalPages;
	}
"
net.jforum.entities.util.Pagination.getRecordsPerPage,Pagination.java,"int getRecordsPerPage() {
		return recordsPerPage;
	}
"
net.jforum.entities.util.Pagination.getTotalRecords,Pagination.java,"long getTotalRecords() {
		return totalRecords;
	}
"
net.jforum.entities.util.Pagination.getThisPage,Pagination.java,"int getThisPage() {
		return thisPage;
	}
"
net.jforum.entities.util.Pagination.equals,Pagination.java,"boolean equals(Object o) {
		return o == this || o instanceof Pagination;
	}
"
net.jforum.entities.util.Pagination.calculeThisPage,Pagination.java,"int calculeThisPage(int page) {
		return Math.min(this.totalPages, Math.max(1, page));
	}
"
net.jforum.entities.util.Pagination.calculeStartFromCount,Pagination.java,"int calculeStartFromCount(int count, int recordsPerPage) {
		return count / recordsPerPage + (count % recordsPerPage > 0 ? 1 : 0);
	}
"
net.jforum.entities.util.Pagination.calculeStart,Pagination.java,"int calculeStart(int page, int recordsPerPage) {
		return page <= 1 ? 0 : (page - 1) * recordsPerPage;
	}
"
net.jforum.entities.util.Pagination.calculeTotalPages,Pagination.java,"int calculeTotalPages() {
		return (int)Math.ceil((double)this.totalRecords / (double)this.recordsPerPage);
	}
"
net.jforum.entities.util.SearchParams.setForum,SearchParams.java,"void setForum(Forum forum) {
		this.forum = forum;
	}
"
net.jforum.entities.util.SearchParams.setSortType,SearchParams.java,"void setSortType(SearchSortType sortType) {
		this.sortType = sortType;
	}
"
net.jforum.entities.util.SearchParams.setSort,SearchParams.java,"void setSort(SearchSort sort) {
		this.sort = sort;
	}
"
net.jforum.entities.util.SearchParams.setMatchType,SearchParams.java,"void setMatchType(SearchMatchType matchType) {
		this.matchType = matchType;
	}
"
net.jforum.entities.util.SearchParams.setQuery,SearchParams.java,"void setQuery(String query) {
		this.query = query;
	}
"
net.jforum.entities.util.SearchParams.setMaxResults,SearchParams.java,"void setMaxResults(int max) {
		this.maxResults = max;
	}
"
net.jforum.entities.util.SearchParams.setStart,SearchParams.java,"void setStart(int start) {
		this.start = start;
	}
"
net.jforum.entities.util.SearchParams.getMatchType,SearchParams.java,"SearchMatchType getMatchType() {
		return this.matchType;
	}
"
net.jforum.entities.util.SearchParams.getQuery,SearchParams.java,"String getQuery() {
		return this.query;
	}
"
net.jforum.entities.util.SearchParams.getSortType,SearchParams.java,"SearchSortType getSortType() {
		return this.sortType;
	}
"
net.jforum.entities.util.SearchParams.getSort,SearchParams.java,"SearchSort getSort() {
		return this.sort;
	}
"
net.jforum.entities.util.SearchParams.getMaxResults,SearchParams.java,"int getMaxResults() {
		return this.maxResults;
	}
"
net.jforum.entities.util.SearchParams.getForum,SearchParams.java,"Forum getForum() {
		return this.forum;
	}
"
net.jforum.entities.util.SearchParams.getStart,SearchParams.java,"int getStart() {
		return this.start;
	}
"
net.jforum.entities.util.SearchParams.getUser,SearchParams.java,"String getUser() {
		return user;
	}
"
net.jforum.entities.util.SearchParams.setUser,SearchParams.java,"void setUser(String user) {
		this.user = user;
	}
"
net.jforum.entities.util.SearchParams.buildQuery,SearchParams.java,"String buildQuery() {
		String userQuery = StringUtils.isNotEmpty(user) ? MessageFormat.format(""+(user.username:{0} user.firstName:{0} user.lastName:{0} user.email:{0})"", user) : """";

		String text = """";
		if (StringUtils.isNotEmpty(query)) {
			text = this.matchType == SearchMatchType.AND
				? this.query.replaceAll(this.regex, "" +"")
				: this.query;
		}

		String subject = """";
		if (StringUtils.isNotEmpty(query)) {
			subject = this.query.replaceAll(this.regex,
					(this.matchType == SearchMatchType.AND ? "" +subject:"" : "" subject:""));
		}

		String forumQuery = """";
		if (this.forum != null && this.forum.getId() > 0) {
			forumQuery = ""and +topic.forum.id:"" + this.forum.getId();
		}

		return String.format(""(%s %s %s) or (%s %s %s)"", text.trim(), userQuery, forumQuery, subject.trim(), userQuery, forumQuery).trim();
	}
"
net.jforum.entities.util.SearchResult.filter,SearchResult.java,"SearchResult filter(RoleManager roleManager) {
		for (Iterator<Post> iter = this.getResults().iterator(); iter.hasNext(); ) {
			Post post = iter.next();

			if (!roleManager.isForumAllowed(post.getForum().getId())) {
				iter.remove();
				this.totalRecords--;
			}
		}

		return this;
	}
"
net.jforum.controllers.AdminControllerTestCase.AdminControllerTestCase,AdminControllerTestCase.java,"public AdminControllerTestCase() {
    super();
}"
net.jforum.repository.PollRepository.PollRepository,PollRepository.java,"public PollRepository() {
    super();
}"
net.jforum.repository.RSSRepository.RSSRepository,RSSRepository.java,"public RSSRepository() {
    super();
}"
net.jforum.util.mail.LostPasswordSpammer.LostPasswordSpammer,LostPasswordSpammer.java,"public LostPasswordSpammer() {
    super();
}"
net.jforum.controllers.GroupAdminControllerTestCase.GroupAdminControllerTestCase,GroupAdminControllerTestCase.java,"public GroupAdminControllerTestCase() {
    super();
}"
net.jforum.entities.Forum.Forum,Forum.java,"public Forum() {
    super();
}"
net.jforum.security.ChangePostRule.ChangePostRule,ChangePostRule.java,"public ChangePostRule() {
    super();
}"
net.jforum.core.tags.SettingsTag.SettingsTag,SettingsTag.java,"public SettingsTag() {
    super();
}"
net.jforum.bbcode.Size_TestCase.Size_TestCase,Size_TestCase.java,"public Size_TestCase() {
    super();
}"
net.jforum.entities.Post.Post,Post.java,"public Post() {
    super();
}"
net.jforum.core.events.post.TopicReplyEvent.TopicReplyEvent,TopicReplyEvent.java,"public TopicReplyEvent() {
    super();
}"
net.jforum.actions.interceptors.SecurityInterceptor.SecurityInterceptor,SecurityInterceptor.java,"public SecurityInterceptor() {
    super();
}"
net.jforum.services.ModerationLogService.ModerationLogService,ModerationLogService.java,"public ModerationLogService() {
    super();
}"
net.jforum.entities.Avatar.Avatar,Avatar.java,"public Avatar() {
    super();
}"
net.jforum.core.exceptions.DatabaseException.DatabaseException,DatabaseException.java,"public DatabaseException() {
    super();
}"
net.jforum.util.JForumConfig.JForumConfig,JForumConfig.java,"public JForumConfig() {
    super();
}"
net.jforum.repository.BanlistRepository.BanlistRepository,BanlistRepository.java,"public BanlistRepository() {
    super();
}"
net.jforum.entities.Config.Config,Config.java,"public Config() {
    super();
}"
net.jforum.events.EmptyPostEvent.EmptyPostEvent,EmptyPostEvent.java,"public EmptyPostEvent() {
    super();
}"
net.jforum.util.mail.TopicReplySpammer.TopicReplySpammer,TopicReplySpammer.java,"public TopicReplySpammer() {
    super();
}"
net.jforum.entities.PostReport.PostReport,PostReport.java,"public PostReport() {
    super();
}"
net.jforum.security.PrivateMessageEnabledRule.PrivateMessageEnabledRule,PrivateMessageEnabledRule.java,"public PrivateMessageEnabledRule() {
    super();
}"
net.jforum.util.mail.IdentifiableMimeMessage.IdentifiableMimeMessage,IdentifiableMimeMessage.java,"public IdentifiableMimeMessage() {
    super();
}"
net.jforum.security.AuthenticatedRule.AuthenticatedRule,AuthenticatedRule.java,"public AuthenticatedRule() {
    super();
}"
net.jforum.repository.AttachmentRepository.AttachmentRepository,AttachmentRepository.java,"public AttachmentRepository() {
    super();
}"
net.jforum.entities.UserSession.UserSession,UserSession.java,"public UserSession() {
    super();
}"
net.jforum.entities.TopicWatch.TopicWatch,TopicWatch.java,"public TopicWatch() {
    super();
}"
net.jforum.sso.LoginAuthenticator.LoginAuthenticator,LoginAuthenticator.java,"public LoginAuthenticator() {
    super();
}"
net.jforum.repository.CategoryRepository.CategoryRepository,CategoryRepository.java,"public CategoryRepository() {
    super();
}"
net.jforum.core.events.post.TopicWatchPostEvent.TopicWatchPostEvent,TopicWatchPostEvent.java,"public TopicWatchPostEvent() {
    super();
}"
net.jforum.core.events.post.TopicPostEvent.TopicPostEvent,TopicPostEvent.java,"public TopicPostEvent() {
    super();
}"
net.jforum.entities.Smilie.Smilie,Smilie.java,"public Smilie() {
    super();
}"
net.jforum.util.ImageInfo.ImageInfo,ImageInfo.java,"public ImageInfo() {
    super();
}"
net.jforum.bbcode.TagBaseTest.TagBaseTest,TagBaseTest.java,"public TagBaseTest() {
    super();
}"
net.jforum.security.DownloadAttachmentRule.DownloadAttachmentRule,DownloadAttachmentRule.java,"public DownloadAttachmentRule() {
    super();
}"
net.jforum.services.ModerationService.ModerationService,ModerationService.java,"public ModerationService() {
    super();
}"
net.jforum.controllers.BanlistAdminControllerTestCase.BanlistAdminControllerTestCase,BanlistAdminControllerTestCase.java,"public BanlistAdminControllerTestCase() {
    super();
}"
net.jforum.core.events.forum.NewForumGroupPermissionsEvent.NewForumGroupPermissionsEvent,NewForumGroupPermissionsEvent.java,"public NewForumGroupPermissionsEvent() {
    super();
}"
net.jforum.entities.BadWord.BadWord,BadWord.java,"public BadWord() {
    super();
}"
net.jforum.core.support.hibernate.SpringInterceptor.SpringInterceptor,SpringInterceptor.java,"public SpringInterceptor() {
    super();
}"
net.jforum.util.mail.LostPasswordSpammerTestCase.LostPasswordSpammerTestCase,LostPasswordSpammerTestCase.java,"public LostPasswordSpammerTestCase() {
    super();
}"
net.jforum.repository.SessionRepository.SessionRepository,SessionRepository.java,"public SessionRepository() {
    super();
}"
net.jforum.util.mail.Spammer.Spammer,Spammer.java,"public Spammer() {
    super();
}"
net.jforum.formatters.BBCodeConfigParser.BBCodeConfigParser,BBCodeConfigParser.java,"public BBCodeConfigParser() {
    super();
}"
net.jforum.api.JForumExecutionContext.JForumExecutionContext,JForumExecutionContext.java,"public JForumExecutionContext() {
    super();
}"
net.jforum.core.tags.URLTag.URLTag,URLTag.java,"public URLTag() {
    super();
}"
net.jforum.actions.helpers.PostFormOptions.PostFormOptions,PostFormOptions.java,"public PostFormOptions() {
    super();
}"
net.jforum.core.VRaptorCustomPathResolver.VRaptorCustomPathResolver,VRaptorCustomPathResolver.java,"public VRaptorCustomPathResolver() {
    super();
}"
net.jforum.sso.DefaultLoginAuthenticator.DefaultLoginAuthenticator,DefaultLoginAuthenticator.java,"public DefaultLoginAuthenticator() {
    super();
}"
net.jforum.entities.PollOption.PollOption,PollOption.java,"public PollOption() {
    super();
}"
net.jforum.entities.Topic.Topic,Topic.java,"public Topic() {
    super();
}"
net.jforum.util.JDBCLoader.JDBCLoader,JDBCLoader.java,"public JDBCLoader() {
    super();
}"
net.jforum.repository.PostRepository.PostRepository,PostRepository.java,"public PostRepository() {
    super();
}"
net.jforum.sso.SSO.SSO,SSO.java,"public SSO() {
    super();
}"
net.jforum.entities.util.Pagination.Pagination,Pagination.java,"public Pagination() {
    super();
}"
net.jforum.events.EmptyForumEvent.EmptyForumEvent,EmptyForumEvent.java,"public EmptyForumEvent() {
    super();
}"
net.jforum.entities.Banlist.Banlist,Banlist.java,"public Banlist() {
    super();
}"
net.jforum.util.SafeHtml.SafeHtml,SafeHtml.java,"public SafeHtml() {
    super();
}"
net.jforum.util.I18n.I18n,I18n.java,"public I18n() {
    super();
}"
net.jforum.plugins.post.ForumLimitedTime.ForumLimitedTime,ForumLimitedTime.java,"public ForumLimitedTime() {
    super();
}"
net.jforum.formatters.SmiliesFormatter.SmiliesFormatter,SmiliesFormatter.java,"public SmiliesFormatter() {
    super();
}"
net.jforum.entities.PollVoter.PollVoter,PollVoter.java,"public PollVoter() {
    super();
}"
net.jforum.core.exceptions.ValidationException.ValidationException,ValidationException.java,"public ValidationException() {
    super();
}"
net.jforum.bbcode.DescriptiveUrl_TestCase.DescriptiveUrl_TestCase,DescriptiveUrl_TestCase.java,"public DescriptiveUrl_TestCase() {
    super();
}"
net.jforum.core.tags.TemplateResourceTag.TemplateResourceTag,TemplateResourceTag.java,"public TemplateResourceTag() {
    super();
}"
net.jforum.security.ReplyTopicRule.ReplyTopicRule,ReplyTopicRule.java,"public ReplyTopicRule() {
    super();
}"
net.jforum.util.UploadUtils.UploadUtils,UploadUtils.java,"public UploadUtils() {
    super();
}"
net.jforum.util.mail.MailTestCase.MailTestCase,MailTestCase.java,"public MailTestCase() {
    super();
}"
net.jforum.repository.AvatarRepository.AvatarRepository,AvatarRepository.java,"public AvatarRepository() {
    super();
}"
net.jforum.formatters.NewLineToHtmlBreakFormatter.NewLineToHtmlBreakFormatter,NewLineToHtmlBreakFormatter.java,"public NewLineToHtmlBreakFormatter() {
    super();
}"
net.jforum.repository.UserRepository.UserRepository,UserRepository.java,"public UserRepository() {
    super();
}"
net.jforum.repository.BadWordRepository.BadWordRepository,BadWordRepository.java,"public BadWordRepository() {
    super();
}"
net.jforum.entities.ForumWatch.ForumWatch,ForumWatch.java,"public ForumWatch() {
    super();
}"
net.jforum.core.hibernate.tests.EmptyCache.EmptyCache,EmptyCache.java,"public EmptyCache() {
    super();
}"
net.jforum.actions.interceptors.ControllerSecurityInterceptor.ControllerSecurityInterceptor,ControllerSecurityInterceptor.java,"public ControllerSecurityInterceptor() {
    super();
}"
net.jforum.bbcode.B_TestCase.B_TestCase,B_TestCase.java,"public B_TestCase() {
    super();
}"
net.jforum.bbcode.YouTube_TestCase.YouTube_TestCase,YouTube_TestCase.java,"public YouTube_TestCase() {
    super();
}"
net.jforum.security.EmptyRule.EmptyRule,EmptyRule.java,"public EmptyRule() {
    super();
}"
net.jforum.entities.PrivateMessage.PrivateMessage,PrivateMessage.java,"public PrivateMessage() {
    super();
}"
net.jforum.entities.Poll.Poll,Poll.java,"public Poll() {
    super();
}"
net.jforum.actions.interceptors.SessionManagerInterceptor.SessionManagerInterceptor,SessionManagerInterceptor.java,"public SessionManagerInterceptor() {
    super();
}"
net.jforum.extensions.PostReportCounterOperation.PostReportCounterOperation,PostReportCounterOperation.java,"public PostReportCounterOperation() {
    super();
}"
net.jforum.core.exceptions.AccessRuleException.AccessRuleException,AccessRuleException.java,"public AccessRuleException() {
    super();
}"
net.jforum.util.mail.EmailSenderTask.EmailSenderTask,EmailSenderTask.java,"public EmailSenderTask() {
    super();
}"
net.jforum.util.mail.TopicReplySpammerTestCase.TopicReplySpammerTestCase,TopicReplySpammerTestCase.java,"public TopicReplySpammerTestCase() {
    super();
}"
net.jforum.controllers.ForumAdminControllerTestCase.ForumAdminControllerTestCase,ForumAdminControllerTestCase.java,"public ForumAdminControllerTestCase() {
    super();
}"
net.jforum.security.CreateNewTopicRule.CreateNewTopicRule,CreateNewTopicRule.java,"public CreateNewTopicRule() {
    super();
}"
net.jforum.entities.Ranking.Ranking,Ranking.java,"public Ranking() {
    super();
}"
net.jforum.entities.ModerationLog.ModerationLog,ModerationLog.java,"public ModerationLog() {
    super();
}"
net.jforum.controllers.SmilieAdminControllerTestCase.SmilieAdminControllerTestCase,SmilieAdminControllerTestCase.java,"public SmilieAdminControllerTestCase() {
    super();
}"
net.jforum.controllers.BanlistAdminController.BanlistAdminController,BanlistAdminController.java,"public BanlistAdminController() {
    super();
}"
net.jforum.security.AccessForumRule.AccessForumRule,AccessForumRule.java,"public AccessForumRule() {
    super();
}"
net.jforum.bbcode.IMG_TestCase.IMG_TestCase,IMG_TestCase.java,"public IMG_TestCase() {
    super();
}"
net.jforum.actions.interceptors.MethodSecurityInterceptor.MethodSecurityInterceptor,MethodSecurityInterceptor.java,"public MethodSecurityInterceptor() {
    super();
}"
net.jforum.core.events.category.NewCategoryGroupPermissionsEvent.NewCategoryGroupPermissionsEvent,NewCategoryGroupPermissionsEvent.java,"public NewCategoryGroupPermissionsEvent() {
    super();
}"
net.jforum.extensions.RequestOperation.RequestOperation,RequestOperation.java,"public RequestOperation() {
    super();
}"
net.jforum.core.tags.FormatSignatureTag.FormatSignatureTag,FormatSignatureTag.java,"public FormatSignatureTag() {
    super();
}"
net.jforum.util.mail.PrivateMessageSpammer.PrivateMessageSpammer,PrivateMessageSpammer.java,"public PrivateMessageSpammer() {
    super();
}"
net.jforum.bbcode.Color_TestCase.Color_TestCase,Color_TestCase.java,"public Color_TestCase() {
    super();
}"
net.jforum.repository.ModerationLogRepository.ModerationLogRepository,ModerationLogRepository.java,"public ModerationLogRepository() {
    super();
}"
net.jforum.entities.Role.Role,Role.java,"public Role() {
    super();
}"
net.jforum.services.UserService.UserService,UserService.java,"public UserService() {
    super();
}"
net.jforum.actions.helpers.AttachedFile.AttachedFile,AttachedFile.java,"public AttachedFile() {
    super();
}"
net.jforum.bbcode.I_TestCase.I_TestCase,I_TestCase.java,"public I_TestCase() {
    super();
}"
net.jforum.formatters.BBConfigFormatter.BBConfigFormatter,BBConfigFormatter.java,"public BBConfigFormatter() {
    super();
}"
net.jforum.security.AdministrationRule.AdministrationRule,AdministrationRule.java,"public AdministrationRule() {
    super();
}"
net.jforum.util.GroupInteractionFilter.GroupInteractionFilter,GroupInteractionFilter.java,"public GroupInteractionFilter() {
    super();
}"
net.jforum.entities.Attachment.Attachment,Attachment.java,"public Attachment() {
    super();
}"
net.jforum.core.tags.I18nTag.I18nTag,I18nTag.java,"public I18nTag() {
    super();
}"
net.jforum.repository.ConfigRepository.ConfigRepository,ConfigRepository.java,"public ConfigRepository() {
    super();
}"
net.jforum.repository.SmilieRepository.SmilieRepository,SmilieRepository.java,"public SmilieRepository() {
    super();
}"
net.jforum.bbcode.SimpleUrl_TestCase.SimpleUrl_TestCase,SimpleUrl_TestCase.java,"public SimpleUrl_TestCase() {
    super();
}"
net.jforum.core.exceptions.MailException.MailException,MailException.java,"public MailException() {
    super();
}"
net.jforum.formatters.PostFormatters.PostFormatters,PostFormatters.java,"public PostFormatters() {
    super();
}"
net.jforum.core.events.topic.ForumTopicEvent.ForumTopicEvent,ForumTopicEvent.java,"public ForumTopicEvent() {
    super();
}"
net.jforum.sso.RemoteUserSSO.RemoteUserSSO,RemoteUserSSO.java,"public RemoteUserSSO() {
    super();
}"
net.jforum.repository.TopicWatchRepository.TopicWatchRepository,TopicWatchRepository.java,"public TopicWatchRepository() {
    super();
}"
net.jforum.core.tags.DisplayFormattedMessageTag.DisplayFormattedMessageTag,DisplayFormattedMessageTag.java,"public DisplayFormattedMessageTag() {
    super();
}"
net.jforum.core.tags.ImportFileTag.ImportFileTag,ImportFileTag.java,"public ImportFileTag() {
    super();
}"
net.jforum.repository.TopicRepository.TopicRepository,TopicRepository.java,"public TopicRepository() {
    super();
}"
net.jforum.formatters.BBCode.BBCode,BBCode.java,"public BBCode() {
    super();
}"
net.jforum.bbcode.AutoEmail_TestCase.AutoEmail_TestCase,AutoEmail_TestCase.java,"public AutoEmail_TestCase() {
    super();
}"
net.jforum.controllers.CategoryAdminControllerTestCase.CategoryAdminControllerTestCase,CategoryAdminControllerTestCase.java,"public CategoryAdminControllerTestCase() {
    super();
}"
net.jforum.core.tags.DisplayCategoriesTag.DisplayCategoriesTag,DisplayCategoriesTag.java,"public DisplayCategoriesTag() {
    super();
}"
net.jforum.entities.User.User,User.java,"public User() {
    super();
}"
net.jforum.entities.Category.Category,Category.java,"public Category() {
    super();
}"
net.jforum.security.PrivateMessageOwnerRule.PrivateMessageOwnerRule,PrivateMessageOwnerRule.java,"public PrivateMessageOwnerRule() {
    super();
}"
net.jforum.core.support.hibernate.QueryCache.QueryCache,QueryCache.java,"public QueryCache() {
    super();
}"
net.jforum.controllers.RankingAdminControllerTestCase.RankingAdminControllerTestCase,RankingAdminControllerTestCase.java,"public RankingAdminControllerTestCase() {
    super();
}"
net.jforum.sso.SSOUtils.SSOUtils,SSOUtils.java,"public SSOUtils() {
    super();
}"
net.jforum.core.support.hibernate.SpringSessionFactory.SpringSessionFactory,SpringSessionFactory.java,"public SpringSessionFactory() {
    super();
}"
net.jforum.repository.PostReportRepository.PostReportRepository,PostReportRepository.java,"public PostReportRepository() {
    super();
}"
net.jforum.core.tags.ImportResponseWrapper.ImportResponseWrapper,ImportResponseWrapper.java,"public ImportResponseWrapper() {
    super();
}"
net.jforum.security.AccessRule.AccessRule,AccessRule.java,"public AccessRule() {
    super();
}"
net.jforum.controllers.BadWordControllerActionsTestCase.BadWordControllerActionsTestCase,BadWordControllerActionsTestCase.java,"public BadWordControllerActionsTestCase() {
    super();
}"
net.jforum.security.EditUserRule.EditUserRule,EditUserRule.java,"public EditUserRule() {
    super();
}"
net.jforum.core.events.topic.TopicWatchTopicEvent.TopicWatchTopicEvent,TopicWatchTopicEvent.java,"public TopicWatchTopicEvent() {
    super();
}"
net.jforum.security.TopicFilter.TopicFilter,TopicFilter.java,"public TopicFilter() {
    super();
}"
net.jforum.core.events.post.ForumPostEvent.ForumPostEvent,ForumPostEvent.java,"public ForumPostEvent() {
    super();
}"
net.jforum.actions.helpers.ApproveInfo.ApproveInfo,ApproveInfo.java,"public ApproveInfo() {
    super();
}"
net.jforum.formatters.SafeHtmlTagsFormatter.SafeHtmlTagsFormatter,SafeHtmlTagsFormatter.java,"public SafeHtmlTagsFormatter() {
    super();
}"
net.jforum.util.mail.ActivationKeySpammer.ActivationKeySpammer,ActivationKeySpammer.java,"public ActivationKeySpammer() {
    super();
}"
net.jforum.formatters.Formatter.Formatter,Formatter.java,"public Formatter() {
    super();
}"
net.jforum.bbcode.U_TestCase.U_TestCase,U_TestCase.java,"public U_TestCase() {
    super();
}"
net.jforum.entities.Group.Group,Group.java,"public Group() {
    super();
}"
net.jforum.security.RoleManager.RoleManager,RoleManager.java,"public RoleManager() {
    super();
}"
net.jforum.repository.RankingRepository.RankingRepository,RankingRepository.java,"public RankingRepository() {
    super();
}"
net.jforum.bbcode.Google_TestCase.Google_TestCase,Google_TestCase.java,"public Google_TestCase() {
    super();
}"
net.jforum.security.ModerationRule.ModerationRule,ModerationRule.java,"public ModerationRule() {
    super();
}"
net.jforum.core.events.post.BadWordEvent.BadWordEvent,BadWordEvent.java,"public BadWordEvent() {
    super();
}"
net.jforum.repository.ThemeRepository.ThemeRepository,ThemeRepository.java,"public ThemeRepository() {
    super();
}"
net.jforum.controllers.CategoryAdminController.CategoryAdminController,CategoryAdminController.java,"public CategoryAdminController() {
    super();
}"
net.jforum.entities.Session.Session,Session.java,"public Session() {
    super();
}"
net.jforum.entities.ForumStats.ForumStats,ForumStats.java,"public ForumStats() {
    super();
}"
net.jforum.repository.PrivateMessageRepository.PrivateMessageRepository,PrivateMessageRepository.java,"public PrivateMessageRepository() {
    super();
}"
net.jforum.controllers.AvatarAdminControllerTestCase.AvatarAdminControllerTestCase,AvatarAdminControllerTestCase.java,"public AvatarAdminControllerTestCase() {
    super();
}"
net.jforum.entities.MostUsersEverOnline.MostUsersEverOnline,MostUsersEverOnline.java,"public MostUsersEverOnline() {
    super();
}"
net.jforum.plugins.post.ForumLimitedTimeRepository.ForumLimitedTimeRepository,ForumLimitedTimeRepository.java,"public ForumLimitedTimeRepository() {
    super();
}"
net.jforum.util.mail.MessageId.MessageId,MessageId.java,"public MessageId() {
    super();
}"
net.jforum.events.EmptyCategoryEvent.EmptyCategoryEvent,EmptyCategoryEvent.java,"public EmptyCategoryEvent() {
    super();
}"
net.jforum.repository.ForumRepository.ForumRepository,ForumRepository.java,"public ForumRepository() {
    super();
}"
net.jforum.core.exceptions.ForumException.ForumException,ForumException.java,"public ForumException() {
    super();
}"
net.jforum.core.tags.DisplayForumsTag.DisplayForumsTag,DisplayForumsTag.java,"public DisplayForumsTag() {
    super();
}"
net.jforum.formatters.SafeHtmlAttributesFormatter.SafeHtmlAttributesFormatter,SafeHtmlAttributesFormatter.java,"public SafeHtmlAttributesFormatter() {
    super();
}"
net.jforum.core.UrlPattern.UrlPattern,UrlPattern.java,"public UrlPattern() {
    super();
}"
net.jforum.services.PollService.PollService,PollService.java,"public PollService() {
    super();
}"
net.jforum.controllers.AdminTestCase.AdminTestCase,AdminTestCase.java,"public AdminTestCase() {
    super();
}"
net.jforum.controllers.UserAdminControllerTestCase.UserAdminControllerTestCase,UserAdminControllerTestCase.java,"public UserAdminControllerTestCase() {
    super();
}"
net.jforum.core.tags.JForumTag.JForumTag,JForumTag.java,"public JForumTag() {
    super();
}"
net.jforum.entities.util.SearchParams.SearchParams,SearchParams.java,"public SearchParams() {
    super();
}"
net.jforum.events.EmptyTopicEvent.EmptyTopicEvent,EmptyTopicEvent.java,"public EmptyTopicEvent() {
    super();
}"
net.jforum.repository.RecentTopicsRepository.RecentTopicsRepository,RecentTopicsRepository.java,"public RecentTopicsRepository() {
    super();
}"
net.jforum.repository.GroupRepository.GroupRepository,GroupRepository.java,"public GroupRepository() {
    super();
}"
net.jforum.entities.util.SearchResult.SearchResult,SearchResult.java,"public SearchResult() {
    super();
}"
net.jforum.formatters.HtmlEntitiesFormatter.HtmlEntitiesFormatter,HtmlEntitiesFormatter.java,"public HtmlEntitiesFormatter() {
    super();
}"
net.jforum.formatters.PostOptions.PostOptions,PostOptions.java,"public PostOptions() {
    super();
}"
