org.compiere.MigrateData.release252c,MigrateData.java,"void release252c()
	{
		String sql = ""SELECT COUNT(*) FROM M_ProductDownload"";
		int no = DB.getSQLValue(null, sql);
		if (no > 0)
		{
			log.finer(""No Need - Downloads #"" + no);
			return;
		}
		//
		log.info(""Setting Product Downloads ..."");
		int count = 0;
		sql = ""SELECT AD_Client_ID, AD_Org_ID, M_Product_ID, Name, DownloadURL ""
			+ ""FROM M_Product ""
			+ ""WHERE DownloadURL IS NOT NULL"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				int AD_Client_ID = rs.getInt(1);
				int AD_Org_ID = rs.getInt(2);
				int M_Product_ID = rs.getInt(3);
				String Name = rs.getString(4);
				String DownloadURL = rs.getString(5);
				//
				Ctx ctx = new Ctx(Env.getCtx());
				ctx.setAD_Client_ID(AD_Client_ID);
				ctx.setAD_Org_ID(AD_Org_ID);
				MProductDownload pdl = new MProductDownload(ctx, 0, null);
				pdl.setM_Product_ID(M_Product_ID);
				pdl.setName(Name);
				pdl.setDownloadURL(DownloadURL);
				if (pdl.save())
				{
					count++;
					String sqlUpdate = ""UPDATE M_Product SET DownloadURL = NULL WHERE M_Product_ID="" + M_Product_ID;
					int updated = DB.executeUpdate(sqlUpdate, (Trx) null);
					if (updated != 1)
						log.warning(""Product not updated"");
				}
				else
					log.warning(""Product Download not created M_Product_ID="" + M_Product_ID);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		log.info(""#"" + count);
	}	//	release252c
"
org.compiere.MigrateData.afterMigrationUser,MigrateData.java,"void afterMigrationUser(Ctx ctx)
	{
		log.info(""Setting User Key ..."");
		String sql = ""SELECT * FROM AD_User WHERE Value IS NULL"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				MUser user = new MUser(ctx, rs, null);
				user.setValue(user.getValue());
				user.save();
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.severe(e.getLocalizedMessage());
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
	}	//	afterMigrationUser
"
org.compiere.MigrateData.main,MigrateData.java,"void main (String[] args)
	{
		Compiere.startup(true, false, ""MigrateData"");
		new MigrateData();
	}	//	main
"
org.compiere.tools.Strip.stripDirectory,Strip.java,"void stripDirectory (String directory, String nameMustContain)
	{
		if (directory == null)
			throw new NullPointerException(""Strip: directory cannot be null"");
		File dir = new File (directory);
		if (!dir.exists() || !dir.isDirectory())
			throw new IllegalArgumentException (""Strip: directory  does not exist or is not a directory: "" + dir);

		File[] list = dir.listFiles();
		if (list == null)
			return;
		if (VERBOSE)
			System.out.println(""Stripping directory: "" + dir);
		for (File element : list) {
			String name = element.getAbsolutePath();
			if (element.isDirectory())
				stripDirectory (name, nameMustContain);
			else if (nameMustContain == null || name.indexOf(nameMustContain) != -1)
				strip (element, null);
		}
	}   //  stripDirectory
"
org.compiere.tools.Strip.strip,Strip.java,"boolean strip (String infile, String outfile)
	{
		if (infile == null)
			throw new NullPointerException(""Strip: infile cannot be null"");
		File in = new File (infile);
		File out = null;
		if (outfile != null)
			out = new File (outfile);
		//
		return strip (in, out);
	}   //  strip
"
org.compiere.tools.Strip.strip,Strip.java,"boolean strip (File infile, File outfile)
	{
		if (infile == null)
			throw new NullPointerException (""Strip: infile cannot ne null"");
		//  infile
		if (!infile.exists() || !infile.isFile())
			throw new IllegalArgumentException (""Strip: infile does not exist or is not a file: "" + infile);
		System.out.println(""Stripping file: "" + infile);

		//  outfile
		if (infile.equals(outfile))
			outfile = null;
		boolean tempfile = false;
		if (outfile == null)
		{
			try
			{
				outfile = File.createTempFile(""strip"", "".txt"");
			}
			catch (IOException ioe)
			{
				System.err.println(ioe);
				return false;
			}
			tempfile = true;
		}
		//
		try
		{
			if (VERBOSE)
				System.out.println(""Creating: "" + outfile);
			outfile.createNewFile();
		}
		catch (IOException ioe)
		{
			System.err.println(ioe);
			return false;
		}
		if (!outfile.exists() || !outfile.canWrite())
			throw new IllegalArgumentException (""Strip output file cannot be created or written: "" + outfile);

		//  copy it
		if (!copy (infile, outfile))
			return false;

		//  rename outfile
		if (tempfile)
		{
			if (VERBOSE)
				System.out.print(""Renaming original: "" + infile);
			if (!infile.renameTo(new File(infile.getAbsolutePath() + "".bak"")))
				System.err.println(""Could not rename original file: "" + infile);
			if (VERBOSE)
				System.out.println("" - Renaming: "" + outfile + "" to: "" + infile);
			if (!outfile.renameTo(infile))
				System.err.println(""Could not rename "" + outfile + "" to: "" + infile);
		}
		return true;
	}   //  strip
"
org.compiere.tools.Strip.copy,Strip.java,"boolean copy (File infile, File outfile)
	{
		FileInputStream fis = null;
		try
		{
			fis = new FileInputStream(infile);
		}
		catch (FileNotFoundException fnfe)
		{
			System.err.println(fnfe);
			return false;
		}
		//
		FileOutputStream fos = null;
		try
		{
			fos = new FileOutputStream(outfile, false);    //  no append
		}
		catch (FileNotFoundException fnfe)
		{
			System.err.println(fnfe);
			return false;
		}

		int noIn = 0;
		int noOut = 0;
		int noLines = 1;
		try
		{
			int c;
			while ((c = fis.read()) != -1)
			{
				noIn++;
				if (c != 10)    //  lf
				{
					fos.write(c);
					noOut++;
				}
				if (c == 13)    //  cr
					noLines++;
			}
			fis.close();
			fos.close();
		}
		catch (IOException ioe)
		{
			System.err.println(ioe);
			return false;
		}
		System.out.println(""  read: "" + noIn + "", written: "" + noOut + "" - lines: "" + noLines);
		return true;
	}   //  stripIt
"
org.compiere.tools.Strip.main,Strip.java,"void main(String[] args)
	{
		if (args.length == 0)
		{
			System.err.println(""Syntax: Strip infile outfile"");
			System.exit(-1);
		}
		String p2 = null;
		if (args.length > 1)
			p2 = args[1];
		//
		new Strip().strip(args[0], p2);
	}   //  main
"
org.compiere.tools.VolumeTest.prepare,VolumeTest.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para)
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""Prefix""))
				p_Prefix = (String)element.getParameter();
			else if (name.equals(""VolumeBPartner""))
				p_VolumeBPartner = element.getParameterAsInt();
			else if (name.equals(""VolumeUser""))
				p_VolumeUser = element.getParameterAsInt();
			else if (name.equals(""AD_Role_ID""))
				p_AD_Role_ID = element.getParameterAsInt();
			//
			else if (name.equals(""VolumeProduct""))
				p_VolumeProduct = element.getParameterAsInt();
			else if (name.equals(""VolumeOrder""))
				p_VolumeOrder = element.getParameterAsInt();
			else if (name.equals(""VolumeLine""))
				p_VolumeLine = element.getParameterAsInt();
			//
			else if (name.equals(""DocAction""))
				p_DocAction = (String)element.getParameter();
			else if (name.equals(""C_DocTypeTarget_ID""))
				p_C_DocTypeTarget_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		if (Util.isEmpty(p_Prefix))
			p_Prefix = String.valueOf(System.currentTimeMillis()) + ""_"";
	}	//	prepare
"
org.compiere.tools.VolumeTest.doIt,VolumeTest.java,"String doIt() throws Exception
	{
		log.info(""Prefix="" + p_Prefix
			+ "",VolumeBPartner="" + p_VolumeBPartner
			+ "",VolumeUser="" + p_VolumeUser + "",AD_Role_ID="" + p_AD_Role_ID
			+ "",VolumeProduct="" + p_VolumeProduct
			+ "",VolumeOrder="" + p_VolumeOrder
			+ "",VolumeLine="" + p_VolumeLine
			+ "",C_DocTypeTarget_ID="" + p_C_DocTypeTarget_ID
			+ "",DocAction"" + p_DocAction);
		//	Verify
		if (getCtx().getAD_Client_ID() == 0)
			throw new IllegalArgumentException(""Cannot run in Client=System"");
		MDocType dt = new MDocType(getCtx(), p_C_DocTypeTarget_ID, null);
		if (dt.getC_DocType_ID() != p_C_DocTypeTarget_ID)
			throw new IllegalArgumentException(""@NotFound@ @C_DocTypeTarget_ID@ - ID="" + p_C_DocTypeTarget_ID);
		if (dt.getAD_Client_ID() != getCtx().getAD_Client_ID())
			throw new IllegalArgumentException(""Client conflict: "" + dt);

		m_pl = MPriceList.getDefault(getCtx(), true);
		if (m_pl == null)
			throw new IllegalArgumentException(""@NotFound@ @M_PriceList_ID@"");
		m_plv = m_pl.getPriceListVersion(null);
		if (m_pl == null)
			throw new IllegalArgumentException(""@NotFound@ @M_PriceListVersion_ID@"");

		//
		long start = System.currentTimeMillis();
		createBPartners(dt.isSOTrx());
		createProducts(dt.isSOTrx());
		createOrders();
		//
		long end = System.currentTimeMillis();
		long durationMS = end - start;
		long duration = durationMS/1000;
		return ""Total: "" + duration + ""s"";
	}	//	doIt
"
org.compiere.tools.VolumeTest.createBPartners,VolumeTest.java,"void createBPartners(boolean isSOTrx)
	{
		long start = System.currentTimeMillis();
		int AD_Client_ID = getCtx().getAD_Client_ID();
		int count = 0;
		int error = 0;
		for (int i = 0; i < p_VolumeBPartner; i++)
		{
			MBPartner bp = MBPartner.getTemplate(getCtx(), AD_Client_ID);
			bp.setValue (p_Prefix + ""_BP_"" + i);
			bp.setName (p_Prefix + ""_BP_"" + i);
			if (isSOTrx)
				bp.setIsCustomer(true);
			else
				bp.setIsVendor(true);
			if (!bp.save(get_TrxName()))
			{
				error++;
				continue;
			}
			MLocation addr = new MLocation(getCtx(), 0, get_TrxName());
			addr.setAddress1(p_Prefix + ""_addr_"" + i);
			addr.setCity(""City_"" + i);
			if (!addr.save())
			{
				error++;
				continue;
			}
			MBPartnerLocation loc = new MBPartnerLocation(bp);
			loc.setC_Location_ID(addr.getC_Location_ID());
			if (!loc.save())
			{
				error++;
				continue;
			}
			//	Users
			for (int u = 0; u < p_VolumeUser; u++)
			{
				MUser user = new MUser(bp);
				user.setValue(p_Prefix + ""_U_"" + i + ""-"" + u);
				user.setValue(p_Prefix + ""_User_"" + i + ""-"" + u);
				user.setEMail(p_Prefix + i + u + ""@compieretest.com"");
				user.setPassword(user.getValue());
				if (!user.save(get_TrxName()))
				{
					error++;
					continue;
				}
				if (p_AD_Role_ID != 0)
				{
					MUserRoles ur = new MUserRoles(getCtx(), user.getAD_User_ID(), p_AD_Role_ID, get_TrxName());
					if (!ur.save())
					{
						error++;
						continue;
					}
				}
			}

			//
			m_bpartners.add(bp);
			count++;
			if (i > 0 && i % COMMITCOUNT == 0)
				commit();
		}
		commit();
		long end = System.currentTimeMillis();
		long durationMS = end - start;
		long duration = durationMS/1000;
		String msg = ""BPartner #"" + count + ""(Errors="" + error + "") in "" + duration + ""s = ""
			+ durationMS/count + ""ms/BPartner"";
		log.info(msg);
		addLog(msg);
	}	//	createBPartners
"
org.compiere.tools.VolumeTest.createProducts,VolumeTest.java,"void createProducts(boolean isSOTrx)
	{
		long start = System.currentTimeMillis();
		int count = 0;
		int error = 0;
		BigDecimal factorList = new BigDecimal(1.2);
		BigDecimal factorLimit = new BigDecimal(0.8);
		Random random = new Random();
		//
		for (int i = 0; i < p_VolumeProduct; i++)
		{
			MProduct p = new MProduct(getCtx(), 0, get_TrxName());
			p.setValue (p_Prefix + ""_P_"" + i);
			p.setName (p_Prefix + ""_P_"" + i);
			p.setIsStocked(false);
			if (isSOTrx)
				p.setIsSold(true);
			else
				p.setIsPurchased(true);
			//
			if (!p.save())
			{
				error++;
				continue;
			}
			//	Price
			MProductPrice pp = new MProductPrice(getCtx(),
				m_plv.getM_PriceList_Version_ID(),
				p.getM_Product_ID(), get_TrxName());
			double dd = random.nextDouble() * 10;
			BigDecimal price = new BigDecimal(dd);
			pp.setPrices(price.multiply(factorList), price,
				price.multiply(factorLimit));
			if (!pp.save())
			{
				error++;
				continue;
			}
			m_products.add(p);
			count++;
			if (i > 0 && i % COMMITCOUNT == 0)
				commit();
		}
		commit();
		long end = System.currentTimeMillis();
		long durationMS = end - start;
		long duration = durationMS/1000;
		String msg = ""BProduct #"" + count + ""(Errors="" + error + "") in "" + duration + ""s = ""
			+ durationMS/count + ""ms/Product"";
		log.info(msg);
		addLog(msg);
	}	//	createProducts
"
org.compiere.tools.VolumeTest.createOrders,VolumeTest.java,"void createOrders()
	{
		long start = System.currentTimeMillis();

		Random random = new Random();
		int SalesRep_ID = getCtx().getAD_User_ID();
		ArrayList<MBPartner> bpartners = getBPartners();
		if (bpartners == null)
			throw new IllegalArgumentException(""No BPartner found"");
		int indexBP = 0;
		ArrayList<MProduct> products = getProducts();
		if (products == null)
			throw new IllegalArgumentException(""No Product found"");
		int indexProduct = 0;
		//
		int countOrder = 0;
		int countLine = 0;
		int errorOrder = 0;
		int errorLine = 0;
		int errorProcess = 0;
		//	Create
		for (int i = 0; i < p_VolumeOrder; i++)
		{
			MBPartner bp = bpartners.get(indexBP++);
			if (indexBP >= bpartners.size())
				indexBP = 0;

			MOrder order = new MOrder(getCtx(), 0, get_TrxName());
			order.setDescription(p_Prefix + ""_O_"" + i );
			order.setC_DocTypeTarget_ID(p_C_DocTypeTarget_ID);
			order.setBPartner(bp);
			order.setSalesRep_ID(SalesRep_ID);
			order.setDeliveryRule(X_C_Order.DELIVERYRULE_Force);
			if (!order.save())
			{
				log.warning(""Order #"" + i + "": Not saved(1)"");
				errorOrder++;
				continue;
			}
			//	Lines
			for (int j = 0; j < p_VolumeLine; j++)
			{
				MProduct prod = products.get(indexProduct++);
				if (indexProduct >= products.size())
					indexProduct = 0;
				MOrderLine line = new MOrderLine(order);
				line.setProduct(prod);
				int qty = random.nextInt(10) + 1;
				line.setQty(new BigDecimal(qty));
				line.setDescription(p_Prefix + ""_O_"" + i + ""_L_"" + j);
				if (!line.save())
				{
					log.warning(""#"" + i + ""_"" + j + "": Line not saved"");
					errorLine++;
					continue;
				}
				countLine++;
			}
			//	Process
			if (!Util.isEmpty(p_DocAction))
			{
				order.setDocAction(p_DocAction);
				if (!order.processIt(p_DocAction))
				{
					log.warning(""#"" + i + "": Not processed"");
					errorProcess++;
					continue;
				}
				if (!order.save())
				{
					log.warning(""#"" + i + "": Not saved(2)"");
					errorProcess++;
					continue;
				}
			}
			countOrder++;
			if (i > 0 && i % COMMITCOUNT == 0)
				commit();
		}
		commit();
		long end = System.currentTimeMillis();
		long durationMS = end - start;
		long duration = durationMS/1000;
		String msg = ""Order #"" + countOrder + "" | "" + countLine + "" in "" + duration + ""s = ""
			+ durationMS/countOrder + ""ms/Order = ""
			+ durationMS/countLine + ""ms/Line"";
		log.info(msg);
		addLog(msg);
		msg = ""#Errors: Order="" + errorOrder + "", Process="" + errorProcess
			+ "", Line="" + errorLine;
		log.info(msg);
		addLog(msg);
	}	//	createOrders
"
org.compiere.tools.VolumeTest.getBPartners,VolumeTest.java,"ArrayList<MBPartner> getBPartners()
	{
		if (m_bpartners.size() > 0)
			return m_bpartners;
		String sql = ""SELECT * FROM C_BPartner ""
			+ ""WHERE IsActive='Y' AND (IsCustomer='Y' OR IsVendor='Y') AND AD_Client_ID=?"";
        PreparedStatement pstmt = null;
        try
        {
	        pstmt = DB.prepareStatement(sql, get_TrxName());
	        pstmt.setInt(1, getCtx().getAD_Client_ID());
	        ResultSet rs = pstmt.executeQuery();
	        while (rs.next())
	        	m_bpartners.add(new MBPartner(getCtx(), rs, null));
	        rs.close();
	        pstmt.close();
	        pstmt = null;
        }
        catch (Exception e)
        {
	        log.log(Level.SEVERE, sql, e);
        }
        try
        {
	        if (pstmt != null)
		        pstmt.close();
	        pstmt = null;
        }
        catch (Exception e)
        {
	        pstmt = null;
        }
        log.info(""Loaded #"" + m_bpartners.size());
		if (m_bpartners.size() == 0)
			return null;
		return m_bpartners;
	}	//	getBPartners
"
org.compiere.tools.VolumeTest.getProducts,VolumeTest.java,"ArrayList<MProduct> getProducts()
	{
		if (m_products.size() > 0)
			return m_products;
		String sql = ""SELECT * FROM M_Product p ""
			+ ""WHERE IsActive='Y' AND AD_Client_ID=?""
			+ "" AND EXISTS (SELECT * FROM M_ProductPrice pp ""
				+ ""WHERE pp.M_PriceList_Version_ID=? AND pp.M_Product_ID=p.M_Product_ID)"";
        PreparedStatement pstmt = null;
        try
        {
	        pstmt = DB.prepareStatement(sql, get_TrxName());
	        pstmt.setInt(1, getCtx().getAD_Client_ID());
	        pstmt.setInt(2, m_plv.getM_PriceList_Version_ID());
	        ResultSet rs = pstmt.executeQuery();
	        while (rs.next())
	        	m_products.add(new MProduct(getCtx(), rs, null));
	        rs.close();
	        pstmt.close();
	        pstmt = null;
        }
        catch (Exception e)
        {
	        log.log(Level.SEVERE, sql, e);
        }
        try
        {
	        if (pstmt != null)
		        pstmt.close();
	        pstmt = null;
        }
        catch (Exception e)
        {
	        pstmt = null;
        }
        log.info(""Loaded #"" + m_products.size());
		if (m_products.size() == 0)
			return null;
		return m_products;
	}	//	getProducts
"
org.compiere.tools.VolumeTest.main,VolumeTest.java,"void main(String[] args)
    {
		Compiere.startup(true);
		CLogMgt.setLoggerLevel(Level.INFO, null);
		CLogMgt.setLevel(Level.INFO);
		//	Same Login entries as entered
		Ini.setProperty(Ini.P_UID, ""GardenAdmin"");
		Ini.setProperty(Ini.P_PWD, ""GardenAdmin"");
		Ini.setProperty(Ini.P_ROLE, ""GardenWorld Admin"");
		Ini.setProperty(Ini.P_CLIENT, ""GardenWorld"");
		Ini.setProperty(Ini.P_ORG, ""HQ"");
		Ini.setProperty(Ini.P_WAREHOUSE, ""HQ Warehouse"");
		Ini.setProperty(Ini.P_LANGUAGE, ""English"");
		Ctx ctx = Env.getCtx();
		Login login = new Login(ctx);
		if (!login.batchLogin(null, null))
			System.exit(1);

		//	Reduce Log level for performance
	//	CLogMgt.setLoggerLevel(Level.WARNING, null);
	//	CLogMgt.setLevel(Level.WARNING);

		//	Data from Login Context
		int AD_Client_ID = ctx.getAD_Client_ID();
		int AD_User_ID = ctx.getAD_User_ID();
		//	Hardcoded
		int AD_Process_ID = 412;
		int AD_Table_ID = 0;
		int Record_ID = 0;

		//	Step 1: Setup Process
		MPInstance instance = new MPInstance(Env.getCtx(), AD_Process_ID, Record_ID);
		instance.save();
		/* Parameters
		MPInstancePara para1 = new MPInstancePara(instance, 10);
		para1.setParameter(""AD_Client_ID"", AD_Client_ID);
		para1.save();
		/* */
		// Step 2: Process Info - the parameter for Processes
		ProcessInfo pi = new ProcessInfo(""VolumeTest"", AD_Process_ID, AD_Table_ID, Record_ID);
		pi.setAD_Client_ID(AD_Client_ID);
		pi.setAD_User_ID(AD_User_ID);
		pi.setIsBatch(false);  //  want to wait for result
		pi.setAD_PInstance_ID (instance.getAD_PInstance_ID());

		// Step 3: Run the process directly
		VolumeTest test = new VolumeTest();
		/**	Initialize parameter (will be overwritten by parameters above	*/
		if (args.length > 0)
			test.p_VolumeBPartner = PO.convertToInt(args[0]);
		if (args.length > 1)
			test.p_VolumeProduct = PO.convertToInt(args[1]);
		if (args.length > 2)
			test.p_VolumeOrder = PO.convertToInt(args[2]);
		if (args.length > 3)
			test.p_VolumeLine = PO.convertToInt(args[3]);
		test.p_DocAction = X_C_Order.DOCACTION_Complete;
		test.startProcess(ctx, pi, null);

		// Step 4: get results
		if (pi.isError())
			System.err.println(""Error: "" + pi.getSummary());
		else
			System.out.println(""OK: "" + pi.getSummary());
		System.out.println(pi.getLogInfo());

    }	//	main
"
org.compiere.tools.FileUtilFilter.validAction,FileUtil.java,"boolean validAction (String action)
	{
		for (int i = 0; i < ACTIONS.length; i++)
		{
			if (ACTIONS[i].equals (action))
			{
				m_actionIndex = i;
				return true;
			}
		}
		return false;
	}	//	validAction
"
org.compiere.tools.FileUtilFilter.processFile,FileUtil.java,"void processFile (File file, String p1, String p2)
	{
		if (file == null)
			return;
		else if (!file.exists())
			return;
		else if (file.isDirectory())
		{
			File[] dirFiles = file.listFiles(m_filter);
			for (File element : dirFiles)
				processFile(element, p1, p2);
		}
		else
		{
			System.out.println("" ProcessFile="" + file.getAbsolutePath());
			m_count++;
			processFileAction(file, p1, p2);
		}
	}	//	processFile
"
org.compiere.tools.FileUtilFilter.processFileAction,FileUtil.java,"void processFileAction(File file, String p1, String p2)
	{
		try
		{
			if (m_actionIndex == 0)			//	List
				;
			else if (m_actionIndex == 1)	//	Replace
				replaceString (file, p1, p2);
			else if (m_actionIndex == 2)	//	Latex
				latex (file);
			else if (m_actionIndex == 3)	//	License
				license (file);
		}
		catch (Exception ex)
		{
		}
	}	//	processFileAction
"
org.compiere.tools.FileUtilFilter.replaceString,FileUtil.java,"void replaceString (File file, String from, String to) throws IOException
	{
		String fileName = file.getAbsolutePath();
		BufferedReader in = new BufferedReader(new FileReader(file));
		//
		File tmpFile = new File(fileName + "".tmp"");
		BufferedWriter out = new BufferedWriter (new FileWriter(tmpFile, false));
		boolean found = false;

		String line = null;
		int lineNo = 0;
		while ((line = in.readLine()) != null)
		{
			lineNo++;
			if (line.indexOf(from) != -1)
			{
				found = true;
				System.out.println(""  "" + lineNo + "": "" + line);
				line = Util.replace(line, from, to);
				m_actions++;
			}
			out.write(line);
			out.newLine();
		}	//	while reading file
		//
		in.close();
		out.close();
		//
		if (found)
		{
			File oldFile = new File (fileName + "".old"");
			if (file.renameTo(oldFile))
			{
				if (tmpFile.renameTo (new File (fileName)))
				{
					if (oldFile.delete ())
						System.out.println ("" - File updated: "" + fileName);
					else
						System.err.println ("" - Old File not deleted - "" + fileName);
				}
				else
					System.err.println ("" - New File not renamed - "" + fileName);
			}
			else
				System.err.println("" - Old File not renamed - "" + fileName);
		}
		else
		{
			if (!tmpFile.delete())
				System.err.println("" - Temp file not deleted - "" + tmpFile.getAbsolutePath());
		}
	}	//	replaceString
"
org.compiere.tools.FileUtilFilter.latex,FileUtil.java,"void latex (File file) throws IOException
	{
		String fileName = file.getAbsolutePath();
		BufferedReader in = new BufferedReader(new FileReader(file));
		//
		File outFile = new File(fileName + "".txt"");
		BufferedWriter out = new BufferedWriter (new FileWriter(outFile, false));

		String line = null;
		int lineNo = 0;

		while ((line = in.readLine()) != null)
		{
			lineNo++;
			boolean ignore = false;
			//
			char[] inLine = line.toCharArray();
			StringBuffer sb = new StringBuffer();
			for (char c : inLine) {
				if (c == '\\')
					ignore = true;
				else if (c == '{')
					ignore = false;
				else if (c == '}')
					;
				else if (!ignore)
					sb.append(c);
			}
			//
			out.write(sb.toString());
			out.newLine();
		}	//	while reading file
		//
		in.close();
		out.close();
		System.out.println(""File "" + fileName + "" - lines="" + lineNo);
	}	//	latex
"
org.compiere.tools.FileUtilFilter.license,FileUtil.java,"void license (File file) throws IOException
	{
		String fileName = file.getAbsolutePath();
	//	boolean isJava = fileName.endsWith("".java"");
	//	boolean isJSP = fileName.endsWith("".jsp"");
	//	boolean other = !(isJava || isJSP); 
		BufferedReader in = new BufferedReader(new FileReader(file));
		//
		File tmpFile = new File(fileName + "".tmp"");
		BufferedWriter out = new BufferedWriter (new FileWriter(tmpFile, false));

		out.write(GenerateModel.COPY);
		boolean changed = true;
		boolean packageLineFound = false;
		boolean utilPackageFound = false;
		boolean classStarted = false;
		ArrayList<String>	hdrBuffer = new ArrayList<String>();

		String line = null;
		int lineNo = 0;
		while ((line = in.readLine()) != null)
		{
			lineNo++;
			if (!packageLineFound)
			{
				if (line.startsWith(""package ""))
				{
					packageLineFound = true;
					out.write(line);
					out.newLine();
				}
				continue;	//	ignore otherwise
			}
			if (!utilPackageFound)
			{
				if (line.indexOf (""org.compiere.util"") != -1)
					utilPackageFound = true;
			}
			if (packageLineFound && !classStarted)
			{
				if (line.indexOf ("" class "") != -1)
				{
					classStarted = true;
					if (!utilPackageFound)
					{
						out.newLine();
						out.write(""import org.compiere.util.*;"");
						out.newLine();
					}
					for (int i = 0; i < hdrBuffer.size(); i++)
					{
						out.write (hdrBuffer.get(i));
						out.newLine();
					}	
					hdrBuffer.clear();
				}
				else
				{
					hdrBuffer.add(line);
					continue;
				}
			}
			
			out.write(line);
			out.newLine();
		}	//	while reading file
		//
		in.close();
		out.close();
		//
		if (changed)
		{
			File oldFile = new File (fileName + "".old"");
			if (file.renameTo(oldFile))
			{
				if (tmpFile.renameTo (new File (fileName)))
				{
					if (oldFile.delete ())
					{
						System.out.println ("" - File updated: "" + fileName);
					}
					else
						System.err.println ("" - Old File not deleted - "" + fileName);
				}
				else
					System.err.println ("" - New File not renamed - "" + fileName);
			}
			else
				System.err.println("" - Old File not renamed - "" + fileName);
		}
		else
		{
			System.err.println("" - No Copyright - "" + fileName);
			if (!tmpFile.delete())
				System.err.println("" - Temp file not deleted - "" + tmpFile.getAbsolutePath());
		}
	}	//	license
"
org.compiere.tools.FileUtilFilter.getFilterString,FileUtil.java,"String getFilterString()
	{
		return m_filterString;
	}	//	getFilterString
"
org.compiere.tools.FileUtilFilter.accept,FileUtil.java,"boolean accept (File dir, String name)
		{
		//	System.out.println(""  Dir="" + dir + "", Name="" + name);
			File file = new File (dir, name);
			if (file.isDirectory())
				return true;
			String filterString = getFilterString();
			if (filterString == null || filterString.length() == 0)
				return true;
			if (name == null)
				return false;
			//	ignore files with ~ and this file
			if (name.indexOf(""~"") != -1 
				|| name.equals(""FileUtil.java""))
				return false;
			//
			return name.endsWith(filterString);
		}	//	accept
"
org.compiere.tools.FileUtilFilter.main,FileUtil.java,"void main (String[] args)
	{
		String directory = ""C:\\Compiere\\core\\trunk"";
		String filter = "".java"";
		String action = ""License"";
		String from = null;	
		String to = null;
		if (true)
		{
			action = ""Replace"";
			from = ""MPeriodControl.DOCBASETYPE"";
			to   = ""MDocBaseType.DOCBASETYPE"";
		}

		if (args.length == 1)
			directory = args[0];
		if (args.length == 2)
			filter = args[1];
		if (filter == null)
		   filter = """";
		//
		new FileUtil(directory, filter, action, from, to); 
	}	//	main
"
org.compiere.tools.RMIUtil.main,RMIUtil.java,"void main (String[] args)
	{
		new RMIUtil();
	}	//	main
"
org.compiere.esb.GwtServerUtil.getRequests,GwtServerUtil.java,"int getRequests(Ctx ctx)
	{
		int retValue = 0;
		String requestSQL = MRole.getDefault(ctx, false).addAccessSQL (""SELECT COUNT(*) FROM R_Request ""
				+ ""WHERE (SalesRep_ID=? OR AD_Role_ID=?) AND Processed='N'""
				+ "" AND (DateNextAction IS NULL OR TRUNC(DateNextAction, 'DD') <= TRUNC(SysDate, 'DD'))""  //jz add 'DD' for default
				+ "" AND (R_Status_ID IS NULL OR R_Status_ID IN (SELECT R_Status_ID FROM R_Status WHERE IsClosed='N'))"",
					""R_Request"", false, true);	//	not qualified - RW
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(requestSQL, (Trx) null);
			pstmt.setInt(1, ctx.getAD_User_ID());
			pstmt.setInt(2, ctx.getAD_Role_ID());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				retValue = rs.getInt(1);
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, requestSQL, e);
		}
		return retValue;
	}	//	getRequests
"
org.compiere.esb.GwtServerUtil.getNotes,GwtServerUtil.java,"int getNotes(Ctx ctx)
	{
		int retValue = 0;
		String sql = ""SELECT COUNT(*) FROM AD_Note ""
			+ ""WHERE AD_Client_ID=? AND AD_User_ID IN (0,?)""
			+ "" AND Processed='N'"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, ctx.getAD_Client_ID());
			pstmt.setInt(2, ctx.getAD_User_ID());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				retValue = rs.getInt(1);
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		return retValue;
	}	//	getNotes
"
org.compiere.esb.GWTServerContext.getMap,GWTServerContext.java,"Map<String, String> getMap() {
		return m_map;
	}
"
org.compiere.esb.GWTServerContext.entrySet,GWTServerContext.java,"Set<Entry<String, String>> entrySet() {
		return getMap().entrySet();
	}
"
org.compiere.esb.GwtTest.login,GwtTest.java,"GwtServer login()
    {
		GwtServer server = new GwtServer();
		Login login = server.getLogin();
		server.setLocale(login.setLanguage(""English""));
		KeyNamePair[] roles = login.getRoles(""SuperUser"", ""System"");
		KeyNamePair role = roles[0];
		for (KeyNamePair rr : roles)
        {
	        if (rr.toString().startsWith(""System""))
	        {
	        	role = rr;
	        	break;
	        }
        }
		log.info(role.toString());
		KeyNamePair[] clients = login.getClients(role);
		log.info(clients[0].toString());
		KeyNamePair[] orgs = login.getOrgs(clients[0]);
		log.info(orgs[0].toString());
		KeyNamePair[] whs = login.getWarehouses(orgs[0]);
		KeyNamePair wh = null;
		if (whs != null && whs.length > 0)
		{
			wh = whs[0];
			log.info(wh.toString());
		}
		//	Defaults
		Timestamp timestamp = new Timestamp(System.currentTimeMillis());
		String printerName = """";
		String error = login.loadPreferences(orgs[0], wh, timestamp, printerName);
		log.info(error);
		return server;
    }	//	login
"
org.compiere.esb.GwtTest.dump,GwtTest.java,"void dump (Object[][] data)
    {
    	System.out.println(""Data:"");
    	if (data == null)
    		return;
    	int rows = data.length;
    	for (int r = 0; r < rows; r++)
        {
    		if (data[r] == null)
    	        System.out.println(""Row "" + r + "": NULL"");
    		else
    		{
    			int cols = data[r].length;
    			System.out.print(""Row "" + r + "": "");
    			for (int c = 0; c < cols; c++)
    			{
    				if (c != 0)
    					System.out.print("", "");
    				System.out.print(data[r][c]);
    			}
    			System.out.println();
    		}
        }
    }	//	dump
"
org.compiere.esb.GwtTest.addToHashMap,GwtTest.java,"void addToHashMap (HashMap<String,String> map, String[] keys, String[] values)
    {
    	for (int i = 0; i < values.length; i++)
		{
			map.put(keys[i], values[i]);
		}
    }	//	add
"
org.compiere.esb.GwtTest.main,GwtTest.java,"void main(String[] args)
	{
		Compiere.startup (true);
		GwtServer server = login();
		//	ToDo
		server.getMenuTree();
		//
		if (true)	//	newRow
		{
			int windowNo = 11;
			int AD_Window_ID = 127;	// test -		sales order
			server.getWindow(windowNo, AD_Window_ID, 0);
			int AD_Tab_ID = 152;	// test -		sales order 186
			Map<String,String> context = new HashMap<String,String>();
			server.newRow(windowNo, AD_Tab_ID, context);
		}


		if (true)	//	fieldChanged
		{
			int AD_Window_ID = 116;		//	Currency Rate
			server.getWindow(1, AD_Window_ID, 0);
			int AD_Field_ID = 1340;
			int AD_Tab_ID = 198;
			String oldValue = ""12.34"";
			String newValue = ""0.33"";
			Map<String,String> context = new HashMap<String,String>();
			ChangeVO vo = server.fieldChanged(1, AD_Field_ID, AD_Tab_ID,
					oldValue, newValue, context);
			System.out.println(vo.toString());
		}


		int AD_Window_ID = 143;		//	178=Greeting, 143=SO
		int AD_Menu_ID = 0;
		UIWindow order = server.getWindow(1, AD_Window_ID, AD_Menu_ID);
		log.info(order.toString());
		order.dump();
		//	Get Data
		int AD_Tab_ID = 186;		//	282=Greeting, 186=SO
		UITab tab = server.getTab(AD_Tab_ID);
		QueryVO queryVO = null;
		HashMap<String,String> context = new HashMap<String,String>();
		String[] columns = tab.getColumnNames();
		int queryResultID = 1;
		server.executeQuery(AD_Tab_ID, queryVO, context, queryResultID);
		String[][] data = server.getResults (queryResultID, 0, 100);
		dump (data);

		//
		int AD_Field_ID = 1573;		//	C_BPartner_ID
		String oldValue = ""118"";	//	118=Joe
		String newValue = """";
		addToHashMap(context, columns, data[0]);
		server.fieldChanged(1, AD_Field_ID, AD_Tab_ID, oldValue, newValue, context);

		//	Save
		Ctx ctx = new Ctx(""{AD_Org_ID=11, IsDefault=N, IsActive=Y, Greeting=Mr, Name=Mr, C_Greeting_ID=100, AD_Client_ID=11, IsFirstNameOnly=N}"");
		int relRowNo = 0;
		System.out.println(server.updateRow(1, AD_Tab_ID, queryResultID, relRowNo, ctx));
		//	Delete
//		server.deleteRow(AD_Tab_ID, ctx);

	}	//	GwtTest
"
org.compiere.esb.Score.resetWinDefCache,GwtServer.java,"void resetWinDefCache() {
		Userdef_Winids.reset();
		UIWindows.reset();
	}
"
org.compiere.esb.Score.getLogin,GwtServer.java,"Login getLogin() {
		if (m_login == null)
			m_login = new Login(m_context);
		return m_login;
	} // getLogin
"
org.compiere.esb.Score.getContext,GwtServer.java,"CContext getContext() {
		return m_context;
	} // getContext
"
org.compiere.esb.Score.getRole,GwtServer.java,"MRole getRole() {
		if (m_role == null) {
			if (m_login == null || m_login.getRole() == null
					|| m_login.getAD_Role_ID() == -1
					|| m_login.getAD_User_ID() == -1)
				throw new IllegalArgumentException(""Not logged in yet"");
			m_role = m_login.getRole();
		}
		return m_role;
	} // getRole
"
org.compiere.esb.Score.setLocale,GwtServer.java,"void setLocale(Locale loc) {
		m_loc = loc;
	} // setLocale
"
org.compiere.esb.Score.logout,GwtServer.java,"void logout(boolean expired) {

		// End Session
		MSession session = MSession.get(m_context); // finish
		if (session != null) {
			if (expired) {
				if (session.getDescription() == null)
					session.setDescription(""Expired"");
				else
					session.setDescription(session.getDescription()
							+ "" Expired"");
			}
			session.logout(); // saves
		}
		if (m_context != null) {
			int gwtServerID = m_context.getContextAsInt(MRole.GWTSERVERID);
			if (gwtServerID > 0)
				MRole.resetGwt(gwtServerID);
		}
		// Clear Cache
		m_tabs.clear();
		m_fields.clear();
		// m_windows.clear();
		m_context.clear();
		m_results.clear();
		//

	} // logout
"
org.compiere.esb.Score.isLogout,GwtServer.java,"boolean isLogout() {
		return m_context.size() == 0;
	}
"
org.compiere.esb.Score.finalize,GwtServer.java,"void finalize() throws Throwable {
		if (m_context != null) {
			int gwtServerID = m_context.getContextAsInt(MRole.GWTSERVERID);
			if (gwtServerID > 0)
				MRole.resetGwt(gwtServerID);
		}
		super.finalize();
	} // finalize
"
org.compiere.esb.Score.getLocale,GwtServer.java,"Locale getLocale() {
		if (m_loc == null)
			return Locale.US;
		return m_loc;
	} // getLocale
"
org.compiere.esb.Score.getMenuTree,GwtServer.java,"ArrayList<CTreeNode> getMenuTree() {
		int AD_Tree_ID = getTreeID();
		log.fine(""AD_Tree_ID="" + AD_Tree_ID + "" - ""
				+ Env.getAD_Language(m_context));
		return getMenuTree(AD_Tree_ID, false);
	} // getMenuTree
"
org.compiere.esb.Score.getTreeID,GwtServer.java,"int getTreeID() {
		int AD_Role_ID = m_context.getAD_Role_ID();
		// Load Menu Structure ----------------------
		int AD_Tree_ID = DB
		.getSQLValue(
				null,
				""SELECT COALESCE(r.AD_Tree_Menu_ID, ci.AD_Tree_Menu_ID)""
				+ ""FROM AD_ClientInfo ci""
				+ "" INNER JOIN AD_Role r ON (ci.AD_Client_ID=r.AD_Client_ID) ""
				+ ""WHERE AD_Role_ID=?"", AD_Role_ID);
		if (AD_Tree_ID <= 0)
			AD_Tree_ID = 10; // Menu
		return AD_Tree_ID;
	} // getTreeID
"
org.compiere.esb.Score.getMenuFavorites,GwtServer.java,"ArrayList<CTreeNode> getMenuFavorites() {
		MUser user = MUser.get(getContext());
		int AD_Tree_ID = user.getAD_Tree_MenuFavorite_ID();
		if (AD_Tree_ID == 0) // favorites has not yet been created
			return new ArrayList<CTreeNode>();
		return getMenuTree(AD_Tree_ID, false);
	}// get favorites menu
"
org.compiere.esb.Score.getMenuCreateNew,GwtServer.java,"ArrayList<CTreeNode> getMenuCreateNew() {
		MUser user = MUser.get(getContext());
		int AD_Tree_ID = user.getAD_Tree_MenuNew_ID();
		if (AD_Tree_ID == 0) // create new has not yet been created
			return new ArrayList<CTreeNode>();
		return getMenuTree(AD_Tree_ID, false);
	}// getMenuCreateNew
"
org.compiere.esb.Score.getMenuTree,GwtServer.java,"ArrayList<CTreeNode> getMenuTree(int AD_Tree_ID, boolean edit) {
		MTree tree = new MTree(m_context, AD_Tree_ID, edit, true, true, null); // Language
		// set
		// in
		// WLogin
		// Trim tree
		CTreeNode root = tree.getRoot();
		Enumeration<?> en = root.preorderEnumeration();
		while (en.hasMoreElements()) {
			CTreeNode nd = (CTreeNode) en.nextElement();
			if (nd.isTask() || nd.isWorkbench() // || nd.isWorkFlow()
					// server
			) {
				CTreeNode parent = (CTreeNode) nd.getParent();
				parent.remove(nd);
			}
		}
		tree.trimTree();
		en = root.preorderEnumeration();
		ArrayList<CTreeNode> retValue = new ArrayList<CTreeNode>();
		while (en.hasMoreElements()) {
			CTreeNode nd = (CTreeNode) en.nextElement();
			// Issue #420: removed menu entries for un-implemented forms
			if (nd.getAD_Form_ID() == 119
					|| nd.getAD_Form_ID() == 102
//					|| nd.getAD_Workflow_ID() == 106
//					|| nd.getAD_Workflow_ID() == 104
//					// Review
//					|| nd.getAD_Workflow_ID() == 112
//					// Setup
//					|| nd.getAD_Workflow_ID() == 113
//					|| nd.getAD_Workflow_ID() == 110
//					|| nd.getAD_Workflow_ID() == 111
					// || nd.getAD_Process_ID() == 205
			) {
			} else
				retValue.add(nd);
		}
		return retValue;
	}
"
org.compiere.esb.Score.updateFavorites,GwtServer.java,"boolean updateFavorites(boolean add, int Node_ID) {
		/*
		 * Code logic now uses MUser to store favorites. TODO:
		 * VTreePanel.barDBupdate should be similarly updated or deprecated for
		 * Swing client.
		 */
		MUser user = MUser.get(getContext());
		return user.addUserMenuFavorite(Node_ID, 0);
	} // updateFavorites
"
org.compiere.esb.Score.updateFavorites,GwtServer.java,"boolean updateFavorites(List<Integer> menuIDs) {
		MUser user = MUser.get(getContext());
		MTree menuTree = null;
		if ((menuTree = user.getUserFavoriteTree()) == null)
			return false;
		return updateUserTree(menuIDs, menuTree);
	}// updateFavorites
"
org.compiere.esb.Score.updateCreateNew,GwtServer.java,"boolean updateCreateNew(boolean add, int Node_ID) {
		/*
		 * Code logic now uses MUser to store favorites. TODO:
		 * VTreePanel.barDBupdate should be similarly updated or deprecated for
		 * Swing client.
		 */
		MUser user = MUser.get(getContext());
		return user.addUserMenuNewFavorite(Node_ID, 0);
	} // updateCreateNew
"
org.compiere.esb.Score.updateCreateNew,GwtServer.java,"boolean updateCreateNew(List<Integer> menuIDs) {
		MUser user = MUser.get(getContext());
		MTree menuTree = null;
		if ((menuTree = user.getUserNewFavoriteTree()) == null)
			return false;
		return updateUserTree(menuIDs, menuTree);
	}// updateCreateNew
"
org.compiere.esb.Score.updateUserTree,GwtServer.java,"boolean updateUserTree(List<Integer> menuIDs, MTree menuTree) {
		CTreeNode root = menuTree.getRoot();
		if (root != null) {
			Enumeration<?> nodes = root.preorderEnumeration();
			while (nodes.hasMoreElements()) {
				CTreeNode nd = (CTreeNode) nodes.nextElement();
				if (!menuIDs.contains(nd.getNode_ID())) {
					MTreeNodeMM node = null;
					if ((node = MTreeNodeMM.get(menuTree, nd.getNode_ID())) != null) {
						if (!node.delete(true))
							return false;
					}
				}
			}
		}
		int seq = 0;
		for (int id : menuIDs) {
			MTreeNodeMM node = null;
			if ((node = MTreeNodeMM.get(menuTree, id)) == null) {
				node = new MTreeNodeMM(menuTree, id);
			}
			node.setSeqNo(++seq);
			if (!node.save())
				return false;
		}
		return true;
	}
"
org.compiere.esb.Score.getRequests,GwtServer.java,"int getRequests() {
		return GwtServerUtil.getRequests(m_context);
	} // getRequests
"
org.compiere.esb.Score.getNotes,GwtServer.java,"int getNotes() {
		return GwtServerUtil.getNotes(m_context);
	} // getNotes
"
org.compiere.esb.Score.getWindow,GwtServer.java,"UIWindow getWindow(int windowNO, int AD_Window_ID, int AD_Menu_ID) {
		UIWindow win = null;
		// win = m_windows.get(AD_Window_ID);
		// if (win != null)
		// {
		// win.clearLookupCache();
		// return win;
		// }
		UIWindowVOFactory winFactory = new UIWindowVOFactory();
		UIWindowVO winVO = null;
		int AD_UserDef_Win_ID = -1;
		WindowVOCacheKey vokey = new WindowVOCacheKey(AD_Window_ID, m_context
				.getAD_Role_ID(), AD_Menu_ID, Env.getAD_Language(m_context));

		// note, the usage of m_context below in constructing window is only for
		// language, menu, role,
		// and those are already included in the cache key, so we can safely
		// assume the win is correctly cached
		if (Userdef_Winids.get(null, vokey) == null) {
			winVO = winFactory.get(m_context, AD_Window_ID, AD_Menu_ID);
			AD_UserDef_Win_ID = winVO.getAD_UserDef_Win_ID();
			Userdef_Winids.put(vokey, AD_UserDef_Win_ID);
			// log.warning(""vokey:"" + vokey + "" not found, create"");
		} else
			AD_UserDef_Win_ID = Userdef_Winids.get(m_context, vokey);

		WindowCacheKey key = new WindowCacheKey(AD_Window_ID,
				AD_UserDef_Win_ID, m_context.getAD_Role_ID(), AD_Menu_ID, Env
				.getAD_Language(m_context));
		win = UIWindows.get(null, key);
		if (win == null) {
			// log.warning(""key:"" + key + "" not found, create"");
			if (winVO == null)
				winVO = winFactory.get(m_context, AD_Window_ID, AD_Menu_ID);
			if (winVO == null) {
				log.config(""No Window - AD_Window_ID="" + AD_Window_ID
						+ "",AD_Menu_ID="" + AD_Menu_ID);
				return null;
			}
			win = new UIWindow(winVO);
			AD_Window_ID = win.getAD_Window_ID();
			//
			UIFieldVOFactory fieldFactory = new UIFieldVOFactory();
			win.setFields(fieldFactory.getAll(m_context, AD_Window_ID,
					AD_UserDef_Win_ID));
			//
			UITabVOFactory tabFactory = new UITabVOFactory();
			// setTabVOs initrlize tabs but not fields, 'cuz fields needs to be
			// copied over and initialized later
			win.setTabVOsWithFieldsUninitialized(m_context, tabFactory.getAll(
					m_context, AD_Window_ID, AD_UserDef_Win_ID), windowNO);
			UIWindows.put(key, win);
		}
		// deep copy the window object so we hold a separate window object for
		// each user session
		UIWindow duplicatedWin = (UIWindow) DeepCopy.copy(win);
		log.fine(duplicatedWin.toString());
		fillTabsFieldsAndInitFieldsAndCreateDependencyRelations(duplicatedWin, windowNO);

		MSession session = MSession.get(m_context);
		if (session != null)
			session.windowLog(m_context.getAD_Client_ID(), m_context
					.getAD_Org_ID(), duplicatedWin.getAD_Window_ID(), 0);

		return duplicatedWin;
	} // getWindowVO
"
org.compiere.esb.Score.getTab,GwtServer.java,"UITab getTab(int AD_Tab_ID) {
		Integer tabKey = Integer.valueOf(AD_Tab_ID);
		UITab tab = m_tabs.get(tabKey);
		if (tab == null) {
			throw new IllegalStateException(""No such tab:"" + AD_Tab_ID);
		} // find in window
		return tab;
	} // getTab
"
org.compiere.esb.Score.getField,GwtServer.java,"UIField getField(int AD_Field_ID, int windowNo) {
		Integer key = Integer.valueOf(AD_Field_ID);
		UIField field = m_fields.get(key);
		if (field == null) {
			UIFieldVOFactory fieldFactory = new UIFieldVOFactory();
			UIFieldVO vo = fieldFactory.get(m_context, AD_Field_ID);
			// m_context.setSOTrx(windowNo, isSOTrx);
			if (vo != null) {
				field = new UIField(vo);
				field.initialize(m_context, windowNo);
				log.warning(""Loaded directly: "" + field); // SOTrx may not
				// be correct
				m_fields.put(key, field); // save in cache
			}
		} // create new
		return field;
	} // getField
"
org.compiere.esb.Score.fillTabsFieldsAndInitFieldsAndCreateDependencyRelations,GwtServer.java,"void fillTabsFieldsAndInitFieldsAndCreateDependencyRelations(UIWindow win, int windowNO) {
		ArrayList<UITab> tabs = win.getTabs();
		for (int j = 0; j < tabs.size(); j++) {
			UITab winTab = tabs.get(j);
			Integer tabKey = Integer.valueOf(winTab.getAD_Tab_ID());
			m_tabs.put(tabKey, winTab);
			//
			ArrayList<UIField> fields = winTab.getFields();
			for (int k = 0; k < fields.size(); k++) {
				UIField field = fields.get(k);
				field.initialize(m_context, windowNO);
				Integer fieldKey = Integer.valueOf(field.getAD_Field_ID());
				// set the correct value
				if (field.isLookup())
					field.getLookup().setContext(m_context, windowNO);
				m_fields.put(fieldKey, field);
			}
			winTab.createDependencyRelations();
		}
	} // fillTabsFields
"
org.compiere.esb.Score.executeQuery,GwtServer.java,"int executeQuery(int AD_Tab_ID, QueryVO queryVO,
			HashMap<String, String> context, int queryResultID) {
		UITab tab = getTab(AD_Tab_ID);
		if (tab == null) {
			log.config(""Not found AD_Tab_ID="" + AD_Tab_ID);
			return -1;
		}
		ArrayList<String[]> result = tab.executeQueryString(queryVO, context,
				m_context);
		if (result == null) {
			log.config(""Not Result for AD_Tab_ID="" + AD_Tab_ID);
			return -1;
		}
		MRole role = getRole();
		// return -1 to indicate query exceeds
		if (role.isQueryMax(result.size())) {
			m_results.put(queryResultID, new ArrayList<String[]>());
			return -1;
		}
		m_results.put(queryResultID, result);
		return result.size();
	} // executeQuery
"
org.compiere.esb.Score.getResults,GwtServer.java,"String[][] getResults(int queryResultID, int fromRow, int noRows) {
		if (noRows < 0) {
			log.config(""Invalid: fromRow="" + fromRow + "",noRows"" + noRows);
		} else if (noRows == 0)
			return new String[][] {};
		//
		ArrayList<String[]> resultAll = m_results.get(queryResultID);
		if (resultAll == null) {
			log.config(""No Results for queryResultID="" + queryResultID);
			return null;
		}
		if (resultAll.size() < fromRow) {
			log.config(""Insufficient Results for queryResultID=""
					+ queryResultID + "", Length="" + resultAll.size()
					+ "", fromRow="" + fromRow);
			return null;
		}
		// copy
		if (resultAll.size() < noRows) {
			log.config(""Insufficient Rows for queryResultID="" + queryResultID
					+ "", Length="" + resultAll.size() + "", fromRow="" + fromRow
					+ "", noRows="" + noRows);
			noRows = resultAll.size();
		}
		String[][] result = new String[noRows][];
		for (int i = 0; i < noRows; i++) {
			int index = i + fromRow;
			if (index >= resultAll.size())
				break;
			result[i] = resultAll.get(index);
		}
		return result;
	} // getResult
"
org.compiere.esb.Score.sortResults,GwtServer.java,"void sortResults(int WindowNo, int AD_Tab_ID, int AD_Field_ID,
			int queryResultID, final boolean ascending) {
		class SortCell {

			String[] row;

			String sort;
		}
		ArrayList<String[]> results = m_results.get(queryResultID);
		if(results == null)
			log.severe(""cannot sort. results non-existent for queryResultID:""+queryResultID);
		UITab tab = getTab(AD_Tab_ID);
		final UIField field = getField(AD_Field_ID, WindowNo);
		final int displayType = field.getAD_Reference_ID();
		final int idx = tab.getFieldIndex(AD_Field_ID);
		// if not a lookup, directly sort
		if (!field.isLookup()) {
			if (FieldType.isNumeric(displayType)) {
				Collections.sort(results, new Comparator<String[]>() {

					@Override
					public int compare(String[] o1, String[] o2) {
						if (o1[idx] == null)
							o1[idx] = """";
						if (o2[idx] == null)
							o2[idx] = """";
						BigDecimal s1 = new BigDecimal(
								o1[idx].equals("""") ? ""-1e-10"" : o1[idx]);
						BigDecimal s2 = new BigDecimal(
								o2[idx].equals("""") ? ""-1e-10"" : o2[idx]);
						return ascending ? s1.compareTo(s2) : s2.compareTo(s1);
					}
				});
			} else if (FieldType.isDate(displayType)) {
				Collections.sort(results, new Comparator<String[]>() {

					@Override
					public int compare(String[] o1, String[] o2) {
						if (o1[idx] == null)
							o1[idx] = """";
						if (o2[idx] == null)
							o2[idx] = """";
						Long s1 = new Long(o1[idx].equals("""") ? ""-1000000""
								: o1[idx]);
						Long s2 = new Long(o2[idx].equals("""") ? ""-1000000""
								: o2[idx]);
						return ascending ? s1.compareTo(s2) : s2.compareTo(s1);
					}
				});
			} else {
				Collections.sort(results, new Comparator<String[]>() {

					@Override
					public int compare(String[] o1, String[] o2) {
						if (o1[idx] == null)
							o1[idx] = """";
						if (o2[idx] == null)
							o2[idx] = """";
						String s1 = o1[idx];
						String s2 = o2[idx];
						return ascending ? s1.compareTo(s2) : s2.compareTo(s1);
					}
				});
			}
			return;
		}
		Comparator<SortCell> c = new Comparator<SortCell>() {

			public int compare(SortCell o1, SortCell o2) {
				if (ascending)
					return o1.sort.compareTo(o2.sort);
				else
					return o2.sort.compareTo(o1.sort);
			}
		};
		// for look up, first get id values
		ArrayList<String> fieldValues = new ArrayList<String>(results.size());
		for (String[] row : results) {
			fieldValues.add(row[idx]);
		}
		// then translate into real values
		ArrayList<String> sorts = getLookupValueOnlyDirect(AD_Field_ID,
				fieldValues, true);
		ArrayList<SortCell> toBeSorteds = new ArrayList<SortCell>(sorts.size());
		for (int i = 0; i < sorts.size(); i++) {
			SortCell toBeSorted = new SortCell();
			toBeSorted.row = results.get(i);
			toBeSorted.sort = sorts.get(i);
			toBeSorteds.add(toBeSorted);
		}
		// sort
		Collections.sort(toBeSorteds, c);
		// after sorting, replace col with original values
		int i = 0;
		for (SortCell toBeSorted : toBeSorteds) {
			results.set(i, toBeSorted.row);
			i++;
		}
	}
"
org.compiere.esb.Score.compare,GwtServer.java,"int compare(String[] o1, String[] o2) {
						if (o1[idx] == null)
							o1[idx] = """";
						if (o2[idx] == null)
							o2[idx] = """";
						BigDecimal s1 = new BigDecimal(
								o1[idx].equals("""") ? ""-1e-10"" : o1[idx]);
						BigDecimal s2 = new BigDecimal(
								o2[idx].equals("""") ? ""-1e-10"" : o2[idx]);
						return ascending ? s1.compareTo(s2) : s2.compareTo(s1);
					}
"
org.compiere.esb.Score.compare,GwtServer.java,"int compare(String[] o1, String[] o2) {
						if (o1[idx] == null)
							o1[idx] = """";
						if (o2[idx] == null)
							o2[idx] = """";
						Long s1 = new Long(o1[idx].equals("""") ? ""-1000000""
								: o1[idx]);
						Long s2 = new Long(o2[idx].equals("""") ? ""-1000000""
								: o2[idx]);
						return ascending ? s1.compareTo(s2) : s2.compareTo(s1);
					}
"
org.compiere.esb.Score.compare,GwtServer.java,"int compare(String[] o1, String[] o2) {
						if (o1[idx] == null)
							o1[idx] = """";
						if (o2[idx] == null)
							o2[idx] = """";
						String s1 = o1[idx];
						String s2 = o2[idx];
						return ascending ? s1.compareTo(s2) : s2.compareTo(s1);
					}
"
org.compiere.esb.Score.compare,GwtServer.java,"int compare(SortCell o1, SortCell o2) {
				if (ascending)
					return o1.sort.compareTo(o2.sort);
				else
					return o2.sort.compareTo(o1.sort);
			}
"
org.compiere.esb.Score.copyQueryResults,GwtServer.java,"void copyQueryResults(int sourceID, int destID) {
		ArrayList<String[]> results = m_results.get(sourceID);
		m_results.put(destID, results);
	}
"
org.compiere.esb.Score.searchTabResults,GwtServer.java,"int searchTabResults(int WindowNo, UITab tab,
			List<Integer> fieldIds, int queryResultID, int searchResultID,
			String query, int rowCount) {
		ArrayList<String[]> results = m_results.get(queryResultID);
		if (query.trim().equals("""")) {
			m_results.put(searchResultID, results);
			return results.size();
		}
		ScoreStrategy scorer = new ScoreStrategy(query);
		ScoreCell[] scores = new ScoreCell[results.size()];
		// first initialize score cells
		int j = 0;
		for (String[] result : results) {
			// initialize score cells
			ScoreCell score = new ScoreCell();
			score.row = result;
			score.score = scorer.createScore();
			scores[j++] = score;
		}
		for (int id : fieldIds) {
			UIField field = getField(id, WindowNo);
			final int idx = tab.getFieldIndex(id);
			if (field.isLookup()) {
				ArrayList<String> fieldValues = new ArrayList<String>(results
						.size());
				for (String[] row : results) {
					fieldValues.add(row[idx]);
				}
				ArrayList<String> sorts = getLookupValueOnlyDirect(id,
						fieldValues, true);
				int i = 0;
				for (String value : sorts) {
					scorer.getScore(value, scores[i].score);
					i++;
				}
			} else {
				int i = 0;
				for (String[] row : results) {
					String value = row[idx];
					scorer.getScore(value, scores[i].score);
					i++;
				}
			}
		}
		ArrayList<ScoreCell> matchingScores = new ArrayList<ScoreCell>();
		for (ScoreCell cell : scores) {
			if (cell.score.isMatch) {
				matchingScores.add(cell);
			}
		}
		Collections.sort(matchingScores, scorer);
		ArrayList<String[]> matches = new ArrayList<String[]>();
		for (ScoreCell score : matchingScores) {
			matches.add(score.row);
		}
		m_results.put(searchResultID, matches);
		return matches.size();
	}
"
org.compiere.esb.Score.getTabSearchResults,GwtServer.java,"String[][] getTabSearchResults(int searchResultID, int rowCount) {
		ArrayList<String[]> matches = m_results.get(searchResultID);
		if (matches != null) {
			if (matches.size() < rowCount) {
				rowCount = matches.size();
			}
			String[][] result = new String[rowCount][];
			int i = 0;
			for (String[] row : matches) {
				result[i++] = row;
				if (i == rowCount)
					break;
			}
			return result;
		} else {
			return new String[0][];
		}
	}
"
org.compiere.esb.Score.requery,GwtServer.java,"String[] requery(int queryResultID, int row) {
		// TODO requery
		String[][] results = getResults(queryResultID, row, 1);
		return results[0];
	} // requery
"
org.compiere.esb.Score.disposeWindow,GwtServer.java,"void disposeWindow(ArrayList<Integer> resultIDs) {
		// System.out.println(""before cached id:"" + m_results.keySet());
		for (Integer queryResultID : resultIDs)
			m_results.remove(queryResultID);
		// System.out.println(""after cached id:"" + m_results.keySet());
		m_context.removeAllWindows();
	} // releaseResults
"
org.compiere.esb.Score.newRow,GwtServer.java,"ChangeVO newRow(int windowNo, int AD_Tab_ID,
			Map<String, String> context) {
		UITab tab = getTab(AD_Tab_ID);
		if (tab == null) {
			log.config(""Not found AD_Tab_ID="" + AD_Tab_ID);
			return null;
		}
		CContext ctx = new CContext(m_context.entrySet());
		ctx.addWindow(windowNo, context);
		ctx.setIsSOTrx(windowNo, tab.isSOTrx());
		ChangeVO change = tab.newRow(ctx, windowNo);
		/**
		 * Very likely not needed if (change.changedDropDowns == null)
		 * change.changedDropDowns = new HashMap<String,ArrayList<NamePair>>();
		 * for(UIField f:tab.getFields()) { if (f.isDependentValue())
		 * change.changedDropDowns.put(f.getColumnName(),
		 * getLookupValues(windowNo, f.getAD_Field_ID(), change.changedFields));
		 * }
		 */
		tab.canUpdate(ctx, windowNo, change);
		return change;
	} // newRow
"
org.compiere.esb.Score.refreshRow,GwtServer.java,"ChangeVO refreshRow(int windowNo, int AD_Tab_ID, int queryResultID,
			int relRowNo, Map<String, String> context) {
		if (context == null || context.size() == 0)
			return new ChangeVO(true, ""No Context"");
		UITab tab = getTab(AD_Tab_ID);
		if (tab == null) {
			log.config(""Not found AD_Tab_ID="" + AD_Tab_ID);
			return new ChangeVO(true, ""@NotFound@ @AD_Tab_ID@="" + AD_Tab_ID);
		}
		CContext ctx = new CContext(m_context.entrySet());
		ctx.addWindow(windowNo, context);
		ChangeVO retValue = tab.refreshRow(ctx, windowNo);
		if (retValue.hasError())
			return retValue;
		// Update Results
		ArrayList<String[]> data = m_results.get(queryResultID);
		if (data == null)
			retValue.addError(""Data Not Found"");
		else {
			String[] dataRow = retValue.rowData.clone();
			data.set(relRowNo, dataRow);
			postProcessChangeVO(retValue, windowNo, context, dataRow, tab);
			retValue.trxInfo = GridTab.getTrxInfo(tab.getTableName(), ctx,
					windowNo, tab.getTabNo());
		}
		return retValue;
	} // refreshRow
"
org.compiere.esb.Score.updateRow,GwtServer.java,"ChangeVO updateRow(int windowNo, int AD_Tab_ID, int queryResultID,
			int relRowNo, Map<String, String> context, boolean force) {
		if (context == null || context.size() == 0)
			return new ChangeVO(true, ""No Context"");
		ArrayList<String[]> data = m_results.get(queryResultID);
		if (data == null || data.size() == 0)
			return new ChangeVO(true, ""Cached Data Not Found"");
		UITab tab = getTab(AD_Tab_ID);
		if (tab == null) {
			log.config(""Not found AD_Tab_ID="" + AD_Tab_ID);
			return new ChangeVO(true, Msg.translate(m_context,
					""@NotFound@ @AD_Tab_ID@="" + AD_Tab_ID));
		}
		CContext ctx = new CContext(m_context.entrySet());
		ctx.addWindow(windowNo, context);
		ChangeVO retValue;
		if (force)
			retValue = tab.saveRow(ctx, windowNo, false, null);
		else
			retValue = tab.saveRow(ctx, windowNo, false, data.get(relRowNo));
		if (retValue.hasError())
			return retValue;
		// Update Results
		String[] dataRow = retValue.rowData.clone();
		data.set(relRowNo, dataRow);
		postProcessChangeVO(retValue, windowNo, context, dataRow, tab);
		retValue.trxInfo = GridTab.getTrxInfo(tab.getTableName(), ctx,
				windowNo, tab.getTabNo());
		if (retValue.isRefreshAll()) {
		}
		return retValue;
	}
"
org.compiere.esb.Score.postProcessChangeVO,GwtServer.java,"void postProcessChangeVO(ChangeVO change, int windowNo,
			Map<String, String> context, String[] dataRow, UITab tab) {
		// make an updated context to get the necessary listboxvos
		Map<String, String> contextAfterUpdate = new HashMap<String, String>(
				context);
		int j = 0;
		for (UIField field : tab.getFields()) {
			contextAfterUpdate.put(field.getColumnName(), dataRow[j]);
			j++;
		}
		// now change rowData to remove password, and reload the changed
		// listboxes
		j = 0;
		for (UIField field : tab.getFields()) {
			// return an empty string for passwords etc
			if (field.isEncryptedField() || field.isEncryptedColumn()
					|| ""Password"".equals(field.getColumnName()))
				change.rowData[j] = """";
			if (FieldType.isClientLookup(field.getAD_Reference_ID())
					&& field.isDependentValue()) {
				if (change.changedDropDowns == null)
					change.changedDropDowns = new HashMap<String, ArrayList<NamePair>>();
				ArrayList<NamePair> values;
				if (field.getAD_Reference_ID() == DisplayTypeConstants.Search) {
					ArrayList<String> t = new ArrayList<String>(1);
					t.add(context.get(field.getColumnName()));
					values = getLookupValueDirect(field.getAD_Field_ID(), t,
							true);
				} else
					values = getLookupData(windowNo, field.getAD_Field_ID(),
							context, true);
				change.changedDropDowns.put(field.getColumnName(), values);
			}
			j++;
		}
	}
"
org.compiere.esb.Score.updateRow,GwtServer.java,"ChangeVO updateRow(int windowNo, int AD_Tab_ID, int queryResultID,
			int relRowNo, Map<String, String> context) {
		return updateRow(windowNo, AD_Tab_ID, queryResultID, relRowNo, context,
				false);
	} // updateRow
"
org.compiere.esb.Score.insertRow,GwtServer.java,"ChangeVO insertRow(int windowNo, int AD_Tab_ID, int queryResultID,
			int curRow, Map<String, String> context) {
		if (context == null || context.size() == 0)
			return new ChangeVO(true, ""No Context"");
		UITab tab = getTab(AD_Tab_ID);
		if (tab == null) {
			log.config(""Not found AD_Tab_ID="" + AD_Tab_ID);
			return new ChangeVO(true, ""@NotFound@ @AD_Tab_ID@="" + AD_Tab_ID);
		}
		
		log.info(""Line Amt:""+context.get(""LineNetAmt""));
		CContext ctx = new CContext(m_context.entrySet());
		ctx.addWindow(windowNo, context);
		ChangeVO retValue = tab.saveRow(ctx, windowNo, true);
		if (retValue.hasError())
			return retValue;
		// Update Results
		ArrayList<String[]> data = m_results.get(queryResultID);
		if (data == null)
			retValue.addError(""Data Not Found"");
		else {
			String[] dataRow = retValue.rowData;
			if (curRow >= data.size())
				data.add(dataRow);
			else
				data.add(curRow, dataRow);
			retValue.trxInfo = GridTab.getTrxInfo(tab.getTableName(), ctx,
					windowNo, tab.getTabNo());
		}
		return retValue;
	} // insertRow
"
org.compiere.esb.Score.deleteRow,GwtServer.java,"ChangeVO deleteRow(int windowNo, int AD_Tab_ID, int queryResultID,
			int relRowNo) {
		UITab tab = getTab(AD_Tab_ID);
		if (tab == null) {
			log.config(""Not found AD_Tab_ID="" + AD_Tab_ID);
			return new ChangeVO(true, ""@NotFound@ @AD_Tab_ID@="" + AD_Tab_ID);
		}
		ArrayList<String[]> data = m_results.get(queryResultID);
		if (data == null)
			return new ChangeVO(true, ""Data Not Found"");
		String[] rowData = data.get(relRowNo);
		// Copy Data into Context
		Map<String, String> context = new HashMap<String, String>();
		String[] columns = tab.getColumnNames();
		for (int i = 0; i < columns.length; i++) {
			String column = columns[i];
			context.put(column, rowData[i]);
		}
		CContext ctx = new CContext(m_context.entrySet());
		ctx.addWindow(windowNo, context);
		ChangeVO retValue = tab.deleteRow(ctx, windowNo);
		if (retValue.hasError())
			return retValue;
		// Update Results
		data.remove(relRowNo);
		return retValue;
	} // deleteRow
"
org.compiere.esb.Score.fieldChanged,GwtServer.java,"ChangeVO fieldChanged(int windowNo, int AD_Field_ID, int AD_Tab_ID,
			String oldValue, String newValue, Map<String, String> context) {
		// Same Values
		if (oldValue == null || oldValue.equals(Null.NULLString))
			oldValue = """";
		if (newValue == null || newValue.equals(Null.NULLString))
			newValue = """";
		if (oldValue.equals(newValue))
			return null;
		//
		UITab tab = getTab(AD_Tab_ID);
		if (tab == null) {
			log.config(""Not found AD_Tab_ID="" + AD_Tab_ID);
			return null;
		}
		UIField field = getField(AD_Field_ID, windowNo);
		if (field == null) {
			log.warning(""Cannot find AD_Field_ID="" + AD_Field_ID);
			return null;
		}

		CContext ctx = new CContext(m_context.entrySet());
		ctx.addWindow(windowNo, context);
		CContext origCtx = new CContext(m_context.entrySet());
		origCtx.addWindow(windowNo, context);
		ChangeVO change = null;
		try {
			//reset the thread active flag, in case the thread is reused later on
			CThreadUtil.setCalloutActive(false);
			change = tab.fieldChanged(origCtx, ctx, new ArrayList<UIField>(5), windowNo, field, oldValue,
					newValue);
			CThreadUtil.setCalloutActive(false);
			ctx.setContext(windowNo, field.getColumnName(),
					change.newConfirmedFieldValue);
		} 
		catch(Exception e) {
			log.severe(""fieldChange error:""+field.getColumnName()+e.getMessage());
		}
		finally {
			CThreadUtil.setCalloutActive(false);
		}

		return change;
	} // fieldChanged
"
org.compiere.esb.Score.getLookupValueDirect,GwtServer.java,"ArrayList<NamePair> getLookupValueDirect(int AD_Field_ID,
			ArrayList<String> keyValues, boolean cache) {
		int windowNo = 0; // No Context
		ArrayList<NamePair> displayValues = new ArrayList<NamePair>();
		UIField field = getField(AD_Field_ID, windowNo);

		// if (cache && field.isLookup())
		// field.getLookup().removeAllElements();
		if (field == null)
			log.warning(""Cannot find AD_Field_ID="" + AD_Field_ID);
		//
		for (int i = 0; i < keyValues.size(); i++) {
			String key = keyValues.get(i);
			String value = null;
			if (field != null)
				value = field.getLookupDisplay(m_context, windowNo, key, cache);
			if (value == null) {
				/*
				 * if(key == null) value = """"; else value = ""<"" + key + "">"";
				 */
				value = """";
			}
			NamePair pp = new ValueNamePair(key, value);
			displayValues.add(pp);
		}
		return displayValues;
	} // getLookupValueDirect
"
org.compiere.esb.Score.getLookupValueOnlyDirect,GwtServer.java,"ArrayList<String> getLookupValueOnlyDirect(int AD_Field_ID,
			ArrayList<String> keyValues, boolean cache) {
		int windowNo = 0; // No Context
		ArrayList<String> displayValues = new ArrayList<String>();
		UIField field = getField(AD_Field_ID, windowNo);
		if (field == null)
			log.warning(""Cannot find AD_Field_ID="" + AD_Field_ID);
		//
		for (int i = 0; i < keyValues.size(); i++) {
			String key = keyValues.get(i);
			String value = null;
			if (field != null)
				value = field.getLookupDisplay(m_context, windowNo, key, cache);
			if (value == null) {
				/*
				 * if(key == null) value = """"; else value = ""<"" + key + "">"";
				 */
				value = """";
			}
			displayValues.add(value);
		}
		return displayValues;
	} // getLookupValueDirect
"
org.compiere.esb.Score.getLookupData,GwtServer.java,"ArrayList<NamePair> getLookupData(int windowNo, int AD_Field_ID,
			Map<String, String> context, boolean refresh) {
		UIField field = getField(AD_Field_ID, windowNo);
		if (field == null) {
			log.warning(""Cannot find AD_Field_ID="" + AD_Field_ID);
			return null;
		}
		CContext ctx = new CContext(m_context.entrySet());
		ctx.addWindow(windowNo, context);
		if (field.isLookup() || field.isButtonLookup())
			return field.getAllLookupData(ctx, windowNo);
		else
			log.warning(""No Lookup: "" + field.getColumnName());
		return null;
	} // getLookupData
"
org.compiere.esb.Score.getZoomWindowNO,GwtServer.java,"int getZoomWindowNO() {
		curZoomWindowNO += 100;
		return curZoomWindowNO;
	}
"
org.compiere.esb.Score.savePreferences,GwtServer.java,"Boolean savePreferences(Map<String, String> ctx) {
		CContext cContext = getContext();
		MUser user = MUser.get(cContext);
		MUserPreference preference = user.getPreference();
		String printerName = ctx.get(""PrinterName"");
		if (printerName != null && printerName.trim().equalsIgnoreCase("""")) {
			cContext.setPrinterName(printerName);
			preference.setPrinterName(printerName);
		}
		String autoCommit = ctx.get(""AutoCommit"");
		if (autoCommit != null) {
			cContext.setAutoCommit(autoCommit.trim().equalsIgnoreCase(""Y""));
			preference.setIsAutoCommit(autoCommit.trim().equalsIgnoreCase(""Y""));
		}
		String showAdvanced = ctx.get(""#ShowAdvanced"");
		if (showAdvanced != null) {
			cContext.setContext(""#ShowAdvanced"", showAdvanced);
			preference.setIsShowAdvanced(showAdvanced.trim().equalsIgnoreCase(
			""Y""));
		}
		String showAccounting = ctx.get(""#ShowAcct"");
		if (showAccounting != null) {
			cContext.setContext(""#ShowAcct"", showAccounting);
			preference.setIsShowAcct(showAccounting.trim()
					.equalsIgnoreCase(""Y""));
		}
		String showTranslation = ctx.get(""#ShowTrl"");
		if (showTranslation != null) {
			cContext.setContext(""#ShowTrl"", showTranslation);
			preference.setIsShowTrl(showTranslation.trim()
					.equalsIgnoreCase(""Y""));
		}
		String uiTheme = ctx.get(""#UITheme"");
		if (uiTheme != null && !uiTheme.trim().equalsIgnoreCase("""")) {
			cContext.setContext(""#UITheme"", uiTheme);
			preference.setUITheme(uiTheme);
		}

		String printPreview = ctx.get(""#PrintPreview"");
		if (printPreview != null) {
			cContext.setPrintPreview(printPreview.equalsIgnoreCase(""Y""));
			Ini.setProperty(Ini.P_PRINTPREVIEW, printPreview
					.equalsIgnoreCase(""Y""));
			Ini.saveProperties(Ini.isClient());
		}

		String date = ctx.get(""#Date"");
		cContext.setContext(""#Date"", date);

		return preference.save();
	}
"
org.compiere.esb.Score.deleteSavedSearch,GwtServer.java,"Boolean deleteSavedSearch(int tab_ID, String savedSearchName) {
		CContext cContext = getContext();
		MUserQuery query = MUserQuery.getForUser(cContext, tab_ID,
				savedSearchName);
		if (query != null)
			if (query.deleteLines()) {
				if (query.delete(true)) {
					return true;
				}
			}
		return false;
	}// deleteSavedsearch
"
org.compiere.esb.Score.equals,GwtServer.java,"boolean equals(Object obj) {
			if (!(obj instanceof WindowCacheKey))
				return false;
			WindowCacheKey key = (WindowCacheKey) obj;
			return super.equals(obj)
			&& AD_UserDef_Win_ID == key.AD_UserDef_Win_ID;
		}
"
org.compiere.esb.Score.hashCode,GwtServer.java,"int hashCode() {
			return toString().hashCode();
		}
"
org.compiere.esb.Score.toString,GwtServer.java,"String toString() {
			return super.toString() + AD_UserDef_Win_ID;
		}
"
org.compiere.esb.Score.equals,GwtServer.java,"boolean equals(Object obj) {
			if (!(obj instanceof WindowVOCacheKey))
				return false;
			WindowVOCacheKey key = (WindowVOCacheKey) obj;
			return AD_Window_ID == key.AD_Window_ID
			// && AD_UserDef_Win_ID == key.AD_UserDef_Win_ID
			&& AD_Role_ID == key.AD_Role_ID
			&& AD_Menu_ID == key.AD_Menu_ID
			&& AD_Language.equals(key.AD_Language);
		}
"
org.compiere.esb.Score.hashCode,GwtServer.java,"int hashCode() {
			return toString().hashCode();
		}
"
org.compiere.esb.Score.toString,GwtServer.java,"String toString() {
			return AD_Language + AD_Window_ID + AD_Role_ID + AD_Menu_ID;
		}
"
org.compiere.esb.Score.createScore,GwtServer.java,"Score createScore() {
			Score score = new Score();
			score.terms = new int[terms.length];
			return score;
		}
"
org.compiere.esb.Score.getScore,GwtServer.java,"void getScore(String value3, Score score) {
			if (value3 == null || value3.trim().equals(""""))
				return;
			String value2 = value3.toLowerCase();
			if (query.equals(value2)) {
				score.equalsMatches++;
				score.isMatch = true;
				return;
			}
			try {
				int occurrences = value2.length()
				- value2.replaceAll(query, """").length();
				if (occurrences > 0) {
					score.completeMatches += occurrences;
					score.isMatch = true;
				}
				if (terms.length > 1) {
					int termNo = 0;
					for (String term : terms) {
						int count = value2.length()
						- value2.replaceAll(term, """").length();
						if (count > 0) {
							score.terms[termNo++] += count;
							score.isMatch = true;
						}
					}
				}
			} catch (PatternSyntaxException pse) {
				// assume no match on pattern syntax error
			}
		}
"
org.compiere.esb.Score.compare,GwtServer.java,"int compare(ScoreCell o1, ScoreCell o2) {
			Score s1 = o1.score;
			Score s2 = o2.score;
			int difference = 0;
			if ((difference = s2.equalsMatches - s1.equalsMatches) != 0) {
				return difference;
			}
			if ((difference = s2.completeMatches - s1.completeMatches) != 0) {
				return difference;
			}
			int total1 = 0;
			int total2 = 0;
			int terms1 = 0;
			int terms2 = 0;
			// otherwise check if both terms are matched and tabulate total
			for (int score : s1.terms) {
				if (score > 0) {
					total1 += score;
					terms1++;
				}
			}
			for (int score : s2.terms) {
				if (score > 0) {
					total2 += score;
					terms2++;
				}
			}
			if ((difference = terms2 - terms1) != 0) {
				return difference;
			} else {
				return total2 - total1;
			}
		}
"
org.compiere.esb.Score.searchTabResults,GwtServer.java,"int searchTabResults(int WindowNo, int AD_Tab_ID, int queryResultID,
			int searchResultID, String query, int rowCount) {
		UITab tab = getTab(AD_Tab_ID);
		ArrayList<Integer> ids = new ArrayList<Integer>();
		for (UIField field : tab.getFields()) {
			if (field.isSelectionColumn() || field.isIdentifier()
					&& FieldType.isText(field.getAD_Reference_ID())) {
				ids.add(field.getAD_Field_ID());
			}
		}
		return searchTabResults(WindowNo, tab, ids, queryResultID,
				searchResultID, query, rowCount);
	}
"
org.compiere.util.WebUtil.createTimeoutPage,WebUtil.java,"void createTimeoutPage (HttpServletRequest request, HttpServletResponse response,
		HttpServlet servlet, String message) throws ServletException, IOException
	{
		log.info(message);
	  	WebSessionCtx wsc = WebSessionCtx.get(request, false);
		String windowTitle = ""Timeout"";
		if (wsc != null)
			windowTitle = Msg.getMsg(wsc.ctx, ""Timeout"");

		WebDoc doc = WebDoc.create (windowTitle);

		//	Body
		body body = doc.getBody();
		//  optional message
		if (message != null && message.length() > 0)
			body.addElement(new p(message, AlignType.CENTER));

		//  login button
		body.addElement(getLoginButton(wsc == null ? null : wsc.ctx));

		//
		body.addElement(new hr());
		body.addElement(new small(servlet.getClass().getName()));
		//	fini
		createResponse (request, response, servlet, null, doc, false);
	}   //  createTimeoutPage
"
org.compiere.util.WebUtil.createErrorPage,WebUtil.java,"void createErrorPage (HttpServletRequest request, HttpServletResponse response,
		HttpServlet servlet, String message) 
		throws ServletException, IOException
	{
		log.info( message);
	  	WebSessionCtx wsc = WebSessionCtx.get(request, false);
		String windowTitle = ""Error"";
		if (wsc != null)
			windowTitle = Msg.getMsg(wsc.ctx, ""Error"");
		if (message != null)
			windowTitle += "": "" + message;

		WebDoc doc = WebDoc.create (windowTitle);

		//	Body
		body b = doc.getBody();

		b.addElement(new p(servlet.getServletName(), AlignType.CENTER));
		b.addElement(new br());

		//	fini
		createResponse (request, response, servlet, null, doc, true);
	}   //  createErrorPage
"
org.compiere.util.WebUtil.createLoginPage,WebUtil.java,"void createLoginPage (HttpServletRequest request, HttpServletResponse response,
		HttpServlet servlet, Ctx ctx, String AD_Message) throws ServletException, IOException
	{
		request.getSession().invalidate();
		String url = WebEnv.getBaseDirectory(""index.html"");
		//
		WebDoc doc = null;
		if (ctx != null && AD_Message != null && !AD_Message.equals(""""))
			doc = WebDoc.create (Msg.getMsg(ctx, AD_Message));
		else if (AD_Message != null)
			doc = WebDoc.create (AD_Message);
		else
			doc = WebDoc.create (false);
		script script = new script(""window.top.location.replace('"" + url + ""');"");
		doc.getBody().addElement(script);
		//
		createResponse (request, response, servlet, null, doc, false);
	}   //  createLoginPage
"
org.compiere.util.WebUtil.getLoginButton,WebUtil.java,"button getLoginButton (Ctx ctx)
	{
		String text = ""Login"";
		if (ctx != null)
			text = Msg.getMsg (ctx, ""Login"");
		button button = new button();
		button.setType(""button"").setName(""Login"").addElement(text);
		StringBuffer cmd = new StringBuffer (""window.top.location.replace('"");
		cmd.append(WebEnv.getBaseDirectory(""index.html""));
		cmd.append(""');"");
		button.setOnClick(cmd.toString());
		return button;
	}   //  getLoginButton
"
org.compiere.util.WebUtil.getCookieProperties,WebUtil.java,"Properties getCookieProperties(HttpServletRequest request)
	{
		//  Get Properties
		Cookie[] cookies = request.getCookies();
		if (cookies != null)
		{
			for (Cookie element : cookies) {
				if (element.getName().equals(WebEnv.COOKIE_INFO))
					return propertiesDecode(element.getValue());
			}
		}
		return new Properties();
	}   //  getProperties
"
org.compiere.util.WebUtil.getParameter,WebUtil.java,"String getParameter (HttpServletRequest request, String parameter)
	{
		if (request == null || parameter == null)
			return null;
		String enc = request.getCharacterEncoding();
		try
		{
			if (enc == null)
			{
				//YS: As of Apache the Default Encoding of Tomcat is ISO-8859-1 NOT UTF-8!
				request.setCharacterEncoding(""ISO-8859-1"");
				enc = request.getCharacterEncoding();
			}
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""Set CharacterEncoding="" + WebEnv.ENCODING, e);
			enc = request.getCharacterEncoding();
		}
		String data = request.getParameter(parameter);
		if (data == null || data.length() == 0)
			return data;
		
		//	Convert
		if (enc != null && !WebEnv.ENCODING.equals(enc))
		{
			try
			{
				String dataEnc = new String(data.getBytes(enc), WebEnv.ENCODING);
				log.log(Level.FINER, ""Convert "" + data + "" ("" + enc + "")-> "" 
					+ dataEnc + "" ("" + WebEnv.ENCODING + "")"");
				data = dataEnc;
			}
			catch (Exception e)
			{
				log.log(Level.SEVERE, ""Convert "" + data + "" ("" + enc + "")->"" + WebEnv.ENCODING);
			}
		}
		
		//	Convert &#000; to character (JSTL input)
		String inStr = data;
		StringBuffer outStr = new StringBuffer();
		int i = inStr.indexOf(""&#"");
		while (i != -1)
		{
			outStr.append(inStr.substring(0, i));			// up to &#
			inStr = inStr.substring(i+2, inStr.length());	// from &#

			int j = inStr.indexOf("";"");						// next ;
			if (j < 0)										// no second tag
			{
				inStr = ""&#"" + inStr;
				break;
			}

			String token = inStr.substring(0, j);
			try
			{
				int intToken = Integer.parseInt(token);
				outStr.append((char)intToken);				// replace context
			}
			catch (Exception e)
			{
				log.log(Level.SEVERE, ""Token="" + token, e);
				outStr.append(""&#"").append(token).append("";"");
			}
			inStr = inStr.substring(j+1, inStr.length());	// from ;
			i = inStr.indexOf(""&#"");
		}

		outStr.append(inStr);           					//	add remainder
		String retValue = outStr.toString();
		/**
		StringBuffer debug = new StringBuffer();
		char[] cc = data.toCharArray();
		for (int j = 0; j < cc.length; j++)
		{
			debug.append(cc[j]);
			int iii = (int)cc[j];
			debug.append(""["").append(iii).append(""]"");
		}
		log.finest(parameter + ""="" + data + "" -> "" + retValue + "" == "" + debug);
		**/
		log.finest(parameter + ""="" + data + "" -> "" + retValue);
		return retValue;
	}   //  getParameter
"
org.compiere.util.WebUtil.getParameterValues,WebUtil.java,"String[] getParameterValues (HttpServletRequest request, String parameter)
	{
		if (request == null || parameter == null)
			return null;
		String enc = request.getCharacterEncoding();
		try
		{
			if (enc == null)
			{
				//YS: As of Apache the Default Encoding of Tomcat is ISO-8859-1 NOT UTF-8!
				request.setCharacterEncoding(""ISO-8859-1"");
				enc = request.getCharacterEncoding();
			}
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""Set CharacterEncoding="" + WebEnv.ENCODING, e);
			enc = request.getCharacterEncoding();
		}
		
		String[] data = request.getParameterValues(parameter);
		if (data == null)
			return data;
		
		//	Convert
		if (enc != null && !WebEnv.ENCODING.equals(enc))
		{
			String dataEnc[] = new String[data.length];
			for (int i=0;i<data.length;i++)
			{
				try
				{
					dataEnc[i] = new String(data[i].getBytes(enc), WebEnv.ENCODING);
					log.log(Level.FINER, ""Convert "" + data + "" ("" + enc + "")-> "" 
						+ dataEnc + "" ("" + WebEnv.ENCODING + "")"");
					data = dataEnc;
				}
				catch (Exception e)
				{
					log.log(Level.SEVERE, ""Convert "" + data + "" ("" + enc + "")->"" + WebEnv.ENCODING);
				}
			}
		}
		
		String retValue[] = new String[data.length];
		for (int k=0;k<data.length;k++)
		{
			//	Convert &#000; to character (JSTL input)
			String inStr = data[k];
			StringBuffer outStr = new StringBuffer();
			int i = inStr.indexOf(""&#"");
			while (i != -1)
			{
				outStr.append(inStr.substring(0, i));			// up to &#
				inStr = inStr.substring(i+2, inStr.length());	// from &#
	
				int j = inStr.indexOf("";"");						// next ;
				if (j < 0)										// no second tag
				{
					inStr = ""&#"" + inStr;
					break;
				}
	
				String token = inStr.substring(0, j);
				try
				{
					int intToken = Integer.parseInt(token);
					outStr.append((char)intToken);				// replace context
				}
				catch (Exception e)
				{
					log.log(Level.SEVERE, ""Token="" + token, e);
					outStr.append(""&#"").append(token).append("";"");
				}
				inStr = inStr.substring(j+1, inStr.length());	// from ;
				i = inStr.indexOf(""&#"");
			}
	
			outStr.append(inStr);           					//	add remainder
			retValue[k] = outStr.toString();
		}
		/**
		StringBuffer debug = new StringBuffer();
		char[] cc = data.toCharArray();
		for (int j = 0; j < cc.length; j++)
		{
			debug.append(cc[j]);
			int iii = (int)cc[j];
			debug.append(""["").append(iii).append(""]"");
		}
		log.finest(parameter + ""="" + data + "" -> "" + retValue + "" == "" + debug);
		**/
		log.finest(parameter + ""="" + data + "" -> "" + retValue);
		return retValue;
	}   //  getParameter
"
org.compiere.util.WebUtil.getParameterAsInt,WebUtil.java,"int getParameterAsInt (HttpServletRequest request, String parameter)
	{
		if (request == null || parameter == null)
			return 0;
		String data = getParameter(request, parameter);
		if (data == null || data.length() == 0)
			return 0;
		try
		{
			return Integer.parseInt(data);
		}
		catch (Exception e)
		{
			log.warning (parameter + ""="" + data + "" - "" + e);
		}
		return 0;
	}   //  getParameterAsInt
"
org.compiere.util.WebUtil.getParameterAsBD,WebUtil.java,"BigDecimal getParameterAsBD (HttpServletRequest request, String parameter)
	{
		if (request == null || parameter == null)
			return Env.ZERO;
		String data = getParameter(request, parameter);
		if (data == null || data.length() == 0)
			return Env.ZERO;
		try
		{
			return new BigDecimal (data);
		}
		catch (Exception e)
		{
		}
		try
		{
			DecimalFormat format = DisplayType.getNumberFormat(DisplayTypeConstants.Number);
			Object oo = format.parseObject(data);
			if (oo instanceof BigDecimal)
				return (BigDecimal)oo;
			else if (oo instanceof Number)
				return new BigDecimal (((Number)oo).doubleValue());
			return new BigDecimal (oo.toString());
		}
		catch (Exception e)
		{
			log.fine(parameter + ""="" + data + "" - "" + e);
		}
		return Env.ZERO;
	}   //  getParameterAsBD
"
org.compiere.util.WebUtil.getParameterAsDate,WebUtil.java,"Timestamp getParameterAsDate (HttpServletRequest request, 
		String parameter)
	{
		return getParameterAsDate (request, parameter, null);
	}	//	getParameterAsDate
"
org.compiere.util.WebUtil.getParameterAsDate,WebUtil.java,"Timestamp getParameterAsDate (HttpServletRequest request, 
		String parameter, Language language)
	{
		if (request == null || parameter == null)
			return null;
		String data = getParameter(request, parameter);
		if (data == null || data.length() == 0)
			return null;
		
		//	Language Date Format
		if (language != null)
		{
			try
			{
				DateFormat format = DisplayType.getDateFormat(DisplayTypeConstants.Date, language);
				java.util.Date date = format.parse(data);
				if (date != null)
					return new Timestamp (date.getTime());
			}
			catch (Exception e)
			{
			}
		}
		
		//	Default Simple Date Format
		try
		{
			SimpleDateFormat format = DisplayType.getDateFormat(DisplayTypeConstants.Date);
			java.util.Date date = format.parse(data);
			if (date != null)
				return new Timestamp (date.getTime());
		}
		catch (Exception e)
		{
		}
		
		//	JDBC Format
		try 
		{
			return Timestamp.valueOf(data);
		}
		catch (Exception e) 
		{
		}
		
		log.warning(parameter + "" - cannot parse: "" + data);
		return null;
	}   //  getParameterAsDate
"
org.compiere.util.WebUtil.getParameterAsBoolean,WebUtil.java,"boolean getParameterAsBoolean (HttpServletRequest request, 
		String parameter)
	{
		return getParameterAsBoolean(request, parameter, null);
	}	//	getParameterAsBoolean
"
org.compiere.util.WebUtil.getParameterAsBoolean,WebUtil.java,"boolean getParameterAsBoolean (HttpServletRequest request, 
		String parameter, String expected)
	{
		if (request == null || parameter == null)
			return false;
		String data = getParameter(request, parameter);
		if (data == null || data.length() == 0)
			return false;
		//	Ignore actual value
		if (expected == null)
			return true;
		//
		return expected.equalsIgnoreCase(data);
	}   //  getParameterAsBoolean
"
org.compiere.util.WebUtil.getParamOrNull,WebUtil.java,"String getParamOrNull (HttpServletRequest request, String parameter)
    {
        String value = WebUtil.getParameter(request, parameter);
        if(value == null) 
        	return value;
        if (value.length() == 0) 
        	return null;
        return value;
    }	//	getParamOrNull
"
org.compiere.util.WebUtil.reload,WebUtil.java,"void reload(String logMessage, String jsp, HttpSession session, HttpServletRequest request, HttpServletResponse response, ServletContext thisContext)
            throws ServletException, IOException
    {
        session.setAttribute(WebSessionCtx.HDR_MESSAGE, logMessage);
        log.warning("" - "" + logMessage + "" - update not confirmed"");
        thisContext.getRequestDispatcher(jsp).forward(request, response);
    }
"
org.compiere.util.WebUtil.createResponse,WebUtil.java,"void createResponse (HttpServletRequest request, HttpServletResponse response,
		HttpServlet servlet, Properties cookieProperties, WebDoc doc, boolean debug) throws IOException
	{
		response.setHeader(""Cache-Control"", ""no-cache"");
		response.setContentType(""text/html; charset=UTF-8"");

		//
		//  Update Cookie - overwrite
		if (cookieProperties != null)
		{
			Cookie cookie = new Cookie (WebEnv.COOKIE_INFO, propertiesEncode(cookieProperties));
			cookie.setComment(""(c) ComPiere, Inc - Jorg Janke"");
			cookie.setSecure(false);
			cookie.setPath(""/"");
			if (cookieProperties.size() == 0)
				cookie.setMaxAge(0);            //  delete cookie
			else
				cookie.setMaxAge(2592000);      //  30 days in seconds   60*60*24*30
			response.addCookie(cookie);
		}
		//  add diagnostics
		if (debug && WebEnv.DEBUG)
		{
		//	doc.output(System.out);
			WebEnv.addFooter(request, response, servlet, doc.getBody());
		//	doc.output(System.out);
		}
	//	String content = doc.toString();
	//  response.setContentLength(content.length());    //  causes problems at the end of the output

		//  print document
		PrintWriter out = response.getWriter();     //  with character encoding support
		doc.output(out);
		out.flush();
		if (out.checkError())
			log.log(Level.SEVERE, ""error writing"");
		//  binary output (is faster but does not do character set conversion)
	//	OutputStream out = response.getOutputStream();
	//	byte[] data = doc.toString().getBytes();
	//	response.setContentLength(data.length);
	//	out.write(doc.toString().getBytes());
		//
		out.close();
	}   //  createResponse
"
org.compiere.util.WebUtil.getClearFrame,WebUtil.java,"script getClearFrame (String targetFrame)
	{
		StringBuffer cmd = new StringBuffer();
		cmd.append(""<!-- clear frame\n"")
			.append(""var d = parent."").append(targetFrame).append("".document;\n"")
			.append(""d.open();\n"")
			.append(""d.write('<link href=\"""").append(WebEnv.getStylesheetURL()).append(""\"" rel=\""stylesheet\"">');\n"")
			.append(""d.close();\n"")
			.append(""// -- clear frame -->"");
		//
		return new script(cmd.toString());
	}   //  getClearFrame
"
org.compiere.util.WebUtil.getForward,WebUtil.java,"HtmlCode getForward (String url, int delaySec)
	{
		if (delaySec <= 0)
			delaySec = 3;
		HtmlCode retValue = new HtmlCode();
		//	Link
		a a = new a(url);
		a.addElement(url);
		retValue.addElement(a);
		//	Java Script	- document.location - 
		script script = new script(""setTimeout(\""window.top.location.replace('"" + url 
			+ ""')\"","" + (delaySec+1000) + "");"");
		retValue.addElement(script);
		//
		return retValue;
	}	//	getForward
"
org.compiere.util.WebUtil.createForwardPage,WebUtil.java,"void createForwardPage (HttpServletResponse response,
		String title, String forwardURL, int delaySec) throws ServletException, IOException
	{
		response.setContentType(""text/html; charset=UTF-8"");
		WebDoc doc = WebDoc.create(title);
		body b = doc.getBody();
		b.addElement(getForward(forwardURL, delaySec));
		PrintWriter out = response.getWriter();
		doc.output(out);
		out.flush();
		if (out.checkError())
			log.log(Level.SEVERE, ""Error writing"");
		out.close();
		log.fine(forwardURL + "" - "" + title);
	}	//	createForwardPage
"
org.compiere.util.WebUtil.exists,WebUtil.java,"boolean exists (String test)
	{
		if (test == null)
			return false;
		return test.length() > 0;
	}	//	exists
"
org.compiere.util.WebUtil.exists,WebUtil.java,"boolean exists (HttpServletRequest request, String parameter)
	{
		if (request == null || parameter == null)
			return false;
		try
		{
			String enc = request.getCharacterEncoding();
			if (enc == null)
				request.setCharacterEncoding(WebEnv.ENCODING);
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""Set CharacterEncoding="" + WebEnv.ENCODING, e);
		}
		return exists (request.getParameter(parameter));
	}	//	exists
"
org.compiere.util.WebUtil.isEmailValid,WebUtil.java,"boolean isEmailValid (String email)
	{
		if (email == null || email.length () == 0)
			return false;
		try
		{
			InternetAddress ia = new InternetAddress (email, true);
			if (ia != null)
				return true;
		}
		catch (AddressException ex)
		{
			log.warning (email + "" - ""
				+ ex.getLocalizedMessage ());
		}
		return false;
	}	//	isEmailValid
"
org.compiere.util.WebUtil.propertiesEncode,WebUtil.java,"String propertiesEncode (Properties pp)
	{
		ByteArrayOutputStream bos = new ByteArrayOutputStream();
		try
		{
			pp.store(bos, ""Compiere"");   //  Header
		}
		catch (IOException e)
		{
			log.log(Level.SEVERE, ""store"", e);
		}
		String result = new String (bos.toByteArray());
	//	System.out.println(""String="" + result);
		try
		{
			result = URLEncoder.encode(result, WebEnv.ENCODING);
		}
		catch (UnsupportedEncodingException e)
		{
			log.log(Level.SEVERE, ""encode"" + WebEnv.ENCODING, e);
			String enc = System.getProperty(""file.encoding"");      //  Windows default is Cp1252
			try
			{
				result = URLEncoder.encode(result, enc);
				log.info(""encode: "" + enc);
			}
			catch (Exception ex)
			{
				log.log(Level.SEVERE, ""encode"", ex);
			}
		}
	//	System.out.println(""String-Encoded="" + result);
		return result;
	}   //  propertiesEncode
"
org.compiere.util.WebUtil.propertiesDecode,WebUtil.java,"Properties propertiesDecode (String data)
	{
		String result = null;
	//	System.out.println(""String="" + data);
		try
		{
			result = URLDecoder.decode(data, WebEnv.ENCODING);
		}
		catch (UnsupportedEncodingException e)
		{
			log.log(Level.SEVERE, ""decode"" + WebEnv.ENCODING, e);
			String enc = System.getProperty(""file.encoding"");      //  Windows default is Cp1252
			try
			{
				result = URLEncoder.encode(data, enc);
				log.log(Level.SEVERE, ""decode: "" + enc);
			}
			catch (Exception ex)
			{
				log.log(Level.SEVERE, ""decode"", ex);
			}
		}
	//	System.out.println(""String-Decoded="" + result);

		ByteArrayInputStream bis = new ByteArrayInputStream(result.getBytes());
		Properties pp = new Properties();
		try
		{
			pp.load(bis);
		}
		catch (IOException e)
		{
			log.log(Level.SEVERE, ""load"", e);
		}
		return pp;
	}   //  propertiesDecode
"
org.compiere.util.WebUtil.convertToOption,WebUtil.java,"option[] convertToOption (NamePair[] list, String default_ID)
	{
		int size = list.length;
		option[] retValue = new option[size];
		for (int i = 0; i < size; i++)
		{
			boolean selected = false;
			//  select first entry
			if (i == 0 && (default_ID == null || default_ID.length() == 0))
				selected = true;

			//  Create option
			String name = Util.maskHTML(list[i].getName());
			retValue[i] = new option(list[i].getID()).addElement(name);

			//  Select if ID/Key is same as default ID
			if (default_ID != null && default_ID.equals(list[i].getID()))
				selected = true;
			retValue[i].setSelected(selected);
		}
		return retValue;
	}   //  convertToOption
"
org.compiere.util.WebUtil.createField,WebUtil.java,"tr createField (tr line, String FORMNAME, String PARAMETER,
		String labelText, String inputType, Object value,
		int sizeDisplay, int size, boolean longField, 
		boolean mandatory, String onChange, StringBuffer script)
	{
		if (line == null)
			line = new tr();
		String labelInfo = labelText;
		if (mandatory)
		{
			labelInfo += ""&nbsp;<font color=\""red\"">*</font>"";
			String fName = ""document."" + FORMNAME + ""."" + PARAMETER;
			script.append(fName).append("".required=true; "");
		}

		label llabel = new label().setFor(PARAMETER).addElement(labelInfo);
		llabel.setID(""ID_"" + PARAMETER + ""_Label"");
	//	label.setTitle(description);
		line.addElement(new td().addElement(llabel).setAlign(AlignType.RIGHT));
		input iinput = new input(inputType, PARAMETER, value == null ? """" : value.toString());
		iinput.setSize(sizeDisplay).setMaxlength(size);
		iinput.setID(""ID_"" + PARAMETER);
		if (onChange != null && onChange.length() > 0)
			iinput.setOnChange(onChange);
		iinput.setTitle(labelText);
		td field = new td().addElement(iinput).setAlign(AlignType.LEFT);
		if (longField)
			field.setColSpan(3);
		line.addElement(field);
		return line;
	}   //  addField
"
org.compiere.util.WebUtil.createClosePopupButton,WebUtil.java,"input createClosePopupButton()
	{
		input close = new input (input.TYPE_BUTTON, ""closePopup"", ""Close"");
		close.setTitle (""Close PopUp"");	//	Help
		close.setOnClick (""closePopup();return false;"");
		return close;
	}	//	getClosePopupButton
"
org.compiere.util.WebUtil.streamAttachment,WebUtil.java,"String streamAttachment (HttpServletResponse response, 
		MAttachment attachment, int attachmentIndex)
	{
		if (attachment == null)
			return ""No Attachment"";
		
		int realIndex = -1;
		MAttachmentEntry[] entries = attachment.getEntries();
		for (int i = 0; i < entries.length; i++)
		{
			MAttachmentEntry entry = entries[i];
			if (entry.getIndex() == attachmentIndex)
			{
				realIndex = i;
				break;
			}
		}
		if (realIndex < 0)
		{
			log.fine(""No Attachment Entry for Index="" 
				+ attachmentIndex + "" - "" + attachment);
			return ""Attachment Entry not found"";
		}
		
		MAttachmentEntry entry = entries[realIndex];
		if (entry.getData() == null)
		{
			log.fine(""Empty Attachment Entry for Index="" 
				+ attachmentIndex + "" - "" + attachment);
			return ""Attachment Entry empty"";
		}
		
		//	Stream Attachment Entry
		try
		{
			int bufferSize = 2048; //	2k Buffer
			int fileLength = entry.getData().length;
			//
			response.setContentType(entry.getContentType());
			response.setBufferSize(bufferSize);
			response.setContentLength(fileLength);
			//
			log.fine(entry.toString());
			long time = System.currentTimeMillis();		//	timer start
			//
			ServletOutputStream out = response.getOutputStream ();
			out.write (entry.getData());
			out.flush();
			out.close();
			//
			time = System.currentTimeMillis() - time;
			double speed = (fileLength/1024) / ((double)time/1000);
			log.info(""Length="" 
				+ fileLength + "" - "" 
				+ time + "" ms - "" 
				+ speed + "" kB/sec - "" + entry.getContentType());
		}
		catch (IOException ex)
		{
			log.log(Level.SEVERE, ex.toString());
			return ""Streaming error - "" + ex;
		}
		return null;
	}	//	streamAttachment
"
org.compiere.util.WebUtil.streamFile,WebUtil.java,"String streamFile (HttpServletResponse response, File file)
	{
		if (file == null)
			return ""No File"";
		if (!file.exists())
			return ""File not found: "" + file.getAbsolutePath();
		
		MimeType mimeType = MimeType.get(file.getAbsolutePath());
		//	Stream File
		try
		{
			int bufferSize = 2048; //	2k Buffer
			int fileLength = (int)file.length();
			//
			response.setContentType(mimeType.getMimeType());
			response.setBufferSize(bufferSize);
			response.setContentLength(fileLength);
			//
			log.fine(file.toString());
			long time = System.currentTimeMillis();		//	timer start
			//	Get Data
			FileInputStream in = new FileInputStream(file);
			ServletOutputStream out = response.getOutputStream ();
			int c = 0;
			while ((c = in.read()) != -1)
				out.write(c);
			//
			out.flush();
			out.close();
			in.close();
			//
			time = System.currentTimeMillis() - time;
			double speed = (fileLength/1024) / ((double)time/1000);
			log.info(""Length="" 
				+ fileLength + "" - "" 
				+ time + "" ms - "" 
				+ speed + "" kB/sec - "" + mimeType);
		}
		catch (IOException ex)
		{
			log.log(Level.SEVERE, ex.toString());
			return ""Streaming error - "" + ex;
		}
		return null;
	}	//	streamFile
"
org.compiere.util.WebUtil.deleteCookieWebUser,WebUtil.java,"void deleteCookieWebUser (HttpServletRequest request, HttpServletResponse response, String COOKIE_NAME)
	{
		Cookie cookie = new Cookie(COOKIE_NAME, "" "");
		cookie.setComment(""Compiere Web User"");
		cookie.setPath(request.getContextPath());
		cookie.setMaxAge(1);      //  second
		response.addCookie(cookie);
	}	//	deleteCookieWebUser
"
org.compiere.util.WebUtil.sendEMail,WebUtil.java,"String sendEMail (HttpServletRequest request, WebUser to,
		String msgType, Object[] parameter)
	{
		WebSessionCtx wsc = WebSessionCtx.get(request, false);
		if (wsc == null)
			return ""No Context"";
		MStore wStore = wsc.wstore;
		MMailMsg mailMsg = wStore.getMailMsg(msgType);
		//
		StringBuffer subject = new StringBuffer(mailMsg.getSubject());
		if (parameter.length > 0 && parameter[0] != null)
			subject.append(parameter[0]);
		//
		StringBuffer message = new StringBuffer();
		String hdr = wStore.getEMailHeader ();
		if (hdr != null && hdr.length() > 0)
			message.append(hdr).append(""\n"");
		message.append(mailMsg.getMessage());
		if (parameter.length > 1 && parameter[1] != null)
			message.append(parameter[1]);
		if (mailMsg.getMessage2() != null)
		{
			message.append(""\n"")
				.append(mailMsg.getMessage2());
			if (parameter.length > 2 && parameter[2] != null)
				message.append(parameter[2]);
		}
		if (mailMsg.getMessage3() != null)
		{
			message.append(""\n"")
				.append(mailMsg.getMessage3());
			if (parameter.length > 3 && parameter[3] != null)
				message.append(parameter[3]);
		}
		message.append(MRequest.SEPARATOR)
			.append(""http://"").append(request.getServerName()).append(request.getContextPath())
			.append(""/ - "").append(wStore.getName())
			.append(""\n"").append(""Request from: "").append(getFrom(request))
			.append(""\n"");
		String ftr = wStore.getEMailFooter();
		if (ftr != null && ftr.length() > 0)
			message.append(ftr);
		
		//	Create Mail
		EMail email = wStore.createEMail(to.getEmail(), to.getName(),
			subject.toString(), message.toString());
		if (email == null)
			return ""** Invalid: "" + to.getEmail();

		//	CC Order
		if (msgType.equals(X_W_MailMsg.MAILMSGTYPE_OrderAcknowledgement))
		{
			String orderEMail = wStore.getWebOrderEMail();
			String storeEMail = wStore.getWStoreEMail();
			if (orderEMail != null && orderEMail.length() > 0
				&& !orderEMail.equals(storeEMail))	//	already Bcc
				email.addBcc(orderEMail);
		}

		//	Send
		String retValue = email.send();
		//	Log
		MUserMail um = new MUserMail(mailMsg, to.getAD_User_ID(), email);
		um.save();
		//
		return retValue;
	}	//	sendEMail
"
org.compiere.util.WebUtil.getFrom,WebUtil.java,"String getFrom (HttpServletRequest request)
	{
		String host = request.getRemoteHost();
		if (!host.equals(request.getRemoteAddr()))
			host += "" ("" + request.getRemoteAddr() + "")"";
		return host;
	}	//	getFrom
"
org.compiere.util.WebUtil.addCookieWebUser,WebUtil.java,"void addCookieWebUser (HttpServletRequest request, HttpServletResponse response, String webUser, String COOKIE_NAME)
	{
		Cookie cookie = new Cookie(COOKIE_NAME, webUser);
		cookie.setComment(""Compiere Web User"");
		cookie.setPath(request.getContextPath());
		cookie.setMaxAge(2592000);      //  30 days in seconds   60*60*24*30
		response.addCookie(cookie);
	}	//	setCookieWebUser
"
org.compiere.util.WebUtil.resendCode,WebUtil.java,"void resendCode(HttpServletRequest request, WebUser wu)
	{
		String msg = sendEMail(request, wu, 
			X_W_MailMsg.MAILMSGTYPE_UserVerification,
			new Object[]{
				request.getServerName(),
				wu.getName(),
				wu.getEMailVerifyCode()});
		if (EMail.SENT_OK.equals(msg))
			wu.setPasswordMessage (""EMail sent"");
		else
			wu.setPasswordMessage (""Problem sending EMail: "" + msg);
	}	//	resendCode
"
org.compiere.util.WebUtil.updateFields,WebUtil.java,"boolean updateFields (HttpServletRequest request, WebUser wu, boolean updateEMailPwd)
	{
		if (updateEMailPwd)
		{
			String s = WebUtil.getParameter (request, ""PasswordNew"");
			wu.setPasswordMessage (null);
			wu.setPassword (s);
			if (wu.getPasswordMessage () != null)
            {
                return false;
            }
			//
			s = WebUtil.getParameter (request, ""EMail"");
			if (!WebUtil.isEmailValid (s))
			{
				wu.setPasswordMessage (""EMail Invalid"");
				return false;
			}
			wu.setEmail (s.trim());
		}
		//
		StringBuffer mandatory = new StringBuffer();
		String s = WebUtil.getParameter (request, ""Name"");
		if (s != null && s.length() != 0)
			wu.setName(s.trim());
		else
			mandatory.append("" - Name"");
		s = WebUtil.getParameter (request, ""Company"");
		if (s != null && s.length() != 0)
			wu.setCompany(s);
		s = WebUtil.getParameter (request, ""Title"");
		if (s != null && s.length() != 0)
			wu.setTitle(s);
		//
		s = WebUtil.getParameter (request, ""Address"");
		if (s != null && s.length() != 0)
			wu.setAddress(s);
		else
			mandatory.append("" - Address"");
		s = WebUtil.getParameter (request, ""Address2"");
		if (s != null && s.length() != 0)
			wu.setAddress2(s);
		//
		s = WebUtil.getParameter (request, ""City"");
		if (s != null && s.length() != 0)
			wu.setCity(s);
		else
			mandatory.append("" - City"");
		s = WebUtil.getParameter (request, ""Postal"");
		if (s != null && s.length() != 0)
			wu.setPostal(s);
		else
			mandatory.append("" - Postal"");
		//	Set Country before Region for validation
		s = WebUtil.getParameter (request, ""C_Country_ID"");
		if (s != null && s.length() != 0)
			wu.setC_Country_ID(s);
		s = WebUtil.getParameter (request, ""C_Region_ID"");
		if (s != null && s.length() != 0)
			wu.setC_Region_ID(s);
		s = WebUtil.getParameter (request, ""RegionName"");
		if (s != null && s.length() != 0)
			wu.setRegionName(s);
		//
		s = WebUtil.getParameter (request, ""Phone"");
		if (s != null && s.length() != 0)
			wu.setPhone(s);
		s = WebUtil.getParameter (request, ""Phone2"");
		if (s != null && s.length() != 0)
			wu.setPhone2(s);
		s = WebUtil.getParameter (request, ""C_BP_Group_ID"");
		if (s != null && s.length() != 0)
			wu.setC_BP_Group_ID (s);
		s = WebUtil.getParameter (request, ""Fax"");
		if (s != null && s.length() != 0)
			wu.setFax(s);
		//
		if (mandatory.length() > 0)
		{
			mandatory.insert(0, ""Enter Mandatory"");
			wu.setSaveErrorMessage(mandatory.toString());
			return false;
		}
		return wu.save();
	}	//	updateFields
"
org.compiere.util.FastByteArrayOutputStream.verifyBufferSize,FastByteArrayOutputStream.java,"void verifyBufferSize(int sz) {
        if (sz > buf.length) {
            byte[] old = buf;
            buf = new byte[Math.max(sz, 2 * buf.length )];
            System.arraycopy(old, 0, buf, 0, old.length);
            old = null;
        }
    }
"
org.compiere.util.FastByteArrayOutputStream.getSize,FastByteArrayOutputStream.java,"int getSize() {
        return size;
    }
"
org.compiere.util.FastByteArrayOutputStream.getByteArray,FastByteArrayOutputStream.java,"byte[] getByteArray() {
        return buf;
    }
"
org.compiere.util.FastByteArrayOutputStream.write,FastByteArrayOutputStream.java,"void write(byte b[]) {
        verifyBufferSize(size + b.length);
        System.arraycopy(b, 0, buf, size, b.length);
        size += b.length;
    }
"
org.compiere.util.FastByteArrayOutputStream.write,FastByteArrayOutputStream.java,"void write(byte b[], int off, int len) {
        verifyBufferSize(size + len);
        System.arraycopy(b, off, buf, size, len);
        size += len;
    }
"
org.compiere.util.FastByteArrayOutputStream.write,FastByteArrayOutputStream.java,"void write(int b) {
        verifyBufferSize(size + 1);
        buf[size++] = (byte) b;
    }
"
org.compiere.util.FastByteArrayOutputStream.reset,FastByteArrayOutputStream.java,"void reset() {
        size = 0;
    }
"
org.compiere.util.FastByteArrayOutputStream.getInputStream,FastByteArrayOutputStream.java,"InputStream getInputStream() {
    	log.info(""The size of the deep copy is :""+size);
        return new FastByteArrayInputStream(buf, size);
    }
"
org.compiere.util.FastByteArrayInputStream.available,FastByteArrayInputStream.java,"int available() {
		return count - pos;
	}
"
org.compiere.util.FastByteArrayInputStream.read,FastByteArrayInputStream.java,"int read() {
		return (pos < count) ? (buf[pos++] & 0xff) : -1;
	}
"
org.compiere.util.FastByteArrayInputStream.read,FastByteArrayInputStream.java,"int read(byte[] b, int off, int len) {
		if (pos >= count)
			return -1;

		if ((pos + len) > count)
			len = (count - pos);

		System.arraycopy(buf, pos, b, off, len);
		pos += len;
		return len;
	}
"
org.compiere.util.FastByteArrayInputStream.skip,FastByteArrayInputStream.java,"long skip(long n) {
		if ((pos + n) > count)
			n = count - pos;
		if (n < 0)
			return 0;
		pos += n;
		return n;
	}
"
org.compiere.util.WebUser.get,WebUser.java,"WebUser get (HttpServletRequest request)
	{
		HttpSession session = request.getSession(false);
		if (session == null)
			return null;
		return (WebUser)session.getAttribute(WebUser.NAME);
	}	//	get
"
org.compiere.util.WebUser.get,WebUser.java,"WebUser get (Ctx ctx, String email)
	{
		return get (ctx, email, null, true);
	}	//	get
"
org.compiere.util.WebUser.get,WebUser.java,"WebUser get (Ctx ctx, String email, String password, boolean useCache)
	{
		if (!useCache)
			s_cache = null;
		if (s_cache != null && email != null && email.equals(s_cache.getEmail()))
		{
			//	if password is null, don't check it
			if (password == null || password.equals(s_cache.getPassword()))
				return s_cache;
			s_cache.setPasswordOK(false, null);
			return s_cache;
		}
		s_cache = new WebUser (ctx, email, password);
		return s_cache;
	}	//	get
"
org.compiere.util.WebUser.get,WebUser.java,"WebUser get (Ctx ctx, int AD_User_ID)
	{
		if (s_cache != null && s_cache.getAD_User_ID() == AD_User_ID)
			return s_cache;
		s_cache = new WebUser (ctx, AD_User_ID, null);
		return s_cache;
	}	//	get
"
org.compiere.util.WebUser.load,WebUser.java,"void load (String email, String password)
	{
		log.info(email + "" - AD_Client_ID="" + m_AD_Client_ID);
		String sql = ""SELECT * ""
			+ ""FROM AD_User ""
			+ ""WHERE AD_Client_ID=?""
			+ "" AND TRIM(EMail)=?"";
		if (email == null)
			email = """";

		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, m_AD_Client_ID);
			pstmt.setString(2, email.trim());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				m_bpc = new MUser (m_ctx, rs, null);
				log.fine(""Found BPC="" + m_bpc);
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}

		//	Check Password
		m_passwordOK = false;
		/**	User has no password
		if (m_bpc != null && m_bpc.getPassword() == null)
		{
			if (password != null)
				m_bpc.setPassword(password);
			m_passwordOK = true;
		}	**/
		//	We have a password
		if (m_bpc != null && password != null && password.equals(m_bpc.getPassword()))
			m_passwordOK = true;
		if (m_passwordOK || m_bpc == null)
			m_passwordMessage = null;
		else
			setPasswordOK (false, password);

		//	Load BPartner
		if (m_bpc != null)
		{
			m_bp = new MBPartner (m_ctx, m_bpc.getC_BPartner_ID (), null);
			log.fine(""Found BP="" + m_bp);
		}
		else
			m_bp = null;
		//	Load Loacation
		if (m_bpc != null)
		{
			if (m_bpc.getC_BPartner_Location_ID() != 0)
			{
				m_bpl = new MBPartnerLocation (m_ctx, m_bpc.getC_BPartner_Location_ID (), null);
				log.fine(""Found BPL="" + m_bpl);
			}
			else
			{
				MBPartnerLocation[] bpls = m_bp.getLocations(false);
				if (bpls != null && bpls.length > 0)
				{
					m_bpl = bpls[0];
					log.fine(""Found BPL="" + m_bpl);
				}
			}
			if (m_bpl != null)
			{
				m_loc = MLocation.get (m_ctx, m_bpl.getC_Location_ID(), null);
				log.fine(""Found LOC="" + m_loc);
			}
			else
				m_loc = null;
		}
		else
		{
			m_bpl = null;
			m_loc = null;
		}

		//	Make sure that all entities exist
		if (m_bpc == null)
		{
			m_bpc = new MUser (m_ctx, 0, null);
			m_bpc.setEMail(email);
			m_bpc.setPassword(password);
		}
		if (m_bp == null)
		{
			m_bp = new MBPartner (m_ctx, null); //	template
			m_bp.setIsCustomer(true);
		}
		if (m_bpl == null)
			m_bpl = new MBPartnerLocation (m_bp);
		if (m_loc == null)
			m_loc = new MLocation (m_ctx, 0, null);
		//
		log.config(m_bp + "" - "" + m_bpc);
	}	//	load
"
org.compiere.util.WebUser.load,WebUser.java,"void load (int AD_User_ID)
	{
		log.info(""ID="" + AD_User_ID + "", AD_Client_ID="" + m_AD_Client_ID);
		String sql = ""SELECT * ""
			+ ""FROM AD_User ""
			+ ""WHERE AD_Client_ID=?""
			+ "" AND AD_User_ID=?"";

		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, m_AD_Client_ID);
			pstmt.setInt(2, AD_User_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				m_bpc = new MUser (m_ctx, rs, null);
				log.fine(""= found BPC="" + m_bpc);
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}

		//	Password not entered
		m_passwordOK = false;
		m_loggedIn = false;

		//	Load BPartner
		if (m_bpc != null)
		{
			m_bp = new MBPartner (m_ctx, m_bpc.getC_BPartner_ID (), null);
			log.fine(""= Found BP="" + m_bp);
		}
		else
			m_bp = null;
		//	Load Loacation
		if (m_bpc != null)
		{
			if (m_bpc.getC_BPartner_Location_ID() != 0)
			{
				m_bpl = new MBPartnerLocation (m_ctx, m_bpc.getC_BPartner_Location_ID (), null);
				log.fine(""= Found BPL="" + m_bpl);
			}
			else
			{
				MBPartnerLocation[] bpls = m_bp.getLocations(false);
				if (bpls != null && bpls.length > 0)
				{
					m_bpl = bpls[0];
					log.fine(""= Found BPL="" + m_bpl);
				}
			}
			if (m_bpl != null)
			{
				m_loc = MLocation.get (m_ctx, m_bpl.getC_Location_ID(), null);
				log.fine(""= Found LOC="" + m_loc);
			}
			else
				m_loc = null;
		}
		else
		{
			m_bpl = null;
			m_loc = null;
		}

		//	Make sure that all entities exist
		if (m_bpc == null)
		{
			m_bpc = new MUser (m_ctx, 0, null);
			m_bpc.setEMail(""?"");
			m_bpc.setPassword(""?"");
		}
		if (m_bp == null)
		{
			m_bp = new MBPartner (m_ctx, null); //	template
			m_bp.setIsCustomer(true);
		}
		if (m_bpl == null)
			m_bpl = new MBPartnerLocation (m_bp);
		if (m_loc == null)
			m_loc = new MLocation (m_ctx, 0, null);
		//
		log.info(""= "" + m_bp + "" - "" + m_bpc);
	}	//	load
"
org.compiere.util.WebUser.isValid,WebUser.java,"boolean isValid()
	{
		if (m_bpc == null)
			return false;
		boolean ok = m_bpc.getAD_User_ID() != 0;
		return ok;
	}	//	isValid
"
org.compiere.util.WebUser.isEMailValid,WebUser.java,"boolean isEMailValid()
	{
		if (m_bpc == null || !WebUtil.exists(getEmail()))
		{
			log.fine(getEmail() + "", bpc="" + m_bpc);
			return false;
		}
		//
		boolean ok = m_bpc.getAD_User_ID() != 0
			&& m_bpc.isEMailValid();
		if (!ok)
			log.fine(getEmail()
				+ "", ID="" + m_bpc.getAD_User_ID()
				+ "", Online="" + m_bpc.isOnline()
				+ "", EMailValid="" + m_bpc.isEMailValid());
		return ok;
	}	//	isEMailValid
"
org.compiere.util.WebUser.isEMailVerified,WebUser.java,"boolean isEMailVerified()
	{
		return m_bpc != null
			&& m_bpc.isEMailVerified();
	}	//	isEMailVerified
"
org.compiere.util.WebUser.toString,WebUser.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer(""WebUser["");
		sb.append(getEmail())
			.append("",LoggedIn="").append(m_loggedIn)
			.append("","").append(m_bpc)
			.append("",PasswordOK="").append(m_passwordOK)
			.append("",Valid="").append(isValid())
			.append("" - "").append(m_bp).append(""Customer="").append(isCustomer())
			.append(""]"");
		return sb.toString();
	}	//	toString
"
org.compiere.util.WebUser.save,WebUser.java,"boolean save()
	{
		m_saveErrorMessage = null;
		log.info(""BP.Value="" + m_bp.getValue() + "", Name="" + m_bp.getName());
		try
		{
			//	check if BPartner exists	***********************************
			if (m_bp.getC_BPartner_ID() == 0)
			{
				String sql = ""SELECT * FROM C_BPartner WHERE AD_Client_ID=? AND Value=?"";
				PreparedStatement pstmt = null;
				try
				{
					pstmt = DB.prepareStatement(sql, (Trx) null);
					pstmt.setInt (1, m_AD_Client_ID);
					pstmt.setString (2, m_bp.getValue());
					ResultSet rs = pstmt.executeQuery();
					if (rs.next())
					{
						m_bp = new MBPartner (m_ctx, m_bpc.getC_BPartner_ID (), null);
						log.fine(""BP loaded ="" + m_bp);
					}
					rs.close();
					pstmt.close();
					pstmt = null;
				}
				catch (Exception e)
				{
					log.log(Level.SEVERE, ""save-check"", e);
				}
				finally
				{
					try
					{
						if (pstmt != null)
							pstmt.close ();
					}
					catch (Exception e)
					{}
					pstmt = null;
				}
			}

			//	save BPartner			***************************************
			if (m_bp.getName () == null || m_bp.getName().length() == 0)
				m_bp.setName (m_bpc.getName());
			if (m_bp.getValue() == null || m_bp.getValue().length() == 0)
				m_bp.setValue(m_bpc.getEMail());
			log.fine(""BP="" + m_bp);
			if (!m_bp.save ())
			{
				m_saveErrorMessage = ""Could not save Business Partner"";
				return false;
			}

			//	save Location			***************************************
			log.fine(""LOC="" + m_loc);
			m_loc.save ();

			//	save BP Location		***************************************
			if (m_bpl.getC_BPartner_ID () != m_bp.getC_BPartner_ID())
				m_bpl.setC_BPartner_ID (m_bp.getC_BPartner_ID());
			if (m_bpl.getC_Location_ID () != m_loc.getC_Location_ID())
				m_bpl.setC_Location_ID (m_loc.getC_Location_ID());
			log.fine(""BPL="" + m_bpl);
			if (!m_bpl.save ())
			{
				m_saveErrorMessage = ""Could not save Location"";
				return false;
			}

			//	save Contact			***************************************
			if (m_bpc.getC_BPartner_ID () != m_bp.getC_BPartner_ID())
				m_bpc.setC_BPartner_ID (m_bp.getC_BPartner_ID());
			if (m_bpc.getC_BPartner_Location_ID () != m_bpl.getC_BPartner_Location_ID ())
				m_bpc.setC_BPartner_Location_ID (m_bpl.getC_BPartner_Location_ID ());
			log.fine(""BPC="" + m_bpc);
			if (!m_bpc.save ())
			{
				m_saveErrorMessage = ""Could not save Contact"";
				return false;
			}
		}
		catch (Exception ex)
		{
			log.log(Level.SEVERE, ""save"", ex);
			m_saveErrorMessage = ex.toString();
			return false;
		}
		//
		return true;
	}	//	save
"
org.compiere.util.WebUser.setSaveErrorMessage,WebUser.java,"void setSaveErrorMessage(String msg)
	{
		m_saveErrorMessage = msg;
	}
"
org.compiere.util.WebUser.getSaveErrorMessage,WebUser.java,"String getSaveErrorMessage()
	{
		return m_saveErrorMessage;
	}
"
org.compiere.util.WebUser.getEmail,WebUser.java,"String getEmail ()	//	needs to be that way for jsp
	{
		return m_bpc.getEMail();
	}
"
org.compiere.util.WebUser.setEmail,WebUser.java,"void setEmail (String email)
	{
		m_bpc.setEMail(email);
	}
"
org.compiere.util.WebUser.getName,WebUser.java,"String getName ()
	{
		return m_bpc.getName();
	}
"
org.compiere.util.WebUser.setName,WebUser.java,"void setName (String name)
	{
		m_bpc.setName(name);
	}
"
org.compiere.util.WebUser.setValue,WebUser.java,"void setValue (String value)
	{
		m_bp.setValue (value);
	}
"
org.compiere.util.WebUser.getTitle,WebUser.java,"String getTitle ()
	{
		return m_bpc.getTitle();
	}
"
org.compiere.util.WebUser.setTitle,WebUser.java,"void setTitle (String title)
	{
		m_bpc.setTitle(title);
	}
"
org.compiere.util.WebUser.getPassword,WebUser.java,"String getPassword ()
	{
		String pwd = m_bpc.getPassword();
		if (pwd == null || pwd.length() == 0)	//	if no password use time
			pwd = String.valueOf(System.currentTimeMillis());
		return pwd;
	}	//	getPassword
"
org.compiere.util.WebUser.setPassword,WebUser.java,"void setPassword ()
	{
		String pwd = m_bpc.getPassword();
		if ((pwd == null || pwd.length() == 0)	//	no password set
			&& m_bpc.getC_BPartner_ID() != 0 && m_bpc.getAD_User_ID() != 0 )	//	existing BPartner
		{
			pwd = String.valueOf (System.currentTimeMillis ());
			m_bpc.setPassword (pwd);
			m_bpc.save();
		}
	}	//	setPassword
"
org.compiere.util.WebUser.setPassword,WebUser.java,"void setPassword (String password)
	{
		if (password == null || password.length() == 0)
			m_passwordMessage = ""Enter Password"";
		m_bpc.setPassword (password);
	}	//	setPassword
"
org.compiere.util.WebUser.setPasswordOK,WebUser.java,"void setPasswordOK (boolean ok, String password)
	{
		m_passwordOK = ok;
		if (ok)
			m_passwordMessage = null;
		else if (password == null || password.length() == 0)
			m_passwordMessage = ""Enter Password"";
		else
			m_passwordMessage = ""Invalid Password"";
	}	//	setPasswordOK
"
org.compiere.util.WebUser.isPasswordOK,WebUser.java,"boolean isPasswordOK()
	{
		if (m_bpc == null || !WebUtil.exists(m_bpc.getPassword()))
			return false;
		return m_passwordOK;
	}	//	isPasswordOK
"
org.compiere.util.WebUser.getPasswordMessage,WebUser.java,"String getPasswordMessage ()
	{
		return m_passwordMessage;
	}	//	getPasswordMessage
"
org.compiere.util.WebUser.setPasswordMessage,WebUser.java,"void setPasswordMessage (String passwordMessage)
	{
		m_passwordMessage = passwordMessage;
	}	//	setPasswordMessage
"
org.compiere.util.WebUser.login,WebUser.java,"boolean login (String password)
	{
		m_loggedIn = isValid () 			//	we have a contact
			 && WebUtil.exists (password) 	//	we have a password
			 && password.equals (getPassword ());
		setPasswordOK (m_loggedIn, password);
		log.fine(""success="" + m_loggedIn);
		if (m_loggedIn)
			m_ctx.setAD_User_ID(getAD_User_ID());
		return m_loggedIn;
	}	//	isLoggedIn
"
org.compiere.util.WebUser.logout,WebUser.java,"void logout ()
	{
		m_loggedIn = false;
	}	//	isLoggedIn
"
org.compiere.util.WebUser.isLoggedIn,WebUser.java,"boolean isLoggedIn ()
	{
		return m_loggedIn;
	}	//	isLoggedIn
"
org.compiere.util.WebUser.getPhone,WebUser.java,"String getPhone ()
	{
		return m_bpc.getPhone();
	}
"
org.compiere.util.WebUser.setPhone,WebUser.java,"void setPhone (String phone)
	{
		m_bpc.setPhone(phone);
	}
"
org.compiere.util.WebUser.getPhone2,WebUser.java,"String getPhone2 ()
	{
		return m_bpc.getPhone2();
	}
"
org.compiere.util.WebUser.setPhone2,WebUser.java,"void setPhone2 (String phone2)
	{
		m_bpc.setPhone2(phone2);
	}
"
org.compiere.util.WebUser.getFax,WebUser.java,"String getFax ()
	{
		return m_bpc.getFax();
	}
"
org.compiere.util.WebUser.setFax,WebUser.java,"void setFax (String fax)
	{
		m_bpc.setFax(fax);
	}
"
org.compiere.util.WebUser.getBirthday,WebUser.java,"Timestamp getBirthday ()
	{
		return m_bpc.getBirthday();
	}
"
org.compiere.util.WebUser.setBirthday,WebUser.java,"void setBirthday (Timestamp birthday)
	{
		m_bpc.setBirthday(birthday);
	}
"
org.compiere.util.WebUser.getTaxID,WebUser.java,"String getTaxID ()
	{
		return m_bp.getTaxID();
	}
"
org.compiere.util.WebUser.setTaxID,WebUser.java,"void setTaxID (String taxID)
	{
		m_bp.setTaxID(taxID);
	}
"
org.compiere.util.WebUser.getAD_Client_ID,WebUser.java,"int getAD_Client_ID ()
	{
		return m_bpc.getAD_Client_ID();
	}
"
org.compiere.util.WebUser.getAD_User_ID,WebUser.java,"int getAD_User_ID ()
	{
		return m_bpc.getAD_User_ID();
	}
"
org.compiere.util.WebUser.getContactID,WebUser.java,"int getContactID ()
	{
		return getAD_User_ID();
	}
"
org.compiere.util.WebUser.getCompany,WebUser.java,"String getCompany()
	{
		return m_bp.getName();
	}
"
org.compiere.util.WebUser.setCompany,WebUser.java,"void setCompany(String company)
	{
		if (company==null) {
			m_bp.setName (m_bpc.getName ());
		} else {
			m_bp.setName(company);
		}
	}
"
org.compiere.util.WebUser.getC_BPartner_ID,WebUser.java,"int getC_BPartner_ID ()
	{
		return m_bp.getC_BPartner_ID();
	}
"
org.compiere.util.WebUser.getBpartnerID,WebUser.java,"int getBpartnerID ()
	{
		return m_bp.getC_BPartner_ID();
	}
"
org.compiere.util.WebUser.getM_PriceList_ID,WebUser.java,"int getM_PriceList_ID ()
	{
		return m_bp.getM_PriceList_ID();
	}
"
org.compiere.util.WebUser.getC_BPartner_Location_ID,WebUser.java,"int getC_BPartner_Location_ID ()
	{
		return m_bpl.getC_BPartner_Location_ID();
	}
"
org.compiere.util.WebUser.getAddress,WebUser.java,"String getAddress ()
	{
		return m_loc.getAddress1();
	}
"
org.compiere.util.WebUser.setAddress,WebUser.java,"void setAddress (String address)
	{
		m_loc.setAddress1(address);
	}
"
org.compiere.util.WebUser.getAddress2,WebUser.java,"String getAddress2 ()
	{
		return m_loc.getAddress2();
	}
"
org.compiere.util.WebUser.setAddress2,WebUser.java,"void setAddress2 (String address2)
	{
		m_loc.setAddress2(address2);
	}
"
org.compiere.util.WebUser.getCity,WebUser.java,"String getCity ()
	{
		return m_loc.getCity();
	}
"
org.compiere.util.WebUser.setCity,WebUser.java,"void setCity (String city)
	{
		m_loc.setCity(city);
	}
"
org.compiere.util.WebUser.getPostal,WebUser.java,"String getPostal ()
	{
		return m_loc.getPostal();
	}
"
org.compiere.util.WebUser.setPostal,WebUser.java,"void setPostal (String postal)
	{
		m_loc.setPostal(postal);
	}
"
org.compiere.util.WebUser.getRegionName,WebUser.java,"String getRegionName ()
	{
		return m_loc.getRegionName(false);
	}
"
org.compiere.util.WebUser.setRegionName,WebUser.java,"void setRegionName (String region)
	{
		m_loc.setRegionName(region);
	}
"
org.compiere.util.WebUser.getC_Region_ID,WebUser.java,"int getC_Region_ID ()
	{
		return m_loc.getC_Region_ID();
	}
"
org.compiere.util.WebUser.getRegionID,WebUser.java,"String getRegionID ()
	{
		return String.valueOf(getC_Region_ID());
	}
"
org.compiere.util.WebUser.setC_Region_ID,WebUser.java,"void setC_Region_ID (int C_Region_ID)
	{
		m_loc.setC_Region_ID(C_Region_ID);
	}
"
org.compiere.util.WebUser.setC_Region_ID,WebUser.java,"void setC_Region_ID (String C_Region_ID)
	{
		try
		{
			if (C_Region_ID == null || C_Region_ID.length() == 0)
				setC_Region_ID(0);
			else
				setC_Region_ID(Integer.parseInt(C_Region_ID));
		}
		catch (Exception e)
		{
			setC_Region_ID(0);
			log.log(Level.WARNING, C_Region_ID, e);
		}
	}
"
org.compiere.util.WebUser.getCountryName,WebUser.java,"String getCountryName ()
	{
		return m_loc.getCountryName();
	}
"
org.compiere.util.WebUser.setCountryName,WebUser.java,"void setCountryName (String country)
	{
		log.warning(country + "" Ignored - C_Country_ID="" + m_loc.getC_Country_ID());
		//	m_loc.setCountryName(country);
	}
"
org.compiere.util.WebUser.getC_Country_ID,WebUser.java,"int getC_Country_ID ()
	{
		return m_loc.getC_Country_ID();
	}
"
org.compiere.util.WebUser.getCountryID,WebUser.java,"String getCountryID ()
	{
		return String.valueOf(getC_Country_ID());
	}
"
org.compiere.util.WebUser.setC_Country_ID,WebUser.java,"void setC_Country_ID (int C_Country_ID)
	{
		m_loc.setC_Country_ID(C_Country_ID);
	}
"
org.compiere.util.WebUser.setC_Country_ID,WebUser.java,"void setC_Country_ID (String C_Country_ID)
	{
		try
		{
			if (C_Country_ID == null || C_Country_ID.length() == 0)
				setC_Country_ID(0);
			else
				setC_Country_ID(Integer.parseInt(C_Country_ID));
		}
		catch (Exception e)
		{
			setC_Country_ID(0);
			log.log(Level.WARNING, C_Country_ID, e);
		}
	}
"
org.compiere.util.WebUser.setC_BP_Group_ID,WebUser.java,"void setC_BP_Group_ID (int C_BP_Group_ID)
	{
		m_bp.setC_BP_Group_ID (C_BP_Group_ID);
	}
"
org.compiere.util.WebUser.setC_BP_Group_ID,WebUser.java,"void setC_BP_Group_ID (String C_BP_Group_ID)
	{
		try
		{
			if (C_BP_Group_ID == null || C_BP_Group_ID.length() == 0)
				setC_BP_Group_ID(0);
			else
				setC_BP_Group_ID(Integer.parseInt(C_BP_Group_ID));
		}
		catch (Exception e)
		{
			setC_BP_Group_ID(0);
			log.log(Level.WARNING, C_BP_Group_ID, e);
		}
	}
"
org.compiere.util.WebUser.isEmployee,WebUser.java,"boolean isEmployee()
	{
		return m_bp.isEmployee();
	}
"
org.compiere.util.WebUser.isSalesRep,WebUser.java,"boolean isSalesRep()
	{
		return m_bp.isSalesRep();
	}
"
org.compiere.util.WebUser.isCustomer,WebUser.java,"boolean isCustomer()
	{
		return m_bp.isCustomer();
	}
"
org.compiere.util.WebUser.setIsCustomer,WebUser.java,"void setIsCustomer(boolean isCustomer)
	{
		m_bp.setIsCustomer(isCustomer);
	}
"
org.compiere.util.WebUser.isVendor,WebUser.java,"boolean isVendor()
	{
		return m_bp.isVendor();
	}
"
org.compiere.util.WebUser.getSalesRep_ID,WebUser.java,"int getSalesRep_ID()
	{
		return m_bp.getSalesRep_ID();
	}
"
org.compiere.util.WebUser.hasBPAccess,WebUser.java,"boolean hasBPAccess (String BPAccessType, Object[] params)
	{
		return m_bpc.hasBPAccess (BPAccessType, params);
	}
"
org.compiere.util.WebUser.isCreditStopHold,WebUser.java,"boolean isCreditStopHold()
	{
		return m_bp.isCreditStopHold();
	}	//	isCreditStopHold
"
org.compiere.util.WebUser.isCreditCritical,WebUser.java,"boolean isCreditCritical()
	{
		String status = m_bp.getSOCreditStatus();
		return X_C_BPartner.SOCREDITSTATUS_CreditStop.equals(status)
			|| X_C_BPartner.SOCREDITSTATUS_CreditHold.equals(status)
			|| X_C_BPartner.SOCREDITSTATUS_CreditWatch.equals(status);
	}
"
org.compiere.util.WebUser.getSOCreditStatus,WebUser.java,"String getSOCreditStatus()
	{
		return MRefList.getListName(m_ctx, X_C_BPartner.SOCREDITSTATUS_AD_Reference_ID, m_bp.getSOCreditStatus());
	}	//	getSOCreditStatus
"
org.compiere.util.WebUser.getBankAccount,WebUser.java,"MBPBankAccount getBankAccount()
	{
		return getBankAccount(false);
	}
"
org.compiere.util.WebUser.getBankAccount,WebUser.java,"MBPBankAccount getBankAccount(boolean requery)
	{
		MBPBankAccount retValue = null;
		//	Find Bank Account for exact User
		MBPBankAccount[] bas = m_bp.getBankAccounts(requery);
		for (MBPBankAccount element : bas) {
			if (element.getAD_User_ID() == getAD_User_ID() && element.isActive())
				retValue = element;
		}

		//	create new
		if (retValue == null)
		{
			retValue = new MBPBankAccount (m_ctx, m_bp, m_bpc, m_loc);
			retValue.setAD_User_ID(getAD_User_ID());
			retValue.save();
		}
		
		return retValue;
	}	//	getBankAccount
"
org.compiere.util.WebUser.getEMailVerifyCode,WebUser.java,"String getEMailVerifyCode()
	{
		return m_bpc.getEMailVerifyCode();
	}	//	getEMailVerifyCode
"
org.compiere.util.WebUser.setEMailVerifyCode,WebUser.java,"boolean setEMailVerifyCode(String code, String info)
	{
		boolean success = m_bpc.setEMailVerifyCode(code, info);
		String s = m_bpc.getEMail() + "" - "" + info;
		if (m_bpc.setEMailVerifyCode(code, info))
		{
			setPasswordMessage(null);
			s = ""OK: "" + s;
		}
		else
		{
			setPasswordMessage(""Invalid Code"");
			s = ""Error: "" + s + ""; Code="" + code;
		}
		if (!m_bpc.save())
		{
			log.severe(""User NOT saved "" + s);
			success = false;
		}
		else
			log.info(s);
		return success;
	}	//	setEMailVerifyCode
"
org.compiere.util.WebEnv.initWeb,WebEnv.java,"boolean initWeb (ServletConfig config)
	{
		if (s_initOK)
		{
			log.info(config.getServletName());
			return true;
		}
		else
			initWeb (config.getServletContext(), ""ServletInit"");

		Enumeration<?> en = config.getInitParameterNames();
		StringBuffer info2 = new StringBuffer(""Servlet Init Parameter: "")
			.append(config.getServletName());
		while (en.hasMoreElements())
		{
			String name = en.nextElement().toString();
			String value = config.getInitParameter(name);
			System.setProperty(name, value);
			info2.append(""\n"").append(name).append(""="").append(value);
		}

		boolean retValue = initWeb (config.getServletContext(), config.getServletName());
		
		//	Logging now initiated
		log.info(info2.toString());
		return retValue;
	}   //  initWeb
"
org.compiere.util.WebEnv.initWeb,WebEnv.java,"boolean initWeb (ServletContext context, String info)
	{
		if (s_initOK)
		{
			log.info(context.getServletContextName());
			return true;
		}
		
		//  Load Environment Variables (serverApps/src/web/WEB-INF/web.xml)
		Enumeration<?> en = context.getInitParameterNames();
		StringBuffer info2 = new StringBuffer(""Servlet Context Init Parameters: "")
			.append(context.getServletContextName());
		while (en.hasMoreElements())
		{
			String name = en.nextElement().toString();
			String value = context.getInitParameter(name);
			System.setProperty(name, value);
			info2.append(""\n"").append(name).append(""="").append(value);
		}

		try
		{
			s_initOK = Compiere.startup(false, info);
		}
		catch (Exception ex)
		{
			log.log(Level.SEVERE, ""startup"", ex); 
		}
		if (!s_initOK)
			return false;

		//	Logging now initiated
		log.info(info2.toString());
		//
		Ctx ctx = new Ctx();
		MClient client = MClient.get(ctx, 0);
		MSystem system = MSystem.get(ctx);
		client.sendEMail(client.getRequestEMail(), client.getName(),
			""Server started: "" + system.getName(), 
			""ServerInfo: "" + context.getServerInfo(), null);

		return s_initOK;
	}	//	initWeb
"
org.compiere.util.WebEnv.getBaseDirectory,WebEnv.java,"String getBaseDirectory (String entry)
	{
		StringBuffer sb = new StringBuffer (DIR_BASE);
		if (!entry.startsWith(""/""))
			sb.append(""/"");
		sb.append(entry);
		return sb.toString();
	}   //  getBaseDirectory
"
org.compiere.util.WebEnv.getImageDirectory,WebEnv.java,"String getImageDirectory(String entry)
	{
		StringBuffer sb = new StringBuffer (DIR_BASE);
		sb.append(""/"").append(DIR_IMAGE);
		if (!entry.startsWith(""/""))
			sb.append(""/"");
		sb.append(entry);
		return sb.toString();
	}   //  getImageDirectory
"
org.compiere.util.WebEnv.getStoreDirectory,WebEnv.java,"String getStoreDirectory(String entry)
	{
		StringBuffer sb = new StringBuffer (DIR_BASE);
		sb.append(""/"").append(DIR_STORE);
		if (!entry.startsWith(""/""))
			sb.append(""/"");
		sb.append(entry);
		return sb.toString();
	}   //  getStoreDirectory
"
org.compiere.util.WebEnv.getLogoURL,WebEnv.java,"String getLogoURL()
	{
		return getBaseDirectory(LOGO);
	}   //  getLogoPath
"
org.compiere.util.WebEnv.getLogo,WebEnv.java,"img getLogo()
	{
		/** Removing/modifying the Compiere logo is a violation of the license	*/
		return new img(getLogoURL()).setAlign(AlignType.RIGHT)
		//	Changing the copyright notice in any way violates the license 
		//	and you'll be held liable for any damage claims
			.setAlt(""&copy; Jorg Janke/Compiere"");	
	}   //  getLogo
"
org.compiere.util.WebEnv.getStylesheetURL,WebEnv.java,"String getStylesheetURL()
	{
		return getBaseDirectory(STYLE_STD);
	}   //  getStylesheetURL
"
org.compiere.util.WebEnv.getCellContent,WebEnv.java,"String getCellContent (Object content)
	{
		if (content == null)
			return NBSP;
		String str = content.toString();
		if (str.length() == 0)
			return NBSP;
		return str;
	}	//	getCellContent
"
org.compiere.util.WebEnv.getCellContent,WebEnv.java,"String getCellContent (int content)
	{
		return String.valueOf(content);
	}	//	getCellContent
"
org.compiere.util.WebEnv.dump,WebEnv.java,"void dump (ServletConfig config)
	{
		log.config(""ServletConfig "" + config.getServletName());
		log.config(""- Context="" + config.getServletContext());
		if (!CLogMgt.isLevelFiner())
			return;
		boolean first = true;
		Enumeration<?> e = config.getInitParameterNames();
		while (e.hasMoreElements())
		{
			if (first)
				log.finer(""InitParameter:"");
			first = false;
			String key = (String)e.nextElement();
			Object value = config.getInitParameter(key);
			log.finer(""- "" + key + "" = "" + value);
		}
	}	//	dump (ServletConfig)
"
org.compiere.util.WebEnv.dump,WebEnv.java,"void dump (ServletContext ctx)
	{
		log.config(""ServletContext "" + ctx.getServletContextName());
		log.config(""- ServerInfo="" + ctx.getServerInfo());
		if (!CLogMgt.isLevelFiner())
			return;
		boolean first = true;
		Enumeration<?> e = ctx.getInitParameterNames();
		while (e.hasMoreElements())
		{
			if (first)
				log.finer(""InitParameter:"");
			first = false;
			String key = (String)e.nextElement();
			Object value = ctx.getInitParameter(key);
			log.finer(""- "" + key + "" = "" + value);
		}
		first = true;
		e = ctx.getAttributeNames();
		while (e.hasMoreElements())
		{
			if (first)
				log.finer(""Attributes:"");
			first = false;
			String key = (String)e.nextElement();
			Object value = ctx.getAttribute(key);
			log.finer(""- "" + key + "" = "" + value);
		}
	}	//	dump
"
org.compiere.util.WebEnv.dump,WebEnv.java,"void dump (HttpSession session)
	{
		log.config(""Session "" + session.getId());
		log.config(""- Created="" + new Timestamp(session.getCreationTime()));
		if (!CLogMgt.isLevelFiner())
			return;
		boolean first = true;
		Enumeration<?> e = session.getAttributeNames();
		while (e.hasMoreElements())
		{
			if (first)
				log.finer(""Attributes:"");
			first = false;
			String key = (String)e.nextElement();
			Object value = session.getAttribute(key);
			log.finer(""- "" + key + "" = "" + value);
		}
	}	//	dump (session)
"
org.compiere.util.WebEnv.dump,WebEnv.java,"void dump (HttpServletRequest request)
	{
		log.config(""Request "" + request.getProtocol() + "" "" + request.getMethod());
		if (!CLogMgt.isLevelFiner())
			return;
		log.finer(""- Server=""  + request.getServerName() + "", Port="" + request.getServerPort());
		log.finer(""- ContextPath="" + request.getContextPath()
			+ "", ServletPath="" + request.getServletPath()
			+ "", Query="" + request.getQueryString());
		log.finer(""- From "" + request.getRemoteHost() + ""/"" + request.getRemoteAddr()
			//	+ "":"" + request.getRemotePort() 
				+ "" - User="" + request.getRemoteUser());
		log.finer(""- URI="" + request.getRequestURI() + "", URL="" + request.getRequestURL());
		log.finer(""- AuthType="" + request.getAuthType());
		log.finer(""- Secure="" + request.isSecure());
		log.finer(""- PathInfo="" + request.getPathInfo() + "" - "" + request.getPathTranslated());
		log.finer(""- UserPrincipal="" + request.getUserPrincipal());
		//
		boolean first = true;
		Enumeration<?> e = request.getHeaderNames();
		/** Header Names */
		while (e.hasMoreElements())
		{
			if (first)
				log.finer(""- Header:"");
			first = false;
			String key = (String)e.nextElement();
			Object value = request.getHeader(key);
			log.finer(""  - "" + key + "" = "" + value);
		}
		/** **/
		first = true;
		/** Parameter	*/
		try
		{
			String enc = request.getCharacterEncoding();
			if (enc == null)
				request.setCharacterEncoding(WebEnv.ENCODING);
		}
		catch (Exception ee)
		{
			log.log(Level.SEVERE, ""Set CharacterEncoding="" + WebEnv.ENCODING, ee);
		}
		e = request.getParameterNames();
		while (e.hasMoreElements())
		{
			if (first)
				log.finer(""- Parameter:"");
			first = false;
			String key = (String)e.nextElement();
			String value = WebUtil.getParameter (request, key);
			log.finer(""  - "" + key + "" = "" + value);
		}
		first = true;
		/** Attributes	*/
		e = request.getAttributeNames();
		while (e.hasMoreElements())
		{
			if (first)
				log.finer(""- Attributes:"");
			first = false;
			String key = (String)e.nextElement();
			Object value = request.getAttribute(key);
			log.finer(""  - "" + key + "" = "" + value);
		}
		/** Cookies	*/
		Cookie[] ccc = request.getCookies();
		if (ccc != null)
		{
			for (int i = 0; i < ccc.length; i++)
			{
				if (i == 0)
					log.finer(""- Cookies:"");
				log.finer (""  - "" + ccc[i].getName ()
					+ "", Domain="" + ccc[i].getDomain ()
					+ "", Path="" + ccc[i].getPath ()
					+ "", MaxAge="" + ccc[i].getMaxAge ());
			}
		}
		log.finer(""- Encoding="" + request.getCharacterEncoding());
		log.finer(""- Locale="" + request.getLocale());
		first = true;
		e = request.getLocales();
		while (e.hasMoreElements())
		{
			if (first)
				log.finer(""- Locales:"");
			first = false;
			log.finer(""  - "" + e.nextElement());
		}
		log.finer(""- Class="" + request.getClass().getName());
	}	//	dump (Request)
"
org.compiere.util.WebEnv.addFooter,WebEnv.java,"void addFooter(HttpServletRequest request, HttpServletResponse response,
		HttpServlet servlet, body body)
	{
		body.addElement(new hr());
		body.addElement(new comment("" --- Footer Start --- ""));
		//  Command Line
		p footer = new p();
		footer.addElement(org.compiere.Compiere.DATE_VERSION + "": "");
		footer.addElement(new a(""javascript:diag_window();"", ""Window Info""));
		footer.addElement("" - "");
		footer.addElement(new a(""javascript:diag_navigator();"", ""Browser Info""));
		footer.addElement("" - "");
		footer.addElement(new a(""javascript:diag_request();"", ""Request Info""));
		footer.addElement("" - "");
		footer.addElement(new a(""javascript:diag_document();"", ""Document Info""));
		footer.addElement("" - "");
		footer.addElement(new a(""javascript:diag_form();"", ""Form Info""));
		footer.addElement("" - "");
		footer.addElement(new a(""javascript:toggle('DEBUG');"", ""Servlet Info""));
		footer.addElement("" - "");
		footer.addElement(new a(""javascript:diag_source();"", ""Show Source""));
		footer.addElement(""\n"");
		body.addElement(footer);

		//  Add ServletInfo
		body.addElement(new br());
		body.addElement(getServletInfo(request, response, servlet));
		body.addElement(new script(""hide('DEBUG');""));
		body.addElement(new comment("" --- Footer End --- ""));
	}   //  getFooter
"
org.compiere.util.WebEnv.getServletInfo,WebEnv.java,"table getServletInfo (HttpServletRequest request,
		HttpServletResponse response, HttpServlet servlet)
	{
		table table = new table();
		table.setID(""DEBUG"");
		Enumeration<?> e;

		tr space = new tr().addElement(new td().addElement("".""));
		//	Request Info
		table.addElement(space);
		table.addElement(new tr().addElement(new td().addElement(new h3(""Request Info"")) ));
		table.addElement(new tr().addElement(new td().addElement(""Method""))
									.addElement(new td().addElement(request.getMethod() )));
		table.addElement(new tr().addElement(new td().addElement(""Protocol""))
									.addElement(new td().addElement(request.getProtocol() )));
		table.addElement(new tr().addElement(new td().addElement(""URI""))
									.addElement(new td().addElement(request.getRequestURI() )));
		table.addElement(new tr().addElement(new td().addElement(""Context Path""))
									.addElement(new td().addElement(request.getContextPath() )));
		table.addElement(new tr().addElement(new td().addElement(""Servlet Path""))
									.addElement(new td().addElement(request.getServletPath() )));
		table.addElement(new tr().addElement(new td().addElement(""Path Info""))
									.addElement(new td().addElement(request.getPathInfo() )));
		table.addElement(new tr().addElement(new td().addElement(""Path Translated""))
									.addElement(new td().addElement(request.getPathTranslated() )));
		table.addElement(new tr().addElement(new td().addElement(""Query String""))
									.addElement(new td().addElement(request.getQueryString() )));
		table.addElement(new tr().addElement(new td().addElement(""Content Length""))
									.addElement(new td().addElement("""" + request.getContentLength() )));
		table.addElement(new tr().addElement(new td().addElement(""Content Type""))
									.addElement(new td().addElement(request.getContentType() )));
		table.addElement(new tr().addElement(new td().addElement(""Character Encoding""))
									.addElement(new td().addElement(request.getCharacterEncoding() )));
		table.addElement(new tr().addElement(new td().addElement(""Locale""))
									.addElement(new td().addElement(request.getLocale().toString() )));
		table.addElement(new tr().addElement(new td().addElement(""Schema""))
									.addElement(new td().addElement(request.getScheme() )));
		table.addElement(new tr().addElement(new td().addElement(""Server Name""))
									.addElement(new td().addElement(request.getServerName() )));
		table.addElement(new tr().addElement(new td().addElement(""Server Port""))
									.addElement(new td().addElement("""" + request.getServerPort() )));
		table.addElement(new tr().addElement(new td().addElement(""Remote User""))
									.addElement(new td().addElement(request.getRemoteUser() )));
		table.addElement(new tr().addElement(new td().addElement(""Remote Address""))
									.addElement(new td().addElement(request.getRemoteAddr() )));
		table.addElement(new tr().addElement(new td().addElement(""Remote Host""))
									.addElement(new td().addElement(request.getRemoteHost() )));
		table.addElement(new tr().addElement(new td().addElement(""Authorization Type""))
									.addElement(new td().addElement(request.getAuthType() )));
		table.addElement(new tr().addElement(new td().addElement(""User Principal""))
									.addElement(new td().addElement(request.getUserPrincipal()==null ? """" : request.getUserPrincipal().toString())));
		table.addElement(new tr().addElement(new td().addElement(""IsSecure""))
									.addElement(new td().addElement(request.isSecure() ? ""true"" : ""false"" )));

		//	Request Attributes
		table.addElement(space);
		table.addElement(new tr().addElement(new td().addElement(new h3(""Request Attributes"")) ));
		e = request.getAttributeNames();
		while (e.hasMoreElements())
		{
			String name = e.nextElement().toString();
			String attrib = request.getAttribute(name).toString();
			table.addElement(new tr().addElement(new td().addElement(name))
										.addElement(new td().addElement(attrib)));
		}

		//	Request Parameter
		table.addElement(space);
		table.addElement(new tr().addElement(new td().addElement(new h3(""Req Parameters"")) ));
		try
		{
			String enc = request.getCharacterEncoding();
			if (enc == null)
				request.setCharacterEncoding(WebEnv.ENCODING);
		}
		catch (Exception ee)
		{
			log.log(Level.SEVERE, ""Set CharacterEncoding="" + WebEnv.ENCODING, ee);
		}
		e = request.getParameterNames();
		while (e.hasMoreElements())
		{
			String name = (String)e.nextElement();
			String para = WebUtil.getParameter (request, name);
			table.addElement(new tr().addElement(new td().addElement(name))
										.addElement(new td().addElement(para)));
		}

		//	Request Header
		table.addElement(space);
		table.addElement(new tr().addElement(new td().addElement(new h3(""Req Header"")) ));
		e = request.getHeaderNames();
		while (e.hasMoreElements())
		{
			String name = (String)e.nextElement();
			if (!name.equals(""Cockie""))
			{
				String hdr = request.getHeader(name);
				table.addElement(new tr().addElement(new td().addElement(name))
											.addElement(new td().addElement(hdr)));
			}
		}

		//  Request Cookies
		table.addElement(space);
		table.addElement(new tr().addElement(new td().addElement(new h3(""Req Cookies"")) ));
		Cookie[] cc = request.getCookies();
		if (cc != null)
		{
			for (Cookie element : cc) {
				//	Name and Comment
				table.addElement(new tr().addElement(new td().addElement(element.getName() ))
											.addElement(new td().addElement(element.getValue()) ));
				table.addElement(new tr().addElement(new td().addElement(element.getName()+"": Comment"" ))
											.addElement(new td().addElement(element.getComment()) ));
				table.addElement(new tr().addElement(new td().addElement(element.getName()+"": Domain"" ))
											.addElement(new td().addElement(element.getDomain()) ));
				table.addElement(new tr().addElement(new td().addElement(element.getName()+"": Max Age"" ))
											.addElement(new td().addElement(""""+ element.getMaxAge()) ));
				table.addElement(new tr().addElement(new td().addElement(element.getName()+"": Path"" ))
											.addElement(new td().addElement(element.getPath()) ));
				table.addElement(new tr().addElement(new td().addElement(element.getName()+"": Is Secure"" ))
											.addElement(new td().addElement(element.getSecure() ? ""true"" : ""false"") ));
				table.addElement(new tr().addElement(new td().addElement(element.getName()+"": Version"" ))
											.addElement(new td().addElement("""" + element.getVersion()) ));
			}
		}	//	Cookies

		//  Request Session Info
		table.addElement(space);
		table.addElement(new tr().addElement(new td().addElement(new h3(""Req Session"")) ));
		HttpSession session = request.getSession(true);
		table.addElement(new tr().addElement(new td().addElement(""Session ID""))
									.addElement(new td().addElement(session.getId() )));
		Timestamp ts = new Timestamp(session.getCreationTime());
		table.addElement(new tr().addElement(new td().addElement(""Created""))
									.addElement(new td().addElement(ts.toString() )));
		ts = new Timestamp(session.getLastAccessedTime());
		table.addElement(new tr().addElement(new td().addElement(""Accessed""))
									.addElement(new td().addElement(ts.toString() )));
		table.addElement(new tr().addElement(new td().addElement(""Request Session ID""))
									.addElement(new td().addElement(request.getRequestedSessionId() )));
		table.addElement(new tr().addElement(new td().addElement("".. via Cookie""))
									.addElement(new td().addElement("""" + request.isRequestedSessionIdFromCookie() )));
		table.addElement(new tr().addElement(new td().addElement("".. via URL""))
									.addElement(new td().addElement("""" + request.isRequestedSessionIdFromURL() )));
		table.addElement(new tr().addElement(new td().addElement(""Valid""))
									.addElement(new td().addElement("""" + request.isRequestedSessionIdValid() )));

		//	Request Session Attributes
		table.addElement(space);
		table.addElement(new tr().addElement(new td().addElement(new h3(""Session Attributes"")) ));
		e = session.getAttributeNames();
		while (e.hasMoreElements())
		{
			String name = (String)e.nextElement();
			String attrib = session.getAttribute(name).toString();
			table.addElement(new tr().addElement(new td().addElement(name))
										.addElement(new td().addElement(attrib)));
		}

		//	Response Info
		table.addElement(space);
		table.addElement(new tr().addElement(new td().addElement(new h3(""Response"")) ));
		table.addElement(new tr().addElement(new td().addElement(""Buffer Size""))
									.addElement(new td().addElement(String.valueOf(response.getBufferSize()) )));
		table.addElement(new tr().addElement(new td().addElement(""Character Encoding""))
									.addElement(new td().addElement(response.getCharacterEncoding() )));
		table.addElement(new tr().addElement(new td().addElement(""Locale""))
									.addElement(new td().addElement(response.getLocale()==null ? ""null"" : response.getLocale().toString())));

		//  Servlet
		table.addElement(space);
		table.addElement(new tr().addElement(new td().addElement(new h3(""Servlet"")) ));
		table.addElement(new tr().addElement(new td().addElement(""Name""))
										.addElement(new td().addElement(servlet.getServletName())));
		table.addElement(new tr().addElement(new td().addElement(""Info""))
										.addElement(new td().addElement(servlet.getServletInfo())));

		//  Servlet Init
		table.addElement(space);
		table.addElement(new tr().addElement(new td().addElement(new h3(""Servlet Init Parameter"")) ));
		e = servlet.getInitParameterNames();
		//  same as:  servlet.getServletConfig().getInitParameterNames();
		while (e.hasMoreElements())
		{
			String name = (String)e.nextElement();
			String para = servlet.getInitParameter(name);
			table.addElement(new tr().addElement(new td().addElement(name))
										.addElement(new td().addElement(para)));
		}

		//  Servlet Context
		table.addElement(space);
		table.addElement(new tr().addElement(new td().addElement(new h3(""Servlet Context"")) ));
		ServletContext servCtx = servlet.getServletContext();
		e = servCtx.getAttributeNames();
		while (e.hasMoreElements())
		{
			String name = (String)e.nextElement();
			String attrib = servCtx.getAttribute(name).toString();
			table.addElement(new tr().addElement(new td().addElement(name))
										.addElement(new td().addElement(attrib)));
		}

		//  Servlet Context
		table.addElement(space);
		table.addElement(new tr().addElement(new td().addElement(new h3(""Servlet Context Init Parameter"")) ));
		e = servCtx.getInitParameterNames();
		while (e.hasMoreElements())
		{
			String name = (String)e.nextElement();
			String attrib = servCtx.getInitParameter(name);
			table.addElement(new tr().addElement(new td().addElement(name))
										.addElement(new td().addElement(attrib)));
		}

		/*	*/
		return table;
	}	//	getServletInfo
"
org.compiere.util.WebInfo.getGeneral,WebInfo.java,"WebInfo getGeneral()
	{
		if (m_general == null)
			m_general = new WebInfo (new Ctx(), null);
		return m_general;
	}	//	getGeneral
"
org.compiere.util.WebInfo.toString,WebInfo.java,"String toString()
	{
		StringBuffer sb = new StringBuffer(""WebInfo["");
		sb.append(getC_BPartner_ID());
		sb.append(""]"");
		return sb.toString();
	}	//	toString
"
org.compiere.util.WebInfo.getMessage,WebInfo.java,"String getMessage()
	{
		String retValue = m_infoMessage;
		m_infoMessage = null;
		return retValue;
	}	//	getMessage
"
org.compiere.util.WebInfo.getInfo,WebInfo.java,"String getInfo()
	{
		return m_infoMessage;
	}	//	getInfo
"
org.compiere.util.WebInfo.setMessage,WebInfo.java,"void setMessage (String msg)
	{
		m_infoMessage = msg;
	}	//	setMessage
"
org.compiere.util.WebInfo.getId,WebInfo.java,"int getId()
	{
		return m_id;
	}	//	getId
"
org.compiere.util.WebInfo.setId,WebInfo.java,"void setId (String id)
	{
		try
		{
			setId (Integer.parseInt (id));
		}
		catch (NumberFormatException ex)
		{
			log.log(Level.SEVERE, ""ID="" + id + "" - "" + ex.toString());
			m_id = 0;
		}
	}	//	setId
"
org.compiere.util.WebInfo.setId,WebInfo.java,"void setId (int id)
	{
		log.info(""ID="" + id);
		m_id = id;
	}	//	setId
"
org.compiere.util.WebInfo.getAD_Client_ID,WebInfo.java,"int getAD_Client_ID()
	{
		if (m_wu == null)
			return -1;
		return m_wu.getAD_Client_ID();
	}	//	getC_BPartner_ID
"
org.compiere.util.WebInfo.getC_BPartner_ID,WebInfo.java,"int getC_BPartner_ID()
	{
		if (m_wu == null)
			return -1;
		return m_wu.getC_BPartner_ID();
	}	//	getC_BPartner_ID
"
org.compiere.util.WebInfo.getAD_User_ID,WebInfo.java,"int getAD_User_ID()
	{
		if (m_wu == null)
			return -1;
		return m_wu.getAD_User_ID();
	}	//	getAD_User_ID
"
org.compiere.util.WebInfo.getUser_ID,WebInfo.java,"int getUser_ID()
	{
		return getAD_User_ID();
	}	//	getAD_User_ID
"
org.compiere.util.WebInfo.getWebUser,WebInfo.java,"WebUser getWebUser()
	{
		return m_wu;
	}
"
org.compiere.util.WebInfo.getOrders,WebInfo.java,"ArrayList<MOrder> getOrders()
	{
		m_infoMessage = null;
		ArrayList<MOrder> list = new ArrayList<MOrder>();
		if (m_wu != null &&
			!m_wu.hasBPAccess(X_AD_UserBPAccess.BPACCESSTYPE_BusinessDocuments,
				new Object[] {MDocBaseType.DOCBASETYPE_PurchaseOrder, MDocBaseType.DOCBASETYPE_SalesOrder}))
		{
			log.info(""No Access"");
			return list;
		}

		String sql = ""SELECT * FROM C_Order WHERE Bill_BPartner_ID=?""
			+ "" AND DocStatus NOT IN ('DR','IN') ""
			+ ""ORDER BY DocumentNo DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, getC_BPartner_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MOrder (m_ctx, rs, null));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		log.fine(""#"" + list.size());
		MSession session = MSession.get(m_ctx);
		if (session != null)
			session.queryLog(getAD_Client_ID(), m_ctx.getAD_Org_ID(),
				X_C_Order.Table_ID, sql, list.size(), getC_BPartner_ID());
		else
			list.clear();
		return list;
	}	//	getOrders
"
org.compiere.util.WebInfo.getOrder,WebInfo.java,"MOrder getOrder()
	{
		m_infoMessage = null;
		MOrder retValue = null;
		if (m_wu != null &&
			!m_wu.hasBPAccess(X_AD_UserBPAccess.BPACCESSTYPE_BusinessDocuments,
				new Object[] {MDocBaseType.DOCBASETYPE_PurchaseOrder, MDocBaseType.DOCBASETYPE_SalesOrder}))
		{
			log.info(""No Access"");
			return null;
		}
		String sql = ""SELECT * FROM C_Order WHERE Bill_BPartner_ID=? AND C_Order_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, getC_BPartner_ID());
			pstmt.setInt(2, m_id);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				retValue = new MOrder (m_ctx, rs, null);
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""C_Order_ID="" + m_id, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		log.fine(""C_Order_ID="" + m_id + "" - "" + retValue);
		MSession session = MSession.get(m_ctx);
		if (session != null)
			session.queryLog(getAD_Client_ID(), m_ctx.getAD_Org_ID(),
				X_C_Order.Table_ID, sql, retValue == null ? 0 : 1,
					new Object[]{getC_BPartner_ID(), m_id});
		else
			retValue = null;
		return retValue;
	}	//	getOrder
"
org.compiere.util.WebInfo.getShipments,WebInfo.java,"ArrayList<MInOut> getShipments()
	{
		m_infoMessage = null;
		ArrayList<MInOut> list = new ArrayList<MInOut>();
		if (m_wu != null &&
			!m_wu.hasBPAccess(X_AD_UserBPAccess.BPACCESSTYPE_BusinessDocuments,
				new Object[] {MDocBaseType.DOCBASETYPE_MaterialReceipt, MDocBaseType.DOCBASETYPE_MaterialDelivery}))
		{
			log.info(""No Access"");
			return list;
		}

		String sql = ""SELECT * FROM M_InOut WHERE C_BPartner_ID=?""
			+ "" AND DocStatus NOT IN ('DR','IN') ""
			+ "" ORDER BY DocumentNo DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, getC_BPartner_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MInOut (m_ctx, rs, null));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		log.fine(""#"" + list.size());
		MSession session = MSession.get(m_ctx);
		if (session != null)
			session.queryLog(getAD_Client_ID(), m_ctx.getAD_Org_ID(),
				X_M_InOut.Table_ID, sql, list.size(), getC_BPartner_ID());
		else
			list.clear();
		return list;
	}	//	getShipments
"
org.compiere.util.WebInfo.getRequestsOwn,WebInfo.java,"ArrayList<MRequest> getRequestsOwn ()
	{
		return getRequests(true);
	}	//	getRequestsOwn
"
org.compiere.util.WebInfo.getRequestsAssigned,WebInfo.java,"ArrayList<MRequest> getRequestsAssigned ()
	{
		return getRequests(false);
	}	//	getRequestsAssigned
"
org.compiere.util.WebInfo.getRequests,WebInfo.java,"ArrayList<MRequest> getRequests (boolean own)
	{
		m_infoMessage = null;
		ArrayList<MRequest> list = new ArrayList<MRequest>();
		String sql = null;
		if (own)	//	All Requests
			sql = ""SELECT * FROM R_Request r ""
				+ ""WHERE r.C_BPartner_ID=?""		//	#1
				+ "" AND (r.AD_User_ID=?""		//	#2
				+ "" OR EXISTS (SELECT * FROM AD_User u ""
					+ ""WHERE u.AD_User_ID=? AND r.C_BPartner_ID=u.C_BPartner_ID AND IsFullBPAccess='Y')"" // #3
				+ "" OR EXISTS (SELECT * FROM AD_User u INNER JOIN AD_UserBPAccess a ON (u.AD_User_ID=a.AD_User_ID) ""
					+ ""WHERE u.AD_User_ID=? AND r.C_BPartner_ID=u.C_BPartner_ID""	// #4
					+ "" AND a.BPAccessType='R' AND (a.R_RequestType_ID IS NULL OR a.R_RequestType_ID=r.R_RequestType_ID)) ) ""
				+ ""ORDER BY r.DocumentNo DESC"";
		else	//	Open Requests of Sales Rep
			sql = ""SELECT * FROM R_Request ""
				+ ""WHERE SalesRep_ID IN (SELECT AD_User_ID FROM AD_User WHERE C_BPartner_ID=?)""
				+ "" AND R_Status_ID IN (SELECT R_Status_ID FROM R_Status WHERE IsClosed='N')""
				+ ""ORDER BY DocumentNo DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, getC_BPartner_ID());
			if (own)
			{
				pstmt.setInt(2, getAD_User_ID());
				pstmt.setInt(3, getAD_User_ID());
				pstmt.setInt(4, getAD_User_ID());
			}
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add (new MRequest (m_ctx, rs, null));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		log.fine(""Own="" + own +"" #"" + list.size());
		MSession session = MSession.get(m_ctx);
		if (session != null)
			session.queryLog(getAD_Client_ID(), m_ctx.getAD_Org_ID(),
				X_R_Request.Table_ID, sql, list.size(),
				new Object[]{getC_BPartner_ID(), getAD_User_ID()});
		else
			list.clear();
		return list;
	}	//	getRequests
"
org.compiere.util.WebInfo.getRequest,WebInfo.java,"MRequest getRequest()
	{
		m_infoMessage = null;
		MRequest retValue = null;
		String sql = ""SELECT * FROM R_Request ""
			+ ""WHERE R_Request_ID=?""
			+ "" AND (C_BPartner_ID=?""
			+ "" OR SalesRep_ID IN (SELECT AD_User_ID FROM AD_User WHERE C_BPartner_ID=?))"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, m_id);
			pstmt.setInt(2, getC_BPartner_ID());
			pstmt.setInt(3, getC_BPartner_ID());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				retValue = new MRequest (m_ctx, rs, null);
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""R_Request_ID="" + m_id, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		log.fine(""R_Request_ID="" + m_id + "" - "" + retValue);
		MSession session = MSession.get(m_ctx);
		if (session != null)
			session.queryLog(getAD_Client_ID(), m_ctx.getAD_Org_ID(),
				X_R_Request.Table_ID, sql, retValue == null ? 0 : 1,
					new Object[]{m_id, getC_BPartner_ID()});
		else
			retValue = null;
		return retValue;
	}	//	getRequest
"
org.compiere.util.WebInfo.getRequestTypes,WebInfo.java,"ArrayList<MRequestType> getRequestTypes ()
	{
		m_infoMessage = null;
		ArrayList<MRequestType> list = new ArrayList<MRequestType>();
		String sql = ""SELECT * FROM R_RequestType ""
			+ ""WHERE IsSelfService='Y' AND AD_Client_ID=? ORDER BY Name"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, getAD_Client_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add (new MRequestType (m_ctx, rs, null));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		log.fine(""#"" + list.size());
		return list;
	}	//	getRequestTypes
"
org.compiere.util.WebInfo.getRequestType,WebInfo.java,"MRequestType getRequestType ()
	{
		m_infoMessage = null;
		MRequestType retValue = null;
		String sql = ""SELECT * FROM R_RequestType WHERE IsSelfService='Y' AND R_RequestType_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, m_id);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				retValue = new MRequestType (m_ctx, rs, null);
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		log.fine(""R_RequestType_ID="" + m_id + "" - "" + retValue);
		return retValue;
	}	//	getRequestType
"
org.compiere.util.WebInfo.getInvoices,WebInfo.java,"ArrayList<MInvoice> getInvoices()
	{
		m_infoMessage = null;
		ArrayList<MInvoice> list = new ArrayList<MInvoice>();
		if (m_wu != null &&
			!m_wu.hasBPAccess(X_AD_UserBPAccess.BPACCESSTYPE_BusinessDocuments,
				new Object[] {MDocBaseType.DOCBASETYPE_APInvoice, MDocBaseType.DOCBASETYPE_APCreditMemo,
				MDocBaseType.DOCBASETYPE_ARInvoice, MDocBaseType.DOCBASETYPE_ARCreditMemo}))
		{
			log.info(""No Access"");
			return list;
		}
		String sql = ""SELECT * FROM C_Invoice WHERE C_BPartner_ID=?""
			+ "" AND DocStatus NOT IN ('DR','IN') ""
			+ ""ORDER BY DocumentNo DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, getC_BPartner_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MInvoice (m_ctx, rs, null));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		log.fine(""#"" + list.size());
		MSession session = MSession.get(m_ctx);
		if (session != null)
			session.queryLog(getAD_Client_ID(), m_ctx.getAD_Org_ID(),
				X_C_Invoice.Table_ID, sql, list.size(), getC_BPartner_ID());
		else
			list.clear();
		return list;
	}	//	getInvoices
"
org.compiere.util.WebInfo.getInvoice,WebInfo.java,"MInvoice getInvoice()
	{
		m_infoMessage = null;
		MInvoice retValue = null;
		if (m_wu != null &&
			!m_wu.hasBPAccess(X_AD_UserBPAccess.BPACCESSTYPE_BusinessDocuments,
				new Object[] {MDocBaseType.DOCBASETYPE_APInvoice, MDocBaseType.DOCBASETYPE_APCreditMemo,
				MDocBaseType.DOCBASETYPE_ARInvoice, MDocBaseType.DOCBASETYPE_ARCreditMemo}))
		{
			log.info(""No Access"");
			return null;
		}
		String sql = ""SELECT * FROM C_Invoice WHERE C_BPartner_ID=? AND C_Invoice_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, getC_BPartner_ID());
			pstmt.setInt(2, m_id);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				retValue = new MInvoice (m_ctx, rs, null);
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""C_Invoice_ID="" + m_id, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		log.fine(""C_Invoice_ID="" + m_id + "" - "" + retValue);
		MSession session = MSession.get(m_ctx);
		if (session != null)
			session.queryLog(getAD_Client_ID(), m_ctx.getAD_Org_ID(),
				X_C_Invoice.Table_ID, sql, retValue == null ? 0 : 1,
					new Object[]{getC_BPartner_ID(), m_id});
		else
			retValue = null;
		return retValue;
	}	//	getInvoice
"
org.compiere.util.WebInfo.getPayments,WebInfo.java,"ArrayList<MPayment> getPayments()
	{
		m_infoMessage = null;
		ArrayList<MPayment> list = new ArrayList<MPayment>();
		if (m_wu != null &&
			!m_wu.hasBPAccess(X_AD_UserBPAccess.BPACCESSTYPE_BusinessDocuments,
				new Object[] {MDocBaseType.DOCBASETYPE_APPayment, MDocBaseType.DOCBASETYPE_ARReceipt}))
		{
			log.info(""No Access"");
			return list;
		}
		String sql = ""SELECT * FROM C_Payment WHERE C_BPartner_ID=?""
			+ "" AND DocStatus NOT IN ('DR','IN') ""
			+ ""ORDER BY DocumentNo DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, getC_BPartner_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MPayment (m_ctx, rs, null));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		log.fine(""#"" + list.size());
		MSession session = MSession.get(m_ctx);
		if (session != null)
			session.queryLog(getAD_Client_ID(), m_ctx.getAD_Org_ID(),
				X_C_Payment.Table_ID, sql, list.size(), getC_BPartner_ID());
		else
			list.clear();
		return list;
	}	//	getPayments
"
org.compiere.util.WebInfo.getAssets,WebInfo.java,"ArrayList<MAsset> getAssets()
	{
		m_infoMessage = null;
		ArrayList<MAsset> list = new ArrayList<MAsset>();
		if (m_wu != null)
		{
			if (m_wu.isCreditStopHold())
				return list;
			if (!m_wu.isEMailVerified())
				return list;
		}
		if (m_wu != null &&
			!m_wu.hasBPAccess(X_AD_UserBPAccess.BPACCESSTYPE_AssetsDownload, null))
		{
			log.info(""No Access"");
			return list;
		}
		// select assets for active products only
		String sql = ""SELECT * FROM A_Asset a INNER JOIN M_PRODUCT p ON (a.M_PRODUCT_ID=p.M_PRODUCT_ID) WHERE a.C_BPartner_ID=? AND a.IsActive='Y' AND p.IsActive='Y' ORDER BY a.Name"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, getC_BPartner_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MAsset (m_ctx, rs, null));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		log.fine(""#"" + list.size());
		MSession session = MSession.get(m_ctx);
		if (session != null)
			session.queryLog(getAD_Client_ID(), m_ctx.getAD_Org_ID(),
				X_A_Asset.Table_ID, sql, list.size(), getC_BPartner_ID());
		else
			list.clear();
		return list;
	}	//	getAssets
"
org.compiere.util.WebInfo.getInterests,WebInfo.java,"ArrayList<MInterestArea> getInterests()
	{
		m_infoMessage = null;
		int AD_Client_ID = m_ctx.getAD_Client_ID();
		//
		ArrayList<MInterestArea> list = new ArrayList<MInterestArea>();
		String sql = ""SELECT * FROM R_InterestArea ""
			+ ""WHERE IsActive='Y' AND IsSelfService='Y'""
			+ "" AND AD_Client_ID=? ""
			+ ""ORDER BY Name"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, AD_Client_ID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				MInterestArea ia = new MInterestArea (m_ctx, rs, null);
				ia.setSubscriptionInfo(getAD_User_ID());
				list.add (ia);
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		log.fine(""#"" + list.size());
		return list;
	}	//	getInterests
"
org.compiere.util.WebInfo.getAdvertisements,WebInfo.java,"ArrayList<MAdvertisement> getAdvertisements()
	{
		m_infoMessage = null;
		ArrayList<MAdvertisement> list = new ArrayList<MAdvertisement>();
		String sql = ""SELECT * FROM W_Advertisement WHERE C_BPartner_ID=? ORDER BY ValidFrom DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, getC_BPartner_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MAdvertisement (m_ctx, rs, null));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		log.fine(""#"" + list.size());
		return list;
	}	//	getAdvertisement
"
org.compiere.util.WebInfo.getAllAds,WebInfo.java,"ArrayList<MAdvertisement> getAllAds()
	{
		m_infoMessage = null;
		ArrayList<MAdvertisement> list = new ArrayList<MAdvertisement>();
		String sql = ""SELECT * FROM W_Advertisement WHERE IsActive='Y' ORDER BY Description"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MAdvertisement (m_ctx, rs, null));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		log.fine(""#"" + list.size());
		return list;
	}	//	getAllAds
"
org.compiere.util.WebInfo.getCommissionedInvoices,WebInfo.java,"ArrayList<MInvoice> getCommissionedInvoices()
	{
		m_infoMessage = null;
		ArrayList<MInvoice> list = new ArrayList<MInvoice>();
		String sql = ""SELECT * FROM C_Invoice ""
			+ ""WHERE (C_Invoice.SalesRep_ID=?""	//	#1
			+ "" OR EXISTS (SELECT * FROM C_BPartner bp WHERE C_Invoice.C_BPartner_ID=bp.C_BPartner_ID AND bp.SalesRep_ID=?)""
			+ "" OR EXISTS (SELECT * FROM C_InvoiceLine il INNER JOIN M_Product p ON (il.M_Product_ID=p.M_Product_ID)  WHERE C_Invoice.C_Invoice_ID=il.C_Invoice_ID AND p.SalesRep_ID=?))""
			+ "" AND DocStatus NOT IN ('DR','IN') ""
			+ ""ORDER BY DocumentNo DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, getAD_User_ID());
			pstmt.setInt(2, getAD_User_ID());
			pstmt.setInt(3, getAD_User_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MInvoice (m_ctx, rs, null));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		log.fine(""#"" + list.size());
		MSession session = MSession.get(m_ctx);
		if (session != null)
			session.queryLog(getAD_Client_ID(), m_ctx.getAD_Org_ID(),
				X_C_Invoice.Table_ID, sql, list.size(), getAD_User_ID());
		else
			list.clear();
		return list;
	}	//	getCommissionedInvoices
"
org.compiere.util.WebInfo.getCommissionRuns,WebInfo.java,"ArrayList<MCommissionRun> getCommissionRuns()
	{
		m_infoMessage = null;
		ArrayList<MCommissionRun> list = new ArrayList<MCommissionRun>();
		String sql = ""SELECT * FROM C_CommissionRun ""
			+ ""WHERE EXISTS (SELECT * FROM C_Commission c ""
				+ ""WHERE C_CommissionRun.C_Commission_ID=c.C_Commission_ID AND c.C_BPartner_ID=?) ""
			+ ""ORDER BY DocumentNo"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, getC_BPartner_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MCommissionRun (m_ctx, rs, null));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		log.fine(""#"" + list.size());
		MSession session = MSession.get(m_ctx);
		if (session != null)
			session.queryLog(getAD_Client_ID(), m_ctx.getAD_Org_ID(),
				X_C_CommissionRun.Table_ID, sql, list.size(), getC_BPartner_ID());
		else
			list.clear();
		return list;
	}	//	getCommissionRuns
"
org.compiere.util.WebInfo.getNotes,WebInfo.java,"ArrayList<MNote> getNotes()
	{
		ArrayList<MNote> list = new ArrayList<MNote>();
		String sql = ""SELECT * FROM AD_Note ""
			+ ""WHERE AD_User_ID=?""
			+ "" AND (Processed='N' OR Processed IS NULL) ""
			+ ""ORDER BY Created DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, getAD_User_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MNote (m_ctx, rs, null));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		log.fine(""#"" + list.size());
		MSession session = MSession.get(m_ctx);
		if (session != null)
			session.queryLog(getAD_Client_ID(), m_ctx.getAD_Org_ID(),
				X_C_Invoice.Table_ID, sql, list.size(), getAD_User_ID());
		else
			list.clear();
		return list;
	}	//	getNotes
"
org.compiere.util.WebInfo.getNote,WebInfo.java,"MNote getNote()
	{
		m_infoMessage = null;
		MNote retValue = null;
		String sql = ""SELECT * FROM AD_Note WHERE AD_User_ID=? AND AD_Note_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, getAD_User_ID());
			pstmt.setInt(2, m_id);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				retValue = new MNote (m_ctx, rs, null);
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""AD_Note_ID="" + m_id, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		log.fine(""AD_Note_ID="" + m_id + "" - "" + retValue);
		MSession session = MSession.get(m_ctx);
		if (session != null)
			session.queryLog(getAD_Client_ID(), m_ctx.getAD_Org_ID(),
				X_C_Invoice.Table_ID, sql, retValue == null ? 0 : 1,
					new Object[]{getAD_User_ID(), m_id});
		else
			retValue = null;
		return retValue;
	}	//	getNote
"
org.compiere.util.WebInfo.getActivities,WebInfo.java,"ArrayList<MWFActivity> getActivities()
	{
		ArrayList<MWFActivity> list = new ArrayList<MWFActivity>();
		String sql = ""SELECT * FROM AD_WF_Activity ""
			+ ""WHERE AD_User_ID=?""
			+ "" AND Processed='N' ""
			+ ""ORDER BY Priority DESC, Created"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, getAD_User_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MWFActivity (m_ctx, rs, null));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		log.fine(""#"" + list.size());
		return list;
	}	//	getActivities
"
org.compiere.util.WebInfo.getActivity,WebInfo.java,"MWFActivity getActivity()
	{
		m_infoMessage = null;
		MWFActivity retValue = null;
		String sql = ""SELECT * FROM AD_WF_Activity WHERE AD_User_ID=? AND AD_WF_Activity_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, getAD_User_ID());
			pstmt.setInt(2, m_id);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				retValue = new MWFActivity (m_ctx, rs, null);
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""AD_WF_Activity_ID="" + m_id, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		log.fine(""AD_WF_Activity_ID="" + m_id + "" - "" + retValue);
		return retValue;
	}	//	getActivity
"
org.compiere.util.WebInfo.getExpenses,WebInfo.java,"ArrayList<MTimeExpense> getExpenses()
	{
		m_infoMessage = null;
		ArrayList<MTimeExpense> list = new ArrayList<MTimeExpense>();
		String sql = ""SELECT * FROM S_TimeExpense ""
			+ ""WHERE C_BPartner_ID=? ""
			+ ""ORDER BY Created DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, getC_BPartner_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MTimeExpense (m_ctx, rs, null));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		log.fine(""#"" + list.size());
		MSession session = MSession.get(m_ctx);
		if (session != null)
			session.queryLog(getAD_Client_ID(), m_ctx.getAD_Org_ID(),
				X_S_TimeExpense.Table_ID, sql, list.size(), getC_BPartner_ID());
		else
			list.clear();
		return list;
	}	//	getExpenses
"
org.compiere.util.WebInfo.getExpense,WebInfo.java,"MTimeExpense getExpense()
	{
		m_infoMessage = null;
		MTimeExpense retValue = null;
		String sql = ""SELECT * FROM S_TimeExpense WHERE C_BPartner_ID=? AND S_TimeExpense_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, getC_BPartner_ID());
			pstmt.setInt(2, m_id);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				retValue = new MTimeExpense (m_ctx, rs, null);
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""S_TimeExpense_ID="" + m_id, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		if (retValue == null)
			retValue = new MTimeExpense (m_ctx, 0, null);
		log.fine(""S_TimeExpense_ID="" + m_id + "" - "" + retValue);
		MSession session = MSession.get(m_ctx);
		if (session != null)
			session.queryLog(getAD_Client_ID(), m_ctx.getAD_Org_ID(),
				X_S_TimeExpense.Table_ID, sql, retValue == null ? 0 : 1,
					new Object[]{getC_BPartner_ID(), m_id});
		else
			retValue = null;
		return retValue;
	}	//	getExpense
"
org.compiere.util.WebInfo.getRegistrations,WebInfo.java,"ArrayList<MRegistration> getRegistrations()
	{
		m_infoMessage = null;
		ArrayList<MRegistration> list = new ArrayList<MRegistration>();
		String sql = ""SELECT * FROM A_Registration ""
			+ ""WHERE C_BPartner_ID=? ""
			+ ""ORDER BY Created DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, getC_BPartner_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MRegistration (m_ctx, rs, null));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		log.fine(""#"" + list.size());
		return list;
	}	//	getRegistrations
"
org.compiere.util.WebInfo.getRegistration,WebInfo.java,"MRegistration getRegistration()
	{
		m_infoMessage = null;
		MRegistration retValue = null;
		String sql = ""SELECT * FROM A_Registration WHERE C_BPartner_ID=? AND A_Registration_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, getC_BPartner_ID());
			pstmt.setInt(2, m_id);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				retValue = new MRegistration (m_ctx, rs, null);
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""A_Registration_ID="" + m_id, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		//	new registration
		if (retValue == null)
			retValue = new MRegistration (m_ctx, 0, null);
		log.fine(""A_Registration_ID="" + m_id + "" - "" + retValue);
		return retValue;
	}	//	getRegistration
"
org.compiere.util.WebInfo.getRfQs,WebInfo.java,"ArrayList<MRfQ> getRfQs()
	{
		m_infoMessage = null;
		ArrayList<MRfQ> list = new ArrayList<MRfQ>();
		String sql = ""SELECT * ""
			+ ""FROM C_RfQ r ""
			+ ""WHERE r.IsRfQResponseAccepted='Y'""
			+ "" AND r.IsSelfService='Y' AND r.IsActive='Y' AND r.Processed='N'""
			+ "" AND (r.IsInvitedVendorsOnly='N'""
			+	"" OR EXISTS (SELECT * FROM C_RfQResponse rr ""
			+	"" WHERE r.C_RfQ_ID=rr.C_RfQ_ID AND rr.C_BPartner_ID=?)) ""
			+ ""ORDER BY r.Name"";

		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, getC_BPartner_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MRfQ (m_ctx, rs, null));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		log.fine(""#"" + list.size());
		MSession session = MSession.get(m_ctx);
		if (session != null)
			session.queryLog(getAD_Client_ID(), m_ctx.getAD_Org_ID(),
				X_C_RfQ.Table_ID, sql, list.size(), getC_BPartner_ID());
		else
			list.clear();
		return list;
	}	//	getRfQs
"
org.compiere.util.WebInfo.getRfQResponse,WebInfo.java,"MRfQResponse getRfQResponse()
	{
		m_infoMessage = null;
		MRfQResponse retValue = null;
		String sql = ""SELECT * FROM C_RfQResponse ""
			+ ""WHERE C_RfQ_ID=?""
			+ "" AND C_BPartner_ID=? AND IsActive='Y'"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, m_id);
			pstmt.setInt(2, getC_BPartner_ID());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				retValue = new MRfQResponse (m_ctx, rs, null);
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""C_RfQResponse_ID="" + m_id, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		//	No Response existing
		if (retValue == null)
		{
			MRfQ rfq = new MRfQ (m_ctx, m_id, null);
			//	We can create a Response ?
			if (rfq.get_ID() != 0 && rfq.isSelfService()
				&& rfq.isRfQResponseAccepted() && !rfq.isInvitedVendorsOnly()
				&& getC_BPartner_ID() > 0 && getAD_User_ID() > 0)
			{
				MBPartner bp = new MBPartner (m_ctx, getC_BPartner_ID(), null);
				bp.setPrimaryAD_User_ID(getAD_User_ID());
				retValue = new MRfQResponse (rfq, bp);	//	may have no lines
				retValue.save();
			}
		}
		//
		log.fine(""C_RfQResponse_ID="" + m_id + "" - "" + retValue);
		return retValue;
	}	//	getRfQResponse
"
org.compiere.util.HtmlCode.addElement,HtmlCode.java,"HtmlCode addElement (String hashcode, Element element)
	{
		addElementToRegistry (hashcode, element);
		return (this);
	}
"
org.compiere.util.HtmlCode.addElement,HtmlCode.java,"HtmlCode addElement (String hashcode, String element)
	{
		addElementToRegistry (hashcode, element);
		return (this);
	}
"
org.compiere.util.HtmlCode.addElement,HtmlCode.java,"HtmlCode addElement (Element element)
	{
		addElementToRegistry (element);
		return (this);
	}
"
org.compiere.util.HtmlCode.addElement,HtmlCode.java,"HtmlCode addElement (String element)
	{
		addElementToRegistry (element);
		return (this);
	}
"
org.compiere.util.HtmlCode.removeElement,HtmlCode.java,"HtmlCode removeElement (String hashcode)
	{
		removeElementFromRegistry (hashcode);
		return (this);
	}
"
org.compiere.util.DeepCopy.copy,DeepCopy.java,"Object copy(Object orig) {
		long start = System.currentTimeMillis();
		Object obj = null;
		try {
			// Write the object out to a byte array
			FastByteArrayOutputStream fbos = new FastByteArrayOutputStream();
			ObjectOutputStream out = new ObjectOutputStream(fbos);
			out.writeObject(orig);
			out.flush();
			out.close();

			// Retrieve an input stream from the byte array and read
			// a copy of the object back in.
			ObjectInputStream in = new ObjectInputStream(fbos.getInputStream());
			obj = in.readObject();

		} catch (IOException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException cnfe) {
			cnfe.printStackTrace();
		}
		log.info(""Deep copy time:"" + (System.currentTimeMillis() - start));
		return obj;
	}
"
org.compiere.util.ASyncWorker.executeSync,ASyncWorker.java,"ProcessInfo executeSync (ASyncProcess parent, ProcessInfo pi)
	{
		ASyncWorker worker = new ASyncWorker (parent, pi);
		worker.start();
		try
		{
			worker.join();
		}
		catch (InterruptedException e)
		{
			log.log(Level.SEVERE, ""executeSync"", e);
		}
		return worker.getResult();
	}   //  executeSync
"
org.compiere.util.ASyncWorker.run,ASyncWorker.java,"void run()
	{
		SwingUtilities.invokeLater(new Runnable()
		{
			public void run()
			{
				m_parent.lockUI(m_pi);
			}
		});

		//
		m_parent.executeASync(m_pi);
		//

		SwingUtilities.invokeLater(new Runnable()
		{
			public void run()
			{
				m_parent.unlockUI (m_pi);
			}
		});
	}   //  run
"
org.compiere.util.ASyncWorker.run,ASyncWorker.java,"void run()
			{
				m_parent.lockUI(m_pi);
			}
"
org.compiere.util.ASyncWorker.run,ASyncWorker.java,"void run()
			{
				m_parent.unlockUI (m_pi);
			}
"
org.compiere.util.ASyncWorker.getResult,ASyncWorker.java,"ProcessInfo getResult()
	{
		return m_pi;
	}   //  getResult
"
org.compiere.util.WebDoc.create,WebDoc.java,"WebDoc create (boolean plain, String title, boolean javaClient)
	{
		WebDoc doc = new WebDoc();
		doc.setUp (plain, javaClient, title);
		return doc;
	}   //  create
"
org.compiere.util.WebDoc.create,WebDoc.java,"WebDoc create (boolean plain)
	{
		return create (plain, null, false);
	}   //  create
"
org.compiere.util.WebDoc.createPopup,WebDoc.java,"WebDoc createPopup (String title)
	{
		WebDoc doc = create (title);
		doc.getHead().addElement(new script((Element)null, ""window.js""));
		doc.getHead().addElement(new link(""popup.css"", link.REL_STYLESHEET, link.TYPE_CSS));
		doc.setClasses (""popupTable"", ""popupHeader"");
		doc.getTable().setCellSpacing(5);
		return doc;
	}   //  createPopup
"
org.compiere.util.WebDoc.createWindow,WebDoc.java,"WebDoc createWindow (String title)
	{
		WebDoc doc = create (title);
		doc.getHead().addElement(new link(""window.css"", link.REL_STYLESHEET, link.TYPE_CSS));
		doc.getHead().addElement(new script((Element)null, ""window.js""));
		doc.setClasses (""windowTable"", ""windowHeader"");
		doc.getTable().setCellSpacing(5);
		return doc;
	}   //  createWindow
"
org.compiere.util.WebDoc.create,WebDoc.java,"WebDoc create (String title)
	{
		return create (false, title, false);
	}   //  create
"
org.compiere.util.WebDoc.setUp,WebDoc.java,"void setUp (boolean plain, boolean javaClient, String title)
	{
		m_html.addElement(m_head);
		m_html.addElement(m_body);
		m_body.addElement(new a().setName(""top""));
		if (title != null)
			m_head.addElement(new title(title));
		if (plain)
			return;
		
		//	css, js
		if (javaClient)
			m_head.addElement(new link(""http://www.compiere.org/standard.css"", link.REL_STYLESHEET, link.TYPE_CSS));
		else
		{
			m_head.addElement(new link(WebEnv.getStylesheetURL(), link.REL_STYLESHEET, link.TYPE_CSS));
			m_head.addElement(new script((Element)null, WebEnv.getBaseDirectory(""standard.js"")));
		}
		m_head.addElement(new meta().setHttpEquiv(""Content-Type"", ""text/html; charset=UTF-8""));
		m_head.addElement(new meta().setName(""description"", ""Compiere HTML UI""));

		m_table = new table(""0"", ""2"", ""0"", ""100%"", null);	//	spacing 2
		m_topRow = new tr();
		//	Title
		m_topLeft = new td();
		if (title == null)
			m_topLeft.addElement(NBSP);
		else
			m_topLeft.addElement(new h1(title));
		m_topRow.addElement(m_topLeft);
		//	Logo
		m_topRight = new td().setAlign(""right"");
		/** Removing/modifying the Compiere logo is a violation of the license	*/
		if (javaClient)
			m_topRight.addElement(new img(""http://www.compiere.org/images/Compiere64x32.png"")
				//	Changing the copyright notice in any way violates the license 
				//	and you'll be held liable for any damage claims
				.setAlign(AlignType.RIGHT).setAlt(""&copy; Jorg Janke/Compiere""));
		else
			m_topRight.addElement(WebEnv.getLogo());
		m_topRow.addElement(m_topRight);
		m_table.addElement(m_topRow);
		//
		m_body.addElement(m_table);
	}   //  setUp
"
org.compiere.util.WebDoc.setClasses,WebDoc.java,"void setClasses (String tableClass, String tdClass)
	{
		if (m_table != null && tableClass != null)
			m_table.setClass(tableClass);
		if (m_topLeft != null && tdClass != null)
			m_topLeft.setClass(tdClass);
		if (m_topRight != null && tdClass != null)
			m_topRight.setClass(tdClass);
	}	//	setClasses
"
org.compiere.util.WebDoc.getBody,WebDoc.java,"body getBody()
	{
		return m_body;
	}   //  getBody
"
org.compiere.util.WebDoc.getHead,WebDoc.java,"head getHead()
	{
		return m_head;
	}   //  getHead
"
org.compiere.util.WebDoc.getTable,WebDoc.java,"table getTable()
	{
		return m_table;
	}	//	getTable
"
org.compiere.util.WebDoc.getTopRow,WebDoc.java,"tr getTopRow()
	{
		return m_topRow;
	}	//	getTopRow
"
org.compiere.util.WebDoc.getTopLeft,WebDoc.java,"td getTopLeft()
	{
		return m_topLeft;
	}	//	getTopLeft
"
org.compiere.util.WebDoc.getTopRight,WebDoc.java,"td getTopRight()
	{
		return m_topRight;
	}	//	getTopRight
"
org.compiere.util.WebDoc.toString,WebDoc.java,"String toString()
	{
		return m_html.toString();
	}   //  toString
"
org.compiere.util.WebDoc.output,WebDoc.java,"void output (OutputStream out)
	{
		m_html.output(out);
	}   //  output
"
org.compiere.util.WebDoc.output,WebDoc.java,"void output (PrintWriter out)
	{
		m_html.output(out);
	}   //  output
"
org.compiere.util.WebDoc.addPopupCenter,WebDoc.java,"td addPopupCenter(boolean nowrap)
	{
		if (m_table == null)
			return null;
		//
		td center = new td (""popupCenter"", AlignType.CENTER, AlignType.MIDDLE, nowrap);
		center.setColSpan(2);
		m_table.addElement(new tr()
			.addElement(center));
		return center;
	}	//	addPopupCenter
"
org.compiere.util.WebDoc.addPopupClose,WebDoc.java,"td[] addPopupClose()
	{
		input button = WebUtil.createClosePopupButton(); 
		if (m_table == null)
		{
			m_body.addElement(button);
			return null;
		}
		//
		td left = new td(""popupFooter"", AlignType.LEFT, AlignType.MIDDLE, false, null);
		td right = new td(""popupFooter"", AlignType.RIGHT, AlignType.MIDDLE, false, button); 
		m_table.addElement(new tr()
			.addElement(left)
			.addElement(right));
		return new td[] {left, right};
	}	//	addPopupClose
"
org.compiere.util.WebDoc.addWindowCenter,WebDoc.java,"td addWindowCenter(boolean nowrap)
	{
		if (m_table == null)
			return null;
		//
		td center = new td (""windowCenter"", AlignType.CENTER, AlignType.MIDDLE, nowrap);
		center.setColSpan(2);
		m_table.addElement(new tr()
			.addElement(center));
		return center;
	}	//	addWindowCenter
"
org.compiere.util.WebDoc.addWindowFooters,WebDoc.java,"td[] addWindowFooters()
	{
		if (m_table == null)
			return null;
		//
		td left = new td(""windowFooter"", AlignType.LEFT, AlignType.MIDDLE, false);
		td right = new td(""windowFooter"", AlignType.RIGHT, AlignType.MIDDLE, false); 
		m_table.addElement(new tr()
			.addElement(left)
			.addElement(right));
		return new td[] {left, right};
	}	//	addWindowFooters
"
org.compiere.util.WebDoc.addWindowFooter,WebDoc.java,"td addWindowFooter()
	{
		if (m_table == null)
			return null;
		//
		td center = new td(""windowFooter"", AlignType.CENTER, AlignType.MIDDLE, false);
		m_table.addElement(new tr()
			.addElement(center));
		return center;
	}	//	addWindowFooter
"
org.compiere.util.WebDoc.main,WebDoc.java,"void main (String[] args)
	{
		WebDoc doc = WebDoc.create(""Test"");
		doc.getBody().addElement(new b(""111 <<< >>> &&& \\\\ \u0100 �""));
		form f = new form(""myaction"");
		f.addElement(new input());
		doc.getBody().addElement(f);
		System.out.println(doc.toString());
		System.out.println(""---------"");
		doc.output(System.out);
		System.out.println(""---------"");
	}   //  main
"
org.compiere.util.EnvLoader.load,EnvLoader.java,"boolean load (String prefix)
	{
		Properties prop = getEnv(prefix);
		if (prop == null)
			return false;
		//  load
		Object[] pp = prop.keySet().toArray();
		for (Object element : pp) {
			String key = element.toString();
			String value = prop.getProperty(key);
			System.setProperty(key, value);
		}
		CLogMgt.printProperties(System.getProperties(), ""System with Environment"", false);
		return true;
	}   //  load
"
org.compiere.util.EnvLoader.getEnv,EnvLoader.java,"Properties getEnv (String prefix)
	{
		String cmd = ""cmd /c set"";     //   Windows
		if (!System.getProperty(""os.name"", """").startsWith(""Win""))
			cmd = ""set"";                //  Unix/Linux
		String result = execCommand (cmd);
		if (result == null || result.length() == 0)
			return null;
		//
		if (prefix == null)
			prefix = """";
		return parseEnv (result, prefix);
	}   //  getEnv
"
org.compiere.util.EnvLoader.execCommand,EnvLoader.java,"String execCommand (String command)
	{
		Process cmd;
		try
		{
			cmd = Runtime.getRuntime().exec(command);
		}
		catch (Exception e)
		{
			System.err.println(""-- Error executing command: "" + command + "" - "" + e.toString());
			return null;
		}
		if (DEBUG)
			System.out.println(""** Command executed: "" + command);

		StringBuffer bufOut = new StringBuffer();
		StringBuffer bufErr = new StringBuffer();
		try
		{
			InputStream in = cmd.getInputStream();
			InputStream err = cmd.getErrorStream();
			//
			int c;
			while ((c = in.read()) != -1)
				bufOut.append((char)c);
			in.close();
			//
			while ((c = err.read()) != -1)
				bufErr.append((char)c);
			err.close();
		}
		catch (Exception e)
		{
			System.err.println(""-- Error reading output: "" + e.toString());
			return null;
		}
		if (DEBUG)
		{
			System.out.println(""** Command result: "" + bufOut.toString());
			System.out.println(""** Command error: "" + bufErr.toString());
		}
		return bufOut.toString();
	}   //  execCommand
"
org.compiere.util.EnvLoader.parseEnv,EnvLoader.java,"Properties parseEnv (String input, String prefix)
	{
		Properties prop = new Properties ();
		//
		String separator = System.getProperty(""line.separator"", ""\n"");
		StringTokenizer st = new StringTokenizer(input, separator);
		while (st.hasMoreTokens())
		{
			String s = st.nextToken();
		//	System.out.println("">"" + s + ""<"");
			int pos = s.indexOf(""="");       //  first ""=""
			if (pos > 0)
				prop.setProperty(prefix + s.substring(0, pos), s.substring(pos+1));
		}
		if (DEBUG)
			System.out.println(""** Loaded "" + prop.size() + "" Properties"");
		return prop;
	}   //  parseEnv
"
org.compiere.util.WebSessionCtx.get,WebSessionCtx.java,"WebSessionCtx get (HttpServletRequest request, int W_Store_ID)
	{
		HttpSession session = request.getSession(false);
		if (session == null)
			session = request.getSession(true);
		if (session == null)
			return null;
		WebSessionCtx wsc = (WebSessionCtx)session.getAttribute(NAME);
		//	Create New
		if (wsc == null)
		{
			wsc = new WebSessionCtx(request, W_Store_ID);
			session.setAttribute(NAME, wsc);
		}
		return wsc;
	}	//	get
"
org.compiere.util.WebSessionCtx.get,WebSessionCtx.java,"WebSessionCtx get (HttpServletRequest request, boolean createNew)
	{
		HttpSession session = request.getSession(false);
		if (session == null)
			session = request.getSession(true);
		if (session == null)
			return null;
		WebSessionCtx wsc = (WebSessionCtx)session.getAttribute(NAME);
		//	Create New
		if (createNew && wsc == null)
		{
			wsc = new WebSessionCtx (request);
			session.setAttribute(NAME, wsc);
		}
		return wsc;
	}	//	get
"
org.compiere.util.WebSessionCtx.setWStore,WebSessionCtx.java,"void setWStore (String contextPath)
	{
		//	get from context
		int W_Store_ID = ctx.getContextAsInt(""W_Store_ID"");
		if (W_Store_ID != 0)
		{
			wstore = MStore.get(ctx, W_Store_ID);
			if (wstore.getW_Store_ID() != 0)
			{
				log.info(""From web.xml - "" + wstore);
				return;
			}
		}
		if (""/compiere"".equals(contextPath))	//	HTML UI
			return;
		//
		wstore = MStore.get(ctx, contextPath);
		if (wstore == null)
			throw new IllegalStateException(""No Web Store found - "" + contextPath);
	}	//	setWStore
"
org.compiere.util.WebSessionCtx.setWStore,WebSessionCtx.java,"void setWStore (int W_Store_ID)
	{
		//	get from context
		if (W_Store_ID != 0)
		{
			wstore = MStore.get(ctx, W_Store_ID);
			if (wstore.getW_Store_ID() != 0)
			{
				log.info(""From web.xml - "" + wstore);
				return;
			}
		}
		if (wstore == null)
			throw new IllegalStateException(""No Web Store found - ID: "" + W_Store_ID);
	}	//	setWStore
"
org.compiere.util.WebSessionCtx.getDefaults,WebSessionCtx.java,"Ctx getDefaults ()
	{
		//	No Web Store
		if (wstore == null)
			return new Ctx();
		//
		Integer key = Integer.valueOf (wstore.getW_Store_ID());
		Ctx newCtx = s_cacheCtx.get(null, key);
		
		/**	Create New Context		*/
		if (newCtx == null)
		{
			log.info(wstore.getWebContext());
			newCtx = new Ctx();
			//	copy explicitly
			Iterator<?> it = ctx.keySet().iterator();
			while (it.hasNext())
			{
				String pKey = (String)it.next();
				newCtx.setContext(pKey, ctx.getContext(pKey));
			}
			
			newCtx.setAD_Client_ID(wstore.getAD_Client_ID());
			newCtx.setAD_Org_ID(wstore.getAD_Org_ID());
			//
			newCtx.setContext(""#SalesRep_ID"", wstore.getSalesRep_ID());
			newCtx.setContext(""#M_PriceList_ID"", wstore.getM_PriceList_ID());
			newCtx.setContext(""#M_Warehouse_ID"", wstore.getM_Warehouse_ID());
			//
			String s = wstore.getWebParam1();
			newCtx.setContext(""webParam1"", s == null ? """" : s);
			s = wstore.getWebParam2();
			newCtx.setContext(""webParam2"", s == null ? """" : s);
			s = wstore.getWebParam3();
			newCtx.setContext(""webParam3"", s == null ? """" : s);
			s = wstore.getWebParam4();
			newCtx.setContext(""webParam4"", s == null ? """" : s);
			s = wstore.getWebParam5();
			newCtx.setContext(""webParam5"", s == null ? """" : s);
			s = wstore.getWebParam6();
			newCtx.setContext(""webParam6"", s == null ? """" : s);
			s = wstore.getStylesheet();
			if (s == null)
				s = ""standard"";
			else
			{
				int index = s.lastIndexOf('.');
				if (index != -1)
					s = s.substring(0, index);
			}
			newCtx.setContext(""Stylesheet"", s);
			//
			s = wstore.getWebInfo();
			if (s != null && s.length() > 0)
				newCtx.setContext(HDR_INFO, s);
			
			//	Payment Term
			newCtx.setContext(""#M_PriceList_ID"", wstore.getM_PriceList_ID());

			//	Default User - SalesRep
			if (newCtx.getAD_User_ID() == 0)
				newCtx.setAD_User_ID(wstore.getSalesRep_ID());
			
			//	Default Role for access
			if (newCtx.getAD_Role_ID() == 0)
			{
				int AD_Role_ID = 0;		//	HARDCODED - System
				newCtx.setAD_Role_ID(AD_Role_ID);
			}

			//	Client
			MClient client = MClient.get (newCtx, wstore.getAD_Client_ID());
			//	Name,Description, SMTPHost,RequestEMail,RequestUser, RequestUserPw
			newCtx.setContext(""name"", client.getName());
			newCtx.setContext(""description"", client.getDescription());
			
			//	AD_Language
			if (newCtx.getContext(""#AD_Language"") == null && client.getAD_Language() != null)
				newCtx.setContext(""#AD_Language"", client.getAD_Language());
			//	DocumentDir
			String docDir = client.getDocumentDir();
			newCtx.setContext(CTX_DOCUMENT_DIR, docDir == null ? """" : docDir);

			//	Default Language
			if (newCtx.getContext(""#AD_Language"") == null)
				newCtx.setContext(""#AD_Language"", ""en_US"");

			//	Save Context - Key is AD_Client_ID
			s_cacheCtx.put(key, newCtx);
		}
		//	return new Properties (pp);	seems not to work with JSP
		Iterator<?> it = newCtx.keySet().iterator();
		while (it.hasNext())
		{
			String pKey = (String)it.next();
			ctx.setContext(pKey, newCtx.getContext(pKey));
		}
		return ctx;
	}	//	getDefaults
"
org.compiere.util.WebSessionCtx.setLanguage,WebSessionCtx.java,"void setLanguage (HttpServletRequest request)
	{
		//  Get Cookie
		Properties cProp = WebUtil.getCookieProperties(request);
		
		//  Get/set Parameter:      Language
		String AD_Language = WebUtil.getParameter (request, Env.LANGUAGE);
		if (AD_Language == null)
		{
			//  Check Cookie
			AD_Language = cProp.getProperty(Env.LANGUAGE);
			if (AD_Language == null)
			{
				//  Check Request Locale
				Locale locale = request.getLocale();
				AD_Language = Language.getAD_Language (locale);
			}
		}
		if (AD_Language != null)
		{
			Language lang = Language.getLanguage(AD_Language);
			lang = Env.verifyLanguage (lang);
			ctx.setContext(Env.LANGUAGE, lang.getAD_Language());
			Msg.getMsg(ctx, ""0"");
			cProp.setProperty(Env.LANGUAGE, lang.getAD_Language());
			setLanguage(lang);
		}
		else if (language == null)	//	set base language
			setLanguage (Language.getBaseLanguage());
	}	//	setLanguage
"
org.compiere.util.WebSessionCtx.setLanguage,WebSessionCtx.java,"void setLanguage (Language lang)
	{
		language = lang;
		//
		dateFormat = DisplayType.getDateFormat(DisplayTypeConstants.Date, language);
		dateTimeFormat = DisplayType.getDateFormat(DisplayTypeConstants.DateTime, language);
		//
		amountFormat = DisplayType.getNumberFormat(DisplayTypeConstants.Amount, language);
		integerFormat = DisplayType.getNumberFormat(DisplayTypeConstants.Integer, language);
		numberFormat = DisplayType.getNumberFormat(DisplayTypeConstants.Number, language);
		quantityFormat = DisplayType.getNumberFormat(DisplayTypeConstants.Quantity, language);
	}	//	setLanguage
"
org.compiere.util.WebSessionCtx.toString,WebSessionCtx.java,"String toString ()
	{
		return ""WSessionCtx#"" + counter;
	}	//	toString
"
org.compiere.util.Task.run,Task.java,"void run()
		{
			log.fine(""outReader"");
			try
			{
				int c;
				while ((c = m_outStream.read()) != -1 && !isInterrupted())
				{
			//		System.out.print((char)c);
					m_out.append((char)c);
				}
				m_outStream.close();
			}
			catch (IOException ioe)
			{
				log.log(Level.SEVERE, ""outReader"", ioe);
			}
			log.fine(""outReader - done"");
		}   //  run
"
org.compiere.util.Task.run,Task.java,"void run()
		{
			log.fine(""errReader"");
			try
			{
				int c;
				while ((c = m_errStream.read()) != -1 && !isInterrupted())
				{
			//		System.err.print((char)c);
					m_err.append((char)c);
				}
				m_errStream.close();
			}
			catch (IOException ioe)
			{
				log.log(Level.SEVERE, ""errReader"", ioe);
			}
			log.fine(""errReader - done"");
		}   //  run
"
org.compiere.util.Task.run,Task.java,"void run()
	{
		log.info(m_cmd);
		try
		{
			m_child = Runtime.getRuntime().exec(m_cmd);
			//
			m_outStream = m_child.getInputStream();
			m_errStream = m_child.getErrorStream();
			m_inStream = m_child.getOutputStream();
			//
			if (checkInterrupted())
				return;
			m_outReader.start();
			m_errReader.start();
			//
			try
			{
				if (checkInterrupted())
					return;
				m_errReader.join();
				if (checkInterrupted())
					return;
				m_outReader.join();
				if (checkInterrupted())
					return;
				m_child.waitFor();
			}
			catch (InterruptedException ie)
			{
				log.log(Level.INFO, ""(ie) - "" + ie);
			}
			//  ExitValue
			if (m_child != null)
				log.fine(""run - ExitValue="" + m_child.exitValue());
			log.config(""done"");
		}
		catch (IOException ioe)
		{
			log.log(Level.SEVERE, ""(ioe)"", ioe);
		}
	}   //  run
"
org.compiere.util.Task.checkInterrupted,Task.java,"boolean checkInterrupted()
	{
		if (isInterrupted())
		{
			log.config(""interrupted"");
			//  interrupt child processes
			if (m_child != null)
				m_child.destroy();
			m_child = null;
			if (m_outReader != null && m_outReader.isAlive())
				m_outReader.interrupt();
			m_outReader = null;
			if (m_errReader != null && m_errReader.isAlive())
				m_errReader.interrupt();
			m_errReader = null;
			//  close Streams
			if (m_inStream != null)
				try {   m_inStream.close();     } catch (IOException e) {} 
				finally{ m_inStream = null; }			
			if (m_outStream != null)
				try {   m_outStream.close();    } catch (IOException e) {}
				finally{ m_outStream = null; }
			if (m_errStream != null)
				try {   m_errStream.close();    } catch (IOException e) {}
				finally{ m_errStream = null; }
			//
			return true;
		}
		return false;
	}   //  checkInterrupted
"
org.compiere.util.Task.getOut,Task.java,"StringBuffer getOut()
	{
		return m_out;
	}   //  getOut
"
org.compiere.util.Task.getErr,Task.java,"StringBuffer getErr()
	{
		return m_err;
	}   //  getErr
"
org.compiere.util.Task.getInStream,Task.java,"OutputStream getInStream()
	{
		return m_inStream;
	}   //  getInStream
"
org.compiere.util.ExtensionFileFilter.getDescription,ExtensionFileFilter.java,"String getDescription()
	{
		return m_description;
	}
"
org.compiere.util.ExtensionFileFilter.setDescription,ExtensionFileFilter.java,"void setDescription(String newDescription)
	{
		m_description = newDescription;
	}	//	setDescription
"
org.compiere.util.ExtensionFileFilter.setExtension,ExtensionFileFilter.java,"void setExtension(String newExtension)
	{
		m_extension = newExtension;
	}
"
org.compiere.util.ExtensionFileFilter.getExtension,ExtensionFileFilter.java,"String getExtension()
	{
		return m_extension;
	}
"
org.compiere.util.ExtensionFileFilter.accept,ExtensionFileFilter.java,"boolean accept(File file)
	{
		//	Need to accept directories
		if (file.isDirectory())
			return true;

		String ext = file.getName();
		int pos = ext.lastIndexOf('.');

		//	No extension
		if (pos == -1)
			return false;

		ext = ext.substring(pos+1);

		if (m_extension.equalsIgnoreCase(ext))
			return true;

		return false;
	}	//	accept
"
org.compiere.util.ExtensionFileFilter.getFileName,ExtensionFileFilter.java,"String getFileName(File file, FileFilter filter)
	{
		return getFile(file, filter).getAbsolutePath();
	}	//	getFileName
"
org.compiere.util.ExtensionFileFilter.getFile,ExtensionFileFilter.java,"File getFile(File file, FileFilter filter)
	{
		String fName = file.getAbsolutePath();
		if (fName == null || fName.equals(""""))
			fName = ""Compiere"";
		//
		ExtensionFileFilter eff = null;
		if (filter instanceof ExtensionFileFilter)
			eff = (ExtensionFileFilter)filter;
		else
			return file;
		//
		int pos = fName.lastIndexOf('.');

		//	No extension
		if (pos == -1)
		{
			fName += '.' + eff.getExtension();
			return new File(fName);
		}

		String ext = fName.substring(pos+1);

		//	correct extension
		if (ext.equalsIgnoreCase(eff.getExtension()))
			return file;

		fName += '.' + eff.getExtension();
		return new File(fName);
	}	//	getFile
"
org.compiere.util.ViewUtil.readSqlFromFile,ViewUtil.java,"ArrayList<String> readSqlFromFile(InputStream in)
	{
		if (in == null)
			return null;
		
		// Initialization
		BufferedReader input = null;
		String line = null;
		String command = null;
		StringBuffer sqlStatement = null;
		int commentIndex = -1;
		ArrayList<String> retStr = new ArrayList<String>();
		try
		{	
			// Create the reader to read the input sql statements line by line
			input = new BufferedReader(new InputStreamReader(in));
			while ((line = input.readLine()) != null)
			{
				// Trim the line
				line = line.trim();

				// Zero length.  Can't start with space
				if (line.length() == 0)
					continue;

				// Handle C style comments which ""/*"" has to be at beginning of line
				if (line.startsWith(""/*""))
				{
					// Ensure it isn't one line comment
					if (line.indexOf(""*/"") != -1)
						continue;
					// Ignore all the comments
					while ((line = input.readLine()) != null && line.indexOf(""*/"") == -1)
						;
					// Start with next line
					continue;  
				}

				//  Comment or separator
				if (line.startsWith(""--"") || line.startsWith("";"") || line.startsWith(""/""))
					continue;

				// Don't care about the PL/SQL stuff
				if (line.toUpperCase().startsWith(""SET SERVEROUTPUT ON""))
					continue;

				// Exit 
				if (line.toUpperCase().startsWith(""EXIT""))
					break;

				// Strip off the comments - isn't at beginning, must be at the end
				commentIndex = line.indexOf(""--"");
				if (commentIndex != -1)
					line = line.substring(0, commentIndex);

				// Trim the line
				line = line.trim();

				// Single line command
				if (line.endsWith("";"") || line.endsWith(""/""))
				{
					// Strip out the "";"" before send thru jdbc
					command = line.substring(0, line.length() - 1);
				}
				else
				{
					// Check what kind of commands it is
					boolean notProcedure = true;
					if (line.toUpperCase().startsWith(""CREATE OR REPLACE PROCEDURE"") ||
							line.toUpperCase().startsWith(""CREATE OR REPLACE FUNCTION"") ||
							line.toUpperCase().startsWith(""CREATE OR REPLACE TRIGGER"") ||
							line.toUpperCase().startsWith(""CREATE PROCEDURE"") ||
							line.toUpperCase().startsWith(""CREATE FUNCTION"") ||
							line.toUpperCase().startsWith(""DECLARE"") ||
							line.toUpperCase().startsWith(""BEGIN""))
						notProcedure = false;

					// Loop thru the multi-line or nested statements
					sqlStatement = new StringBuffer(line);
					while ((line = input.readLine()) != null)
					{
						// Trim the line
						//line = line.trim();

						// Check empty
						if (line.length() == 0)
							continue; 

						// Ignore the comments
						if (line.startsWith(""--""))
							continue;

						// Handle C style comments which ""/*"" has to be at beginning of line
						if (line.startsWith(""/*""))
						{
							// Ensure it isn't one line comment
							if (line.indexOf(""*/"") != -1)
								continue;
							// Ignore all the comments
							while ((line = input.readLine()) != null && line.indexOf(""*/"") == -1)
								;
							// Start with next line
							continue;  
						}

						// End of sql statement
						if (line.startsWith("";"") || line.startsWith(""/"") || line.startsWith(""GO"") && !line.startsWith(""GOTO""))
							break;

						// Strip off the comments
						commentIndex = line.indexOf(""--"");
						if (commentIndex != -1 && line.charAt(commentIndex - 1) != '\'')
							line = line.substring(0, commentIndex);

						// Trim the line again after removed the ""--"" comments
						//line = line.trim();

						sqlStatement.append("" "").append(line);

						// For non function/procedure, "";"" is end of statement
						if (notProcedure && (line.endsWith("";"") || line.startsWith(""GO"") && DB.isMSSQLServer()))
							break;
					} // while ((line = input.readLine()) != null)
					command = sqlStatement.toString();

					// For non function/procedure, strip off the trailing "";""
					if (!command.toUpperCase().startsWith(""CREATE OR REPLACE PROCEDURE"") 
						&& !command.toUpperCase().startsWith(""CREATE OR REPLACE FUNCTION"") 
						&& !command.toUpperCase().startsWith(""CREATE OR REPLACE TRIGGER"")
						&& !command.toUpperCase().startsWith(""DECLARE"") 
						&& !command.toUpperCase().startsWith(""BEGIN"") 
						&& command.endsWith("";""))
						command = command.substring(0, command.length() - 1);
				}  // if (line.endsWith("";"") || line.endsWith(""/""))	
				
				retStr.add(command);
			} // while ((line = input.readLine()) != null)
		}
		catch (IOException ex)
		{
			ex.printStackTrace();
		}
		finally
		{
			try 
			{
				if (input != null) 
					input.close();
			}
			catch (IOException ex) 
			{
				ex.printStackTrace();
			}
		}
		
		return retStr;
	}  // readSqlFromFile()
"
org.compiere.util.FileUpload.createForm,FileUpload.java,"form createForm (String action)
	{
		form upload = new form(action, form.METHOD_POST, form.ENC_UPLOAD);
		upload.addElement(new label (""File"").setFor(""file""));
		upload.addElement(new input (input.TYPE_FILE, ""file"", """").setSize(40));
		upload.addElement(new input (input.TYPE_SUBMIT, ""upload"", ""Upload""));
		return upload;
	}	//	createForm
"
org.compiere.util.FileUpload.getData,FileUpload.java,"byte[] getData ()
	{
		return m_data;
	}	//	getData
"
org.compiere.util.FileUpload.getFileName,FileUpload.java,"String getFileName ()
	{
		if (m_fileName != null)		//	eliminate path
		{
			int index = Math.max(m_fileName.lastIndexOf('/'), m_fileName.lastIndexOf('\\'));
			if (index > 0)
				return m_fileName.substring(index+1);
		}
		return m_fileName;
	}	//	getFileName
"
org.compiere.util.FileUpload.getError,FileUpload.java,"String getError ()
	{
		return m_error;
	}	//	getError
"
org.compiere.util.FileUpload.upload,FileUpload.java,"String upload (HttpServletRequest request)
		throws ServletException, IOException
	{
		final int MAX_KB = 250;		//	Max Upload Size in kB
		//
		int formDataLength = request.getContentLength();
		String contentType = request.getContentType();
		int index = contentType.lastIndexOf(""="");
		String boundary = contentType.substring(index+1);
		log.fine(formDataLength + "" - "" + boundary);
		int sizeKB = formDataLength/1024; 		
		if (sizeKB > MAX_KB && !""import"".equals(request.getParameter(""action""))) //	250k limit for attachments, not for Import File Loader
		{
			log.warning(""File too large "" + sizeKB);
			return GlobalMessageConstants.FILE_SIZE_TOO_LARGE;
		}
		
		DataInputStream in = new DataInputStream (request.getInputStream()); 
		byte[] data = new byte[formDataLength];
		int bytesRead = 0;
		int totalBytesRead = 0;
		while (totalBytesRead < formDataLength)
		{
			bytesRead = in.read(data, totalBytesRead, formDataLength);
			totalBytesRead += bytesRead;
		}
		in.close();
		
		//	Convert to String for easy manipulation
		m_requestDataString = new String (data, ""ISO-8859-1"");
		if (m_requestDataString.length() != data.length)
			return ""Internal conversion Error"";
			
		//	File Name:
		//	Content-Disposition: form-data; name=""file""; filename=""C:\Documents and Settings\jjanke\My Documents\desktop.ini""
		index = m_requestDataString.indexOf(""filename=\"""");
		m_fileName = m_requestDataString.substring(index+10);
		index = m_fileName.indexOf('""');
		if (index < 1)
			return ""No File Name"";
		m_fileName = m_fileName.substring(0, index);
		log.fine(""upload - "" + m_fileName); 
			
			
		//	Content:
		//	Content-Disposition: form-data; name=""file""; filename=""C:\Documents and Settings\jjanke\My Documents\desktop.ini""
		//	Content-Type: application/octet-stream
		//
		//	[DeleteOnCopy]
		//	Owner=jjanke
		//	Personalized=5
		//	PersonalizedName=My Documents
		//
		//	-----------------------------7d433475038e
		int posStart = m_requestDataString.indexOf(""filename=\"""");
		posStart = m_requestDataString.indexOf(""\n"",posStart)+1;	//	end of Context-Disposition
		posStart = m_requestDataString.indexOf(""\n"",posStart)+1;	//	end of Content-Type
		posStart = m_requestDataString.indexOf(""\n"",posStart)+1;	//	end of empty line
		int posEnd = m_requestDataString.indexOf(boundary, posStart)-4;
		int length = posEnd-posStart;
		//
		log.fine(""uploadFile - Start="" + posStart + "", End="" + posEnd + "", Length="" + length);

		//	Final copy
		m_data = new byte[length]; 
		for (int i = 0; i < length; i++)
			m_data[i] = data[posStart+i];
		return null;
	}	//	uploadFile
"
org.compiere.util.FileUpload.getParameter,FileUpload.java,"String getParameter (String parameterName)
	{
		if (m_requestDataString == null)
			return null;
		String retValue = null;
		String search = ""name=\"""" + parameterName + ""\"""";
		int index = m_requestDataString.indexOf(search); 
		if (index > 0)
		{
			retValue = m_requestDataString.substring(index);
			retValue = retValue.substring(retValue.indexOf(""\n"")+1);	//	eol
			retValue = retValue.substring(retValue.indexOf(""\n"")+1);	//	empty line
			retValue = retValue.substring(0,retValue.indexOf(""\n""));	//	cr
			retValue = retValue.trim();
		}
		else
		{
			log.warning(""getParameter Not found - "" + parameterName);
			return null;
		}
		log.fine(""getParameter = "" + parameterName + ""="" + retValue);
		return retValue;
	}	//	getMultiPartParameter
"
org.compiere.util.FileUpload.getParameterAsInt,FileUpload.java,"int getParameterAsInt (String parameterName)
	{
		String result = getParameter (parameterName);
		try
		{
			if (result != null && result.length() > 0)
				return Integer.parseInt(result);
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""getParameterAsInt - "" + parameterName + ""="" + result, e);
		}
		return 0;
	}	//	getParameterAsInt
"
org.compiere.util.FileUpload.toString,FileUpload.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""FileUpload["");
		if (m_fileName != null)
			sb.append(m_fileName);
		if (m_error != null)
			sb.append("";Error="").append(m_error);
		if (m_data != null)
			sb.append("";Length="").append(m_data.length);
		sb.append (""]"");
		return sb.toString ();
	} //	toString
"
org.compiere.util.WebLogin.init,WebLogin.java,"boolean init()
	{
		m_session = m_request.getSession(true);	//	create new
		m_forward = WebUtil.getParameter (m_request, P_ForwardTo);			//	get forward from request
		if (m_forward != null)
			m_session.setAttribute(P_ForwardTo, m_forward);
		else
			m_forward = """";
		m_salesRep = WebUtil.getParameter (m_request, P_SalesRep_ID);		//	get SalesRep from request
		if (m_salesRep != null)
			m_session.setAttribute(P_SalesRep_ID, m_salesRep);

		//	Get Base Info
		m_email = WebUtil.getParameter (m_request, P_EMail);
		if (m_email == null)
			m_email = """";
		m_email = m_email.trim();
		if (m_email != null)
			m_session.setAttribute (P_EMail, m_email);
		m_password = WebUtil.getParameter (m_request, P_Password);
		if (m_password == null)
			m_password = """";	//	null loads w/o check
		m_password = m_password.trim();
		if (m_session.getAttribute (WebInfo.NAME)!=null)
		{
			WebInfo wi = (WebInfo)m_session.getAttribute(WebInfo.NAME);
			m_wu = wi.getWebUser ();
		}
		return true;
	}	//	init
"
org.compiere.util.WebLogin.action,WebLogin.java,"boolean action() throws IOException, ServletException
	{
		//	Mode
		if (getMode() == null)
		{
			String mode = WebUtil.getParameter (m_request, P_Action);
			setMode(mode);
			if (mode == null || mode.equals(""null""))
				return false;
		}
		boolean deleteCookie = ""deleteCookie"".equals(m_mode);
		if (deleteCookie)
		{
			log.fine(""** deleteCookie"");
			WebUtil.deleteCookieWebUser (m_request, m_response, COOKIE_NAME);
		}
		//
		boolean logout = ""logout"".equals(m_mode);
		if (logout || deleteCookie)
		{
			log.fine(""** logout"");
			if (m_session != null)
			{
				MSession cSession = MSession.get (m_ctx);
				if (cSession != null)
					cSession.logout();
				m_session.removeAttribute(""AD_Session_ID"");
				//
				m_wu = (WebUser)m_session.getAttribute(WebUser.NAME);
				if (m_wu != null)
					m_wu.logout();

	            m_session.removeAttribute(WebUser.NAME);
	            m_session.setMaxInactiveInterval(1);
				m_session.invalidate ();
			}
			//	Forward to unsecure /
			WebUtil.createForwardPage(m_response, ""Logout"", ""http://"" + m_request.getServerName() + ""/"", 2);
		}
		//	Send EMail				***	Send Password EMail Request
		else if (""SendEMail"".equals(m_mode))
		{
			log.info(""** send mail"");
			m_wu = WebUser.get (m_ctx, m_email);			//	find it
			if (!m_wu.isEMailValid())
				m_wu.setPasswordMessage(""EMail not found in system"");
			else
			{
				m_wu.setPassword();		//	set password to current
				//
				String msg = WebUtil.sendEMail (m_request, m_wu,
					X_W_MailMsg.MAILMSGTYPE_UserPassword, new Object[]{
						m_request.getServerName(),
						m_wu.getName(),
						WebUtil.getFrom(m_request),
						m_wu.getPassword()});
				if (EMail.SENT_OK.equals(msg))
					m_wu.setPasswordMessage (""EMail sent"");
				else
					m_wu.setPasswordMessage (""Problem sending EMail: "" + msg);
			}
			m_forward = getLogin_RelURL ();
		}	//	SendEMail
		//	Login
		else if (""Login"".equals(m_mode))
		{
			log.info(""** login "" + m_email + ""/"" + m_password);
			//	add Cookie
			WebUtil.addCookieWebUser(m_request, m_response, m_email, COOKIE_NAME);

			//	Always re-query
			m_wu = WebUser.get (m_ctx, m_email, m_password, false);
			m_wu.login(m_password);
			//	Password valid
			if (m_wu.isLoggedIn())
			{
				if (m_forward==null || m_forward.equals(getLogin_RelURL ()))
					m_forward = ""/index.jsp"";
				//	Create Session with User ID
				MSession session = MSession.get (m_ctx, X_AD_Session.SESSIONTYPE_WebStore, true,
					m_request.getRemoteAddr(),
					m_request.getRemoteHost(), m_session.getId());
				if (session != null)
					m_session.setAttribute(""AD_Session_ID"", session.getAD_Session_ID());
			}
			else
			{
				m_forward = getLogin_RelURL ();
				log.fine(""- PasswordMessage="" + m_wu.getPasswordMessage());
			}
			// If no session exists or is not loaded, load or create it
			if (m_session==null)
				m_session = m_request.getSession (true);

			m_session.setAttribute (WebInfo.NAME, new WebInfo (m_ctx, m_wu));
		}	//	Login

		//	Login New
		else if (""LoginNew"".equals(m_mode))
		{
			log.info(""** loginNew"");
			WebUtil.addCookieWebUser(m_request, m_response, """", COOKIE_NAME);
			m_wu =  WebUser.get (m_ctx, """");
			m_forward = getLogin_RelURL ();
		}

		//	Submit - update/new Contact
		else if (""Submit"".equals(m_mode))
		{
			log.info(""** submit "" + m_email + ""/"" + m_password + "" - AddrConf="" + m_addressConfirm);
			//	we have a record for address update
			if (m_wu != null && m_wu.isLoggedIn() && m_addressConfirm)	//	address update
				;
			else	//	Submit - always re-load user record
				m_wu = WebUser.get (m_ctx, m_email, null, false); //	load w/o password check direct
			//
			if (m_wu.getAD_User_ID() != 0)		//	existing BPC
			{
				String passwordNew = WebUtil.getParameter (m_request, ""PasswordNew"");
				if (passwordNew == null)
					passwordNew = """";
				boolean passwordChange = passwordNew.length() > 0 && !passwordNew.equals(m_password);
				if (m_addressConfirm || m_wu.login (m_password))
				{
					//	Create / set session
					if (m_wu.isLoggedIn())
					{
						MSession session = MSession.get (m_ctx, X_AD_Session.SESSIONTYPE_WebStore, true,
							m_request.getRemoteAddr(),
							m_request.getRemoteHost(), m_session.getId());
						if (session != null)
							m_session.setAttribute(""AD_Session_ID"", session.getAD_Session_ID());
					}
					//
					if (passwordChange)
						log.fine(""- update Pwd "" + m_email + "", Old="" + m_password + "", DB="" + m_wu.getPassword() + "", New="" + passwordNew);
					if (WebUtil.updateFields(m_request, m_wu, passwordChange))
					{
						if (passwordChange)
							m_session.setAttribute(WebSessionCtx.HDR_MESSAGE, ""Password changed"");
					}
					else
					{
						m_forward = getLogin_RelURL ();
						log.warning("" - update not done"");
					}
				}
				else
				{
					m_forward = getLogin_RelURL ();
					m_session.setAttribute(WebSessionCtx.HDR_MESSAGE, ""Email/Password not correct"");
					log.warning("" - update not confirmed"");
				}
			}
			else	//	new
			{
				log.fine(""** new "" + m_email + ""/"" + m_password);
				m_wu.setEmail (m_email);
				m_wu.setPassword (m_password);
				if (WebUtil.updateFields (m_request, m_wu, true))
				{
					if (m_wu.login(m_password))
					{
						m_session.setAttribute (WebInfo.NAME, new WebInfo (m_ctx, m_wu));
						//	Create / set session
						MSession session = MSession.get (m_ctx, X_AD_Session.SESSIONTYPE_WebStore, true,
							m_request.getRemoteAddr(),
							m_request.getRemoteHost(), m_session.getId());
						if (session != null)
							m_session.setAttribute(""AD_Session_ID"", session.getAD_Session_ID());
		    			WebUtil.resendCode(m_request, m_wu);
					}
					else
						m_forward = getLogin_RelURL ();
				}
				else
				{
					log.fine(""- failed - "" + m_wu.getSaveErrorMessage() + "" - "" + m_wu.getPasswordMessage());
					m_forward = getLogin_RelURL ();
				}
			}	//	new
			if (m_wu!=null)
				m_session.setAttribute (WebInfo.NAME, new WebInfo (m_ctx, m_wu));
		}	//	Submit

		else if(""email"".equals(m_mode))
        {
            String email = WebUtil.getParameter (m_request, ""EMail"");
            if (email == null)
                email = """";
            email = email.trim();

            String emailNew = WebUtil.getParameter (m_request, ""EMailNew"");
            if (emailNew == null)
                emailNew = """";

            email = email.trim();
            if(emailNew.length() == 0||emailNew.equals(email))
            {
                setMessage(""New EMail invalid."");
                return false;
            }

            if(!WebUtil.isEmailValid(emailNew))
            {
                setMessage(""New EMail invalid."");
                return false;
            }

            m_wu.setEmail(emailNew);
            m_wu.save();
            m_session.setAttribute(WebSessionCtx.HDR_MESSAGE, ""EMail Address Changed"");
            m_session.setAttribute(WebInfo.NAME, new WebInfo(m_ctx, m_wu));
        }

        else if(""password"".equals(m_mode))
        {
    		if (m_wu == null)
    		{
    			log.warning(""No web user"");
    			return false;
    		}

            String password = WebUtil.getParameter (m_request, ""Password"");
            if (password == null)
                password = """";	//	null loads w/o check
            password = password.trim();

            if(!m_wu.login(password))
            {
                setMessage(""Email/Password not correct"");
                return false;
            }

            MSession session = MSession.get (m_ctx, X_AD_Session.SESSIONTYPE_WebStore, true,
            	m_request.getRemoteAddr(), m_request.getRemoteHost(), m_session.getId());
			if (session != null)
				m_session.setAttribute(""AD_Session_ID"", session.getAD_Session_ID());

            String passwordNew = WebUtil.getParameter (m_request, ""PasswordNew"");
            if (passwordNew == null)
                passwordNew = """";

            password = password.trim();
            if( passwordNew.length() == 0 || passwordNew.equals(password))
            {
                setMessage(""New Password invalid."");
                return false;
            }

            m_wu.setPasswordMessage(null);
            m_wu.setPassword(passwordNew);
            if(m_wu.getPasswordMessage() != null)
            {
                setMessage(""New Password invalid."");
                return false;
            }
            m_wu.save();
			if (m_forward==null || m_forward.equals(getLogin_RelURL ()))
				m_forward = ""/index.jsp"";
            m_session.setAttribute(WebSessionCtx.HDR_MESSAGE, ""Password Changed"");
            m_session.setAttribute(WebInfo.NAME, new WebInfo(m_ctx, m_wu));
        }

        else if(""address"".equals(m_mode))
        {
            m_wu.setC_Country_ID(WebUtil.getParamOrNull(m_request, ""C_Country_ID""));
            m_wu.setC_Region_ID(WebUtil.getParamOrNull(m_request, ""C_Region_ID""));
            m_wu.setRegionName(WebUtil.getParamOrNull(m_request, ""RegionName""));
            m_wu.setName(WebUtil.getParamOrNull(m_request, ""Name""));
            m_wu.setCompany(WebUtil.getParamOrNull(m_request, ""Company""));
            m_wu.setTitle(WebUtil.getParamOrNull(m_request, ""Title""));
            m_wu.setAddress(WebUtil.getParamOrNull(m_request, ""Address""));
            m_wu.setAddress2(WebUtil.getParamOrNull(m_request, ""Address2""));
            m_wu.setCity(WebUtil.getParamOrNull(m_request, ""City""));
            m_wu.setPostal(WebUtil.getParamOrNull(m_request, ""Postal""));
            m_wu.setPhone(WebUtil.getParamOrNull(m_request, ""Phone""));
            m_wu.setFax(WebUtil.getParamOrNull(m_request, ""Fax""));
            m_wu.save();
            m_session.setAttribute(WebSessionCtx.HDR_MESSAGE, ""Contact Information Changed"");
            m_session.setAttribute(WebInfo.NAME, new WebInfo(m_ctx, m_wu));
        }

        else if (""EMailVerify"".equals(m_mode))
        {
    		if (m_wu == null)
    		{
    			log.warning(""No web user"");
    			return false;
    		}

    		log.info(m_forward + "" - "" + m_wu.toString());

    		String cmd = WebUtil.getParameter(m_request, ""ReSend"");
    		if (cmd != null && cmd.length() > 1)
    			WebUtil.resendCode(m_request, m_wu);
    		else
    		{
    			boolean success = m_wu.setEMailVerifyCode(
    					WebUtil.getParameter(m_request, ""VerifyCode""), m_request.getRemoteAddr());
    			if (success)
    	            m_session.setAttribute(WebSessionCtx.HDR_MESSAGE, ""EMail verified"");
    		}
        }

        else if (""bankaccountach"".equals(m_mode))
        {
    		if (m_wu == null)
    		{
    			log.warning(""No web user"");
    			return false;
    		}

    		log.info(m_forward + "" - "" + m_wu.toString());

    		MBPBankAccount thisBPBankAccount = m_wu.getBankAccount (true);
    		// As this sets bankaccountach
    		thisBPBankAccount.setIsACH (true);
    		thisBPBankAccount.setA_City (WebUtil.getParamOrNull (m_request, ""A_City""));
    		thisBPBankAccount.setA_Name (WebUtil.getParamOrNull (m_request, ""A_Name""));
    		thisBPBankAccount.setAccountNo (WebUtil.getParamOrNull (m_request, ""AccountNo""));
    		if (WebUtil.getParamOrNull (m_request, ""RoutingNo"")!=null)
    		{
    			MBank[] thisBank = MBank.getByRoutingNo (m_ctx, WebUtil.getParamOrNull (m_request, ""RoutingNo""));
    			if (thisBank!=null && thisBank.length>0) {
    				thisBPBankAccount.setC_Bank_ID (thisBank[0].get_ID ());
    			} else {
    				// Create Bank
    				MBank newBank = new MBank(m_ctx, 0, null);
    				newBank.setName (WebUtil.getParamOrNull (m_request, ""A_City""));
    				newBank.setRoutingNo (WebUtil.getParamOrNull (m_request, ""RoutingNo""));
    				newBank.save ();
    				thisBPBankAccount.setC_Bank_ID (newBank.get_ID ());
    			}
        		thisBPBankAccount.setRoutingNo (WebUtil.getParamOrNull (m_request, ""RoutingNo""));
    		}
    		thisBPBankAccount.save ();
        }
		else
			log.log(Level.WARNING, ""Unknown request='"" + m_mode + ""'"");

		return true;
	}	//	action
"
org.compiere.util.WebLogin.setMessage,WebLogin.java,"void setMessage(String newVal)
	{
		if (newVal!=null)
			m_message = newVal;
	}
"
org.compiere.util.WebLogin.getMessage,WebLogin.java,"String getMessage()
	{
		return m_message;
	}
"
org.compiere.util.WebLogin.setP_ForwardTo,WebLogin.java,"void setP_ForwardTo(String newVal)
	{
		if (newVal!=null)
			P_ForwardTo = newVal;
	}
"
org.compiere.util.WebLogin.getP_ForwardTo,WebLogin.java,"String getP_ForwardTo()
	{
		return P_ForwardTo;
	}
"
org.compiere.util.WebLogin.setP_EMail,WebLogin.java,"void setP_EMail(String newVal)
	{
		if (newVal!=null)
			P_EMail = newVal;
	}
"
org.compiere.util.WebLogin.getP_EMail,WebLogin.java,"String getP_EMail()
	{
		return P_EMail;
	}
"
org.compiere.util.WebLogin.setP_Password,WebLogin.java,"void setP_Password(String newVal)
	{
		if (newVal!=null)
			P_Password = newVal;
	}
"
org.compiere.util.WebLogin.getP_Password,WebLogin.java,"String getP_Password()
	{
		return P_Password;
	}
"
org.compiere.util.WebLogin.setP_SalesRep_ID,WebLogin.java,"void setP_SalesRep_ID(String newVal)
	{
		if (newVal!=null)
			P_SalesRep_ID = newVal;
	}
"
org.compiere.util.WebLogin.getP_SalesRep_ID,WebLogin.java,"String getP_SalesRep_ID()
	{
		return P_SalesRep_ID;
	}
"
org.compiere.util.WebLogin.setP_Action,WebLogin.java,"void setP_Action(String newVal)
	{
		if (newVal!=null)
			P_Action = newVal;
	}
"
org.compiere.util.WebLogin.getP_Action,WebLogin.java,"String getP_Action()
	{
		return P_Action;
	}
"
org.compiere.util.WebLogin.setLogin_RelURL,WebLogin.java,"void setLogin_RelURL(String newVal)
	{
		if (newVal!=null)
			m_login_page = newVal;
	}
"
org.compiere.util.WebLogin.getLogin_RelURL,WebLogin.java,"String getLogin_RelURL()
	{
		return m_login_page;
	}
"
org.compiere.util.WebLogin.setUpdate_page,WebLogin.java,"void setUpdate_page(String newVal)
	{
		if (newVal!=null)
			m_update_page = newVal;
	}
"
org.compiere.util.WebLogin.getUpdate_page,WebLogin.java,"String getUpdate_page()
	{
		return m_update_page;
	}
"
org.compiere.util.WebLogin.setForward,WebLogin.java,"void setForward(String newVal)
	{
		if (newVal!=null)
			m_forward = newVal;
	}
"
org.compiere.util.WebLogin.getForward,WebLogin.java,"String getForward()
	{
		return m_forward;
	}
"
org.compiere.util.WebLogin.getSalesRep_ID,WebLogin.java,"String getSalesRep_ID()
	{
		return m_salesRep;
	}
"
org.compiere.util.WebLogin.setAddressConfirm,WebLogin.java,"void setAddressConfirm(boolean newVal)
	{
			m_addressConfirm = newVal;
	}
"
org.compiere.util.WebLogin.getAddressConfirm,WebLogin.java,"boolean getAddressConfirm()
	{
		return m_addressConfirm;
	}
"
org.compiere.util.WebLogin.getWebUser,WebLogin.java,"WebUser getWebUser()
	{
		return m_wu;
	}
"
org.compiere.util.WebLogin.setMode,WebLogin.java,"void setMode(String t_mode)
	{
		m_mode = t_mode;
	}
"
org.compiere.util.WebLogin.getMode,WebLogin.java,"String getMode()
	{
		return m_mode;
	}
"
org.compiere.impexp.ImpFormat.setName,ImpFormat.java,"void setName(String newName)
	{
		if (newName == null || newName.length() == 0)
			throw new IllegalArgumentException(""Name must be at least 1 char"");
		else
			m_name = newName;
	}
"
org.compiere.impexp.ImpFormat.getName,ImpFormat.java,"String getName()
	{
		return m_name;
	}   //  getName
"
org.compiere.impexp.ImpFormat.setTable,ImpFormat.java,"void setTable (int AD_Table_ID)
	{
		m_AD_Table_ID = AD_Table_ID;
		m_tableName = null;
		m_tablePK = null;
		String sql = ""SELECT t.TableName,c.ColumnName ""
			+ ""FROM AD_Table t INNER JOIN AD_Column c ON (t.AD_Table_ID=c.AD_Table_ID AND c.IsKey='Y') ""
			+ ""WHERE t.AD_Table_ID=?"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, AD_Table_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				m_tableName = rs.getString(1);
				m_tablePK = rs.getString(2);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, ""ImpFormat.setTable"", e);
		}
		if (m_tableName == null || m_tablePK == null)
			log.log(Level.SEVERE, ""Data not found for AD_Table_ID="" + AD_Table_ID);

		//	Set Additional Table Info
		m_tableUnique1 = """";
		m_tableUnique2 = """";
		m_tableUniqueParent = """";
		m_tableUniqueChild = """";

		if (m_AD_Table_ID == 311)			//	I_061_SyncItem
		{
			m_tableUnique1 = ""H_UPC"";					//	UPC = unique
			m_tableUnique2 = ""Value"";
			m_tableUniqueChild = ""H_Commodity1"";		//	Vendor No may not be unique !
			m_tableUniqueParent = ""H_PartnrID"";			//			Makes it unique
		}
		else if (m_AD_Table_ID == 532)		//	I_Product
		{
			m_tableUnique1 = ""UPC"";						//	UPC = unique
			m_tableUnique2 = ""Value"";
			m_tableUniqueChild = ""VendorProductNo"";		//	Vendor No may not be unique !
			m_tableUniqueParent = ""BPartner_Value"";		//			Makes it unique
		}
		else if (m_AD_Table_ID == 533)		//	I_BPartner
		{
			m_tableUnique1 = ""Value"";				//	the key
		}
		else if (m_AD_Table_ID == 534)		//	I_ElementValue
		{
			m_tableUniqueParent = ""ElementName"";			//	the parent key
			m_tableUniqueChild = ""Value"";					//	the key
		}
		else if (m_AD_Table_ID == 535)		//	I_ReportLine
		{
			m_tableUniqueParent = ""ReportLineSetName"";		//	the parent key
			m_tableUniqueChild = ""Name"";					//	the key
		}
	}   //  setTable
"
org.compiere.impexp.ImpFormat.getAD_Table_ID,ImpFormat.java,"int getAD_Table_ID()
	{
		return m_AD_Table_ID;
	}   //  getAD_Table_ID
"
org.compiere.impexp.ImpFormat.setFormatType,ImpFormat.java,"void setFormatType(String newFormatType)
	{
		if (newFormatType.equals(FORMATTYPE_FIXED) || newFormatType.equals(FORMATTYPE_COMMA)
			|| newFormatType.equals(FORMATTYPE_TAB) || newFormatType.equals(FORMATTYPE_XML))
			m_formatType = newFormatType;
		else
			throw new IllegalArgumentException(""FormatType must be F/C/T/X"");
	}   //  setFormatType
"
org.compiere.impexp.ImpFormat.getFormatType,ImpFormat.java,"String getFormatType()
	{
		return m_formatType;
	}   //  getFormatType
"
org.compiere.impexp.ImpFormat.setBPartner,ImpFormat.java,"void setBPartner(String newBPartner)
	{
		m_BPartner = newBPartner;
	}   //  setBPartner
"
org.compiere.impexp.ImpFormat.getBPartner,ImpFormat.java,"String getBPartner()
	{
		return m_BPartner;
	}   //  getVPartner
"
org.compiere.impexp.ImpFormat.addRow,ImpFormat.java,"void addRow (ImpFormatRow row)
	{
		m_rows.add (row);
	}	//	addRow
"
org.compiere.impexp.ImpFormat.getRow,ImpFormat.java,"ImpFormatRow getRow (int index)
	{
		if (index >=0 && index < m_rows.size())
			return m_rows.get(index);
		return null;
	}	//	getRow
"
org.compiere.impexp.ImpFormat.getRowCount,ImpFormat.java,"int getRowCount()
	{
		return m_rows.size();
	}	//	getRowCount
"
org.compiere.impexp.ImpFormat.load,ImpFormat.java,"ImpFormat load (String name)
	{
		log.config(name);
		ImpFormat retValue = null;
		String sql = ""SELECT * FROM AD_ImpFormat WHERE Name=?"";
		int ID = 0;
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setString (1, name);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				retValue = new ImpFormat (name, rs.getInt(""AD_Table_ID""), rs.getString(""FormatType""));
				ID = rs.getInt (""AD_ImpFormat_ID"");
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
			return null;
		}
		loadRows (retValue, ID);
		return retValue;
	}	//	getFormat
"
org.compiere.impexp.ImpFormat.loadRows,ImpFormat.java,"void loadRows (ImpFormat format, int ID)
	{
		String sql = ""SELECT f.SeqNo,c.ColumnName,f.StartNo,f.EndNo,f.DataType,c.FieldLength,""		//	1..6
			+ ""f.DataFormat,f.DecimalPoint,f.DivideBy100,f.ConstantValue,f.Callout ""				//	7..11
			+ ""FROM AD_ImpFormat_Row f,AD_Column c ""
			+ ""WHERE f.AD_ImpFormat_ID=? AND f.AD_Column_ID=c.AD_Column_ID AND f.IsActive='Y'""
			+ ""ORDER BY f.SeqNo"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, ID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				ImpFormatRow row = new ImpFormatRow (rs.getInt(1),
					rs.getString(2), rs.getInt(3), rs.getInt(4), rs.getString(5), rs.getInt(6));
				//
				row.setFormatInfo(rs.getString(7), rs.getString(8),
					rs.getString(9).equals(""Y""),
					rs.getString(10), rs.getString(11));
				//
				format.addRow (row);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
	}	//	loadLines
"
org.compiere.impexp.ImpFormat.parseLine,ImpFormat.java,"String[] parseLine (String line, boolean withLabel, boolean trace, boolean ignoreEmpty)
	{
		if (trace)
			log.config("""" + line);

		ArrayList<String> list = new ArrayList<String>();
		//	for all columns
		for (int i = 0; i < m_rows.size(); i++)
		{
			ImpFormatRow row = m_rows.get(i);
			StringBuffer entry = new StringBuffer ();
			//	Label-Start
			if (withLabel)
			{
				entry.append(row.getColumnName());
				entry.append(""="");
				if (row.isString())
					entry.append(""'"");
				else if (row.isDate())
					entry.append(""TO_DATE('"");				//jz //TODO using DB.TO_DATE?;
			}

			//	Get Data
			String info = null;
			if (row.isConstant())
				info = ""Constant"";
			else if (m_formatType.equals(FORMATTYPE_FIXED))
			{
				//	check length
				if (row.getStartNo() > 0 && row.getEndNo() <= line.length())
					info = line.substring(row.getStartNo()-1, row.getEndNo());
			}
			else
			{
				info = parseFlexFormat (line, m_formatType, row.getStartNo());
			}

			if (info == null)
				info = """";

			//	Interpret Data
			entry.append(row.parse(info));

			//	Label-End
			if (withLabel)
			{
				if (row.isString())
					entry.append(""'"");
				else if (row.isDate())
					entry.append(""','YYYY-MM-DD HH24:MI:SS')"");		//	JDBC Timestamp format w/o miliseconds
			}

			if (!ignoreEmpty || (ignoreEmpty && info.length() != 0))
				list.add(entry.toString());
			//
			if (trace)
				log.fine(info + ""=>"" + entry.toString() + "" (Length="" + info.length() + "")"");
		}	//	for all columns

		String[] retValue = new String[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	parseLine
"
org.compiere.impexp.ImpFormat.parseFlexFormat,ImpFormat.java,"String parseFlexFormat (String line, String formatType, int fieldNo)
	{
		final char QUOTE = '""';
		//  check input
		char delimiter = ' ';
		if (formatType.equals(FORMATTYPE_COMMA))
			delimiter = ',';
		else if (formatType.equals(FORMATTYPE_TAB))
			delimiter = '\t';
		else
			throw new IllegalArgumentException (""ImpFormat.parseFlexFormat - unknown format: "" + formatType);
		if (line == null || line.length() == 0 || fieldNo < 0)
			return """";

		//  We need to read line sequentially as the fields may be delimited
		//  with quotes ("") when fields contain the delimiter
		//  Example:    ""Artikel,bez"",""Artikel,""""nr"""""",DEM,EUR
		//  needs to result in - Artikel,bez - Artikel,""nr"" - DEM - EUR
		int pos = 0;
		int length = line.length();
		for (int field = 1; field <= fieldNo && pos < length; field++)
		{
			StringBuffer content = new StringBuffer();
			//  two delimiter directly after each other
			if (line.charAt(pos) == delimiter)
			{
				pos++;
				continue;
			}
			//  Handle quotes
			if (line.charAt(pos) == QUOTE)
			{
				pos++;  //  move over beginning quote
				while (pos < length)
				{
					//  double quote
					if (line.charAt(pos) == QUOTE && pos+1 < length && line.charAt(pos+1) == QUOTE)
					{
						content.append(line.charAt(pos++));
						pos++;
					}
					//  end quote
					else if (line.charAt(pos) == QUOTE)
					{
						pos++;
						break;
					}
					//  normal character
					else
						content.append(line.charAt(pos++));
				}
				//  we should be at end of line or a delimiter
				if (pos < length && line.charAt(pos) != delimiter)
					log.info(""Did not find delimiter at pos "" + pos + "" "" + line);
				pos++;  //  move over delimiter
			}
			else // plain copy
			{
				while (pos < length && line.charAt(pos) != delimiter)
					content.append(line.charAt(pos++));
				pos++;  //  move over delimiter
			}
			if (field == fieldNo)
				return content.toString();
		}

		//  nothing found
		return """";
	}   //  parseFlexFormat
"
org.compiere.impexp.ImpFormat.updateDB,ImpFormat.java,"boolean updateDB (Ctx ctx, String line, Trx trx)
	{
		if (line == null || line.trim().length() == 0)
		{
			log.finest(""No Line"");
			return false;
		}
		String[] nodes = parseLine (line, true, false, true);	//	with label, no trace, ignore empty
		if (nodes.length == 0)
		{
			log.finest(""Nothing parsed from: "" + line);
			return false;
		}
	//	log.config( ""ImpFormat.updateDB - listSize="" + nodes.length);

		//  Standard Fields
		int AD_Client_ID = ctx.getAD_Client_ID();
		int AD_Org_ID = ctx.getAD_Org_ID();
		if (getAD_Table_ID() == X_I_GLJournal.Table_ID)
			AD_Org_ID = 0;
		int UpdatedBy = ctx.getAD_User_ID();


		//	Check if the record is already there ------------------------------
		StringBuffer sql = new StringBuffer (""SELECT COUNT(*), MAX("")
			.append(m_tablePK).append("") FROM "").append(m_tableName)
			.append("" WHERE AD_Client_ID="").append(AD_Client_ID).append("" AND ("");
		//
		String where1 = null;
		String where2 = null;
		String whereParentChild = null;
		for (String element : nodes) {
			if (element.endsWith(""=''"") || element.endsWith(""=0""))
				;
			else if (element.startsWith(m_tableUnique1 + ""=""))
				where1 = element;
			else if (element.startsWith(m_tableUnique2 + ""=""))
				where2 = element;
			else if (element.startsWith(m_tableUniqueParent + ""="") || element.startsWith(m_tableUniqueChild + ""=""))
			{
				if (whereParentChild == null)
					whereParentChild = element;
				else
					whereParentChild += "" AND "" + element;
			}
		}
		StringBuffer find = new StringBuffer();
		if (where1 != null)
			find.append(where1);
		if (where2 != null)
		{
			if (find.length() > 0)
				find.append("" OR "");
			find.append(where2);
		}
		if (whereParentChild != null && whereParentChild.indexOf("" AND "") != -1)	//	need to have both criteria
		{
			if (find.length() > 0)
				find.append("" OR ("").append(whereParentChild).append("")"");	//	may have only one
			else
				find.append(whereParentChild);
		}
		sql.append(find).append("")"");
		int count = 0;
		int ID = 0;
		try
		{
			if (find.length() > 0)
			{
				PreparedStatement pstmt = DB.prepareStatement(sql.toString(), trx);
				ResultSet rs = pstmt.executeQuery();
				if (rs.next())
				{
					count = rs.getInt(1);
					if (count == 1)
						ID = rs.getInt(2);
				}
				rs.close();
				pstmt.close();
			}
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql.toString(), e);
			return false;
		}


		//	Insert Basic Record -----------------------------------------------
		if (ID == 0)
		{
			ID = DB.getNextID(ctx, m_tableName, null);		//	get ID
			sql = new StringBuffer(""INSERT INTO "")
				.append(m_tableName).append(""("").append(m_tablePK).append("","")
				.append(""AD_Client_ID,AD_Org_ID,Created,CreatedBy,Updated,UpdatedBy,IsActive"")	//	StdFields
				.append("") VALUES ("").append(ID).append("","")
				.append(AD_Client_ID).append("","").append(AD_Org_ID)
				.append("",SysDate,"").append(UpdatedBy).append("",SysDate,"").append(UpdatedBy).append("",'Y'"")
				.append("")"");
			//
			int no = DB.executeUpdate(sql.toString(), trx);
			if (no != 1)
			{
				log.log(Level.SEVERE, ""Insert records="" + no + ""; SQL="" + sql.toString());
				return false;
			}
			log.finer(""New ID="" + ID + "" "" + find);
		}
		else
			log.finer(""Old ID="" + ID + "" "" + find);

		//	Update Info -------------------------------------------------------
		sql = new StringBuffer (""UPDATE "")
			.append(m_tableName).append("" SET "");
		for (int i = 0; i < nodes.length; i++)
		{
			if (nodes[i].startsWith(""Is"") && nodes[i].endsWith(""=''""))
				nodes[i] = nodes[i].replaceAll(""=''"", ""=NULL"");  //jz: ='' is not the same as NULL, IsXXX column wiht constraint 'Y' or 'N'
			sql.append(nodes[i]).append("","");		//	column=value
		}
		sql.append(""IsActive='Y',Processed='N',I_IsImported='N',Updated=SysDate,UpdatedBy="").append(UpdatedBy);
		sql.append("" WHERE "").append(m_tablePK).append(""="").append(ID);
		//  Update Cmd
		int no = DB.executeUpdate(sql.toString(), trx);
		if (no != 1)
		{
			log.log(Level.SEVERE, m_tablePK + ""="" + ID + "" - rows updated="" + no);
			return false;
		}
		return true;
	}	//	updateDB
"
org.compiere.impexp.OFXFileBankStatementLoader.init,OFXFileBankStatementLoader.java,"boolean init(MBankStatementLoader controller)
	{
		boolean result = false;
		FileInputStream m_stream = null;
		try
		{
			//	Try to open the file specified as a process parameter
			if (controller.getLocalFileName() != null)
			{
				m_stream = new FileInputStream(controller.getLocalFileName());
			}
			//	Try to open the file specified as part of the loader configuration
			else if (controller.getFileName() != null)
			{
				m_stream = new FileInputStream(controller.getFileName());
			}
			else 
			{
				return result;
			}
			if (!super.init(controller))
			{
				return result;
			}
			if (m_stream == null)
			{
				return result;
			}
			result = attachInput(m_stream);
			}
		catch(Exception e)
		{
			m_errorMessage = ""ErrorReadingData"";
			m_errorDescription = """";
		}

		return result;
	}	//	init
"
org.compiere.impexp.OFXFileBankStatementLoader.characters,OFXFileBankStatementLoader.java,"void characters (char ch[], int start, int length)
		throws SAXException
	{
		/*
		 * There are no additional things to do when importing from file.
		 * All data is handled by OFXBankStatementHandler
		 */
		super.characters(ch, start, length);
	}	//	characterS
"
org.compiere.impexp.OFX1ToXML.init,OFX1ToXML.java,"void init(BufferedReader br) throws IOException
	{
		m_writer = new BufferedWriter(new PipedWriter(m_reader));
		String line = br.readLine();

		write(""<?xml version=\""1.0\""?>\n"");
		write(""<?OFX "");
		while(line.indexOf(""<"") != 0)
		{
			if (line.length() > 0) 
			{
				write(line.replaceAll("":"", ""=\"""") + ""\"" "");
			}
			line = br.readLine();
		}
		write(""?>\n"");

		while(line != null)
		{
			m_ofx += line + ""\n"";
			line = br.readLine();
		}
		br.close();

		new Thread(this).start();
	}	//i	nit
"
org.compiere.impexp.OFX1ToXML.run,OFX1ToXML.java,"void run()
	{
		boolean addCloseTag;
		int tag2Start;
		int tagStart;
		int tagEnd;
		String tag;
		String line = """";

		try
		{
			while(m_ofx != """")
			{
				addCloseTag = false;
				tagStart = m_ofx.indexOf(""<"");
				if (tagStart == -1) 
				{
					break;
				}
				tagEnd = m_ofx.indexOf("">"");
				if (tagEnd <= tagStart + 1) 
				{
					throw new IOException(""PARSE ERROR: Invalid tag"");
				}
				tag = m_ofx.substring(tagStart + 1, tagEnd);
				if (tag.indexOf("" "") != -1) 
				{
					throw new IOException(""PARSE ERROR: Invalid tag"");
				}
				if (!tag.startsWith(""/"")) 
				{
					addCloseTag = (m_ofx.indexOf(""</""+tag+"">"") == -1);
				}
				tag2Start = m_ofx.indexOf(""<"", tagEnd);
				if (m_ofx.indexOf(""\n"", tagEnd) < tag2Start) 
				{
					tag2Start = m_ofx.indexOf(""\n"", tagEnd);
				}
				if (tag2Start == -1) 
				{
					tag2Start = m_ofx.length();
				}
				
				String data=m_ofx.substring(tagEnd+1, tag2Start);
				line = m_ofx.substring(0, tagEnd+1)+xmlEncodeTextAsPCDATA(data);
				
				m_ofx = m_ofx.substring(tag2Start);
				if (addCloseTag) 
				{
					line += ""</"" + tag + "">"";
				}
				write(line);
			}
			write(m_ofx);
			m_writer.close();
		}
		catch (IOException e)
		{
			log.log(Level.SEVERE, ""Ofx1To2Convertor: IO Exception"", e);
		}
	}	//	run
"
org.compiere.impexp.OFX1ToXML.write,OFX1ToXML.java,"void write(String str) throws IOException
	{
		m_writer.write(str, 0, str.length());
	}	//	write
"
org.compiere.impexp.OFX1ToXML.read,OFX1ToXML.java,"int read() throws IOException
	{
		return m_reader.read();
	}	//	read
"
org.compiere.impexp.OFX1ToXML.read,OFX1ToXML.java,"int read(char[] cbuf, int off, int len) throws IOException
	{
		return m_reader.read(cbuf, off, len);
	}	//	read
"
org.compiere.impexp.OFX1ToXML.xmlEncodeTextAsPCDATA,OFX1ToXML.java,"String xmlEncodeTextAsPCDATA(String text) 
	 {
		if (text == null)
			return null;
		char c;
		StringBuffer n = new StringBuffer (text.length () * 2);
		for (int i = 0; i < text.length (); i++)
		{
			c = text.charAt (i);
			switch (c)
			{
				case '&':
					n.append (""&amp;"");
					break;
				case '<':
					n.append (""&lt;"");
					break;
				case '>':
					n.append (""&gt;"");
					break;
				case '""':
					n.append (""&quot;"");
					break;
				case '\'':
					n.append (""&apos;"");
					break;
				default:
				{
					n.append (c);
					break;
				}
			}
		}
		return n.toString ();
	}	//	xmlEncodeTextAsPCDATA
"
org.compiere.impexp.CopyImportFormat.prepare,CopyImportFormat.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_ImpFormat_ID""))
				from_AD_ImpFormat_ID = ((BigDecimal)element.getParameter()).intValue();
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
		to_AD_ImpFormat_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.impexp.CopyImportFormat.doIt,CopyImportFormat.java,"String doIt () throws Exception
	{
		log.info(""doIt = From="" + from_AD_ImpFormat_ID + "" To="" + to_AD_ImpFormat_ID);
		MImpFormat from = new MImpFormat (getCtx(), from_AD_ImpFormat_ID, get_TrxName());
		if (from.getAD_ImpFormat_ID() != from_AD_ImpFormat_ID)
			throw new Exception (""From Format not found - "" + from_AD_ImpFormat_ID);
		//
		MImpFormat to = new MImpFormat (getCtx(), to_AD_ImpFormat_ID, get_TrxName());
		if (to.getAD_ImpFormat_ID() != to_AD_ImpFormat_ID)
			throw new Exception (""To Format not found - "" + from_AD_ImpFormat_ID);
		//
		if (from.getAD_Table_ID() != to.getAD_Table_ID())
			throw new Exception (""From-To do Not have same Format Table"");
		//
		MImpFormatRow[] rows = from.getRows();	//	incl. inactive
		for (MImpFormatRow row : rows) {
			MImpFormatRow copy = new MImpFormatRow (to, row);
			if (!copy.save())
				throw new Exception (""Copy error"");
		}
		
		String msg = ""#"" + rows.length;
		if (!from.getFormatType().equals(to.getFormatType()))
			return msg + "" - Note: Format Type different!"";
		return msg;
	}	//	doIt
"
org.compiere.impexp.StatementLine.init,OFXBankStatementHandler.java,"boolean init(MBankStatementLoader controller)
	{
		boolean result = false;
		if (controller == null)
		{
			m_errorMessage = ""ErrorInitializingParser"";
			m_errorDescription = ""ImportController is a null reference"";
			return result;
		}
		this.m_controller = controller;
		try
		{
			SAXParserFactory factory = SAXParserFactory.newInstance();
			m_parser = factory.newSAXParser();
			result = true;
		}
		catch(ParserConfigurationException e)
		{
			m_errorMessage = ""ErrorInitializingParser"";
			m_errorDescription = ""Unable to configure SAX parser: "" + e.getMessage();
		}
		catch(SAXException e)
		{
			m_errorMessage = ""ErrorInitializingParser"";
			m_errorDescription = ""Unable to initialize SAX parser: "" + e.getMessage();
		}
		return result;
	}	//	init
"
org.compiere.impexp.StatementLine.attachInput,OFXBankStatementHandler.java,"boolean attachInput(InputStream is)
	{
		boolean isOfx1 = true;
		boolean result = false;
		
		try
		{
			BufferedReader reader = new BufferedReader(new InputStreamReader(is));
			reader.mark(HEADER_SIZE + 100);
			String header = """";
			for (int i = 0; i < HEADER_SIZE; i++)
			{
				header = header + reader.readLine();
			}
			if ((header.indexOf(""<?OFX"") != -1) || (header.indexOf(""<?ofx"") != -1))
			{
				isOfx1 = false;
			}
			else if ((header.indexOf(""<?XML"") != -1) || (header.indexOf(""<?xml"") != -1))
			{
				isOfx1 = false;
				//deted specific OFX version
			}
			else 
			{
				isOfx1 = true;
				//detect specific OFX version
			}
			reader.reset();
			
			if (isOfx1)
			{
				m_reader = new BufferedReader(new InputStreamReader(new OFX1ToXML(reader)));
			}
			else
			{
				m_reader = reader;
			}
			result = true;
		}
		catch(IOException e)
		{
			m_errorMessage = ""ErrorReadingData"";
			m_errorDescription = e.getMessage();
			return result;
		}

		return result;
	}	//	attachInput
"
org.compiere.impexp.StatementLine.isValid,OFXBankStatementHandler.java,"boolean isValid()
	{
		boolean result = true;
		/*
		try
		{
			if (loadLines())
			{
				result = true;
				test = false;
			}
			m_reader.reset();
		}
		catch(IOException e)
		{
			m_errorMessage = ""ErrorReadingData"";
			m_errorDescription = e.getMessage();			
		}
		*/
		return result;
	}	//isValid
"
org.compiere.impexp.StatementLine.importSuccessfull,OFXBankStatementHandler.java,"boolean importSuccessfull()
	{
		/*
		 * Currently there are no checks after the statement lines are read.
		 * Once all lines are read correctly a successfull import is assumed.
		 */
		return m_success;
	}	//	importSuccessfull
"
org.compiere.impexp.StatementLine.loadLines,OFXBankStatementHandler.java,"boolean loadLines()
	{
		boolean result = false;
		try
		{
			m_parser.parse(new InputSource(m_reader), this);
			result = true;
			m_success = true;
		}
		catch(SAXException e)
		{
			m_errorMessage = ""ErrorParsingData"";
			m_errorDescription = e.getMessage();
		}
		catch(IOException e)
		{
			m_errorMessage = ""ErrorReadingData"";
			m_errorDescription = e.getMessage();
		}
		return result;
		
	}	//	loadLines
"
org.compiere.impexp.StatementLine.getDateLastRun,OFXBankStatementHandler.java,"Timestamp getDateLastRun()
	{
		return m_dateLastRun;
	}
"
org.compiere.impexp.StatementLine.getRoutingNo,OFXBankStatementHandler.java,"String getRoutingNo()
	{
		return m_line.routingNo;
	}
"
org.compiere.impexp.StatementLine.getBankAccountNo,OFXBankStatementHandler.java,"String getBankAccountNo()
	{
		return m_line.bankAccountNo;
	}
"
org.compiere.impexp.StatementLine.getStatementReference,OFXBankStatementHandler.java,"String getStatementReference()
	{
		return m_line.statementReference;
	}
"
org.compiere.impexp.StatementLine.getStatementDate,OFXBankStatementHandler.java,"Timestamp getStatementDate()
	{
		return m_statementDate;
	}
"
org.compiere.impexp.StatementLine.getReference,OFXBankStatementHandler.java,"String getReference()
	{
		return m_line.reference;
	}
"
org.compiere.impexp.StatementLine.getStatementLineDate,OFXBankStatementHandler.java,"Timestamp getStatementLineDate()
	{
		return m_line.statementLineDate;
	}
"
org.compiere.impexp.StatementLine.getValutaDate,OFXBankStatementHandler.java,"Timestamp getValutaDate()
	{
		return m_line.valutaDate;
	}
"
org.compiere.impexp.StatementLine.getTrxType,OFXBankStatementHandler.java,"String getTrxType()
	{
		return m_line.trxType;
	}
"
org.compiere.impexp.StatementLine.getIsReversal,OFXBankStatementHandler.java,"boolean getIsReversal()
	{
		return m_line.isReversal;
	}
"
org.compiere.impexp.StatementLine.getCurrency,OFXBankStatementHandler.java,"String getCurrency()
	{
		return m_line.currency;
	}
"
org.compiere.impexp.StatementLine.getStmtAmt,OFXBankStatementHandler.java,"BigDecimal getStmtAmt()
	{
		return m_line.stmtAmt;
	}
"
org.compiere.impexp.StatementLine.getTrxAmt,OFXBankStatementHandler.java,"BigDecimal getTrxAmt()
	{
		/* assume total amount = transaction amount
		 * todo: detect interest & charge amount
		 */
		return m_line.stmtAmt;
	}
"
org.compiere.impexp.StatementLine.getInterestAmt,OFXBankStatementHandler.java,"BigDecimal getInterestAmt()
	{
		return Env.ZERO;
	}
"
org.compiere.impexp.StatementLine.getMemo,OFXBankStatementHandler.java,"String getMemo()
	{
		return m_line.memo;
	}
"
org.compiere.impexp.StatementLine.getChargeName,OFXBankStatementHandler.java,"String getChargeName()
	{
		return m_line.chargeName;
	}
"
org.compiere.impexp.StatementLine.getChargeAmt,OFXBankStatementHandler.java,"BigDecimal getChargeAmt()
	{
		return m_line.chargeAmt;
	}
"
org.compiere.impexp.StatementLine.getTrxID,OFXBankStatementHandler.java,"String getTrxID()
	{
		return m_line.trxID;
	}
"
org.compiere.impexp.StatementLine.getPayeeAccountNo,OFXBankStatementHandler.java,"String getPayeeAccountNo()
	{
		return m_line.payeeAccountNo;
	}
"
org.compiere.impexp.StatementLine.getPayeeName,OFXBankStatementHandler.java,"String getPayeeName()
	{
		return m_line.payeeName;
	}
"
org.compiere.impexp.StatementLine.getCheckNo,OFXBankStatementHandler.java,"String getCheckNo()
	{
		return m_line.checkNo;
	}
"
org.compiere.impexp.StatementLine.startElement,OFXBankStatementHandler.java,"void startElement (String uri, String localName, String qName, Attributes attributes)
		throws org.xml.sax.SAXException
	{
		boolean validOFX = true;
		/*
		 * Currently no validating is being done, valid OFX structure is assumed.
		 */
		if (!validOFX)
		{
			m_errorDescription = ""Invalid OFX syntax: "" + qName;
			throw new SAXException(""Invalid OFX syntax: "" + qName);
		}
		if (qName.equals(XML_STMTTRN_TAG))
		{
			m_line = new StatementLine(m_routingNo, m_bankAccountNo, m_currency);
		}
		
		m_valueBuffer=new StringBuffer();
		
	}	//	startElement
"
org.compiere.impexp.StatementLine.characters,OFXBankStatementHandler.java,"void characters (char ch[], int start, int length) throws SAXException
	{

		m_valueBuffer.append(ch,start,length);
		
	}	//	characters
"
org.compiere.impexp.StatementLine.endElement,OFXBankStatementHandler.java,"void endElement (String uri, String localName, String qName) throws SAXException
	{
		
		String XML_TAG=qName;
		String value=m_valueBuffer.toString();
		
		try
		{
			//Read statment level data
			
			/*
			 * Default currency for this set of statement lines
			 * <OFX>-<BANKMSGSRSV2>-<STMTTRNRS>-<STMTRS>
			 */
			if (XML_TAG.equals(XML_CURDEF_TAG))
			{
				m_currency = value;
			}
			
			/* Routing Number (or SWIFT Code) for this set of statement lines
			 * <OFX>-<BANKMSGSRSV2>-<STMTTRNRS>-<STMTRS>-<BANKACCTFROM>
			 */
			else if (XML_TAG.equals(XML_BANKID_TAG))
			{
				m_routingNo = value;
			}
			
			/*
			 * Bank Account Number for this set of bank statement lines
			 * <OFX>-<BANKMSGSRSV2>-<STMTTRNRS>-<STMTRS>-<BANKACCTFROM>
			 */
			else if (XML_TAG.equals(XML_ACCTID_TAG))
			{
				m_bankAccountNo = value;
			}
			
			/*
			 * Last date for this set of statement lines
			 * This is the date that should be specified as the <DTSTART>
			 * for the next batch of statement lines, in order not to miss any 
			 * transactions.
			 * <OFX>-<BANKMSGSRSV2>-<STMTTRNRS>-<STMTRS>-<BANKTRANLIST>
			 */
			else if (XML_TAG.equals(XML_DTEND_TAG))
			{
				m_dateLastRun = parseOfxDate(value);
			}
			
			/*
			 *
			 * <OFX>-<BANKMSGSRSV2>-<STMTTRNRS>-<STMTRS>-<AVAILBAL>
			 */
			else if (XML_TAG.equals(XML_DTASOF_TAG))
			{
				m_statementDate = parseOfxDate(value);
			}
			
			
			//Read statement line level data
			
			/*
			 * Transaction type, e.g. DEBIT, CREDIT, SRVCHG
			 * <OFX>-<BANKMSGSRSV2>-<STMTTRNRS>-<STMTRS>-<BANKTRANLIST><STMTTRN>
			 */
			else if (XML_TAG.equals(XML_TRNTYPE_TAG))
			{
				m_line.trxType = value;
			}
			
			/*
			 * Statement line date
			 * <OFX>-<BANKMSGSRSV2>-<STMTTRNRS>-<STMTRS>-<BANKTRANLIST><STMTTRN>
			 */
			else if (XML_TAG.equals(XML_DTPOSTED_TAG))
			{
				m_line.statementLineDate = parseOfxDate(value);
			}
			
			/*
			 * Valuta date
			 * <OFX>-<BANKMSGSRSV2>-<STMTTRNRS>-<STMTRS>-<BANKTRANLIST><STMTTRN>
			 */
			else if (XML_TAG.equals(XML_DTAVAIL_TAG))
			{
				m_line.valutaDate = parseOfxDate(value);
			}
			
			/*
			 * Total statement line amount
			 * <OFX>-<BANKMSGSRSV2>-<STMTTRNRS>-<STMTRS>-<BANKTRANLIST><STMTTRN>
			 */
			else if (XML_TAG.equals(XML_TRNAMT_TAG))
			{
				m_line.stmtAmt = new BigDecimal(value);
			}
			
			/*
			 * Transaction Identification
			 * <OFX>-<BANKMSGSRSV2>-<STMTTRNRS>-<STMTRS>-<BANKTRANLIST><STMTTRN>
			 */
			else if (XML_TAG.equals(XML_FITID_TAG))
			{
				m_line.trxID = value;
			}
			
			/*
			 * Check number for check transactions
			 * CHECKNUM for generic OFX, CHKNUM for MS-Money OFC
			 * <OFX>-<BANKMSGSRSV2>-<STMTTRNRS>-<STMTRS>-<BANKTRANLIST><STMTTRN>
			 */
			else if ((XML_TAG.equals(XML_CHECKNUM_TAG)) || (XML_TAG.equals(XML_CHKNUM_TAG)))
			{
				m_line.checkNo = value;
			}
			
			/*
			 * Statement line reference
			 * Additional transaction reference information
			 * <OFX>-<BANKMSGSRSV2>-<STMTTRNRS>-<STMTRS>-<BANKTRANLIST><STMTTRN>
			 */
			else if (XML_TAG.equals(XML_REFNUM_TAG))
			{
				m_line.reference = value;
			}
			
			/*
			 * Transaction memo
			 * <OFX>-<BANKMSGSRSV2>-<STMTTRNRS>-<STMTRS>-<BANKTRANLIST><STMTTRN>
			 */
			else if (XML_TAG.equals(XML_MEMO_TAG))
			{
				m_line.memo = value;
			}
			
			/*
			 * Payee Name
			 * <OFX>-<BANKMSGSRSV2>-<STMTTRNRS>-<STMTRS>-<BANKTRANLIST><STMTTRN>
			 */
			else if (XML_TAG.equals(XML_NAME_TAG))
			{
				m_line.payeeName = value;
			}
		}
		catch(Exception e)
		{
			
			m_errorDescription = ""Invalid data: "" + value + "" <-> "" + e.getMessage();
			throw new SAXException(""Invalid data: "" + value);
		}
		
		if (qName.equals(XML_STMTTRN_TAG))
		{
			if (!m_test)
			{
				if (!m_controller.saveLine())
				{
					m_errorMessage = m_controller.getErrorMessage();
						m_errorDescription = m_controller.getErrorDescription();
					throw new SAXException(m_errorMessage);
				}
			}
		}
	}	//	endElement
"
org.compiere.impexp.StatementLine.parseOfxDate,OFXBankStatementHandler.java,"Timestamp parseOfxDate(String value) throws ParseException
	{
		try
		{
			SimpleDateFormat sdf = new SimpleDateFormat(""yyyyMMdd"");
			sdf.setLenient(false);
			return new Timestamp (sdf.parse(value).getTime());
		}
		catch(Exception e)
		{
			throw new ParseException(""Error parsing date: "" + value, 0);
		}
	}   //parseOfxDate
"
org.compiere.impexp.StatementLine.getLastErrorMessage,OFXBankStatementHandler.java,"String getLastErrorMessage()
	{
		return m_errorMessage;
	}
"
org.compiere.impexp.StatementLine.getLastErrorDescription,OFXBankStatementHandler.java,"String getLastErrorDescription()
	{
		return m_errorDescription;
	}
"
org.compiere.impexp.BankStatementMatchInfo.isMatched,BankStatementMatchInfo.java,"boolean isMatched()
	{
		return m_C_BPartner_ID > 0 || m_C_Payment_ID > 0 || m_C_Invoice_ID > 0;
	}	//	isValid
"
org.compiere.impexp.BankStatementMatchInfo.getC_BPartner_ID,BankStatementMatchInfo.java,"int getC_BPartner_ID() 
	{
		return m_C_BPartner_ID;
	}
"
org.compiere.impexp.BankStatementMatchInfo.setC_BPartner_ID,BankStatementMatchInfo.java,"void setC_BPartner_ID (int C_BPartner_ID) 
	{
		m_C_BPartner_ID = C_BPartner_ID;
	}
"
org.compiere.impexp.BankStatementMatchInfo.getC_Payment_ID,BankStatementMatchInfo.java,"int getC_Payment_ID() 
	{
		return m_C_Payment_ID;
	}
"
org.compiere.impexp.BankStatementMatchInfo.setC_Payment_ID,BankStatementMatchInfo.java,"void setC_Payment_ID (int C_Payment_ID) 
	{
		m_C_Payment_ID = C_Payment_ID;
	}
"
org.compiere.impexp.BankStatementMatchInfo.getC_Invoice_ID,BankStatementMatchInfo.java,"int getC_Invoice_ID() 
	{
		return m_C_Invoice_ID;
	}
"
org.compiere.impexp.BankStatementMatchInfo.setC_Invoice_ID,BankStatementMatchInfo.java,"void setC_Invoice_ID (int C_Invoice_ID) 
	{
		m_C_Invoice_ID = C_Invoice_ID;
	}
"
org.compiere.impexp.ImpFormatRow.getSeqNo,ImpFormatRow.java,"int getSeqNo ()
	{
		return m_seqNo;
	}   //  getSeqNo
"
org.compiere.impexp.ImpFormatRow.setSeqNo,ImpFormatRow.java,"void setSeqNo (int newSeqNo)
	{
		m_seqNo = newSeqNo;
	}   //  setSeqNo
"
org.compiere.impexp.ImpFormatRow.setStartNo,ImpFormatRow.java,"void setStartNo (int newStartNo)
	{
		m_startNo = newStartNo;
	}   //  setStartNo
"
org.compiere.impexp.ImpFormatRow.getStartNo,ImpFormatRow.java,"int getStartNo()
	{
		return m_startNo;
	}   //  getStartNo
"
org.compiere.impexp.ImpFormatRow.setEndNo,ImpFormatRow.java,"void setEndNo (int newEndNo)
	{
		m_endNo = newEndNo;
	}   //  setEndNo
"
org.compiere.impexp.ImpFormatRow.getEndNo,ImpFormatRow.java,"int getEndNo ()
	{
		return m_endNo;
	}   //  getEndNo
"
org.compiere.impexp.ImpFormatRow.setColumnName,ImpFormatRow.java,"void setColumnName (String columnName)
	{
		if (columnName == null || columnName.length() == 0)
			throw new IllegalArgumentException(""ColumnName must be at least 1 char"");
		else
			m_columnName = columnName;
	}   //  setColumnName
"
org.compiere.impexp.ImpFormatRow.getColumnName,ImpFormatRow.java,"String getColumnName()
	{
		return m_columnName;
	}   //  getColumnName
"
org.compiere.impexp.ImpFormatRow.setDataType,ImpFormatRow.java,"void setDataType (String dataType)
	{
		if (dataType.equals(DATATYPE_String) || dataType.equals(DATATYPE_Date)
			|| dataType.equals(DATATYPE_Number) || dataType.equals(DATATYPE_Constant))
			m_dataType = dataType;
		else
			throw new IllegalArgumentException(""DataType must be S/D/N/C"");
	}   //  setDataType
"
org.compiere.impexp.ImpFormatRow.getDataType,ImpFormatRow.java,"String getDataType()
	{
		return m_dataType;
	}   //  getDataType
"
org.compiere.impexp.ImpFormatRow.isString,ImpFormatRow.java,"boolean isString()
	{
		if (m_dataType.equals(DATATYPE_Constant))
			return m_constantIsString;
		return m_dataType.equals(DATATYPE_String);
	}	//	isString
"
org.compiere.impexp.ImpFormatRow.isNumber,ImpFormatRow.java,"boolean isNumber()
	{
		return m_dataType.equals(DATATYPE_Number);
	}
"
org.compiere.impexp.ImpFormatRow.isDate,ImpFormatRow.java,"boolean isDate()
	{
		return m_dataType.equals(DATATYPE_Date);
	}
"
org.compiere.impexp.ImpFormatRow.isConstant,ImpFormatRow.java,"boolean isConstant()
	{
		return m_dataType.equals(DATATYPE_Constant);
	}
"
org.compiere.impexp.ImpFormatRow.setFormatInfo,ImpFormatRow.java,"void setFormatInfo (String dataFormat, String decimalPoint, boolean divideBy100,
		String constantValue, String callout)
	{
		if (dataFormat == null)
			m_dataFormat = """";
		else
			m_dataFormat = dataFormat;
		//	number
		if (decimalPoint == null || !decimalPoint.equals("",""))
			m_decimalPoint = ""."";
		else
			m_decimalPoint = "","";
		m_divideBy100 = divideBy100;
		//	constant
		if (constantValue == null || constantValue.length() == 0 || !m_dataType.equals(DATATYPE_Constant))
		{
			m_constantValue = """";
			m_constantIsString = true;
		}
		else
		{
			m_constantValue = constantValue;
			m_constantIsString = false;
			for (int i = 0; i < m_constantValue.length(); i++)
			{
				char c = m_constantValue.charAt(i);
				if (!(Character.isDigit(c) || c == '.'))	//	if a constant number, it must be with . (not ,)
				{
					m_constantIsString = true;
					break;
				}
			}
		}
		//	callout
		if (callout != null)
		{
			int methodStart = callout.lastIndexOf(""."");
			try
			{
				if (methodStart != -1)      //  no class
				{
					Class<?> cClass = Class.forName(callout.substring(0,methodStart));
					m_callout = (Callout)cClass.newInstance();
					m_method = callout.substring(methodStart+1);
				}
			}
			catch (Exception e)
			{
				log.log(Level.SEVERE, ""MTab.setFormatInfo - "" + e.toString());
			}
			if (m_callout == null || m_method == null || m_method.length() == 0)
			{
				log.log(Level.SEVERE, ""MTab.setFormatInfo - Invalid Callout "" + callout);
				m_callout = null;
			}
		}
	}   //  setFormatInfo
"
org.compiere.impexp.ImpFormatRow.getDataFormat,ImpFormatRow.java,"String getDataFormat()
	{
		return m_dataFormat;
	}
"
org.compiere.impexp.ImpFormatRow.getDecimalPoint,ImpFormatRow.java,"String getDecimalPoint()
	{
		return m_decimalPoint;
	}
"
org.compiere.impexp.ImpFormatRow.isDivideBy100,ImpFormatRow.java,"boolean isDivideBy100()
	{
		return m_divideBy100;
	}
"
org.compiere.impexp.ImpFormatRow.getConstantValue,ImpFormatRow.java,"String getConstantValue()
	{
		return m_constantValue;
	}
"
org.compiere.impexp.ImpFormatRow.setMaxLength,ImpFormatRow.java,"void setMaxLength (int maxLength)
	{
		m_maxLength = maxLength;
	}	//	setMaxLength
"
org.compiere.impexp.ImpFormatRow.parse,ImpFormatRow.java,"String parse (String info)
	{
		if (info == null || info.length() == 0)
			return """";

		//	Comment ?
		if (info.startsWith(""["") && info.endsWith(""]""))
			return """";
		//
		String retValue = null;
		if (isNumber())
			retValue = parseNumber (info);
		else if (isDate())
			retValue = parseDate (info);
		else if (isConstant())
			retValue = m_constantIsString ? parseString (m_constantValue) : m_constantValue;
		else
			retValue = parseString (info);
		//
		if (m_callout != null)
		{
			try
			{
				retValue = m_callout.convert (m_method, retValue);
			}
			catch (Exception e)
			{
				log.log(Level.SEVERE, ""ImpFormatRow.parse - "" + info + "" ("" + retValue + "")"", e);
			}
		}
		//
		if (retValue == null)
			retValue = """";
		return retValue.trim();
	}	//	parse
"
org.compiere.impexp.ImpFormatRow.parseDate,ImpFormatRow.java,"String parseDate (String info)
	{
		if (m_dformat == null)
		{
			try
			{
				m_dformat = new SimpleDateFormat(m_dataFormat);
			}
			catch (Exception e)
			{
				log.log(Level.SEVERE, ""ImpFormatRow.parseDate Format="" + m_dataFormat, e);
			}
			if (m_dformat == null)
				m_dformat = (SimpleDateFormat)DateFormat.getDateInstance();
			m_dformat.setLenient(true);
		}

		Timestamp ts = null;
		try
		{
			ts = new Timestamp (m_dformat.parse(info).getTime());
		}
		catch (ParseException pe)
		{
			log.log(Level.SEVERE, ""ImpFormatRow.parseDate - "" + info, pe);
		}
		if (ts == null)
			ts = new Timestamp (System.currentTimeMillis());
		//
		String dateString = ts.toString();
		return dateString.substring(0, dateString.indexOf("".""));	//	cut off miliseconds
	}	//	parseNumber
"
org.compiere.impexp.ImpFormatRow.parseString,ImpFormatRow.java,"String parseString (String info)
	{
		String retValue = info;
		//	Length restriction
		if (m_maxLength > 0 && retValue.length() > m_maxLength)
			retValue = retValue.substring(0, m_maxLength);

		//  copy characters		(wee need to look through anyway)
		StringBuffer out = new StringBuffer(retValue.length());
		for (int i = 0; i < retValue.length(); i++)
		{
			char c = retValue.charAt(i);
			if (c == '\'')
				out.append(""''"");
			else if (c == '\\')
				out.append(""\\\\"");
			else
				out.append(c);
		}
		return out.toString();
	}	//	parseString
"
org.compiere.impexp.ImpFormatRow.parseNumber,ImpFormatRow.java,"String parseNumber (String info)
	{
		boolean hasPoint = info.indexOf(""."") != -1;
		boolean hasComma = info.indexOf("","") != -1;
		//	delete thousands
		if (hasComma && m_decimalPoint.equals("".""))
			info = info.replace(',', ' ');
		if (hasPoint && m_decimalPoint.equals("",""))
			info = info.replace('.', ' ');
		hasComma = info.indexOf("","") != -1;

		//	replace decimal
		if (hasComma && m_decimalPoint.equals("",""))
			info = info.replace(',', '.');

		//	remove everything but digits, '.', or leading '-'
		char[] charArray = info.toCharArray();
		StringBuffer sb = new StringBuffer();
		boolean minusAllowed = true; // whether a minus sign is allowed 
		for (char element : charArray) {
			if ( (minusAllowed && element == '-') || 
				 Character.isDigit(element) || element == '.')
			{
				sb.append(element);
				minusAllowed = false;
			}
		}

		if (sb.length() == 0)
			return ""0"";
		BigDecimal bd = new BigDecimal(sb.toString());
		if (m_divideBy100)					//	assumed two decimal scale
			bd = bd.divide(new BigDecimal(100.0), 2, BigDecimal.ROUND_HALF_UP);
		return bd.toString();
	}	//	parseNumber
"
org.compiere.impexp.MImpFormat.getRows,MImpFormat.java,"MImpFormatRow[] getRows()
	{
		ArrayList<MImpFormatRow> list = new ArrayList<MImpFormatRow>();
		String sql = ""SELECT * FROM AD_ImpFormat_Row ""
			+ ""WHERE AD_ImpFormat_ID=? ""
			+ ""ORDER BY SeqNo"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getAD_ImpFormat_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add(new MImpFormatRow (getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""getRows"", e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MImpFormatRow[] retValue = new MImpFormatRow[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getRows
"
org.compiere.model.MSLAGoal.getAllMeasures,MSLAGoal.java,"MSLAMeasure[] getAllMeasures()
	{
		String sql = ""SELECT * FROM PA_SLA_Measure ""
			+ ""WHERE PA_SLA_Goal_ID=? ""
			+ ""ORDER BY DateTrx"";
		return getMeasures (sql);
	}	//	getAllMeasures
"
org.compiere.model.MSLAGoal.getNewMeasures,MSLAGoal.java,"MSLAMeasure[] getNewMeasures()
	{
		String sql = ""SELECT * FROM PA_SLA_Measure ""
			+ ""WHERE PA_SLA_Goal_ID=?""
			+ "" AND Processed='N' ""
			+ ""ORDER BY DateTrx"";
		return getMeasures (sql);
	}	//	getNewMeasures
"
org.compiere.model.MSLAGoal.getMeasures,MSLAGoal.java,"MSLAMeasure[] getMeasures (String sql)
	{
		ArrayList<MSLAMeasure> list = new ArrayList<MSLAMeasure>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getPA_SLA_Goal_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add(new MSLAMeasure(getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MSLAMeasure[] retValue = new MSLAMeasure[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getMeasures
"
org.compiere.model.MSLAGoal.isDateValid,MSLAGoal.java,"boolean isDateValid (Timestamp date)
	{
		if (date == null)
			return false;
		if (getValidFrom() != null && date.before(getValidFrom()))
			return false;
		if (getValidTo() != null && date.after(getValidTo()))
			return false;
		return true;
	}	//	isDateValid
"
org.compiere.model.MChat.getOfTable,MChat.java,"MChat[] getOfTable (Ctx ctx, int AD_Table_ID)
	{
		int AD_Client_ID = ctx.getAD_Client_ID();
		ArrayList<MChat> list = new ArrayList<MChat>();
		//
		String sql = ""SELECT * FROM CM_Chat ""
			+ ""WHERE AD_Client_ID=? AND AD_Table_ID=? ORDER BY Record_ID"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, AD_Client_ID);
			pstmt.setInt (2, AD_Table_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				list.add (new MChat (ctx, rs, null));
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		MChat[] retValue = new MChat[list.size()];
		list.toArray (retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MChat.getEntries,MChat.java,"MChatEntry[] getEntries (boolean reload)
	{
		if (m_entries != null && !reload)
			return m_entries;
		ArrayList<MChatEntry> list = new ArrayList<MChatEntry>();
		String sql = ""SELECT * FROM CM_ChatEntry WHERE CM_Chat_ID=? AND isActive = 'Y' ORDER BY Created"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, getCM_Chat_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				list.add (new MChatEntry (getCtx(), rs, get_Trx()));
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		m_entries = new MChatEntry[list.size ()];
		list.toArray (m_entries);
		return m_entries;
	}	// getEntries
"
org.compiere.model.MChat.setDescription,MChat.java,"void setDescription (String Description)
	{
		if (Description != null && Description.length() > 0)
			super.setDescription (Description);
		else
			super.setDescription (getAD_Table_ID() + ""#"" + getRecord_ID());
	}	//	setDescription
"
org.compiere.model.MChat.getHistory,MChat.java,"p getHistory (String ConfidentialType)
	{
		p history = new p();
		getEntries(true);
		boolean first = true;
		if (m_entries.length ==0)
			return null;
		
		for (MChatEntry entry : m_entries) {
			if (!entry.isActive() || !entry.isConfidentialType(ConfidentialType))
				continue;
			if (first)
				first = false;
			else
				history.addElement(new hr());
			//	User & Date
			b b = new b();
			MUser user = MUser.get(getCtx(), entry.getCreatedBy());
			b.addElement(user.getName());
			b.addElement("" \t"");
			Timestamp created = entry.getCreated();
			if (m_format == null)
				m_format = DisplayType.getDateFormat(DisplayTypeConstants.DateTime);
			b.addElement(m_format.format(created));
			history.addElement(b);
		//	history.addElement(new br());
			//
			p p = new p();
			String data = entry.getCharacterData();
			data = Util.maskHTML(data, true);
			p.addElement(data);
			history.addElement(p);
		}	//	entry
		//
		return history;
	}	//	getHistory
"
org.compiere.model.MChat.getHistoryString,MChat.java,"String getHistoryString(){
		p retVal  = getHistory(X_CM_Chat.CONFIDENTIALTYPE_Internal);
		if (retVal  == null)
			return null;
		else
			return retVal.toString();
	}
"
org.compiere.model.MMatchInv.get,MMatchInv.java,"MMatchInv[] get (Ctx ctx, 
		int M_InOutLine_ID, int C_InvoiceLine_ID, Trx trx)
	{
		if (M_InOutLine_ID == 0 || C_InvoiceLine_ID == 0)
			return new MMatchInv[]{};
		//
		String sql = ""SELECT * FROM M_MatchInv WHERE M_InOutLine_ID=? AND C_InvoiceLine_ID=?"";
		ArrayList<MMatchInv> list = new ArrayList<MMatchInv>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, M_InOutLine_ID);
			pstmt.setInt (2, C_InvoiceLine_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MMatchInv (ctx, rs, trx));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e); 
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MMatchInv[] retValue = new MMatchInv[list.size()];
		list.toArray (retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MMatchInv.get,MMatchInv.java,"MMatchInv[] get (Ctx ctx, 
		int M_InOutLine_ID, Trx trx)
	{
		if (M_InOutLine_ID == 0)
			return new MMatchInv[]{};
		//
		String sql = ""SELECT * FROM M_MatchInv WHERE M_InOutLine_ID=?"";
		ArrayList<MMatchInv> list = new ArrayList<MMatchInv>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, M_InOutLine_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MMatchInv (ctx, rs, trx));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e); 
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MMatchInv[] retValue = new MMatchInv[list.size()];
		list.toArray (retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MMatchInv.getInOut,MMatchInv.java,"MMatchInv[] getInOut (Ctx ctx, 
		int M_InOut_ID, Trx trx)
	{
		if (M_InOut_ID == 0)
			return new MMatchInv[]{};
		//
		String sql = ""SELECT * FROM M_MatchInv m""
			+ "" INNER JOIN M_InOutLine l ON (m.M_InOutLine_ID=l.M_InOutLine_ID) ""
			+ ""WHERE l.M_InOut_ID=?""; 
		ArrayList<MMatchInv> list = new ArrayList<MMatchInv>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, M_InOut_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MMatchInv (ctx, rs, trx));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e); 
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MMatchInv[] retValue = new MMatchInv[list.size()];
		list.toArray (retValue);
		return retValue;
	}	//	getInOut
"
org.compiere.model.MMatchInv.getInvoice,MMatchInv.java,"MMatchInv[] getInvoice (Ctx ctx, 
		int C_Invoice_ID, Trx trx)
	{
		if (C_Invoice_ID == 0)
			return new MMatchInv[]{};
		//
		String sql = ""SELECT * FROM M_MatchInv mi""
			+ "" INNER JOIN C_InvoiceLine il ON (mi.C_InvoiceLine_ID=il.C_InvoiceLine_ID) ""
			+ ""WHERE il.C_Invoice_ID=?"";
		ArrayList<MMatchInv> list = new ArrayList<MMatchInv>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, C_Invoice_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MMatchInv (ctx, rs, trx));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e); 
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MMatchInv[] retValue = new MMatchInv[list.size()];
		list.toArray (retValue);
		return retValue;
	}	//	getInvoice
"
org.compiere.model.MMatchInv.beforeSave,MMatchInv.java,"boolean beforeSave (boolean newRecord)
	{
		//	Set Trx Date
		if (getDateTrx() == null)
			setDateTrx (new Timestamp(System.currentTimeMillis()));
		//	Set Acct Date
		if (getDateAcct() == null)
		{
			Timestamp ts = getNewerDateAcct();
			if (ts == null)
				ts = getDateTrx();
			setDateAcct (ts);
		}
		if (getM_AttributeSetInstance_ID() == 0 && getM_InOutLine_ID() != 0)
		{
			MInOutLine iol = new MInOutLine (getCtx(), getM_InOutLine_ID(), get_Trx());
			setM_AttributeSetInstance_ID(iol.getM_AttributeSetInstance_ID());
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MMatchInv.getNewerDateAcct,MMatchInv.java,"Timestamp getNewerDateAcct()
	{
		Timestamp invoiceDate = null;
		Timestamp shipDate = null;
		
		String sql = ""SELECT i.DateAcct ""
			+ ""FROM C_InvoiceLine il""
			+ "" INNER JOIN C_Invoice i ON (i.C_Invoice_ID=il.C_Invoice_ID) ""
			+ ""WHERE C_InvoiceLine_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, getC_InvoiceLine_ID());
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				invoiceDate = rs.getTimestamp(1);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		sql = ""SELECT io.DateAcct ""
			+ ""FROM M_InOutLine iol""
			+ "" INNER JOIN M_InOut io ON (io.M_InOut_ID=iol.M_InOut_ID) ""
			+ ""WHERE iol.M_InOutLine_ID=?"";
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, getM_InOutLine_ID());
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				shipDate = rs.getTimestamp(1);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		//
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		if (invoiceDate == null)
			return shipDate;
		if (shipDate == null)
			return invoiceDate;
		if (invoiceDate.after(shipDate))
			return invoiceDate;
		return shipDate;
	}	//	getNewerDateAcct
"
org.compiere.model.MMatchInv.beforeDelete,MMatchInv.java,"boolean beforeDelete ()
	{
		if (isPosted())
		{
			String msg = MPeriod.isOpen(this, null, getDateAcct(), MDocBaseType.DOCBASETYPE_MatchInvoice);
			if (msg != null)
			{
				log.warning(msg);
				return false;
			}
			setPosted(false);
			return MFactAcct.delete (Table_ID, get_ID(), get_Trx()) >= 0;
		}
		return true;
	}	//	beforeDelete
"
org.compiere.model.MMatchInv.afterDelete,MMatchInv.java,"boolean afterDelete (boolean success)
	{
		if (success)
		{
			//	Get Order and decrease invoices
			MInvoiceLine iLine = new MInvoiceLine (getCtx(), getC_InvoiceLine_ID(), get_Trx());
			int C_OrderLine_ID = iLine.getC_OrderLine_ID();
			if (C_OrderLine_ID == 0)
			{
				MInOutLine ioLine = new MInOutLine (getCtx(), getM_InOutLine_ID(), get_Trx());
				C_OrderLine_ID = ioLine.getC_OrderLine_ID();
			}
			//	No Order Found
			if (C_OrderLine_ID == 0)
				return success;
			//	Find MatchPO
			MMatchPO[] mPO = MMatchPO.get(getCtx(), C_OrderLine_ID, 
				getC_InvoiceLine_ID(), get_Trx());
			for (MMatchPO element : mPO) {
				if (element.getM_InOutLine_ID() == 0)
					element.delete(true);
				else
				{
					element.setC_InvoiceLine_ID(null);
					element.save();
				}
			}
		}
		return success;
	}	//	afterDelete
"
org.compiere.model.MLoginMsg.getForUser,MLoginMsg.java,"ArrayList<MLoginMsg> getForUser (Ctx ctx, int AD_User_ID)
    {
		MRole role = MRole.get(ctx, ctx.getAD_Role_ID());
		boolean isAdmin = ((role!=null) && role.isAdministrator());

    	StringBuffer sql = new StringBuffer(""SELECT * FROM AD_LoginMsg m WHERE IsActive='Y'""
    		+ "" AND (ValidFrom IS NULL OR ValidFrom <= SysDate)""
    		+ "" AND (ValidTo IS NULL OR SysDate <= ValidTo)""
    		+ "" AND AD_Client_ID IN (0,?)""						// #1
    		//  LOGINMSGFREQUENCY_Once
    		+ ""	AND ( (LoginMsgFrequency='O' AND NOT EXISTS (SELECT * FROM AD_LoginMsgLog l ""
    			+ ""WHERE m.AD_LoginMsg_ID=l.AD_LoginMsg_ID AND l.AD_User_ID=? AND l.IsActive='Y' AND IsUserAccepted='Y'))""	//	#2
    		//	LOGINMSGFREQUENCY_Daily;
    		+ "" OR (LoginMsgFrequency='D' AND NOT EXISTS (SELECT * FROM AD_LoginMsgLog l ""
    			+ ""WHERE m.AD_LoginMsg_ID=l.AD_LoginMsg_ID AND l.AD_User_ID=? AND l.IsActive='Y' AND IsUserAccepted='Y'""
    			+ "" AND TRUNC(SysDate,'DD')=TRUNC(l.Created,'DD')))""
       		//	LOGINMSGFREQUENCY_OncePerWeek;
    		+ "" OR (LoginMsgFrequency='W' AND NOT EXISTS (SELECT * FROM AD_LoginMsgLog l ""
    			+ ""WHERE m.AD_LoginMsg_ID=l.AD_LoginMsg_ID AND l.AD_User_ID=? AND l.IsActive='Y' AND IsUserAccepted='Y'""
    			+ "" AND TRUNC(SysDate,'DAY')=TRUNC(l.Created,'DAY')))""
       	    //	LOGINMSGFREQUENCY_OncePerMonth;
    		+ "" OR (LoginMsgFrequency='M' AND NOT EXISTS (SELECT * FROM AD_LoginMsgLog l ""
    			+ ""WHERE m.AD_LoginMsg_ID=l.AD_LoginMsg_ID AND l.AD_User_ID=? AND l.IsActive='Y' AND IsUserAccepted='Y'""
    			+ "" AND TRUNC(SysDate,'MM')=TRUNC(l.Created,'MM')))""
    		+ "")""
    	);
    	ArrayList<MLoginMsg> list = new ArrayList<MLoginMsg>();
        PreparedStatement pstmt = null;
        try
        {
	        pstmt = DB.prepareStatement(sql.toString(), (Trx) null);
	        pstmt.setInt(1, ctx.getAD_Client_ID());
	        pstmt.setInt(2, AD_User_ID);
	        pstmt.setInt(3, AD_User_ID);
	        pstmt.setInt(4, AD_User_ID);
	        pstmt.setInt(5, AD_User_ID);
	        ResultSet rs = pstmt.executeQuery();
	        while (rs.next())
	        {
	        	MLoginMsg lm = new MLoginMsg(ctx, rs, null);
	        	if (!lm.isDisplayMsg(AD_User_ID, isAdmin))
	        		continue;
		        list.add(lm);
	        }
	        rs.close();
	        pstmt.close();
	        pstmt = null;
        }
        catch (Exception e)
        {
	        s_log.log(Level.SEVERE, sql.toString(), e);
        }
        try
        {
	        if (pstmt != null)
		        pstmt.close();
	        pstmt = null;
        }
        catch (Exception e)
        {
	        pstmt = null;
        }
    	return list;
    }	//	getForUser
"
org.compiere.model.MLoginMsg.get,MLoginMsg.java,"MLoginMsg get(Ctx ctx, int AD_LoginMsg_ID)
    {
	    Integer key = new Integer(AD_LoginMsg_ID);
	    MLoginMsg retValue = s_cache.get(ctx, key);
	    if (retValue != null)
		    return retValue;
	    retValue = new MLoginMsg(ctx, AD_LoginMsg_ID, null);
	    if (retValue.get_ID() != 0)
		    s_cache.put(key, retValue);
	    return retValue;
    }	//	get
"
org.compiere.model.MLoginMsg.isDisplayMsg,MLoginMsg.java,"boolean isDisplayMsg(int AD_User_ID, boolean isAdministrator)
	{
		LoginMsgInterface impl = getImplementation();
		if (impl != null)
			return impl.isDisplayMsg(getAD_LoginMsg_ID(), AD_User_ID, isAdministrator);
		return true;
	}	//	isDisplayMsg
"
org.compiere.model.MLoginMsg.getAdditionalText,MLoginMsg.java,"String getAdditionalText(int AD_User_ID)
	{
		LoginMsgInterface impl = getImplementation();
		if (impl != null)
			return impl.getAdditionalText(getAD_LoginMsg_ID(), AD_User_ID);
		return null;
	}	//	getAdditionalText
"
org.compiere.model.MLoginMsg.getImplementation,MLoginMsg.java,"LoginMsgInterface getImplementation()
	{
		if (m_impl != null)
			return m_impl;
		String className = getClassname();
		if (Util.isEmpty(className))
			return null;
		try
		{
			Class<?> clazz = Class.forName(className);
			m_impl = (LoginMsgInterface)clazz.newInstance();
		}
		catch (Exception e)
		{
			log.warning(className + "": "" + e.getMessage());
			return null;
		}
		return m_impl;
	}	//	getImplementation
"
org.compiere.model.MLoginMsg.toString,MLoginMsg.java,"String toString()
    {
	    StringBuffer sb = new StringBuffer(""MLoginMsg["")
	    	.append(get_ID()).append(""-"").append(getName());
	    sb.append(""]"");
	    return sb.toString();
    }	//	toString
"
org.compiere.model.MRegistrationAttribute.getAll,MRegistrationAttribute.java,"MRegistrationAttribute[] getAll (Ctx ctx)
	{
		//	Store/Refresh Cache and add to List
		ArrayList<MRegistrationAttribute> list = new ArrayList<MRegistrationAttribute>();
		String sql = ""SELECT * FROM A_RegistrationAttribute ""
			+ ""WHERE AD_Client_ID=? ""
			+ ""ORDER BY SeqNo"";
		int AD_Client_ID = ctx.getAD_Client_ID();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, AD_Client_ID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				MRegistrationAttribute value = new MRegistrationAttribute(ctx, rs, null);
				Integer key = Integer.valueOf(value.getA_RegistrationAttribute_ID());
				s_cache.put(key, value);
				list.add(value);
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		MRegistrationAttribute[] retValue = new MRegistrationAttribute[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getAll
"
org.compiere.model.MRegistrationAttribute.get,MRegistrationAttribute.java,"MRegistrationAttribute get (Ctx ctx, int A_RegistrationAttribute_ID, Trx trx)
	{
		Integer key = Integer.valueOf(A_RegistrationAttribute_ID);
		MRegistrationAttribute retValue = s_cache.get(ctx, key);
		if (retValue == null)
		{
			retValue = new MRegistrationAttribute (ctx, A_RegistrationAttribute_ID, trx);
			s_cache.put(key, retValue);
		}
		return retValue;
	}	//	getAll
"
org.compiere.model.MSerNoCtl.createSerNo,MSerNoCtl.java,"String createSerNo ()
	{
		StringBuffer name = new StringBuffer();
		if (getPrefix() != null)
			name.append(getPrefix());
		int no = getCurrentNext();
		name.append(no);
		if (getSuffix() != null)
			name.append(getSuffix());
		//
		no += getIncrementNo();
		setCurrentNext(no);
		save();
		return name.toString();
	}	//	createSerNo
"
org.compiere.model.MLandedCost.getLandedCosts,MLandedCost.java,"MLandedCost[] getLandedCosts (MInvoiceLine il)
	{
		ArrayList<MLandedCost> list = new ArrayList<MLandedCost> ();
		String sql = ""SELECT * FROM C_LandedCost WHERE C_InvoiceLine_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, il.get_Trx());
			pstmt.setInt (1, il.getC_InvoiceLine_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				list.add (new MLandedCost (il.getCtx(), rs, il.get_Trx()));
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		MLandedCost[] retValue = new MLandedCost[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	// getLandedCosts
"
org.compiere.model.MLandedCost.beforeSave,MLandedCost.java,"boolean beforeSave (boolean newRecord)
	{
		//	One Reference
		if (getM_Product_ID() == 0 
			&& getM_InOut_ID() == 0 
			&& getM_InOutLine_ID() == 0)
		{
			log.saveError(""Error"", Msg.parseTranslation(getCtx(), 
				""@NotFound@ @M_Product_ID@ | @M_InOut_ID@ | @M_InOutLine_ID@""));
			return false;
		}
		//	No Product if Line entered
		if (getM_InOutLine_ID() != 0 && getM_Product_ID() != 0)
			setM_Product_ID(0);
				
		return true;
	}	//	beforeSave
"
org.compiere.model.MLandedCost.allocateCosts,MLandedCost.java,"String allocateCosts()
	{
		MInvoiceLine il = new MInvoiceLine (getCtx(), getC_InvoiceLine_ID(), get_Trx());
		return il.allocateLandedCosts();
	}	//	allocateCosts
"
org.compiere.model.MLandedCost.toString,MLandedCost.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MLandedCost["");
		sb.append (get_ID ())
			.append ("",CostDistribution="").append (getLandedCostDistribution())
			.append("",M_CostElement_ID="").append(getM_CostElement_ID());
		if (getM_InOut_ID() != 0)
			sb.append ("",M_InOut_ID="").append (getM_InOut_ID());
		if (getM_InOutLine_ID() != 0)
			sb.append ("",M_InOutLine_ID="").append (getM_InOutLine_ID());
		if (getM_Product_ID() != 0)
			sb.append ("",M_Product_ID="").append (getM_Product_ID());
		sb.append (""]"");
		return sb.toString ();
	} //	toString
"
org.compiere.model.MPackage.create,MPackage.java,"MPackage create (MInOut shipment, MShipper shipper, Timestamp shipDate)
	{
		MPackage retValue = new MPackage (shipment, shipper);
		if (shipDate != null)
			retValue.setShipDate(shipDate);
		retValue.save();
		//	Lines
		MInOutLine[] lines = shipment.getLines(false);
		for (MInOutLine sLine : lines) {
			MPackageLine pLine = new MPackageLine (retValue);
			pLine.setInOutLine(sLine);
			pLine.save();
		}	//	lines
		return retValue;
	}	//	create
"
org.compiere.model.MComponentReg.get,MComponentReg.java,"MComponentReg get (Ctx ctx, int AD_ComponentReg_ID)
	{
		Integer key = Integer.valueOf (AD_ComponentReg_ID);
		MComponentReg retValue = s_cacheID.get(ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MComponentReg (ctx, AD_ComponentReg_ID, null);
		if (retValue.get_ID () != 0)
			s_cacheID.put(key, retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MComponentReg.get,MComponentReg.java,"MComponentReg get(Ctx ctx, String entityType)
	{
		return get(ctx, entityType, false);
	}  // get()
"
org.compiere.model.MComponentReg.get,MComponentReg.java,"MComponentReg get(Ctx ctx, String entityType, boolean reload)
	{
		if (entityType == null || entityType.length() == 0)
			return null;
		
		MComponentReg retValue = null;
		if (!reload)
		{
			retValue = s_cacheET.get(ctx, entityType);
			if (retValue != null)
				return retValue;
		}
		
		PreparedStatement pstmt = null;
		String sql = ""SELECT * FROM AD_ComponentReg WHERE ComponentName=?"";
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setString(1, entityType);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				retValue = new MComponentReg(ctx, rs, null);
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

		if (retValue != null)
			s_cacheET.put(entityType, retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MComponentReg.isTrial,MComponentReg.java,"boolean isTrial()
	{
		return getTrialPhaseDays() > 0;
	}	//	isTrial
"
org.compiere.model.MComponentReg.toString,MComponentReg.java,"String toString()
	{
		StringBuffer sb = new StringBuffer(""MComponentReg["")
			.append (get_ID()).append (""-"").append (toStringX()).append (""]"");
		return sb.toString();
	}	//	toString
"
org.compiere.model.MComponentReg.toStringX,MComponentReg.java,"String toStringX()
	{
		StringBuffer sb = new StringBuffer("":"")
			.append (getComponentName()).append ("": "").append (getName());
		if (!Util.isEmpty(getVersion()))
			sb.append("" - "").append(getVersion());
		if (isApproved())
			sb.append(""; Approved"");
		else
			sb.append(""; Approval Pending"");
		//
		if (getTrialPhaseDays() > 0)
			sb.append(""; TrialPhaseDays="").append(getTrialPhaseDays());
		String type = MRefList.getListName(getCtx(), COMPONENTTYPE_AD_Reference_ID, getComponentType());
		if (type != null)
			sb.append(""; Type="").append(type);
		type = MRefList.getListName(getCtx(), DISTRIBUTIONTYPE_AD_Reference_ID, getDistributionType());
		if (type != null)
			sb.append(""; Distribution="").append(type);
		return sb.toString();
	}	//	toStringX
"
org.compiere.model.MTax.getAll,MTax.java,"MTax[] getAll (Ctx ctx)
	{
		int AD_Client_ID = ctx.getAD_Client_ID();
		Integer key = Integer.valueOf (AD_Client_ID);
		MTax[] retValue = s_cacheAll.get(ctx, key);
		if (retValue != null)
			return retValue;
		
		//	Create it
		String sql = ""SELECT * FROM C_Tax WHERE AD_Client_ID=?""
			+ "" ORDER BY C_Country_ID, C_Region_ID, To_Country_ID, To_Region_ID"";
		ArrayList<MTax> list = new ArrayList<MTax>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, AD_Client_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MTax tax = new MTax(ctx, rs, null);
				s_cache.put (Integer.valueOf(tax.getC_Tax_ID()), tax);
				list.add (tax);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		} 
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		} 
		catch (Exception e)
		{
			pstmt = null;
		}
		
		//	Create Array
		retValue = new MTax[list.size ()];
		list.toArray (retValue);
		//
		s_cacheAll.put(key, retValue);
		return retValue;
	}	//	getAll
"
org.compiere.model.MTax.get,MTax.java,"MTax get (Ctx ctx, int C_Tax_ID)
	{
		Integer key = Integer.valueOf (C_Tax_ID);
		MTax retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MTax (ctx, C_Tax_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MTax.getChildTaxes,MTax.java,"MTax[] getChildTaxes (boolean requery)
	{
		if (!isSummary())
			return null;
		if (m_childTaxes != null && !requery)
			return m_childTaxes;
		//
		String sql = ""SELECT * FROM C_Tax WHERE Parent_Tax_ID=?"";
		ArrayList<MTax> list = new ArrayList<MTax>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getC_Tax_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add(new MTax(getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		m_childTaxes = new MTax[list.size ()];
		list.toArray (m_childTaxes);
		return m_childTaxes;
	}	//	getChildTaxes
"
org.compiere.model.MTax.getPostals,MTax.java,"MTaxPostal[] getPostals (boolean requery)
	{
		if (m_postals != null && !requery)
			return m_postals;
	
		String sql = ""SELECT * FROM C_TaxPostal WHERE C_Tax_ID=? ORDER BY Postal, Postal_To"";
		ArrayList<MTaxPostal> list = new ArrayList<MTaxPostal>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getC_Tax_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		} catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		} catch (Exception e)
		{
			pstmt = null;
		}
		
		m_postals = new MTaxPostal[list.size ()];
		list.toArray (m_postals);
		return m_postals;
	}	//	getPostals
"
org.compiere.model.MTax.isPostal,MTax.java,"boolean isPostal()
	{
		return getPostals(false).length > 0;
	}	//	isPostal
"
org.compiere.model.MTax.isZeroTax,MTax.java,"boolean isZeroTax()
	{
		return Env.ZERO.compareTo(getRate()) == 0;
	}	//	isZeroTax
"
org.compiere.model.MTax.toString,MTax.java,"String toString()
	{
		StringBuffer sb = new StringBuffer(""MTax["");
		sb.append(get_ID()).append("","").append(getName())
			.append("", SO/PO="").append(getSOPOType())
			.append("",Rate="").append(getRate())
			.append("",C_TaxCategory_ID="").append(getC_TaxCategory_ID())
			.append("",Summary="").append(isSummary())
			.append("",Parent="").append(getParent_Tax_ID())
			.append("",Country="").append(getC_Country_ID()).append(""|"").append(getTo_Country_ID())
			.append("",Region="").append(getC_Region_ID()).append(""|"").append(getTo_Region_ID())
			.append("",From="").append(getValidFrom())
			.append(""]"");
		return sb.toString();
	}	//	toString
"
org.compiere.model.MTax.calculateTax,MTax.java,"BigDecimal calculateTax (BigDecimal amount, boolean taxIncluded, int scale)
	{
		//	Null Tax
		if (isZeroTax())
			return Env.ZERO;
		
		BigDecimal multiplier = getRate().divide(ONEHUNDRED, 12, BigDecimal.ROUND_HALF_UP);		

		BigDecimal tax = null;		
		if (!taxIncluded)	//	$100 * 6 / 100 == $6 == $100 * 0.06
		{
			tax = amount.multiply (multiplier);
		}
		else			//	$106 - ($106 / (100+6)/100) == $6 == $106 - ($106/1.06)
		{
			multiplier = multiplier.add(Env.ONE);
			BigDecimal base = amount.divide(multiplier, 12, BigDecimal.ROUND_HALF_UP); 
			tax = amount.subtract(base);
		}
		BigDecimal finalTax = tax.setScale(scale, BigDecimal.ROUND_HALF_UP);
		log.fine(""calculateTax "" + amount 
			+ "" (incl="" + taxIncluded + "",mult="" + multiplier + "",scale="" + scale 
			+ "") = "" + finalTax + "" ["" + tax + ""]"");
		return finalTax;
	}	//	calculateTax
"
org.compiere.model.MTax.afterSave,MTax.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (newRecord & success)
			success = insert_Accounting(""C_Tax_Acct"", ""C_AcctSchema_Default"", null);

		return success;
	}	//	afterSave
"
org.compiere.model.MTax.beforeDelete,MTax.java,"boolean beforeDelete ()
	{
		return delete_Accounting(""C_Tax_Acct""); 
	}	//	beforeDelete
"
org.compiere.model.CalloutCashJournal.invoice,CalloutCashJournal.java,"String invoice (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		if (isCalloutActive())		//	assuming it is resetting value
			return """";
		setCalloutActive(true);

		Integer C_Invoice_ID = (Integer)value;
		if (C_Invoice_ID == null || C_Invoice_ID.intValue() == 0)
		{
			mTab.setValue(""C_Currency_ID"", null);
			setCalloutActive(false);
			return """";
		}

		//  Date
		Timestamp ts = new Timestamp(ctx.getContextAsTime(WindowNo, ""DateAcct""));     //  from C_Cash
		String sql = ""SELECT C_BPartner_ID, C_Currency_ID,""		//	1..2
			+ ""invoiceOpen(C_Invoice_ID, 0), IsSOTrx, ""			//	3..4
			+ ""paymentTermDiscount(invoiceOpen(C_Invoice_ID, 0),C_Currency_ID,C_PaymentTerm_ID,DateInvoiced,?) ""
			+ ""FROM C_Invoice WHERE C_Invoice_ID=?"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setTimestamp(1, ts);
			pstmt.setInt(2, C_Invoice_ID.intValue());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				mTab.setValue(""C_Currency_ID"", Integer.valueOf(rs.getInt(2)));
				BigDecimal PayAmt = rs.getBigDecimal(3);
				BigDecimal DiscountAmt = rs.getBigDecimal(5);
				boolean isSOTrx = ""Y"".equals(rs.getString(4));
				if (!isSOTrx)
				{
					PayAmt = PayAmt.negate();
					DiscountAmt = DiscountAmt.negate();
				}
				//
				mTab.setValue(""Amount"", PayAmt.subtract(DiscountAmt));
				mTab.setValue(""DiscountAmt"", DiscountAmt);
				mTab.setValue(""WriteOffAmt"", Env.ZERO);
				ctx.setContext( WindowNo, ""InvTotalAmt"", PayAmt.toString());
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, ""invoice"", e);
			setCalloutActive(false);
			return e.getLocalizedMessage();
		}
		setCalloutActive(false);
		return """";
	}	//	CashJournal_Invoice
"
org.compiere.model.CalloutCashJournal.amounts,CalloutCashJournal.java,"String amounts (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		//  Needs to be Invoice
		if (isCalloutActive() || !""I"".equals(mTab.getValue(""CashType"")))
			return """";
		//  Check, if InvTotalAmt exists
		String total = ctx.getContext( WindowNo, ""InvTotalAmt"");
		if (total == null || total.length() == 0)
			return """";
		BigDecimal InvTotalAmt = new BigDecimal(total);
		setCalloutActive(true);

		BigDecimal PayAmt = (BigDecimal)mTab.getValue(""Amount"");
		BigDecimal DiscountAmt = (BigDecimal)mTab.getValue(""DiscountAmt"");
		BigDecimal WriteOffAmt = (BigDecimal)mTab.getValue(""WriteOffAmt"");
		String colName = mField.getColumnName();
		log.fine(colName + "" - Invoice="" + InvTotalAmt
			+ "" - Amount="" + PayAmt + "", Discount="" + DiscountAmt + "", WriteOff="" + WriteOffAmt);

		//  Amount - calculate write off
		if (colName.equals(""Amount""))
		{
			WriteOffAmt = InvTotalAmt.subtract(PayAmt).subtract(DiscountAmt);
			mTab.setValue(""WriteOffAmt"", WriteOffAmt);
		}
		else    //  calculate PayAmt
		{
			PayAmt = InvTotalAmt.subtract(DiscountAmt).subtract(WriteOffAmt);
			mTab.setValue(""Amount"", PayAmt);
		}

		setCalloutActive(false);
		return """";
	}	//	amounts
"
org.compiere.model.MRfQLine.get,MRfQLine.java,"MRfQLine get (Ctx ctx, int C_RfQLine_ID)
	{
		Integer key = Integer.valueOf (C_RfQLine_ID);
		MRfQLine retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MRfQLine (ctx, C_RfQLine_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	} //	get
"
org.compiere.model.MRfQLine.getQtys,MRfQLine.java,"MRfQLineQty[] getQtys ()
	{
		return getQtys (false);
	}	//	getQtys
"
org.compiere.model.MRfQLine.getQtys,MRfQLine.java,"MRfQLineQty[] getQtys (boolean requery)
	{
		if (m_qtys != null && !requery)
			return m_qtys;
		ArrayList<MRfQLineQty> list = new ArrayList<MRfQLineQty>();
		String sql = ""SELECT * FROM C_RfQLineQty ""
			+ ""WHERE C_RfQLine_ID=? AND IsActive='Y' ""
			+ ""ORDER BY Qty"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getC_RfQLine_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MRfQLineQty (getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//	Create Default (1)
		if (list.size() == 0)
		{
			MRfQLineQty qty = new MRfQLineQty(this);
			qty.save();
			list.add(qty);
		}
		
		m_qtys = new MRfQLineQty[list.size ()];
		list.toArray (m_qtys);
		return m_qtys;
	}	//	getQtys
"
org.compiere.model.MRfQLine.getProductDetailHTML,MRfQLine.java,"String getProductDetailHTML()
	{
		if (getM_Product_ID() == 0)
			return """";
		StringBuffer sb = new StringBuffer();
		MProduct product = MProduct.get (getCtx(), getM_Product_ID());
		sb.append(product.getName());
		if (product.getDescription() != null && product.getDescription().length() > 0)
			sb.append(""<br><i>"").append(product.getDescription()).append(""</i>"");
		return sb.toString();
	}	//	getProductDetails
"
org.compiere.model.MRfQLine.toString,MRfQLine.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MRfQLine["");
		sb.append(get_ID()).append("","").append(getLine())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MRfQLine.beforeSave,MRfQLine.java,"boolean beforeSave (boolean newRecord)
	{
		//	Calculate Complete Date (also used to verify)
		if (getDateWorkStart() != null && getDeliveryDays() != 0)
			setDateWorkComplete (TimeUtil.addDays(getDateWorkStart(), getDeliveryDays()));
		//	Calculate Delivery Days
		else if (getDateWorkStart() != null && getDeliveryDays() == 0 && getDateWorkComplete() != null)
			setDeliveryDays (TimeUtil.getDaysBetween(getDateWorkStart(), getDateWorkComplete()));
		//	Calculate Start Date
		else if (getDateWorkStart() == null && getDeliveryDays() != 0 && getDateWorkComplete() != null)
			setDateWorkStart (TimeUtil.addDays(getDateWorkComplete(), getDeliveryDays() * -1));

		return true;
	}	//	beforeSave
"
org.compiere.model.MRequestAction.addNullColumn,MRequestAction.java,"void addNullColumn (String columnName)
	{
		String nc = getNullColumns();
		if (nc == null)
			setNullColumns(columnName);
		else
			setNullColumns(nc + "";"" + columnName);
	}	//	addNullColumn
"
org.compiere.model.MRequestAction.getCreatedByName,MRequestAction.java,"String getCreatedByName()
	{
		MUser user = MUser.get(getCtx(), getCreatedBy());
		return user.getName();
	}	//	getCreatedByName
"
org.compiere.model.MRequestAction.getChangesHTML,MRequestAction.java,"String getChangesHTML()
	{
		StringBuffer sb = new StringBuffer();
		getChangeHTML(sb, ""Priority"");
		getChangeHTML(sb, ""PriorityUser"");
		getChangeHTML(sb, ""R_Category_ID"");
		getChangeHTML(sb, ""R_Group_ID"");
		getChangeHTML(sb, ""R_RequestType_ID"");
		getChangeHTML(sb, ""R_Resolution_ID"");
		getChangeHTML(sb, ""R_Status_ID"");
		getChangeHTML(sb, ""SalesRep_ID"");
		getChangeHTML(sb, ""Summary"");
		//
	//	getChangeHTML(sb, ""AD_Org_ID"");		//	always stored
		getChangeHTML(sb, ""AD_Role_ID"");
		getChangeHTML(sb, ""AD_User_ID"");
		getChangeHTML(sb, ""C_Activity_ID"");
		getChangeHTML(sb, ""C_BPartner_ID"");
		getChangeHTML(sb, ""C_Invoice_ID"");
		getChangeHTML(sb, ""C_Order_ID"");
		getChangeHTML(sb, ""C_Payment_ID"");
		getChangeHTML(sb, ""C_Project_ID"");
		getChangeHTML(sb, ""DateNextAction"");
		getChangeHTML(sb, ""IsEscalated"");
		getChangeHTML(sb, ""IsInvoiced"");
		getChangeHTML(sb, ""IsSelfService"");
		getChangeHTML(sb, ""M_InOut_ID"");
		getChangeHTML(sb, ""M_Product_ID"");
		getChangeHTML(sb, ""M_RMA_ID"");
		getChangeHTML(sb, ""A_Asset_ID"");
		
		if (sb.length() == 0)
			sb.append(""./."");
		//	Unicode check
		char[] chars = sb.toString().toCharArray();
		sb = new StringBuffer(chars.length);
		for (char c : chars) {
			if (c > 255)
				sb.append(""&#"").append(c).append("";"");
			else
				sb.append(c);
		}
		return sb.toString();
	}	//	getChangesHTML
"
org.compiere.model.MRequestAction.getChangeHTML,MRequestAction.java,"void getChangeHTML (StringBuffer sb, String columnName)
	{
		if (get_Value(columnName) != null)
		{
			if (sb.length() > 0)
				sb.append(""<br>"");
			sb.append(Msg.getElement(getCtx(), columnName))
				.append("": "").append(get_DisplayValue(columnName, true));
		}
		else
		{
			String nc = getNullColumns();
			if (nc != null && nc.indexOf(columnName) != -1)
			{
				if (sb.length() > 0)
					sb.append(""<br>"");
				sb.append(""("")
					.append(Msg.getElement(getCtx(), columnName))
					.append("")"");
			}
		}
	}	//	getChangeHTML
"
org.compiere.model.MRequestAction.beforeSave,MRequestAction.java,"boolean beforeSave (boolean newRecord)
	{
		return true;
	}	//	beforeSave
"
org.compiere.model.MPackageLine.setInOutLine,MPackageLine.java,"void setInOutLine (MInOutLine line)
	{
		setM_InOutLine_ID (line.getM_InOutLine_ID());
		setQty (line.getMovementQty());
	}	//	setInOutLine
"
org.compiere.model.MJournal.setClientOrg,MJournal.java,"void setClientOrg (int AD_Client_ID, int AD_Org_ID)
	{
		super.setClientOrg(AD_Client_ID, AD_Org_ID);
	}	//	setClientOrg
"
org.compiere.model.MJournal.getPeriod,MJournal.java,"MPeriod getPeriod()
	{
		int C_Period_ID = getC_Period_ID();
		if (C_Period_ID != 0)
			return MPeriod.get(getCtx(), C_Period_ID);
		return null;	
	}	//	getPeriod
"
org.compiere.model.MJournal.setDateDoc,MJournal.java,"void setDateDoc (String oldDateDoc, 
			String newDateDoc, int windowNo) throws Exception
	{
		if (newDateDoc == null || newDateDoc.length() == 0)
			return;
		Timestamp dateDoc = PO.convertToTimestamp(newDateDoc);
		if (dateDoc == null)
			return;
		setDateDoc(dateDoc);
		setDateAcct(dateDoc);
	}	//	setDateDoc
"
org.compiere.model.MJournal.setDateAcct,MJournal.java,"void setDateAcct (String oldDateAcct, 
			String newDateAcct, int windowNo) throws Exception
	{
		if (newDateAcct == null || newDateAcct.length() == 0)
			return;
		Timestamp dateAcct = PO.convertToTimestamp(newDateAcct);
		if (dateAcct == null)
			return;
		setDateAcct(dateAcct);
	}	//	setDateAcct
"
org.compiere.model.MJournal.setC_Period_ID,MJournal.java,"void setC_Period_ID (String oldC_Period_ID, 
			String newC_Period_ID, int windowNo) throws Exception
	{
		if (newC_Period_ID == null || newC_Period_ID.length() == 0)
			return;
		int C_Period_ID = Integer.parseInt(newC_Period_ID);
		if (C_Period_ID == 0)
			return;
		setC_Period_ID(C_Period_ID);
	}	//	setC_Period_ID
"
org.compiere.model.MJournal.setDateAcct,MJournal.java,"void setDateAcct (Timestamp DateAcct)
	{
		super.setDateAcct(DateAcct);
		int C_Period_ID = MPeriod.getC_Period_ID(getCtx(), getAD_Org_ID(), DateAcct);
		if (C_Period_ID == 0)
			log.warning(""Period not found"");
		else
		{
			super.setC_Period_ID(C_Period_ID);
			setRate();
		}
	}	//	setDateAcct
"
org.compiere.model.MJournal.setC_Period_ID,MJournal.java,"void setC_Period_ID(int C_Period_ID)
	{
		super.setC_Period_ID(C_Period_ID);
		if (C_Period_ID == 0)
			return;
		Timestamp dateAcct = getDateAcct();
		//
		MPeriod period = getPeriod();
		if (period != null)
		{
			if (period.isStandardPeriod()
				&& !period.isInPeriod(dateAcct))
					super.setDateAcct(period.getEndDate());
		}
	}	//	setC_Period_ID
"
org.compiere.model.MJournal.setCurrency,MJournal.java,"void setCurrency (int C_Currency_ID, int C_ConversionType_ID, BigDecimal CurrencyRate)
	{
		if (C_Currency_ID != 0)
			setC_Currency_ID(C_Currency_ID);
		if (C_ConversionType_ID != 0)
			setC_ConversionType_ID(C_ConversionType_ID);
		if (CurrencyRate != null && CurrencyRate.compareTo(Env.ZERO) == 0)
			setCurrencyRate(CurrencyRate);
	}	//	setCurrency
"
org.compiere.model.MJournal.setC_ConversionType_ID,MJournal.java,"void setC_ConversionType_ID (String oldC_ConversionType_ID, 
			String newC_ConversionType_ID, int windowNo) throws Exception
	{
		if (newC_ConversionType_ID == null || newC_ConversionType_ID.length() == 0)
			return;
		int C_ConversionType_ID = Integer.parseInt(newC_ConversionType_ID);
		if (C_ConversionType_ID == 0)
			return;
		setC_ConversionType_ID(C_ConversionType_ID);
		setRate();
	}	//	setC_ConversionType_ID
"
org.compiere.model.MJournal.setC_Currency_ID,MJournal.java,"void setC_Currency_ID (String oldC_Currency_ID, 
			String newC_Currency_ID, int windowNo) throws Exception
	{
		if (newC_Currency_ID == null || newC_Currency_ID.length() == 0)
			return;
		int C_Currency_ID = Integer.parseInt(newC_Currency_ID);
		if (C_Currency_ID == 0)
			return;
		setC_Currency_ID(C_Currency_ID);
		setRate();
	}	//	setC_Currency_ID
"
org.compiere.model.MJournal.setRate,MJournal.java,"void setRate()
	{
		//  Source info
		int C_Currency_ID = getC_Currency_ID();
		int C_ConversionType_ID = getC_ConversionType_ID();
		if (C_Currency_ID == 0 || C_ConversionType_ID == 0)
			return;
		Timestamp DateAcct = getDateAcct();
		if (DateAcct == null)
			DateAcct = new Timestamp(System.currentTimeMillis());
		//
		int C_AcctSchema_ID = getC_AcctSchema_ID();
		MAcctSchema as = MAcctSchema.get (getCtx(), C_AcctSchema_ID);
		int AD_Client_ID = getAD_Client_ID();
		int AD_Org_ID = getAD_Org_ID();

		BigDecimal CurrencyRate = MConversionRate.getRate(C_Currency_ID, as.getC_Currency_ID(), 
			DateAcct, C_ConversionType_ID, AD_Client_ID, AD_Org_ID);
		log.fine(""rate = "" + CurrencyRate);
		if (CurrencyRate == null)
			CurrencyRate = Env.ZERO;
		setCurrencyRate(CurrencyRate);
	}	//	setRate
"
org.compiere.model.MJournal.getLines,MJournal.java,"MJournalLine[] getLines (boolean requery)
	{
		ArrayList<MJournalLine> list = new ArrayList<MJournalLine>();
		String sql = ""SELECT * FROM GL_JournalLine WHERE GL_Journal_ID=? ORDER BY Line"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getGL_Journal_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MJournalLine (getCtx(), rs, get_Trx()));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			log.log(Level.SEVERE, ""getLines"", ex); 
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;
		//
		MJournalLine[] retValue = new MJournalLine[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getLines
"
org.compiere.model.MJournal.copyLinesFrom,MJournal.java,"int copyLinesFrom (MJournal fromJournal, Timestamp dateAcct, char typeCR)
	{
		if (isProcessed() || fromJournal == null)
			return 0;
		int count = 0;
		MJournalLine[] fromLines = fromJournal.getLines(false);
		for (MJournalLine element : fromLines) {
			MJournalLine toLine = new MJournalLine (getCtx(), 0, fromJournal.get_Trx());
			PO.copyValues(element, toLine, getAD_Client_ID(), getAD_Org_ID());
			toLine.setGL_Journal_ID(getGL_Journal_ID());
			//
			if (dateAcct != null)
				toLine.setDateAcct(dateAcct);
			//	Amounts
			if (typeCR == 'C')			//	correct
			{
				toLine.setAmtSourceDr(element.getAmtSourceDr().negate());
				toLine.setAmtSourceCr(element.getAmtSourceCr().negate());
			}
			else if (typeCR == 'R')		//	reverse
			{
				toLine.setAmtSourceDr(element.getAmtSourceCr());
				toLine.setAmtSourceCr(element.getAmtSourceDr());
			}
			toLine.setIsGenerated(true);
			toLine.setProcessed(false);
			if (toLine.save())
				count++;
		}
		if (fromLines.length != count)
			log.log(Level.SEVERE, ""Line difference - JournalLines="" + fromLines.length + "" <> Saved="" + count);

		return count;
	}	//	copyLinesFrom
"
org.compiere.model.MJournal.setProcessed,MJournal.java,"void setProcessed (boolean processed)
	{
		super.setProcessed (processed);
		if (get_ID() == 0)
			return;
		String sql = ""UPDATE GL_JournalLine SET Processed='""
			+ (processed ? ""Y"" : ""N"")
			+ ""' WHERE GL_Journal_ID="" + getGL_Journal_ID();
		int noLine = DB.executeUpdate(sql, get_Trx());
		log.fine(processed + "" - Lines="" + noLine);
	}	//	setProcessed
"
org.compiere.model.MJournal.beforeSave,MJournal.java,"boolean beforeSave (boolean newRecord)
	{
		//	Imported Journals may not have date
		if (getDateDoc() == null)
		{
			if (getDateAcct() == null)
				setDateDoc(new Timestamp(System.currentTimeMillis()));
			else
				setDateDoc(getDateAcct());
		}
		if (getDateAcct() == null)
			setDateAcct(getDateDoc());
		return true;
	}	//	beforeSave
"
org.compiere.model.MJournal.afterSave,MJournal.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!success)
			return success;
		if (getGL_JournalBatch_ID() != 0)
			return updateBatch();
		
		return success;
		
	}	//	afterSave
"
org.compiere.model.MJournal.afterDelete,MJournal.java,"boolean afterDelete (boolean success)
	{
		if (!success)
			return success;
		
		if (getGL_JournalBatch_ID() != 0)
			return updateBatch();
		
		return success;
	}	//	afterDelete
"
org.compiere.model.MJournal.updateBatch,MJournal.java,"boolean updateBatch()
	{
		String sql = ""UPDATE GL_JournalBatch jb""
			+ "" SET (TotalDr, TotalCr) = (SELECT COALESCE(SUM(TotalDr),0), COALESCE(SUM(TotalCr),0)"" //jz hard coded "", ""
				+ "" FROM GL_Journal j WHERE j.IsActive='Y' AND jb.GL_JournalBatch_ID=j.GL_JournalBatch_ID) ""
			+ ""WHERE GL_JournalBatch_ID="" + getGL_JournalBatch_ID();
		int no = DB.executeUpdate(sql, get_Trx());
		if (no != 1)
			log.warning(""afterSave - Update Batch #"" + no);
		return no == 1;
	}	//	updateBatch
"
org.compiere.model.MJournal.processIt,MJournal.java,"boolean processIt (String processAction)
	{
		m_processMsg = null;
		DocumentEngine engine = new DocumentEngine (this, getDocStatus());
		return engine.processIt (processAction, getDocAction());
	}	//	process
"
org.compiere.model.MJournal.unlockIt,MJournal.java,"boolean unlockIt()
	{
		log.info(toString());
		setProcessing(false);
		return true;
	}	//	unlockIt
"
org.compiere.model.MJournal.invalidateIt,MJournal.java,"boolean invalidateIt()
	{
		log.info(toString());
		return true;
	}	//	invalidateIt
"
org.compiere.model.MJournal.prepareIt,MJournal.java,"String prepareIt()
	{
		log.info(toString());
		m_processMsg = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_BEFORE_PREPARE);
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;
		MDocType dt = MDocType.get(getCtx(), getC_DocType_ID());

		//	Lines
		MJournalLine[] lines = getLines(true);
		if (lines.length == 0)
		{
			m_processMsg = ""@NoLines@"";
			return DocActionConstants.STATUS_Invalid;
		}
		//	Get Period
		MPeriod period = new MPeriod(getCtx(), getC_Period_ID(), null);
		if (period.isStandardPeriod())
			period = MPeriod.getOfOrg(getCtx(), getAD_Org_ID(), getDateAcct());
		if (period == null)
		{
			if (m_processMsg != null)
				return DocActionConstants.STATUS_Invalid;
			log.warning(""No Period for "" + getDateAcct());
			m_processMsg = ""@PeriodNotFound@"";
			return DocActionConstants.STATUS_Invalid;
		}
		//	Standard Period
		if (period.getC_Period_ID() != getC_Period_ID()
			&& period.isStandardPeriod())
		{
			m_processMsg = ""@PeriodNotValid@"";
			return DocActionConstants.STATUS_Invalid;
		}
		m_processMsg = period.isOpen(dt.getDocBaseType(), getDateAcct());
		if (m_processMsg != null)
		{
			log.warning(m_processMsg + "": "" + period.getName());
			return DocActionConstants.STATUS_Invalid;
		}

		//	Add up Amounts
		BigDecimal AmtSourceDr = Env.ZERO;
		BigDecimal AmtSourceCr = Env.ZERO;
		for (MJournalLine line : lines) {
			if (!isActive())
				continue;
			if (!IsAccountValid(line))
			{
				return DocActionConstants.STATUS_Invalid;
			}
			//
			if (isManual() && line.isDocControlled())
			{
				m_processMsg = ""@DocControlledError@ - @Line@="" + line.getLine()
					+ "" - "" + line.getAccountElementValue();
				return DocActionConstants.STATUS_Invalid;
			}
			//
			AmtSourceDr = AmtSourceDr.add(line.getAmtSourceDr());
			AmtSourceCr = AmtSourceCr.add(line.getAmtSourceCr());
		}
		setTotalDr(AmtSourceDr);
		setTotalCr(AmtSourceCr);

		//	Control Amount
		if (Env.ZERO.compareTo(getControlAmt()) != 0
			&& getControlAmt().compareTo(getTotalDr()) != 0)
		{
			m_processMsg = ""@ControlAmtError@"";
			return DocActionConstants.STATUS_Invalid;
		}
		
		//	Unbalanced Jornal & Not Suspense
		if (AmtSourceDr.compareTo(AmtSourceCr) != 0)
		{
			MAcctSchemaGL gl = MAcctSchemaGL.get(getCtx(), getC_AcctSchema_ID());
			if (gl == null || !gl.isUseSuspenseBalancing())
			{
				m_processMsg = ""@UnbalancedJornal@"";
				return DocActionConstants.STATUS_Invalid;
			}
		}
		
		if (!DOCACTION_Complete.equals(getDocAction())) 
			setDocAction(DOCACTION_Complete);
		m_justPrepared = true;
		return DocActionConstants.STATUS_InProgress;
	}	//	prepareIt
"
org.compiere.model.MJournal.approveIt,MJournal.java,"boolean  approveIt()
	{
		log.info(toString());
		setIsApproved(true);
		return true;
	}	//	approveIt
"
org.compiere.model.MJournal.rejectIt,MJournal.java,"boolean rejectIt()
	{
		log.info(toString());
		setIsApproved(false);
		return true;
	}	//	rejectIt
"
org.compiere.model.MJournal.completeIt,MJournal.java,"String completeIt()
	{
		//	Re-Check
		if (!m_justPrepared)
		{
			String status = prepareIt();
			if (!DocActionConstants.STATUS_InProgress.equals(status))
				return status;
		}
		//	Implicit Approval
		if (!isApproved())
			approveIt();
		log.info(toString());
		//	User Validation
		String valid = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_AFTER_COMPLETE);
		if (valid != null)
		{
			m_processMsg = valid;
			return DocActionConstants.STATUS_Invalid;
		}
		//
		setProcessed(true);
		setDocAction(DOCACTION_Close);
		return DocActionConstants.STATUS_Completed;
	}	//	completeIt
"
org.compiere.model.MJournal.voidIt,MJournal.java,"boolean voidIt()
	{
		log.info(toString());
		if (DOCSTATUS_Drafted.equals(getDocStatus()) 
			|| DOCSTATUS_Invalid.equals(getDocStatus()))
		{
			setProcessed(true);
			setDocAction(DOCACTION_None);
			return true;
		}
		return false;
	}	//	voidIt
"
org.compiere.model.MJournal.closeIt,MJournal.java,"boolean closeIt()
	{
		log.info(toString());
		if (DOCSTATUS_Completed.equals(getDocStatus())) 
		{
			setProcessed(true);
			setDocAction(DOCACTION_None);
			return true;
		}
		return false;
	}	//	closeIt
"
org.compiere.model.MJournal.reverseCorrectIt,MJournal.java,"boolean reverseCorrectIt()
	{
		return reverseCorrectIt(getGL_JournalBatch_ID()) != null;
	}	//	reverseCorrectIt
"
org.compiere.model.MJournal.reverseCorrectIt,MJournal.java,"MJournal reverseCorrectIt (int GL_JournalBatch_ID)
	{
		log.info(toString());
		//	Journal
		MJournal reverse = new MJournal (this);
		reverse.setGL_JournalBatch_ID(GL_JournalBatch_ID);
		reverse.setDateDoc(getDateDoc());
		reverse.setC_Period_ID(getC_Period_ID());
		reverse.setDateAcct(getDateAcct());
		//	Reverse indicator
		String description = reverse.getDescription();
		if (description == null)
			description = ""** "" + getDocumentNo() + "" **"";
		else
			description += "" ** "" + getDocumentNo() + "" **"";
		reverse.setDescription(description);
		
		MDocType dt = MDocType.get(getCtx(), getC_DocType_ID());
		//	Lines
		MJournalLine[] lines = getLines(true);
		if (lines.length == 0)
		{
			// Should not reach here
			m_processMsg = ""@NoLines@"";
			return null;
		}
		m_processMsg = MPeriod.isOpen(reverse, lines, reverse.getDateAcct(), dt.getDocBaseType());
		if (m_processMsg != null)
			log.warning(m_processMsg);
		//	Get Period
		MPeriod period = new MPeriod(getCtx(), reverse.getC_Period_ID(), null);
		if (period.isStandardPeriod())
			period = MPeriod.getOfOrg(getCtx(), getAD_Org_ID(), reverse.getDateAcct());
		if (period == null)
		{
			if (m_processMsg != null)
				return null;
			log.warning(""No Period for "" + reverse.getDateAcct());
			m_processMsg = ""@PeriodNotFound@"";
			return null;
		}
		//	Standard Period
		if (period.getC_Period_ID() != reverse.getC_Period_ID()
			&& period.isStandardPeriod())
		{
			m_processMsg = ""@PeriodNotValid@"";
			return null;
		}
		m_processMsg = period.isOpen(dt.getDocBaseType(), reverse.getDateAcct());
		if (m_processMsg != null)
		{
			log.warning(m_processMsg + "" "" + period.getName());
			return null;
		}
		
		if (!reverse.save(get_Trx()))
			return null;
		
		//	Lines
		reverse.copyLinesFrom(this, null, 'C');
		
		if (!reverse.processIt(DocActionConstants.ACTION_Complete))
		{
			m_processMsg = ""Reversal ERROR: "" + reverse.getProcessMsg();
			return null;
		}
		reverse.closeIt();
		reverse.setProcessing (false);
		reverse.setDocStatus(DOCSTATUS_Reversed);
		reverse.setDocAction(DOCACTION_None);
		reverse.save(get_Trx());
		//
		setProcessed(true);
		setDocAction(DOCACTION_None);
		return reverse;
	}	//	reverseCorrectionIt
"
org.compiere.model.MJournal.reverseAccrualIt,MJournal.java,"boolean reverseAccrualIt()
	{
		return reverseAccrualIt (getGL_JournalBatch_ID()) != null;
	}	//	reverseAccrualIt
"
org.compiere.model.MJournal.reverseAccrualIt,MJournal.java,"MJournal reverseAccrualIt (int GL_JournalBatch_ID)
	{
		log.info(toString());
		//	Journal
		MJournal reverse = new MJournal (this);
		reverse.setGL_JournalBatch_ID(GL_JournalBatch_ID);
		reverse.setDateDoc(new Timestamp(System.currentTimeMillis()));
		reverse.set_ValueNoCheck (""C_Period_ID"", null);		//	reset
		reverse.setDateAcct(reverse.getDateDoc());
		//	Reverse indicator
		String description = reverse.getDescription();
		if (description == null)
			description = ""** "" + getDocumentNo() + "" **"";
		else
			description += "" ** "" + getDocumentNo() + "" **"";
		reverse.setDescription(description);
		
		
		MDocType dt = MDocType.get(getCtx(), getC_DocType_ID());
		//	Lines - okay to use original lines since we are only referring to org
		MJournalLine[] lines = getLines(true);
		if (lines.length == 0)
		{
			// Should not reach here
			m_processMsg = ""@NoLines@"";
			return null;
		}
		//	
		m_processMsg = MPeriod.isOpen(reverse, lines, reverse.getDateAcct(), dt.getDocBaseType());
		if (m_processMsg != null)
			log.warning(m_processMsg);
		//	Get Period
		MPeriod period = new MPeriod(getCtx(), reverse.getC_Period_ID(), null);
		if (period.isStandardPeriod())
			period = MPeriod.getOfOrg(getCtx(), getAD_Org_ID(), reverse.getDateAcct());
		if (period == null)
		{
			if (m_processMsg != null)
				return null;
			log.warning(""No Period for "" + reverse.getDateAcct());
			m_processMsg = ""@PeriodNotFound@"";
			return null;
		}
		//	Standard Period
		if (period.getC_Period_ID() != reverse.getC_Period_ID()
			&& period.isStandardPeriod())
		{
			m_processMsg = ""@PeriodNotValid@"";
			return null;
		}
		m_processMsg = period.isOpen(dt.getDocBaseType(), reverse.getDateAcct());
		if (m_processMsg != null)
		{
			log.warning(m_processMsg + "" "" + period.getName());
			return null;
		}
		
		if (!reverse.save(get_Trx()))
			return null;
		
		//	Lines
		reverse.copyLinesFrom(this, reverse.getDateAcct(), 'R');

		if (!reverse.processIt(DocActionConstants.ACTION_Complete))
		{
			m_processMsg = ""Reversal ERROR: "" + reverse.getProcessMsg();
			return null;
		}
		reverse.closeIt();
		reverse.setProcessing (false);
		reverse.setDocStatus(DOCSTATUS_Reversed);
		reverse.setDocAction(DOCACTION_None);
		reverse.save(get_Trx());
		//
		setProcessed(true);
		setDocAction(DOCACTION_None);
		return reverse;
	}	//	reverseAccrualIt
"
org.compiere.model.MJournal.reActivateIt,MJournal.java,"boolean reActivateIt()
	{
		log.info(toString());
		return false;
	}	//	reActivateIt
"
org.compiere.model.MJournal.getSummary,MJournal.java,"String getSummary()
	{
		StringBuffer sb = new StringBuffer();
		sb.append(getDocumentNo());
		//	: Total Lines = 123.00 (#1)
		sb.append("": "")
			.append(Msg.translate(getCtx(),""TotalDr"")).append(""="").append(getTotalDr())
			.append("" "")
			.append(Msg.translate(getCtx(),""TotalCR"")).append(""="").append(getTotalCr())
			.append("" (#"").append(getLines(false).length).append("")"");
		//	 - Description
		if (getDescription() != null && getDescription().length() > 0)
			sb.append("" - "").append(getDescription());
		return sb.toString();
	}	//	getSummary
"
org.compiere.model.MJournal.toString,MJournal.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MJournal["");
		sb.append(get_ID()).append("","").append(getDescription())
			.append("",DR="").append(getTotalDr())
			.append("",CR="").append(getTotalCr())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MJournal.getDocumentInfo,MJournal.java,"String getDocumentInfo()
	{
		MDocType dt = MDocType.get(getCtx(), getC_DocType_ID());
		return dt.getName() + "" "" + getDocumentNo();
	}	//	getDocumentInfo
"
org.compiere.model.MJournal.createPDF,MJournal.java,"File createPDF ()
	{
		try
		{
			File temp = File.createTempFile(get_TableName()+get_ID()+""_"", "".pdf"");
			return createPDF (temp);
		}
		catch (Exception e)
		{
			log.severe(""Could not create PDF - "" + e.getMessage());
		}
		return null;
	}	//	getPDF
"
org.compiere.model.MJournal.createPDF,MJournal.java,"File createPDF (File file)
	{
	//	ReportEngine re = ReportEngine.get (getCtx(), ReportEngine.INVOICE, getC_Invoice_ID());
	//	if (re == null)
			return null;
	//	return re.getPDF(file);
	}	//	createPDF
"
org.compiere.model.MJournal.getProcessMsg,MJournal.java,"String getProcessMsg()
	{
		return m_processMsg;
	}	//	getProcessMsg
"
org.compiere.model.MJournal.getDoc_User_ID,MJournal.java,"int getDoc_User_ID()
	{
		return getCreatedBy();
	}	//	getDoc_User_ID
"
org.compiere.model.MJournal.getApprovalAmt,MJournal.java,"BigDecimal getApprovalAmt()
	{
		return getTotalDr();
	}	//	getApprovalAmt
"
org.compiere.model.MJournal.IsAccountValid,MJournal.java,"boolean IsAccountValid (MJournalLine line)
	{
		boolean retVal = true;
		MAccount acct = MAccount.get(getCtx(), line.getC_ValidCombination_ID());
		if (acct.getAD_Org_ID() != 0)
		{
			MOrg org = MOrg.get(getCtx(), acct.getAD_Org_ID());	
			if (!org.isActive())
			{
				m_processMsg = ""Element Value "" + org.getName()+ "" is not Active for account "" + acct.getCombination() ;
				retVal = false;
				return retVal;
			}
		}
		if (acct.getAccount_ID() != 0)
		{
			MElementValue ev = new MElementValue(getCtx(), acct.getAccount_ID(), get_Trx());
			if (!ev.isActive())
			{
				m_processMsg = ""Element Value "" + ev.getName()+ "" is not Active for account "" + acct.getCombination() ;
				retVal = false;
				return retVal;
			}

		}
		if (acct.getC_SubAcct_ID() != 0)
		{
			X_C_SubAcct sa = new X_C_SubAcct(getCtx(), acct.getC_SubAcct_ID(), get_Trx());
			if (!sa.isActive())
			{
				m_processMsg = ""Element Value "" + sa.getName()+ "" is not Active for account "" + acct.getCombination() ;
				retVal = false;
				return retVal;
			}

		}
		if (acct.getM_Product_ID() != 0)
		{
			X_M_Product product = new X_M_Product (getCtx(), acct.getM_Product_ID(), get_Trx());
			if (!product.isActive())
			{
				m_processMsg = ""Element Value "" + product.getName()+ "" is not Active for account "" + acct.getCombination() ;
				retVal = false;
				return retVal;
			}

		}
		if (acct.getC_BPartner_ID() != 0)
		{
			X_C_BPartner partner = new X_C_BPartner (getCtx(), acct.getC_BPartner_ID(),get_Trx());
			if (!partner.isActive())
			{
				m_processMsg = ""Element Value "" + partner.getName()+ "" is not Active for account "" + acct.getCombination() ;
				retVal = false;
				return retVal;
			}

		}
		if (acct.getAD_OrgTrx_ID() != 0)
		{
			MOrg org = MOrg.get(getCtx(), acct.getAD_Org_ID());
			if (!org.isActive())
			{
				m_processMsg = ""Element Value "" + org.getName()+ "" is not Active for account "" + acct.getCombination() ;
				retVal = false;
				return retVal;
			}

		}
		if (acct.getC_LocFrom_ID() != 0)
		{
			MLocation loc = new MLocation(getCtx(), acct.getC_LocFrom_ID(), get_Trx());	//	in Trx!
			if (!loc.isActive())
			{
				m_processMsg = ""Element Value Location From is not Active for account "" + acct.getCombination() ;
				retVal = false;
				return retVal;
			}

		}
		if (acct.getC_LocTo_ID() != 0)
		{
			MLocation loc = new MLocation(getCtx(), acct.getC_LocFrom_ID(), get_Trx());	//	in Trx!
			if (!loc.isActive())
			{
				m_processMsg = ""Element Value Location to is not Active for account "" + acct.getCombination() ;
				retVal = false;
				return retVal;
			}

		}
		if (acct.getC_SalesRegion_ID() != 0)
		{
			MSalesRegion loc = new MSalesRegion(getCtx(), acct.getC_SalesRegion_ID(), get_Trx());
			if (!loc.isActive())
			{
				m_processMsg = ""Element Value Sales Region is not Active for account "" + acct.getCombination() ;
				retVal = false;
				return retVal;
			}

		}
		if (acct.getC_Project_ID() != 0)
		{
			X_C_Project project = new X_C_Project (getCtx(), acct.getC_Project_ID(), get_Trx());
			if (!project.isActive())
			{
				m_processMsg = ""Element Value "" + project.getName()+ "" is not Active for account "" + acct.getCombination() ;
				retVal = false;
				return retVal;
			}
		}
		if (acct.getC_Campaign_ID() != 0)
		{
			X_C_Campaign campaign = new X_C_Campaign (getCtx(), acct.getC_Campaign_ID(), get_Trx());
			if (!campaign.isActive())
			{
				m_processMsg = ""Element Value "" + campaign.getName()+ "" is not Active for account "" + acct.getCombination() ;
				retVal = false;
				return retVal;
			}
		}
		if (acct.getC_Activity_ID() != 0)
		{
			X_C_Activity act = new X_C_Activity (getCtx(), acct.getC_Activity_ID(), get_Trx());
			if (!act.isActive())
			{
				m_processMsg = ""Element Value "" + act.getName()+ "" is not Active for account "" + acct.getCombination() ;
				retVal = false;
				return retVal;
			}
		}
		if (acct.getUser1_ID() != 0)
		{
			MElementValue ev = new MElementValue(getCtx(), acct.getUser1_ID(), get_Trx());
			if (!ev.isActive())
			{
				m_processMsg = ""Element Value "" + ev.getName()+ "" is not Active for account "" + acct.getCombination() ;
				retVal = false;
				return retVal;
			}
		}
		if (acct.getUser2_ID() != 0)
		{
			MElementValue ev = new MElementValue(getCtx(), acct.getUser2_ID(), get_Trx());
			if (!ev.isActive())
			{
				m_processMsg = ""Element Value "" + ev.getName()+ "" is not Active for account "" + acct.getCombination() ;
				retVal = false;
				return retVal;
			}
		}

		return retVal;
	}
"
org.compiere.model.MCashLine.addDescription,MCashLine.java,"void addDescription (String description)
	{
		String desc = getDescription();
		if (desc == null)
			setDescription(description);
		else
			setDescription(desc + "" | "" + description);
	}	//	addDescription
"
org.compiere.model.MCashLine.setInvoice,MCashLine.java,"void setInvoice (MInvoice invoice)
	{
		setC_Invoice_ID(invoice.getC_Invoice_ID());
		setAD_Org_ID(invoice.getAD_Org_ID());
		setCashType (CASHTYPE_Invoice);
		setC_Currency_ID(invoice.getC_Currency_ID());
		//	Amount
		MDocType dt = MDocType.get(getCtx(), invoice.getC_DocType_ID());
		BigDecimal amt = invoice.getGrandTotal();
		if (MDocBaseType.DOCBASETYPE_APInvoice.equals(dt.getDocBaseType())
			|| MDocBaseType.DOCBASETYPE_ARCreditMemo.equals(dt.getDocBaseType()) )
			amt = amt.negate();
		setAmount (amt);
		//
		setDiscountAmt(Env.ZERO);
		setWriteOffAmt(Env.ZERO);
		setIsGenerated(true);
		m_invoice = invoice;
	}	//	setInvoiceLine
"
org.compiere.model.MCashLine.setC_Invoice_ID,MCashLine.java,"void setC_Invoice_ID (String oldC_Invoice_ID, 
			String newC_Invoice_ID, int windowNo) throws Exception
	{
		if (newC_Invoice_ID == null || newC_Invoice_ID.length() == 0)
			return;
		int C_Invoice_ID = Integer.parseInt(newC_Invoice_ID);
		if (C_Invoice_ID == 0)
			return;

		//  Date
		Timestamp ts = new Timestamp(getCtx().getContextAsTime(windowNo, ""DateAcct""));     //  from C_Cash
		String sql = ""SELECT C_BPartner_ID, C_Currency_ID,""		//	1..2
			+ ""invoiceOpen(C_Invoice_ID, 0), IsSOTrx, ""			//	3..4
			+ ""paymentTermDiscount(invoiceOpen(C_Invoice_ID, 0),C_Currency_ID,C_PaymentTerm_ID,DateInvoiced,?) ""
			+ ""FROM C_Invoice WHERE C_Invoice_ID=?"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setTimestamp(1, ts);
			pstmt.setInt(2, C_Invoice_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				setC_Currency_ID(rs.getInt(2));
				BigDecimal PayAmt = rs.getBigDecimal(3);
				BigDecimal DiscountAmt = rs.getBigDecimal(5);
				boolean isSOTrx = ""Y"".equals(rs.getString(4));
				if (!isSOTrx)
				{
					PayAmt = PayAmt.negate();
					DiscountAmt = DiscountAmt.negate();
				}
				//
				setAmount(PayAmt.subtract(DiscountAmt));
				setDiscountAmt(DiscountAmt);
				setWriteOffAmt(Env.ZERO);
				p_changeVO.setContext(getCtx(), windowNo, ""InvTotalAmt"", PayAmt);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
	}	//	setC_Invoice_ID
"
org.compiere.model.MCashLine.setOrder,MCashLine.java,"void setOrder (MOrder order, Trx trx)
	{
		setCashType (CASHTYPE_Invoice);
		setC_Currency_ID(order.getC_Currency_ID());
		//	Amount
		BigDecimal amt = order.getGrandTotal();
		setAmount (amt);
		setDiscountAmt(Env.ZERO);
		setWriteOffAmt(Env.ZERO);
		setIsGenerated(true);
		//
		if (X_C_Order.DOCSTATUS_WaitingPayment.equals(order.getDocStatus()))
		{
			save(trx);
			order.setC_CashLine_ID(getC_CashLine_ID());
			order.processIt(DocActionConstants.ACTION_WaitComplete);
			order.save(trx);
			//	Set Invoice
			MInvoice[] invoices = order.getInvoices(true);
			int length = invoices.length;
			if (length > 0)		//	get last invoice
			{
				m_invoice = invoices[length-1];
				setC_Invoice_ID (m_invoice.getC_Invoice_ID());
			}
		}
	}	//	setOrder
"
org.compiere.model.MCashLine.setAmount,MCashLine.java,"void setAmount (String oldAmount, 
			String newAmount, int windowNo) throws Exception
	{
		if (newAmount == null || newAmount.length() == 0)
			return;
		BigDecimal Amount = new BigDecimal(newAmount);
		super.setAmount(Amount);
		setAmt(windowNo, ""Amount"");
	}	//	setAmount
"
org.compiere.model.MCashLine.setWriteOffAmt,MCashLine.java,"void setWriteOffAmt (String oldWriteOffAmt, 
			String newWriteOffAmt, int windowNo) throws Exception
	{
		if (newWriteOffAmt == null || newWriteOffAmt.length() == 0)
			return;
		BigDecimal WriteOffAmt = new BigDecimal(newWriteOffAmt);
		super.setWriteOffAmt(WriteOffAmt);
		setAmt(windowNo, ""WriteOffAmt"");
	}	//	setWriteOffAmt
"
org.compiere.model.MCashLine.setDiscountAmt,MCashLine.java,"void setDiscountAmt (String oldDiscountAmt, 
			String newDiscountAmt, int windowNo) throws Exception
	{
		if (newDiscountAmt == null || newDiscountAmt.length() == 0)
			return;
		BigDecimal DiscountAmt = new BigDecimal(newDiscountAmt);
		super.setDiscountAmt(DiscountAmt);
		setAmt(windowNo, ""DiscountAmt"");
	}	//	setDiscountAmt
"
org.compiere.model.MCashLine.setAmt,MCashLine.java,"void setAmt(int windowNo, String columnName)
	{
		//  Needs to be Invoice
		if (!CASHTYPE_Invoice.equals(getCashType()))
			return;
		//  Check, if InvTotalAmt exists
		String total = getCtx().getContext(windowNo, ""InvTotalAmt"");
		if (total == null || total.length() == 0)
			return;
		BigDecimal InvTotalAmt = new BigDecimal(total);

		BigDecimal PayAmt = getAmount();
		BigDecimal DiscountAmt = getDiscountAmt();
		BigDecimal WriteOffAmt = getWriteOffAmt();
		log.fine(columnName + "" - Invoice="" + InvTotalAmt
			+ "" - Amount="" + PayAmt + "", Discount="" + DiscountAmt + "", WriteOff="" + WriteOffAmt);

		//  Amount - calculate write off
		if (columnName.equals(""Amount""))
		{
			WriteOffAmt = InvTotalAmt.subtract(PayAmt).subtract(DiscountAmt);
			setWriteOffAmt(WriteOffAmt);
		}
		else    //  calculate PayAmt
		{
			PayAmt = InvTotalAmt.subtract(DiscountAmt).subtract(WriteOffAmt);
			setAmount(PayAmt);
		}
	}	//	setAmt
"
org.compiere.model.MCashLine.getStatementDate,MCashLine.java,"Timestamp getStatementDate()
	{
		return getParent().getStatementDate();
	}	//	getStatementDate
"
org.compiere.model.MCashLine.createReversal,MCashLine.java,"MCashLine createReversal()
	{
		MCash parent = getParent();
		if (parent.isProcessed())
		{	//	saved
			parent = MCash.get(getCtx(), parent.getAD_Org_ID(), 
				parent.getStatementDate(), parent.getC_Currency_ID(), get_Trx());
		}
		//
		MCashLine reversal = new MCashLine (parent);
		reversal.setClientOrg(this);
		reversal.setC_BankAccount_ID(getC_BankAccount_ID());
		reversal.setC_Charge_ID(getC_Charge_ID());
		reversal.setC_Currency_ID(getC_Currency_ID());
		reversal.setC_Invoice_ID(getC_Invoice_ID());
		reversal.setCashType(getCashType());
		reversal.setDescription(getDescription());
		reversal.setIsGenerated(true);
		//
		reversal.setAmount(getAmount().negate());
		if (getDiscountAmt() == null)
			setDiscountAmt(Env.ZERO);
		else
			reversal.setDiscountAmt(getDiscountAmt().negate());
		if (getWriteOffAmt() == null)
			setWriteOffAmt(Env.ZERO);
		else
			reversal.setWriteOffAmt(getWriteOffAmt().negate());
		reversal.addDescription(""("" + getLine() + "")"");
		return reversal;
	}	//	reverse
"
org.compiere.model.MCashLine.getParent,MCashLine.java,"MCash getParent()
	{
		if (m_parent == null)
			m_parent = new MCash (getCtx(), getC_Cash_ID(), get_Trx());
		return m_parent;
	}	//	getCash
"
org.compiere.model.MCashLine.getCashBook,MCashLine.java,"MCashBook getCashBook()
	{
		if (m_cashBook == null)
			m_cashBook = MCashBook.get(getCtx(), getParent().getC_CashBook_ID());
		return m_cashBook;
	}	//	getCashBook
"
org.compiere.model.MCashLine.getC_CashBook_ID,MCashLine.java,"int getC_CashBook_ID()
	{
		if (m_cashBook != null)
			return m_cashBook.getC_CashBook_ID();
		return getParent().getC_CashBook_ID();
	}	//	getC_CashBook_ID
"
org.compiere.model.MCashLine.getBankAccount,MCashLine.java,"MBankAccount getBankAccount()
	{
		if (m_bankAccount == null && getC_BankAccount_ID() != 0)
			m_bankAccount = MBankAccount.get(getCtx(), getC_BankAccount_ID());
		return m_bankAccount;
	}	//	getBankAccount
"
org.compiere.model.MCashLine.getInvoice,MCashLine.java,"MInvoice getInvoice()
	{
		if (m_invoice == null && getC_Invoice_ID() != 0)
			m_invoice = MInvoice.get(getCtx(), getC_Invoice_ID());
		return m_invoice;
	}	//	getInvoice
"
org.compiere.model.MCashLine.beforeDelete,MCashLine.java,"boolean beforeDelete ()
	{
		//	Cannot Delete generated Invoices
		Boolean generated = (Boolean)get_ValueOld(""IsGenerated"");
		if (generated != null && generated.booleanValue())
		{
			if (get_ValueOld(""C_Invoice_ID"") != null)
			{
				log.warning(""Cannot delete line with generated Invoice"");
				log.saveError(""Error"", ""Cannot delete line with generated Invoice"");
				return false;
			}
		}
		return true;
	}	//	beforeDelete
"
org.compiere.model.MCashLine.afterDelete,MCashLine.java,"boolean afterDelete (boolean success)
	{
		if (!success)
			return success;
		return updateHeader();
	}	//	afterDelete
"
org.compiere.model.MCashLine.beforeSave,MCashLine.java,"boolean beforeSave (boolean newRecord)
	{
		//	Cannot change generated Invoices
		if (is_ValueChanged(""C_Invoice_ID""))
		{
			Object generated = get_ValueOld(""IsGenerated"");
			if (generated != null && ((Boolean)generated).booleanValue())
			{
				log.warning(""Cannot change line with generated Invoice"");
				return false;
			}
		}
		
		//	Verify CashType
		if (CASHTYPE_Invoice.equals(getCashType()) && getC_Invoice_ID() == 0)
			setCashType(CASHTYPE_GeneralExpense);
		if (CASHTYPE_BankAccountTransfer.equals(getCashType()) && getC_BankAccount_ID() == 0)
			setCashType(CASHTYPE_GeneralExpense);
		if (CASHTYPE_Charge.equals(getCashType()) && getC_Charge_ID() == 0)
			setCashType(CASHTYPE_GeneralExpense);

		boolean verify = newRecord 
			|| is_ValueChanged(""CashType"")
			|| is_ValueChanged(""C_Invoice_ID"")
			|| is_ValueChanged(""C_BankAccount_ID"");
		if (verify)
		{
			//	Verify Currency
			if (CASHTYPE_BankAccountTransfer.equals(getCashType())) 
				setC_Currency_ID(getBankAccount().getC_Currency_ID());
			else if (CASHTYPE_Invoice.equals(getCashType()))
				setC_Currency_ID(getInvoice().getC_Currency_ID());
			else	//	Cash 
				setC_Currency_ID(getCashBook().getC_Currency_ID());
		
			//	Set Organization
			if (CASHTYPE_BankAccountTransfer.equals(getCashType()))
				setAD_Org_ID(getBankAccount().getAD_Org_ID());
			//	Cash Book
			else if (CASHTYPE_Invoice.equals(getCashType()))
				setAD_Org_ID(getCashBook().getAD_Org_ID());
			//	otherwise (charge) - leave it
			//	Enforce Org
			if (getAD_Org_ID() == 0)
				setAD_Org_ID(getParent().getAD_Org_ID());
		}

		/**	General fix of Currency 
		UPDATE C_CashLine cl SET C_Currency_ID = (SELECT C_Currency_ID FROM C_Invoice i WHERE i.C_Invoice_ID=cl.C_Invoice_ID) WHERE C_Currency_ID IS NULL AND C_Invoice_ID IS NOT NULL;
		UPDATE C_CashLine cl SET C_Currency_ID = (SELECT C_Currency_ID FROM C_BankAccount b WHERE b.C_BankAccount_ID=cl.C_BankAccount_ID) WHERE C_Currency_ID IS NULL AND C_BankAccount_ID IS NOT NULL;
		UPDATE C_CashLine cl SET C_Currency_ID = (SELECT b.C_Currency_ID FROM C_Cash c, C_CashBook b WHERE c.C_Cash_ID=cl.C_Cash_ID AND c.C_CashBook_ID=b.C_CashBook_ID) WHERE C_Currency_ID IS NULL;
		**/
		
		//	Get Line No
		if (getLine() == 0)
		{
			String sql = ""SELECT COALESCE(MAX(Line),0)+10 FROM C_CashLine WHERE C_Cash_ID=?"";
			int ii = DB.getSQLValue (get_Trx(), sql, getC_Cash_ID());
			setLine (ii);
		}
		
		return true;
	}	//	beforeSave
"
org.compiere.model.MCashLine.afterSave,MCashLine.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!success)
			return success;
		return updateHeader();
	}	//	afterSave
"
org.compiere.model.MCashLine.updateHeader,MCashLine.java,"boolean updateHeader()
	{
		/* jz re-write this SQL because SQL Server doesn't like it
		String sql = ""UPDATE C_Cash c""
			+ "" SET StatementDifference=""
				+ ""(SELECT COALESCE(SUM(currencyConvert(cl.Amount, cl.C_Currency_ID, cb.C_Currency_ID, c.DateAcct, "";
				//jz null  //TODO check if 0 is OK with application logic
				//+ DB.NULL(""S"", Types.INTEGER)   DB2 function wouldn't take null value for int parameter
		if (DB.isDB2())
			sql += ""0"";
		else
			sql += ""NULL"";
		sql += "", c.AD_Client_ID, c.AD_Org_ID)),0) ""
				+ ""FROM C_CashLine cl, C_CashBook cb ""
				+ ""WHERE cb.C_CashBook_ID=c.C_CashBook_ID""
				+ "" AND cl.C_Cash_ID=c.C_Cash_ID) ""
			+ ""WHERE C_Cash_ID="" + getC_Cash_ID();
		int no = DB.executeUpdate(sql, get_TrxName());
		if (no != 1)
			log.warning(""Difference #"" + no);
			*/
		String sql = ""SELECT COALESCE(SUM(currencyConvert(cl.Amount, cl.C_Currency_ID, cb.C_Currency_ID, c.DateAcct, 0"" 
					+ "", c.AD_Client_ID, c.AD_Org_ID)),0) ""
				+ ""FROM C_CashLine cl, C_CashBook cb, C_Cash c ""
				+ ""WHERE cb.C_CashBook_ID=c.C_CashBook_ID""
				+ "" AND cl.C_Cash_ID=c.C_Cash_ID AND ""
				+ ""c.C_Cash_ID="" + getC_Cash_ID();
		PreparedStatement pstmt = DB.prepareStatement (sql, get_Trx());
		BigDecimal sum = Env.ZERO;
		try
		{
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
			{
				sum = rs.getBigDecimal(1);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.severe(e.getMessage());
			return false;
		}
		//	Ending Balance
		sql = ""UPDATE C_Cash""
			+ "" SET EndingBalance = BeginningBalance + "" + sum + "", ""
			+ "" StatementDifference="" + sum
			+ "" WHERE C_Cash_ID="" + getC_Cash_ID();

		
		int no = DB.executeUpdate(sql, get_Trx());
		if (no != 1)
			log.warning(""Balance #"" + no);
		return no == 1;
	}	//	updateHeader
"
org.compiere.model.MCashLine.toString,MCashLine.java,"String toString()
    {
	    StringBuffer sb = new StringBuffer(""MCashLine["")
	    	.append(get_ID())
	        .append("",C_CashBook_ID="").append(getC_CashBook_ID())
	        .append("",Line="").append(getLine());
	    if (getDescription() != null)
	    	sb.append("",Description="").append(getDescription());
	    sb.append("",Amount="").append(getAmount());
	    sb.append(""]"");
	    return sb.toString();
    }	//	toString
"
org.compiere.model.MAttribute.getOfClient,MAttribute.java,"MAttribute[] getOfClient(Ctx ctx, 
		boolean onlyProductAttributes, boolean onlyListAttributes)
	{
		ArrayList<MAttribute> list = new ArrayList<MAttribute>();
		int AD_Client_ID = ctx.getAD_Client_ID();
		String sql = ""SELECT * FROM M_Attribute ""
			+ ""WHERE AD_Client_ID=? AND IsActive='Y'"";
		if (onlyProductAttributes)
			sql += "" AND IsInstanceAttribute='N'"";
		if (onlyListAttributes)
			sql += "" AND AttributeValueType='L'"";
		sql += "" ORDER BY Name"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, AD_Client_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MAttribute (ctx, rs, null));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		MAttribute[] retValue = new MAttribute[list.size ()];
		list.toArray (retValue);
		s_log.fine(""AD_Client_ID="" + AD_Client_ID + "" - #"" + retValue.length);
		return retValue;
	}	//	getOfClient
"
org.compiere.model.MAttribute.getMAttributeValues,MAttribute.java,"MAttributeValue[] getMAttributeValues()
	{
		if (m_values == null && ATTRIBUTEVALUETYPE_List.equals(getAttributeValueType()))
		{
			ArrayList<MAttributeValue> list = new ArrayList<MAttributeValue>();
			if (!isMandatory())
				list.add (null);
			//
			String sql = ""SELECT * FROM M_AttributeValue ""
				+ ""WHERE M_Attribute_ID=? ""
				+ ""ORDER BY Value"";
			PreparedStatement pstmt = null;
			try
			{
				pstmt = DB.prepareStatement(sql, (Trx) null);
				pstmt.setInt(1, getM_Attribute_ID());
				ResultSet rs = pstmt.executeQuery();
				while (rs.next())
					list.add(new MAttributeValue (getCtx(), rs, null));
				rs.close();
				pstmt.close();
				pstmt = null;
			}
			catch (SQLException ex)
			{
				log.log(Level.SEVERE, sql, ex);
			}
			try
			{
				if (pstmt != null)
					pstmt.close();
			}
			catch (SQLException ex1)
			{
			}
			pstmt = null;
			m_values = new MAttributeValue[list.size()];
			list.toArray(m_values);
		}
		return m_values;
	}	//	getValues
"
org.compiere.model.MAttribute.getMAttributeInstance,MAttribute.java,"MAttributeInstance getMAttributeInstance (int M_AttributeSetInstance_ID)
	{
		MAttributeInstance retValue = null;
		String sql = ""SELECT * ""
			+ ""FROM M_AttributeInstance ""
			+ ""WHERE M_Attribute_ID=? AND M_AttributeSetInstance_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getM_Attribute_ID());
			pstmt.setInt(2, M_AttributeSetInstance_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				retValue = new MAttributeInstance (getCtx(), rs, get_Trx());
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			log.log(Level.SEVERE, sql, ex);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;

		return retValue;
	}	//	getAttributeInstance
"
org.compiere.model.MAttribute.setMAttributeInstance,MAttribute.java,"void setMAttributeInstance (int M_AttributeSetInstance_ID, MAttributeValue value)
	{
		MAttributeInstance instance = getMAttributeInstance(M_AttributeSetInstance_ID);
		if (instance == null)
		{
			if (value != null)
				instance = new MAttributeInstance (getCtx (), getM_Attribute_ID (),
					M_AttributeSetInstance_ID, value.getM_AttributeValue_ID (),
					value.getName (), get_Trx()); 					//	Cached !!
			else
				instance = new MAttributeInstance (getCtx(), getM_Attribute_ID(),
					M_AttributeSetInstance_ID, 0, null, get_Trx());
		}
		else
		{
			if (value != null)
			{
				instance.setM_AttributeValue_ID (value.getM_AttributeValue_ID ());
				instance.setValue (value.getName()); 	//	Cached !!
			}
			else
			{
				instance.setM_AttributeValue_ID (0);
				instance.setValue (null);
			}
		}
		instance.save();
	}	//	setAttributeInstance
"
org.compiere.model.MAttribute.setMAttributeInstance,MAttribute.java,"void setMAttributeInstance (int M_AttributeSetInstance_ID, String value)
	{
		MAttributeInstance instance = getMAttributeInstance(M_AttributeSetInstance_ID);
		if (instance == null)
			instance = new MAttributeInstance (getCtx(), getM_Attribute_ID(), 
				M_AttributeSetInstance_ID, value, get_Trx());
		else
			instance.setValue(value);
		instance.save();
	}	//	setAttributeInstance
"
org.compiere.model.MAttribute.setMAttributeInstance,MAttribute.java,"void setMAttributeInstance (int M_AttributeSetInstance_ID, BigDecimal value)
	{
		MAttributeInstance instance = getMAttributeInstance(M_AttributeSetInstance_ID);
		if (instance == null)
			instance = new MAttributeInstance (getCtx(), getM_Attribute_ID(), 
				M_AttributeSetInstance_ID, value, get_Trx());
		else
			instance.setValueNumber(value);
		instance.save();
	}	//	setAttributeInstance
"
org.compiere.model.MAttribute.toString,MAttribute.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MAttribute["");
		sb.append (get_ID()).append (""-"").append (getName())
			.append("",Type="").append(getAttributeValueType())
			.append("",Instance="").append(isInstanceAttribute())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MAttribute.afterSave,MAttribute.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		//	Changed to Instance Attribute
		if (!newRecord && is_ValueChanged(""IsInstanceAttribute"") && isInstanceAttribute())
		{
			String sql = ""UPDATE M_AttributeSet mas ""
				+ ""SET IsInstanceAttribute='Y' ""
				+ ""WHERE IsInstanceAttribute='N'""
				+ "" AND EXISTS (SELECT * FROM M_AttributeUse mau ""
					+ ""WHERE mas.M_AttributeSet_ID=mau.M_AttributeSet_ID""
					+ "" AND mau.M_Attribute_ID="" + getM_Attribute_ID() + "")"";
			int no = DB.executeUpdate(sql, get_Trx());
			log.fine(""AttributeSet Instance set #"" + no);
		}
		return success;
	}	//	afterSave
"
org.compiere.model.MChangeRequest.getRequests,MChangeRequest.java,"MRequest[] getRequests()
	{
		return null;
	}	//	getRequests
"
org.compiere.model.MChangeRequest.beforeSave,MChangeRequest.java,"boolean beforeSave (boolean newRecord)
	{
		//	Have at least one
		if (getM_BOM_ID() == 0 && getM_ChangeNotice_ID() == 0)
		{
			log.saveError(""Error"", Msg.parseTranslation(getCtx(), ""@NotFound@: @M_BOM_ID@ / @M_ChangeNotice_ID@""));
			return false;
		}
		
		//	Derive ChangeNotice from BOM if defined
		if (newRecord && getM_BOM_ID() != 0 && getM_ChangeNotice_ID() == 0)
		{
			MBOM bom = new MBOM (getCtx(), getM_BOM_ID(), get_Trx());
			if (bom.getM_ChangeNotice_ID() != 0)
				setM_BOM_ID(bom.getM_ChangeNotice_ID());
		}
		
		return true;
	}	//	beforeSave
"
org.compiere.model.MTaxPriority.get,Tax.java,"int get (Ctx ctx, int M_Product_ID, int C_Charge_ID,
		Timestamp billDate, Timestamp shipDate,
		int AD_Org_ID, int M_Warehouse_ID,
		int billC_BPartner_Location_ID, int shipC_BPartner_Location_ID,
		boolean IsSOTrx)
	{
		if (M_Product_ID != 0)
			return getProduct (ctx, M_Product_ID, billDate, shipDate, AD_Org_ID, M_Warehouse_ID,
				billC_BPartner_Location_ID, shipC_BPartner_Location_ID, IsSOTrx);
		else if (C_Charge_ID != 0)
			return getCharge (ctx, C_Charge_ID, billDate, shipDate, AD_Org_ID, M_Warehouse_ID,
				billC_BPartner_Location_ID, shipC_BPartner_Location_ID, IsSOTrx);
		else
			return getExemptTax (ctx, AD_Org_ID);
	}	//	get
"
org.compiere.model.MTaxPriority.getCharge,Tax.java,"int getCharge (Ctx ctx, int C_Charge_ID,
		Timestamp billDate, Timestamp shipDate,
		int AD_Org_ID, int M_Warehouse_ID,
		int billC_BPartner_Location_ID, int shipC_BPartner_Location_ID,
		boolean IsSOTrx)
	{
		if (M_Warehouse_ID == 0)
			M_Warehouse_ID = ctx.getContextAsInt( ""M_Warehouse_ID"");
		if (M_Warehouse_ID == 0)
		{
			log.warning(""No Warehouse - C_Charge_ID="" + C_Charge_ID);
			return 0;
		}
		int C_TaxCategory_ID = 0;
		int shipFromC_Location_ID = 0;
		int shipToC_Location_ID = 0;
		int billFromC_Location_ID = 0;
		int billToC_Location_ID = 0;
		String IsTaxExempt = null;

		//	Get all at once
		String sql = ""SELECT c.C_TaxCategory_ID, o.C_Location_ID, il.C_Location_ID, b.IsTaxExempt,""
			 + "" w.C_Location_ID, sl.C_Location_ID ""
			 + ""FROM C_Charge c, AD_OrgInfo o,""
			 + "" C_BPartner_Location il INNER JOIN C_BPartner b ON (il.C_BPartner_ID=b.C_BPartner_ID),""
			 + "" M_Warehouse w, C_BPartner_Location sl ""
			 + ""WHERE c.C_Charge_ID=?""
			 + "" AND o.AD_Org_ID=?""
			 + "" AND il.C_BPartner_Location_ID=?""
			 + "" AND w.M_Warehouse_ID=?""
			 + "" AND sl.C_BPartner_Location_ID=?"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, C_Charge_ID);
			pstmt.setInt (2, AD_Org_ID);
			pstmt.setInt (3, billC_BPartner_Location_ID);
			pstmt.setInt (4, M_Warehouse_ID);
			pstmt.setInt (5, shipC_BPartner_Location_ID);
			ResultSet rs = pstmt.executeQuery ();
			boolean found = false;
			if (rs.next ())
			{
				C_TaxCategory_ID = rs.getInt (1);
				billFromC_Location_ID = rs.getInt (2);
				billToC_Location_ID = rs.getInt (3);
				IsTaxExempt = rs.getString (4);
				shipFromC_Location_ID = rs.getInt (5);
				shipToC_Location_ID = rs.getInt (6);
				found = true;
			}
			rs.close ();
			pstmt.close ();
			//
			if (!found)
			{
				log.warning(""Not found for C_Charge_ID="" + C_Charge_ID 
					+ "", AD_Org_ID="" + AD_Org_ID + "", M_Warehouse_ID="" + M_Warehouse_ID
					+ "", C_BPartner_Location_ID="" + billC_BPartner_Location_ID 
					+ ""/"" + shipC_BPartner_Location_ID);
				return 0;
			}
			else if (""Y"".equals (IsTaxExempt))
				return getExemptTax (ctx, AD_Org_ID);
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
			return 0;
		}

		//	Reverese for PO
		if (!IsSOTrx)
		{
			int temp = billFromC_Location_ID;
			billFromC_Location_ID = billToC_Location_ID;
			billToC_Location_ID = temp;
			temp = shipFromC_Location_ID;
			shipFromC_Location_ID = shipToC_Location_ID;
			shipToC_Location_ID = temp;
		}
		//
		log.fine(""C_TaxCategory_ID="" + C_TaxCategory_ID
		  + "", billFromC_Location_ID="" + billFromC_Location_ID
		  + "", billToC_Location_ID="" + billToC_Location_ID
		  + "", shipFromC_Location_ID="" + shipFromC_Location_ID
		  + "", shipToC_Location_ID="" + shipToC_Location_ID);
		return get (ctx, C_TaxCategory_ID, IsSOTrx,
		  shipDate, shipFromC_Location_ID, shipToC_Location_ID,
		  billDate, billFromC_Location_ID, billToC_Location_ID);
	}	//	getCharge
"
org.compiere.model.MTaxPriority.getProduct,Tax.java,"int getProduct (Ctx ctx, int M_Product_ID,
		Timestamp billDate, Timestamp shipDate,
		int AD_Org_ID, int M_Warehouse_ID,
		int billC_BPartner_Location_ID, int shipC_BPartner_Location_ID,
		boolean IsSOTrx)
	{
		String variable = """";
		int C_TaxCategory_ID = 0;
		int shipFromC_Location_ID = 0;
		int shipToC_Location_ID = 0;
		int billFromC_Location_ID = 0;
		int billToC_Location_ID = 0;
		String IsTaxExempt = null;

		try
		{
			//	Get all at once
			String sql = ""SELECT p.C_TaxCategory_ID, o.C_Location_ID, il.C_Location_ID, b.IsTaxExempt,""
				+ "" w.C_Location_ID, sl.C_Location_ID ""
				+ ""FROM M_Product p, AD_OrgInfo o,""
				+ "" C_BPartner_Location il INNER JOIN C_BPartner b ON (il.C_BPartner_ID=b.C_BPartner_ID),""
				+ "" M_Warehouse w, C_BPartner_Location sl ""
				+ ""WHERE p.M_Product_ID=?""
				+ "" AND o.AD_Org_ID=?""
				+ "" AND il.C_BPartner_Location_ID=?""
				+ "" AND w.M_Warehouse_ID=?""
				+ "" AND sl.C_BPartner_Location_ID=?"";
			PreparedStatement  pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, M_Product_ID);
			pstmt.setInt(2, AD_Org_ID);
			pstmt.setInt(3, billC_BPartner_Location_ID);
			pstmt.setInt(4, M_Warehouse_ID);
			pstmt.setInt(5, shipC_BPartner_Location_ID);
			ResultSet rs = pstmt.executeQuery();
			boolean found = false;
			if (rs.next())
			{
				C_TaxCategory_ID = rs.getInt(1);
				billFromC_Location_ID = rs.getInt(2);
				billToC_Location_ID = rs.getInt(3);
				IsTaxExempt = rs.getString(4);
				shipFromC_Location_ID = rs.getInt(5);
				shipToC_Location_ID = rs.getInt(6);
				found = true;
			}
			rs.close();
			pstmt.close();
			//
			if (found && ""Y"".equals(IsTaxExempt))
			{
				log.fine(""Business Partner is Tax exempt"");
				return getExemptTax(ctx, AD_Org_ID);
			}
			else if (found)
			{
				if (!IsSOTrx)
				{
					int temp = billFromC_Location_ID;
					billFromC_Location_ID = billToC_Location_ID;
					billToC_Location_ID = temp;
					temp = shipFromC_Location_ID;
					shipFromC_Location_ID = shipToC_Location_ID;
					shipToC_Location_ID = temp;
				}
				log.fine(""C_TaxCategory_ID="" + C_TaxCategory_ID
					+ "", billFromC_Location_ID="" + billFromC_Location_ID
					+ "", billToC_Location_ID="" + billToC_Location_ID
					+ "", shipFromC_Location_ID="" + shipFromC_Location_ID
					+ "", shipToC_Location_ID="" + shipToC_Location_ID);
				return get(ctx, C_TaxCategory_ID, IsSOTrx,
					shipDate, shipFromC_Location_ID, shipToC_Location_ID,
					billDate, billFromC_Location_ID, billToC_Location_ID);
			}

			// ----------------------------------------------------------------

			//	Detail for error isolation

		//	M_Product_ID				->	C_TaxCategory_ID
			sql = ""SELECT C_TaxCategory_ID FROM M_Product ""
				+ ""WHERE M_Product_ID=?"";
			variable = ""M_Product_ID"";
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, M_Product_ID);
			rs = pstmt.executeQuery();
			found = false;
			if (rs.next())
			{
				C_TaxCategory_ID = rs.getInt(1);
				found = true;
			}
			rs.close();
			pstmt.close();
			if (C_TaxCategory_ID == 0)
			{
				log.saveError(""TaxCriteriaNotFound"", Msg.translate(ctx, variable)
					+ (found ? """" : "" (Product="" + M_Product_ID + "" not found)""));
				return 0;
			}
			log.fine(""C_TaxCategory_ID="" + C_TaxCategory_ID);

		//	AD_Org_ID					->	billFromC_Location_ID
			sql = ""SELECT C_Location_ID FROM AD_OrgInfo ""
				+ ""WHERE AD_Org_ID=?"";
			variable = ""AD_Org_ID"";
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, AD_Org_ID);
			rs = pstmt.executeQuery();
			found = false;
			if (rs.next())
			{
				billFromC_Location_ID = rs.getInt (1);
				found = true;
			}
			rs.close();
			pstmt.close();
			if (billFromC_Location_ID == 0)
			{
				log.saveError(""TaxCriteriaNotFound"", Msg.translate(Env.getAD_Language(ctx), variable)
				  + (found ? """" : "" (Info/Org="" + AD_Org_ID + "" not found)""));
				return 0;
			}

		//	billC_BPartner_Location_ID  ->	billToC_Location_ID
			sql = ""SELECT l.C_Location_ID, b.IsTaxExempt ""
				+ ""FROM C_BPartner_Location l INNER JOIN C_BPartner b ON (l.C_BPartner_ID=b.C_BPartner_ID) ""
				+ ""WHERE C_BPartner_Location_ID=?"";
			variable = ""BillTo_ID"";
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, billC_BPartner_Location_ID);
			rs = pstmt.executeQuery();
			found = false;
			if (rs.next())
			{
				billToC_Location_ID = rs.getInt(1);
				IsTaxExempt = rs.getString(2);
				found = true;
			}
			rs.close();
			pstmt.close();
			if (billToC_Location_ID == 0)
			{
				log.saveError(""TaxCriteriaNotFound"", Msg.translate(Env.getAD_Language(ctx), variable)
					+ (found ? """" : "" (BPLocation="" + billC_BPartner_Location_ID + "" not found)""));
				return 0;
			}
			if (""Y"".equals(IsTaxExempt))
				return getExemptTax(ctx, AD_Org_ID);

			//  Reverse for PO
			if (!IsSOTrx)
			{
				int temp = billFromC_Location_ID;
				billFromC_Location_ID = billToC_Location_ID;
				billToC_Location_ID = temp;
			}
			log.fine(""billFromC_Location_ID = "" + billFromC_Location_ID);
			log.fine(""billToC_Location_ID = "" + billToC_Location_ID);

			//-----------------------------------------------------------------

		//	M_Warehouse_ID				->	shipFromC_Location_ID
			sql = ""SELECT C_Location_ID FROM M_Warehouse ""
				+ ""WHERE M_Warehouse_ID=?"";
			variable = ""M_Warehouse_ID"";
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, M_Warehouse_ID);
			rs = pstmt.executeQuery();
			found = false;
			if (rs.next())
			{
				shipFromC_Location_ID = rs.getInt (1);
				found = true;
			}
			rs.close();
			pstmt.close();
			if (shipFromC_Location_ID == 0)
			{
				log.saveError(""TaxCriteriaNotFound"", Msg.translate(Env.getAD_Language(ctx), variable)
					+ (found ? """" : "" (Warehouse="" + M_Warehouse_ID + "" not found)""));
				return 0;
			}

		//	shipC_BPartner_Location_ID 	->	shipToC_Location_ID
			sql = ""SELECT C_Location_ID FROM C_BPartner_Location ""
				+ ""WHERE C_BPartner_Location_ID=?"";
			variable = ""C_BPartner_Location_ID"";
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, shipC_BPartner_Location_ID);
			rs = pstmt.executeQuery();
			found = false;
			if (rs.next())
			{
				shipToC_Location_ID = rs.getInt (1);
				found = true;
			}
			rs.close();
			pstmt.close();
			if (shipToC_Location_ID == 0)
			{
				log.saveError(""TaxCriteriaNotFound"", Msg.translate(Env.getAD_Language(ctx), variable)
					+ (found ? """" : "" (BPLocation="" + shipC_BPartner_Location_ID + "" not found)""));
				return 0;
			}

			//  Reverse for PO
			if (!IsSOTrx)
			{
				int temp = shipFromC_Location_ID;
				shipFromC_Location_ID = shipToC_Location_ID;
				shipToC_Location_ID = temp;
			}
			log.fine(""shipFromC_Location_ID = "" + shipFromC_Location_ID);
			log.fine(""shipToC_Location_ID = "" + shipToC_Location_ID);
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, ""getProduct ("" + variable + "")"", e);
		}

		return get (ctx, C_TaxCategory_ID, IsSOTrx,
			shipDate, shipFromC_Location_ID, shipToC_Location_ID,
			billDate, billFromC_Location_ID, billToC_Location_ID);
	}	//	getProduct
"
org.compiere.model.MTaxPriority.getExemptTax,Tax.java,"int getExemptTax (Ctx ctx, int AD_Org_ID)
	{
		int C_Tax_ID = 0;
		String sql = ""SELECT t.C_Tax_ID ""
			+ ""FROM C_Tax t""
			+ "" INNER JOIN AD_Org o ON (t.AD_Client_ID=o.AD_Client_ID) ""
			+ ""WHERE t.IsTaxExempt='Y' AND o.AD_Org_ID=? ""
			+ ""ORDER BY t.Rate DESC"";
		boolean found = false;
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, AD_Org_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				C_Tax_ID = rs.getInt (1);
				found = true;
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		log.fine(""TaxExempt=Y - C_Tax_ID="" + C_Tax_ID);
		if (C_Tax_ID == 0)
			log.saveError(""TaxCriteriaNotFound"", Msg.getMsg(ctx, ""TaxNoExemptFound"")
				+ (found ? """" : "" (Tax/Org="" + AD_Org_ID + "" not found)""));
		return C_Tax_ID;
	}	//	getExemptTax
"
org.compiere.model.MTaxPriority.get,Tax.java,"int get (Ctx ctx,
		int C_TaxCategory_ID, boolean IsSOTrx,
		Timestamp shipDate, int shipFromC_Locction_ID, int shipToC_Location_ID,
		Timestamp billDate, int billFromC_Location_ID, int billToC_Location_ID)
	{
		//	C_TaxCategory contains CommodityCode
		
		//	API to Tax Vendor comes here

		if (CLogMgt.isLevelFine())
		{
			log.info(""(Detail) - Category="" + C_TaxCategory_ID 
				+ "", SOTrx="" + IsSOTrx);
			log.config(""(Detail) - BillFrom="" + billFromC_Location_ID 
				+ "", BillTo="" + billToC_Location_ID + "", BillDate="" + billDate);
		}

		MTax[] taxes = MTax.getAll (ctx);
		MLocation lFrom = new MLocation (ctx, billFromC_Location_ID, null); 
		MLocation lTo = new MLocation (ctx, billToC_Location_ID, null); 
		log.finer(""From="" + lFrom);
		log.finer(""To="" + lTo);
		
		// This object assigns a priority to a given tax/taxPostal record.
		// Any dual specified field beats any combination of single fields,
		// and single fields are used to decide between otherwise equal dual specifications.
		// Zip > Region > Country
		class MTaxPriority {
			MTax tax;
			int priority = 0;
			
			public MTaxPriority(MTax t, MTaxPostal tp){
				tax = t;
				final int DUAL_ZIP = 32;
				final int DUAL_REGION = 16;
				final int DUAL_COUNTRY = 8;
				final int ZIP = 4;
				final int REGION = 2;
				final int COUNTRY = 1;
				
				if(tp != null){
					if(tp.getPostal_To() == null)
						priority += ZIP;
					else
						priority += DUAL_ZIP;
				}
				
				int countryTotal = ((tax.getC_Country_ID() == 0)?0:1) + ((tax.getTo_Country_ID() == 0)?0:1);
				if(countryTotal == 1)
					priority += COUNTRY;
				if(countryTotal == 2)
					priority += DUAL_COUNTRY;
				
				int regionTotal = ((tax.getC_Region_ID() == 0)?0:1) + ((tax.getTo_Region_ID() == 0)?0:1);
				if(regionTotal == 1)
					priority += REGION;
				if(regionTotal == 2)
					priority += DUAL_REGION;
			}
			
			public int getC_Tax_ID(){
				return tax.getC_Tax_ID();
			}
			
			public Timestamp getValidFrom(){
				return tax.getValidFrom();
			}
			
			// returns true if this MTaxPriority beats the one being compared to
			// The MTaxPriority with higher priority wins.
			// If the priorities are tied, then the one with the more recent date wins. 
			public boolean trumps(MTaxPriority compareTax){
				if(priority > compareTax.priority ||
						(priority == compareTax.priority && getValidFrom().after(compareTax.getValidFrom())))
					return true;
				else 
					return false;
			}
		}

		ArrayList<MTaxPriority> results = new ArrayList<MTaxPriority>();
		for (MTax tax : taxes) {
			if (tax.isTaxExempt()
				|| !tax.isActive() 
				|| tax.getC_TaxCategory_ID() != C_TaxCategory_ID
				|| tax.getParent_Tax_ID() != 0)	//	user parent tax
				continue;
			if (IsSOTrx && X_C_Tax.SOPOTYPE_PurchaseTax.equals(tax.getSOPOType()))
				continue;
			if (!IsSOTrx && X_C_Tax.SOPOTYPE_SalesTax.equals(tax.getSOPOType()))
				continue;

			if (CLogMgt.isLevelFinest())
			{
				log.finest(tax.toString());
				log.finest(""From Country - "" + (tax.getC_Country_ID() == lFrom.getC_Country_ID() 
					|| tax.getC_Country_ID() == 0));
				log.finest(""From Region - "" + (tax.getC_Region_ID() == lFrom.getC_Region_ID() 
					|| tax.getC_Region_ID() == 0));
				log.finest(""To Country - "" + (tax.getTo_Country_ID() == lTo.getC_Country_ID() 
					|| tax.getTo_Country_ID() == 0));
				log.finest(""To Region - "" + (tax.getTo_Region_ID() == lTo.getC_Region_ID() 
					|| tax.getTo_Region_ID() == 0));
				log.finest(""Date valid - "" + (!tax.getValidFrom().after(billDate)));
			}
			
				//	From Country
			if ((tax.getC_Country_ID() == lFrom.getC_Country_ID() 
					|| tax.getC_Country_ID() == 0)
				//	From Region
				&& (tax.getC_Region_ID() == lFrom.getC_Region_ID() 
					|| tax.getC_Region_ID() == 0)
				//	To Country
				&& (tax.getTo_Country_ID() == lTo.getC_Country_ID() 
					|| tax.getTo_Country_ID() == 0)
				//	To Region
				&& (tax.getTo_Region_ID() == lTo.getC_Region_ID() 
					|| tax.getTo_Region_ID() == 0)
				//	Date
				&& !tax.getValidFrom().after(billDate)
				)
			{
				if (!tax.isPostal())
				{
					results.add(new MTaxPriority(tax, null));
					continue;
				}
				//
				MTaxPostal[] postals = tax.getPostals(false);
				for (MTaxPostal postal : postals) {
					if (postal.isActive()
						//	Postal From is mandatory
						&& postal.getPostal().startsWith(lFrom.getPostal())
						//	Postal To is optional
						&& (postal.getPostal_To() == null 
							|| postal.getPostal_To().startsWith(lTo.getPostal()))
						)
					{
						results.add(new MTaxPriority(tax, postal));
						continue;
					}
				}	//	for all postals
			}
		}	//	for all taxes
		
		//	One Result
		if (results.size() == 1)
			return results.get(0).getC_Tax_ID();
		//	Multiple results - different valid from dates
		if (results.size() > 1)
		{
			MTaxPriority latest = null;
			for (int i = 0; i < results.size(); i++)
			{
				MTaxPriority taxPriority = results.get(i);
				if (latest == null 
					|| taxPriority.trumps(latest)){
					latest = taxPriority;
				}
			}
			return latest.getC_Tax_ID();
		}		

		//	Default Tax
		for (MTax tax : taxes) {
			if (!tax.isDefault() || !tax.isActive()
				|| tax.getParent_Tax_ID() != 0)	//	user parent tax
				continue;
			if (IsSOTrx && X_C_Tax.SOPOTYPE_PurchaseTax.equals(tax.getSOPOType()))
				continue;
			if (!IsSOTrx && X_C_Tax.SOPOTYPE_SalesTax.equals(tax.getSOPOType()))
				continue;
			log.fine(""(default) - "" + tax);
			return tax.getC_Tax_ID();
		}	//	for all taxes
		
		log.saveError(""TaxNotFound"", """");
		return 0;
	}	//	get
"
org.compiere.model.MTaxPriority.getC_Tax_ID,Tax.java,"int getC_Tax_ID(){
				return tax.getC_Tax_ID();
			}
"
org.compiere.model.MTaxPriority.getValidFrom,Tax.java,"Timestamp getValidFrom(){
				return tax.getValidFrom();
			}
"
org.compiere.model.MTaxPriority.trumps,Tax.java,"boolean trumps(MTaxPriority compareTax){
				if(priority > compareTax.priority ||
						(priority == compareTax.priority && getValidFrom().after(compareTax.getValidFrom())))
					return true;
				else 
					return false;
			}
"
org.compiere.model.MBPartnerInfo.findAll,MBPartnerInfo.java,"ArrayList<MBPartnerInfo> findAll (Ctx ctx, 
		String Value, String Name, String Contact, String EMail, String Phone, String City)
	{
		StringBuffer sql = new StringBuffer (""SELECT * FROM RV_BPartner WHERE IsActive='Y'"");
		StringBuffer sb = new StringBuffer();
		Value = getFindParameter (Value);
		if (Value != null)
			sb.append(""UPPER(Value) LIKE ?"");
		Name = getFindParameter (Name);
		if (Name != null)
		{
			if (sb.length() > 0)
				sb.append("" OR "");
			sb.append(""UPPER(Name) LIKE ?"");
		}
		Contact = getFindParameter (Contact);
		if (Contact != null)
		{
			if (sb.length() > 0)
				sb.append("" OR "");
			sb.append(""UPPER(ContactName) LIKE ?"");
		}
		EMail = getFindParameter (EMail);
		if (EMail != null)
		{
			if (sb.length() > 0)
				sb.append("" OR "");
			sb.append(""UPPER(EMail) LIKE ?"");
		}
		Phone = getFindParameter (Phone);
		if (Phone != null)
		{
			if (sb.length() > 0)
				sb.append("" OR "");
			sb.append(""UPPER(Phone) LIKE ?"");
		}
		City = getFindParameter (City);
		if (City != null)
		{
			if (sb.length() > 0)
				sb.append("" OR "");
			sb.append(""UPPER(City) LIKE ?"");
		}
		if (sb.length() > 0)
			sql.append("" AND ("").append(sb).append("")"");
		sql.append("" ORDER BY Value"");
		//
		MRole role = MRole.get(ctx, ctx.getAD_Role_ID(), ctx.getAD_User_ID(), false);
		String finalSQL = role.addAccessSQL(sql.toString(), 
			""RV_BPartner"", MRole.SQL_NOTQUALIFIED, MRole.SQL_RO);
		ArrayList<MBPartnerInfo> list = new ArrayList<MBPartnerInfo>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(finalSQL, (Trx) null);
			int index = 1;
			if (Value != null)
				pstmt.setString(index++, Value);
			if (Name != null)
				pstmt.setString(index++, Name);
			if (Contact != null)
				pstmt.setString(index++, Contact);
			if (EMail != null)
				pstmt.setString(index++, EMail);
			if (Phone != null)
				pstmt.setString(index++, Phone);
			if (City != null)
				pstmt.setString(index++, City);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MBPartnerInfo (ctx, rs, null));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, ""find - "" + finalSQL, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//	Return
		return list;
	}	//	find
"
org.compiere.model.MBPartnerInfo.main,MBPartnerInfo.java,"void main(String[] args)
    {
	    Compiere.startup(true);
	    Ctx ctx = Env.getCtx();
		ctx.setAD_Client_ID(11);	//	GardenWorld
		ctx.setAD_Role_ID(102);		//	GardenAdmin
		ctx.setAD_User_ID(101);		//	GardenAdmin
	    String bpValue = ""%"";
	    String bpName = ""%"";
		String city = ""%""; 
		String uName = ""%"";
		String uPhone = ""%"";
		String email = ""%"";
	    ArrayList<MBPartnerInfo> bpis = findAll(ctx, bpValue, bpName, uName, email, uPhone, city);
	    //
	    MBPartnerInfo bpi = bpis.get(0);
	    org.w3c.dom.Document doc = bpi.get_xmlDocument(false, false);
	    System.out.println(doc);
	    StringBuffer bpXml = bpi.get_xmlString(null, false);
	    System.out.println(bpXml.toString());
    }	//	main
"
org.compiere.model.MSLAMeasure.setLink,MSLAMeasure.java,"void setLink (int AD_Table_ID, int Record_ID)
	{
		setAD_Table_ID(AD_Table_ID);
		setRecord_ID(Record_ID);
	}	//	setLink
"
org.compiere.model.MSLAMeasure.toString,MSLAMeasure.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MSLAMeasure["");
		sb.append(get_ID()).append(""-PA_SLA_Goal_ID="").append(getPA_SLA_Goal_ID())
			.append("","").append(getDateTrx())
			.append("",Actual="").append(getMeasureActual())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MMatchPO.get,MMatchPO.java,"MMatchPO[] get (Ctx ctx,
		int C_OrderLine_ID, int C_InvoiceLine_ID, Trx trx)
	{
		if ((C_OrderLine_ID == 0) || (C_InvoiceLine_ID == 0))
			return new MMatchPO[]{};
		//
		String sql = ""SELECT * FROM M_MatchPO WHERE C_OrderLine_ID=? AND C_InvoiceLine_ID=?"";
		ArrayList<MMatchPO> list = new ArrayList<MMatchPO>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, C_OrderLine_ID);
			pstmt.setInt (2, C_InvoiceLine_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MMatchPO (ctx, rs, trx));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MMatchPO[] retValue = new MMatchPO[list.size()];
		list.toArray (retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MMatchPO.get,MMatchPO.java,"MMatchPO[] get (Ctx ctx,
		int M_InOutLine_ID, Trx trx)
	{
		if (M_InOutLine_ID == 0)
			return new MMatchPO[]{};
		//
		String sql = ""SELECT * FROM M_MatchPO WHERE M_InOutLine_ID=?"";
		ArrayList<MMatchPO> list = new ArrayList<MMatchPO>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, M_InOutLine_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MMatchPO (ctx, rs, trx));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MMatchPO[] retValue = new MMatchPO[list.size()];
		list.toArray (retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MMatchPO.getInOut,MMatchPO.java,"MMatchPO[] getInOut (Ctx ctx,
		int M_InOut_ID, Trx trx)
	{
		if (M_InOut_ID == 0)
			return new MMatchPO[]{};
		//
		String sql = ""SELECT * FROM M_MatchPO m""
			+ "" INNER JOIN M_InOutLine l ON (m.M_InOutLine_ID=l.M_InOutLine_ID) ""
			+ ""WHERE l.M_InOut_ID=?"";
		ArrayList<MMatchPO> list = new ArrayList<MMatchPO>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, M_InOut_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MMatchPO (ctx, rs, trx));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MMatchPO[] retValue = new MMatchPO[list.size()];
		list.toArray (retValue);
		return retValue;
	}	//	getInOut
"
org.compiere.model.MMatchPO.getInvoice,MMatchPO.java,"MMatchPO[] getInvoice (Ctx ctx,
		int C_Invoice_ID, Trx trx)
	{
		if (C_Invoice_ID == 0)
			return new MMatchPO[]{};
		//
		String sql = ""SELECT * FROM M_MatchPO mi""
			+ "" INNER JOIN C_InvoiceLine il ON (mi.C_InvoiceLine_ID=il.C_InvoiceLine_ID) ""
			+ ""WHERE il.C_Invoice_ID=?"";
		ArrayList<MMatchPO> list = new ArrayList<MMatchPO>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, C_Invoice_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MMatchPO (ctx, rs, trx));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MMatchPO[] retValue = new MMatchPO[list.size()];
		list.toArray (retValue);
		return retValue;
	}	//	getInvoice
"
org.compiere.model.MMatchPO.create,MMatchPO.java,"MMatchPO create (MInvoiceLine iLine, MInOutLine sLine,
		Timestamp dateTrx, BigDecimal qty)
	{
		Trx trx = null;
		Ctx ctx = null;
		int C_OrderLine_ID = 0;
		if (iLine != null)
		{
			trx = iLine.get_Trx();
			ctx = iLine.getCtx();
			C_OrderLine_ID = iLine.getC_OrderLine_ID();
		}
		if (sLine != null)
		{
			trx = sLine.get_Trx();
			ctx = sLine.getCtx();
			C_OrderLine_ID = sLine.getC_OrderLine_ID();
		}

		MMatchPO retValue = null;
		String sql = ""SELECT * FROM M_MatchPO WHERE C_OrderLine_ID=?"";
//		ArrayList list = new ArrayList();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, C_OrderLine_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MMatchPO mpo = new MMatchPO (ctx, rs, trx);
				if (qty.compareTo(mpo.getQty()) == 0)
				{
					if (iLine != null)
					{
						if ((mpo.getC_InvoiceLine_ID() == 0)
							|| (mpo.getC_InvoiceLine_ID() == iLine.getC_InvoiceLine_ID()))
						{
							mpo.setC_InvoiceLine_ID(iLine);
							if (iLine.getM_AttributeSetInstance_ID() != 0)
							{
								if (mpo.getM_AttributeSetInstance_ID() == 0)
									mpo.setM_AttributeSetInstance_ID(iLine.getM_AttributeSetInstance_ID());
								else if (mpo.getM_AttributeSetInstance_ID() != iLine.getM_AttributeSetInstance_ID())
									continue;
							}
						}
						else
							continue;
					}
					if (sLine != null)
					{
						if ((mpo.getM_InOutLine_ID() == 0)
							|| (mpo.getM_InOutLine_ID() == sLine.getM_InOutLine_ID()))
						{
							mpo.setM_InOutLine_ID(sLine.getM_InOutLine_ID());
							if (sLine.getM_AttributeSetInstance_ID() != 0)
							{
								if (mpo.getM_AttributeSetInstance_ID() == 0)
									mpo.setM_AttributeSetInstance_ID(sLine.getM_AttributeSetInstance_ID());
								else if (mpo.getM_AttributeSetInstance_ID() != sLine.getM_AttributeSetInstance_ID())
									continue;
							}
						}
						else
							continue;
					}
					retValue = mpo;
					break;
				}
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

		//	Create New
		if (retValue == null)
		{
			if (sLine != null)
			{
				retValue = new MMatchPO (sLine, dateTrx, qty);
				if (iLine != null)
					retValue.setC_InvoiceLine_ID(iLine);
			}
			else if (iLine != null)
			{
				retValue = new MMatchPO (iLine, dateTrx, qty);
			}
		}

		return retValue;
	}	//	create
"
org.compiere.model.MMatchPO.setC_InvoiceLine_ID,MMatchPO.java,"void setC_InvoiceLine_ID (MInvoiceLine line)
	{
		m_iLine = line;
		if (line == null)
			setC_InvoiceLine_ID(0);
		else
			setC_InvoiceLine_ID(line.getC_InvoiceLine_ID());
	}	//	setC_InvoiceLine_ID
"
org.compiere.model.MMatchPO.setC_InvoiceLine_ID,MMatchPO.java,"void setC_InvoiceLine_ID (int C_InvoiceLine_ID)
	{
		int old = getC_InvoiceLine_ID();
		if (old != C_InvoiceLine_ID)
		{
			super.setC_InvoiceLine_ID (C_InvoiceLine_ID);
			m_isInvoiceLineChange = true;
		}
	}	//	setC_InvoiceLine_ID
"
org.compiere.model.MMatchPO.getInvoiceLine,MMatchPO.java,"MInvoiceLine getInvoiceLine()
	{
		if ((m_iLine == null) && (getC_InvoiceLine_ID() != 0))
			m_iLine = new MInvoiceLine(getCtx(), getC_InvoiceLine_ID(), get_Trx());
		return m_iLine;
	}	//	getInvoiceLine
"
org.compiere.model.MMatchPO.setM_InOutLine_ID,MMatchPO.java,"void setM_InOutLine_ID (int M_InOutLine_ID)
	{
		int old = getM_InOutLine_ID();
		if (old != M_InOutLine_ID)
		{
			super.setM_InOutLine_ID (M_InOutLine_ID);
			m_isInOutLineChange = true;
		}
	}	//	setM_InOutLine_ID
"
org.compiere.model.MMatchPO.setC_OrderLine_ID,MMatchPO.java,"void setC_OrderLine_ID (MOrderLine line)
	{
		m_oLine = line;
		if (line == null)
			setC_OrderLine_ID(0);
		else
			setC_OrderLine_ID(line.getC_OrderLine_ID());
	}	//	setC_InvoiceLine_ID
"
org.compiere.model.MMatchPO.getOrderLine,MMatchPO.java,"MOrderLine getOrderLine()
	{
		if (((m_oLine == null) && (getC_OrderLine_ID() != 0))
			|| (getC_OrderLine_ID() != m_oLine.getC_OrderLine_ID()))
			m_oLine = new MOrderLine(getCtx(), getC_OrderLine_ID(), get_Trx());
		return m_oLine;
	}	//	getOrderLine
"
org.compiere.model.MMatchPO.beforeSave,MMatchPO.java,"boolean beforeSave (boolean newRecord)
	{
		//	Set Trx Date
		if (getDateTrx() == null)
			setDateTrx (new Timestamp(System.currentTimeMillis()));
		//	Set Acct Date
		if (getDateAcct() == null)
		{
			Timestamp ts = getNewerDateAcct();
			if (ts == null)
				ts = getDateTrx();
			setDateAcct (ts);
		}
		//	Set ASI from Receipt
		if ((getM_AttributeSetInstance_ID() == 0) && (getM_InOutLine_ID() != 0))
		{
			MInOutLine iol = new MInOutLine (getCtx(), getM_InOutLine_ID(), get_Trx());
			setM_AttributeSetInstance_ID(iol.getM_AttributeSetInstance_ID());
		}

		//	Find OrderLine
		if (getC_OrderLine_ID() == 0)
		{
			MInvoiceLine il = null;
			if (getC_InvoiceLine_ID() != 0)
			{
				il = getInvoiceLine();
				if (il.getC_OrderLine_ID() != 0)
					setC_OrderLine_ID(il.getC_OrderLine_ID());
			}	//	get from invoice
			if ((getC_OrderLine_ID() == 0) && (getM_InOutLine_ID() != 0))
			{
				MInOutLine iol = new MInOutLine (getCtx(), getM_InOutLine_ID(), get_Trx());
				if (iol.getC_OrderLine_ID() != 0)
				{
					setC_OrderLine_ID(iol.getC_OrderLine_ID());
					if (il != null)
					{
						il.setC_OrderLine_ID(iol.getC_OrderLine_ID());
						il.save();
					}
				}
			}	//	get from shipment
		}	//	find order line

		//	Price Match Approval
		if ((getC_OrderLine_ID() != 0)
			&& (getC_InvoiceLine_ID() != 0)
			&& (newRecord ||
				is_ValueChanged(""C_OrderLine_ID"") || is_ValueChanged(""C_InvoiceLine_ID"")))
		{
			BigDecimal poPrice = getOrderLine().getPriceActual();
			BigDecimal invPrice = getInvoiceLine().getPriceActual();
			BigDecimal difference = poPrice.subtract(invPrice);
			if (difference.signum() != 0)
			{
				difference = difference.multiply(getQty());
				setPriceMatchDifference(difference);
				//	Approval
				MBPGroup group = MBPGroup.getOfBPartner(getCtx(), getOrderLine().getC_BPartner_ID());
				BigDecimal mt = group.getPriceMatchTolerance();
				if ((mt != null) && (mt.signum() != 0))
				{
					BigDecimal poAmt = poPrice.multiply(getQty());
					BigDecimal maxTolerance = poAmt.multiply(mt);
					maxTolerance = maxTolerance.abs()
						.divide(Env.ONEHUNDRED, 2, BigDecimal.ROUND_HALF_UP);
					difference = difference.abs();
					boolean ok = difference.compareTo(maxTolerance) <= 0;
					log.config(""Difference="" + getPriceMatchDifference()
						+ "", Max="" + maxTolerance + "" => "" + ok);
					setIsApproved(ok);
				}
			}
			else
			{
				setPriceMatchDifference(difference);
				setIsApproved(true);
			}
		}

		return true;
	}	//	beforeSave
"
org.compiere.model.MMatchPO.afterSave,MMatchPO.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		//	Purchase Order Delivered/Invoiced
		//	(Reserved in VMatch and MInOut.completeIt)
		if (success && (getC_OrderLine_ID() != 0))
		{
			MOrderLine orderLine = getOrderLine();
			boolean isReturnTrx = orderLine.getParent().isReturnTrx();
			//
			if (m_isInOutLineChange)
			{

				if (getM_InOutLine_ID() != 0)							//	new delivery
				{
					orderLine.setQtyDelivered(orderLine.getQtyDelivered().add(getQty()));
					if(isReturnTrx)
					{
						orderLine.setQtyReturned(orderLine.getQtyReturned().add(getQty()));
						MOrderLine origOrderLine = new MOrderLine (getCtx(), orderLine.getOrig_OrderLine_ID(), get_Trx());
						origOrderLine.setQtyReturned(origOrderLine.getQtyReturned().add(getQty()));
						origOrderLine.save();
					}
				}
				else //	if (getM_InOutLine_ID() == 0)					//	reset to 0
				{
					orderLine.setQtyDelivered(orderLine.getQtyDelivered().subtract(getQty()));
					if(isReturnTrx)
					{
						orderLine.setQtyReturned(orderLine.getQtyReturned().subtract(getQty()));
						MOrderLine origOrderLine = new MOrderLine (getCtx(), orderLine.getOrig_OrderLine_ID(), get_Trx());
						origOrderLine.setQtyReturned(origOrderLine.getQtyReturned().add(getQty()));
						origOrderLine.save();
					}
				}
				orderLine.setDateDelivered(getDateTrx());	//	overwrite=last
			}
			if (m_isInvoiceLineChange)
			{
				if (getC_InvoiceLine_ID() != 0)						//	first time
					orderLine.setQtyInvoiced(orderLine.getQtyInvoiced().add(getQty()));
				else //	if (getC_InvoiceLine_ID() == 0)				//	set to 0
					orderLine.setQtyInvoiced(orderLine.getQtyInvoiced().subtract(getQty()));
				orderLine.setDateInvoiced(getDateTrx());	//	overwrite=last
			}

			//	Update Order ASI if full match
			if ((orderLine.getM_AttributeSetInstance_ID() == 0)
				&& (getM_InOutLine_ID() != 0))
			{
				MInOutLine iol = new MInOutLine (getCtx(), getM_InOutLine_ID(), get_Trx());
				if (iol.getMovementQty().compareTo(orderLine.getQtyOrdered()) == 0)
					orderLine.setM_AttributeSetInstance_ID(iol.getM_AttributeSetInstance_ID());
			}
			return orderLine.save();
		}
		return success;
	}	//	afterSave
"
org.compiere.model.MMatchPO.getNewerDateAcct,MMatchPO.java,"Timestamp getNewerDateAcct()
	{
//		Timestamp orderDate = null;
		Timestamp invoiceDate = null;
		Timestamp shipDate = null;

		String sql = ""SELECT i.DateAcct ""
			+ ""FROM C_InvoiceLine il""
			+ "" INNER JOIN C_Invoice i ON (i.C_Invoice_ID=il.C_Invoice_ID) ""
			+ ""WHERE C_InvoiceLine_ID=?"";
		PreparedStatement pstmt = null;
		if (getC_InvoiceLine_ID() != 0)
		{
			try
			{
				pstmt = DB.prepareStatement(sql, (Trx) null);
				pstmt.setInt (1, getC_InvoiceLine_ID());
				ResultSet rs = pstmt.executeQuery ();
				if (rs.next ())
					invoiceDate = rs.getTimestamp(1);
				rs.close ();
				pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				log.log (Level.SEVERE, sql, e);
			}
		}
		//
		sql = ""SELECT io.DateAcct ""
			+ ""FROM M_InOutLine iol""
			+ "" INNER JOIN M_InOut io ON (io.M_InOut_ID=iol.M_InOut_ID) ""
			+ ""WHERE iol.M_InOutLine_ID=?"";
		if (getM_InOutLine_ID() != 0)
		{
			try
			{
				pstmt = DB.prepareStatement(sql, (Trx) null);
				pstmt.setInt (1, getM_InOutLine_ID());
				ResultSet rs = pstmt.executeQuery ();
				if (rs.next ())
					shipDate = rs.getTimestamp(1);
				rs.close ();
				pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				log.log (Level.SEVERE, sql, e);
			}
		}
		//
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

		//	Assuming that order date is always earlier
		if (invoiceDate == null)
			return shipDate;
		if (shipDate == null)
			return invoiceDate;
		if (invoiceDate.after(shipDate))
			return invoiceDate;
		return shipDate;
	}	//	getNewerDateAcct
"
org.compiere.model.MMatchPO.beforeDelete,MMatchPO.java,"boolean beforeDelete ()
	{
		if (isPosted())
		{
			String msg = MPeriod.isOpen(this, null, getDateTrx(), MDocBaseType.DOCBASETYPE_MatchPO);
			if (msg != null)
			{
				log.warning(msg);
				return false;
			}
			setPosted(false);
			return MFactAcct.delete (Table_ID, get_ID(), get_Trx()) >= 0;
		}
		return true;
	}	//	beforeDelete
"
org.compiere.model.MMatchPO.afterDelete,MMatchPO.java,"boolean afterDelete (boolean success)
	{
		//	Order Delivered/Invoiced
		//	(Reserved in VMatch and MInOut.completeIt)
		if (success && (getC_OrderLine_ID() != 0))
		{
			MOrderLine orderLine = new MOrderLine (getCtx(), getC_OrderLine_ID(), get_Trx());
			Boolean IsReturnTrx = orderLine.getParent().isReturnTrx();
			if (getM_InOutLine_ID() != 0)
			{
				orderLine.setQtyDelivered(orderLine.getQtyDelivered().subtract(getQty()));
				if(IsReturnTrx)
				{
					orderLine.setQtyReturned(orderLine.getQtyReturned().subtract(getQty()));
					MOrderLine origOrderLine = new MOrderLine (getCtx(), orderLine.getOrig_OrderLine_ID(), get_Trx());
					origOrderLine.setQtyReturned(origOrderLine.getQtyReturned().subtract(getQty()));
					origOrderLine.save();
				}
			}
			if (getC_InvoiceLine_ID() != 0)
				orderLine.setQtyInvoiced(orderLine.getQtyInvoiced().subtract(getQty()));
			return orderLine.save(get_Trx());
		}
		return success;
	}	//	afterDelete
"
org.compiere.model.MMatchPO.toString,MMatchPO.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MMatchPO["");
		sb.append (get_ID())
			.append ("",Qty="").append (getQty())
			.append ("",C_OrderLine_ID="").append (getC_OrderLine_ID())
			.append ("",M_InOutLine_ID="").append (getM_InOutLine_ID())
			.append ("",C_InvoiceLine_ID="").append (getC_InvoiceLine_ID())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MMatchPO.consolidate,MMatchPO.java,"void consolidate(Ctx ctx)
	{
		String sql = ""SELECT * FROM M_MatchPO po ""
			//jz + ""WHERE EXISTS (SELECT * FROM M_MatchPO x ""
			+ ""WHERE EXISTS (SELECT 1 FROM M_MatchPO x ""
				+ ""WHERE po.C_OrderLine_ID=x.C_OrderLine_ID AND po.Qty=x.Qty ""
				+ ""GROUP BY C_OrderLine_ID, Qty ""
				+ ""HAVING COUNT(*) = 2) ""
			+ "" AND AD_Client_ID=?""
			+ ""ORDER BY C_OrderLine_ID, M_InOutLine_ID"";
		PreparedStatement pstmt = null;
		int success = 0;
		int errors = 0;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, ctx.getAD_Client_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MMatchPO po1 = new MMatchPO (ctx, rs, null);
				if (rs.next())
				{
					MMatchPO po2 = new MMatchPO (ctx, rs, null);
					if ((po1.getM_InOutLine_ID() != 0) && (po1.getC_InvoiceLine_ID() == 0)
						&& (po2.getM_InOutLine_ID() == 0) && (po2.getC_InvoiceLine_ID() != 0))
					{
						String s1 = ""UPDATE M_MatchPO SET C_InvoiceLine_ID=""
							+ po2.getC_InvoiceLine_ID()
							+ "" WHERE M_MatchPO_ID="" + po1.getM_MatchPO_ID();
						int no1 = DB.executeUpdate(s1, (Trx) null);
						if (no1 != 1)
						{
							errors++;
							s_log.warning(""Not updated M_MatchPO_ID="" + po1.getM_MatchPO_ID());
							continue;
						}
						//
						String s2 = ""DELETE FROM Fact_Acct WHERE AD_Table_ID=473 AND Record_ID=?"";
						int no2 = DB.executeUpdate(s2, po2.getM_MatchPO_ID(), null);
						String s3 = ""DELETE FROM M_MatchPO WHERE M_MatchPO_ID=?"";
						int no3 = DB.executeUpdate(s3, po2.getM_MatchPO_ID(), null);
						if ((no2 == 0) && (no3 == 1))
							success++;
						else
						{
							s_log.warning(""M_MatchPO_ID="" + po2.getM_MatchPO_ID()
								+ "" - Deleted="" + no2 + "", Acct="" + no3);
							errors++;
						}
					}
				}
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		if ((errors == 0) && (success == 0))
			;
		else
			s_log.info(""Success #"" + success + "" - Error #"" + errors);
	}	//	consolidate
"
org.compiere.model.ProductCost.getProduct,ProductCost.java,"MProduct getProduct()
	{
		return m_product;
	}   //  getProduct
"
org.compiere.model.ProductCost.isService,ProductCost.java,"boolean isService()
	{
		if (m_product != null)
			return m_product.isService();
		return false;
	}	//	isService
"
org.compiere.model.ProductCost.setQty,ProductCost.java,"void setQty (BigDecimal qty)
	{
		m_qty = qty;
	}   //  setQty
"
org.compiere.model.ProductCost.setQty,ProductCost.java,"void setQty (BigDecimal qty, int C_UOM_ID)
	{
		m_qty = MUOMConversion.convert (C_UOM_ID, m_C_UOM_ID, qty, true);    //  StdPrecision
		if (qty != null && m_qty == null)   //  conversion error
		{
			log.severe (""Conversion error - set to "" + qty);
			m_qty = qty;
		}
		else
			m_C_UOM_ID = C_UOM_ID;
	}   //  setQty
"
org.compiere.model.ProductCost.getAccount,ProductCost.java,"MAccount getAccount(int AcctType, MAcctSchema as)
	{
		if (AcctType < 1 || AcctType > 10)
			return null;

		//  No Product - get Default from Product Category
		if (m_M_Product_ID == 0)
			return getAccountDefault(AcctType, as);

		String sql = ""SELECT P_Revenue_Acct, P_Expense_Acct, P_Asset_Acct, P_Cogs_Acct, ""	//	1..4
			+ ""P_PurchasePriceVariance_Acct, P_InvoicePriceVariance_Acct, ""	//	5..6
			+ ""P_TradeDiscountRec_Acct, P_TradeDiscountGrant_Acct,""			//	7..8
			+ ""P_CostAdjustment_Acct, P_InventoryClearing_Acct ""			//	9..10
			+ ""FROM M_Product_Acct ""
			+ ""WHERE M_Product_ID=? AND C_AcctSchema_ID=?"";
		//
		int validCombination_ID = 0;
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, m_M_Product_ID);
			pstmt.setInt(2, as.getC_AcctSchema_ID());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				validCombination_ID = rs.getInt(AcctType);
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		if (validCombination_ID == 0)
			return null;
		return MAccount.get(as.getCtx(), validCombination_ID);
	}   //  getAccount
"
org.compiere.model.ProductCost.getAccountDefault,ProductCost.java,"MAccount getAccountDefault (int AcctType, MAcctSchema as)
	{
		if (AcctType < 1 || AcctType > 10)
			return null;

		String sql = ""SELECT P_Revenue_Acct, P_Expense_Acct, P_Asset_Acct, P_Cogs_Acct, ""
			+ ""P_PurchasePriceVariance_Acct, P_InvoicePriceVariance_Acct, ""
			+ ""P_TradeDiscountRec_Acct, P_TradeDiscountGrant_Acct, ""
			+ ""P_CostAdjustment_Acct, P_InventoryClearing_Acct ""
			+ ""FROM M_Product_Category pc, M_Product_Category_Acct pca ""
			+ ""WHERE pc.M_Product_Category_ID=pca.M_Product_Category_ID""
			+ "" AND pca.C_AcctSchema_ID=? ""
			+ ""ORDER BY pc.IsDefault DESC, pc.Created"";
		//
		int validCombination_ID = 0;
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, as.getC_AcctSchema_ID());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				validCombination_ID = rs.getInt(AcctType);
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		if (validCombination_ID == 0)
			return null;
		return MAccount.get(as.getCtx(), validCombination_ID);
	}   //  getAccountDefault
"
org.compiere.model.ProductCost.getProductCosts,ProductCost.java,"BigDecimal getProductCosts (MAcctSchema as, int AD_Org_ID, 
		String costingMethod, int C_OrderLine_ID, boolean zeroCostsOK)
	{
		if (m_qty == null)
		{
			log.fine(""No Qty"");
			return null;
		}
		/**	Old Costing
		MClient client = MClient.get(as.getCtx(), as.getAD_Client_ID());
		if (!client.isUseBetaFunctions())
		{
			BigDecimal itemCost = getProductItemCostOld(as, costingMethod);
			BigDecimal cost = m_qty.multiply(itemCost);
			cost = cost.setScale(as.getCostingPrecision(), BigDecimal.ROUND_HALF_UP);
			log.fine(""Qty("" + m_qty + "") * Cost("" + itemCost + "") = "" + cost);
			return cost;
		}
		**/
		
		//	No Product
		if (m_product == null)
		{
			log.fine(""No Product"");
			return null;
		}
		//
		BigDecimal cost = MCost.getCurrentCost (m_product, m_M_AttributeSetInstance_ID, 
			as, AD_Org_ID, costingMethod, m_qty, C_OrderLine_ID, zeroCostsOK, m_trxName);
		if (cost == null)
		{
			log.fine(""No Costs"");
			return null;
		}
		return cost;
	}   //  getProductCosts
"
org.compiere.model.ProductCost.toString,ProductCost.java,"String toString()
	{
		StringBuffer sb = new StringBuffer (""ProductCost["");
		sb.append (""M_Product_ID="").append(m_M_Product_ID)
			.append("",M_AttributeSetInstance_ID"").append(m_M_AttributeSetInstance_ID)
			.append ("",Qty="").append(m_qty)
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.CalloutPayment.invoice,CalloutPayment.java,"String invoice (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer C_Invoice_ID = (Integer)value;
		if (isCalloutActive()		//	assuming it is resetting value
			|| C_Invoice_ID == null || C_Invoice_ID.intValue() == 0)
			return """";
		setCalloutActive(true);
		mTab.setValue(""C_Order_ID"", null);
		mTab.setValue(""C_Charge_ID"", null);
		mTab.setValue(""IsPrepayment"", Boolean.FALSE);
		//
		mTab.setValue(""DiscountAmt"", Env.ZERO);
		mTab.setValue(""WriteOffAmt"", Env.ZERO);
		mTab.setValue(""IsOverUnderPayment"", Boolean.FALSE);
		mTab.setValue(""OverUnderAmt"", Env.ZERO);

		int C_InvoicePaySchedule_ID = 0;
		if (ctx.getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_Invoice_ID"") == C_Invoice_ID.intValue()
			&& ctx.getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_InvoicePaySchedule_ID"") != 0)
			C_InvoicePaySchedule_ID = ctx.getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_InvoicePaySchedule_ID"");

		//  Payment Date
		Timestamp ts = (Timestamp)mTab.getValue(""DateTrx"");
		if (ts == null)
			ts = new Timestamp(System.currentTimeMillis());
		//
		String sql = ""SELECT C_BPartner_ID,C_Currency_ID,""		//	1..2
			+ "" invoiceOpen(C_Invoice_ID, ?),""					//	3		#1
			+ "" invoiceDiscount(C_Invoice_ID,?,?), IsSOTrx ""	//	4..5	#2/3
			+ ""FROM C_Invoice WHERE C_Invoice_ID=?"";			//			#4
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_InvoicePaySchedule_ID);
			pstmt.setTimestamp(2, ts);
			pstmt.setInt(3, C_InvoicePaySchedule_ID);
			pstmt.setInt(4, C_Invoice_ID.intValue());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				mTab.setValue(""C_BPartner_ID"", Integer.valueOf(rs.getInt(1)));
				int C_Currency_ID = rs.getInt(2);					//	Set Invoice Currency
				mTab.setValue(""C_Currency_ID"", Integer.valueOf(C_Currency_ID));
				//
				BigDecimal InvoiceOpen = rs.getBigDecimal(3);		//	Set Invoice OPen Amount
				if (InvoiceOpen == null)
					InvoiceOpen = Env.ZERO;
				BigDecimal DiscountAmt = rs.getBigDecimal(4);		//	Set Discount Amt
				if (DiscountAmt == null)
					DiscountAmt = Env.ZERO;
				MInvoice invoice = new MInvoice(ctx, C_Invoice_ID, null);
				MDocType docType = new MDocType(ctx, invoice.getC_DocType_ID(), null);
				if (docType.isReturnTrx())
				{
					// Adjust discount amount for credit memos. Invoice Open Amt is already adjusted.
					DiscountAmt = DiscountAmt.negate();
				}

				mTab.setValue(""PayAmt"", InvoiceOpen.subtract(DiscountAmt));
				mTab.setValue(""DiscountAmt"", DiscountAmt);
				//  reset as dependent fields get reset
				ctx.setContext( WindowNo, ""C_Invoice_ID"", C_Invoice_ID.toString());
				mTab.setValue(""C_Invoice_ID"", C_Invoice_ID);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
			setCalloutActive(false);
			return e.getLocalizedMessage();
		}

		setCalloutActive(false);
		return docType(ctx, WindowNo, mTab, mField, value);
	}	//	invoice
"
org.compiere.model.CalloutPayment.order,CalloutPayment.java,"String order (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer C_Order_ID = (Integer)value;
		if (isCalloutActive()		//	assuming it is resetting value
			|| C_Order_ID == null || C_Order_ID.intValue() == 0)
			return """";
		setCalloutActive(true);
		mTab.setValue(""C_Invoice_ID"", null);
		mTab.setValue(""C_Charge_ID"", null);
		mTab.setValue(""IsPrepayment"", Boolean.TRUE);
		//
		mTab.setValue(""DiscountAmt"", Env.ZERO);
		mTab.setValue(""WriteOffAmt"", Env.ZERO);
		mTab.setValue(""IsOverUnderPayment"", Boolean.FALSE);
		mTab.setValue(""OverUnderAmt"", Env.ZERO);

		//
		String sql = ""SELECT C_BPartner_ID,C_Currency_ID, GrandTotal ""
			+ ""FROM C_Order WHERE C_Order_ID=?""; 	// #1
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_Order_ID.intValue());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				mTab.setValue(""C_BPartner_ID"", Integer.valueOf(rs.getInt(1)));
				int C_Currency_ID = rs.getInt(2);					//	Set Order Currency
				mTab.setValue(""C_Currency_ID"", Integer.valueOf(C_Currency_ID));
				//
				BigDecimal GrandTotal = rs.getBigDecimal(3);		//	Set Pay Amount
				if (GrandTotal == null)
					GrandTotal = Env.ZERO;
				mTab.setValue(""PayAmt"", GrandTotal);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
			setCalloutActive(false);
			return e.getLocalizedMessage();
		}

		setCalloutActive(false);
		return docType(ctx, WindowNo, mTab, mField, value);
	}	//	order
"
org.compiere.model.CalloutPayment.charge,CalloutPayment.java,"String charge (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer C_Charge_ID = (Integer)value;
		if (isCalloutActive()		//	assuming it is resetting value
			|| C_Charge_ID == null || C_Charge_ID.intValue() == 0)
			return """";
		setCalloutActive(true);
		mTab.setValue(""C_Invoice_ID"", null);
		mTab.setValue(""C_Order_ID"", null);
	//	mTab.setValue(""C_Project_ID"", null);
		mTab.setValue(""IsPrepayment"", Boolean.FALSE);
		//
		mTab.setValue(""DiscountAmt"", Env.ZERO);
		mTab.setValue(""WriteOffAmt"", Env.ZERO);
		mTab.setValue(""IsOverUnderPayment"", Boolean.FALSE);
		mTab.setValue(""OverUnderAmt"", Env.ZERO);
		setCalloutActive(false);
		return """";
	}	//	charge
"
org.compiere.model.CalloutPayment.docType,CalloutPayment.java,"String docType (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		int C_Invoice_ID = ctx.getContextAsInt( WindowNo, ""C_Invoice_ID"");
		int C_Order_ID = ctx.getContextAsInt( WindowNo, ""C_Order_ID"");
		int C_DocType_ID = ctx.getContextAsInt( WindowNo, ""C_DocType_ID"");
		log.fine(""Payment_DocType - C_Invoice_ID="" + C_Invoice_ID + "", C_DocType_ID="" + C_DocType_ID);
		MDocType dt = null;
		if (C_DocType_ID != 0)
		{
			dt = MDocType.get(ctx, C_DocType_ID);
			ctx.setIsSOTrx(WindowNo, dt.isSOTrx());
		}
		//	Invoice
		if (C_Invoice_ID != 0)
		{
			MInvoice inv = new MInvoice (ctx, C_Invoice_ID, null);
			if (dt != null)
			{
				if (inv.isSOTrx() != dt.isSOTrx())
					return ""PaymentDocTypeInvoiceInconsistent"";
			}
		}
		//	Order Waiting Payment (can only be SO)
		if (C_Order_ID != 0 && !dt.isSOTrx())
			return ""PaymentDocTypeInvoiceInconsistent"";

		return """";
	}	//	docType
"
org.compiere.model.CalloutPayment.amounts,CalloutPayment.java,"String amounts (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value, Object oldValue)
	{
		if (isCalloutActive())		//	assuming it is resetting value
			return """";
		int C_Invoice_ID = ctx.getContextAsInt( WindowNo, ""C_Invoice_ID"");
		//	New Payment
		if (ctx.getContextAsInt( WindowNo, ""C_Payment_ID"") == 0
			&& ctx.getContextAsInt( WindowNo, ""C_BPartner_ID"") == 0
			&& C_Invoice_ID == 0)
			return """";
		Integer cur = (Integer)mTab.getValue(""C_Currency_ID"");
		if (cur == null)
			return """";
		setCalloutActive(true);

		//	Changed Column
		String colName = mField.getColumnName();
		if (colName.equals(""IsOverUnderPayment"")	//	Set Over/Under Amt to Zero
			|| !""Y"".equals(ctx.getContext( WindowNo, ""IsOverUnderPayment"")))
			mTab.setValue(""OverUnderAmt"", Env.ZERO);

		int C_InvoicePaySchedule_ID = 0;
		if (ctx.getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_Invoice_ID"") == C_Invoice_ID
			&& ctx.getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_InvoicePaySchedule_ID"") != 0)
			C_InvoicePaySchedule_ID = ctx.getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_InvoicePaySchedule_ID"");

		//	Get Open Amount & Invoice Currency
		BigDecimal InvoiceOpenAmt = Env.ZERO;
		BigDecimal DiscountAmt = Env.ZERO;
		int C_Currency_Invoice_ID = 0;
		if (C_Invoice_ID != 0)
		{
			Timestamp ts = (Timestamp)mTab.getValue(""DateTrx"");
			if (ts == null)
				ts = new Timestamp(System.currentTimeMillis());
			String sql = ""SELECT C_BPartner_ID,C_Currency_ID,""		//	1..2
				+ "" invoiceOpen(C_Invoice_ID, ?),""					//	3		#1
				+ "" invoiceDiscount(C_Invoice_ID,?,?), IsSOTrx ""	//	4..5	#2/3
				+ ""FROM C_Invoice WHERE C_Invoice_ID=?"";			//			#4
			try
			{
				PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
				pstmt.setInt(1, C_InvoicePaySchedule_ID);
				pstmt.setTimestamp(2, ts);
				pstmt.setInt(3, C_InvoicePaySchedule_ID);
				pstmt.setInt(4, C_Invoice_ID);
				ResultSet rs = pstmt.executeQuery();
				if (rs.next())
				{
					C_Currency_Invoice_ID= rs.getInt(2);
					InvoiceOpenAmt = rs.getBigDecimal(3);		//	Set Invoice Open Amount
					if (InvoiceOpenAmt == null)
						InvoiceOpenAmt = Env.ZERO;
					DiscountAmt = rs.getBigDecimal(4);
					MInvoice invoice = new MInvoice(ctx, C_Invoice_ID, null);
					MDocType docType = new MDocType(ctx, invoice.getC_DocType_ID(), null);
					if (docType.isReturnTrx())
					{
						// Adjust discount amount for credit memos. Invoice Open Amt is already adjusted.
						DiscountAmt = DiscountAmt.negate();
					}
				}
				rs.close();
				pstmt.close();
			}
			catch (SQLException e)
			{
				log.log(Level.SEVERE, sql, e);
				setCalloutActive(false);
				return e.getLocalizedMessage();
			}
		}	//	get Invoice Info
		log.fine(""Open="" + InvoiceOpenAmt + "" Discount= ""+DiscountAmt
			+ "", C_Invoice_ID="" + C_Invoice_ID
			+ "", C_Currency_ID="" + C_Currency_Invoice_ID);

		//	Get Info from Tab
		BigDecimal PayAmt = (BigDecimal)(mTab.getValue(""PayAmt"")==null?Env.ZERO:mTab.getValue(""PayAmt""));
		BigDecimal WriteOffAmt = (BigDecimal)(mTab.getValue(""WriteOffAmt"")==null?Env.ZERO:mTab.getValue(""WriteOffAmt""));
		BigDecimal OverUnderAmt = (BigDecimal)(mTab.getValue(""OverUnderAmt"")==null?Env.ZERO:mTab.getValue(""OverUnderAmt""));
		BigDecimal EnteredDiscountAmt = (BigDecimal)(mTab.getValue(""DiscountAmt"")==null?Env.ZERO:mTab.getValue(""DiscountAmt""));

		log.fine(""Pay="" + PayAmt + "", Discount="" + EnteredDiscountAmt
			+ "", WriteOff="" + WriteOffAmt + "", OverUnderAmt="" + OverUnderAmt);
		//	Get Currency Info
		int C_Currency_ID = cur.intValue();
		MCurrency currency = MCurrency.get(ctx, C_Currency_ID);
		Timestamp ConvDate = (Timestamp)mTab.getValue(""DateTrx"");
		int C_ConversionType_ID = 0;
		Integer ii = (Integer)mTab.getValue(""C_ConversionType_ID"");
		if (ii != null)
			C_ConversionType_ID = ii.intValue();
		int AD_Client_ID = ctx.getContextAsInt( WindowNo, ""AD_Client_ID"");
		int AD_Org_ID = ctx.getContextAsInt( WindowNo, ""AD_Org_ID"");
		//	Get Currency Rate
		BigDecimal CurrencyRate = Env.ONE;
		if (C_Currency_ID > 0 && C_Currency_Invoice_ID > 0 &&
			C_Currency_ID != C_Currency_Invoice_ID
			|| colName.equals(""C_Currency_ID"") || colName.equals(""C_ConversionType_ID""))
		{
			log.fine(""InvCurrency="" + C_Currency_Invoice_ID
				+ "", PayCurrency="" + C_Currency_ID
				+ "", Date="" + ConvDate + "", Type="" + C_ConversionType_ID);
			CurrencyRate = MConversionRate.getRate (C_Currency_Invoice_ID, C_Currency_ID,
				ConvDate, C_ConversionType_ID, AD_Client_ID, AD_Org_ID);
			if (CurrencyRate == null || CurrencyRate.compareTo(Env.ZERO) == 0)
			{
			//	mTab.setValue(""C_Currency_ID"", Integer.valueOf(C_Currency_Invoice_ID));	//	does not work
				setCalloutActive(false);
				if (C_Currency_Invoice_ID == 0)
					return """";		//	no error message when no invoice is selected
				return ""NoCurrencyConversion"";
			}
			//
			InvoiceOpenAmt = InvoiceOpenAmt.multiply(CurrencyRate)
				.setScale(currency.getStdPrecision(), BigDecimal.ROUND_HALF_UP);
			DiscountAmt = DiscountAmt.multiply(CurrencyRate)
				.setScale(currency.getStdPrecision(), BigDecimal.ROUND_HALF_UP);
			log.fine(""Rate="" + CurrencyRate + "", InvoiceOpenAmt="" + InvoiceOpenAmt + "", DiscountAmt="" + DiscountAmt);
		}

		//	Currency Changed - convert all
		if (colName.equals(""C_Currency_ID"") || colName.equals(""C_ConversionType_ID""))
		{

			WriteOffAmt = WriteOffAmt.multiply(CurrencyRate)
				.setScale(currency.getStdPrecision(), BigDecimal.ROUND_HALF_UP);
			mTab.setValue(""WriteOffAmt"", WriteOffAmt);
			OverUnderAmt = OverUnderAmt.multiply(CurrencyRate)
				.setScale(currency.getStdPrecision(), BigDecimal.ROUND_HALF_UP);
			mTab.setValue(""OverUnderAmt"", OverUnderAmt);

			// nnayak - Entered Discount amount should be converted to entered currency
			EnteredDiscountAmt = EnteredDiscountAmt.multiply(CurrencyRate)
				.setScale(currency.getStdPrecision(), BigDecimal.ROUND_HALF_UP);
			mTab.setValue(""DiscountAmt"", EnteredDiscountAmt);

			PayAmt = InvoiceOpenAmt.subtract(DiscountAmt).subtract(WriteOffAmt).subtract(OverUnderAmt);
			mTab.setValue(""PayAmt"", PayAmt);

		}

		//	No Invoice - Set Discount, Witeoff, Under/Over to 0
		else if (C_Invoice_ID == 0)
		{
			if (Env.ZERO.compareTo(DiscountAmt) != 0)
				mTab.setValue(""DiscountAmt"", Env.ZERO);
			if (Env.ZERO.compareTo(WriteOffAmt) != 0)
				mTab.setValue(""WriteOffAmt"", Env.ZERO);
			if (Env.ZERO.compareTo(OverUnderAmt) != 0)
				mTab.setValue(""OverUnderAmt"", Env.ZERO);
		}
		//  PayAmt - calculate write off
		else if (colName.equals(""PayAmt""))
		{
			if (""Y"".equals(ctx.getContext( WindowNo, ""IsOverUnderPayment"" )))
			{
				OverUnderAmt = InvoiceOpenAmt.subtract(PayAmt).subtract(DiscountAmt).subtract(WriteOffAmt);
				if(Env.ZERO.compareTo(OverUnderAmt) > 0 )
				{
					if (OverUnderAmt.abs().compareTo(DiscountAmt) <=0)
						DiscountAmt = DiscountAmt.add(OverUnderAmt);
					else
						DiscountAmt = Env.ZERO;
					OverUnderAmt = InvoiceOpenAmt.subtract(PayAmt).subtract(DiscountAmt).subtract(WriteOffAmt);
				}
				mTab.setValue(""DiscountAmt"", DiscountAmt);
				mTab.setValue(""OverUnderAmt"", OverUnderAmt);
			}
			else
			{
				WriteOffAmt = InvoiceOpenAmt.subtract(PayAmt).subtract(DiscountAmt).subtract(OverUnderAmt);
				if(Env.ZERO.compareTo(WriteOffAmt) > 0 )
				{
					if (WriteOffAmt.abs().compareTo(DiscountAmt) <=0)
						DiscountAmt = DiscountAmt.add(WriteOffAmt);
					else
						DiscountAmt = Env.ZERO;
					WriteOffAmt = InvoiceOpenAmt.subtract(PayAmt).subtract(DiscountAmt).subtract(OverUnderAmt);
				}
				mTab.setValue(""DiscountAmt"", DiscountAmt);
				mTab.setValue(""WriteOffAmt"", WriteOffAmt);
			}
		}
		else    //  calculate PayAmt
		{
			/* nnayak - Allow reduction in discount, but not an increase. To give a discount that is higher
			 * than the calculated discount, users have to enter a write off.
			 * we need to prevent increase in discount only when user is changing the discountamt
			 * otherwise calculated discount should be retained when changing columns like
			 * Transaction date
			 * only when user manually changes the discount amount we should reset
			 * */		   			
			/* DiscountAmt will be negative for Return transactions (AP/AR credit memo) */
			if(colName.equals(""DiscountAmt""))
			{

				if ( Env.ZERO.compareTo(DiscountAmt) > 0 )
				{
					if(EnteredDiscountAmt.compareTo(DiscountAmt)>0)
						DiscountAmt = EnteredDiscountAmt;
				}
				else
				{
					if(EnteredDiscountAmt.compareTo(DiscountAmt)<0)
						DiscountAmt = EnteredDiscountAmt;
				}
			}
			PayAmt = InvoiceOpenAmt.subtract(DiscountAmt).subtract(WriteOffAmt).subtract(OverUnderAmt);
			mTab.setValue(""PayAmt"", PayAmt);
			mTab.setValue(""DiscountAmt"", DiscountAmt);
		}

		setCalloutActive(false);
		return """";
	}	//	amounts
"
org.compiere.model.MSource.get,MSource.java,"MSource get(Ctx ctx, int R_Source_ID)
    {
	    Integer key = Integer.valueOf(R_Source_ID);
	    MSource retValue = s_cache.get(ctx, key);
	    if (retValue != null)
		    return retValue;
	    retValue = new MSource(ctx, R_Source_ID, null);
	    if (retValue.get_ID() != 0)
		    s_cache.put(key, retValue);
	    return retValue;
    } //	get
"
org.compiere.model.MExpenseType.getProduct,MExpenseType.java,"MProduct getProduct()
	{
		if (m_product == null)
		{
			ArrayList<MProduct> products = MProduct.findAll(getCtx(), 
				""S_ExpenseType_ID="" + getS_ExpenseType_ID(), get_Trx());
			if (products.size() > 0)
				m_product = products.get(0);
		}
		return m_product;
	}	//	getProduct
"
org.compiere.model.MExpenseType.beforeSave,MExpenseType.java,"boolean beforeSave (boolean newRecord)
	{
		if (newRecord)
		{
			if (getValue() == null || getValue().length() == 0)
				setValue(getName());
			m_product = new MProduct(this);
			return m_product.save(get_Trx());
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MExpenseType.afterSave,MExpenseType.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!success)
			return success;
				
		MProduct prod = getProduct();
		if (prod.setExpenseType(this))
			prod.save(get_Trx());
		
		return success;
	}	//	afterSave
"
org.compiere.model.MClick.getUnprocessed,MClick.java,"MClick[] getUnprocessed(Ctx ctx)
	{
		ArrayList<MClick> list = new ArrayList<MClick> ();
		String sql = ""SELECT * FROM W_Click WHERE AD_Client_ID=? AND Processed = 'N'"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, ctx.getAD_Client_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				list.add (new MClick (ctx, rs, null));
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		MClick[] retValue = new MClick[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getUnprocessed
"
org.compiere.model.MClick.setTargetURL,MClick.java,"void setTargetURL(String TargetURL)
	{
		super.setTargetURL(TargetURL);
		super.setW_ClickCount_ID(0);
	}	//	setTargetURL
"
org.compiere.model.MClick.setW_ClickCount_ID,MClick.java,"void setW_ClickCount_ID ()
	{
		//	clean up url
		String url = getTargetURL();
		if (url == null || url.length() == 0)
			return;
		String exactURL = url;
		//	remove everything before first / .
		if (url.startsWith(""http://""))
			url = url.substring(7);
		int dot = url.indexOf('.');
		int slash = url.indexOf('/');
		while (dot > slash && slash != -1)
		{
			url = url.substring(slash+1);
			dot = url.indexOf('.');
			slash = url.indexOf('/');
		}
		//	remove everything after /
		if (slash != -1)
			url = url.substring(0, slash);
		log.fine(exactURL + "" -> "" + url);
		int W_ClickCount_ID = search (url, exactURL);
		//	try minumum
		if (W_ClickCount_ID == 0)
		{
			int lastDot = url.lastIndexOf('.');
			int firstDot = url.indexOf('.');
			while (lastDot != firstDot)
			{
				url = url.substring(firstDot+1);
				lastDot = url.lastIndexOf('.');
				firstDot = url.indexOf('.');
			}
			log.fine(exactURL + "" -> "" + url);
			W_ClickCount_ID = search (url, exactURL);
		}
		//	Not found
		if (W_ClickCount_ID == 0)
		{
			log.warning (""Not found: "" + url 
				+ "" ("" + exactURL + "") Referrer="" + getReferrer());
			return;
		}
		//	OK
		setProcessed(true);
		super.setW_ClickCount_ID (W_ClickCount_ID);
	}	//	setW_ClickCount_ID
"
org.compiere.model.MClick.search,MClick.java,"int search (String url, String exactURL)
	{
		String sql = ""SELECT W_ClickCount_ID, TargetURL FROM W_ClickCount WHERE TargetURL LIKE ?"";
		int W_ClickCount_ID = 0;
		int exactW_ClickCount_ID = 0;
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setString(1, ""%"" + url + ""%"");
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				W_ClickCount_ID = rs.getInt(1);
				if (exactURL.equals(rs.getString(2)))
				{
					exactW_ClickCount_ID = W_ClickCount_ID;
					break;
				}
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			log.log(Level.SEVERE, sql, ex);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;
		//	Set Click Count
		if (exactW_ClickCount_ID != 0)
			W_ClickCount_ID = exactW_ClickCount_ID;
		return W_ClickCount_ID;
	}	//	search
"
org.compiere.model.MClick.beforeSave,MClick.java,"boolean beforeSave (boolean newRecord)
	{
		if (getW_ClickCount_ID() == 0)
			setW_ClickCount_ID();
		return true;
	}	//	beforeSave
"
org.compiere.model.MClick.main,MClick.java,"void main (String[] args)
	{
		Compiere.startup(true);
		Env.getCtx().setContext(""#AD_Client_ID"", 1000000);
		MClick[] clicks = getUnprocessed(Env.getCtx());
		int counter = 0;
		for (MClick click : clicks) {
			if (click.getW_ClickCount_ID() == 0)
			{
				click.setW_ClickCount_ID();
				if (click.getW_ClickCount_ID() != 0)
				{
					click.save();
					counter++;
				}
			}
		}
		System.out.println(""#"" + counter);
	}	//	main
"
org.compiere.model.MPeriodControl.isClosed,MPeriodControl.java,"boolean isClosed()
	{
		return PERIODSTATUS_Closed.equals(getPeriodStatus())
			|| PERIODSTATUS_PermanentlyClosed.equals(getPeriodStatus());
	}	//	isOpen
"
org.compiere.model.MPeriodControl.isOpen,MPeriodControl.java,"boolean isOpen()
	{
		return PERIODSTATUS_Open.equals(getPeriodStatus());
	}	//	isOpen
"
org.compiere.model.MPeriodControl.toString,MPeriodControl.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MPeriodControl["");
		sb.append(get_ID()).append("","").append(getDocBaseType())
			.append("",Status="").append(getPeriodStatus())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MUserMail.isDelivered,MUserMail.java,"boolean isDelivered()
	{
		String s = getIsDelivered();
		return s != null 
			&& ISDELIVERED_Yes.equals(s);
	}	//	isDelivered
"
org.compiere.model.MUserMail.isDeliveredNo,MUserMail.java,"boolean isDeliveredNo()
	{
		String s = getIsDelivered();
		return s == null 
			|| ISDELIVERED_No.equals(s);
	}	//	isDelivered
"
org.compiere.model.MUserMail.isDeliveredUnknown,MUserMail.java,"boolean isDeliveredUnknown()
	{
		String s = getIsDelivered();
		return s == null;
	}	//	isDeliveredUnknown
"
org.compiere.model.CalloutInventory.product,CalloutInventory.java,"String product (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		if (isCalloutActive())
			return """";
		//	overkill - see new implementation
		Integer InventoryLine = (Integer)mTab.getValue(""M_InventoryLine_ID"");
		BigDecimal bd = null;

		/**
		 * kviiksaar: SourceForge 1778282
		 *
		 * Modified for update Book Qty on existing records.
		 * Also checks the old ASI and removes it if product has been change.
		 */
		if (InventoryLine != null && InventoryLine.intValue() != 0) {
			MInventoryLine _ILine = new MInventoryLine(ctx, InventoryLine, null);
			Integer M_Product_ID = (Integer)mTab.getValue(""M_Product_ID"");
			Integer M_Locator_ID = (Integer)mTab.getValue(""M_Locator_ID"");
			Integer M_AttributeSetInstance_ID = 0;
			// if product or locator has changed recalculate Book Qty
			if (M_Product_ID != null && M_Product_ID != _ILine.getM_Product_ID() ||
					M_Locator_ID !=null && M_Locator_ID != _ILine.getM_Locator_ID()) {
				setCalloutActive(true);
				// Check ASI - if product has been changed remove old ASI
				if (M_Product_ID == _ILine.getM_Product_ID()) {
					M_AttributeSetInstance_ID = (Integer)mTab.getValue(""M_AttributeSetInstance_ID"");
					if( M_AttributeSetInstance_ID == null )
						M_AttributeSetInstance_ID = 0;
				} else {
					mTab.setValue(""M_AttributeSetInstance_ID"", null);
				}
				try {
					bd = setQtyBook(M_AttributeSetInstance_ID, M_Product_ID, M_Locator_ID);
					mTab.setValue(""QtyBook"", bd);
				} catch (Exception e) {
					return mTab.setValue(""QtyBook"", bd);
				}
			}
			setCalloutActive(false);
			return """";
		}

		//	New Line - Get Book Value
		int M_Product_ID = 0;
		Integer Product = (Integer)mTab.getValue(""M_Product_ID"");
		if (Product != null)
			M_Product_ID = Product.intValue();
		if (M_Product_ID == 0)
			return """";
		int M_Locator_ID = 0;
		Integer Locator = (Integer)mTab.getValue(""M_Locator_ID"");
		if (Locator != null)
			M_Locator_ID = Locator.intValue();
		if (M_Locator_ID == 0)
			return """";

		setCalloutActive(true);
		//	Set Attribute
		int M_AttributeSetInstance_ID = 0;
		Integer ASI = (Integer)mTab.getValue(""M_AttributeSetInstance_ID"");
		if (ASI != null)
			M_AttributeSetInstance_ID = ASI.intValue();
		//	Product Selection
		if (ctx.getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_Product_ID"") == M_Product_ID)
		{
			M_AttributeSetInstance_ID = ctx.getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_AttributeSetInstance_ID"");
			if (M_AttributeSetInstance_ID != 0)
				mTab.setValue(""M_AttributeSetInstance_ID"", Integer.valueOf(M_AttributeSetInstance_ID));
			else
				mTab.setValue(""M_AttributeSetInstance_ID"", null);
		}

		// kviiksaar: Call's now the extracted function
		try {
			bd = setQtyBook(M_AttributeSetInstance_ID, M_Product_ID, M_Locator_ID);
			mTab.setValue(""QtyBook"", bd);
		} catch (Exception e) {
			return mTab.setValue(""QtyBook"", bd);
		}

		//
		log.info(""M_Product_ID="" + M_Product_ID
			+ "", M_Locator_ID="" + M_Locator_ID
			+ "", M_AttributeSetInstance_ID="" + M_AttributeSetInstance_ID
			+ "" - QtyBook="" + bd);
		setCalloutActive(false);
		return """";
	}   //  product
"
org.compiere.model.CalloutInventory.setQtyBook,CalloutInventory.java,"BigDecimal setQtyBook (int M_AttributeSetInstance_ID, int M_Product_ID, int M_Locator_ID) throws Exception {
		// Set QtyBook from first storage location
		BigDecimal bd = null;
		String sql = ""SELECT QtyOnHand FROM M_Storage ""
			+ ""WHERE M_Product_ID=?""	//	1
			+ "" AND M_Locator_ID=?""		//	2
			+ "" AND M_AttributeSetInstance_ID=?"";
		if (M_AttributeSetInstance_ID == 0)
			sql = ""SELECT SUM(QtyOnHand) FROM M_Storage ""
			+ ""WHERE M_Product_ID=?""	//	1
			+ "" AND M_Locator_ID=?"";	//	2

		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, M_Product_ID);
			pstmt.setInt(2, M_Locator_ID);
			if (M_AttributeSetInstance_ID != 0)
				pstmt.setInt(3, M_AttributeSetInstance_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				bd = rs.getBigDecimal(1);
				if (bd != null)
					return bd;
			} else {
				// gwu: 1719401: clear Booked Quantity to zero first in case the query returns no rows,
				// for example when the locator has never stored a particular product.
				return new BigDecimal(0);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
			setCalloutActive(false);
			throw new Exception(e.getLocalizedMessage());
		}
		return new BigDecimal(0);
	}
"
org.compiere.model.MAssetDelivery.toString,MAssetDelivery.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MAssetDelivery["")
			.append (get_ID ())
			.append("",A_Asset_ID="").append(getA_Asset_ID())
			.append("",MovementDate="").append(getMovementDate())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MInvoiceBatch.getLines,MInvoiceBatch.java,"MInvoiceBatchLine[] getLines (boolean reload)
	{
		if (m_lines != null && !reload)
			return m_lines;
		String sql = ""SELECT * FROM C_InvoiceBatchLine WHERE C_InvoiceBatch_ID=? ORDER BY Line"";
		ArrayList<MInvoiceBatchLine> list = new ArrayList<MInvoiceBatchLine>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getC_InvoiceBatch_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				list.add (new MInvoiceBatchLine (getCtx(), rs, get_Trx()));
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		m_lines = new MInvoiceBatchLine[list.size ()];
		list.toArray (m_lines);
		return m_lines;
	}	//	getLines
"
org.compiere.model.MInvoiceBatch.setProcessed,MInvoiceBatch.java,"void setProcessed (boolean processed)
	{
		super.setProcessed (processed);
		if (get_ID() == 0)
			return;
		String set = ""SET Processed='""
			+ (processed ? ""Y"" : ""N"")
			+ ""' WHERE C_InvoiceBatch_ID="" + getC_InvoiceBatch_ID();
		int noLine = DB.executeUpdate(""UPDATE C_InvoiceBatchLine "" + set, get_Trx());
		m_lines = null;
		log.fine(processed + "" - Lines="" + noLine);
	}	//	setProcessed
"
org.compiere.model.MMovement.getLines,MMovement.java,"MMovementLine[] getLines (boolean requery)
	{
		if ((m_lines != null) && !requery)
			return m_lines;
		//
		ArrayList<MMovementLine> list = new ArrayList<MMovementLine>();
		String sql = ""SELECT * FROM M_MovementLine WHERE M_Movement_ID=? ORDER BY Line"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getM_Movement_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				list.add (new MMovementLine (getCtx(), rs, get_Trx()));
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		} catch (Exception e)
		{
			log.log(Level.SEVERE, ""getLines"", e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		} catch (Exception e)
		{
			pstmt = null;
		}

		m_lines = new MMovementLine[list.size ()];
		list.toArray (m_lines);
		return m_lines;
	}	//	getLines
"
org.compiere.model.MMovement.getConfirmations,MMovement.java,"MMovementConfirm[] getConfirmations(boolean requery)
	{
		if ((m_confirms != null) && !requery)
			return m_confirms;

		ArrayList<MMovementConfirm> list = new ArrayList<MMovementConfirm>();
		String sql = ""SELECT * FROM M_MovementConfirm WHERE M_Movement_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getM_Movement_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add(new MMovementConfirm(getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""getConfirmations"", e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

		m_confirms = new MMovementConfirm[list.size ()];
		list.toArray (m_confirms);
		return m_confirms;
	}	//	getConfirmations
"
org.compiere.model.MMovement.addDescription,MMovement.java,"void addDescription (String description)
	{
		String desc = getDescription();
		if (desc == null)
			setDescription(description);
		else
			setDescription(desc + "" | "" + description);
	}	//	addDescription
"
org.compiere.model.MMovement.getDocumentInfo,MMovement.java,"String getDocumentInfo()
	{
		MDocType dt = MDocType.get(getCtx(), getC_DocType_ID());
		return dt.getName() + "" "" + getDocumentNo();
	}	//	getDocumentInfo
"
org.compiere.model.MMovement.createPDF,MMovement.java,"File createPDF ()
	{
		try
		{
			File temp = File.createTempFile(get_TableName()+get_ID()+""_"", "".pdf"");
			return createPDF (temp);
		}
		catch (Exception e)
		{
			log.severe(""Could not create PDF - "" + e.getMessage());
		}
		return null;
	}	//	getPDF
"
org.compiere.model.MMovement.createPDF,MMovement.java,"File createPDF (File file)
	{
	//	ReportEngine re = ReportEngine.get (getCtx(), ReportEngine.INVOICE, getC_Invoice_ID());
	//	if (re == null)
			return null;
	//	return re.getPDF(file);
	}	//	createPDF
"
org.compiere.model.MMovement.beforeSave,MMovement.java,"boolean beforeSave (boolean newRecord)
	{
		if (getC_DocType_ID() == 0)
		{
			MDocType types[] = MDocType.getOfDocBaseType(getCtx(), MDocBaseType.DOCBASETYPE_MaterialMovement);
			if (types.length > 0)	//	get first
				setC_DocType_ID(types[0].getC_DocType_ID());
			else
			{
				log.saveError(""Error"", Msg.parseTranslation(getCtx(), ""@NotFound@ @C_DocType_ID@""));
				return false;
			}
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MMovement.setProcessed,MMovement.java,"void setProcessed (boolean processed)
	{
		super.setProcessed (processed);
		if (get_ID() == 0)
			return;
		String sql = ""UPDATE M_MovementLine SET Processed='""
			+ (processed ? ""Y"" : ""N"")
			+ ""' WHERE M_Movement_ID="" + getM_Movement_ID();
		int noLine = DB.executeUpdate(sql, get_Trx());
		m_lines = null;
		log.fine(""Processed="" + processed + "" - Lines="" + noLine);
	}	//	setProcessed
"
org.compiere.model.MMovement.processIt,MMovement.java,"boolean processIt (String processAction)
	{
		m_processMsg = null;
		DocumentEngine engine = new DocumentEngine (this, getDocStatus());
		return engine.processIt (processAction, getDocAction());
	}	//	processIt
"
org.compiere.model.MMovement.unlockIt,MMovement.java,"boolean unlockIt()
	{
		log.info(toString());
		setProcessing(false);
		return true;
	}	//	unlockIt
"
org.compiere.model.MMovement.invalidateIt,MMovement.java,"boolean invalidateIt()
	{
		log.info(toString());
		setDocAction(DOCACTION_Prepare);
		return true;
	}	//	invalidateIt
"
org.compiere.model.MMovement.prepareIt,MMovement.java,"String prepareIt()
	{
		log.info(toString());
		m_processMsg = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_BEFORE_PREPARE);
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;
		MDocType dt = MDocType.get(getCtx(), getC_DocType_ID());

		MMovementLine[] lines = getLines(true);
		if (lines.length == 0)
		{
			m_processMsg = ""@NoLines@"";
			return DocActionConstants.STATUS_Invalid;
		}

		//	Std Period open?
		ArrayList<MLocator> locList = new ArrayList<MLocator>();
		for (MMovementLine mLine : lines) {
			locList.add(new MLocator(getCtx(), mLine.getM_Locator_ID(), null));
			locList.add(new MLocator(getCtx(), mLine.getM_LocatorTo_ID(), null));
		}
		MLocator[] locLines = new MLocator[locList.size()];
		locList.toArray(locLines);
		m_processMsg = MPeriod.isOpen(this, locLines, getMovementDate(), dt.getDocBaseType());
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;

		//	Add up Amounts

		/* nnayak - Bug 1750251 : check material policy and update storage
		   at the line level in completeIt()*/
		//checkMaterialPolicy();

		//	Confirmation
		if (dt.isInTransit())
			createConfirmation();

		m_justPrepared = true;
		if (!DOCACTION_Complete.equals(getDocAction()))
			setDocAction(DOCACTION_Complete);
		return DocActionConstants.STATUS_InProgress;
	}	//	prepareIt
"
org.compiere.model.MMovement.createConfirmation,MMovement.java,"void createConfirmation()
	{
		MMovementConfirm[] confirmations = getConfirmations(false);
		if (confirmations.length > 0)
			return;

		//	Create Confirmation
		MMovementConfirm.create (this, false);
	}	//	createConfirmation
"
org.compiere.model.MMovement.approveIt,MMovement.java,"boolean  approveIt()
	{
		log.info(toString());
		setIsApproved(true);
		return true;
	}	//	approveIt
"
org.compiere.model.MMovement.rejectIt,MMovement.java,"boolean rejectIt()
	{
		log.info(toString());
		setIsApproved(false);
		return true;
	}	//	rejectIt
"
org.compiere.model.MMovement.completeIt,MMovement.java,"String completeIt()
	{
		//	Re-Check
		if (!m_justPrepared)
		{
			String status = prepareIt();
			if (!DocActionConstants.STATUS_InProgress.equals(status))
				return status;
		}

		//	Outstanding (not processed) Incoming Confirmations ?
		MMovementConfirm[] confirmations = getConfirmations(true);
		for (MMovementConfirm confirm : confirmations)
		{
			if (!confirm.isProcessed())
			{
				m_processMsg = ""Open: @M_MovementConfirm_ID@ - ""
					+ confirm.getDocumentNo();
				return DocActionConstants.STATUS_InProgress;
			}
		}

		//	Implicit Approval
		if (!isApproved())
			approveIt();
		log.info(toString());

		//
		MMovementLine[] lines = getLines(m_justPrepared);
		for (MMovementLine line : lines)
		{
			/* nnayak - Bug 1750251 : If you have multiple lines for the same product
			in the same Sales Order, or if the generate shipment process was generating
			multiple shipments for the same product in the same run, the first layer
			was getting consumed by all the shipments. As a result, the first layer had
			negative Inventory even though there were other positive layers. */
			checkMaterialPolicy(line);

			MTransaction trxFrom = null;
			if (line.getM_AttributeSetInstance_ID() == 0)
			{
				MMovementLineMA mas[] = MMovementLineMA.get(getCtx(),
					line.getM_MovementLine_ID(), get_Trx());
				for (MMovementLineMA ma : mas) {
					//
					MStorage storageFrom = MStorage.get(getCtx(), line.getM_Locator_ID(),
						line.getM_Product_ID(), ma.getM_AttributeSetInstance_ID(), get_Trx());
					if (storageFrom == null)
						storageFrom = MStorage.getCreate(getCtx(), line.getM_Locator_ID(),
							line.getM_Product_ID(), ma.getM_AttributeSetInstance_ID(), get_Trx());
					//
					MStorage storageTo = MStorage.get(getCtx(), line.getM_LocatorTo_ID(),
						line.getM_Product_ID(), ma.getM_AttributeSetInstance_ID(), get_Trx());
					if (storageTo == null)
						storageTo = MStorage.getCreate(getCtx(), line.getM_LocatorTo_ID(),
							line.getM_Product_ID(), ma.getM_AttributeSetInstance_ID(), get_Trx());
					//
					storageFrom.setQtyOnHand(storageFrom.getQtyOnHand().subtract(ma.getMovementQty()));
					if (!storageFrom.save(get_Trx()))
					{
						ValueNamePair pp = CLogger.retrieveError();
						if (pp != null)
							m_processMsg = pp.getName();
						else
							m_processMsg = ""Storage From not updated (MA)"";
						return DocActionConstants.STATUS_Invalid;
					}
					//
					storageTo.setQtyOnHand(storageTo.getQtyOnHand().add(ma.getMovementQty()));
					if (!storageTo.save(get_Trx()))
					{
						ValueNamePair pp = CLogger.retrieveError();
						if (pp != null)
							m_processMsg = pp.getName();
						else
							m_processMsg = ""Storage To not updated (MA)"";
						return DocActionConstants.STATUS_Invalid;
					}

					//
					trxFrom = new MTransaction (getCtx(), line.getAD_Org_ID(),
						X_M_Transaction.MOVEMENTTYPE_MovementFrom,
						line.getM_Locator_ID(), line.getM_Product_ID(), ma.getM_AttributeSetInstance_ID(),
						ma.getMovementQty().negate(), getMovementDate(), get_Trx());
					trxFrom.setM_MovementLine_ID(line.getM_MovementLine_ID());
					if (!trxFrom.save())
					{
						m_processMsg = ""Transaction From not inserted (MA)"";
						return DocActionConstants.STATUS_Invalid;
					}
					//
					MTransaction trxTo = new MTransaction (getCtx(), line.getAD_Org_ID(),
						X_M_Transaction.MOVEMENTTYPE_MovementTo,
						line.getM_LocatorTo_ID(), line.getM_Product_ID(), ma.getM_AttributeSetInstance_ID(),
						ma.getMovementQty(), getMovementDate(), get_Trx());
					trxTo.setM_MovementLine_ID(line.getM_MovementLine_ID());
					if (!trxTo.save())
					{
						m_processMsg = ""Transaction To not inserted (MA)"";
						return DocActionConstants.STATUS_Invalid;
					}
				}
			}
			//	Fallback - We have ASI
			if (trxFrom == null)
			{
				MStorage storageFrom = MStorage.get(getCtx(), line.getM_Locator_ID(),
					line.getM_Product_ID(), line.getM_AttributeSetInstance_ID(), get_Trx());
				if (storageFrom == null)
					storageFrom = MStorage.getCreate(getCtx(), line.getM_Locator_ID(),
						line.getM_Product_ID(), line.getM_AttributeSetInstance_ID(), get_Trx());
				//
				MStorage storageTo = MStorage.get(getCtx(), line.getM_LocatorTo_ID(),
					line.getM_Product_ID(), line.getM_AttributeSetInstanceTo_ID(), get_Trx());
				if (storageTo == null)
					storageTo = MStorage.getCreate(getCtx(), line.getM_LocatorTo_ID(),
						line.getM_Product_ID(), line.getM_AttributeSetInstanceTo_ID(), get_Trx());
				//
				storageFrom.setQtyOnHand(storageFrom.getQtyOnHand().subtract(line.getMovementQty()));
				if (!storageFrom.save(get_Trx()))
				{
					ValueNamePair pp = CLogger.retrieveError();
					if (pp != null)
						m_processMsg = pp.getName();
					else
						m_processMsg = ""Storage From not updated"";
					return DocActionConstants.STATUS_Invalid;
				}
				//
				storageTo.setQtyOnHand(storageTo.getQtyOnHand().add(line.getMovementQty()));
				if (!storageTo.save(get_Trx()))
				{
					ValueNamePair pp = CLogger.retrieveError();
					if (pp != null)
						m_processMsg = pp.getName();
					else
						m_processMsg = ""Storage To not updated"";
					return DocActionConstants.STATUS_Invalid;
				}

				//
				trxFrom = new MTransaction (getCtx(), line.getAD_Org_ID(),
					X_M_Transaction.MOVEMENTTYPE_MovementFrom,
					line.getM_Locator_ID(), line.getM_Product_ID(), line.getM_AttributeSetInstance_ID(),
					line.getMovementQty().negate(), getMovementDate(), get_Trx());
				trxFrom.setM_MovementLine_ID(line.getM_MovementLine_ID());
				if (!trxFrom.save())
				{
					m_processMsg = ""Transaction From not inserted"";
					return DocActionConstants.STATUS_Invalid;
				}
				//
				MTransaction trxTo = new MTransaction (getCtx(), line.getAD_Org_ID(),
					X_M_Transaction.MOVEMENTTYPE_MovementTo,
					line.getM_LocatorTo_ID(), line.getM_Product_ID(), line.getM_AttributeSetInstanceTo_ID(),
					line.getMovementQty(), getMovementDate(), get_Trx());
				trxTo.setM_MovementLine_ID(line.getM_MovementLine_ID());
				if (!trxTo.save())
				{
					m_processMsg = ""Transaction To not inserted"";
					return DocActionConstants.STATUS_Invalid;
				}
			}	//	Fallback
		}	//	for all lines
		//	User Validation
		String valid = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_AFTER_COMPLETE);
		if (valid != null)
		{
			m_processMsg = valid;
			return DocActionConstants.STATUS_Invalid;
		}

		//
		setProcessed(true);
		setDocAction(DOCACTION_Close);
		return DocActionConstants.STATUS_Completed;
	}	//	completeIt
"
org.compiere.model.MMovement.checkMaterialPolicy,MMovement.java,"void checkMaterialPolicy(MMovementLine line)
	{
		int no = MMovementLineMA.deleteMovementLineMA(line.getM_MovementLine_ID(), get_Trx());
		if (no > 0)
			log.config(""Delete old #"" + no);

		MClient client = MClient.get(getCtx());
		boolean needSave = false;

		//	Attribute Set Instance
		if (line.getM_AttributeSetInstance_ID() == 0)
		{
			MProduct product = MProduct.get(getCtx(), line.getM_Product_ID());
			MProductCategory pc = MProductCategory.get(getCtx(), product.getM_Product_Category_ID());
			String MMPolicy = pc.getMMPolicy();
			if ((MMPolicy == null) || (MMPolicy.length() == 0))
				MMPolicy = client.getMMPolicy();
				//
			MStorage[] storages = MStorage.getAllWithASI(getCtx(),
				line.getM_Product_ID(),	line.getM_Locator_ID(),
				X_AD_Client.MMPOLICY_FiFo.equals(MMPolicy), get_Trx());
			BigDecimal qtyToDeliver = line.getMovementQty();
			for (int ii = 0; ii < storages.length; ii++)
			{
				MStorage storage = storages[ii];
				BigDecimal qtyAvailable = storage.getQtyOnHand().subtract(
						storage.getQtyDedicated()).subtract(
						storage.getQtyAllocated());
				if(qtyAvailable.compareTo(Env.ZERO) <= 0)
					continue;

				if (ii == 0)
				{
					if (qtyAvailable.compareTo(qtyToDeliver) >= 0)
					{
						line.setM_AttributeSetInstance_ID(storage.getM_AttributeSetInstance_ID());
						needSave = true;
						log.config(""Direct - "" + line);
						qtyToDeliver = Env.ZERO;
					}
					else
					{
						log.config(""Split - "" + line);
						MMovementLineMA ma = new MMovementLineMA (line,
							storage.getM_AttributeSetInstance_ID(),
							qtyAvailable);
						if (!ma.save())
							;
						qtyToDeliver = qtyToDeliver.subtract(qtyAvailable);
						log.fine(""#"" + ii + "": "" + ma + "", QtyToDeliver="" + qtyToDeliver);
					}
				}
				else	//	 create addl material allocation
				{
					MMovementLineMA ma = new MMovementLineMA (line,
						storage.getM_AttributeSetInstance_ID(),
						qtyToDeliver);
					if (qtyAvailable.compareTo(qtyToDeliver) >= 0)
						qtyToDeliver = Env.ZERO;
					else
					{
						ma.setMovementQty(qtyAvailable);
						qtyToDeliver = qtyToDeliver.subtract(qtyAvailable);
					}
						if (!ma.save())
							;
						log.fine(""#"" + ii + "": "" + ma + "", QtyToDeliver="" + qtyToDeliver);
				}
				if (qtyToDeliver.signum() == 0)
					break;
			}	//	 for all storages

			//	No AttributeSetInstance found for remainder
			if (qtyToDeliver.signum() != 0)
			{
				MMovementLineMA ma = new MMovementLineMA (line,
					0, qtyToDeliver);
				if (!ma.save())
					;
				log.fine(""##: "" + ma);
			}
		}	//	attributeSetInstance


		if (needSave && !line.save())
			log.severe(""NOT saved "" + line);

	}	//	checkMaterialPolicy
"
org.compiere.model.MMovement.voidIt,MMovement.java,"boolean voidIt()
	{
		log.info(toString());
		if (DOCSTATUS_Closed.equals(getDocStatus())
			|| DOCSTATUS_Reversed.equals(getDocStatus())
			|| DOCSTATUS_Voided.equals(getDocStatus()))
		{
			m_processMsg = ""Document Closed: "" + getDocStatus();
			return false;
		}

		//	Not Processed
		if (DOCSTATUS_Drafted.equals(getDocStatus())
			|| DOCSTATUS_Invalid.equals(getDocStatus())
			|| DOCSTATUS_InProgress.equals(getDocStatus())
			|| DOCSTATUS_Approved.equals(getDocStatus())
			|| DOCSTATUS_NotApproved.equals(getDocStatus()) )
		{
			//	Set lines to 0
			MMovementLine[] lines = getLines(false);
			for (MMovementLine line : lines) {
				BigDecimal old = line.getMovementQty();
				if (old.compareTo(Env.ZERO) != 0)
				{
					line.setMovementQty(Env.ZERO);
					line.addDescription(""Void ("" + old + "")"");
					line.save(get_Trx());
				}
			}
		}
		else
		{
			return reverseCorrectIt();
		}

		setProcessed(true);
		setDocAction(DOCACTION_None);
		return true;
	}	//	voidIt
"
org.compiere.model.MMovement.closeIt,MMovement.java,"boolean closeIt()
	{
		log.info(toString());

		//	Close Not delivered Qty
		setDocAction(DOCACTION_None);
		return true;
	}	//	closeIt
"
org.compiere.model.MMovement.reverseCorrectIt,MMovement.java,"boolean reverseCorrectIt()
	{
		log.info(toString());
		MDocType dt = MDocType.get(getCtx(), getC_DocType_ID());
		//
		MMovementLine[] oLines = getLines(true);
		m_processMsg = MPeriod.isOpen(this, oLines, getMovementDate(), dt.getDocBaseType());
		if (m_processMsg != null)
			return false;

		//	Deep Copy
		MMovement reversal = new MMovement(getCtx(), 0, get_Trx());
		copyValues(this, reversal, getAD_Client_ID(), getAD_Org_ID());
		reversal.setDocStatus(DOCSTATUS_Drafted);
		reversal.setDocAction(DOCACTION_Complete);
		reversal.setIsApproved (false);
		reversal.setIsInTransit (false);
		reversal.setPosted(false);
		reversal.setProcessed(false);
		reversal.addDescription(""{->"" + getDocumentNo() + "")"");
		if (!reversal.save())
		{
			m_processMsg = ""Could not create Movement Reversal"";
			return false;
		}

		//	Reverse Line Qty
		for (MMovementLine oLine : oLines) {
			MMovementLine rLine = new MMovementLine(getCtx(), 0, get_Trx());
			copyValues(oLine, rLine, oLine.getAD_Client_ID(), oLine.getAD_Org_ID());
			rLine.setM_Movement_ID(reversal.getM_Movement_ID());
			//
			rLine.setMovementQty(rLine.getMovementQty().negate());
			rLine.setTargetQty(Env.ZERO);
			rLine.setScrappedQty(Env.ZERO);
			rLine.setConfirmedQty(Env.ZERO);
			rLine.setProcessed(false);
			if (!rLine.save())
			{
				m_processMsg = ""Could not create Movement Reversal Line"";
				return false;
			}
		}
		//
		if (!reversal.processIt(DocActionConstants.ACTION_Complete))
		{
			m_processMsg = ""Reversal ERROR: "" + reversal.getProcessMsg();
			return false;
		}
		reversal.closeIt();
		reversal.setDocStatus(DOCSTATUS_Reversed);
		reversal.setDocAction(DOCACTION_None);
		reversal.save();
		m_processMsg = reversal.getDocumentNo();

		//	Update Reversed (this)
		addDescription(""("" + reversal.getDocumentNo() + ""<-)"");
		setProcessed(true);
		setDocStatus(DOCSTATUS_Reversed);	//	may come from void
		setDocAction(DOCACTION_None);

		return true;
	}	//	reverseCorrectionIt

	/**
	 * 	Reverse Accrual - none
	 * 	@return false
	 */
	public boolean reverseAccrualIt()
	{
		log.info(toString());
		return false;
	}	//	reverseAccrualIt

	/**
	 * 	Re-activate
	 * 	@return false
	 */
	public boolean reActivateIt()
	{
		log.info(toString());
		return false;
	}	//	reActivateIt


	/*************************************************************************
	 * 	Get Summary
	 *	@return Summary of Document
	 */
	public String getSummary()
	{
		StringBuffer sb = new StringBuffer();
		sb.append(getDocumentNo());
		//	: Total Lines = 123.00 (#1)
		sb.append("": "")
			.append(Msg.translate(getCtx(),""ApprovalAmt"")).append(""="").append(getApprovalAmt())
			.append("" (#"").append(getLines(false).length).append("")"");
		//	 - Description
		if ((getDescription() != null) && (getDescription().length() > 0))
			sb.append("" - "").append(getDescription());
		return sb.toString();
	}	//	getSummary

	/**
	 * 	String Representation
	 *	@return info
	 */
	@Override
	public String toString()
	{
		StringBuffer sb = new StringBuffer (""MMovement["");
		sb.append (get_ID ())
			.append (""-"").append (getDocumentNo())
			.append (""]"");
		return sb.toString ();
	}	//	toString

	/**
	 * 	Get Process Message
	 *	@return clear text error message
	 */
	public String getProcessMsg()
	{
		return m_processMsg;
	}	//	getProcessMsg

	/**
	 * 	Get Document Owner (Responsible)
	 *	@return AD_User_ID
	 */
	public int getDoc_User_ID()
	{
		return getCreatedBy();
	}	//	getDoc_User_ID

	/**
	 * 	Get Document Currency
	 *	@return C_Currency_ID
	 */
	public int getC_Currency_ID()
	{
	//	MPriceList pl = MPriceList.get(getCtx(), getM_PriceList_ID());
	//	return pl.getC_Currency_ID();
		return 0;
	}	//	getC_Currency_ID

}	//	MMovement
"
org.compiere.model.MMovement.reverseAccrualIt,MMovement.java,"boolean reverseAccrualIt()
	{
		log.info(toString());
		return false;
	}	//	reverseAccrualIt
"
org.compiere.model.MMovement.reActivateIt,MMovement.java,"boolean reActivateIt()
	{
		log.info(toString());
		return false;
	}	//	reActivateIt
"
org.compiere.model.MMovement.getSummary,MMovement.java,"String getSummary()
	{
		StringBuffer sb = new StringBuffer();
		sb.append(getDocumentNo());
		//	: Total Lines = 123.00 (#1)
		sb.append("": "")
			.append(Msg.translate(getCtx(),""ApprovalAmt"")).append(""="").append(getApprovalAmt())
			.append("" (#"").append(getLines(false).length).append("")"");
		//	 - Description
		if ((getDescription() != null) && (getDescription().length() > 0))
			sb.append("" - "").append(getDescription());
		return sb.toString();
	}	//	getSummary
"
org.compiere.model.MMovement.toString,MMovement.java,"String toString()
	{
		StringBuffer sb = new StringBuffer (""MMovement["");
		sb.append (get_ID ())
			.append (""-"").append (getDocumentNo())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MMovement.getProcessMsg,MMovement.java,"String getProcessMsg()
	{
		return m_processMsg;
	}	//	getProcessMsg
"
org.compiere.model.MMovement.getDoc_User_ID,MMovement.java,"int getDoc_User_ID()
	{
		return getCreatedBy();
	}	//	getDoc_User_ID
"
org.compiere.model.MMovement.getC_Currency_ID,MMovement.java,"int getC_Currency_ID()
	{
	//	MPriceList pl = MPriceList.get(getCtx(), getM_PriceList_ID());
	//	return pl.getC_Currency_ID();
		return 0;
	}	//	getC_Currency_ID
"
org.compiere.model.CalloutRequisition.product,CalloutRequisition.java,"String product (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer M_Product_ID = (Integer)value;
		if (M_Product_ID == null || M_Product_ID.intValue() == 0)
			return """";
	//	setCalloutActive(true);
		//
		/**	Set Attribute
		if (ctx.getContextAsInt( Env.WINDOW_INFO, Env.TAB_INFO, ""M_Product_ID"") == M_Product_ID.intValue()
			&& ctx.getContextAsInt( Env.WINDOW_INFO, Env.TAB_INFO, ""M_AttributeSetInstance_ID"") != 0)
			mTab.setValue(""M_AttributeSetInstance_ID"", Integer.valueOf(ctx.getContextAsInt( Env.WINDOW_INFO, Env.TAB_INFO, ""M_AttributeSetInstance_ID"")));
		else
			mTab.setValue(""M_AttributeSetInstance_ID"", null);
		**/
		int C_BPartner_ID = ctx.getContextAsInt( WindowNo, WindowNo, ""C_BPartner_ID"");
		BigDecimal Qty = (BigDecimal)mTab.getValue(""Qty"");
		boolean isSOTrx = false;
		MProductPricing pp = new MProductPricing (ctx.getAD_Client_ID(), ctx.getAD_Org_ID(),
			M_Product_ID.intValue(), C_BPartner_ID, Qty, isSOTrx);
		//
		int M_PriceList_ID = ctx.getContextAsInt( WindowNo, ""M_PriceList_ID"");
		pp.setM_PriceList_ID(M_PriceList_ID);
		int M_PriceList_Version_ID = ctx.getContextAsInt( WindowNo, ""M_PriceList_Version_ID"");
		pp.setM_PriceList_Version_ID(M_PriceList_Version_ID);
		Timestamp orderDate = (Timestamp)mTab.getValue(""DateRequired"");
		pp.setPriceDate(orderDate);
		//
		mTab.setValue(""PriceActual"", pp.getPriceStd());
		ctx.setContext( WindowNo, ""EnforcePriceLimit"", pp.isEnforcePriceLimit() ? ""Y"" : ""N"");	//	not used
		ctx.setContext( WindowNo, ""DiscountSchema"", pp.isDiscountSchema() ? ""Y"" : ""N"");

	//	setCalloutActive(false);
		return """";
	}	//	product
"
org.compiere.model.CalloutRequisition.amt,CalloutRequisition.java,"String amt (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		if (isCalloutActive() || value == null)
			return """";
		setCalloutActive(true);

		//	Qty changed - recalc price
		if (mField.getColumnName().equals(""Qty"")
			&& ""Y"".equals(ctx.getContext( WindowNo, ""DiscountSchema"")))
		{
			int M_Product_ID = ctx.getContextAsInt( WindowNo, WindowNo, ""M_Product_ID"");
			int C_BPartner_ID = ctx.getContextAsInt( WindowNo, WindowNo, ""C_BPartner_ID"");
			BigDecimal Qty = (BigDecimal)value;
			boolean isSOTrx = false;
			MProductPricing pp = new MProductPricing (ctx.getAD_Client_ID(), ctx.getAD_Org_ID(),
				M_Product_ID, C_BPartner_ID, Qty, isSOTrx);
			//
			int M_PriceList_ID = ctx.getContextAsInt( WindowNo, ""M_PriceList_ID"");
			pp.setM_PriceList_ID(M_PriceList_ID);
			int M_PriceList_Version_ID = ctx.getContextAsInt( WindowNo, ""M_PriceList_Version_ID"");
			pp.setM_PriceList_Version_ID(M_PriceList_Version_ID);
			Timestamp orderDate = (Timestamp)mTab.getValue(""DateInvoiced"");
			pp.setPriceDate(orderDate);
			//
			mTab.setValue(""PriceActual"", pp.getPriceStd());
		}

		int StdPrecision = ctx.getStdPrecision();
		BigDecimal Qty = (BigDecimal)mTab.getValue(""Qty"");
		BigDecimal PriceActual = (BigDecimal)mTab.getValue(""PriceActual"");

		//	get values
		log.fine(""amt - Qty="" + Qty + "", Price="" + PriceActual + "", Precision="" + StdPrecision);

		//	Multiply
		BigDecimal LineNetAmt = Qty.multiply(PriceActual);
		if (LineNetAmt.scale() > StdPrecision)
			LineNetAmt = LineNetAmt.setScale(StdPrecision, BigDecimal.ROUND_HALF_UP);
		mTab.setValue(""LineNetAmt"", LineNetAmt);
		log.info(""amt - LineNetAmt="" + LineNetAmt);
		//
		setCalloutActive(false);
		return """";
	}	//	amt
"
org.compiere.model.MClickCount.getMClicks,MClickCount.java,"MClick[] getMClicks()
	{
		ArrayList<MClick> list = new ArrayList<MClick>();
		/** @todo Clicks */
		//
		MClick[] retValue = new MClick[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getMClicks
"
org.compiere.model.MClickCount.getCount,MClickCount.java,"ValueNamePair[] getCount (String DateFormat)
	{
		ArrayList<ValueNamePair> list = new ArrayList<ValueNamePair>();
		String sql = ""SELECT TRUNC(Created, '"" + DateFormat + ""'), Count(*) ""
			+ ""FROM W_Click ""
			+ ""WHERE W_ClickCount_ID=? ""
			+ ""GROUP BY TRUNC(Created, '"" + DateFormat + ""')"";
		//
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, getW_ClickCount_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				String value = m_dateFormat.format(rs.getTimestamp(1));
				String name = m_intFormat.format(rs.getInt(2));
				ValueNamePair pp = new ValueNamePair (value, name);
				list.add(pp);
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			log.log(Level.SEVERE, sql, ex);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;
		//
		ValueNamePair[] retValue = new ValueNamePair[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getCount
"
org.compiere.model.MClickCount.getCountQuarter,MClickCount.java,"ValueNamePair[] getCountQuarter ()
	{
		return getCount(""Q"");
	}	//	getCountQuarter
"
org.compiere.model.MClickCount.getCountMonth,MClickCount.java,"ValueNamePair[] getCountMonth ()
	{
		return getCount(""MM"");
	}	//	getCountMonth
"
org.compiere.model.MClickCount.getCountWeek,MClickCount.java,"ValueNamePair[] getCountWeek ()
	{
		return getCount(""DY"");
	}	//	getCountWeek
"
org.compiere.model.MClickCount.getCountDay,MClickCount.java,"ValueNamePair[] getCountDay ()
	{
		return getCount(""J"");
	}	//	getCountDay
"
org.compiere.model.DataStatusEvent.setLoading,DataStatusEvent.java,"void setLoading (int loadedRows)
	{
		m_allLoaded = false;
		m_loadedRows = loadedRows;
	}	//	setLoaded
"
org.compiere.model.DataStatusEvent.isLoading,DataStatusEvent.java,"boolean isLoading()
	{
		return !m_allLoaded;
	}	//	isLoading
"
org.compiere.model.DataStatusEvent.getLoadedRows,DataStatusEvent.java,"int getLoadedRows()
	{
		return m_loadedRows;
	}	//	getLoadedRows
"
org.compiere.model.DataStatusEvent.setCurrentRow,DataStatusEvent.java,"void setCurrentRow (int currentRow)
	{
		m_currentRow = currentRow;
	}	//	setCurrentRow
"
org.compiere.model.DataStatusEvent.getCurrentRow,DataStatusEvent.java,"int getCurrentRow()
	{
		return m_currentRow;
	}	//	getCurrentRow
"
org.compiere.model.DataStatusEvent.getTotalRows,DataStatusEvent.java,"int getTotalRows()
	{
		return m_totalRows;
	}	//	getTotalRows
"
org.compiere.model.DataStatusEvent.setInfo,DataStatusEvent.java,"void setInfo (String AD_Message, String info, boolean isError, boolean isWarning)
	{
		m_AD_Message = AD_Message;
		m_info = info;
		m_isError = isError;
		m_isWarning = isWarning;
	}	//	setInfo
"
org.compiere.model.DataStatusEvent.setInserting,DataStatusEvent.java,"void setInserting (boolean inserting)
	{
		m_inserting = inserting;
	}   //  setInserting
"
org.compiere.model.DataStatusEvent.isInserting,DataStatusEvent.java,"boolean isInserting()
	{
		return m_inserting;
	}   //  isInserting
"
org.compiere.model.DataStatusEvent.getAD_Message,DataStatusEvent.java,"String getAD_Message()
	{
		return m_AD_Message;
	}	//	getAD_Message
"
org.compiere.model.DataStatusEvent.getInfo,DataStatusEvent.java,"String getInfo()
	{
		return m_info;
	}	//	getInfo
"
org.compiere.model.DataStatusEvent.isError,DataStatusEvent.java,"boolean isError()
	{
		return m_isError;
	}	//	isError
"
org.compiere.model.DataStatusEvent.isWarning,DataStatusEvent.java,"boolean isWarning()
	{
		return m_isWarning;
	}	//	isWarning
"
org.compiere.model.DataStatusEvent.toString,DataStatusEvent.java,"String toString()
	{
		StringBuffer sb = new StringBuffer(""DataStatusEvent - "");
		if (m_AD_Message != null)
			sb.append(m_AD_Message);
		if (m_info != null)
			sb.append("" "").append(m_info);
		sb.append("" : "").append(getMessage());
		return sb.toString();
	}	//	toString
"
org.compiere.model.DataStatusEvent.getMessage,DataStatusEvent.java,"String getMessage()
	{
		StringBuffer retValue = new StringBuffer();
		if (m_inserting)
			retValue.append(""+"");
		retValue.append(m_changed ? (m_autoSave ? ""*"" : ""?"") : "" "");
		//  current row
		if (m_totalRows == 0)
			retValue.append(m_currentRow);
		else
			retValue.append(m_currentRow+1);
		//  of
		retValue.append(""/"");
		if (m_allLoaded)
			retValue.append(m_totalRows);
		else
			retValue.append(m_loadedRows).append(""->"").append(m_totalRows);
		//
		return retValue.toString();
	}	//	getMessage
"
org.compiere.model.DataStatusEvent.isChanged,DataStatusEvent.java,"boolean isChanged()
	{
		return m_changed;
	}	//	isChanged
"
org.compiere.model.DataStatusEvent.isFirstRow,DataStatusEvent.java,"boolean isFirstRow()
	{
		if (m_totalRows == 0)
			return true;
		return m_currentRow == 0;
	}	//	isFirstRow
"
org.compiere.model.DataStatusEvent.isLastRow,DataStatusEvent.java,"boolean isLastRow()
	{
		if (m_totalRows == 0)
			return true;
		return m_currentRow == m_totalRows-1;
	}	//	isLastRow
"
org.compiere.model.DataStatusEvent.setChangedColumn,DataStatusEvent.java,"void setChangedColumn (int col, String columnName)
	{
		m_changedColumn = col;
		m_columnName = columnName;
	}	//	setChangedColumn
"
org.compiere.model.DataStatusEvent.getChangedColumn,DataStatusEvent.java,"int getChangedColumn()
	{
		return m_changedColumn;
	}   //	getChangedColumn
"
org.compiere.model.DataStatusEvent.getColumnName,DataStatusEvent.java,"String getColumnName()
	{
		return m_columnName;
	}	//	getColumnName
"
org.compiere.model.DataStatusEvent.setConfirmed,DataStatusEvent.java,"void setConfirmed (boolean confirmed)
	{
		m_confirmed = confirmed;
	}   //  setConfirmed
"
org.compiere.model.DataStatusEvent.isConfirmed,DataStatusEvent.java,"boolean isConfirmed()
	{
		return m_confirmed;
	}	//  isConfirmed
"
org.compiere.model.MAd.getCurrentImpression,MAd.java,"int getCurrentImpression() {
		return getActualImpression() + getStartImpression();
	}
"
org.compiere.model.MAd.addImpression,MAd.java,"void addImpression() {
		setActualImpression(getActualImpression()+1);
		if (getMaxImpression()>0 && getCurrentImpression()>=getMaxImpression()) 
			setIsActive(false);
		save();
	}
"
org.compiere.model.MAd.getNext,MAd.java,"MAd getNext(Ctx ctx, int CM_Ad_Cat_ID, Trx trx) 
	{
		MAd thisAd = null;
		String sql = ""SELECT * FROM CM_Ad WHERE IsActive='Y' AND (ActualImpression+StartImpression<MaxImpression OR MaxImpression=0) AND CM_Ad_Cat_ID=? ORDER BY ActualImpression+StartImpression"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, trx);
			pstmt.setInt(1, CM_Ad_Cat_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				thisAd = new MAd(ctx, rs, trx);
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		if (thisAd!=null) 
			thisAd.addImpression();
		return thisAd;
	}
"
org.compiere.model.MAd.addClick,MAd.java,"void addClick(HttpServletRequest request) {
		setActualClick(getActualClick()+1);
		if (getActualClick()>getMaxClick()) 
			setIsActive(true);
		save();
	}
"
org.compiere.model.GridField.dispose,GridField.java,"void dispose()
	{
	//	log.fine( ""MField.dispose = "" + m_vo.ColumnName);
		m_propertyChangeListeners = null;
		m_lookup = null;
		m_vo.lookupInfo = null;
		m_vo = null;
	}   //  dispose
"
org.compiere.model.GridField.loadLookup,GridField.java,"void loadLookup()
	{
		if (!isLookup())
			return;
		log.config(""("" + m_vo.ColumnName + "")"");

		if (FieldType.isLookup(m_vo.displayType))
		{
			MLookup ml = new MLookup (m_vo.ctx, m_vo.WindowNo, m_vo.displayType);
			if (m_vo.lookupInfo == null)
			{
				m_vo.lookupInfo = MLookupFactory.getLookupInfo (ml, m_vo.AD_Column_ID,
					Env.getLanguage(m_vo.ctx), m_vo.ColumnName, m_vo.AD_Reference_Value_ID,
					m_vo.IsParent, m_vo.ValidationCode);
			//	log.log(Level.SEVERE, ""("" + m_vo.ColumnName + "") - No LookupInfo"");
			//	return;
			}
			//	Prevent loading of CreatedBy/UpdatedBy
			if ((m_vo.displayType == DisplayTypeConstants.Table)
				&& (m_vo.ColumnName.equals(""CreatedBy"") || m_vo.ColumnName.equals(""UpdatedBy"")) )
			{
				m_vo.lookupInfo.IsCreadedUpdatedBy = true;
				ml.setDisplayType(DisplayTypeConstants.Search);
			}
			//
			m_vo.lookupInfo.IsKey = isKey();
			m_lookup = ml.initialize(m_vo.lookupInfo);
		}
		else if (m_vo.displayType == DisplayTypeConstants.Location)   //  not cached
		{
			MLocationLookup ml = new MLocationLookup (m_vo.ctx, m_vo.WindowNo);
			m_lookup = ml;
		}
		else if (m_vo.displayType == DisplayTypeConstants.Locator)
		{
			MLocatorLookup ml = new MLocatorLookup (m_vo.ctx, m_vo.WindowNo);
			m_lookup = ml;
			m_vo.DefaultValue = ml.getDefault();

		}
		else if (m_vo.displayType == DisplayTypeConstants.Account)    //  not cached
		{
			MAccountLookup ma = new MAccountLookup (m_vo.ctx, m_vo.WindowNo);
			m_lookup = ma;
		}
		else if (m_vo.displayType == DisplayTypeConstants.PAttribute)    //  not cached
		{
			MPAttributeLookup pa = new MPAttributeLookup (m_vo.ctx, m_vo.WindowNo);
			m_lookup = pa;
		}
	}   //  m_lookup
"
org.compiere.model.GridField.lookupLoadComplete,GridField.java,"void lookupLoadComplete()
	{
		if (m_lookup == null)
			return;
		m_lookup.loadComplete();
	}   //  loadCompete
"
org.compiere.model.GridField.getLookup,GridField.java,"Lookup getLookup()
	{
		return m_lookup;
	}   //  getLookup
"
org.compiere.model.GridField.getLookupInfo,GridField.java,"MLookupInfo getLookupInfo()
	{
		return m_vo.lookupInfo;
	}
"
org.compiere.model.GridField.isLookup,GridField.java,"boolean isLookup()
	{
		boolean retValue = false;
		if (m_vo.IsKey)
			retValue = false;
	//	else if (m_vo.ColumnName.equals(""CreatedBy"") || m_vo.ColumnName.equals(""UpdatedBy""))
	//		retValue = false;
		else if (FieldType.isLookup(m_vo.displayType))
			retValue = true;
		else if ((m_vo.displayType == DisplayTypeConstants.Location)
			|| (m_vo.displayType == DisplayTypeConstants.Locator)
			|| (m_vo.displayType == DisplayTypeConstants.Account)
			|| (m_vo.displayType == DisplayTypeConstants.PAttribute))
			retValue = true;

		return retValue;
	}   //  isLookup
"
org.compiere.model.GridField.refreshLookup,GridField.java,"boolean refreshLookup()
	{
		//  if there is a validation string, the lookup is unstable
		if ((m_lookup == null) || (m_lookup.getValidation().length() == 0))
			return true;
		//
		log.fine(""("" + m_vo.ColumnName + "")"");
		m_lookup.refresh();
		return m_lookup.isValidated();
	}   //  refreshLookup
"
org.compiere.model.GridField.getDependentOn,GridField.java,"ArrayList<String> getDependentOn()
	{
		return getDependentOn(true);
	}
"
org.compiere.model.GridField.getDependentOn,GridField.java,"ArrayList<String> getDependentOn(boolean enforceImplicitDependencies)
	{
		ArrayList<String> list = new ArrayList<String>();
		//	Implicit Dependencies
		if (getColumnName().equals(""M_AttributeSetInstance_ID""))
			list.add(""M_Product_ID"");
		else if (enforceImplicitDependencies
				&& (getColumnName().equals(""M_Locator_ID"") || getColumnName().equals(""M_LocatorTo_ID"")))
		{
			list.add(""M_Product_ID"");
			list.add(""M_Warehouse_ID"");
		}
		//  Display dependent
		Evaluator.parseDepends(list, m_vo.DisplayLogic);
		Evaluator.parseDepends(list, m_vo.ReadOnlyLogic);
		Evaluator.parseDepends(list, m_vo.mandatoryLogic);
		//  Lookup
		if (m_lookup != null)
			Evaluator.parseDepends(list, m_lookup.getValidation());
		//
		if ((list.size() > 0) && CLogMgt.isLevelFiner())
		{
			StringBuffer sb = new StringBuffer();
			for (int i = 0; i < list.size(); i++)
				sb.append(list.get(i)).append("" - "");
			log.finer(""("" + m_vo.ColumnName + "") "" + sb.toString());
		}
		return list;
	}   //  getDependentOn
"
org.compiere.model.GridField.setError,GridField.java,"void setError (boolean error)
	{
		m_error = error;
	}	//	setBackground
"
org.compiere.model.GridField.isError,GridField.java,"boolean isError()
	{
		return m_error;
	}	//	isError
"
org.compiere.model.GridField.isMandatory,GridField.java,"boolean isMandatory (boolean checkContext)
	{
		//  Do we have mandatory logic
		if (checkContext && (m_vo.mandatoryLogic != null) && (m_vo.mandatoryLogic.length() > 0))
		{
			boolean retValue = Evaluator.evaluateLogic(this, m_vo.mandatoryLogic);
			log.finest(m_vo.ColumnName + "" MandatoryLogic("" + m_vo.mandatoryLogic + "") => "" + retValue);
			if (retValue)
				return true;
		}

		//  Not mandatory
		if (!m_vo.IsMandatoryUI || isVirtualColumn())
			return false;

		//  Numeric Keys and Created/Updated as well as
		//	DocumentNo/Value/ASI ars not mandatory (persistency layer manages them)
		if ((m_vo.IsKey && m_vo.ColumnName.endsWith(""_ID""))
				|| m_vo.ColumnName.startsWith(""Created"") || m_vo.ColumnName.startsWith(""Updated"")
				|| m_vo.ColumnName.equals(""Value"")
				|| m_vo.ColumnName.equals(""DocumentNo"")
				|| m_vo.ColumnName.equals(""M_AttributeSetInstance_ID""))	//	0 is valid
			return false;

		//  Mandatory if displayed
		return isDisplayed (checkContext);
	}	//	isMandatory
"
org.compiere.model.GridField.isEditable,GridField.java,"boolean isEditable (boolean checkContext)
	{
		if (isVirtualColumn())
			return false;
		//  Fields always enabled (are usually not updateable)
		if (m_vo.ColumnName.equals(""Posted"")
			|| (m_vo.ColumnName.equals(""Record_ID"") && (m_vo.displayType == DisplayTypeConstants.Button)))	//  Zoom
			return true;

		//  Fields always updareable
		if (m_vo.IsAlwaysUpdateable)      //  Zoom
			return true;

		//  Tab or field is R/O
		if (m_vo.tabReadOnly || m_vo.IsReadOnly)
		{
			log.finest(m_vo.ColumnName + "" NO - TabRO="" + m_vo.tabReadOnly + "", FieldRO="" + m_vo.IsReadOnly);
			return false;
		}

		//	Not Updateable - only editable if new updateable row
		if (!m_vo.IsUpdateable && !m_inserting)
		{
			log.finest(m_vo.ColumnName + "" NO - FieldUpdateable="" + m_vo.IsUpdateable);
			return false;
		}

		//	Field is the Link Column of the tab
		if (m_vo.ColumnName.equals(m_vo.ctx.getContext(m_vo.WindowNo, m_vo.TabNo, ""LinkColumnName"")))
		{
			log.finest(m_vo.ColumnName + "" NO - LinkColumn"");
			return false;
		}

		//	Role Access & Column Access
		if (checkContext)
		{
			int AD_Client_ID = m_vo.ctx.getContextAsInt( m_vo.WindowNo, m_vo.TabNo, ""AD_Client_ID"");
			int AD_Org_ID = m_vo.ctx.getContextAsInt( m_vo.WindowNo, m_vo.TabNo, ""AD_Org_ID"");
			String keyColumn = m_vo.ctx.getContext( m_vo.WindowNo, m_vo.TabNo, ""KeyColumnName"");
			if (""EntityType"".equals(keyColumn))
				keyColumn = ""AD_EntityType_ID"";
			if (!keyColumn.endsWith(""_ID""))
				keyColumn += ""_ID"";			//	AD_Language_ID
			int Record_ID = m_vo.ctx.getContextAsInt( m_vo.WindowNo, m_vo.TabNo, keyColumn);
			int AD_Table_ID = m_vo.AD_Table_ID;
			if (!MRole.getDefault(m_vo.ctx, false).canUpdate(
				AD_Client_ID, AD_Org_ID, AD_Table_ID, Record_ID, false))
				return false;
			if (!MRole.getDefault(m_vo.ctx, false).isColumnAccess(AD_Table_ID, m_vo.AD_Column_ID, false))
				return false;
		}

		//  Do we have a readonly rule
		if (checkContext && (m_vo.ReadOnlyLogic.length() > 0))
		{
			boolean retValue = !Evaluator.evaluateLogic(this, m_vo.ReadOnlyLogic);
			log.finest(m_vo.ColumnName + "" R/O("" + m_vo.ReadOnlyLogic + "") => R/W-"" + retValue);
			if (!retValue)
				return false;
		}

		//  Always editable if Active
		if (m_vo.ColumnName.equals(""Processing"")
				|| m_vo.ColumnName.equals(""DocAction"")
				|| m_vo.ColumnName.equals(""GenerateTo""))
			return true;

		//  Record is Processed	***
		if (checkContext
			&& (m_vo.ctx.getContext( m_vo.WindowNo, ""Processed"").equals(""Y"")
				|| m_vo.ctx.getContext( m_vo.WindowNo, ""Processing"").equals(""Y"")))
			return false;

		//  IsActive field is editable, if record not processed
		if (m_vo.ColumnName.equals(""IsActive""))
			return true;

		//  Record is not Active
		if (checkContext && !m_vo.ctx.getContext( m_vo.WindowNo, ""IsActive"").equals(""Y""))
			return false;

		//  ultimately visibily decides
		return isDisplayed (checkContext);
	}	//	isEditable
"
org.compiere.model.GridField.setInserting,GridField.java,"void setInserting (boolean inserting)
	{
		m_inserting = inserting;
	}   //  setInserting
"
org.compiere.model.GridField.getDefault2,GridField.java,"Object getDefault2(Ctx ctx, int windowNo)
	{
		/**
		 *  (a) Key/Parent/IsActive/SystemAccess
		 */

		//	No defaults for these fields
		if (m_vo.IsKey || (m_vo.displayType == DisplayTypeConstants.RowID)
			|| FieldType.isLOB(m_vo.displayType))
			return null;
		//	Set Parent to context if not explicitly set
		if (isParentValue()
			&& Util.isEmpty(m_vo.DefaultValue2))
		{
			String parent = m_vo.ctx.getContext(m_vo.WindowNo, m_vo.ColumnName);
			log.fine(""[Parent] "" + m_vo.ColumnName + ""="" + parent);
			return createDefault(m_vo.ColumnName, parent);
		}
		//	Always Active
		if (m_vo.ColumnName.equals(""IsActive""))
		{
			log.fine(""[IsActive] "" + m_vo.ColumnName + ""=Y"");
			return ""Y"";
		}

		//	Set Client & Org to System, if System access
		if (X_AD_Table.ACCESSLEVEL_SystemOnly.equals(m_vo.ctx.getContext(m_vo.WindowNo, m_vo.TabNo, ""AccessLevel""))
			&& (m_vo.ColumnName.equals(""AD_Client_ID"") || m_vo.ColumnName.equals(""AD_Org_ID"")))
		{
			log.fine(""[SystemAccess] "" + m_vo.ColumnName + ""=0"");
			return Integer.valueOf(0);
		}
		//	Set Org to System, if Client access
		else if (X_AD_Table.ACCESSLEVEL_SystemPlusTenant.equals(m_vo.ctx.getContext(m_vo.WindowNo, m_vo.TabNo, ""AccessLevel""))
			&& m_vo.ColumnName.equals(""AD_Org_ID""))
		{
			log.fine(""[ClientAccess] "" + m_vo.ColumnName + ""=0"");
			return Integer.valueOf(0);
		}

		/**
		 *  (b) SQL Statement (for data integity & consistency)
		 */
		String	defStr = """";
		if (m_vo.DefaultValue2.startsWith(""@SQL=""))
		{
			String sql0 = m_vo.DefaultValue2.substring(5);			//	w/o tag
			String sql = Env.parseContext(m_vo.ctx, m_vo.WindowNo, sql0, false, true);	//	replace variables
			String sqlTest = sql.toUpperCase();
			if ((sqlTest.indexOf(""DELETE "") != -1) && (sqlTest.indexOf(""UPDATE "") != -1) && (sqlTest.indexOf(""DROP "") != -1))
				sql = """";	//	Potential security issue
			if (sql.equals(""""))
			{
				log.log(Level.WARNING, ""("" + m_vo.ColumnName + "") - Default SQL variable parse failed: ""
					+ sql0);
			}
			else
			{
				try
				{
					PreparedStatement stmt = DB.prepareStatement(sql, (Trx) null);
					ResultSet rs = stmt.executeQuery();
					if (rs.next())
						defStr = rs.getString(1);
					else
						log.log(Level.WARNING, ""("" + m_vo.ColumnName + "") - no Result: "" + sql);
					rs.close();
					stmt.close();
				}
				catch (SQLException e)
				{
					if (sql.endsWith(""=""))	//	Variable Resolved empty
						log.log(Level.SEVERE, ""("" + m_vo.ColumnName + "") "" + sql0, e);
					else
						log.log(Level.WARNING, ""("" + m_vo.ColumnName + "") "" + sql, e);
				}
			}
			if ((defStr != null) && (defStr.length() > 0))
			{
				log.fine(""[SQL] "" + m_vo.ColumnName + ""="" + defStr);
				return createDefault("""", defStr);
			}
		}	//	SQL Statement


		/**
		 * 	(c) Field DefaultValue2		=== similar code in AStartRPDialog.getDefault ===
		 */
		if (!m_vo.DefaultValue2.equals("""") && !m_vo.DefaultValue2.startsWith(""@SQL=""))
		{
			defStr = """";		//	problem is with texts like 'sss;sss'
			//	It is one or more variables/constants
			StringTokenizer st = new StringTokenizer(m_vo.DefaultValue2, "",;"", false);
			while (st.hasMoreTokens())
			{
				String variable = st.nextToken().trim();
				if (variable.equals(""@SysDate@"") || variable.equals(""@Now@""))	//	System Time
					return new Timestamp (System.currentTimeMillis());
				else if (variable.indexOf('@') != -1)			//	it is a variable
					defStr = m_vo.ctx.getContext( m_vo.WindowNo, variable.replace('@',' ').trim());
				else if (variable.startsWith(""'"") && variable.endsWith(""'""))	//	it is a 'String'
				{
					if (variable.length()-2 > 0)
						defStr = variable.substring(1, variable.length()-1);
					else
						defStr = Util.replace(variable, ""'"", """");
				}
				else
					defStr = variable;

				if (defStr.length() > 0)
				{
					log.fine(""[DefaultValue2] "" + m_vo.ColumnName + ""="" + defStr);
					return createDefault(variable, defStr);
				 }
			}	//	while more Tokens
		}	//	Default value


		//	No default for Dependent fields of IDs (if defined - assumed to be correct)
		if ((m_lookup != null) && !Util.isEmpty(m_lookup.getValidation()))
		{
			String code = m_lookup.getValidation();
			ArrayList<String> vars = Evaluator.getVariables(code);
			boolean setNull = false;
			for (String var : vars)
            {
				if (!var.startsWith(""#"")	//	Global variables OK
					&& var.endsWith(""_ID"")
					&& !var.equals(m_vo.ColumnName))
				{	//	assumes that parent value is already defined in ctx
					String ctxValue = ctx.getContext(windowNo, var);
					setNull = Util.isEmpty(ctxValue);
					if (setNull)
						break;
				}
            }
		//	if (vars.size() > 0)
		//		log.warning(getColumnName() + "": "" + setNull + "" - "" + vars
		//			+ "" - "" + code);
			if (setNull)
			{
				if (CLogMgt.isLevelFiner())
					log.fine(""[Dependent] "" + m_vo.ColumnName + ""=NULL - "" + code);
				else
					log.fine(""[Dependent] "" + m_vo.ColumnName + ""=NULL"");
				m_lookup.clear();
				return null;
			}
		}	//	dependent

		/**
		 *	(d) Preference (user) - P|
		 */
		defStr = Env.getPreference (m_vo.ctx, m_vo.AD_Window_ID, m_vo.ColumnName, false);
		if (!defStr.equals(""""))
		{
			log.fine(""[UserPreference] "" + m_vo.ColumnName + ""="" + defStr);
			return createDefault("""", defStr);
		}

		/**
		 *	(e) Preference (System) - # $
		 */
		defStr = Env.getPreference (m_vo.ctx, m_vo.AD_Window_ID, m_vo.ColumnName, true);
		if (!defStr.equals(""""))
		{
			log.fine(""[SystemPreference] "" + m_vo.ColumnName + ""="" + defStr);
			return createDefault("""", defStr);
		}

		/**
		 *	(f) DataType defaults
		 */

		//	Button to N
		if ((m_vo.displayType == DisplayTypeConstants.Button) && !m_vo.ColumnName.endsWith(""_ID""))
		{
			log.fine(""[Button=N] "" + m_vo.ColumnName);
			return ""N"";
		}
		//	CheckBoxes default to No
		if (m_vo.displayType == DisplayTypeConstants.YesNo)
		{
			log.fine(""[YesNo=N] "" + m_vo.ColumnName);
			return ""N"";
		}
		//  lookups with one value
	//	if (DisplayType.isLookup(m_vo.displayType) && m_lookup.getSize() == 1)
	//	{
	//		/** @todo default if only one lookup value */
	//	}
		//  IDs remain null
		if (m_vo.ColumnName.endsWith(""_ID""))
		{
			log.fine(""[ID=null] ""  + m_vo.ColumnName);
			return null;
		}
		//  actual Numbers default to zero
		if (FieldType.isNumeric(m_vo.displayType))
		{
			log.fine(""[Number=0] "" + m_vo.ColumnName);
			return createDefault("""", ""0"");
		}

		/**
		 *  No resolution
		 */
		log.fine(""[NONE] "" + m_vo.ColumnName);
		return null;
	}	//	getDefault2
"
org.compiere.model.GridField.getDefault,GridField.java,"Object getDefault(Ctx ctx, int windowNo)
	{
		/**
		 *  (a) Key/Parent/IsActive/SystemAccess
		 */

		//	No defaults for these fields
		if (m_vo.IsKey || (m_vo.displayType == DisplayTypeConstants.RowID)
			|| FieldType.isLOB(m_vo.displayType))
			return null;
		//	Set Parent to context if not explicitly set
		if (isParentValue()
			&& Util.isEmpty(m_vo.DefaultValue))
		{
			String parent = m_vo.ctx.getContext(m_vo.WindowNo, m_vo.ColumnName);
			log.fine(""[Parent] "" + m_vo.ColumnName + ""="" + parent);
			return createDefault(m_vo.ColumnName, parent);
		}
		//	Always Active
		if (m_vo.ColumnName.equals(""IsActive""))
		{
			log.fine(""[IsActive] "" + m_vo.ColumnName + ""=Y"");
			return ""Y"";
		}

		//	Set Client & Org to System, if System access
		if (X_AD_Table.ACCESSLEVEL_SystemOnly.equals(m_vo.ctx.getContext(m_vo.WindowNo, m_vo.TabNo, ""AccessLevel""))
			&& (m_vo.ColumnName.equals(""AD_Client_ID"") || m_vo.ColumnName.equals(""AD_Org_ID"")))
		{
			log.fine(""[SystemAccess] "" + m_vo.ColumnName + ""=0"");
			return Integer.valueOf(0);
		}
		//	Set Org to System, if Client access
		else if (X_AD_Table.ACCESSLEVEL_SystemPlusTenant.equals(m_vo.ctx.getContext(m_vo.WindowNo, m_vo.TabNo, ""AccessLevel""))
			&& m_vo.ColumnName.equals(""AD_Org_ID""))
		{
			log.fine(""[ClientAccess] "" + m_vo.ColumnName + ""=0"");
			return Integer.valueOf(0);
		}

		/**
		 *  (b) SQL Statement (for data integity & consistency)
		 */
		String	defStr = """";
		if (m_vo.DefaultValue.startsWith(""@SQL=""))
		{
			String sql0 = m_vo.DefaultValue.substring(5);			//	w/o tag
			String sql = Env.parseContext(m_vo.ctx, m_vo.WindowNo, sql0, false, true);	//	replace variables
			String sqlTest = sql.toUpperCase();
			if ((sqlTest.indexOf(""DELETE "") != -1) && (sqlTest.indexOf(""UPDATE "") != -1) && (sqlTest.indexOf(""DROP "") != -1))
				sql = """";	//	Potential security issue
			if (sql.equals(""""))
			{
				log.log(Level.WARNING, ""("" + m_vo.ColumnName + "") - Default SQL variable parse failed: ""
					+ sql0);
			}
			else
			{
				try
				{
					PreparedStatement stmt = DB.prepareStatement(sql, (Trx) null);
					ResultSet rs = stmt.executeQuery();
					if (rs.next())
						defStr = rs.getString(1);
					else
						log.log(Level.WARNING, ""("" + m_vo.ColumnName + "") - no Result: "" + sql);
					rs.close();
					stmt.close();
				}
				catch (SQLException e)
				{
					if (sql.endsWith(""=""))	//	Variable Resolved empty
						log.log(Level.SEVERE, ""("" + m_vo.ColumnName + "") "" + sql0, e);
					else
						log.log(Level.WARNING, ""("" + m_vo.ColumnName + "") "" + sql, e);
				}
			}
			if ((defStr != null) && (defStr.length() > 0))
			{
				log.fine(""[SQL] "" + m_vo.ColumnName + ""="" + defStr);
				return createDefault("""", defStr);
			}
		}	//	SQL Statement


		/**
		 * 	(c) Field DefaultValue		=== similar code in AStartRPDialog.getDefault ===
		 */
		if (!m_vo.DefaultValue.equals("""") && !m_vo.DefaultValue.startsWith(""@SQL=""))
		{
			defStr = """";		//	problem is with texts like 'sss;sss'
			//	It is one or more variables/constants
			StringTokenizer st = new StringTokenizer(m_vo.DefaultValue, "",;"", false);
			while (st.hasMoreTokens())
			{
				String variable = st.nextToken().trim();
				if (variable.equals(""@SysDate@"") || variable.equals(""@Now@""))	//	System Time
					return new Timestamp (System.currentTimeMillis());
				else if (variable.indexOf('@') != -1)			//	it is a variable
					defStr = m_vo.ctx.getContext( m_vo.WindowNo, variable.replace('@',' ').trim());
				else if (variable.startsWith(""'"") && variable.endsWith(""'""))	//	it is a 'String'
				{
					if (variable.length()-2 > 0)
						defStr = variable.substring(1, variable.length()-1);
					else
						defStr = Util.replace(variable, ""'"", """");
				}
				else
					defStr = variable;

				if (defStr.length() > 0)
				{
					log.fine(""[DefaultValue] "" + m_vo.ColumnName + ""="" + defStr);
					return createDefault(variable, defStr);
				 }
			}	//	while more Tokens
		}	//	Default value


		//	No default for Dependent fields of IDs (if defined - assumed to be correct)
		if ((m_lookup != null) && !Util.isEmpty(m_lookup.getValidation()))
		{
			String code = m_lookup.getValidation();
			ArrayList<String> vars = Evaluator.getVariables(code);
			boolean setNull = false;
			for (String var : vars)
            {
				if (!var.startsWith(""#"")	//	Global variables OK
					&& var.endsWith(""_ID"")
					&& !var.equals(m_vo.ColumnName))
				{	//	assumes that parent value is already defined in ctx
					String ctxValue = ctx.getContext(windowNo, var);
					setNull = Util.isEmpty(ctxValue);
					if (setNull)
						break;
				}
            }
		//	if (vars.size() > 0)
		//		log.warning(getColumnName() + "": "" + setNull + "" - "" + vars
		//			+ "" - "" + code);
			if (setNull)
			{
				if (CLogMgt.isLevelFiner())
					log.fine(""[Dependent] "" + m_vo.ColumnName + ""=NULL - "" + code);
				else
					log.fine(""[Dependent] "" + m_vo.ColumnName + ""=NULL"");
				m_lookup.clear();
				return null;
			}
		}	//	dependent

		/**
		 *	(d) Preference (user) - P|
		 */
		defStr = Env.getPreference (m_vo.ctx, m_vo.AD_Window_ID, m_vo.ColumnName, false);
		if (!defStr.equals(""""))
		{
			log.fine(""[UserPreference] "" + m_vo.ColumnName + ""="" + defStr);
			return createDefault("""", defStr);
		}

		/**
		 *	(e) Preference (System) - # $
		 */
		defStr = Env.getPreference (m_vo.ctx, m_vo.AD_Window_ID, m_vo.ColumnName, true);
		if (!defStr.equals(""""))
		{
			log.fine(""[SystemPreference] "" + m_vo.ColumnName + ""="" + defStr);
			return createDefault("""", defStr);
		}

		/**
		 *	(f) DataType defaults
		 */

		//	Button to N
		if ((m_vo.displayType == DisplayTypeConstants.Button) && !m_vo.ColumnName.endsWith(""_ID""))
		{
			log.fine(""[Button=N] "" + m_vo.ColumnName);
			return ""N"";
		}
		//	CheckBoxes default to No
		if (m_vo.displayType == DisplayTypeConstants.YesNo)
		{
			log.fine(""[YesNo=N] "" + m_vo.ColumnName);
			return ""N"";
		}
		//  lookups with one value
	//	if (DisplayType.isLookup(m_vo.displayType) && m_lookup.getSize() == 1)
	//	{
	//		/** @todo default if only one lookup value */
	//	}
		//  IDs remain null
		if (m_vo.ColumnName.endsWith(""_ID""))
		{
			log.fine(""[ID=null] ""  + m_vo.ColumnName);
			return null;
		}
		//  actual Numbers default to zero
		if (FieldType.isNumeric(m_vo.displayType))
		{
			log.fine(""[Number=0] "" + m_vo.ColumnName);
			return createDefault("""", ""0"");
		}

		/**
		 *  No resolution
		 */
		log.fine(""[NONE] "" + m_vo.ColumnName);
		return null;
	}	//	getDefault
"
org.compiere.model.GridField.createDefault,GridField.java,"Object createDefault (String variable, String value)
	{
		//	true NULL
		if ((value == null) || (value.length() == 0))
			return null;
		//	see also MTable.readData
		try
		{
			//	IDs & Integer & CreatedBy/UpdatedBy
			if (m_vo.ColumnName.endsWith(""atedBy"")
					|| m_vo.ColumnName.endsWith(""_ID""))
			{
				try	//	defaults -1 => null
				{
					int ii = Integer.parseInt(value);
					if (ii < 0)
						return null;
					return Integer.valueOf(ii);
				}
				catch (Exception e)
				{
					log.warning(""Cannot parse: "" + value + "" - "" + e.getMessage());
				}
				return Integer.valueOf(0);
			}
			//	Integer
			if (m_vo.displayType == DisplayTypeConstants.Integer)
				return Integer.valueOf(value);

			//	Number
			if (FieldType.isNumeric(m_vo.displayType))
				return new BigDecimal(value);

			//	Timestamps
			if (FieldType.isDate(m_vo.displayType))
			{
				//	Time
				try
				{
					long time = Long.parseLong (value);
					return new Timestamp(time);
				}
				catch (Exception e)
				{
				}
				//	Date yyyy-mm-dd hh:mm:ss.fffffffff
				String tsString = value
					+ ""2007-01-01 00:00:00.000000000"".substring(value.length());
				try
				{
					return Timestamp.valueOf(tsString);
				}
				catch (Exception e)
				{
					log.warning(""Cannot convert to Timestamp: ""  + tsString);
				}
				return new Timestamp(System.currentTimeMillis());
			}

			//	Boolean
			if (m_vo.displayType == DisplayTypeConstants.YesNo)
				return Boolean.valueOf (""Y"".equals(value));

			//	Default - String
			if (variable.equals(""@#Date@""))
			{
				try
				{	//	2007-06-27 00:00:00.0
					long time = Long.parseLong (value);
					value = new Timestamp(time).toString();
					value = value.substring(0, 10);
				}
				catch (Exception e)
				{
				}
			}
			return value;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, m_vo.ColumnName + "" - "" + e.getMessage());
		}
		return null;
	}	//	createDefault
"
org.compiere.model.GridField.validateValue,GridField.java,"boolean validateValue()
	{
		//	Search not cached
		if ((getDisplayType() == DisplayTypeConstants.Search) && (m_lookup != null))
		{
			// need to re-set invalid values - OK BPartner in PO Line - not OK SalesRep in Invoice
			if ( m_lookup.getDirect(m_value, false, true) == null)
			{
				log.finest(m_vo.ColumnName + "" Search not valid - set to null"");
				setValue(null, m_inserting);
			}
		}

		//  null
		if ((m_value == null) || (m_value.toString().length() == 0))
		{
			if (isMandatory(true))
			{
				m_error = true;
				return false;
			}
			else
				return true;
		}

		//  cannot be validated
		if (!isLookup()
			|| (m_lookup.get(m_value) != null))
			return true;
		//	it's not null, a lookup and does not have the key
		if (isKey() || isParentValue())		//	parents/key are not validated
			return true;

		log.config(m_vo.ColumnName + ""="" + m_value + "" not found - set to null"");
		setValue(null, m_inserting);
		m_error = true;
		return false;
	}   //  validateValue
"
org.compiere.model.GridField.isDisplayed,GridField.java,"boolean isDisplayed (boolean checkContext)
	{
		//  ** static content **
		//  not displayed
		if (!m_vo.IsDisplayed)
			return false;
		//  no restrictions
		if (m_vo.DisplayLogic.equals(""""))
			return true;

		//  ** dynamic content **
		if (checkContext)
		{
			boolean retValue = Evaluator.evaluateLogic(this, m_vo.DisplayLogic);
			log.finest(m_vo.ColumnName
				+ "" ("" + m_vo.DisplayLogic + "") => "" + retValue);
			return retValue;
		}
		return true;
	}	//	isDisplayed
"
org.compiere.model.GridField.get_ValueAsString,GridField.java,"String get_ValueAsString (String variableName)
	{
		return m_vo.ctx.getContext(m_vo.WindowNo, variableName, true);
	}	//	get_ValueAsString
"
org.compiere.model.GridField.addDependencies,GridField.java,"void addDependencies (ArrayList<String> list)
	{
		//	nothing to parse
		if (!m_vo.IsDisplayed || m_vo.DisplayLogic.equals(""""))
			return;

		StringTokenizer logic = new StringTokenizer(m_vo.DisplayLogic.trim(), ""&|"", false);

		while (logic.hasMoreTokens())
		{
			StringTokenizer st = new StringTokenizer(logic.nextToken().trim(), ""!=^"", false);
			while (st.hasMoreTokens())
			{
				String tag = st.nextToken().trim();					//	get '@tag@'
				//	Do we have a @variable@ ?
				if (tag.indexOf('@') != -1)
				{
					tag = tag.replace('@', ' ').trim();				//	strip 'tag'
					//	Add columns (they might not be a column, but then it is static)
					if (!list.contains(tag))
						list.add(tag);
				}
			}
		}
	}	//	addDependencies
"
org.compiere.model.GridField.getColumnName,GridField.java,"String getColumnName()
	{
		if (m_vo != null)
			return m_vo.ColumnName;
		return null;
	}	//	getColumnName
"
org.compiere.model.GridField.getColumnSQL,GridField.java,"String getColumnSQL(boolean withAS)
	{
		if ((m_vo.ColumnSQL != null) && (m_vo.ColumnSQL.length() > 0))
		{
			if (withAS)
				return m_vo.ColumnSQL + "" AS "" + m_vo.ColumnName;
			else
				return m_vo.ColumnSQL;
		}
		return m_vo.ColumnName;
	}	//	getColumnSQL
"
org.compiere.model.GridField.isVirtualColumn,GridField.java,"boolean isVirtualColumn()
	{
		if ((m_vo.ColumnSQL != null) && (m_vo.ColumnSQL.length() > 0))
			return true;
		return false;
	}	//	isColumnVirtual
"
org.compiere.model.GridField.getHeader,GridField.java,"String getHeader()
	{
		return m_vo.Header;
	}
"
org.compiere.model.GridField.getDisplayType,GridField.java,"int getDisplayType()
	{
		return m_vo.displayType;
	}
"
org.compiere.model.GridField.setDisplayType,GridField.java,"void setDisplayType(int AD_Reference_ID)
	{
		m_vo.displayType = AD_Reference_ID;
	}
"
org.compiere.model.GridField.getAD_Reference_Value_ID,GridField.java,"int getAD_Reference_Value_ID()
	{
		return m_vo.AD_Reference_Value_ID;
	}
"
org.compiere.model.GridField.getAD_Window_ID,GridField.java,"int getAD_Window_ID()
	{
		return m_vo.AD_Window_ID;
	}
"
org.compiere.model.GridField.getWindowNo,GridField.java,"int getWindowNo()
	{
		return m_vo.WindowNo;
	}
"
org.compiere.model.GridField.getAD_Column_ID,GridField.java,"int getAD_Column_ID()
	{
		return m_vo.AD_Column_ID;
	}
"
org.compiere.model.GridField.getDisplayLength,GridField.java,"int getDisplayLength()
	{
		return m_vo.DisplayLength;
	}
"
org.compiere.model.GridField.isSameLine,GridField.java,"boolean isSameLine()
	{
		return m_vo.IsSameLine;
	}
"
org.compiere.model.GridField.isDisplayed,GridField.java,"boolean isDisplayed()
	{
		return m_vo.IsDisplayed;
	}
"
org.compiere.model.GridField.getDisplayLogic,GridField.java,"String getDisplayLogic()
	{
		return m_vo.DisplayLogic;
	}
"
org.compiere.model.GridField.getDefaultValue,GridField.java,"String getDefaultValue()
	{
		return m_vo.DefaultValue;
	}
"
org.compiere.model.GridField.isReadOnly,GridField.java,"boolean isReadOnly()
	{
		if (isVirtualColumn())
			return true;
		return m_vo.IsReadOnly;
	}
"
org.compiere.model.GridField.isUpdateable,GridField.java,"boolean isUpdateable()
	{
		if (isVirtualColumn())
			return false;
		return m_vo.IsUpdateable;
	}
"
org.compiere.model.GridField.isAlwaysUpdateable,GridField.java,"boolean isAlwaysUpdateable()
	{
		if (isVirtualColumn() || !m_vo.IsUpdateable)
			return false;
		return m_vo.IsAlwaysUpdateable;
	}
"
org.compiere.model.GridField.isHeading,GridField.java,"boolean isHeading()
	{
		return m_vo.IsHeading;
	}
"
org.compiere.model.GridField.isFieldOnly,GridField.java,"boolean isFieldOnly()
	{
		return m_vo.IsFieldOnly;
	}
"
org.compiere.model.GridField.isEncryptedField,GridField.java,"boolean isEncryptedField()
	{
		return m_vo.IsEncryptedField;
	}
"
org.compiere.model.GridField.isEncrypted,GridField.java,"boolean isEncrypted()
	{
		if (m_vo.IsEncryptedField)
			return true;
		String ob = getObscureType();
		if ((ob != null) && (ob.length() > 0))
			return true;
		return m_vo.ColumnName.equals(""Password"");
	}
"
org.compiere.model.GridField.isEncryptedColumn,GridField.java,"boolean isEncryptedColumn()
	{
		return m_vo.IsEncryptedColumn;
	}
"
org.compiere.model.GridField.isSelectionColumn,GridField.java,"boolean isSelectionColumn()
	{
		return m_vo.IsSelectionColumn;
	}
"
org.compiere.model.GridField.getObscureType,GridField.java,"String getObscureType()
	{
		return m_vo.ObscureType;
	}
"
org.compiere.model.GridField.getSortNo,GridField.java,"int getSortNo()
	{
		return m_vo.SortNo;
	}
"
org.compiere.model.GridField.getFieldLength,GridField.java,"int getFieldLength()
	{
		return m_vo.FieldLength;
	}
"
org.compiere.model.GridField.getVFormat,GridField.java,"String getVFormat()
	{
		return m_vo.VFormat;
	}
"
org.compiere.model.GridField.getValueMin,GridField.java,"String getValueMin()
	{
		return m_vo.ValueMin;
	}
"
org.compiere.model.GridField.getValueMax,GridField.java,"String getValueMax()
	{
		return m_vo.ValueMax;
	}
"
org.compiere.model.GridField.getFieldGroup,GridField.java,"String getFieldGroup()
	{
		return m_vo.FieldGroup;
	}
"
org.compiere.model.GridField.isKey,GridField.java,"boolean isKey()
	{
		return m_vo.IsKey;
	}
"
org.compiere.model.GridField.isParentColumn,GridField.java,"boolean isParentColumn()
	{
		return m_vo.IsParent;
	}
"
org.compiere.model.GridField.isParentValue,GridField.java,"boolean isParentValue()
	{
		if (m_parentValue != null)
			return m_parentValue.booleanValue();
		if (!FieldType.isID(m_vo.displayType) || (m_vo.TabNo == 0))
			m_parentValue = Boolean.FALSE;
		else
		{
			String LinkColumnName = m_vo.ctx.getContext( m_vo.WindowNo, m_vo.TabNo, ""LinkColumnName"");
			if (LinkColumnName.length() == 0)
				m_parentValue = Boolean.FALSE;
			else
				m_parentValue = Boolean.valueOf(m_vo.ColumnName.equals(LinkColumnName));
			if (m_parentValue)
				log.config(m_parentValue
					+ "" - Link("" + LinkColumnName + "", W="" + m_vo.WindowNo + "",T="" + m_vo.TabNo
					+ "") = "" + m_vo.ColumnName);
		}
		return m_parentValue.booleanValue();
	}	//	isParentValue
"
org.compiere.model.GridField.getCallout,GridField.java,"String getCallout()
	{
		return m_vo.Callout;
	}
"
org.compiere.model.GridField.getAD_Process_ID,GridField.java,"int getAD_Process_ID()
	{
		return m_vo.AD_Process_ID;
	}
"
org.compiere.model.GridField.getDescription,GridField.java,"String getDescription()
	{
		return m_vo.Description;
	}
"
org.compiere.model.GridField.getHelp,GridField.java,"String getHelp()
	{
		return m_vo.Help;
	}
"
org.compiere.model.GridField.getAD_Tab_ID,GridField.java,"int getAD_Tab_ID()
	{
		return m_vo.AD_Tab_ID;
	}
"
org.compiere.model.GridField.getVO,GridField.java,"GridFieldVO getVO()
	{
		return m_vo;
	}
"
org.compiere.model.GridField.isDefaultFocus,GridField.java,"boolean isDefaultFocus()
	{
		return m_vo.IsDefaultFocus;
	}	//	isDefaultFocus
"
org.compiere.model.GridField.isLongField,GridField.java,"boolean isLongField()
	{
	//	if (m_vo.displayType == DisplayType.String
	//		|| m_vo.displayType == DisplayType.Text
	//		|| m_vo.displayType == DisplayType.Memo
	//		|| m_vo.displayType == DisplayType.TextLong
	//		|| m_vo.displayType == DisplayType.Image)
		return (m_vo.DisplayLength >= MAXDISPLAY_LENGTH/2);
	//	return false;
	}   //  isLongField
"
org.compiere.model.GridField.setValue,GridField.java,"void setValue ()
	{
	//	log.fine(ColumnName + ""="" + newValue);
		if (m_valueNoFire)      //  set the old value
			m_oldValue = m_value;
		m_value = null;
		m_inserting = false;
		m_error = false;        //  reset error

		//  Does not fire, if same value
		m_propertyChangeListeners.firePropertyChange(PROPERTY, m_oldValue, m_value);
	//	m_propertyChangeListeners.firePropertyChange(PROPERTY, s_oldValue, null);
	}   //  setValue
"
org.compiere.model.GridField.setValue,GridField.java,"void setValue (Object newValue, boolean inserting)
	{
	//	log.fine(ColumnName + ""="" + newValue);
		if (m_valueNoFire)      //  set the old value
			m_oldValue = m_value;
		m_value = newValue;
		m_inserting = inserting;
		m_error = false;        //  reset error

		//	Set Context
		if ((m_vo.displayType == DisplayTypeConstants.Text)
			|| (m_vo.displayType == DisplayTypeConstants.Memo)
			|| (m_vo.displayType == DisplayTypeConstants.TextLong)
			|| (m_vo.displayType == DisplayTypeConstants.Binary)
			|| (m_vo.displayType == DisplayTypeConstants.RowID)
			|| isEncrypted())
			;	//	ignore
		else if (newValue instanceof Boolean)
			m_vo.ctx.setContext(m_vo.WindowNo, m_vo.ColumnName,
				((Boolean)newValue).booleanValue());
		else if (newValue instanceof Timestamp)
			m_vo.ctx.setContext(m_vo.WindowNo, m_vo.ColumnName, (Timestamp)m_value);
		else
			m_vo.ctx.setContext(m_vo.WindowNo, m_vo.ColumnName,
				m_value==null ? null : m_value.toString());

		//  Does not fire, if same value
		Object oldValue = m_oldValue;
		if (inserting)
			oldValue = INSERTING;
		m_propertyChangeListeners.firePropertyChange(PROPERTY, oldValue, m_value);
	}   //  setValue
"
org.compiere.model.GridField.setValueValidate,GridField.java,"String setValueValidate (String newValue, boolean inserting)
	{
		if (newValue == null)
			setValue();

		//	Data Type Test
		int dt = getDisplayType();
		try
		{
			//	Return Integer
			if ((dt == DisplayTypeConstants.Integer)
				|| (FieldType.isID(dt) && getColumnName().endsWith(""_ID"")))
			{
				int i = Integer.parseInt(newValue);
				setValue (Integer.valueOf(i), inserting);
			}
			//	Return BigDecimal
			else if (FieldType.isNumeric(dt))
			{
				BigDecimal value = (BigDecimal)DisplayType.getNumberFormat(dt).parse(newValue);
				setValue (value, inserting);
				return null;
			}
			//	Return Timestamp
			else if (FieldType.isDate(dt))
			{
				long time = Long.parseLong(newValue);
				setValue (new Timestamp(time), inserting);
				return null;
			}
			//	Return Boolean
			else if (dt == DisplayTypeConstants.YesNo)
			{
				Boolean value = null;
				if (newValue.equals(""Y""))
					value = Boolean.TRUE;
				else if (newValue.equals(""N""))
					value = Boolean.FALSE;
				else
					return getColumnName() + "" = "" + newValue + "" - Must be Y/N"";
				setValue (value, inserting);
				return null;
			}
			else if (FieldType.isText(dt))
			{
				setValue (newValue, inserting);
				return null;
			}
			else
				return getColumnName() + "" not mapped ""
					+ DisplayType.getDescription(dt);
		}
		catch (Exception ex)
		{
			log.log(Level.SEVERE, ""Value="" + newValue, ex);

			String error = ex.getLocalizedMessage();
			if ((error == null) || (error.length() == 0))
				error = ex.toString();
			return getColumnName() + "" = "" + newValue + "" - "" + error;
		}

		//	ID - test ID
		if (!FieldType.isID(dt))
			return null;

		//TODO: setValueValidate

		return null;
	}	//	setValueValidate
"
org.compiere.model.GridField.getValue,GridField.java,"Object getValue()
	{
		return m_value;
	}   //  getValue
"
org.compiere.model.GridField.setValueNoFire,GridField.java,"void setValueNoFire (boolean value)
	{
		m_valueNoFire = value;
	}   //  setOldValue
"
org.compiere.model.GridField.getOldValue,GridField.java,"Object getOldValue()
	{
		return m_oldValue;
	}   //  getOldValue
"
org.compiere.model.GridField.setErrorValue,GridField.java,"void setErrorValue (String errorValue)
	{
		m_errorValue = errorValue;
		m_errorValueFlag = true;
	}   //  setErrorValue
"
org.compiere.model.GridField.getErrorValue,GridField.java,"String getErrorValue ()
	{
		String s = m_errorValue;
		m_errorValue = null;
		m_errorValueFlag = false;
		return s;
	}   //  getErrorValue
"
org.compiere.model.GridField.isErrorValue,GridField.java,"boolean isErrorValue()
	{
		boolean b = m_errorValueFlag;
		m_errorValueFlag = false;
		return b;
	}   //  isErrorValue
"
org.compiere.model.GridField.setDisplayLength,GridField.java,"void setDisplayLength (int length)
	{
		m_vo.DisplayLength = length;
	}   //  setDisplayLength
"
org.compiere.model.GridField.setDisplayed,GridField.java,"void setDisplayed (boolean displayed)
	{
		m_vo.IsDisplayed = displayed;
	}   //  setDisplayed
"
org.compiere.model.GridField.isCreateMnemonic,GridField.java,"boolean isCreateMnemonic()
	{
		if (isReadOnly()
			|| m_vo.ColumnName.equals(""AD_Client_ID"")
			|| m_vo.ColumnName.equals(""AD_Org_ID"")
			|| m_vo.ColumnName.equals(""DocumentNo""))
			return false;
		return true;
	}
"
org.compiere.model.GridField.getMnemonic,GridField.java,"char getMnemonic()
	{
		return m_mnemonic;
	}	//	getMnemonic
"
org.compiere.model.GridField.setMnemonic,GridField.java,"void setMnemonic (char mnemonic)
	{
		m_mnemonic = mnemonic;
	}	//	setMnemonic
"
org.compiere.model.GridField.toString,GridField.java,"String toString()
	{
		StringBuffer sb = new StringBuffer(""GridField["")
			.append(m_vo.ColumnName).append(""="").append(m_value);
		if (isKey())
			sb.append(""(Key)"");
		if (isParentColumn())
			sb.append(""(Parent)"");
		sb.append(""]"");
		return sb.toString();
	}   //  toString
"
org.compiere.model.GridField.toStringX,GridField.java,"String toStringX()
	{
		StringBuffer sb = new StringBuffer(""MField["");
		sb.append(m_vo.ColumnName).append(""="").append(m_value)
			.append("",DisplayType="").append(getDisplayType())
			.append(""]"");
		return sb.toString();
	}   //  toStringX
"
org.compiere.model.GridField.removePropertyChangeListener,GridField.java,"void removePropertyChangeListener(PropertyChangeListener l)
	{
		m_propertyChangeListeners.removePropertyChangeListener(l);
	}
"
org.compiere.model.GridField.addPropertyChangeListener,GridField.java,"void addPropertyChangeListener(PropertyChangeListener l)
	{
		m_propertyChangeListeners.addPropertyChangeListener(l);
	}
"
org.compiere.model.GridField.createFields,GridField.java,"GridField[] createFields (Ctx ctx, int WindowNo, int TabNo,
		 int AD_Tab_ID, int AD_UserDef_Win_ID)
	{
		ArrayList<GridFieldVO> listVO = new ArrayList<GridFieldVO>();
		int AD_Window_ID = 0;
		boolean readOnly = false;

		String[] stdFieldNames = new String[] {""Created"",""CreatedBy"",""Updated"",""UpdatedBy""};
		boolean[] stdFieldsFound = new boolean[] {false,false,false,false};

		String sql = GridFieldVO.getSQL(ctx, AD_UserDef_Win_ID);
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, AD_Tab_ID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				GridFieldVO vo = GridFieldVO.create(ctx, WindowNo, TabNo,
					AD_Window_ID, AD_Tab_ID, readOnly, rs);
				listVO.add(vo);
				String columnName = vo.ColumnName;
				for (int i = 0; i < stdFieldsFound.length; i++)
                {
					if (stdFieldNames[i].equals(columnName))
						stdFieldsFound[i] = true;
                }
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

		//	Standard Fields
		if (!stdFieldsFound[0])
			listVO.add(GridFieldVO.createStdField(ctx, WindowNo, TabNo, AD_Window_ID, AD_Tab_ID, false, true, true));
		if (!stdFieldsFound[1])
			listVO.add(GridFieldVO.createStdField(ctx, WindowNo, TabNo, AD_Window_ID, AD_Tab_ID, false, true, false));
		if (!stdFieldsFound[2])
			listVO.add(GridFieldVO.createStdField(ctx, WindowNo, TabNo, AD_Window_ID, AD_Tab_ID, false, false, true));
		if (!stdFieldsFound[3])
			listVO.add(GridFieldVO.createStdField(ctx, WindowNo, TabNo, AD_Window_ID, AD_Tab_ID, false, false, false));
		//
		GridField[] retValue = new GridField[listVO.size()];
		for (int i = 0; i < listVO.size(); i++)
			retValue[i] = new GridField (listVO.get(i));
		return retValue;
	}	//	createFields
"
org.compiere.model.MCommission.getLines,MCommission.java,"MCommissionLine[] getLines()
	{
		String sql = ""SELECT * FROM C_CommissionLine WHERE C_Commission_ID=? AND isActive = 'Y' ORDER BY Line"";
		ArrayList<MCommissionLine> list = new ArrayList<MCommissionLine>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getC_Commission_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MCommissionLine(getCtx(), rs, get_Trx()));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e); 
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		//	Convert
		MCommissionLine[] retValue = new MCommissionLine[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getLines
"
org.compiere.model.MCommission.setDateLastRun,MCommission.java,"void setDateLastRun (Timestamp DateLastRun)
	{
		if (DateLastRun != null)
			super.setDateLastRun(DateLastRun);
	}	//	setDateLastRun
"
org.compiere.model.MCommission.copyLinesFrom,MCommission.java,"int copyLinesFrom (MCommission otherCom)
	{
		if (otherCom == null)
			return 0;
		MCommissionLine[] fromLines = otherCom.getLines ();
		int count = 0;
		for (MCommissionLine element : fromLines) {
			MCommissionLine line = new MCommissionLine (getCtx(), 0, get_Trx());
			PO.copyValues(element, line, getAD_Client_ID(), getAD_Org_ID());
			line.set_ValueNoCheck (""C_CommissionLine_ID"", null);	//	new
			line.setC_Commission_ID (getC_Commission_ID());
			if (line.save())
				count++;
		}
		if (fromLines.length != count)
			log.log(Level.SEVERE, ""Line difference - From="" + fromLines.length + "" <> Saved="" + count);
		return count;
	}	//	copyLinesFrom
"
org.compiere.model.WBWindow.initWorkbench,GridWorkbench.java,"boolean initWorkbench (int ad_Workbench_ID)
	{
		AD_Workbench_ID = ad_Workbench_ID;
		//  Get WB info
		String sql = null;
		if (Env.isBaseLanguage(m_ctx, ""AD_Workbench""))
			sql = ""SELECT w.Name,w.Description,w.Help,""                         //  1..3
				+ "" w.AD_Column_ID,w.AD_Image_ID,w.AD_Color_ID,w.PA_Goal_ID,""   //  4..7
				+ "" c.ColumnName ""                                              //  8
				+ ""FROM AD_Workbench w, AD_Column c ""
				+ ""WHERE w.AD_Workbench_ID=?""                   //  #1
				+ "" AND w.IsActive='Y'""
				+ "" AND w.AD_Column_ID=c.AD_Column_ID"";
		else
			sql = ""SELECT t.Name,t.Description,t.Help,""
				+ "" w.AD_Column_ID,w.AD_Image_ID,w.AD_Color_ID,w.PA_Goal_ID,""
				+ "" c.ColumnName ""
				+ ""FROM AD_Workbench w, AD_Workbench_Trl t, AD_Column c ""
				+ ""WHERE w.AD_Workbench_ID=?""                   //  #1
				+ "" AND w.IsActive='Y'""
				+ "" AND w.AD_Workbench_ID=t.AD_Workbench_ID""
				+ "" AND t.AD_Language='"" + Env.getAD_Language(m_ctx) + ""'""
				+ "" AND w.AD_Column_ID=c.AD_Column_ID"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, AD_Workbench_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				Name = rs.getString(1);
				Description = rs.getString(2);
				if (Description == null)
					Description = """";
				Help = rs.getString(3);
				if (Help == null)
					Help = """";
				//
				AD_Column_ID = rs.getInt(4);
				AD_Image_ID = rs.getInt(5);
				AD_Color_ID = rs.getInt(6);
				PA_Goal_ID = rs.getInt(7);
				ColumnName = rs.getString(8);
			}
			else
				AD_Workbench_ID = 0;
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}

		if (AD_Workbench_ID == 0)
			return false;
		return initWorkbenchWindows();
	}   //  initWorkbench
"
org.compiere.model.WBWindow.toString,GridWorkbench.java,"String toString()
	{
		return ""MWorkbench ID="" + AD_Workbench_ID + "" "" + Name
			+ "", windows="" + m_windows.size() + "", LinkColumn="" + ColumnName;
	}   //  toString
"
org.compiere.model.WBWindow.dispose,GridWorkbench.java,"void dispose()
	{
		for (int i = 0; i < m_windows.size(); i++)
		{
			dispose(i);
		}
		m_windows.clear();
		m_windows = null;
	}   //  dispose
"
org.compiere.model.WBWindow.getQuery,GridWorkbench.java,"Query getQuery()
	{
		return Query.getEqualQuery(ColumnName, ""@#"" + ColumnName + ""@"");
	}   //  getQuery
"
org.compiere.model.WBWindow.getAD_Workbench_ID,GridWorkbench.java,"int getAD_Workbench_ID()
	{
		return AD_Workbench_ID;
	}
"
org.compiere.model.WBWindow.getName,GridWorkbench.java,"String getName()
	{
		return Name;
	}
"
org.compiere.model.WBWindow.getDescription,GridWorkbench.java,"String getDescription()
	{
		return Description;
	}
"
org.compiere.model.WBWindow.getHelp,GridWorkbench.java,"String getHelp()
	{
		return Help;
	}
"
org.compiere.model.WBWindow.getAD_Column_ID,GridWorkbench.java,"int getAD_Column_ID()
	{
		return AD_Column_ID;
	}
"
org.compiere.model.WBWindow.getAD_Image_ID,GridWorkbench.java,"int getAD_Image_ID()
	{
		return AD_Image_ID;
	}
"
org.compiere.model.WBWindow.getAD_Color_ID,GridWorkbench.java,"int getAD_Color_ID()
	{
		return AD_Color_ID;
	}
"
org.compiere.model.WBWindow.getPA_Goal_ID,GridWorkbench.java,"int getPA_Goal_ID()
	{
		return PA_Goal_ID;
	}
"
org.compiere.model.WBWindow.initWorkbenchWindows,GridWorkbench.java,"boolean initWorkbenchWindows()
	{
		String sql = ""SELECT AD_Window_ID, AD_Form_ID, AD_Process_ID, AD_Task_ID ""
			+ ""FROM AD_WorkbenchWindow ""
			+ ""WHERE AD_Workbench_ID=? AND IsActive='Y'""
			+ ""ORDER BY SeqNo"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, AD_Workbench_ID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				int AD_Window_ID = rs.getInt(1);
				int AD_Form_ID = rs.getInt(2);
				int AD_Process_ID = rs.getInt(3);
				int AD_Task_ID = rs.getInt(4);
				//
				if (AD_Window_ID > 0)
					m_windows.add (new WBWindow(TYPE_WINDOW, AD_Window_ID));
				else if (AD_Form_ID > 0)
					m_windows.add (new WBWindow(TYPE_FORM, AD_Form_ID));
				else if (AD_Process_ID > 0)
					m_windows.add (new WBWindow(TYPE_PROCESS, AD_Process_ID));
				else if (AD_Task_ID > 0)
					m_windows.add (new WBWindow(TYPE_TASK, AD_Task_ID));
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
			return false;
		}
		return true;
	}   //  initWorkbenchWindows
"
org.compiere.model.WBWindow.getWindowCount,GridWorkbench.java,"int getWindowCount()
	{
		return m_windows.size();
	}   //  getWindowCount
"
org.compiere.model.WBWindow.getWindowType,GridWorkbench.java,"int getWindowType (int index)
	{
		if (index < 0 || index > m_windows.size())
			return -1;
		WBWindow win = m_windows.get(index);
		return win.Type;
	}   //  getWindowType
"
org.compiere.model.WBWindow.getWindowID,GridWorkbench.java,"int getWindowID (int index)
	{
		if (index < 0 || index > m_windows.size())
			return -1;
		WBWindow win = m_windows.get(index);
		return win.ID;
	}   //  getWindowID
"
org.compiere.model.WBWindow.setMWindow,GridWorkbench.java,"void setMWindow (int index, GridWindow mw)
	{
		if (index < 0 || index > m_windows.size())
			throw new IllegalArgumentException (""Index invalid: "" + index);
		WBWindow win = m_windows.get(index);
		if (win.Type != TYPE_WINDOW)
			throw new IllegalArgumentException (""Not a MWindow: "" + index);
		win.mWindow = mw;
	}   //  setMWindow
"
org.compiere.model.WBWindow.getMWindow,GridWorkbench.java,"GridWindow getMWindow (int index)
	{
		if (index < 0 || index > m_windows.size())
			throw new IllegalArgumentException (""Index invalid: "" + index);
		WBWindow win = m_windows.get(index);
		if (win.Type != TYPE_WINDOW)
			throw new IllegalArgumentException (""Not a MWindow: "" + index);
		return win.mWindow;
	}   //  getMWindow
"
org.compiere.model.WBWindow.getName,GridWorkbench.java,"String getName (int index)
	{
		if (index < 0 || index > m_windows.size())
			throw new IllegalArgumentException (""Index invalid: "" + index);
		WBWindow win = m_windows.get(index);
		if (win.mWindow != null && win.Type == TYPE_WINDOW)
			return win.mWindow.getName();
		return null;
	}   //  getName
"
org.compiere.model.WBWindow.getDescription,GridWorkbench.java,"String getDescription (int index)
	{
		if (index < 0 || index > m_windows.size())
			throw new IllegalArgumentException (""Index invalid: "" + index);
		WBWindow win = m_windows.get(index);
		if (win.mWindow != null && win.Type == TYPE_WINDOW)
			return win.mWindow.getDescription();
		return null;
	}   //  getDescription
"
org.compiere.model.WBWindow.getHelp,GridWorkbench.java,"String getHelp (int index)
	{
		if (index < 0 || index > m_windows.size())
			throw new IllegalArgumentException (""Index invalid: "" + index);
		WBWindow win = m_windows.get(index);
		if (win.mWindow != null && win.Type == TYPE_WINDOW)
			return win.mWindow.getHelp();
		return null;
	}   //  getHelp
"
org.compiere.model.WBWindow.getIcon,GridWorkbench.java,"Icon getIcon (int index)
	{
		if (index < 0 || index > m_windows.size())
			throw new IllegalArgumentException (""Index invalid: "" + index);
		WBWindow win = m_windows.get(index);
		if (win.mWindow != null && win.Type == TYPE_WINDOW)
			return win.mWindow.getIcon();
		return null;
	}   //  getIcon
"
org.compiere.model.WBWindow.getImage,GridWorkbench.java,"Image getImage (int index)
	{
		if (index < 0 || index > m_windows.size())
			throw new IllegalArgumentException (""Index invalid: "" + index);
		WBWindow win = m_windows.get(index);
		if (win.mWindow != null && win.Type == TYPE_WINDOW)
			return win.mWindow.getImage();
		return null;
	}   //  getImage
"
org.compiere.model.WBWindow.getAD_Color_ID,GridWorkbench.java,"int getAD_Color_ID (int index)
	{
		if (index < 0 || index > m_windows.size())
			throw new IllegalArgumentException (""Index invalid: "" + index);
		int retValue = -1;
	//	if (win.mWindow != null && win.Type == TYPE_WINDOW)
	//		return win.mWindow.getAD_Color_ID();
		if (retValue == -1)
			return getAD_Color_ID();
		return retValue;
	}   //  getAD_Color_ID
"
org.compiere.model.WBWindow.setWindowNo,GridWorkbench.java,"void setWindowNo (int index, int windowNo)
	{
		if (index < 0 || index > m_windows.size())
			throw new IllegalArgumentException (""Index invalid: "" + index);
		WBWindow win = m_windows.get(index);
		win.WindowNo = windowNo;
	}   //  getWindowNo
"
org.compiere.model.WBWindow.getWindowNo,GridWorkbench.java,"int getWindowNo (int index)
	{
		if (index < 0 || index > m_windows.size())
			throw new IllegalArgumentException (""Index invalid: "" + index);
		WBWindow win = m_windows.get(index);
		return win.WindowNo;
	}   //  getWindowNo
"
org.compiere.model.WBWindow.dispose,GridWorkbench.java,"void dispose (int index)
	{
		if (index < 0 || index > m_windows.size())
			throw new IllegalArgumentException (""Index invalid: "" + index);
		WBWindow win = m_windows.get(index);
		if (win.mWindow != null)
			win.mWindow.dispose();
		win.mWindow = null;
	}   //  dispose
"
org.compiere.model.WBWindow.getWindowSize,GridWorkbench.java,"Dimension getWindowSize()
	{
		return null;
	}	//	getWindowSize
"
org.compiere.model.MInfoColumn.beforeSave,MInfoColumn.java,"boolean beforeSave(boolean newRecord)
	{
		//	Sync Terminology
		if ((newRecord || is_ValueChanged (""AD_Element_ID"")) 
			&& getAD_Element_ID() != 0 
			&& isCentrallyMaintained())
		{
			M_Element element = new M_Element (getCtx(), getAD_Element_ID (), null);
			setName (element.getName ());
			setDescription (element.getDescription ());
			setHelp (element.getHelp());
		}
		//	Auto Numbering
		if (newRecord && getSeqNo() == 0)
		{
			String sql = ""SELECT COALESCE(MAX(SeqNo),0)+10 FROM AD_InfoColumn WHERE AD_InfoWindow_ID=?"";
			int no = DB.getSQLValue(null, sql, getAD_InfoWindow_ID());
			setSeqNo(no);
		}
		
		return true;
	}	//	beforeSave
"
org.compiere.model.MFactAccumulation.getAll,MFactAccumulation.java,"ArrayList<MFactAccumulation> getAll (Ctx ctx, int C_AcctSchema_ID)
    {
    	StringBuffer sql = new StringBuffer(""SELECT * FROM Fact_Accumulation ""
    		+ ""WHERE IsActive='Y' AND AD_Client_ID=? "");
    	if (C_AcctSchema_ID > 0)
    		sql.append(""AND C_AcctSchema_ID=? "");
    	sql.append(""ORDER BY C_AcctSchema_ID, DateTo"");
    	ArrayList<MFactAccumulation> list = new ArrayList<MFactAccumulation>();
        PreparedStatement pstmt = null;
        try
        {
	        pstmt = DB.prepareStatement(sql.toString(), (Trx) null);
	        pstmt.setInt(1, ctx.getAD_Client_ID());
	        if (C_AcctSchema_ID > 0)
	        	pstmt.setInt(2, C_AcctSchema_ID);
	        ResultSet rs = pstmt.executeQuery();
	        while (rs.next())
		        list.add(new MFactAccumulation(ctx, rs, null));
	        rs.close();
	        pstmt.close();
	        pstmt = null;
        }
        catch (Exception e)
        {
        	s_log.log(Level.SEVERE, sql.toString(), e);
        }
        try
        {
	        if (pstmt != null)
		        pstmt.close();
	        pstmt = null;
        }
        catch (Exception e)
        {
	        pstmt = null;
        }
        return list;
    }	//	getAll
"
org.compiere.model.MFactAccumulation.getDateFrom,MFactAccumulation.java,"Timestamp getDateFrom(ArrayList<MFactAccumulation> accums, Timestamp dateFrom)
    {
    	if (accums.size() == 0 || dateFrom == null)
    		return dateFrom;
    	//
    	Timestamp earliestOK = new Timestamp(0L);
    	if (dateFrom != null)
    		earliestOK = dateFrom;
    	for (MFactAccumulation accum : accums)
        {
	        Timestamp dateTo = accum.getDateTo();
	        if (dateFrom.after(dateTo))
	        	continue;
	        //	Accumulation applies
	        earliestOK = accum.getDateFrom(dateFrom);	//	fix start date;
	        //	Find first open period
	        while (MPeriod.isClosed(accum.getCtx(), earliestOK))	//	assumes also closed before
	        {
	        	Timestamp temp = accum.getDateFromNext(earliestOK);
	        	if (temp == null)
	        		break;
        		earliestOK = temp;
	        }
        }
    	if (dateFrom != null && !dateFrom.equals(earliestOK))
    		s_log.info(""Changed from "" + dateFrom + "" to "" + earliestOK);
    	return earliestOK;
    }	//	getDateFrom
"
org.compiere.model.MFactAccumulation.setDateTo,MFactAccumulation.java,"void setDateTo(Timestamp DateTo)
	{
		if (BALANCEACCUMULATION_CalendarMonth.equals(getBalanceAccumulation()))
		{
			DateTo = TimeUtil.truncLast(DateTo, TimeUtil.TRUNC_MONTH);
		}
		else if (BALANCEACCUMULATION_CalendarWeek.equals(getBalanceAccumulation()))
		{
			DateTo = TimeUtil.truncLast(DateTo, TimeUtil.TRUNC_WEEK);
		}
		else if (BALANCEACCUMULATION_PeriodOfACompiereCalendar.equals(getBalanceAccumulation())
			&& getC_Calendar_ID() != 0)
		{
			
		}
	    super.setDateTo(DateTo);
	}	//	setDateTo
"
org.compiere.model.MFactAccumulation.getDateFrom,MFactAccumulation.java,"Timestamp getDateFrom (Timestamp from)
	{
		if (from == null)
			return from;
		
		if (BALANCEACCUMULATION_CalendarMonth.equals(getBalanceAccumulation()))
		{
			return TimeUtil.trunc(from, TimeUtil.TRUNC_MONTH);
		}
		else if (BALANCEACCUMULATION_CalendarWeek.equals(getBalanceAccumulation()))
		{
			return TimeUtil.truncLast(from, TimeUtil.TRUNC_WEEK);
		}
		else if (BALANCEACCUMULATION_PeriodOfACompiereCalendar.equals(getBalanceAccumulation())
			&& getC_Calendar_ID() != 0)
		{
			
		}
		return from;
	}	//	getDateFrom
"
org.compiere.model.MFactAccumulation.getDateFromNext,MFactAccumulation.java,"Timestamp getDateFromNext (Timestamp from)
	{
		if (from == null)
			return from;
		
		Timestamp retValue = from;
		if (BALANCEACCUMULATION_CalendarMonth.equals(getBalanceAccumulation()))
		{
			retValue = TimeUtil.addMonths(from, 1);
			retValue = TimeUtil.trunc(retValue, TimeUtil.TRUNC_MONTH);
		}
		else if (BALANCEACCUMULATION_CalendarWeek.equals(getBalanceAccumulation()))
		{
			retValue = TimeUtil.addDays(from, 7);
			retValue = TimeUtil.trunc(retValue, TimeUtil.TRUNC_WEEK);
		}
		else if (BALANCEACCUMULATION_PeriodOfACompiereCalendar.equals(getBalanceAccumulation())
			&& getC_Calendar_ID() != 0)
		{
			
		}
		//
		if (retValue.after(getDateTo()))
			return null;
		return retValue;
	}	//	getDateFromNext
"
org.compiere.model.MFactAccumulation.beforeSave,MFactAccumulation.java,"boolean beforeSave(boolean newRecord)
	{
		//	Calendar
		if (BALANCEACCUMULATION_PeriodOfACompiereCalendar.equals(getBalanceAccumulation()))
		{
			if (getC_Calendar_ID() == 0)
			{
				log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""C_Calendar_ID""));
				return false;
			}
		}
		else if (getC_Calendar_ID() != 0)
			setC_Calendar_ID(0);
		
		//	Check Date
		if (newRecord || is_ValueChanged(""DateTo"") || is_ValueChanged(""BalanceAccumulation""))
			setDateTo(getDateTo());
		
	    return true;
	}	//	beforeSave
"
org.compiere.model.MFactAccumulation.toString,MFactAccumulation.java,"String toString()
    {
	    StringBuffer sb = new StringBuffer(""MFactAccumulation["")
	    	.append(get_ID())
	    	.append(""-"").append(getDateTo())
	    	.append("",BalanceAccumulation="").append(getBalanceAccumulation());
	    if (getC_Calendar_ID() != 0)
	    	sb.append("",C_Calendar_ID="").append(getC_Calendar_ID());
	    sb.append(""]"");
	    return sb.toString();
    } //	toString
"
org.compiere.model.MGoal.getUserGoals,MGoal.java,"MGoal[] getUserGoals(Ctx ctx)
	{
		int AD_Role_ID = ctx.getAD_Role_ID();
		MRole role = MRole.get(ctx, AD_Role_ID);
		int AD_User_ID = ctx.getAD_User_ID();
		
		if (AD_User_ID < 0)
			return getTestGoals(ctx);
		ArrayList<MGoal> list = new ArrayList<MGoal>();
		String sql = ""SELECT * FROM PA_Goal g ""
			+ ""WHERE IsActive='Y'""
			+ "" AND AD_Client_ID=?""	//	#1
			+ "" AND ("";
		if (!role.isWebStoreRole())
			sql += "" (AD_User_ID IS NULL AND AD_Role_ID IS NULL) OR "";
		sql += "" AD_User_ID=?""		//	#2
				+ "" OR EXISTS (SELECT * FROM AD_User_Roles ur ""
					+ ""WHERE ?=ur.AD_User_ID AND g.AD_Role_ID=ur.AD_Role_ID AND ur.IsActive='Y')) ""
			+ ""ORDER BY SeqNo"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, ctx.getAD_Client_ID());
			pstmt.setInt (2, AD_User_ID);
			pstmt.setInt (3, AD_User_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MGoal goal = new MGoal (ctx, rs, null);
				goal.updateGoal(false);
				list.add (goal);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MGoal[] retValue = new MGoal[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getUserGoals
"
org.compiere.model.MGoal.getGoals,MGoal.java,"MGoal[] getGoals(Ctx ctx)
	{
		ArrayList<MGoal> list = new ArrayList<MGoal>();
		String sql = ""SELECT * FROM PA_Goal WHERE IsActive='Y' ""
			+ ""ORDER BY SeqNo"";
		sql = MRole.getDefault(ctx, false).addAccessSQL(sql, ""PA_Goal"", 
			false, true);	//	RW to restrict Access
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MGoal goal = new MGoal (ctx, rs, null);
				goal.updateGoal(false);
				list.add (goal);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MGoal[] retValue = new MGoal[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getGoals
"
org.compiere.model.MGoal.getTestGoals,MGoal.java,"MGoal[] getTestGoals(Ctx ctx)
	{
		MGoal[] retValue = new MGoal[4];
		retValue[0] = new MGoal (ctx, ""Test 1"", ""Description 1"", new BigDecimal (1000), null); 
		retValue[0].setMeasureActual(new BigDecimal (200)); 
		retValue[1] = new MGoal (ctx, ""Test 2"", ""Description 2"", new BigDecimal (1000), null); 
		retValue[1].setMeasureActual(new BigDecimal (900)); 
		retValue[2] = new MGoal (ctx, ""Test 3"", ""Description 3"", new BigDecimal (1000), null); 
		retValue[2].setMeasureActual(new BigDecimal (1200)); 
		retValue[3] = new MGoal (ctx, ""Test 4"", ""Description 4"", new BigDecimal (1000), null); 
		retValue[3].setMeasureActual(new BigDecimal (3200)); 
		return retValue;
	}	//	getTestGoals
"
org.compiere.model.MGoal.getMeasureGoals,MGoal.java,"MGoal[] getMeasureGoals (Ctx ctx, int PA_Measure_ID)
	{
		ArrayList<MGoal> list = new ArrayList<MGoal>();
		String sql = ""SELECT * FROM PA_Goal WHERE IsActive='Y' AND PA_Measure_ID=? ""
			+ ""ORDER BY SeqNo"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, PA_Measure_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MGoal (ctx, rs, null));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MGoal[] retValue = new MGoal[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getMeasureGoals
"
org.compiere.model.MGoal.getMultiplier,MGoal.java,"BigDecimal getMultiplier (MGoal goal)
	{
		String MeasureScope = goal.getMeasureScope();
		String MeasureDisplay = goal.getMeasureDisplay();
		if (MeasureDisplay == null
			|| MeasureScope.equals(MeasureDisplay))
			return Env.ONE;		//	1:1
		
		if (MeasureScope.equals(MEASURESCOPE_Total) 
			||  MeasureDisplay.equals(MEASUREDISPLAY_Total))
			return null;		//	Error

		BigDecimal Multiplier = null;
		if (MeasureScope.equals(MEASURESCOPE_Year))
		{
			if (MeasureDisplay.equals(MEASUREDISPLAY_Quarter))
				Multiplier = new BigDecimal(1.0/4.0);
			else if (MeasureDisplay.equals(MEASUREDISPLAY_Month))
				Multiplier = new BigDecimal(1.0/12.0);
			else if (MeasureDisplay.equals(MEASUREDISPLAY_Week))
				Multiplier = new BigDecimal(1.0/52.0);
			else if (MeasureDisplay.equals(MEASUREDISPLAY_Day))
				Multiplier = new BigDecimal(1.0/364.0);
		}
		else if (MeasureScope.equals(MEASURESCOPE_Quarter))
		{
			if (MeasureDisplay.equals(MEASUREDISPLAY_Year))
				Multiplier = new BigDecimal(4.0);
			else if (MeasureDisplay.equals(MEASUREDISPLAY_Month))
				Multiplier = new BigDecimal(1.0/3.0);
			else if (MeasureDisplay.equals(MEASUREDISPLAY_Week))
				Multiplier = new BigDecimal(1.0/13.0);
			else if (MeasureDisplay.equals(MEASUREDISPLAY_Day))
				Multiplier = new BigDecimal(1.0/91.0);
		}
		else if (MeasureScope.equals(MEASURESCOPE_Month))
		{
			if (MeasureDisplay.equals(MEASUREDISPLAY_Year))
				Multiplier = new BigDecimal(12.0);
			else if (MeasureDisplay.equals(MEASUREDISPLAY_Quarter))
				Multiplier = new BigDecimal(3.0);
			else if (MeasureDisplay.equals(MEASUREDISPLAY_Week))
				Multiplier = new BigDecimal(1.0/4.0);
			else if (MeasureDisplay.equals(MEASUREDISPLAY_Day))
				Multiplier = new BigDecimal(1.0/30.0);
		}
		else if (MeasureScope.equals(MEASURESCOPE_Week))
		{
			if (MeasureDisplay.equals(MEASUREDISPLAY_Year))
				Multiplier = new BigDecimal(52.0);
			else if (MeasureDisplay.equals(MEASUREDISPLAY_Quarter))
				Multiplier = new BigDecimal(13.0);
			else if (MeasureDisplay.equals(MEASUREDISPLAY_Month))
				Multiplier = new BigDecimal(4.0);
			else if (MeasureDisplay.equals(MEASUREDISPLAY_Day))
				Multiplier = new BigDecimal(1.0/7.0);
		}
		else if (MeasureScope.equals(MEASURESCOPE_Day))
		{
			if (MeasureDisplay.equals(MEASUREDISPLAY_Year))
				Multiplier = new BigDecimal(364.0);
			else if (MeasureDisplay.equals(MEASUREDISPLAY_Quarter))
				Multiplier = new BigDecimal(91.0);
			else if (MeasureDisplay.equals(MEASUREDISPLAY_Month))
				Multiplier = new BigDecimal(30.0);
			else if (MeasureDisplay.equals(MEASUREDISPLAY_Week))
				Multiplier = new BigDecimal(7.0);
		}
		return Multiplier;
	}	//	getMultiplier
"
org.compiere.model.MGoal.getRestrictions,MGoal.java,"MGoalRestriction[] getRestrictions (boolean reload)
	{
		if (m_restrictions != null && !reload)
			return m_restrictions;
		ArrayList<MGoalRestriction> list = new ArrayList<MGoalRestriction>();
		//
		String sql = ""SELECT * FROM PA_GoalRestriction ""
			+ ""WHERE PA_Goal_ID=? AND IsActive='Y' ""
			+ ""ORDER BY Org_ID, C_BPartner_ID, M_Product_ID"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getPA_Goal_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MGoalRestriction (getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		m_restrictions = new MGoalRestriction[list.size ()];
		list.toArray (m_restrictions);
		return m_restrictions;
	}	//	getRestrictions
"
org.compiere.model.MGoal.getMeasure,MGoal.java,"MMeasure getMeasure()
	{
		if (getPA_Measure_ID() != 0)
			return MMeasure.get(getCtx(), getPA_Measure_ID());
		return null;
	}	//	getMeasure
"
org.compiere.model.MGoal.updateGoal,MGoal.java,"boolean updateGoal(boolean force)
	{
		log.config(""Force="" + force);
		MMeasure measure = MMeasure.get(getCtx(), getPA_Measure_ID());
		if (force 
			|| getDateLastRun() == null
			|| !TimeUtil.isSameHour(getDateLastRun(), null))
		{
			if (measure.updateGoals())		//	saves
			{
				load(get_ID(), get_Trx());
				return true;
			}
		}
		return false;
	}	//	updateGoal
"
org.compiere.model.MGoal.setMeasureActual,MGoal.java,"void setMeasureActual (BigDecimal MeasureActual)
	{
		if (MeasureActual == null)
			return;
		super.setMeasureActual (MeasureActual);
		setDateLastRun(new Timestamp(System.currentTimeMillis()));
		setGoalPerformance();
	}	//	setMeasureActual
"
org.compiere.model.MGoal.setGoalPerformance,MGoal.java,"void setGoalPerformance ()
	{
		BigDecimal MeasureTarget = getMeasureTarget();
		BigDecimal MeasureActual = getMeasureActual();
		BigDecimal GoalPerformance = Env.ZERO;
		if (MeasureTarget.signum() != 0)
			GoalPerformance = MeasureActual.divide(MeasureTarget, 6, BigDecimal.ROUND_HALF_UP);
		super.setGoalPerformance (GoalPerformance);
	}	//	setGoalPerformance
"
org.compiere.model.MGoal.getGoalPerformanceDouble,MGoal.java,"double getGoalPerformanceDouble()
	{
		BigDecimal bd = getGoalPerformance();
		return bd.doubleValue();
	}	//	getGoalPerformanceDouble
"
org.compiere.model.MGoal.getPercent,MGoal.java,"int getPercent()
	{
		BigDecimal bd = getGoalPerformance().multiply(Env.ONEHUNDRED);
		return bd.intValue();
	}	//	getPercent
"
org.compiere.model.MGoal.getColor,MGoal.java,"Color getColor()
	{
		if (getMeasureTarget().signum() == 0)
			return Color.white;
		else
			return MColorSchema.getColor(getCtx(), getPA_ColorSchema_ID(), getPercent());
	}	//	getColor
"
org.compiere.model.MGoal.getColorSchema,MGoal.java,"MColorSchema getColorSchema()
    {
        return (getMeasureTarget().signum() == 0) ?
            null : MColorSchema.get(getCtx(), getPA_ColorSchema_ID());
    }
"
org.compiere.model.MGoal.getMeasureDisplay,MGoal.java,"String getMeasureDisplay ()
	{
		String s = super.getMeasureDisplay ();
		if (s == null)
		{
			if (MEASURESCOPE_Week.equals(getMeasureScope()))
				s = MEASUREDISPLAY_Week;
			else if (MEASURESCOPE_Day.equals(getMeasureScope()))
				s = MEASUREDISPLAY_Day;
			else
				s = MEASUREDISPLAY_Month;
		}
		return s;
	}	//	getMeasureDisplay
"
org.compiere.model.MGoal.getXAxisText,MGoal.java,"String getXAxisText ()
	{
		MMeasure measure = getMeasure();
		if (measure != null 
			&& X_PA_Measure.MEASUREDATATYPE_StatusQtyAmount.equals(measure.getMeasureDataType()))
		{
			if (X_PA_Measure.MEASURETYPE_Request.equals(measure.getMeasureType()))
				return Msg.getElement(getCtx(), ""R_Status_ID"");
			if (X_PA_Measure.MEASURETYPE_Project.equals(measure.getMeasureType()))
				return Msg.getElement(getCtx(), ""C_Phase_ID"");
		}
		String value = getMeasureDisplay();
		String display = MRefList.getListName(getCtx(), MEASUREDISPLAY_AD_Reference_ID, value);
		return display==null ? value : display;
	}	//	getMeasureDisplayText
"
org.compiere.model.MGoal.isTarget,MGoal.java,"boolean isTarget()
	{
		return getMeasureTarget().signum() != 0;
	}	//	isTarget
"
org.compiere.model.MGoal.toString,MGoal.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MGoal["");
		sb.append (get_ID ())
			.append (""-"").append (getName())
			.append("","").append(getGoalPerformance())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MGoal.beforeSave,MGoal.java,"boolean beforeSave (boolean newRecord)
	{
	//	if (getMultiplier(this) == null)	//	error
	//		setMeasureDisplay(getMeasureScope());
		
		//	Measure required if nor Summary
		if (!isSummary() && getPA_Measure_ID() == 0)
		{
			log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""PA_Measure_ID""));
			return false;
		}
		if (isSummary() && getPA_Measure_ID() != 0)
			setPA_Measure_ID(0);
		
		//	User/Role Check
		if ((newRecord || is_ValueChanged(""AD_User_ID"") || is_ValueChanged(""AD_Role_ID""))
			&& getAD_User_ID() != 0)
		{
			MUser user = MUser.get(getCtx(), getAD_User_ID());
			MRole[] roles = user.getRoles(getAD_Org_ID());
			if (roles.length == 0)		//	No Role
				setAD_Role_ID(0);
			else if (roles.length == 1)	//	One
				setAD_Role_ID(roles[0].getAD_Role_ID());
			else
			{
				int AD_Role_ID = getAD_Role_ID();
				if (AD_Role_ID != 0)	//	validate
				{
					boolean found = false;
					for (MRole element : roles) {
						if (AD_Role_ID == element.getAD_Role_ID())
						{
							found = true;
							break;
						}
					}
					if (!found)
						AD_Role_ID = 0;
				}
				if (AD_Role_ID == 0)		//	set to first one
					setAD_Role_ID(roles[0].getAD_Role_ID());
			}	//	multiple roles
		}	//	user check

		return true;
	}	//	beforeSave
"
org.compiere.model.MGoal.afterSave,MGoal.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!success)
			return success;
		
		//	Update Goal if Target / Scope Changed
		if (newRecord 
			|| is_ValueChanged(""MeasureTarget"") 
			|| is_ValueChanged(""MeasureScope""))
			updateGoal(true);

		return success;
	}
"
org.compiere.model.MLoginMsgLog.isUserAccepted,MLoginMsgLog.java,"boolean isUserAccepted()
	{
		String s = getIsUserAccepted();
		return s != null && ISUSERACCEPTED_Yes.equals(s);
	}	//	isUserAccepted
"
org.compiere.model.MLoginMsgLog.isUserRejected,MLoginMsgLog.java,"boolean isUserRejected()
	{
		String s = getIsUserAccepted();
		return s != null && ISUSERACCEPTED_No.equals(s);
	}	//	isUserRejected
"
org.compiere.model.MLoginMsgLog.setAD_User_ID,MLoginMsgLog.java,"void setAD_User_ID(int AD_User_ID)
	{
		if (AD_User_ID == 0)
			set_ValueNoCheck(""AD_User_ID"", Integer.valueOf (0));
		else
			super.setAD_User_ID(AD_User_ID);
	}	//	setAD_User_ID
"
org.compiere.model.MLoginMsgLog.toString,MLoginMsgLog.java,"String toString()
    {
	    StringBuffer sb = new StringBuffer(""MLoginMsgLog["")
	    	.append(get_ID())
	        .append("",AD_User_ID="").append(getAD_User_ID());
	    if (getIsUserAccepted() != null)
	        sb.append("",Accepted="").append(getIsUserAccepted());
	    
	        ;
	    sb.append(""]"");
	    return sb.toString();
    } //	toString
"
org.compiere.model.CalloutInOut.order,CalloutInOut.java,"String order (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer C_Order_ID = (Integer)value;
		if (C_Order_ID == null || C_Order_ID.intValue() == 0)
			return """";
		//	No Callout Active to fire dependent values
		if (isCalloutActive())	//	prevent recursive
			return """";


		MOrder order = new MOrder (ctx, C_Order_ID.intValue(), null);

		if (order.get_ID() != 0)
		{
			mTab.setValue(""DateOrdered"", order.getDateOrdered());
			mTab.setValue(""POReference"", order.getPOReference());
			mTab.setValue(""Description"", order.getDescription());
			mTab.setValue(""AD_Org_ID"", Integer.valueOf(order.getAD_Org_ID()));
			//
			mTab.setValue(""M_Warehouse_ID"", Integer.valueOf(order.getM_Warehouse_ID()));
			mTab.setValue(""DeliveryRule"", order.getDeliveryRule());
			mTab.setValue(""DeliveryViaRule"", order.getDeliveryViaRule());
			mTab.setValue(""M_Shipper_ID"", Integer.valueOf(order.getM_Shipper_ID()));
			mTab.setValue(""FreightCostRule"", order.getFreightCostRule());
			mTab.setValue(""FreightAmt"", order.getFreightAmt());

			mTab.setValue(""C_BPartner_ID"", Integer.valueOf(order.getC_BPartner_ID()));
			//sraval: source forge bug # 1503219 - added to default ship to location
			mTab.setValue(""C_BPartner_Location_ID"", Integer.valueOf(order.getC_BPartner_Location_ID()));

			mTab.setValue(""AD_OrgTrx_ID"", Integer.valueOf(order.getAD_OrgTrx_ID()));
			mTab.setValue(""C_Activity_ID"", Integer.valueOf(order.getC_Activity_ID()));
			mTab.setValue(""C_Campaign_ID"", Integer.valueOf(order.getC_Campaign_ID()));
			mTab.setValue(""C_Project_ID"", Integer.valueOf(order.getC_Project_ID()));
			mTab.setValue(""User1_ID"", Integer.valueOf(order.getUser1_ID()));
			mTab.setValue(""User2_ID"", Integer.valueOf(order.getUser2_ID()));

			boolean isReturnTrx = (Boolean)mTab.getValue(""IsReturnTrx"");
			if(isReturnTrx)
			{
				mTab.setValue(""Orig_Order_ID"", order.getOrig_Order_ID());
				mTab.setValue(""Orig_InOut_ID"", order.getOrig_InOut_ID());
			}
		}


		return """";
	}	//	order
"
org.compiere.model.CalloutInOut.docType,CalloutInOut.java,"String docType (Ctx ctx, int WindowNo, GridTab mTab, GridField mField,
			Object value, Object oldValue)
	{
		Integer C_DocType_ID = (Integer)value;
		if (C_DocType_ID == null || C_DocType_ID.intValue() == 0)
			return """";

		//	Re-Create new DocNo, if there is a doc number already
		//	and the existing source used a different Sequence number
		String oldDocNo = (String)mTab.getValue(""DocumentNo"");
		boolean newDocNo = oldDocNo == null;
		if (!newDocNo && oldDocNo.startsWith(""<"") && oldDocNo.endsWith("">""))
			newDocNo = true;
		Integer oldC_DocType_ID = (Integer)mTab.getValue(""C_DocType_ID"");
		if ((oldC_DocType_ID == null || oldC_DocType_ID.intValue() == 0)
				&& oldValue != null)	//	get old Target
			oldC_DocType_ID = (Integer)oldValue;

		String sql = ""SELECT d.DocBaseType, d.IsDocNoControlled,""
			+ "" s.CurrentNext, d.IsReturnTrx, s.CurrentNextSys, s.AD_Sequence_ID ""
			+ ""FROM C_DocType d""
			+ "" LEFT OUTER JOIN AD_Sequence s ON (d.DocNoSequence_ID=s.AD_Sequence_ID)""
			+ ""WHERE C_DocType_ID=?"";		//	1
		try
		{
			int AD_Sequence_ID = 0;

			//	Get old AD_SeqNo for comparison
			if (oldC_DocType_ID.intValue() != 0)
			{
				PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
				pstmt.setInt(1, oldC_DocType_ID.intValue());
				ResultSet rs = pstmt.executeQuery();
				if (rs.next())
					AD_Sequence_ID = rs.getInt(6);
				rs.close();
				pstmt.close();
			}

			ctx.setContext( WindowNo, ""C_DocTypeTarget_ID"", C_DocType_ID.intValue());
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_DocType_ID.intValue());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				//	Set Movement Type
				String DocBaseType = rs.getString(""DocBaseType"");
				Boolean isReturnTrx = rs.getString(""IsReturnTrx"").equals(""Y"");
				if (DocBaseType.equals(""MMS"") && !isReturnTrx)					//	Material Shipments
					mTab.setValue(""MovementType"", ""C-"");				//	Customer Shipments
				else if (DocBaseType.equals(""MMS"") && isReturnTrx)				//	Material Shipments
					mTab.setValue(""MovementType"", ""C+"");				//	Customer Returns
				else if (DocBaseType.equals(""MMR"") && !isReturnTrx)				//	Material Receipts
					mTab.setValue(""MovementType"", ""V+"");				//	Vendor Receipts
				else if (DocBaseType.equals(""MMR"") && isReturnTrx)				//	Material Receipts
				mTab.setValue(""MovementType"", ""V-"");					//	Return to Vendor

				//	DocumentNo
				if (rs.getString(2).equals(""Y""))			//	IsDocNoControlled
				{
					if (AD_Sequence_ID != rs.getInt(6))
						newDocNo = true;
					if (newDocNo)
						if (Ini.isPropertyBool(Ini.P_COMPIERESYS) && Env.getCtx().getAD_Client_ID() < 1000000)
							mTab.setValue(""DocumentNo"", ""<"" + rs.getString(5) + "">"");
						else
							mTab.setValue(""DocumentNo"", ""<"" + rs.getString(3) + "">"");
				}

			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
			return e.getLocalizedMessage();
		}
		return """";
	}	//	docType
"
org.compiere.model.CalloutInOut.bpartner,CalloutInOut.java,"String bpartner (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer C_BPartner_ID = (Integer)value;
		if (C_BPartner_ID == null || C_BPartner_ID.intValue() == 0)
			return """";

		boolean isReturnTrx = (Boolean)mTab.getValue(""IsReturnTrx"");

		//	sraval: source forge bug # 1503219
		Integer order = (Integer)mTab.getValue(""C_Order_ID"");

		String sql = ""SELECT p.AD_Language, p.POReference,""
			+ ""SO_CreditLimit, p.SO_CreditLimit-p.SO_CreditUsed AS CreditAvailable,""
			+ ""l.C_BPartner_Location_ID, c.AD_User_ID ""
			+ ""FROM C_BPartner p""
			+ "" LEFT OUTER JOIN C_BPartner_Location l ON (p.C_BPartner_ID=l.C_BPartner_ID AND l.IsActive='Y')""
			+ "" LEFT OUTER JOIN AD_User c ON (p.C_BPartner_ID=c.C_BPartner_ID AND c.IsActive='Y') ""
			+ ""WHERE p.C_BPartner_ID=?"";		//	1

		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_BPartner_ID.intValue());
			ResultSet rs = pstmt.executeQuery();

			if (rs.next())
			{
				//	Location
				Integer ii = Integer.valueOf(rs.getInt(""C_BPartner_Location_ID""));
				// sraval: source forge bug # 1503219 - default location for material receipt
				if (order == null){
					if (rs.wasNull())
						mTab.setValue(""C_BPartner_Location_ID"", null);
					else
						mTab.setValue(""C_BPartner_Location_ID"", ii);
				}
				//	Contact
				ii = Integer.valueOf(rs.getInt(""AD_User_ID""));
				if (rs.wasNull())
					mTab.setValue(""AD_User_ID"", null);
				else
					mTab.setValue(""AD_User_ID"", ii);

				// Skip credit check for returns
				if(!isReturnTrx)
				{
					//	CreditAvailable
					double CreditAvailable = rs.getDouble(""CreditAvailable"");
					if (!rs.wasNull() && CreditAvailable < 0)
						mTab.fireDataStatusEEvent(""CreditLimitOver"",
								DisplayType.getNumberFormat(DisplayTypeConstants.Amount).format(CreditAvailable),
								false);
				}
				//
				mTab.setValue(""C_Project_ID"", null);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
			return e.getLocalizedMessage();
		}
		return """";
	}	//	bpartner
"
org.compiere.model.CalloutInOut.warehouse,CalloutInOut.java,"String warehouse (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		if (isCalloutActive())
			return """";
		Integer M_Warehouse_ID = (Integer)value;
		if (M_Warehouse_ID == null || M_Warehouse_ID.intValue() == 0)
			return """";
		setCalloutActive(true);


		String sql = ""SELECT w.AD_Org_ID, l.M_Locator_ID, w.IsDisallowNegativeInv, ""
			+ ""w.IsWMSEnabled, w.M_RCVLocator_ID ""
			+ ""FROM M_Warehouse w""
			+ "" LEFT OUTER JOIN M_Locator l ON (l.M_Warehouse_ID=w.M_Warehouse_ID AND l.IsDefault='Y') ""
			+ ""WHERE w.M_Warehouse_ID=?"";		//	1

		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, M_Warehouse_ID.intValue());
			ResultSet rs = pstmt.executeQuery();

			if (rs.next())
			{
				//	Org
				Integer ii = Integer.valueOf(rs.getInt(1));
				int AD_Org_ID = ctx.getContextAsInt( WindowNo, ""AD_Org_ID"");
				if (AD_Org_ID != ii.intValue())
					mTab.setValue(""AD_Org_ID"", ii);
				
				//	Locator
				Boolean isWMSEnabled = rs.getString(4).equals(""Y"");
				int M_Locator_ID = 0;
				if (isWMSEnabled)
					M_Locator_ID = rs.getInt(5);

				if(M_Locator_ID == 0 )
					M_Locator_ID = rs.getInt(2);
				
				if (M_Locator_ID == 0)
					ctx.setContext( WindowNo, 0, ""M_Locator_ID"", null);
				else
				{
					log.config(""M_Locator_ID="" + M_Locator_ID);
					ctx.setContext( WindowNo, ""M_Locator_ID"", M_Locator_ID);
				}

				Boolean disallowNegInv = rs.getString(3).equals(""Y"");
				String DeliveryRule = mTab.get_ValueAsString(""DeliveryRule"");
				if(disallowNegInv && DeliveryRule.equals(X_C_Order.DELIVERYRULE_Force) ||
						DeliveryRule == null || DeliveryRule.length()==0)
					mTab.setValue(""DeliveryRule"",X_C_Order.DELIVERYRULE_Availability);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
			setCalloutActive(false);
			return e.getLocalizedMessage();
		}

		setCalloutActive(false);
		return """";
	}	//	warehouse
"
org.compiere.model.CalloutInOut.orderLine,CalloutInOut.java,"String orderLine (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer C_OrderLine_ID = (Integer)value;
		if (C_OrderLine_ID == null || C_OrderLine_ID.intValue() == 0)
			return """";
		setCalloutActive(true);

		//	Get Details
		MOrderLine ol = new MOrderLine (ctx, C_OrderLine_ID.intValue(), null);

		//	Get Details
		if (ol.get_ID() != 0)
		{
			mTab.setValue(""Description"", ol.getDescription());
			mTab.setValue(""M_Product_ID"", Integer.valueOf(ol.getM_Product_ID()));
			mTab.setValue(""M_AttributeSetInstance_ID"", Integer.valueOf(ol.getM_AttributeSetInstance_ID()));
			//
			mTab.setValue(""C_UOM_ID"", Integer.valueOf(ol.getC_UOM_ID()));
			BigDecimal MovementQty = ol.getQtyOrdered().subtract(ol.getQtyDelivered());
			mTab.setValue(""MovementQty"", MovementQty);
			BigDecimal QtyEntered = MovementQty;
			if (ol.getQtyEntered().compareTo(ol.getQtyOrdered()) != 0)
				QtyEntered = QtyEntered.multiply(ol.getQtyEntered())
					.divide(ol.getQtyOrdered(), 12, BigDecimal.ROUND_HALF_UP);
			mTab.setValue(""QtyEntered"", QtyEntered);
			//
			mTab.setValue(""C_Activity_ID"", Integer.valueOf(ol.getC_Activity_ID()));
			mTab.setValue(""C_Campaign_ID"", Integer.valueOf(ol.getC_Campaign_ID()));
			mTab.setValue(""C_Project_ID"", Integer.valueOf(ol.getC_Project_ID()));
			mTab.setValue(""C_ProjectPhase_ID"", Integer.valueOf(ol.getC_ProjectPhase_ID()));
			mTab.setValue(""C_ProjectTask_ID"", Integer.valueOf(ol.getC_ProjectTask_ID()));
			mTab.setValue(""AD_OrgTrx_ID"", Integer.valueOf(ol.getAD_OrgTrx_ID()));
			mTab.setValue(""User1_ID"", Integer.valueOf(ol.getUser1_ID()));
			mTab.setValue(""User2_ID"", Integer.valueOf(ol.getUser2_ID()));

			if(ol.getParent().isReturnTrx())
			{
				mTab.setValue(""Orig_OrderLine_ID"", Integer.valueOf(ol.getOrig_OrderLine_ID()));
				MInOutLine ioLine = new MInOutLine (ctx, ol.getOrig_InOutLine_ID(), null);
				mTab.setValue(""M_Locator_ID"", ioLine.getM_Locator_ID());
			}

		}
		setCalloutActive(false);
		return """";
	}	//	orderLine
"
org.compiere.model.CalloutInOut.product,CalloutInOut.java,"String product (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		if (isCalloutActive())
			return """";
		Integer M_Product_ID = (Integer)value;
		if (M_Product_ID == null || M_Product_ID.intValue() == 0)
			return """";
		setCalloutActive(true);

		//	Set Attribute & Locator
		int M_Locator_ID = 0;
		if (ctx.getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_Product_ID"") == M_Product_ID.intValue()
			&& ctx.getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_AttributeSetInstance_ID"") != 0)
		{
			mTab.setValue(""M_AttributeSetInstance_ID"",
				Integer.valueOf(ctx.getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_AttributeSetInstance_ID"")));
			//	Locator from Info Window - ASI
			M_Locator_ID = ctx.getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_Locator_ID"");
			if (M_Locator_ID != 0)
				mTab.setValue(""M_Locator_ID"", Integer.valueOf(M_Locator_ID));
		}
		else
			mTab.setValue(""M_AttributeSetInstance_ID"", null);
		//
		boolean IsSOTrx = ctx.isSOTrx(WindowNo);
		if (IsSOTrx)
		{
			setCalloutActive(false);
			return """";
		}

		//	PO - Set UOM/Locator/Qty
		MProduct product = MProduct.get(ctx, M_Product_ID.intValue());
		mTab.setValue(""C_UOM_ID"", Integer.valueOf (product.getC_UOM_ID()));
		BigDecimal QtyEntered = (BigDecimal)mTab.getValue(""QtyEntered"");
		mTab.setValue(""MovementQty"", QtyEntered);
		if (M_Locator_ID != 0)
			;		//	already set via ASI
		else
		{
			int M_Warehouse_ID = ctx.getContextAsInt( WindowNo, ""M_Warehouse_ID"");
			M_Locator_ID = MProductLocator.getFirstM_Locator_ID (product, M_Warehouse_ID);
			if (M_Locator_ID != 0)
				mTab.setValue(""M_Locator_ID"", Integer.valueOf (M_Locator_ID));
			else
			{
				MWarehouse wh = MWarehouse.get (ctx, M_Warehouse_ID);
				if(wh.isWMSEnabled())
					M_Locator_ID = wh.getM_RcvLocator_ID();
				
				if(M_Locator_ID == 0)
					M_Locator_ID = wh.getDefaultM_Locator_ID();
				
				mTab.setValue(""M_Locator_ID"", Integer.valueOf (M_Locator_ID));
			}
		}
		setCalloutActive(false);
		return """";
	}	//	product
"
org.compiere.model.CalloutInOut.qty,CalloutInOut.java,"String qty (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		if (isCalloutActive() || value == null)
			return """";
		setCalloutActive(true);

		int M_Product_ID = ctx.getContextAsInt( WindowNo, ""M_Product_ID"");
		//	log.log(Level.WARNING,""qty - init - M_Product_ID="" + M_Product_ID);
		BigDecimal MovementQty, QtyEntered;

		//	No Product
		if (M_Product_ID == 0)
		{
			QtyEntered = (BigDecimal)mTab.getValue(""QtyEntered"");
			mTab.setValue(""MovementQty"", QtyEntered);
		}
		//	UOM Changed - convert from Entered -> Product
		else if (mField.getColumnName().equals(""C_UOM_ID""))
		{
			int C_UOM_To_ID = ((Integer)value).intValue();
			QtyEntered = (BigDecimal)mTab.getValue(""QtyEntered"");
			BigDecimal QtyEntered1 = QtyEntered.setScale(MUOM.getPrecision(ctx, C_UOM_To_ID), BigDecimal.ROUND_HALF_UP);
			if (QtyEntered.compareTo(QtyEntered1) != 0)
			{
				log.fine(""Corrected QtyEntered Scale UOM="" + C_UOM_To_ID
					+ ""; QtyEntered="" + QtyEntered + ""->"" + QtyEntered1);
				QtyEntered = QtyEntered1;
				mTab.setValue(""QtyEntered"", QtyEntered);
			}
			MovementQty = MUOMConversion.convertProductFrom (ctx, M_Product_ID,
				C_UOM_To_ID, QtyEntered);
			if (MovementQty == null)
				MovementQty = QtyEntered;
			boolean conversion = QtyEntered.compareTo(MovementQty) != 0;
			log.fine(""UOM="" + C_UOM_To_ID
				+ "", QtyEntered="" + QtyEntered
				+ "" -> "" + conversion
				+ "" MovementQty="" + MovementQty);
			ctx.setContext( WindowNo, ""UOMConversion"", conversion ? ""Y"" : ""N"");
			mTab.setValue(""MovementQty"", MovementQty);
		}
		//	No UOM defined
		else if (ctx.getContextAsInt( WindowNo, ""C_UOM_ID"") == 0)
		{
			QtyEntered = (BigDecimal)mTab.getValue(""QtyEntered"");
			mTab.setValue(""MovementQty"", QtyEntered);
		}
		//	QtyEntered changed - calculate MovementQty
		else if (mField.getColumnName().equals(""QtyEntered""))
		{
			int C_UOM_To_ID = ctx.getContextAsInt( WindowNo, ""C_UOM_ID"");
			QtyEntered = (BigDecimal)value;
			BigDecimal QtyEntered1 = QtyEntered.setScale(MUOM.getPrecision(ctx, C_UOM_To_ID), BigDecimal.ROUND_HALF_UP);
			if (QtyEntered.compareTo(QtyEntered1) != 0)
			{
				log.fine(""Corrected QtyEntered Scale UOM="" + C_UOM_To_ID
					+ ""; QtyEntered="" + QtyEntered + ""->"" + QtyEntered1);
				QtyEntered = QtyEntered1;
				mTab.setValue(""QtyEntered"", QtyEntered);
			}
			MovementQty = MUOMConversion.convertProductFrom (ctx, M_Product_ID,
				C_UOM_To_ID, QtyEntered);
			if (MovementQty == null)
				MovementQty = QtyEntered;
			boolean conversion = QtyEntered.compareTo(MovementQty) != 0;
			log.fine(""UOM="" + C_UOM_To_ID
				+ "", QtyEntered="" + QtyEntered
				+ "" -> "" + conversion
				+ "" MovementQty="" + MovementQty);
			ctx.setContext( WindowNo, ""UOMConversion"", conversion ? ""Y"" : ""N"");
			mTab.setValue(""MovementQty"", MovementQty);
		}
		//	MovementQty changed - calculate QtyEntered (should not happen)
		else if (mField.getColumnName().equals(""MovementQty""))
		{
			int C_UOM_To_ID = ctx.getContextAsInt( WindowNo, ""C_UOM_ID"");
			MovementQty = (BigDecimal)value;
			int precision = MProduct.get(ctx, M_Product_ID).getUOMPrecision();
			BigDecimal MovementQty1 = MovementQty.setScale(precision, BigDecimal.ROUND_HALF_UP);
			if (MovementQty.compareTo(MovementQty1) != 0)
			{
				log.fine(""Corrected MovementQty ""
					+ MovementQty + ""->"" + MovementQty1);
				MovementQty = MovementQty1;
				mTab.setValue(""MovementQty"", MovementQty);
			}
			QtyEntered = MUOMConversion.convertProductTo (ctx, M_Product_ID,
				C_UOM_To_ID, MovementQty);
			if (QtyEntered == null)
				QtyEntered = MovementQty;
			boolean conversion = MovementQty.compareTo(QtyEntered) != 0;
			log.fine(""UOM="" + C_UOM_To_ID
				+ "", MovementQty="" + MovementQty
				+ "" -> "" + conversion
				+ "" QtyEntered="" + QtyEntered);
			ctx.setContext( WindowNo, ""UOMConversion"", conversion ? ""Y"" : ""N"");
			mTab.setValue(""QtyEntered"", QtyEntered);
		}

		// Check for RMA
		boolean isReturnTrx = ""Y"".equals(ctx.getContext(WindowNo, ""IsReturnTrx""));
		if(M_Product_ID != 0
			&& isReturnTrx)
		{
			Integer oLine_ID = (Integer)mTab.getValue(""C_OrderLine_ID"");
			MOrderLine oLine = new MOrderLine (ctx, oLine_ID, null);
			if (oLine.get_ID() != 0)
			{
				Integer orig_IOLine_ID = oLine.getOrig_InOutLine_ID();
				if(orig_IOLine_ID != 0)
				{
					MInOutLine orig_IOLine = new MInOutLine (ctx, orig_IOLine_ID, null);
					BigDecimal shippedQty = orig_IOLine.getMovementQty();
					MovementQty = (BigDecimal)mTab.getValue(""MovementQty"");
					if(shippedQty.compareTo(MovementQty)<0)
					{
						if(ctx.isSOTrx(WindowNo))
							mTab.fireDataStatusEEvent (""QtyShippedLessThanQtyReturned"", shippedQty.toString(), false);
						else
							mTab.fireDataStatusEEvent (""QtyReceivedLessThanQtyReturned"", shippedQty.toString(), false);
						mTab.setValue (""MovementQty"",shippedQty);
						MovementQty = shippedQty;

						int C_UOM_To_ID = ctx.getContextAsInt( WindowNo, ""C_UOM_ID"");
						QtyEntered = MUOMConversion.convertProductTo (ctx, M_Product_ID,
								C_UOM_To_ID, MovementQty);
						if (QtyEntered == null)
							QtyEntered = MovementQty;
						mTab.setValue (""QtyEntered"",QtyEntered);
						mTab.setValue (""MovementQty"",MovementQty);
						log.fine(""QtyEntered : ""+ QtyEntered.toString() +
									""MovementQty : "" + MovementQty.toString());
					}
				}
			}
		}

		//
		setCalloutActive(false);
		return """";
	}	//	qty
"
org.compiere.model.CalloutInOut.asi,CalloutInOut.java,"String asi (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		if (isCalloutActive())
			return """";
		Integer M_ASI_ID = (Integer)value;
		if (M_ASI_ID == null || M_ASI_ID.intValue() == 0)
			return """";
		setCalloutActive(true);
		//
		int M_Product_ID = ctx.getContextAsInt( WindowNo, ""M_Product_ID"");
		int M_Warehouse_ID = ctx.getContextAsInt( WindowNo, ""M_Warehouse_ID"");
		int M_Locator_ID = ctx.getContextAsInt( WindowNo, ""M_Locator_ID"");
		log.fine(""M_Product_ID="" + M_Product_ID
			+ "", M_ASI_ID="" + M_ASI_ID
			+ "" - M_Warehouse_ID="" + M_Warehouse_ID
			+ "", M_Locator_ID="" + M_Locator_ID);
		//	Check Selection
		int M_AttributeSetInstance_ID =	Env.getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_AttributeSetInstance_ID"");
		if (M_ASI_ID.intValue() == M_AttributeSetInstance_ID)
		{
			int selectedM_Locator_ID = Env.getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_Locator_ID"");
			if (selectedM_Locator_ID != 0)
			{
				log.fine(""Selected M_Locator_ID="" + selectedM_Locator_ID);
				mTab.setValue(""M_Locator_ID"", Integer.valueOf (selectedM_Locator_ID));
			}
		}
		setCalloutActive(false);
		return """";
	}	//	asi
"
org.compiere.model.MLdapAccess.toString,MLdapAccess.java,"String toString()
	{
		StringBuffer sb = new StringBuffer (""MLdapAccess["")
			.append (get_ID())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MAssetGroup.get,MAssetGroup.java,"MAssetGroup get (Ctx ctx, int A_Asset_Group_ID)
	{
		Integer ii = Integer.valueOf (A_Asset_Group_ID);
		MAssetGroup pc = s_cache.get(ctx, ii);
		if (pc == null)
			pc = new MAssetGroup (ctx, A_Asset_Group_ID, null);
		return pc;
	}	//	get
"
org.compiere.model.MAssetGroup.getAll,MAssetGroup.java,"ArrayList<MAssetGroup> getAll (Ctx ctx)
	{
		String sql = ""SELECT * FROM A_Asset_Group ""
			+ ""WHERE AD_Client_ID=?"";
		ArrayList<MAssetGroup> list = new ArrayList<MAssetGroup>();
        PreparedStatement pstmt = null;
        try
        {
	        pstmt = DB.prepareStatement(sql, (Trx) null);
	        pstmt.setInt(1, ctx.getAD_Client_ID());
	        ResultSet rs = pstmt.executeQuery();
	        while (rs.next())
	        	list.add(new MAssetGroup(ctx, rs, null));
	        rs.close();
	        pstmt.close();
	        pstmt = null;
        }
        catch (Exception e)
        {
        	s_log.log(Level.SEVERE, sql, e);
        }
        try
        {
	        if (pstmt != null)
		        pstmt.close();
	        pstmt = null;
        }
        catch (Exception e)
        {
	        pstmt = null;
        }
        return list;
	}	//	get
"
org.compiere.model.MAssetGroup.getSupportLevel,MAssetGroup.java,"String getSupportLevel()
	{
		String ss = super.getSupportLevel();
		if (ss == null)
			ss = SUPPORTLEVEL_Unsupported;
		return ss;
	}	//	getSupportLevel
"
org.compiere.model.MAssetGroup.toString,MAssetGroup.java,"String toString()
    {
	    StringBuffer sb = new StringBuffer(""MAssetGroup["")
	    	.append(get_ID()).append(""-"").append(getName());
	    sb.append(""]"");
	    return sb.toString();
    }	//	toString
"
org.compiere.model.MSLACriteria.get,MSLACriteria.java,"MSLACriteria get (Ctx ctx, int PA_SLA_Criteria_ID)
	{
		Integer key = Integer.valueOf (PA_SLA_Criteria_ID);
		MSLACriteria retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MSLACriteria (ctx, PA_SLA_Criteria_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	} //	get
"
org.compiere.model.MSLACriteria.getGoals,MSLACriteria.java,"MSLAGoal[] getGoals()
	{
		String sql = ""SELECT * FROM PA_SLA_Goal ""
			+ ""WHERE PA_SLA_Criteria_ID=?"";
		ArrayList<MSLAGoal> list = new ArrayList<MSLAGoal>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getPA_SLA_Criteria_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add(new MSLAGoal(getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MSLAGoal[] retValue = new MSLAGoal[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getGoals
"
org.compiere.model.MSLACriteria.newInstance,MSLACriteria.java,"SLACriteria newInstance() throws Exception
	{
		if (getClassname() == null || getClassname().length() == 0)
			throw new CompiereSystemException(""No SLA Criteria Classname"");
		
		try
		{
			Class<?> clazz = Class.forName(getClassname());
			SLACriteria retValue = (SLACriteria)clazz.newInstance();
			return retValue;
		}
		catch (Exception e)
		{
			throw new CompiereSystemException(""Could not intsnciate SLA Criteria"", e);
		}
	}	//	newInstance
"
org.compiere.model.MMeasureCalc.get,MMeasureCalc.java,"MMeasureCalc get(Ctx ctx, int PA_MeasureCalc_ID) 
	{
		Integer key = Integer.valueOf(PA_MeasureCalc_ID);
		MMeasureCalc retValue = s_cache.get(ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MMeasureCalc(ctx, PA_MeasureCalc_ID, null);
		if (retValue.get_ID() != 0)
			s_cache.put(key, retValue);
		return retValue;
	} // get
"
org.compiere.model.MMeasureCalc.getSqlPI,MMeasureCalc.java,"String getSqlPI(MGoalRestriction[] restrictions,
			String MeasureScope, String MeasureDataType, Timestamp reportDate,
			MRole role) {
		StringBuffer sb = new StringBuffer(getSelectClause()).append("" "")
				.append(getWhereClause());
		// Date Restriction
		if (getDateColumn() != null
				&& X_PA_Measure.MEASUREDATATYPE_QtyAmountInTime
						.equals(MeasureDataType)
				&& !X_PA_Goal.MEASUREDISPLAY_Total.equals(MeasureScope)) {
			if (reportDate == null)
				reportDate = new Timestamp(System.currentTimeMillis());
			DB.TO_DATE(reportDate);
			// http://download-west.oracle.com/docs/cd/B14117_01/server.101/b10759/functions207.htm#i1002084
			String trunc = ""DD"";
			if (X_PA_Goal.MEASUREDISPLAY_Year.equals(MeasureScope))
				trunc = ""Y"";
			else if (X_PA_Goal.MEASUREDISPLAY_Quarter.equals(MeasureScope))
				trunc = ""Q"";
			else if (X_PA_Goal.MEASUREDISPLAY_Month.equals(MeasureScope))
				trunc = ""MM"";
			else if (X_PA_Goal.MEASUREDISPLAY_Week.equals(MeasureScope))
				trunc = ""D"";
			// else if (MGoal.MEASUREDISPLAY_Day.equals(MeasureDisplay))
			// ;
			sb.append("" AND TRUNC("").append(getDateColumn()).append("",'"")
					.append(trunc).append(""')=TRUNC("").append(
							DB.TO_DATE(reportDate)).append("",'"").append(trunc)
					.append(""')"");
		} // date
		String sql = addRestrictions(sb.toString(), restrictions, role);

		log.fine(sql);
		return sql;
	} // getSql
"
org.compiere.model.MMeasureCalc.getSqlBarChart,MMeasureCalc.java,"String getSqlBarChart(MGoalRestriction[] restrictions,
			String MeasureDisplay, Timestamp startDate, Timestamp endDate,
			MRole role) {
		StringBuffer sb = new StringBuffer();
		String dateCol = null;
		String groupBy = null;
		if (getDateColumn() != null
				&& !X_PA_Goal.MEASUREDISPLAY_Total.equals(MeasureDisplay)) {
			String trunc = ""D"";
			if (X_PA_Goal.MEASUREDISPLAY_Year.equals(MeasureDisplay))
				trunc = ""Y"";
			else if (X_PA_Goal.MEASUREDISPLAY_Quarter.equals(MeasureDisplay))
				trunc = ""Q"";
			else if (X_PA_Goal.MEASUREDISPLAY_Month.equals(MeasureDisplay))
				trunc = ""MM"";
			else if (X_PA_Goal.MEASUREDISPLAY_Week.equals(MeasureDisplay))
				trunc = ""W"";
			// else if (MGoal.MEASUREDISPLAY_Day.equals(MeasureDisplay))
			// ;
			dateCol = ""TRUNC("" + getDateColumn() + "",'"" + trunc + ""') "";
			groupBy = dateCol;
		} else
			dateCol = ""MAX("" + getDateColumn() + "") "";
		//
		String selectFrom = getSelectClause();
		int index = selectFrom.indexOf(""FROM "");
		if (index == -1)
			index = selectFrom.toUpperCase().indexOf(""FROM "");
		if (index == -1)
			throw new IllegalArgumentException(""Cannot find FROM in sql - ""
					+ selectFrom);
		sb.append(selectFrom.substring(0, index)).append("","").append(dateCol)
				.append(selectFrom.substring(index));

		// ** WHERE
		sb.append("" "").append(getWhereClause());
		// Date Restriction
		if (getDateColumn() != null
				&& !X_PA_Goal.MEASUREDISPLAY_Total.equals(MeasureDisplay)) {
			if (startDate != null) {
				String dateString = DB.TO_DATE(startDate);
				sb.append("" AND "").append(getDateColumn()).append("">="").append(
						dateString);
			}
			if (endDate != null) {
				String dateString = DB.TO_DATE(endDate);
				sb.append("" AND "").append(getDateColumn()).append(""<="").append(
						dateString);
			}
		} // date

		String sql = addRestrictions(sb.toString(), restrictions, role);
		if (groupBy != null)
			sql += "" GROUP BY "" + groupBy;
		// BUG: 10017693 Order by date column if present in calculated measure.
		if (dateCol != null)
			sql += "" ORDER BY "" + dateCol;
		log.fine(sql);
		return sql;
	} // getSqlBarChart
"
org.compiere.model.MMeasureCalc.getQuery,MMeasureCalc.java,"Query getQuery(MGoalRestriction[] restrictions,
			String MeasureDisplay, Timestamp date, MRole role) {
		Query query = new Query(getAD_Table_ID());
		//
		StringBuffer sql = new StringBuffer(""SELECT "").append(getKeyColumn())
				.append("" "");
		String from = getSelectClause();
		int index = from.indexOf(""FROM "");
		if (index == -1)
			throw new IllegalArgumentException(""Cannot find FROM "" + from);
		sql.append(from.substring(index)).append("" "").append(getWhereClause());
		// Date Range
		if (getDateColumn() != null
				&& !X_PA_Goal.MEASUREDISPLAY_Total.equals(MeasureDisplay)) {
			String trunc = ""D"";
			if (X_PA_Goal.MEASUREDISPLAY_Year.equals(MeasureDisplay))
				trunc = ""Y"";
			else if (X_PA_Goal.MEASUREDISPLAY_Quarter.equals(MeasureDisplay))
				trunc = ""Q"";
			else if (X_PA_Goal.MEASUREDISPLAY_Month.equals(MeasureDisplay))
				trunc = ""MM"";
			else if (X_PA_Goal.MEASUREDISPLAY_Week.equals(MeasureDisplay))
				trunc = ""W"";
			// else if (MGoal.MEASUREDISPLAY_Day.equals(MeasureDisplay))
			// trunc = ""D"";
			sql.append("" AND TRUNC("").append(getDateColumn()).append("",'"")
					.append(trunc).append(""')=TRUNC("").append(DB.TO_DATE(date))
					.append("",'"").append(trunc).append(""')"");
		}
		String finalSQL = addRestrictions(sql.toString(), restrictions, role);
		// Execute
		StringBuffer where = new StringBuffer();
		PreparedStatement pstmt = null;
		try {
			pstmt = DB.prepareStatement(finalSQL, (Trx) null);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				int id = rs.getInt(1);
				if (where.length() > 0)
					where.append("","");
				where.append(id);
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		} catch (Exception e) {
			log.log(Level.SEVERE, finalSQL, e);
		}
		try {
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		} catch (Exception e) {
			pstmt = null;
		}
		if (where.length() == 0)
			return Query.getNoRecordQuery(query.getTableName(), false);
		//
		StringBuffer whereClause = new StringBuffer(getKeyColumn()).append(
				"" IN ("").append(where).append("")"");
		query.addRestriction(whereClause.toString());
		query.setRecordCount(1);
		return query;
	} // getQuery
"
org.compiere.model.MMeasureCalc.addRestrictions,MMeasureCalc.java,"String addRestrictions(String sql, MGoalRestriction[] restrictions,
			MRole role) {
		return addRestrictions(sql, false, restrictions, role, getTableName(),
				getOrgColumn(), getBPartnerColumn(), getProductColumn());
	} // addRestrictions
"
org.compiere.model.MMeasureCalc.addRestrictions,MMeasureCalc.java,"String addRestrictions(String sql, boolean queryOnly,
			MGoalRestriction[] restrictions, MRole role, String tableName,
			String orgColumn, String bpColumn, String pColumn) {
		StringBuffer sb = new StringBuffer(sql);
		// Org Restrictions
		if (orgColumn != null) {
			ArrayList<Integer> list = new ArrayList<Integer>();
			for (MGoalRestriction element : restrictions) {
				if (X_PA_GoalRestriction.GOALRESTRICTIONTYPE_Organization
						.equals(element.getGoalRestrictionType()))
					list.add(element.getOrg_ID());
				// Hierarchy comes here
			}
			if (list.size() == 1)
				sb.append("" AND "").append(orgColumn).append(""="").append(
						list.get(0));
			else if (list.size() > 1) {
				sb.append("" AND "").append(orgColumn).append("" IN ("");
				for (int i = 0; i < list.size(); i++) {
					if (i > 0)
						sb.append("","");
					sb.append(list.get(i));
				}
				sb.append("")"");
			}
		} // org

		// BPartner Restrictions
		if (bpColumn != null) {
			ArrayList<Integer> listBP = new ArrayList<Integer>();
			ArrayList<Integer> listBPG = new ArrayList<Integer>();
			for (MGoalRestriction element : restrictions) {
				if (X_PA_GoalRestriction.GOALRESTRICTIONTYPE_BusinessPartner
						.equals(element.getGoalRestrictionType()))
					listBP.add(element.getC_BPartner_ID());
				// Hierarchy comes here
				if (X_PA_GoalRestriction.GOALRESTRICTIONTYPE_BusPartnerGroup
						.equals(element.getGoalRestrictionType()))
					listBPG.add(element.getC_BP_Group_ID());
			}
			// BP
			if (listBP.size() == 1)
				sb.append("" AND "").append(bpColumn).append(""="").append(
						listBP.get(0));
			else if (listBP.size() > 1) {
				sb.append("" AND "").append(bpColumn).append("" IN ("");
				for (int i = 0; i < listBP.size(); i++) {
					if (i > 0)
						sb.append("","");
					sb.append(listBP.get(i));
				}
				sb.append("")"");
			}
			// BPG
			if (bpColumn.indexOf(""."") == -1)
				bpColumn = tableName + ""."" + bpColumn;
			if (listBPG.size() == 1)
				sb.append("" AND EXISTS (SELECT * FROM C_BPartner bpx WHERE "")
						.append(bpColumn).append(
								""=bpx.C_BPartner_ID AND bpx.C_BP_GROUP_ID="")
						.append(listBPG.get(0)).append("")"");
			else if (listBPG.size() > 1) {
				sb
						.append(
								"" AND EXISTS (SELECT * FROM C_BPartner bpx WHERE "")
						.append(bpColumn)
						.append(""=bpx.C_BPartner_ID AND bpx.C_BP_GROUP_ID IN ("");
				for (int i = 0; i < listBPG.size(); i++) {
					if (i > 0)
						sb.append("","");
					sb.append(listBPG.get(i));
				}
				sb.append(""))"");
			}
		} // bp

		// Product Restrictions
		if (pColumn != null) {
			ArrayList<Integer> listP = new ArrayList<Integer>();
			ArrayList<Integer> listPC = new ArrayList<Integer>();
			for (MGoalRestriction element : restrictions) {
				if (X_PA_GoalRestriction.GOALRESTRICTIONTYPE_Product
						.equals(element.getGoalRestrictionType()))
					listP.add(element.getM_Product_ID());
				// Hierarchy comes here
				if (X_PA_GoalRestriction.GOALRESTRICTIONTYPE_ProductCategory
						.equals(element.getGoalRestrictionType()))
					listPC.add(element.getM_Product_Category_ID());
			}
			// Product
			if (listP.size() == 1)
				sb.append("" AND "").append(pColumn).append(""="").append(
						listP.get(0));
			else if (listP.size() > 1) {
				sb.append("" AND "").append(pColumn).append("" IN ("");
				for (int i = 0; i < listP.size(); i++) {
					if (i > 0)
						sb.append("","");
					sb.append(listP.get(i));
				}
				sb.append("")"");
			}
			// Category
			if (pColumn.indexOf(""."") == -1)
				pColumn = tableName + ""."" + pColumn;
			if (listPC.size() == 1)
				sb
						.append(
								"" AND EXISTS (SELECT * FROM M_Product px WHERE "")
						.append(pColumn)
						.append(
								""=px.M_Product_ID AND px.M_Product_Category_ID="")
						.append(listPC.get(0)).append("")"");
			else if (listPC.size() > 1) {
				sb
						.append(
								"" AND EXISTS (SELECT * FROM M_Product px WHERE "")
						.append(pColumn)
						.append(
								""=px.M_Product_ID AND px.M_Product_Category_ID IN ("");
				for (int i = 0; i < listPC.size(); i++) {
					if (i > 0)
						sb.append("","");
					sb.append(listPC.get(i));
				}
				sb.append(""))"");
			}
		} // product
		String finalSQL = sb.toString();
		if (queryOnly)
			return finalSQL;
		if (role == null)
			role = MRole.getDefault();
		String retValue = role.addAccessSQL(finalSQL, tableName, true, false);
		return retValue;
	} // addRestrictions
"
org.compiere.model.MMeasureCalc.getTableName,MMeasureCalc.java,"String getTableName() {
		return MTable.getTableName(Env.getCtx(), getAD_Table_ID());
	} // getTavleName
"
org.compiere.model.MMeasureCalc.toString,MMeasureCalc.java,"String toString() {
		StringBuffer sb = new StringBuffer(""MMeasureCalc["");
		sb.append(get_ID()).append(""-"").append(getName()).append(""]"");
		return sb.toString();
	} // toString
"
org.compiere.model.MRfQResponse.getLines,MRfQResponse.java,"MRfQResponseLine[] getLines(boolean requery)
	{
		if (m_lines != null && !requery)
			return m_lines;
		ArrayList<MRfQResponseLine> list = new ArrayList<MRfQResponseLine>();
		String sql = ""SELECT * FROM C_RfQResponseLine ""
			+ ""WHERE C_RfQResponse_ID=? AND IsActive='Y'"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getC_RfQResponse_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add(new MRfQResponseLine(getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""getLines"", e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		m_lines = new MRfQResponseLine[list.size ()];
		list.toArray (m_lines);
		return m_lines;
	}	//	getLines
"
org.compiere.model.MRfQResponse.getLines,MRfQResponse.java,"MRfQResponseLine[] getLines ()
	{
		return getLines (false);
	}	//	getLines
"
org.compiere.model.MRfQResponse.getRfQ,MRfQResponse.java,"MRfQ getRfQ()
	{
		if (m_rfq == null)
			m_rfq = new MRfQ (getCtx(), getC_RfQ_ID(), get_Trx());
		return m_rfq;
	}	//	getRfQ
"
org.compiere.model.MRfQResponse.toString,MRfQResponse.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MRfQResponse["");
		sb.append(get_ID())
			.append("",Complete="").append(isComplete())
			.append("",Winner="").append(isSelectedWinner())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MRfQResponse.sendRfQ,MRfQResponse.java,"boolean sendRfQ()
	{
		MUser to = MUser.get(getCtx(), getAD_User_ID());
		if (to.get_ID() == 0 || to.getEMail() == null || to.getEMail().length() == 0)
		{
			log.log(Level.SEVERE, ""No User or no EMail - "" + to);
			return false;
		}
		MClient client = MClient.get(getCtx());
		//
		String message = getDescription();
		if (message == null || message.length() == 0)
			message = getHelp();
		else if (getHelp() != null)
			message += ""\n"" + getHelp();
		if (message == null)
			message = getName();
		//
		EMail email = client.createEMail(to.getEMail(), to.getName(), ""RfQ: "" + getName(), message);
		if (email == null)
			return false;
		email.addAttachment(createPDF());
		if (EMail.SENT_OK.equals(email.send()))
		{
			setDateInvited(new Timestamp (System.currentTimeMillis()));
			save();
			return true;
		}
		return false;
	}	//	sendRfQ
"
org.compiere.model.MRfQResponse.createPDF,MRfQResponse.java,"File createPDF ()
	{
		return createPDF (null);
	}	//	getPDF
"
org.compiere.model.MRfQResponse.createPDF,MRfQResponse.java,"File createPDF (File file)
	{
		ReportEngine re = ReportEngine.get (getCtx(), ReportEngine.RFQ, getC_RfQResponse_ID());
		if (re == null)
			return null;
		return re.getPDF(file);
	}	//	getPDF
"
org.compiere.model.MRfQResponse.checkComplete,MRfQResponse.java,"String checkComplete()
	{
		if (isComplete())
			setIsComplete(false);
		MRfQ rfq = getRfQ();
		
		//	Is RfQ Total valid
		String error = rfq.checkQuoteTotalAmtOnly();
		if (error != null && error.length() > 0)
			return error;
		
		//	Do we have Total Amount ?
		if (rfq.isQuoteTotalAmt() || rfq.isQuoteTotalAmtOnly())
		{
			BigDecimal amt = getPrice();
			if (amt == null || Env.ZERO.compareTo(amt) >= 0)
				return ""No Total Amount"";
		}
		
		//	Do we have an amount/qty for all lines
		if (rfq.isQuoteAllLines())
		{
			MRfQResponseLine[] lines = getLines(false);
			for (MRfQResponseLine line : lines) {
				if (!line.isActive())
					return ""Line "" + line.getRfQLine().getLine()
						+ "": Not Active"";
				boolean validAmt = false;
				MRfQResponseLineQty[] qtys = line.getQtys(false);
				for (MRfQResponseLineQty qty : qtys) {
					if (!qty.isActive())
						continue;
					BigDecimal amt = qty.getNetAmt();
					if (amt != null && Env.ZERO.compareTo(amt) < 0)
					{
						validAmt = true;
						break;
					}
				}
				if (!validAmt)
					return ""Line "" + line.getRfQLine().getLine()
						+ "": No Amount"";
			}
		}
		
		//	Do we have an amount for all line qtys
		if (rfq.isQuoteAllQty())
		{
			MRfQResponseLine[] lines = getLines(false);
			for (MRfQResponseLine line : lines) {
				MRfQResponseLineQty[] qtys = line.getQtys(false);
				for (MRfQResponseLineQty qty : qtys) {
					if (!qty.isActive())
						return ""Line "" + line.getRfQLine().getLine()
						+ "" Qty="" + qty.getRfQLineQty().getQty()
						+ "": Not Active"";
					BigDecimal amt = qty.getNetAmt();
					if (amt == null || Env.ZERO.compareTo(amt) >= 0)
						return ""Line "" + line.getRfQLine().getLine()
							+ "" Qty="" + qty.getRfQLineQty().getQty()
							+ "": No Amount"";
				}
			}
		}
		
		setIsComplete(true);
		return null;
	}	//	checkComplete
"
org.compiere.model.MRfQResponse.isQuoteTotalAmtOnly,MRfQResponse.java,"boolean isQuoteTotalAmtOnly()
	{
		return getRfQ().isQuoteTotalAmtOnly();
	}	//	isQuoteTotalAmtOnly
"
org.compiere.model.MRfQResponse.beforeSave,MRfQResponse.java,"boolean beforeSave (boolean newRecord)
	{
		//	Calculate Complete Date (also used to verify)
		if (getDateWorkStart() != null && getDeliveryDays() != 0)
			setDateWorkComplete (TimeUtil.addDays(getDateWorkStart(), getDeliveryDays()));
		//	Calculate Delivery Days
		else if (getDateWorkStart() != null && getDeliveryDays() == 0 && getDateWorkComplete() != null)
			setDeliveryDays (TimeUtil.getDaysBetween(getDateWorkStart(), getDateWorkComplete()));
		//	Calculate Start Date
		else if (getDateWorkStart() == null && getDeliveryDays() != 0 && getDateWorkComplete() != null)
			setDateWorkStart (TimeUtil.addDays(getDateWorkComplete(), getDeliveryDays() * -1));

		
		return true;
	}	//	beforeSave
"
org.compiere.model.CalloutPaySelection.payAmt,CalloutPaySelection.java,"String payAmt (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		if (isCalloutActive() || value == null)
			return """";
		//	get invoice info
		Integer ii = (Integer)mTab.getValue(""C_Invoice_ID"");
		if (ii == null)
			return """";
		int C_Invoice_ID = ii.intValue();
		if (C_Invoice_ID == 0)
			return """";
		//
		BigDecimal OpenAmt = (BigDecimal)mTab.getValue(""OpenAmt"");
		BigDecimal PayAmt = (BigDecimal)mTab.getValue(""PayAmt"");
		BigDecimal DiscountAmt = (BigDecimal)mTab.getValue(""DiscountAmt"");
		setCalloutActive(true);
		BigDecimal DifferenceAmt = OpenAmt.subtract(PayAmt).subtract(DiscountAmt);
		log.fine("" - OpenAmt="" + OpenAmt + "" - PayAmt="" + PayAmt
			+ "", Discount="" + DiscountAmt + "", Difference="" + DifferenceAmt);

		mTab.setValue(""DifferenceAmt"", DifferenceAmt);

		setCalloutActive(false);
		return """";
	}	//	PaySel_PayAmt
"
org.compiere.model.CalloutPaySelection.invoice,CalloutPaySelection.java,"String invoice (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		if (isCalloutActive() || value == null)
			return """";
		//	get value
		int C_Invoice_ID = ((Integer)value).intValue();
		if (C_Invoice_ID == 0)
			return """";
		int C_BankAccount_ID = ctx.getContextAsInt( WindowNo, ""C_BankAccount_ID"");
		Timestamp PayDate = new Timestamp(ctx.getContextAsTime( ""PayDate""));
		setCalloutActive(true);

		BigDecimal OpenAmt = Env.ZERO;
		BigDecimal DiscountAmt = Env.ZERO;
		Boolean IsSOTrx = Boolean.FALSE;
		String sql = ""SELECT currencyConvert(invoiceOpen(i.C_Invoice_ID, 0), i.C_Currency_ID,""
				+ ""ba.C_Currency_ID, i.DateInvoiced, i.C_ConversionType_ID, i.AD_Client_ID, i.AD_Org_ID),""
			+ "" paymentTermDiscount(i.GrandTotal,i.C_Currency_ID,i.C_PaymentTerm_ID,i.DateInvoiced, ?), i.IsSOTrx "" // #1
			+ ""FROM C_Invoice_v i, C_BankAccount ba ""
			+ ""WHERE i.C_Invoice_ID=? AND ba.C_BankAccount_ID=?"";	//	#2..3
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setTimestamp(1, PayDate);
			pstmt.setInt(2, C_Invoice_ID);
			pstmt.setInt(3, C_BankAccount_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				OpenAmt = rs.getBigDecimal(1);
				DiscountAmt = rs.getBigDecimal(2);
				IsSOTrx = Boolean.valueOf (""Y"".equals(rs.getString(3)));
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}

		log.fine("" - OpenAmt="" + OpenAmt + "" (Invoice="" + C_Invoice_ID + "",BankAcct="" + C_BankAccount_ID + "")"");
		mTab.setValue(""OpenAmt"", OpenAmt);
		mTab.setValue(""PayAmt"", OpenAmt.subtract(DiscountAmt));
		mTab.setValue(""DiscountAmt"", DiscountAmt);
		mTab.setValue(""DifferenceAmt"", Env.ZERO);
		mTab.setValue(""IsSOTrx"", IsSOTrx);

		setCalloutActive(false);
		return """";
	}	//	PaySel_Invoice
"
org.compiere.model.MPayment.getOfBPartner,MPayment.java,"MPayment[] getOfBPartner (Ctx ctx, int C_BPartner_ID, Trx trx)
	{
		ArrayList<MPayment> list = new ArrayList<MPayment>();
		String sql = ""SELECT * FROM C_Payment WHERE C_BPartner_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, trx);
			pstmt.setInt(1, C_BPartner_ID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MPayment(ctx,rs, trx));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

		//
		MPayment[] retValue = new MPayment[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getOfBPartner
"
org.compiere.model.MPayment.getPayment,MPayment.java,"MPayment getPayment(Ctx ctx, String documentNo, Trx trx)
	{
		MPayment payment = null;
		String sql = ""SELECT * FROM C_Payment WHERE DocumentNo = ?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setString (1, documentNo);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				payment = new MPayment (ctx, rs, trx);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

		return payment;
	}	//	MPayment
"
org.compiere.model.MPayment.resetNew,MPayment.java,"void resetNew()
	{
		set_ValueNoCheck(""C_Payment_ID"",0);		//	forces new Record
		set_ValueNoCheck (""DocumentNo"", null);
		setDocAction(DOCACTION_Prepare);
		setDocStatus(DOCSTATUS_Drafted);
		setProcessed(false);
		setPosted (false);
		setIsReconciled (false);
		setIsAllocated(false);
		setIsOnline(false);
		setIsDelayedCapture (false);
	//	setC_BPartner_ID(0);
		setC_Invoice_ID(0);
		setC_Order_ID(0);
		setC_Charge_ID(0);
		setC_Project_ID(0);
		setIsPrepayment(false);
	}	//	resetNew
"
org.compiere.model.MPayment.isCashTrx,MPayment.java,"boolean isCashTrx()
	{
		return ""X"".equals(getTenderType());
	}	//	isCashTrx
"
org.compiere.model.MPayment.setCreditCard,MPayment.java,"boolean setCreditCard (String TrxType, String creditCardType, String creditCardNumber,
		String creditCardVV, int creditCardExpMM, int creditCardExpYY)
	{
		setTenderType(TENDERTYPE_CreditCard);
		setTrxType(TrxType);
		//
		setCreditCardType (creditCardType);
		setCreditCardNumber (creditCardNumber);
		setCreditCardVV (creditCardVV);
		setCreditCardExpMM (creditCardExpMM);
		setCreditCardExpYY (creditCardExpYY);
		//
		int check = MPaymentValidate.validateCreditCardNumber(creditCardNumber, creditCardType).length()
			+ MPaymentValidate.validateCreditCardExp(creditCardExpMM, creditCardExpYY).length();
		if (creditCardVV.length() > 0)
			check += MPaymentValidate.validateCreditCardVV(creditCardVV, creditCardType).length();
		return check == 0;
	}   //  setCreditCard
"
org.compiere.model.MPayment.setCreditCard,MPayment.java,"boolean setCreditCard (String TrxType, String creditCardType, String creditCardNumber,
		String creditCardVV, String creditCardExp)
	{
		return setCreditCard(TrxType, creditCardType, creditCardNumber,
			creditCardVV, MPaymentValidate.getCreditCardExpMM(creditCardExp),
			MPaymentValidate.getCreditCardExpYY(creditCardExp));
	}   //  setCreditCard
"
org.compiere.model.MPayment.setBankACH,MPayment.java,"boolean setBankACH (MPaySelectionCheck preparedPayment)
	{
		//	Our Bank
		setC_BankAccount_ID(preparedPayment.getParent().getC_BankAccount_ID());
		//	Target Bank
		int C_BP_BankAccount_ID = preparedPayment.getC_BP_BankAccount_ID();
		MBPBankAccount ba = new MBPBankAccount (preparedPayment.getCtx(), C_BP_BankAccount_ID, null);
		setRoutingNo(ba.getRoutingNo());
		setAccountNo(ba.getAccountNo());
		setIsReceipt (X_C_Order.PAYMENTRULE_DirectDebit.equals	//	AR only
				(preparedPayment.getPaymentRule()));
		//
		int check = MPaymentValidate.validateRoutingNo(getRoutingNo()).length()
			+ MPaymentValidate.validateAccountNo(getAccountNo()).length();
		return check == 0;
	}	//	setBankACH
"
org.compiere.model.MPayment.setBankACH,MPayment.java,"boolean setBankACH (int C_BankAccount_ID, boolean isReceipt, String tenderType,
		String routingNo, String accountNo)
	{
		setTenderType (tenderType);
		setIsReceipt (isReceipt);
		//
		if ((C_BankAccount_ID > 0)
			&& ((routingNo == null) || (routingNo.length() == 0) || (accountNo == null) || (accountNo.length() == 0)))
			setBankAccountDetails(C_BankAccount_ID);
		else
		{
			setC_BankAccount_ID(C_BankAccount_ID);
			setRoutingNo (routingNo);
			setAccountNo (accountNo);
		}
		setCheckNo ("""");
		//
		int check = MPaymentValidate.validateRoutingNo(routingNo).length()
			+ MPaymentValidate.validateAccountNo(accountNo).length();
		return check == 0;
	}   //  setBankACH
"
org.compiere.model.MPayment.setBankCheck,MPayment.java,"boolean setBankCheck (int C_BankAccount_ID, boolean isReceipt, String checkNo)
	{
		return setBankCheck (C_BankAccount_ID, isReceipt, null, null, checkNo);
	}	//	setBankCheck
"
org.compiere.model.MPayment.setBankCheck,MPayment.java,"boolean setBankCheck (int C_BankAccount_ID, boolean isReceipt,
		String routingNo, String accountNo, String checkNo)
	{
		setTenderType (TENDERTYPE_Check);
		setIsReceipt (isReceipt);
		//
		if ((C_BankAccount_ID > 0)
			&& ((routingNo == null) || (routingNo.length() == 0)
				|| (accountNo == null) || (accountNo.length() == 0)))
			setBankAccountDetails(C_BankAccount_ID);
		else
		{
			setC_BankAccount_ID(C_BankAccount_ID);
			setRoutingNo (routingNo);
			setAccountNo (accountNo);
		}
		setCheckNo (checkNo);
		//
		int check = MPaymentValidate.validateRoutingNo(routingNo).length()
			+ MPaymentValidate.validateAccountNo(accountNo).length()
			+ MPaymentValidate.validateCheckNo(checkNo).length();
		return check == 0;       //  no error message
	}   //  setBankCheck
"
org.compiere.model.MPayment.setBankAccountDetails,MPayment.java,"void setBankAccountDetails (int C_BankAccount_ID)
	{
		if (C_BankAccount_ID == 0)
			return;
		setC_BankAccount_ID(C_BankAccount_ID);
		//
		String sql = ""SELECT b.RoutingNo, ba.AccountNo ""
			+ ""FROM C_BankAccount ba""
			+ "" INNER JOIN C_Bank b ON (ba.C_Bank_ID=b.C_Bank_ID) ""
			+ ""WHERE C_BankAccount_ID=?"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, C_BankAccount_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				setRoutingNo (rs.getString(1));
				setAccountNo (rs.getString(2));
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
	}	//	setBankAccountDetails
"
org.compiere.model.MPayment.setAccountAddress,MPayment.java,"void setAccountAddress (String name, String street,
		String city, String state, String zip, String country)
	{
		setA_Name (name);
		setA_Street (street);
		setA_City (city);
		setA_State (state);
		setA_Zip (zip);
		setA_Country(country);
	}   //  setAccountAddress
"
org.compiere.model.MPayment.processOnline,MPayment.java,"boolean processOnline()
	{
		log.info (""Amt="" + getPayAmt());
		//
		setIsOnline(true);
		setErrorMessage(null);
		//	prevent charging twice
		if (isApproved())
		{
			log.info(""Already processed - "" + getR_Result() + "" - "" + getR_RespMsg());
			setErrorMessage(""Payment already Processed"");
			return true;
		}

		if (m_mPaymentProcessor == null)
			setPaymentProcessor();
		if (m_mPaymentProcessor == null)
		{
			log.log(Level.WARNING, ""No Payment Processor Model"");
			setErrorMessage(""No Payment Processor Model"");
			return false;
		}

		boolean approved = false;
		/**	Process Payment on Server	*/
		if (DB.isRemoteObjects())
		{
			Server server = CConnection.get().getServer();
			try
			{
				if (server != null)
				{	//	See ServerBean
					Trx trx = null;	//	unconditionally save
					save(trx);	//	server reads from disk
					approved = server.paymentOnline (getCtx(), getC_Payment_ID(),
						m_mPaymentProcessor.getC_PaymentProcessor_ID(), null);
					if (CLogMgt.isLevelFinest())
						s_log.fine(""server => "" + approved);
					load(trx);	//	server saves to disk
					setIsApproved(approved);
					return approved;
				}
				log.log(Level.WARNING, ""AppsServer not found"");
			}
			catch (RemoteException ex)
			{
				log.log(Level.SEVERE, ""AppsServer error"", ex);
			}
		}
		/** **/

		//	Try locally
		try
		{
			PaymentProcessor pp = PaymentProcessor.create(m_mPaymentProcessor, this);
			if (pp == null)
				setErrorMessage(""No Payment Processor"");
			else
			{
				approved = pp.processCC ();
				if (approved)
					setErrorMessage(null);
				else
					setErrorMessage(""From "" +  getCreditCardName() + "": "" + getR_RespMsg());
			}
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""processOnline"", e);
			setErrorMessage(""Payment Processor Error"");
		}
		setIsApproved(approved);
		return approved;
	}   //  processOnline
"
org.compiere.model.MPayment.startProcess,MPayment.java,"boolean startProcess (Ctx ctx, ProcessInfo pi, Trx p_trx)
	{
		log.info(""startProcess - "" + pi.getRecord_ID());
		boolean retValue = false;
		//
		if (pi.getRecord_ID() != get_ID())
		{
			log.log(Level.SEVERE, ""startProcess - Not same Payment - "" + pi.getRecord_ID());
			return false;
		}
		//  Process it
		retValue = processOnline();
		save();
		return retValue;    //  Payment processed
	}   //  startProcess
"
org.compiere.model.MPayment.beforeSave,MPayment.java,"boolean beforeSave (boolean newRecord)
	{
		//	We have a charge
		if (getC_Charge_ID() != 0)
		{
			if (newRecord || is_ValueChanged(""C_Charge_ID""))
			{
				setC_Order_ID(0);
				setC_Invoice_ID(0);
				setWriteOffAmt(Env.ZERO);
				setDiscountAmt(Env.ZERO);
				setIsOverUnderPayment(false);
				setOverUnderAmt(Env.ZERO);
				setIsPrepayment(false);
			}
		}
		//	We need a BPartner
		else if ((getC_BPartner_ID() == 0) && !isCashTrx())
		{
			if (getC_Invoice_ID() != 0)
				;
			else if (getC_Order_ID() != 0)
				;
			else
			{
				log.saveError(""Error"", Msg.parseTranslation(getCtx(), ""@NotFound@: @C_BPartner_ID@""));
				return false;
			}
		}
		//	Prepayment: No charge and order or project (not as acct dimension)
		if (newRecord
			|| is_ValueChanged(""C_Charge_ID"") || is_ValueChanged(""C_Invoice_ID"")
			|| is_ValueChanged(""C_Order_ID"") || is_ValueChanged(""C_Project_ID""))
			setIsPrepayment ((getC_Charge_ID() == 0)
				&& (getC_BPartner_ID() != 0)
				&& ((getC_Order_ID() != 0)
					|| ((getC_Project_ID() != 0) && (getC_Invoice_ID() == 0))));
		if (isPrepayment())
		{
			if (newRecord
				|| is_ValueChanged(""C_Order_ID"") || is_ValueChanged(""C_Project_ID""))
			{
				setWriteOffAmt(Env.ZERO);
				setDiscountAmt(Env.ZERO);
				setIsOverUnderPayment(false);
				setOverUnderAmt(Env.ZERO);
			}
		}

		//	Document Type/Receipt
		if (getC_DocType_ID() == 0)
			setC_DocType_ID();
		else
		{
			MDocType dt = MDocType.get(getCtx(), getC_DocType_ID());
			setIsReceipt(dt.isSOTrx());
		}
		setDocumentNo();
		//
		if (getDateAcct() == null)
			setDateAcct(getDateTrx());
		//
		if (!isOverUnderPayment())
			setOverUnderAmt(Env.ZERO);

		//	Organization
		if ((newRecord || is_ValueChanged(""C_BankAccount_ID""))
			&& (getC_Charge_ID() == 0))	//	allow different org for charge
		{
			MBankAccount ba = MBankAccount.get(getCtx(), getC_BankAccount_ID());
			if (ba.getAD_Org_ID() != 0)
				setAD_Org_ID(ba.getAD_Org_ID());
		}

		setIsOverUnderPayment(getOverUnderAmt().compareTo(Env.ZERO) != 0);
		return true;
	}	//	beforeSave
"
org.compiere.model.MPayment.getAllocatedAmt,MPayment.java,"BigDecimal getAllocatedAmt ()
	{
		BigDecimal retValue = null;
		if (getC_Charge_ID() != 0)
			return getPayAmt(true);
		//
		String sql = ""SELECT SUM(currencyConvert(al.Amount,""
				+ ""ah.C_Currency_ID, p.C_Currency_ID,ah.DateTrx,p.C_ConversionType_ID, al.AD_Client_ID,al.AD_Org_ID)) ""
			+ ""FROM C_AllocationLine al""
			+ "" INNER JOIN C_AllocationHdr ah ON (al.C_AllocationHdr_ID=ah.C_AllocationHdr_ID) ""
			+ "" INNER JOIN C_Payment p ON (al.C_Payment_ID=p.C_Payment_ID) ""
			+ ""WHERE al.C_Payment_ID=?""
			+ "" AND ah.IsActive='Y' AND al.IsActive='Y'"";
		//	+ "" AND al.C_Invoice_ID IS NOT NULL"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getC_Payment_ID());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				retValue = rs.getBigDecimal(1);
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
	//	log.fine(""getAllocatedAmt - "" + retValue);
		//	? ROUND(NVL(v_AllocatedAmt,0), 2);
		return retValue;
	}	//	getAllocatedAmt
"
org.compiere.model.MPayment.testAllocation,MPayment.java,"boolean testAllocation()
	{
		//	Cash Trx always allocated
		if (isCashTrx())
		{
			if (!isAllocated())
			{
				setIsAllocated(true);
				return true;
			}
			return false;
		}
		//
		BigDecimal alloc = getAllocatedAmt();
		if (alloc == null)
			alloc = Env.ZERO;
		BigDecimal total = getPayAmt();

		if (!isReceipt())
			total = total.negate();
		boolean test = total.compareTo(alloc) == 0;
		boolean change = test != isAllocated();
		if (change)
			setIsAllocated(test);
		log.fine(""Allocated="" + test
			+ "" ("" + alloc + ""="" + total + "")"");
		return change;
	}	//	testAllocation
"
org.compiere.model.MPayment.setIsAllocated,MPayment.java,"void setIsAllocated (Ctx ctx, int C_BPartner_ID, Trx trx)
	{
		int counter = 0;
		String sql = ""SELECT * FROM C_Payment ""
			+ ""WHERE IsAllocated='N' AND DocStatus IN ('CO','CL')"";
		if (C_BPartner_ID > 1)
			sql += "" AND C_BPartner_ID=?"";
		else
			sql += "" AND AD_Client_ID="" + ctx.getAD_Client_ID();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			if (C_BPartner_ID > 1)
				pstmt.setInt (1, C_BPartner_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MPayment pay = new MPayment (ctx, rs, trx);
				if (pay.testAllocation())
					if (pay.save())
						counter++;
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		s_log.config(""#"" + counter);
	}	//	setIsAllocated
"
org.compiere.model.MPayment.setErrorMessage,MPayment.java,"void setErrorMessage(String errorMessage)
	{
		m_errorMessage = errorMessage;
	}	//	setErrorMessage
"
org.compiere.model.MPayment.getErrorMessage,MPayment.java,"String getErrorMessage()
	{
		return m_errorMessage;
	}	//	getErrorMessage
"
org.compiere.model.MPayment.setC_BankAccount_ID,MPayment.java,"void setC_BankAccount_ID (int C_BankAccount_ID)
	{
		if (C_BankAccount_ID == 0)
		{
			setPaymentProcessor();
			if (getC_BankAccount_ID() == 0)
				throw new IllegalArgumentException(""Can't find Bank Account"");
		}
		else
			super.setC_BankAccount_ID(C_BankAccount_ID);
	}	//	setC_BankAccount_ID
"
org.compiere.model.MPayment.setPaymentProcessor,MPayment.java,"boolean setPaymentProcessor ()
	{
		return setPaymentProcessor (getTenderType(), getCreditCardType());
	}	//	setPaymentProcessor
"
org.compiere.model.MPayment.setPaymentProcessor,MPayment.java,"boolean setPaymentProcessor (String tender, String CCType)
	{
		m_mPaymentProcessor = null;
		//	Get Processor List
		if ((m_mPaymentProcessors == null) || (m_mPaymentProcessors.length == 0))
			m_mPaymentProcessors = MPaymentProcessor.find (getCtx(), tender, CCType, getAD_Client_ID(),
				getC_Currency_ID(), getPayAmt(), get_Trx());
		//	Relax Amount
		if ((m_mPaymentProcessors == null) || (m_mPaymentProcessors.length == 0))
			m_mPaymentProcessors = MPaymentProcessor.find (getCtx(), tender, CCType, getAD_Client_ID(),
				getC_Currency_ID(), Env.ZERO, get_Trx());
		if ((m_mPaymentProcessors == null) || (m_mPaymentProcessors.length == 0))
			return false;

		//	Find the first right one
		for (MPaymentProcessor pp : m_mPaymentProcessors)
		{
			if (pp.accepts (tender, CCType))
			{
				m_mPaymentProcessor = pp;
				break;
			}
		}
		if (m_mPaymentProcessor != null)
			setC_BankAccount_ID (m_mPaymentProcessor.getC_BankAccount_ID());
		//
		return m_mPaymentProcessor != null;
	}   //  setPaymentProcessor
"
org.compiere.model.MPayment.getCreditCards,MPayment.java,"ValueNamePair[] getCreditCards ()
	{
		return getCreditCards(getPayAmt());
	}	//	getCreditCards
"
org.compiere.model.MPayment.getCreditCards,MPayment.java,"ValueNamePair[] getCreditCards (BigDecimal amt)
	{
		try
		{
			if ((m_mPaymentProcessors == null) || (m_mPaymentProcessors.length == 0))
				m_mPaymentProcessors = MPaymentProcessor.find (getCtx (), null, null,
					getAD_Client_ID (), getC_Currency_ID (), amt, get_Trx());
			//
			HashMap<String,ValueNamePair> map = new HashMap<String,ValueNamePair>(); //	to eliminate duplicates
			for (MPaymentProcessor pp : m_mPaymentProcessors)
			{
				if (pp.isAcceptAMEX ())
					map.put (CREDITCARDTYPE_Amex, getCreditCardPair (CREDITCARDTYPE_Amex));
				if (pp.isAcceptDiners ())
					map.put (CREDITCARDTYPE_Diners, getCreditCardPair (CREDITCARDTYPE_Diners));
				if (pp.isAcceptDiscover ())
					map.put (CREDITCARDTYPE_Discover, getCreditCardPair (CREDITCARDTYPE_Discover));
				if (pp.isAcceptMC ())
					map.put (CREDITCARDTYPE_MasterCard, getCreditCardPair (CREDITCARDTYPE_MasterCard));
				if (pp.isAcceptCorporate ())
					map.put (CREDITCARDTYPE_PurchaseCard, getCreditCardPair (CREDITCARDTYPE_PurchaseCard));
				if (pp.isAcceptVisa ())
					map.put (CREDITCARDTYPE_Visa, getCreditCardPair (CREDITCARDTYPE_Visa));
			} //	for all payment processors
			//
			ValueNamePair[] retValue = new ValueNamePair[map.size ()];
			map.values ().toArray (retValue);
			log.fine(""#"" + retValue.length + "" - Processors="" + m_mPaymentProcessors.length);
			return retValue;
		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			return null;
		}
	}	//	getCreditCards
"
org.compiere.model.MPayment.getCreditCardPair,MPayment.java,"ValueNamePair getCreditCardPair (String CreditCardType)
	{
		return new ValueNamePair (CreditCardType, getCreditCardName(CreditCardType));
	}	//	getCreditCardPair
"
org.compiere.model.MPayment.setCreditCardNumber,MPayment.java,"void setCreditCardNumber (String CreditCardNumber)
	{
		super.setCreditCardNumber (MPaymentValidate.checkNumeric(CreditCardNumber));
	}	//	setCreditCardNumber
"
org.compiere.model.MPayment.setCreditCardVV,MPayment.java,"void setCreditCardVV(String newCreditCardVV)
	{
		m_CreditCardVV = MPaymentValidate.checkNumeric(newCreditCardVV);
	}	//	setCreditCardVV
"
org.compiere.model.MPayment.getCreditCardVV,MPayment.java,"String getCreditCardVV()
	{
		return m_CreditCardVV;
	}	//	getCreditCardVV
"
org.compiere.model.MPayment.setCreditCardExpMM,MPayment.java,"void setCreditCardExpMM (int CreditCardExpMM)
	{
		if ((CreditCardExpMM < 1) || (CreditCardExpMM > 12))
			;
		else
			super.setCreditCardExpMM (CreditCardExpMM);
	}	//	setCreditCardExpMM
"
org.compiere.model.MPayment.setCreditCardExpYY,MPayment.java,"void setCreditCardExpYY (int newCreditCardExpYY)
	{
		int CreditCardExpYY = newCreditCardExpYY;
		if (newCreditCardExpYY > 1999)
			CreditCardExpYY = newCreditCardExpYY-2000;
		super.setCreditCardExpYY(CreditCardExpYY);
	}	//	setCreditCardExpYY
"
org.compiere.model.MPayment.setCreditCardExp,MPayment.java,"boolean setCreditCardExp (String mmyy)
	{
		if (MPaymentValidate.validateCreditCardExp(mmyy).length() != 0)
			return false;
		//
		String exp = MPaymentValidate.checkNumeric(mmyy);
		String mmStr = exp.substring(0,2);
		String yyStr = exp.substring(2,4);
		setCreditCardExpMM (Integer.parseInt(mmStr));
		setCreditCardExpYY (Integer.parseInt(yyStr));
		return true;
	}   //  setCreditCardExp
"
org.compiere.model.MPayment.getCreditCardExp,MPayment.java,"String getCreditCardExp(String delimiter)
	{
		String mm = String.valueOf(getCreditCardExpMM());
		String yy = String.valueOf(getCreditCardExpYY());

		StringBuffer retValue = new StringBuffer();
		if (mm.length() == 1)
			retValue.append(""0"");
		retValue.append(mm);
		//
		if (delimiter != null)
			retValue.append(delimiter);
		//
		if (yy.length() == 1)
			retValue.append(""0"");
		retValue.append(yy);
		//
		return (retValue.toString());
	}   //  getCreditCardExp
"
org.compiere.model.MPayment.setMicr,MPayment.java,"void setMicr (String MICR)
	{
		super.setMicr (MPaymentValidate.checkNumeric(MICR));
	}	//	setBankMICR
"
org.compiere.model.MPayment.setRoutingNo,MPayment.java,"void setRoutingNo(String RoutingNo)
	{
		super.setRoutingNo (MPaymentValidate.checkNumeric(RoutingNo));
	}	//	setBankRoutingNo
"
org.compiere.model.MPayment.setAccountNo,MPayment.java,"void setAccountNo (String AccountNo)
	{
		super.setAccountNo (MPaymentValidate.checkNumeric(AccountNo));
	}	//	setBankAccountNo
"
org.compiere.model.MPayment.setCheckNo,MPayment.java,"void setCheckNo(String CheckNo)
	{
		super.setCheckNo(MPaymentValidate.checkNumeric(CheckNo));
	}	//	setBankCheckNo
"
org.compiere.model.MPayment.setDocumentNo,MPayment.java,"void setDocumentNo()
	{
		//	Cash Transfer
		if (""X"".equals(getTenderType()))
			return;
		//	Current Document No
		String documentNo = getDocumentNo();
		//	Existing reversal
		if ((documentNo != null)
			&& (documentNo.indexOf(REVERSE_INDICATOR) >= 0))
			return;

		//	If external number exists - enforce it
		if (!Util.isEmpty(getR_PnRef()))
		{
			if (!getR_PnRef().equals(documentNo))
				setDocumentNo(getR_PnRef());
			return;
		}

		documentNo = """";
		//	Credit Card
		if (TENDERTYPE_CreditCard.equals(getTenderType())
			&& isReceipt())
		{
			documentNo = getCreditCardType()
				+ "" "" + Obscure.obscure(getCreditCardNumber())
				+ "" "" + getCreditCardExpMM()
				+ ""/"" + getCreditCardExpYY();
		}
		//	Own Check No
		else if (TENDERTYPE_Check.equals(getTenderType())
			&& !isReceipt()
			&& !Util.isEmpty(getCheckNo()))
		{
			documentNo = getCheckNo();
		}
		//	Customer Check: Routing: Account #Check
		else if (TENDERTYPE_Check.equals(getTenderType())
			&& isReceipt())
		{
			if (getRoutingNo() != null)
				documentNo = getRoutingNo() + "": "";
			if (getAccountNo() != null)
				documentNo += getAccountNo();
			if (getCheckNo() != null)
			{
				if (documentNo.length() > 0)
					documentNo += "" "";
				documentNo += ""#"" + getCheckNo();
			}
		}
		//	TENDERTYPE_DirectDeposit

		//	Set Document No
		documentNo = documentNo.trim();
		if (documentNo.length() > 0)
			setDocumentNo(documentNo);
	}	//	setDocumentNo
"
org.compiere.model.MPayment.setR_PnRef,MPayment.java,"void setR_PnRef (String R_PnRef)
	{
		super.setR_PnRef (R_PnRef);
		if (R_PnRef != null)
			setDocumentNo (R_PnRef);
	}	//	setR_PnRef
"
org.compiere.model.MPayment.setPayAmt,MPayment.java,"void setPayAmt (BigDecimal PayAmt)
	{
		super.setPayAmt(PayAmt == null ? Env.ZERO : PayAmt);
	}	//	setPayAmt
"
org.compiere.model.MPayment.setAmount,MPayment.java,"void setAmount (int C_Currency_ID, BigDecimal payAmt)
	{
		if (C_Currency_ID == 0)
			C_Currency_ID = MClient.get(getCtx()).getC_Currency_ID();
		setC_Currency_ID(C_Currency_ID);
		setPayAmt(payAmt);
	}   //  setAmount
"
org.compiere.model.MPayment.setDiscountAmt,MPayment.java,"void setDiscountAmt (BigDecimal DiscountAmt)
	{
		super.setDiscountAmt (DiscountAmt == null ? Env.ZERO : DiscountAmt);
	}	//	setDiscountAmt
"
org.compiere.model.MPayment.setWriteOffAmt,MPayment.java,"void setWriteOffAmt (BigDecimal WriteOffAmt)
	{
		super.setWriteOffAmt (WriteOffAmt == null ? Env.ZERO : WriteOffAmt);
	}	//	setWriteOffAmt
"
org.compiere.model.MPayment.setOverUnderAmt,MPayment.java,"void setOverUnderAmt (BigDecimal OverUnderAmt)
	{
		super.setOverUnderAmt (OverUnderAmt == null ? Env.ZERO : OverUnderAmt);
		//setIsOverUnderPayment(getOverUnderAmt().compareTo(Env.ZERO) != 0);
	}	//	setOverUnderAmt
"
org.compiere.model.MPayment.setTaxAmt,MPayment.java,"void setTaxAmt (BigDecimal TaxAmt)
	{
		super.setTaxAmt (TaxAmt == null ? Env.ZERO : TaxAmt);
	}	//	setTaxAmt
"
org.compiere.model.MPayment.setBP_BankAccount,MPayment.java,"void setBP_BankAccount (MBPBankAccount ba)
	{
		log.fine("""" + ba);
		if (ba == null)
			return;
		setC_BPartner_ID(ba.getC_BPartner_ID());
		setAccountAddress(ba.getA_Name(), ba.getA_Street(), ba.getA_City(),
			ba.getA_State(), ba.getA_Zip(), ba.getA_Country());
		setA_EMail(ba.getA_EMail());
		setA_Ident_DL(ba.getA_Ident_DL());
		setA_Ident_SSN(ba.getA_Ident_SSN());
		//	CC
		if (ba.getCreditCardType() != null)
			setCreditCardType(ba.getCreditCardType());
		if (ba.getCreditCardNumber() != null)
			setCreditCardNumber(ba.getCreditCardNumber());
		if (ba.getCreditCardExpMM() != 0)
			setCreditCardExpMM(ba.getCreditCardExpMM());
		if (ba.getCreditCardExpYY() != 0)
			setCreditCardExpYY(ba.getCreditCardExpYY());
		//	Bank
		if (ba.getAccountNo() != null)
			setAccountNo(ba.getAccountNo());
		if (ba.getRoutingNo() != null)
			setRoutingNo(ba.getRoutingNo());
	}	//	setBP_BankAccount
"
org.compiere.model.MPayment.saveToBP_BankAccount,MPayment.java,"boolean saveToBP_BankAccount (MBPBankAccount ba)
	{
		if (ba == null)
			return false;
		ba.setA_Name(getA_Name());
		ba.setA_Street(getA_Street());
		ba.setA_City(getA_City());
		ba.setA_State(getA_State());
		ba.setA_Zip(getA_Zip());
		ba.setA_Country(getA_Country());
		ba.setA_EMail(getA_EMail());
		ba.setA_Ident_DL(getA_Ident_DL());
		ba.setA_Ident_SSN(getA_Ident_SSN());
		//	CC
		ba.setCreditCardType(getCreditCardType());
		ba.setCreditCardNumber(getCreditCardNumber());
		ba.setCreditCardExpMM(getCreditCardExpMM());
		ba.setCreditCardExpYY(getCreditCardExpYY());
		//	Bank
		if (getAccountNo() != null)
			ba.setAccountNo(getAccountNo());
		if (getRoutingNo() != null)
			ba.setRoutingNo(getRoutingNo());
		//	Trx
		ba.setR_AvsAddr(getR_AvsAddr());
		ba.setR_AvsZip(getR_AvsZip());
		//
		boolean ok = ba.save(get_Trx());
		log.fine(ba.toString());
		return ok;
	}	//	saveToBP_BankAccount
"
org.compiere.model.MPayment.setC_DocType_ID,MPayment.java,"void setC_DocType_ID ()
	{
		setC_DocType_ID(isReceipt());
	}	//	setC_DocType_ID
"
org.compiere.model.MPayment.setC_DocType_ID,MPayment.java,"void setC_DocType_ID (boolean isReceipt)
	{
		setIsReceipt(isReceipt);
		String sql = ""SELECT C_DocType_ID FROM C_DocType WHERE AD_Client_ID=? AND DocBaseType=? ORDER BY ASCII(IsDefault) DESC"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getAD_Client_ID());
			if (isReceipt)
				pstmt.setString(2, MDocBaseType.DOCBASETYPE_ARReceipt);
			else
				pstmt.setString(2, MDocBaseType.DOCBASETYPE_APPayment);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				setC_DocType_ID(rs.getInt(1));
			else
				log.warning (""NOT found - isReceipt="" + isReceipt);
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
	}	//	setC_DocType_ID
"
org.compiere.model.MPayment.setC_DocType_ID,MPayment.java,"void setC_DocType_ID (int C_DocType_ID)
	{
	//	if (getDocumentNo() != null && getC_DocType_ID() != C_DocType_ID)
	//		setDocumentNo(null);
		super.setC_DocType_ID(C_DocType_ID);
	}	//	setC_DocType_ID
"
org.compiere.model.MPayment.verifyDocType,MPayment.java,"boolean verifyDocType()
	{
		if (getC_DocType_ID() == 0)
			return false;
		//
		Boolean invoiceSO = null;
		//	Check Invoice First
		if (getC_Invoice_ID() > 0)
		{
			String sql = ""SELECT idt.IsSOTrx ""
				+ ""FROM C_Invoice i""
				+ "" INNER JOIN C_DocType idt ON (i.C_DocType_ID=idt.C_DocType_ID) ""
				+ ""WHERE i.C_Invoice_ID=?"";
			PreparedStatement pstmt = null;
			try
			{
				pstmt = DB.prepareStatement(sql, get_Trx());
				pstmt.setInt(1, getC_Invoice_ID());
				ResultSet rs = pstmt.executeQuery();
				if (rs.next())
					invoiceSO = Boolean.valueOf (""Y"".equals(rs.getString(1)));
				rs.close();
				pstmt.close();
				pstmt = null;
			}
			catch (Exception e)
			{
				log.log(Level.SEVERE, sql, e);
			}
			try
			{
				if (pstmt != null)
					pstmt.close();
				pstmt = null;
			}
			catch (Exception e)
			{
				pstmt = null;
			}
		}	//	Invoice

		//	DocumentType
		Boolean paymentSO = null;
		PreparedStatement pstmt = null;
		String sql = ""SELECT IsSOTrx ""
			+ ""FROM C_DocType ""
			+ ""WHERE C_DocType_ID=?"";
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getC_DocType_ID());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				paymentSO = Boolean.valueOf (""Y"".equals(rs.getString(1)));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//	No Payment info
		if (paymentSO == null)
			return false;
		setIsReceipt(paymentSO.booleanValue());

		//	We have an Invoice .. and it does not match
		if ((invoiceSO != null)
				&& (invoiceSO.booleanValue() != paymentSO.booleanValue()))
			return false;
		//	OK
		return true;
	}	//	verifyDocType
"
org.compiere.model.MPayment.setC_Invoice_ID,MPayment.java,"void setC_Invoice_ID (String oldC_Invoice_ID,
			String newC_Invoice_ID, int windowNo) throws Exception
	{
		if ((newC_Invoice_ID == null) || (newC_Invoice_ID.length() == 0))
			return;
		int C_Invoice_ID = Integer.parseInt(newC_Invoice_ID);
		//  reset as dependent fields get reset
		//do n't use p_changeVO.setContext, 'cuz this is not intended to pass to client. use getCtx.setContext instead
		//p_changeVO.setContext(getCtx(), windowNo, ""C_Invoice_ID"", C_Invoice_ID);
		getCtx().setContext(windowNo, ""C_Invoice_ID"", C_Invoice_ID);
		setC_Invoice_ID(C_Invoice_ID);
		if (C_Invoice_ID == 0)
			return;

		setC_Order_ID(0);
		setC_Charge_ID(0);
		setC_Project_ID(0);
		setIsPrepayment(false);
		//
		setDiscountAmt(Env.ZERO);
		setWriteOffAmt(Env.ZERO);
		setIsOverUnderPayment(false);
		setOverUnderAmt(Env.ZERO);

		int C_InvoicePaySchedule_ID = 0;
			if ((getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_Invoice_ID"") == C_Invoice_ID)
			&& (getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_InvoicePaySchedule_ID"") != 0))
			C_InvoicePaySchedule_ID = getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_InvoicePaySchedule_ID"");

		//  Payment Date
		Timestamp ts = getDateTrx();
		if (ts == null)
			ts = new Timestamp(System.currentTimeMillis());
		//
		String sql = ""SELECT C_BPartner_ID,C_Currency_ID,""		//	1..2
			+ "" invoiceOpen(C_Invoice_ID, ?),""					//	3		#1
			+ "" invoiceDiscount(C_Invoice_ID,?,?), IsSOTrx ""	//	4..5	#2/3
			+ ""FROM C_Invoice WHERE C_Invoice_ID=?"";			//			#4
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_InvoicePaySchedule_ID);
			pstmt.setTimestamp(2, ts);
			pstmt.setInt(3, C_InvoicePaySchedule_ID);
			pstmt.setInt(4, C_Invoice_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				setC_BPartner_ID(rs.getInt(1));
				int C_Currency_ID = rs.getInt(2);					//	Set Invoice Currency
				setC_Currency_ID(C_Currency_ID);
				//
				BigDecimal InvoiceOpen = rs.getBigDecimal(3);		//	Set Invoice OPen Amount
				if (InvoiceOpen == null)
					InvoiceOpen = Env.ZERO;
				BigDecimal DiscountAmt = rs.getBigDecimal(4);		//	Set Discount Amt
				if (DiscountAmt == null)
					DiscountAmt = Env.ZERO;

				MInvoice invoice = new MInvoice(getCtx(), C_Invoice_ID, null);
				MDocType docType = new MDocType(getCtx(), invoice.getC_DocType_ID(), null);
				if (docType.isReturnTrx())
				{
					// Adjust discount amount for credit memos. Invoice Open Amt is already adjusted.
					DiscountAmt = DiscountAmt.negate();
				}
				setPayAmt(InvoiceOpen.subtract(DiscountAmt));
				setDiscountAmt(DiscountAmt);
				//IsSOTrx, Project
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		checkDocType(windowNo);
	}	//	setC_Invoice_ID
"
org.compiere.model.MPayment.setC_Order_ID,MPayment.java,"void setC_Order_ID (String oldC_Order_ID,
			String newC_Order_ID, int windowNo) throws Exception
	{
		if ((newC_Order_ID == null) || (newC_Order_ID.length() == 0))
			return;
		int C_Order_ID = Integer.parseInt(newC_Order_ID);
		setC_Order_ID(C_Order_ID);
		if (C_Order_ID == 0)
			return;
		//
		setC_Invoice_ID(0);
		setC_Charge_ID(0);
		setC_Project_ID(0);
		setIsPrepayment(true);
		//
		setDiscountAmt(Env.ZERO);
		setWriteOffAmt(Env.ZERO);
		setIsOverUnderPayment(false);
		setOverUnderAmt(Env.ZERO);
		//
		String sql = ""SELECT C_BPartner_ID,C_Currency_ID, GrandTotal, C_Project_ID ""
			+ ""FROM C_Order WHERE C_Order_ID=?""; 	// #1
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_Order_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				setC_BPartner_ID(rs.getInt(1));
				int C_Currency_ID = rs.getInt(2);					//	Set Order Currency
				setC_Currency_ID(C_Currency_ID);
				//
				BigDecimal GrandTotal = rs.getBigDecimal(3);		//	Set Pay Amount
				if (GrandTotal == null)
					GrandTotal = Env.ZERO;
				setPayAmt(GrandTotal);
				setC_Project_ID(rs.getInt(4));
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		checkDocType(windowNo);
	}	//	setC_Order_ID
"
org.compiere.model.MPayment.setC_Charge_ID,MPayment.java,"void setC_Charge_ID (String oldC_Charge_ID,
			String newC_Charge_ID, int windowNo) throws Exception
	{
		if ((newC_Charge_ID == null) || (newC_Charge_ID.length() == 0))
			return;
		int C_Charge_ID = Integer.parseInt(newC_Charge_ID);
		setC_Charge_ID(C_Charge_ID);
		if (C_Charge_ID == 0)
			return;
		//
		setC_Order_ID(0);
		setC_Invoice_ID(0);
		setC_Project_ID(0);
		setIsPrepayment(true);
		setIsReceipt(false);
		//
		setDiscountAmt(Env.ZERO);
		setWriteOffAmt(Env.ZERO);
		setIsOverUnderPayment(false);
		setOverUnderAmt(Env.ZERO);
	}	//	setC_Charge_ID
"
org.compiere.model.MPayment.setC_DocType_ID,MPayment.java,"void setC_DocType_ID (String oldC_DocType_ID,
			String newC_DocType_ID, int windowNo) throws Exception
	{
		if ((newC_DocType_ID == null) || (newC_DocType_ID.length() == 0))
			return;
		int C_DocType_ID = Integer.parseInt(newC_DocType_ID);
		setC_DocType_ID(C_DocType_ID);
		checkDocType(windowNo);
	}	//	setC_DocType_ID
"
org.compiere.model.MPayment.checkDocType,MPayment.java,"void checkDocType(int windowNo)
	{
		if(CThreadUtil.isCalloutActive())
			return;
		int C_Invoice_ID = getC_Invoice_ID();
		int C_Order_ID = getC_Order_ID();
		int C_DocType_ID = getC_DocType_ID();
		log.fine(""C_Invoice_ID="" + C_Invoice_ID + "", C_DocType_ID="" + C_DocType_ID);
		MDocType dt = null;
		if (C_DocType_ID != 0)
		{
			dt = MDocType.get(getCtx(), C_DocType_ID);
			setIsReceipt(dt.isSOTrx());
			p_changeVO.setContext(getCtx(), windowNo, ""IsSOTrx"", dt.isSOTrx());
		}
		//	Invoice
		if (C_Invoice_ID != 0)
		{
			MInvoice inv = new MInvoice (getCtx(), C_Invoice_ID, null);
			if (dt != null)
			{
				if (inv.isSOTrx() != dt.isSOTrx())
					p_changeVO.addError(Msg.getMsg(getCtx(), ""PaymentDocTypeInvoiceInconsistent""));
			}
		}
		//	Order Waiting Payment (can only be SO)
		if ((C_Order_ID != 0) && !dt.isSOTrx())
			p_changeVO.addError(Msg.getMsg(getCtx(), ""PaymentDocTypeInvoiceInconsistent""));
	}	//	checkDocType
"
org.compiere.model.MPayment.setC_ConversionType_ID,MPayment.java,"void setC_ConversionType_ID (String oldC_ConversionType_ID,
			String newC_ConversionType_ID, int windowNo) throws Exception
	{
		if ((newC_ConversionType_ID == null) || (newC_ConversionType_ID.length() == 0))
			return;
		int C_ConversionType_ID = Integer.parseInt(newC_ConversionType_ID);
		setC_ConversionType_ID(C_ConversionType_ID);
		if (C_ConversionType_ID == 0)
			return;
		checkAmt(windowNo, ""C_ConversionType_ID"");
	}	//	setC_ConversionType_ID
"
org.compiere.model.MPayment.setC_Currency_ID,MPayment.java,"void setC_Currency_ID (String oldC_Currency_ID,
			String newC_Currency_ID, int windowNo) throws Exception
	{
		if ((newC_Currency_ID == null) || (newC_Currency_ID.length() == 0))
			return;
		int C_Currency_ID = Integer.parseInt(newC_Currency_ID);
		if (C_Currency_ID == 0)
			return;
		setC_Currency_ID(C_Currency_ID);
		checkAmt(windowNo, ""C_Currency_ID"");
	}	//	setC_Currency_ID
"
org.compiere.model.MPayment.setDiscountAmt,MPayment.java,"void setDiscountAmt (String oldDiscountAmt,
			String newDiscountAmt, int windowNo) throws Exception
	{
		if ((newDiscountAmt == null) || (newDiscountAmt.length() == 0))
			return;
		BigDecimal DiscountAmt = PO.convertToBigDecimal(newDiscountAmt);
		setDiscountAmt(DiscountAmt);
		checkAmt(windowNo, ""DiscountAmt"");
	}	//	setDiscountAmt
"
org.compiere.model.MPayment.setIsOverUnderPayment,MPayment.java,"void setIsOverUnderPayment (String oldIsOverUnderPayment,
			String newIsOverUnderPayment, int windowNo) throws Exception
	{
		if ((newIsOverUnderPayment == null) || (newIsOverUnderPayment.length() == 0))
			return;
		checkAmt(windowNo, ""IsOverUnderPayment"");
		setIsOverUnderPayment(""Y"".equals(newIsOverUnderPayment));
	}	//	setIsOverUnderPayment
"
org.compiere.model.MPayment.setOverUnderAmt,MPayment.java,"void setOverUnderAmt (String oldOverUnderAmt,
			String newOverUnderAmt, int windowNo) throws Exception
	{
		if ((newOverUnderAmt == null) || (newOverUnderAmt.length() == 0))
			return;
		BigDecimal OverUnderAmt = PO.convertToBigDecimal(newOverUnderAmt);
		setOverUnderAmt(OverUnderAmt);
		checkAmt(windowNo, ""OverUnderAmt"");
	}	//	setOverUnderAmt
"
org.compiere.model.MPayment.setPayAmt,MPayment.java,"void setPayAmt (String oldPayAmt,
			String newPayAmt, int windowNo) throws Exception
	{
		if ((newPayAmt == null) || (newPayAmt.length() == 0))
			return;
		BigDecimal PayAmt = PO.convertToBigDecimal(newPayAmt);
		setPayAmt(PayAmt);
		checkAmt(windowNo, ""PayAmt"");
	}	//	setPayAmt
"
org.compiere.model.MPayment.setWriteOffAmt,MPayment.java,"void setWriteOffAmt (String oldWriteOffAmt,
			String newWriteOffAmt, int windowNo) throws Exception
	{
		if ((newWriteOffAmt == null) || (newWriteOffAmt.length() == 0))
			return;
		BigDecimal WriteOffAmt = PO.convertToBigDecimal(newWriteOffAmt);
		setWriteOffAmt(WriteOffAmt);
		checkAmt(windowNo, ""WriteOffAmt"");
	}	//	setWriteOffAmt
"
org.compiere.model.MPayment.setDateTrx,MPayment.java,"void setDateTrx (String oldDateTrx,
			String newDateTrx, int windowNo) throws Exception
	{
		if ((newDateTrx == null) || (newDateTrx.length() == 0))
			return;
		Timestamp dateTrx = PO.convertToTimestamp(newDateTrx);
		if (dateTrx == null)
			return;
		setDateTrx(dateTrx);
		setDateAcct(dateTrx);
		checkAmt(windowNo, ""DateTrx"");
	}	//	setDateTrx
"
org.compiere.model.MPayment.checkAmt,MPayment.java,"void checkAmt (int windowNo, String columnName)
	{
		if(CThreadUtil.isCalloutActive())
			return;
		int C_Invoice_ID = getC_Invoice_ID();
		//	New Payment
		if ((getC_Payment_ID() == 0)
			&& (getC_BPartner_ID() == 0)
			&& (C_Invoice_ID == 0))
			return;
		int C_Currency_ID = getC_Currency_ID();
		if (C_Currency_ID == 0)
			return;

		//	Changed Column
		if (columnName.equals(""IsOverUnderPayment"")	//	Set Over/Under Amt to Zero
			|| !isOverUnderPayment())
			setOverUnderAmt(Env.ZERO);

		int C_InvoicePaySchedule_ID = 0;
		if ((getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_Invoice_ID"") == C_Invoice_ID)
			&& (getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_InvoicePaySchedule_ID"") != 0))
			C_InvoicePaySchedule_ID = getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_InvoicePaySchedule_ID"");

		//	Get Open Amount & Invoice Currency
		BigDecimal InvoiceOpenAmt = Env.ZERO;
		BigDecimal DiscountAmt = Env.ZERO;
		int C_Currency_Invoice_ID = 0;
		if (C_Invoice_ID != 0)
		{
			Timestamp ts = getDateTrx();
			if (ts == null)
				ts = new Timestamp(System.currentTimeMillis());
			String sql = ""SELECT C_BPartner_ID,C_Currency_ID,""		//	1..2
				+ "" invoiceOpen(C_Invoice_ID, ?),""					//	3		#1
				+ "" invoiceDiscount(C_Invoice_ID,?,?), IsSOTrx ""	//	4..5	#2/3
				+ ""FROM C_Invoice WHERE C_Invoice_ID=?"";			//			#4
			try
			{
				PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
				pstmt.setInt(1, C_InvoicePaySchedule_ID);
				pstmt.setTimestamp(2, ts);
				pstmt.setInt(3, C_InvoicePaySchedule_ID);
				pstmt.setInt(4, C_Invoice_ID);
				ResultSet rs = pstmt.executeQuery();
				if (rs.next())
				{
					C_Currency_Invoice_ID= rs.getInt(2);
					InvoiceOpenAmt = rs.getBigDecimal(3);		//	Set Invoice Open Amount
					if (InvoiceOpenAmt == null)
						InvoiceOpenAmt = Env.ZERO;
					DiscountAmt = rs.getBigDecimal(4);
					if (DiscountAmt == null)
						DiscountAmt = Env.ZERO;

					MInvoice invoice = new MInvoice(getCtx(), C_Invoice_ID, null);
					MDocType docType = new MDocType(getCtx(), invoice.getC_DocType_ID(), null);
					if (docType.isReturnTrx())
					{
						// Adjust discount amount for credit memos. Invoice Open Amt is already adjusted.
						DiscountAmt = DiscountAmt.negate();
					}
				}
				rs.close();
				pstmt.close();
			}
			catch (SQLException e)
			{
				log.log(Level.SEVERE, sql, e);
			}
		}	//	get Invoice Info
		log.fine(""Open="" + InvoiceOpenAmt + "" Discount= ""+DiscountAmt
			+ "", C_Invoice_ID="" + C_Invoice_ID
			+ "", C_Currency_ID="" + C_Currency_Invoice_ID);

		//	Get Info from Tab
		BigDecimal PayAmt = getPayAmt();
		BigDecimal WriteOffAmt = getWriteOffAmt();
		BigDecimal OverUnderAmt = getOverUnderAmt();
		BigDecimal EnteredDiscountAmt = getDiscountAmt();
		log.fine(""Pay="" + PayAmt + "", Discount="" + EnteredDiscountAmt
			+ "", WriteOff="" + WriteOffAmt + "", OverUnderAmt="" + OverUnderAmt);
		//	Get Currency Info
		MCurrency currency = MCurrency.get(getCtx(), C_Currency_ID);
		Timestamp ConvDate = getDateAcct();
		int C_ConversionType_ID = getC_ConversionType_ID();
		int AD_Client_ID = getAD_Client_ID();
		int AD_Org_ID = getAD_Org_ID();
		//	Get Currency Rate
		BigDecimal CurrencyRate = Env.ONE;
		if (((C_Currency_ID > 0) && (C_Currency_Invoice_ID > 0) &&
			(C_Currency_ID != C_Currency_Invoice_ID))
			|| columnName.equals(""C_Currency_ID"") || columnName.equals(""C_ConversionType_ID""))
		{
			log.fine(""InvCurrency="" + C_Currency_Invoice_ID
				+ "", PayCurrency="" + C_Currency_ID
				+ "", Date="" + ConvDate + "", Type="" + C_ConversionType_ID);
			CurrencyRate = MConversionRate.getRate (C_Currency_Invoice_ID, C_Currency_ID,
				ConvDate, C_ConversionType_ID, AD_Client_ID, AD_Org_ID);
			if ((CurrencyRate == null) || (CurrencyRate.compareTo(Env.ZERO) == 0))
			{
			//	mTab.setValue(""C_Currency_ID"", Integer.valueOf(C_Currency_Invoice_ID));	//	does not work
				if (C_Currency_Invoice_ID != 0)
					p_changeVO.addError(Msg.getMsg(getCtx(), ""NoCurrencyConversion""));
				return;
			}
			//
			InvoiceOpenAmt = InvoiceOpenAmt.multiply(CurrencyRate)
				.setScale(currency.getStdPrecision(), BigDecimal.ROUND_HALF_UP);
			DiscountAmt = DiscountAmt.multiply(CurrencyRate)
				.setScale(currency.getStdPrecision(), BigDecimal.ROUND_HALF_UP);
			log.fine(""Rate="" + CurrencyRate + "", InvoiceOpenAmt="" + InvoiceOpenAmt + "", DiscountAmt="" + DiscountAmt);
		}

		//	Currency Changed - convert all
		if (columnName.equals(""C_Currency_ID"") || columnName.equals(""C_ConversionType_ID""))
		{

			WriteOffAmt = WriteOffAmt.multiply(CurrencyRate)
				.setScale(currency.getStdPrecision(), BigDecimal.ROUND_HALF_UP);
			setWriteOffAmt(WriteOffAmt);
			OverUnderAmt = OverUnderAmt.multiply(CurrencyRate)
				.setScale(currency.getStdPrecision(), BigDecimal.ROUND_HALF_UP);
			setOverUnderAmt(OverUnderAmt);

			// Entered Discount amount should be converted to entered currency
			EnteredDiscountAmt = EnteredDiscountAmt.multiply(CurrencyRate)
				.setScale(currency.getStdPrecision(), BigDecimal.ROUND_HALF_UP);
			setDiscountAmt(EnteredDiscountAmt);

			PayAmt = InvoiceOpenAmt.subtract(DiscountAmt).subtract(WriteOffAmt).subtract(OverUnderAmt);
			setPayAmt(PayAmt);
		}

		//	No Invoice - Set Discount, Writeoff, Under/Over to 0
		else if (C_Invoice_ID == 0)
		{
			if (DiscountAmt.signum() != 0)
				setDiscountAmt(Env.ZERO);
			if (WriteOffAmt.signum() != 0)
				setWriteOffAmt(Env.ZERO);
			if (OverUnderAmt.signum() != 0)
				setOverUnderAmt(Env.ZERO);
		}
		//  PayAmt - calculate write off
		else if (columnName.equals(""PayAmt""))
		{
			if (isOverUnderPayment())
			{
				OverUnderAmt = InvoiceOpenAmt.subtract(PayAmt).subtract(DiscountAmt).subtract(WriteOffAmt);
				if(Env.ZERO.compareTo(OverUnderAmt) > 0 )
				{
					if (OverUnderAmt.abs().compareTo(DiscountAmt) <=0)
						DiscountAmt = DiscountAmt.add(OverUnderAmt);
					else
						DiscountAmt = Env.ZERO;
					OverUnderAmt = InvoiceOpenAmt.subtract(PayAmt).subtract(DiscountAmt).subtract(WriteOffAmt);
				}
				setDiscountAmt(DiscountAmt);
				setOverUnderAmt(OverUnderAmt);
			}
			else
			{
				WriteOffAmt = InvoiceOpenAmt.subtract(PayAmt).subtract(DiscountAmt).subtract(OverUnderAmt);
				if(Env.ZERO.compareTo(WriteOffAmt) > 0 )
				{
					if (WriteOffAmt.abs().compareTo(DiscountAmt) <=0)
						DiscountAmt = DiscountAmt.add(WriteOffAmt);
					else
						DiscountAmt = Env.ZERO;
					WriteOffAmt = InvoiceOpenAmt.subtract(PayAmt).subtract(DiscountAmt).subtract(OverUnderAmt);
				}
				setDiscountAmt(DiscountAmt);
				setWriteOffAmt(WriteOffAmt);
			}
		}
		else    //  calculate PayAmt
		{
			/* Allow reduction in discount, but not an increase. To give a discount that is higher
			   than the calculated discount, users have to enter a write off */			
			/* DiscountAmt will be negative for Return transactions (AP/AR credit memo) */
			/* we need to prevent increase in discount only when user is changing the discountamt
			 * otherwise calculated discount should be retained when changing columns like
			 * Transaction date
			 */
			if(columnName.equals(""DiscountAmt""))
			{
				if ( Env.ZERO.compareTo(DiscountAmt) > 0 )
				{
					if(EnteredDiscountAmt.compareTo(DiscountAmt)>0)
						DiscountAmt = EnteredDiscountAmt;
				}
				else
				{
					if(EnteredDiscountAmt.compareTo(DiscountAmt)<0)
						DiscountAmt = EnteredDiscountAmt;
				}
			}
			PayAmt = InvoiceOpenAmt.subtract(DiscountAmt).subtract(WriteOffAmt).subtract(OverUnderAmt);
			setPayAmt(PayAmt);
			setDiscountAmt(DiscountAmt);
		}
	}	//	checkAmt
"
org.compiere.model.MPayment.getCurrencyISO,MPayment.java,"String getCurrencyISO()
	{
		return MCurrency.getISO_Code (getCtx(), getC_Currency_ID());
	}	//	getCurrencyISO
"
org.compiere.model.MPayment.getDocStatusName,MPayment.java,"String getDocStatusName()
	{
		return MRefList.getListName(getCtx(), 131, getDocStatus());
	}	//	getDocStatusName
"
org.compiere.model.MPayment.getCreditCardName,MPayment.java,"String getCreditCardName()
	{
		return getCreditCardName(getCreditCardType());
	}	//	getCreditCardName
"
org.compiere.model.MPayment.getCreditCardName,MPayment.java,"String getCreditCardName(String CreditCardType)
	{
		if (CreditCardType == null)
			return ""--"";
		else if (CREDITCARDTYPE_MasterCard.equals(CreditCardType))
			return ""MasterCard"";
		else if (CREDITCARDTYPE_Visa.equals(CreditCardType))
			return ""Visa"";
		else if (CREDITCARDTYPE_Amex.equals(CreditCardType))
			return ""Amex"";
		else if (CREDITCARDTYPE_ATM.equals(CreditCardType))
			return ""ATM"";
		else if (CREDITCARDTYPE_Diners.equals(CreditCardType))
			return ""Diners"";
		else if (CREDITCARDTYPE_Discover.equals(CreditCardType))
			return ""Discover"";
		else if (CREDITCARDTYPE_PurchaseCard.equals(CreditCardType))
			return ""PurchaseCard"";
		return ""?"" + CreditCardType + ""?"";
	}	//	getCreditCardName
"
org.compiere.model.MPayment.addDescription,MPayment.java,"void addDescription (String description)
	{
		String desc = getDescription();
		if (desc == null)
			setDescription(description);
		else
			setDescription(desc + "" | "" + description);
	}	//	addDescription
"
org.compiere.model.MPayment.getPayAmt,MPayment.java,"BigDecimal getPayAmt (boolean absolute)
	{
		if (isReceipt())
			return super.getPayAmt();
		return super.getPayAmt().negate();
	}	//	getPayAmt
"
org.compiere.model.MPayment.getDiscountAmt,MPayment.java,"BigDecimal getDiscountAmt ()
	{
		if (isReceipt())
			return super.getDiscountAmt();
		return super.getDiscountAmt().negate();
	}	//	getDiscountAmt
"
org.compiere.model.MPayment.getWriteOffAmt,MPayment.java,"BigDecimal getWriteOffAmt ()
	{
		if (isReceipt())
			return super.getWriteOffAmt();
		return super.getWriteOffAmt().negate();
	}	//	getWriteOffAmt
"
org.compiere.model.MPayment.getPayAmtInCents,MPayment.java,"int getPayAmtInCents ()
	{
		BigDecimal bd = super.getPayAmt().multiply(Env.ONEHUNDRED);
		return bd.intValue();
	}	//	getPayAmtInCents
"
org.compiere.model.MPayment.getReversal,MPayment.java,"MPayment getReversal()
	{
		String description = getDescription();
		if ((description == null) || (description.length() == 0))
			return null;
		String s = description;
		int pos1 = 0;
		pos1 = s.indexOf(""<-)"");
		if (pos1 == -1)
			return null;

		int pos2 = s.lastIndexOf(""("", pos1);
		if (pos2 == -1)
			return null;
		String paymentDocNo = s.substring(pos2+1, pos1);

		MPayment reversal = getPayment(getCtx(), paymentDocNo, get_Trx());
		return reversal;
	}
"
org.compiere.model.MPayment.processIt,MPayment.java,"boolean processIt (String processAction)
	{
		m_processMsg = null;
		DocumentEngine engine = new DocumentEngine (this, getDocStatus());
		return engine.processIt (processAction, getDocAction());
	}	//	process
"
org.compiere.model.MPayment.unlockIt,MPayment.java,"boolean unlockIt()
	{
		log.info(toString());
		setProcessing(false);
		return true;
	}	//	unlockIt
"
org.compiere.model.MPayment.invalidateIt,MPayment.java,"boolean invalidateIt()
	{
		log.info(toString());
		setDocAction(DOCACTION_Prepare);
		return true;
	}	//	invalidateIt
"
org.compiere.model.MPayment.prepareIt,MPayment.java,"String prepareIt()
	{
		log.info(toString());
		m_processMsg = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_BEFORE_PREPARE);
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;

		//	Std Period open?
		m_processMsg = MPeriod.isOpen(this, null, getDateAcct(),
			isReceipt() ? MDocBaseType.DOCBASETYPE_ARReceipt : MDocBaseType.DOCBASETYPE_APPayment);
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;

		//	Unsuccessful Online Payment
		if (isOnline() && !isApproved())
		{
			if (getR_Result() != null)
				m_processMsg = ""@OnlinePaymentFailed@"";
			else
				m_processMsg = ""@PaymentNotProcessed@"";
			return DocActionConstants.STATUS_Invalid;
		}

		//	Waiting Payment - Need to create Invoice & Shipment
		if ((getC_Order_ID() != 0) && (getC_Invoice_ID() == 0))
		{	//	see WebOrder.process
			MOrder order = new MOrder (getCtx(), getC_Order_ID(), get_Trx());
			if (DOCSTATUS_WaitingPayment.equals(order.getDocStatus()))
			{
				order.setC_Payment_ID(getC_Payment_ID());
				order.setDocAction(X_C_Order.DOCACTION_WaitComplete);
				order.set_Trx(get_Trx());
			//	boolean ok =
				order.processIt (X_C_Order.DOCACTION_WaitComplete);
				m_processMsg = order.getProcessMsg();
				order.save(get_Trx());
				//	Set Invoice
				MInvoice[] invoices = order.getInvoices(true);
				int length = invoices.length;
				if (length > 0)		//	get last invoice
					setC_Invoice_ID (invoices[length-1].getC_Invoice_ID());
				//
				if (getC_Invoice_ID() == 0)
				{
					m_processMsg = ""@NotFound@ @C_Invoice_ID@"";
					return DocActionConstants.STATUS_Invalid;
				}
			}	//	WaitingPayment
		}

		//	Consistency of Invoice / Document Type and IsReceipt
		if (!verifyDocType())
		{
			m_processMsg = ""@PaymentDocTypeInvoiceInconsistent@"";
			return DocActionConstants.STATUS_Invalid;
		}

		//	Do not pay when Credit Stop/Hold
		if (!isReceipt())
		{
			MBPartner bp = new MBPartner (getCtx(), getC_BPartner_ID(), get_Trx());
			if (X_C_BPartner.SOCREDITSTATUS_CreditStop.equals(bp.getSOCreditStatus()))
			{
				m_processMsg = ""@BPartnerCreditStop@ - @TotalOpenBalance@=""
					+ bp.getTotalOpenBalance()
					+ "", @SO_CreditLimit@="" + bp.getSO_CreditLimit();
				return DocActionConstants.STATUS_Invalid;
			}
			if (X_C_BPartner.SOCREDITSTATUS_CreditHold.equals(bp.getSOCreditStatus()))
			{
				m_processMsg = ""@BPartnerCreditHold@ - @TotalOpenBalance@=""
					+ bp.getTotalOpenBalance()
					+ "", @SO_CreditLimit@="" + bp.getSO_CreditLimit();
				return DocActionConstants.STATUS_Invalid;
			}
		}

		m_justPrepared = true;
		if (!DOCACTION_Complete.equals(getDocAction()))
			setDocAction(DOCACTION_Complete);
		return DocActionConstants.STATUS_InProgress;
	}	//	prepareIt
"
org.compiere.model.MPayment.approveIt,MPayment.java,"boolean  approveIt()
	{
		log.info(toString());
		setIsApproved(true);
		return true;
	}	//	approveIt
"
org.compiere.model.MPayment.rejectIt,MPayment.java,"boolean rejectIt()
	{
		log.info(toString());
		setIsApproved(false);
		return true;
	}	//	rejectIt
"
org.compiere.model.MPayment.completeIt,MPayment.java,"String completeIt()
	{
		//	Re-Check
		if (!m_justPrepared)
		{
			String status = prepareIt();
			if (!DocActionConstants.STATUS_InProgress.equals(status))
				return status;
		}
		//	Implicit Approval
		if (!isApproved())
			approveIt();
		log.info(toString());

		//	Charge Handling
		if (getC_Charge_ID() != 0)
		{
			setIsAllocated(true);
		}
		else
		{
			allocateIt();	//	Create Allocation Records
			testAllocation();
		}

		//	Project update
		if (getC_Project_ID() != 0)
		{
		//	MProject project = new MProject(getCtx(), getC_Project_ID());
		}
		//	Update BP for Prepayments
		if ((getC_BPartner_ID() != 0) && (getC_Invoice_ID() == 0))
		{
			MBPartner bp = new MBPartner (getCtx(), getC_BPartner_ID(), get_Trx());
			bp.setTotalOpenBalance();
			bp.save();
		}

		//	Counter Doc
		MPayment counter = createCounterDoc();
		if (counter != null)
			m_processMsg += "" @CounterDoc@: @C_Payment_ID@="" + counter.getDocumentNo();

		//	User Validation
		String valid = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_AFTER_COMPLETE);
		if (valid != null)
		{
			m_processMsg = valid;
			return DocActionConstants.STATUS_Invalid;
		}
		//
		setProcessed(true);
		setDocAction(DOCACTION_Close);

		// Only payments not allocated to charges should affect the BP open balance
		if ((getC_BPartner_ID() != 0) && (getC_Charge_ID() == 0))
		{
			if(!updateBPOpenBalance(false)){
				return DocActionConstants.STATUS_Invalid;
			}
		}

		return DocActionConstants.STATUS_Completed;
	}	//	completeIt
"
org.compiere.model.MPayment.updateBPOpenBalance,MPayment.java,"boolean updateBPOpenBalance(boolean reverse)
	{
		MBPartner bp = new MBPartner (getCtx(), getC_BPartner_ID(), get_Trx());
		BigDecimal payAmt = MConversionRate.convertBase(getCtx(), getPayAmt(false).add(getDiscountAmt().add(getWriteOffAmt())),
			getC_Currency_ID(), getDateAcct(), 0, getAD_Client_ID(), getAD_Org_ID());
		if (payAmt == null)
		{
			m_processMsg = ""Could not convert C_Currency_ID="" + getC_Currency_ID()
				+ "" to base C_Currency_ID="" + MClient.get(Env.getCtx()).getC_Currency_ID();
			return false;
		}
		//	Total Balance
		BigDecimal newBalance = bp.getTotalOpenBalance(false);
		if (newBalance == null)
			newBalance = Env.ZERO;

		if(reverse)
			newBalance = newBalance.add(payAmt);
		else
			newBalance = newBalance.subtract(payAmt);

		if (isReceipt())
		{
			BigDecimal newCreditAmt = bp.getSO_CreditUsed();

			if(reverse)
			{
				if (newCreditAmt == null)
					newCreditAmt = payAmt;
				else
					newCreditAmt = newCreditAmt.add(payAmt);
			}
			else
			{
				if (newCreditAmt == null)
					newCreditAmt = payAmt.negate();
				else
					newCreditAmt = newCreditAmt.subtract(payAmt);
			}

			log.fine(""TotalOpenBalance="" + bp.getTotalOpenBalance(false) + ""("" + payAmt
				+ "", Credit="" + bp.getSO_CreditUsed() + ""->"" + newCreditAmt
				+ "", Balance="" + bp.getTotalOpenBalance(false) + "" -> "" + newBalance);
			bp.setSO_CreditUsed(newCreditAmt);
		}	//	SO
		else
		{
			log.fine(""Payment Amount ="" + getPayAmt(false) + ""("" + payAmt
				+ "") Balance="" + bp.getTotalOpenBalance(false) + "" -> "" + newBalance);
		}
		bp.setTotalOpenBalance(newBalance);
		bp.setSOCreditStatus();
		if (!bp.save(get_Trx()))
		{
			m_processMsg = ""Could not update Business Partner"";
			return false;
		}

		return true;
	}	// updateBPOpenBalance
"
org.compiere.model.MPayment.createCounterDoc,MPayment.java,"MPayment createCounterDoc()
	{
		//	Is this a counter doc ?
		if (getRef_Payment_ID() != 0)
			return null;

		//	Org Must be linked to BPartner
		MOrg org = MOrg.get(getCtx(), getAD_Org_ID());
		//jz int counterC_BPartner_ID = org.getLinkedC_BPartner_ID();
		int counterC_BPartner_ID = org.getLinkedC_BPartner_ID(get_Trx());
		if (counterC_BPartner_ID == 0)
			return null;
		//	Business Partner needs to be linked to Org
		//jz MBPartner bp = new MBPartner (getCtx(), getC_BPartner_ID(), null);
		MBPartner bp = new MBPartner (getCtx(), getC_BPartner_ID(), get_Trx());
		int counterAD_Org_ID = bp.getAD_OrgBP_ID_Int();
		if (counterAD_Org_ID == 0)
			return null;

		//jz MBPartner counterBP = new MBPartner (getCtx(), counterC_BPartner_ID, null);
		MBPartner counterBP = new MBPartner (getCtx(), counterC_BPartner_ID, get_Trx());
	//	MOrgInfo counterOrgInfo = MOrgInfo.get(getCtx(), counterAD_Org_ID);
		log.info(""Counter BP="" + counterBP.getName());

		//	Document Type
		int C_DocTypeTarget_ID = 0;
		MDocTypeCounter counterDT = MDocTypeCounter.getCounterDocType(getCtx(), getC_DocType_ID());
		if (counterDT != null)
		{
			log.fine(counterDT.toString());
			if (!counterDT.isCreateCounter() || !counterDT.isValid())
				return null;
			C_DocTypeTarget_ID = counterDT.getCounter_C_DocType_ID();
		}
		else	//	indirect
		{
			C_DocTypeTarget_ID = MDocTypeCounter.getCounterDocType_ID(getCtx(), getC_DocType_ID());
			log.fine(""Indirect C_DocTypeTarget_ID="" + C_DocTypeTarget_ID);
			if (C_DocTypeTarget_ID <= 0)
				return null;
		}

		//	Deep Copy
		MPayment counter = new MPayment (getCtx(), 0, get_Trx());
		counter.setAD_Org_ID(counterAD_Org_ID);
		counter.setC_BPartner_ID(counterBP.getC_BPartner_ID());
		counter.setIsReceipt(!isReceipt());
		counter.setC_DocType_ID(C_DocTypeTarget_ID);
		counter.setTrxType(getTrxType());
		counter.setTenderType(getTenderType());
		//
		counter.setPayAmt(getPayAmt());
		counter.setDiscountAmt(getDiscountAmt());
		counter.setTaxAmt(getTaxAmt());
		counter.setWriteOffAmt(getWriteOffAmt());
		counter.setIsOverUnderPayment (isOverUnderPayment());
		counter.setOverUnderAmt(getOverUnderAmt());
		counter.setC_Currency_ID(getC_Currency_ID());
		counter.setC_ConversionType_ID(getC_ConversionType_ID());
		//
		counter.setDateTrx (getDateTrx());
		counter.setDateAcct (getDateAcct());
		counter.setRef_Payment_ID(getC_Payment_ID());
		//
		String sql = ""SELECT C_BankAccount_ID FROM C_BankAccount ""
			+ ""WHERE C_Currency_ID=? AND AD_Org_ID IN (0,?) AND IsActive='Y' ""
			+ ""ORDER BY ASCII(IsDefault) DESC"";
		int C_BankAccount_ID = DB.getSQLValue(get_Trx(), sql, getC_Currency_ID(), counterAD_Org_ID);
		counter.setC_BankAccount_ID(C_BankAccount_ID);

		//	Refernces
		counter.setC_Activity_ID(getC_Activity_ID());
		counter.setC_Campaign_ID(getC_Campaign_ID());
		counter.setC_Project_ID(getC_Project_ID());
		counter.setUser1_ID(getUser1_ID());
		counter.setUser2_ID(getUser2_ID());
		counter.save(get_Trx());
		log.fine(counter.toString());
		setRef_Payment_ID(counter.getC_Payment_ID());

		//	Document Action
		if (counterDT != null)
		{
			if (counterDT.getDocAction() != null)
			{
				counter.setDocAction(counterDT.getDocAction());
				counter.processIt(counterDT.getDocAction());
				counter.setProcessing(false);
				counter.save(get_Trx());
			}
		}
		return counter;
	}	//	createCounterDoc
"
org.compiere.model.MPayment.allocateIt,MPayment.java,"boolean allocateIt()
	{
		//	Create invoice Allocation -	See also MCash.completeIt
		if (getC_Invoice_ID() != 0)
			return allocateInvoice();
		//	Invoices of a AP Payment Selection
		if (allocatePaySelection())
			return true;

		if (getC_Order_ID() != 0)
			return false;

		//	Allocate to multiple Payments based on entry
		MPaymentAllocate[] pAllocs = MPaymentAllocate.get(this);
		if (pAllocs.length == 0)
			return false;

		MAllocationHdr alloc = new MAllocationHdr(getCtx(), false,
			getDateAcct(), getC_Currency_ID(),
				Msg.translate(getCtx(), ""C_Payment_ID"")	+ "": "" + getDocumentNo(),
				get_Trx());
		alloc.setAD_Org_ID(getAD_Org_ID());
		if (!alloc.save())
		{
			log.severe(""P.Allocations not created"");
			return false;
		}
		//	Lines
		for (MPaymentAllocate pa : pAllocs)
		{
			MAllocationLine aLine = null;
			if (isReceipt())
				aLine = new MAllocationLine (alloc, pa.getAmount(),
					pa.getDiscountAmt(), pa.getWriteOffAmt(), pa.getOverUnderAmt());
			else
				aLine = new MAllocationLine (alloc, pa.getAmount().negate(),
					pa.getDiscountAmt().negate(), pa.getWriteOffAmt().negate(), pa.getOverUnderAmt().negate());
			aLine.setAD_Org_ID(pa.getAD_Org_ID());
			aLine.setDocInfo(pa.getC_BPartner_ID(), 0, pa.getC_Invoice_ID());
			aLine.setPaymentInfo(getC_Payment_ID(), 0);
			if (!aLine.save(get_Trx()))
				log.warning(""P.Allocations - line not saved"");
			else
			{
				pa.setC_AllocationLine_ID(aLine.getC_AllocationLine_ID());
				pa.save();
			}
		}
		//	Should start WF
		alloc.processIt(DocActionConstants.ACTION_Complete);
		m_processMsg = ""@C_AllocationHdr_ID@: "" + alloc.getDocumentNo();
		return alloc.save(get_Trx());
	}	//	allocateIt
"
org.compiere.model.MPayment.allocateInvoice,MPayment.java,"boolean allocateInvoice()
	{
		//	calculate actual allocation
		BigDecimal allocationAmt = getPayAmt();			//	underpayment
		MInvoice invoice = new MInvoice(getCtx(), getC_Invoice_ID(), null);
		MDocType docType = new MDocType(getCtx(), invoice.getC_DocType_ID(), null);
		if (!docType.isReturnTrx())
		{
			if ((getOverUnderAmt().signum() < 0) && (getPayAmt().signum() > 0))
				allocationAmt = allocationAmt.add(getOverUnderAmt());	//	overpayment (negative)
		}
		else
		{
			if ((getOverUnderAmt().signum() > 0) && (getPayAmt().signum() < 0))
				allocationAmt = allocationAmt.add(getOverUnderAmt());
		}


		MAllocationHdr alloc = new MAllocationHdr(getCtx(), false,
			getDateAcct(), getC_Currency_ID(),
			Msg.translate(getCtx(), ""C_Payment_ID"") + "": "" + getDocumentNo() + "" [1]"", get_Trx());

		alloc.setAD_Org_ID(getAD_Org_ID());
		if (!alloc.save())
		{
			log.log(Level.SEVERE, ""Could not create Allocation Hdr"");
			return false;
		}
		MAllocationLine aLine = null;
		if (isReceipt())
			aLine = new MAllocationLine (alloc, allocationAmt,
				getDiscountAmt(), getWriteOffAmt(), getOverUnderAmt());
		else  // negate() not required for DiscountAmt and WriteOffAmt since the getters already handle this
			aLine = new MAllocationLine (alloc, allocationAmt.negate(),
				getDiscountAmt(), getWriteOffAmt(), getOverUnderAmt().negate());
		aLine.setAD_Org_ID(getAD_Org_ID());
		aLine.setDocInfo(getC_BPartner_ID(), 0, getC_Invoice_ID());
		aLine.setC_Payment_ID(getC_Payment_ID());
		if (!aLine.save(get_Trx()))
		{
			log.log(Level.SEVERE, ""Could not create Allocation Line"");
			return false;
		}
		//	Should start WF
		alloc.processIt(DocActionConstants.ACTION_Complete);
		alloc.save(get_Trx());
		m_processMsg = ""@C_AllocationHdr_ID@: "" + alloc.getDocumentNo();

		//	Get Project from Invoice
		int C_Project_ID = DB.getSQLValue(get_Trx(),
			""SELECT MAX(C_Project_ID) FROM C_Invoice WHERE C_Invoice_ID=?"", getC_Invoice_ID());
		if ((C_Project_ID > 0) && (getC_Project_ID() == 0))
			setC_Project_ID(C_Project_ID);
		else if ((C_Project_ID > 0) && (getC_Project_ID() > 0) && (C_Project_ID != getC_Project_ID()))
			log.warning(""Invoice C_Project_ID="" + C_Project_ID
				+ "" <> Payment C_Project_ID="" + getC_Project_ID());
		return true;
	}	//	allocateInvoice
"
org.compiere.model.MPayment.allocatePaySelection,MPayment.java,"boolean allocatePaySelection()
	{
		MAllocationHdr alloc = new MAllocationHdr(getCtx(), false,
			getDateAcct(), getC_Currency_ID(),
			Msg.translate(getCtx(), ""C_Payment_ID"")	+ "": "" + getDocumentNo() + "" [n]"", get_Trx());
		alloc.setAD_Org_ID(getAD_Org_ID());

		String sql = ""SELECT psc.C_BPartner_ID, psl.C_Invoice_ID, psl.IsSOTrx, ""	//	1..3
			+ "" psl.PayAmt, psl.DiscountAmt, psl.DifferenceAmt, psl.OpenAmt ""
			+ ""FROM C_PaySelectionLine psl""
			+ "" INNER JOIN C_PaySelectionCheck psc ON (psl.C_PaySelectionCheck_ID=psc.C_PaySelectionCheck_ID) ""
			+ ""WHERE psc.C_Payment_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getC_Payment_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				int C_BPartner_ID = rs.getInt(1);
				int C_Invoice_ID = rs.getInt(2);
				if ((C_BPartner_ID == 0) && (C_Invoice_ID == 0))
					continue;
				boolean isSOTrx = ""Y"".equals(rs.getString(3));
				BigDecimal PayAmt = rs.getBigDecimal(4);
				BigDecimal DiscountAmt = rs.getBigDecimal(5);
				BigDecimal WriteOffAmt = rs.getBigDecimal(6);
				BigDecimal OpenAmt = rs.getBigDecimal(7);
				BigDecimal OverUnderAmt = OpenAmt.subtract(PayAmt)
					.subtract(DiscountAmt).subtract(WriteOffAmt);
				//
				if ((alloc.get_ID() == 0) && !alloc.save(get_Trx()))
				{
					log.log(Level.SEVERE, ""Could not create Allocation Hdr"");
					rs.close();
					pstmt.close();
					return false;
				}
				MAllocationLine aLine = null;
				if (isSOTrx)
					aLine = new MAllocationLine (alloc, PayAmt,
						DiscountAmt, WriteOffAmt, OverUnderAmt);
				else
					aLine = new MAllocationLine (alloc, PayAmt.negate(),
						DiscountAmt.negate(), WriteOffAmt.negate(), OverUnderAmt.negate());
				aLine.setAD_Org_ID(getAD_Org_ID());
				aLine.setDocInfo(C_BPartner_ID, 0, C_Invoice_ID);
				aLine.setC_Payment_ID(getC_Payment_ID());
				if (!aLine.save(get_Trx()))
					log.log(Level.SEVERE, ""Could not create Allocation Line"");
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

		//	Should start WF
		boolean ok = true;
		if (alloc.get_ID() == 0)
		{
			log.fine(""No Allocation created - C_Payment_ID=""
				+ getC_Payment_ID());
			ok = false;
		}
		else
		{
			alloc.processIt(DocActionConstants.ACTION_Complete);
			ok = alloc.save(get_Trx());
			m_processMsg = ""@C_AllocationHdr_ID@: "" + alloc.getDocumentNo();
		}
		return ok;
	}	//	allocatePaySelection
"
org.compiere.model.MPayment.deAllocate,MPayment.java,"void deAllocate()
	{
		if (getC_Order_ID() != 0)
			setC_Order_ID(0);
	//	if (getC_Invoice_ID() == 0)
	//		return;
		//	De-Allocate all
		MAllocationHdr[] allocations = MAllocationHdr.getOfPayment(getCtx(),
			getC_Payment_ID(), get_Trx());
		log.fine(""#"" + allocations.length);
		for (MAllocationHdr allocation : allocations)
		{
			if (DOCSTATUS_Reversed.equals(allocation.getDocStatus())
				|| DOCSTATUS_Voided.equals(allocation.getDocStatus()))
				continue;  // allocation is already voided/reversed
			allocation.set_Trx(get_Trx());
			allocation.setDocAction(DocActionConstants.ACTION_Reverse_Correct);
			allocation.processIt(DocActionConstants.ACTION_Reverse_Correct);
			allocation.save();
		}

		// 	Unlink (in case allocation did not get it)
		if (getC_Invoice_ID() != 0)
		{
			//	Invoice
			String sql = ""UPDATE C_Invoice ""
				+ ""SET C_Payment_ID = NULL, IsPaid='N' ""
				+ ""WHERE C_Invoice_ID="" + getC_Invoice_ID()
				+ "" AND C_Payment_ID="" + getC_Payment_ID();
			int no = DB.executeUpdate(sql, get_Trx());
			if (no != 0)
				log.fine(""Unlink Invoice #"" + no);
			//	Order
			sql = ""UPDATE C_Order o ""
				+ ""SET C_Payment_ID = NULL ""
				+ ""WHERE EXISTS (SELECT * FROM C_Invoice i ""
					+ ""WHERE o.C_Order_ID=i.C_Order_ID AND i.C_Invoice_ID="" + getC_Invoice_ID() + "")""
				+ "" AND C_Payment_ID="" + getC_Payment_ID();
			no = DB.executeUpdate(sql, get_Trx());
			if (no != 0)
				log.fine(""Unlink Order #"" + no);
		}
		//
		setC_Invoice_ID(0);
	}	//	deallocate
"
org.compiere.model.MPayment.voidIt,MPayment.java,"boolean voidIt()
	{
		log.info(toString());
		if (DOCSTATUS_Closed.equals(getDocStatus())
			|| DOCSTATUS_Reversed.equals(getDocStatus())
			|| DOCSTATUS_Voided.equals(getDocStatus()))
		{
			m_processMsg = ""Document Closed: "" + getDocStatus();
			setDocAction(DOCACTION_None);
			return false;
		}
		//	If on Bank Statement, don't void it - reverse it
		if (getC_BankStatementLine_ID() > 0)
			return reverseCorrectIt();

		//	Not Processed
		if (DOCSTATUS_Drafted.equals(getDocStatus())
			|| DOCSTATUS_Invalid.equals(getDocStatus())
			|| DOCSTATUS_InProgress.equals(getDocStatus())
			|| DOCSTATUS_Approved.equals(getDocStatus())
			|| DOCSTATUS_NotApproved.equals(getDocStatus()) )
		{
			addDescription(Msg.getMsg(getCtx(), ""Voided"") + "" ("" + getPayAmt() + "")"");
			setPayAmt(Env.ZERO);
			setDiscountAmt(Env.ZERO);
			setWriteOffAmt(Env.ZERO);
			setOverUnderAmt(Env.ZERO);
			setIsAllocated(false);
			//	Unlink & De-Allocate
			deAllocate();
		}
		else
			return reverseCorrectIt();

		//
		setProcessed(true);
		setDocAction(DOCACTION_None);
		return true;
	}	//	voidIt
"
org.compiere.model.MPayment.closeIt,MPayment.java,"boolean closeIt()
	{
		log.info(toString());
		setDocAction(DOCACTION_None);
		return true;
	}	//	closeIt
"
org.compiere.model.MPayment.reverseCorrectIt,MPayment.java,"boolean reverseCorrectIt()
	{
		log.info(toString());

		//	Std Period open?
		Timestamp dateAcct = getDateAcct();
		if (MPeriod.isOpen(this, null, dateAcct,
			isReceipt() ? MDocBaseType.DOCBASETYPE_ARReceipt : MDocBaseType.DOCBASETYPE_APPayment) != null)
			dateAcct = new Timestamp(System.currentTimeMillis());

		//	Auto Reconcile if not on Bank Statement
		boolean reconciled = false; //	getC_BankStatementLine_ID() == 0;

		//	Create Reversal
		MPayment reversal = new MPayment (getCtx(), 0, get_Trx());
		copyValues(this, reversal);
		reversal.setClientOrg(this);
		reversal.setC_Order_ID(0);
		reversal.setC_Invoice_ID(0);
		reversal.setDateAcct(dateAcct);
		//
		reversal.setDocumentNo(getDocumentNo() + REVERSE_INDICATOR);	//	indicate reversals
		reversal.setDocStatus(DOCSTATUS_Drafted);
		reversal.setDocAction(DOCACTION_Complete);
		//
		reversal.setPayAmt(getPayAmt().negate());
		reversal.setOverUnderAmt(getOverUnderAmt().negate());

		if ( reversal.isReceipt() )
		{
			reversal.setDiscountAmt(getDiscountAmt().negate());
			reversal.setWriteOffAmt(getWriteOffAmt().negate());
		}
		else
		{
			// no need to run negate() again since getters already handle this
			reversal.setDiscountAmt(getDiscountAmt());
			reversal.setWriteOffAmt(getWriteOffAmt());
		}

		//
		reversal.setIsAllocated(true);
		reversal.setIsReconciled(reconciled);	//	to put on bank statement
		reversal.setIsOnline(false);
		reversal.setIsApproved(true);
		reversal.setR_PnRef(null);
		reversal.setR_Result(null);
		reversal.setR_RespMsg(null);
		reversal.setR_AuthCode(null);
		reversal.setR_Info(null);
		reversal.setProcessing(false);
		reversal.setOProcessing(""N"");
		reversal.setProcessed(false);
		reversal.setPosted(false);
		reversal.setDescription(getDescription());
		reversal.addDescription(""{->"" + getDocumentNo() + "")"");
		reversal.save(get_Trx());
		//	Post Reversal
		if (!reversal.processIt(DocActionConstants.ACTION_Complete))
		{
			m_processMsg = ""Reversal ERROR: "" + reversal.getProcessMsg();
			return false;
		}
		reversal.closeIt();
		reversal.setDocStatus(DOCSTATUS_Reversed);
		reversal.setDocAction(DOCACTION_None);
		reversal.save(get_Trx());

		// Save reverse status and reversal document no in description to database
		// so that allocation reversal can access these
		setDocStatus(DOCSTATUS_Reversed);
		addDescription(""("" + reversal.getDocumentNo() + ""<-)"");
		save(get_Trx());

		//	Unlink & De-Allocate
		deAllocate();
		// Force reversal to be un-allocated to override status set by allocation reversal
		reversal.setIsAllocated(true);
		reversal.save(get_Trx());

		setIsReconciled (reconciled);
		setIsAllocated (true);
		//	Set Status
		setDocAction(DOCACTION_None);
		setProcessed(true);
		save(get_Trx());

		StringBuffer info = new StringBuffer (reversal.getDocumentNo());

		//	Update BPartner open balance if there is no charge
		/* if (getC_BPartner_ID() != 0 && getC_Charge_ID() == 0)
		{
			if(!updateBPOpenBalance(true))
				return false;
		} */

		m_processMsg = info.toString();
		return true;
	}	//	reverseCorrectionIt

	/**
	 * 	Get Bank Statement Line of payment or 0
	 *	@return id or 0
	 */
	private int getC_BankStatementLine_ID()
	{
		String sql = ""SELECT C_BankStatementLine_ID FROM C_BankStatementLine WHERE C_Payment_ID=?"";
		int id = DB.getSQLValue(get_Trx(), sql, getC_Payment_ID());
		if (id < 0)
			return 0;
		return id;
	}	//	getC_BankStatementLine_ID

	/**
	 * 	Reverse Accrual - none
	 * 	@return true if success
	 */
	public boolean reverseAccrualIt()
	{
		log.info(toString());
		return false;
	}	//	reverseAccrualIt

	/**
	 * 	Re-activate
	 * 	@return true if success
	 */
	public boolean reActivateIt()
	{
		log.info(toString());
		if (reverseCorrectIt())
			return true;
		return false;
	}	//	reActivateIt

	/**
	 * 	String Representation
	 *	@return info
	 */
	@Override
	public String toString ()
	{
		StringBuffer sb = new StringBuffer (""MPayment["");
		sb.append(get_ID()).append(""-"").append(getDocumentNo())
			.append("",Receipt="").append(isReceipt())
			.append("",PayAmt="").append(getPayAmt())
			.append("",Discount="").append(getDiscountAmt())
			.append("",WriteOff="").append(getWriteOffAmt())
			.append("",OverUnder="").append(getOverUnderAmt());
		return sb.toString ();
	}	//	toString

	/**
	 * 	Get Document Info
	 *	@return document info (untranslated)
	 */
	public String getDocumentInfo()
	{
		MDocType dt = MDocType.get(getCtx(), getC_DocType_ID());
		return dt.getName() + "" "" + getDocumentNo();
	}	//	getDocumentInfo

	/**
	 * 	Create PDF
	 *	@return File or null
	 */
	public File createPDF ()
	{
		try
		{
			File temp = File.createTempFile(get_TableName()+get_ID()+""_"", "".pdf"");
			return createPDF (temp);
		}
		catch (Exception e)
		{
			log.severe(""Could not create PDF - "" + e.getMessage());
		}
		return null;
	}	//	getPDF

	/**
	 * 	Create PDF file
	 *	@param file output file
	 *	@return file if success
	 */
	public File createPDF (File file)
	{
	//	ReportEngine re = ReportEngine.get (getCtx(), ReportEngine.PAYMENT, getC_Payment_ID());
	//	if (re == null)
			return null;
	//	return re.getPDF(file);
	}	//	createPDF


	/*************************************************************************
	 * 	Get Summary
	 *	@return Summary of Document
	 */
	public String getSummary()
	{
		StringBuffer sb = new StringBuffer();
		sb.append(getDocumentNo());
		//	: Total Lines = 123.00 (#1)
		sb.append("": "")
			.append(Msg.translate(getCtx(),""PayAmt"")).append(""="").append(getPayAmt())
			.append("","").append(Msg.translate(getCtx(),""WriteOffAmt"")).append(""="").append(getWriteOffAmt());
		//	 - Description
		if ((getDescription() != null) && (getDescription().length() > 0))
			sb.append("" - "").append(getDescription());
		return sb.toString();
	}	//	getSummary

	/**
	 * 	Get Process Message
	 *	@return clear text error message
	 */
	public String getProcessMsg()
	{
		return m_processMsg;
	}	//	getProcessMsg

	/**
	 * 	Get Document Owner (Responsible)
	 *	@return AD_User_ID
	 */
	public int getDoc_User_ID()
	{
		return getCreatedBy();
	}	//	getDoc_User_ID

	/**
	 * 	Get Document Approval Amount
	 *	@return amount payment(AP) or write-off(AR)
	 */
	public BigDecimal getApprovalAmt()
	{
		if (isReceipt())
			return getWriteOffAmt();
		return getPayAmt();
	}	//	getApprovalAmt

}   //  MPayment
"
org.compiere.model.MPayment.getC_BankStatementLine_ID,MPayment.java,"int getC_BankStatementLine_ID()
	{
		String sql = ""SELECT C_BankStatementLine_ID FROM C_BankStatementLine WHERE C_Payment_ID=?"";
		int id = DB.getSQLValue(get_Trx(), sql, getC_Payment_ID());
		if (id < 0)
			return 0;
		return id;
	}	//	getC_BankStatementLine_ID
"
org.compiere.model.MPayment.reverseAccrualIt,MPayment.java,"boolean reverseAccrualIt()
	{
		log.info(toString());
		return false;
	}	//	reverseAccrualIt
"
org.compiere.model.MPayment.reActivateIt,MPayment.java,"boolean reActivateIt()
	{
		log.info(toString());
		if (reverseCorrectIt())
			return true;
		return false;
	}	//	reActivateIt
"
org.compiere.model.MPayment.toString,MPayment.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MPayment["");
		sb.append(get_ID()).append(""-"").append(getDocumentNo())
			.append("",Receipt="").append(isReceipt())
			.append("",PayAmt="").append(getPayAmt())
			.append("",Discount="").append(getDiscountAmt())
			.append("",WriteOff="").append(getWriteOffAmt())
			.append("",OverUnder="").append(getOverUnderAmt());
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MPayment.getDocumentInfo,MPayment.java,"String getDocumentInfo()
	{
		MDocType dt = MDocType.get(getCtx(), getC_DocType_ID());
		return dt.getName() + "" "" + getDocumentNo();
	}	//	getDocumentInfo
"
org.compiere.model.MPayment.createPDF,MPayment.java,"File createPDF ()
	{
		try
		{
			File temp = File.createTempFile(get_TableName()+get_ID()+""_"", "".pdf"");
			return createPDF (temp);
		}
		catch (Exception e)
		{
			log.severe(""Could not create PDF - "" + e.getMessage());
		}
		return null;
	}	//	getPDF
"
org.compiere.model.MPayment.createPDF,MPayment.java,"File createPDF (File file)
	{
	//	ReportEngine re = ReportEngine.get (getCtx(), ReportEngine.PAYMENT, getC_Payment_ID());
	//	if (re == null)
			return null;
	//	return re.getPDF(file);
	}	//	createPDF
"
org.compiere.model.MPayment.getSummary,MPayment.java,"String getSummary()
	{
		StringBuffer sb = new StringBuffer();
		sb.append(getDocumentNo());
		//	: Total Lines = 123.00 (#1)
		sb.append("": "")
			.append(Msg.translate(getCtx(),""PayAmt"")).append(""="").append(getPayAmt())
			.append("","").append(Msg.translate(getCtx(),""WriteOffAmt"")).append(""="").append(getWriteOffAmt());
		//	 - Description
		if ((getDescription() != null) && (getDescription().length() > 0))
			sb.append("" - "").append(getDescription());
		return sb.toString();
	}	//	getSummary
"
org.compiere.model.MPayment.getProcessMsg,MPayment.java,"String getProcessMsg()
	{
		return m_processMsg;
	}	//	getProcessMsg
"
org.compiere.model.MPayment.getDoc_User_ID,MPayment.java,"int getDoc_User_ID()
	{
		return getCreatedBy();
	}	//	getDoc_User_ID
"
org.compiere.model.MPayment.getApprovalAmt,MPayment.java,"BigDecimal getApprovalAmt()
	{
		if (isReceipt())
			return getWriteOffAmt();
		return getPayAmt();
	}	//	getApprovalAmt
"
org.compiere.model.MPaymentAllocate.get,MPaymentAllocate.java,"MPaymentAllocate[] get (MPayment parent)
	{
		ArrayList<MPaymentAllocate> list = new ArrayList<MPaymentAllocate>();
		String sql = ""SELECT * FROM C_PaymentAllocate WHERE C_Payment_ID=? AND IsActive='Y'"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, parent.getC_Payment_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MPaymentAllocate (parent.getCtx(), rs, parent.get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		MPaymentAllocate[] retValue = new MPaymentAllocate[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MPaymentAllocate.setC_Invoice_ID,MPaymentAllocate.java,"void setC_Invoice_ID (int C_Invoice_ID)
	{
		super.setC_Invoice_ID (C_Invoice_ID);
		m_invoice = null;
	}	//	setC_Invoice_ID
"
org.compiere.model.MPaymentAllocate.getInvoice,MPaymentAllocate.java,"MInvoice getInvoice()
	{
		if (m_invoice == null && getC_Invoice_ID() != 0)
			m_invoice = new MInvoice(getCtx(), getC_Invoice_ID(), get_Trx());
		return m_invoice;
	}	//	getInvoice
"
org.compiere.model.MPaymentAllocate.getC_BPartner_ID,MPaymentAllocate.java,"int getC_BPartner_ID()
	{
		if (m_invoice == null)
			getInvoice();
		if (m_invoice == null)
			return 0;
		return m_invoice.getC_BPartner_ID();
	}	//	getC_BPartner_ID
"
org.compiere.model.MPaymentAllocate.setC_Invoice_ID,MPaymentAllocate.java,"void setC_Invoice_ID (String oldC_Invoice_ID, 
			String newC_Invoice_ID, int windowNo) throws Exception
	{
		if (newC_Invoice_ID == null || newC_Invoice_ID.length() == 0)
			return;
		int C_Invoice_ID = Integer.parseInt(newC_Invoice_ID);
		setC_Invoice_ID(C_Invoice_ID);
		if (C_Invoice_ID == 0)
			return;
		//	Check Payment
		int C_Payment_ID = getC_Payment_ID();
		MPayment payment = new MPayment (getCtx(), C_Payment_ID, null);
		if (payment.getC_Charge_ID() != 0 
			|| payment.getC_Invoice_ID() != 0 
			|| payment.getC_Order_ID() != 0)
		{
			p_changeVO.addError(Msg.getMsg(getCtx(), ""PaymentIsAllocated""));
			return;
		}

		setDiscountAmt(Env.ZERO);
		setWriteOffAmt(Env.ZERO);
		setOverUnderAmt(Env.ZERO);

		int C_InvoicePaySchedule_ID = 0;
		if (getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_Invoice_ID"") == C_Invoice_ID
			&& getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_InvoicePaySchedule_ID"") != 0)
			C_InvoicePaySchedule_ID = getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_InvoicePaySchedule_ID"");

		//  Payment Date
		Timestamp ts = new Timestamp(getCtx().getContextAsTime(windowNo, ""DateTrx""));
		if (ts == null)
			ts = new Timestamp(System.currentTimeMillis());
		//
		String sql = ""SELECT C_BPartner_ID,C_Currency_ID,""		//	1..2
			+ "" invoiceOpen(C_Invoice_ID, ?),""					//	3		#1
			+ "" invoiceDiscount(C_Invoice_ID,?,?), IsSOTrx ""	//	4..5	#2/3
			+ ""FROM C_Invoice WHERE C_Invoice_ID=?"";			//			#4
		int C_Currency_ID = 0;		//	Invoice Currency
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_InvoicePaySchedule_ID);
			pstmt.setTimestamp(2, ts);
			pstmt.setInt(3, C_InvoicePaySchedule_ID);
			pstmt.setInt(4, C_Invoice_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
			//	setC_BPartner_ID(rs.getInt(1));
				C_Currency_ID = rs.getInt(2);					//	Set Invoice Currency
			//	setC_Currency_ID(C_Currency_ID);
				//
				BigDecimal InvoiceOpen = rs.getBigDecimal(3);	//	Set Invoice Open Amount
				if (InvoiceOpen == null)
					InvoiceOpen = Env.ZERO;
				BigDecimal DiscountAmt = rs.getBigDecimal(4);	//	Set Discount Amt
				if (DiscountAmt == null)
					DiscountAmt = Env.ZERO;
				MInvoice invoice = new MInvoice(getCtx(), C_Invoice_ID, null);
				MDocType docType = new MDocType(getCtx(), invoice.getC_DocType_ID(), null);
				if (docType.isReturnTrx())
				{
					// Adjust discount amount for credit memos. Invoice Open Amt is already adjusted.
					DiscountAmt = DiscountAmt.negate();
				}
				//
				setInvoiceAmt(InvoiceOpen);
				setAmount(InvoiceOpen.subtract(DiscountAmt));
				setDiscountAmt(DiscountAmt);
				//  reset as dependent fields get reset
				getCtx().setContext(windowNo, ""C_Invoice_ID"", C_Invoice_ID);
				//IsSOTrx, Project
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		//	Check Invoice/Payment Currency - may not be an issue(??)
		if (C_Currency_ID != 0)
		{
			int currency_ID = getCtx().getContextAsInt(windowNo, ""C_Currency_ID"");
			if (currency_ID != C_Currency_ID)
			{
				String msg = Msg.parseTranslation(getCtx(), ""@C_Currency_ID@: @C_Invoice_ID@ <> @C_Payment_ID@"");
				p_changeVO.addError(msg);
			}
		}		
	}	//	setC_Invoice_ID
"
org.compiere.model.MPaymentAllocate.setAmount,MPaymentAllocate.java,"void setAmount (String oldAmount, 
			String newAmount, int windowNo) throws Exception
	{
		if (newAmount == null || newAmount.length() == 0)
			return;
		BigDecimal Amount = PO.convertToBigDecimal(newAmount);
		setAmount(Amount);
		checkAmt(windowNo, ""PayAmt"");
	}	//	setPayAmt
"
org.compiere.model.MPaymentAllocate.setDiscountAmt,MPaymentAllocate.java,"void setDiscountAmt (String oldDiscountAmt, 
			String newDiscountAmt, int windowNo) throws Exception
	{
		if (newDiscountAmt == null || newDiscountAmt.length() == 0)
			return;
		BigDecimal DiscountAmt = PO.convertToBigDecimal(newDiscountAmt);
		setDiscountAmt(DiscountAmt);
		checkAmt(windowNo, ""DiscountAmt"");
	}	//	setDiscountAmt
"
org.compiere.model.MPaymentAllocate.setOverUnderAmt,MPaymentAllocate.java,"void setOverUnderAmt (String oldOverUnderAmt, 
			String newOverUnderAmt, int windowNo) throws Exception
	{
		if (newOverUnderAmt == null || newOverUnderAmt.length() == 0)
			return;
		BigDecimal OverUnderAmt = PO.convertToBigDecimal(newOverUnderAmt);
		setOverUnderAmt(OverUnderAmt);
		checkAmt(windowNo, ""OverUnderAmt"");
	}	//	setOverUnderAmt
"
org.compiere.model.MPaymentAllocate.setWriteOffAmt,MPaymentAllocate.java,"void setWriteOffAmt (String oldWriteOffAmt, 
			String newWriteOffAmt, int windowNo) throws Exception
	{
		if (newWriteOffAmt == null || newWriteOffAmt.length() == 0)
			return;
		BigDecimal WriteOffAmt = PO.convertToBigDecimal(newWriteOffAmt);
		setWriteOffAmt(WriteOffAmt);
		checkAmt(windowNo, ""WriteOffAmt"");
	}	//	setWriteOffAmt
"
org.compiere.model.MPaymentAllocate.checkAmt,MPaymentAllocate.java,"void checkAmt (int windowNo, String columnName)
	{
		int C_Invoice_ID = getC_Invoice_ID();
		//	No Payment
		if (C_Invoice_ID == 0)
			return;

		//	Get Info from Tab
		BigDecimal Amount = getAmount();
		BigDecimal DiscountAmt = getDiscountAmt();
		BigDecimal WriteOffAmt = getWriteOffAmt();
		BigDecimal OverUnderAmt = getOverUnderAmt();
		BigDecimal InvoiceAmt = getInvoiceAmt();
		log.fine(""Amt="" + Amount + "", Discount="" + DiscountAmt
			+ "", WriteOff="" + WriteOffAmt + "", OverUnder="" + OverUnderAmt
			+ "", Invoice="" + InvoiceAmt);

		//  PayAmt - calculate write off
		if (columnName.equals(""Amount""))
		{
			WriteOffAmt = InvoiceAmt.subtract(Amount).subtract(DiscountAmt).subtract(OverUnderAmt);
			setWriteOffAmt(WriteOffAmt);
		}
		else    //  calculate Amount
		{
			Amount = InvoiceAmt.subtract(DiscountAmt).subtract(WriteOffAmt).subtract(OverUnderAmt);
			setAmount(Amount);
		}
	}	//	checkAmt
"
org.compiere.model.MPaymentAllocate.beforeSave,MPaymentAllocate.java,"boolean beforeSave (boolean newRecord)
	{
		MPayment payment = new MPayment (getCtx(), getC_Payment_ID(), get_Trx());
		if ((newRecord || is_ValueChanged(""C_Invoice_ID""))
			&& (payment.getC_Charge_ID() != 0 
				|| payment.getC_Invoice_ID() != 0 
				|| payment.getC_Order_ID() != 0))
		{
			log.saveError(""PaymentIsAllocated"", """");
			return false;
		}
		
		BigDecimal check = getAmount()
			.add(getDiscountAmt())
			.add(getWriteOffAmt())
			.add(getOverUnderAmt());
		if (check.compareTo(getInvoiceAmt()) != 0)
		{
			log.saveError(""Error"", Msg.parseTranslation(getCtx(), 
				""@InvoiceAmt@("" + getInvoiceAmt()
				+ "") <> @Totals@("" + check + "")""));
			return false;
		}
		
		//	Org
		if (newRecord || is_ValueChanged(""C_Invoice_ID""))
		{
			getInvoice();
			if (m_invoice != null)
				setAD_Org_ID(m_invoice.getAD_Org_ID());
		}
		
		return true;
	}	//	beforeSave
"
org.compiere.model.NaturalAccountMap.parseFile,NaturalAccountMap.java,"String parseFile (File file)
	{
		log.config(file.getAbsolutePath());
		String line = null;
		try
		{
			//  see FileImport
			BufferedReader in = new BufferedReader(new FileReader(file), 10240);
			//	not safe see p108 Network pgm
			String errMsg = """";

			//  read lines
			while ((line = in.readLine()) != null && errMsg.length() == 0)
				errMsg = parseLine(line);
			line = """";
			in.close();

			//  Error
			if (errMsg.length() != 0)
				return errMsg;
		}
		catch (Exception ioe)
		{
			String s = ioe.getLocalizedMessage();
			if (s == null || s.length() == 0)
				s = ioe.toString();
			return ""Parse Error: Line="" + line + "" - "" + s;
		}
		return """";
	}   //  parse
"
org.compiere.model.NaturalAccountMap.parseLine,NaturalAccountMap.java,"String parseLine (String line) throws Exception
	{
		log.config(line);

		//  Fields with ',' are enclosed in ""
		StringBuffer newLine = new StringBuffer();
		StringTokenizer st = new StringTokenizer(line, ""\"""", false);
		newLine.append(st.nextToken());         //  first part
		while (st.hasMoreElements())
		{
			String s = st.nextToken();          //  enclosed part
			newLine.append(s.replace(',',' ')); //  remove ',' with space
			if (st.hasMoreTokens())
				newLine.append(st.nextToken()); //  unenclosed
		}
		//  add space at the end        - tokenizer does not count empty fields
		newLine.append("" "");

		//  Parse Line - replace "",,"" with "", ,""    - tokenizer does not count empty fields
		String pLine = Util.replace(newLine.toString(), "",,"", "", ,"");
		pLine = Util.replace(pLine, "",,"", "", ,"");
		st = new StringTokenizer(pLine, "","", false);
		//  All fields there ?
		if (st.countTokens() == 1)
		{
			log.log(Level.SEVERE, ""Ignored: Require ',' as separator - "" + pLine);
			return """";
		}
		if (st.countTokens() < 9)
		{
			log.log(Level.SEVERE, ""Ignored: FieldNumber wrong: "" + st.countTokens() + "" - "" + pLine);
			return """";
		}

		//  Fill variables
		String Value = null, Name = null, Description = null,
			AccountType = null, AccountSign = null, IsDocControlled = null,
			IsSummary = null, Default_Account = null;
		//
		for (int i = 0; i < 8 && st.hasMoreTokens(); i++)
		{
			String s = st.nextToken().trim();
			//  Ignore, if is it header line
			if (s.startsWith(""["") && s.endsWith(""]""))
				return """";
			if (s == null)
				s = """";
			//
			if (i == 0)			//	A - Value
				Value = s;
			else if (i == 1)	//	B - Name
				Name = s;
			else if (i == 2)	//	C - Description
				Description = s;
			else if (i == 3)	//	D - Type
				AccountType = s.length()>0 ? String.valueOf(s.charAt(0)) : ""E"";
			else if (i == 4)	//	E - Sign
				AccountSign = s.length()>0 ? String.valueOf(s.charAt(0)) : ""N"";
			else if (i == 5)	//	F - DocControlled
				IsDocControlled = s.length()>0 ? String.valueOf(s.charAt(0)) : ""N"";
			else if (i == 6)	//	G - IsSummary
				IsSummary = s.length()>0 ? String.valueOf(s.charAt(0)) : ""N"";
			else if (i == 7)	//	H - Default_Account
				Default_Account = s;
		}

		//	Ignore if Value & Name are empty (no error message)
		if ((Value == null || Value.length() == 0) && (Name == null || Name.length() == 0))
			return """";

		//  Default Account may be blank
		if (Default_Account == null || Default_Account.length() == 0)
		//	Default_Account = String.valueOf(s_keyNo++);
			return """";

		//	No Summary Account
		if (IsSummary == null || IsSummary.length() == 0)
			IsSummary = ""N"";
		if (!IsSummary.equals(""N""))
			return """";
			
		//  Validation
		if (AccountType == null || AccountType.length() == 0)
			AccountType = ""E"";
			
		if (AccountSign == null || AccountSign.length() == 0)
			AccountSign = ""N"";
		if (IsDocControlled == null || IsDocControlled.length() == 0)
			IsDocControlled = ""N"";


	//	log.config( ""Value="" + Value + "", AcctType="" + AccountType
	//		+ "", Sign="" + AccountSign + "", Doc="" + docControlled
	//		+ "", Summary="" + summary + "" - "" + Name + "" - "" + Description);

		try
		{
			//	Try to find - allows to use same natutal account for multiple default accounts 
			MElementValue na = m_valueMap.get(Value);
			if (na == null)
			{
				//  Create Account - save later
				na = new MElementValue(m_ctx, Value, Name, Description,
					AccountType, AccountSign,
					IsDocControlled.toUpperCase().startsWith(""Y""), 
					IsSummary.toUpperCase().startsWith(""Y""), m_trxName);
				m_valueMap.put(Value, na);
			}
			
			//  Add to Cache
			put(Default_Account.toUpperCase(), na);
		}
		catch (Exception e)
		{
			return (e.getMessage());
		}

		return """";
	}   //  parseLine
"
org.compiere.model.NaturalAccountMap.saveAccounts,NaturalAccountMap.java,"boolean saveAccounts (int AD_Client_ID, int AD_Org_ID, int C_Element_ID)
	{
		log.config("""");
		Iterator<MElementValue> iterator = this.values().iterator();
		while (iterator.hasNext())
		{
			MElementValue na = iterator.next();
			na.setAD_Client_ID(AD_Client_ID);
			na.setAD_Org_ID(AD_Org_ID);
			na.setC_Element_ID(C_Element_ID);
			if (!na.save())
				return false;
		}
		return true;
	}   //  saveAccounts
"
org.compiere.model.NaturalAccountMap.getC_ElementValue_ID,NaturalAccountMap.java,"int getC_ElementValue_ID (String key)
	{
		MElementValue na = this.get(null, key);
		if (na == null)
			return 0;
		return na.getC_ElementValue_ID();
	}   //  getC_ElementValue_ID
"
org.compiere.model.MPeriod.get,MPeriod.java,"MPeriod get (Ctx ctx, int C_Period_ID)
	{
		Integer key = Integer.valueOf (C_Period_ID);
		MPeriod retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		//
		retValue = new MPeriod (ctx, C_Period_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	} 	//	get
"
org.compiere.model.MPeriod.getOfOrg,MPeriod.java,"MPeriod getOfOrg (Ctx ctx, int AD_Org_ID,  Timestamp DateAcct)
	{
		if (DateAcct == null)
			return null;
		int C_Calendar_ID = 0;
		if (AD_Org_ID != 0)
		{
			MOrgInfo info = MOrgInfo.get(ctx, AD_Org_ID, null);
			C_Calendar_ID = info.getC_Calendar_ID();
		}
		if (C_Calendar_ID == 0)
		{
			MClientInfo cInfo = MClientInfo.get(ctx);
			C_Calendar_ID = cInfo.getC_Calendar_ID();
		}

		//	Search in Cache first
		Iterator<MPeriod> it = s_cache.values().iterator();
		while (it.hasNext())
		{
			MPeriod period = it.next();
			if (period.getC_Calendar_ID() == C_Calendar_ID 
					&& period.isStandardPeriod() 
					&& period.isInPeriod(DateAcct))
				return period;
		}
		
		//	Get it from DB
		MPeriod retValue = null;
		String sql = ""SELECT * ""
			+ ""FROM C_Period ""
			+ ""WHERE C_Year_ID IN ""
				+ ""(SELECT C_Year_ID FROM C_Year WHERE C_Calendar_ID=?) ""
			+ "" AND ? BETWEEN TRUNC(StartDate,'DD') AND TRUNC(EndDate,'DD')""
			+ "" AND IsActive='Y' AND PeriodType='S'"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, C_Calendar_ID);
			pstmt.setTimestamp (2, TimeUtil.getDay(DateAcct));
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				MPeriod period = new MPeriod(ctx, rs, null);
				Integer key = Integer.valueOf (period.getC_Period_ID());
				s_cache.put (key, period);
				if (period.isStandardPeriod())
					retValue = period;
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (SQLException e)
		{
			s_log.log(Level.SEVERE, ""DateAcct="" + DateAcct, e);
		}
		if (retValue == null)
			s_log.warning(""No Standard Period for "" + DateAcct 
				+ "" (C_Calendar_ID="" + C_Calendar_ID + "")"");
		return retValue;
	}	//	get
"
org.compiere.model.MPeriod.getOfCalendar,MPeriod.java,"MPeriod getOfCalendar (Ctx ctx, int C_Calendar_ID, Timestamp DateAcct)
	{
		if (DateAcct == null)
		{
			s_log.warning(""No DateAcct"");
			return null;
		}
		if (C_Calendar_ID == 0)
		{
			s_log.warning(""No Calendar"");
			return null;
		}
		//	Search in Cache first
		Iterator<MPeriod> it = s_cache.values().iterator();
		while (it.hasNext())
		{
			MPeriod period = it.next();
			if (period.getC_Calendar_ID() == C_Calendar_ID 
				&& period.isStandardPeriod() 
				&& period.isInPeriod(DateAcct))
				return period;
		}
		
		//	Get it from DB
		MPeriod retValue = null;
		String sql = ""SELECT * FROM C_Period ""
			+ ""WHERE C_Year_ID IN ""
				+ ""(SELECT C_Year_ID FROM C_Year WHERE C_Calendar_ID=?)""
			+ "" AND ? BETWEEN TRUNC(StartDate,'DD') AND TRUNC(EndDate,'DD')""
			+ "" AND IsActive='Y' AND PeriodType='S'"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, C_Calendar_ID);
			pstmt.setTimestamp (2, TimeUtil.getDay(DateAcct));
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				MPeriod period = new MPeriod(ctx, rs, null);
				Integer key = Integer.valueOf (period.getC_Period_ID());
				s_cache.put (key, period);
				if (period.isStandardPeriod())
					retValue = period;
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (SQLException e)
		{
			s_log.log(Level.SEVERE, ""DateAcct="" + DateAcct, e);
		}
		if (retValue == null)
			s_log.warning(""No Standard Period for "" + DateAcct 
				+ "" (C_Calendar_ID="" + C_Calendar_ID + "")"");
		return retValue;
	}	//	get
"
org.compiere.model.MPeriod.getC_Period_ID,MPeriod.java,"int getC_Period_ID (Ctx ctx, int AD_Org_ID, Timestamp DateAcct)
	{
		MPeriod period = getOfOrg(ctx, AD_Org_ID, DateAcct);
		if (period == null)
			return 0;
		return period.getC_Period_ID();
	}	//	getC_Period_ID
"
org.compiere.model.MPeriod.isOpenOld,MPeriod.java,"boolean isOpenOld (Ctx ctx, Timestamp DateAcct, String DocBaseType)
	{
		if (DateAcct == null)
		{
			s_log.warning(""No DateAcct"");
			return false;
		}
		if (DocBaseType == null)
		{
			s_log.warning(""No DocBaseType"");
			return false;
		}
		MPeriod period = MPeriod.getOfOrg(ctx, 0, DateAcct);
		if (period == null)
		{
			s_log.warning(""No Period for "" + DateAcct + "" ("" + DocBaseType + "")"");
			return false;
		}
		String error = period.isOpen(DocBaseType, DateAcct);
		if (error != null)
			s_log.warning(error + "" - "" + period.getName());
		return error == null;
	}	//	isOpen
"
org.compiere.model.MPeriod.isOpen,MPeriod.java,"String isOpen (PO header, PO[] lines, Timestamp DateAcct, String DocBaseType)
	{
		Ctx ctx = header.getCtx();
		if (DateAcct == null)
			return ""@NotFound@ @DateAcct@"";
		if (DocBaseType == null)
			return ""@NotFound@ @DocBaseType@"";
		
		MAcctSchema as = MClient.get(header.getCtx(), 
			header.getAD_Client_ID()).getAcctSchema();
		if (as == null)
			return ""@NotFound@ @C_AcctSchema_ID@ for AD_Client_ID="" + header.getAD_Client_ID();
		if (as.isAutoPeriodControl())
		{
			if (as.isAutoPeriodControlOpen(DateAcct))
				return null;
			else
				return ""@PeriodClosed@ - @AutoPeriodControl@"";
		}
		
		//	Get All Orgs
		ArrayList<Integer> orgs = new ArrayList<Integer>();
		orgs.add(header.getAD_Org_ID());
		if (lines != null)
		{
			for (PO element : lines) {
				int AD_Org_ID = element.getAD_Org_ID();
				if (!orgs.contains(AD_Org_ID))
					orgs.add(AD_Org_ID);
			}
		}
		//	Get all Calendars in line with Organizations
		MClientInfo cInfo = MClientInfo.get(ctx, header.getAD_Client_ID(), null);
		ArrayList<Integer> orgCalendars = new ArrayList<Integer>();
		ArrayList<Integer> calendars = new ArrayList<Integer>();
		for (int i = 0; i < orgs.size(); i++)
		{
			MOrgInfo info = MOrgInfo.get(ctx, orgs.get(i), null);
			int C_Calendar_ID = info.getC_Calendar_ID();
			if (C_Calendar_ID == 0)
				C_Calendar_ID = cInfo.getC_Calendar_ID();
			orgCalendars.add(C_Calendar_ID);
			if (!calendars.contains(C_Calendar_ID))
				calendars.add(C_Calendar_ID);
		}
		//	Should not happen
		if (calendars.size() == 0)
			return ""@NotFound@ @C_Calendar_ID@"";
		
		//	For all Calendars get Periods
		for (int i = 0; i < calendars.size(); i++)
		{
			int C_Calendar_ID = calendars.get(i);
			MPeriod period = MPeriod.getOfCalendar (ctx, C_Calendar_ID, DateAcct);
			//	First Org for Calendar
			int AD_Org_ID = 0;
			for (int j = 0; j < orgCalendars.size(); j++)
			{
				if (orgCalendars.get(j) == C_Calendar_ID)
				{
					AD_Org_ID = orgs.get(j);
					break;
				}
			}
			if (period == null)
			{
				MCalendar cal = MCalendar.get(ctx, C_Calendar_ID);
				String date = DisplayType.getDateFormat(DisplayTypeConstants.Date)
					.format(DateAcct);
				if (cal != null)
					return ""@NotFound@ @C_Period_ID@: "" + date
						+ "" - "" + MOrg.get(ctx, AD_Org_ID).getName() 
						+ "" -> "" + cal.getName();
				else
					return ""@NotFound@ @C_Period_ID@: "" + date
						+ "" - "" + MOrg.get(ctx, AD_Org_ID).getName() 
						+ "" -> C_Calendar_ID="" + C_Calendar_ID;
			}
			String error = period.isOpen(DocBaseType, DateAcct);
			if (error != null)
				return error
					+ "" - "" + MOrg.get(ctx, AD_Org_ID).getName()
					+ "" -> "" + MCalendar.get(ctx, C_Calendar_ID).getName();
		}
		return null;	//	open
	}	//	isOpen
"
org.compiere.model.MPeriod.isClosed,MPeriod.java,"boolean isClosed (Ctx ctx, Timestamp DateAcct)
	{
		if (DateAcct == null)
			return false;
		MAcctSchema as = MClient.get(ctx, ctx.getAD_Client_ID())
			.getAcctSchema();
		if (as.isAutoPeriodControl())
			return !as.isAutoPeriodControlOpen(DateAcct);
		
		//	Get all Calendars in line with Organizations
		MClientInfo cInfo = MClientInfo.get(ctx, ctx.getAD_Client_ID(), null);
		ArrayList<Integer> calendars = new ArrayList<Integer>();
		MOrg[] orgs = MOrg.getOfClient(cInfo);
		for (int i = 0; i < orgs.length; i++)
		{
			MOrgInfo info = MOrgInfo.get(ctx, orgs[i].getAD_Org_ID(), null);
			int C_Calendar_ID = info.getC_Calendar_ID();
			if (C_Calendar_ID == 0)
				C_Calendar_ID = cInfo.getC_Calendar_ID();
			if (!calendars.contains(C_Calendar_ID))
				calendars.add(C_Calendar_ID);
		}
		//	Should not happen
		if (calendars.size() == 0)
			throw new IllegalArgumentException(""@NotFound@ @C_Calendar_ID@"");
		
		//	For all Calendars get Periods
		for (int i = 0; i < calendars.size(); i++)
		{
			int C_Calendar_ID = calendars.get(i);
			MPeriod period = MPeriod.getOfCalendar (ctx, C_Calendar_ID, DateAcct);
			//	Period not found
			if (period == null)
				return false;
			if (!period.isClosed())
				return false;
		}
		return true;	//	closed
	}	//	isClosed
"
org.compiere.model.MPeriod.getFirstInYear,MPeriod.java,"MPeriod getFirstInYear (Ctx ctx, int C_Calendar_ID, Timestamp DateAcct)
	{
		MPeriod retValue = null;
		String sql = ""SELECT * ""
			+ ""FROM C_Period ""
			+ ""WHERE C_Year_ID IN ""
				+ ""(SELECT p.C_Year_ID ""
				+ ""FROM C_Year y""
				+ "" INNER JOIN C_Period p ON (y.C_Year_ID=p.C_Year_ID) ""
				+ ""WHERE y.C_Calendar_ID=?""
				+ ""	AND ? BETWEEN StartDate AND EndDate)""
			+ "" AND IsActive='Y' AND PeriodType='S' ""
			+ ""ORDER BY StartDate"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, C_Calendar_ID);
			pstmt.setTimestamp (2, DateAcct);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())	//	first only
				retValue = new MPeriod(ctx, rs, null);
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		return retValue;
	}	//	getFirstInYear
"
org.compiere.model.MPeriod.getPeriodControls,MPeriod.java,"MPeriodControl[] getPeriodControls (boolean requery)
	{
		if (m_controls != null && !requery)
			return m_controls;
		//
		ArrayList<MPeriodControl> list = new ArrayList<MPeriodControl>();
		String sql = ""SELECT * FROM C_PeriodControl ""
			+ ""WHERE C_Period_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, getC_Period_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add (new MPeriodControl (getCtx(), rs, null));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		m_controls = new MPeriodControl[list.size ()];
		list.toArray (m_controls);
		return m_controls;
	}	//	getPeriodControls
"
org.compiere.model.MPeriod.getPeriodControl,MPeriod.java,"MPeriodControl getPeriodControl (String DocBaseType)
	{
		if (DocBaseType == null)
			return null;
		getPeriodControls(false);
		for (MPeriodControl element : m_controls) {
		//	log.fine(""getPeriodControl - "" + 1 + "" - "" + m_controls[i]);
			if (DocBaseType.equals(element.getDocBaseType()))
				return element;
		}
		return null;
	}	//	getPeriodControl
"
org.compiere.model.MPeriod.isInPeriod,MPeriod.java,"boolean isInPeriod (Timestamp date)
	{
		if (date == null)
			return false;
		Timestamp dateOnly = TimeUtil.getDay(date);
		Timestamp from = TimeUtil.getDay(getStartDate());
		if (dateOnly.before(from))
			return false;
		Timestamp to = TimeUtil.getDay(getEndDate());
		if (dateOnly.after(to))
			return false;
		return true;
	}	//	isInPeriod
"
org.compiere.model.MPeriod.isOpen,MPeriod.java,"String isOpen (String DocBaseType, Timestamp dateAcct)
	{
		if (!isActive())
		{
			s_log.warning(""Period not active: "" + getName());
			return ""@C_Period_ID@ <> @IsActive@"";
		}

		MAcctSchema as = MClient.get(getCtx(), getAD_Client_ID()).getAcctSchema();
		if (as != null && as.isAutoPeriodControl())
		{
			if (!as.isAutoPeriodControlOpen(dateAcct))
				return ""@PeriodClosed@ - @AutoPeriodControl@"";
			//	We are OK
			Timestamp today = new Timestamp (System.currentTimeMillis());
			if (isInPeriod(today) && as.getC_Period_ID() != getC_Period_ID())
			{
				as.setC_Period_ID(getC_Period_ID());
				as.save();
			}
			return null;
		}
		
		//	Standard Period Control
		if (DocBaseType == null)
		{
			log.warning(getName() + "" - No DocBaseType"");
			return ""@NotFound@ @DocBaseType@"";
		}
		MPeriodControl pc = getPeriodControl (DocBaseType);
		if (pc == null)
		{
			log.warning(getName() + "" - Period Control not found for "" + DocBaseType);
			return ""@NotFound@ @C_PeriodControl_ID@: "" + DocBaseType;
		}
		log.fine(getName() + "": "" + DocBaseType);
		if (pc.isOpen())
			return null;
		return ""@PeriodClosed@ - @C_PeriodControl_ID@ ("" 
			+ DocBaseType + "", "" + dateAcct + "")"";
	}	//	isOpen
"
org.compiere.model.MPeriod.isClosed,MPeriod.java,"boolean isClosed()
	{
		MPeriodControl[] pcs = getPeriodControls(false);
		for (MPeriodControl pc : pcs)
        {
	        if (!pc.isClosed())
	        	return false;
        }
		return true;
	}	//	isClosed
"
org.compiere.model.MPeriod.isStandardPeriod,MPeriod.java,"boolean isStandardPeriod()
	{
		return PERIODTYPE_StandardCalendarPeriod.equals(getPeriodType());
	}	//	isStandardPeriod
"
org.compiere.model.MPeriod.getC_Calendar_ID,MPeriod.java,"int getC_Calendar_ID()
	{
		if (m_C_Calendar_ID == 0)
		{
			MYear year = MYear.get(getCtx(), getC_Year_ID());
			if (year != null)
				m_C_Calendar_ID = year.getC_Calendar_ID();
			else
				log.severe(""@NotFound@ C_Year_ID="" + getC_Year_ID());
		}
		return m_C_Calendar_ID;
	}	//	getC_Calendar_ID
"
org.compiere.model.MPeriod.beforeSave,MPeriod.java,"boolean beforeSave (boolean newRecord)
	{
		//	Truncate Dates
		Timestamp date = getStartDate(); 
		if (date != null)
			setStartDate(TimeUtil.getDay(date));
		else
			return false;
		//
		date = getEndDate();
		if (date != null)
			setEndDate(TimeUtil.getDay(date));
		else
			setEndDate(TimeUtil.getMonthLastDay(getStartDate()));
		return true;
	}	//	beforeSave
"
org.compiere.model.MPeriod.afterSave,MPeriod.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (newRecord)
		{
		//	SELECT Value FROM AD_Ref_List WHERE AD_Reference_ID=183
			MDocType[] types = MDocType.getOfClient(getCtx());
			int count = 0;
			ArrayList<String> baseTypes = new ArrayList<String>();
			for (MDocType type : types) {
				String DocBaseType = type.getDocBaseType();
				if (baseTypes.contains(DocBaseType))
					continue;
				MPeriodControl pc = new MPeriodControl(this, DocBaseType);
				if (pc.save())
					count++;
				baseTypes.add (DocBaseType);
			}
			log.fine(""PeriodControl #"" + count);
		}
		return success;
	}	//	afterSave
"
org.compiere.model.MPeriod.toString,MPeriod.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MPeriod["");
		sb.append (get_ID())
			.append(""-"").append (getName())
			.append("", "").append(getStartDate()).append(""-"").append(getEndDate())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MCostQueue.get,MCostQueue.java,"MCostQueue get (MProduct product, int M_AttributeSetInstance_ID,
		MAcctSchema as, int AD_Org_ID, int M_CostElement_ID, Trx trx)
	{
		MCostQueue costQ = null;
		String sql = ""SELECT * FROM M_CostQueue ""
			+ ""WHERE AD_Client_ID=? AND AD_Org_ID=?""
			+ "" AND M_Product_ID=?""
			+ "" AND M_AttributeSetInstance_ID=?""
			+ "" AND M_CostType_ID=? AND C_AcctSchema_ID=?""
			+ "" AND M_CostElement_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, product.getAD_Client_ID());
			pstmt.setInt (2, AD_Org_ID);
			pstmt.setInt (3, product.getM_Product_ID());
			pstmt.setInt (4, M_AttributeSetInstance_ID);
			pstmt.setInt (5, as.getM_CostType_ID());
			pstmt.setInt (6, as.getC_AcctSchema_ID());
			pstmt.setInt (7, M_CostElement_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				costQ = new MCostQueue (product.getCtx(), rs, trx); 
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//	New
		if (costQ == null)
			costQ = new MCostQueue (product, M_AttributeSetInstance_ID,
				as, AD_Org_ID, M_CostElement_ID, trx);
		return costQ;
	}	//	get
"
org.compiere.model.MCostQueue.getQueue,MCostQueue.java,"MCostQueue[] getQueue (MProduct product, int M_ASI_ID,
		MAcctSchema as, int Org_ID, MCostElement ce, Trx trx)
	{
		ArrayList<MCostQueue> list = new ArrayList<MCostQueue>();
		String sql = ""SELECT * FROM M_CostQueue ""
			+ ""WHERE AD_Client_ID=? AND AD_Org_ID=?""
			+ "" AND M_Product_ID=?""
			+ "" AND M_CostType_ID=? AND C_AcctSchema_ID=?""
			+ "" AND M_CostElement_ID=?"";
		if (M_ASI_ID != 0)
			sql += "" AND M_AttributeSetInstance_ID=?"";
		sql += "" AND CurrentQty<>0 ""
			+ ""ORDER BY M_AttributeSetInstance_ID "";
		if (!ce.isFifo())
			sql += ""DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, product.getAD_Client_ID());
			pstmt.setInt (2, Org_ID);
			pstmt.setInt (3, product.getM_Product_ID());
			pstmt.setInt (4, as.getM_CostType_ID());
			pstmt.setInt (5, as.getC_AcctSchema_ID());
			pstmt.setInt (6, ce.getM_CostElement_ID());
			if (M_ASI_ID != 0)
				pstmt.setInt (7, M_ASI_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add(new MCostQueue (product.getCtx(), rs, trx)); 
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MCostQueue[] costQ = new MCostQueue[list.size()];
		list.toArray(costQ);
		return costQ;
	}	//	getQueue
"
org.compiere.model.MCostQueue.adjustQty,MCostQueue.java,"BigDecimal adjustQty (MProduct product, int M_ASI_ID,
		MAcctSchema as, int Org_ID, MCostElement ce, BigDecimal Qty, 
		Trx trx)
	{
		if (Qty.signum() == 0)
			return Env.ZERO;
		MCostQueue[] costQ = getQueue(product, M_ASI_ID, 
			as, Org_ID, ce, trx);
		BigDecimal remainingQty = Qty;
		for (MCostQueue queue : costQ) {
			//	Negative Qty i.e. add
			if (remainingQty.signum() < 0)
			{
				BigDecimal oldQty = queue.getCurrentQty();
				BigDecimal newQty = oldQty.subtract(remainingQty);
				queue.setCurrentQty(newQty);
				if (queue.save())
				{
					s_log.fine(""Qty="" + remainingQty 
						+ ""(!), ASI="" + queue.getM_AttributeSetInstance_ID()
						+ "" - "" + oldQty + "" -> "" + newQty);
					return queue.getCurrentCostPrice();
				}
				else
					return null;
			}
			
			//	Positive queue
			if (queue.getCurrentQty().signum() > 0)
			{
				BigDecimal reduction = remainingQty;
				if (reduction.compareTo(queue.getCurrentQty()) > 0)
					reduction = queue.getCurrentQty();
				BigDecimal oldQty = queue.getCurrentQty();
				BigDecimal newQty = oldQty.subtract(reduction);
				queue.setCurrentQty(newQty);
				if (queue.save())
				{
					s_log.fine(""Qty="" + reduction 
						+ "", ASI="" + queue.getM_AttributeSetInstance_ID()
						+ "" - "" + oldQty + "" -> "" + newQty);
					remainingQty = remainingQty.subtract(reduction);
				}
				else
					return null;
				//
				if (remainingQty.signum() == 0)
				{
					return queue.getCurrentCostPrice();
				}
			}
		}	//	for queue	

		s_log.fine(""RemainingQty="" + remainingQty);
		return null;
	}	//	adjustQty
"
org.compiere.model.MCostQueue.getCosts,MCostQueue.java,"BigDecimal getCosts (MProduct product, int M_ASI_ID,
		MAcctSchema as, int Org_ID, MCostElement ce, BigDecimal Qty, 
		Trx trx)
	{
		if (Qty.signum() == 0)
			return Env.ZERO;
		MCostQueue[] costQ = getQueue(product, M_ASI_ID, 
			as, Org_ID, ce, trx);
		//
		BigDecimal cost = Env.ZERO;
		BigDecimal remainingQty = Qty;
		BigDecimal firstPrice = null;
		BigDecimal lastPrice = null;
		//
		for (MCostQueue queue : costQ) {
			//	Negative Qty i.e. add
			if (remainingQty.signum() <= 0)
			{
				queue.getCurrentQty();
				lastPrice = queue.getCurrentCostPrice();
				BigDecimal costBatch = lastPrice.multiply(remainingQty);
				cost = cost.add(costBatch);
				s_log.config(""ASI="" + queue.getM_AttributeSetInstance_ID()
					+ "" - Cost="" + lastPrice + "" * Qty="" + remainingQty + ""(!) = "" + costBatch);
				return cost;
			}
			
			//	Positive queue
			if (queue.getCurrentQty().signum() > 0)
			{
				BigDecimal reduction = remainingQty;
				if (reduction.compareTo(queue.getCurrentQty()) > 0)
					reduction = queue.getCurrentQty();
				queue.getCurrentQty();
				lastPrice = queue.getCurrentCostPrice();
				BigDecimal costBatch = lastPrice.multiply(reduction);
				cost = cost.add(costBatch);
				s_log.fine(""ASI="" + queue.getM_AttributeSetInstance_ID()
					+ "" - Cost="" + lastPrice + "" * Qty="" + reduction + "" = "" + costBatch);
				remainingQty = remainingQty.subtract(reduction);
				//	Done
				if (remainingQty.signum() == 0)
				{
					s_log.config(""Cost="" + cost);
					return cost;
				}
				if (firstPrice == null)
					firstPrice = lastPrice;
			}
		}	//	for queue

		if (lastPrice == null)
		{
			lastPrice = MCost.getSeedCosts(product, M_ASI_ID, as, Org_ID, 
				ce.getCostingMethod(), 0);
			if (lastPrice == null)
			{
				s_log.info(""No Price found"");
				return null;
			}
			s_log.info(""No Cost Queue"");
		}
		BigDecimal costBatch = lastPrice.multiply(remainingQty);
		s_log.fine(""RemainingQty="" + remainingQty + "" * LastPrice="" + lastPrice + "" = "" + costBatch);
		cost = cost.add(costBatch);
		s_log.config(""Cost="" + cost);
		return cost;
	}	//	getCosts
"
org.compiere.model.MCostQueue.setCosts,MCostQueue.java,"void setCosts (BigDecimal amt, BigDecimal qty, int precision)
	{
		BigDecimal oldSum = getCurrentCostPrice().multiply(getCurrentQty());
		BigDecimal newSum = amt;	//	is total already
		BigDecimal sumAmt = oldSum.add(newSum);
		BigDecimal sumQty = getCurrentQty().add(qty);
		if (sumQty.signum() != 0)
		{
			BigDecimal cost = sumAmt.divide(sumQty, precision, BigDecimal.ROUND_HALF_UP);
			setCurrentCostPrice(cost);
		}
		//
		setCurrentQty(getCurrentQty().add(qty));
	}	//	update
"
org.compiere.model.MInvoiceBatchLine.setC_DocType_ID,MInvoiceBatchLine.java,"void setC_DocType_ID (String oldC_DocType_ID, 
			String newC_DocType_ID, int windowNo) throws Exception
	{
		if (newC_DocType_ID == null || newC_DocType_ID.length() == 0)
			return;
		int C_DocType_ID = Integer.parseInt(newC_DocType_ID);
		setC_DocType_ID(C_DocType_ID);
		setDocumentNo();
	}	//	setC_DocType_ID
"
org.compiere.model.MInvoiceBatchLine.setDateInvoiced,MInvoiceBatchLine.java,"void setDateInvoiced (String oldDateInvoiced, 
			String newDateInvoiced, int windowNo) throws Exception
	{
		if (newDateInvoiced == null || newDateInvoiced.length() == 0)
			return;
		Timestamp dateInvoiced = PO.convertToTimestamp(newDateInvoiced);
		if (dateInvoiced == null)
			return;
		setDateInvoiced(dateInvoiced);
		setDocumentNo();
	}	//	setDateInvoiced
"
org.compiere.model.MInvoiceBatchLine.setDateInvoiced,MInvoiceBatchLine.java,"void setDateInvoiced(Timestamp dateOrdered)
	{
		super.setDateInvoiced(dateOrdered);
		super.setDateAcct(dateOrdered);
	}	//	setDateInvoiced
"
org.compiere.model.MInvoiceBatchLine.setDocumentNo,MInvoiceBatchLine.java,"void setDocumentNo()
	{
		//	Get last line
		int C_InvoiceBatch_ID = getC_InvoiceBatch_ID();
		String sql = ""SELECT COALESCE(MAX(C_InvoiceBatchLine_ID),0) FROM C_InvoiceBatchLine WHERE C_InvoiceBatch_ID=?"";
		int C_InvoiceBatchLine_ID = DB.getSQLValue(null, sql, C_InvoiceBatch_ID);
		if (C_InvoiceBatchLine_ID == 0)
			return;
		MInvoiceBatchLine last = new MInvoiceBatchLine(Env.getCtx(), C_InvoiceBatchLine_ID, null);
		
		//	Need to Increase when different DocType or BP
		int C_DocType_ID = getC_DocType_ID();
		int C_BPartner_ID = getC_BPartner_ID();
		if (C_DocType_ID == last.getC_DocType_ID()
			&& C_BPartner_ID == last.getC_BPartner_ID())
			return;

		//	New Number
		String oldDocNo = last.getDocumentNo();
		if (oldDocNo == null)
			return;
		int docNo = 0;
		try
		{
			docNo = Integer.parseInt(oldDocNo);
		}
		catch (Exception e)
		{
		}
		if (docNo == 0)
			return;
		String newDocNo = String.valueOf(docNo+1);
		setDocumentNo(newDocNo);
	}	//	setDocumentNo
"
org.compiere.model.MInvoiceBatchLine.setC_BPartner_ID,MInvoiceBatchLine.java,"void setC_BPartner_ID (String oldC_BPartner_ID, 
			String newC_BPartner_ID, int windowNo) throws Exception
	{
		if (newC_BPartner_ID == null || newC_BPartner_ID.length() == 0)
			return;
		int C_BPartner_ID = Integer.parseInt(newC_BPartner_ID);
		if (C_BPartner_ID == 0)
			return;
		
		String sql = ""SELECT p.AD_Language,p.C_PaymentTerm_ID,""
			+ "" COALESCE(p.M_PriceList_ID,g.M_PriceList_ID) AS M_PriceList_ID, p.PaymentRule,p.POReference,""
			+ "" p.SO_Description,p.IsDiscountPrinted,""
			+ "" p.SO_CreditLimit, p.SO_CreditLimit-p.SO_CreditUsed AS CreditAvailable,""
			+ "" l.C_BPartner_Location_ID,c.AD_User_ID,""
			+ "" COALESCE(p.PO_PriceList_ID,g.PO_PriceList_ID) AS PO_PriceList_ID, p.PaymentRulePO,p.PO_PaymentTerm_ID "" 
			+ ""FROM C_BPartner p""
			+ "" INNER JOIN C_BP_Group g ON (p.C_BP_Group_ID=g.C_BP_Group_ID)""
			+ "" LEFT OUTER JOIN C_BPartner_Location l ON (p.C_BPartner_ID=l.C_BPartner_ID AND l.IsBillTo='Y' AND l.IsActive='Y')""
			+ "" LEFT OUTER JOIN AD_User c ON (p.C_BPartner_ID=c.C_BPartner_ID) ""
			+ ""WHERE p.C_BPartner_ID=? AND p.IsActive='Y'"";		//	#1

		boolean IsSOTrx = getCtx().isSOTrx(windowNo);
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_BPartner_ID);
			ResultSet rs = pstmt.executeQuery();
			//
			if (rs.next())
			{
				//	Location
				int C_BPartner_Location_ID = rs.getInt(""C_BPartner_Location_ID"");
				//	overwritten by InfoBP selection - works only if InfoWindow
				//	was used otherwise creates error (uses last value, may belong to differnt BP)
				if (getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_BPartner_ID"") == C_BPartner_ID)
					C_BPartner_Location_ID = getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_BPartner_Location_ID"");
				if (C_BPartner_Location_ID != 0)
					setC_BPartner_Location_ID(C_BPartner_Location_ID);
				//	Contact - overwritten by InfoBP selection
				int AD_User_ID = rs.getInt(""AD_User_ID"");
				if (getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_BPartner_ID"") == C_BPartner_ID)
					AD_User_ID = getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""AD_User_ID"");
				setAD_User_ID(AD_User_ID);

				//	CreditAvailable
				if (IsSOTrx)
				{
					BigDecimal CreditLimit = rs.getBigDecimal(""SO_CreditLimit"");
				//	String SOCreditStatus = rs.getString(""SOCreditStatus"");
					if (CreditLimit != null && CreditLimit.signum() != 0)
					{
						BigDecimal CreditAvailable = rs.getBigDecimal(""CreditAvailable"");
						if (p_changeVO != null 
							&& CreditAvailable != null && CreditAvailable.signum() < 0)
						{
							String msg = Msg.getMsg(getCtx(), ""CreditLimitOver"", 
								DisplayType.getNumberFormat(DisplayTypeConstants.Amount).format(CreditAvailable));
							p_changeVO.addError(msg);
						}
					}
				}
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		//
		setDocumentNo();
		setTax (windowNo, ""C_BPartner_ID"");
	}	//	setC_BPartner_ID
"
org.compiere.model.MInvoiceBatchLine.setC_BPartner_Location_ID,MInvoiceBatchLine.java,"void setC_BPartner_Location_ID (String oldC_BPartner_Location_ID, 
			String newC_BPartner_Location_ID, int windowNo) throws Exception
	{
		if (newC_BPartner_Location_ID == null || newC_BPartner_Location_ID.length() == 0)
			return;
		int C_BPartner_Location_ID = Integer.parseInt(newC_BPartner_Location_ID);
		if (C_BPartner_Location_ID == 0)
			return;
		//
		super.setC_BPartner_Location_ID(C_BPartner_Location_ID);
		setTax(windowNo, ""C_BPartner_Location_ID"");
	}	//	setC_BPartner_Location_ID
"
org.compiere.model.MInvoiceBatchLine.setC_Charge_ID,MInvoiceBatchLine.java,"void setC_Charge_ID (String oldC_Charge_ID, 
			String newC_Charge_ID, int windowNo) throws Exception
	{
		if (newC_Charge_ID == null || newC_Charge_ID.length() == 0)
			return;
		int C_Charge_ID = Integer.parseInt(newC_Charge_ID);
		super.setC_Charge_ID(C_Charge_ID);
		
		MCharge charge = MCharge.get(getCtx(), C_Charge_ID);
		setPriceEntered(charge.getChargeAmt());
		setTax(windowNo, ""C_Charge_ID"");
	}	//	setC_Charge_ID
"
org.compiere.model.MInvoiceBatchLine.setTax,MInvoiceBatchLine.java,"void setTax(int windowNo, String columnName)
	{
		int C_Charge_ID = getC_Charge_ID();
		log.fine(""C_Charge_ID="" + C_Charge_ID);
		if (C_Charge_ID == 0)
		{
			setAmt (windowNo, columnName);
			return;
		}

		//	Check Partner Location
		int C_BPartner_Location_ID = getC_BPartner_Location_ID();
		log.fine(""BP_Location="" + C_BPartner_Location_ID);
		if (C_BPartner_Location_ID == 0)
		{
			setAmt (windowNo, columnName);
			return;
		}

		//	Dates
		Timestamp billDate = getDateInvoiced();
		log.fine(""Bill Date="" + billDate);
		Timestamp shipDate = billDate;
		log.fine(""Ship Date="" + shipDate);

		int AD_Org_ID = getAD_Org_ID();
		log.fine(""Org="" + AD_Org_ID);
		MOrg org = MOrg.get(getCtx(), AD_Org_ID);
		int M_Warehouse_ID = org.getM_Warehouse_ID();
		log.fine(""Warehouse="" + M_Warehouse_ID);

		boolean isSOTrx = getCtx().isSOTrx(windowNo);
		//
		int C_Tax_ID = Tax.get(getCtx(), 0, C_Charge_ID, billDate, shipDate,
			AD_Org_ID, M_Warehouse_ID, C_BPartner_Location_ID, C_BPartner_Location_ID,
			isSOTrx);
		log.info(""Tax ID="" + C_Tax_ID + "" - SOTrx="" + isSOTrx);

		if (C_Tax_ID == 0)
		{
			ValueNamePair pp = CLogger.retrieveError();
			if (pp != null)
				p_changeVO.addError(pp.getValue());
			else
				p_changeVO.addError(""Tax Error"");
		}
		else
			super.setC_Tax_ID(C_Tax_ID);
		//
		setAmt (windowNo, columnName);
	}	//	setTax
"
org.compiere.model.MInvoiceBatchLine.setC_Tax_ID,MInvoiceBatchLine.java,"void setC_Tax_ID (String oldC_Tax_ID, 
			String newC_Tax_ID, int windowNo) throws Exception
	{
		if (newC_Tax_ID == null || newC_Tax_ID.length() == 0)
			return;
		int C_Tax_ID = Integer.parseInt(newC_Tax_ID);
		setC_Tax_ID(C_Tax_ID);
		setAmt(windowNo, ""C_Tax_ID"");
	}	//	setC_Tax_ID
"
org.compiere.model.MInvoiceBatchLine.setIsTaxIncluded,MInvoiceBatchLine.java,"void setIsTaxIncluded (String oldIsTaxIncluded, 
			String newIsTaxIncluded, int windowNo) throws Exception
	{
		boolean IsTaxIncluded = ""Y"".equals(newIsTaxIncluded);
		setIsTaxIncluded(IsTaxIncluded);
		setAmt(windowNo, ""IsTaxIncluded"");
	}	//	setIsTaxIncluded
"
org.compiere.model.MInvoiceBatchLine.setPriceEntered,MInvoiceBatchLine.java,"void setPriceEntered (String oldPriceEntered, 
			String newPriceEntered, int windowNo) throws Exception
	{
		if (newPriceEntered == null || newPriceEntered.length() == 0)
			return;
		BigDecimal PriceEntered = new BigDecimal(newPriceEntered);
		super.setPriceEntered(PriceEntered);
		setAmt(windowNo, ""PriceEntered"");
	}	//	setPriceEntered
"
org.compiere.model.MInvoiceBatchLine.setQtyEntered,MInvoiceBatchLine.java,"void setQtyEntered (String oldQtyEntered, 
			String newQtyEntered, int windowNo) throws Exception
	{
		if (newQtyEntered == null || newQtyEntered.length() == 0)
			return;
		BigDecimal QtyEntered = new BigDecimal(newQtyEntered);
		super.setQtyEntered(QtyEntered);
		setAmt(windowNo, ""QtyEntered"");
	}	//	setQtyEntered
"
org.compiere.model.MInvoiceBatchLine.setAmt,MInvoiceBatchLine.java,"void setAmt(int windowNo, String columnName)
	{
		//	get values
		BigDecimal QtyEntered = getQtyEntered();
		BigDecimal PriceEntered = getPriceEntered();
		log.fine(""QtyEntered="" + QtyEntered + "", PriceEntered="" + PriceEntered);
		if (QtyEntered == null)
			QtyEntered = Env.ZERO;
		if (PriceEntered == null)
			PriceEntered = Env.ZERO;

		//	Line Net Amt
		BigDecimal LineNetAmt = QtyEntered.multiply(PriceEntered);
		int StdPrecision = getCtx().getStdPrecision();
		if (LineNetAmt.scale() > StdPrecision)
			LineNetAmt = LineNetAmt.setScale(StdPrecision, BigDecimal.ROUND_HALF_UP);

		//	Calculate Tax Amount
		boolean IsTaxIncluded = isTaxIncluded();
		BigDecimal TaxAmt = null;
		if (columnName.equals(""TaxAmt""))
		{
			TaxAmt = getTaxAmt();
		}
		else
		{
			int C_Tax_ID = getC_Tax_ID();
			if (C_Tax_ID != 0)
			{
				MTax tax = new MTax (getCtx(), C_Tax_ID, null);
				TaxAmt = tax.calculateTax(LineNetAmt, IsTaxIncluded, StdPrecision);
				setTaxAmt(TaxAmt);
			}
		}
		
		//	
		if (IsTaxIncluded)
		{
			setLineTotalAmt(LineNetAmt);
			setLineNetAmt(LineNetAmt.subtract(TaxAmt));
		}
		else
		{
			setLineNetAmt(LineNetAmt);
			setLineTotalAmt(LineNetAmt.add(TaxAmt));
		}
	}	//	setAmt
"
org.compiere.model.MInvoiceBatchLine.beforeSave,MInvoiceBatchLine.java,"boolean beforeSave (boolean newRecord)
	{
		// Amount
		if (getPriceEntered().signum() == 0)
		{
			log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""PriceEntered""));
			return false;
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MInvoiceBatchLine.afterSave,MInvoiceBatchLine.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (success)
		{
			String sql = ""UPDATE C_InvoiceBatch h ""
				+ ""SET DocumentAmt = NVL((SELECT SUM(LineTotalAmt) FROM C_InvoiceBatchLine l ""
					+ ""WHERE h.C_InvoiceBatch_ID=l.C_InvoiceBatch_ID AND l.IsActive='Y'),0) ""
				+ ""WHERE C_InvoiceBatch_ID="" + getC_InvoiceBatch_ID();
			DB.executeUpdate(sql, get_Trx());
		}
		return success;
	}	//	afterSave
"
org.compiere.model.MAssignmentSlot.setStatus,MAssignmentSlot.java,"void setStatus (int status)
	{
		m_status = status;
	}	//	setStatus
"
org.compiere.model.MAssignmentSlot.getStatus,MAssignmentSlot.java,"int getStatus()
	{
		return m_status;
	}	//	getStatus
"
org.compiere.model.MAssignmentSlot.isAssignment,MAssignmentSlot.java,"boolean isAssignment()
	{
		return (m_status == STATUS_NotConfirmed || m_status == STATUS_Confirmed);
	}	//	isAssignment
"
org.compiere.model.MAssignmentSlot.getColor,MAssignmentSlot.java,"Color getColor (boolean background)
	{
		//	Not found, Inactive, not available
		if (m_status == STATUS_NotAvailable)
			return background ? Color.gray : Color.magenta;

		//	Holiday
		else if (m_status == STATUS_UnAvailable)
			return background ? Color.gray : Color.pink;

		//	Vacation
		else if (m_status == STATUS_NonBusinessDay)
			return background ? Color.lightGray : Color.red;

		//	Out of normal hours
		else if (m_status == STATUS_NotInSlotDay || m_status == STATUS_NotInSlotTime)
			return background ? Color.lightGray : Color.black;

		//	Assigned
		else if (m_status == STATUS_NotConfirmed)
			return background ? Color.blue  : Color.white;

		//	Confirmed
		else if (m_status == STATUS_Confirmed)
			return background ? Color.blue : Color.black;

		//	Unknown
		return background ? Color.black : Color.white;
	}	//	getColor
"
org.compiere.model.MAssignmentSlot.getStartTime,MAssignmentSlot.java,"Timestamp getStartTime()
	{
		return m_startTime;
	}
"
org.compiere.model.MAssignmentSlot.setStartTime,MAssignmentSlot.java,"void setStartTime (Timestamp startTime)
	{
		if (startTime == null)
			m_startTime = new Timestamp(System.currentTimeMillis());
		else
			m_startTime = startTime;
	}	//	setStartTime
"
org.compiere.model.MAssignmentSlot.getEndTime,MAssignmentSlot.java,"Timestamp getEndTime()
	{
		return m_endTime;
	}
"
org.compiere.model.MAssignmentSlot.setEndTime,MAssignmentSlot.java,"void setEndTime (Timestamp endTime)
	{
		if (endTime == null)
			m_endTime = m_startTime;
		else
			m_endTime = endTime;
	}
"
org.compiere.model.MAssignmentSlot.setMAssignment,MAssignmentSlot.java,"void setMAssignment (MResourceAssignment assignment)
	{
		if (assignment == null)
			return;
		if (!isAssignment())
			throw new IllegalArgumentException(""Assignment Slot not an Assignment"");
		//
		m_mAssignment = assignment;
		setStartTime(m_mAssignment.getAssignDateFrom());
		setEndTime(m_mAssignment.getAssignDateTo());
		setName(m_mAssignment.getName());
		setDescription(m_mAssignment.getDescription());
		setStatus(m_mAssignment.isConfirmed() ? STATUS_Confirmed : STATUS_NotConfirmed);
	}	//	setMAssignment
"
org.compiere.model.MAssignmentSlot.getMAssignment,MAssignmentSlot.java,"MResourceAssignment getMAssignment()
	{
		return m_mAssignment;
	}	//	getAssignment
"
org.compiere.model.MAssignmentSlot.setName,MAssignmentSlot.java,"void setName (String name)
	{
		if (name == null)
			m_name = """";
		else
			m_name = name;
	}	//	setName
"
org.compiere.model.MAssignmentSlot.getName,MAssignmentSlot.java,"String getName()
	{
		return m_name;
	}	//	getName
"
org.compiere.model.MAssignmentSlot.setDescription,MAssignmentSlot.java,"void setDescription (String description)
	{
		if (description == null)
			m_description = """";
		else
			m_description = description;
	}	//	setDescription
"
org.compiere.model.MAssignmentSlot.getDescription,MAssignmentSlot.java,"String getDescription()
	{
		return m_description;
	}	//	getDescription
"
org.compiere.model.MAssignmentSlot.setY,MAssignmentSlot.java,"void setY (int yStart, int yEnd)
	{
		m_yStart = yStart;
		m_yEnd = yEnd;
	}	//	setY
"
org.compiere.model.MAssignmentSlot.getYStart,MAssignmentSlot.java,"int getYStart ()
	{
		return m_yStart;
	}	//	getYStart
"
org.compiere.model.MAssignmentSlot.getYEnd,MAssignmentSlot.java,"int getYEnd ()
	{
		return m_yEnd;
	}	//	setYEnd
"
org.compiere.model.MAssignmentSlot.setX,MAssignmentSlot.java,"void setX (int xPos, int xMax)
	{
		m_xPos = xPos;
		if (xMax > m_xMax)
			m_xMax = xMax;
	}	//	setX
"
org.compiere.model.MAssignmentSlot.getXPos,MAssignmentSlot.java,"int getXPos()
	{
		return m_xPos;
	}	//	setXPos
"
org.compiere.model.MAssignmentSlot.getXMax,MAssignmentSlot.java,"int getXMax()
	{
		return m_xMax;
	}	//	setXMax
"
org.compiere.model.MAssignmentSlot.setLanguage,MAssignmentSlot.java,"void setLanguage (Language language)
	{
		m_language = language;
	}	//	setLanguage
"
org.compiere.model.MAssignmentSlot.setDisplay,MAssignmentSlot.java,"void setDisplay (int displayMode)
	{
		m_displayMode = displayMode;
	}	//	setDisplay
"
org.compiere.model.MAssignmentSlot.toString,MAssignmentSlot.java,"String toString()
	{
		if (m_displayMode == DISPLAY_TIME_FROM)
			return getInfoTimeFrom();
		else if (m_displayMode == DISPLAY_TIME_FROM_TO)
			return getInfoTimeFromTo();
		else if (m_displayMode == DISPLAY_DATETIME_FROM_TO)
			return getInfoDateTimeFromTo();
		else if (m_displayMode == DISPLAY_NAME)
			return m_name;
		else if (m_displayMode == DISPLAY_NAME_DESCRIPTION)
			return getInfoNameDescription();
		else if (m_displayMode == DISPLAY_FULL)
			return getInfo();

		//	DISPLAY_ALL
		StringBuffer sb = new StringBuffer(""MAssignmentSlot["");
		sb.append(m_startTime).append(""-"").append(m_endTime)
			.append(""-Status="").append(m_status).append("",Name="")
			.append(m_name).append("","").append(m_description).append(""]"");
		return sb.toString();
	}	//	toString
"
org.compiere.model.MAssignmentSlot.getInfoTimeFrom,MAssignmentSlot.java,"String getInfoTimeFrom()
	{
		return m_language.getTimeFormat().format(m_startTime);
	}	//	getInfoTimeFrom
"
org.compiere.model.MAssignmentSlot.getInfoTimeFromTo,MAssignmentSlot.java,"String getInfoTimeFromTo()
	{
		StringBuffer sb = new StringBuffer();
		sb.append(m_language.getTimeFormat().format(m_startTime))
			.append("" - "")
			.append(m_language.getTimeFormat().format(m_endTime));
		return sb.toString();
	}	//	getInfoTimeFromTo
"
org.compiere.model.MAssignmentSlot.getInfoDateTimeFromTo,MAssignmentSlot.java,"String getInfoDateTimeFromTo()
	{
		StringBuffer sb = new StringBuffer();
		sb.append(m_language.getDateTimeFormat().format(m_startTime))
			.append("" - "");
		if (TimeUtil.isSameDay(m_startTime, m_endTime))
			sb.append(m_language.getTimeFormat().format(m_endTime));
		else
			m_language.getDateTimeFormat().format(m_endTime);
		return sb.toString();
	}
"
org.compiere.model.MAssignmentSlot.getInfoNameDescription,MAssignmentSlot.java,"String getInfoNameDescription()
	{
		StringBuffer sb = new StringBuffer(m_name);
		if (m_description.length() > 0)
			sb.append("" ("").append(m_description).append("")"");
		return sb.toString();
	}	//	getInfoNameDescription
"
org.compiere.model.MAssignmentSlot.getInfo,MAssignmentSlot.java,"String getInfo()
	{
		StringBuffer sb = new StringBuffer(getInfoDateTimeFromTo());
		sb.append("": "").append(m_name);
		if (m_description.length() > 0)
			sb.append("" ("").append(m_description).append("")"");
		return sb.toString();
	}	//	getInfo
"
org.compiere.model.MAssignmentSlot.inSlot,MAssignmentSlot.java,"boolean inSlot (Timestamp time, boolean endTime)
	{
		//	Compare	--
		GregorianCalendar cal = new GregorianCalendar();
		cal.setTime(time);
		cal.set(Calendar.YEAR, 1970);
		cal.set(Calendar.DAY_OF_YEAR, 1);
		//	handle -00:00 (end time)
		if (endTime && cal.get(Calendar.HOUR_OF_DAY) == 0 && cal.get(Calendar.MINUTE) == 0)
		{
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 59);
		}
		Time compare = new Time (cal.getTimeInMillis());
		//	Start Time --
		cal.setTime(m_startTime);
		cal.set(Calendar.YEAR, 1970);
		cal.set(Calendar.DAY_OF_YEAR, 1);
		Time start = new Time (cal.getTimeInMillis());
		//	End time --
		cal.setTime(m_endTime);
		cal.set(Calendar.YEAR, 1970);
		cal.set(Calendar.DAY_OF_YEAR, 1);
		if (cal.get(Calendar.HOUR_OF_DAY) == 0 && cal.get(Calendar.MINUTE) == 0)
		{
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 59);
		}
		Time end = new Time (cal.getTimeInMillis());

		//	before start			x |---|
		if (compare.before(start))
		{
		//	System.out.println(""InSlot-false Compare="" + compare + "" before start "" + start);
			return false;
		}
		//	after end				|---| x
		if (compare.after(end))
		{
		//	System.out.println(""InSlot-false Compare="" + compare + "" after end "" + end);
			return false;
		}

		//	start					x---|
		if (!endTime && compare.equals(start))
		{
		//	System.out.println(""InSlot-true Compare="" + compare + "" = Start="" + start);
			return true;
		}

		//
		//	end						|---x
		if (endTime && compare.equals(end))
		{
		//	System.out.println(""InSlot-true Compare="" + compare + "" = End="" + end);
			return true;
		}
		//	between start/end		|-x-|
		if (compare.before(end))
		{
		//	System.out.println(""InSlot-true Compare="" + compare + "" before end "" + end);
			return true;
		}
		return false;
	}	//	inSlot
"
org.compiere.model.MAssignmentSlot.compareTo,MAssignmentSlot.java,"int compareTo(MAssignmentSlot slot)
	{
		if (slot == null)
			return -1;

		//	Start Date
		int result = getStartTime().compareTo(slot.getStartTime());
		if (result != 0)
			return result;
		//	Status
		result = slot.getStatus() - getStatus();
		if (result != 0)
			return result;
		//	End Date
		result = getEndTime().compareTo(slot.getEndTime());
		if (result != 0)
			return result;
		//	Name
		result = getName().compareTo(slot.getName());
		if (result != 0)
			return result;
		//	Description
		return getDescription().compareTo(slot.getDescription());
	}	//	compare
"
org.compiere.model.MAssignmentSlot.equals,MAssignmentSlot.java,"boolean equals(Object obj)
	{
		if (obj instanceof MAssignmentSlot)
		{
			MAssignmentSlot cmp = (MAssignmentSlot)obj;
			if (m_startTime.equals(cmp.getStartTime())
				&& m_endTime.equals(cmp.getEndTime())
				&& m_status == cmp.getStatus()
				&& m_name.equals(cmp.getName())
				&& m_description.equals(cmp.getDescription()))
				return true;
		}
		return false;
	}	//	equals
"
org.compiere.model.MAssignmentSlot.hashCode,MAssignmentSlot.java,"int hashCode()
	{
		return m_startTime.hashCode() + m_endTime.hashCode() + m_status
			+ m_name.hashCode() + m_description.hashCode();
	}	//	hashCode
"
org.compiere.model.MDunningRun.getLevel,MDunningRun.java,"MDunningLevel getLevel()
	{
		if (m_level == null)
			m_level = new MDunningLevel (getCtx(), getC_DunningLevel_ID(), get_Trx());
		return m_level;
	}	//	getLevel
"
org.compiere.model.MDunningRun.getEntries,MDunningRun.java,"MDunningRunEntry[] getEntries (boolean requery) 
	{
		return getEntries(requery, false);
	}
"
org.compiere.model.MDunningRun.getEntries,MDunningRun.java,"MDunningRunEntry[] getEntries (boolean requery, boolean onlyInvoices)
	{
		if (m_entries != null && !requery)
			return m_entries;
		
		String sql = ""SELECT * FROM C_DunningRunEntry WHERE C_DunningRun_ID=?"";
		ArrayList<MDunningRunEntry> list = new ArrayList<MDunningRunEntry>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getC_DunningRun_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MDunningRunEntry thisEntry = new MDunningRunEntry(getCtx(), rs, get_Trx());
				if (!(onlyInvoices && thisEntry.hasInvoices()))
					list.add (new MDunningRunEntry(getCtx(), rs, get_Trx()));
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		m_entries = new MDunningRunEntry[list.size ()];
		list.toArray (m_entries);
		return m_entries;
	}	//	getEntries
"
org.compiere.model.MDunningRun.deleteEntries,MDunningRun.java,"boolean deleteEntries(boolean force)
	{
		getEntries(true);
		for (MDunningRunEntry entry : m_entries) {
			entry.delete(force);
		}
		boolean ok = getEntries(true).length == 0;
		if (ok)
			m_entries = null;
		return ok;
	}	//	deleteEntries
"
org.compiere.model.MDunningRun.getEntry,MDunningRun.java,"MDunningRunEntry getEntry (int C_BPartner_ID, int C_Currency_ID, int SalesRep_ID)
	{
		// TODO: Related BP
		int C_BPartnerRelated_ID = C_BPartner_ID;
		//
		getEntries(false);
		for (MDunningRunEntry entry : m_entries) {
			if (entry.getC_BPartner_ID() == C_BPartnerRelated_ID)
				return entry;
		}
		//	New Entry
		MDunningRunEntry entry = new MDunningRunEntry (this);
		MBPartner bp = new MBPartner (getCtx(), C_BPartnerRelated_ID, get_Trx());
		entry.setBPartner(bp, true);	//	AR hardcoded
		//
		if (entry.getSalesRep_ID() == 0)
			entry.setSalesRep_ID (SalesRep_ID);
		entry.setC_Currency_ID (C_Currency_ID);
		//
		m_entries = null;
		return entry;
	}	//	getEntry
"
org.compiere.model.MBankStatement.getLines,MBankStatement.java,"MBankStatementLine[] getLines (boolean requery)
 	{
		if ((m_lines != null) && !requery)
			return m_lines;
		//
 		ArrayList<MBankStatementLine> list = new ArrayList<MBankStatementLine>();
 		String sql = ""SELECT * FROM C_BankStatementLine ""
 			+ ""WHERE C_BankStatement_ID=?""
 			+ ""ORDER BY Line"";
 		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getC_BankStatement_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add (new MBankStatementLine(getCtx(), rs, get_Trx()));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""getLines"", e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

		MBankStatementLine[] retValue = new MBankStatementLine[list.size()];
		list.toArray(retValue);
		return retValue;
 	}	//	getLines
"
org.compiere.model.MBankStatement.addDescription,MBankStatement.java,"void addDescription (String description)
	{
		String desc = getDescription();
		if (desc == null)
			setDescription(description);
		else
			setDescription(desc + "" | "" + description);
	}	//	addDescription
"
org.compiere.model.MBankStatement.setProcessed,MBankStatement.java,"void setProcessed (boolean processed)
	{
		super.setProcessed (processed);
		if (get_ID() == 0)
			return;
		String sql = ""UPDATE C_BankStatementLine SET Processed='""
			+ (processed ? ""Y"" : ""N"")
			+ ""' WHERE C_BankStatement_ID="" + getC_BankStatement_ID();
		int noLine = DB.executeUpdate(sql, get_Trx());
		m_lines = null;
		log.fine(""setProcessed - "" + processed + "" - Lines="" + noLine);
	}	//	setProcessed
"
org.compiere.model.MBankStatement.setAD_Org_ID,MBankStatement.java,"void setAD_Org_ID (String oldAD_Org_ID,
			String newAD_Org_ID, int windowNo) throws Exception
	{
		// reset bank account when org is changed
		setC_BankAccount_ID(1);
	}	//	setAD_Org_ID
"
org.compiere.model.MBankStatement.getBankAccount,MBankStatement.java,"MBankAccount getBankAccount()
	{
		return MBankAccount.get(getCtx(), getC_BankAccount_ID());
	}	//	getBankAccount
"
org.compiere.model.MBankStatement.setC_BankAccount_ID,MBankStatement.java,"void setC_BankAccount_ID(int C_BankAccount_ID)
	{
		super.setC_BankAccount_ID(C_BankAccount_ID);
	}
"
org.compiere.model.MBankStatement.setC_BankAccount_ID,MBankStatement.java,"void setC_BankAccount_ID (String oldC_BankAccount_ID,
			String newC_BankAccount_ID, int windowNo) throws Exception
	{
		if ((newC_BankAccount_ID == null) || (newC_BankAccount_ID.length() == 0))
			return;
		int C_BankAccount_ID = Integer.parseInt(newC_BankAccount_ID);
		if (C_BankAccount_ID == 0)
			return;
		setC_BankAccount_ID(C_BankAccount_ID);
		//
		MBankAccount ba = getBankAccount();
		setBeginningBalance(ba.getCurrentBalance());
	}	//	setC_BankAccount_ID
"
org.compiere.model.MBankStatement.getDocumentNo,MBankStatement.java,"String getDocumentNo()
	{
		return getName();
	}	//	getDocumentNo
"
org.compiere.model.MBankStatement.getDocumentInfo,MBankStatement.java,"String getDocumentInfo()
	{
		return getBankAccount().getName() + "" "" + getDocumentNo();
	}	//	getDocumentInfo
"
org.compiere.model.MBankStatement.createPDF,MBankStatement.java,"File createPDF ()
	{
		try
		{
			File temp = File.createTempFile(get_TableName()+get_ID()+""_"", "".pdf"");
			return createPDF (temp);
		}
		catch (Exception e)
		{
			log.severe(""Could not create PDF - "" + e.getMessage());
		}
		return null;
	}	//	getPDF
"
org.compiere.model.MBankStatement.createPDF,MBankStatement.java,"File createPDF (File file)
	{
	//	ReportEngine re = ReportEngine.get (getCtx(), ReportEngine.INVOICE, getC_Invoice_ID());
	//	if (re == null)
			return null;
	//	return re.getPDF(file);
	}	//	createPDF
"
org.compiere.model.MBankStatement.beforeSave,MBankStatement.java,"boolean beforeSave (boolean newRecord)
	{
		setEndingBalance(getBeginningBalance().add(getStatementDifference()));
		return true;
	}	//	beforeSave
"
org.compiere.model.MBankStatement.processIt,MBankStatement.java,"boolean processIt (String processAction)
	{
		m_processMsg = null;
		DocumentEngine engine = new DocumentEngine (this, getDocStatus());
		return engine.processIt (processAction, getDocAction());
	}	//	processIt
"
org.compiere.model.MBankStatement.unlockIt,MBankStatement.java,"boolean unlockIt()
	{
		log.info(""unlockIt - "" + toString());
		setProcessing(false);
		return true;
	}	//	unlockIt
"
org.compiere.model.MBankStatement.invalidateIt,MBankStatement.java,"boolean invalidateIt()
	{
		log.info(""invalidateIt - "" + toString());
		setDocAction(DOCACTION_Prepare);
		return true;
	}	//	invalidateIt
"
org.compiere.model.MBankStatement.prepareIt,MBankStatement.java,"String prepareIt()
	{
		log.info(toString());
		m_processMsg = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_BEFORE_PREPARE);
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;

		MBankStatementLine[] lines = getLines(true);
		if (lines.length == 0)
		{
			m_processMsg = ""@NoLines@"";
			return DocActionConstants.STATUS_Invalid;
		}
		//	Std Period open?
		m_processMsg = MPeriod.isOpen(this, lines, getStatementDate(), MDocBaseType.DOCBASETYPE_BankStatement);
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;

		for (MBankStatementLine line : lines) {
			if( (line.getC_Invoice_ID() != 0) && (line.getC_Payment_ID() == 0) )
			{
				m_processMsg = ""@LineHasInvoiceButNoPayment@"";
				return DocActionConstants.STATUS_Invalid;
			}
		}


		//	Lines
		BigDecimal total = Env.ZERO;
		Timestamp minDate = getStatementDate();
		Timestamp maxDate = minDate;
		for (MBankStatementLine line : lines) {
			total = total.add(line.getStmtAmt());
			if (line.getDateAcct().before(minDate))
				minDate = line.getDateAcct();
			if (line.getDateAcct().after(maxDate))
				maxDate = line.getDateAcct();
		}
		setStatementDifference(total);
		setEndingBalance(getBeginningBalance().add(total));
		m_processMsg = MPeriod.isOpen(this, lines, minDate, MDocBaseType.DOCBASETYPE_BankStatement);
		if (m_processMsg == null)
			m_processMsg = MPeriod.isOpen(this, lines, maxDate, MDocBaseType.DOCBASETYPE_BankStatement);
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;

		m_justPrepared = true;
		if (!DOCACTION_Complete.equals(getDocAction()))
			setDocAction(DOCACTION_Complete);
		return DocActionConstants.STATUS_InProgress;
	}	//	prepareIt
"
org.compiere.model.MBankStatement.approveIt,MBankStatement.java,"boolean  approveIt()
	{
		log.info(""approveIt - "" + toString());
		setIsApproved(true);
		return true;
	}	//	approveIt
"
org.compiere.model.MBankStatement.rejectIt,MBankStatement.java,"boolean rejectIt()
	{
		log.info(""rejectIt - "" + toString());
		setIsApproved(false);
		return true;
	}	//	rejectIt
"
org.compiere.model.MBankStatement.completeIt,MBankStatement.java,"String completeIt()
	{
		//	Re-Check
		if (!m_justPrepared)
		{
			String status = prepareIt();
			if (!DocActionConstants.STATUS_InProgress.equals(status))
				return status;
		}
		//	Implicit Approval
		if (!isApproved())
			approveIt();
		log.info(toString());

		//	Set Payment reconciled
		MBankStatementLine[] lines = getLines(m_justPrepared);
		for (MBankStatementLine line : lines)
		{
			if (line.getC_Payment_ID() != 0)
			{
				MPayment payment = new MPayment (getCtx(), line.getC_Payment_ID(), get_Trx());
				payment.setIsReconciled(true);
				payment.save(get_Trx());
			}
		}
		//	Update Bank Account
		MBankAccount ba = MBankAccount.get(getCtx(), getC_BankAccount_ID());
		ba.setCurrentBalance(getEndingBalance());
		ba.save(get_Trx());

		//	User Validation
		String valid = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_AFTER_COMPLETE);
		if (valid != null)
		{
			m_processMsg = valid;
			return DocActionConstants.STATUS_Invalid;
		}
		//
		setProcessed(true);
		setDocAction(DOCACTION_Close);
		return DocActionConstants.STATUS_Completed;
	}	//	completeIt
"
org.compiere.model.MBankStatement.voidIt,MBankStatement.java,"boolean voidIt()
	{
		log.info(toString());
		if (DOCSTATUS_Closed.equals(getDocStatus())
			|| DOCSTATUS_Reversed.equals(getDocStatus())
			|| DOCSTATUS_Voided.equals(getDocStatus()))
		{
			m_processMsg = ""Document Closed: "" + getDocStatus();
			setDocAction(DOCACTION_None);
			return false;
		}

		MBankStatementLine[] lines = getLines(true);
		//	Not Processed
		if (DOCSTATUS_Drafted.equals(getDocStatus())
			|| DOCSTATUS_Invalid.equals(getDocStatus())
			|| DOCSTATUS_InProgress.equals(getDocStatus())
			|| DOCSTATUS_Approved.equals(getDocStatus())
			|| DOCSTATUS_NotApproved.equals(getDocStatus()) )
			;
		//	Std Period open?
		else
		{
			m_processMsg = MPeriod.isOpen(this, lines, getStatementDate(), MDocBaseType.DOCBASETYPE_BankStatement);
			if (m_processMsg != null)
				return false;
			if (MFactAcct.delete(Table_ID, getC_BankStatement_ID(), get_Trx()) < 0)
				return false;	//	could not delete
		}

		//	Set lines to 0
		for (MBankStatementLine line : lines) {
			//	BigDecimal old = line.getStmtAmt();
			if (line.getStmtAmt().compareTo(Env.ZERO) != 0)
			{
				String description = Msg.getMsg(getCtx(), ""Voided"") + "" (""
					+ Msg.translate(getCtx(), ""StmtAmt"") + ""="" + line.getStmtAmt();
				if (line.getTrxAmt().compareTo(Env.ZERO) != 0)
					description += "", "" + Msg.translate(getCtx(), ""TrxAmt"") + ""="" + line.getTrxAmt();
				if (line.getChargeAmt().compareTo(Env.ZERO) != 0)
					description += "", "" + Msg.translate(getCtx(), ""ChargeAmt"") + ""="" + line.getChargeAmt();
				if (line.getInterestAmt().compareTo(Env.ZERO) != 0)
					description += "", "" + Msg.translate(getCtx(), ""InterestAmt"") + ""="" + line.getInterestAmt();
				description += "")"";
				line.addDescription(description);
				//
				line.setStmtAmt(Env.ZERO);
				line.setTrxAmt(Env.ZERO);
				line.setChargeAmt(Env.ZERO);
				line.setInterestAmt(Env.ZERO);
				line.save(get_Trx());
				//
				if (line.getC_Payment_ID() != 0)
				{
					MPayment payment = new MPayment (getCtx(), line.getC_Payment_ID(), get_Trx());
					payment.setIsReconciled(false);
					payment.save(get_Trx());
				}
			}
		}
		addDescription(Msg.getMsg(getCtx(), ""Voided""));
		BigDecimal voidedDifference = getStatementDifference();
		setStatementDifference(Env.ZERO);

		if (isProcessed())
		{
			//	Update Bank Account only if document was Completed previously
			MBankAccount ba = MBankAccount.get(getCtx(), getC_BankAccount_ID());
			ba.setCurrentBalance( ba.getCurrentBalance().subtract( voidedDifference ) );
			ba.save(get_Trx());
		}

		setProcessed(true);
		setDocAction(DOCACTION_None);
		return true;
	}	//	voidIt
"
org.compiere.model.MBankStatement.closeIt,MBankStatement.java,"boolean closeIt()
	{
		log.info(""closeIt - "" + toString());

		setDocAction(DOCACTION_None);
		return true;
	}	//	closeIt
"
org.compiere.model.MBankStatement.reverseCorrectIt,MBankStatement.java,"boolean reverseCorrectIt()
	{
		log.info(""reverseCorrectIt - "" + toString());
		return false;
	}	//	reverseCorrectionIt
"
org.compiere.model.MBankStatement.reverseAccrualIt,MBankStatement.java,"boolean reverseAccrualIt()
	{
		log.info(""reverseAccrualIt - "" + toString());
		return false;
	}	//	reverseAccrualIt
"
org.compiere.model.MBankStatement.reActivateIt,MBankStatement.java,"boolean reActivateIt()
	{
		log.info(""reActivateIt - "" + toString());
		return false;
	}	//	reActivateIt
"
org.compiere.model.MBankStatement.getSummary,MBankStatement.java,"String getSummary()
	{
		StringBuffer sb = new StringBuffer();
		sb.append(getName());
		//	: Total Lines = 123.00 (#1)
		sb.append("": "")
			.append(Msg.translate(getCtx(),""StatementDifference"")).append(""="").append(getStatementDifference())
			.append("" (#"").append(getLines(false).length).append("")"");
		//	 - Description
		if ((getDescription() != null) && (getDescription().length() > 0))
			sb.append("" - "").append(getDescription());
		return sb.toString();
	}	//	getSummary
"
org.compiere.model.MBankStatement.getProcessMsg,MBankStatement.java,"String getProcessMsg()
	{
		return m_processMsg;
	}	//	getProcessMsg
"
org.compiere.model.MBankStatement.getDoc_User_ID,MBankStatement.java,"int getDoc_User_ID()
	{
		return getUpdatedBy();
	}	//	getDoc_User_ID
"
org.compiere.model.MBankStatement.getApprovalAmt,MBankStatement.java,"BigDecimal getApprovalAmt()
	{
		return getStatementDifference();
	}	//	getApprovalAmt
"
org.compiere.model.MBankStatement.getC_Currency_ID,MBankStatement.java,"int getC_Currency_ID()
	{
	//	MPriceList pl = MPriceList.get(getCtx(), getM_PriceList_ID());
	//	return pl.getC_Currency_ID();
		return 0;
	}	//	getC_Currency_ID
"
org.compiere.model.MProjectType.get,MProjectType.java,"MProjectType get (Ctx ctx, int C_ProjectType_ID)
	{
		Integer key = Integer.valueOf (C_ProjectType_ID);
		MProjectType retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MProjectType (ctx, C_ProjectType_ID, null);
		if (retValue.get_ID() != 0)
			s_cache.put (key, retValue);
		return retValue;
	} //	get
"
org.compiere.model.MProjectType.toString,MProjectType.java,"String toString()
	{
		StringBuffer sb = new StringBuffer (""MProjectType["")
			.append(get_ID())
			.append(""-"").append(getName())
			.append(""]"");
		return sb.toString();
	}	//	toString
"
org.compiere.model.MProjectType.getPhases,MProjectType.java,"MProjectTypePhase[] getPhases()
	{
		ArrayList<MProjectTypePhase> list = new ArrayList<MProjectTypePhase>();
		String sql = ""SELECT * FROM C_Phase WHERE C_ProjectType_ID=? ORDER BY SeqNo"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getC_ProjectType_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MProjectTypePhase (getCtx(), rs, get_Trx()));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			log.log(Level.SEVERE, sql, ex);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;
		//
		MProjectTypePhase[] retValue = new MProjectTypePhase[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getPhases
"
org.compiere.model.MProjectType.getSqlPI,MProjectType.java,"String getSqlPI (MGoalRestriction[] restrictions, 
		String MeasureScope, String MeasureDataType, Timestamp reportDate, MRole role)
	{
		String dateColumn = ""Created"";
		String orgColumn = ""AD_Org_ID"";
		String bpColumn = ""C_BPartner_ID"";
		String pColumn = null;
		//	PlannedAmt -> PlannedQty -> Count
		StringBuffer sb = new StringBuffer(""SELECT COALESCE(SUM(PlannedAmt),COALESCE(SUM(PlannedQty),COUNT(*))) ""
			+ ""FROM C_Project WHERE C_ProjectType_ID="" + getC_ProjectType_ID()
			+ "" AND Processed<>'Y')"");
		//	Date Restriction
		
		if (X_PA_Measure.MEASUREDATATYPE_QtyAmountInTime.equals(MeasureDataType)
			&& !X_PA_Goal.MEASUREDISPLAY_Total.equals(MeasureScope))
		{
			if (reportDate == null)
				reportDate = new Timestamp(System.currentTimeMillis());
			DB.TO_DATE(reportDate);
			String trunc = ""D"";
			if (X_PA_Goal.MEASUREDISPLAY_Year.equals(MeasureScope))
				trunc = ""Y"";
			else if (X_PA_Goal.MEASUREDISPLAY_Quarter.equals(MeasureScope))
				trunc = ""Q"";
			else if (X_PA_Goal.MEASUREDISPLAY_Month.equals(MeasureScope))
				trunc = ""MM"";
			else if (X_PA_Goal.MEASUREDISPLAY_Week.equals(MeasureScope))
				trunc = ""W"";
		//	else if (MGoal.MEASUREDISPLAY_Day.equals(MeasureDisplay))
		//		;
			sb.append("" AND TRUNC("")
				.append(dateColumn).append("",'"").append(trunc).append(""')=TRUNC("")
				.append(DB.TO_DATE(reportDate)).append("",'"").append(trunc).append(""')"");
		}	//	date
		//
		String sql = MMeasureCalc.addRestrictions(sb.toString(), false, restrictions, role, 
			""C_Project"", orgColumn, bpColumn, pColumn);
		
		log.fine(sql);
		return sql;
	}	//	getSql
"
org.compiere.model.MProjectType.getSqlBarChart,MProjectType.java,"String getSqlBarChart (MGoalRestriction[] restrictions, 
		String MeasureDisplay, String MeasureDataType, 
		Timestamp startDate, MRole role)
	{
		String dateColumn = ""Created"";
		String orgColumn = ""AD_Org_ID"";
		String bpColumn = ""C_BPartner_ID"";
		String pColumn = null;
		//
		StringBuffer sb = new StringBuffer(""SELECT COALESCE(SUM(PlannedAmt),COALESCE(SUM(PlannedQty),COUNT(*))), "");
		String orderBy = null;
		String groupBy = null;
		//
		if (X_PA_Measure.MEASUREDATATYPE_QtyAmountInTime.equals(MeasureDataType)
			&& !X_PA_Goal.MEASUREDISPLAY_Total.equals(MeasureDisplay))
		{
			String trunc = ""D"";
			if (X_PA_Goal.MEASUREDISPLAY_Year.equals(MeasureDisplay))
				trunc = ""Y"";
			else if (X_PA_Goal.MEASUREDISPLAY_Quarter.equals(MeasureDisplay))
				trunc = ""Q"";
			else if (X_PA_Goal.MEASUREDISPLAY_Month.equals(MeasureDisplay))
				trunc = ""MM"";
			else if (X_PA_Goal.MEASUREDISPLAY_Week.equals(MeasureDisplay))
				trunc = ""W"";
		//	else if (MGoal.MEASUREDISPLAY_Day.equals(MeasureDisplay))
		//		;
			orderBy = ""TRUNC("" + dateColumn + "",'"" + trunc + ""')"";
			groupBy = orderBy + "", 0 "";
			sb.append(groupBy)
				.append(""FROM C_Project "");
		}
		else
		{
			orderBy = ""p.SeqNo""; 
			groupBy = ""COALESCE(p.Name,TO_NCHAR('-')), p.C_Phase_ID, p.SeqNo "";
			sb.append(groupBy)
				.append(""FROM C_Project LEFT OUTER JOIN C_Phase p ON (C_Project.C_Phase_ID=p.C_Phase_ID) "");
		}
		//	Where
		sb.append(""WHERE C_Project.C_ProjectType_ID="").append(getC_ProjectType_ID())
			.append("" AND C_Project.Processed<>'Y'"");
		//	Date Restriction
		if (startDate != null
			&& !X_PA_Goal.MEASUREDISPLAY_Total.equals(MeasureDisplay))
		{
			String dateString = DB.TO_DATE(startDate);
			sb.append("" AND "").append(dateColumn)
				.append("">="").append(dateString);
		}	//	date
		//
		String sql = MMeasureCalc.addRestrictions(sb.toString(), false, restrictions, role, 
			""C_Project"", orgColumn, bpColumn, pColumn);
		if (groupBy != null)
			sql += "" GROUP BY "" + groupBy + "" ORDER BY "" + orderBy;
		//
		log.fine(sql);
		return sql;
	}	//	getSqlBarChart
"
org.compiere.model.MProjectType.getQuery,MProjectType.java,"Query getQuery(MGoalRestriction[] restrictions, 
		String MeasureDisplay, Timestamp date, int C_Phase_ID, MRole role)
	{
		String dateColumn = ""Created"";
		String orgColumn = ""AD_Org_ID"";
		String bpColumn = ""C_BPartner_ID"";
		String pColumn = null;
		//
		Query query = new Query(""C_Project"");
		query.addRangeRestriction(""C_ProjectType_ID"", ""="", getC_ProjectType_ID());
		//
		String where = null;
		if (C_Phase_ID != 0)
			where = ""C_Phase_ID="" + C_Phase_ID;
		else
		{
			String trunc = ""D"";
			if (X_PA_Goal.MEASUREDISPLAY_Year.equals(MeasureDisplay))
				trunc = ""Y"";
			else if (X_PA_Goal.MEASUREDISPLAY_Quarter.equals(MeasureDisplay))
				trunc = ""Q"";
			else if (X_PA_Goal.MEASUREDISPLAY_Month.equals(MeasureDisplay))
				trunc = ""MM"";
			else if (X_PA_Goal.MEASUREDISPLAY_Week.equals(MeasureDisplay))
				trunc = ""W"";
		//	else if (MGoal.MEASUREDISPLAY_Day.equals(MeasureDisplay))
		//		trunc = ""D"";
			where = ""TRUNC("" + dateColumn + "",'"" + trunc
				+ ""')=TRUNC("" + DB.TO_DATE(date) + "",'"" + trunc + ""')"";
		}
		String sql = MMeasureCalc.addRestrictions(where + "" AND Processed<>'Y' "",
			true, restrictions, role, 
			""C_Project"", orgColumn, bpColumn, pColumn);
		query.addRestriction(sql);
		query.setRecordCount(1);
		return query;
	}	//	getQuery
"
org.compiere.model.MBank.get,MBank.java,"MBank get (Ctx ctx, int C_Bank_ID)
	{
		Integer key = Integer.valueOf (C_Bank_ID);
		MBank retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MBank (ctx, C_Bank_ID, null);
		if (retValue.get_ID() != 0)
			s_cache.put (key, retValue);
		return retValue;
	} //	get
"
org.compiere.model.MBank.getByRoutingNo,MBank.java,"MBank[] getByRoutingNo (Ctx ctx, String routingNo)
	{
		String sql = ""SELECT * FROM C_Bank WHERE RoutingNo LIKE ? AND IsActive='Y'"";
		ArrayList<MBank> list = new ArrayList<MBank>();
		PreparedStatement pstmt = null;
		try 
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setString(1, routingNo);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) 
			{
				list.add(new MBank(ctx, rs, null));
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		} 
		catch (Exception e) 
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try {
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		} catch (Exception e) {
			pstmt = null;
		}
		
		MBank[] retValue = new MBank[list.size()];
		list.toArray(retValue);
		return retValue;
	}
"
org.compiere.model.MBank.getVerificationClass,MBank.java,"BankVerificationInterface getVerificationClass()
	{
		if (m_verify == null && !m_verifySearched)
		{
			String className = getBankVerificationClass();
			if (className == null || className.length() == 0)
				className = MClientInfo.get (getCtx(), getAD_Client_ID()).getBankVerificationClass();
			if (className != null && className.length() > 0)
			{
				try
				{
					Class<?> clazz = Class.forName(className);
					m_verify = (BankVerificationInterface)clazz.newInstance();
				}
				catch (Exception e)
				{
					log.log (Level.SEVERE, className, e);
				}
			}
			m_verifySearched = true;
		}
		return m_verify;
	}	//	getVerificationClass
"
org.compiere.model.MBank.getC_Country_ID,MBank.java,"int getC_Country_ID()
	{
		if (m_loc == null)
			m_loc = MLocation.get (getCtx(), getC_Location_ID(), null);
		if (m_loc == null)
			return 0;
		return m_loc.getC_Country_ID();
	}	//	getC_Country_ID
"
org.compiere.model.MBank.toString,MBank.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MBank["");
		sb.append (get_ID ()).append (""-"").append(getName ()).append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MBank.beforeSave,MBank.java,"boolean beforeSave(boolean newRecord)
	{
		BankVerificationInterface verify = getVerificationClass();
		if (verify != null)
		{
			String errorMsg = verify.verifyRoutingNo (getC_Country_ID(), getRoutingNo());
			if (errorMsg != null)
			{
				log.saveError(""Error"", ""@Invalid@ @RoutingNo@ "" + errorMsg);
				return false;
			}
			errorMsg = verify.verifySwiftCode (getSwiftCode());
			if (errorMsg != null)
			{
				log.saveError(""Error"", ""@Invalid@ @SwiftCode@ "" + errorMsg);
				return false;
			}
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MComponentRegUpdate.getLastUpdate_ID,MComponentRegUpdate.java,"int getLastUpdate_ID (int AD_ComponentReg_ID)
	{
		int AD_ComponentRegUpdate_ID = 0;
		PreparedStatement pstmt = null;
		String sql = ""SELECT MAX(AD_ComponentRegUpdate_ID) FROM AD_ComponentRegUpdate ""
			+ ""WHERE AD_ComponentReg_ID=?"";
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, AD_ComponentReg_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				AD_ComponentRegUpdate_ID = rs.getInt(1);
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return AD_ComponentRegUpdate_ID;
	}	//	getLastUpdate_ID
"
org.compiere.model.MAlert.getRules,MAlert.java,"MAlertRule[] getRules (boolean reload)
	{
		if (m_rules != null && !reload)
			return m_rules;
		String sql = ""SELECT * FROM AD_AlertRule ""
			+ ""WHERE AD_Alert_ID=?"";
		ArrayList<MAlertRule> list = new ArrayList<MAlertRule>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, getAD_Alert_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MAlertRule (getCtx(), rs, null));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		m_rules = new MAlertRule[list.size ()];
		list.toArray (m_rules);
		return m_rules;
	}	//	getRules
"
org.compiere.model.MAlert.getRecipients,MAlert.java,"MAlertRecipient[] getRecipients (boolean reload)
	{
		if (m_recipients != null && !reload)
			return m_recipients;
		String sql = ""SELECT * FROM AD_AlertRecipient "" 
			+ ""WHERE AD_Alert_ID=?"";
		ArrayList<MAlertRecipient> list = new ArrayList<MAlertRecipient>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, getAD_Alert_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MAlertRecipient (getCtx(), rs, null));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		m_recipients = new MAlertRecipient[list.size ()];
		list.toArray (m_recipients);
		return m_recipients;
	}	//	getRecipients
"
org.compiere.model.MAlert.getFirstAD_Role_ID,MAlert.java,"int getFirstAD_Role_ID()
	{
		getRecipients(false);
		for (MAlertRecipient element : m_recipients) {
			if (element.getAD_Role_ID() != -1)
				return element.getAD_Role_ID();
		}
		return -1;
	}	//	getForstAD_Role_ID
"
org.compiere.model.MAlert.getFirstUserAD_Role_ID,MAlert.java,"int getFirstUserAD_Role_ID()
	{
		getRecipients(false);
		int AD_User_ID = getFirstAD_User_ID();
		if (AD_User_ID != -1)
		{
			MUserRoles[] urs = MUserRoles.getOfUser(getCtx(), AD_User_ID);
			for (MUserRoles element : urs) {
				if (element.isActive())
					return element.getAD_Role_ID();
			}
		}
		return -1;
	}	//	getFirstUserAD_Role_ID
"
org.compiere.model.MAlert.getFirstAD_User_ID,MAlert.java,"int getFirstAD_User_ID()
	{
		getRecipients(false);
		for (MAlertRecipient element : m_recipients) {
			if (element.getAD_User_ID() != -1)
				return element.getAD_User_ID();
		}
		return -1;
	}	//	getFirstAD_User_ID
"
org.compiere.model.MAlert.toString,MAlert.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MAlert["");
		sb.append(get_ID())
			.append(""-"").append(getName())
			.append("",Valid="").append(isValid());
		if (m_rules != null)
			sb.append("",Rules="").append(m_rules.length);
		if (m_recipients != null)
			sb.append("",Recipients="").append(m_recipients.length);
		sb.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MContainerElement.get,MContainerElement.java,"MContainerElement get(Ctx ctx, int CM_ContainerElement_ID, Trx trx) {
		MContainerElement thisContainerElement = null;
		String sql = ""SELECT * FROM CM_Container_Element WHERE CM_Container_Element_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, trx);
			pstmt.setInt(1, CM_ContainerElement_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				thisContainerElement = (new MContainerElement(ctx, rs, trx));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return thisContainerElement;
	}
"
org.compiere.model.MContainerElement.getParent,MContainerElement.java,"MContainer getParent()
	{
		if (m_parent == null)
			m_parent = new MContainer (getCtx(), getCM_Container_ID(), get_Trx());
		return m_parent;

		/** No reason to do this ?? - should never return null - always there - JJ
		int[] thisContainer = MContainer.getAllIDs(""CM_Container"",""CM_Container_ID="" + this.getCM_Container_ID(), get_TrxName());
		if (thisContainer != null) 
		{
			if (thisContainer.length==1)
				return new MContainer(getCtx(), thisContainer[0], get_TrxName());
		}
		return null;
		**/
	}	//	getContainer
"
org.compiere.model.MContainerElement.afterSave,MContainerElement.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!success)
			return success;
		reIndex(newRecord);
		return success;
	}	//	afterSave
"
org.compiere.model.MContainerElement.reIndex,MContainerElement.java,"void reIndex(boolean newRecord)
	{
		if (getParent().isIndexed ()) {
			int CMWebProjectID = 0;
			if (getParent()!=null)
				CMWebProjectID = getParent().getCM_WebProject_ID();
			String [] toBeIndexed = new String[3];
			toBeIndexed[0] = this.getName();
			toBeIndexed[1] = this.getDescription();
			toBeIndexed[2] = this.getContentHTML();
			MIndex.reIndex (newRecord, toBeIndexed, getCtx(), 
				getAD_Client_ID(), get_Table_ID(), get_ID(), CMWebProjectID, this.getUpdated());
		}
		if (!getParent().isIndexed () && !newRecord)
			MIndex.cleanUp (get_Trx(), getAD_Client_ID(), get_Table_ID(), get_ID());
	}	// reIndex
"
org.compiere.model.MRfQTopicSubscriber.getRestrictions,MRfQTopicSubscriber.java,"MRfQTopicSubscriberOnly[] getRestrictions (boolean requery)
	{
		if (m_restrictions != null && !requery)
			return m_restrictions;
		
		ArrayList<MRfQTopicSubscriberOnly> list = new ArrayList<MRfQTopicSubscriberOnly>();
		String sql = ""SELECT * FROM C_RfQ_TopicSubscriberOnly WHERE C_RfQ_TopicSubscriber_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getC_RfQ_TopicSubscriber_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add(new MRfQTopicSubscriberOnly(getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		m_restrictions = new MRfQTopicSubscriberOnly[list.size ()];
		list.toArray (m_restrictions);
		return m_restrictions;
	}	//	getRestrictions
"
org.compiere.model.MRfQTopicSubscriber.isIncluded,MRfQTopicSubscriber.java,"boolean isIncluded (int M_Product_ID)
	{
		//	No restrictions
		if (getRestrictions(false).length == 0)
			return true;
		
		for (MRfQTopicSubscriberOnly restriction : m_restrictions) {
			if (!restriction.isActive())
				continue;
			//	Product
			if (restriction.getM_Product_ID() == M_Product_ID)
				return true;
			//	Product Category
			if (MProductCategory.isCategory(restriction.getM_Product_Category_ID(), M_Product_ID))
				return true;
		}
		//	must be on ""positive"" list
		return false;
	}	//	isIncluded
"
org.compiere.model.MProductPricing.calculatePrice,MProductPricing.java,"boolean calculatePrice ()
	{
		if ((m_M_Product_ID == 0)
			|| ((m_found != null) && !m_found.booleanValue()))	//	previously not found
			return false;
		//	Customer Pricing Engine
		if (!m_calculated)
			m_calculated = calculateUser();

		String sql = ""SELECT IsBOM FROM M_Product""
			+ "" WHERE M_Product_ID=?""
			+ "" AND IsBOM= 'Y' AND IsVerified='Y'"";
		String isBOM = DB.getSQLValueString(null, sql, m_M_Product_ID);

		if ((isBOM != null) && (""Y"".equals(isBOM)))
			m_isBOM = true;

		//	Price List Version known
		if (!m_calculated)
			m_calculated = calculatePLV();
		//	Price List known
		if (!m_calculated)
			m_calculated = calculatePL();
		//	Base Price List used
		if (!m_calculated)
			m_calculated = calculateBPL();
		//	Set UOM, Prod.Category
		if (!m_calculated)
			setBaseInfo();
		//	User based Discount
		if (m_calculated)
			calculateDiscount();
		setPrecision();		//	from Price List
		//
		m_found = Boolean.valueOf (m_calculated);
		return m_calculated;
	}	//	calculatePrice
"
org.compiere.model.MProductPricing.calculateUser,MProductPricing.java,"boolean calculateUser()
	{
		if (m_userPricing == null)
		{
			MClientInfo client = MClientInfo.get(Env.getCtx(), m_AD_Client_ID);
			String userClass = client.getPricingEngineClass();
			try
			{
				Class<?> clazz = null;
				if (userClass != null)
					clazz = Class.forName(userClass);
				if (clazz != null)
					m_api = (UserPricingInterface)clazz.newInstance();
			}
			catch (Exception e)
			{
				log.warning(""No User Pricing Engine ("" + userClass + "") "" + e.toString());
				m_userPricing = Boolean.FALSE;
				return false;
			}
			m_userPricing = m_api != null;
		}
		if (!m_userPricing.booleanValue())
			return false;

		UserPricingVO vo = null;
		if (m_api != null)
		{
			try
			{
				vo = m_api.price(m_AD_Org_ID, m_isSOTrx, m_M_PriceList_ID,
					m_C_BPartner_ID, m_M_Product_ID, m_Qty, m_PriceDate);
			}
			catch (Exception e)
			{
				log.warning(""Error User Pricing - "" + e.toString());
				return false;
			}
		}

		if ((vo != null) && vo.isValid())
		{
			m_PriceList = vo.getPriceList();
			m_PriceStd = vo.getPriceStd();
			m_PriceLimit = vo.getPriceLimit();
			m_found = true;
			//	Optional
			m_C_UOM_ID = vo.getC_UOM_ID();
			m_C_Currency_ID = vo.getC_Currency_ID();
			m_enforcePriceLimit = vo.isEnforcePriceLimit();
			if ((m_C_UOM_ID == 0) || (m_C_Currency_ID == 0))
				setBaseInfo();
		}
		return false;
	}	//	calculateUser
"
org.compiere.model.MProductPricing.calculatePLV,MProductPricing.java,"boolean calculatePLV()
	{
		if ((m_M_Product_ID == 0) || (m_M_PriceList_Version_ID == 0))
			return false;

        if (m_isBOM && !checkBOM())
        {
        	log.finer(""BOM Component not found on PLV"");
            return m_calculated;
        }

		//
		String sql = ""SELECT bomPriceStd(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceStd,""	//	1
			+ "" bomPriceList(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceList,""		//	2
			+ "" bomPriceLimit(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceLimit,""	//	3
			+ "" p.C_UOM_ID,pv.ValidFrom,pl.C_Currency_ID,p.M_Product_Category_ID,""	//	4..7
			+ "" pl.EnforcePriceLimit, pl.IsTaxIncluded ""	// 8..9
			+ ""FROM M_Product p""
			+ "" INNER JOIN M_ProductPrice pp ON (p.M_Product_ID=pp.M_Product_ID)""
			+ "" INNER JOIN  M_PriceList_Version pv ON (pp.M_PriceList_Version_ID=pv.M_PriceList_Version_ID)""
			+ "" INNER JOIN M_PriceList pl ON (pv.M_PriceList_ID=pl.M_PriceList_ID) ""
			+ ""WHERE pv.IsActive='Y'""
			+ "" AND pp.IsActive='Y'""
			+ "" AND pl.IsActive='Y'""
			+ "" AND p.M_Product_ID=?""				//	#1
			+ "" AND pv.M_PriceList_Version_ID=?"";	//	#2
		m_calculated = false;
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, m_M_Product_ID);
			pstmt.setInt(2, m_M_PriceList_Version_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				//	Prices
				m_PriceStd = rs.getBigDecimal(1);
				if (rs.wasNull())
					m_PriceStd = Env.ZERO;
				m_PriceList = rs.getBigDecimal(2);
				if (rs.wasNull())
					m_PriceList = Env.ZERO;
				m_PriceLimit = rs.getBigDecimal(3);
				if (rs.wasNull())
					m_PriceLimit = Env.ZERO;
				//
				m_C_UOM_ID = rs.getInt(4);
				m_C_Currency_ID = rs.getInt(6);
				m_M_Product_Category_ID = rs.getInt(7);
				m_enforcePriceLimit = ""Y"".equals(rs.getString(8));
				m_isTaxIncluded = ""Y"".equals(rs.getString(9));
				//
				log.fine(""M_PriceList_Version_ID="" + m_M_PriceList_Version_ID + "" - "" + m_PriceStd);
				m_calculated = true;
			}
			rs.close();
			pstmt.close();
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
			m_calculated = false;
		}
		return m_calculated;
	}	//	calculatePLV
"
org.compiere.model.MProductPricing.calculatePL,MProductPricing.java,"boolean calculatePL()
	{
		if (m_M_Product_ID == 0)
			return false;

		//	Get Price List
		/**
		if (m_M_PriceList_ID == 0)
		{
			String sql = ""SELECT M_PriceList_ID, IsTaxIncluded ""
				+ ""FROM M_PriceList pl""
				+ "" INNER JOIN M_Product p ON (pl.AD_Client_ID=p.AD_Client_ID) ""
				+ ""WHERE M_Product_ID=? ""
				+ ""ORDER BY ASCII(IsDefault) DESC"";
			PreparedStatement pstmt = null;
			try
			{
				pstmt = DB.prepareStatement(sql);
				pstmt.setInt(1, m_M_Product_ID);
				ResultSet rs = pstmt.executeQuery();
				if (rs.next())
				{
					m_M_PriceList_ID = rs.getInt(1);
					m_isTaxIncluded = ""Y"".equals(rs.getString(2));
				}
				rs.close();
				pstmt.close();
				pstmt = null;
			}
			catch (Exception e)
			{
				log.log(Level.SEVERE, ""calculatePL (PL)"", e);
			}
			finally
			{
				try
				{
					if (pstmt != null)
						pstmt.close ();
				}
				catch (Exception e)
				{}
				pstmt = null;
			}
		}
		/** **/
		if (m_M_PriceList_ID == 0)
		{
			log.log(Level.WARNING, ""No PriceList"");
			Trace.printStack();
			return false;
		}

		//	Get Price List Version
		String sql = ""SELECT pv.M_PriceList_Version_ID,""	//	1
			+ "" p.C_UOM_ID,pv.ValidFrom,pl.C_Currency_ID,p.M_Product_Category_ID,pl.EnforcePriceLimit ""	// 2..6
			+ ""FROM M_Product p""
			+ "" INNER JOIN M_ProductPrice pp ON (p.M_Product_ID=pp.M_Product_ID)""
			+ "" INNER JOIN  M_PriceList_Version pv ON (pp.M_PriceList_Version_ID=pv.M_PriceList_Version_ID)""
			+ "" INNER JOIN M_PriceList pl ON (pv.M_PriceList_ID=pl.M_PriceList_ID) ""
			+ ""WHERE pv.IsActive='Y'""
			+ "" AND pp.IsActive='Y'""
			+ "" AND pl.IsActive='Y'""
			+ "" AND p.M_Product_ID=?""				//	#1
			+ "" AND pv.M_PriceList_ID=?""			//	#2
			+ "" ORDER BY pv.ValidFrom DESC"";
		m_calculated = false;
		boolean foundPriceListVersion = false;
		if (m_PriceDate == null)
			m_PriceDate = new Timestamp (System.currentTimeMillis());
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, m_M_Product_ID);
			pstmt.setInt(2, m_M_PriceList_ID);
			ResultSet rs = pstmt.executeQuery();
			while (!foundPriceListVersion && rs.next())
			{
				Timestamp plDate = rs.getTimestamp(3);
				//	we have the price list
				//	if order date is after or equal PriceList validFrom
				if ((plDate == null) || !m_PriceDate.before(plDate))
				{
					m_M_PriceList_Version_ID = rs.getInt(1);
					m_C_UOM_ID = rs.getInt (2);
					m_C_Currency_ID = rs.getInt (4);
					m_M_Product_Category_ID = rs.getInt(5);
					m_enforcePriceLimit = ""Y"".equals(rs.getString(6));
					//
					log.fine(""M_PriceList_ID="" + m_M_PriceList_ID
						+ ""("" + plDate + "")"" + "", M_PriceList_Version_ID="" + m_M_PriceList_Version_ID);
					foundPriceListVersion = true;
					break;
				}
			}
			rs.close();
			pstmt.close();
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
			m_calculated = false;
			log.finer(""SQL Error (PL)"");
			return m_calculated;
		}

		if (!foundPriceListVersion)
			return m_calculated;  // false
		else
		{
			if (m_isBOM && !checkBOM())
			{
				log.finer(""BOM Component not found on PL"");
				return m_calculated;  // false
			}

            // Get prices using price list version
            sql = ""SELECT bomPriceStd(?, ?) AS PriceStd,""       	// 1, 2
                + "" bomPriceList(?, ?) AS PriceList,""           	// 3, 4
                + "" bomPriceLimit(?, ?) AS PriceLimit FROM DUAL"";	// 5, 6
            try
            {
                PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
                pstmt.setInt(1, m_M_Product_ID);
                pstmt.setInt(2, m_M_PriceList_Version_ID);
                pstmt.setInt(3, m_M_Product_ID);
                pstmt.setInt(4, m_M_PriceList_Version_ID);
                pstmt.setInt(5, m_M_Product_ID);
                pstmt.setInt(6, m_M_PriceList_Version_ID);
                ResultSet rs = pstmt.executeQuery();
                if (rs.next())
                {
                	m_PriceStd = rs.getBigDecimal (1);
                    if (rs.wasNull ())
                    	m_PriceStd = Env.ZERO;
                    m_PriceList = rs.getBigDecimal (2);
                    if (rs.wasNull ())
                    	m_PriceList = Env.ZERO;
                    m_PriceLimit = rs.getBigDecimal (3);
                    if (rs.wasNull ())
                    	m_PriceLimit = Env.ZERO;
                    m_calculated = true;
                }
                rs.close();
                pstmt.close();
                pstmt = null;
            }
            catch (Exception e)
            {
                log.log(Level.SEVERE, sql, e);
                m_calculated = false;
                return m_calculated;
            }

            if (!m_calculated)
            	log.finer(""Not found (PL)"");
            return m_calculated;
		}
	}	//	calculatePL
"
org.compiere.model.MProductPricing.calculateBPL,MProductPricing.java,"boolean calculateBPL()
	{
		if ((m_M_Product_ID == 0) || (m_M_PriceList_ID == 0))
			return false;
		//
		String sql = ""SELECT bomPriceStd(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceStd,""	//	1
			+ "" bomPriceList(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceList,""		//	2
			+ "" bomPriceLimit(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceLimit,""	//	3
			+ "" p.C_UOM_ID,pv.ValidFrom,pl.C_Currency_ID,p.M_Product_Category_ID,""	//	4..7
			+ "" pl.EnforcePriceLimit, pl.IsTaxIncluded ""	// 8..9
			+ ""FROM M_Product p""
			+ "" INNER JOIN M_ProductPrice pp ON (p.M_Product_ID=pp.M_Product_ID)""
			+ "" INNER JOIN  M_PriceList_Version pv ON (pp.M_PriceList_Version_ID=pv.M_PriceList_Version_ID)""
			+ "" INNER JOIN M_PriceList bpl ON (pv.M_PriceList_ID=bpl.M_PriceList_ID)""
			+ "" INNER JOIN M_PriceList pl ON (bpl.M_PriceList_ID=pl.BasePriceList_ID) ""
			+ ""WHERE pv.IsActive='Y'""
			+ "" AND pp.IsActive='Y'""
			+ "" AND pl.IsActive='Y'""
			+ "" AND bpl.IsActive='Y'""
			+ "" AND p.M_Product_ID=?""				//	#1
			+ "" AND pl.M_PriceList_ID=? ""			//	#2
			+ ""ORDER BY pv.ValidFrom DESC"";
		m_calculated = false;
		if (m_PriceDate == null)
			m_PriceDate = new Timestamp (System.currentTimeMillis());
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, m_M_Product_ID);
			pstmt.setInt(2, m_M_PriceList_ID);
			ResultSet rs = pstmt.executeQuery();
			while (!m_calculated && rs.next())
			{
				Timestamp plDate = rs.getTimestamp(5);
				//	we have the price list
				//	if order date is after or equal PriceList validFrom
				if ((plDate == null) || !m_PriceDate.before(plDate))
				{
					//	Prices
					m_PriceStd = rs.getBigDecimal (1);
					if (rs.wasNull ())
						m_PriceStd = Env.ZERO;
					m_PriceList = rs.getBigDecimal (2);
					if (rs.wasNull ())
						m_PriceList = Env.ZERO;
					m_PriceLimit = rs.getBigDecimal (3);
					if (rs.wasNull ())
						m_PriceLimit = Env.ZERO;
					//
					m_C_UOM_ID = rs.getInt (4);
					m_C_Currency_ID = rs.getInt (6);
					m_M_Product_Category_ID = rs.getInt(7);
					m_enforcePriceLimit = ""Y"".equals(rs.getString(8));
					m_isTaxIncluded = ""Y"".equals(rs.getString(9));
					//
					log.fine(""M_PriceList_ID="" + m_M_PriceList_ID
						+ ""("" + plDate + "")"" + "" - "" + m_PriceStd);
					m_calculated = true;
					break;
				}
			}
			rs.close();
			pstmt.close();
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
			m_calculated = false;
		}
		if (!m_calculated)
			log.finer(""Not found (BPL)"");
		return m_calculated;
	}	//	calculateBPL
"
org.compiere.model.MProductPricing.checkBOM,MProductPricing.java,"boolean checkBOM()
    {
    	boolean retvalue = false;

    	if ((m_M_Product_ID == 0) || (m_M_PriceList_Version_ID == 0))
    		return retvalue;

    	String sql = ""SELECT bomPriceCheck(?, ?) FROM DUAL"";
		PreparedStatement pstmt = null;
    	try
        {
    		pstmt = DB.prepareStatement(sql, (Trx) null);
            pstmt.setInt(1, m_M_Product_ID);
            pstmt.setInt(2, m_M_PriceList_Version_ID);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next())
            {
            	String result = rs.getString(1);
                if (result.equals(""Y""))
                {
                	retvalue = true;
                }
            }
            rs.close();
            pstmt.close();
         }
         catch (Exception e)
         {
        	 log.log(Level.SEVERE, sql, e);
             retvalue = false;
         }
 		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

         return retvalue;
    }           // checkBOM
"
org.compiere.model.MProductPricing.setBaseInfo,MProductPricing.java,"void setBaseInfo()
	{
		if (m_M_Product_ID == 0)
			return;
		//
		String sql = ""SELECT C_UOM_ID, M_Product_Category_ID FROM M_Product WHERE M_Product_ID=?"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, m_M_Product_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				m_C_UOM_ID = rs.getInt (1);
				m_M_Product_Category_ID = rs.getInt(2);
			}
			rs.close();
			pstmt.close();
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
	}	//	setBaseInfo
"
org.compiere.model.MProductPricing.isTaxIncluded,MProductPricing.java,"boolean isTaxIncluded()
	{
		return m_isTaxIncluded;
	}	//	isTaxIncluded
"
org.compiere.model.MProductPricing.calculateDiscount,MProductPricing.java,"void calculateDiscount()
	{
		m_discountSchema = false;
		if ((m_C_BPartner_ID == 0) || (m_M_Product_ID == 0))
			return;

		int M_DiscountSchema_ID = 0;
		BigDecimal FlatDiscount = null;
		String sql = ""SELECT COALESCE(p.M_DiscountSchema_ID,g.M_DiscountSchema_ID),""
			+ "" COALESCE(p.PO_DiscountSchema_ID,g.PO_DiscountSchema_ID), p.FlatDiscount ""
			+ ""FROM C_BPartner p""
			+ "" INNER JOIN C_BP_Group g ON (p.C_BP_Group_ID=g.C_BP_Group_ID) ""
			+ ""WHERE p.C_BPartner_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, m_C_BPartner_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
			{
				M_DiscountSchema_ID = rs.getInt(m_isSOTrx ? 1 : 2);
				FlatDiscount = rs.getBigDecimal(3);
				if (FlatDiscount == null)
					FlatDiscount = Env.ZERO;
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//	No Discount Schema
		if (M_DiscountSchema_ID == 0)
			return;

		MDiscountSchema sd = MDiscountSchema.get(Env.getCtx(), M_DiscountSchema_ID);	//	not correct
		if ((sd.get_ID() == 0) || (m_PriceDate==null))
			return;


		if (sd.getValidFrom().after(m_PriceDate))
			return;
		//
		m_discountSchema = true;
		m_PriceStd = sd.calculatePrice(m_Qty, m_PriceStd, m_M_Product_ID,
			m_M_Product_Category_ID, FlatDiscount);

	}	//	calculateDiscount
"
org.compiere.model.MProductPricing.getDiscount,MProductPricing.java,"BigDecimal getDiscount()
	{
		BigDecimal Discount = Env.ZERO;
		if (m_PriceList.intValue() != 0)
			Discount = new BigDecimal ((m_PriceList.doubleValue() - m_PriceStd.doubleValue())
				/ m_PriceList.doubleValue() * 100.0);
		if (Discount.scale() > 2)
			Discount = Discount.setScale(2, BigDecimal.ROUND_HALF_UP);
		return Discount;
	}	//	getDiscount
"
org.compiere.model.MProductPricing.getLineAmt,MProductPricing.java,"BigDecimal getLineAmt(int currencyPrecision)
	{
		BigDecimal amt = getPriceStd().multiply(m_Qty);
		//	Currency Precision
		if ((currencyPrecision >= 0) && (amt.scale() > currencyPrecision))
			amt = amt.setScale(currencyPrecision, BigDecimal.ROUND_HALF_UP);
		return amt;
	}	//	getLineAmt
"
org.compiere.model.MProductPricing.getM_Product_ID,MProductPricing.java,"int getM_Product_ID()
	{
		return m_M_Product_ID;
	}
"
org.compiere.model.MProductPricing.getM_PriceList_ID,MProductPricing.java,"int getM_PriceList_ID()
	{
		return m_M_PriceList_ID;
	}	//	getM_PriceList_ID
"
org.compiere.model.MProductPricing.setM_PriceList_ID,MProductPricing.java,"void setM_PriceList_ID(int M_PriceList_ID)
	{
		m_M_PriceList_ID = M_PriceList_ID;
		m_calculated = false;
	}	//	setM_PriceList_ID
"
org.compiere.model.MProductPricing.getM_PriceList_Version_ID,MProductPricing.java,"int getM_PriceList_Version_ID()
	{
		return m_M_PriceList_Version_ID;
	}	//	getM_PriceList_Version_ID
"
org.compiere.model.MProductPricing.setM_PriceList_Version_ID,MProductPricing.java,"void setM_PriceList_Version_ID (int M_PriceList_Version_ID)
	{
		m_M_PriceList_Version_ID = M_PriceList_Version_ID;
		m_calculated = false;
	}	//	setM_PriceList_Version_ID
"
org.compiere.model.MProductPricing.getPriceDate,MProductPricing.java,"Timestamp getPriceDate()
	{
		return m_PriceDate;
	}	//	getPriceDate
"
org.compiere.model.MProductPricing.setPriceDate,MProductPricing.java,"void setPriceDate(Timestamp priceDate)
	{
		m_PriceDate = priceDate;
		m_calculated = false;
	}	//	setPriceDate
"
org.compiere.model.MProductPricing.setPriceDate,MProductPricing.java,"void setPriceDate(long priceTime)
	{
		setPriceDate (new Timestamp(priceTime));
	}	//	setPriceDate
"
org.compiere.model.MProductPricing.setPrecision,MProductPricing.java,"void setPrecision()
	{
		if (m_M_PriceList_ID != 0)
			m_precision = MPriceList.getPricePrecision(Env.getCtx(), getM_PriceList_ID());
	}	//	setPrecision
"
org.compiere.model.MProductPricing.getPrecision,MProductPricing.java,"int getPrecision()
	{
		return m_precision;
	}	//	getPrecision
"
org.compiere.model.MProductPricing.round,MProductPricing.java,"BigDecimal round (BigDecimal bd)
	{
		if ((m_precision >= 0	//	-1 = no rounding
)
			&& (bd.scale() > m_precision))
			return bd.setScale(m_precision, BigDecimal.ROUND_HALF_UP);
		return bd;
	}	//	round
"
org.compiere.model.MProductPricing.getC_UOM_ID,MProductPricing.java,"int getC_UOM_ID()
	{
		if (!m_calculated)
			calculatePrice();
		return m_C_UOM_ID;
	}
"
org.compiere.model.MProductPricing.getPriceList,MProductPricing.java,"BigDecimal getPriceList()
	{
		if (!m_calculated)
			calculatePrice();
		return round(m_PriceList);
	}
"
org.compiere.model.MProductPricing.getPriceStd,MProductPricing.java,"BigDecimal getPriceStd()
	{
		if (!m_calculated)
			calculatePrice();
		return round(m_PriceStd);
	}
"
org.compiere.model.MProductPricing.getPriceLimit,MProductPricing.java,"BigDecimal getPriceLimit()
	{
		if (!m_calculated)
			calculatePrice();
		return round(m_PriceLimit);
	}
"
org.compiere.model.MProductPricing.getC_Currency_ID,MProductPricing.java,"int getC_Currency_ID()
	{
		if (!m_calculated)
			calculatePrice();
		return m_C_Currency_ID;
	}
"
org.compiere.model.MProductPricing.isEnforcePriceLimit,MProductPricing.java,"boolean isEnforcePriceLimit()
	{
		if (!m_calculated)
			calculatePrice();
		return m_enforcePriceLimit;
	}	//	isEnforcePriceLimit
"
org.compiere.model.MProductPricing.isDiscountSchema,MProductPricing.java,"boolean isDiscountSchema()
	{
		return m_discountSchema;
	}	//	isDiscountSchema
"
org.compiere.model.MProductPricing.isCalculated,MProductPricing.java,"boolean isCalculated()
	{
		return m_calculated;
	}	//	isCalculated
"
org.compiere.model.MInventoryLineMA.get,MInventoryLineMA.java,"MInventoryLineMA[] get (Ctx ctx, int M_InventoryLine_ID, Trx trx)
	{
		ArrayList<MInventoryLineMA> list = new ArrayList<MInventoryLineMA>();
		String sql = ""SELECT * FROM M_InventoryLineMA WHERE M_InventoryLine_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, M_InventoryLine_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MInventoryLineMA (ctx, rs, trx));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		MInventoryLineMA[] retValue = new MInventoryLineMA[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MInventoryLineMA.deleteInventoryMA,MInventoryLineMA.java,"int deleteInventoryMA (int M_Inventory_ID, Trx trx)
	{
		String sql = ""DELETE FROM M_InventoryLineMA ma WHERE EXISTS ""
			+ ""(SELECT * FROM M_InventoryLine l WHERE l.M_InventoryLine_ID=ma.M_InventoryLine_ID""
			+ "" AND M_Inventory_ID="" + M_Inventory_ID + "")"";
		return DB.executeUpdate(sql, trx);
	}	//	deleteInventoryMA
"
org.compiere.model.MInventoryLineMA.deleteInventoryLineMA,MInventoryLineMA.java,"int deleteInventoryLineMA (int M_InventoryLine_ID, Trx trx)
	{
		String sql = ""DELETE FROM M_InventoryLineMA ma WHERE EXISTS ""
			+ ""(SELECT * FROM M_InventoryLine l WHERE l.M_InventoryLine_ID=ma.M_InventoryLine_ID""
			+ "" AND M_InventoryLine_ID="" + M_InventoryLine_ID + "")"";
		return DB.executeUpdate(sql, trx);
	}	//	deleteInventoryMA
"
org.compiere.model.MInventoryLineMA.toString,MInventoryLineMA.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MInventoryLineMA["");
		sb.append(""M_InventoryLine_ID="").append(getM_InventoryLine_ID())
			.append("",M_AttributeSetInstance_ID="").append(getM_AttributeSetInstance_ID())
			.append("", Qty="").append(getMovementQty())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MBPartner.findAll,MBPartner.java,"ArrayList<MBPartner> findAll (Ctx ctx, String bpValue, String bpName, String taxID,
		String postal, String city, 
		String uValue, String uName, String uPhone, String email, Timestamp birthday,
		boolean andLogic, int maxRows)
	{
		ArrayList<MBPartner> list = new ArrayList<MBPartner>();
		int AD_Client_ID = ctx.getAD_Client_ID();
		StringBuffer sql = new StringBuffer(""SELECT * FROM C_BPartner bp WHERE bp.AD_Client_ID=?"");
		StringBuffer where = new StringBuffer();
		if (""%"".equals(bpValue))
			bpValue = null;
		if (!Util.isEmpty(bpValue))
			where.append(DB.getSqlWhere(""UPPER(bp.Value)"", bpValue.toUpperCase()));
		if (""%"".equals(bpName))
			bpName = null;
		if (!Util.isEmpty(bpName))
		{
			if (where.length() > 0)
				where.append(andLogic ? "" AND "" : "" OR "");
			where.append(DB.getSqlWhere(""UPPER(bp.Name)"", bpName.toUpperCase()));
		}
		if (""%"".equals(taxID))
			taxID = null;
		if (!Util.isEmpty(taxID))
		{
			if (where.length() > 0)
				where.append(andLogic ? "" AND "" : "" OR "");
			where.append(DB.getSqlWhere(""bp.TaxID"", taxID));
		}
		//	Location
		if (""%"".equals(postal))
			postal = null;
		if (""%"".equals(city))
			city = null;
		if (!Util.isEmpty(postal) || !Util.isEmpty(city))
		{
			if (where.length() > 0)
				where.append(andLogic ? "" AND "" : "" OR "");
			where.append(""EXISTS (SELECT * FROM C_BPartner_Location bpl INNER JOIN C_Location loc ON (bpl.C_Location_ID=loc.C_Location_ID) WHERE bp.C_BPartner_ID=bpl.C_BPartner_ID	AND ("");
			if (!Util.isEmpty(postal))
				where.append(DB.getSqlWhere(""loc.Postal"", postal));
			if (!Util.isEmpty(postal) && !Util.isEmpty(city))
				where.append(andLogic ? "" AND "" : "" OR "");
			if (!Util.isEmpty(postal))
				where.append(DB.getSqlWhere(""UPPER(loc.City)"", city));
			where.append(""))"");
		}
		//	User
		if (""%"".equals(uValue))
			uValue = null;
		if (""%"".equals(uName))
			uName = null;
		if (""%"".equals(email))
			email = null;
		if (!Util.isEmpty(uValue) || !Util.isEmpty(uName) || !Util.isEmpty(email) || birthday != null)
		{
			if (where.length() > 0)
				where.append(andLogic ? "" AND "" : "" OR "");
			where.append(""EXISTS (SELECT * FROM AD_User u WHERE bp.C_BPartner_ID=u.C_BPartner_ID AND ("");
			boolean needAndOr = false;
			if (!Util.isEmpty(uValue))
			{
				where.append(DB.getSqlWhere(""UPPER(u.Value)"", uValue.toUpperCase()));
				needAndOr = true;
			}
			if (!Util.isEmpty(uName))
			{
				if (needAndOr)
					where.append(andLogic ? "" AND "" : "" OR "");
				where.append(DB.getSqlWhere(""UPPER(u.Name)"", uName.toUpperCase()));
				needAndOr = true;
			}
			if (!Util.isEmpty(email))
			{
				if (needAndOr)
					where.append(andLogic ? "" AND "" : "" OR "");
				where.append(DB.getSqlWhere(""UPPER(u.EMail)"", email.toUpperCase()));
				needAndOr = true;
			}
			if (birthday != null)
			{
				if (needAndOr)
					where.append(andLogic ? "" AND "" : "" OR "");
				where.append(DB.getSqlWhere(""u.Birthday"", birthday));
			}
			where.append(""))"");
		}
		if (where.length() > 0)
			sql.append("" AND ("").append(where).append("")"");
		
		MRole role = MRole.get(ctx, ctx.getAD_Role_ID(), ctx.getAD_User_ID(), false);
		String sql1 = role.addAccessSQL(sql.toString(), ""bp"", true, false);	// ro
		
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql1, (Trx) null);
			pstmt.setInt(1, AD_Client_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				list.add(new MBPartner(ctx, rs, null));
				if (list.size() >= maxRows)
					break;
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql1, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
        s_log.fine(""#"" + list.size());
        return list;
	}	//	getAll
"
org.compiere.model.MBPartner.getTemplate,MBPartner.java,"MBPartner getTemplate (Ctx ctx, int AD_Client_ID)
	{
		MBPartner template = getBPartnerCashTrx (ctx, AD_Client_ID);
		if (template == null)
			template = new MBPartner (ctx, 0, null);
		//	Reset
		if (template != null)
		{
			template.set_ValueNoCheck (""C_BPartner_ID"", Integer.valueOf(0));
			template.setValue ("""");
			template.setName ("""");
			template.setName2 (null);
			template.setDUNS("""");
			template.setFirstSale(null);
			//
			template.setSO_CreditLimit (Env.ZERO);
			template.setSO_CreditUsed (Env.ZERO);
			template.setTotalOpenBalance (Env.ZERO);
		//	s_template.setRating(null);
			//
			template.setActualLifeTimeValue(Env.ZERO);
			template.setPotentialLifeTimeValue(Env.ZERO);
			template.setAcqusitionCost(Env.ZERO);
			template.setShareOfCustomer(0);
			template.setSalesVolume(0);
		}
		return template;
	}	//	getTemplate
"
org.compiere.model.MBPartner.getBPartnerCashTrx,MBPartner.java,"MBPartner getBPartnerCashTrx (Ctx ctx, int AD_Client_ID)
	{
		MBPartner retValue = null;
		String sql = ""SELECT * FROM C_BPartner ""
			+ ""WHERE C_BPartner_ID IN (SELECT C_BPartnerCashTrx_ID FROM AD_ClientInfo WHERE AD_Client_ID=?)"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, AD_Client_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				retValue = new MBPartner (ctx, rs, null);
			else
				s_log.log(Level.SEVERE, ""Not found for AD_Client_ID="" + AD_Client_ID);
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		return retValue;
	}	//	getBPartnerCashTrx
"
org.compiere.model.MBPartner.get,MBPartner.java,"MBPartner get (Ctx ctx, String Value)
	{
		if (Value == null || Value.length() == 0)
			return null;
		MBPartner retValue = null;
		int AD_Client_ID = ctx.getAD_Client_ID();
		String sql = ""SELECT * FROM C_BPartner WHERE Value=? AND AD_Client_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setString(1, Value);
			pstmt.setInt(2, AD_Client_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				retValue = new MBPartner(ctx, rs, null);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return retValue;
	}	//	get
"
org.compiere.model.MBPartner.get,MBPartner.java,"MBPartner get (Ctx ctx, int C_BPartner_ID)
	{
		MBPartner retValue = null;
		int AD_Client_ID = ctx.getAD_Client_ID();
		String sql = ""SELECT * FROM C_BPartner WHERE C_BPartner_ID=? AND AD_Client_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_BPartner_ID);
			pstmt.setInt(2, AD_Client_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				retValue = new MBPartner(ctx, rs, null);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return retValue;
	}	//	get
"
org.compiere.model.MBPartner.getNotInvoicedAmt,MBPartner.java,"BigDecimal getNotInvoicedAmt (int C_BPartner_ID)
	{
		BigDecimal retValue = null;
		String sql = ""SELECT SUM(COALESCE(""
			+ ""currencyBase((ol.QtyDelivered-ol.QtyInvoiced)*ol.PriceActual,o.C_Currency_ID,o.DateOrdered, o.AD_Client_ID,o.AD_Org_ID) ,0)) ""
			+ ""FROM C_OrderLine ol""
			+ "" INNER JOIN C_Order o ON (ol.C_Order_ID=o.C_Order_ID) ""
			+ ""WHERE o.IsSOTrx='Y' AND Bill_BPartner_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, C_BPartner_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				retValue = rs.getBigDecimal(1);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return retValue;
	}	//	getNotInvoicedAmt
"
org.compiere.model.MBPartner.initTemplate,MBPartner.java,"boolean initTemplate (int AD_Client_ID)
	{
		if (AD_Client_ID == 0)
			throw new IllegalArgumentException (""Client_ID=0"");

		boolean success = true;
		String sql = ""SELECT * FROM C_BPartner ""
			+ ""WHERE C_BPartner_ID=(SELECT C_BPartnerCashTrx_ID FROM AD_ClientInfo WHERE AD_Client_ID=?)"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, AD_Client_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				success = load (rs);
			else
			{
				load(0, null);
				success = false;
				log.severe (""None found"");
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		setStandardDefaults();
		//	Reset
		set_ValueNoCheck (""C_BPartner_ID"", I_ZERO);
		setValue ("""");
		setName ("""");
		setName2(null);
		return success;
	}	//	getTemplate
"
org.compiere.model.MBPartner.getContacts,MBPartner.java,"MUser[] getContacts (boolean reload)
	{
		if (reload || m_contacts == null || m_contacts.length == 0)
			;
		else
			return m_contacts;
		//
		ArrayList<MUser> list = new ArrayList<MUser>();
		String sql = ""SELECT * FROM AD_User WHERE C_BPartner_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, getC_BPartner_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MUser (getCtx(), rs, null));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}

		m_contacts = new MUser[list.size()];
		list.toArray(m_contacts);
		return m_contacts;
	}	//	getContacts
"
org.compiere.model.MBPartner.getContact,MBPartner.java,"MUser getContact (int AD_User_ID)
	{
		MUser[] users = getContacts(false);
		if (users.length == 0)
			return null;
		for (int i = 0; AD_User_ID != 0 && i < users.length; i++)
		{
			if (users[i].getAD_User_ID() == AD_User_ID)
				return users[i];
		}
		return users[0];
	}	//	getContact
"
org.compiere.model.MBPartner.getLocations,MBPartner.java,"MBPartnerLocation[] getLocations (boolean reload)
	{
		if (reload || m_locations == null || m_locations.length == 0)
			;
		else
			return m_locations;
		//
		ArrayList<MBPartnerLocation> list = new ArrayList<MBPartnerLocation>();
		String sql = ""SELECT * FROM C_BPartner_Location WHERE C_BPartner_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getC_BPartner_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MBPartnerLocation (getCtx(), rs, get_Trx()));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}

		m_locations = new MBPartnerLocation[list.size()];
		list.toArray(m_locations);
		return m_locations;
	}	//	getLocations
"
org.compiere.model.MBPartner.getLocation,MBPartner.java,"MBPartnerLocation getLocation(int C_BPartner_Location_ID)
	{
		MBPartnerLocation[] locations = getLocations(false);
		if (locations.length == 0)
			return null;
		MBPartnerLocation retValue = null;
		for (MBPartnerLocation element : locations) {
			if (element.getC_BPartner_Location_ID() == C_BPartner_Location_ID)
				return element;
			if (retValue == null && element.isBillTo())
				retValue = element;
		}
		if (retValue == null)
			return locations[0];
		return retValue;
	}	//	getLocation
"
org.compiere.model.MBPartner.getBankAccounts,MBPartner.java,"MBPBankAccount[] getBankAccounts (boolean requery)
	{
		if (m_accounts != null && m_accounts.length >= 0 && !requery)	//	re-load
			return m_accounts;
		//
		ArrayList<MBPBankAccount> list = new ArrayList<MBPBankAccount>();
		String sql = ""SELECT * FROM C_BP_BankAccount WHERE C_BPartner_ID=? AND IsActive='Y'"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getC_BPartner_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MBPBankAccount (getCtx(), rs, get_Trx()));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}

		m_accounts = new MBPBankAccount[list.size()];
		list.toArray(m_accounts);
		return m_accounts;
	}	//	getBankAccounts
"
org.compiere.model.MBPartner.toString,MBPartner.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MBPartner["")
			.append(get_ID())
			.append(""-"").append(getValue())
			.append("",Name="").append(getName())
			.append("",OpenBalance="").append(getTotalOpenBalance())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MBPartner.setClientOrg,MBPartner.java,"void setClientOrg (int AD_Client_ID, int AD_Org_ID)
	{
		super.setClientOrg(AD_Client_ID, AD_Org_ID);
	}	//	setClientOrg
"
org.compiere.model.MBPartner.setAD_OrgBP_ID,MBPartner.java,"void setAD_OrgBP_ID (int AD_OrgBP_ID)
	{
		if (AD_OrgBP_ID == 0)
			super.setAD_OrgBP_ID (null);
		else
			super.setAD_OrgBP_ID (String.valueOf(AD_OrgBP_ID));
	}	//	setAD_OrgBP_ID
"
org.compiere.model.MBPartner.getAD_OrgBP_ID_Int,MBPartner.java,"int getAD_OrgBP_ID_Int() 
	{
		String org = super.getAD_OrgBP_ID();
		if (org == null)
			return 0;
		int AD_OrgBP_ID = 0;
		try
		{
			AD_OrgBP_ID = Integer.parseInt (org);
		}
		catch (Exception ex)
		{
			log.log(Level.SEVERE, org, ex);
		}
		return AD_OrgBP_ID;
	}	//	getAD_OrgBP_ID_Int
"
org.compiere.model.MBPartner.getPrimaryC_BPartner_Location_ID,MBPartner.java,"int getPrimaryC_BPartner_Location_ID()
	{
		if (m_primaryC_BPartner_Location_ID == null)
		{
			MBPartnerLocation[] locs = getLocations(false);
			for (int i = 0; m_primaryC_BPartner_Location_ID == null && i < locs.length; i++)
			{
				if (locs[i].isBillTo())
				{
					setPrimaryC_BPartner_Location_ID (locs[i].getC_BPartner_Location_ID());
					break;
				}
			}
			//	get first
			if (m_primaryC_BPartner_Location_ID == null && locs.length > 0)
				setPrimaryC_BPartner_Location_ID (locs[0].getC_BPartner_Location_ID()); 
		}
		if (m_primaryC_BPartner_Location_ID == null)
			return 0;
		return m_primaryC_BPartner_Location_ID.intValue();
	}	//	getPrimaryC_BPartner_Location_ID
"
org.compiere.model.MBPartner.getPrimaryC_BPartner_Location,MBPartner.java,"MBPartnerLocation getPrimaryC_BPartner_Location()
	{
		if (m_primaryC_BPartner_Location_ID == null)
		{
			m_primaryC_BPartner_Location_ID = getPrimaryC_BPartner_Location_ID();
		}
		if (m_primaryC_BPartner_Location_ID == null)
			return null;
		return new MBPartnerLocation(getCtx(), m_primaryC_BPartner_Location_ID, null);
	}	//	getPrimaryC_BPartner_Location
"
org.compiere.model.MBPartner.getPrimaryAD_User_ID,MBPartner.java,"int getPrimaryAD_User_ID()
	{
		if (m_primaryAD_User_ID == null)
		{
			MUser[] users = getContacts(false);
		//	for (int i = 0; i < users.length; i++)
		//	{
		//	}
			if (m_primaryAD_User_ID == null && users.length > 0)
				setPrimaryAD_User_ID(users[0].getAD_User_ID());
		}
		if (m_primaryAD_User_ID == null)
			return 0;
		return m_primaryAD_User_ID.intValue();
	}	//	getPrimaryAD_User_ID
"
org.compiere.model.MBPartner.setPrimaryC_BPartner_Location_ID,MBPartner.java,"void setPrimaryC_BPartner_Location_ID(int C_BPartner_Location_ID)
	{
		m_primaryC_BPartner_Location_ID = Integer.valueOf (C_BPartner_Location_ID);
	}	//	setPrimaryC_BPartner_Location_ID
"
org.compiere.model.MBPartner.setPrimaryAD_User_ID,MBPartner.java,"void setPrimaryAD_User_ID(int AD_User_ID)
	{
		m_primaryAD_User_ID = Integer.valueOf (AD_User_ID);
	}	//	setPrimaryAD_User_ID
"
org.compiere.model.MBPartner.setTotalOpenBalance,MBPartner.java,"void setTotalOpenBalance ()
	{
		BigDecimal SO_CreditUsed = null;
		BigDecimal TotalOpenBalance = null;
		String sql = ""SELECT ""
			//	SO Credit Used	= SO Invoices
			+ ""COALESCE((SELECT SUM(currencyBase(i.GrandTotal,i.C_Currency_ID,i.DateOrdered, i.AD_Client_ID,i.AD_Org_ID)) ""
				+ ""FROM C_Invoice_v i ""
				+ ""WHERE i.C_BPartner_ID=bp.C_BPartner_ID""
				+ "" AND i.IsSOTrx='Y' AND i.DocStatus IN('CO','CL')),0) ""
			//					- All SO Allocations
			+ ""-COALESCE((SELECT SUM(currencyBase(a.Amount+a.DiscountAmt+a.WriteOffAmt,i.C_Currency_ID,i.DateOrdered,a.AD_Client_ID,a.AD_Org_ID)) ""
				+ ""FROM C_AllocationLine a INNER JOIN C_Invoice i ON (a.C_Invoice_ID=i.C_Invoice_ID) ""
				+ ""INNER JOIN C_AllocationHdr h ON (a.C_AllocationHdr_ID = h.C_AllocationHdr_ID) ""
				+ ""WHERE a.C_BPartner_ID=bp.C_BPartner_ID AND a.IsActive='Y'""
				+ "" AND i.IsSOTrx='Y' AND h.DocStatus IN('CO','CL')),0) ""
			//					- Unallocated Receipts	= (All Receipts
			+ ""-(SELECT COALESCE(SUM(currencyBase(p.PayAmt+p.DiscountAmt+p.WriteOffAmt,p.C_Currency_ID,p.DateTrx,p.AD_Client_ID,p.AD_Org_ID)),0) "" 
				+ ""FROM C_Payment_v p ""
				+ ""WHERE p.C_BPartner_ID=bp.C_BPartner_ID""
				+ "" AND p.IsReceipt='Y' AND p.DocStatus IN('CO','CL')""
				+ "" AND p.C_Charge_ID IS NULL)"" 
			//											- All Receipt Allocations
			+ ""+(SELECT COALESCE(SUM(currencyBase(a.Amount+a.DiscountAmt+a.WriteOffAmt,i.C_Currency_ID,i.DateOrdered,a.AD_Client_ID,a.AD_Org_ID)),0) ""
				+ ""FROM C_AllocationLine a INNER JOIN C_Invoice i ON (a.C_Invoice_ID=i.C_Invoice_ID) ""
				+ ""INNER JOIN C_AllocationHdr h ON (a.C_AllocationHdr_ID = h.C_AllocationHdr_ID) ""
				+ ""WHERE a.C_BPartner_ID=bp.C_BPartner_ID""
				+ "" AND a.IsActive='Y' AND a.C_Payment_ID IS NOT NULL""
				+ "" AND i.IsSOTrx='Y' AND h.DocStatus IN('CO','CL')), ""

			//	Balance			= All Invoices
			+ ""COALESCE((SELECT SUM(currencyBase(i.GrandTotal*MultiplierAP,i.C_Currency_ID,i.DateOrdered, i.AD_Client_ID,i.AD_Org_ID)) ""
				+ ""FROM C_Invoice_v i ""
				+ ""WHERE i.C_BPartner_ID=bp.C_BPartner_ID""
				+ "" AND i.DocStatus IN('CO','CL')),0) ""
			//					- All Allocations
			+ ""-COALESCE((SELECT SUM(currencyBase(a.Amount+a.DiscountAmt+a.WriteOffAmt,i.C_Currency_ID,i.DateOrdered,a.AD_Client_ID,a.AD_Org_ID)) ""
				+ ""FROM C_AllocationLine a INNER JOIN C_Invoice i ON (a.C_Invoice_ID=i.C_Invoice_ID) ""
				+ ""INNER JOIN C_AllocationHdr h ON (a.C_AllocationHdr_ID = h.C_AllocationHdr_ID) ""
				+ ""WHERE a.C_BPartner_ID=bp.C_BPartner_ID AND a.IsActive='Y' AND h.DocStatus IN('CO','CL')),0) ""
			//					- Unallocated Receipts	= (All Receipts
			+ ""-(SELECT COALESCE(SUM(currencyBase(p.PayAmt+p.DiscountAmt+p.WriteOffAmt,p.C_Currency_ID,p.DateTrx,p.AD_Client_ID,p.AD_Org_ID)),0) "" 
				+ ""FROM C_Payment_v p ""
				+ ""WHERE p.C_BPartner_ID=bp.C_BPartner_ID""
				+ "" AND p.DocStatus IN('CO','CL')""
				+ "" AND p.C_Charge_ID IS NULL)"" 
			//											- All Allocations
			+ ""+(SELECT COALESCE(SUM(currencyBase(a.Amount+a.DiscountAmt+a.WriteOffAmt,i.C_Currency_ID,i.DateOrdered,a.AD_Client_ID,a.AD_Org_ID)),0) ""
				+ ""FROM C_AllocationLine a INNER JOIN C_Invoice i ON (a.C_Invoice_ID=i.C_Invoice_ID) ""
				+ ""INNER JOIN C_AllocationHdr h ON (a.C_AllocationHdr_ID = h.C_AllocationHdr_ID) ""
				+ ""WHERE a.C_BPartner_ID=bp.C_BPartner_ID""
				+ "" AND a.IsActive='Y' AND a.C_Payment_ID IS NOT NULL AND h.DocStatus IN('CO','CL')) ""
			//
			+ ""FROM C_BPartner bp ""
			+ ""WHERE C_BPartner_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getC_BPartner_ID());
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
			{
				SO_CreditUsed = rs.getBigDecimal(1);
				TotalOpenBalance = rs.getBigDecimal(2);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null; 
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		m_TotalOpenBalanceSet = true;
		String info = null;
		if (SO_CreditUsed != null)
		{
			info = ""SO_CreditUsed="" + SO_CreditUsed;
			super.setSO_CreditUsed (SO_CreditUsed);
		}
		
		if (TotalOpenBalance != null)
		{
			if (info != null)
				info += "", "";
			info += ""TotalOpenBalance="" + TotalOpenBalance;
			super.setTotalOpenBalance(TotalOpenBalance);
		}
		log.fine(info);
		setSOCreditStatus();
	}	//	setTotalOpenBalance
"
org.compiere.model.MBPartner.setActualLifeTimeValue,MBPartner.java,"void setActualLifeTimeValue()
	{
		BigDecimal ActualLifeTimeValue = null;
		String sql = ""SELECT ""
			+ ""COALESCE ((SELECT SUM(currencyBase(i.GrandTotal,i.C_Currency_ID,i.DateOrdered, i.AD_Client_ID,i.AD_Org_ID)) ""
				+ ""FROM C_Invoice_v i ""
				+ ""WHERE i.C_BPartner_ID=bp.C_BPartner_ID AND i.IsSOTrx='Y' AND i.DocStatus IN('CO','CL')),0) "" 
			+ ""FROM C_BPartner bp ""
			+ ""WHERE C_BPartner_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getC_BPartner_ID());
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				ActualLifeTimeValue = rs.getBigDecimal(1);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		if (ActualLifeTimeValue != null)
			super.setActualLifeTimeValue (ActualLifeTimeValue);
	}	//	setActualLifeTimeValue
"
org.compiere.model.MBPartner.getTotalOpenBalance,MBPartner.java,"BigDecimal getTotalOpenBalance (boolean calculate)
	{
		if (getTotalOpenBalance().signum() == 0 && calculate)
			setTotalOpenBalance();
		return super.getTotalOpenBalance ();
	}	//	getTotalOpenBalance
"
org.compiere.model.MBPartner.setSOCreditStatus,MBPartner.java,"void setSOCreditStatus ()
	{
		BigDecimal creditLimit = getSO_CreditLimit(); 
		//	Nothing to do
		if (SOCREDITSTATUS_NoCreditCheck.equals(getSOCreditStatus())
			|| SOCREDITSTATUS_CreditStop.equals(getSOCreditStatus())
			|| Env.ZERO.compareTo(creditLimit) == 0)
			return;

		//	Above Credit Limit
		if (creditLimit.compareTo(getTotalOpenBalance(!m_TotalOpenBalanceSet)) < 0)
			setSOCreditStatus(SOCREDITSTATUS_CreditHold);
		else
		{
			//	Above Watch Limit
			BigDecimal watchAmt = creditLimit.multiply(getCreditWatchRatio());
			if (watchAmt.compareTo(getTotalOpenBalance()) < 0)
				setSOCreditStatus(SOCREDITSTATUS_CreditWatch);
			else	//	is OK
				setSOCreditStatus(SOCREDITSTATUS_CreditOK);
		}
		log.fine(""SOCreditStatus="" + getSOCreditStatus());
	}	//	setSOCreditStatus
"
org.compiere.model.MBPartner.getSOCreditStatus,MBPartner.java,"String getSOCreditStatus (BigDecimal additionalAmt)
	{
		if (additionalAmt == null || additionalAmt.signum() == 0)
			return getSOCreditStatus();
		//
		BigDecimal creditLimit = getSO_CreditLimit(); 
		//	Nothing to do
		if (SOCREDITSTATUS_NoCreditCheck.equals(getSOCreditStatus())
			|| SOCREDITSTATUS_CreditStop.equals(getSOCreditStatus())
			|| Env.ZERO.compareTo(creditLimit) == 0)
			return getSOCreditStatus();

		//	Above (reduced) Credit Limit
		creditLimit = creditLimit.subtract(additionalAmt);
		if (creditLimit.compareTo(getTotalOpenBalance(!m_TotalOpenBalanceSet)) < 0)
			return SOCREDITSTATUS_CreditHold;
		
		//	Above Watch Limit
		BigDecimal watchAmt = creditLimit.multiply(getCreditWatchRatio());
		if (watchAmt.compareTo(getTotalOpenBalance()) < 0)
			return SOCREDITSTATUS_CreditWatch;
		
		//	is OK
		return SOCREDITSTATUS_CreditOK;
	}	//	getSOCreditStatus
"
org.compiere.model.MBPartner.getCreditWatchRatio,MBPartner.java,"BigDecimal getCreditWatchRatio()
	{
		return getBPGroup().getCreditWatchRatio();
	}	//	getCreditWatchRatio
"
org.compiere.model.MBPartner.isCreditStopHold,MBPartner.java,"boolean isCreditStopHold()
	{
		String status = getSOCreditStatus();
		return SOCREDITSTATUS_CreditStop.equals(status)
			|| SOCREDITSTATUS_CreditHold.equals(status);
	}	//	isCreditStopHold
"
org.compiere.model.MBPartner.setTotalOpenBalance,MBPartner.java,"void setTotalOpenBalance (BigDecimal TotalOpenBalance)
	{
		m_TotalOpenBalanceSet = false;
		super.setTotalOpenBalance (TotalOpenBalance);
	}	//	setTotalOpenBalance
"
org.compiere.model.MBPartner.getBPGroup,MBPartner.java,"MBPGroup getBPGroup()
	{
		if (m_group == null)
		{
			if (getC_BP_Group_ID() == 0)
				m_group = MBPGroup.getDefault(getCtx());
			else
				m_group = MBPGroup.get(getCtx(), getC_BP_Group_ID());
		}
		return m_group;
	}	//	getBPGroup
"
org.compiere.model.MBPartner.setBPGroup,MBPartner.java,"void setBPGroup(MBPGroup group)
	{
		m_group = group;
		if (m_group == null)
			return;
		setC_BP_Group_ID(m_group.getC_BP_Group_ID());
		if (m_group.getC_Dunning_ID() != 0)
			setC_Dunning_ID(m_group.getC_Dunning_ID());
		if (m_group.getM_PriceList_ID() != 0)
			setM_PriceList_ID(m_group.getM_PriceList_ID());
		if (m_group.getPO_PriceList_ID() != 0)
			setPO_PriceList_ID(m_group.getPO_PriceList_ID());
		if (m_group.getM_DiscountSchema_ID() != 0)
			setM_DiscountSchema_ID(m_group.getM_DiscountSchema_ID());
		if (m_group.getPO_DiscountSchema_ID() != 0)
			setPO_DiscountSchema_ID(m_group.getPO_DiscountSchema_ID());
		if (m_group.getPO_ReturnPolicy_ID() != 0)
			setPO_ReturnPolicy_ID(m_group.getPO_ReturnPolicy_ID());
	}	//	setBPGroup
"
org.compiere.model.MBPartner.getM_PriceList_ID,MBPartner.java,"int getM_PriceList_ID ()
	{
		int ii = super.getM_PriceList_ID();
		if (ii == 0)
			ii = getBPGroup().getM_PriceList_ID();
		return ii;
	}	//	getM_PriceList_ID
"
org.compiere.model.MBPartner.getPO_PriceList_ID,MBPartner.java,"int getPO_PriceList_ID ()
	{
		int ii = super.getPO_PriceList_ID();
		if (ii == 0)
			ii = getBPGroup().getPO_PriceList_ID();
		return ii;
	}	//
"
org.compiere.model.MBPartner.getM_DiscountSchema_ID,MBPartner.java,"int getM_DiscountSchema_ID ()
	{
		int ii = super.getM_DiscountSchema_ID ();
		if (ii == 0)
			ii = getBPGroup().getM_DiscountSchema_ID();
		return ii;
	}	//	getM_DiscountSchema_ID
"
org.compiere.model.MBPartner.getPO_DiscountSchema_ID,MBPartner.java,"int getPO_DiscountSchema_ID ()
	{
		int ii = super.getPO_DiscountSchema_ID ();
		if (ii == 0)
			ii = getBPGroup().getPO_DiscountSchema_ID();
		return ii;
	}	//	getPO_DiscountSchema_ID
"
org.compiere.model.MBPartner.getM_ReturnPolicy_ID,MBPartner.java,"int getM_ReturnPolicy_ID ()
	{
		int ii = super.getM_ReturnPolicy_ID();
		if (ii == 0)
			ii = getBPGroup().getM_ReturnPolicy_ID();
		if (ii == 0)
			ii = MReturnPolicy.getDefault(getCtx());
		return ii;
	}	//	getM_ReturnPolicy_ID
"
org.compiere.model.MBPartner.getPO_ReturnPolicy_ID,MBPartner.java,"int getPO_ReturnPolicy_ID ()
	{
		int ii = super.getPO_ReturnPolicy_ID();
		if (ii == 0)
			ii = getBPGroup().getPO_ReturnPolicy_ID();
		if (ii == 0)
			ii = MReturnPolicy.getDefault(getCtx());
		return ii;
	}	//	getPO_ReturnPolicy_ID
"
org.compiere.model.MBPartner.getC_ConsolidationReference_ID,MBPartner.java,"int getC_ConsolidationReference_ID ()
	{
		int ii = super.getC_ConsolidationReference_ID();
		if (ii == 0)
			ii = getBPGroup().getC_ConsolidationReference_ID();
		return ii;
	}	//	getPO_ReturnPolicy_ID
"
org.compiere.model.MBPartner.beforeSave,MBPartner.java,"boolean beforeSave (boolean newRecord)
	{
		if (newRecord || is_ValueChanged(""C_BP_Group_ID""))
		{
			MBPGroup grp = getBPGroup();
			if (grp == null)
			{
				log.saveWarning(""Error"", Msg.parseTranslation(getCtx(), ""@NotFound@:  @C_BP_Group_ID@""));
				return false;
			}
			setBPGroup(grp);	//	setDefaults
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MBPartner.afterSave,MBPartner.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (newRecord & success)
		{
			//	Accounting
			success = insert_Accounting(""C_BP_Customer_Acct"", 
				""C_BP_Group_Acct"", ""p.C_BP_Group_ID="" + getC_BP_Group_ID());
			if (success)
				success = insert_Accounting(""C_BP_Vendor_Acct"", 
					""C_BP_Group_Acct"", ""p.C_BP_Group_ID="" + getC_BP_Group_ID());
			if (success)
				success = insert_Accounting(""C_BP_Employee_Acct"", 
					""C_AcctSchema_Default"", null);
		}

		//	Value/Name change
		if (success && !newRecord 
			&& (is_ValueChanged(""Value"") || is_ValueChanged(""Name"")))
			MAccount.updateValueDescription(getCtx(), ""C_BPartner_ID="" + getC_BPartner_ID(), get_Trx());

		return success;
	}	//	afterSave
"
org.compiere.model.MBPartner.beforeDelete,MBPartner.java,"boolean beforeDelete ()
	{
		return delete_Accounting(""C_BP_Customer_Acct"") 
			&& delete_Accounting(""C_BP_Vendor_Acct"")
			&& delete_Accounting(""C_BP_Employee_Acct"");
	}	//	beforeDelete
"
org.compiere.model.MBPartner.main,MBPartner.java,"void main(String[] args)
    {
	    Compiere.startup(true);
	    Ctx ctx = Env.getCtx();
		ctx.setAD_Client_ID(11);	//	GardenWorld
		ctx.setAD_Role_ID(102);		//	GardenAdmin
		ctx.setAD_User_ID(101);		//	GardenAdmin
	    String bpValue = ""%"";
	    String bpName = ""%"";
	    String taxID = null;
		String postal = ""%"";
		String city = ""%""; 
		String uValue = ""%"";
		String uName = ""%"";
		String uPhone = ""%"";
		String email = ""%"";
		Timestamp birthday = null;	//	new Timestamp(System.currentTimeMillis());
		boolean andLogic = false;
		int maxRows = 3;
	    ArrayList<MBPartner> bps = findAll(ctx, bpValue, bpName, taxID, postal, city, 
	    	uValue, uName, uPhone, email, birthday, andLogic, maxRows);
	    //
	    MBPartner bp = bps.get(0);
	    
	    org.w3c.dom.Document doc = bp.get_xmlDocument(false, false);
	    System.out.println(doc);

	    StringBuffer bpXml = bp.get_xmlString(null, false);
	    System.out.println(bpXml.toString());
	 
	//	VO vo = bp.getVO();
	    
    }
"
org.compiere.model.MInvoicePaySchedule.getInvoicePaySchedule,MInvoicePaySchedule.java,"MInvoicePaySchedule[] getInvoicePaySchedule(Ctx ctx, 
		int C_Invoice_ID, int C_InvoicePaySchedule_ID, Trx trx)
	{
		String sql = ""SELECT * FROM C_InvoicePaySchedule ips "";
		if (C_Invoice_ID != 0)
			sql += ""WHERE C_Invoice_ID=? "";
		else
			sql += ""WHERE EXISTS (SELECT * FROM C_InvoicePaySchedule x""
			+ "" WHERE x.C_InvoicePaySchedule_ID=? AND ips.C_Invoice_ID=x.C_Invoice_ID) "";
		sql += ""ORDER BY DueDate"";
		//
		ArrayList<MInvoicePaySchedule> list = new ArrayList<MInvoicePaySchedule>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, trx);
			if (C_Invoice_ID != 0)
				pstmt.setInt(1, C_Invoice_ID);
			else
				pstmt.setInt(1, C_InvoicePaySchedule_ID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				list.add (new MInvoicePaySchedule(ctx, rs, trx));
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, ""getInvoicePaySchedule"", e); 
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		MInvoicePaySchedule[] retValue = new MInvoicePaySchedule[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getSchedule
"
org.compiere.model.MInvoicePaySchedule.getParent,MInvoicePaySchedule.java,"MInvoice getParent ()
	{
		if (m_parent == null)
			m_parent = new MInvoice (getCtx(), getC_Invoice_ID(), get_Trx()); 
		return m_parent;
	}	//	getParent
"
org.compiere.model.MInvoicePaySchedule.setParent,MInvoicePaySchedule.java,"void setParent (MInvoice parent)
	{
		m_parent = parent;
	}	//	setParent
"
org.compiere.model.MInvoicePaySchedule.toString,MInvoicePaySchedule.java,"String toString()
	{
		StringBuffer sb = new StringBuffer(""MInvoicePaySchedule["");
		sb.append(get_ID()).append(""-Due="" + getDueDate() + ""/"" + getDueAmt())
			.append("";Discount="").append(getDiscountDate() + ""/"" + getDiscountAmt())
			.append(""]"");
		return sb.toString();
	}	//	toString
"
org.compiere.model.MInvoicePaySchedule.beforeSave,MInvoicePaySchedule.java,"boolean beforeSave (boolean newRecord)
	{
		if (is_ValueChanged(""DueAmt""))
		{
			log.fine(""beforeSave"");
			setIsValid(false);
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MInvoicePaySchedule.afterSave,MInvoicePaySchedule.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (is_ValueChanged(""DueAmt""))
		{
			log.fine(""afterSave"");
			getParent();
			m_parent.validatePaySchedule();
			m_parent.save();
			if(p_changeVO !=null) {
				//p_changeVO.addWarning(""The Valid field may be changed, please refresh before proceed"");
				p_changeVO.setRefreshAll(true);
			}
		}
		
		return success;
	}	//	afterSave
"
org.compiere.model.MInvoicePaySchedule.afterDelete,MInvoicePaySchedule.java,"boolean afterDelete(boolean success) {
		log.fine(""afterDelete"");
		getParent();
		m_parent.validatePaySchedule();
		m_parent.save();
		
		return success;
	}
"
org.compiere.model.MProductPO.getOfProduct,MProductPO.java,"MProductPO[] getOfProduct (Ctx ctx, int M_Product_ID, Trx trx)
	{
		ArrayList<MProductPO> list = new ArrayList<MProductPO>();
		String sql = ""SELECT * FROM M_Product_PO ""
			+ ""WHERE M_Product_ID=? AND IsActive='Y' ""
			+ ""ORDER BY IsCurrentVendor DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, M_Product_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				list.add(new MProductPO (ctx, rs, trx));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			s_log.log(Level.SEVERE, sql, ex);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;
		//
		MProductPO[] retValue = new MProductPO[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getOfProduct
"
org.compiere.model.CalloutOrder.docType,CalloutOrder.java,"String docType (Ctx ctx, int WindowNo, GridTab mTab, GridField mField,
			Object value, Object oldValue)
	{
		Integer C_DocType_ID = (Integer)value;		//	Actually C_DocTypeTarget_ID
		if (C_DocType_ID == null || C_DocType_ID.intValue() == 0)
			return """";

		//	Re-Create new DocNo, if there is a doc number already
		//	and the existing source used a different Sequence number
		String oldDocNo = (String)mTab.getValue(""DocumentNo"");
		boolean newDocNo = oldDocNo == null;
		if (!newDocNo && oldDocNo.startsWith(""<"") && oldDocNo.endsWith("">""))
			newDocNo = true;
		Integer oldC_DocType_ID = (Integer)mTab.getValue(""C_DocType_ID"");
		if ((oldC_DocType_ID == null || oldC_DocType_ID.intValue() == 0)
				&& oldValue != null)	//	get old Target
			oldC_DocType_ID = (Integer)oldValue;

		String sql = ""SELECT d.DocSubTypeSO,d.HasCharges,'N',""			//	1..3
			+ ""d.IsDocNoControlled,s.CurrentNext,s.CurrentNextSys,""     //  4..6
			+ ""s.AD_Sequence_ID,d.IsSOTrx, d.IsReturnTrx ""              //	7..9
			+ ""FROM C_DocType d ""
			+ ""LEFT OUTER JOIN AD_Sequence s ON (d.DocNoSequence_ID=s.AD_Sequence_ID) ""
			+ ""WHERE C_DocType_ID=?"";	//	#1
		try
		{
			int AD_Sequence_ID = 0;

			//	Get old AD_SeqNo for comparison
			if (oldC_DocType_ID.intValue() != 0)
			{
				PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
				pstmt.setInt(1, oldC_DocType_ID.intValue());
				ResultSet rs = pstmt.executeQuery();
				if (rs.next())
					AD_Sequence_ID = rs.getInt(7);
				rs.close();
				pstmt.close();
			}

			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_DocType_ID.intValue());
			ResultSet rs = pstmt.executeQuery();
			String DocSubTypeSO = """";
			boolean IsSOTrx = true;
			boolean isReturnTrx = false;
			if (rs.next())		//	we found document type
			{

				//	Set Context:	Document Sub Type for Sales Orders
				DocSubTypeSO = rs.getString(1);
				if (DocSubTypeSO == null)
					DocSubTypeSO = ""--"";
				ctx.setContext( WindowNo, ""OrderType"", DocSubTypeSO);
				//	No Drop Ship other than Standard
				if (!DocSubTypeSO.equals(MOrder.DocSubTypeSO_Standard))
					mTab.setValue (""IsDropShip"", ""N"");

				//	IsSOTrx
				if (""N"".equals(rs.getString(8)))
					IsSOTrx = false;

				//IsReturnTrx
				isReturnTrx = ""Y"".equals(rs.getString(9));

				//	Skip these steps for RMA. These are copied from the Original Order
				if(!isReturnTrx)
				{
					if (DocSubTypeSO.equals(MOrder.DocSubTypeSO_POS))
						mTab.setValue (""DeliveryRule"", X_C_Order.DELIVERYRULE_Force);
					else if (DocSubTypeSO.equals(MOrder.DocSubTypeSO_Prepay))
						mTab.setValue (""DeliveryRule"", X_C_Order.DELIVERYRULE_AfterReceipt);
					else
						mTab.setValue (""DeliveryRule"", X_C_Order.DELIVERYRULE_Availability);

					//	Invoice Rule
					if (DocSubTypeSO.equals(MOrder.DocSubTypeSO_POS)
						|| DocSubTypeSO.equals(MOrder.DocSubTypeSO_Prepay)
						|| DocSubTypeSO.equals(MOrder.DocSubTypeSO_OnCredit) )
						mTab.setValue (""InvoiceRule"", X_C_Order.INVOICERULE_Immediate);
					else
						mTab.setValue (""InvoiceRule"", X_C_Order.INVOICERULE_AfterDelivery);

					//	Payment Rule - POS Order
					if (DocSubTypeSO.equals(MOrder.DocSubTypeSO_POS))
						mTab.setValue(""PaymentRule"", X_C_Order.PAYMENTRULE_Cash);
					else
						mTab.setValue(""PaymentRule"", X_C_Order.PAYMENTRULE_OnCredit);


					//	Set Context:
					ctx.setContext( WindowNo, ""HasCharges"", rs.getString(2));
				}
				else // Returns
				{
					if (DocSubTypeSO.equals(MOrder.DocSubTypeSO_POS))
						mTab.setValue (""DeliveryRule"", X_C_Order.DELIVERYRULE_Force);
					else
						mTab.setValue (""DeliveryRule"", X_C_Order.DELIVERYRULE_Manual);
				}

				//	DocumentNo
				if (rs.getString(4).equals(""Y""))			//	IsDocNoControlled
				{
					if (AD_Sequence_ID != rs.getInt(7))
						newDocNo = true;
					if (newDocNo)
						if (Ini.isPropertyBool(Ini.P_COMPIERESYS) && Env.getCtx().getAD_Client_ID() < 1000000)
							mTab.setValue(""DocumentNo"", ""<"" + rs.getString(6) + "">"");
						else
							mTab.setValue(""DocumentNo"", ""<"" + rs.getString(5) + "">"");
				}
			}
			rs.close();
			pstmt.close();

			// Skip remaining steps for RMA
			if (isReturnTrx)
				return """";
			//  When BPartner is changed, the Rules are not set if
			//  it is a POS or Credit Order (i.e. defaults from Standard BPartner)
			//  This re-reads the Rules and applies them.
			if (DocSubTypeSO.equals(MOrder.DocSubTypeSO_POS)
				|| DocSubTypeSO.equals(MOrder.DocSubTypeSO_Prepay))    //  not for POS/PrePay
				;
			else
			{
				sql = ""SELECT PaymentRule,C_PaymentTerm_ID,""            //  1..2
					+ ""InvoiceRule,DeliveryRule,""                       //  3..4
					+ ""FreightCostRule,DeliveryViaRule, ""               //  5..6
					+ ""PaymentRulePO,PO_PaymentTerm_ID ""
					+ ""FROM C_BPartner ""
					+ ""WHERE C_BPartner_ID=?"";		//	#1
				pstmt = DB.prepareStatement(sql, (Trx) null);
				int C_BPartner_ID = ctx.getContextAsInt( WindowNo, ""C_BPartner_ID"");
				pstmt.setInt(1, C_BPartner_ID);
				//
				rs = pstmt.executeQuery();
				if (rs.next())
				{
					//	PaymentRule
					String s = rs.getString(IsSOTrx ? ""PaymentRule"" : ""PaymentRulePO"");
					if (s != null && s.length() != 0)
					{
						if (IsSOTrx && (s.equals(""B"") || s.equals(""S"") || s.equals(""U"")))	//	No Cash/Check/Transfer for SO_Trx
							s = ""P"";										//  Payment Term
						if (!IsSOTrx && s.equals(""B""))					//	No Cash for PO_Trx
							s = ""P"";										//  Payment Term
						mTab.setValue(""PaymentRule"", s);
					}
					//	Payment Term
					Integer ii =Integer.valueOf(rs.getInt(IsSOTrx ? ""C_PaymentTerm_ID"" : ""PO_PaymentTerm_ID""));
					if (!rs.wasNull())
						mTab.setValue(""C_PaymentTerm_ID"", ii);
					//	InvoiceRule
					s = rs.getString(3);
					if (s != null && s.length() != 0)
						mTab.setValue(""InvoiceRule"", s);
					//	DeliveryRule
					s = rs.getString(4);
					if (s != null && s.length() != 0)
						mTab.setValue(""DeliveryRule"", s);
					//	FreightCostRule
					s = rs.getString(5);
					if (s != null && s.length() != 0)
						mTab.setValue(""FreightCostRule"", s);
					//	DeliveryViaRule
					s = rs.getString(6);
					if (s != null && s.length() != 0)
						mTab.setValue(""DeliveryViaRule"", s);
				}
				rs.close();
				pstmt.close();
			}   //  re-read customer rules
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
			return e.getLocalizedMessage();
		}

		return """";
	}	//	docType
"
org.compiere.model.CalloutOrder.bPartner,CalloutOrder.java,"String bPartner (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer C_BPartner_ID = (Integer)value;
		if (C_BPartner_ID == null || C_BPartner_ID.intValue() == 0)
			return """";

		// Skip rest of steps for RMA. These fields are copied over from the orignal order instead.
		boolean isReturnTrx = (Boolean)mTab.getValue(""IsReturnTrx"");
		if (isReturnTrx)
		{
			MBPartner bpartner = new MBPartner (ctx, C_BPartner_ID, null);

			if(ctx.isSOTrx(WindowNo))
				mTab.setValue(""M_ReturnPolicy_ID"", bpartner.getM_ReturnPolicy_ID());
			else
				mTab.setValue(""M_ReturnPolicy_ID"", bpartner.getPO_ReturnPolicy_ID());

			return """";
		}

		setCalloutActive(true);

		String sql = ""SELECT p.AD_Language,p.C_PaymentTerm_ID,""
			+ "" COALESCE(p.M_PriceList_ID,g.M_PriceList_ID) AS M_PriceList_ID, p.PaymentRule,p.POReference,""
			+ "" p.SO_Description,p.IsDiscountPrinted,p.SalesRep_ID,""
			+ "" p.InvoiceRule,p.DeliveryRule,p.FreightCostRule,DeliveryViaRule,""
			+ "" p.SO_CreditLimit, p.SO_CreditLimit-p.SO_CreditUsed AS CreditAvailable,""
			+ "" lship.C_BPartner_Location_ID,c.AD_User_ID,""
			+ "" COALESCE(p.PO_PriceList_ID,g.PO_PriceList_ID) AS PO_PriceList_ID, p.PaymentRulePO,p.PO_PaymentTerm_ID,""
			+ "" lbill.C_BPartner_Location_ID AS Bill_Location_ID, p.SOCreditStatus, lship.IsBillTo ShipToIsBillTo ""
			+ ""FROM C_BPartner p""
			+ "" INNER JOIN C_BP_Group g ON (p.C_BP_Group_ID=g.C_BP_Group_ID)""
			+ "" LEFT OUTER JOIN C_BPartner_Location lbill ON (p.C_BPartner_ID=lbill.C_BPartner_ID AND lbill.IsBillTo='Y' AND lbill.IsActive='Y')""
			+ "" LEFT OUTER JOIN C_BPartner_Location lship ON (p.C_BPartner_ID=lship.C_BPartner_ID AND lship.IsShipTo='Y' AND lship.IsActive='Y')""
			+ "" LEFT OUTER JOIN AD_User c ON (p.C_BPartner_ID=c.C_BPartner_ID AND c.IsActive='Y') ""
			+ ""WHERE p.C_BPartner_ID=? AND p.IsActive='Y'"";		//	#1


		boolean IsSOTrx = ctx.isSOTrx(WindowNo);

		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_BPartner_ID.intValue());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				//	PriceList (indirect: IsTaxIncluded & Currency)
				Integer ii = Integer.valueOf(rs.getInt(IsSOTrx ? ""M_PriceList_ID"" : ""PO_PriceList_ID""));
				if (!rs.wasNull())
					mTab.setValue(""M_PriceList_ID"", ii);
				else
				{	//	get default PriceList
					int i = ctx.getContextAsInt( ""#M_PriceList_ID"");
					if (i != 0)
						mTab.setValue(""M_PriceList_ID"", Integer.valueOf(i));
				}

				//	Bill-To BPartner
				mTab.setValue(""Bill_BPartner_ID"", C_BPartner_ID);
				int bill_Location_ID = rs.getInt(""Bill_Location_ID"");
				if (bill_Location_ID == 0)
					mTab.setValue(""Bill_Location_ID"", null);
				else
					mTab.setValue(""Bill_Location_ID"", Integer.valueOf(bill_Location_ID));

				// Ship-To Location
				int shipTo_ID = rs.getInt(""C_BPartner_Location_ID"");
				//	overwritten by InfoBP selection - works only if InfoWindow
				//	was used otherwise creates error (uses last value, may belong to differnt BP)
				if (C_BPartner_ID.toString().equals(ctx.getContext( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_BPartner_ID"")))
				{
					String loc = ctx.getContext( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_BPartner_Location_ID"");
					if (loc.length() > 0)
						shipTo_ID = Integer.parseInt(loc);
				}
				if (shipTo_ID == 0)
					mTab.setValue(""C_BPartner_Location_ID"", null);
				else
				{
					mTab.setValue(""C_BPartner_Location_ID"", Integer.valueOf(shipTo_ID));
					if (""Y"".equals(rs.getString(""ShipToIsBillTo"")))	//	set the same
						mTab.setValue(""Bill_Location_ID"", Integer.valueOf(shipTo_ID));
				}


				//	Contact - overwritten by InfoBP selection
				int contID = rs.getInt(""AD_User_ID"");
				if (C_BPartner_ID.toString().equals(ctx.getContext( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_BPartner_ID"")))
				{
					String cont = ctx.getContext( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""AD_User_ID"");
					if (cont.length() > 0)
						contID = Integer.parseInt(cont);
				}
				if (contID == 0)
					mTab.setValue(""AD_User_ID"", null);
				else
				{
					mTab.setValue(""AD_User_ID"", Integer.valueOf(contID));
					mTab.setValue(""Bill_User_ID"", Integer.valueOf(contID));
				}

				/* If user logged in is not a SalesRep, default the SalesRep associated with
				 * the customer.
				 */
				if(!MUser.isSalesRep(ctx.getAD_User_ID()) && IsSOTrx)
				{
					int SalesRep_ID=rs.getInt(""SalesRep_ID"");
					if(SalesRep_ID!=0)
						mTab.setValue(""SalesRep_ID"", SalesRep_ID);
				}

				//	CreditAvailable
				if (IsSOTrx)
				{
					double CreditLimit = rs.getDouble(""SO_CreditLimit"");
				//	String SOCreditStatus = rs.getString(""SOCreditStatus"");
					if (CreditLimit != 0)
					{
						double CreditAvailable = rs.getDouble(""CreditAvailable"");
						if (!rs.wasNull() && CreditAvailable < 0)
							mTab.fireDataStatusEEvent(""CreditLimitOver"",
								DisplayType.getNumberFormat(DisplayTypeConstants.Amount).format(CreditAvailable),
								false);
					}
				}

				//	PO Reference
				//	Do not set if already present
				String s = rs.getString(""POReference"");
				String poRef = (String) mTab.getValue(""POReference"");
				if (s != null && s.length() != 0 && (poRef == null || poRef.trim().length() == 0))
					if(IsSOTrx)		//	Do Not set if Purchase Order
						mTab.setValue(""POReference"", s);
				// should not be reset to null if we entered already value! VHARCQ, accepted YS makes sense that way
				// TODO: should get checked and removed if no longer needed!
				/*else
					mTab.setValue(""POReference"", null);*/

				//	SO Description
				//	Do not set if already present
				s = rs.getString(""SO_Description"");
				if (s != null && s.trim().length() != 0 && (poRef == null || poRef.trim().length() == 0))
					if(IsSOTrx)		//	Do Not set if Purchase Order
						mTab.setValue(""Description"", s);
				//	IsDiscountPrinted
				s = rs.getString(""IsDiscountPrinted"");
				if (s != null && s.length() != 0)
					mTab.setValue(""IsDiscountPrinted"", s);
				else
					mTab.setValue(""IsDiscountPrinted"", ""N"");

				//	Defaults, if not Walkin Receipt or Walkin Invoice
				String OrderType = ctx.getContext( WindowNo, ""OrderType"");
				mTab.setValue(""InvoiceRule"", X_C_Order.INVOICERULE_AfterDelivery);
				mTab.setValue(""DeliveryRule"", X_C_Order.DELIVERYRULE_Availability);
				mTab.setValue(""PaymentRule"", X_C_Order.PAYMENTRULE_OnCredit);
				if (OrderType.equals(MOrder.DocSubTypeSO_Prepay))
				{
					mTab.setValue(""InvoiceRule"", X_C_Order.INVOICERULE_Immediate);
					mTab.setValue(""DeliveryRule"", X_C_Order.DELIVERYRULE_AfterReceipt);
				}
				else if (OrderType.equals(MOrder.DocSubTypeSO_POS))	//  for POS
					mTab.setValue(""PaymentRule"", X_C_Order.PAYMENTRULE_Cash);
				else
				{
					//	PaymentRule
					s = rs.getString(IsSOTrx ? ""PaymentRule"" : ""PaymentRulePO"");
					if (s != null && s.length() != 0)
					{
						if (s.equals(""B""))				//	No Cache in Non POS
							s = ""P"";
						if (IsSOTrx && (s.equals(""S"") || s.equals(""U"")))	//	No Check/Transfer for SO_Trx
							s = ""P"";										//  Payment Term
						mTab.setValue(""PaymentRule"", s);
					}
					//	Payment Term
					ii = Integer.valueOf(rs.getInt(IsSOTrx ? ""C_PaymentTerm_ID"" : ""PO_PaymentTerm_ID""));
					if (!rs.wasNull())
						mTab.setValue(""C_PaymentTerm_ID"", ii);
					//	InvoiceRule
					s = rs.getString(""InvoiceRule"");
					if (s != null && s.length() != 0)
						mTab.setValue(""InvoiceRule"", s);
					//	DeliveryRule
					s = rs.getString(""DeliveryRule"");
					if (s != null && s.length() != 0)
						mTab.setValue(""DeliveryRule"", s);
					//	FreightCostRule
					s = rs.getString(""FreightCostRule"");
					if (s != null && s.length() != 0)
						mTab.setValue(""FreightCostRule"", s);
					//	DeliveryViaRule
					s = rs.getString(""DeliveryViaRule"");
					if (s != null && s.length() != 0)
						mTab.setValue(""DeliveryViaRule"", s);
					//
					mTab.setValue(""C_Project_ID"", null);
				}
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
			setCalloutActive(false);
			return e.getLocalizedMessage();
		}
		setCalloutActive(false);
		return """";
	}	//	bPartner
"
org.compiere.model.CalloutOrder.bPartnerBill,CalloutOrder.java,"String bPartnerBill (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		if (isCalloutActive())
			return """";
		Integer bill_BPartner_ID = (Integer)value;
		if (bill_BPartner_ID == null || bill_BPartner_ID.intValue() == 0)
			return """";

		// Skip rest of steps for RMA
		boolean isReturnTrx = (Boolean)mTab.getValue(""IsReturnTrx"");
		if (isReturnTrx)
			return """";

		String sql = ""SELECT p.AD_Language,p.C_PaymentTerm_ID,""
			+ ""p.M_PriceList_ID,p.PaymentRule,p.POReference,""
			+ ""p.SO_Description,p.IsDiscountPrinted,""
			+ ""p.InvoiceRule,p.DeliveryRule,p.FreightCostRule,DeliveryViaRule,""
			+ ""p.SO_CreditLimit, p.SO_CreditLimit-p.SO_CreditUsed AS CreditAvailable,""
			+ ""c.AD_User_ID,""
			+ ""p.PO_PriceList_ID, p.PaymentRulePO, p.PO_PaymentTerm_ID,""
			+ ""lbill.C_BPartner_Location_ID AS Bill_Location_ID ""
			+ ""FROM C_BPartner p""
			+ "" LEFT OUTER JOIN C_BPartner_Location lbill ON (p.C_BPartner_ID=lbill.C_BPartner_ID AND lbill.IsBillTo='Y' AND lbill.IsActive='Y')""
			+ "" LEFT OUTER JOIN AD_User c ON (p.C_BPartner_ID=c.C_BPartner_ID) ""
			+ ""WHERE p.C_BPartner_ID=? AND p.IsActive='Y'"";		//	#1

		boolean IsSOTrx = ""Y"".equals(ctx.getContext( WindowNo, ""IsSOTrx""));

		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, bill_BPartner_ID.intValue());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				//	PriceList (indirect: IsTaxIncluded & Currency)
				Integer ii = Integer.valueOf(rs.getInt(IsSOTrx ? ""M_PriceList_ID"" : ""PO_PriceList_ID""));
				if (!rs.wasNull())
					mTab.setValue(""M_PriceList_ID"", ii);
				else
				{	//	get default PriceList
					int i = ctx.getContextAsInt( ""#M_PriceList_ID"");
					if (i != 0)
						mTab.setValue(""M_PriceList_ID"", Integer.valueOf(i));
				}

				int bill_Location_ID = rs.getInt(""Bill_Location_ID"");
				//	overwritten by InfoBP selection - works only if InfoWindow
				//	was used otherwise creates error (uses last value, may belong to differnt BP)
				if (bill_BPartner_ID.toString().equals(ctx.getContext( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_BPartner_ID"")))
				{
					String loc = ctx.getContext( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_BPartner_Location_ID"");
					if (loc.length() > 0)
						bill_Location_ID = Integer.parseInt(loc);
				}
				if (bill_Location_ID == 0)
					mTab.setValue(""Bill_Location_ID"", null);
				else
					mTab.setValue(""Bill_Location_ID"", Integer.valueOf(bill_Location_ID));

				//	Contact - overwritten by InfoBP selection
				int contID = rs.getInt(""AD_User_ID"");
				if (bill_BPartner_ID.toString().equals(ctx.getContext( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_BPartner_ID"")))
				{
					String cont = ctx.getContext( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""AD_User_ID"");
					if (cont.length() > 0)
						contID = Integer.parseInt(cont);
				}
				if (contID == 0)
					mTab.setValue(""Bill_User_ID"", null);
				else
					mTab.setValue(""Bill_User_ID"", Integer.valueOf(contID));

				//	CreditAvailable
				if (IsSOTrx)
				{
					double CreditLimit = rs.getDouble(""SO_CreditLimit"");
					if (CreditLimit != 0)
					{
						double CreditAvailable = rs.getDouble(""CreditAvailable"");
						if (!rs.wasNull() && CreditAvailable < 0)
							mTab.fireDataStatusEEvent(""CreditLimitOver"",
								DisplayType.getNumberFormat(DisplayTypeConstants.Amount).format(CreditAvailable),
								false);
					}
				}

				//	PO Reference
				String s = rs.getString(""POReference"");

				// Order Reference should not be set by Bill To BPartner; only by BPartner.
				/* if (s != null && s.length() != 0)
					mTab.setValue(""POReference"", s);
				else
					mTab.setValue(""POReference"", null);*/
				//	SO Description
				//  if there is an existing description, do not change it.
				String Description = (String) mTab.getValue(""Description"");
				s = rs.getString(""SO_Description"");
				if (s != null && s.trim().length() != 0 && (Description ==null || Description.trim().length() == 0))
					if(IsSOTrx)		//Do Not set if Purchase Order
						mTab.setValue(""Description"", s);

				//	IsDiscountPrinted
				s = rs.getString(""IsDiscountPrinted"");
				if (s != null && s.length() != 0)
					mTab.setValue(""IsDiscountPrinted"", s);
				else
					mTab.setValue(""IsDiscountPrinted"", ""N"");

				//	Defaults, if not Walkin Receipt or Walkin Invoice
				String OrderType = ctx.getContext( WindowNo, ""OrderType"");
				mTab.setValue(""InvoiceRule"", X_C_Order.INVOICERULE_AfterDelivery);
				mTab.setValue(""PaymentRule"", X_C_Order.PAYMENTRULE_OnCredit);
				if (OrderType.equals(MOrder.DocSubTypeSO_Prepay))
					mTab.setValue(""InvoiceRule"", X_C_Order.INVOICERULE_Immediate);
				else if (OrderType.equals(MOrder.DocSubTypeSO_POS))	//  for POS
					mTab.setValue(""PaymentRule"", X_C_Order.PAYMENTRULE_Cash);
				else
				{
					//	PaymentRule
					s = rs.getString(IsSOTrx ? ""PaymentRule"" : ""PaymentRulePO"");
					if (s != null && s.length() != 0)
					{
						if (s.equals(""B""))				//	No Cache in Non POS
							s = ""P"";
						if (IsSOTrx && (s.equals(""S"") || s.equals(""U"")))	//	No Check/Transfer for SO_Trx
							s = ""P"";										//  Payment Term
						mTab.setValue(""PaymentRule"", s);
					}
					//	Payment Term
					ii = Integer.valueOf(rs.getInt(IsSOTrx ? ""C_PaymentTerm_ID"" : ""PO_PaymentTerm_ID""));
					if (!rs.wasNull())
						mTab.setValue(""C_PaymentTerm_ID"", ii);
					//	InvoiceRule
					s = rs.getString(""InvoiceRule"");
					if (s != null && s.length() != 0)
						mTab.setValue(""InvoiceRule"", s);
				}
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, ""bPartnerBill"", e);
			return e.getLocalizedMessage();
		}

		return """";
	}	//	bPartnerBill
"
org.compiere.model.CalloutOrder.warehouse,CalloutOrder.java,"String warehouse (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		if (isCalloutActive())		//	assuming it is resetting value
			return """";

		Integer M_Warehouse_ID = (Integer)value;
		if (M_Warehouse_ID == null || M_Warehouse_ID.intValue() == 0)
			return """";

		MWarehouse wh = new MWarehouse(ctx, M_Warehouse_ID, null);
		String DeliveryRule = mTab.get_ValueAsString(""DeliveryRule"");
		if(wh.isDisallowNegativeInv() && DeliveryRule.equals(X_C_Order.DELIVERYRULE_Force) ||
				DeliveryRule == null || DeliveryRule.length()==0)
			mTab.setValue(""DeliveryRule"",X_C_Order.DELIVERYRULE_Availability);

		return """";
	}	//	warehouse
"
org.compiere.model.CalloutOrder.dateOrdered,CalloutOrder.java,"String dateOrdered (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		if (isCalloutActive())		//	assuming it is resetting value
			return """";
		if (value == null || !(value instanceof Timestamp))
			return """";
		mTab.setValue(""DateAcct"", value);

		return setPriceListVersion(ctx, WindowNo, mTab);
	}	//	dateAcct
"
org.compiere.model.CalloutOrder.setPriceListVersion,CalloutOrder.java,"String setPriceListVersion(Ctx ctx, int WindowNo, GridTab mTab)
	{
		Integer M_PriceList_ID = ctx.getContextAsInt( WindowNo, ""M_PriceList_ID"");
		if (M_PriceList_ID == null || M_PriceList_ID.intValue()== 0)
			return """";

		Timestamp orderDate = new Timestamp(ctx.getContextAsTime( WindowNo, ""DateOrdered""));
		if (orderDate == null)
			return """";

		String sql = ""SELECT pl.IsTaxIncluded,pl.EnforcePriceLimit,pl.C_Currency_ID,c.StdPrecision,""
			+ ""plv.M_PriceList_Version_ID,plv.ValidFrom ""
			+ ""FROM M_PriceList pl,C_Currency c,M_PriceList_Version plv ""
			+ ""WHERE pl.C_Currency_ID=c.C_Currency_ID""
			+ "" AND pl.M_PriceList_ID=plv.M_PriceList_ID""
			+ "" AND pl.M_PriceList_ID=? ""						//	1
			+ "" AND plv.ValidFrom <=? ""							//  2
			+ "" AND plv.IsActive='Y' ""
			+ ""ORDER BY plv.ValidFrom DESC"";
		//	Use newest price list - may not be future
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, M_PriceList_ID.intValue());
			pstmt.setTimestamp(2, orderDate);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				//	Tax Included
				mTab.setValue(""IsTaxIncluded"", Boolean.valueOf(""Y"".equals(rs.getString(1))));
				//	Price Limit Enforce
				ctx.setContext(WindowNo, ""EnforcePriceLimit"", rs.getString(2));
				//	Currency
				Integer ii = Integer.valueOf(rs.getInt(3));
				mTab.setValue(""C_Currency_ID"", ii);
				//	PriceList Version
				ctx.setContext(WindowNo, ""M_PriceList_Version_ID"", rs.getInt(5));
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
			return e.getLocalizedMessage();
		}
		if (steps) log.warning(""fini"");
		return """";
	}
"
org.compiere.model.CalloutOrder.priceList,CalloutOrder.java,"String priceList (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer M_PriceList_ID = (Integer)value;
		if (M_PriceList_ID == null || M_PriceList_ID.intValue()== 0)
			return """";
		if (steps) log.warning(""init"");

		return setPriceListVersion(ctx, WindowNo, mTab);
	}	//	priceList
"
org.compiere.model.CalloutOrder.product,CalloutOrder.java,"String product (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer M_Product_ID = (Integer)value;
		if (M_Product_ID == null || M_Product_ID.intValue() == 0)
			return """";

		boolean isReturnTrx = ""Y"".equals(ctx.getContext(WindowNo,""IsReturnTrx""));
		if (isReturnTrx)
			return """";

		setCalloutActive(true);
		if (steps) log.warning(""init"");
		//
		mTab.setValue(""C_Charge_ID"", null);
		//	Set Attribute
		if (ctx.getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_Product_ID"") == M_Product_ID.intValue()
			&& ctx.getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_AttributeSetInstance_ID"") != 0)
			mTab.setValue(""M_AttributeSetInstance_ID"", Integer.valueOf(ctx.getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_AttributeSetInstance_ID"")));
		else
			mTab.setValue(""M_AttributeSetInstance_ID"", null);

		/*****	Price Calculation see also qty	****/
		int C_BPartner_ID = ctx.getContextAsInt( WindowNo, ""C_BPartner_ID"");
		BigDecimal Qty = (BigDecimal)mTab.getValue(""QtyOrdered"");
		boolean IsSOTrx = ctx.getContext( WindowNo, ""IsSOTrx"").equals(""Y"");
		MProductPricing pp = new MProductPricing (ctx.getAD_Client_ID(), ctx.getAD_Org_ID(),
				M_Product_ID.intValue(), C_BPartner_ID, Qty, IsSOTrx);

		setPriceListVersion(ctx, WindowNo, mTab);
		int M_PriceList_ID = ctx.getContextAsInt( WindowNo, ""M_PriceList_ID"");
		pp.setM_PriceList_ID(M_PriceList_ID);
		MPriceList pl = MPriceList.get(ctx, M_PriceList_ID, null);
		Timestamp orderDate = (Timestamp)mTab.getValue(""DateOrdered"");
		pp.setPriceDate(orderDate);
		int M_PriceList_Version_ID = pl.getPriceListVersion(orderDate).getM_PriceList_Version_ID();
		pp.setM_PriceList_Version_ID(M_PriceList_Version_ID);

		pp.setM_PriceList_ID(M_PriceList_ID);
		pp.setM_PriceList_Version_ID(M_PriceList_Version_ID);


		pp.calculatePrice();
		if (!pp.isCalculated())
		{
			mTab.setValue(""PriceList"", BigDecimal.ZERO);
			mTab.setValue(""PriceLimit"", BigDecimal.ZERO);
			mTab.setValue(""PriceActual"", BigDecimal.ZERO);
			mTab.setValue(""PriceEntered"", BigDecimal.ZERO);
			setCalloutActive(false);
			return Msg.getMsg(ctx, ""ProductNotOnPriceList"");
		}

		//
		mTab.setValue(""PriceList"", pp.getPriceList());
		mTab.setValue(""PriceLimit"", pp.getPriceLimit());
		mTab.setValue(""PriceActual"", pp.getPriceStd());
		mTab.setValue(""PriceEntered"", pp.getPriceStd());
		mTab.setValue(""C_Currency_ID"", Integer.valueOf(pp.getC_Currency_ID()));
		mTab.setValue(""Discount"", pp.getDiscount());
		mTab.setValue(""C_UOM_ID"", Integer.valueOf(pp.getC_UOM_ID()));
		mTab.setValue(""QtyOrdered"", mTab.getValue(""QtyEntered""));
		mTab.setValue(""M_PriceList_Version_ID"", Integer.valueOf(M_PriceList_Version_ID));
		ctx.setContext( WindowNo, ""EnforcePriceLimit"", pp.isEnforcePriceLimit() ? ""Y"" : ""N"");
		ctx.setContext( WindowNo, ""DiscountSchema"", pp.isDiscountSchema() ? ""Y"" : ""N"");

		//	Check/Update Warehouse Setting
		//	int M_Warehouse_ID = ctx.getContextAsInt( Env.WINDOW_INFO, ""M_Warehouse_ID"");
		//	Integer wh = (Integer)mTab.getValue(""M_Warehouse_ID"");
		//	if (wh.intValue() != M_Warehouse_ID)
		//	{
		//		mTab.setValue(""M_Warehouse_ID"", Integer.valueOf(M_Warehouse_ID));
		//		ADialog.warn(,WindowNo, ""WarehouseChanged"");
		//	}

		if (ctx.isSOTrx(WindowNo))
		{
			MProduct product = MProduct.get (ctx, M_Product_ID.intValue());
			if (product.isStocked())
			{
				BigDecimal QtyOrdered = (BigDecimal)mTab.getValue(""QtyOrdered"");
				int M_Warehouse_ID = ctx.getContextAsInt( WindowNo, ""M_Warehouse_ID"");
				int M_AttributeSetInstance_ID = ctx.getContextAsInt( WindowNo, ""M_AttributeSetInstance_ID"");
				BigDecimal available = MStorage.getQtyAvailable
					(M_Warehouse_ID, M_Product_ID.intValue(), M_AttributeSetInstance_ID, null);
				if (available == null)
					available = Env.ZERO;
				if (available.signum() == 0)
					mTab.fireDataStatusEEvent (""NoQtyAvailable"", ""0"", false);
				else if (available.compareTo(QtyOrdered) < 0)
					mTab.fireDataStatusEEvent (""InsufficientQtyAvailable"", available.toString(), false);
				else
				{
					Integer C_OrderLine_ID = (Integer)mTab.getValue(""C_OrderLine_ID"");
					if (C_OrderLine_ID == null)
						C_OrderLine_ID = Integer.valueOf(0);
					BigDecimal notReserved = MOrderLine.getNotReserved(ctx,
						M_Warehouse_ID, M_Product_ID, M_AttributeSetInstance_ID,
						C_OrderLine_ID.intValue());
					if (notReserved == null)
						notReserved = Env.ZERO;
					BigDecimal total = available.subtract(notReserved);
					if (total.compareTo(QtyOrdered) < 0)
					{
						String info = Msg.parseTranslation(ctx, ""@QtyAvailable@="" + available
							+ "" - @QtyNotReserved@="" + notReserved + "" = "" + total);
						mTab.fireDataStatusEEvent (""InsufficientQtyAvailable"",
							info, false);
					}
				}
			}
		}
		//
		setCalloutActive(false);
		if (steps) log.warning(""fini"");
		return tax (ctx, WindowNo, mTab, mField, value);
	}	//	product
"
org.compiere.model.CalloutOrder.lineWarehouse,CalloutOrder.java,"String lineWarehouse (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer M_Warehouse_ID = (Integer)value;
		if (M_Warehouse_ID == null || M_Warehouse_ID.intValue() == 0)
			return """";

		Integer M_Product_ID = ctx.getContextAsInt( WindowNo, ""M_Product_ID"");
		if (M_Product_ID == null || M_Product_ID.intValue() == 0)
			return """";

		boolean isReturnTrx = ""Y"".equals(ctx.getContext(WindowNo,""IsReturnTrx""));
		if (isReturnTrx)
			return """";

		setCalloutActive(true);
		if (steps) log.warning(""init"");

		if (ctx.isSOTrx(WindowNo))
		{
			MProduct product = MProduct.get (ctx, M_Product_ID.intValue());
			if (product.isStocked())
			{
				BigDecimal QtyOrdered = (BigDecimal)mTab.getValue(""QtyOrdered"");
				int M_AttributeSetInstance_ID = ctx.getContextAsInt( WindowNo, ""M_AttributeSetInstance_ID"");
				BigDecimal available = MStorage.getQtyAvailable
					(M_Warehouse_ID, M_Product_ID.intValue(), M_AttributeSetInstance_ID, null);
				if (available == null)
					available = Env.ZERO;
				if (available.signum() == 0)
					mTab.fireDataStatusEEvent (""NoQtyAvailable"", ""0"", false);
				else if (available.compareTo(QtyOrdered) < 0)
					mTab.fireDataStatusEEvent (""InsufficientQtyAvailable"", available.toString(), false);
				else
				{
					Integer C_OrderLine_ID = (Integer)mTab.getValue(""C_OrderLine_ID"");
					if (C_OrderLine_ID == null)
						C_OrderLine_ID = Integer.valueOf(0);
					BigDecimal notReserved = MOrderLine.getNotReserved(ctx,
						M_Warehouse_ID, M_Product_ID, M_AttributeSetInstance_ID,
						C_OrderLine_ID.intValue());
					if (notReserved == null)
						notReserved = Env.ZERO;
					BigDecimal total = available.subtract(notReserved);
					if (total.compareTo(QtyOrdered) < 0)
					{
						String info = Msg.parseTranslation(ctx, ""@QtyAvailable@="" + available
							+ "" - @QtyNotReserved@="" + notReserved + "" = "" + total);
						mTab.fireDataStatusEEvent (""InsufficientQtyAvailable"",
							info, false);
					}
				}
			}
		}
		setCalloutActive(false);
		if (steps) log.warning(""fini"");
		return tax (ctx, WindowNo, mTab, mField, value);
	}	//	lineWarehouse
"
org.compiere.model.CalloutOrder.charge,CalloutOrder.java,"String charge (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer C_Charge_ID = (Integer)value;
		if (C_Charge_ID == null || C_Charge_ID.intValue() == 0)
			return """";

		boolean isReturnTrx = ""Y"".equals(ctx.getContext(""IsReturnTrx""));
		if (isReturnTrx)
			return """";

		//	No Product defined
		if (mTab.getValue(""M_Product_ID"") != null)
		{
			mTab.setValue(""C_Charge_ID"", null);
			return ""ChargeExclusively"";
		}
		mTab.setValue(""M_AttributeSetInstance_ID"", null);
		mTab.setValue(""S_ResourceAssignment_ID"", null);
		mTab.setValue(""C_UOM_ID"", Integer.valueOf(100));	//	EA

		ctx.setContext( WindowNo, ""DiscountSchema"", ""N"");
		String sql = ""SELECT ChargeAmt FROM C_Charge WHERE C_Charge_ID=?"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_Charge_ID.intValue());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				mTab.setValue (""PriceEntered"", rs.getBigDecimal (1));
				mTab.setValue (""PriceActual"", rs.getBigDecimal (1));
				mTab.setValue (""PriceLimit"", Env.ZERO);
				mTab.setValue (""PriceList"", Env.ZERO);
				mTab.setValue (""Discount"", Env.ZERO);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
			return e.getLocalizedMessage();
		}
		//
		return tax (ctx, WindowNo, mTab, mField, value);
	}	//	charge
"
org.compiere.model.CalloutOrder.tax,CalloutOrder.java,"String tax (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		String column = mField.getColumnName();
		if (value == null)
			return """";
		if (steps) log.warning(""init"");

		//	Check Product
		int M_Product_ID = 0;
		if (column.equals(""M_Product_ID""))
			M_Product_ID = ((Integer)value).intValue();
		else
			M_Product_ID = ctx.getContextAsInt( WindowNo, ""M_Product_ID"");
		int C_Charge_ID = 0;
		if (column.equals(""C_Charge_ID""))
			C_Charge_ID = ((Integer)value).intValue();
		else
			C_Charge_ID = ctx.getContextAsInt( WindowNo, ""C_Charge_ID"");
		log.fine(""Product="" + M_Product_ID + "", C_Charge_ID="" + C_Charge_ID);
		if (M_Product_ID == 0 && C_Charge_ID == 0)
			return amt(ctx, WindowNo, mTab, mField, value);		//

		//	Check Partner Location
		int shipC_BPartner_Location_ID = 0;
		if (column.equals(""C_BPartner_Location_ID""))
			shipC_BPartner_Location_ID = ((Integer)value).intValue();
		else
			shipC_BPartner_Location_ID = ctx.getContextAsInt( WindowNo, ""C_BPartner_Location_ID"");
		if (shipC_BPartner_Location_ID == 0)
			return amt(ctx, WindowNo, mTab, mField, value);		//
		log.fine(""Ship BP_Location="" + shipC_BPartner_Location_ID);

		//
		Timestamp billDate = new Timestamp(ctx.getContextAsTime( WindowNo, ""DateOrdered""));
		log.fine(""Bill Date="" + billDate);

		Timestamp shipDate = new Timestamp(ctx.getContextAsTime( WindowNo, ""DatePromised""));
		log.fine(""Ship Date="" + shipDate);

		int AD_Org_ID = ctx.getContextAsInt( WindowNo, ""AD_Org_ID"");
		log.fine(""Org="" + AD_Org_ID);

		int M_Warehouse_ID = ctx.getContextAsInt( WindowNo, ""M_Warehouse_ID"");
		log.fine(""Warehouse="" + M_Warehouse_ID);

		int billC_BPartner_Location_ID = ctx.getContextAsInt( WindowNo, ""Bill_Location_ID"");
		if (billC_BPartner_Location_ID == 0)
			billC_BPartner_Location_ID = shipC_BPartner_Location_ID;
		log.fine(""Bill BP_Location="" + billC_BPartner_Location_ID);

		//
		int C_Tax_ID = Tax.get (ctx, M_Product_ID, C_Charge_ID, billDate, shipDate,
			AD_Org_ID, M_Warehouse_ID, billC_BPartner_Location_ID, shipC_BPartner_Location_ID,
			""Y"".equals(ctx.getContext( WindowNo, ""IsSOTrx"")));
		log.info(""Tax ID="" + C_Tax_ID);
		//
		if (C_Tax_ID == 0)
			mTab.fireDataStatusEEvent(CLogger.retrieveError());
		else
			mTab.setValue(""C_Tax_ID"", Integer.valueOf(C_Tax_ID));
		//
		if (steps) log.warning(""fini"");
		return amt(ctx, WindowNo, mTab, mField, value);
	}	//	tax
"
org.compiere.model.CalloutOrder.amt,CalloutOrder.java,"String amt (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		if (isCalloutActive() || value == null)
			return """";
		setCalloutActive(true);


		if (steps) log.warning(""init"");

		int C_UOM_To_ID = ctx.getContextAsInt( WindowNo, ""C_UOM_ID"");
		int M_Product_ID = ctx.getContextAsInt( WindowNo, ""M_Product_ID"");
		int M_PriceList_ID = ctx.getContextAsInt( WindowNo, ""M_PriceList_ID"");
		int StdPrecision = MPriceList.getPricePrecision(ctx, M_PriceList_ID);
		BigDecimal QtyEntered, QtyOrdered, PriceEntered, PriceActual, PriceLimit, Discount, PriceList;
		//	get values
		QtyEntered = (BigDecimal)mTab.getValue(""QtyEntered"");
		QtyOrdered = (BigDecimal)mTab.getValue(""QtyOrdered"");
		log.fine(""QtyEntered="" + QtyEntered + "", Ordered="" + QtyOrdered + "", UOM="" + C_UOM_To_ID);
		//
		PriceEntered = (BigDecimal)mTab.getValue(""PriceEntered"");
		PriceActual = (BigDecimal)mTab.getValue(""PriceActual"");
		Discount = (BigDecimal)mTab.getValue(""Discount"");
		PriceLimit = (BigDecimal)mTab.getValue(""PriceLimit"");
		PriceList = (BigDecimal)mTab.getValue(""PriceList"");
		log.fine(""PriceList="" + PriceList + "", Limit="" + PriceLimit + "", Precision="" + StdPrecision);
		log.fine(""PriceEntered="" + PriceEntered + "", Actual="" + PriceActual + "", Discount="" + Discount);

		//	Qty changed - recalc price
		if ((mField.getColumnName().equals(""QtyOrdered"")
			|| mField.getColumnName().equals(""QtyEntered"")
			|| mField.getColumnName().equals(""M_Product_ID""))
			&& !""N"".equals(ctx.getContext( WindowNo, ""DiscountSchema"")))
		{
			int C_BPartner_ID = ctx.getContextAsInt( WindowNo, ""C_BPartner_ID"");
			if (mField.getColumnName().equals(""QtyEntered""))
				QtyOrdered = MUOMConversion.convertProductTo (ctx, M_Product_ID,
					C_UOM_To_ID, QtyEntered);
			if (QtyOrdered == null)
				QtyOrdered = QtyEntered;
			boolean IsSOTrx = ctx.getContext( WindowNo, ""IsSOTrx"").equals(""Y"");
			MProductPricing pp = new MProductPricing (ctx.getAD_Client_ID(), ctx.getAD_Org_ID(),
					M_Product_ID, C_BPartner_ID, QtyOrdered, IsSOTrx);
			pp.setM_PriceList_ID(M_PriceList_ID);
			int M_PriceList_Version_ID = ctx.getContextAsInt( WindowNo, ""M_PriceList_Version_ID"");
			pp.setM_PriceList_Version_ID(M_PriceList_Version_ID);
			Timestamp date = (Timestamp)mTab.getValue(""DateOrdered"");
			pp.setPriceDate(date);
			//
			PriceEntered = MUOMConversion.convertProductFrom (ctx, M_Product_ID,
				C_UOM_To_ID, pp.getPriceStd());
			if (PriceEntered == null)
				PriceEntered = pp.getPriceStd();
			//
			log.fine(""QtyChanged -> PriceActual="" + pp.getPriceStd()
				+ "", PriceEntered="" + PriceEntered + "", Discount="" + pp.getDiscount());
			PriceActual = pp.getPriceStd();
			mTab.setValue(""PriceActual"", PriceActual);
			mTab.setValue(""Discount"", pp.getDiscount());
			mTab.setValue(""PriceEntered"", PriceEntered);
			ctx.setContext( WindowNo, ""DiscountSchema"", pp.isDiscountSchema() ? ""Y"" : ""N"");
		}
		else if (mField.getColumnName().equals(""PriceActual""))
		{
			PriceActual = (BigDecimal)value;
			PriceEntered = MUOMConversion.convertProductFrom (ctx, M_Product_ID,
				C_UOM_To_ID, PriceActual);
			if (PriceEntered == null)
				PriceEntered = PriceActual;
			//
			log.fine(""PriceActual="" + PriceActual
				+ "" -> PriceEntered="" + PriceEntered);
			mTab.setValue(""PriceEntered"", PriceEntered);
		}
		else if (mField.getColumnName().equals(""PriceEntered""))
		{
			PriceEntered = (BigDecimal)value;
			PriceActual = MUOMConversion.convertProductTo (ctx, M_Product_ID,
				C_UOM_To_ID, PriceEntered);
			if (PriceActual == null)
				PriceActual = PriceEntered;
			//
			log.fine(""PriceEntered="" + PriceEntered
				+ "" -> PriceActual="" + PriceActual);
			mTab.setValue(""PriceActual"", PriceActual);
		}

		//  Discount entered - Calculate Actual/Entered
		if (mField.getColumnName().equals(""Discount""))
		{
			//Do not apply discount for charge lines
			if(!(mTab.getValue(""C_Charge_ID"") != null))
			{
				PriceActual = new BigDecimal ((100.0 - Discount.doubleValue())
						/ 100.0 * PriceList.doubleValue());
				if (PriceActual.scale() > StdPrecision)
					PriceActual = PriceActual.setScale(StdPrecision, BigDecimal.ROUND_HALF_UP);
				PriceEntered = MUOMConversion.convertProductFrom (ctx, M_Product_ID,
						C_UOM_To_ID, PriceActual);
				if (PriceEntered == null)
					PriceEntered = PriceActual;
				mTab.setValue(""PriceActual"", PriceActual);
				mTab.setValue(""PriceEntered"", PriceEntered);
			}
		}
		//	calculate Discount
		else
		{
			if (PriceList.intValue() == 0)
				Discount = Env.ZERO;
			else
				Discount = new BigDecimal ((PriceList.doubleValue() - PriceActual.doubleValue()) / PriceList.doubleValue() * 100.0);
			if (Discount.scale() > 2)
				Discount = Discount.setScale(2, BigDecimal.ROUND_HALF_UP);
			mTab.setValue(""Discount"", Discount);
		}
		log.fine(""PriceEntered="" + PriceEntered + "", Actual="" + PriceActual + "", Discount="" + Discount);

		//	Check PriceLimit
		String epl = ctx.getContext( WindowNo, ""EnforcePriceLimit"");
		boolean enforce = ctx.isSOTrx(WindowNo) && epl != null && epl.equals(""Y"");
		boolean isReturnTrx = ""Y"".equals(ctx.getContext(WindowNo, ""IsReturnTrx""));
		if (enforce && (MRole.getDefault().isOverwritePriceLimit() || isReturnTrx))
			enforce = false;
		//	Check Price Limit?
		if (enforce && PriceLimit.doubleValue() != 0.0
		  && PriceActual.compareTo(PriceLimit) < 0)
		{
			PriceActual = PriceLimit;
			PriceEntered = MUOMConversion.convertProductFrom (ctx, M_Product_ID,
				C_UOM_To_ID, PriceLimit);
			if (PriceEntered == null)
				PriceEntered = PriceLimit;
			log.fine(""(under) PriceEntered="" + PriceEntered + "", Actual"" + PriceLimit);
			mTab.setValue (""PriceActual"", PriceLimit);
			mTab.setValue (""PriceEntered"", PriceEntered);
			mTab.fireDataStatusEEvent (""UnderLimitPrice"", """", false);
			//	Repeat Discount calc
			if (PriceList.intValue() != 0)
			{
				Discount = new BigDecimal ((PriceList.doubleValue () - PriceActual.doubleValue ()) / PriceList.doubleValue () * 100.0);
				if (Discount.scale () > 2)
					Discount = Discount.setScale (2, BigDecimal.ROUND_HALF_UP);
				mTab.setValue (""Discount"", Discount);
			}
		}

		//	Line Net Amt
		BigDecimal LineNetAmt = QtyOrdered.multiply(PriceActual);
		if (LineNetAmt.scale() > StdPrecision)
			LineNetAmt = LineNetAmt.setScale(StdPrecision, BigDecimal.ROUND_HALF_UP);
		log.info(""LineNetAmt="" + LineNetAmt);
		mTab.setValue(""LineNetAmt"", LineNetAmt);
		//
		setCalloutActive(false);
		return """";
	}	//	amt
"
org.compiere.model.CalloutOrder.getInOutOpenQty,CalloutOrder.java,"BigDecimal getInOutOpenQty(Ctx ctx, int M_InOutLine_ID, int C_Order_ID, int excludeC_OrderLine_ID)
	{
		MInOutLine inOutLine = new MInOutLine (ctx, M_InOutLine_ID, null);
		BigDecimal shippedQty = inOutLine.getMovementQty();

		BigDecimal retValue = Env.ZERO;
		String sql = ""SELECT SUM(QtyOrdered) ""
			+ ""FROM C_OrderLine ol""
			+ "" INNER JOIN C_Order o ON (ol.C_Order_ID=o.C_Order_ID) ""
			+ ""WHERE ol.M_InOutLine_ID=?""	//	#1
			+ "" AND o.IsReturnTrx='Y' ""
			+ "" AND (o.DocStatus IN ('CO','CL') OR o.C_Order_ID=?) ""
			+ "" AND ol.C_OrderLine_ID<>?"";

		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, M_InOutLine_ID);
			pstmt.setInt (2, C_Order_ID);
			pstmt.setInt (3, excludeC_OrderLine_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				retValue = rs.getBigDecimal(1);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		if (retValue == null)
			log.fine(""-"");
		else
			log.fine(retValue.toString());

		if (retValue != null)
			return shippedQty.subtract(retValue);

		return shippedQty;
	}	//	getQtyRMA
"
org.compiere.model.CalloutOrder.qty,CalloutOrder.java,"String qty (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		if (isCalloutActive() || value == null)
			return """";
		setCalloutActive(true);

		int M_Product_ID = ctx.getContextAsInt( WindowNo, ""M_Product_ID"");
		if (steps) log.warning(""init - M_Product_ID="" + M_Product_ID + "" - "" );
		BigDecimal QtyOrdered = Env.ZERO;
		BigDecimal QtyEntered = Env.ZERO;
		BigDecimal PriceActual, PriceEntered;

		// Check for RMA
		boolean isReturnTrx = ""Y"".equals(ctx.getContext(WindowNo, ""IsReturnTrx""));

		//	No Product
		if (M_Product_ID == 0)
		{
			QtyEntered = (BigDecimal)mTab.getValue(""QtyEntered"");
			QtyOrdered = QtyEntered;
			mTab.setValue(""QtyOrdered"", QtyOrdered);
		}
		//	UOM Changed - convert from Entered -> Product
		else if (mField.getColumnName().equals(""C_UOM_ID""))
		{
			int C_UOM_To_ID = ((Integer)value).intValue();
			QtyEntered = (BigDecimal)mTab.getValue(""QtyEntered"");
			BigDecimal QtyEntered1 = QtyEntered.setScale(MUOM.getPrecision(ctx, C_UOM_To_ID), BigDecimal.ROUND_HALF_UP);
			if (QtyEntered.compareTo(QtyEntered1) != 0)
			{
				log.fine(""Corrected QtyEntered Scale UOM="" + C_UOM_To_ID
					+ ""; QtyEntered="" + QtyEntered + ""->"" + QtyEntered1);
				QtyEntered = QtyEntered1;
				mTab.setValue(""QtyEntered"", QtyEntered);
			}
			QtyOrdered = MUOMConversion.convertProductFrom (ctx, M_Product_ID,
				C_UOM_To_ID, QtyEntered);
			if (QtyOrdered == null)
				QtyOrdered = QtyEntered;
			boolean conversion = QtyEntered.compareTo(QtyOrdered) != 0;
			PriceActual = (BigDecimal)mTab.getValue(""PriceActual"");
			PriceEntered = MUOMConversion.convertProductFrom (ctx, M_Product_ID,
				C_UOM_To_ID, PriceActual);
			if (PriceEntered == null)
				PriceEntered = PriceActual;
			log.fine(""UOM="" + C_UOM_To_ID
				+ "", QtyEntered/PriceActual="" + QtyEntered + ""/"" + PriceActual
				+ "" -> "" + conversion
				+ "" QtyOrdered/PriceEntered="" + QtyOrdered + ""/"" + PriceEntered);
			ctx.setContext( WindowNo, ""UOMConversion"", conversion ? ""Y"" : ""N"");
			mTab.setValue(""QtyOrdered"", QtyOrdered);
			mTab.setValue(""PriceEntered"", PriceEntered);
		}
		//	QtyEntered changed - calculate QtyOrdered
		else if (mField.getColumnName().equals(""QtyEntered""))
		{
			int C_UOM_To_ID = ctx.getContextAsInt( WindowNo, ""C_UOM_ID"");
			QtyEntered = (BigDecimal)value;
			BigDecimal QtyEntered1 = QtyEntered.setScale(MUOM.getPrecision(ctx, C_UOM_To_ID), BigDecimal.ROUND_HALF_UP);
			if (QtyEntered.compareTo(QtyEntered1) != 0)
			{
				log.fine(""Corrected QtyEntered Scale UOM="" + C_UOM_To_ID
					+ ""; QtyEntered="" + QtyEntered + ""->"" + QtyEntered1);
				QtyEntered = QtyEntered1;
				mTab.setValue(""QtyEntered"", QtyEntered);
			}
			QtyOrdered = MUOMConversion.convertProductFrom (ctx, M_Product_ID,
				C_UOM_To_ID, QtyEntered);
			if (QtyOrdered == null)
				QtyOrdered = QtyEntered;
			boolean conversion = QtyEntered.compareTo(QtyOrdered) != 0;
			log.fine(""UOM="" + C_UOM_To_ID
				+ "", QtyEntered="" + QtyEntered
				+ "" -> "" + conversion
				+ "" QtyOrdered="" + QtyOrdered);
			ctx.setContext( WindowNo, ""UOMConversion"", conversion ? ""Y"" : ""N"");
			mTab.setValue(""QtyOrdered"", QtyOrdered);
		}
		//	QtyOrdered changed - calculate QtyEntered (should not happen)
		else if (mField.getColumnName().equals(""QtyOrdered""))
		{
			int C_UOM_To_ID = ctx.getContextAsInt( WindowNo, ""C_UOM_ID"");
			QtyOrdered = (BigDecimal)value;
			int precision = MProduct.get(ctx, M_Product_ID).getUOMPrecision();
			BigDecimal QtyOrdered1 = QtyOrdered.setScale(precision, BigDecimal.ROUND_HALF_UP);
			if (QtyOrdered.compareTo(QtyOrdered1) != 0)
			{
				log.fine(""Corrected QtyOrdered Scale ""
					+ QtyOrdered + ""->"" + QtyOrdered1);
				QtyOrdered = QtyOrdered1;
				mTab.setValue(""QtyOrdered"", QtyOrdered);
			}
			QtyEntered = MUOMConversion.convertProductTo (ctx, M_Product_ID,
				C_UOM_To_ID, QtyOrdered);
			if (QtyEntered == null)
				QtyEntered = QtyOrdered;
			boolean conversion = QtyOrdered.compareTo(QtyEntered) != 0;
			log.fine(""UOM="" + C_UOM_To_ID
				+ "", QtyOrdered="" + QtyOrdered
				+ "" -> "" + conversion
				+ "" QtyEntered="" + QtyEntered);
			ctx.setContext( WindowNo, ""UOMConversion"", conversion ? ""Y"" : ""N"");
			mTab.setValue(""QtyEntered"", QtyEntered);
		}
		else
		{
		//	QtyEntered = (BigDecimal)mTab.getValue(""QtyEntered"");
			QtyOrdered = (BigDecimal)mTab.getValue(""QtyOrdered"");
		}

		if(M_Product_ID != 0
		   && isReturnTrx)
		{
			Integer inOutLine_ID = (Integer)mTab.getValue(""Orig_InOutLine_ID"");
			if(inOutLine_ID != 0)
			{
				Integer C_Order_ID = (Integer)mTab.getValue(""C_Order_ID"");
				if (C_Order_ID == null)
					C_Order_ID = Integer.valueOf(0);
				Integer C_OrderLine_ID = (Integer)mTab.getValue(""C_OrderLine_ID"");
				if (C_OrderLine_ID == null)
					C_OrderLine_ID = Integer.valueOf(0);
				BigDecimal shippedQty = MOrderLine.getInOutOpenQty(ctx, inOutLine_ID, C_Order_ID, C_OrderLine_ID);

				QtyOrdered = (BigDecimal)mTab.getValue(""QtyOrdered"");
				if(shippedQty.compareTo(QtyOrdered)<0)
				{
					if(ctx.isSOTrx(WindowNo))
						mTab.fireDataStatusEEvent (""ReturnQtyExceedsShippedQty"", """", false);
					else
						mTab.fireDataStatusEEvent (""ReturnQtyExceedsReceivedQty"", """", false);
					mTab.setValue (""QtyOrdered"",shippedQty);
					QtyOrdered = shippedQty;

					int C_UOM_To_ID = ctx.getContextAsInt( WindowNo, ""C_UOM_ID"");
					QtyEntered = MUOMConversion.convertProductTo (ctx, M_Product_ID,
							C_UOM_To_ID, QtyOrdered);
					if (QtyEntered == null)
						QtyEntered = QtyOrdered;
					mTab.setValue (""QtyEntered"",QtyEntered);
					log.fine(""QtyEntered : ""+ QtyEntered.toString() +
								""QtyOrdered : "" + QtyOrdered.toString());
				}
			}
		}

		//	Storage
		if (M_Product_ID != 0
			&& ctx.isSOTrx(WindowNo)
			&& QtyOrdered.signum() > 0
			&& !isReturnTrx)		//	no negative (returns)
		{
			MProduct product = MProduct.get (ctx, M_Product_ID);
			if (product.isStocked())
			{
				int M_Warehouse_ID = ctx.getContextAsInt( WindowNo, ""M_Warehouse_ID"");
				int M_AttributeSetInstance_ID = ctx.getContextAsInt( WindowNo, ""M_AttributeSetInstance_ID"");
				BigDecimal available = MStorage.getQtyAvailable
					(M_Warehouse_ID, M_Product_ID, M_AttributeSetInstance_ID, null);
				if (available == null)
					available = Env.ZERO;
				if (available.signum() == 0)
					mTab.fireDataStatusEEvent (""NoQtyAvailable"", ""0"", false);
				else if (available.compareTo(QtyOrdered) < 0)
					mTab.fireDataStatusEEvent (""InsufficientQtyAvailable"", available.toString(), false);
				else
				{
					Integer C_OrderLine_ID = (Integer)mTab.getValue(""C_OrderLine_ID"");
					if (C_OrderLine_ID == null)
						C_OrderLine_ID = Integer.valueOf(0);
					BigDecimal notReserved = MOrderLine.getNotReserved(ctx,
						M_Warehouse_ID, M_Product_ID, M_AttributeSetInstance_ID,
						C_OrderLine_ID.intValue());
					if (notReserved == null)
						notReserved = Env.ZERO;
					BigDecimal total = available.subtract(notReserved);
					if (total.compareTo(QtyOrdered) < 0)
					{
						String info = Msg.parseTranslation(ctx, ""@QtyAvailable@="" + available
							+ ""  -  @QtyNotReserved@="" + notReserved + ""  =  "" + total);
						mTab.fireDataStatusEEvent (""InsufficientQtyAvailable"",
							info, false);
					}
				}
			}
		}

		//
		setCalloutActive(false);
		return """";
	}	//	qty
"
org.compiere.model.CalloutOrder.Orig_Order,CalloutOrder.java,"String Orig_Order (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer C_Order_ID = (Integer)value;
		if (C_Order_ID == null || C_Order_ID.intValue() == 0)
			return """";

		//	Get Details from Original Order
		MOrder order = new MOrder (ctx, C_Order_ID, null);

		// Reset Orig Shipment
		mTab.setValue(""Orig_InOut_ID"", null);

		mTab.setValue(""C_BPartner_ID"", order.getC_BPartner_ID());
		mTab.setValue(""C_BPartner_Location_ID"", order.getC_BPartner_Location_ID());
		mTab.setValue(""Bill_BPartner_ID"",order.getBill_BPartner_ID());
		mTab.setValue(""Bill_Location_ID"", order.getBill_Location_ID());

		if(order.getAD_User_ID()!=0)
			mTab.setValue(""AD_User_ID"", order.getAD_User_ID());

		if(order.getBill_User_ID()!=0)
			mTab.setValue(""Bill_User_ID"", order.getBill_User_ID());

		//mTab.setValue(""DateOrdered"", order.getDateOrdered());
		mTab.setValue(""M_PriceList_ID"", order.getM_PriceList_ID());
		mTab.setValue(""PaymentRule"", order.getPaymentRule());
		mTab.setValue(""C_PaymentTerm_ID"", order.getC_PaymentTerm_ID());
		//mTab.setValue (""DeliveryRule"", X_C_Order.DELIVERYRULE_Manual);

		mTab.setValue(""Bill_Location_ID"", order.getBill_Location_ID());
		mTab.setValue(""InvoiceRule"", order.getInvoiceRule());
		mTab.setValue(""PaymentRule"", order.getPaymentRule());
		mTab.setValue(""DeliveryViaRule"", order.getDeliveryViaRule());
		mTab.setValue(""FreightCostRule"",order.getFreightCostRule());

		return """";
	} /* Orig Order */
"
org.compiere.model.CalloutOrder.Orig_InOut,CalloutOrder.java,"String Orig_InOut (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer Orig_InOut_ID = (Integer)value;
		if (Orig_InOut_ID == null || Orig_InOut_ID.intValue() == 0)
			return """";

		//	Get Details from Original Shipment
		MInOut io = new MInOut (ctx, Orig_InOut_ID, null);
		mTab.setValue(""C_Project_ID"", io.getC_Project_ID());
		mTab.setValue(""C_Campaign_ID"", io.getC_Campaign_ID());
		mTab.setValue(""C_Activity_ID"", io.getC_Activity_ID());
		mTab.setValue(""AD_OrgTrx_ID"", io.getAD_OrgTrx_ID());
		mTab.setValue(""User1_ID"", io.getUser1_ID());
		mTab.setValue(""User2_ID"", io.getUser2_ID());

		return """";
	}
"
org.compiere.model.CalloutOrder.Orig_OrderLine,CalloutOrder.java,"String Orig_OrderLine (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer Orig_OrderLine_ID = (Integer)value;
		if (Orig_OrderLine_ID == null || Orig_OrderLine_ID.intValue() == 0)
			return """";

		MOrderLine orderline = new MOrderLine (ctx, Orig_OrderLine_ID, null);
		mTab.setValue(""Orig_InOutLine_ID"", null);
		mTab.setValue(""C_Tax_ID"", orderline.getC_Tax_ID());
		mTab.setValue(""PriceList"", orderline.getPriceList());
		mTab.setValue(""PriceLimit"", orderline.getPriceLimit());
		mTab.setValue(""PriceActual"", orderline.getPriceActual());
		mTab.setValue(""PriceEntered"", orderline.getPriceEntered());
		mTab.setValue(""C_Currency_ID"", orderline.getC_Currency_ID());
		mTab.setValue(""Discount"", orderline.getDiscount());
		mTab.setValue(""Discount"",orderline.getDiscount());

		return """";

	}
"
org.compiere.model.CalloutOrder.Orig_InOutLine,CalloutOrder.java,"String Orig_InOutLine (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer Orig_InOutLine_ID = (Integer)value;
		if (Orig_InOutLine_ID == null || Orig_InOutLine_ID.intValue() == 0)
			return """";

		//	Get Details
		MInOutLine Orig_InOutLine = new MInOutLine (ctx, Orig_InOutLine_ID.intValue(), null);

		if (Orig_InOutLine != null && Orig_InOutLine.get_ID()!=0)
		{
			mTab.setValue(""C_Project_ID"",Orig_InOutLine.getC_Project_ID());
			mTab.setValue(""C_Campaign_ID"",Orig_InOutLine.getC_Campaign_ID());
			mTab.setValue(""M_Product_ID"", Orig_InOutLine.getM_Product_ID());
			mTab.setValue(""M_AttributeSetInstance_ID"", Orig_InOutLine.getM_AttributeSetInstance_ID());
			mTab.setValue(""C_UOM_ID"", Orig_InOutLine.getC_UOM_ID());

		}

		return """";
	}	//	Orig_InOutLine
"
org.compiere.model.MJournalBatch.copyFrom,MJournalBatch.java,"MJournalBatch copyFrom (Ctx ctx, int GL_JournalBatch_ID,
		Timestamp dateDoc, Trx trx)
	{
		MJournalBatch from = new MJournalBatch (ctx, GL_JournalBatch_ID, trx);
		if (from.getGL_JournalBatch_ID() == 0)
			throw new IllegalArgumentException (""From Journal Batch not found GL_JournalBatch_ID="" + GL_JournalBatch_ID);
		//
		MJournalBatch to = new MJournalBatch (ctx, 0, trx);
		PO.copyValues(from, to, from.getAD_Client_ID(), from.getAD_Org_ID());
		to.set_ValueNoCheck (""DocumentNo"", null);
		to.set_ValueNoCheck (""C_Period_ID"", null);
		to.setDateAcct(dateDoc);
		to.setDateDoc(dateDoc);
		to.setDocStatus(DOCSTATUS_Drafted);
		to.setDocAction(DOCACTION_Complete);
		to.setIsApproved(false);
		to.setProcessed (false);
		//
		if (!to.save())
			throw new IllegalStateException(""Could not create Journal Batch"");

		if (to.copyDetailsFrom(from) == 0)
			throw new IllegalStateException(""Could not create Journal Batch Details"");

		return to;
	}	//	copyFrom
"
org.compiere.model.MJournalBatch.setClientOrg,MJournalBatch.java,"void setClientOrg (int AD_Client_ID, int AD_Org_ID)
	{
		super.setClientOrg(AD_Client_ID, AD_Org_ID);
	}	//	setClientOrg
"
org.compiere.model.MJournalBatch.getJournals,MJournalBatch.java,"MJournal[] getJournals (boolean requery)
	{
		ArrayList<MJournal> list = new ArrayList<MJournal>();
		String sql = ""SELECT * FROM GL_Journal WHERE GL_JournalBatch_ID=? ORDER BY DocumentNo"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getGL_JournalBatch_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MJournal (getCtx(), rs, get_Trx()));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			log.log(Level.SEVERE, sql, ex);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;
		//
		MJournal[] retValue = new MJournal[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getJournals
"
org.compiere.model.MJournalBatch.copyDetailsFrom,MJournalBatch.java,"int copyDetailsFrom (MJournalBatch jb)
	{
		if (isProcessed() || (jb == null))
			return 0;
		int count = 0;
		int lineCount = 0;
		MJournal[] fromJournals = jb.getJournals(false);
		for (MJournal element : fromJournals) {
			MJournal toJournal = new MJournal (getCtx(), 0, jb.get_Trx());
			PO.copyValues(element, toJournal, getAD_Client_ID(), getAD_Org_ID());
			toJournal.setGL_JournalBatch_ID(getGL_JournalBatch_ID());
			toJournal.set_ValueNoCheck (""DocumentNo"", null);	//	create new
			toJournal.set_ValueNoCheck (""C_Period_ID"", null);
			toJournal.setDateDoc(getDateDoc());		//	dates from this Batch
			toJournal.setDateAcct(getDateAcct());
			toJournal.setDocStatus(X_GL_Journal.DOCSTATUS_Drafted);
			toJournal.setDocAction(X_GL_Journal.DOCACTION_Complete);
			toJournal.setTotalCr(Env.ZERO);
			toJournal.setTotalDr(Env.ZERO);
			toJournal.setIsApproved(false);
			toJournal.setIsPrinted(false);
			toJournal.setPosted(false);
			toJournal.setProcessed(false);
			if (toJournal.save())
			{
				count++;
				lineCount += toJournal.copyLinesFrom(element, getDateAcct(), 'x');
			}
		}
		if (fromJournals.length != count)
			log.log(Level.SEVERE, ""Line difference - Journals="" + fromJournals.length + "" <> Saved="" + count);

		return count + lineCount;
	}	//	copyLinesFrom
"
org.compiere.model.MJournalBatch.getPeriod,MJournalBatch.java,"MPeriod getPeriod()
	{
		int C_Period_ID = getC_Period_ID();
		if (C_Period_ID != 0)
			return MPeriod.get(getCtx(), C_Period_ID);
		return null;
	}	//	getPeriod
"
org.compiere.model.MJournalBatch.setDateDoc,MJournalBatch.java,"void setDateDoc (String oldDateDoc,
			String newDateDoc, int windowNo) throws Exception
	{
		if ((newDateDoc == null) || (newDateDoc.length() == 0))
			return;
		Timestamp dateDoc = PO.convertToTimestamp(newDateDoc);
		if (dateDoc == null)
			return;
		setDateDoc(dateDoc);
		setDateAcct(dateDoc);
	}	//	setDateDoc
"
org.compiere.model.MJournalBatch.setDateAcct,MJournalBatch.java,"void setDateAcct (String oldDateAcct,
			String newDateAcct, int windowNo) throws Exception
	{
		if ((newDateAcct == null) || (newDateAcct.length() == 0))
			return;
		Timestamp dateAcct = PO.convertToTimestamp(newDateAcct);
		if (dateAcct == null)
			return;
		setDateAcct(dateAcct);
	}	//	setDateAcct
"
org.compiere.model.MJournalBatch.setC_Period_ID,MJournalBatch.java,"void setC_Period_ID (String oldC_Period_ID,
			String newC_Period_ID, int windowNo) throws Exception
	{
		if ((newC_Period_ID == null) || (newC_Period_ID.length() == 0))
			return;
		int C_Period_ID = Integer.parseInt(newC_Period_ID);
		if (C_Period_ID == 0)
			return;
		setC_Period_ID(C_Period_ID);
	}	//	setC_Period_ID
"
org.compiere.model.MJournalBatch.setDateAcct,MJournalBatch.java,"void setDateAcct (Timestamp DateAcct)
	{
		super.setDateAcct(DateAcct);
		if (DateAcct == null)
			return;
		if (getC_Period_ID() != 0)
			return;
		int C_Period_ID = MPeriod.getC_Period_ID(getCtx(), getAD_Org_ID(), DateAcct);
		if (C_Period_ID == 0)
			log.warning(""Period not found"");
		else
			super.setC_Period_ID(C_Period_ID);
	}	//	setDateAcct
"
org.compiere.model.MJournalBatch.setC_Period_ID,MJournalBatch.java,"void setC_Period_ID(int C_Period_ID)
	{
		super.setC_Period_ID(C_Period_ID);
		if (C_Period_ID == 0)
			return;
		Timestamp dateAcct = getDateAcct();
		//
		MPeriod period = getPeriod();
		if ((period != null) && period.isStandardPeriod())
		{
			if (!period.isInPeriod(dateAcct))
				super.setDateAcct(period.getEndDate());
		}
	}	//	setC_Period_ID
"
org.compiere.model.MJournalBatch.processIt,MJournalBatch.java,"boolean processIt (String processAction)
	{
		m_processMsg = null;
		DocumentEngine engine = new DocumentEngine (this, getDocStatus());
		return engine.processIt (processAction, getDocAction());
	}	//	process
"
org.compiere.model.MJournalBatch.unlockIt,MJournalBatch.java,"boolean unlockIt()
	{
		log.info(""unlockIt - "" + toString());
		setProcessing(false);
		return true;
	}	//	unlockIt
"
org.compiere.model.MJournalBatch.invalidateIt,MJournalBatch.java,"boolean invalidateIt()
	{
		log.info(""invalidateIt - "" + toString());
		return true;
	}	//	invalidateIt
"
org.compiere.model.MJournalBatch.prepareIt,MJournalBatch.java,"String prepareIt()
	{
		log.info(toString());
		m_processMsg = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_BEFORE_PREPARE);
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;
		MDocType dt = MDocType.get(getCtx(), getC_DocType_ID());

		MPeriod period = new MPeriod(getCtx(), getC_Period_ID(), null);
		if (period.isStandardPeriod())
			period = MPeriod.getOfOrg(getCtx(), getAD_Org_ID(), getDateAcct());
		if (period == null)
		{
			log.warning(""No Period for "" + getDateAcct());
			m_processMsg = ""@PeriodNotFound@"";
			return DocActionConstants.STATUS_Invalid;
		}
		setC_Period_ID(period.getC_Period_ID());
		m_processMsg = period.isOpen(dt.getDocBaseType(), getDateAcct());
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;

		//	Add up Amounts & prepare them
		MJournal[] journals = getJournals(false);
		if (journals.length == 0)
		{
			m_processMsg = ""@NoLines@"";
			return DocActionConstants.STATUS_Invalid;
		}

		BigDecimal TotalDr = Env.ZERO;
		BigDecimal TotalCr = Env.ZERO;
		for (MJournal journal : journals) {
			if (!journal.isActive())
				continue;
			//	Prepare if not closed
			if (DOCSTATUS_Closed.equals(journal.getDocStatus())
				|| DOCSTATUS_Voided.equals(journal.getDocStatus())
				|| DOCSTATUS_Reversed.equals(journal.getDocStatus())
				|| DOCSTATUS_Completed.equals(journal.getDocStatus()))
				;
			else
			{
				String status = journal.prepareIt();
				if (!DocActionConstants.STATUS_InProgress.equals(status))
				{
					journal.setDocStatus(status);
					journal.save();
					m_processMsg = journal.getProcessMsg();
					return status;
				}
				journal.setDocStatus(DOCSTATUS_InProgress);
				journal.save();
			}
			//
			TotalDr = TotalDr.add(journal.getTotalDr());
			TotalCr = TotalCr.add(journal.getTotalCr());
		}
		setTotalDr(TotalDr);
		setTotalCr(TotalCr);

		//	Control Amount
		if ((Env.ZERO.compareTo(getControlAmt()) != 0)
			&& (getControlAmt().compareTo(getTotalDr()) != 0))
		{
			m_processMsg = ""@ControlAmtError@"";
			return DocActionConstants.STATUS_Invalid;
		}

		//	Add up Amounts
		m_justPrepared = true;
		return DocActionConstants.STATUS_InProgress;
	}	//	prepareIt
"
org.compiere.model.MJournalBatch.approveIt,MJournalBatch.java,"boolean  approveIt()
	{
		log.info(""approveIt - "" + toString());
		setIsApproved(true);
		return true;
	}	//	approveIt
"
org.compiere.model.MJournalBatch.rejectIt,MJournalBatch.java,"boolean rejectIt()
	{
		log.info(""rejectIt - "" + toString());
		setIsApproved(false);
		return true;
	}	//	rejectIt
"
org.compiere.model.MJournalBatch.completeIt,MJournalBatch.java,"String completeIt()
	{
		//	Re-Check
		if (!m_justPrepared)
		{
			String status = prepareIt();
			if (!DocActionConstants.STATUS_InProgress.equals(status))
				return status;
		}
		//	Implicit Approval
		approveIt();

		log.info(toString());
		//	Add up Amounts & complete them
		MJournal[] journals = getJournals(m_justPrepared);
		BigDecimal TotalDr = Env.ZERO;
		BigDecimal TotalCr = Env.ZERO;
		for (MJournal journal : journals)
		{
			if (!journal.isActive())
			{
				journal.setProcessed(true);
				journal.setDocStatus(DOCSTATUS_Voided);
				journal.setDocAction(DOCACTION_None);
				journal.save();
				continue;
			}
			//	Complete if not closed
			if (DOCSTATUS_Closed.equals(journal.getDocStatus())
				|| DOCSTATUS_Voided.equals(journal.getDocStatus())
				|| DOCSTATUS_Reversed.equals(journal.getDocStatus())
				|| DOCSTATUS_Completed.equals(journal.getDocStatus()))
				;
			else
			{
				String status = journal.completeIt();
				if (!DocActionConstants.STATUS_Completed.equals(status))
				{
					journal.setDocStatus(status);
					journal.save();
					m_processMsg = journal.getProcessMsg();
					return status;
				}
				journal.setDocStatus(DOCSTATUS_Completed);
				journal.save();
			}
			//
			TotalDr = TotalDr.add(journal.getTotalDr());
			TotalCr = TotalCr.add(journal.getTotalCr());
		}
		setTotalDr(TotalDr);
		setTotalCr(TotalCr);
		//	User Validation
		String valid = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_AFTER_COMPLETE);
		if (valid != null)
		{
			m_processMsg = valid;
			return DocActionConstants.STATUS_Invalid;
		}
		//
		setProcessed(true);
		setDocAction(DOCACTION_Close);
		return DocActionConstants.STATUS_Completed;
	}	//	completeIt
"
org.compiere.model.MJournalBatch.voidIt,MJournalBatch.java,"boolean voidIt()
	{
		log.info(""voidIt - "" + toString());
		return false;
	}	//	voidIt
"
org.compiere.model.MJournalBatch.closeIt,MJournalBatch.java,"boolean closeIt()
	{
		log.info(""closeIt - "" + toString());
		MJournal[] journals = getJournals(true);
		for (MJournal journal : journals) {
			if (!journal.isActive() && !journal.isProcessed())
			{
				journal.setProcessed(true);
				journal.setDocStatus(DOCSTATUS_Voided);
				journal.setDocAction(DOCACTION_None);
				journal.save();
				continue;
			}
			if (DOCSTATUS_Drafted.equals(journal.getDocStatus())
				|| DOCSTATUS_InProgress.equals(journal.getDocStatus())
				|| DOCSTATUS_Invalid.equals(journal.getDocStatus()))
			{
				m_processMsg = ""Journal not Completed: "" + journal.getSummary();
				return false;
			}

			//	Close if not closed
			if (DOCSTATUS_Closed.equals(journal.getDocStatus())
				|| DOCSTATUS_Voided.equals(journal.getDocStatus())
				|| DOCSTATUS_Reversed.equals(journal.getDocStatus()))
				;
			else
			{
				if (!journal.closeIt())
				{
					m_processMsg = ""Cannot close: "" + journal.getSummary();
					return false;
				}
				journal.save();
			}
		}
		return true;
	}	//	closeIt
"
org.compiere.model.MJournalBatch.reverseCorrectIt,MJournalBatch.java,"boolean reverseCorrectIt()
	{
		log.info(""reverseCorrectIt - "" + toString());
		MJournal[] journals = getJournals(true);
		//	check prerequisites
		for (MJournal journal : journals) {
			if (!journal.isActive())
				continue;
			//	All need to be closed/Completed
			if (DOCSTATUS_Completed.equals(journal.getDocStatus()))
				;
			else
			{
				m_processMsg = ""All Journals need to be Compleded: "" + journal.getSummary();
				return false;
			}
		}

		//	Reverse it
		MJournalBatch reverse = new MJournalBatch (this);
		reverse.setDateDoc(getDateDoc());
		reverse.setC_Period_ID(getC_Period_ID());
		reverse.setDateAcct(getDateAcct());
		//	Reverse indicator
		String description = reverse.getDescription();
		if (description == null)
			description = ""** "" + getDocumentNo() + "" **"";
		else
			description += "" ** "" + getDocumentNo() + "" **"";
		reverse.setDescription(description);
		reverse.save();
		//

		//	Reverse Journals
		for (MJournal journal : journals) {
			if (!journal.isActive())
				continue;
			if (journal.reverseCorrectIt(reverse.getGL_JournalBatch_ID()) == null)
			{
				m_processMsg = ""Could not reverse "" + journal;
				return false;
			}
			journal.save();
		}
		return true;
	}	//	reverseCorrectionIt
"
org.compiere.model.MJournalBatch.reverseAccrualIt,MJournalBatch.java,"boolean reverseAccrualIt()
	{
		log.info(""reverseAccrualIt - "" + toString());
		MJournal[] journals = getJournals(true);
		//	check prerequisites
		for (MJournal journal : journals) {
			if (!journal.isActive())
				continue;
			//	All need to be closed/Completed
			if (DOCSTATUS_Completed.equals(journal.getDocStatus()))
				;
			else
			{
				m_processMsg = ""All Journals need to be Compleded: "" + journal.getSummary();
				return false;
			}
		}
		//	Reverse it
		MJournalBatch reverse = new MJournalBatch (this);
		reverse.setC_Period_ID(0);
		reverse.setDateDoc(new Timestamp(System.currentTimeMillis()));
		reverse.setDateAcct(reverse.getDateDoc());
		//	Reverse indicator
		String description = reverse.getDescription();
		if (description == null)
			description = ""** "" + getDocumentNo() + "" **"";
		else
			description += "" ** "" + getDocumentNo() + "" **"";
		reverse.setDescription(description);
		reverse.save();

		//	Reverse Journals
		for (MJournal journal : journals) {
			if (!journal.isActive())
				continue;
			if (journal.reverseAccrualIt(reverse.getGL_JournalBatch_ID()) == null)
			{
				m_processMsg = ""Could not reverse "" + journal;
				return false;
			}
			journal.save();
		}
		return true;
	}	//	reverseAccrualIt
"
org.compiere.model.MJournalBatch.reActivateIt,MJournalBatch.java,"boolean reActivateIt()
	{
		log.info(""reActivateIt - "" + toString());
	//	setProcessed(false);
		if (reverseCorrectIt())
			return true;
		return false;
	}	//	reActivateIt
"
org.compiere.model.MJournalBatch.getSummary,MJournalBatch.java,"String getSummary()
	{
		StringBuffer sb = new StringBuffer();
		sb.append(getDocumentNo());
		//	: Total Lines = 123.00 (#1)
		sb.append("": "")
		.append(Msg.translate(getCtx(),""TotalDr"")).append(""="").append(getTotalDr())
		.append("" "")
		.append(Msg.translate(getCtx(),""TotalCR"")).append(""="").append(getTotalCr())
		.append("" (#"").append(getJournals(false).length).append("")"");
		//	 - Description
		if ((getDescription() != null) && (getDescription().length() > 0))
			sb.append("" - "").append(getDescription());
		return sb.toString();
	}	//	getSummary
"
org.compiere.model.MJournalBatch.toString,MJournalBatch.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MJournalBatch["");
		sb.append(get_ID()).append("","").append(getDescription())
			.append("",DR="").append(getTotalDr())
			.append("",CR="").append(getTotalCr())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MJournalBatch.getDocumentInfo,MJournalBatch.java,"String getDocumentInfo()
	{
		MDocType dt = MDocType.get(getCtx(), getC_DocType_ID());
		return dt.getName() + "" "" + getDocumentNo();
	}	//	getDocumentInfo
"
org.compiere.model.MJournalBatch.createPDF,MJournalBatch.java,"File createPDF ()
	{
		try
		{
			File temp = File.createTempFile(get_TableName()+get_ID()+""_"", "".pdf"");
			return createPDF (temp);
		}
		catch (Exception e)
		{
			log.severe(""Could not create PDF - "" + e.getMessage());
		}
		return null;
	}	//	getPDF
"
org.compiere.model.MJournalBatch.createPDF,MJournalBatch.java,"File createPDF (File file)
	{
	//	ReportEngine re = ReportEngine.get (getCtx(), ReportEngine.INVOICE, getC_Invoice_ID());
	//	if (re == null)
			return null;
	//	return re.getPDF(file);
	}	//	createPDF
"
org.compiere.model.MJournalBatch.getProcessMsg,MJournalBatch.java,"String getProcessMsg()
	{
		return m_processMsg;
	}	//	getProcessMsg
"
org.compiere.model.MJournalBatch.getDoc_User_ID,MJournalBatch.java,"int getDoc_User_ID()
	{
		return getCreatedBy();
	}	//	getDoc_User_ID
"
org.compiere.model.MJournalBatch.getApprovalAmt,MJournalBatch.java,"BigDecimal getApprovalAmt()
	{
		return getTotalDr();
	}	//	getApprovalAmt
"
org.compiere.model.MReportView.toString,MReportView.java,"String toString()
    {
	    StringBuffer sb = new StringBuffer(""MReportView["")
	    	.append(get_ID()).append(""-"").append(getName());
	    sb.append(""]"");
	    return sb.toString();
    }	//	toString
"
org.compiere.model.CalloutGLJournal.period,CalloutGLJournal.java,"String period (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		String colName = mField.getColumnName();
		if (value == null || isCalloutActive())
			return """";
		setCalloutActive(true);

		int AD_Client_ID = ctx.getContextAsInt( WindowNo, ""AD_Client_ID"");
		Timestamp DateAcct = null;
		if (colName.equals(""DateAcct""))
			DateAcct = (Timestamp)value;
		else
			DateAcct = (Timestamp)mTab.getValue(""DateAcct"");
		int C_Period_ID = 0;
		if (colName.equals(""C_Period_ID""))
			C_Period_ID = ((Integer)value).intValue();

		//  When DateDoc is changed, update DateAcct
		if (colName.equals(""DateDoc""))
		{
			mTab.setValue(""DateAcct"", value);
		}

		//  When DateAcct is changed, set C_Period_ID
		else if (colName.equals(""DateAcct""))
		{
			String sql = ""SELECT C_Period_ID ""
				+ ""FROM C_Period ""
				+ ""WHERE C_Year_ID IN ""
				+ ""	(SELECT C_Year_ID FROM C_Year WHERE C_Calendar_ID =""
				+ ""  (SELECT C_Calendar_ID FROM AD_ClientInfo WHERE AD_Client_ID=?))""
				+ "" AND ? BETWEEN StartDate AND EndDate""
				+ "" AND PeriodType='S'"";
			try
			{
				PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
				pstmt.setInt(1, AD_Client_ID);
				pstmt.setTimestamp(2, DateAcct);
				ResultSet rs = pstmt.executeQuery();
				if (rs.next())
					C_Period_ID = rs.getInt(1);
				rs.close();
				pstmt.close();
				pstmt = null;
			}
			catch (SQLException e)
			{
				log.log(Level.SEVERE, sql, e);
				setCalloutActive(false);
				return e.getLocalizedMessage();
			}
			if (C_Period_ID != 0)
				mTab.setValue(""C_Period_ID"", Integer.valueOf(C_Period_ID));
		}

		//  When C_Period_ID is changed, check if in DateAcct range and set to end date if not
		else
		{
			String sql = ""SELECT PeriodType, StartDate, EndDate ""
				+ ""FROM C_Period WHERE C_Period_ID=?"";
			try
			{
				PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
				pstmt.setInt(1, C_Period_ID);
				ResultSet rs = pstmt.executeQuery();
				if (rs.next())
				{
					String PeriodType = rs.getString(1);
					Timestamp StartDate = rs.getTimestamp(2);
					Timestamp EndDate = rs.getTimestamp(3);
					if (PeriodType.equals(""S"")) //  Standard Periods
					{
						//  out of range - set to last day
						if (DateAcct == null
							|| DateAcct.before(StartDate) || DateAcct.after(EndDate))
							mTab.setValue(""DateAcct"", EndDate);
					}
				}
				rs.close();
				pstmt.close();
			}
			catch (SQLException e)
			{
				log.log(Level.SEVERE, sql, e);
				setCalloutActive(false);
				return e.getLocalizedMessage();
			}
		}
		setCalloutActive(false);
		return """";
	}   //  	Journal_Period
"
org.compiere.model.CalloutGLJournal.rate,CalloutGLJournal.java,"String rate (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		if (value == null)
			return """";

		//  Source info
		Integer Currency_ID = (Integer)mTab.getValue(""C_Currency_ID"");
		int C_Currency_ID = Currency_ID.intValue();
		Integer ConversionType_ID = (Integer)mTab.getValue(""C_ConversionType_ID"");
		int C_ConversionType_ID = ConversionType_ID.intValue();
		Timestamp DateAcct = (Timestamp)mTab.getValue(""DateAcct"");
		if (DateAcct == null)
			DateAcct = new Timestamp(System.currentTimeMillis());
		//
		int C_AcctSchema_ID = ctx.getContextAsInt( WindowNo, ""C_AcctSchema_ID"");
		MAcctSchema as = MAcctSchema.get (ctx, C_AcctSchema_ID);
		int AD_Client_ID = ctx.getContextAsInt( WindowNo, ""AD_Client_ID"");
		int AD_Org_ID = ctx.getContextAsInt( WindowNo, ""AD_Org_ID"");

		BigDecimal CurrencyRate = MConversionRate.getRate(C_Currency_ID, as.getC_Currency_ID(),
			DateAcct, C_ConversionType_ID, AD_Client_ID, AD_Org_ID);
		log.fine(""rate = "" + CurrencyRate);
		if (CurrencyRate == null)
			CurrencyRate = Env.ZERO;
		mTab.setValue(""CurrencyRate"", CurrencyRate);

		return """";
	}	//	rate
"
org.compiere.model.CalloutGLJournal.amt,CalloutGLJournal.java,"String amt (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
	//	String colName = mField.getColumnName();
		if (value == null || isCalloutActive())
			return """";

		setCalloutActive(true);

		//  Get Target Currency & Precision from C_AcctSchema.C_Currency_ID
		int C_AcctSchema_ID = ctx.getContextAsInt( WindowNo, ""C_AcctSchema_ID"");
		MAcctSchema as = MAcctSchema.get(ctx, C_AcctSchema_ID);
		int Precision = as.getStdPrecision();

		BigDecimal CurrencyRate = (BigDecimal)mTab.getValue(""CurrencyRate"");
		if (CurrencyRate == null)
		{
			CurrencyRate = Env.ONE;
			mTab.setValue(""CurrencyRate"", CurrencyRate);
		}

		//  AmtAcct = AmtSource * CurrencyRate  ==> Precision
		BigDecimal AmtSourceDr = (BigDecimal)mTab.getValue(""AmtSourceDr"");
		if (AmtSourceDr == null)
			AmtSourceDr = Env.ZERO;
		BigDecimal AmtSourceCr = (BigDecimal)mTab.getValue(""AmtSourceCr"");
		if (AmtSourceCr == null)
			AmtSourceCr = Env.ZERO;

		BigDecimal AmtAcctDr = AmtSourceDr.multiply(CurrencyRate);
		AmtAcctDr = AmtAcctDr.setScale(Precision, BigDecimal.ROUND_HALF_UP);
		mTab.setValue(""AmtAcctDr"", AmtAcctDr);
		BigDecimal AmtAcctCr = AmtSourceCr.multiply(CurrencyRate);
		AmtAcctCr = AmtAcctCr.setScale(Precision, BigDecimal.ROUND_HALF_UP);
		mTab.setValue(""AmtAcctCr"", AmtAcctCr);

		setCalloutActive(false);
		return """";
	}   //  amt
"
org.compiere.model.CalloutGLJournal.alias,CalloutGLJournal.java,"String alias (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		String colName = mField.getColumnName();
		if (value == null || isCalloutActive())
			return """";

		setCalloutActive(true);

		int C_Combination_ID = (Integer)value;


		if (colName.equals(""C_AccountAlias_ID""))
			mTab.setValue(""C_ValidCombination_ID"", C_Combination_ID);
		else if (colName.equals(""C_ValidCombination_ID""))
			mTab.setValue(""C_AccountAlias_ID"", C_Combination_ID);

		setCalloutActive(false);

		return """";
	}
"
org.compiere.model.MRfQLineQty.get,MRfQLineQty.java,"MRfQLineQty get (Ctx ctx, int C_RfQLineQty_ID)
	{
		Integer key = Integer.valueOf (C_RfQLineQty_ID);
		MRfQLineQty retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MRfQLineQty (ctx, C_RfQLineQty_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	} //	get
"
org.compiere.model.MRfQLineQty.getUomName,MRfQLineQty.java,"String getUomName()
	{
		if (m_uom == null)
			m_uom = MUOM.get(getCtx(), getC_UOM_ID());
		return m_uom.getName();
	}	//	getUomText
"
org.compiere.model.MRfQLineQty.getResponseQtys,MRfQLineQty.java,"MRfQResponseLineQty[] getResponseQtys (boolean onlyValidAmounts)
	{
		ArrayList<MRfQResponseLineQty> list = new ArrayList<MRfQResponseLineQty>();
		PreparedStatement pstmt = null;
		String sql = ""SELECT * FROM C_RfQResponseLineQty WHERE C_RfQLineQty_ID=? AND IsActive='Y'"";
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getC_RfQLineQty_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MRfQResponseLineQty qty = new MRfQResponseLineQty(getCtx(), rs, get_Trx());
				if (onlyValidAmounts && !qty.isValidAmt())
					;
				else
					list.add (qty);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MRfQResponseLineQty[] retValue = new MRfQResponseLineQty[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getResponseQtys
"
org.compiere.model.MRfQLineQty.toString,MRfQLineQty.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MRfQLineQty["");
		sb.append(get_ID()).append("",Qty="").append(getQty())
			.append("",Offer="").append(isOfferQty())
			.append("",Purchase="").append(isPurchaseQty())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MRequisition.getLines,MRequisition.java,"MRequisitionLine[] getLines(boolean requery)
	{
		if ((m_lines != null) && !requery)
			return m_lines;

		ArrayList<MRequisitionLine> list = new ArrayList<MRequisitionLine>();
		String sql = ""SELECT * FROM M_RequisitionLine WHERE M_Requisition_ID=? ORDER BY Line"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getM_Requisition_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MRequisitionLine (getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""getLines"", e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		m_lines = new MRequisitionLine[list.size ()];
		list.toArray (m_lines);
		return m_lines;
	}	//	getLines
"
org.compiere.model.MRequisition.toString,MRequisition.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MRequisition["");
		sb.append(get_ID()).append(""-"").append(getDocumentNo())
			.append("",Status="").append(getDocStatus()).append("",Action="").append(getDocAction())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MRequisition.getDocumentInfo,MRequisition.java,"String getDocumentInfo()
	{
		return Msg.getElement(getCtx(), ""M_Requisition_ID"") + "" "" + getDocumentNo();
	}	//	getDocumentInfo
"
org.compiere.model.MRequisition.createPDF,MRequisition.java,"File createPDF ()
	{
		try
		{
			File temp = File.createTempFile(get_TableName()+get_ID()+""_"", "".pdf"");
			return createPDF (temp);
		}
		catch (Exception e)
		{
			log.severe(""Could not create PDF - "" + e.getMessage());
		}
		return null;
	}	//	getPDF
"
org.compiere.model.MRequisition.createPDF,MRequisition.java,"File createPDF (File file)
	{
	//	ReportEngine re = ReportEngine.get (getCtx(), ReportEngine.INVOICE, getC_Invoice_ID());
	//	if (re == null)
			return null;
	//	return re.getPDF(file);
	}	//	createPDF
"
org.compiere.model.MRequisition.setM_PriceList_ID,MRequisition.java,"void setM_PriceList_ID()
	{
		MPriceList defaultPL = MPriceList.getDefault(getCtx(), false);
		if (defaultPL == null)
			defaultPL = MPriceList.getDefault(getCtx(), true);
		if (defaultPL != null)
			setM_PriceList_ID(defaultPL.getM_PriceList_ID());
	}	//	setM_PriceList_ID()
"
org.compiere.model.MRequisition.beforeSave,MRequisition.java,"boolean beforeSave (boolean newRecord)
	{
		if (getM_PriceList_ID() == 0)
			setM_PriceList_ID();
		return true;
	}	//	beforeSave
"
org.compiere.model.MRequisition.processIt,MRequisition.java,"boolean processIt (String processAction)
	{
		m_processMsg = null;
		DocumentEngine engine = new DocumentEngine (this, getDocStatus());
		return engine.processIt (processAction, getDocAction());
	}	//	process
"
org.compiere.model.MRequisition.unlockIt,MRequisition.java,"boolean unlockIt()
	{
		log.info(""unlockIt - "" + toString());
		setProcessing(false);
		return true;
	}	//	unlockIt
"
org.compiere.model.MRequisition.invalidateIt,MRequisition.java,"boolean invalidateIt()
	{
		log.info(""invalidateIt - "" + toString());
		return true;
	}	//	invalidateIt
"
org.compiere.model.MRequisition.prepareIt,MRequisition.java,"String prepareIt()
	{
		log.info(toString());
		m_processMsg = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_BEFORE_PREPARE);
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;
		MRequisitionLine[] lines = getLines(true);

		//	Invalid
		if ((getAD_User_ID() == 0)
			|| (getM_PriceList_ID() == 0)
			|| (getM_Warehouse_ID() == 0)
			|| (lines.length == 0))
			return DocActionConstants.STATUS_Invalid;

		//	Std Period open?
		m_processMsg = MPeriod.isOpen(this, lines, getDateDoc(), MDocBaseType.DOCBASETYPE_PurchaseRequisition);
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;

		//	Add up Amounts
		int precision = MPriceList.getStandardPrecision(getCtx(), getM_PriceList_ID());
		BigDecimal totalLines = Env.ZERO;
		for (MRequisitionLine line : lines) {
			BigDecimal lineNet = line.getQty().multiply(line.getPriceActual());
			lineNet = lineNet.setScale(precision, BigDecimal.ROUND_HALF_UP);
			if (lineNet.compareTo(line.getLineNetAmt()) != 0)
			{
				line.setLineNetAmt(lineNet);
				line.save();
			}
			totalLines = totalLines.add (line.getLineNetAmt());
		}
		if (totalLines.compareTo(getTotalLines()) != 0)
		{
			setTotalLines(totalLines);
			save();
		}
		m_justPrepared = true;
		return DocActionConstants.STATUS_InProgress;
	}	//	prepareIt
"
org.compiere.model.MRequisition.approveIt,MRequisition.java,"boolean  approveIt()
	{
		log.info(""approveIt - "" + toString());
		setIsApproved(true);
		return true;
	}	//	approveIt
"
org.compiere.model.MRequisition.rejectIt,MRequisition.java,"boolean rejectIt()
	{
		log.info(""rejectIt - "" + toString());
		setIsApproved(false);
		return true;
	}	//	rejectIt
"
org.compiere.model.MRequisition.completeIt,MRequisition.java,"String completeIt()
	{
		//	Re-Check
		if (!m_justPrepared)
		{
			String status = prepareIt();
			if (!DocActionConstants.STATUS_InProgress.equals(status))
				return status;
		}
		//	Implicit Approval
		if (!isApproved())
			approveIt();
		log.info(toString());
		getLines(m_justPrepared);

		//	User Validation
		String valid = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_AFTER_COMPLETE);
		if (valid != null)
		{
			m_processMsg = valid;
			return DocActionConstants.STATUS_Invalid;
		}
		//
		setProcessed(true);
		setDocAction(DocActionConstants.ACTION_Close);
		return DocActionConstants.STATUS_Completed;
	}	//	completeIt
"
org.compiere.model.MRequisition.voidIt,MRequisition.java,"boolean voidIt()
	{
		log.info(""voidIt - "" + toString());
		return closeIt();
	}	//	voidIt
"
org.compiere.model.MRequisition.closeIt,MRequisition.java,"boolean closeIt()
	{
		log.info(""closeIt - "" + toString());
		//	Close Not delivered Qty
		MRequisitionLine[] lines = getLines(true);
		BigDecimal totalLines = Env.ZERO;
		for (MRequisitionLine line : lines)
		{
			BigDecimal finalQty = line.getQty();
			if (line.getC_OrderLine_ID() == 0)
				finalQty = Env.ZERO;
			else
			{
				MOrderLine ol = new MOrderLine (getCtx(), line.getC_OrderLine_ID(), get_Trx());
				finalQty = ol.getQtyOrdered();
			}
			//	final qty is not line qty
			if (finalQty.compareTo(line.getQty()) != 0)
			{
				String description = line.getDescription();
				if (description == null)
					description = """";
				description += "" ["" + line.getQty() + ""]"";
				line.setDescription(description);
				line.setQty(finalQty);
				line.setLineNetAmt();
				line.save();
			}
			totalLines = totalLines.add (line.getLineNetAmt());
		}
		if (totalLines.compareTo(getTotalLines()) != 0)
		{
			setTotalLines(totalLines);
			save();
		}
		return true;
	}	//	closeIt
"
org.compiere.model.MRequisition.reverseCorrectIt,MRequisition.java,"boolean reverseCorrectIt()
	{
		log.info(""reverseCorrectIt - "" + toString());
		return false;
	}	//	reverseCorrectionIt
"
org.compiere.model.MRequisition.reverseAccrualIt,MRequisition.java,"boolean reverseAccrualIt()
	{
		log.info(""reverseAccrualIt - "" + toString());
		return false;
	}	//	reverseAccrualIt
"
org.compiere.model.MRequisition.reActivateIt,MRequisition.java,"boolean reActivateIt()
	{
		log.info(""reActivateIt - "" + toString());
	//	setProcessed(false);
		if (reverseCorrectIt())
			return true;
		return false;
	}	//	reActivateIt
"
org.compiere.model.MRequisition.getSummary,MRequisition.java,"String getSummary()
	{
		StringBuffer sb = new StringBuffer();
		sb.append(getDocumentNo());
		//	 - User
		sb.append("" - "").append(getUserName());
		//	: Total Lines = 123.00 (#1)
		sb.append("": "").
			append(Msg.translate(getCtx(),""TotalLines"")).append(""="").append(getTotalLines())
			.append("" (#"").append(getLines(false).length).append("")"");
		//	 - Description
		if ((getDescription() != null) && (getDescription().length() > 0))
			sb.append("" - "").append(getDescription());
		return sb.toString();
	}	//	getSummary
"
org.compiere.model.MRequisition.getProcessMsg,MRequisition.java,"String getProcessMsg()
	{
		return m_processMsg;
	}	//	getProcessMsg
"
org.compiere.model.MRequisition.getDoc_User_ID,MRequisition.java,"int getDoc_User_ID()
	{
		return getAD_User_ID();
	}
"
org.compiere.model.MRequisition.getC_Currency_ID,MRequisition.java,"int getC_Currency_ID()
	{
		MPriceList pl = MPriceList.get(getCtx(), getM_PriceList_ID(), get_Trx());
		return pl.getC_Currency_ID();
	}
"
org.compiere.model.MRequisition.getApprovalAmt,MRequisition.java,"BigDecimal getApprovalAmt()
	{
		return getTotalLines();
	}
"
org.compiere.model.MRequisition.getUserName,MRequisition.java,"String getUserName()
	{
		return MUser.get(getCtx(), getAD_User_ID()).getName();
	}	//	getUserName
"
org.compiere.model.MMailTextTrl.getMailText,MMailText.java,"String getMailText(boolean all)
	{
		if (m_MailText == null)
			translate();
		if (!all)
			return parse(m_MailText);
		//
		StringBuffer sb = new StringBuffer();
		sb.append(m_MailText);
		String s = m_MailText2;
		if (s != null && s.length() > 0)
			sb.append(""\n"").append(s);
		s = m_MailText3;
		if (s != null && s.length() > 0)
			sb.append(""\n"").append(s);
		//
		return parse(sb.toString());
	}	//	getMailText
"
org.compiere.model.MMailTextTrl.getMailText,MMailText.java,"String getMailText()
	{
		if (m_MailText == null)
			translate();
		return parse (m_MailText);
	}	//	getMailText
"
org.compiere.model.MMailTextTrl.getMailText2,MMailText.java,"String getMailText2()
	{
		if (m_MailText == null)
			translate();
		return parse (m_MailText2);
	}	//	getMailText2
"
org.compiere.model.MMailTextTrl.getMailText3,MMailText.java,"String getMailText3()
	{
		if (m_MailText == null)
			translate();
		return parse (m_MailText3);
	}	//	getMailText3
"
org.compiere.model.MMailTextTrl.getMailHeader,MMailText.java,"String getMailHeader()
	{
		if (m_MailHeader == null)
			translate();
		return parse(m_MailHeader);
	}	//	getMailHeader
"
org.compiere.model.MMailTextTrl.parse,MMailText.java,"String parse (String text)
	{
		if (text == null || text.indexOf(""@"") == -1)
			return text;
		//	Parse User
		text = parse (text, m_user);
		//	Parse BP
		text = parse (text, m_bpartner);
		//	Parse PO
		text = parse (text, m_po);
		//
		return text;
	}	//	parse
"
org.compiere.model.MMailTextTrl.parse,MMailText.java,"String parse (String text, PO po)
	{
		if (po == null || text.indexOf(""@"") == -1)
			return text;
		
		String inStr = text;
		String token;
		StringBuffer outStr = new StringBuffer();

		int i = inStr.indexOf(""@"");
		while (i != -1)
		{
			outStr.append(inStr.substring(0, i));			// up to @
			inStr = inStr.substring(i+1, inStr.length());	// from first @

			int j = inStr.indexOf(""@"");						// next @
			if (j < 0)										// no second tag
			{
				inStr = ""@"" + inStr;
				break;
			}

			token = inStr.substring(0, j);
			outStr.append(parseVariable(token, po));		// replace context

			inStr = inStr.substring(j+1, inStr.length());	// from second @
			i = inStr.indexOf(""@"");
		}

		outStr.append(inStr);           					//	add remainder
		return outStr.toString();
	}	//	parse
"
org.compiere.model.MMailTextTrl.parseVariable,MMailText.java,"String parseVariable (String variable, PO po)
	{
		int index = po.get_ColumnIndex(variable);
		if (index == -1)
			return ""@"" + variable + ""@"";	//	keep for next
		//
		Object value = po.get_Value(index);
		if (value == null)
			return """";
		return value.toString();
	}	//	translate
"
org.compiere.model.MMailTextTrl.setUser,MMailText.java,"void setUser (int AD_User_ID)
	{
		m_user = MUser.get (getCtx(), AD_User_ID);
	}	//	setUser
"
org.compiere.model.MMailTextTrl.setUser,MMailText.java,"void setUser (MUser user)
	{
		m_user = user;
	}	//	setUser
"
org.compiere.model.MMailTextTrl.setBPartner,MMailText.java,"void setBPartner (int C_BPartner_ID)
	{
		m_bpartner = new MBPartner (getCtx(), C_BPartner_ID, get_Trx());
	}	//	setBPartner
"
org.compiere.model.MMailTextTrl.setBPartner,MMailText.java,"void setBPartner (MBPartner bpartner)
	{
		m_bpartner = bpartner;
	}	//	setBPartner
"
org.compiere.model.MMailTextTrl.setPO,MMailText.java,"void setPO (PO po)
	{
		m_po = po;
	}	//	setPO
"
org.compiere.model.MMailTextTrl.setPO,MMailText.java,"void setPO (PO po, boolean analyse)
	{
		m_po = po;
		if (analyse)
		{
			int index = po.get_ColumnIndex(""C_BPartner_ID"");
			if (index > 0)
			{
				Object oo = po.get_Value(index);
				if (oo instanceof Integer)
				{
					int C_BPartner_ID = ((Integer)oo).intValue();
					setBPartner(C_BPartner_ID);
				}
			}
			index = po.get_ColumnIndex(""AD_User_ID"");
			if (index > 0)
			{
				Object oo = po.get_Value(index);
				if (oo instanceof Integer)
				{
					int AD_User_ID = ((Integer)oo).intValue();
					setUser(AD_User_ID);
				}
			}
		}
	}	//	setPO
"
org.compiere.model.MMailTextTrl.translate,MMailText.java,"void translate()
	{
		if (m_bpartner != null && m_bpartner.getAD_Language() != null)
		{
			String key = m_bpartner.getAD_Language() + get_ID();
			MMailTextTrl trl = s_cacheTrl.get(getCtx(), key);
			if (trl == null)
			{
				trl = getTranslation(m_bpartner.getAD_Language());
				if (trl != null)
					s_cacheTrl.put(key, trl);
			}
			if (trl != null)
			{
				m_MailHeader = trl.MailHeader;
				m_MailText = trl.MailText;
				m_MailText2 = trl.MailText2;
				m_MailText3 = trl.MailText3;
			}
		}
		//	No Translation
		m_MailHeader = super.getMailHeader();
		m_MailText = super.getMailText();
		m_MailText2 = super.getMailText2();
		m_MailText3 = super.getMailText3();
	}	//	translate
"
org.compiere.model.MMailTextTrl.getTranslation,MMailText.java,"MMailTextTrl getTranslation (String AD_Language)
	{
		MMailTextTrl trl = null;
		PreparedStatement pstmt = null;
		String sql = ""SELECT * FROM R_MailText_Trl WHERE R_MailText_ID=? AND AD_Language=?"";
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, getR_MailText_ID());
			pstmt.setString(2, AD_Language);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next())
			{
				trl = new MMailTextTrl();
				trl.AD_Language = rs.getString(""AD_Language"");
				trl.MailHeader = rs.getString(""MailHeader"");
				trl.MailText = rs.getString(""MailText"");
				trl.MailText2 = rs.getString(""MailText2"");
				trl.MailText3 = rs.getString(""MailText3"");
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return trl;
	}	//	getTranslation
"
org.compiere.model.MTransaction.toString,MTransaction.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MTransaction["");
		sb.append(get_ID()).append("","").append(getMovementType())
			.append("",Qty="").append(getMovementQty())
			.append("",M_Product_ID="").append(getM_Product_ID())
			.append("",ASI="").append(getM_AttributeSetInstance_ID())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MInOutLineConfirm.get,MInOutLineConfirm.java,"MInOutLineConfirm get (MInOutConfirm confirm, MInOutLine line)
	{
		MInOutLineConfirm cLine = null;
		String sql = ""SELECT * ""
			+ ""FROM M_InOutLineConfirm ""
			+ ""WHERE M_InOutConfirm_ID = ? ""
			+ ""AND M_InOutLine_ID = ?"";		//	1

		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, confirm.getM_InOutConfirm_ID());
			pstmt.setInt(2, line.getM_InOutLine_ID());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				cLine = new MInOutLineConfirm(confirm.getCtx(),rs,null);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		
		return cLine;

	}
"
org.compiere.model.MInOutLineConfirm.setInOutLine,MInOutLineConfirm.java,"void setInOutLine (MInOutLine line)
	{
		setM_InOutLine_ID(line.getM_InOutLine_ID());
		setTargetQty(line.getMovementQty());	//	Confirmations in Storage UOM	
		setConfirmedQty (getTargetQty());		//	suggestion
		m_line = line;
	}	//	setInOutLine
"
org.compiere.model.MInOutLineConfirm.getLine,MInOutLineConfirm.java,"MInOutLine getLine()
	{
		if (m_line == null)
			m_line = new MInOutLine (getCtx(), getM_InOutLine_ID(), get_Trx());
		return m_line;
	}	//	getLine
"
org.compiere.model.MInOutLineConfirm.processLine,MInOutLineConfirm.java,"boolean processLine (boolean isSOTrx, String confirmType)
	{
		MInOutLine line = getLine();
		
		//	Customer
		if (X_M_InOutConfirm.CONFIRMTYPE_CustomerConfirmation.equals(confirmType))
		{
			line.setConfirmedQty(getConfirmedQty());
		}
		
		//	Drop Ship
		else if (X_M_InOutConfirm.CONFIRMTYPE_DropShipConfirm.equals(confirmType))
		{
			
		}
		
		//	Pick or QA
		else if (X_M_InOutConfirm.CONFIRMTYPE_PickQAConfirm.equals(confirmType))
		{
			line.setTargetQty(getTargetQty());
			line.setMovementQty(getConfirmedQty());	//	Entered NOT changed
			line.setPickedQty(getConfirmedQty());
			//
			line.setScrappedQty(getScrappedQty());
		}
		
		//	Ship or Receipt
		else if (X_M_InOutConfirm.CONFIRMTYPE_ShipReceiptConfirm.equals(confirmType))
		{
			line.setTargetQty(getTargetQty());
			BigDecimal qty = getConfirmedQty();
			Boolean isReturnTrx = line.getParent().isReturnTrx();
			
			/* In PO receipts and SO Returns, we have the responsibility 
			 * for scrapped quantity
			 */
			if ((!isSOTrx && !isReturnTrx) || (isSOTrx && isReturnTrx)) 
				qty = qty.add(getScrappedQty());
			line.setMovementQty(qty);				//	Entered NOT changed
			//
			line.setScrappedQty(getScrappedQty());
		}
		//	Vendor
		else if (X_M_InOutConfirm.CONFIRMTYPE_VendorConfirmation.equals(confirmType))
		{
			line.setConfirmedQty(getConfirmedQty());
		}
		
		return line.save(get_Trx());
	}	//	processConfirmation
"
org.compiere.model.MInOutLineConfirm.isFullyConfirmed,MInOutLineConfirm.java,"boolean isFullyConfirmed()
	{
		return getTargetQty().compareTo(getConfirmedQty()) == 0;
	}	//	isFullyConfirmed
"
org.compiere.model.MInOutLineConfirm.beforeDelete,MInOutLineConfirm.java,"boolean beforeDelete ()
	{
		log.saveError(""Error"", Msg.getMsg(getCtx(), ""CannotDelete""));
		return false;
	}	//	beforeDelete
"
org.compiere.model.MInOutLineConfirm.beforeSave,MInOutLineConfirm.java,"boolean beforeSave (boolean newRecord)
	{
		//	Calculate Difference = Target - Confirmed - Scrapped
		BigDecimal difference = getTargetQty();
		difference = difference.subtract(getConfirmedQty());
		difference = difference.subtract(getScrappedQty());
		setDifferenceQty(difference);
		//
		return true;
	}	//	beforeSave
"
org.compiere.model.MAttributeInstance.setValueNumber,MAttributeInstance.java,"void setValueNumber (BigDecimal ValueNumber)
	{
		super.setValueNumber (ValueNumber);
		if (ValueNumber == null)
		{
			setValue(null);
			return;
		}
		if (ValueNumber.signum() == 0)
		{
			setValue(""0"");
			return;
		}
		//	Display number w/o decimal 0
		char[] chars = ValueNumber.toString().toCharArray();
		StringBuffer display = new StringBuffer();
		boolean add = false;
		for (int i = chars.length-1; i >= 0; i--)
		{
			char c = chars[i];
			if (add)
				display.insert(0, c);
			else
			{
				if (c == '0')
					continue;
				else if (c == '.')	//	decimal point
					add = true;
				else
				{
					display.insert(0, c);
					add = true;
				}
			}
		}			
		setValue(display.toString());
	}	//	setValueNumber
"
org.compiere.model.MAttributeInstance.toString,MAttributeInstance.java,"String toString()
	{
		return getValue();
	}	//	toString
"
org.compiere.model.MProduct.get,MProduct.java,"MProduct get (Ctx ctx, int M_Product_ID)
	{
		Integer key = Integer.valueOf (M_Product_ID);
		MProduct retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MProduct (ctx, M_Product_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MProduct.findAll,MProduct.java,"ArrayList<MProduct> findAll (Ctx ctx, String whereClause, Trx trx)
	{
		String sql = ""SELECT * FROM M_Product WHERE AD_Client_ID=? "";
		if (whereClause != null && whereClause.length() > 0)
			sql += "" AND "" + whereClause;
		ArrayList<MProduct> list = new ArrayList<MProduct>();
		int AD_Client_ID = ctx.getAD_Client_ID();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt(1, AD_Client_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MProduct (ctx, rs, trx));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e); 
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return list;
	}	//	get
"
org.compiere.model.MProduct.getTrial,MProduct.java,"MProduct getTrial(Ctx ctx, String entityType)
	{
		if (Util.isEmpty(entityType))
		{
			s_log.warning(""No Entity Type"");
			return null;
		}
		MProduct retValue = null;
		String sql = ""SELECT * FROM M_Product ""
			+ ""WHERE LicenseInfo LIKE ? AND TrialPhaseDays > 0 AND IsActive='Y' ORDER BY TrialPhaseDays DESC"";
		String entityTypeLike = ""%"" + entityType + ""%"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setString(1, entityTypeLike);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				retValue = new MProduct(ctx, rs, null);
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		if (retValue != null && retValue.getAD_Client_ID() != ctx.getAD_Client_ID())
			s_log.warning(""ProductClient_ID="" + retValue.getAD_Client_ID() + "" <> EnvClient_ID="" + ctx.getAD_Client_ID());
		if (retValue != null && retValue.getA_Asset_Group_ID() == 0)
		{
			s_log.warning(""Product has no Asset Group - "" + retValue);
			return null;
		}
		if (retValue == null)
			s_log.warning(""No Product for EntityType - "" + entityType);
		return retValue;
	}	//	getTrial
"
org.compiere.model.MProduct.isProductStocked,MProduct.java,"boolean isProductStocked (Ctx ctx, int M_Product_ID)
	{
		MProduct product = get (ctx, M_Product_ID);
		return product.isStocked();
	}	//	isProductStocked
"
org.compiere.model.MProduct.setExpenseType,MProduct.java,"boolean setExpenseType (MExpenseType parent)
	{
		boolean changed = false;
		if (!PRODUCTTYPE_ExpenseType.equals(getProductType()))
		{
			setProductType(PRODUCTTYPE_ExpenseType);
			changed = true;
		}
		if (parent.getS_ExpenseType_ID() != getS_ExpenseType_ID())
		{
			setS_ExpenseType_ID(parent.getS_ExpenseType_ID());
			changed = true;
		}
		if (parent.isActive() != isActive())
		{
			setIsActive(parent.isActive());
			changed = true;
		}
		//
		if (!parent.getValue().equals(getValue()))
		{
			setValue(parent.getValue());
			changed = true;
		}
		if (!parent.getName().equals(getName()))
		{
			setName(parent.getName());
			changed = true;
		}
		if ((parent.getDescription() == null && getDescription() != null)
			|| (parent.getDescription() != null && !parent.getDescription().equals(getDescription())))
		{
			setDescription(parent.getDescription());
			changed = true;
		}
		if (parent.getC_UOM_ID() != getC_UOM_ID())
		{
			setC_UOM_ID(parent.getC_UOM_ID());
			changed = true;
		}
		if (parent.getM_Product_Category_ID() != getM_Product_Category_ID())
		{
			setM_Product_Category_ID(parent.getM_Product_Category_ID());
			changed = true;
		}
		if (parent.getC_TaxCategory_ID() != getC_TaxCategory_ID())
		{
			setC_TaxCategory_ID(parent.getC_TaxCategory_ID());
			changed = true;
		}
		//
		return changed;
	}	//	setExpenseType
"
org.compiere.model.MProduct.setResource,MProduct.java,"boolean setResource (MResource parent)
	{
		boolean changed = false;
		if (!PRODUCTTYPE_Resource.equals(getProductType()))
		{
			setProductType(PRODUCTTYPE_Resource);
			changed = true;
		}
		if (parent.getS_Resource_ID() != getS_Resource_ID())
		{
			setS_Resource_ID(parent.getS_Resource_ID());
			changed = true;
		}
		if (parent.isActive() != isActive())
		{
			setIsActive(parent.isActive());
			changed = true;
		}
		//
		if (!parent.getValue().equals(getValue()))
		{
			setValue(parent.getValue());
			changed = true;
		}
		if (!parent.getName().equals(getName()))
		{
			setName(parent.getName());
			changed = true;
		}
		if ((parent.getDescription() == null && getDescription() != null)
			|| (parent.getDescription() != null && !parent.getDescription().equals(getDescription())))
		{
			setDescription(parent.getDescription());
			changed = true;
		}
		//
		return changed;
	}	//	setResource
"
org.compiere.model.MProduct.setResource,MProduct.java,"boolean setResource (MResourceType parent)
	{
		boolean changed = false;
		if (PRODUCTTYPE_Resource.equals(getProductType()))
		{
			setProductType(PRODUCTTYPE_Resource);
			changed = true;
		}
		//
		if (parent.getC_UOM_ID() != getC_UOM_ID())
		{
			setC_UOM_ID(parent.getC_UOM_ID());
			changed = true;
		}
		if (parent.getM_Product_Category_ID() != getM_Product_Category_ID())
		{
			setM_Product_Category_ID(parent.getM_Product_Category_ID());
			changed = true;
		}
		if (parent.getC_TaxCategory_ID() != getC_TaxCategory_ID())
		{
			setC_TaxCategory_ID(parent.getC_TaxCategory_ID());
			changed = true;
		}
		//
		return changed;
	}	//	setResource
"
org.compiere.model.MProduct.getUOMPrecision,MProduct.java,"int getUOMPrecision()
	{
		if (m_precision == null)
		{
			int C_UOM_ID = getC_UOM_ID();
			if (C_UOM_ID == 0)
				return 0;	//	EA
			m_precision = Integer.valueOf (MUOM.getPrecision(getCtx(), C_UOM_ID));
		}
		return m_precision.intValue();
	}	//	getUOMPrecision
"
org.compiere.model.MProduct.getA_Asset_Group_ID,MProduct.java,"int getA_Asset_Group_ID()
	{
		MProductCategory pc = MProductCategory.get(getCtx(), getM_Product_Category_ID());
		return pc.getA_Asset_Group_ID();
	}	//	getA_Asset_Group_ID
"
org.compiere.model.MProduct.isCreateAsset,MProduct.java,"boolean isCreateAsset()
	{
		MProductCategory pc = MProductCategory.get(getCtx(), getM_Product_Category_ID());
		return pc.getA_Asset_Group_ID() != 0;
	}	//	isCreated
"
org.compiere.model.MProduct.getAttributeSet,MProduct.java,"MAttributeSet getAttributeSet()
	{
		if (getM_AttributeSet_ID() != 0)
			return MAttributeSet.get(getCtx(), getM_AttributeSet_ID());
		return null;
	}	//	getAttributeSet
"
org.compiere.model.MProduct.isInstanceAttribute,MProduct.java,"boolean isInstanceAttribute()
	{
		if (getM_AttributeSet_ID() == 0)
			return false;
		MAttributeSet mas = MAttributeSet.get(getCtx(), getM_AttributeSet_ID());
		return mas.isInstanceAttribute();
	}	//	isInstanceAttribute
"
org.compiere.model.MProduct.isOneAssetPerUOM,MProduct.java,"boolean isOneAssetPerUOM()
	{
		MProductCategory pc = MProductCategory.get(getCtx(), getM_Product_Category_ID());
		if (pc.getA_Asset_Group_ID() == 0)
			return false;
		MAssetGroup ag = MAssetGroup.get(getCtx(), pc.getA_Asset_Group_ID());
		return ag.isOneAssetPerUOM();
	}	//	isOneAssetPerUOM
"
org.compiere.model.MProduct.isItem,MProduct.java,"boolean isItem()
	{
		return PRODUCTTYPE_Item.equals(getProductType());
	}	//	isItem
"
org.compiere.model.MProduct.isStocked,MProduct.java,"boolean isStocked ()
	{
		return super.isStocked() && isItem();
	}	//	isStocked
"
org.compiere.model.MProduct.isService,MProduct.java,"boolean isService()
	{
		//	PRODUCTTYPE_Service, PRODUCTTYPE_Resource, PRODUCTTYPE_Online
		return !isItem();	//	
	}	//	isService
"
org.compiere.model.MProduct.getUOMSymbol,MProduct.java,"String getUOMSymbol()
	{
		int C_UOM_ID = getC_UOM_ID();
		if (C_UOM_ID == 0)
			return """";
		return MUOM.get(getCtx(), C_UOM_ID).getUOMSymbol();
	}	//	getUOMSymbol
"
org.compiere.model.MProduct.getProductDownloads,MProduct.java,"MProductDownload[] getProductDownloads (boolean requery)
	{
		if (m_downloads != null && !requery)
			return m_downloads;
		//
		ArrayList<MProductDownload> list = new ArrayList<MProductDownload>();
		String sql = ""SELECT * FROM M_ProductDownload ""
			+ ""WHERE M_Product_ID=? AND IsActive='Y' ORDER BY Name"";
		//
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getM_Product_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MProductDownload (getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		m_downloads = new MProductDownload[list.size ()];
		list.toArray (m_downloads);
		return m_downloads;
	}	//	getProductDownloads
"
org.compiere.model.MProduct.hasDownloads,MProduct.java,"boolean hasDownloads()
	{
		getProductDownloads(false);
		return m_downloads != null && m_downloads.length > 0;
	}	//	hasDownloads
"
org.compiere.model.MProduct.getSupportUnits,MProduct.java,"int getSupportUnits()
	{
		int ii = super.getSupportUnits ();
		if (ii < 1)
			ii = 1;
		return ii;
	}	//	getSupportUnits
"
org.compiere.model.MProduct.setM_Product_Category_ID,MProduct.java,"void setM_Product_Category_ID (String oldM_Product_Category_ID, 
			String newM_Product_Category_ID, int windowNo) throws Exception
	{
		if (newM_Product_Category_ID == null || newM_Product_Category_ID.length() == 0)
			return;
		int M_Product_Category_ID = Integer.parseInt(newM_Product_Category_ID);
		if (M_Product_Category_ID == 0)
			return;
		//
		super.setM_Product_Category_ID(M_Product_Category_ID);
		MProductCategory pc = new MProductCategory (getCtx(), M_Product_Category_ID, get_Trx());
		setIsPurchasedToOrder(pc.isPurchasedToOrder());
	}	//	setC_BPartner_Location_ID
"
org.compiere.model.MProduct.setAD_Org_ID,MProduct.java,"void setAD_Org_ID (String oldAD_Org_ID, String newAD_Org_ID,
			int windowNo) throws Exception {	
		if (newAD_Org_ID == null || newAD_Org_ID.length() == 0)
		{
			return;
		}
		int AD_Org_ID = Integer.parseInt(newAD_Org_ID); 
		MLocator defaultLocator = MLocator.getDefaultLocatorOfOrg(getCtx(), AD_Org_ID);
		if(defaultLocator!=null)
			setM_Locator_ID(defaultLocator.get_ID());
	}	//	setAD_Org_ID
"
org.compiere.model.MProduct.toString,MProduct.java,"String toString()
	{
		StringBuffer sb = new StringBuffer(""MProduct["");
		sb.append(get_ID()).append(""-"").append(getValue())
			.append("",C_UOM_ID="").append(getC_UOM_ID())
			.append(""]"");
		return sb.toString();
	}	//	toString
"
org.compiere.model.MProduct.beforeSave,MProduct.java,"boolean beforeSave (boolean newRecord)
	{
		//	Check Storage
		if (!newRecord && 	//	
			((is_ValueChanged(""IsActive"") && !isActive())		//	now not active 
			|| (is_ValueChanged(""IsStocked"") && !isStocked())	//	now not stocked
			|| (is_ValueChanged(""ProductType"") 					//	from Item
				&& PRODUCTTYPE_Item.equals(get_ValueOld(""ProductType"")))))
		{
			MStorage[] storages = MStorage.getOfProduct(getCtx(), get_ID(), get_Trx());
			BigDecimal OnHand = Env.ZERO;
			BigDecimal Ordered = Env.ZERO;
			BigDecimal Reserved = Env.ZERO;
			for (MStorage element : storages) {
				OnHand = OnHand.add(element.getQtyOnHand());
				Ordered = Ordered.add(element.getQtyOrdered());
				Reserved = Reserved.add(element.getQtyReserved());
			}
			String errMsg = """";
			if (OnHand.signum() != 0)
				errMsg = ""@QtyOnHand@ = "" + OnHand;
			if (Ordered.signum() != 0)
				errMsg += "" - @QtyOrdered@ = "" + Ordered;
			if (Reserved.signum() != 0)
				errMsg += "" - @QtyReserved@"" + Reserved;
			if (errMsg.length() > 0)
			{
				log.saveError(""Error"", Msg.parseTranslation(getCtx(), errMsg)); 
				return false;
			}
		}	//	storage
		
		//	Reset Stocked if not Item
		if (isStocked() && !PRODUCTTYPE_Item.equals(getProductType()))
			setIsStocked(false);
		
		//	UOM reset
		if (m_precision != null && is_ValueChanged(""C_UOM_ID""))
			m_precision = null;
		
		//	Defaults
		if (getC_UOM_ID() == 0)
			setC_UOM_ID(MUOM.Each_ID);
		if (getM_Product_Category_ID() == 0)
		{
			MProductCategory pc = MProductCategory.getDefault(getCtx());
			setM_Product_Category_ID(pc.getM_Product_Category_ID());
		}
		if (getC_TaxCategory_ID() == 0)
		{
			MTaxCategory tc = MTaxCategory.getDefault(getCtx());
			setC_TaxCategory_ID(tc.getC_TaxCategory_ID());
		}
		
		return true;
	}	//	beforeSave
"
org.compiere.model.MProduct.afterSave,MProduct.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!success)
			return success;
		
		//	Value/Name change in Account
		if (!newRecord && (is_ValueChanged(""Value"") || is_ValueChanged(""Name"")))
			MAccount.updateValueDescription(getCtx(), ""M_Product_ID="" + getM_Product_ID(), get_Trx());
		
		//	Name/Description Change in Asset	MAsset.setValueNameDescription
		if (!newRecord && (is_ValueChanged(""Name"") || is_ValueChanged(""Description"")))
		{
			String sql = ""UPDATE A_Asset a ""
				+ ""SET (Name, Description)=""
					+ ""(SELECT SUBSTR(bp.Name || ' - ' || p.Name,1,60), p.Description ""
					+ ""FROM M_Product p, C_BPartner bp ""
					+ ""WHERE p.M_Product_ID=a.M_Product_ID AND bp.C_BPartner_ID=a.C_BPartner_ID) ""
				+ ""WHERE IsActive='Y'""
			//	+ "" AND GuaranteeDate > SysDate""
				+ ""  AND M_Product_ID="" + getM_Product_ID();
			int no = DB.executeUpdate(sql, get_Trx());
			log.fine(""Asset Description updated #"" + no);
		}
		
		//	New - Acct, Tree, Old Costing
		if (newRecord)
		{
			success = insert_Accounting(""M_Product_Acct"", ""M_Product_Category_Acct"",
				""p.M_Product_Category_ID="" + getM_Product_Category_ID());
			//
			MAcctSchema[] mass = MAcctSchema.getClientAcctSchema(getCtx(), getAD_Client_ID(), get_Trx());
			for (MAcctSchema element : mass) {
				//	Old
				MProductCosting pcOld = new MProductCosting(this, element.getC_AcctSchema_ID());
				pcOld.save();
			}
		}
		
		//	New Costing
		if (newRecord || is_ValueChanged(""M_Product_Category_ID""))
			MCost.create(this,null);

		return success;
	}	//	afterSave
"
org.compiere.model.MProduct.beforeDelete,MProduct.java,"boolean beforeDelete ()
	{
		//	Check Storage
		if (isStocked() || PRODUCTTYPE_Item.equals(getProductType()))
		{
			MStorage[] storages = MStorage.getOfProduct(getCtx(), get_ID(), get_Trx());
			BigDecimal OnHand = Env.ZERO;
			BigDecimal Ordered = Env.ZERO;
			BigDecimal Reserved = Env.ZERO;
			for (MStorage element : storages) {
				OnHand = OnHand.add(element.getQtyOnHand());
				Ordered = OnHand.add(element.getQtyOrdered());
				Reserved = OnHand.add(element.getQtyReserved());
			}
			String errMsg = """";
			if (OnHand.signum() != 0)
				errMsg = ""@QtyOnHand@ = "" + OnHand;
			if (Ordered.signum() != 0)
				errMsg += "" - @QtyOrdered@ = "" + Ordered;
			if (Reserved.signum() != 0)
				errMsg += "" - @QtyReserved@"" + Reserved;
			if (errMsg.length() > 0)
			{
				log.saveError(""Error"", Msg.parseTranslation(getCtx(), errMsg)); 
				return false;
			}
			
		}
		//	delete costing
		MProductCosting[] costings = MProductCosting.getOfProduct(getCtx(), get_ID(), get_Trx());
		for (MProductCosting element : costings)
			element.delete(true, get_Trx());

		// delete entries in M_Cost
		DB.executeUpdate(""DELETE FROM M_Cost WHERE M_Product_ID = ?"", get_ID(), get_Trx());
		//
		return delete_Accounting(""M_Product_Acct""); 
	}	//	beforeDelete
"
org.compiere.model.MNewsItem.getNewsChannel,MNewsItem.java,"MNewsChannel getNewsChannel() 
	{
		int[] thisNewsChannel = PO.getAllIDs(""CM_NewsChannel"",""CM_NewsChannel_ID="" + this.getCM_NewsChannel_ID(), get_Trx());
		if (thisNewsChannel!=null) 
		{
			if (thisNewsChannel.length==1)
				return new MNewsChannel(getCtx(), thisNewsChannel[0], get_Trx());
		}
		return null;
	} // getNewsChannel
"
org.compiere.model.MNewsItem.get_rss2ItemCode,MNewsItem.java,"StringBuffer get_rss2ItemCode(StringBuffer xmlCode, MNewsChannel thisChannel) 
	{
		if (this != null)	//	never null ??
		{
			xmlCode.append (""<item>"");
			xmlCode.append (""<CM_NewsItem_ID>""+ this.get_ID() + ""</CM_NewsItem_ID>"");
			xmlCode.append (""  <title><![CDATA[""
				+ this.getTitle () + ""]]></title>"");
			xmlCode.append (""  <description><![CDATA[""
				+ this.getDescription ()
				+ ""]]></description>"");
			xmlCode.append (""  <content><![CDATA[""
				+ this.getContentHTML ()
				+ ""]]></content>"");
			xmlCode.append (""  <link>""
				+ thisChannel.getLink ()
				+ ""?CM_NewsItem_ID="" + this.get_ID() + ""</link>"");
			xmlCode.append (""  <author><![CDATA[""
				+ this.getAuthor () + ""]]></author>"");
			xmlCode.append (""  <pubDate>""
				+ this.getPubDate () + ""</pubDate>"");
			xmlCode.append (""</item>"");
		}
		return xmlCode;
	}
"
org.compiere.model.MNewsItem.afterSave,MNewsItem.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!success)
			return success;
		if (!newRecord)
		{
			MIndex.cleanUp(get_Trx(), getAD_Client_ID(), get_Table_ID(), get_ID());
		}
		reIndex(newRecord);
		return success;
	}	//	afterSave
"
org.compiere.model.MNewsItem.reIndex,MNewsItem.java,"void reIndex(boolean newRecord)
	{
		int CMWebProjectID = 0;
		if (getNewsChannel()!=null)
			CMWebProjectID = getNewsChannel().getCM_WebProject_ID();
		String [] toBeIndexed = new String[4];
		toBeIndexed[0] = this.getAuthor();
		toBeIndexed[1] = this.getDescription();
		toBeIndexed[2] = this.getTitle();
		toBeIndexed[3] = this.getContentHTML();
		MIndex.reIndex (newRecord, toBeIndexed, getCtx(), getAD_Client_ID(), get_Table_ID(), get_ID(), CMWebProjectID, this.getUpdated());
	} // reIndex
"
org.compiere.model.MPaymentTerm.getSchedule,MPaymentTerm.java,"MPaySchedule[] getSchedule (boolean requery)
	{
		if (m_schedule != null && !requery)
			return m_schedule;
		String sql = ""SELECT * FROM C_PaySchedule WHERE C_PaymentTerm_ID=? ORDER BY NetDays"";
		ArrayList<MPaySchedule> list = new ArrayList<MPaySchedule>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getC_PaymentTerm_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				MPaySchedule ps = new MPaySchedule(getCtx(), rs, get_Trx());
				ps.setParent(this);
				list.add (ps);
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""getSchedule"", e); 
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		m_schedule = new MPaySchedule[list.size()];
		list.toArray(m_schedule);
		return m_schedule;
	}	//	getSchedule
"
org.compiere.model.MPaymentTerm.validate,MPaymentTerm.java,"String validate()
	{
		getSchedule(true);
		if (m_schedule.length == 0)
		{
			setIsValid(true);
			String msg = ""@OK@"";
			return Msg.parseTranslation(getCtx(), msg);
		}
		//	Add up
		BigDecimal total = Env.ZERO;
		for (MPaySchedule element : m_schedule) {
			BigDecimal percent = element.getPercentage();
			if (percent != null)
				total = total.add(percent);
		}
		boolean valid = total.compareTo(HUNDRED) == 0;
		setIsValid (valid);
		for (MPaySchedule element : m_schedule) {
			if (element.isValid() != valid)
			{
				element.setIsValid(valid);
				element.save();
			}
		}
		String msg = ""@OK@"";
		if (!valid)
			msg = ""@Total@ = "" + total + "" - @Difference@ = "" + HUNDRED.subtract(total); 
		return Msg.parseTranslation(getCtx(), msg);
	}	//	validate
"
org.compiere.model.MPaymentTerm.apply,MPaymentTerm.java,"boolean apply (int C_Invoice_ID)
	{
		MInvoice invoice = new MInvoice (getCtx(), C_Invoice_ID, get_Trx());
		if (invoice == null || invoice.get_ID() == 0)
		{
			log.log(Level.SEVERE, ""apply - Not valid C_Invoice_ID="" + C_Invoice_ID);
			return false;
		}
		return apply (invoice);
	}	//	apply
"
org.compiere.model.MPaymentTerm.apply,MPaymentTerm.java,"boolean apply (MInvoice invoice)
	{
		if (invoice == null || invoice.get_ID() == 0)
		{
			log.log(Level.SEVERE, ""No valid invoice - "" + invoice);
			return false;
		}

		if (!isValid())
			return applyNoSchedule (invoice);
		//
		getSchedule(true);
		if (m_schedule.length <= 0)
			return applyNoSchedule (invoice);
		else	//	only if valid
			return applySchedule(invoice);		
	}	//	apply
"
org.compiere.model.MPaymentTerm.applyNoSchedule,MPaymentTerm.java,"boolean applyNoSchedule (MInvoice invoice)
	{
		deleteInvoicePaySchedule (invoice.getC_Invoice_ID(), invoice.get_Trx());
		//	updateInvoice
		if (invoice.getC_PaymentTerm_ID() != getC_PaymentTerm_ID())
			invoice.setC_PaymentTerm_ID(getC_PaymentTerm_ID());
		if (invoice.isPayScheduleValid())
			invoice.setIsPayScheduleValid(false);
		return false;
	}	//	applyNoSchedule
"
org.compiere.model.MPaymentTerm.applySchedule,MPaymentTerm.java,"boolean applySchedule (MInvoice invoice)
	{
		deleteInvoicePaySchedule (invoice.getC_Invoice_ID(), invoice.get_Trx());
		//	Create Schedule
		MInvoicePaySchedule ips = null;
		BigDecimal remainder = invoice.getGrandTotal();
		for (MPaySchedule element : m_schedule) {
			ips = new MInvoicePaySchedule (invoice, element);
			ips.save(invoice.get_Trx());
			log.fine(ips.toString());
			remainder = remainder.subtract(ips.getDueAmt());
		}	//	for all schedules
		//	Remainder - update last
		if (remainder.compareTo(Env.ZERO) != 0 && ips != null)
		{
			ips.setDueAmt(ips.getDueAmt().add(remainder));
			ips.save(invoice.get_Trx());
			log.fine(""Remainder="" + remainder + "" - "" + ips);
		}
		
		//	updateInvoice
		if (invoice.getC_PaymentTerm_ID() != getC_PaymentTerm_ID())
			invoice.setC_PaymentTerm_ID(getC_PaymentTerm_ID());
		return invoice.validatePaySchedule();
	}	//	applySchedule
"
org.compiere.model.MPaymentTerm.deleteInvoicePaySchedule,MPaymentTerm.java,"void deleteInvoicePaySchedule (int C_Invoice_ID, Trx trx)
	{
		String sql = ""DELETE FROM C_InvoicePaySchedule WHERE C_Invoice_ID="" + C_Invoice_ID;
		int no = DB.executeUpdate(sql, trx);
		log.fine(""C_Invoice_ID="" + C_Invoice_ID + "" - #"" + no);
	}	//	deleteInvoicePaySchedule
"
org.compiere.model.MPaymentTerm.toString,MPaymentTerm.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MPaymentTerm["");
		sb.append(get_ID()).append(""-"").append(getName())
			.append("",Valid="").append(isValid())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MPaymentTerm.beforeSave,MPaymentTerm.java,"boolean beforeSave (boolean newRecord)
	{
		if (isDueFixed())
		{
			int dd = getFixMonthDay();
			if (dd < 1 || dd > 31)
			{
				log.saveError(""Error"", Msg.parseTranslation(getCtx(), ""@Invalid@ @FixMonthDay@""));
				return false;
			}
			dd = getFixMonthCutoff();
			if (dd < 1 || dd > 31)
			{
				log.saveError(""Error"", Msg.parseTranslation(getCtx(), ""@Invalid@ @FixMonthCutoff@""));
				return false;
			}
		}
		
		if (!newRecord || !isValid())
			validate();
		return true;
	}	//	beforeSave
"
org.compiere.model.MDistributionListLine.getMinQty,MDistributionListLine.java,"BigDecimal getMinQty ()
	{
		BigDecimal minQty = super.getMinQty ();
		if (minQty == null)
			return Env.ZERO;
		return minQty;
	}	//	getMinQty
"
org.compiere.model.MDistributionListLine.getRatio,MDistributionListLine.java,"BigDecimal getRatio ()
	{
		BigDecimal ratio = super.getRatio();
		if (ratio == null)
			return Env.ZERO;
		return ratio;
	}	//	getRatio
"
org.compiere.model.MAchievement.get,MAchievement.java,"MAchievement[] get (MMeasure measure)
	{
		return getOfMeasure(measure.getCtx(), measure.getPA_Measure_ID());
	}	//	get
"
org.compiere.model.MAchievement.getOfMeasure,MAchievement.java,"MAchievement[] getOfMeasure (Ctx ctx, int PA_Measure_ID)
	{
		ArrayList<MAchievement> list = new ArrayList<MAchievement>();
		String sql = ""SELECT * FROM PA_Achievement ""
			+ ""WHERE PA_Measure_ID=? AND IsAchieved='Y' ORDER BY SeqNo, DateDoc"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, PA_Measure_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MAchievement (ctx, rs, null));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		MAchievement[] retValue = new MAchievement[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getOfMeasure
"
org.compiere.model.MAchievement.toString,MAchievement.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MAchievement["");
		sb.append (get_ID()).append (""-"").append (getName()).append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MAchievement.beforeSave,MAchievement.java,"boolean beforeSave (boolean newRecord)
	{
		if (isAchieved())
		{
			if (getManualActual().signum() == 0)
				setManualActual(Env.ONE);
			if (getDateDoc() == null)
				setDateDoc(new Timestamp(System.currentTimeMillis()));
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MAchievement.afterSave,MAchievement.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (success)
			updateAchievementGoals();
		return success;
	}	//	afterSave
"
org.compiere.model.MAchievement.afterDelete,MAchievement.java,"boolean afterDelete (boolean success)
	{
		if (success)
			updateAchievementGoals();
		return success;
	}	//	afterDelete
"
org.compiere.model.MAchievement.updateAchievementGoals,MAchievement.java,"void updateAchievementGoals()
	{
		MMeasure measure = MMeasure.get (getCtx(), getPA_Measure_ID());
		measure.updateGoals();
	}	//	updateAchievementGoals
"
org.compiere.model.MProjectIssue.getNextLine,MProjectIssue.java,"int getNextLine()
	{
		return DB.getSQLValue(get_Trx(), 
			""SELECT COALESCE(MAX(Line),0)+10 FROM C_ProjectIssue WHERE C_Project_ID=?"", getC_Project_ID());
	}	//	getLineFromProject
"
org.compiere.model.MProjectIssue.setMandatory,MProjectIssue.java,"void setMandatory (int M_Locator_ID, int M_Product_ID, BigDecimal MovementQty)
	{
		setM_Locator_ID (M_Locator_ID);
		setM_Product_ID (M_Product_ID);
		setMovementQty (MovementQty);
	}	//	setMandatory
"
org.compiere.model.MProjectIssue.getParent,MProjectIssue.java,"MProject getParent()
	{
		if (m_parent == null && getC_Project_ID() != 0)
			m_parent = new MProject (getCtx(), getC_Project_ID(), get_Trx());
		return m_parent;
	}	//	getParent
"
org.compiere.model.MProjectIssue.process,MProjectIssue.java,"boolean process()
	{
		if (!save())
			return false;
		if (getM_Product_ID() == 0)
		{
			log.log(Level.SEVERE, ""No Product"");
			return false;
		}

		MProduct product = MProduct.get (getCtx(), getM_Product_ID());

		//	If not a stocked Item nothing to do
		if (!product.isStocked())
		{
			setProcessed(true);
			return save();
		}

		/** @todo Transaction */

		//	**	Create Material Transactions **
		MTransaction mTrx = new MTransaction (getCtx(), getAD_Org_ID(), 
			X_M_Transaction.MOVEMENTTYPE_WorkOrderPlus,
			getM_Locator_ID(), getM_Product_ID(), getM_AttributeSetInstance_ID(),
			getMovementQty().negate(), getMovementDate(), get_Trx());
		mTrx.setC_ProjectIssue_ID(getC_ProjectIssue_ID());
		//
		MLocator loc = MLocator.get(getCtx(), getM_Locator_ID());
		if (MStorage.add(getCtx(), loc.getM_Warehouse_ID(), getM_Locator_ID(), 
				getM_Product_ID(), getM_AttributeSetInstance_ID(), getM_AttributeSetInstance_ID(),
				getMovementQty().negate(), null, null, get_Trx()))
		{
			if (mTrx.save(get_Trx()))
			{
				setProcessed (true);
				if (save())
					return true;
				else
					log.log(Level.SEVERE, ""Issue not saved"");		//	requires p_trx !!
			}
			else
				log.log(Level.SEVERE, ""Transaction not saved"");	//	requires p_trx !!
		}
		else
			log.log(Level.SEVERE, ""Storage not updated"");			//	OK
		//
		return false;
	}	//	process
"
org.compiere.model.MDistributionRunDetail.get,MDistributionRunDetail.java,"MDistributionRunDetail[] get (Ctx ctx, int M_DistributionRun_ID, 
		boolean orderBP, Trx trx)
	{
		ArrayList<MDistributionRunDetail> list = new ArrayList<MDistributionRunDetail>();
		String sql = ""SELECT * FROM T_DistributionRunDetail WHERE M_DistributionRun_ID=? "";
		if (orderBP)
			sql += ""ORDER BY C_BPartner_ID, C_BPartner_Location_ID"";
		else
			sql += ""ORDER BY M_DistributionRunLine_ID"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, M_DistributionRun_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add(new MDistributionRunDetail(ctx, rs, trx));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MDistributionRunDetail[] retValue = new MDistributionRunDetail[list.size()];
		list.toArray (retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MDistributionRunDetail.round,MDistributionRunDetail.java,"void round (int precision)
	{
		boolean dirty = false;
		m_precision = precision; 
		BigDecimal min = getMinQty();
		if (min.scale() > m_precision)
		{
			setMinQty(min.setScale(m_precision, BigDecimal.ROUND_HALF_UP));
			dirty = true;
		}
		BigDecimal qty = getQty();
		if (qty.scale() > m_precision)
		{
			setQty(qty.setScale(m_precision, BigDecimal.ROUND_HALF_UP));
			dirty = true;
		}
		if (dirty)
			save();
	}	//	round
"
org.compiere.model.MDistributionRunDetail.isCanAdjust,MDistributionRunDetail.java,"boolean isCanAdjust()
	{
		return (getQty().compareTo(getMinQty()) > 0);
	}	//	isCanAdjust
"
org.compiere.model.MDistributionRunDetail.getActualAllocation,MDistributionRunDetail.java,"BigDecimal getActualAllocation()
	{
		if (getQty().compareTo(getMinQty()) > 0)
			return getQty();
		else
			return getMinQty();
	}	//	getActualAllocation
"
org.compiere.model.MDistributionRunDetail.adjustQty,MDistributionRunDetail.java,"BigDecimal adjustQty (BigDecimal difference)
	{
		BigDecimal diff = difference.setScale(m_precision, BigDecimal.ROUND_HALF_UP);
		BigDecimal qty = getQty();
		BigDecimal max = getMinQty().subtract(qty);
		BigDecimal remaining = Env.ZERO;
		if (max.compareTo(diff) > 0)	//	diff+max are negative
		{
			remaining = diff.subtract(max);
			setQty(qty.add(max));
		}
		else
			setQty(qty.add(diff));
		log.fine(""Qty="" + qty + "", Min="" + getMinQty() 
			+ "", Max="" + max + "", Diff="" + diff + "", newQty="" + getQty() 
			+ "", Remaining="" + remaining);
		return remaining;
	}	//	adjustQty
"
org.compiere.model.MDistributionRunDetail.toString,MDistributionRunDetail.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MDistributionRunDetail["")
			.append (get_ID ())
			.append ("";M_DistributionListLine_ID="").append (getM_DistributionListLine_ID())
			.append("";Qty="").append(getQty())
			.append("";Ratio="").append(getRatio())
			.append("";MinQty="").append(getMinQty())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MDunningLevel.getParent,MDunningLevel.java,"MDunning getParent() 
	{
		if (m_dunning==null) 
			m_dunning = new MDunning(getCtx(), getC_Dunning_ID(), get_Trx());
		return m_dunning;
	}
"
org.compiere.model.MDunningLevel.getPreviousLevels,MDunningLevel.java,"MDunningLevel[] getPreviousLevels() 
	{
		// Prevent generation if not Sequentially
		if (!getParent().isCreateLevelsSequentially ())
			return null;
		ArrayList<MDunningLevel> list = new ArrayList<MDunningLevel>();
		String sql = ""SELECT * FROM C_DunningLevel WHERE C_Dunning_ID=? AND DaysAfterDue+DaysBetweenDunning<?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getParent().get_ID ());
			int totalDays = getDaysAfterDue ().intValue ()+getDaysBetweenDunning ();
			pstmt.setInt(2, totalDays);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MDunningLevel(getCtx(), rs, get_Trx()));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

		//
		MDunningLevel[] retValue = new MDunningLevel[list.size()];
		list.toArray(retValue);
		return retValue;
	}
"
org.compiere.model.MTask.execute,MTask.java,"String execute()
	{
		String cmd = Msg.parseTranslation(Env.getCtx(), getOS_Command()).trim();
		if (cmd == null || cmd.equals(""""))
			return ""Cannot execute '"" + getOS_Command() + ""'"";
		//
		if (isServerProcess())
			return executeRemote(cmd);
		return executeLocal(cmd);
	}	//	execute
"
org.compiere.model.MTask.executeLocal,MTask.java,"String executeLocal(String cmd)
	{
		log.config(cmd);
		if (m_task != null && m_task.isAlive())
			m_task.interrupt();

		m_task = new Task(cmd);
		m_task.start();

		StringBuffer sb = new StringBuffer();
		while (true)
		{
			//  Give it a bit of time
			try
			{
				Thread.sleep(500);
			}
			catch (InterruptedException ioe)
			{
				log.log(Level.SEVERE, cmd, ioe);
			}
			//  Info to user
			sb.append(m_task.getOut())
				.append(""\n-----------\n"")
				.append(m_task.getErr())
				.append(""\n-----------"");

			//  Are we done?
			if (!m_task.isAlive())
				break;
		}
		log.config(""done"");
		return sb.toString();
	}	//	executeLocal
"
org.compiere.model.MTask.executeRemote,MTask.java,"String executeRemote(String cmd)
	{
		log.config(cmd);
		return ""Remote:\n"";
	}	//	executeRemote
"
org.compiere.model.MTask.toString,MTask.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MTask["");
		sb.append(get_ID())
			.append(""-"").append(getName())
			.append("";Server="").append(isServerProcess())
			.append("";"").append(getOS_Command())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MAllocationLine.getParent,MAllocationLine.java,"MAllocationHdr getParent()
	{
		if (m_parent == null)
			m_parent = new MAllocationHdr (getCtx(), getC_AllocationHdr_ID(), get_Trx());
		return m_parent;
	}	//	getParent
"
org.compiere.model.MAllocationLine.setParent,MAllocationLine.java,"void setParent (MAllocationHdr parent)
	{
		m_parent = parent;
	}	//	setParent
"
org.compiere.model.MAllocationLine.getDateTrx,MAllocationLine.java,"Timestamp getDateTrx ()
	{
		return getParent().getDateTrx ();
	}	//	getDateTrx
"
org.compiere.model.MAllocationLine.setDocInfo,MAllocationLine.java,"void setDocInfo (int C_BPartner_ID, int C_Order_ID, int C_Invoice_ID)
	{
		setC_BPartner_ID(C_BPartner_ID);
		setC_Order_ID(C_Order_ID);
		setC_Invoice_ID(C_Invoice_ID);
	}	//	setDocInfo
"
org.compiere.model.MAllocationLine.setPaymentInfo,MAllocationLine.java,"void setPaymentInfo (int C_Payment_ID, int C_CashLine_ID)
	{
		if (C_Payment_ID != 0)
			setC_Payment_ID(C_Payment_ID);
		if (C_CashLine_ID != 0)
			setC_CashLine_ID(C_CashLine_ID);
	}	//	setPaymentInfo
"
org.compiere.model.MAllocationLine.getInvoice,MAllocationLine.java,"MInvoice getInvoice()
	{
		if (m_invoice == null && getC_Invoice_ID() != 0)
			m_invoice = new MInvoice (getCtx(), getC_Invoice_ID(), get_Trx());
		return m_invoice;
	}	//	getInvoice
"
org.compiere.model.MAllocationLine.beforeSave,MAllocationLine.java,"boolean beforeSave (boolean newRecord)
	{
		if (!newRecord  
			&& (is_ValueChanged(""C_BPartner_ID"") || is_ValueChanged(""C_Invoice_ID"")))
		{
			log.severe (""Cannot Change Business Partner or Invoice"");
			return false;
		}
		
		//	Set BPartner/Order from Invoice
		if (getC_BPartner_ID() == 0 && getInvoice() != null)
			setC_BPartner_ID(getInvoice().getC_BPartner_ID()); 
		if (getC_Order_ID() == 0 && getInvoice() != null)
			setC_Order_ID(getInvoice().getC_Order_ID());
		//
		return true;
	}	//	beforeSave
"
org.compiere.model.MAllocationLine.beforeDelete,MAllocationLine.java,"boolean beforeDelete ()
	{
		setIsActive(false);
		processIt(true);
		return true;
	}	//	beforeDelete
"
org.compiere.model.MAllocationLine.toString,MAllocationLine.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MAllocationLine["");
		sb.append(get_ID());
		if (getC_Payment_ID() != 0)
			sb.append("",C_Payment_ID="").append(getC_Payment_ID());
		if (getC_CashLine_ID() != 0)
			sb.append("",C_CashLine_ID="").append(getC_CashLine_ID());
		if (getC_Invoice_ID() != 0)
			sb.append("",C_Invoice_ID="").append(getC_Invoice_ID());
		if (getC_BPartner_ID() != 0)
			sb.append("",C_BPartner_ID="").append(getC_BPartner_ID());
		sb.append("", Amount="").append(getAmount())
			.append("",Discount="").append(getDiscountAmt())
			.append("",WriteOff="").append(getWriteOffAmt())
			.append("",OverUnder="").append(getOverUnderAmt());
		sb.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MAllocationLine.processIt,MAllocationLine.java,"int processIt (boolean reverse)
	{
		log.fine(""Reverse="" + reverse + "" - "" + toString());
		int C_Invoice_ID = getC_Invoice_ID();
		MInvoice invoice = getInvoice();
		if (invoice != null 
			&& getC_BPartner_ID() != invoice.getC_BPartner_ID())
			setC_BPartner_ID(invoice.getC_BPartner_ID());
		//
		int C_Payment_ID = getC_Payment_ID();
		int C_CashLine_ID = getC_CashLine_ID();
		
		//	Update Payment
		if (C_Payment_ID != 0)
		{
			MPayment payment = new MPayment (getCtx(), C_Payment_ID, get_Trx());
			if (getC_BPartner_ID() != payment.getC_BPartner_ID())
				log.warning(""C_BPartner_ID different - Invoice="" + getC_BPartner_ID() + "" - Payment="" + payment.getC_BPartner_ID());
			if (reverse)
			{
				if (!payment.isCashTrx())
				{
					payment.setIsAllocated(false);
					payment.save();
				}
			}
			else
			{
				if (payment.testAllocation())
					payment.save();
			}
		}
		
		//	Payment - Invoice
		if (C_Payment_ID != 0 && invoice != null)
		{
			//	Link to Invoice
			if (reverse)
			{
				invoice.setC_Payment_ID(0);
				log.fine(""C_Payment_ID="" + C_Payment_ID
					+ "" Unlinked from C_Invoice_ID="" + C_Invoice_ID);
			}
			else if (invoice.isPaid())
			{
				invoice.setC_Payment_ID(C_Payment_ID);
				log.fine(""C_Payment_ID="" + C_Payment_ID
					+ "" Linked to C_Invoice_ID="" + C_Invoice_ID);
			}
			
			//	Link to Order
			String update = ""UPDATE C_Order o ""
				+ ""SET C_Payment_ID="" 
					+ (reverse ? ""NULL "" : ""(SELECT C_Payment_ID FROM C_Invoice WHERE C_Invoice_ID="" + C_Invoice_ID + "") "")
				+ ""WHERE EXISTS (SELECT * FROM C_Invoice i ""
					+ ""WHERE o.C_Order_ID=i.C_Order_ID AND i.C_Invoice_ID="" + C_Invoice_ID + "")"";
			if (DB.executeUpdate(update, get_Trx()) > 0)
				log.fine(""C_Payment_ID="" + C_Payment_ID 
					+ (reverse ? "" UnLinked from"" : "" Linked to"")
					+ "" order of C_Invoice_ID="" + C_Invoice_ID);
		}
		
		//	Cash - Invoice
		if (C_CashLine_ID != 0 && invoice != null)
		{
			//	Link to Invoice
			if (reverse)
			{
				invoice.setC_CashLine_ID(0);
				log.fine(""C_CashLine_ID="" + C_CashLine_ID 
					+ "" Unlinked from C_Invoice_ID="" + C_Invoice_ID);
			}
			else
			{
				invoice.setC_CashLine_ID(C_CashLine_ID);
				log.fine(""C_CashLine_ID="" + C_CashLine_ID 
					+ "" Linked to C_Invoice_ID="" + C_Invoice_ID);
			}
			
			//	Link to Order
			String update = ""UPDATE C_Order o ""
				+ ""SET C_CashLine_ID=""
					+ (reverse ? ""NULL "" : ""(SELECT C_CashLine_ID FROM C_Invoice WHERE C_Invoice_ID="" + C_Invoice_ID + "") "")
				+ ""WHERE EXISTS (SELECT * FROM C_Invoice i ""
					+ ""WHERE o.C_Order_ID=i.C_Order_ID AND i.C_Invoice_ID="" + C_Invoice_ID + "")"";
			if (DB.executeUpdate(update, get_Trx()) > 0)
				log.fine(""C_CashLine_ID="" + C_CashLine_ID 
					+ (reverse ? "" UnLinked from"" : "" Linked to"")
					+ "" order of C_Invoice_ID="" + C_Invoice_ID);
		}		
		
		//	Update Balance / Credit used - Counterpart of MInvoice.completeIt
		if (invoice != null)
		{
			if (invoice.testAllocation()
				&& !invoice.save())
				log.log(Level.SEVERE, ""Invoice not updated - "" + invoice);
		}
		
		return getC_BPartner_ID();
	}	//	processIt
"
org.compiere.model.PaymentProcessor.create,PaymentProcessor.java,"PaymentProcessor create (MPaymentProcessor mpp, MPayment mp)
	{
		s_log.info(""create for "" + mpp);
		String className = mpp.getPayProcessorClass();
		if (className == null || className.length() == 0)
		{
			s_log.log(Level.SEVERE, ""No PaymentProcessor class name in "" + mpp);
			return null;
		}
		//
		PaymentProcessor myProcessor = null;
		try
		{
			Class<?> ppClass = Class.forName(className);
			if (ppClass != null)
				myProcessor = (PaymentProcessor)ppClass.newInstance();
		}
		catch (Error e1)    //  NoClassDefFound
		{
			s_log.log(Level.SEVERE, className + "" - Error="" + e1.getMessage());
			return null;
		}
		catch (Exception e2)
		{
			s_log.log(Level.SEVERE, className, e2);
			return null;
		}
		if (myProcessor == null)
		{
			s_log.log(Level.SEVERE, ""no class"");
			return null;
		}

		//  Initialize
		myProcessor.p_mpp = mpp;
		myProcessor.p_mp = mp;
		//
		return myProcessor;
	}   //  create
"
org.compiere.model.PaymentProcessor.setTimeout,PaymentProcessor.java,"void setTimeout(int newTimeout)
	{
		m_timeout = newTimeout;
	}
"
org.compiere.model.PaymentProcessor.getTimeout,PaymentProcessor.java,"int getTimeout()
	{
		return m_timeout;
	}
"
org.compiere.model.PaymentProcessor.createPair,PaymentProcessor.java,"String createPair(String name, BigDecimal value, int maxLength)
	{
		if (value == null)
			return createPair (name, ""0"", maxLength);
		else
		{
			if (value.scale() < 2)
				value = value.setScale(2, BigDecimal.ROUND_HALF_UP);
			return createPair (name, String.valueOf(value), maxLength);
		}
	}	//	createPair
"
org.compiere.model.PaymentProcessor.createPair,PaymentProcessor.java,"String createPair(String name, int value, int maxLength)
	{
		if (value == 0)
			return """";
		else
			return createPair (name, String.valueOf(value), maxLength);
	}	//	createPair
"
org.compiere.model.PaymentProcessor.createPair,PaymentProcessor.java,"String createPair(String name, String value, int maxLength)
	{
		//  Nothing to say
		if (name == null || name.length() == 0
			|| value == null || value.length() == 0)
			return """";
		
		if (value.length() > maxLength)
			value = value.substring(0, maxLength);
		
		StringBuffer retValue = new StringBuffer(name);
		if (m_encoded)
			try
			{
				value = URLEncoder.encode(value, ENCODING);
			}
			catch (UnsupportedEncodingException e)
			{
				log.log(Level.SEVERE, value + "" - "" + e.toString());
			}
		else if (value.indexOf(AMP) != -1 || value.indexOf(EQ) != -1)
			retValue.append(""["").append(value.length()).append(""]"");
		//
		retValue.append(EQ);
		retValue.append(value);
		return retValue.toString();
	}   // createPair
"
org.compiere.model.PaymentProcessor.setEncoded,PaymentProcessor.java,"void setEncoded (boolean doEncode)
	{
		m_encoded = doEncode;
	}	//	setEncode
"
org.compiere.model.PaymentProcessor.isEncoded,PaymentProcessor.java,"boolean isEncoded()
	{
		return m_encoded;
	}	//	setEncode
"
org.compiere.model.PaymentProcessor.getConnectPostProperties,PaymentProcessor.java,"Properties getConnectPostProperties (String urlString, String parameter)
	{
		long start = System.currentTimeMillis();
		String result = connectPost(urlString, parameter);
		if (result == null)
			return null;
		Properties prop = new Properties();
		try
		{
			String info = URLDecoder.decode(result, ENCODING);
			StringTokenizer st = new StringTokenizer(info, ""&"");	//	AMP
			while (st.hasMoreTokens())
			{
				String token = st.nextToken();
				int index = token.indexOf('=');
				if (index == -1)
					prop.put(token, """");
				else
				{
					String key = token.substring(0, index);
					String value = token.substring(index+1);
					prop.put(key, value);
				}
			}
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, result, e);
		}
		long ms = System.currentTimeMillis() - start;
		log.fine(ms + ""ms - "" + prop.toString());
		return prop;
	}	//	connectPost
"
org.compiere.model.PaymentProcessor.connectPost,PaymentProcessor.java,"String connectPost (String urlString, String parameter)
	{
		String response = null;
		try
		{
			// open secure connection
			URL url = new URL(urlString);
			HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
		//	URLConnection connection = url.openConnection();
			connection.setDoOutput(true);
			connection.setUseCaches(false);
			connection.setRequestProperty(""Content-Type"",""application/x-www-form-urlencoded"");
			log.fine(connection.getURL().toString());

			// POST the parameter
			DataOutputStream out = new DataOutputStream (connection.getOutputStream());
			out.write(parameter.getBytes());
			out.flush();
			out.close();

			// process and read the gateway response
			BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
			response = in.readLine();
			in.close();	                     // no more data
			log.finest(response);
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, urlString, e);
		}
		//
	    return response;
	}	//	connectPost
"
org.compiere.model.MDistributionList.getLines,MDistributionList.java,"MDistributionListLine[] getLines()
	{
		ArrayList<MDistributionListLine> list = new ArrayList<MDistributionListLine>();
		BigDecimal ratioTotal = Env.ZERO;
		//
		String sql = ""SELECT * FROM M_DistributionListLine WHERE M_DistributionList_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getM_DistributionList_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MDistributionListLine line = new MDistributionListLine(getCtx(), rs, get_Trx());
				list.add(line);
				BigDecimal ratio = line.getRatio();
				if (ratio != null)
					ratioTotal = ratioTotal.add(ratio);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""getLines"", e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//	Update Ratio
		if (ratioTotal.compareTo(getRatioTotal()) != 0)
		{
			log.info(""getLines - Set RatioTotal from "" + getRatioTotal() + "" to "" + ratioTotal);
			setRatioTotal(ratioTotal);
			save();
		}
		
		MDistributionListLine[] retValue = new MDistributionListLine[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getLines
"
org.compiere.model.MProductCosting.getOfProduct,MProductCosting.java,"MProductCosting[] getOfProduct (Ctx ctx, int M_Product_ID, Trx trx)
	{
		String sql = ""SELECT * FROM M_Product_Costing WHERE M_Product_ID=?"";
		ArrayList<MProductCosting> list = new ArrayList<MProductCosting>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, M_Product_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				list.add (new MProductCosting (ctx, rs, trx));
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e); 
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		MProductCosting[] retValue = new MProductCosting[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getOfProduct
"
org.compiere.model.MProductCosting.get,MProductCosting.java,"MProductCosting get (Ctx ctx, int M_Product_ID, 
		int C_AcctSchema_ID, Trx trx)
	{
		MProductCosting retValue = null;
		String sql = ""SELECT * FROM M_Product_Costing WHERE M_Product_ID=? AND C_AcctSchema_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, M_Product_ID);
			pstmt.setInt (2, C_AcctSchema_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next())
				retValue = new MProductCosting (ctx, rs, trx);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e); 
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		return retValue;
	}	//	get
"
org.compiere.model.MAccessProfile.isAccessContainer,MAccessProfile.java,"boolean isAccessContainer (Ctx ctx, int CM_Container_ID,
		int AD_User_ID)
	{
		//	NIT
		return true;
	}	//	isAccessContainer
"
org.compiere.model.MAccessProfile.isAccessContainer,MAccessProfile.java,"boolean isAccessContainer (Ctx ctx, int CM_Container_ID,
		int AD_Role_ID, int C_BPGroup_ID)
	{
		//	NIT
		return true;
	}	//	isAccessContainer
"
org.compiere.model.MTaxDeclaration.beforeSave,MTaxDeclaration.java,"boolean beforeSave (boolean newRecord)
	{
		if (is_ValueChanged(""DateFrom""))
			setDateFrom(TimeUtil.getDay(getDateFrom()));
		if (is_ValueChanged(""DateTo""))
			setDateTo(TimeUtil.getDay(getDateTo()));
		return true;
	}	//	beforeSave
"
org.compiere.model.QtyCost.getCurrentCost,MCost.java,"BigDecimal getCurrentCost (MProduct product,
		int M_AttributeSetInstance_ID,
		MAcctSchema as, int AD_Org_ID, String costingMethod, 
		BigDecimal qty, int C_OrderLine_ID,
		boolean zeroCostsOK, Trx trx)
	{
		String CostingLevel = as.getCostingLevel();
		MProductCategoryAcct pca = MProductCategoryAcct.get (product.getCtx(),
			product.getM_Product_Category_ID(), as.getC_AcctSchema_ID(), null);	
		if (pca == null)
			throw new IllegalStateException(""Cannot find Acct for M_Product_Category_ID="" 
				+ product.getM_Product_Category_ID() 
				+ "", C_AcctSchema_ID="" + as.getC_AcctSchema_ID());
		//	Costing Level
		if (pca.getCostingLevel() != null)
			CostingLevel = pca.getCostingLevel();
		if (X_C_AcctSchema.COSTINGLEVEL_Tenant.equals(CostingLevel))
		{
			AD_Org_ID = 0;
			M_AttributeSetInstance_ID = 0;
		}
		else if (X_C_AcctSchema.COSTINGLEVEL_Organization.equals(CostingLevel))
			M_AttributeSetInstance_ID = 0;
		else if (X_C_AcctSchema.COSTINGLEVEL_BatchLot.equals(CostingLevel))
			AD_Org_ID = 0;
		//	Costing Method
		if (costingMethod == null)
		{
			costingMethod = pca.getCostingMethod();
			if (costingMethod == null)
			{
				costingMethod = as.getCostingMethod();
				if (costingMethod == null)
					throw new IllegalArgumentException(""No Costing Method"");
			//		costingMethod = MAcctSchema.COSTINGMETHOD_StandardCosting;
			}
		}
		
		//	Create/Update Costs
		MCostDetail.processProduct (product, trx);
		
		return getCurrentCost (
			product, M_AttributeSetInstance_ID, 
			as, AD_Org_ID, as.getM_CostType_ID(), costingMethod, qty, 
			C_OrderLine_ID, zeroCostsOK, trx);
	}	//	getCurrentCost
"
org.compiere.model.QtyCost.getCurrentCost,MCost.java,"BigDecimal getCurrentCost (MProduct product, int M_ASI_ID, 
		MAcctSchema as, int Org_ID, int M_CostType_ID,  
		String costingMethod, BigDecimal qty, int C_OrderLine_ID, 
		boolean zeroCostsOK, Trx trx)
	{
		/**	Any Transactions not costed		*
		String sql1 = ""SELECT * FROM M_Transaction t "" 
			+ ""WHERE t.M_Product_ID=?""
			+ "" AND NOT EXISTS (SELECT * FROM M_CostDetail cd ""
				+ ""WHERE t.M_Product_ID=cd.M_Product_ID""
				+ "" AND (t.M_InOutLine_ID=cd.M_InOutLine_ID))"";
		PreparedStatement pstmt1 = null;
		ArrayList<MTransaction> list = new ArrayList<MTransaction>();
		try
		{
			pstmt1 = DB.prepareStatement (sql1, null);
			pstmt1.setInt (1, product.getM_Product_ID());
			ResultSet rs = pstmt1.executeQuery ();
			while (rs.next ())
			{
				MTransaction p_trx = new MTransaction(product.getCtx(), rs, null);
				list.add (p_trx);
			}
			rs.close ();
			pstmt1.close ();
			pstmt1 = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql1, e);
		}
		try
		{
			if (pstmt1 != null)
				pstmt1.close ();
			pstmt1 = null;
		}
		catch (Exception e)
		{
			pstmt1 = null;
		}
		/**	*/
		
		//	**
		BigDecimal currentCostPrice = null;
		String costElementType = null;
		int M_CostElement_ID = 0;
		BigDecimal percent = null;
		//
		BigDecimal materialCostEach = Env.ZERO;
		BigDecimal otherCostEach = Env.ZERO;
		BigDecimal percentage = Env.ZERO;
		int count = 0;
		//
		String sql = ""SELECT SUM(c.CurrentCostPrice), ce.CostElementType, ce.CostingMethod,""
			+ "" c.PercentCost, c.M_CostElement_ID ""					//	4..5
			+ ""FROM M_Cost c""
			+ "" LEFT OUTER JOIN M_CostElement ce ON (c.M_CostElement_ID=ce.M_CostElement_ID) ""
			+ ""WHERE c.AD_Client_ID=? AND c.AD_Org_ID=?""		//	#1/2
			+ "" AND c.M_Product_ID=?""							//	#3
			+ "" AND (c.M_AttributeSetInstance_ID=? OR c.M_AttributeSetInstance_ID=0)""	//	#4
			+ "" AND c.M_CostType_ID=? AND c.C_AcctSchema_ID=?""	//	#5/6
			+ "" AND (ce.CostingMethod IS NULL OR ce.CostingMethod=?) ""	//	#7
			+ ""GROUP BY ce.CostElementType, ce.CostingMethod, c.PercentCost, c.M_CostElement_ID"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, product.getAD_Client_ID());
			pstmt.setInt (2, Org_ID);
			pstmt.setInt (3, product.getM_Product_ID());
			pstmt.setInt (4, M_ASI_ID);
			pstmt.setInt (5, M_CostType_ID);
			pstmt.setInt (6, as.getC_AcctSchema_ID());
			pstmt.setString (7, costingMethod);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				currentCostPrice = rs.getBigDecimal(1);
				costElementType = rs.getString(2);
				String cm = rs.getString(3);
				percent = rs.getBigDecimal(4);
				M_CostElement_ID = rs.getInt(5);
				s_log.finest(""CurrentCostPrice="" + currentCostPrice 
					+ "", CostElementType="" + costElementType
					+ "", CostingMethod="" + cm
					+ "", Percent="" + percent 
					+ "", M_CostElement_ID="" + M_CostElement_ID);
				//
				if (currentCostPrice != null && currentCostPrice.signum() != 0)
				{
					if (cm != null)
						materialCostEach = materialCostEach.add(currentCostPrice);
					else
						otherCostEach = otherCostEach.add(currentCostPrice);
				}
				if (percent != null && percent.signum() != 0)
					percentage = percentage.add(percent);
				count++;
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		if (count > 1)	//	Print summary
			s_log.finest(""MaterialCost="" + materialCostEach 
				+ "", OtherCosts="" + otherCostEach
				+ "", Percentage="" + percentage);
		
		//	Seed Initial Costs
		if (materialCostEach.signum() == 0)		//	no costs
		{
			if (zeroCostsOK)
				return Env.ZERO;
			materialCostEach = getSeedCosts(product, M_ASI_ID,
				as, Org_ID, costingMethod, C_OrderLine_ID);
		}
		if (materialCostEach == null)
			return null;

		//	Material Costs
		BigDecimal materialCost = materialCostEach.multiply(qty);
		//	Standard costs - just Material Costs
		if (X_M_CostElement.COSTINGMETHOD_StandardCosting.equals(costingMethod))
		{
			s_log.finer(""MaterialCosts = "" + materialCost);
			return materialCost;
		}
		if (X_M_CostElement.COSTINGMETHOD_FiFo.equals(costingMethod)
			|| X_M_CostElement.COSTINGMETHOD_LiFo.equals(costingMethod))
		{
			MCostElement ce = MCostElement.getMaterialCostElement(as, costingMethod);
			BigDecimal materialCost1 = MCostQueue.getCosts(product, M_ASI_ID, 
				as, Org_ID, ce, qty, trx);
			if (materialCost1 !=null)
				materialCost = materialCost1;
			
		}
			
		//	Other Costs
		BigDecimal otherCost = otherCostEach.multiply(qty);

		//	Costs
		BigDecimal costs = otherCost.add(materialCost);
		if (costs.signum() == 0)
			return null;

		s_log.finer(""Sum Costs = "" + costs);
		int precision = as.getCostingPrecision();
		if (percentage.signum() == 0)	//	no percentages
		{
			if (costs.scale() > precision)
				costs = costs.setScale(precision, BigDecimal.ROUND_HALF_UP);
			return costs;
		}
		//
		BigDecimal percentCost = costs.multiply(percentage);
		percentCost = percentCost.divide(Env.ONEHUNDRED, precision, BigDecimal.ROUND_HALF_UP);
		costs = costs.add(percentCost);
		if (costs.scale() > precision)
			costs = costs.setScale(precision, BigDecimal.ROUND_HALF_UP);
		s_log.finer(""Sum Costs = "" + costs + "" (Add="" + percentCost + "")"");
		return costs;
	}	//	getCurrentCost
"
org.compiere.model.QtyCost.getSeedCosts,MCost.java,"BigDecimal getSeedCosts (MProduct product, int M_ASI_ID,
		MAcctSchema as, int Org_ID, String costingMethod, int C_OrderLine_ID)
	{
		BigDecimal retValue = null;
		//	Direct Data
		if (X_M_CostElement.COSTINGMETHOD_AverageInvoice.equals(costingMethod))
			retValue = calculateAverageInv(product, M_ASI_ID, as, Org_ID);
		else if (X_M_CostElement.COSTINGMETHOD_AveragePO.equals(costingMethod))
			retValue = calculateAveragePO(product, M_ASI_ID, as, Org_ID);
		else if (X_M_CostElement.COSTINGMETHOD_FiFo.equals(costingMethod))
			retValue = calculateFiFo(product, M_ASI_ID, as, Org_ID);
		else if (X_M_CostElement.COSTINGMETHOD_LiFo.equals(costingMethod))
			retValue = calculateLiFo(product, M_ASI_ID, as, Org_ID);
		else if (X_M_CostElement.COSTINGMETHOD_LastInvoice.equals(costingMethod))
			retValue = getLastInvoicePrice(product, M_ASI_ID, Org_ID, as.getC_Currency_ID());
		else if (X_M_CostElement.COSTINGMETHOD_LastPOPrice.equals(costingMethod))
		{
			if (C_OrderLine_ID != 0)
				retValue = getPOPrice(product, C_OrderLine_ID, as.getC_Currency_ID());
			if (retValue == null || retValue.signum() == 0)
				retValue = getLastPOPrice(product, M_ASI_ID, Org_ID, as.getC_Currency_ID());
		}
		else if (X_M_CostElement.COSTINGMETHOD_StandardCosting.equals(costingMethod))
		{
			//	migrate old costs
			MProductCosting pc = MProductCosting.get(product.getCtx(), product.getM_Product_ID(), 
				as.getC_AcctSchema_ID(), null);
			if (pc != null)
				retValue = pc.getCurrentCostPrice();
		}
		else if (X_M_CostElement.COSTINGMETHOD_UserDefined.equals(costingMethod))
			;
		else
			throw new IllegalArgumentException(""Unknown Costing Method = "" + costingMethod);
		if (retValue != null && retValue.signum() != 0)
		{
			s_log.fine(product.getName() + "", CostingMethod="" + costingMethod + "" - "" + retValue);
			return retValue;
		}

		//	Look for exact Order Line
		if (C_OrderLine_ID != 0)
		{
			retValue = getPOPrice(product, C_OrderLine_ID, as.getC_Currency_ID());
			if (retValue != null && retValue.signum() != 0)
			{
				s_log.fine(product.getName() + "", PO - "" + retValue);
				return retValue;
			}
		}
		
		//	Look for Standard Costs first
		if (!X_M_CostElement.COSTINGMETHOD_StandardCosting.equals(costingMethod))
		{
			MCostElement ce = MCostElement.getMaterialCostElement(as, X_M_CostElement.COSTINGMETHOD_StandardCosting);
			MCost cost = get(product, M_ASI_ID, as, Org_ID, ce.getM_CostElement_ID());
			if (cost != null && cost.getCurrentCostPrice().signum() != 0)
			{
				s_log.fine(product.getName() + "", Standard - "" + retValue);
				return cost.getCurrentCostPrice();
			}
		}

		//	We do not have a price
		//	PO first
		if (X_M_CostElement.COSTINGMETHOD_AveragePO.equals(costingMethod)
			|| X_M_CostElement.COSTINGMETHOD_LastPOPrice.equals(costingMethod)
			|| X_M_CostElement.COSTINGMETHOD_StandardCosting.equals(costingMethod))
		{
			//	try Last PO
			retValue = getLastPOPrice(product, M_ASI_ID, Org_ID, as.getC_Currency_ID());
			if (Org_ID != 0 && (retValue == null || retValue.signum() == 0))
				retValue = getLastPOPrice(product, M_ASI_ID, 0, as.getC_Currency_ID());
			if (retValue != null && retValue.signum() != 0)
			{
				s_log.fine(product.getName() + "", LastPO = "" + retValue);
				return retValue;
			}
		}
		else	//	Inv first
		{
			//	try last Inv
			retValue = getLastInvoicePrice(product, M_ASI_ID, Org_ID, as.getC_Currency_ID());
			if (Org_ID != 0 && (retValue == null || retValue.signum() == 0))
				retValue = getLastInvoicePrice(product, M_ASI_ID, 0, as.getC_Currency_ID());
			if (retValue != null && retValue.signum() != 0)
			{
				s_log.fine(product.getName() + "", LastInv = "" + retValue);
				return retValue;
			}
		}
		
		//	Still Nothing
		//	Inv second
		if (X_M_CostElement.COSTINGMETHOD_AveragePO.equals(costingMethod)
			|| X_M_CostElement.COSTINGMETHOD_LastPOPrice.equals(costingMethod)
			|| X_M_CostElement.COSTINGMETHOD_StandardCosting.equals(costingMethod))
		{
			//	try last Inv
			retValue = getLastInvoicePrice(product, M_ASI_ID, Org_ID, as.getC_Currency_ID());
			if (Org_ID != 0 && (retValue == null || retValue.signum() == 0))
				retValue = getLastInvoicePrice(product, M_ASI_ID, 0, as.getC_Currency_ID());
			if (retValue != null && retValue.signum() != 0)
			{
				s_log.fine(product.getName() + "", LastInv = "" + retValue);
				return retValue;
			}
		}
		else	//	PO second
		{
			//	try Last PO
			retValue = getLastPOPrice(product, M_ASI_ID, Org_ID, as.getC_Currency_ID());
			if (Org_ID != 0 && (retValue == null || retValue.signum() == 0))
				retValue = getLastPOPrice(product, M_ASI_ID, 0, as.getC_Currency_ID());
			if (retValue != null && retValue.signum() != 0)
			{
				s_log.fine(product.getName() + "", LastPO = "" + retValue);
				return retValue;
			}
		}
		
		//	Still nothing try ProductPO
		MProductPO[] pos = MProductPO.getOfProduct(product.getCtx(), product.getM_Product_ID(), null);
		for (MProductPO element : pos) {
			BigDecimal price = element.getPricePO();
			if (price == null || price.signum() == 0)
				price = pos[0].getPriceList();
			if (price != null && price.signum() != 0)
			{
				price = MConversionRate.convert(product.getCtx(), price, 
					pos[0].getC_Currency_ID(), as.getC_Currency_ID(), 
					as.getAD_Client_ID(), Org_ID);
				if (price != null && price.signum() != 0)
				{
					retValue = price;
					s_log.fine(product.getName() + "", Product_PO = "" + retValue);
					return retValue;
				}
			}
		}
		
		//	Still nothing try Purchase Price List
		//	....
		
		s_log.fine(product.getName() + "" = "" + retValue);
		return retValue;
	}	//	getSeedCosts
"
org.compiere.model.QtyCost.getLastInvoicePrice,MCost.java,"BigDecimal getLastInvoicePrice (MProduct product, 
		int M_ASI_ID, int AD_Org_ID, int C_Currency_ID)
	{
		BigDecimal retValue = null;
		String sql = ""SELECT currencyConvert(il.PriceActual, i.C_Currency_ID, ?, i.DateAcct, i.C_ConversionType_ID, il.AD_Client_ID, il.AD_Org_ID) ""
			// ,il.PriceActual, il.QtyInvoiced, i.DateInvoiced, il.Line
			+ ""FROM C_InvoiceLine il ""
			+ "" INNER JOIN C_Invoice i ON (il.C_Invoice_ID=i.C_Invoice_ID) ""
			+ ""WHERE il.M_Product_ID=?""
			+ "" AND i.IsSOTrx='N'"";
		if (AD_Org_ID != 0)
			sql += "" AND il.AD_Org_ID=?"";
		else if (M_ASI_ID != 0)
			sql += "" AND il.M_AttributeSetInstance_ID=?"";
		sql += "" ORDER BY i.DateInvoiced DESC, il.Line DESC"";
		//
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, product.get_Trx());
			pstmt.setInt (1, C_Currency_ID);
			pstmt.setInt (2, product.getM_Product_ID());
			if (AD_Org_ID != 0)
				pstmt.setInt (3, AD_Org_ID);
			else if (M_ASI_ID != 0)
				pstmt.setInt(3, M_ASI_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				retValue = rs.getBigDecimal(1);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		if (retValue != null)
		{
			s_log.finer(product.getName() + "" = "" + retValue);
			return retValue;
		}
		return null;
	}	//	getLastInvoicePrice
"
org.compiere.model.QtyCost.getLastPOPrice,MCost.java,"BigDecimal getLastPOPrice (MProduct product, 
		int M_ASI_ID, int AD_Org_ID, int C_Currency_ID)
	{
		BigDecimal retValue = null;
		String sql = ""SELECT currencyConvert(ol.PriceCost, o.C_Currency_ID, ?, o.DateAcct, o.C_ConversionType_ID, ol.AD_Client_ID, ol.AD_Org_ID),""
			+ "" currencyConvert(ol.PriceActual, o.C_Currency_ID, ?, o.DateAcct, o.C_ConversionType_ID, ol.AD_Client_ID, ol.AD_Org_ID) ""
			//	,ol.PriceCost,ol.PriceActual, ol.QtyOrdered, o.DateOrdered, ol.Line
			+ ""FROM C_OrderLine ol""
			+ "" INNER JOIN C_Order o ON (ol.C_Order_ID=o.C_Order_ID) ""
			+ ""WHERE ol.M_Product_ID=?""
			+ "" AND o.IsSOTrx='N'"";
		if (AD_Org_ID != 0)
			sql += "" AND ol.AD_Org_ID=?"";
		else if (M_ASI_ID != 0)
			sql += "" AND t.M_AttributeSetInstance_ID=?"";
		sql += "" ORDER BY o.DateOrdered DESC, ol.Line DESC"";
		//
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, product.get_Trx());
			pstmt.setInt (1, C_Currency_ID);
			pstmt.setInt (2, C_Currency_ID);
			pstmt.setInt (3, product.getM_Product_ID());
			if (AD_Org_ID != 0)
				pstmt.setInt (4, AD_Org_ID);
			else if (M_ASI_ID != 0)
				pstmt.setInt(4, M_ASI_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
			{
				retValue = rs.getBigDecimal(1);
				if (retValue == null || retValue.signum() == 0)
					retValue = rs.getBigDecimal(2);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		if (retValue != null)
		{
			s_log.finer(product.getName() + "" = "" + retValue);
			return retValue;
		}
		return null;
	}	//	getLastPOPrice
"
org.compiere.model.QtyCost.getPOPrice,MCost.java,"BigDecimal getPOPrice (MProduct product, int C_OrderLine_ID, int C_Currency_ID)
	{
		BigDecimal retValue = null;
		String sql = ""SELECT currencyConvert(ol.PriceCost, o.C_Currency_ID, ?, o.DateAcct, o.C_ConversionType_ID, ol.AD_Client_ID, ol.AD_Org_ID),""
			+ "" currencyConvert(ol.PriceActual, o.C_Currency_ID, ?, o.DateAcct, o.C_ConversionType_ID, ol.AD_Client_ID, ol.AD_Org_ID) ""
			//	,ol.PriceCost,ol.PriceActual, ol.QtyOrdered, o.DateOrdered, ol.Line
			+ ""FROM C_OrderLine ol""
			+ "" INNER JOIN C_Order o ON (ol.C_Order_ID=o.C_Order_ID) ""
			+ ""WHERE ol.C_OrderLine_ID=?""
			+ "" AND o.IsSOTrx='N'"";
		//
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, product.get_Trx());
			pstmt.setInt (1, C_Currency_ID);
			pstmt.setInt (2, C_Currency_ID);
			pstmt.setInt (3, C_OrderLine_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
			{
				retValue = rs.getBigDecimal(1);
				if (retValue == null || retValue.signum() == 0)
					retValue = rs.getBigDecimal(2);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		if (retValue != null)
		{
			s_log.finer(product.getName() + "" = "" + retValue);
			return retValue;
		}
		return null;
	}	//	getPOPrice
"
org.compiere.model.QtyCost.create,MCost.java,"void create (MClient client)
	{
		MAcctSchema[] ass = MAcctSchema.getClientAcctSchema(client.getCtx(), client.getAD_Client_ID()); 
		Trx trx = client.get_Trx();
		Trx trxNameUsed = trx;
		Trx p_trx = null;
		if (trx == null)
		{
			trxNameUsed = Trx.get(""Cost"");
			p_trx = trxNameUsed;
		}
		boolean success = true;
		//	For all Products
		String sql = ""SELECT * FROM M_Product p ""
			+ ""WHERE AD_Client_ID=?""
			+ "" AND EXISTS (SELECT * FROM M_CostDetail cd ""
				+ ""WHERE p.M_Product_ID=cd.M_Product_ID AND Processed='N')"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trxNameUsed);
			pstmt.setInt (1, client.getAD_Client_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MProduct product = new MProduct (client.getCtx(), rs, trxNameUsed);
				for (MAcctSchema element : ass) {
					BigDecimal cost = getCurrentCost(product, 0, element, 0, 
						null, Env.ONE, 0, false, trxNameUsed);		//	create non-zero costs
					s_log.info(product.getName() + "" = "" + cost);
				}
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
			success = false;
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//	Transaction
		if (p_trx != null)
		{
			if (success)
				p_trx.commit();
			else
				p_trx.rollback();
			p_trx.close();
		}
	}	//	create
"
org.compiere.model.QtyCost.createForOrg,MCost.java,"void createForOrg(MProduct product, MOrg org)
	{
		create(product,org);
	}
"
org.compiere.model.QtyCost.create,MCost.java,"void create (MProduct product, MOrg createForOrg)
	{
		s_log.config(product.getName());
		//	Cost Elements
		MCostElement[] ces = MCostElement.getCostingMethods(product);
		MCostElement ce = null;
		for (MCostElement element : ces) {
			if (X_M_CostElement.COSTINGMETHOD_StandardCosting.equals(element.getCostingMethod()))
			{
				ce = element;
				break;
			}
		}
		if (ce == null)
		{
			s_log.fine(""No Standard Costing in System"");
			return;
		}
		
		MAcctSchema[] mass = MAcctSchema.getClientAcctSchema(product.getCtx(), 
			product.getAD_Client_ID(), product.get_Trx());
		MOrg[] orgs = null;
		
		int M_ASI_ID = 0;		//	No Attribute
		for (MAcctSchema as : mass) {
			MProductCategoryAcct pca = MProductCategoryAcct.get(product.getCtx(), 
				product.getM_Product_Category_ID(), as.getC_AcctSchema_ID(), product.get_Trx());
			String cl = null;
			if (pca != null)
				cl = pca.getCostingLevel();
			if (cl == null)
				cl = as.getCostingLevel();
			//	Create Std Costing
			if (X_C_AcctSchema.COSTINGLEVEL_Tenant.equals(cl))
			{
				MCost cost = MCost.get (product, M_ASI_ID, 
					as, 0, ce.getM_CostElement_ID());
				if (cost.is_new())
				{
					if (cost.save())
						s_log.config(""Std.Cost for "" + product.getName() 
							+ "" - "" + as.getName());
					else
						s_log.warning(""Not created: Std.Cost for "" + product.getName() 
							+ "" - "" + as.getName());
				}
			}
			else if (X_C_AcctSchema.COSTINGLEVEL_Organization.equals(cl))
			{
				if (orgs == null)
					orgs = MOrg.getOfClient(product);
				for (MOrg element : orgs) {
					if((createForOrg != null) ? (element.getAD_Org_ID()!= createForOrg.getAD_Org_ID()):false)
						continue;
					
					MCost cost = MCost.get (product, M_ASI_ID, 
						as, element.getAD_Org_ID(), ce.getM_CostElement_ID());
					if (cost.is_new())
					{
						if (cost.save())
							s_log.config(""Std.Cost for "" + product.getName()
								+ "" - "" + element.getName()
								+ "" - "" + as.getName());
						else
							s_log.warning(""Not created: Std.Cost for "" + product.getName() 
								+ "" - "" + element.getName()
								+ "" - "" + as.getName());
					}
				}	//	for all orgs
			}
			else
				s_log.warning(""Not created: Std.Cost for "" + product.getName() 
					+ "" - Costing Level on Batch/Lot"");
		}	//	accounting schema loop

	}	//	create
"
org.compiere.model.QtyCost.calculateAverageInv,MCost.java,"BigDecimal calculateAverageInv (MProduct product, int M_AttributeSetInstance_ID, 
		MAcctSchema as, int AD_Org_ID)
	{
		String sql = ""SELECT t.MovementQty, mi.Qty, il.QtyInvoiced, il.PriceActual,""
			+ "" i.C_Currency_ID, i.DateAcct, i.C_ConversionType_ID, i.AD_Client_ID, i.AD_Org_ID, t.M_Transaction_ID ""
			+ ""FROM M_Transaction t""
			+ "" INNER JOIN M_MatchInv mi ON (t.M_InOutLine_ID=mi.M_InOutLine_ID)""
			+ "" INNER JOIN C_InvoiceLine il ON (mi.C_InvoiceLine_ID=il.C_InvoiceLine_ID)""
			+ "" INNER JOIN C_Invoice i ON (il.C_Invoice_ID=i.C_Invoice_ID) ""
			+ ""WHERE t.M_Product_ID=?"";
		if (AD_Org_ID != 0)
			sql += "" AND t.AD_Org_ID=?"";
		else if (M_AttributeSetInstance_ID != 0)
			sql += "" AND t.M_AttributeSetInstance_ID=?"";
		sql += "" ORDER BY t.M_Transaction_ID"";

		PreparedStatement pstmt = null;
		BigDecimal newStockQty = Env.ZERO;
		//
		BigDecimal newAverageAmt = Env.ZERO;
		int oldTransaction_ID = 0;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, product.getM_Product_ID());
			if (AD_Org_ID != 0)
				pstmt.setInt (2, AD_Org_ID);
			else if (M_AttributeSetInstance_ID != 0)
				pstmt.setInt (2, M_AttributeSetInstance_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				BigDecimal oldStockQty = newStockQty;
				BigDecimal movementQty = rs.getBigDecimal(1);
				int M_Transaction_ID = rs.getInt(10);
				if (M_Transaction_ID != oldTransaction_ID)
					newStockQty = oldStockQty.add(movementQty);
				M_Transaction_ID = oldTransaction_ID;
				//
				BigDecimal matchQty = rs.getBigDecimal(2);
				if (matchQty == null)
				{
					s_log.finer(""Movement="" + movementQty + "", StockQty="" + newStockQty);
					continue;
				}
				//	Assumption: everything is matched
				BigDecimal price = rs.getBigDecimal(4);
				int C_Currency_ID = rs.getInt(5);
				Timestamp DateAcct = rs.getTimestamp(6);
				int C_ConversionType_ID = rs.getInt(7);
				int Client_ID = rs.getInt(8);
				int Org_ID = rs.getInt(9);
				BigDecimal cost = MConversionRate.convert(product.getCtx(), price, 
					C_Currency_ID, as.getC_Currency_ID(), 
					DateAcct, C_ConversionType_ID, Client_ID, Org_ID);
				//
				BigDecimal oldAverageAmt = newAverageAmt;
				BigDecimal averageCurrent = oldStockQty.multiply(oldAverageAmt);
				BigDecimal averageIncrease = matchQty.multiply(cost);
				BigDecimal newAmt = averageCurrent.add(averageIncrease);
				newAmt = newAmt.setScale(as.getCostingPrecision());
				newAverageAmt = newAmt.divide(newStockQty, as.getCostingPrecision(), BigDecimal.ROUND_HALF_UP);
				s_log.finer(""Movement="" + movementQty + "", StockQty="" + newStockQty
					+ "", Match="" + matchQty + "", Cost="" + cost + "", NewAvg="" + newAverageAmt);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		if (newAverageAmt != null && newAverageAmt.signum() != 0)
		{
			s_log.finer(product.getName() + "" = "" + newAverageAmt);
			return newAverageAmt;
		}
		return null;
	}	//	calculateAverageInv
"
org.compiere.model.QtyCost.calculateAveragePO,MCost.java,"BigDecimal calculateAveragePO (MProduct product, int M_AttributeSetInstance_ID, 
		MAcctSchema as, int AD_Org_ID)
	{
		String sql = ""SELECT t.MovementQty, mp.Qty, ol.QtyOrdered, ol.PriceCost, ol.PriceActual,""	//	1..5
			+ "" o.C_Currency_ID, o.DateAcct, o.C_ConversionType_ID,""	//	6..8
			+ "" o.AD_Client_ID, o.AD_Org_ID, t.M_Transaction_ID ""		//	9..11
			+ ""FROM M_Transaction t""
			+ "" INNER JOIN M_MatchPO mp ON (t.M_InOutLine_ID=mp.M_InOutLine_ID)""
			+ "" INNER JOIN C_OrderLine ol ON (mp.C_OrderLine_ID=ol.C_OrderLine_ID)""
			+ "" INNER JOIN C_Order o ON (ol.C_Order_ID=o.C_Order_ID) ""
			+ ""WHERE t.M_Product_ID=?"";
		if (AD_Org_ID != 0)
			sql += "" AND t.AD_Org_ID=?"";
		else if (M_AttributeSetInstance_ID != 0)
			sql += "" AND t.M_AttributeSetInstance_ID=?"";
		sql += "" ORDER BY t.M_Transaction_ID"";

		PreparedStatement pstmt = null;
		BigDecimal newStockQty = Env.ZERO;
		//
		BigDecimal newAverageAmt = Env.ZERO;
		int oldTransaction_ID = 0;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, product.getM_Product_ID());
			if (AD_Org_ID != 0)
				pstmt.setInt (2, AD_Org_ID);
			else if (M_AttributeSetInstance_ID != 0)
				pstmt.setInt (2, M_AttributeSetInstance_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				BigDecimal oldStockQty = newStockQty;
				BigDecimal movementQty = rs.getBigDecimal(1);
				int M_Transaction_ID = rs.getInt(11);
				if (M_Transaction_ID != oldTransaction_ID)
					newStockQty = oldStockQty.add(movementQty);
				M_Transaction_ID = oldTransaction_ID;
				//
				BigDecimal matchQty = rs.getBigDecimal(2);
				if (matchQty == null)
				{
					s_log.finer(""Movement="" + movementQty + "", StockQty="" + newStockQty);
					continue;
				}
				//	Assumption: everything is matched
				BigDecimal price = rs.getBigDecimal(4);
				if (price == null || price.signum() == 0)	//	PO Cost
					price = rs.getBigDecimal(5);			//	Actual
				int C_Currency_ID = rs.getInt(6);
				Timestamp DateAcct = rs.getTimestamp(7);
				int C_ConversionType_ID = rs.getInt(8);
				int Client_ID = rs.getInt(9);
				int Org_ID = rs.getInt(10);
				BigDecimal cost = MConversionRate.convert(product.getCtx(), price, 
					C_Currency_ID, as.getC_Currency_ID(), 
					DateAcct, C_ConversionType_ID, Client_ID, Org_ID);
				//
				BigDecimal oldAverageAmt = newAverageAmt;
				BigDecimal averageCurrent = oldStockQty.multiply(oldAverageAmt);
				BigDecimal averageIncrease = matchQty.multiply(cost);
				BigDecimal newAmt = averageCurrent.add(averageIncrease);
				newAmt = newAmt.setScale(as.getCostingPrecision());
				newAverageAmt = newAmt.divide(newStockQty, as.getCostingPrecision(), BigDecimal.ROUND_HALF_UP);
				s_log.finer(""Movement="" + movementQty + "", StockQty="" + newStockQty
					+ "", Match="" + matchQty + "", Cost="" + cost + "", NewAvg="" + newAverageAmt);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		if (newAverageAmt != null && newAverageAmt.signum() != 0)
		{
			s_log.finer(product.getName() + "" = "" + newAverageAmt);
			return newAverageAmt;
		}
		return null;
	}	//	calculateAveragePO
"
org.compiere.model.QtyCost.calculateFiFo,MCost.java,"BigDecimal calculateFiFo (MProduct product, int M_AttributeSetInstance_ID, 
		MAcctSchema as, int AD_Org_ID)
	{
		String sql = ""SELECT t.MovementQty, mi.Qty, il.QtyInvoiced, il.PriceActual,""
			+ "" i.C_Currency_ID, i.DateAcct, i.C_ConversionType_ID, i.AD_Client_ID, i.AD_Org_ID, t.M_Transaction_ID ""
			+ ""FROM M_Transaction t""
			+ "" INNER JOIN M_MatchInv mi ON (t.M_InOutLine_ID=mi.M_InOutLine_ID)""
			+ "" INNER JOIN C_InvoiceLine il ON (mi.C_InvoiceLine_ID=il.C_InvoiceLine_ID)""
			+ "" INNER JOIN C_Invoice i ON (il.C_Invoice_ID=i.C_Invoice_ID) ""
			+ ""WHERE t.M_Product_ID=?"";
		if (AD_Org_ID != 0)
			sql += "" AND t.AD_Org_ID=?"";
		else if (M_AttributeSetInstance_ID != 0)
			sql += "" AND t.M_AttributeSetInstance_ID=?"";
		sql += "" ORDER BY t.M_Transaction_ID"";

		PreparedStatement pstmt = null;
		//
		int oldTransaction_ID = 0;
		ArrayList<QtyCost> fifo = new ArrayList<QtyCost>();
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, product.getM_Product_ID());
			if (AD_Org_ID != 0)
				pstmt.setInt (2, AD_Org_ID);
			else if (M_AttributeSetInstance_ID != 0)
				pstmt.setInt (2, M_AttributeSetInstance_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				BigDecimal movementQty = rs.getBigDecimal(1);
				int M_Transaction_ID = rs.getInt(10);
				if (M_Transaction_ID == oldTransaction_ID)
					continue;	//	assuming same price for receipt
				M_Transaction_ID = oldTransaction_ID;
				//
				BigDecimal matchQty = rs.getBigDecimal(2);
				if (matchQty == null)	//	out (negative)
				{
					if (fifo.size() > 0)
					{
						QtyCost pp = fifo.get(0);
						pp.Qty = pp.Qty.add(movementQty);
						BigDecimal remainder = pp.Qty;
						if (remainder.signum() == 0)
							fifo.remove(0);
						else
						{
							while (remainder.signum() != 0)
							{
								if (fifo.size() == 1)	//	Last
								{
									pp.Cost = Env.ZERO;
									remainder = Env.ZERO;
								}
								else
								{
									fifo.remove(0);
									pp = fifo.get(0);
									pp.Qty = pp.Qty.add(movementQty);
									remainder = pp.Qty;
								}
							}
						}
					}
					else
					{
						QtyCost pp = new QtyCost (movementQty, Env.ZERO);
						fifo.add(pp);
					}
					s_log.finer(""Movement="" + movementQty + "", Size="" + fifo.size());
					continue;
				}
				//	Assumption: everything is matched
				BigDecimal price = rs.getBigDecimal(4);
				int C_Currency_ID = rs.getInt(5);
				Timestamp DateAcct = rs.getTimestamp(6);
				int C_ConversionType_ID = rs.getInt(7);
				int Client_ID = rs.getInt(8);
				int Org_ID = rs.getInt(9);
				BigDecimal cost = MConversionRate.convert(product.getCtx(), price, 
					C_Currency_ID, as.getC_Currency_ID(), 
					DateAcct, C_ConversionType_ID, Client_ID, Org_ID);
				
				//	Add Stock
				boolean used = false;
				if (fifo.size() == 1)
				{
					QtyCost pp = fifo.get(0);
					if (pp.Qty.signum() < 0)
					{
						pp.Qty = pp.Qty.add(movementQty);
						if (pp.Qty.signum() == 0)
							fifo.remove(0);
						else
							pp.Cost = cost;
						used = true;
					}
					
				}
				if (!used)
				{
					QtyCost pp = new QtyCost (movementQty, cost);
					fifo.add(pp);
				}
				s_log.finer(""Movement="" + movementQty + "", Size="" + fifo.size());
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		if (fifo.size() == 0)
			return null;
		QtyCost pp = fifo.get(0);
		s_log.finer(product.getName() + "" = "" + pp.Cost);
		return pp.Cost;
	}	//	calculateFiFo
"
org.compiere.model.QtyCost.calculateLiFo,MCost.java,"BigDecimal calculateLiFo (MProduct product, int M_AttributeSetInstance_ID, 
		MAcctSchema as, int AD_Org_ID)
	{
		String sql = ""SELECT t.MovementQty, mi.Qty, il.QtyInvoiced, il.PriceActual,""
			+ "" i.C_Currency_ID, i.DateAcct, i.C_ConversionType_ID, i.AD_Client_ID, i.AD_Org_ID, t.M_Transaction_ID ""
			+ ""FROM M_Transaction t""
			+ "" INNER JOIN M_MatchInv mi ON (t.M_InOutLine_ID=mi.M_InOutLine_ID)""
			+ "" INNER JOIN C_InvoiceLine il ON (mi.C_InvoiceLine_ID=il.C_InvoiceLine_ID)""
			+ "" INNER JOIN C_Invoice i ON (il.C_Invoice_ID=i.C_Invoice_ID) ""
			+ ""WHERE t.M_Product_ID=?"";
		if (AD_Org_ID != 0)
			sql += "" AND t.AD_Org_ID=?"";
		else if (M_AttributeSetInstance_ID != 0)
			sql += "" AND t.M_AttributeSetInstance_ID=?"";
		//	Starting point?
		sql += "" ORDER BY t.M_Transaction_ID DESC"";

		PreparedStatement pstmt = null;
		//
		int oldTransaction_ID = 0;
		ArrayList<QtyCost> lifo = new ArrayList<QtyCost>();
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, product.getM_Product_ID());
			if (AD_Org_ID != 0)
				pstmt.setInt (2, AD_Org_ID);
			else if (M_AttributeSetInstance_ID != 0)
				pstmt.setInt (2, M_AttributeSetInstance_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				BigDecimal movementQty = rs.getBigDecimal(1);
				int M_Transaction_ID = rs.getInt(10);
				if (M_Transaction_ID == oldTransaction_ID)
					continue;	//	assuming same price for receipt
				M_Transaction_ID = oldTransaction_ID;
				//
				BigDecimal matchQty = rs.getBigDecimal(2);
				if (matchQty == null)	//	out (negative)
				{
					if (lifo.size() > 0)
					{
						QtyCost pp = lifo.get(lifo.size()-1);
						pp.Qty = pp.Qty.add(movementQty);
						BigDecimal remainder = pp.Qty;
						if (remainder.signum() == 0)
							lifo.remove(lifo.size()-1);
						else
						{
							while (remainder.signum() != 0)
							{
								if (lifo.size() == 1)	//	Last
								{
									pp.Cost = Env.ZERO;
									remainder = Env.ZERO;
								}
								else
								{
									lifo.remove(lifo.size()-1);
									pp = lifo.get(lifo.size()-1);
									pp.Qty = pp.Qty.add(movementQty);
									remainder = pp.Qty;
								}
							}
						}
					}
					else
					{
						QtyCost pp = new QtyCost (movementQty, Env.ZERO);
						lifo.add(pp);
					}
					s_log.finer(""Movement="" + movementQty + "", Size="" + lifo.size());
					continue;
				}
				//	Assumption: everything is matched
				BigDecimal price = rs.getBigDecimal(4);
				int C_Currency_ID = rs.getInt(5);
				Timestamp DateAcct = rs.getTimestamp(6);
				int C_ConversionType_ID = rs.getInt(7);
				int Client_ID = rs.getInt(8);
				int Org_ID = rs.getInt(9);
				BigDecimal cost = MConversionRate.convert(product.getCtx(), price, 
					C_Currency_ID, as.getC_Currency_ID(), 
					DateAcct, C_ConversionType_ID, Client_ID, Org_ID);
				//
				QtyCost pp = new QtyCost (movementQty, cost);
				lifo.add(pp);
				s_log.finer(""Movement="" + movementQty + "", Size="" + lifo.size());
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		if (lifo.size() == 0)
			return null;
		QtyCost pp = lifo.get(lifo.size()-1);
		s_log.finer(product.getName() + "" = "" + pp.Cost);
		return pp.Cost;
	}	//	calculateLiFo
"
org.compiere.model.QtyCost.toString,MCost.java,"String toString ()
		{
			StringBuffer sb = new StringBuffer (""Qty="").append(Qty)
				.append ("",Cost="").append (Cost);
			return sb.toString ();
		}	//	toString
"
org.compiere.model.QtyCost.get,MCost.java,"MCost get (MProduct product, int M_AttributeSetInstance_ID,
		MAcctSchema as, int AD_Org_ID, int M_CostElement_ID)
	{
		MCost cost = null;
		String sql = ""SELECT * ""
			+ ""FROM M_Cost c ""
			+ ""WHERE AD_Client_ID=? AND AD_Org_ID=?""
			+ "" AND M_Product_ID=?""
			+ "" AND M_AttributeSetInstance_ID=?""
			+ "" AND M_CostType_ID=? AND C_AcctSchema_ID=?""
			+ "" AND M_CostElement_ID=?"";		
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, product.get_Trx());
			pstmt.setInt (1, product.getAD_Client_ID());
			pstmt.setInt (2, AD_Org_ID);
			pstmt.setInt (3, product.getM_Product_ID());
			pstmt.setInt (4, M_AttributeSetInstance_ID);
			pstmt.setInt (5, as.getM_CostType_ID());
			pstmt.setInt (6, as.getC_AcctSchema_ID());
			pstmt.setInt (7, M_CostElement_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				cost = new MCost (product.getCtx(), rs, product.get_Trx()); 
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//	New
		if (cost == null)
			cost = new MCost (product, M_AttributeSetInstance_ID,
				as, AD_Org_ID, M_CostElement_ID);
		return cost;
	}	//	get
"
org.compiere.model.QtyCost.get,MCost.java,"MCost get (Ctx ctx, int AD_Client_ID, int AD_Org_ID, int M_Product_ID, 
		int M_CostType_ID, int C_AcctSchema_ID, int M_CostElement_ID,
		int M_AttributeSetInstance_ID)
	{
		MCost retValue = null;
		String sql = ""SELECT * FROM M_Cost ""
			+ ""WHERE AD_Client_ID=? AND AD_Org_ID=? AND M_Product_ID=?""
			+ "" AND M_CostType_ID=? AND C_AcctSchema_ID=? AND M_CostElement_ID=?""
			+ "" AND M_AttributeSetInstance_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, AD_Client_ID);
			pstmt.setInt (2, AD_Org_ID);
			pstmt.setInt (3, M_Product_ID);
			pstmt.setInt (4, M_CostType_ID);
			pstmt.setInt (5, C_AcctSchema_ID);
			pstmt.setInt (6, M_CostElement_ID);
			pstmt.setInt (7, M_AttributeSetInstance_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
			{
				retValue = new MCost (ctx, rs, null);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return retValue;
	}	//	get
"
org.compiere.model.QtyCost.add,MCost.java,"void add (BigDecimal amt, BigDecimal qty)
	{
		setCumulatedAmt(getCumulatedAmt().add(amt));
		setCumulatedQty(getCumulatedQty().add(qty));
		setCurrentQty(getCurrentQty().add(qty));
	}	//	add
"
org.compiere.model.QtyCost.setWeightedAverage,MCost.java,"void setWeightedAverage (BigDecimal amt, BigDecimal qty)
	{
		BigDecimal oldSum = getCurrentCostPrice().multiply(getCurrentQty());
		BigDecimal newSum = amt;	//	is total already
		BigDecimal sumAmt = oldSum.add(newSum);
		BigDecimal sumQty = getCurrentQty().add(qty);
		if (sumQty.signum() != 0)
		{
			BigDecimal cost = sumAmt.divide(sumQty, getPrecision(), BigDecimal.ROUND_HALF_UP);
			setCurrentCostPrice(cost);
		}
		//
		setCumulatedAmt(getCumulatedAmt().add(amt));
		setCumulatedQty(getCumulatedQty().add(qty));
		setCurrentQty(getCurrentQty().add(qty));
	}	//	setWeightedAverage
"
org.compiere.model.QtyCost.getPrecision,MCost.java,"int getPrecision()
	{
		MAcctSchema as = MAcctSchema.get(getCtx(), getC_AcctSchema_ID());
		if (as != null)
			return as.getCostingPrecision();
		return 6;
	}	//	gerPrecision
"
org.compiere.model.QtyCost.setCurrentCostPrice,MCost.java,"void setCurrentCostPrice (BigDecimal currentCostPrice)
	{
		if (currentCostPrice != null)
			super.setCurrentCostPrice (currentCostPrice);
		else
			super.setCurrentCostPrice (Env.ZERO);
	}	//	setCurrentCostPrice
"
org.compiere.model.QtyCost.getHistoryAverage,MCost.java,"BigDecimal getHistoryAverage()
	{
		BigDecimal retValue = null;
		if (getCumulatedQty().signum() != 0
			&& getCumulatedAmt().signum() != 0)
			retValue = getCumulatedAmt()
				.divide(getCumulatedQty(), getPrecision(), BigDecimal.ROUND_HALF_UP); 
		return retValue;
	}	//	getHistoryAverage
"
org.compiere.model.QtyCost.toString,MCost.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MCost["");
		sb.append (""AD_Client_ID="").append (getAD_Client_ID());
		if (getAD_Org_ID() != 0)
			sb.append ("",AD_Org_ID="").append (getAD_Org_ID());
		sb.append ("",M_Product_ID="").append (getM_Product_ID());
		if (getM_AttributeSetInstance_ID() != 0)
			sb.append ("",AD_ASI_ID="").append (getM_AttributeSetInstance_ID());
	//	sb.append ("",C_AcctSchema_ID="").append (getC_AcctSchema_ID());
	//	sb.append ("",M_CostType_ID="").append (getM_CostType_ID());
		sb.append ("",M_CostElement_ID="").append (getM_CostElement_ID());
		//
		sb.append ("", CurrentCost="").append (getCurrentCostPrice())
			.append ("", C.Amt="").append (getCumulatedAmt())
			.append ("",C.Qty="").append (getCumulatedQty())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.QtyCost.getCostElement,MCost.java,"MCostElement getCostElement()
	{
		int M_CostElement_ID = getM_CostElement_ID();
		if (M_CostElement_ID == 0)
			return null;
		return new MCostElement(getCtx(), M_CostElement_ID, get_Trx());
	}	//	getCostElement
"
org.compiere.model.QtyCost.beforeSave,MCost.java,"boolean beforeSave (boolean newRecord)
	{
		MCostElement ce = getCostElement();
		//	Check if data entry makes sense
		if (m_manual)
		{
			MAcctSchema as = new MAcctSchema (getCtx(), getC_AcctSchema_ID(), null);
			String CostingLevel = as.getCostingLevel();
			MProduct product = MProduct.get(getCtx(), getM_Product_ID());
			MProductCategoryAcct pca = MProductCategoryAcct.get (getCtx(),
				product.getM_Product_Category_ID(), as.getC_AcctSchema_ID(), null);	
			if (pca.getCostingLevel() != null)
				CostingLevel = pca.getCostingLevel();
			if (X_C_AcctSchema.COSTINGLEVEL_Tenant.equals(CostingLevel))
			{
				if (getAD_Org_ID() != 0 || getM_AttributeSetInstance_ID() != 0)
				{
					log.saveError(""CostingLevelClient"", """");
					return false;
				}
			}
			else if (X_C_AcctSchema.COSTINGLEVEL_BatchLot.equals(CostingLevel))
			{
				if (getM_AttributeSetInstance_ID() == 0 
					&& ce.isCostingMethod())
				{
					log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""M_AttributeSetInstance_ID""));
					return false;
				}
				if (getAD_Org_ID() != 0)
					setAD_Org_ID(0);
			}
		}
		
		//	Cannot enter calculated
		if (m_manual && ce != null && ce.isCalculated())
		{
			log.saveError(""Error"", Msg.getElement(getCtx(), ""IsCalculated""));
			return false;
		}
		//	Percentage
		if (ce != null)
		{
			if (ce.isCalculated() 
				|| X_M_CostElement.COSTELEMENTTYPE_Material.equals(ce.getCostElementType()) 
				&& getPercentCost().signum() != 0)
				setPercentCost(Env.ZERO);
		}
		if (getPercentCost().signum() != 0)
		{
			if (getCurrentCostPrice().signum() != 0)
				setCurrentCostPrice(Env.ZERO);
			if (getFutureCostPrice().signum() != 0)
				setFutureCostPrice(Env.ZERO);
			if (getCumulatedAmt().signum() != 0)
				setCumulatedAmt(Env.ZERO);
			if (getCumulatedQty().signum() != 0)
				setCumulatedQty(Env.ZERO);
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.QtyCost.beforeDelete,MCost.java,"boolean beforeDelete ()
	{
		return true;
	}	//	beforeDelete
"
org.compiere.model.QtyCost.main,MCost.java,"void main (String[] args)
	{
		/**
		DELETE M_Cost c
		WHERE EXISTS (SELECT * FROM M_CostElement ce 
		    WHERE c.M_CostElement_ID=ce.M_CostElement_ID AND ce.IsCalculated='Y')
		/
		UPDATE M_Cost
		  SET CumulatedAmt=0, CumulatedQty=0
		/  
		UPDATE M_CostDetail
		  SET Processed='N'
		WHERE Processed='Y'
		/
		COMMIT
		/
		**/
		
		Compiere.startup(true);
		MClient client = MClient.get(Env.getCtx(), 11);	//	GardenWorld
		create(client);
		
	}	//	main
"
org.compiere.model.MAttributeValue.toString,MAttributeValue.java,"String toString()
	{
		return getName();
	}	//	toString
"
org.compiere.model.MProductPrice.get,MProductPrice.java,"MProductPrice get (Ctx ctx, int M_PriceList_Version_ID, int M_Product_ID,
		Trx trx)
	{
		MProductPrice retValue = null;
		String sql = ""SELECT * FROM M_ProductPrice WHERE M_PriceList_Version_ID=? AND M_Product_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, M_PriceList_Version_ID);
			pstmt.setInt (2, M_Product_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
			{
				retValue = new MProductPrice (ctx, rs, trx);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return retValue;
	}	//	get
"
org.compiere.model.MProductPrice.setPrices,MProductPrice.java,"void setPrices (BigDecimal PriceList, BigDecimal PriceStd, BigDecimal PriceLimit)
	{
		setPriceLimit (PriceLimit);
		setPriceList (PriceList);
		setPriceStd (PriceStd);
	}	//	setPrice
"
org.compiere.model.MProductPrice.toString,MProductPrice.java,"String toString()
	{
		StringBuffer sb = new StringBuffer (""MProductPrice["");
		sb.append(getM_PriceList_Version_ID())
			.append("",M_Product_ID="").append (getM_Product_ID())
			.append("",PriceList="").append(getPriceList())
			.append(""]"");
		return sb.toString ();
	} //	toString
"
org.compiere.model.MCashBook.get,MCashBook.java,"MCashBook get (Ctx ctx, int C_CashBook_ID)
	{
		Integer key = Integer.valueOf (C_CashBook_ID);
		MCashBook retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MCashBook (ctx, C_CashBook_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MCashBook.get,MCashBook.java,"MCashBook get (Ctx ctx, int AD_Org_ID, int C_Currency_ID)
	{
		//	Try from cache
		Iterator<MCashBook> it = s_cache.values().iterator();
		while (it.hasNext())
		{
			MCashBook cb = it.next();
			if ((cb.getAD_Org_ID() == AD_Org_ID) && (cb.getC_Currency_ID() == C_Currency_ID))
				return cb;
		}

		//	Get from DB
		MCashBook retValue = null;
		String sql = ""SELECT * FROM C_CashBook ""
			+ ""WHERE AD_Org_ID=? AND C_Currency_ID=? ""
			+ ""ORDER BY ASCII(IsDefault) DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, AD_Org_ID);
			pstmt.setInt (2, C_Currency_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
			{
				retValue = new MCashBook (ctx, rs, null);
				Integer key = Integer.valueOf (retValue.getC_CashBook_ID());
				s_cache.put (key, retValue);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, ""get"", e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return retValue;
	}	//	get
"
org.compiere.model.MCashBook.afterSave,MCashBook.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (newRecord & success)
			success = insert_Accounting(""C_CashBook_Acct"", ""C_AcctSchema_Default"", null);

		return success;
	}	//	afterSave
"
org.compiere.model.MCashBook.beforeDelete,MCashBook.java,"boolean beforeDelete ()
	{
		return delete_Accounting(""C_Cashbook_Acct"");
	}	//	beforeDelete
"
org.compiere.model.MCashBook.toString,MCashBook.java,"String toString()
    {
	    StringBuffer sb = new StringBuffer(""MCashBook["")
	    	.append(get_ID())
	        .append(""-"").append(getName());
	    sb.append(""]"");
	    return sb.toString();
    }	//	toString
"
org.compiere.model.MProductLocator.getLocators,MProductLocator.java,"MLocator[] getLocators (MProduct product, int M_Warehouse_ID)
	{
		ArrayList<MLocator> list = new ArrayList<MLocator>();
		String sql = ""SELECT * FROM M_Locator l ""
			+ ""WHERE l.IsActive='Y'""
			+ "" AND (M_Locator_ID IN (SELECT M_Locator_ID FROM M_Product WHERE M_Product_ID=?)""
			+ "" OR M_Locator_ID IN (SELECT M_Locator_ID FROM M_ProductLocator WHERE M_Product_ID=? AND IsActive='Y'))""
			+ "" AND M_Warehouse_ID=? ""
			+ ""ORDER BY PriorityNo DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, product.get_Trx());
			pstmt.setInt (1, product.getM_Product_ID());
			pstmt.setInt (2, product.getM_Product_ID());
			pstmt.setInt (3, M_Warehouse_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				list.add (new MLocator (product.getCtx(), rs, product.get_Trx()));
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MLocator[] retValue = new MLocator[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getLocator
"
org.compiere.model.MProductLocator.getFirstM_Locator_ID,MProductLocator.java,"int getFirstM_Locator_ID (MProduct product, int M_Warehouse_ID)
	{
		if (product == null || M_Warehouse_ID == 0)
			return 0;
		//
		int M_Locator_ID = 0;
		String sql = ""SELECT M_Locator_ID FROM M_Locator l ""
			+ ""WHERE l.IsActive='Y'""
			+ "" AND (M_Locator_ID IN (SELECT M_Locator_ID FROM M_Product WHERE M_Product_ID=?)""
			+ "" OR M_Locator_ID IN (SELECT M_Locator_ID FROM M_ProductLocator WHERE M_Product_ID=? AND IsActive='Y'))""
			+ "" AND M_Warehouse_ID=? ""
			+ ""ORDER BY PriorityNo DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, product.get_Trx());
			pstmt.setInt (1, product.getM_Product_ID());
			pstmt.setInt (2, product.getM_Product_ID());
			pstmt.setInt (3, M_Warehouse_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				M_Locator_ID = rs.getInt(1);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		return M_Locator_ID;
	}	//	getFirstM_Locator_ID
"
org.compiere.model.MProductLocator.getOfProductLocator,MProductLocator.java,"MProductLocator getOfProductLocator(Ctx ctx, int M_Product_ID, int M_Locator_ID)
	{
		if(M_Product_ID==0 || M_Locator_ID==0)
			return null;
		
		int M_ProductLocator_ID=0;
		String sql = ""SELECT M_ProductLocator_ID FROM M_ProductLocator l ""
			+ ""WHERE l.IsActive='Y'""
			+ "" AND M_Locator_ID=?""
			+ "" AND M_Product_ID=?"";
		
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, M_Locator_ID);
			pstmt.setInt (2, M_Product_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				M_ProductLocator_ID = rs.getInt(1);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		if(M_ProductLocator_ID == 0)
			return null;
		
		return new MProductLocator(ctx, M_ProductLocator_ID, null);

	}
"
org.compiere.model.MProductLocator.beforeSave,MProductLocator.java,"boolean beforeSave(boolean newRecord) 
	{
		if(newRecord || is_ValueChanged(""M_Locator_ID""))
		{
			int ii = DB.getSQLValue(get_Trx(), ""SELECT count(*) "" +
				""FROM M_ProductLocator pl WHERE pl.M_Product_ID=? "" +
				""AND pl.M_Locator_ID=? "", getM_Product_ID(), getM_Locator_ID());
			if(ii > 0)
			{
				log.saveError(""Error"", Msg.getMsg(getCtx(), ""LocatorAlreadyLinkedToProduct""));
				return false;
			}	
		}
		return true;
	}
"
org.compiere.model.MCampaign.afterSave,MCampaign.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!success)
			return success;
		//	Value/Name change
		if (!newRecord && (is_ValueChanged(""Value"") || is_ValueChanged(""Name"")))
			MAccount.updateValueDescription(getCtx(), ""C_Campaign_ID="" + getC_Campaign_ID(), get_Trx());

		return true;
	}	//	afterSave
"
org.compiere.model.MRfQResponseLineQty.getRfQLineQty,MRfQResponseLineQty.java,"MRfQLineQty getRfQLineQty()
	{
		if (m_rfqQty == null)
			m_rfqQty = new MRfQLineQty (getCtx(), getC_RfQLineQty_ID(), get_Trx()); 
		return m_rfqQty;
	}	//	getRfQLineQty
"
org.compiere.model.MRfQResponseLineQty.isValidAmt,MRfQResponseLineQty.java,"boolean isValidAmt()
	{
		BigDecimal price = getPrice();
		if (price == null || Env.ZERO.compareTo(price) == 0)
		{
			log.warning(""No Price - "" + price);
			return false;
		}
		BigDecimal discount = getDiscount();
		if (discount != null)
		{
			if (discount.abs().compareTo(ONEHUNDRED) > 0)
			{
				log.warning(""Discount > 100 - "" + discount);
				return false;
			}
		}
		BigDecimal net = getNetAmt();
		if (net == null)
		{
			log.warning(""Net is null"");
			return false;
		}
		if (net.compareTo(Env.ZERO) <= 0)
		{
			log.warning(""Net <= 0 - "" + net);
			return false;
		}
		return true;
	}	//	isValidAmt
"
org.compiere.model.MRfQResponseLineQty.getNetAmt,MRfQResponseLineQty.java,"BigDecimal getNetAmt()
	{
		BigDecimal price = getPrice();
		if (price == null || Env.ZERO.compareTo(price) == 0)
			return null;
		//	
		BigDecimal discount = getDiscount();
		if (discount == null || Env.ZERO.compareTo(discount) == 0)
			return price;
		//	Calculate
	//	double result = price.doubleValue() * (100.0 - discount.doubleValue()) / 100.0;
		BigDecimal factor = ONEHUNDRED.subtract(discount);
		return price.multiply(factor).divide(ONEHUNDRED, 2, BigDecimal.ROUND_HALF_UP);  
	}	//	getNetAmt
"
org.compiere.model.MRfQResponseLineQty.toString,MRfQResponseLineQty.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MRfQResponseLineQty["");
		sb.append(get_ID()).append("",Rank="").append(getRanking())
			.append("",Price="").append(getPrice())
			.append("",Discount="").append(getDiscount())
			.append("",Net="").append(getNetAmt())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MRfQResponseLineQty.compare,MRfQResponseLineQty.java,"int compare(PO o1, PO o2)
	{
		if (o1 == null)
			throw new IllegalArgumentException(""o1 = null"");
		if (o2 == null)
			throw new IllegalArgumentException(""o2 = null"");
		MRfQResponseLineQty q1 = null;
		MRfQResponseLineQty q2 = null;
		if (o1 instanceof MRfQResponseLineQty)
			q1 = (MRfQResponseLineQty)o1;
		else
			throw new ClassCastException(""o1"");
		if (o2 instanceof MRfQResponseLineQty)
			q2 = (MRfQResponseLineQty)o2;
		else
			throw new ClassCastException(""o2"");
		//
		if (!q1.isValidAmt())
			return -99;
		if (!q2.isValidAmt())
			return +99;
   		BigDecimal net1 = q1.getNetAmt();
   		if (net1 == null)
   			return -9;
		BigDecimal net2 = q2.getNetAmt();
   		if (net2 == null)
   			return +9;
		return net1.compareTo(net2);
	}	//	compare
"
org.compiere.model.MRfQResponseLineQty.equals,MRfQResponseLineQty.java,"boolean equals(Object obj)
	{
    	if (obj instanceof MRfQResponseLineQty)
    	{
    		MRfQResponseLineQty cmp = (MRfQResponseLineQty)obj;
    		if (!cmp.isValidAmt() || !isValidAmt())
    			return false;
    		BigDecimal cmpNet = cmp.getNetAmt();
    		if (cmpNet == null)
    			return false;
    		BigDecimal net = cmp.getNetAmt();
    		if (net == null)
    			return false;
    		return cmpNet.compareTo(net) == 0; 
    	}
    	return false;
	}	//	equals
"
org.compiere.model.MRfQResponseLineQty.beforeSave,MRfQResponseLineQty.java,"boolean beforeSave (boolean newRecord)
	{
		if (!isActive())
			setRanking(999);
		return true;
	}	//	beforeSave
"
org.compiere.model.MGLCategory.get,MGLCategory.java,"MGLCategory get (Ctx ctx, int GL_Category_ID)
	{
		Integer key = Integer.valueOf (GL_Category_ID);
		MGLCategory retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MGLCategory (ctx, GL_Category_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MGLCategory.getDefault,MGLCategory.java,"MGLCategory getDefault (Ctx ctx, String CategoryType)
	{
		MGLCategory retValue = null;
		String sql = ""SELECT * FROM GL_Category ""
			+ ""WHERE AD_Client_ID=? AND IsDefault='Y'"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, ctx.getAD_Client_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MGLCategory temp = new MGLCategory (ctx, rs, null);
				if (CategoryType != null && CategoryType.equals(temp.getCategoryType()))
				{
					retValue = temp;
					break;
				}
				if (retValue == null)
					retValue = temp;
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return retValue;
	}	//	getDefault
"
org.compiere.model.MGLCategory.getDefaultSystem,MGLCategory.java,"MGLCategory getDefaultSystem (Ctx ctx)
	{
		MGLCategory retValue = getDefault(ctx, CATEGORYTYPE_SystemGenerated);
		if (retValue == null 
			|| !retValue.getCategoryType().equals(CATEGORYTYPE_SystemGenerated))
		{
			retValue = new MGLCategory(ctx, 0, null);
			retValue.setName(""Default System"");
			retValue.setCategoryType(CATEGORYTYPE_SystemGenerated);
			retValue.setIsDefault(true);
			if (!retValue.save())
				throw new IllegalStateException(""Could not save default system GL Category"");
		}
		return retValue;
	}	//	getDefaultSystem
"
org.compiere.model.MPaymentBatch.getForPaySelection,MPaymentBatch.java,"MPaymentBatch getForPaySelection (Ctx ctx, int C_PaySelection_ID, Trx trx)
	{
		MPaySelection ps = new MPaySelection (ctx, C_PaySelection_ID, trx);
		MPaymentBatch retValue = new MPaymentBatch (ps);
		return retValue;
	}	//	getForPaySelection
"
org.compiere.model.MReturnPolicy.getProductLine,MReturnPolicy.java,"int getProductLine (int M_Product_ID)
	{
		StringBuffer sql = new StringBuffer(""SELECT M_ReturnPolicyLine_ID FROM M_ReturnPolicyLine WHERE M_ReturnPolicy_ID =? "");
		int M_ReturnPolicyLine_ID = 0;
		
		if (M_Product_ID != 0)
			sql.append(""AND M_Product_ID = ?  "");
		
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql.toString(), get_Trx());
			pstmt.setInt(1, getM_ReturnPolicy_ID());
			
			if (M_Product_ID != 0)
				pstmt.setInt(2, M_Product_ID);
			
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				M_ReturnPolicyLine_ID = rs.getInt(1);				
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql.toString(), e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		//
		return M_ReturnPolicyLine_ID;
	}	//	getProductLine
"
org.compiere.model.MReturnPolicy.getProductCategoryLine,MReturnPolicy.java,"int getProductCategoryLine (int M_Product_Category_ID)
	{
		StringBuffer sql = new StringBuffer(""SELECT M_ReturnPolicyLine_ID FROM M_ReturnPolicyLine WHERE M_ReturnPolicy_ID =? "");
		int M_ReturnPolicyLine_ID = 0;
		
		if (M_Product_Category_ID != 0)
			sql.append(""AND M_Product_ID IS NULL AND M_Product_Category_ID = ?  "");
		
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql.toString(), get_Trx());
			pstmt.setInt(1, getM_ReturnPolicy_ID());
			
			if (M_Product_Category_ID != 0)
				pstmt.setInt(2, M_Product_Category_ID);
			
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				M_ReturnPolicyLine_ID = rs.getInt(1);				
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql.toString(), e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		//
		return M_ReturnPolicyLine_ID;
	}	//	getProductCategoryLine
"
org.compiere.model.MReturnPolicy.policyHasLines,MReturnPolicy.java,"boolean policyHasLines ()
	{
		StringBuffer sql = new StringBuffer(""SELECT count(*) FROM M_ReturnPolicyLine WHERE M_ReturnPolicy_ID =? "");
		int lineCount=0;
		
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql.toString(), get_Trx());
			pstmt.setInt(1, getM_ReturnPolicy_ID());
			
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				lineCount = rs.getInt(1);				
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql.toString(), e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		//
		return lineCount != 0;
	}	//	getProductLine
"
org.compiere.model.MReturnPolicy.checkReturnPolicy,MReturnPolicy.java,"boolean checkReturnPolicy(Timestamp shipDate, Timestamp returnDate)
	{
		if(policyHasLines())
			return true;

		long timeFrame = getTimeFrame()* 24 * 60 * 60 ; // Timeframe in milliseconds
		// If timeFrame is 0, returns are not allowed
		if(timeFrame == 0)
			return false;
		
		log.fine(""ShipDate : ""+shipDate.toString() + "" ReturnDate : ""+returnDate.toString() + "" TimeFrame : "" +timeFrame);
		Timestamp allowedDate = new Timestamp(timeFrame * 1000 + shipDate.getTime() );
		
		log.fine(""Allowed Date : ""+allowedDate.toString());
		if(returnDate.after(allowedDate))
			return false;
		return true;
	}
"
org.compiere.model.MReturnPolicy.checkReturnPolicy,MReturnPolicy.java,"boolean checkReturnPolicy(Timestamp shipDate, Timestamp returnDate, int M_Product_ID)
	{

		int M_ReturnPolicyLine_ID = getProductLine(M_Product_ID);
		if (M_ReturnPolicyLine_ID == 0)
		{
			MProduct product = new MProduct (getCtx(), M_Product_ID, get_Trx());
			M_ReturnPolicyLine_ID = getProductCategoryLine(product.getM_Product_Category_ID());
		}
		
		long timeFrame; 
		if (M_ReturnPolicyLine_ID == 0)
			timeFrame = getTimeFrame()* 24 * 60 * 60 ; // Timeframe in milliseconds
		else
		{
			MReturnPolicyLine rpolicyLine = new MReturnPolicyLine (getCtx(), M_ReturnPolicyLine_ID, get_Trx());
			timeFrame = rpolicyLine.getTimeFrame()* 24 * 60 * 60 ; // Timeframe in milliseconds
		}

		if(timeFrame == 0)
			return false;

		log.fine(""ShipDate : ""+shipDate.toString() + "" ReturnDate : ""+returnDate.toString() + "" TimeFrame : "" +timeFrame);
		Timestamp allowedDate = new Timestamp(timeFrame * 1000 + shipDate.getTime() );
		
		log.fine(""Allowed Date : ""+allowedDate.toString());
		if(returnDate.after(allowedDate))
			return false;
		return true;
	}
"
org.compiere.model.MReturnPolicy.getDefault,MReturnPolicy.java,"int getDefault (Ctx ctx)
	{
		int AD_Client_ID = ctx.getAD_Client_ID();
		int rPolicy_ID = 0;
		
		PreparedStatement pstmt = null;
		String sql = ""SELECT M_ReturnPolicy_ID FROM M_ReturnPolicy""
			+ "" WHERE IsDefault='Y' AND IsActive='Y' AND AD_Client_ID=? "";
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, AD_Client_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
			{
				rPolicy_ID = rs.getInt(1);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{}
		
		return rPolicy_ID;
	}	//	get
"
org.compiere.model.MReturnPolicy.toString,MReturnPolicy.java,"String toString()
    {
	    StringBuffer sb = new StringBuffer(""MReturnPolicy["").append(get_ID())
	        .append(""-"").append(getName());
	    sb.append(""]"");
	    return sb.toString();
    } //	toString
"
org.compiere.model.MColor.toString,MColor.java,"String toString()
	{
		return ""MColor[ID="" + get_ID() + "" - "" + getName() + ""]"";
	}   //  toString
"
org.compiere.model.MColor.loadSpecial,MColor.java,"Object loadSpecial (ResultSet rs, int index) throws SQLException
	{
		log.config(p_info.getColumnName(index));
		if (index == get_ColumnIndex(""ColorType""))
			return rs.getString(index+1);
		return null;
	}   //  loadSpecial
"
org.compiere.model.MColor.saveNewSpecial,MColor.java,"String saveNewSpecial (Object value, int index)
	{
		String colName = p_info.getColumnName(index);
		String colValue = value == null ? ""null"" : value.getClass().toString();
		log.fine(colName + ""="" + colValue);
		if (value == null)
			return ""NULL"";
		return value.toString();
	}   //  saveNewSpecial
"
org.compiere.model.MColor.getCompiereColor,MColor.java,"CompiereColor getCompiereColor()
	{
		if (get_ID() == 0)
			return null;

		//  Color Type
		String ColorType = getColorType();
		if (ColorType == null)
		{
			log.log(Level.SEVERE, ""MColor.getCompiereColor - No ColorType"");
			return null;
		}
		CompiereColor cc = null;
		//
		if (ColorType.equals(CompiereColor.TYPE_FLAT))
		{
			cc = new CompiereColor(getColor(true), true);
		}
		else if (ColorType.equals(CompiereColor.TYPE_GRADIENT))
		{
			int RepeatDistance = getRepeatDistance();
			String StartPoint = getStartPoint();
			int startPoint = StartPoint == null ? 0 : Integer.parseInt(StartPoint);
			cc = new CompiereColor(getColor(true), getColor(false), startPoint, RepeatDistance);
		}
		else if (ColorType.equals(CompiereColor.TYPE_LINES))
		{
			int LineWidth = getLineWidth();
			int LineDistance = getLineDistance();
			cc = new CompiereColor(getColor(false), getColor(true), LineWidth, LineDistance);
		}
		else if (ColorType.equals(CompiereColor.TYPE_TEXTURE))
		{
			int AD_Image_ID = getAD_Image_ID();
			String url = getURL(AD_Image_ID);
			if (url == null)
				return null;
			BigDecimal ImageAlpha = getImageAlpha();
			float compositeAlpha = ImageAlpha == null ? 0.7f : ImageAlpha.floatValue();
			cc = new CompiereColor(url, getColor(true), compositeAlpha);
		}
		return cc;
	}   //  getCompiereColor
"
org.compiere.model.MColor.getColor,MColor.java,"Color getColor (boolean primary)
	{
		int red = primary ? getRed() : getRed_1();
		int green = primary ? getGreen() : getGreen_1();
		int blue = primary ? getBlue() : getBlue_1();
		//
		return new Color (red, green, blue);
	}   //  getColor
"
org.compiere.model.MColor.getURL,MColor.java,"String getURL (int AD_Image_ID)
	{
		if (AD_Image_ID == 0)
			return null;
		//
		String retValue = null;
		String sql = ""SELECT ImageURL FROM AD_Image WHERE AD_Image_ID=?"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, AD_Image_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				retValue = rs.getString(1);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		return retValue;
	}   //  getURL
"
org.compiere.model.CalloutMovement.product,CalloutMovement.java,"String product (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer M_Product_ID = (Integer)value;
		if (M_Product_ID == null || M_Product_ID.intValue() == 0)
			return """";
		//	Set Attribute
		if (ctx.getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_Product_ID"") == M_Product_ID.intValue()
			&& ctx.getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_AttributeSetInstance_ID"") != 0)
			mTab.setValue(""M_AttributeSetInstance_ID"", Integer.valueOf(ctx.getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_AttributeSetInstance_ID"")));
		else
			mTab.setValue(""M_AttributeSetInstance_ID"", null);
		return """";
	}   //  product
"
org.compiere.model.MInvoice.getOfBPartner,MInvoice.java,"MInvoice[] getOfBPartner (Ctx ctx, int C_BPartner_ID, Trx trx)
	{
		ArrayList<MInvoice> list = new ArrayList<MInvoice>();
		String sql = ""SELECT * FROM C_Invoice WHERE C_BPartner_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, trx);
			pstmt.setInt(1, C_BPartner_ID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MInvoice(ctx,rs, trx));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

		//
		MInvoice[] retValue = new MInvoice[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getOfBPartner
"
org.compiere.model.MInvoice.copyFrom,MInvoice.java,"MInvoice copyFrom (MInvoice from, Timestamp dateDoc,
		int C_DocTypeTarget_ID,
		boolean counter, Trx trx, boolean setOrder)
	{
		MInvoice to = new MInvoice (from.getCtx(), 0, null);
		to.set_Trx(trx);
		PO.copyValues (from, to, from.getAD_Client_ID(), from.getAD_Org_ID());
		to.set_ValueNoCheck (""C_Invoice_ID"", I_ZERO);
		to.set_ValueNoCheck (""DocumentNo"", null);
		//
		to.setDocStatus (DOCSTATUS_Drafted);		//	Draft
		to.setDocAction(DOCACTION_Complete);
		//
		to.setC_DocType_ID(0);
		to.setC_DocTypeTarget_ID (C_DocTypeTarget_ID, true);
		//
		to.setDateInvoiced (dateDoc);
		to.setDateAcct (dateDoc);
		to.setDatePrinted(null);
		to.setIsPrinted (false);
		//
		to.setIsApproved (false);
		to.setC_Payment_ID(0);
		to.setC_CashLine_ID(0);
		to.setIsPaid (false);
		to.setIsInDispute(false);
		//
		//	Amounts are updated by trigger when adding lines
		to.setGrandTotal(Env.ZERO);
		to.setTotalLines(Env.ZERO);
		//
		to.setIsTransferred (false);
		to.setPosted (false);
		to.setProcessed (false);
		//	delete references
		to.setIsSelfService(false);
		if (!setOrder)
			to.setC_Order_ID(0);
		if (counter)
		{
			to.setRef_Invoice_ID(from.getC_Invoice_ID());
			//	Try to find Order link
			if (from.getC_Order_ID() != 0)
			{
				MOrder peer = new MOrder (from.getCtx(), from.getC_Order_ID(), from.get_Trx());
				if (peer.getRef_Order_ID() != 0)
					to.setC_Order_ID(peer.getRef_Order_ID());
			}
		}
		else
			to.setRef_Invoice_ID(0);

		if (!to.save(trx))
			throw new IllegalStateException(""Could not create Invoice"");
		if (counter)
			from.setRef_Invoice_ID(to.getC_Invoice_ID());

		//	Lines
		if (to.copyLinesFrom(from, counter, setOrder) == 0)
			throw new IllegalStateException(""Could not create Invoice Lines"");

		return to;
	}	//	copyFrom
"
org.compiere.model.MInvoice.getPDFFileName,MInvoice.java,"String getPDFFileName (String documentDir, int C_Invoice_ID)
	{
		StringBuffer sb = new StringBuffer (documentDir);
		if (sb.length() == 0)
			sb.append(""."");
		if (!sb.toString().endsWith(File.separator))
			sb.append(File.separator);
		sb.append(""C_Invoice_ID_"")
			.append(C_Invoice_ID)
			.append("".pdf"");
		return sb.toString();
	}	//	getPDFFileName
"
org.compiere.model.MInvoice.get,MInvoice.java,"MInvoice get (Ctx ctx, int C_Invoice_ID)
	{
		Integer key = Integer.valueOf (C_Invoice_ID);
		MInvoice retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MInvoice (ctx, C_Invoice_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	} //	get
"
org.compiere.model.MInvoice.setClientOrg,MInvoice.java,"void setClientOrg (int AD_Client_ID, int AD_Org_ID)
	{
		super.setClientOrg(AD_Client_ID, AD_Org_ID);
	}	//	setClientOrg
"
org.compiere.model.MInvoice.setBPartner,MInvoice.java,"void setBPartner (MBPartner bp)
	{
		if (bp == null)
			return;

		setC_BPartner_ID(bp.getC_BPartner_ID());
		//	Set Defaults
		int ii = 0;
		if (isSOTrx())
			ii = bp.getC_PaymentTerm_ID();
		else
			ii = bp.getPO_PaymentTerm_ID();
		if (ii != 0)
			setC_PaymentTerm_ID(ii);
		//
		if (isSOTrx())
			ii = bp.getM_PriceList_ID();
		else
			ii = bp.getPO_PriceList_ID();
		if (ii != 0)
			setM_PriceList_ID(ii);
		//
		String ss = null;
		if (isSOTrx())
			ss = bp.getPaymentRule();
		else
			ss = bp.getPaymentRulePO();
		if (ss != null)
			setPaymentRule(ss);


		//	Set Locations
		MBPartnerLocation[] locs = bp.getLocations(false);
		if (locs != null)
		{
			for (MBPartnerLocation element : locs) {
				if (element.isBillTo() && isSOTrx()
				|| element.isPayFrom() && !isSOTrx())
					setC_BPartner_Location_ID(element.getC_BPartner_Location_ID());
			}
			//	set to first
			if (getC_BPartner_Location_ID() == 0 && locs.length > 0)
				setC_BPartner_Location_ID(locs[0].getC_BPartner_Location_ID());
		}
		if (getC_BPartner_Location_ID() == 0)
			log.log(Level.SEVERE, ""Has no To Address: "" + bp);

		//	Set Contact
		MUser[] contacts = bp.getContacts(false);
		if (contacts != null && contacts.length > 0)	//	get first User
			setAD_User_ID(contacts[0].getAD_User_ID());
		//
		setC_Project_ID(0);
	}	//	setBPartner
"
org.compiere.model.MInvoice.setOrder,MInvoice.java,"void setOrder (MOrder order)
	{
		if (order == null)
			return;

		setC_Order_ID(order.getC_Order_ID());
		setIsSOTrx(order.isSOTrx());
		setIsDiscountPrinted(order.isDiscountPrinted());
		setIsSelfService(order.isSelfService());
		setSendEMail(order.isSendEMail());
		//
		setM_PriceList_ID(order.getM_PriceList_ID());
		setIsTaxIncluded(order.isTaxIncluded());
		setC_Currency_ID(order.getC_Currency_ID());
		setC_ConversionType_ID(order.getC_ConversionType_ID());
		//
		setPaymentRule(order.getPaymentRule());
		setC_PaymentTerm_ID(order.getC_PaymentTerm_ID());
		setPOReference(order.getPOReference());
		setDescription(order.getDescription());
		setDateOrdered(order.getDateOrdered());
		setC_BP_BankAccount_ID(order.getC_BP_BankAccount_ID());
		//
		setAD_OrgTrx_ID(order.getAD_OrgTrx_ID());
		setC_Project_ID(order.getC_Project_ID());
		setC_Campaign_ID(order.getC_Campaign_ID());
		setC_Activity_ID(order.getC_Activity_ID());
		setUser1_ID(order.getUser1_ID());
		setUser2_ID(order.getUser2_ID());
	}	//	setOrder
"
org.compiere.model.MInvoice.setShipment,MInvoice.java,"void setShipment (MInOut ship)
	{
		if (ship == null)
			return;

		setIsSOTrx(ship.isSOTrx());
		//
		MBPartner bp = new MBPartner (getCtx(), ship.getC_BPartner_ID(), null);
		setBPartner (bp);
		//
		setSendEMail(ship.isSendEMail());
		//
		setPOReference(ship.getPOReference());
		setDescription(ship.getDescription());
		setDateOrdered(ship.getDateOrdered());
		//
		setAD_OrgTrx_ID(ship.getAD_OrgTrx_ID());
		setC_Project_ID(ship.getC_Project_ID());
		setC_Campaign_ID(ship.getC_Campaign_ID());
		setC_Activity_ID(ship.getC_Activity_ID());
		setUser1_ID(ship.getUser1_ID());
		setUser2_ID(ship.getUser2_ID());
		//
		if (ship.getC_Order_ID() != 0)
		{
			setC_Order_ID(ship.getC_Order_ID());
			MOrder order = new MOrder (getCtx(), ship.getC_Order_ID(), get_Trx());
			setIsDiscountPrinted(order.isDiscountPrinted());
			setM_PriceList_ID(order.getM_PriceList_ID());
			setIsTaxIncluded(order.isTaxIncluded());
			setC_Currency_ID(order.getC_Currency_ID());
			setC_ConversionType_ID(order.getC_ConversionType_ID());
			setPaymentRule(order.getPaymentRule());
			setC_PaymentTerm_ID(order.getC_PaymentTerm_ID());
			//
			MDocType dt = MDocType.get(getCtx(), order.getC_DocType_ID());
			if (dt.getC_DocTypeInvoice_ID() != 0)
				setC_DocTypeTarget_ID(dt.getC_DocTypeInvoice_ID(), true);
			//	Overwrite Invoice Address
			setC_BPartner_Location_ID(order.getBill_Location_ID());
		}
	}	//	setShipment
"
org.compiere.model.MInvoice.setC_DocTypeTarget_ID,MInvoice.java,"void setC_DocTypeTarget_ID (String DocBaseType)
	{
		String sql = ""SELECT C_DocType_ID FROM C_DocType ""
			+ ""WHERE AD_Client_ID=? AND DocBaseType=?""
			+ "" AND IsActive='Y' ""
			+ ""ORDER BY ASCII(IsDefault) DESC"";
		int C_DocType_ID = DB.getSQLValue(null, sql, getAD_Client_ID(), DocBaseType);
		if (C_DocType_ID <= 0)
			log.log(Level.SEVERE, ""Not found for AC_Client_ID=""
				+ getAD_Client_ID() + "" - "" + DocBaseType);
		else
		{
			log.fine(DocBaseType);
			setC_DocTypeTarget_ID (C_DocType_ID);
			boolean isSOTrx = MDocBaseType.DOCBASETYPE_ARInvoice.equals(DocBaseType)
				|| MDocBaseType.DOCBASETYPE_ARCreditMemo.equals(DocBaseType);
			setIsSOTrx (isSOTrx);
			boolean isReturnTrx = MDocBaseType.DOCBASETYPE_ARCreditMemo.equals(DocBaseType)
				|| MDocBaseType.DOCBASETYPE_APCreditMemo.equals(DocBaseType);
			setIsReturnTrx(isReturnTrx);
		}
	}	//	setC_DocTypeTarget_ID
"
org.compiere.model.MInvoice.setC_DocTypeTarget_ID,MInvoice.java,"void setC_DocTypeTarget_ID ()
	{
		if (getC_DocTypeTarget_ID() > 0)
			return;
		if (isSOTrx())
			setC_DocTypeTarget_ID(MDocBaseType.DOCBASETYPE_ARInvoice);
		else
			setC_DocTypeTarget_ID(MDocBaseType.DOCBASETYPE_APInvoice);
	}	//	setC_DocTypeTarget_ID
"
org.compiere.model.MInvoice.setC_DocTypeTarget_ID,MInvoice.java,"void setC_DocTypeTarget_ID(int C_DocTypeTarget_ID, boolean setReturnTrx)
	{
		super.setC_DocTypeTarget_ID(C_DocTypeTarget_ID);
		if (setReturnTrx)
		{
			MDocType dt = MDocType.get(getCtx(), C_DocTypeTarget_ID);
			setIsSOTrx(dt.isSOTrx());
			setIsReturnTrx(dt.isReturnTrx());
		}
	}	//	setC_DocTypeTarget_ID
"
org.compiere.model.MInvoice.getGrandTotal,MInvoice.java,"BigDecimal getGrandTotal (boolean creditMemoAdjusted)
	{
		if (!creditMemoAdjusted)
			return super.getGrandTotal();
		//
		BigDecimal amt = getGrandTotal();
		if (isCreditMemo())
			return amt.negate();
		return amt;
	}	//	getGrandTotal
"
org.compiere.model.MInvoice.getLines,MInvoice.java,"MInvoiceLine[] getLines (String whereClause)
	{
		ArrayList<MInvoiceLine> list = new ArrayList<MInvoiceLine>();
		String sql = ""SELECT * FROM C_InvoiceLine WHERE C_Invoice_ID=? "";
		if (whereClause != null)
			sql += whereClause;
		sql += "" ORDER BY Line"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getC_Invoice_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				MInvoiceLine il = new MInvoiceLine(getCtx(), rs, get_Trx());
				il.setInvoice(this);
				list.add(il);
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""getLines"", e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}

		//
		MInvoiceLine[] lines = new MInvoiceLine[list.size()];
		list.toArray(lines);
		return lines;
	}	//	getLines
"
org.compiere.model.MInvoice.getLines,MInvoice.java,"MInvoiceLine[] getLines (boolean requery)
	{
		if (m_lines == null || m_lines.length == 0 || requery)
			m_lines = getLines(null);
		return m_lines;
	}	//	getLines
"
org.compiere.model.MInvoice.getLines,MInvoice.java,"MInvoiceLine[] getLines()
	{
		return getLines(false);
	}	//	getLines
"
org.compiere.model.MInvoice.renumberLines,MInvoice.java,"void renumberLines (int step)
	{
		int number = step;
		MInvoiceLine[] lines = getLines(false);
		for (MInvoiceLine line : lines) {
			line.setLine(number);
			line.save();
			number += step;
		}
		m_lines = null;
	}	//	renumberLines
"
org.compiere.model.MInvoice.copyLinesFrom,MInvoice.java,"int copyLinesFrom (MInvoice otherInvoice, boolean counter, boolean setOrder)
	{
		if (isProcessed() || isPosted() || otherInvoice == null)
			return 0;
		MInvoiceLine[] fromLines = otherInvoice.getLines(false);
		int count = 0;
		for (MInvoiceLine fromLine : fromLines) {
			MInvoiceLine line = new MInvoiceLine (getCtx(), 0, get_Trx());
			if (counter)	//	header
				PO.copyValues (fromLine, line, getAD_Client_ID(), getAD_Org_ID());
			else
				PO.copyValues (fromLine, line, fromLine.getAD_Client_ID(), fromLine.getAD_Org_ID());
			line.setC_Invoice_ID(getC_Invoice_ID());
			line.setInvoice(this);
			line.set_ValueNoCheck (""C_InvoiceLine_ID"", I_ZERO);	// new
			//	Reset
			if (!setOrder)
				line.setC_OrderLine_ID(0);
			line.setRef_InvoiceLine_ID(0);
			line.setM_InOutLine_ID(0);
			line.setA_Asset_ID(0);
			line.setM_AttributeSetInstance_ID(0);
			line.setS_ResourceAssignment_ID(0);
			//	New Tax
			if (getC_BPartner_ID() != otherInvoice.getC_BPartner_ID())
				line.setTax();	//	recalculate
			//
			if (counter)
			{
				line.setRef_InvoiceLine_ID(fromLine.getC_InvoiceLine_ID());
				if (fromLine.getC_OrderLine_ID() != 0)
				{
					MOrderLine peer = new MOrderLine (getCtx(), fromLine.getC_OrderLine_ID(), get_Trx());
					if (peer.getRef_OrderLine_ID() != 0)
						line.setC_OrderLine_ID(peer.getRef_OrderLine_ID());
				}
				line.setM_InOutLine_ID(0);
				if (fromLine.getM_InOutLine_ID() != 0)
				{
					MInOutLine peer = new MInOutLine (getCtx(), fromLine.getM_InOutLine_ID(), get_Trx());
					if (peer.getRef_InOutLine_ID() != 0)
						line.setM_InOutLine_ID(peer.getRef_InOutLine_ID());
				}
			}
			//
			line.setProcessed(false);
			if (line.save(get_Trx()))
				count++;
			//	Cross Link
			if (counter)
			{
				fromLine.setRef_InvoiceLine_ID(line.getC_InvoiceLine_ID());
				fromLine.save(get_Trx());
			}
		}
		if (fromLines.length != count)
			log.log(Level.SEVERE, ""Line difference - From="" + fromLines.length + "" <> Saved="" + count);
		return count;
	}	//	copyLinesFrom
"
org.compiere.model.MInvoice.setReversal,MInvoice.java,"void setReversal(boolean reversal)
	{
		m_reversal = reversal;
	}	//	setReversal
"
org.compiere.model.MInvoice.isReversal,MInvoice.java,"boolean isReversal()
	{
		return m_reversal;
	}	//	isReversal
"
org.compiere.model.MInvoice.getTaxes,MInvoice.java,"MInvoiceTax[] getTaxes (boolean requery)
	{
		if (m_taxes != null && !requery)
			return m_taxes;
		String sql = ""SELECT * FROM C_InvoiceTax WHERE C_Invoice_ID=?"";
		ArrayList<MInvoiceTax> list = new ArrayList<MInvoiceTax>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getC_Invoice_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add(new MInvoiceTax(getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""getTaxes"", e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

		m_taxes = new MInvoiceTax[list.size ()];
		list.toArray (m_taxes);
		return m_taxes;
	}	//	getTaxes
"
org.compiere.model.MInvoice.addDescription,MInvoice.java,"void addDescription (String description)
	{
		String desc = getDescription();
		if (desc == null)
			setDescription(description);
		else
			setDescription(desc + "" | "" + description);
	}	//	addDescription
"
org.compiere.model.MInvoice.isCreditMemo,MInvoice.java,"boolean isCreditMemo()
	{
		MDocType dt = MDocType.get(getCtx(),
			getC_DocType_ID()==0 ? getC_DocTypeTarget_ID() : getC_DocType_ID());
		return MDocBaseType.DOCBASETYPE_APCreditMemo.equals(dt.getDocBaseType())
			|| MDocBaseType.DOCBASETYPE_ARCreditMemo.equals(dt.getDocBaseType());
	}	//	isCreditMemo
"
org.compiere.model.MInvoice.setProcessed,MInvoice.java,"void setProcessed (boolean processed)
	{
		super.setProcessed (processed);
		if (get_ID() == 0)
			return;
		String set = ""SET Processed='""
			+ (processed ? ""Y"" : ""N"")
			+ ""' WHERE C_Invoice_ID="" + getC_Invoice_ID();
		int noLine = DB.executeUpdate(""UPDATE C_InvoiceLine "" + set, get_Trx());
		int noTax = DB.executeUpdate(""UPDATE C_InvoiceTax "" + set, get_Trx());
		m_lines = null;
		m_taxes = null;
		log.fine(processed + "" - Lines="" + noLine + "", Tax="" + noTax);
	}	//	setProcessed
"
org.compiere.model.MInvoice.validatePaySchedule,MInvoice.java,"boolean validatePaySchedule()
	{
		MInvoicePaySchedule[] schedule = MInvoicePaySchedule.getInvoicePaySchedule
			(getCtx(), getC_Invoice_ID(), 0, get_Trx());
		log.fine(""#"" + schedule.length);
		if (schedule.length == 0)
		{
			setIsPayScheduleValid(false);
			return false;
		}
		//	Add up due amounts
		BigDecimal total = Env.ZERO;
		for (MInvoicePaySchedule element : schedule) {
			element.setParent(this);
			BigDecimal due = element.getDueAmt();
			if (due != null)
				total = total.add(due);
		}
		boolean valid = getGrandTotal().compareTo(total) == 0;
		setIsPayScheduleValid(valid);

		//	Update Schedule Lines
		for (MInvoicePaySchedule element : schedule) {
			if (element.isValid() != valid)
			{
				element.setIsValid(valid);
				element.save(get_Trx());
			}
		}
		return valid;
	}	//	validatePaySchedule
"
org.compiere.model.MInvoice.beforeSave,MInvoice.java,"boolean beforeSave (boolean newRecord)
	{
		//	No Partner Info - set Template
		if (getC_BPartner_ID() == 0)
			setBPartner(MBPartner.getTemplate(getCtx(), getAD_Client_ID()));
		if (getC_BPartner_Location_ID() == 0)
			setBPartner(new MBPartner(getCtx(), getC_BPartner_ID(), null));

		//	Price List
		if (getM_PriceList_ID() == 0)
		{
			int ii = getCtx().getContextAsInt( ""#M_PriceList_ID"");
			if (ii != 0)
				setM_PriceList_ID(ii);
			else
			{
				String sql = ""SELECT M_PriceList_ID FROM M_PriceList WHERE AD_Client_ID=? AND IsDefault='Y'"";
				ii = DB.getSQLValue (null, sql, getAD_Client_ID());
				if (ii != 0)
					setM_PriceList_ID (ii);
			}
		}

		boolean validPLV = false;
		// Verify that price list has a valid version for the date
		String sql1 = ""SELECT 1 ""
			+ ""FROM M_PriceList pl,M_PriceList_Version plv ""
			+ ""WHERE pl.M_PriceList_ID=plv.M_PriceList_ID""
			+ "" AND pl.M_PriceList_ID=? ""						//	1
			+ "" AND plv.ValidFrom <=? ""							//  2
			+ "" AND pl.IsActive='Y' ""
			+ "" AND plv.IsActive='Y' "";
		//	Use newest price list - may not be future
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql1, (Trx) null);
			pstmt.setInt(1, getM_PriceList_ID());
			pstmt.setTimestamp(2, getDateInvoiced());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				validPLV = true;
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql1, e);
			return false;
		}

		if(!validPLV)
		{
			log.saveError(""Error"", Msg.getMsg(getCtx(), ""PriceListVersionNotFound""));
			return false;
		}

		//	Currency
		if (getC_Currency_ID() == 0)
		{
			String sql = ""SELECT C_Currency_ID FROM M_PriceList WHERE M_PriceList_ID=?"";
			int ii = DB.getSQLValue (null, sql, getM_PriceList_ID());
			if (ii != 0)
				setC_Currency_ID (ii);
			else
				setC_Currency_ID(getCtx().getContextAsInt( ""#C_Currency_ID""));
		}

		//	Sales Rep
		if (getSalesRep_ID() == 0)
		{
			int ii = getCtx().getContextAsInt( ""#SalesRep_ID"");
			if (ii != 0)
				setSalesRep_ID (ii);
		}

		//	Document Type
		if (getC_DocType_ID() == 0)
			setC_DocType_ID (0);	//	make sure it's set to 0
		if (getC_DocTypeTarget_ID() == 0)
			setC_DocTypeTarget_ID(isSOTrx() ? MDocBaseType.DOCBASETYPE_ARInvoice : MDocBaseType.DOCBASETYPE_APInvoice);

		//	Payment Term
		if (getC_PaymentTerm_ID() == 0)
		{
			int ii = getCtx().getContextAsInt( ""#C_PaymentTerm_ID"");
			if (ii != 0)
				setC_PaymentTerm_ID (ii);
			else
			{
				String sql = ""SELECT C_PaymentTerm_ID FROM C_PaymentTerm WHERE AD_Client_ID=? AND IsDefault='Y'"";
				ii = DB.getSQLValue(null, sql, getAD_Client_ID());
				if (ii != 0)
					setC_PaymentTerm_ID (ii);
			}
		}

		//	BPartner Active
		if (newRecord || is_ValueChanged(""C_BPartner_ID""))
		{
			MBPartner bp = MBPartner.get(getCtx(), getC_BPartner_ID());
			if (!bp.isActive())
			{
				log.saveWarning(""NotActive"", Msg.getMsg(getCtx(), ""C_BPartner_ID""));
				return false;
			}
		}

		/*	Duplicate Document Number (AP)		*/
		String documentNo = getDocumentNo();
		if (newRecord
			&& !Util.isEmpty(documentNo) && !documentNo.startsWith(""<""))
		{
			boolean duplicate = false;
			String sql2 = ""SELECT 1 FROM C_Invoice ""
				+ ""WHERE C_BPartner_ID=?	""
				+ "" AND (C_DocTypeTarget_ID=? OR C_DocType_ID=?)""
				+ "" AND DocumentNo=?"";
			try
			{
				PreparedStatement pstmt = DB.prepareStatement(sql2, (Trx) null);
				pstmt.setInt(1, getC_BPartner_ID());
				pstmt.setInt(2, getC_DocTypeTarget_ID());
				pstmt.setInt(3, getC_DocTypeTarget_ID());
				pstmt.setString(4, documentNo);
				ResultSet rs = pstmt.executeQuery();
				if (rs.next())
					duplicate = true;
				rs.close();
				pstmt.close();
			}
			catch (SQLException e)
			{
				log.log(Level.SEVERE, sql2, e);
			}
			if (duplicate)
			{
				log.saveError(""SaveErrorNotUnique"", Msg.getMsg(getCtx(), ""DocumentNo""));
				return false;
			}
		}
		/* */
		return true;
	}	//	beforeSave
"
org.compiere.model.MInvoice.beforeDelete,MInvoice.java,"boolean beforeDelete ()
	{
		if (getC_Order_ID() != 0)
		{
			log.saveError(""Error"", Msg.getMsg(getCtx(), ""CannotDelete""));
			return false;
		}
		return true;
	}	//	beforeDelete
"
org.compiere.model.MInvoice.toString,MInvoice.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MInvoice["")
			.append(get_ID()).append(""-"").append(getDocumentNo())
			.append("",GrandTotal="").append(getGrandTotal());
		if (m_lines != null)
			sb.append("" (#"").append(m_lines.length).append("")"");
		sb.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MInvoice.getDocumentInfo,MInvoice.java,"String getDocumentInfo()
	{
		MDocType dt = MDocType.get(getCtx(), getC_DocType_ID());
		return dt.getName() + "" "" + getDocumentNo();
	}	//	getDocumentInfo
"
org.compiere.model.MInvoice.afterSave,MInvoice.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!success || newRecord)
			return success;

		if (is_ValueChanged(""AD_Org_ID""))
		{
			String sql = ""UPDATE C_InvoiceLine ol""
				+ "" SET AD_Org_ID =""
					+ ""(SELECT AD_Org_ID""
					+ "" FROM C_Invoice o WHERE ol.C_Invoice_ID=o.C_Invoice_ID) ""
				+ ""WHERE C_Invoice_ID="" + getC_Invoice_ID();
			int no = DB.executeUpdate(sql, get_Trx());
			log.fine(""Lines -> #"" + no);
		}
		return true;
	}	//	afterSave
"
org.compiere.model.MInvoice.setM_PriceList_ID,MInvoice.java,"void setM_PriceList_ID (int M_PriceList_ID)
	{
		String sql = ""SELECT M_PriceList_ID, C_Currency_ID ""
			+ ""FROM M_PriceList WHERE M_PriceList_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, M_PriceList_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				super.setM_PriceList_ID (rs.getInt(1));
				setC_Currency_ID (rs.getInt(2));
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
	}	//	setM_PriceList_ID
"
org.compiere.model.MInvoice.getAllocatedAmt,MInvoice.java,"BigDecimal getAllocatedAmt ()
	{
		BigDecimal retValue = null;
		String sql = ""SELECT SUM(currencyConvert(al.Amount+al.DiscountAmt+al.WriteOffAmt,""
				+ ""ah.C_Currency_ID, i.C_Currency_ID,ah.DateTrx,COALESCE(i.C_ConversionType_ID,0), al.AD_Client_ID,al.AD_Org_ID)) "" //jz
			+ ""FROM C_AllocationLine al""
			+ "" INNER JOIN C_AllocationHdr ah ON (al.C_AllocationHdr_ID=ah.C_AllocationHdr_ID)""
			+ "" INNER JOIN C_Invoice i ON (al.C_Invoice_ID=i.C_Invoice_ID) ""
			+ ""WHERE al.C_Invoice_ID=?""
			+ "" AND ah.IsActive='Y' AND al.IsActive='Y'"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getC_Invoice_ID());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				retValue = rs.getBigDecimal(1);
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
	//	log.fine(""getAllocatedAmt - "" + retValue);
		//	? ROUND(NVL(v_AllocatedAmt,0), 2);
		return retValue;
	}	//	getAllocatedAmt
"
org.compiere.model.MInvoice.testAllocation,MInvoice.java,"boolean testAllocation()
	{
		BigDecimal alloc = getAllocatedAmt();	//	absolute
		if (alloc == null)
			alloc = Env.ZERO;
		BigDecimal total = getGrandTotal();
		if (!isSOTrx())
			total = total.negate();
		if (isCreditMemo())
			total = total.negate();
		boolean test = total.compareTo(alloc) == 0;
		boolean change = test != isPaid();
		if (change)
			setIsPaid(test);
		log.fine(""Paid="" + test
			+ "" ("" + alloc + ""="" + total + "")"");
		return change;
	}	//	testAllocation
"
org.compiere.model.MInvoice.setIsPaid,MInvoice.java,"void setIsPaid (Ctx ctx, int C_BPartner_ID, Trx trx)
	{
		int counter = 0;
		String sql = ""SELECT * FROM C_Invoice ""
			+ ""WHERE IsPaid='N' AND DocStatus IN ('CO','CL')"";
		if (C_BPartner_ID > 1)
			sql += "" AND C_BPartner_ID=?"";
		else
			sql += "" AND AD_Client_ID="" + ctx.getAD_Client_ID();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			if (C_BPartner_ID > 1)
				pstmt.setInt (1, C_BPartner_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MInvoice invoice = new MInvoice(ctx, rs, trx);
				if (invoice.testAllocation())
					if (invoice.save())
						counter++;
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		s_log.config(""#"" + counter);
		/**/
	}	//	setIsPaid
"
org.compiere.model.MInvoice.getOpenAmt,MInvoice.java,"BigDecimal getOpenAmt ()
	{
		return getOpenAmt (true, null);
	}	//	getOpenAmt
"
org.compiere.model.MInvoice.getOpenAmt,MInvoice.java,"BigDecimal getOpenAmt (boolean creditMemoAdjusted, Timestamp paymentDate)
	{
		/**	Open Amount				*/

		if (isPaid())
			return Env.ZERO;

		BigDecimal openAmt = getGrandTotal();
		if (paymentDate != null)
		{
			//	Payment Discount
			//	Payment Schedule
		}
		BigDecimal allocated = getAllocatedAmt();
		if (allocated != null)
		{
			if (!isSOTrx())
				allocated = allocated.negate();
			openAmt = openAmt.subtract(allocated);
		}

		//
		if (!creditMemoAdjusted)
			return openAmt;
		if (isCreditMemo())
			return openAmt.negate();
		return openAmt;
	}	//	getOpenAmt
"
org.compiere.model.MInvoice.getDocStatusName,MInvoice.java,"String getDocStatusName()
	{
		return MRefList.getListName(getCtx(), 131, getDocStatus());
	}	//	getDocStatusName
"
org.compiere.model.MInvoice.createPDF,MInvoice.java,"File createPDF ()
	{
		try
		{
			File temp = File.createTempFile(get_TableName()+get_ID()+""_"", "".pdf"");
			return createPDF (temp);
		}
		catch (Exception e)
		{
			log.severe(""Could not create PDF - "" + e.getMessage());
		}
		return null;
	}	//	getPDF
"
org.compiere.model.MInvoice.createPDF,MInvoice.java,"File createPDF (File file)
	{
		ReportEngine re = ReportEngine.get (getCtx(), ReportEngine.INVOICE, getC_Invoice_ID());
		if (re == null)
			return null;
		return re.getPDF(file);
	}	//	createPDF
"
org.compiere.model.MInvoice.getPDFFileName,MInvoice.java,"String getPDFFileName (String documentDir)
	{
		return getPDFFileName (documentDir, getC_Invoice_ID());
	}	//	getPDFFileName
"
org.compiere.model.MInvoice.getCurrencyISO,MInvoice.java,"String getCurrencyISO()
	{
		return MCurrency.getISO_Code (getCtx(), getC_Currency_ID());
	}	//	getCurrencyISO
"
org.compiere.model.MInvoice.getPrecision,MInvoice.java,"int getPrecision()
	{
		return MCurrency.getStdPrecision(getCtx(), getC_Currency_ID());
	}	//	getPrecision
"
org.compiere.model.MInvoice.processIt,MInvoice.java,"boolean processIt (String processAction)
	{
		m_processMsg = null;
		DocumentEngine engine = new DocumentEngine (this, getDocStatus());
		return engine.processIt (processAction, getDocAction());
	}	//	process
"
org.compiere.model.MInvoice.unlockIt,MInvoice.java,"boolean unlockIt()
	{
		log.info(""unlockIt - "" + toString());
		setProcessing(false);
		return true;
	}	//	unlockIt
"
org.compiere.model.MInvoice.invalidateIt,MInvoice.java,"boolean invalidateIt()
	{
		log.info(""invalidateIt - "" + toString());
		setDocAction(DOCACTION_Prepare);
		return true;
	}	//	invalidateIt
"
org.compiere.model.MInvoice.prepareIt,MInvoice.java,"String prepareIt()
	{
		log.info(toString());
		m_processMsg = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_BEFORE_PREPARE);
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;
		MDocType dt = MDocType.get(getCtx(), getC_DocTypeTarget_ID());
		setIsReturnTrx(dt.isReturnTrx());
		setIsSOTrx(dt.isSOTrx());

		//	Lines
		MInvoiceLine[] lines = getLines(true);
		if (lines.length == 0)
		{
			m_processMsg = ""@NoLines@"";
			return DocActionConstants.STATUS_Invalid;
		}
		//	Std Period open?
		m_processMsg = MPeriod.isOpen(this, lines, getDateAcct(), dt.getDocBaseType());
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;
		//	No Cash Book
		if (PAYMENTRULE_Cash.equals(getPaymentRule())
			&& MCashBook.get(getCtx(), getAD_Org_ID(), getC_Currency_ID()) == null)
		{
			m_processMsg = ""@NoCashBook@"";
			return DocActionConstants.STATUS_Invalid;
		}

		//	Convert/Check DocType
		if (getC_DocType_ID() != getC_DocTypeTarget_ID())
			setC_DocType_ID(getC_DocTypeTarget_ID());
		if (getC_DocType_ID() == 0)
		{
			m_processMsg = ""No Document Type"";
			return DocActionConstants.STATUS_Invalid;
		}

		explodeBOM();
		if (!calculateTaxTotal())	//	setTotals
		{
			m_processMsg = ""Error calculating Tax"";
			return DocActionConstants.STATUS_Invalid;
		}

		createPaySchedule();

		//	Credit Status
		if (isSOTrx() && !isReversal())
		{
			MBPartner bp = new MBPartner (getCtx(), getC_BPartner_ID(), null);
			if (X_C_BPartner.SOCREDITSTATUS_CreditStop.equals(bp.getSOCreditStatus()))
			{
				m_processMsg = ""@BPartnerCreditStop@ - @TotalOpenBalance@=""
					+ bp.getTotalOpenBalance()
					+ "", @SO_CreditLimit@="" + bp.getSO_CreditLimit();
				return DocActionConstants.STATUS_Invalid;
			}
		}

		//	Landed Costs
		if (!isSOTrx())
		{
			for (MInvoiceLine line : lines)
			{
				String error = line.allocateLandedCosts();
				if (error != null && error.length() > 0)
				{
					m_processMsg = error;
					return DocActionConstants.STATUS_Invalid;
				}
			}
		}

		//	Add up Amounts
		m_justPrepared = true;
		if (!DOCACTION_Complete.equals(getDocAction()))
			setDocAction(DOCACTION_Complete);
		return DocActionConstants.STATUS_InProgress;
	}	//	prepareIt
"
org.compiere.model.MInvoice.explodeBOM,MInvoice.java,"void explodeBOM ()
	{
		String where = ""AND IsActive='Y' AND EXISTS ""
			+ ""(SELECT * FROM M_Product p WHERE C_InvoiceLine.M_Product_ID=p.M_Product_ID""
			+ "" AND	p.IsBOM='Y' AND p.IsVerified='Y' AND p.IsStocked='N')"";
		//
		String sql = ""SELECT COUNT(*) FROM C_InvoiceLine ""
			+ ""WHERE C_Invoice_ID=? "" + where;
		int count = DB.getSQLValue(get_Trx(), sql, getC_Invoice_ID());
		while (count != 0)
		{
			renumberLines (1000);		//	max 999 bom items

			//	Order Lines with non-stocked BOMs
			MInvoiceLine[] lines = getLines (where);
			for (MInvoiceLine line : lines) {
				MProduct product = MProduct.get (getCtx(), line.getM_Product_ID());
				log.fine(product.getName());
				//	New Lines
				int lineNo = line.getLine ();
				MBOMProduct[] boms = MBOMProduct.getBOMLines (product);
				for (MBOMProduct bom : boms) {
					MInvoiceLine newLine = new MInvoiceLine (this);
					newLine.setLine (++lineNo);
					newLine.setM_Product_ID (bom.getComponent().getM_Product_ID(),
						bom.getComponent().getC_UOM_ID());
					newLine.setQty (line.getQtyInvoiced().multiply(
						bom.getBOMQty ()));		//	Invoiced/Entered
					if (bom.getDescription () != null)
						newLine.setDescription (bom.getDescription ());
					//
					newLine.setPrice ();
					newLine.save (get_Trx());
				}
				//	Convert into Comment Line
				line.setM_Product_ID (0);
				line.setM_AttributeSetInstance_ID (0);
				line.setPriceEntered (Env.ZERO);
				line.setPriceActual (Env.ZERO);
				line.setPriceLimit (Env.ZERO);
				line.setPriceList (Env.ZERO);
				line.setLineNetAmt (Env.ZERO);
				//
				String description = product.getName ();
				if (product.getDescription () != null)
					description += "" "" + product.getDescription ();
				if (line.getDescription () != null)
					description += "" "" + line.getDescription ();
				line.setDescription (description);
				line.save (get_Trx());
			} //	for all lines with BOM

			m_lines = null;
			count = DB.getSQLValue (get_Trx(), sql, getC_Invoice_ID ());
			renumberLines (10);
		}	//	while count != 0
	}	//	explodeBOM
"
org.compiere.model.MInvoice.calculateTaxTotal,MInvoice.java,"boolean calculateTaxTotal()
	{
		log.fine("""");
		//	Delete Taxes
		DB.executeUpdate(""DELETE FROM C_InvoiceTax WHERE C_Invoice_ID="" + getC_Invoice_ID(), get_Trx());
		m_taxes = null;

		//	Lines
		BigDecimal totalLines = Env.ZERO;
		ArrayList<Integer> taxList = new ArrayList<Integer>();
		MInvoiceLine[] lines = getLines(false);
		for (MInvoiceLine line : lines)
		{
			/**	Sync ownership for SO
			if (isSOTrx() && line.getAD_Org_ID() != getAD_Org_ID())
			{
				line.setAD_Org_ID(getAD_Org_ID());
				line.save();
			}	**/
			Integer taxID = Integer.valueOf(line.getC_Tax_ID());
			if (!taxList.contains(taxID))
			{
				MInvoiceTax iTax = MInvoiceTax.get (line, getPrecision(),
					false, get_Trx());	//	current Tax
				if (iTax != null)
				{
					iTax.setIsTaxIncluded(isTaxIncluded());
					if (!iTax.calculateTaxFromLines())
						return false;
					if (!iTax.save())
						return false;
					taxList.add(taxID);
				}
			}
			totalLines = totalLines.add(line.getLineNetAmt());
		}

		//	Taxes
		BigDecimal grandTotal = totalLines;
		MInvoiceTax[] taxes = getTaxes(true);
		for (MInvoiceTax iTax : taxes)
		{
			MTax tax = iTax.getTax();
			if (tax.isSummary())
			{
				MTax[] cTaxes = tax.getChildTaxes(false);	//	Multiple taxes
				for (MTax cTax : cTaxes)
				{
					BigDecimal taxAmt = cTax.calculateTax(iTax.getTaxBaseAmt(), isTaxIncluded(), getPrecision());
					//
					MInvoiceTax newITax = new MInvoiceTax(getCtx(), 0, get_Trx());
					newITax.setClientOrg(this);
					newITax.setC_Invoice_ID(getC_Invoice_ID());
					newITax.setC_Tax_ID(cTax.getC_Tax_ID());
					newITax.setPrecision(getPrecision());
					newITax.setIsTaxIncluded(isTaxIncluded());
					newITax.setTaxBaseAmt(iTax.getTaxBaseAmt());
					newITax.setTaxAmt(taxAmt);
					if (!newITax.save(get_Trx()))
						return false;
					//
					if (!isTaxIncluded())
						grandTotal = grandTotal.add(taxAmt);
				}
				if (!iTax.delete(true, get_Trx()))
					return false;
			}
			else
			{
				if (!isTaxIncluded())
					grandTotal = grandTotal.add(iTax.getTaxAmt());
			}
		}
		//
		setTotalLines(totalLines);
		setGrandTotal(grandTotal);
		return true;
	}	//	calculateTaxTotal
"
org.compiere.model.MInvoice.createPaySchedule,MInvoice.java,"boolean createPaySchedule()
	{
		if (getC_PaymentTerm_ID() == 0)
			return false;
		MPaymentTerm pt = new MPaymentTerm(getCtx(), getC_PaymentTerm_ID(), null);
		log.fine(pt.toString());
		return pt.apply(this);		//	calls validate pay schedule
	}	//	createPaySchedule
"
org.compiere.model.MInvoice.approveIt,MInvoice.java,"boolean  approveIt()
	{
		log.info(toString());
		setIsApproved(true);
		return true;
	}	//	approveIt
"
org.compiere.model.MInvoice.rejectIt,MInvoice.java,"boolean rejectIt()
	{
		log.info(toString());
		setIsApproved(false);
		return true;
	}	//	rejectIt
"
org.compiere.model.MInvoice.completeIt,MInvoice.java,"String completeIt()
	{
		//	Re-Check
		if (!m_justPrepared)
		{
			String status = prepareIt();
			if (!DocActionConstants.STATUS_InProgress.equals(status))
				return status;
		}
		//	Implicit Approval
		if (!isApproved())
			approveIt();
		log.info(toString());
		StringBuffer info = new StringBuffer();

		//	Create Cash
		if (PAYMENTRULE_Cash.equals(getPaymentRule()))
		{
			MCash cash = MCash.get (getCtx(), getAD_Org_ID(),
				getDateInvoiced(), getC_Currency_ID(), get_Trx());
			if (cash == null || cash.get_ID() == 0)
			{
				m_processMsg = ""@NoCashBook@"";
				return DocActionConstants.STATUS_Invalid;
			}
			MCashLine cl = new MCashLine (cash);
			cl.setInvoice(this);
			if (!cl.save(get_Trx()))
			{
				m_processMsg = ""Could not save Cash Journal Line"";
				return DocActionConstants.STATUS_Invalid;
			}
			info.append(""@C_Cash_ID@: "" + cash.getName() +  "" #"" + cl.getLine());
			setC_CashLine_ID(cl.getC_CashLine_ID());
		}	//	CashBook

		//	Update Order & Match
		int matchInv = 0;
		int matchPO = 0;
		MInvoiceLine[] lines = getLines(m_justPrepared);
		for (MInvoiceLine line : lines)
		{
			//	Update Order Line
			if (line.getC_OrderLine_ID() != 0)
			{
				if (isSOTrx()
					|| line.getM_Product_ID() == 0)
				{
					MOrderLine ol = line.getOrderLine();
					if (line.getQtyInvoiced() != null)
						ol.setQtyInvoiced(ol.getQtyInvoiced().add(line.getQtyInvoiced()));
					if (!ol.save(get_Trx()))
					{
						m_processMsg = ""Could not update Order Line"";
						return DocActionConstants.STATUS_Invalid;
					}
				}
				//	Order Invoiced Qty updated via Matching Inv-PO
				else if (!isSOTrx()
					&& line.getM_Product_ID() != 0
					&& !isReversal())
				{
					//	MatchPO is created also from MInOut when Invoice exists before Shipment
					BigDecimal matchQty = line.getQtyInvoiced();
					MMatchPO po = MMatchPO.create (line, null,
						getDateInvoiced(), matchQty);
					if (!po.save(get_Trx()))
					{
						m_processMsg = ""Could not create PO Matching"";
						return DocActionConstants.STATUS_Invalid;
					}
					else
						matchPO++;
				}
			}

			//	Matching - Inv-Shipment
			if (!isSOTrx()
				&& line.getM_InOutLine_ID() != 0
				&& line.getM_Product_ID() != 0
				&& !isReversal())
			{
				MInOutLine receiptLine = new MInOutLine (getCtx(),line.getM_InOutLine_ID(), get_Trx());
				BigDecimal matchQty = line.getQtyInvoiced();

				if (receiptLine.getMovementQty().compareTo(matchQty) < 0)
					matchQty = receiptLine.getMovementQty();

				MMatchInv inv = new MMatchInv(line, getDateInvoiced(), matchQty);
				if (!inv.save(get_Trx()))
				{
					m_processMsg = ""Could not create Invoice Matching"";
					return DocActionConstants.STATUS_Invalid;
				}
				else
					matchInv++;
			}

			//	Lead/Request
			line.createLeadRequest(this);
		}	//	for all lines
		if (matchInv > 0)
			info.append("" @M_MatchInv_ID@#"").append(matchInv).append("" "");
		if (matchPO > 0)
			info.append("" @M_MatchPO_ID@#"").append(matchPO).append("" "");


		//	Update BP Statistics
		MBPartner bp = new MBPartner (getCtx(), getC_BPartner_ID(), get_Trx());
		//	Update total revenue and balance / credit limit (reversed on AllocationLine.processIt)
		BigDecimal invAmt = MConversionRate.convertBase(getCtx(), getGrandTotal(true),	//	CM adjusted
			getC_Currency_ID(), getDateAcct(), getC_ConversionType_ID(), getAD_Client_ID(), getAD_Org_ID());
		if (invAmt == null)
		{
			m_processMsg = ""Could not convert C_Currency_ID="" + getC_Currency_ID()
				+ "" to base C_Currency_ID="" + MClient.get(getCtx()).getC_Currency_ID();
			return DocActionConstants.STATUS_Invalid;
		}
		//	Total Balance
		BigDecimal newBalance = bp.getTotalOpenBalance(false);
		if (newBalance == null)
			newBalance = Env.ZERO;
		if (isSOTrx())
		{
			newBalance = newBalance.add(invAmt);
			//
			if (bp.getFirstSale() == null)
				bp.setFirstSale(getDateInvoiced());
			BigDecimal newLifeAmt = bp.getActualLifeTimeValue();
			if (newLifeAmt == null)
				newLifeAmt = invAmt;
			else
				newLifeAmt = newLifeAmt.add(invAmt);
			BigDecimal newCreditAmt = bp.getSO_CreditUsed();
			if (newCreditAmt == null)
				newCreditAmt = invAmt;
			else
				newCreditAmt = newCreditAmt.add(invAmt);
			//
			log.fine(""GrandTotal="" + getGrandTotal(true) + ""("" + invAmt
				+ "") BP Life="" + bp.getActualLifeTimeValue() + ""->"" + newLifeAmt
				+ "", Credit="" + bp.getSO_CreditUsed() + ""->"" + newCreditAmt
				+ "", Balance="" + bp.getTotalOpenBalance(false) + "" -> "" + newBalance);
			bp.setActualLifeTimeValue(newLifeAmt);
			bp.setSO_CreditUsed(newCreditAmt);
		}	//	SO
		else
		{
			newBalance = newBalance.subtract(invAmt);
			log.fine(""GrandTotal="" + getGrandTotal(true) + ""("" + invAmt
				+ "") Balance="" + bp.getTotalOpenBalance(false) + "" -> "" + newBalance);
		}
		bp.setTotalOpenBalance(newBalance);
		bp.setSOCreditStatus();
		if (!bp.save(get_Trx()))
		{
			m_processMsg = ""Could not update Business Partner"";
			return DocActionConstants.STATUS_Invalid;
		}

		//	User - Last Result/Contact
		if (getAD_User_ID() != 0)
		{
			MUser user = new MUser (getCtx(), getAD_User_ID(), get_Trx());
			user.setLastContact(new Timestamp(System.currentTimeMillis()));
			user.setLastResult(Msg.translate(getCtx(), ""C_Invoice_ID"") + "": "" + getDocumentNo());
			if (!user.save(get_Trx()))
			{
				m_processMsg = ""Could not update Business Partner User"";
				return DocActionConstants.STATUS_Invalid;
			}
		}	//	user

		//	Update Project
		if (isSOTrx() && getC_Project_ID() != 0)
		{
			MProject project = new MProject (getCtx(), getC_Project_ID(), get_Trx());
			BigDecimal amt = getGrandTotal(true);
			int C_CurrencyTo_ID = project.getC_Currency_ID();
			if (C_CurrencyTo_ID != getC_Currency_ID())
				amt = MConversionRate.convert(getCtx(), amt, getC_Currency_ID(), C_CurrencyTo_ID,
					getDateAcct(), 0, getAD_Client_ID(), getAD_Org_ID());
			if (amt == null)
			{
				m_processMsg = ""Could not convert C_Currency_ID="" + getC_Currency_ID()
					+ "" to Project C_Currency_ID="" + C_CurrencyTo_ID;
				return DocActionConstants.STATUS_Invalid;
			}
			BigDecimal newAmt = project.getInvoicedAmt();
			if (newAmt == null)
				newAmt = amt;
			else
				newAmt = newAmt.add(amt);
			log.fine(""GrandTotal="" + getGrandTotal(true) + ""("" + amt
				+ "") Project "" + project.getName()
				+ "" - Invoiced="" + project.getInvoicedAmt() + ""->"" + newAmt);
			project.setInvoicedAmt(newAmt);
			if (!project.save(get_Trx()))
			{
				m_processMsg = ""Could not update Project"";
				return DocActionConstants.STATUS_Invalid;
			}
		}	//	project

		//	User Validation
		String valid = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_AFTER_COMPLETE);
		if (valid != null)
		{
			m_processMsg = valid;
			return DocActionConstants.STATUS_Invalid;
		}

		//	Counter Documents
		MInvoice counter = createCounterDoc();
		if (counter != null)
			info.append("" - @CounterDoc@: @C_Invoice_ID@="").append(counter.getDocumentNo());

		m_processMsg = info.toString().trim();
		setProcessed(true);
		setDocAction(DOCACTION_Close);
		return DocActionConstants.STATUS_Completed;
	}	//	completeIt
"
org.compiere.model.MInvoice.createCounterDoc,MInvoice.java,"MInvoice createCounterDoc()
	{
		//	Is this a counter doc ?
		if (getRef_Invoice_ID() != 0)
			return null;

		//	Org Must be linked to BPartner
		MOrg org = MOrg.get(getCtx(), getAD_Org_ID());
		int counterC_BPartner_ID = org.getLinkedC_BPartner_ID(get_Trx()); //jz
		if (counterC_BPartner_ID == 0)
			return null;
		//	Business Partner needs to be linked to Org
		MBPartner bp = new MBPartner (getCtx(), getC_BPartner_ID(), null);
		int counterAD_Org_ID = bp.getAD_OrgBP_ID_Int();
		if (counterAD_Org_ID == 0)
			return null;

		MBPartner counterBP = new MBPartner (getCtx(), counterC_BPartner_ID, null);
	//	MOrgInfo counterOrgInfo = MOrgInfo.get(getCtx(), counterAD_Org_ID, null);
		log.info(""Counter BP="" + counterBP.getName());

		//	Document Type
		int C_DocTypeTarget_ID = 0;
		MDocTypeCounter counterDT = MDocTypeCounter.getCounterDocType(getCtx(), getC_DocType_ID());
		if (counterDT != null)
		{
			log.fine(counterDT.toString());
			if (!counterDT.isCreateCounter() || !counterDT.isValid())
				return null;
			C_DocTypeTarget_ID = counterDT.getCounter_C_DocType_ID();
		}
		else	//	indirect
		{
			C_DocTypeTarget_ID = MDocTypeCounter.getCounterDocType_ID(getCtx(), getC_DocType_ID());
			log.fine(""Indirect C_DocTypeTarget_ID="" + C_DocTypeTarget_ID);
			if (C_DocTypeTarget_ID <= 0)
				return null;
		}

		//	Deep Copy
		MInvoice counter = copyFrom(this, getDateInvoiced(),
			C_DocTypeTarget_ID, true, get_Trx(), true);
		MDocType dt = MDocType.get(getCtx(), C_DocTypeTarget_ID);
		if (!dt.isDocNoControlled())
			counter.setDocumentNo(getDocumentNo());		//	copy if manual
		//
		counter.setAD_Org_ID(counterAD_Org_ID);
	//	counter.setM_Warehouse_ID(counterOrgInfo.getM_Warehouse_ID());
		//
		counter.setBPartner(counterBP);
		//	Refernces (Should not be required
		counter.setSalesRep_ID(getSalesRep_ID());
		counter.save(get_Trx());

		//	Update copied lines
		MInvoiceLine[] counterLines = counter.getLines(true);
		for (MInvoiceLine counterLine : counterLines) {
			counterLine.setClientOrg(counter);
			counterLine.setInvoice(counter);	//	copies header values (BP, etc.)
			counterLine.setPrice();
			counterLine.setTax();
			//
			counterLine.save(get_Trx());
		}

		log.fine(counter.toString());

		//	Document Action
		if (counterDT != null)
		{
			if (counterDT.getDocAction() != null)
			{
				counter.setDocAction(counterDT.getDocAction());
				counter.processIt(counterDT.getDocAction());
				counter.setProcessing(false);
				counter.save(get_Trx());
			}
		}
		return counter;
	}	//	createCounterDoc
"
org.compiere.model.MInvoice.voidIt,MInvoice.java,"boolean voidIt()
	{
		log.info(toString());
		if (DOCSTATUS_Closed.equals(getDocStatus())
			|| DOCSTATUS_Reversed.equals(getDocStatus())
			|| DOCSTATUS_Voided.equals(getDocStatus()))
		{
			m_processMsg = ""Document Closed: "" + getDocStatus();
			setDocAction(DOCACTION_None);
			return false;
		}

		//	Not Processed
		if (DOCSTATUS_Drafted.equals(getDocStatus())
			|| DOCSTATUS_Invalid.equals(getDocStatus())
			|| DOCSTATUS_InProgress.equals(getDocStatus())
			|| DOCSTATUS_Approved.equals(getDocStatus())
			|| DOCSTATUS_NotApproved.equals(getDocStatus()) )
		{
			//	Set lines to 0
			MInvoiceLine[] lines = getLines(false);
			for (MInvoiceLine line : lines) {
				BigDecimal old = line.getQtyInvoiced();
				if (old.compareTo(Env.ZERO) != 0)
				{
					line.setQty(Env.ZERO);
					line.setTaxAmt(Env.ZERO);
					line.setLineNetAmt(Env.ZERO);
					line.setLineTotalAmt(Env.ZERO);
					line.addDescription(Msg.getMsg(getCtx(), ""Voided"") + "" ("" + old + "")"");
					//	Unlink Shipment
					if (line.getM_InOutLine_ID() != 0)
					{
						MInOutLine ioLine = new MInOutLine(getCtx(), line.getM_InOutLine_ID(), get_Trx());
						ioLine.setIsInvoiced(false);
						ioLine.save(get_Trx());
						line.setM_InOutLine_ID(0);
					}
					line.save(get_Trx());
				}
			}
			addDescription(Msg.getMsg(getCtx(), ""Voided""));
			setIsPaid(true);
			setC_Payment_ID(0);
		}
		else
		{
			return reverseCorrectIt();
		}

		setProcessed(true);
		setDocAction(DOCACTION_None);
		return true;
	}	//	voidIt
"
org.compiere.model.MInvoice.closeIt,MInvoice.java,"boolean closeIt()
	{
		log.info(toString());
		setProcessed(true);
		setDocAction(DOCACTION_None);
		return true;
	}	//	closeIt
"
org.compiere.model.MInvoice.reverseCorrectIt,MInvoice.java,"boolean reverseCorrectIt()
	{
		log.info(toString());
		MDocType dt = MDocType.get(getCtx(), getC_DocType_ID());
		//
		MInvoiceLine[] iLines = getLines(false);
		m_processMsg = MPeriod.isOpen(this, iLines, getDateAcct(), dt.getDocBaseType());
		if (m_processMsg != null)
			return false;

		//	Don't touch allocation for cash as that is handled in CashJournal
		boolean isCash = PAYMENTRULE_Cash.equals(getPaymentRule());

		if (!isCash)
		{
			MAllocationHdr[] allocations = MAllocationHdr.getOfInvoice(getCtx(),
				getC_Invoice_ID(), get_Trx());
			for (MAllocationHdr element : allocations) {
				element.setDocAction(DocActionConstants.ACTION_Reverse_Correct);
				element.reverseCorrectIt();
				element.save(get_Trx());
			}
		}
		//	Reverse/Delete Matching
		if (!isSOTrx())
		{
			MMatchInv[] mInv = MMatchInv.getInvoice(getCtx(), getC_Invoice_ID(), get_Trx());
			for (MMatchInv element : mInv)
				element.delete(true);
			MMatchPO[] mPO = MMatchPO.getInvoice(getCtx(), getC_Invoice_ID(), get_Trx());
			for (MMatchPO element : mPO) {
				if (element.getM_InOutLine_ID() == 0)
					element.delete(true);
				else
				{
					element.setC_InvoiceLine_ID(null);
					element.save(get_Trx());
				}
			}
		}
		//
		load(get_Trx());	//	reload allocation reversal info

		//	Deep Copy
		MInvoice reversal = copyFrom (this, getDateInvoiced(),
			getC_DocType_ID(), false, get_Trx(), true);
		if (reversal == null)
		{
			m_processMsg = ""Could not create Invoice Reversal"";
			return false;
		}
		reversal.setReversal(true);

		//	Reverse Line Qty
		MInvoiceLine[] rLines = reversal.getLines(false);
		for (MInvoiceLine rLine : rLines) {
			rLine.setQtyEntered(rLine.getQtyEntered().negate());
			rLine.setQtyInvoiced(rLine.getQtyInvoiced().negate());
			rLine.setLineNetAmt(rLine.getLineNetAmt().negate());
			if (rLine.getTaxAmt() != null && rLine.getTaxAmt().compareTo(Env.ZERO) != 0)
				rLine.setTaxAmt(rLine.getTaxAmt().negate());
			if (rLine.getLineTotalAmt() != null && rLine.getLineTotalAmt().compareTo(Env.ZERO) != 0)
				rLine.setLineTotalAmt(rLine.getLineTotalAmt().negate());
			if (!rLine.save(get_Trx()))
			{
				m_processMsg = ""Could not correct Invoice Reversal Line"";
				return false;
			}
		}
		reversal.setC_Order_ID(getC_Order_ID());
		reversal.addDescription(""{->"" + getDocumentNo() + "")"");
		//
		if (!reversal.processIt(DocActionConstants.ACTION_Complete))
		{
			m_processMsg = ""Reversal ERROR: "" + reversal.getProcessMsg();
			return false;
		}
		reversal.setC_Payment_ID(0);
		reversal.setIsPaid(true);
		reversal.closeIt();
		reversal.setProcessing (false);
		reversal.setDocStatus(DOCSTATUS_Reversed);
		reversal.setDocAction(DOCACTION_None);
		reversal.save(get_Trx());
		m_processMsg = reversal.getDocumentNo();
		//
		addDescription(""("" + reversal.getDocumentNo() + ""<-)"");

		//	Clean up Reversed (this)
		iLines = getLines(false);
		for (MInvoiceLine iLine : iLines) {
			if (iLine.getM_InOutLine_ID() != 0)
			{
				MInOutLine ioLine = new MInOutLine(getCtx(), iLine.getM_InOutLine_ID(), get_Trx());
				ioLine.setIsInvoiced(false);
				ioLine.save(get_Trx());
				//	Reconciliation
				iLine.setM_InOutLine_ID(0);
				iLine.save(get_Trx());
			}
        }
		setProcessed(true);
		setDocStatus(DOCSTATUS_Reversed);	//	may come from void
		setDocAction(DOCACTION_None);
		setC_Payment_ID(0);
		setIsPaid(true);

		//	Create Allocation
		if (!isCash)
		{
			MAllocationHdr alloc = new MAllocationHdr(getCtx(), false, getDateAcct(),
				getC_Currency_ID(),
				Msg.translate(getCtx(), ""C_Invoice_ID"")	+ "": "" + getDocumentNo() + ""/"" + reversal.getDocumentNo(),
				get_Trx());
			alloc.setAD_Org_ID(getAD_Org_ID());
			if (alloc.save())
			{
				//	Amount
				BigDecimal gt = getGrandTotal(true);
				if (!isSOTrx())
					gt = gt.negate();
				//	Orig Line
				MAllocationLine aLine = new MAllocationLine (alloc, gt,
					Env.ZERO, Env.ZERO, Env.ZERO);
				aLine.setAD_Org_ID(getAD_Org_ID());
				aLine.setC_Invoice_ID(getC_Invoice_ID());
				aLine.save();
				//	Reversal Line
				MAllocationLine rLine = new MAllocationLine (alloc, gt.negate(),
					Env.ZERO, Env.ZERO, Env.ZERO);
				rLine.setAD_Org_ID(reversal.getAD_Org_ID());
				rLine.setC_Invoice_ID(reversal.getC_Invoice_ID());
				rLine.save();
				//	Process It
				if (alloc.processIt(DocActionConstants.ACTION_Complete))
					alloc.save();
			}
		}	//	notCash

		//	Explicitly save for balance calc.
		save();
		//	Update BP Balance
		MBPartner bp = new MBPartner (getCtx(), getC_BPartner_ID(), get_Trx());
		bp.setTotalOpenBalance();
		bp.save();

		return true;
	}	//	reverseCorrectIt

	/**
	 * 	Reverse Accrual - none
	 * 	@return false
	 */
	public boolean reverseAccrualIt()
	{
		log.info(toString());
		return false;
	}	//	reverseAccrualIt

	/**
	 * 	Re-activate
	 * 	@return false
	 */
	public boolean reActivateIt()
	{
		log.info(toString());
		return false;
	}	//	reActivateIt


	/*************************************************************************
	 * 	Get Summary
	 *	@return Summary of Document
	 */
	public String getSummary()
	{
		StringBuffer sb = new StringBuffer();
		sb.append(getDocumentNo());
		//	: Grand Total = 123.00 (#1)
		sb.append("": "").
			append(Msg.translate(getCtx(),""GrandTotal"")).append(""="").append(getGrandTotal())
			.append("" (#"").append(getLines(false).length).append("")"");
		//	 - Description
		if (getDescription() != null && getDescription().length() > 0)
			sb.append("" - "").append(getDescription());
		return sb.toString();
	}	//	getSummary

	/**
	 * 	Get Process Message
	 *	@return clear text error message
	 */
	public String getProcessMsg()
	{
		return m_processMsg;
	}	//	getProcessMsg

	/**
	 * 	Get Document Owner (Responsible)
	 *	@return AD_User_ID
	 */
	public int getDoc_User_ID()
	{
		return getSalesRep_ID();
	}	//	getDoc_User_ID

	/**
	 * 	Get Document Approval Amount
	 *	@return amount
	 */
	public BigDecimal getApprovalAmt()
	{
		return getGrandTotal();
	}	//	getApprovalAmt

	/**
	 * 	Set Price List - Callout
	 *	@param oldM_PriceList_ID old value
	 *	@param newM_PriceList_ID new value
	 *	@param windowNo window
	 *	@throws Exception
	 */
	@UICallout public void setM_PriceList_ID (String oldM_PriceList_ID,
			String newM_PriceList_ID, int windowNo) throws Exception
	{
		if (newM_PriceList_ID == null || newM_PriceList_ID.length() == 0)
			return;
		int M_PriceList_ID = Integer.parseInt(newM_PriceList_ID);
		if (M_PriceList_ID == 0)
			return;
		setM_PriceList_ID(M_PriceList_ID);

		setPriceListVersion(windowNo);
	}	//	setM_PriceList_ID




	/**
	 *
	 * @param oldC_PaymentTerm_ID
	 * @param newC_PaymentTerm_ID
	 * @param windowNo
	 * @throws Exception
	 */
	@UICallout
	public void setC_PaymentTerm_ID( String oldC_PaymentTerm_ID, String newC_PaymentTerm_ID, int windowNo ) throws Exception
	{
		if( newC_PaymentTerm_ID == null || newC_PaymentTerm_ID.length() == 0 )
			return;
		int C_PaymentTerm_ID = Integer.parseInt( newC_PaymentTerm_ID );
		int C_Invoice_ID = getC_Invoice_ID();
		if ( C_PaymentTerm_ID == 0 || C_Invoice_ID == 0)	//	not saved yet
			return;
		//
		MPaymentTerm pt = new MPaymentTerm (getCtx(), C_PaymentTerm_ID, null);
		if (pt.get_ID() == 0)
		{
			addError( Msg.getMsg( getCtx(), ""PaymentTerm not found"" ) );
		}

		boolean valid = pt.apply (C_Invoice_ID);
		setIsPayScheduleValid( valid );

		return;

	}



	/**
	 *	Invoice Header - DocType.
	 *		- PaymentRule
	 *		- temporary Document
	 *  Context:
	 *  	- DocSubTypeSO
	 *		- HasCharges
	 *	- (re-sets Business Partner info of required)
	 *	@param ctx context
	 *	@param WindowNo window no
	 *	@param mTab tab
	 *	@param mField field
	 *	@param value value
	 *	@return null or error message
	 */

	@UICallout public void setC_DocTypeTarget_ID (String oldC_DocTypeTarget_ID,
			String newC_DocTypeTarget_ID, int WindowNo) throws Exception
	{
		if (Util.isEmpty(newC_DocTypeTarget_ID))
			return;
		int C_DocTypeTarget_ID = convertToInt(newC_DocTypeTarget_ID);
		if (C_DocTypeTarget_ID == 0)
			return;

		//	Re-Create new DocNo, if there is a doc number already
		//	and the existing source used a different Sequence number
		String oldDocNo = getDocumentNo();
		boolean newDocNo = oldDocNo == null;
		if (!newDocNo && oldDocNo.startsWith(""<"") && oldDocNo.endsWith("">""))
			newDocNo = true;
		int oldC_DocType_ID = getC_DocType_ID();
		if (oldC_DocType_ID == 0 && !Util.isEmpty(oldC_DocTypeTarget_ID))
			oldC_DocType_ID = convertToInt(oldC_DocTypeTarget_ID);

		String sql = ""SELECT d.HasCharges,'N',d.IsDocNoControlled,""
			+ ""s.CurrentNext, d.DocBaseType, s.CurrentNextSys, s.AD_Sequence_ID ""
			+ ""FROM C_DocType d ""
			+ ""LEFT OUTER JOIN AD_Sequence s ON (d.DocNoSequence_ID=s.AD_Sequence_ID) ""
			+ ""WHERE C_DocType_ID=?"";		//	1
		try
		{
			int AD_Sequence_ID = 0;

			//	Get old AD_SeqNo for comparison
			if (!newDocNo && oldC_DocType_ID != 0)
			{
				PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
				pstmt.setInt(1, oldC_DocType_ID);
				ResultSet rs = pstmt.executeQuery();
				if (rs.next())
					AD_Sequence_ID = rs.getInt(7);
				rs.close();
				pstmt.close();
			}

			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_DocTypeTarget_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				//	Charges - Set Context
				setContext( WindowNo, ""HasCharges"", rs.getString(1));
				//	DocumentNo
				if (rs.getString(3).equals(""Y""))			//	IsDocNoControlled
				{
					if (!newDocNo && AD_Sequence_ID != rs.getInt(7))
						newDocNo = true;
					if (newDocNo)
						if (Ini.isPropertyBool(Ini.P_COMPIERESYS)
								&& getCtx().getAD_Client_ID() < 1000000)
							setDocumentNo(""<"" + rs.getString(6) + "">"");
						else
							setDocumentNo(""<"" + rs.getString(4) + "">"");
				}
				//  DocBaseType - Set Context
				String s = rs.getString(5);
				setContext( WindowNo, ""DocBaseType"", s);
				//  AP Check & AR Credit Memo
				if (s.startsWith(""AP""))
					setPaymentRule( ""S"");    //  Check
				else if (s.endsWith(""C""))
					setPaymentRule(""P"");    //  OnCredit
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		return;
	}	//	docType



	/**
	 *	Invoice Header- BPartner.
	 *		- M_PriceList_ID (+ Context)
	 *		- C_BPartner_Location_ID
	 *		- AD_User_ID
	 *		- POReference
	 *		- SO_Description
	 *		- IsDiscountPrinted
	 *		- PaymentRule
	 *		- C_PaymentTerm_ID
	 *	@param ctx context
	 *	@param WindowNo window no
	 *	@param mTab tab
	 *	@param mField field
	 *	@param value value
	 *	@return null or error message
	 */
	@UICallout public void setC_BPartner_ID (String oldC_BPartner_ID,
			String newC_BPartner_ID, int WindowNo) throws Exception
	{
		if( newC_BPartner_ID == null || newC_BPartner_ID.length() == 0 )
			return;
		Integer C_BPartner_ID = Integer.parseInt( newC_BPartner_ID );
		if (C_BPartner_ID == null || C_BPartner_ID.intValue() == 0)
			return;

		String sql = ""SELECT p.AD_Language,p.C_PaymentTerm_ID,""
			+ "" COALESCE(p.M_PriceList_ID,g.M_PriceList_ID) AS M_PriceList_ID, p.PaymentRule,p.POReference,""
			+ "" p.SO_Description,p.IsDiscountPrinted,""
			+ "" p.SO_CreditLimit, p.SO_CreditLimit-p.SO_CreditUsed AS CreditAvailable,""
			+ "" l.C_BPartner_Location_ID,c.AD_User_ID,""
			+ "" COALESCE(p.PO_PriceList_ID,g.PO_PriceList_ID) AS PO_PriceList_ID, p.PaymentRulePO,p.PO_PaymentTerm_ID ""
			+ ""FROM C_BPartner p""
			+ "" INNER JOIN C_BP_Group g ON (p.C_BP_Group_ID=g.C_BP_Group_ID)""
			+ "" LEFT OUTER JOIN C_BPartner_Location l ON (p.C_BPartner_ID=l.C_BPartner_ID AND l.IsBillTo='Y' AND l.IsActive='Y')""
			+ "" LEFT OUTER JOIN AD_User c ON (p.C_BPartner_ID=c.C_BPartner_ID) ""
			+ ""WHERE p.C_BPartner_ID=? AND p.IsActive='Y'"";		//	#1

		boolean IsSOTrx = isSOTrx();
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_BPartner_ID.intValue());
			ResultSet rs = pstmt.executeQuery();
			//
			if (rs.next())
			{
				//	PriceList & IsTaxIncluded & Currency
				Integer ii = Integer.valueOf(rs.getInt(IsSOTrx ? ""M_PriceList_ID"" : ""PO_PriceList_ID""));
				if (!rs.wasNull())
					setM_PriceList_ID( ii);
				else
				{	//	get default PriceList
					int i = getCtx().getContextAsInt( ""#M_PriceList_ID"");
					if (i != 0)
						setM_PriceList_ID( Integer.valueOf(i));
				}

				//	PaymentRule
				String s = rs.getString(IsSOTrx ? ""PaymentRule"" : ""PaymentRulePO"");
				if (s != null && s.length() != 0)
				{
					if (getCtx().getContext( WindowNo, ""DocBaseType"").endsWith(""C""))	//	Credits are Payment Term
						s = ""P"";
					else if (IsSOTrx && (s.equals(""S"") || s.equals(""U"")))	//	No Check/Transfer for SO_Trx
						s = ""P"";											//  Payment Term
					setPaymentRule( s);
				}
				//  Payment Term
				ii = Integer.valueOf(rs.getInt(IsSOTrx ? ""C_PaymentTerm_ID"" : ""PO_PaymentTerm_ID""));
				if (!rs.wasNull())
					setC_PaymentTerm_ID( ii);

				//	Location
				int locID = rs.getInt(""C_BPartner_Location_ID"");
				//	overwritten by InfoBP selection - works only if InfoWindow
				//	was used otherwise creates error (uses last value, may belong to differnt BP)
				if (C_BPartner_ID.toString().equals(getCtx().getContext( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_BPartner_ID"")))
				{
					String loc = getCtx().getContext( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_BPartner_Location_ID"");
					if (loc.length() > 0)
						locID = Integer.parseInt(loc);
				}
				if(locID == 0)
					p_changeVO.addChangedValue(""C_BPartner_Location_ID"", (String)null);
				else
					setC_BPartner_Location_ID(locID);

				//	Contact - overwritten by InfoBP selection
				int contID = rs.getInt(""AD_User_ID"");
				if (C_BPartner_ID.toString().equals(getCtx().getContext( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_BPartner_ID"")))
				{
					String cont = getCtx().getContext( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""AD_User_ID"");
					if (cont.length() > 0)
						contID = Integer.parseInt(cont);
				}
				setAD_User_ID( contID );

				//	CreditAvailable
				if (IsSOTrx)
				{
					double CreditLimit = rs.getDouble(""SO_CreditLimit"");
					if (CreditLimit != 0)
					{
						double CreditAvailable = rs.getDouble(""CreditAvailable"");
						if (!rs.wasNull() && CreditAvailable < 0)
						{
							String msg = Msg.getMsg(getCtx(), ""CreditLimitOver"",
									DisplayType.getNumberFormat(DisplayTypeConstants.Amount).format(CreditAvailable));
							addError(msg);
						}
					}
				}

				//	PO Reference
				s = rs.getString(""POReference"");
				if (s != null && s.length() != 0)
					setPOReference( s);
				else
					setPOReference( null);
				//	SO Description
				s = rs.getString(""SO_Description"");
				if (s != null && s.trim().length() != 0)
					setDescription( s);
				//	IsDiscountPrinted
				s = rs.getString(""IsDiscountPrinted"");
				setIsDiscountPrinted(""Y"".equals(s));
				//
				setC_Project_ID(0);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, ""bPartner"", e);
		}
	}	//	bPartner


	/**
	 * 	Set DateInvoiced - Callout
	 *	@param oldDateInvoiced old
	 *	@param newDateInvoiced new
	 *	@param windowNo window no
	 */
	@UICallout public void setDateInvoiced (String oldDateInvoiced ,
			String newDateInvoiced , int windowNo) throws Exception
	{
		if (newDateInvoiced == null || newDateInvoiced.length() == 0)
			return;
		Timestamp dateInvoiced = PO.convertToTimestamp(newDateInvoiced );
		if (dateInvoiced == null)
			return;
		setDateInvoiced (dateInvoiced );
		setPriceListVersion(windowNo);
	}	//	setDateOrdered

	public void setPriceListVersion(int windowNo)
	{
		int M_PriceList_ID = getM_PriceList_ID();
		if (M_PriceList_ID == 0)
			return;

		Timestamp invoiceDate = getDateInvoiced();
		if(invoiceDate == null)
			return;

		String sql = ""SELECT pl.IsTaxIncluded,pl.EnforcePriceLimit,pl.C_Currency_ID,c.StdPrecision,""
			+ ""plv.M_PriceList_Version_ID,plv.ValidFrom ""
			+ ""FROM M_PriceList pl,C_Currency c,M_PriceList_Version plv ""
			+ ""WHERE pl.C_Currency_ID=c.C_Currency_ID""
			+ "" AND pl.M_PriceList_ID=plv.M_PriceList_ID""
			+ "" AND pl.M_PriceList_ID=? ""						//	1
			+ "" AND plv.ValidFrom <=? ""							//  2
			+ "" AND plv.IsActive='Y' ""
			+ ""ORDER BY plv.ValidFrom DESC"";
		//	Use newest price list - may not be future
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, M_PriceList_ID);
			pstmt.setTimestamp(2, invoiceDate);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				//	Tax Included
				setIsTaxIncluded(""Y"".equals(rs.getString(1)));
				//	Price Limit Enforce
				if (p_changeVO != null)
					p_changeVO.setContext(getCtx(), windowNo, ""EnforcePriceLimit"", rs.getString(2));
				//	Currency
				Integer ii = Integer.valueOf(rs.getInt(3));
				setC_Currency_ID(ii);
				//	PriceList Version
				if (p_changeVO != null)
					p_changeVO.setContext(getCtx(), windowNo, ""M_PriceList_Version_ID"", rs.getInt(5));
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
	}


}	//	MInvoice
"
org.compiere.model.MInvoice.reverseAccrualIt,MInvoice.java,"boolean reverseAccrualIt()
	{
		log.info(toString());
		return false;
	}	//	reverseAccrualIt
"
org.compiere.model.MInvoice.reActivateIt,MInvoice.java,"boolean reActivateIt()
	{
		log.info(toString());
		return false;
	}	//	reActivateIt
"
org.compiere.model.MInvoice.getSummary,MInvoice.java,"String getSummary()
	{
		StringBuffer sb = new StringBuffer();
		sb.append(getDocumentNo());
		//	: Grand Total = 123.00 (#1)
		sb.append("": "").
			append(Msg.translate(getCtx(),""GrandTotal"")).append(""="").append(getGrandTotal())
			.append("" (#"").append(getLines(false).length).append("")"");
		//	 - Description
		if (getDescription() != null && getDescription().length() > 0)
			sb.append("" - "").append(getDescription());
		return sb.toString();
	}	//	getSummary
"
org.compiere.model.MInvoice.getProcessMsg,MInvoice.java,"String getProcessMsg()
	{
		return m_processMsg;
	}	//	getProcessMsg
"
org.compiere.model.MInvoice.getDoc_User_ID,MInvoice.java,"int getDoc_User_ID()
	{
		return getSalesRep_ID();
	}	//	getDoc_User_ID
"
org.compiere.model.MInvoice.getApprovalAmt,MInvoice.java,"BigDecimal getApprovalAmt()
	{
		return getGrandTotal();
	}	//	getApprovalAmt
"
org.compiere.model.MInvoice.setM_PriceList_ID,MInvoice.java,"void setM_PriceList_ID (String oldM_PriceList_ID,
			String newM_PriceList_ID, int windowNo) throws Exception
	{
		if (newM_PriceList_ID == null || newM_PriceList_ID.length() == 0)
			return;
		int M_PriceList_ID = Integer.parseInt(newM_PriceList_ID);
		if (M_PriceList_ID == 0)
			return;
		setM_PriceList_ID(M_PriceList_ID);

		setPriceListVersion(windowNo);
	}	//	setM_PriceList_ID
"
org.compiere.model.MInvoice.setC_PaymentTerm_ID,MInvoice.java,"void setC_PaymentTerm_ID( String oldC_PaymentTerm_ID, String newC_PaymentTerm_ID, int windowNo ) throws Exception
	{
		if( newC_PaymentTerm_ID == null || newC_PaymentTerm_ID.length() == 0 )
			return;
		int C_PaymentTerm_ID = Integer.parseInt( newC_PaymentTerm_ID );
		int C_Invoice_ID = getC_Invoice_ID();
		if ( C_PaymentTerm_ID == 0 || C_Invoice_ID == 0)	//	not saved yet
			return;
		//
		MPaymentTerm pt = new MPaymentTerm (getCtx(), C_PaymentTerm_ID, null);
		if (pt.get_ID() == 0)
		{
			addError( Msg.getMsg( getCtx(), ""PaymentTerm not found"" ) );
		}

		boolean valid = pt.apply (C_Invoice_ID);
		setIsPayScheduleValid( valid );

		return;

	}
"
org.compiere.model.MInvoice.setC_DocTypeTarget_ID,MInvoice.java,"void setC_DocTypeTarget_ID (String oldC_DocTypeTarget_ID,
			String newC_DocTypeTarget_ID, int WindowNo) throws Exception
	{
		if (Util.isEmpty(newC_DocTypeTarget_ID))
			return;
		int C_DocTypeTarget_ID = convertToInt(newC_DocTypeTarget_ID);
		if (C_DocTypeTarget_ID == 0)
			return;

		//	Re-Create new DocNo, if there is a doc number already
		//	and the existing source used a different Sequence number
		String oldDocNo = getDocumentNo();
		boolean newDocNo = oldDocNo == null;
		if (!newDocNo && oldDocNo.startsWith(""<"") && oldDocNo.endsWith("">""))
			newDocNo = true;
		int oldC_DocType_ID = getC_DocType_ID();
		if (oldC_DocType_ID == 0 && !Util.isEmpty(oldC_DocTypeTarget_ID))
			oldC_DocType_ID = convertToInt(oldC_DocTypeTarget_ID);

		String sql = ""SELECT d.HasCharges,'N',d.IsDocNoControlled,""
			+ ""s.CurrentNext, d.DocBaseType, s.CurrentNextSys, s.AD_Sequence_ID ""
			+ ""FROM C_DocType d ""
			+ ""LEFT OUTER JOIN AD_Sequence s ON (d.DocNoSequence_ID=s.AD_Sequence_ID) ""
			+ ""WHERE C_DocType_ID=?"";		//	1
		try
		{
			int AD_Sequence_ID = 0;

			//	Get old AD_SeqNo for comparison
			if (!newDocNo && oldC_DocType_ID != 0)
			{
				PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
				pstmt.setInt(1, oldC_DocType_ID);
				ResultSet rs = pstmt.executeQuery();
				if (rs.next())
					AD_Sequence_ID = rs.getInt(7);
				rs.close();
				pstmt.close();
			}

			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_DocTypeTarget_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				//	Charges - Set Context
				setContext( WindowNo, ""HasCharges"", rs.getString(1));
				//	DocumentNo
				if (rs.getString(3).equals(""Y""))			//	IsDocNoControlled
				{
					if (!newDocNo && AD_Sequence_ID != rs.getInt(7))
						newDocNo = true;
					if (newDocNo)
						if (Ini.isPropertyBool(Ini.P_COMPIERESYS)
								&& getCtx().getAD_Client_ID() < 1000000)
							setDocumentNo(""<"" + rs.getString(6) + "">"");
						else
							setDocumentNo(""<"" + rs.getString(4) + "">"");
				}
				//  DocBaseType - Set Context
				String s = rs.getString(5);
				setContext( WindowNo, ""DocBaseType"", s);
				//  AP Check & AR Credit Memo
				if (s.startsWith(""AP""))
					setPaymentRule( ""S"");    //  Check
				else if (s.endsWith(""C""))
					setPaymentRule(""P"");    //  OnCredit
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		return;
	}	//	docType
"
org.compiere.model.MInvoice.setC_BPartner_ID,MInvoice.java,"void setC_BPartner_ID (String oldC_BPartner_ID,
			String newC_BPartner_ID, int WindowNo) throws Exception
	{
		if( newC_BPartner_ID == null || newC_BPartner_ID.length() == 0 )
			return;
		Integer C_BPartner_ID = Integer.parseInt( newC_BPartner_ID );
		if (C_BPartner_ID == null || C_BPartner_ID.intValue() == 0)
			return;

		String sql = ""SELECT p.AD_Language,p.C_PaymentTerm_ID,""
			+ "" COALESCE(p.M_PriceList_ID,g.M_PriceList_ID) AS M_PriceList_ID, p.PaymentRule,p.POReference,""
			+ "" p.SO_Description,p.IsDiscountPrinted,""
			+ "" p.SO_CreditLimit, p.SO_CreditLimit-p.SO_CreditUsed AS CreditAvailable,""
			+ "" l.C_BPartner_Location_ID,c.AD_User_ID,""
			+ "" COALESCE(p.PO_PriceList_ID,g.PO_PriceList_ID) AS PO_PriceList_ID, p.PaymentRulePO,p.PO_PaymentTerm_ID ""
			+ ""FROM C_BPartner p""
			+ "" INNER JOIN C_BP_Group g ON (p.C_BP_Group_ID=g.C_BP_Group_ID)""
			+ "" LEFT OUTER JOIN C_BPartner_Location l ON (p.C_BPartner_ID=l.C_BPartner_ID AND l.IsBillTo='Y' AND l.IsActive='Y')""
			+ "" LEFT OUTER JOIN AD_User c ON (p.C_BPartner_ID=c.C_BPartner_ID) ""
			+ ""WHERE p.C_BPartner_ID=? AND p.IsActive='Y'"";		//	#1

		boolean IsSOTrx = isSOTrx();
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_BPartner_ID.intValue());
			ResultSet rs = pstmt.executeQuery();
			//
			if (rs.next())
			{
				//	PriceList & IsTaxIncluded & Currency
				Integer ii = Integer.valueOf(rs.getInt(IsSOTrx ? ""M_PriceList_ID"" : ""PO_PriceList_ID""));
				if (!rs.wasNull())
					setM_PriceList_ID( ii);
				else
				{	//	get default PriceList
					int i = getCtx().getContextAsInt( ""#M_PriceList_ID"");
					if (i != 0)
						setM_PriceList_ID( Integer.valueOf(i));
				}

				//	PaymentRule
				String s = rs.getString(IsSOTrx ? ""PaymentRule"" : ""PaymentRulePO"");
				if (s != null && s.length() != 0)
				{
					if (getCtx().getContext( WindowNo, ""DocBaseType"").endsWith(""C""))	//	Credits are Payment Term
						s = ""P"";
					else if (IsSOTrx && (s.equals(""S"") || s.equals(""U"")))	//	No Check/Transfer for SO_Trx
						s = ""P"";											//  Payment Term
					setPaymentRule( s);
				}
				//  Payment Term
				ii = Integer.valueOf(rs.getInt(IsSOTrx ? ""C_PaymentTerm_ID"" : ""PO_PaymentTerm_ID""));
				if (!rs.wasNull())
					setC_PaymentTerm_ID( ii);

				//	Location
				int locID = rs.getInt(""C_BPartner_Location_ID"");
				//	overwritten by InfoBP selection - works only if InfoWindow
				//	was used otherwise creates error (uses last value, may belong to differnt BP)
				if (C_BPartner_ID.toString().equals(getCtx().getContext( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_BPartner_ID"")))
				{
					String loc = getCtx().getContext( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_BPartner_Location_ID"");
					if (loc.length() > 0)
						locID = Integer.parseInt(loc);
				}
				if(locID == 0)
					p_changeVO.addChangedValue(""C_BPartner_Location_ID"", (String)null);
				else
					setC_BPartner_Location_ID(locID);

				//	Contact - overwritten by InfoBP selection
				int contID = rs.getInt(""AD_User_ID"");
				if (C_BPartner_ID.toString().equals(getCtx().getContext( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_BPartner_ID"")))
				{
					String cont = getCtx().getContext( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""AD_User_ID"");
					if (cont.length() > 0)
						contID = Integer.parseInt(cont);
				}
				setAD_User_ID( contID );

				//	CreditAvailable
				if (IsSOTrx)
				{
					double CreditLimit = rs.getDouble(""SO_CreditLimit"");
					if (CreditLimit != 0)
					{
						double CreditAvailable = rs.getDouble(""CreditAvailable"");
						if (!rs.wasNull() && CreditAvailable < 0)
						{
							String msg = Msg.getMsg(getCtx(), ""CreditLimitOver"",
									DisplayType.getNumberFormat(DisplayTypeConstants.Amount).format(CreditAvailable));
							addError(msg);
						}
					}
				}

				//	PO Reference
				s = rs.getString(""POReference"");
				if (s != null && s.length() != 0)
					setPOReference( s);
				else
					setPOReference( null);
				//	SO Description
				s = rs.getString(""SO_Description"");
				if (s != null && s.trim().length() != 0)
					setDescription( s);
				//	IsDiscountPrinted
				s = rs.getString(""IsDiscountPrinted"");
				setIsDiscountPrinted(""Y"".equals(s));
				//
				setC_Project_ID(0);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, ""bPartner"", e);
		}
	}	//	bPartner
"
org.compiere.model.MInvoice.setDateInvoiced,MInvoice.java,"void setDateInvoiced (String oldDateInvoiced ,
			String newDateInvoiced , int windowNo) throws Exception
	{
		if (newDateInvoiced == null || newDateInvoiced.length() == 0)
			return;
		Timestamp dateInvoiced = PO.convertToTimestamp(newDateInvoiced );
		if (dateInvoiced == null)
			return;
		setDateInvoiced (dateInvoiced );
		setPriceListVersion(windowNo);
	}	//	setDateOrdered
"
org.compiere.model.MInvoice.setPriceListVersion,MInvoice.java,"void setPriceListVersion(int windowNo)
	{
		int M_PriceList_ID = getM_PriceList_ID();
		if (M_PriceList_ID == 0)
			return;

		Timestamp invoiceDate = getDateInvoiced();
		if(invoiceDate == null)
			return;

		String sql = ""SELECT pl.IsTaxIncluded,pl.EnforcePriceLimit,pl.C_Currency_ID,c.StdPrecision,""
			+ ""plv.M_PriceList_Version_ID,plv.ValidFrom ""
			+ ""FROM M_PriceList pl,C_Currency c,M_PriceList_Version plv ""
			+ ""WHERE pl.C_Currency_ID=c.C_Currency_ID""
			+ "" AND pl.M_PriceList_ID=plv.M_PriceList_ID""
			+ "" AND pl.M_PriceList_ID=? ""						//	1
			+ "" AND plv.ValidFrom <=? ""							//  2
			+ "" AND plv.IsActive='Y' ""
			+ ""ORDER BY plv.ValidFrom DESC"";
		//	Use newest price list - may not be future
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, M_PriceList_ID);
			pstmt.setTimestamp(2, invoiceDate);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				//	Tax Included
				setIsTaxIncluded(""Y"".equals(rs.getString(1)));
				//	Price Limit Enforce
				if (p_changeVO != null)
					p_changeVO.setContext(getCtx(), windowNo, ""EnforcePriceLimit"", rs.getString(2));
				//	Currency
				Integer ii = Integer.valueOf(rs.getInt(3));
				setC_Currency_ID(ii);
				//	PriceList Version
				if (p_changeVO != null)
					p_changeVO.setContext(getCtx(), windowNo, ""M_PriceList_Version_ID"", rs.getInt(5));
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
	}
"
org.compiere.model.MWarehousePrice.find,MWarehousePrice.java,"MWarehousePrice[] find (Ctx ctx,
		int M_PriceList_Version_ID, int M_Warehouse_ID,
		String Value, String Name, String UPC, String SKU, Trx trx)
	{
		StringBuffer sql = new StringBuffer (""SELECT * FROM RV_WarehousePrice ""
			+ ""WHERE M_PriceList_Version_ID=? AND M_Warehouse_ID=?"");
		StringBuffer sb = new StringBuffer();
		Value = getFindParameter (Value);
		if (Value != null)
			sb.append(""UPPER(Value) LIKE ?"");
		Name = getFindParameter (Name);
		if (Name != null)
		{
			if (sb.length() > 0)
				sb.append("" OR "");
			sb.append(""UPPER(Name) LIKE ?"");
		}
		if (UPC != null && UPC.length() > 0)
		{
			if (sb.length() > 0)
				sb.append("" OR "");
			sb.append(""UPC=?"");
		}
		if (SKU != null && SKU.length() > 0)
		{
			if (sb.length() > 0)
				sb.append("" OR "");
			sb.append(""SKU=?"");
		}
		if (sb.length() > 0)
			sql.append("" AND ("").append(sb).append("")"");
		sql.append("" ORDER BY Value"");
		//
		String finalSQL = MRole.getDefault(ctx, false).addAccessSQL(sql.toString(), 
			""RV_WarehousePrice"", MRole.SQL_NOTQUALIFIED, MRole.SQL_RO);
		s_log.fine(""find - M_PriceList_Version_ID="" + M_PriceList_Version_ID 
			+ "", M_Warehouse_ID="" + M_Warehouse_ID
			+ "" - "" + finalSQL);
		ArrayList<MWarehousePrice> list = new ArrayList<MWarehousePrice>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(finalSQL, trx);
			int index = 1;
			pstmt.setInt(index++, M_PriceList_Version_ID);
			pstmt.setInt(index++, M_Warehouse_ID);
			if (Value != null)
				pstmt.setString(index++, Value);
			if (Name != null)
				pstmt.setString(index++, Name);
			if (UPC != null && UPC.length() > 0)
				pstmt.setString(index++, UPC);
			if (SKU != null && SKU.length() > 0)
				pstmt.setString(index++, SKU);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MWarehousePrice(ctx, rs, trx));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, finalSQL, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		s_log.fine(""find - #"" + list.size());
		MWarehousePrice[] retValue = new MWarehousePrice[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	find
"
org.compiere.model.MWarehousePrice.find,MWarehousePrice.java,"MWarehousePrice[] find (MBPartner bPartner,
		boolean IsSOTrx, Timestamp valid, int M_Warehouse_ID,
		String Value, String Name, String UPC, String SKU, Trx trx)
	{
		int M_PriceList_ID = IsSOTrx ? bPartner.getM_PriceList_ID() : bPartner.getPO_PriceList_ID();
		MPriceList pl = null;
		if (M_PriceList_ID == 0)
			pl = MPriceList.getDefault(bPartner.getCtx(), IsSOTrx);
		else
			pl = MPriceList.get(bPartner.getCtx(), M_PriceList_ID, trx);
		if (pl == null)
		{
			s_log.severe (""No PriceList found"");
			return null;
		}
		MPriceListVersion plv = pl.getPriceListVersion (valid);
		if (plv == null)
		{
			s_log.severe (""No PriceListVersion found for M_PriceList_ID="" + pl.getM_PriceList_ID());
			return null;
		}
		//
		return find (bPartner.getCtx(), plv.getM_PriceList_Version_ID(), M_Warehouse_ID,
			Value, Name, UPC, SKU, trx);
	}	//	find
"
org.compiere.model.MWarehousePrice.get,MWarehousePrice.java,"MWarehousePrice get (MProduct product,
		int M_PriceList_Version_ID, int M_Warehouse_ID, Trx trx)
	{
		MWarehousePrice retValue = null;
		String sql = ""SELECT * FROM RV_WarehousePrice ""
			+ ""WHERE M_Product_ID=? AND M_PriceList_Version_ID=? AND M_Warehouse_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, product.getM_Product_ID());
			pstmt.setInt(2, M_PriceList_Version_ID);
			pstmt.setInt(3, M_Warehouse_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				retValue = new MWarehousePrice(product.getCtx(), rs, trx);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return retValue;
	}	//	get
"
org.compiere.model.MWarehousePrice.isAvailable,MWarehousePrice.java,"boolean isAvailable()
	{
		return getQtyAvailable().signum() == 1;	//	> 0
	}	//	isAvailable
"
org.compiere.model.MRequestType.get,MRequestType.java,"MRequestType get (Ctx ctx, int R_RequestType_ID)
	{
		Integer key = Integer.valueOf (R_RequestType_ID);
		MRequestType retValue = s_cache.get(ctx, key);
		if (retValue == null)
		{
			retValue = new MRequestType (ctx, R_RequestType_ID, null);
			s_cache.put(key, retValue);
		}
		return retValue;
	}	//	get
"
org.compiere.model.MRequestType.getDefault,MRequestType.java,"MRequestType getDefault (Ctx ctx)
	{
		MRequestType retValue = null;

		String sql = ""SELECT * FROM R_RequestType ""
			+ ""WHERE AD_Client_ID IN (0,?) AND IsActive='Y'""
			+ ""ORDER BY ASCII(IsDefault) DESC, AD_Client_ID DESC, R_Request_ID DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, ctx.getAD_Client_ID());
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
			{
				retValue = new MRequestType (ctx, rs, null);
				if (!retValue.isDefault())
					retValue = null;
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			s_log.log(Level.SEVERE, sql, ex);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;
		return retValue;
	}	//	get
"
org.compiere.model.MRequestType.updateStatistics,MRequestType.java,"void updateStatistics()
	{
		if (System.currentTimeMillis() < m_nextStats)
			return;

		String sql = ""SELECT ""
			+ ""(SELECT COUNT(*) FROM R_Request r""
			+ "" INNER JOIN R_Status s ON (r.R_Status_ID=s.R_Status_ID AND s.IsOpen='Y') ""
			+ ""WHERE r.R_RequestType_ID=x.R_RequestType_ID) AS OpenNo, ""
			+ ""(SELECT COUNT(*) FROM R_Request r ""
			+ ""WHERE r.R_RequestType_ID=x.R_RequestType_ID) AS TotalNo, ""
			+ ""(SELECT COUNT(*) FROM R_Request r ""
			//jz + ""WHERE r.R_RequestType_ID=x.R_RequestType_ID AND Created>SysDate-30) AS New30No, ""
			+ ""WHERE r.R_RequestType_ID=x.R_RequestType_ID AND Created>addDays(SysDate,-30)) AS New30No, ""
			+ ""(SELECT COUNT(*) FROM R_Request r""
			+ "" INNER JOIN R_Status s ON (r.R_Status_ID=s.R_Status_ID AND s.IsClosed='Y') ""
			//jz + ""WHERE r.R_RequestType_ID=x.R_RequestType_ID AND r.Updated>SysDate-30) AS Closed30No ""
			+ ""WHERE r.R_RequestType_ID=x.R_RequestType_ID AND r.Updated>addDays(SysDate,-30)) AS Closed30No ""
			//
			+ ""FROM R_RequestType x WHERE R_RequestType_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, getR_RequestType_ID());
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
			{
				m_openNo = rs.getInt(1);
				m_totalNo = rs.getInt(2);
				m_new30No = rs.getInt(3);
				m_closed30No = rs.getInt(4);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

		m_nextStats = System.currentTimeMillis() + 3600000;		//	every hour
	}	//	updateStatistics
"
org.compiere.model.MRequestType.getTotalNo,MRequestType.java,"int getTotalNo()
	{
		updateStatistics();
		return m_totalNo;
	}
"
org.compiere.model.MRequestType.getOpenNo,MRequestType.java,"int getOpenNo()
	{
		updateStatistics();
		return m_openNo;
	}
"
org.compiere.model.MRequestType.getClosed30No,MRequestType.java,"int getClosed30No()
	{
		updateStatistics();
		return m_closed30No;
	}
"
org.compiere.model.MRequestType.getNew30No,MRequestType.java,"int getNew30No()
	{
		updateStatistics();
		return m_new30No;
	}
"
org.compiere.model.MRequestType.getRequests,MRequestType.java,"MRequest[] getRequests (boolean selfService, int C_BPartner_ID)
	{
		String sql = ""SELECT * FROM R_Request WHERE R_RequestType_ID=?"";
		if (selfService)
			sql += "" AND IsSelfService='Y'"";
		if (C_BPartner_ID == 0)
			sql += "" AND ConfidentialType='A'"";
		else
			sql += "" AND (ConfidentialType='A' OR C_BPartner_ID="" + C_BPartner_ID + "")"";
		sql += "" ORDER BY DocumentNo DESC"";
		//
		ArrayList<MRequest> list = new ArrayList<MRequest>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, getR_RequestType_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MRequest (getCtx(), rs, null));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

		MRequest[] retValue = new MRequest[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getRequests
"
org.compiere.model.MRequestType.getRequests,MRequestType.java,"MRequest[] getRequests ()
	{
		return getRequests(true, 0);
	}	//	getRequests
"
org.compiere.model.MRequestType.getDefaultR_Status_ID,MRequestType.java,"int getDefaultR_Status_ID()
	{
		if (getR_StatusCategory_ID() == 0)
		{
			MStatusCategory sc = MStatusCategory.getDefault(getCtx());
			if (sc == null)
				sc = MStatusCategory.createDefault(getCtx());
			if ((sc != null) && (sc.getR_StatusCategory_ID() != 0))
				setR_StatusCategory_ID(sc.getR_StatusCategory_ID());
		}
		if (getR_StatusCategory_ID() != 0)
		{
			MStatusCategory sc = MStatusCategory.get(getCtx(), getR_StatusCategory_ID());
			return sc.getDefaultR_Status_ID();
		}
		return 0;
	}	//	getDefaultR_Status_ID
"
org.compiere.model.MRequestType.beforeSave,MRequestType.java,"boolean beforeSave (boolean newRecord)
	{
		if (getR_StatusCategory_ID() == 0)
		{
			MStatusCategory sc = MStatusCategory.getDefault(getCtx());
			if ((sc != null) && (sc.getR_StatusCategory_ID() != 0))
				setR_StatusCategory_ID(sc.getR_StatusCategory_ID());
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MRequestType.toString,MRequestType.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MRequestType["");
		sb.append(get_ID()).append(""-"").append(getName())
			.append (""]"");
		return sb.toString();
	}	//	toString
"
org.compiere.model.MRequestType.getSqlPI,MRequestType.java,"String getSqlPI (MGoalRestriction[] restrictions,
		String MeasureScope, String MeasureDataType, Timestamp reportDate, MRole role)
	{
		String dateColumn = ""Created"";
		String orgColumn = ""AD_Org_ID"";
		String bpColumn = ""C_BPartner_ID"";
		String pColumn = ""M_Product_ID"";
		//	PlannedAmt -> PlannedQty -> Count
		StringBuffer sb = new StringBuffer(""SELECT COUNT(*) ""
			+ ""FROM R_Request WHERE R_RequestType_ID="" + getR_RequestType_ID()
			+ "" AND Processed<>'Y'"");
		//	Date Restriction

		if (X_PA_Measure.MEASUREDATATYPE_QtyAmountInTime.equals(MeasureDataType)
			&& !X_PA_Goal.MEASUREDISPLAY_Total.equals(MeasureScope))
		{
			if (reportDate == null)
				reportDate = new Timestamp(System.currentTimeMillis());
			DB.TO_DATE(reportDate);
			String trunc = ""D"";
			if (X_PA_Goal.MEASUREDISPLAY_Year.equals(MeasureScope))
				trunc = ""Y"";
			else if (X_PA_Goal.MEASUREDISPLAY_Quarter.equals(MeasureScope))
				trunc = ""Q"";
			else if (X_PA_Goal.MEASUREDISPLAY_Month.equals(MeasureScope))
				trunc = ""MM"";
			else if (X_PA_Goal.MEASUREDISPLAY_Week.equals(MeasureScope))
				trunc = ""W"";
		//	else if (MGoal.MEASUREDISPLAY_Day.equals(MeasureDisplay))
		//		;
			sb.append("" AND TRUNC("")
				.append(dateColumn).append("",'"").append(trunc).append(""')=TRUNC("")
				.append(DB.TO_DATE(reportDate)).append("",'"").append(trunc).append(""')"");
		}	//	date
		//
		String sql = MMeasureCalc.addRestrictions(sb.toString(), false, restrictions, role,
			""R_Request"", orgColumn, bpColumn, pColumn);

		log.fine(sql);
		return sql;
	}	//	getSqlPI
"
org.compiere.model.MRequestType.getSqlBarChart,MRequestType.java,"String getSqlBarChart (MGoalRestriction[] restrictions,
		String MeasureDisplay, String MeasureDataType,
		Timestamp startDate, MRole role)
	{
		String dateColumn = ""Created"";
		String orgColumn = ""AD_Org_ID"";
		String bpColumn = ""C_BPartner_ID"";
		String pColumn = ""M_Product_ID"";
		//
		StringBuffer sb = new StringBuffer(""SELECT COUNT(*), "");
		String groupBy = null;
		String orderBy = null;
		//
		if (X_PA_Measure.MEASUREDATATYPE_QtyAmountInTime.equals(MeasureDataType)
			&& !X_PA_Goal.MEASUREDISPLAY_Total.equals(MeasureDisplay))
		{
			String trunc = ""D"";
			if (X_PA_Goal.MEASUREDISPLAY_Year.equals(MeasureDisplay))
				trunc = ""Y"";
			else if (X_PA_Goal.MEASUREDISPLAY_Quarter.equals(MeasureDisplay))
				trunc = ""Q"";
			else if (X_PA_Goal.MEASUREDISPLAY_Month.equals(MeasureDisplay))
				trunc = ""MM"";
			else if (X_PA_Goal.MEASUREDISPLAY_Week.equals(MeasureDisplay))
				trunc = ""W"";
		//	else if (MGoal.MEASUREDISPLAY_Day.equals(MeasureDisplay))
		//		;
			orderBy = ""TRUNC("" + dateColumn + "",'"" + trunc + ""')"";
//jz 0 is column position in EDB, Oracle doesn't take alias in group by
//			groupBy = orderBy + "", 0 "";
//			sb.append(groupBy)
			groupBy = orderBy + "", CAST(0 AS INTEGER) "";
			sb.append(groupBy)
				.append(""FROM R_Request "");
		}
		else
		{
			orderBy = ""s.SeqNo"";
			groupBy = ""COALESCE(s.Name,TO_NCHAR('-')), s.R_Status_ID, s.SeqNo "";
			sb.append(groupBy)
				.append(""FROM R_Request LEFT OUTER JOIN R_Status s ON (R_Request.R_Status_ID=s.R_Status_ID) "");
		}
		//	Where
		sb.append(""WHERE R_Request.R_RequestType_ID="").append(getR_RequestType_ID())
			.append("" AND R_Request.Processed<>'Y'"");
		//	Date Restriction
		if ((startDate != null)
			&& !X_PA_Goal.MEASUREDISPLAY_Total.equals(MeasureDisplay))
		{
			String dateString = DB.TO_DATE(startDate);
			sb.append("" AND "").append(dateColumn)
				.append("">="").append(dateString);
		}	//	date
		//
		String sql = MMeasureCalc.addRestrictions(sb.toString(), false, restrictions, role,
			""R_Request"", orgColumn, bpColumn, pColumn);
		if (groupBy != null)
			sql += "" GROUP BY "" + groupBy + "" ORDER BY "" + orderBy;
		//
		log.fine(sql);
		return sql;
	}	//	getSqlBarChart
"
org.compiere.model.MRequestType.getQuery,MRequestType.java,"Query getQuery(MGoalRestriction[] restrictions,
		String MeasureDisplay, Timestamp date, int R_Status_ID, MRole role)
	{
		String dateColumn = ""Created"";
		String orgColumn = ""AD_Org_ID"";
		String bpColumn = ""C_BPartner_ID"";
		String pColumn = ""M_Product_ID"";
		//
		Query query = new Query(""R_Request"");
		query.addRestriction(""R_RequestType_ID"", ""="", getR_RequestType_ID());
		//
		String where = null;
		if (R_Status_ID != 0)
			where = ""R_Status_ID="" + R_Status_ID;
		else
		{
			String trunc = ""D"";
			if (X_PA_Goal.MEASUREDISPLAY_Year.equals(MeasureDisplay))
				trunc = ""Y"";
			else if (X_PA_Goal.MEASUREDISPLAY_Quarter.equals(MeasureDisplay))
				trunc = ""Q"";
			else if (X_PA_Goal.MEASUREDISPLAY_Month.equals(MeasureDisplay))
				trunc = ""MM"";
			else if (X_PA_Goal.MEASUREDISPLAY_Week.equals(MeasureDisplay))
				trunc = ""W"";
		//	else if (MGoal.MEASUREDISPLAY_Day.equals(MeasureDisplay))
		//		trunc = ""D"";
			where = ""TRUNC("" + dateColumn + "",'"" + trunc
				+ ""')=TRUNC("" + DB.TO_DATE(date) + "",'"" + trunc + ""')"";
		}
		String whereRestriction = MMeasureCalc.addRestrictions(where + "" AND Processed<>'Y' "",
			true, restrictions, role,
			""R_Request"", orgColumn, bpColumn, pColumn);
		query.addRestriction(whereRestriction);
		query.setRecordCount(1);
		return query;
	}	//	getQuery
"
org.compiere.model.MBankStatementLoader.init,MBankStatementLoader.java,"void init(String fileName)
	{
		localFileName = fileName;
		try
		{
			log.info( ""MBankStatementLoader Class Name="" + getStmtLoaderClass());
			Class<?> bsrClass = Class.forName(getStmtLoaderClass());
			m_loader = (BankStatementLoaderInterface) bsrClass.newInstance();
		}
		catch(Exception e)
		{
			errorMessage = ""ClassNotLoaded"";
			errorDescription = e.getMessage();
		}		
	}
"
org.compiere.model.MBankStatementLoader.toString,MBankStatementLoader.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MBankStatementLoader["")
			.append(get_ID ()).append(""-"").append(getName())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MBankStatementLoader.getLocalFileName,MBankStatementLoader.java,"String getLocalFileName()
	{
		return localFileName;
	}	//	getLocalFileName
"
org.compiere.model.MBankStatementLoader.loadLines,MBankStatementLoader.java,"boolean loadLines()
	{
		boolean result = false;
		log.info( ""MBankStatementLoader.loadLines"");
		if (m_loader == null)
		{
			errorMessage = ""ClassNotLoaded"";
			return result;
		}
		//	Initialize the Loader 
		if (!m_loader.init(this))
		{
			errorMessage = m_loader.getLastErrorMessage();
			errorDescription = m_loader.getLastErrorDescription();
			return result;
		}
		//	Verify whether the data structure is valid
		if (!m_loader.isValid())
		{
			errorMessage = m_loader.getLastErrorMessage();
			errorDescription = m_loader.getLastErrorDescription();
			return result;
		}
		//	Load statement lines
		if (!m_loader.loadLines())
		{
			errorMessage = m_loader.getLastErrorMessage();
			errorDescription = m_loader.getLastErrorDescription();
			return result;
		}
		result = true;
		return result;
	}	//	loadLines
"
org.compiere.model.MBankStatementLoader.saveLine,MBankStatementLoader.java,"boolean saveLine()
	{
		log.info( ""MBankStatementLoader.importLine"");
		boolean result = false;
		X_I_BankStatement imp = new X_I_BankStatement(getCtx(), 0, get_Trx());
		if (m_loader == null)
		{
			errorMessage = ""LoadError"";
			return result;
		}
		//	Bank Account fields
		log.config( ""MBankStatementLoader.importLine Bank Account="" + m_loader.getBankAccountNo());
		imp.setBankAccountNo(m_loader.getBankAccountNo());
		log.config( ""MBankStatementLoader.importLine Routing No="" + m_loader.getRoutingNo());
		imp.setRoutingNo(m_loader.getRoutingNo());
		
		//	Statement fields
		log.config( ""MBankStatementLoader.importLine EFT Statement Reference No="" + m_loader.getStatementReference());
		imp.setEftStatementReference(m_loader.getStatementReference());
		log.config( ""MBankStatementLoader.importLine EFT Statement Date="" + m_loader.getStatementDate());
		imp.setEftStatementDate(m_loader.getStatementDate());
        log.config( ""MBankStatementLoader.importLine Statement Date="" + m_loader.getStatementDate());
        imp.setStatementDate(m_loader.getStatementDate());
		
		//	Statement Line fields
		log.config( ""MBankStatementLoader.importLine EFT Transaction ID="" + m_loader.getTrxID());
		imp.setEftTrxID(m_loader.getTrxID());
		log.config( ""MBankStatementLoader.importLine Statement Line Date="" + m_loader.getStatementLineDate());
		imp.setStatementLineDate(m_loader.getStatementLineDate());
		imp.setStatementLineDate(m_loader.getStatementLineDate());
		imp.setEftStatementLineDate(m_loader.getStatementLineDate());
		log.config( ""MBankStatementLoader.importLine Valuta Date="" + m_loader.getValutaDate());
		imp.setValutaDate(m_loader.getValutaDate());
		imp.setEftValutaDate(m_loader.getValutaDate());
		log.config( ""MBankStatementLoader.importLine Statement Amount="" + m_loader.getStmtAmt());
		imp.setStmtAmt(m_loader.getStmtAmt());
		imp.setEftAmt(m_loader.getStmtAmt());
		log.config( ""MBankStatementLoader.importLine Transaction Amount="" + m_loader.getTrxAmt());
		imp.setTrxAmt(m_loader.getTrxAmt());
		log.config( ""MBankStatementLoader.importLine Interest Amount="" + m_loader.getInterestAmt());
		imp.setInterestAmt(m_loader.getInterestAmt());
		log.config( ""MBankStatementLoader.importLine Reference No="" + m_loader.getReference());
		imp.setReferenceNo(m_loader.getReference());
		imp.setEftReference(m_loader.getReference());
		log.config( ""MBankStatementLoader.importLine Check No="" + m_loader.getReference());
		imp.setEftCheckNo(m_loader.getCheckNo());
		log.config( ""MBankStatementLoader.importLine Memo="" + m_loader.getMemo());
		imp.setMemo(m_loader.getMemo());
		imp.setEftMemo(m_loader.getMemo());
		log.config( ""MBankStatementLoader.importLine Payee Name="" + m_loader.getPayeeName());
		imp.setEftPayee(m_loader.getPayeeName());
		log.config( ""MBankStatementLoader.importLine Payee Account No="" + m_loader.getPayeeAccountNo());
		imp.setEftPayeeAccount(m_loader.getPayeeAccountNo());
		log.config( ""MBankStatementLoader.importLine EFT Transaction Type="" + m_loader.getTrxType());
		imp.setEftTrxType(m_loader.getTrxType());
		log.config( ""MBankStatementLoader.importLine Currency="" + m_loader.getCurrency());
		imp.setEftCurrency(m_loader.getCurrency());
		imp.setISO_Code(m_loader.getCurrency());
		log.config( ""MBankStatementLoader.importLine Charge Name="" + m_loader.getChargeName());
		imp.setChargeName(m_loader.getChargeName());
		log.config( ""MBankStatementLoader.importLine Charge Amount="" + m_loader.getChargeAmt());
		imp.setChargeAmt(m_loader.getChargeAmt());
		imp.setProcessed(false);
		imp.setI_IsImported(X_I_BankStatement.I_ISIMPORTED_No);
		
		result = imp.save();
		if (result)
		{
			loadCount ++;
		}
		else
		{
			errorMessage = ""LoadError"";
		}
		imp = null;
		return result;
	}	//	importLine
"
org.compiere.model.MBankStatementLoader.getErrorMessage,MBankStatementLoader.java,"String getErrorMessage()
	{
		return errorMessage;
	}	//	getErrorMessage
"
org.compiere.model.MBankStatementLoader.getErrorDescription,MBankStatementLoader.java,"String getErrorDescription()
	{
		return errorDescription;
	}	//	getErrorDescription
"
org.compiere.model.MBankStatementLoader.getLoadCount,MBankStatementLoader.java,"int getLoadCount()
	{
		return loadCount;
	}	//	getLoadCount
"
org.compiere.model.MAging.add,MAging.java,"void add (Timestamp DueDate, int daysDue, BigDecimal invoicedAmt, BigDecimal openAmt)
	{
		if (invoicedAmt == null)
			invoicedAmt = Env.ZERO;
		setInvoicedAmt(getInvoicedAmt().add(invoicedAmt));
		if (openAmt == null)
			openAmt = Env.ZERO;
		setOpenAmt(getOpenAmt().add(openAmt));
		//	Days Due
		m_noItems++;
		m_daysDueSum += daysDue;
		setDaysDue(m_daysDueSum/m_noItems);
		//	Due Date
		if (getDueDate().after(DueDate))
			setDueDate(DueDate);		//	earliest
		//
		BigDecimal amt = openAmt;
		//	Not due - negative
		if (daysDue <= 0)
		{
			setDueAmt (getDueAmt().add(amt));
			if (daysDue == 0)
				setDue0 (getDue0().add(amt));
				
			if (daysDue >= -7)
				setDue0_7 (getDue0_7().add(amt));
				
			if (daysDue >= -30)
				setDue0_30 (getDue0_30().add(amt));
				
			if (daysDue <= -1 && daysDue >= -7)
				setDue1_7 (getDue1_7().add(amt));
				
			if (daysDue <= -8 && daysDue >= -30)
				setDue8_30 (getDue8_30().add(amt));
				
			if (daysDue <= -31 && daysDue >= -60)
				setDue31_60 (getDue31_60().add(amt));
				
			if (daysDue <= -31)
				setDue31_Plus (getDue31_Plus().add(amt));
				
			if (daysDue <= -61 && daysDue >= -90)
				setDue61_90 (getDue61_90().add(amt));
				
			if (daysDue <= -61)
				setDue61_Plus (getDue61_Plus().add(amt));
				
			if (daysDue <= -91)
				setDue91_Plus (getDue91_Plus().add(amt));
		}
		else	//	Due = positive (> 1)
		{
			setPastDueAmt (getPastDueAmt().add(amt));
			if (daysDue <= 7)
				setPastDue1_7 (getPastDue1_7().add(amt));
				
			if (daysDue <= 30)
				setPastDue1_30 (getPastDue1_30().add(amt));
				
			if (daysDue >= 8 && daysDue <= 30)
				setPastDue8_30 (getPastDue8_30().add(amt));
			
			if (daysDue >= 31 && daysDue <= 60)
				setPastDue31_60 (getPastDue31_60().add(amt));
				
			if (daysDue >= 31)
				setPastDue31_Plus (getPastDue31_Plus().add(amt));
			
			if (daysDue >= 61 && daysDue <= 90)
				setPastDue61_90 (getPastDue61_90().add(amt));
				
			if (daysDue >= 61)
				setPastDue61_Plus (getPastDue61_Plus().add(amt));
				
			if (daysDue >= 91)
				setPastDue91_Plus (getPastDue91_Plus().add(amt));
		}
	}	//	add
"
org.compiere.model.MAging.toString,MAging.java,"String toString()
	{
		StringBuffer sb = new StringBuffer(""MAging["");
		sb.append(""AD_PInstance_ID="").append(getAD_PInstance_ID())
			.append("",C_BPartner_ID="").append(getC_BPartner_ID())
			.append("",C_Currency_ID="").append(getC_Currency_ID())
			.append("",C_Invoice_ID="").append(getC_Invoice_ID());
		sb.append(""]"");
		return sb.toString();
	} //	toString
"
org.compiere.model.MStore.get,MStore.java,"MStore get (Ctx ctx, int W_Store_ID)
	{
		Integer key = Integer.valueOf (W_Store_ID);
		MStore retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MStore (ctx, W_Store_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MStore.get,MStore.java,"MStore get (Ctx ctx, String contextPath)
	{
		MStore wstore = null;
		Iterator<MStore> it = s_cache.values().iterator();
		while (it.hasNext())
		{
			wstore = it.next();
			if (wstore.getWebContext().equals(contextPath))
				return wstore;
		}

		//	Search by context
		PreparedStatement pstmt = null;
		String sql = ""SELECT * FROM W_Store WHERE WebContext=?"";
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setString(1, contextPath);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				wstore = new MStore (ctx, rs, null);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//	Try client
		if (wstore == null)
		{
			sql = ""SELECT * FROM W_Store WHERE AD_Client_ID=? AND IsActive='Y' ORDER BY W_Store_ID"";
			try
			{
				pstmt = DB.prepareStatement(sql, (Trx) null);
				pstmt.setInt (1, ctx.getAD_Client_ID());
				ResultSet rs = pstmt.executeQuery ();
				if (rs.next ())
				{
					wstore = new MStore (ctx, rs, null);
					s_log.warning(""Context "" + contextPath 
						+ "" Not found - Found via AD_Client_ID="" + ctx.getAD_Client_ID());
				}
				rs.close ();
				pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				s_log.log (Level.SEVERE, sql, e);
			}
			try
			{
				if (pstmt != null)
					pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				pstmt = null;
			}
		}
		//	Nothing
		if (wstore == null)
			return null;
		
		//	Save
		Integer key = Integer.valueOf (wstore.getW_Store_ID());
		s_cache.put (key, wstore);
		return wstore;
	}	//	get
"
org.compiere.model.MStore.getOfClient,MStore.java,"MStore[] getOfClient (MClient client)
	{
		ArrayList<MStore> list = new ArrayList<MStore>();
		String sql = ""SELECT * FROM W_Store WHERE AD_Client_ID=? AND IsActive='Y'"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, client.get_Trx());
			pstmt.setInt (1, client.getAD_Client_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MStore (client.getCtx(), rs, client.get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		MStore[] retValue = new MStore[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getOfClient
"
org.compiere.model.MStore.getActive,MStore.java,"MStore[] getActive()
	{
		s_log.info("""" + s_cache.size());
		if (s_cache.size() == 0)
		{
			PreparedStatement pstmt = null;
			String sql = ""SELECT * FROM W_Store WHERE IsActive='Y'"";
			try
			{
				pstmt = DB.prepareStatement(sql, (Trx) null);
				ResultSet rs = pstmt.executeQuery ();
				while (rs.next ())
				{
					MStore wstore = new MStore (Env.getCtx(), rs, null);
					s_cache.put(new Integer(wstore.getW_Store_ID()), wstore);
				}
				rs.close ();
				pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				s_log.log (Level.SEVERE, sql, e);
			}
			try
			{
				if (pstmt != null)
					pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				pstmt = null;
			}
		}
		//	Get from Cache
		try
		{
			Collection<MStore> cc = s_cache.values();
			Object[] oo = cc.toArray();
			for (int i = 0; i < oo.length; i++)
				s_log.info(i + "": "" + oo[i]);
			
			MStore[] retValue = new MStore[oo.length];
			for (int i = 0; i < oo.length; i++)
				retValue[i] = (MStore)oo[i];
			return retValue;
		}
		catch (Exception e)
		{
			s_log.severe(e.toString());
		}
		return new MStore[]{};
	}	//	getActive
"
org.compiere.model.MStore.getWebContext,MStore.java,"String getWebContext(boolean full)
	{
		if (!full)
			return super.getURL();
		String url = super.getURL();
		if (url == null || url.length() == 0)
			url = ""http://localhost"";
		if (url.endsWith(""/""))
			url += url.substring(0, url.length()-1);
		return url + getWebContext();	//	starts with /
	}	//	getWebContext
"
org.compiere.model.MStore.toString,MStore.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""WStore["");
		sb.append(getWebContext(true))
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MStore.beforeSave,MStore.java,"boolean beforeSave (boolean newRecord)
	{
		//	Context to start with /
		if (!getWebContext().startsWith(""/""))
			setWebContext(""/"" + getWebContext());
		
		//	Org to Warehouse
		if (newRecord || is_ValueChanged(""M_Warehouse_ID"") || getAD_Org_ID() == 0)
		{
			MWarehouse wh = new MWarehouse (getCtx(), getM_Warehouse_ID(), get_Trx());
			setAD_Org_ID(wh.getAD_Org_ID());
		}
		
		String url = getURL();
		if (url == null)
			url = """";
		boolean urlOK = url.startsWith(""http://"") || url.startsWith(""https://"");
		if (!urlOK) // || url.indexOf(""localhost"") != -1)
		{
			log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""URL"") 
				+ "" - e.g. http://www.compiere.org"");
			return false;
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MStore.afterSave,MStore.java,"boolean afterSave(boolean newRecord, boolean success)
	{
		if (newRecord && success)
			createMessages();
	    return success;
	}	//	afterSave
"
org.compiere.model.MStore.createEMail,MStore.java,"EMail createEMail (String toEMail, String toName, 
		String subject, String message)
	{
		if (toEMail == null || toEMail.length() == 0)
		{
			log.warning(""No To"");
			return null;
		}
		//
		EMail email = null;
		MClient client = MClient.get(getCtx(), getAD_Client_ID());
		if (client.isServerEMail() && Ini.isClient())
		{
			Server server = CConnection.get().getServer();
			try
			{
				if (server != null)
				{	//	See ServerBean
					email = server.createEMail(getCtx(), getAD_Client_ID(), 
						toEMail, toName, subject, message);
				}
				else
					log.log(Level.WARNING, ""No AppsServer""); 
			}
			catch (RemoteException ex)
			{
				log.log(Level.SEVERE, getName() + "" - AppsServer error"", ex);
			}
		}
		String from = getWStoreEMail();
		if (from == null || from.length() == 0)
			from = client.getRequestEMail();
		if (email == null)
			email = new EMail (client,
				   from, client.getName(), toEMail, toName,
				   subject, message);
		//	Authorizetion
		if (client.isSmtpAuthorization())
		{
			if (getWStoreEMail() != null && getWStoreUser() != null && getWStoreUserPW() != null)
				email.createAuthenticator (getWStoreUser(), getWStoreUserPW());
			else
				email.createAuthenticator (client.getRequestUser(), client.getRequestUserPW());
		}
		//	Bcc
		email.addBcc(from);
		//
		return email;
	}	//	createEMail
"
org.compiere.model.MStore.sendEMail,MStore.java,"boolean sendEMail (String toEMail, String toName, 
		String subject, String message)
	{
		if (message == null || message.length() == 0)
		{
			log.warning(""No Message"");
			return false;
		}
		StringBuffer msgText = new StringBuffer();
		if (getEMailHeader() != null)
			msgText.append(getEMailHeader());
		msgText.append(message);
		if (getEMailFooter() != null)
			msgText.append(getEMailFooter());
		//
		EMail email = createEMail(toEMail, toName, subject, msgText.toString());
		if (email == null)
			return false;
		
		try
		{
			String msg = email.send();
			if (EMail.SENT_OK.equals (email.send ()))
			{
				log.info(""Sent EMail "" + subject + "" to "" + toEMail);
				return true;
			}
			else
			{
				log.warning(""Could NOT Send Email: "" + subject 
					+ "" to "" + toEMail + "": "" + msg
					+ "" ("" + getName() + "")"");
				return false;
			}
		}
		catch (Exception ex)
		{
			log.severe(getName() + "" - "" + ex.getLocalizedMessage());
			return false;
		}
	}	//	sendEMail
"
org.compiere.model.MStore.testEMail,MStore.java,"String testEMail()
	{
		if (getWStoreEMail() == null || getWStoreEMail().length() == 0)
			return ""No Web Store EMail for "" + getName();
		//
		EMail email = createEMail (getWStoreEMail(), ""WebStore"",
			""Compiere WebStore EMail Test"", 
			""Compiere WebStore EMail Test: "" + toString());
		if (email == null)
			return ""Could not create Web Store EMail: "" + getName();
		try
		{
			String msg = email.send();
			if (EMail.SENT_OK.equals (email.send ()))
			{
				log.info(""Sent Test EMail to "" + getWStoreEMail());
				return ""OK"";
			}
			else
			{
				log.warning(""Could NOT send Test Email to "" 
					+ getWStoreEMail() + "": "" + msg);
				return msg;
			}
		}
		catch (Exception ex)
		{
			log.severe(getName() + "" - "" + ex.getLocalizedMessage());
			return ex.getLocalizedMessage();
		}
	}	//	testEMail
"
org.compiere.model.MStore.getMailMsgs,MStore.java,"MMailMsg[] getMailMsgs (boolean reload)
	{
		if (m_msgs != null && !reload)
			return m_msgs;
		ArrayList<MMailMsg> list = new ArrayList<MMailMsg>();
		//
		String sql = ""SELECT * FROM W_MailMsg WHERE W_Store_ID=? ORDER BY MailMsgType"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getW_Store_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MMailMsg (getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		m_msgs = new MMailMsg[list.size ()];
		list.toArray (m_msgs);
		return m_msgs;
	}	//	getMailMsgs
"
org.compiere.model.MStore.getMailMsg,MStore.java,"MMailMsg getMailMsg (String MailMsgType)
	{
		if (m_msgs == null)
			getMailMsgs(false);
		
		//	existing msg
		for (MMailMsg element : m_msgs) {
			if (element.getMailMsgType().equals(MailMsgType))
				return element;
		}
		
		//	create missing
		if (createMessages() == 0)
		{
			log.severe(""Not created/found: "" + MailMsgType);
			return null;
		}
		getMailMsgs(true);
		//	try again
		for (MMailMsg element : m_msgs) {
			if (element.getMailMsgType().equals(MailMsgType))
				return element;
		}
		
		//	nothing found
		log.severe(""Not found: "" + MailMsgType);
		return null;
	}	//	getMailMsg
"
org.compiere.model.MStore.createMessages,MStore.java,"int createMessages()
	{
		String[][] initMsgs = new String[][]
		{
			new String[]{X_W_MailMsg.MAILMSGTYPE_UserVerification,
				""EMail Verification"", 
				""EMail Verification "",
				""Dear "", 
				""\nYou requested the Verification Code: "",
				""\nPlease enter the verification code to get access.""},
			new String[]{X_W_MailMsg.MAILMSGTYPE_UserPassword,
				""Password Request"", 
				""Password Request "",
				""Dear "", 
				""\nWe received a 'Send Password' request from: "",
				""\nYour password is: ""},
			new String[]{X_W_MailMsg.MAILMSGTYPE_Subscribe,
				""Subscription New"", 
				""New Subscription "",
				""Dear "", 
				""\nYou requested to be added to the list: "",
				""\nThanks for your interest.""},
			new String[]{X_W_MailMsg.MAILMSGTYPE_Unsubscribe,
				""Subscription Removed"", 
				""Remove Subscription "",
				""Dear "", 
				""\nYou requested to be removed from the list: "",
				""\nSorry to see you go.  This is effictive immediately.""},
			new String[]{X_W_MailMsg.MAILMSGTYPE_OrderAcknowledgement,
				""Order Acknowledgement"", 
				""Compiere Web - Order "",
				""Dear "", 
				""\nThank you for your purchase: "",
				""\nYou can view your Orders, Invoices, Payments in the Web Store.""
				+ ""\nFrom there, you also download your Assets (Documentation, etc.)""},
			new String[]{X_W_MailMsg.MAILMSGTYPE_PaymentAcknowledgement,
				""Payment Success"", 
				""Compiere Web - Payment "",
				""Dear "", 
				""\nThank you for your payment of "",
				""\nYou can view your Orders, Invoices, Payments in the Web Store.""
				+ ""\nFrom there you also download your Assets (Documentation, etc.)""},
			new String[]{X_W_MailMsg.MAILMSGTYPE_PaymentError,
				""Payment Error"", 
				""Compiere Web - Declined Payment "",
				""Dear "",
				""\nUnfortunately your payment was declined: "",
				""\nPlease check and try again. You can pay later by going to 'My Orders' or 'My Invoices' - or by directly creating a payment in 'My Payments'""},
			new String[]{X_W_MailMsg.MAILMSGTYPE_Request,
				""Request"", 
				""Request "",
				""Dear "",
				""\nThank you for your request: "" + MRequest.SEPARATOR,
				MRequest.SEPARATOR + ""\nPlease check back for updates.""},
				
			new String[]{X_W_MailMsg.MAILMSGTYPE_UserAccount,
				""Welcome Message"", 
				""Welcome"",
				""Welcome to our Web Store"",
				""This is the Validation Code to access information:"",
				""""},
		};
		
		if (m_msgs == null)
			getMailMsgs(false);
		if (m_msgs.length == initMsgs.length)	//	may create a problem if user defined own ones - unlikely
			return 0;		//	nothing to do
		
		int counter = 0;
		for (String[] element : initMsgs) 
		{
			boolean found = false;
			for (MMailMsg element2 : m_msgs) 
			{
				if (element[0].equals(element2.getMailMsgType()))
				{
					found = true;
					break;
				}
			}	//	for all existing msgs
			if (found)
				continue;
			MMailMsg msg = new MMailMsg(this, element[0], element[1], 
				element[2], element[3], element[4], element[5]);
			if (msg.save(get_Trx()))
				counter++;
			else
				log.severe(""Not created MailMsgType="" + element[0]);
		}	//	for all initMsgs
		
		log.info(""#"" + counter);
		m_msgs = null;		//	reset
		return counter;
	}	//	createMessages
"
org.compiere.model.MPOSKeyLayout.get,MPOSKeyLayout.java,"MPOSKeyLayout get (Ctx ctx, int C_POSKeyLayout_ID)
	{
		Integer key = Integer.valueOf (C_POSKeyLayout_ID);
		MPOSKeyLayout retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MPOSKeyLayout (ctx, C_POSKeyLayout_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	} //	get
"
org.compiere.model.MPOSKeyLayout.getKeys,MPOSKeyLayout.java,"MPOSKey[] getKeys (boolean requery)
	{
		if (m_keys != null && !requery)
			return m_keys;
		
		ArrayList<MPOSKey> list = new ArrayList<MPOSKey>();
		String sql = ""SELECT * FROM C_POSKey WHERE C_POSKeyLayout_ID=? ORDER BY SeqNo"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getC_POSKeyLayout_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add(new MPOSKey(getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		m_keys = new MPOSKey[list.size ()];
		list.toArray (m_keys);
		return m_keys;
	}	//	getKeys
"
org.compiere.model.MPOSKeyLayout.getNoOfKeys,MPOSKeyLayout.java,"int getNoOfKeys()
	{
		return getKeys(false).length;
	}	//	getNoOfKeys
"
org.compiere.model.CalloutInvoice.docType,CalloutInvoice.java,"String docType (Ctx ctx, int WindowNo, GridTab mTab, GridField mField,
			Object value, Object oldValue)
	{
		Integer C_DocType_ID = (Integer)value;
		if (C_DocType_ID == null || C_DocType_ID.intValue() == 0)
			return """";

		//	Re-Create new DocNo, if there is a doc number already
		//	and the existing source used a different Sequence number
		String oldDocNo = (String)mTab.getValue(""DocumentNo"");
		boolean newDocNo = oldDocNo == null;
		if (!newDocNo && oldDocNo.startsWith(""<"") && oldDocNo.endsWith("">""))
			newDocNo = true;
		Integer oldC_DocType_ID = (Integer)mTab.getValue(""C_DocType_ID"");
		if ((oldC_DocType_ID == null || oldC_DocType_ID.intValue() == 0)
				&& oldValue != null)	//	get old Target
			oldC_DocType_ID = (Integer)oldValue;

		String sql = ""SELECT d.HasCharges,'N',d.IsDocNoControlled,""
			+ ""s.CurrentNext, d.DocBaseType, s.CurrentNextSys, s.AD_Sequence_ID ""
			+ ""FROM C_DocType d ""
			+ ""LEFT OUTER JOIN AD_Sequence s ON (d.DocNoSequence_ID=s.AD_Sequence_ID) ""
			+ ""WHERE C_DocType_ID=?"";		//	1
		try
		{
			int AD_Sequence_ID = 0;

			//	Get old AD_SeqNo for comparison
			if (oldC_DocType_ID.intValue() != 0)
			{
				PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
				pstmt.setInt(1, oldC_DocType_ID.intValue());
				ResultSet rs = pstmt.executeQuery();
				if (rs.next())
					AD_Sequence_ID = rs.getInt(7);
				rs.close();
				pstmt.close();
			}


			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_DocType_ID.intValue());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				//	Charges - Set Context
				ctx.setContext( WindowNo, ""HasCharges"", rs.getString(1));
				//	DocumentNo
				if (rs.getString(3).equals(""Y""))			//	IsDocNoControlled
				{
					if (AD_Sequence_ID != rs.getInt(7))
						newDocNo = true;
					if (newDocNo)
						if (Ini.isPropertyBool(Ini.P_COMPIERESYS) && Env.getCtx().getAD_Client_ID() < 1000000)
							mTab.setValue(""DocumentNo"", ""<"" + rs.getString(6) + "">"");
						else
							mTab.setValue(""DocumentNo"", ""<"" + rs.getString(4) + "">"");
				}

				//  DocBaseType - Set Context
				String s = rs.getString(5);
				ctx.setContext( WindowNo, ""DocBaseType"", s);
				//  AP Check & AR Credit Memo
				if (s.startsWith(""AP""))
					mTab.setValue(""PaymentRule"", ""S"");    //  Check
				else if (s.endsWith(""C""))
					mTab.setValue(""PaymentRule"", ""P"");    //  OnCredit
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
			return e.getLocalizedMessage();
		}
		return """";
	}	//	docType
"
org.compiere.model.CalloutInvoice.bPartner,CalloutInvoice.java,"String bPartner (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer C_BPartner_ID = (Integer)value;
		if (C_BPartner_ID == null || C_BPartner_ID.intValue() == 0)
			return """";

		String sql = ""SELECT p.AD_Language,p.C_PaymentTerm_ID,""
			+ "" COALESCE(p.M_PriceList_ID,g.M_PriceList_ID) AS M_PriceList_ID, p.PaymentRule,p.POReference,""
			+ "" p.SO_Description,p.IsDiscountPrinted,""
			+ "" p.SO_CreditLimit, p.SO_CreditLimit-p.SO_CreditUsed AS CreditAvailable,""
			+ "" l.C_BPartner_Location_ID,c.AD_User_ID,""
			+ "" COALESCE(p.PO_PriceList_ID,g.PO_PriceList_ID) AS PO_PriceList_ID, p.PaymentRulePO,p.PO_PaymentTerm_ID ""
			+ ""FROM C_BPartner p""
			+ "" INNER JOIN C_BP_Group g ON (p.C_BP_Group_ID=g.C_BP_Group_ID)""
			+ "" LEFT OUTER JOIN C_BPartner_Location l ON (p.C_BPartner_ID=l.C_BPartner_ID AND l.IsBillTo='Y' AND l.IsActive='Y')""
			+ "" LEFT OUTER JOIN AD_User c ON (p.C_BPartner_ID=c.C_BPartner_ID AND c.IsActive='Y') ""
			+ ""WHERE p.C_BPartner_ID=? AND p.IsActive='Y'"";		//	#1

		boolean IsSOTrx = ctx.isSOTrx(WindowNo);
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_BPartner_ID.intValue());
			ResultSet rs = pstmt.executeQuery();
			//
			if (rs.next())
			{
				//	PriceList & IsTaxIncluded & Currency
				Integer ii = Integer.valueOf(rs.getInt(IsSOTrx ? ""M_PriceList_ID"" : ""PO_PriceList_ID""));
				if (!rs.wasNull())
					mTab.setValue(""M_PriceList_ID"", ii);
				else
				{	//	get default PriceList
					int i = ctx.getContextAsInt( ""#M_PriceList_ID"");
					if (i != 0)
						mTab.setValue(""M_PriceList_ID"", Integer.valueOf(i));
				}

				//	PaymentRule
				String s = rs.getString(IsSOTrx ? ""PaymentRule"" : ""PaymentRulePO"");
				if (s != null && s.length() != 0)
				{
					if (ctx.getContext( WindowNo, ""DocBaseType"").endsWith(""C""))	//	Credits are Payment Term
						s = ""P"";
					else if (IsSOTrx && (s.equals(""S"") || s.equals(""U"")))	//	No Check/Transfer for SO_Trx
						s = ""P"";											//  Payment Term
					mTab.setValue(""PaymentRule"", s);
				}
				//  Payment Term
				ii = Integer.valueOf(rs.getInt(IsSOTrx ? ""C_PaymentTerm_ID"" : ""PO_PaymentTerm_ID""));
				if (!rs.wasNull())
					mTab.setValue(""C_PaymentTerm_ID"", ii);

				//	Location
				int locID = rs.getInt(""C_BPartner_Location_ID"");
				//	overwritten by InfoBP selection - works only if InfoWindow
				//	was used otherwise creates error (uses last value, may belong to differnt BP)
				if (C_BPartner_ID.toString().equals(ctx.getContext( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_BPartner_ID"")))
				{
					String loc = ctx.getContext( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_BPartner_Location_ID"");
					if (loc.length() > 0)
						locID = Integer.parseInt(loc);
				}
				if (locID == 0)
					mTab.setValue(""C_BPartner_Location_ID"", null);
				else
					mTab.setValue(""C_BPartner_Location_ID"", Integer.valueOf(locID));

				//	Contact - overwritten by InfoBP selection
				int contID = rs.getInt(""AD_User_ID"");
				if (C_BPartner_ID.toString().equals(ctx.getContext( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_BPartner_ID"")))
				{
					String cont = ctx.getContext( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""AD_User_ID"");
					if (cont.length() > 0)
						contID = Integer.parseInt(cont);
				}
				if (contID == 0)
					mTab.setValue(""AD_User_ID"", null);
				else
					mTab.setValue(""AD_User_ID"", Integer.valueOf(contID));

				//	CreditAvailable
				if (IsSOTrx)
				{
					double CreditLimit = rs.getDouble(""SO_CreditLimit"");
					if (CreditLimit != 0)
					{
						double CreditAvailable = rs.getDouble(""CreditAvailable"");
						if (!rs.wasNull() && CreditAvailable < 0)
							mTab.fireDataStatusEEvent(""CreditLimitOver"",
								DisplayType.getNumberFormat(DisplayTypeConstants.Amount).format(CreditAvailable),
								false);
					}
				}

				//	PO Reference
				s = rs.getString(""POReference"");
				if (s != null && s.length() != 0)
					mTab.setValue(""POReference"", s);
				else
					mTab.setValue(""POReference"", null);
				//	SO Description
				s = rs.getString(""SO_Description"");
				if (s != null && s.trim().length() != 0)
					mTab.setValue(""Description"", s);
				//	IsDiscountPrinted
				s = rs.getString(""IsDiscountPrinted"");
				if (s != null && s.length() != 0)
					mTab.setValue(""IsDiscountPrinted"", s);
				else
					mTab.setValue(""IsDiscountPrinted"", ""N"");
				//
				mTab.setValue(""C_Project_ID"", null);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, ""bPartner"", e);
			return e.getLocalizedMessage();
		}

		return """";
	}	//	bPartner
"
org.compiere.model.CalloutInvoice.paymentTerm,CalloutInvoice.java,"String paymentTerm (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer C_PaymentTerm_ID = (Integer)value;
		int C_Invoice_ID = ctx.getContextAsInt( WindowNo, ""C_Invoice_ID"");
		if (C_PaymentTerm_ID == null || C_PaymentTerm_ID.intValue() == 0
			|| C_Invoice_ID == 0)	//	not saved yet
			return """";
		//
		MPaymentTerm pt = new MPaymentTerm (ctx, C_PaymentTerm_ID.intValue(), null);
		if (pt.get_ID() == 0)
			return ""PaymentTerm not found"";

		boolean valid = pt.apply (C_Invoice_ID);
		mTab.setValue(""IsPayScheduleValid"", valid ? ""Y"" : ""N"");

		return """";
	}	//	paymentTerm
"
org.compiere.model.CalloutInvoice.dateInvoiced,CalloutInvoice.java,"String dateInvoiced (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		if (isCalloutActive())		//	assuming it is resetting value
			return """";
		if (value == null || !(value instanceof Timestamp))
			return """";
		mTab.setValue(""DateAcct"", value);

		return setPriceListVersion(ctx, WindowNo, mTab);
	}	//	dateAcct
"
org.compiere.model.CalloutInvoice.setPriceListVersion,CalloutInvoice.java,"String setPriceListVersion(Ctx ctx, int WindowNo, GridTab mTab)
	{
		Integer M_PriceList_ID = ctx.getContextAsInt( WindowNo, ""M_PriceList_ID"");
		if (M_PriceList_ID == null || M_PriceList_ID.intValue()== 0)
			return """";

		Timestamp invoiceDate = new Timestamp(ctx.getContextAsTime( WindowNo, ""DateInvoiced""));
		if (invoiceDate == null)
			return """";

		String sql = ""SELECT pl.IsTaxIncluded,pl.EnforcePriceLimit,pl.C_Currency_ID,c.StdPrecision,""
			+ ""plv.M_PriceList_Version_ID,plv.ValidFrom ""
			+ ""FROM M_PriceList pl,C_Currency c,M_PriceList_Version plv ""
			+ ""WHERE pl.C_Currency_ID=c.C_Currency_ID""
			+ "" AND pl.M_PriceList_ID=plv.M_PriceList_ID""
			+ "" AND pl.M_PriceList_ID=? ""						//	1
			+ "" AND plv.ValidFrom <=? ""							//  2
			+ "" AND plv.IsActive='Y' ""
			+ ""ORDER BY plv.ValidFrom DESC"";
		//	Use newest price list - may not be future
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, M_PriceList_ID.intValue());
			pstmt.setTimestamp(2, invoiceDate);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				//	Tax Included
				mTab.setValue(""IsTaxIncluded"", Boolean.valueOf(""Y"".equals(rs.getString(1))));
				//	Price Limit Enforce
				ctx.setContext(WindowNo, ""EnforcePriceLimit"", rs.getString(2));
				//	Currency
				Integer ii = Integer.valueOf(rs.getInt(3));
				mTab.setValue(""C_Currency_ID"", ii);
				//	PriceList Version
				ctx.setContext(WindowNo, ""M_PriceList_Version_ID"", rs.getInt(5));
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
			return e.getLocalizedMessage();
		}
		return """";
	}
"
org.compiere.model.CalloutInvoice.priceList,CalloutInvoice.java,"String priceList (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer M_PriceList_ID = (Integer)value;
		if (M_PriceList_ID == null || M_PriceList_ID.intValue()== 0)
			return """";

		return setPriceListVersion(ctx, WindowNo, mTab);
	}	//	priceList
"
org.compiere.model.CalloutInvoice.product,CalloutInvoice.java,"String product (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer M_Product_ID = (Integer)value;
		if (M_Product_ID == null || M_Product_ID.intValue() == 0)
			return """";
		setCalloutActive(true);
		mTab.setValue(""C_Charge_ID"", null);

		//	Set Attribute
		if (ctx.getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_Product_ID"") == M_Product_ID.intValue()
			&& ctx.getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_AttributeSetInstance_ID"") != 0)
			mTab.setValue(""M_AttributeSetInstance_ID"", Integer.valueOf(ctx.getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_AttributeSetInstance_ID"")));
		else
			mTab.setValue(""M_AttributeSetInstance_ID"", null);

		/*****	Price Calculation see also qty	****/
		boolean IsSOTrx = ctx.getContext(WindowNo, ""IsSOTrx"").equals(""Y"");
		int C_BPartner_ID = ctx.getContextAsInt(WindowNo, WindowNo, ""C_BPartner_ID"");
		BigDecimal Qty = (BigDecimal)mTab.getValue(""QtyInvoiced"");
		MProductPricing pp = new MProductPricing (ctx.getAD_Client_ID(), ctx.getAD_Org_ID(),
				M_Product_ID.intValue(), C_BPartner_ID, Qty, IsSOTrx);
		//
		int M_PriceList_ID = ctx.getContextAsInt( WindowNo, ""M_PriceList_ID"");
		pp.setM_PriceList_ID(M_PriceList_ID);
		int M_PriceList_Version_ID = ctx.getContextAsInt( WindowNo, ""M_PriceList_Version_ID"");
		pp.setM_PriceList_Version_ID(M_PriceList_Version_ID);
		long time = ctx.getContextAsTime(WindowNo, ""DateInvoiced"");
		pp.setPriceDate(time);

		pp.calculatePrice();
		if (!pp.isCalculated())
		{
			mTab.setValue(""PriceList"", BigDecimal.ZERO);
			mTab.setValue(""PriceLimit"", BigDecimal.ZERO);
			mTab.setValue(""PriceActual"", BigDecimal.ZERO);
			mTab.setValue(""PriceEntered"", BigDecimal.ZERO);
			setCalloutActive(false);
			return Msg.getMsg(ctx, ""ProductNotOnPriceList"");
		}

		//
		mTab.setValue(""PriceList"", pp.getPriceList());
		mTab.setValue(""PriceLimit"", pp.getPriceLimit());
		mTab.setValue(""PriceActual"", pp.getPriceStd());
		mTab.setValue(""PriceEntered"", pp.getPriceStd());
		mTab.setValue(""C_Currency_ID"", Integer.valueOf(pp.getC_Currency_ID()));
	//	mTab.setValue(""Discount"", pp.getDiscount());
		int newC_UOM_ID = Integer.valueOf(pp.getC_UOM_ID());
		mTab.setValue(""C_UOM_ID"", newC_UOM_ID);

		// since UOM specified is changed (as a result of tab out from product), recalculate QtyEntered and QtyInvoiced based on new UOM
		BigDecimal QtyEntered = (BigDecimal)mTab.getValue(""QtyEntered"");
		if(newC_UOM_ID != 0)
		{
			BigDecimal QtyEntered1 = QtyEntered.setScale(MUOM.getPrecision(ctx, newC_UOM_ID), BigDecimal.ROUND_HALF_UP);
			if (QtyEntered.compareTo(QtyEntered1) != 0)
			{
				log.fine(""Corrected QtyEntered Scale UOM="" + newC_UOM_ID
					+ ""; QtyEntered="" + QtyEntered + ""->"" + QtyEntered1);
				QtyEntered = QtyEntered1;
				mTab.setValue(""QtyEntered"", QtyEntered);
			}
		}

		// UOM Conversion
		BigDecimal QtyInvoiced = MUOMConversion.convertProductFrom (ctx, M_Product_ID.intValue(), newC_UOM_ID, QtyEntered);
		if (QtyInvoiced == null)
			QtyInvoiced = QtyEntered;

		// rounding Qty Invoiced. Enforce product UOM
		if(M_Product_ID.intValue() !=0 )
		{
			int productUOMPrecision = MProduct.get(ctx, M_Product_ID.intValue()).getUOMPrecision();
			QtyInvoiced = QtyInvoiced.setScale(productUOMPrecision, BigDecimal.ROUND_HALF_UP);
		}
		mTab.setValue(""QtyInvoiced"", QtyInvoiced);

		ctx.setContext( WindowNo, ""EnforcePriceLimit"", pp.isEnforcePriceLimit() ? ""Y"" : ""N"");
		ctx.setContext( WindowNo, ""DiscountSchema"", pp.isDiscountSchema() ? ""Y"" : ""N"");
		//
		setCalloutActive(false);
		return tax (ctx, WindowNo, mTab, mField, value);
	}	//	product
"
org.compiere.model.CalloutInvoice.charge,CalloutInvoice.java,"String charge (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer C_Charge_ID = (Integer)value;
		if (C_Charge_ID == null || C_Charge_ID.intValue() == 0)
			return """";

		//	No Product defined
		if (mTab.getValue(""M_Product_ID"") != null)
		{
			mTab.setValue(""C_Charge_ID"", null);
			return ""ChargeExclusively"";
		}
		mTab.setValue(""M_AttributeSetInstance_ID"", null);
		mTab.setValue(""S_ResourceAssignment_ID"", null);
		mTab.setValue(""C_UOM_ID"", Integer.valueOf(100));	//	EA

		ctx.setContext( WindowNo, ""DiscountSchema"", ""N"");
		String sql = ""SELECT ChargeAmt FROM C_Charge WHERE C_Charge_ID=?"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_Charge_ID.intValue());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				mTab.setValue (""PriceEntered"", rs.getBigDecimal (1));
				mTab.setValue (""PriceActual"", rs.getBigDecimal (1));
				mTab.setValue (""PriceLimit"", Env.ZERO);
				mTab.setValue (""PriceList"", Env.ZERO);
				mTab.setValue (""Discount"", Env.ZERO);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql + e);
			return e.getLocalizedMessage();
		}
		//
		return tax (ctx, WindowNo, mTab, mField, value);
	}	//	charge
"
org.compiere.model.CalloutInvoice.tax,CalloutInvoice.java,"String tax (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		String column = mField.getColumnName();
		if (value == null)
			return """";

		//	Check Product
		int M_Product_ID = 0;
		if (column.equals(""M_Product_ID""))
			M_Product_ID = ((Integer)value).intValue();
		else
			M_Product_ID = ctx.getContextAsInt( WindowNo, ""M_Product_ID"");
		int C_Charge_ID = 0;
		if (column.equals(""C_Charge_ID""))
			C_Charge_ID = ((Integer)value).intValue();
		else
			C_Charge_ID = ctx.getContextAsInt( WindowNo, ""C_Charge_ID"");
		log.fine(""Product="" + M_Product_ID + "", C_Charge_ID="" + C_Charge_ID);
		if (M_Product_ID == 0 && C_Charge_ID == 0)
			return amt (ctx, WindowNo, mTab, mField, value);	//

		//	Check Partner Location
		int shipC_BPartner_Location_ID = ctx.getContextAsInt( WindowNo, ""C_BPartner_Location_ID"");
		if (shipC_BPartner_Location_ID == 0)
			return amt (ctx, WindowNo, mTab, mField, value);	//
		log.fine(""Ship BP_Location="" + shipC_BPartner_Location_ID);
		int billC_BPartner_Location_ID = shipC_BPartner_Location_ID;
		log.fine(""Bill BP_Location="" + billC_BPartner_Location_ID);

		//	Dates
		Timestamp billDate = new Timestamp(ctx.getContextAsTime(WindowNo, ""DateInvoiced""));
		log.fine(""Bill Date="" + billDate);
		Timestamp shipDate = billDate;
		log.fine(""Ship Date="" + shipDate);

		int AD_Org_ID = ctx.getContextAsInt( WindowNo, ""AD_Org_ID"");
		log.fine(""Org="" + AD_Org_ID);

		int M_Warehouse_ID = ctx.getContextAsInt( ""#M_Warehouse_ID"");
		log.fine(""Warehouse="" + M_Warehouse_ID);

		//
		int C_Tax_ID = Tax.get(ctx, M_Product_ID, C_Charge_ID, billDate, shipDate,
			AD_Org_ID, M_Warehouse_ID, billC_BPartner_Location_ID, shipC_BPartner_Location_ID,
			ctx.getContext( WindowNo, ""IsSOTrx"").equals(""Y""));
		log.info(""Tax ID="" + C_Tax_ID);
		//
		if (C_Tax_ID == 0)
			mTab.fireDataStatusEEvent(CLogger.retrieveError());
		else
			mTab.setValue(""C_Tax_ID"", Integer.valueOf(C_Tax_ID));
		//
		return amt (ctx, WindowNo, mTab, mField, value);
	}	//	tax
"
org.compiere.model.CalloutInvoice.amt,CalloutInvoice.java,"String amt (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		if (isCalloutActive() || value == null)
			return """";
		setCalloutActive(true);

	//	log.log(Level.WARNING,""amt - init"");
		int C_UOM_To_ID = ctx.getContextAsInt( WindowNo, ""C_UOM_ID"");
		int M_Product_ID = ctx.getContextAsInt( WindowNo, ""M_Product_ID"");
		int M_PriceList_ID = ctx.getContextAsInt( WindowNo, ""M_PriceList_ID"");
		//int StdPrecision = MPriceList.getPricePrecision(ctx, M_PriceList_ID);
		// Using Currency Precision. Not PriceList precision
		int C_Invoice_ID = ctx.getContextAsInt( WindowNo, ""C_Invoice_ID"");
		int StdPrecision = DB.getSQLValue(null,
				""SELECT c.StdPrecision FROM C_Currency c INNER JOIN C_Invoice x ON (x.C_Currency_ID=c.C_Currency_ID) WHERE x.C_Invoice_ID=?"",
				C_Invoice_ID);
		if (StdPrecision < 0)
		{
			log.warning(""Precision="" + StdPrecision + "" - set to 2"");
			StdPrecision = 2;
		}

		BigDecimal QtyEntered, QtyInvoiced, PriceEntered, PriceActual, PriceLimit, Discount, PriceList;
		//	get values
		QtyEntered = (BigDecimal)mTab.getValue(""QtyEntered"");
		QtyInvoiced = (BigDecimal)mTab.getValue(""QtyInvoiced"");
		log.fine(""QtyEntered="" + QtyEntered + "", Invoiced="" + QtyInvoiced + "", UOM="" + C_UOM_To_ID);
		//
		PriceEntered = (BigDecimal)mTab.getValue(""PriceEntered"");
		PriceActual = (BigDecimal)mTab.getValue(""PriceActual"");
	//	Discount = (BigDecimal)mTab.getValue(""Discount"");
		PriceLimit = (BigDecimal)mTab.getValue(""PriceLimit"");
		PriceList = (BigDecimal)mTab.getValue(""PriceList"");
		log.fine(""PriceList="" + PriceList + "", Limit="" + PriceLimit + "", Precision="" + StdPrecision);
		log.fine(""PriceEntered="" + PriceEntered + "", Actual="" + PriceActual);// + "", Discount="" + Discount);

		//	Qty changed - recalc price
		if ((mField.getColumnName().equals(""QtyInvoiced"")
			|| mField.getColumnName().equals(""QtyEntered"")
			|| mField.getColumnName().equals(""M_Product_ID""))
			&& !""N"".equals(ctx.getContext( WindowNo, ""DiscountSchema"")))
		{
			int C_BPartner_ID = ctx.getContextAsInt( WindowNo, ""C_BPartner_ID"");
			if (mField.getColumnName().equals(""QtyEntered""))
				QtyInvoiced = MUOMConversion.convertProductTo (ctx, M_Product_ID,
					C_UOM_To_ID, QtyEntered);
			if (QtyInvoiced == null)
				QtyInvoiced = QtyEntered;
			boolean IsSOTrx = ctx.getContext( WindowNo, ""IsSOTrx"").equals(""Y"");
			MProductPricing pp = new MProductPricing (ctx.getAD_Client_ID(), ctx.getAD_Org_ID(),
					M_Product_ID, C_BPartner_ID, QtyInvoiced, IsSOTrx);
			pp.setM_PriceList_ID(M_PriceList_ID);
			int M_PriceList_Version_ID = ctx.getContextAsInt( WindowNo, ""M_PriceList_Version_ID"");
			pp.setM_PriceList_Version_ID(M_PriceList_Version_ID);
			long date = ctx.getContextAsTime(WindowNo, ""DateInvoiced"");
			pp.setPriceDate(date);
			//
			PriceEntered = MUOMConversion.convertProductFrom (ctx, M_Product_ID,
				C_UOM_To_ID, pp.getPriceStd());
			if (PriceEntered == null)
				PriceEntered = pp.getPriceStd();
			//
			log.fine(""amt - QtyChanged -> PriceActual="" + pp.getPriceStd()
				+ "", PriceEntered="" + PriceEntered + "", Discount="" + pp.getDiscount());
			PriceActual = pp.getPriceStd();
			mTab.setValue(""PriceActual"", PriceActual);
		//	mTab.setValue(""Discount"", pp.getDiscount());
			mTab.setValue(""PriceEntered"", PriceEntered);
			ctx.setContext( WindowNo, ""DiscountSchema"", pp.isDiscountSchema() ? ""Y"" : ""N"");
		}
		else if (mField.getColumnName().equals(""PriceActual""))
		{
			PriceActual = (BigDecimal)value;
			PriceEntered = MUOMConversion.convertProductFrom (ctx, M_Product_ID,
				C_UOM_To_ID, PriceActual);
			if (PriceEntered == null)
				PriceEntered = PriceActual;
			//
			log.fine(""amt - PriceActual="" + PriceActual
				+ "" -> PriceEntered="" + PriceEntered);
			mTab.setValue(""PriceEntered"", PriceEntered);
		}
		else if (mField.getColumnName().equals(""PriceEntered""))
		{
			PriceEntered = (BigDecimal)value;
			PriceActual = MUOMConversion.convertProductTo (ctx, M_Product_ID,
				C_UOM_To_ID, PriceEntered);
			if (PriceActual == null)
				PriceActual = PriceEntered;
			//
			log.fine(""amt - PriceEntered="" + PriceEntered
				+ "" -> PriceActual="" + PriceActual);
			mTab.setValue(""PriceActual"", PriceActual);
		}

		/**  Discount entered - Calculate Actual/Entered
		if (mField.getColumnName().equals(""Discount""))
		{
			PriceActual = new BigDecimal ((100.0 - Discount.doubleValue()) / 100.0 * PriceList.doubleValue());
			if (PriceActual.scale() > StdPrecision)
				PriceActual = PriceActual.setScale(StdPrecision, BigDecimal.ROUND_HALF_UP);
			PriceEntered = MUOMConversion.convertProductFrom (ctx, M_Product_ID,
				C_UOM_To_ID, PriceActual);
			if (PriceEntered == null)
				PriceEntered = PriceActual;
			mTab.setValue(""PriceActual"", PriceActual);
			mTab.setValue(""PriceEntered"", PriceEntered);
		}
		//	calculate Discount
		else
		{
			if (PriceList.intValue() == 0)
				Discount = Env.ZERO;
			else
				Discount = new BigDecimal ((PriceList.doubleValue() - PriceActual.doubleValue()) / PriceList.doubleValue() * 100.0);
			if (Discount.scale() > 2)
				Discount = Discount.setScale(2, BigDecimal.ROUND_HALF_UP);
			mTab.setValue(""Discount"", Discount);
		}
		log.fine(""amt = PriceEntered="" + PriceEntered + "", Actual"" + PriceActual + "", Discount="" + Discount);
		/* */

		//	Check PriceLimit
		String epl = ctx.getContext( WindowNo, ""EnforcePriceLimit"");
		boolean enforce = ctx.isSOTrx(WindowNo) && epl != null && epl.equals(""Y"");
		if (enforce && MRole.getDefault().isOverwritePriceLimit())
			enforce = false;
		//	Check Price Limit?
		if (enforce && PriceLimit.doubleValue() != 0.0
		  && PriceActual.compareTo(PriceLimit) < 0)
		{
			PriceActual = PriceLimit;
			PriceEntered = MUOMConversion.convertProductFrom (ctx, M_Product_ID,
				C_UOM_To_ID, PriceLimit);
			if (PriceEntered == null)
				PriceEntered = PriceLimit;
			log.fine(""amt =(under) PriceEntered="" + PriceEntered + "", Actual"" + PriceLimit);
			mTab.setValue (""PriceActual"", PriceLimit);
			mTab.setValue (""PriceEntered"", PriceEntered);
			mTab.fireDataStatusEEvent (""UnderLimitPrice"", """", false);
			//	Repeat Discount calc
			if (PriceList.intValue() != 0)
			{
				Discount = new BigDecimal ((PriceList.doubleValue () - PriceActual.doubleValue ()) / PriceList.doubleValue () * 100.0);
				if (Discount.scale () > 2)
					Discount = Discount.setScale (2, BigDecimal.ROUND_HALF_UP);
			//	mTab.setValue (""Discount"", Discount);
			}
		}

		//	Line Net Amt
		BigDecimal LineNetAmt = QtyInvoiced.multiply(PriceActual);
		if (LineNetAmt.scale() > StdPrecision)
			LineNetAmt = LineNetAmt.setScale(StdPrecision, BigDecimal.ROUND_HALF_UP);
		log.info(""amt = LineNetAmt="" + LineNetAmt);
		mTab.setValue(""LineNetAmt"", LineNetAmt);

		//	Calculate Tax Amount for PO
		boolean IsSOTrx = ""Y"".equals(ctx.getContext( WindowNo, ""IsSOTrx""));
		if (!IsSOTrx)
		{
			BigDecimal TaxAmt = Env.ZERO;
			if (mField.getColumnName().equals(""TaxAmt""))
			{
				TaxAmt = (BigDecimal)mTab.getValue(""TaxAmt"");
			}
			else
			{
				Integer taxID = (Integer)mTab.getValue(""C_Tax_ID"");
				if (taxID != null)
				{
					int C_Tax_ID = taxID.intValue();
					MTax tax = new MTax (ctx, C_Tax_ID, null);
					TaxAmt = tax.calculateTax(LineNetAmt, isTaxIncluded(WindowNo), StdPrecision);
					mTab.setValue(""TaxAmt"", TaxAmt);
				}
			}
			//	Add it up
			mTab.setValue(""LineTotalAmt"", LineNetAmt.add(TaxAmt));
		}

		setCalloutActive(false);
		return """";
	}	//	amt
"
org.compiere.model.CalloutInvoice.isTaxIncluded,CalloutInvoice.java,"boolean isTaxIncluded (int WindowNo)
	{
		Ctx ctx = Env.getCtx();
		String ss = ctx.getContext( WindowNo, ""IsTaxIncluded"");
		//	Not Set Yet
		if (ss.length() == 0)
		{
			int M_PriceList_ID = Env.getCtx().getContextAsInt(WindowNo, ""M_PriceList_ID"");
			if (M_PriceList_ID == 0)
				return false;
			ss = DB.getSQLValueString(null,
				""SELECT IsTaxIncluded FROM M_PriceList WHERE M_PriceList_ID=?"",
				M_PriceList_ID);
			if (ss == null)
				ss = ""N"";
			ctx.setContext(WindowNo, ""IsTaxIncluded"", ss);
		}
		return ""Y"".equals(ss);
	}	//	isTaxIncluded
"
org.compiere.model.CalloutInvoice.qty,CalloutInvoice.java,"String qty (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		if (isCalloutActive() || value == null)
			return """";
		setCalloutActive(true);

		int M_Product_ID = ctx.getContextAsInt( WindowNo, ""M_Product_ID"");
	//	log.log(Level.WARNING,""qty - init - M_Product_ID="" + M_Product_ID);
		BigDecimal QtyInvoiced, QtyEntered, PriceActual, PriceEntered;

		//	No Product
		/*if (M_Product_ID == 0)
		{
			QtyEntered = (BigDecimal)mTab.getValue(""QtyEntered"");
			mTab.setValue(""QtyInvoiced"", QtyEntered);
		}*/
		//	UOM Changed - convert from Entered -> Product
		/*else*/ if (mField.getColumnName().equals(""C_UOM_ID""))
		{
			int C_UOM_To_ID = ((Integer)value).intValue();
			QtyEntered = (BigDecimal)mTab.getValue(""QtyEntered"");

			// Do rounding on Qty Entered only if UOM is specified
			if(C_UOM_To_ID != 0)
			{
				BigDecimal QtyEntered1 = QtyEntered.setScale(MUOM.getPrecision(ctx, C_UOM_To_ID), BigDecimal.ROUND_HALF_UP);
				if (QtyEntered.compareTo(QtyEntered1) != 0)
				{
					log.fine(""Corrected QtyEntered Scale UOM="" + C_UOM_To_ID
						+ ""; QtyEntered="" + QtyEntered + ""->"" + QtyEntered1);
					QtyEntered = QtyEntered1;
					mTab.setValue(""QtyEntered"", QtyEntered);
				}
			}

			// UOM Conversion
			QtyInvoiced = MUOMConversion.convertProductFrom (ctx, M_Product_ID,
				C_UOM_To_ID, QtyEntered);
			if (QtyInvoiced == null)
				QtyInvoiced = QtyEntered;

			// rounding Qty Invoiced. Enforce product UOM
			if(M_Product_ID !=0 )
			{
				int productUOMPrecision = MProduct.get(ctx, M_Product_ID).getUOMPrecision();
				QtyInvoiced = QtyInvoiced.setScale(productUOMPrecision, BigDecimal.ROUND_HALF_UP);
			}

			boolean conversion = QtyEntered.compareTo(QtyInvoiced) != 0;
			PriceActual = (BigDecimal)mTab.getValue(""PriceActual"");
			PriceEntered = MUOMConversion.convertProductFrom (ctx, M_Product_ID,
				C_UOM_To_ID, PriceActual);
			if (PriceEntered == null)
				PriceEntered = PriceActual;
			log.fine(""qty - UOM="" + C_UOM_To_ID
				+ "", QtyEntered/PriceActual="" + QtyEntered + ""/"" + PriceActual
				+ "" -> "" + conversion
				+ "" QtyInvoiced/PriceEntered="" + QtyInvoiced + ""/"" + PriceEntered);
			ctx.setContext( WindowNo, ""UOMConversion"", conversion ? ""Y"" : ""N"");
			mTab.setValue(""QtyInvoiced"", QtyInvoiced);
			mTab.setValue(""PriceEntered"", PriceEntered);
		}
		//	QtyEntered changed - calculate QtyInvoiced
		else if (mField.getColumnName().equals(""QtyEntered""))
		{
			int C_UOM_To_ID = ctx.getContextAsInt( WindowNo, ""C_UOM_ID"");
			QtyEntered = (BigDecimal)value;

			// Do rounding on Qty Entered only if UOM is specified
			if(C_UOM_To_ID != 0)
			{
				BigDecimal QtyEntered1 = QtyEntered.setScale(MUOM.getPrecision(ctx, C_UOM_To_ID), BigDecimal.ROUND_HALF_UP);
				if (QtyEntered.compareTo(QtyEntered1) != 0)
				{
					log.fine(""Corrected QtyEntered Scale UOM="" + C_UOM_To_ID
						+ ""; QtyEntered="" + QtyEntered + ""->"" + QtyEntered1);
					QtyEntered = QtyEntered1;
					mTab.setValue(""QtyEntered"", QtyEntered);
				}
			}

			// UOM conversion
			QtyInvoiced = MUOMConversion.convertProductFrom (ctx, M_Product_ID,
				C_UOM_To_ID, QtyEntered);
			if (QtyInvoiced == null)
				QtyInvoiced = QtyEntered;

			// rounding Qty Invoiced. Enforce product UOM
			if(M_Product_ID !=0 )
			{
				int productUOMPrecision = MProduct.get(ctx, M_Product_ID).getUOMPrecision();
				QtyInvoiced = QtyInvoiced.setScale(productUOMPrecision, BigDecimal.ROUND_HALF_UP);
			}
			boolean conversion = QtyEntered.compareTo(QtyInvoiced) != 0;
			log.fine(""qty - UOM="" + C_UOM_To_ID
				+ "", QtyEntered="" + QtyEntered
				+ "" -> "" + conversion
				+ "" QtyInvoiced="" + QtyInvoiced);
			ctx.setContext( WindowNo, ""UOMConversion"", conversion ? ""Y"" : ""N"");
			mTab.setValue(""QtyInvoiced"", QtyInvoiced);
		}
		//	QtyInvoiced changed - calculate QtyEntered (should not happen)
		else if (mField.getColumnName().equals(""QtyInvoiced""))
		{
			int C_UOM_To_ID = ctx.getContextAsInt( WindowNo, ""C_UOM_ID"");
			QtyInvoiced = (BigDecimal)value;
			int precision = MProduct.get(ctx, M_Product_ID).getUOMPrecision();
			BigDecimal QtyInvoiced1 = QtyInvoiced.setScale(precision, BigDecimal.ROUND_HALF_UP);
			if (QtyInvoiced.compareTo(QtyInvoiced1) != 0)
			{
				log.fine(""Corrected QtyInvoiced Scale ""
					+ QtyInvoiced + ""->"" + QtyInvoiced1);
				QtyInvoiced = QtyInvoiced1;
				mTab.setValue(""QtyInvoiced"", QtyInvoiced);
			}
			QtyEntered = MUOMConversion.convertProductTo (ctx, M_Product_ID,
				C_UOM_To_ID, QtyInvoiced);
			if (QtyEntered == null)
				QtyEntered = QtyInvoiced;
			boolean conversion = QtyInvoiced.compareTo(QtyEntered) != 0;
			log.fine(""qty - UOM="" + C_UOM_To_ID
				+ "", QtyInvoiced="" + QtyInvoiced
				+ "" -> "" + conversion
				+ "" QtyEntered="" + QtyEntered);
			ctx.setContext( WindowNo, ""UOMConversion"", conversion ? ""Y"" : ""N"");
			mTab.setValue(""QtyEntered"", QtyEntered);
		}
		//
		setCalloutActive(false);
		return """";
	}	//	qty
"
org.compiere.model.MBPartnerProduct.getMinDate,MBPartnerProduct.java,"Timestamp getMinDate(Ctx ctx, Timestamp shipDate, 
			int C_BPartner_ID, int M_Product_ID)
	{
		Timestamp retValue = shipDate;
		//
		String sql = ""SELECT bpp.ShelfLifeMinPct,bpp.ShelfLifeMinDays,""	//	1..2
			+ "" p.M_Product_ID, p.GuaranteeDays, p.GuaranteeDaysMin,""	//	3..5
			+ "" bp.C_BPartner_ID, bp.ShelfLifeMinPct ""					//	6..7
			+ ""FROM M_Product p""
			+ "" INNER JOIN C_BPartner bp ON (bp.C_BPartner_ID=?)""
			+ "" LEFT OUTER JOIN C_BPartner_Product bpp ON (p.M_Product_ID=bpp.M_Product_ID""
				+ "" AND bp.C_BPartner_ID=bpp.C_BPartner_ID)""
			+ ""WHERE p.M_Product_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_BPartner_ID);
			pstmt.setInt(2, M_Product_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				//	Product
				int GuaranteeDays = rs.getInt(4);
				int GuaranteeDaysMin = rs.getInt(5);
				if (GuaranteeDaysMin > 0)
				{
					retValue = TimeUtil.addDays(shipDate, GuaranteeDaysMin);
					log.fine(""GuaranteeDaysMin="" + GuaranteeDaysMin 
						+ "" - ShipDate="" + shipDate + "" -> "" + retValue);
				}
				//	Product BPartner
				boolean foundBPP = false;
				BigDecimal ShelfLifeMinPct = rs.getBigDecimal(1);
				if (ShelfLifeMinPct != null && ShelfLifeMinPct.signum() > 0)
				{
					if (GuaranteeDays == 0)
						log.warning(""No GuaranteeDays in Product to calculate BPP ShelfLifeMinPct="" + ShelfLifeMinPct);
					else
					{
						int days = GuaranteeDays * 100 / ShelfLifeMinPct.intValue();
						Timestamp newDate = TimeUtil.addDays(shipDate, days);
						log.fine(""ShelfLifeMinPct="" + ShelfLifeMinPct
								+ "",GuaranteeDays="" + GuaranteeDays
								+ ""->Days="" + days 
								+ "" - ShipDate="" + shipDate + "" -> "" + newDate);
						if (newDate.before(retValue))
							log.fine(""BPP ShelfLifeMinPct overwrote previous calculation"");
						retValue = newDate;
					}
					foundBPP = true;
				}
				int ShelfLifeMinDays = rs.getInt(2);
				if (ShelfLifeMinDays > 0)
				{
					Timestamp newDate = TimeUtil.addDays(shipDate, ShelfLifeMinDays);
					log.fine(""ShelfLifeMinDays="" + ShelfLifeMinDays 
							+ "" - ShipDate="" + shipDate + "" -> "" + newDate);
					if (newDate.before(retValue))
						log.fine(""BPP ShelfLifeMinDays overwrote previous calculation"");
					retValue = newDate;
					foundBPP = true;
				}
				//	BPartner
				if (!foundBPP)
				{
					ShelfLifeMinPct = rs.getBigDecimal(7);
					if (ShelfLifeMinPct != null && ShelfLifeMinPct.signum() > 0)
					{
						if (GuaranteeDays == 0)
							log.warning(""No GuaranteeDays in Product to calculate BP ShelfLifeMinPct="" + ShelfLifeMinPct);
						else
						{
							int days = GuaranteeDays * 100 / ShelfLifeMinPct.intValue();
							Timestamp newDate = TimeUtil.addDays(shipDate, days);
							log.fine(""ShelfLifeMinPct="" + ShelfLifeMinPct
								+ "",GuaranteeDays="" + GuaranteeDays
								+ ""->Days="" + days 
								+ "" - ShipDate="" + shipDate + "" -> "" + newDate);
							if (newDate.before(retValue))
								log.fine(""BP ShelfLifeMinPct overwrote previous calculation"");
							retValue = newDate;
						}
					}
				}
			}
			else
				log.warning(""No Record Found for C_BPartner_ID="" + C_BPartner_ID 
					+ "",M_Product_ID="" + M_Product_ID);
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return retValue;
	}	//	getMinDate
"
org.compiere.model.MInvoiceSchedule.get,MInvoiceSchedule.java,"MInvoiceSchedule get (Ctx ctx, int C_InvoiceSchedule_ID)
	{
		Integer key = Integer.valueOf (C_InvoiceSchedule_ID);
		MInvoiceSchedule retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MInvoiceSchedule (ctx, C_InvoiceSchedule_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MInvoiceSchedule.canInvoice,MInvoiceSchedule.java,"boolean canInvoice (Timestamp xDate, BigDecimal orderAmt)
	{
		//	Amount
		if (isAmount() && getAmt() != null && orderAmt != null 
			&& orderAmt.compareTo(getAmt()) >= 0)
			return true;
		
		//	Daily
		if (INVOICEFREQUENCY_Daily.equals(getInvoiceFrequency()))
			return true;

		//	Remove time
		xDate = TimeUtil.getDay(xDate);
		Calendar today = TimeUtil.getToday();
		
		//	Weekly
		if (INVOICEFREQUENCY_Weekly.equals(getInvoiceFrequency()))
		{
			Calendar cutoff = TimeUtil.getToday();
			cutoff.set(Calendar.DAY_OF_WEEK, getCalendarDay(getInvoiceWeekDayCutoff()));
			if (cutoff.after(today))
				cutoff.add(Calendar.DAY_OF_YEAR, -7);
			Timestamp cutoffDate = new Timestamp (cutoff.getTimeInMillis());
			log.fine(""canInvoice - Date="" + xDate + "" > Cutoff="" + cutoffDate 
				+ "" - "" + xDate.after(cutoffDate));
			if (xDate.after(cutoffDate))
				return false;
			//
			Calendar invoice = TimeUtil.getToday();
			invoice.set(Calendar.DAY_OF_WEEK, getCalendarDay(getInvoiceWeekDay()));
			if (invoice.after(today))
				invoice.add(Calendar.DAY_OF_YEAR, -7);
			Timestamp invoiceDate = new Timestamp (invoice.getTimeInMillis());
			log.fine(""canInvoice - Date="" + xDate + "" > Invoice="" + invoiceDate 
				+ "" - "" + xDate.after(invoiceDate));
			if (xDate.after(invoiceDate))
				return false;
			return true;
		}
		
		//	Monthly
		if (INVOICEFREQUENCY_Monthly.equals(getInvoiceFrequency())
			|| INVOICEFREQUENCY_TwiceMonthly.equals(getInvoiceFrequency()))
		{
			if (getInvoiceDayCutoff() > 0)
			{
				Calendar cutoff = TimeUtil.getToday();
				cutoff.set(Calendar.DAY_OF_MONTH, getInvoiceDayCutoff());
				if (cutoff.after(today))
					cutoff.add(Calendar.MONTH, -1);
				Timestamp cutoffDate = new Timestamp (cutoff.getTimeInMillis());
				log.fine(""canInvoice - Date="" + xDate + "" > Cutoff="" + cutoffDate 
					+ "" - "" + xDate.after(cutoffDate));
				if (xDate.after(cutoffDate))
					return false;
			}
			Calendar invoice = TimeUtil.getToday();
			invoice.set(Calendar.DAY_OF_MONTH, getInvoiceDay());
			if (invoice.after(today))
				invoice.add(Calendar.MONTH, -1);
			Timestamp invoiceDate = new Timestamp (invoice.getTimeInMillis());
			log.fine(""canInvoice - Date="" + xDate + "" > Invoice="" + invoiceDate 
				+ "" - "" + xDate.after(invoiceDate));
			if (xDate.after(invoiceDate))
				return false;
			return true;
		}

		//	Bi-Monthly (+15)
		if (INVOICEFREQUENCY_TwiceMonthly.equals(getInvoiceFrequency()))
		{
			if (getInvoiceDayCutoff() > 0)
			{
				Calendar cutoff = TimeUtil.getToday();
				cutoff.set(Calendar.DAY_OF_MONTH, getInvoiceDayCutoff() +15);
				if (cutoff.after(today))
					cutoff.add(Calendar.MONTH, -1);
				Timestamp cutoffDate = new Timestamp (cutoff.getTimeInMillis());
				if (xDate.after(cutoffDate))
					return false;
			}
			Calendar invoice = TimeUtil.getToday();
			invoice.set(Calendar.DAY_OF_MONTH, getInvoiceDay() +15);
			if (invoice.after(today))
				invoice.add(Calendar.MONTH, -1);
			Timestamp invoiceDate = new Timestamp (invoice.getTimeInMillis());
			if (xDate.after(invoiceDate))
				return false;
			return true;
		}
		return false;
	}	//	canInvoice
"
org.compiere.model.MInvoiceSchedule.getCalendarDay,MInvoiceSchedule.java,"int getCalendarDay (String day)
	{
		if (INVOICEWEEKDAY_Friday.equals(day))
			return Calendar.FRIDAY;
		if (INVOICEWEEKDAY_Saturday.equals(day))
			return Calendar.SATURDAY;
		if (INVOICEWEEKDAY_Sunday.equals(day))
			return Calendar.SUNDAY;
		if (INVOICEWEEKDAY_Monday.equals(day))
			return Calendar.MONDAY;
		if (INVOICEWEEKDAY_Tuesday.equals(day))
			return Calendar.TUESDAY;
		if (INVOICEWEEKDAY_Wednesday.equals(day))
			return Calendar.WEDNESDAY;
	//	if (INVOICEWEEKDAY_Thursday.equals(day))
		return Calendar.THURSDAY;
	}	//	getCalendarDay
"
org.compiere.model.MDunningRunLine.getParent,MDunningRunLine.java,"MDunningRunEntry getParent()
	{
		if (m_parent == null)
			m_parent = new MDunningRunEntry (getCtx(), getC_DunningRunEntry_ID(), get_Trx());
		return m_parent;
	}	//	getParent
"
org.compiere.model.MDunningRunLine.getInvoice,MDunningRunLine.java,"MInvoice getInvoice ()
	{
		if (getC_Invoice_ID() == 0)
			m_invoice = null;
		else if (m_invoice == null)
			m_invoice = new MInvoice (getCtx(), getC_Invoice_ID(), get_Trx());
		return m_invoice;
	}	//	getInvoice
"
org.compiere.model.MDunningRunLine.setInvoice,MDunningRunLine.java,"void setInvoice (MInvoice invoice)
	{
		m_invoice = invoice;
		if (invoice != null)
		{
			m_C_CurrencyFrom_ID = invoice.getC_Currency_ID();
			setAmt(invoice.getGrandTotal());
			setOpenAmt(getAmt());	//	not correct
			setConvertedAmt (MConversionRate.convert(getCtx(), getOpenAmt(), 
				getC_CurrencyFrom_ID(), getC_CurrencyTo_ID(), getAD_Client_ID(), getAD_Org_ID()));
		}
		else
		{
			m_C_CurrencyFrom_ID = 0;
			setAmt(Env.ZERO);
			setOpenAmt(Env.ZERO);
			setConvertedAmt(Env.ZERO);
		}
	}	//	setInvoice
"
org.compiere.model.MDunningRunLine.setInvoice,MDunningRunLine.java,"void setInvoice (int C_Invoice_ID, int C_Currency_ID, 
		BigDecimal GrandTotal, BigDecimal Open, 
		BigDecimal FeeAmount, 
		int DaysDue, boolean IsInDispute, 
		int TimesDunned, int DaysAfterLast)
	{
		setC_Invoice_ID(C_Invoice_ID);
		m_C_CurrencyFrom_ID = C_Currency_ID;
		setAmt (GrandTotal);
		setOpenAmt (Open);
		setFeeAmt (FeeAmount);
		setConvertedAmt (MConversionRate.convert(getCtx(), getOpenAmt(), 
			C_Currency_ID, getC_CurrencyTo_ID(), getAD_Client_ID(), getAD_Org_ID()));
		setIsInDispute(IsInDispute);
		setDaysDue(DaysDue);
		setTimesDunned(TimesDunned);
	}	//	setInvoice
"
org.compiere.model.MDunningRunLine.setFee,MDunningRunLine.java,"void setFee (int C_Currency_ID, 
		BigDecimal FeeAmount)
	{
		m_C_CurrencyFrom_ID = C_Currency_ID;
		setAmt (FeeAmount);
		setOpenAmt (FeeAmount);
		setFeeAmt (FeeAmount);
		setConvertedAmt (MConversionRate.convert(getCtx(), getOpenAmt(), 
			C_Currency_ID, getC_CurrencyTo_ID(), getAD_Client_ID(), getAD_Org_ID()));
	}	//	setInvoice
"
org.compiere.model.MDunningRunLine.getPayment,MDunningRunLine.java,"MPayment getPayment ()
	{
		if (getC_Payment_ID() == 0)
			m_payment = null;
		else if (m_payment == null)
			m_payment = new MPayment (getCtx(), getC_Payment_ID(), get_Trx());
		return m_payment;
	}	//	getPayment
"
org.compiere.model.MDunningRunLine.setPayment,MDunningRunLine.java,"void setPayment (int C_Payment_ID, int C_Currency_ID, 
		BigDecimal PayAmt, BigDecimal OpenAmt)
	{
		setC_Payment_ID(C_Payment_ID);
		m_C_CurrencyFrom_ID = C_Currency_ID;
		setAmt (PayAmt);
		setOpenAmt (OpenAmt);
		setConvertedAmt (MConversionRate.convert(getCtx(), getOpenAmt(), 
			C_Currency_ID, getC_CurrencyTo_ID(), getAD_Client_ID(), getAD_Org_ID()));
	}	//	setPayment
"
org.compiere.model.MDunningRunLine.getC_CurrencyFrom_ID,MDunningRunLine.java,"int getC_CurrencyFrom_ID ()
	{
		if (m_C_CurrencyFrom_ID == 0)
		{
			if (getC_Invoice_ID() != 0)
				m_C_CurrencyFrom_ID = getInvoice().getC_Currency_ID();
			else if (getC_Payment_ID() != 0)
				m_C_CurrencyFrom_ID = getPayment().getC_Currency_ID();
		}
		return m_C_CurrencyFrom_ID;
	}	//	getC_CurrencyFrom_ID
"
org.compiere.model.MDunningRunLine.getC_CurrencyTo_ID,MDunningRunLine.java,"int getC_CurrencyTo_ID ()
	{
		if (m_C_CurrencyTo_ID == 0)
			m_C_CurrencyTo_ID = getParent().getC_Currency_ID();
		return m_C_CurrencyTo_ID;
	}	//	getC_CurrencyTo_ID
"
org.compiere.model.MDunningRunLine.beforeSave,MDunningRunLine.java,"boolean beforeSave (boolean newRecord)
	{
		//	Set Amt
		if (getC_Invoice_ID() == 0 && getC_Payment_ID() == 0)
		{
			setAmt(Env.ZERO);
			setOpenAmt(Env.ZERO);
		}
		//	Converted Amt
		if (Env.ZERO.compareTo(getOpenAmt()) == 0)
			setConvertedAmt (Env.ZERO);
		else if (Env.ZERO.compareTo(getConvertedAmt()) == 0)
			setConvertedAmt (MConversionRate.convert(getCtx(), getOpenAmt(), 
				getC_CurrencyFrom_ID(), getC_CurrencyTo_ID(), getAD_Client_ID(), getAD_Org_ID()));
		//	Total
		setTotalAmt(getConvertedAmt().add(getFeeAmt()).add(getInterestAmt()));
		// Reset Collection Status only if null
		if (getInvoice()!=null && getInvoice().getInvoiceCollectionType ()==null)
		{
			if (m_invoice!=null)
			{
				m_invoice.setInvoiceCollectionType (X_C_Invoice.INVOICECOLLECTIONTYPE_Dunning);
				m_invoice.save ();
			}
		}
		//
		return true;
	}	//	beforeSave
"
org.compiere.model.MDunningRunLine.afterSave,MDunningRunLine.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		updateEntry();
		return success;
	}	//	afterSave
"
org.compiere.model.MDunningRunLine.afterDelete,MDunningRunLine.java,"boolean afterDelete (boolean success)
	{
		updateEntry();
		return success;
	}	//	afterDelete
"
org.compiere.model.MDunningRunLine.updateEntry,MDunningRunLine.java,"void updateEntry()
	{
		// we do not count the fee line as an item, but it sum it up.
		String sql = ""UPDATE C_DunningRunEntry e ""
			+ ""SET Amt=(SELECT SUM(ConvertedAmt)+SUM(FeeAmt)""
			+ "" FROM C_DunningRunLine l ""
				+ ""WHERE e.C_DunningRunEntry_ID=l.C_DunningRunEntry_ID), ""
			+ ""QTY=(SELECT COUNT(*)""
			+ "" FROM C_DunningRunLine l ""
				+ ""WHERE e.C_DunningRunEntry_ID=l.C_DunningRunEntry_ID ""
				+ "" AND (NOT C_Invoice_ID IS NULL OR NOT C_Payment_ID IS NULL))""
			+ "" WHERE C_DunningRunEntry_ID="" + getC_DunningRunEntry_ID();
		
		DB.executeUpdate(sql, get_Trx());
	}	//	updateEntry
"
org.compiere.model.MReplication.setDateLastRun,MReplication.java,"void setDateLastRun (Timestamp DateLastRun)
	{
		super.setDateLastRun (DateLastRun);
	}	//	setDateLastRun
"
org.compiere.model.MDesktop.initDesktop,MDesktop.java,"boolean initDesktop (int ad_Desktop_ID)
	{
		AD_Desktop_ID = ad_Desktop_ID;
		//  Get WB info
		String sql = null;
		if (Env.isBaseLanguage(m_ctx, ""AD_Desktop""))
			sql = ""SELECT Name,Description,Help,""                       //  1..3
				+ "" AD_Column_ID,AD_Image_ID,AD_Color_ID,PA_Goal_ID ""  //   4..7
				+ ""FROM AD_Desktop ""
				+ ""WHERE AD_Desktop_ID=? AND IsActive='Y'"";
		else
			sql = ""SELECT t.Name,t.Description,t.Help,""
				+ "" w.AD_Column_ID,w.AD_Image_ID,w.AD_Color_ID,w.PA_Goal_ID ""
				+ ""FROM AD_Desktop w, AD_Desktop_Trl t ""
				+ ""WHERE w.AD_Desktop_ID=? AND w.IsActive='Y'""
				+ "" AND w.AD_Desktop_ID=t.AD_Desktop_ID""
				+ "" AND t.AD_Language='"" + Env.getAD_Language(m_ctx) + ""'"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, AD_Desktop_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				Name = rs.getString(1);
				Description = rs.getString(2);
				if (Description == null)
					Description = """";
				Help = rs.getString(3);
				if (Help == null)
					Help = """";
				//
				AD_Column_ID = rs.getInt(4);
				AD_Image_ID = rs.getInt(5);
				AD_Color_ID = rs.getInt(6);
				PA_Goal_ID = rs.getInt(7);
			}
			else
				AD_Desktop_ID = 0;
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}

		if (AD_Desktop_ID == 0)
			return false;
		return initDesktopWorkbenches();
	}   //  initDesktop
"
org.compiere.model.MDesktop.toString,MDesktop.java,"String toString()
	{
		return ""MDesktop ID="" + AD_Desktop_ID + "" "" + Name;
	}
"
org.compiere.model.MDesktop.getAD_Desktop_ID,MDesktop.java,"int getAD_Desktop_ID()
	{
		return AD_Desktop_ID;
	}
"
org.compiere.model.MDesktop.getName,MDesktop.java,"String getName()
	{
		return Name;
	}
"
org.compiere.model.MDesktop.getDescription,MDesktop.java,"String getDescription()
	{
		return Description;
	}
"
org.compiere.model.MDesktop.getHelp,MDesktop.java,"String getHelp()
	{
		return Help;
	}
"
org.compiere.model.MDesktop.getAD_Column_ID,MDesktop.java,"int getAD_Column_ID()
	{
		return AD_Column_ID;
	}
"
org.compiere.model.MDesktop.getAD_Image_ID,MDesktop.java,"int getAD_Image_ID()
	{
		return AD_Image_ID;
	}
"
org.compiere.model.MDesktop.getAD_Color_ID,MDesktop.java,"int getAD_Color_ID()
	{
		return AD_Color_ID;
	}
"
org.compiere.model.MDesktop.getPA_Goal_ID,MDesktop.java,"int getPA_Goal_ID()
	{
		return PA_Goal_ID;
	}
"
org.compiere.model.MDesktop.initDesktopWorkbenches,MDesktop.java,"boolean initDesktopWorkbenches()
	{
		String sql = ""SELECT AD_Workbench_ID ""
			+ ""FROM AD_DesktopWorkbench ""
			+ ""WHERE AD_Desktop_ID=? AND IsActive='Y' ""
			+ ""ORDER BY SeqNo"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, AD_Desktop_ID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				int AD_Workbench_ID = rs.getInt(1);
				m_workbenches.add (Integer.valueOf(AD_Workbench_ID));
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, ""MWorkbench.initDesktopWorkbenches"", e);
			return false;
		}
		return true;
	}   //  initDesktopWorkbenches
"
org.compiere.model.MDesktop.getWindowCount,MDesktop.java,"int getWindowCount()
	{
		return m_workbenches.size();
	}   //  getWindowCount
"
org.compiere.model.MDesktop.getAD_Workbench_ID,MDesktop.java,"int getAD_Workbench_ID (int index)
	{
		if (index < 0 || index > m_workbenches.size())
			return -1;
		Integer id = m_workbenches.get(index);
		return id.intValue();
	}   //  getAD_Workbench_ID
"
org.compiere.model.MDiscountSchema.get,MDiscountSchema.java,"MDiscountSchema get (Ctx ctx, int M_DiscountSchema_ID)
	{
		Integer key = Integer.valueOf (M_DiscountSchema_ID);
		MDiscountSchema retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MDiscountSchema (ctx, M_DiscountSchema_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MDiscountSchema.getBreaks,MDiscountSchema.java,"MDiscountSchemaBreak[] getBreaks(boolean reload)
	{
		if (m_breaks != null && !reload)
			return m_breaks;
		
		String sql = ""SELECT * FROM M_DiscountSchemaBreak WHERE M_DiscountSchema_ID=? ORDER BY SeqNo"";
		ArrayList<MDiscountSchemaBreak> list = new ArrayList<MDiscountSchemaBreak>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getM_DiscountSchema_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add(new MDiscountSchemaBreak(getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		m_breaks = new MDiscountSchemaBreak[list.size ()];
		list.toArray (m_breaks);
		return m_breaks;
	}	//	getBreaks
"
org.compiere.model.MDiscountSchema.getLines,MDiscountSchema.java,"MDiscountSchemaLine[] getLines (boolean reload)
	{
		if (m_lines != null && !reload)
			return m_lines;
		
		String sql = ""SELECT * FROM M_DiscountSchemaLine WHERE M_DiscountSchema_ID=? ORDER BY SeqNo"";
		ArrayList<MDiscountSchemaLine> list = new ArrayList<MDiscountSchemaLine>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getM_DiscountSchema_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add(new MDiscountSchemaLine(getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		m_lines = new MDiscountSchemaLine[list.size ()];
		list.toArray (m_lines);
		return m_lines;
	}	//	getBreaks
"
org.compiere.model.MDiscountSchema.calculatePrice,MDiscountSchema.java,"BigDecimal calculatePrice (BigDecimal Qty, BigDecimal Price,  
		int M_Product_ID, int M_Product_Category_ID,  
		BigDecimal BPartnerFlatDiscount)
	{
		log.fine(""Price="" + Price + "",Qty="" + Qty);
		if (Price == null || Env.ZERO.compareTo(Price) == 0)
			return Price;
		//
		BigDecimal discount = calculateDiscount(Qty, Price, 
			M_Product_ID, M_Product_Category_ID, BPartnerFlatDiscount);
		//	nothing to calculate
		if (discount == null || discount.signum() == 0)
			return Price;
		//
		BigDecimal onehundred = new BigDecimal(100);
		BigDecimal multiplier = (onehundred).subtract(discount);
		multiplier = multiplier.divide(onehundred, 6, BigDecimal.ROUND_HALF_UP);
		BigDecimal newPrice = Price.multiply(multiplier);
		log.fine(""=>"" + newPrice);
		return newPrice;
	}	//	calculatePrice
"
org.compiere.model.MDiscountSchema.calculateDiscount,MDiscountSchema.java,"BigDecimal calculateDiscount (BigDecimal Qty, BigDecimal Price,  
		int M_Product_ID, int M_Product_Category_ID,
		BigDecimal BPartnerFlatDiscount)
	{
		if (BPartnerFlatDiscount == null)
			BPartnerFlatDiscount = Env.ZERO;
		
		//
		if (DISCOUNTTYPE_FlatPercent.equals(getDiscountType()))
		{
			if (isBPartnerFlatDiscount())
				return BPartnerFlatDiscount;
			return getFlatDiscount();
		}
		//	Not supported
		else if (DISCOUNTTYPE_Formula.equals(getDiscountType())
			|| DISCOUNTTYPE_Pricelist.equals(getDiscountType()))
		{
			log.info (""Not supported (yet) DiscountType="" + getDiscountType());
			return Env.ZERO;
		}
		
		//	Price Breaks
		getBreaks(false);
		BigDecimal Amt = Price.multiply(Qty);
		if (isQuantityBased())
			log.finer(""Qty="" + Qty + "",M_Product_ID="" + M_Product_ID + "",M_Product_Category_ID="" + M_Product_Category_ID);
		else
			log.finer(""Amt="" + Amt + "",M_Product_ID="" + M_Product_ID + "",M_Product_Category_ID="" + M_Product_Category_ID);
		for (MDiscountSchemaBreak br : m_breaks) {
			if (!br.isActive())
				continue;
			
			if (isQuantityBased())
			{
				if (!br.applies(Qty, M_Product_ID, M_Product_Category_ID))
				{
					log.finer(""No: "" + br);
					continue;
				}
				log.finer(""Yes: "" + br);
			}
			else
			{
				if (!br.applies(Amt, M_Product_ID, M_Product_Category_ID))
				{
					log.finer(""No: "" + br);
					continue;
				}
				log.finer(""Yes: "" + br);
			}
			
			//	Line applies
			BigDecimal discount = null;
			if (br.isBPartnerFlatDiscount())
				discount = BPartnerFlatDiscount;
			else
				discount = br.getBreakDiscount();
			log.fine(""Discount=>"" + discount);
			return discount;
		}	//	for all breaks
		
		return Env.ZERO;
	}	//	calculateDiscount
"
org.compiere.model.MDiscountSchema.beforeSave,MDiscountSchema.java,"boolean beforeSave (boolean newRecord)
	{
		if (getValidFrom() == null)
			setValidFrom (TimeUtil.getDay(null));

		return true;
	}	//	beforeSave
"
org.compiere.model.MDiscountSchema.reSeq,MDiscountSchema.java,"int reSeq()
	{
		int count = 0;
		//	Lines
		MDiscountSchemaLine[] lines = getLines(true);
		for (int i = 0; i < lines.length; i++)
		{
			int line = (i+1) * 10;
			if (line != lines[i].getSeqNo())
			{
				lines[i].setSeqNo(line);
				if (lines[i].save())
					count++;
			}
		}
		m_lines = null;
		
		//	Breaks
		MDiscountSchemaBreak[] breaks = getBreaks(true);
		for (int i = 0; i < breaks.length; i++)
		{
			int line = (i+1) * 10;
			if (line != breaks[i].getSeqNo())
			{
				breaks[i].setSeqNo(line);
				if (breaks[i].save())
					count++;
			}
		}
		m_breaks = null;
		return count;
	}	//	reSeq
"
org.compiere.model.MLdapProcessor.getActive,MLdapProcessor.java,"MLdapProcessor[] getActive(Ctx ctx)
	{
		ArrayList<MLdapProcessor> list = new ArrayList<MLdapProcessor>();
		String sql = ""SELECT * FROM AD_LdapProcessor WHERE IsActive='Y'"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MLdapProcessor (ctx, rs, null));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		MLdapProcessor[] retValue = new MLdapProcessor[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getActive
"
org.compiere.model.MLdapProcessor.getServerID,MLdapProcessor.java,"String getServerID ()
	{
		return ""Ldap"" + get_ID();
	}	//	getServerID
"
org.compiere.model.MLdapProcessor.getInfo,MLdapProcessor.java,"String getInfo()
	{
		return ""Auth="" + m_auth 
			+ "", OK="" + m_ok + "", Error="" + m_error;
	}	//	getInfo
"
org.compiere.model.MLdapProcessor.getDateNextRun,MLdapProcessor.java,"Timestamp getDateNextRun (boolean requery)
	{
		if (requery)
			load(get_Trx());
		return getDateNextRun();
	}	//	getDateNextRun
"
org.compiere.model.MLdapProcessor.getLogs,MLdapProcessor.java,"CompiereProcessorLog[] getLogs ()
	{
		ArrayList<MLdapProcessorLog> list = new ArrayList<MLdapProcessorLog>();
		String sql = ""SELECT * ""
			+ ""FROM AD_LdapProcessorLog ""
			+ ""WHERE AD_LdapProcessor_ID=? "" 
			+ ""ORDER BY Created DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getAD_LdapProcessor_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MLdapProcessorLog (getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MLdapProcessorLog[] retValue = new MLdapProcessorLog[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getLogs
"
org.compiere.model.MLdapProcessor.deleteLog,MLdapProcessor.java,"int deleteLog()
	{
		if (getKeepLogDays() < 1)
			return 0;
		String sql = ""DELETE FROM AD_LdapProcessorLog ""
			+ ""WHERE AD_LdapProcessor_ID="" + getAD_LdapProcessor_ID() 
			//jz + "" AND (Created+"" + getKeepLogDays() + "") < SysDate"";
			+ "" AND addDays(Created,"" + getKeepLogDays() + "") < SysDate"";
		int no = DB.executeUpdate(sql, get_Trx());
		return no;
	}	//	deleteLog
"
org.compiere.model.MLdapProcessor.getFrequency,MLdapProcessor.java,"int getFrequency()
	{
		return 1;
	}	//	getFrequency
"
org.compiere.model.MLdapProcessor.getFrequencyType,MLdapProcessor.java,"String getFrequencyType()
	{
		return X_R_RequestProcessor.FREQUENCYTYPE_Minute;
	}	//	getFrequencyType
"
org.compiere.model.MLdapProcessor.getAD_Schedule_ID,MLdapProcessor.java,"int getAD_Schedule_ID()
	{
		return 0;
	}	//	getAD_Schedule_ID
"
org.compiere.model.MLdapProcessor.toString,MLdapProcessor.java,"String toString()
	{
		StringBuffer sb = new StringBuffer (""MLdapProcessor["");
		sb.append (get_ID()).append (""-"").append (getName())
			.append ("",Port="").append (getLdapPort())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MLdapProcessor.authenticate,MLdapProcessor.java,"MLdapUser authenticate (MLdapUser ldapUser, String usr, String o, String ou,
				String remoteHost, String remoteAddr)
	{
		// Ensure something to return
		if (ldapUser == null)
			ldapUser = new MLdapUser();
		
		String error = null;
		String info = null;

		//	User
		if (usr == null || usr.trim().length () == 0)
		{
			error = ""@NotFound@: User (empty)"";
			ldapUser.setErrorString(error);
			m_error++;
			log.warning (error);
			return ldapUser;
		}
		usr = usr.trim();
		//	Client
		if (o == null || o.length () == 0)
		{
			error = ""@NotFound@: O (Tenant Key missing)"";
			ldapUser.setErrorString(error);
			m_error++;
			log.warning (error);
			return ldapUser;
		}
		int AD_Client_ID = findClient(o);
		if (AD_Client_ID == 0)
		{
			error = ""@NotFound@: O="" + o + "" (Tenant Key)"";
			ldapUser.setErrorString(error);
			m_error++;
			log.config (error);
			return ldapUser;
		}
		//	Optional Interest Area or Asset
		int R_InterestArea_ID = 0;
		int M_Product_ID = 0;	//	Product of Asset
		if (ou != null && ou.length () > 0)
		{
			if (ou.startsWith(""Aa"") && ou.endsWith(""aA""))
			{
				try
				{
					String s = ou.substring(2,ou.length()-2);
					M_Product_ID = Integer.parseInt(s);
				}
				catch (Exception e)
				{
				}
			}
			else
				R_InterestArea_ID = findInterestArea (AD_Client_ID, ou);
			if (R_InterestArea_ID == 0 && M_Product_ID == 0)
			{
				error = ""@NotFound@ OU="" + ou;
				ldapUser.setErrorString(error);
				m_error++;
				log.config (error);
				return ldapUser;
			}
		}

		m_auth++;
		//	Query 1 - Validate User
		int AD_User_ID = 0;
		String Value = null;
		String LdapUser = null;
		String EMail = null;
		String Name = null;
		String Password = null;
		boolean isActive = false;
		String EMailVerify = null;	//	 is timestamp
		boolean isUnique = false;
		//
		String sql = ""SELECT AD_User_ID, Value, LdapUser, EMail,""	//	1..4
			+ "" Name, Password, IsActive, EMailVerify ""
			+ ""FROM AD_User ""
			+ ""WHERE AD_Client_ID=? AND (EMail=? OR Value=? OR LdapUser=?)"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, AD_Client_ID);
			pstmt.setString (2, usr);
			pstmt.setString (3, usr);
			pstmt.setString (4, usr);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next())
			{
				AD_User_ID = rs.getInt (1);
				Value = rs.getString (2);
				LdapUser = rs.getString (3);
				EMail = rs.getString (4);
				//
				Name = rs.getString (5);
				Password = rs.getString (6);
				isActive = ""Y"".equals (rs.getString (7));
				EMailVerify	= rs.getString (8);
				isUnique = rs.next();
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
			error = ""System Error"";
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		if (error != null)
		{
			m_error++;
			ldapUser.setErrorString(error);
			return ldapUser;
		}
		//
		if (AD_User_ID == 0)
		{
			error = ""@NotFound@ User="" + usr;
			info = ""User not found - "" + usr;
		}
		else if (!isActive)
		{
			error = ""@NotFound@ User="" + usr;
			info = ""User not active - "" + usr;
		}
		else if (EMailVerify == null)
		{
			error = ""@UserNotVerified@ User="" + usr;
			info = ""User EMail not verified - "" + usr;
		}
		else if (usr.equalsIgnoreCase(LdapUser))
			info = ""User verified - Ldap="" + usr 
				+ (isUnique ? """" : "" - Not Unique"");
		else if (usr.equalsIgnoreCase(Value)) 
			info = ""User verified - Value="" + usr 
				+ (isUnique ? """" : "" - Not Unique"");
		else if (usr.equalsIgnoreCase(EMail)) 
			info = ""User verified - EMail="" + usr 
				+ (isUnique ? """" : "" - Not Unique"");
		else 
			info = ""User verified ?? "" + usr
				+ "" - Name="" + Name 
				+ "", Ldap="" + LdapUser + "", Value="" + Value
				+ (isUnique ? """" : "" - Not Unique"");

		//	Error
		if (error != null)	//	should use Language of the User
		{
			logAccess (AD_Client_ID, AD_User_ID, R_InterestArea_ID, 0, info, error,
						remoteHost, remoteAddr);
			ldapUser.setErrorString(Msg.translate (getCtx(), error));
			return ldapUser;
		}
		//	User Info
		ldapUser.setOrg(o);
		ldapUser.setOrgUnit(ou);
		ldapUser.setUserId(usr);
		ldapUser.setPassword(Password);
		//	Done
		if (R_InterestArea_ID == 0 && M_Product_ID == 0)
		{
			logAccess (AD_Client_ID, AD_User_ID, 0, 0, info, null,
						remoteHost, remoteAddr);
			return ldapUser;
		}
		
		if (M_Product_ID != 0)
			return authenticateAsset (ldapUser, 
					AD_User_ID, usr, M_Product_ID, 
					AD_Client_ID, remoteHost, remoteAddr);
		
		return authenticateSubscription(ldapUser, 
				AD_User_ID, usr, R_InterestArea_ID, 
				AD_Client_ID, remoteHost, remoteAddr);
	}	//	authenticate
"
org.compiere.model.MLdapProcessor.authenticateSubscription,MLdapProcessor.java,"MLdapUser authenticateSubscription(MLdapUser ldapUser, 
			int AD_User_ID, String usr, int R_InterestArea_ID, 
			int AD_Client_ID, String remoteHost, String remoteAddr)
	{
		String error = null;
		String info = null;

		//	Query 2 - Validate Subscription
		String OptOutDate = null;
		boolean found = false;
		boolean isActive = false;
		String sql = ""SELECT IsActive, OptOutDate ""
			+ ""FROM R_ContactInterest ""
			+ ""WHERE R_InterestArea_ID=? AND AD_User_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, R_InterestArea_ID);
			pstmt.setInt (2, AD_User_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next())
			{
				found = true;
				isActive = ""Y"".equals (rs.getString (1));
				OptOutDate	= rs.getString (2);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
			error = ""System Error (2)"";
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//	System Error
		if (error != null)
		{
			m_error++;
			ldapUser.setErrorString(error);
			return ldapUser;
		}
		
		if (!found)
		{
			error = ""@UserNotSubscribed@ User="" + usr;
			info = ""No User Interest - "" + usr 
				+ "" - R_InterestArea_ID="" + R_InterestArea_ID;
		}
		else if (OptOutDate != null)
		{
			error = ""@UserNotSubscribed@ User="" + usr + "" @OptOutDate@="" + OptOutDate;
			info = ""Opted out - "" + usr + "" - OptOutDate="" + OptOutDate;
		}
		else if (!isActive)
		{
			error = ""@UserNotSubscribed@ User="" + usr;
			info = ""User Interest Not Active - "" + usr; 
		}
		else
			info = ""User subscribed - "" + usr;
		
		
		if (error != null)	//	should use Language of the User
		{
			logAccess (AD_Client_ID, AD_User_ID, R_InterestArea_ID, 0, info, error, 
						remoteHost, remoteAddr);
			ldapUser.setErrorString(Msg.translate (getCtx(), error));
			return ldapUser;
		}
		//	Done
		logAccess (AD_Client_ID, AD_User_ID, R_InterestArea_ID, 0, info, null,
					remoteHost, remoteAddr);
		return ldapUser;
	}	//	authenticateSubscription
"
org.compiere.model.MLdapProcessor.authenticateAsset,MLdapProcessor.java,"MLdapUser authenticateAsset(MLdapUser ldapUser, 
			int AD_User_ID, String usr, int M_Product_ID, 
			int AD_Client_ID, String remoteHost, String remoteAddr)
	{
		String error = null;
		String info = null;

		//	Query 2 - Validate Asset
		MAsset asset = null;
		String sql = ""SELECT * ""
			+ ""FROM A_Asset ""
			+ ""WHERE M_Product_ID=?""
			+ "" AND AD_User_ID=?"";		//	only specific user
		//	Will have problems with multiple assets
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, M_Product_ID);
			pstmt.setInt (2, AD_User_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next())
			{
				asset = new MAsset(getCtx(), rs, null);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
			error = ""System Error (3)"";
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//	System Error
		if (error != null)
		{
			m_error++;
			ldapUser.setErrorString(error);
			return ldapUser;
		}
		int A_Asset_ID = 0;
		if (asset == null)
		{
			error = ""@UserNoAsset@ User="" + usr;
			info = ""No Asset - "" + usr + "" - "" + M_Product_ID;
		}
		else if (!asset.isActive())
		{
			A_Asset_ID = asset.getA_Asset_ID();
			error = ""@UserNoAsset@ User="" + usr;
			info = ""Asset not active - "" + usr; 
		}
		else if (!asset.isActive(true))
		{
			A_Asset_ID = asset.getA_Asset_ID();
			error = ""@UserNoAsset@ User="" + usr + "" @GuaranteeDate@="" + asset.getGuaranteeDate();
			info = ""Expired - "" + usr + "" - GuaranteeDate="" + asset.getGuaranteeDate();
		}
		else
			info = ""Asset - "" + usr;
		
		
		if (error != null)	//	should use Language of the User
		{
			logAccess (AD_Client_ID, AD_User_ID, 0, A_Asset_ID, info, error, 
						remoteHost, remoteAddr);
			ldapUser.setErrorString(Msg.translate (getCtx(), error));
			return ldapUser;
		}
		//	Done OK
		MLdapAccess log = logAccess (AD_Client_ID, AD_User_ID, 0, asset.getA_Asset_ID(), info, null,
					remoteHost, remoteAddr);
		MAssetDelivery ad = new MAssetDelivery(asset, null, log.toString(), AD_User_ID);
		ad.setRemote_Host(remoteHost);
		ad.setRemote_Addr(remoteAddr);
		ad.save();
		return ldapUser;
	}	//	authenticateAsset
"
org.compiere.model.MLdapProcessor.findClient,MLdapProcessor.java,"int findClient (String client)
	{
		if (m_clients == null)
			m_clients = MClient.getAll(getCtx());
		for (MClient element : m_clients) {
			if ((client.equalsIgnoreCase (element.getValue())))
				return element.getAD_Client_ID ();
		}
		return 0;
	}	//	findClient
"
org.compiere.model.MLdapProcessor.findInterestArea,MLdapProcessor.java,"int findInterestArea (int AD_Client_ID, String interestArea)
	{
		if (m_interests == null)
			m_interests = MInterestArea.getAll(getCtx());
		for (MInterestArea element : m_interests) {
			if (AD_Client_ID == element.getAD_Client_ID()
				&& interestArea.equalsIgnoreCase (element.getValue ()))
				return element.getR_InterestArea_ID();
		}
		return 0;
	}	//	findInterestArea
"
org.compiere.model.MLdapProcessor.logAccess,MLdapProcessor.java,"MLdapAccess logAccess (int AD_Client_ID,
		int AD_User_ID, int R_InterestArea_ID, int A_Asset_ID,
		String info, String error,
		String remoteHost, String remoteAddr)
	{
		if (error != null)
		{
			log.log (Level.CONFIG, info);
			m_error++;
		}
		else
		{
			log.log (Level.INFO, info);
			m_ok++;
		}
		//
		MLdapAccess access = new MLdapAccess (getCtx(), 0, null);
		access.setAD_Client_ID (AD_Client_ID);
		access.setAD_Org_ID(0);
		access.setAD_LdapProcessor_ID(getAD_LdapProcessor_ID());
		access.setAD_User_ID (AD_User_ID);
		access.setR_InterestArea_ID (R_InterestArea_ID);
		access.setA_Asset_ID(A_Asset_ID);
		access.setRemote_Host(remoteHost);
		access.setRemote_Addr(remoteAddr);

		access.setIsError (error != null);
		access.setSummary (info);
		access.save();
		return access;
	}	//	logAccess
"
org.compiere.model.MPaymentValidate.validateCreditCardExp,MPaymentValidate.java,"String validateCreditCardExp (String mmyy)
	{
		String exp = checkNumeric(mmyy);
		if (exp.length() != 4)
			return ""CreditCardExpFormat"";
		//
		String mmStr = exp.substring(0,2);
		String yyStr = exp.substring(2,4);
		//
		int mm = 0;
		int yy = 0;
		try
		{
			mm = Integer.parseInt(mmStr);
			yy = Integer.parseInt(yyStr);
		}
		catch (Exception e)
		{
			return ""CreditCardExpFormat"";
		}
		return validateCreditCardExp(mm,yy);
	}   //  validateCreditCardExp
"
org.compiere.model.MPaymentValidate.getCreditCardExpMM,MPaymentValidate.java,"int getCreditCardExpMM (String mmyy)
	{
		String mmStr = mmyy.substring(0,2);
		int mm = 0;
		try
		{
			mm = Integer.parseInt(mmStr);
		}
		catch (Exception e)
		{
		}
		return mm;
	}   //  getCreditCardExpMM
"
org.compiere.model.MPaymentValidate.getCreditCardExpYY,MPaymentValidate.java,"int getCreditCardExpYY (String mmyy)
	{
		String yyStr = mmyy.substring(2);
		int yy = 0;
		try
		{
			yy = Integer.parseInt(yyStr);
		}
		catch (Exception e)
		{
		}
		return yy;
	}   //  getCreditCardExpYY
"
org.compiere.model.MPaymentValidate.validateCreditCardExp,MPaymentValidate.java,"String validateCreditCardExp (int mm, int yy)
	{
		if (mm < 1 || mm > 12)
			return ""CreditCardExpMonth"";
	//	if (yy < 0 || yy > EXP_YEAR)
	//		return ""CreditCardExpYear"";

		//  Today's date
		Calendar cal = Calendar.getInstance();
		int year = cal.get(Calendar.YEAR) - 2000;   //  two digits
		int month = cal.get(Calendar.MONTH) + 1;    //  zero based
		//
		if (yy < year)
			return ""CreditCardExpired"";
		else if (yy == year && mm < month)
			return ""CreditCardExpired"";
		return """";
	}   //  validateCreditCardExp
"
org.compiere.model.MPaymentValidate.validateCreditCardNumber,MPaymentValidate.java,"String validateCreditCardNumber (String creditCardNumber)
	{
		if (creditCardNumber == null || creditCardNumber.length() == 0)
			return ""CreditCardNumberError"";

		/**
		 *  1:  Double the value of alternate digits beginning with
		 *      the	first right-hand digit (low order).
		 *  2:  Add the individual digits comprising the products
		 *      obtained in step 1 to each of the unaffected digits
		 *      in the original number.
		 *  3:  Subtract the total obtained in step 2 from the next higher
		 *      number ending in 0 [this in the equivalent of calculating
		 *      the ""tens complement"" of the low order digit (unit digit)
		 *      of the total].
		 *      If the total obtained in step 2 is a number ending in zero
		 *      (30, 40 etc.), the check digit is 0.
		 *  Example:
		 *  Account number: 4992 73 9871 6
		 *
		 *  4  9  9  2  7  3  9  8  7  1  6
		 *    x2    x2    x2    x2    x2
		 *  -------------------------------
		 *  4 18  9  4  7  6  9 16  7  2  6
		 *
		 *  4 + 1 + 8 + 9 + 4 + 7 + 6 + 9 + 1 + 6 + 7 + 2 + 6 = 70
		 *  70 % 10 = 0
		 */

		//  Clean up number
		String ccNumber1 = checkNumeric(creditCardNumber);
		int ccLength = ccNumber1.length();
		//  Reverse string
		StringBuffer buf = new StringBuffer();
		for (int i = ccLength; i != 0; i--)
			buf.append(ccNumber1.charAt(i-1));
		String ccNumber = buf.toString();

		int sum = 0;
		for (int i = 0; i < ccLength; i++)
		{
			int digit = Character.getNumericValue(ccNumber.charAt(i));
			if (i % 2 == 1)
			{
				digit *= 2;
				if (digit > 9)
					digit -= 9;
			}
			sum += digit;
		}
		if (sum % 10 == 0)
			return """";

		s_log.fine(""validateCreditCardNumber - "" + creditCardNumber + "" -> ""
			+ ccNumber + "", Luhn="" + sum);
		return ""CreditCardNumberError"";
	}   //  validateCreditCardNumber
"
org.compiere.model.MPaymentValidate.validateCreditCardNumber,MPaymentValidate.java,"String validateCreditCardNumber (String creditCardNumber, String creditCardType)
	{
		if (creditCardNumber == null || creditCardType == null)
			return ""CreditCardNumberError"";

		//  http://www.beachnet.com/~hstiles/cardtype.html
		//	http://staff.semel.fi/~kribe/document/luhn.htm

		String ccStartList = """";    //  comma separated list of starting numbers
		String ccLengthList = """";   //  comma separated list of lengths
		//
		if (creditCardType.equals(X_C_Payment.CREDITCARDTYPE_MasterCard))
		{
			ccStartList = ""51,52,53,54,55"";
			ccLengthList = ""16"";
		}
		else if (creditCardType.equals(X_C_Payment.CREDITCARDTYPE_Visa))
		{
			ccStartList = ""4"";
			ccLengthList = ""13,16"";
		}
		else if (creditCardType.equals(X_C_Payment.CREDITCARDTYPE_Amex))
		{
			ccStartList = ""34,37"";
			ccLengthList = ""15"";
		}
		else if (creditCardType.equals(X_C_Payment.CREDITCARDTYPE_Discover))
		{
			ccStartList = ""6011"";
			ccLengthList = ""16"";
		}
		else if (creditCardType.equals(X_C_Payment.CREDITCARDTYPE_Diners))
		{
			ccStartList = ""300,301,302,303,304,305,36,38"";
			ccLengthList = ""14"";
		}
		else
		{
			//  enRouteCard
			ccStartList = ""2014,2149"";
			ccLengthList = ""15"";
			//  JCBCard
			ccStartList += "",3088,3096,3112,3158,3337,3528"";
			ccLengthList += "",16"";
			//  JCBCard
			ccStartList += "",2131,1800"";
			ccLengthList += "",15"";
		}

		//  Clean up number
		String ccNumber = checkNumeric(creditCardNumber);

		/**
		 *  Check Length
		 */
		int ccLength = ccNumber.length();
		boolean ccLengthOK = false;
		StringTokenizer st = new StringTokenizer(ccLengthList, "","", false);
		while (st.hasMoreTokens() && !ccLengthOK)
		{
			int l = Integer.parseInt(st.nextToken());
			if (ccLength == l)
				ccLengthOK = true;
		}
		if (!ccLengthOK)
		{
			s_log.fine(""validateCreditCardNumber Length=""
				+ ccLength + "" <> "" + ccLengthList);
			return ""CreditCardNumberError"";
		}

		/**
		 *  Check Start Digits
		 */
		boolean ccIdentified = false;
		st = new StringTokenizer(ccStartList, "","", false);
		while (st.hasMoreTokens() && !ccIdentified)
		{
			if (ccNumber.startsWith(st.nextToken()))
				ccIdentified = true;
		}
		if (!ccIdentified)
			s_log.fine(""validateCreditCardNumber Type=""
				+ creditCardType + "" <> "" + ccStartList);

		//
		String check = validateCreditCardNumber(ccNumber);
		if (check.length() != 0)
			return check;
		if (!ccIdentified)
			return ""CreditCardNumberProblem?"";
		return """";
	}   //  validateCreditCardNumber
"
org.compiere.model.MPaymentValidate.validateCreditCardVV,MPaymentValidate.java,"String validateCreditCardVV (String creditCardVV)
	{
		if (creditCardVV == null)
			return """";
		int length = checkNumeric(creditCardVV).length();
		if (length == 3 || length == 4)
			return """";
		try
		{
			Integer.parseInt (creditCardVV);
			return """";
		}
		catch (NumberFormatException ex)
		{
			s_log.fine(""validateCreditCardVV - "" + ex);
		}
		s_log.fine(""validateCreditCardVV - length="" + length);
		return ""CreditCardVVError"";
	}   //  validateCreditCardVV
"
org.compiere.model.MPaymentValidate.validateCreditCardVV,MPaymentValidate.java,"String validateCreditCardVV (String creditCardVV, String creditCardType)
	{
		//	no data
		if (creditCardVV == null || creditCardVV.length() == 0
			|| creditCardType == null || creditCardType.length() == 0)
			return """";

		int length = checkNumeric(creditCardVV).length();

		//	Amex = 4 digits
		if (creditCardType.equals(X_C_Payment.CREDITCARDTYPE_Amex))
		{
			if (length == 4)
			{
				try
				{
					Integer.parseInt (creditCardVV);
					return """";
				}
				catch (NumberFormatException ex)
				{
					s_log.fine(""validateCreditCardVV - "" + ex);
				}
			}
			s_log.fine(""validateCreditCardVV(4) CC="" + creditCardType + "", length="" + length);
			return ""CreditCardVVError"";
		}
		//	Visa & MasterCard - 3 digits
		if (creditCardType.equals(X_C_Payment.CREDITCARDTYPE_Visa) 
			|| creditCardType.equals(X_C_Payment.CREDITCARDTYPE_MasterCard))
		{
			if (length == 3)
			{
				try
				{
					Integer.parseInt (creditCardVV);
					return """";
				}
				catch (NumberFormatException ex)
				{
					s_log.fine(""validateCreditCardVV - "" + ex);
				}
			}
			s_log.fine(""validateCreditCardVV(3) CC="" + creditCardType + "", length="" + length);
			return ""CreditCardVVError"";
		}

		//	Other
		return """";
	}   //  validateCreditCardVV
"
org.compiere.model.MPaymentValidate.validateRoutingNo,MPaymentValidate.java,"String validateRoutingNo (String routingNo)
	{
		int length = checkNumeric(routingNo).length();
		//  US - length 9
		//  Germany - length 8
		//	Japan - 7
		//	CH - 5
		//	Issue: Bank account country
		if (length > 0)
			return """";
		return ""PaymentBankRoutingNotValid"";
	}   //  validateBankRoutingNo
"
org.compiere.model.MPaymentValidate.validateAccountNo,MPaymentValidate.java,"String validateAccountNo (String AccountNo)
	{
		int length = checkNumeric(AccountNo).length();
		if (length > 0)
			return """";
		return ""PaymentBankAccountNotValid"";
	}   //  validateBankAccountNo
"
org.compiere.model.MPaymentValidate.validateCheckNo,MPaymentValidate.java,"String validateCheckNo (String CheckNo)
	{
		int length = checkNumeric(CheckNo).length();
		if (length > 0)
			return """";
		return ""PaymentBankCheckNotValid"";
	}   //  validateBankCheckNo
"
org.compiere.model.MPaymentValidate.checkNumeric,MPaymentValidate.java,"String checkNumeric (String data)
	{
		if (data == null || data.length() == 0)
			return """";
		//  Remove all non Digits
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < data.length(); i++)
		{
			if (Character.isDigit(data.charAt(i)))
				sb.append(data.charAt(i));
		}
		return sb.toString();
	}   //  checkNumeric
"
org.compiere.model.MBOMProduct.getOfBOM,MBOMProduct.java,"MBOMProduct[] getOfBOM (MBOM bom) 
	{
		ArrayList<MBOMProduct> list = new ArrayList<MBOMProduct>();
		String sql = ""SELECT * FROM M_BOMProduct WHERE M_BOM_ID=? AND IsActive = 'Y' ORDER BY Line"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, bom.get_Trx());
			pstmt.setInt (1, bom.getM_BOM_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MBOMProduct (bom.getCtx(), rs, bom.get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		MBOMProduct[] retValue = new MBOMProduct[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getOfProduct
"
org.compiere.model.MBOMProduct.getBOMLines,MBOMProduct.java,"MBOMProduct[] getBOMLines (MProduct product)
	{
		// return lines for Current Active, Master BOM
		return getBOMLines(product, X_M_BOM.BOMTYPE_CurrentActive, X_M_BOM.BOMUSE_Master);
	}	//	getBOMLines
"
org.compiere.model.MBOMProduct.getBOMLines,MBOMProduct.java,"MBOMProduct[] getBOMLines (MProduct product, String bomType, String bomUse)
	{
		// return lines for Current Active, Master BOM
		String sql = ""SELECT M_BOM_ID FROM M_BOM WHERE M_Product_ID=? "" +
		             ""AND BOMType = ? AND BOMUse = ? AND IsActive = 'Y' "";
		Trx trx = product.get_Trx();
		int bomID = 0;
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, trx);
			pstmt.setInt(1, product.getM_Product_ID());
			pstmt.setString(2, bomType);
			pstmt.setString(3, bomUse);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				bomID = rs.getInt(1);
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

		return getBOMLines(MBOM.get(product.getCtx(), bomID));
	}	//	getBOMLines
"
org.compiere.model.MBOMProduct.getBOMLines,MBOMProduct.java,"MBOMProduct[] getBOMLines (MBOM bom)
	{
		String sql = ""SELECT * FROM M_BOMProduct WHERE M_BOM_ID=? AND IsActive='Y' ORDER BY Line"";
		ArrayList<MBOMProduct> list = new ArrayList<MBOMProduct>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, bom.get_Trx());
			pstmt.setInt(1, bom.getM_BOM_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MBOMProduct (bom.getCtx(), rs, bom.get_Trx()));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		MBOMProduct[] retValue = new MBOMProduct[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getBOMLines
"
org.compiere.model.MBOMProduct.getBOM,MBOMProduct.java,"MBOM getBOM()
	{
		if (m_bom == null && getM_BOM_ID() != 0)
			m_bom = MBOM.get(getCtx(), getM_BOM_ID());
		return m_bom;
	}	//	getBOM
"
org.compiere.model.MBOMProduct.getComponent,MBOMProduct.java,"MProduct getComponent()
	{
		if (m_component == null && getM_ProductBOM_ID() != 0)
			m_component = MProduct.get (getCtx(), getM_ProductBOM_ID());
		return m_component;
	}	//	getComponent
"
org.compiere.model.MBOMProduct.setM_ProductBOM_ID,MBOMProduct.java,"void setM_ProductBOM_ID(int M_ProductBOM_ID)
	{
		super.setM_ProductBOM_ID (M_ProductBOM_ID);
		m_component = null;
	}	//	setM_ProductBOM_ID
"
org.compiere.model.MBOMProduct.getComponentBOM,MBOMProduct.java,"MBOM getComponentBOM()
	{
		if (m_componentBOM == null && getM_ProductBOMVersion_ID() != 0)
			m_componentBOM = MBOM.get(getCtx(), getM_ProductBOMVersion_ID());
		return m_componentBOM;
	}	//	getComponentBOM
"
org.compiere.model.MBOMProduct.setM_ProductBOMVersion_ID,MBOMProduct.java,"void setM_ProductBOMVersion_ID(int M_ProductBOMVersion_ID)
	{
		super.setM_ProductBOMVersion_ID (M_ProductBOMVersion_ID);
		m_componentBOM = null;
	}	//	setM_ProductBOMVersion_ID
"
org.compiere.model.MBOMProduct.toString,MBOMProduct.java,"String toString()
	{
		StringBuffer sb = new StringBuffer (""MBOMProduct["").append(get_ID()).append("",ComponentProduct="").
							append(getComponent().getName()).append(""]"");
		return sb.toString();
	}
"
org.compiere.model.MBOMProduct.beforeSave,MBOMProduct.java,"boolean beforeSave (boolean newRecord)
	{
		//	Product
		if (getBOMProductType().equals(BOMPRODUCTTYPE_OutsideProcessing))
		{
			if (getM_ProductBOM_ID() != 0)
				setM_ProductBOM_ID(0);
		}
		else if (getM_ProductBOM_ID() == 0)
		{
			log.saveError(""Error"", Msg.parseTranslation(getCtx(), ""@NotFound@ @M_ProductBOM_ID@""));
			return false;
		}
		//	Product Attribute Instance
		if (getM_AttributeSetInstance_ID() != 0)
		{
			getBOM();
			if (m_bom != null 
				&& X_M_BOM.BOMTYPE_Make_To_Order.equals(m_bom.getBOMType()))
				;
			else
			{
				log.saveError(""Error"", Msg.parseTranslation(getCtx(), 
					""Reset @M_AttributeSetInstance_ID@: Not Make-to-Order""));
				setM_AttributeSetInstance_ID(0);
				return false;
			}
		}
		//	Alternate
		if ((getBOMProductType().equals(BOMPRODUCTTYPE_Alternative)
			|| getBOMProductType().equals(BOMPRODUCTTYPE_AlternativeDefault)))
		{
			if (getM_BOMAlternative_ID() == 0)
			{
				log.saveError(""Error"", Msg.parseTranslation(getCtx(), ""@NotFound@ @M_BOMAlternative_ID@""));
				return false;
			}
		}
		else
		{
			setM_BOMAlternative_ID(0);
		}
		//	Operation
		if (getM_ProductOperation_ID() != 0)
		{
			if (getSeqNo() == 0)
			{
				log.saveError(""Error"", Msg.parseTranslation(getCtx(), ""@NotFound@ @SeqNo@""));
				return false;
			}
		}
		else	//	no op
		{
			if (getSeqNo() != 0)
				setSeqNo(0);
			if (getLeadTimeOffset() != 0)
				setLeadTimeOffset(0);
		}
		
		//	Set Line Number
		if (getLine() == 0)
		{
			String sql = ""SELECT NVL(MAX(Line),0)+10 FROM M_BOMProduct WHERE M_BOM_ID=?"";
			int ii = DB.getSQLValue (get_Trx(), sql, getM_BOM_ID());
			setLine (ii);
		}

		return true;
	}	//	beforeSave
"
org.compiere.model.MBOMProduct.afterSave,MBOMProduct.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		//	BOM Component Line was changed
		if (newRecord || is_ValueChanged(""M_ProductBOM_ID"") || is_ValueChanged(""M_ProductBOMVersion_ID"") || is_ValueChanged(""IsActive""))
		{
			MBOM mbom = new MBOM (getCtx(), getM_BOM_ID(), get_Trx());
			//	Invalidate BOM
			MProduct product = new MProduct (getCtx(), mbom.getM_Product_ID(), get_Trx());
			if (get_Trx() != null)
				product.load(get_Trx());
			if (product.isVerified())
			{
				product.setIsVerified(false);
				product.save(get_Trx());
			}
			//	Invalidate Products where BOM is used
			
		}
		return success;
	}	//	afterSave
"
org.compiere.model.MDataMigrationPreview.delete,MDataMigrationPreview.java,"int delete (int AD_DataMigration_ID, Trx trx)
	{
		String sql = ""DELETE FROM AD_DataMigrationPreview WHERE AD_DataMigration_ID=?"";
		int count = DB.executeUpdate(sql, AD_DataMigration_ID, trx);
		return count;
	}	//	delete
"
org.compiere.model.MDataMigrationPreview.setPOInfo,MDataMigrationPreview.java,"void setPOInfo (PO po)
	{
		setAD_Table_ID(po.get_Table_ID());
		setRecord_ID(po.get_ID());
		//
		String dd = po.toStringX();
		if (dd.endsWith(""]""))
		{
			int index = dd.indexOf(""["");
			if (index != -1)
				dd = dd.substring(index+1, dd.length()-1);
		}
		if (dd.length() > 255)
			dd = dd.substring(0,255);
		setDescription(dd);
		//
		MTable table = MTable.get(po.getCtx(), po.get_Table_ID());
		setTableUID(UniqueID.getUniqueID(table, po));
	}	//	setPOInfo
"
org.compiere.model.MDataMigrationPreview.toString,MDataMigrationPreview.java,"String toString()
    {
	    StringBuffer sb = new StringBuffer(""MDataMigrationPreview["")
	    	.append(get_ID())
	    	.append("",LevelNo="").append(getLevelNo())
	        .append("",AD_Table_ID="").append(getAD_Table_ID())
	        .append("",Info="").append(getInfo())
	        .append("",Description="").append(getDescription());
	    sb.append(""]"");
	    return sb.toString();
    }	//	toString
"
org.compiere.model.MRegistrationValue.getRegistrationAttribute,MRegistrationValue.java,"String getRegistrationAttribute()
	{
		if (m_registrationAttribute == null)
		{
			int A_RegistrationAttribute_ID = getA_RegistrationAttribute_ID();
			MRegistrationAttribute att = MRegistrationAttribute.get (getCtx(), A_RegistrationAttribute_ID, get_Trx());
			m_registrationAttribute = att.getName();
			m_registrationAttributeDescription = att.getDescription();
			m_seqNo = att.getSeqNo();
		}
		return m_registrationAttribute; 
	}	//	getRegistrationAttribute
"
org.compiere.model.MRegistrationValue.getRegistrationAttributeDescription,MRegistrationValue.java,"String getRegistrationAttributeDescription()
	{
		if (m_registrationAttributeDescription == null)
			getRegistrationAttribute();
		return m_registrationAttributeDescription; 
	}	//	getRegistrationAttributeDescription
"
org.compiere.model.MRegistrationValue.getSeqNo,MRegistrationValue.java,"int getSeqNo()
	{
		if (m_seqNo == -1)
			getRegistrationAttribute();
		return m_seqNo;
	}	//	getSeqNo
"
org.compiere.model.MRegistrationValue.compareTo,MRegistrationValue.java,"int compareTo (MRegistrationValue oo)
	{
		if (oo == null)
			return 0;
		int compare = getSeqNo() - oo.getSeqNo();
		return compare;
	}	//	compareTo
"
org.compiere.model.MRegistrationValue.toString,MRegistrationValue.java,"String toString()
	{
		StringBuffer sb = new StringBuffer();
		sb.append(getSeqNo()).append("": "")
			.append(getRegistrationAttribute()).append(""="").append(getName());
		return sb.toString();
	}	//	toString
"
org.compiere.model.MTemplate.get,MTemplate.java,"MTemplate get (Ctx ctx, int CM_Template_ID, Trx trx)
	{
		MTemplate retValue = new MTemplate (ctx, CM_Template_ID, trx);
		if (retValue != null)
			return retValue;
		retValue = new MTemplate (ctx, CM_Template_ID, null);
		return retValue;
	}	// get
"
org.compiere.model.MTemplate.getByName,MTemplate.java,"MTemplate getByName (Ctx ctx, String name, int projectID, Trx trx)
	{
		String sql = ""SELECT * FROM CM_Template WHERE Value LIKE ? AND CM_WebProject_ID=?"";
		MTemplate thisElement = null;
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setString (1, name);
			pstmt.setInt (2, projectID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				thisElement = new MTemplate(ctx, rs, trx);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, ""getByName"", e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return thisElement;
	}	//	getEntries
"
org.compiere.model.MTemplate.getWebProject,MTemplate.java,"MWebProject getWebProject ()
	{
		if (m_project == null)
			m_project = MWebProject.get (getCtx (), getCM_WebProject_ID ());
		return m_project;
	}	// getWebProject
"
org.compiere.model.MTemplate.getAD_Tree_ID,MTemplate.java,"int getAD_Tree_ID ()
	{
		return getWebProject ().getAD_TreeCMT_ID ();
	}	// getAD_Tree_ID;
"
org.compiere.model.MTemplate.isUseAd,MTemplate.java,"boolean isUseAd(boolean includeSub) 
	{
		if (!includeSub)
		{
			return isUseAd();
		} else {
			if (m_preBuildTemplate==null) 
				rebuildTemplate();
			if (!m_isUseAd && isUseAd()) 
				m_isUseAd = isUseAd();
			if (isUseAd())
				m_adTemplates.append (get_ID() + "","");
			return m_isUseAd;
		}
	}
"
org.compiere.model.MTemplate.isNews,MTemplate.java,"boolean isNews(boolean includeSub) 
	{
		if (!includeSub)
		{
			return isNews ();
		} else {
			if (m_preBuildTemplate==null) 
				rebuildTemplate();
			if (m_isNews!=isNews()) 
				m_isNews = isNews();
			return m_isNews;
		}
	}
"
org.compiere.model.MTemplate.isRequest,MTemplate.java,"boolean isRequest(boolean includeSub) 
	{
		if (m_preBuildTemplate==null)
			rebuildTemplate();
		return m_isRequest;
	}
"
org.compiere.model.MTemplate.getPreBuildTemplate,MTemplate.java,"StringBuffer getPreBuildTemplate ()
	{
		if (m_preBuildTemplate == null)
			rebuildTemplate();
		return m_preBuildTemplate;
	}
"
org.compiere.model.MTemplate.rebuildTemplate,MTemplate.java,"void rebuildTemplate ()
	{
		// We will build the prebuild code, so we check which subs are
		// needed and build it depending on them
		m_preBuildTemplate = new StringBuffer (getTemplateXST ());
		// Let's see whether the template calls Subtemplates...
		if (m_preBuildTemplate.indexOf (""<xsl:call-template"") >= 0)
		{
			StringBuffer subTemplates = new StringBuffer ();
			int pos = 0;
			ArrayList<String> subTemplateNames = new ArrayList<String> ();
			while (m_preBuildTemplate.indexOf (""<xsl:call-template"", pos) >= 0)
			{
				String thisName = null;
				int beginPos = m_preBuildTemplate.indexOf (
					""<xsl:call-template"", pos);
				int endPos = m_preBuildTemplate.indexOf (""/>"", beginPos);
				if (m_preBuildTemplate.indexOf ("">"", beginPos) < endPos)
				{
					endPos = m_preBuildTemplate.indexOf ("">"", beginPos) + 1;
				}
				String tempTemplate = m_preBuildTemplate.substring (beginPos,
					endPos);
				pos = m_preBuildTemplate.indexOf (""<xsl:call-template"", pos)
					+ tempTemplate.length ();
				if (tempTemplate.indexOf (""name="") >= 0)
				{
					thisName = tempTemplate.substring (tempTemplate
						.indexOf (""name=\"""") + 6, tempTemplate.indexOf (
						""\"""", tempTemplate.indexOf (""name=\"""") + 7));
					if (!subTemplateNames.contains (thisName))
						subTemplateNames.add (thisName);
				}
			}
			// Build all the subtemplates and add them to the main template
			for (int i=0;i<subTemplateNames.size ();i++) 
			{
				MTemplate subTemplate = getByName(getCtx(), subTemplateNames.get (i), getCM_WebProject_ID(), get_Trx());
				if (subTemplate != null)
				{
					if (subTemplate.containsSubtemplates (true, subTemplateNames)) 
					{
						subTemplateNames = subTemplate.getSubTemplateList();
					}
					subTemplates.append (subTemplate.getTemplateXST ());
					if (subTemplate.isUseAd ())
					{
						m_isUseAd = true;
						m_adTemplates.append(subTemplate.get_ID () + "","");
					}
					if (subTemplate.isNews ())
						m_isNews = true;
				}
			}
			m_preBuildTemplate.append (subTemplates);
			m_preBuildTemplate = new StringBuffer (m_preBuildTemplate
				.substring (0, m_preBuildTemplate
					.indexOf (""</xsl:stylesheet>""))
				+ subTemplates.toString () + ""\n</xsl:stylesheet>"");
			// Check whether we need Request functionality for handling
			if (m_preBuildTemplate.indexOf (""/webCM/requestTables/"")>=0) 
				m_isRequest = true;
		}
	}	//	getPreBuildTemplate
"
org.compiere.model.MTemplate.getSubTemplateList,MTemplate.java,"ArrayList<String> getSubTemplateList()
	{
		return m_subTemplates;
	}
"
org.compiere.model.MTemplate.containsSubtemplates,MTemplate.java,"boolean containsSubtemplates(boolean refresh, ArrayList<String> existingSubTemplates) 
	{
		if (refresh)
			m_subTemplates = null;
		if (m_subTemplates!=null)
			return m_hasSubtemplates;
		m_subTemplates = new ArrayList<String> ();
		// Procedure to get the Subtemplates as an ArrayList
		if (existingSubTemplates!=null) 
		{
			for (int i=0;i<existingSubTemplates.size ();i++)
			{
				String thisTemplate = existingSubTemplates.get (i);
				m_subTemplates.add (thisTemplate);
			}
			//	m_subTemplates.add(existingSubTemplates.get (i));
		}
		if (getTemplateXST().indexOf (""<xsl:call-template"") >= 0)
		{
			int pos = 0;
			while (getTemplateXST().indexOf (""<xsl:call-template"", pos) >= 0)
			{
				String thisName = null;
				int beginPos = getTemplateXST().indexOf (
					""<xsl:call-template"", pos);
				int endPos = getTemplateXST().indexOf (""/>"", beginPos);
				if (getTemplateXST().indexOf ("">"", beginPos) < endPos)
				{
					endPos = getTemplateXST().indexOf ("">"", beginPos) + 1;
				}
				String tempTemplate = getTemplateXST().substring (beginPos,
					endPos);
				pos = getTemplateXST().indexOf (""<xsl:call-template"", pos)
					+ tempTemplate.length ();
				if (tempTemplate.indexOf (""name="") >= 0)
				{
					thisName = tempTemplate.substring (tempTemplate
						.indexOf (""name=\"""") + 6, tempTemplate.indexOf (
						""\"""", tempTemplate.indexOf (""name=\"""") + 7));
					if (!m_subTemplates.contains (thisName))
						m_subTemplates.add (thisName);
				}
			}
			m_hasSubtemplates = true;
		} else {
			m_hasSubtemplates = false;
		}
		return m_hasSubtemplates;
	}
"
org.compiere.model.MTemplate.beforeSave,MTemplate.java,"boolean beforeSave (boolean newRecord)
	{
		// TODO: We should implement the validation, until then we enforce it
		if (!isValid()) {
			setIsValid(true);
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MTemplate.afterSave,MTemplate.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!success)
			return success;
		if (newRecord)
		{
			StringBuffer sb = new StringBuffer (
				""INSERT INTO AD_TreeNodeCMT ""
					+ ""(AD_Client_ID,AD_Org_ID, IsActive,Created,CreatedBy,Updated,UpdatedBy, ""
					+ ""AD_Tree_ID, Node_ID, Parent_ID, SeqNo) "" + ""VALUES ("")
				.append (getAD_Client_ID ()).append (
					"",0, 'Y', SysDate, 0, SysDate, 0,"").append (
					getAD_Tree_ID ()).append ("","").append (get_ID ()).append (
					"", 0, 999)"");
			int no = DB.executeUpdate (sb.toString (), get_Trx ());
			if (no > 0)
				log.fine (""#"" + no + "" - TreeType=CMT"");
			else
				log.warning (""#"" + no + "" - TreeType=CMT"");
			return no > 0;
		}
		if (!newRecord)
		{
			org.compiere.cm.CacheHandler thisHandler = new org.compiere.cm.CacheHandler (
				org.compiere.cm.CacheHandler.convertJNPURLToCacheURL (getCtx ()
					.getContext(""java.naming.provider.url"")), log, getCtx (),
				get_Trx ());
			if (!isInclude ())
			{
				// Clean Main Templates on a single level.
				thisHandler.cleanTemplate (this.get_ID ());
				// Check the elements in the Stage Area
				MCStage[] theseStages = MCStage.getStagesByTemplate (getWebProject(), get_ID());
				for (MCStage element : theseStages)
					element.checkElements ();
			}
			else
			{
				// Since we not know which main templates we will clean up all!
				thisHandler.emptyTemplate ();
			}
		}
		return success;
	}	// afterSave
"
org.compiere.model.MTemplate.afterDelete,MTemplate.java,"boolean afterDelete (boolean success)
	{
		if (!success)
			return success;
		//
		StringBuffer sb = new StringBuffer (""DELETE FROM AD_TreeNodeCMT "")
			.append ("" WHERE Node_ID="").append (get_IDOld ()).append (
				"" AND AD_Tree_ID="").append (getAD_Tree_ID ());
		int no = DB.executeUpdate (sb.toString (), get_Trx ());
		if (no > 0)
			log.fine (""#"" + no + "" - TreeType=CMT"");
		else
			log.warning (""#"" + no + "" - TreeType=CMT"");
		return no > 0;
	}	// afterDelete
"
org.compiere.model.MTemplate.getAds,MTemplate.java,"MAd[] getAds ()
	{
		int[] AdCats = null;
		String sql = ""SELECT count(*) FROM CM_Template_AD_Cat WHERE CM_Template_ID IN ("" + m_adTemplates.toString ().substring (0,m_adTemplates.length ()-1) + "")"";
		PreparedStatement pstmt = null;
		try
		{
			int numberAdCats = 0;
			pstmt = DB.prepareStatement (sql, get_Trx ());
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
			{
				numberAdCats = rs.getInt (1);
			}
			rs.close ();
			AdCats = new int[numberAdCats];
			int i = 0;
			sql = ""SELECT CM_Ad_Cat_ID FROM CM_Template_AD_Cat WHERE CM_Template_ID IN ("" + m_adTemplates.toString ().substring (0,m_adTemplates.length ()-1) + "")"";
			pstmt = DB.prepareStatement (sql, get_Trx ());
			rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				AdCats[i] = rs.getInt (1);
				i++;
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			log.log (Level.SEVERE, sql, ex);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;
		if (AdCats != null && AdCats.length > 0)
		{
			MAd[] returnAds = new MAd[AdCats.length];
			for (int i = 0; i < AdCats.length; i++)
			{
				MAd thisAd = MAd.getNext (getCtx (), AdCats[i],
					get_Trx ());
				if (thisAd!=null) 
					returnAds[i] = thisAd;
			}
			return returnAds;
		}
		else
		{
			return null;
		}
	}	//	getAds
"
org.compiere.model.MInvoiceLine.getOfInOutLine,MInvoiceLine.java,"MInvoiceLine getOfInOutLine (MInOutLine sLine)
	{
		if (sLine == null)
			return null;
		MInvoiceLine retValue = null;
		String sql = ""SELECT * FROM C_InvoiceLine WHERE M_InOutLine_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, sLine.get_Trx());
			pstmt.setInt (1, sLine.getM_InOutLine_ID());
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
			{
				retValue = new MInvoiceLine (sLine.getCtx(), rs, sLine.get_Trx());
				if (rs.next())
					s_log.warning(""More than one C_InvoiceLine of "" + sLine);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return retValue;
	}	//	getOfInOutLine
"
org.compiere.model.MInvoiceLine.setInvoice,MInvoiceLine.java,"void setInvoice (MInvoice invoice)
	{
		m_parent = invoice;
		m_M_PriceList_ID = invoice.getM_PriceList_ID();
		m_DateInvoiced = invoice.getDateInvoiced();
		m_C_BPartner_ID = invoice.getC_BPartner_ID();
		m_C_BPartner_Location_ID = invoice.getC_BPartner_Location_ID();
		m_IsSOTrx = invoice.isSOTrx();
		m_precision = Integer.valueOf(invoice.getPrecision());
	}	//	setOrder
"
org.compiere.model.MInvoiceLine.getParent,MInvoiceLine.java,"MInvoice getParent()
	{
		if (m_parent == null)
			m_parent = new MInvoice(getCtx(), getC_Invoice_ID(), get_Trx());
		return m_parent;
	}	//	getParent
"
org.compiere.model.MInvoiceLine.setOrderLine,MInvoiceLine.java,"void setOrderLine (MOrderLine oLine)
	{
		m_oLine = oLine;
		setC_OrderLine_ID(oLine.getC_OrderLine_ID());
		//
		setLine(oLine.getLine());
		setIsDescription(oLine.isDescription());
		setDescription(oLine.getDescription());
		//
		setC_Charge_ID(oLine.getC_Charge_ID());
		//
		setM_Product_ID(oLine.getM_Product_ID());
		setM_AttributeSetInstance_ID(oLine.getM_AttributeSetInstance_ID());
		setS_ResourceAssignment_ID(oLine.getS_ResourceAssignment_ID());
		setC_UOM_ID(oLine.getC_UOM_ID());
		//
		setPriceEntered(oLine.getPriceEntered());
		setPriceActual(oLine.getPriceActual());
		setPriceLimit(oLine.getPriceLimit());
		setPriceList(oLine.getPriceList());
		//
		setC_Tax_ID(oLine.getC_Tax_ID());
		setLineNetAmt(oLine.getLineNetAmt());
		//
		setAD_Org_ID(oLine.getAD_Org_ID());
		setC_Project_ID(oLine.getC_Project_ID());
		setC_ProjectPhase_ID(oLine.getC_ProjectPhase_ID());
		setC_ProjectTask_ID(oLine.getC_ProjectTask_ID());
		setC_Activity_ID(oLine.getC_Activity_ID());
		setC_Campaign_ID(oLine.getC_Campaign_ID());
		setAD_OrgTrx_ID(oLine.getAD_OrgTrx_ID());
		setUser1_ID(oLine.getUser1_ID());
		setUser2_ID(oLine.getUser2_ID());
		//
		setRRAmt(oLine.getRRAmt());
		setRRStartDate(oLine.getRRStartDate());
	}	//	setOrderLine
"
org.compiere.model.MInvoiceLine.setShipLine,MInvoiceLine.java,"void setShipLine (MInOutLine sLine)
	{
		setM_InOutLine_ID(sLine.getM_InOutLine_ID());
		setC_OrderLine_ID(sLine.getC_OrderLine_ID());
		//
		setLine(sLine.getLine());
		setIsDescription(sLine.isDescription());
		setDescription(sLine.getDescription());
		//
		setM_Product_ID(sLine.getM_Product_ID());
		setC_UOM_ID(sLine.getC_UOM_ID());
		setM_AttributeSetInstance_ID(sLine.getM_AttributeSetInstance_ID());
	//	setS_ResourceAssignment_ID(sLine.getS_ResourceAssignment_ID());
		setC_Charge_ID(sLine.getC_Charge_ID());
		//
		int C_OrderLine_ID = sLine.getC_OrderLine_ID();
		if (C_OrderLine_ID != 0)
		{
			getOrderLine();
			setS_ResourceAssignment_ID(m_oLine.getS_ResourceAssignment_ID());
			//
			setPriceEntered(m_oLine.getPriceEntered());
			setPriceActual(m_oLine.getPriceActual());
			setPriceLimit(m_oLine.getPriceLimit());
			setPriceList(m_oLine.getPriceList());
			//
			setC_Tax_ID(m_oLine.getC_Tax_ID());
			setLineNetAmt(m_oLine.getLineNetAmt());
			setC_Project_ID(m_oLine.getC_Project_ID());
		}
		else
		{
			setPrice();
			setTax();
		}
		//
		setAD_Org_ID(sLine.getAD_Org_ID());
		setC_Project_ID(sLine.getC_Project_ID());
		setC_ProjectPhase_ID(sLine.getC_ProjectPhase_ID());
		setC_ProjectTask_ID(sLine.getC_ProjectTask_ID());
		setC_Activity_ID(sLine.getC_Activity_ID());
		setC_Campaign_ID(sLine.getC_Campaign_ID());
		setAD_OrgTrx_ID(sLine.getAD_OrgTrx_ID());
		setUser1_ID(sLine.getUser1_ID());
		setUser2_ID(sLine.getUser2_ID());
	}	//	setShipLine
"
org.compiere.model.MInvoiceLine.addDescription,MInvoiceLine.java,"void addDescription (String description)
	{
		String desc = getDescription();
		if (desc == null)
			setDescription(description);
		else
			setDescription(desc + "" | "" + description);
	}	//	addDescription
"
org.compiere.model.MInvoiceLine.setM_AttributeSetInstance_ID,MInvoiceLine.java,"void setM_AttributeSetInstance_ID (int M_AttributeSetInstance_ID)
	{
		if (M_AttributeSetInstance_ID == 0)		//	 0 is valid ID
			set_Value(""M_AttributeSetInstance_ID"", Integer.valueOf(0));
		else
			super.setM_AttributeSetInstance_ID (M_AttributeSetInstance_ID);
	}	//	setM_AttributeSetInstance_ID
"
org.compiere.model.MInvoiceLine.setPrice,MInvoiceLine.java,"void setPrice()
	{
		if ((getM_Product_ID() == 0) || isDescription())
		{
			m_priceSet = true;
			return;
		}
		if ((m_M_PriceList_ID == 0) || (m_C_BPartner_ID == 0))
			setInvoice(getParent());
		if ((m_M_PriceList_ID == 0) || (m_C_BPartner_ID == 0))
			throw new IllegalStateException(""setPrice - PriceList unknown!"");
		setPrice (m_M_PriceList_ID, m_C_BPartner_ID);
	}	//	setPrice
"
org.compiere.model.MInvoiceLine.setPrice,MInvoiceLine.java,"void setPrice (int M_PriceList_ID, int C_BPartner_ID)
	{
		if ((getM_Product_ID() == 0) || isDescription())
		{
			m_priceSet = true;
			return;
		}
		//
		log.fine(""M_PriceList_ID="" + M_PriceList_ID);
		m_productPricing = new MProductPricing (getAD_Client_ID(), getAD_Org_ID(),
			getM_Product_ID(), C_BPartner_ID, getQtyInvoiced(), m_IsSOTrx);
		m_productPricing.setM_PriceList_ID(M_PriceList_ID);
		m_productPricing.setPriceDate(m_DateInvoiced);

		m_productPricing.calculatePrice();
		if (!m_productPricing.isCalculated())
			return;


		//
		setPriceActual (m_productPricing.getPriceStd());
		setPriceList (m_productPricing.getPriceList());
		setPriceLimit (m_productPricing.getPriceLimit());
		//
		if (getQtyEntered().compareTo(getQtyInvoiced()) == 0)
			setPriceEntered(getPriceActual());
		else
			setPriceEntered(getPriceActual().multiply(getQtyInvoiced()
				.divide(getQtyEntered(), 6, BigDecimal.ROUND_HALF_UP)));	//	precision
		//
		if (getC_UOM_ID() == 0)
			setC_UOM_ID(m_productPricing.getC_UOM_ID());
		//
		m_priceSet = true;
	}	//	setPrice
"
org.compiere.model.MInvoiceLine.setPrice,MInvoiceLine.java,"void setPrice (BigDecimal PriceActual)
	{
		setPriceEntered(PriceActual);
		setPriceActual (PriceActual);
	}	//	setPrice
"
org.compiere.model.MInvoiceLine.setPriceActual,MInvoiceLine.java,"void setPriceActual (BigDecimal PriceActual)
	{
		if (PriceActual == null)
			throw new IllegalArgumentException (""PriceActual is mandatory"");
		set_ValueNoCheck(""PriceActual"", PriceActual);
	}	//	setPriceActual
"
org.compiere.model.MInvoiceLine.checkPrice,MInvoiceLine.java,"void checkPrice ()
	{
		if ((getM_Product_ID() == 0) || isDescription())
		{
			m_priceFound = true;
			return;
		}

		MInvoice parent = getParent();
		m_productPricing = new MProductPricing (getAD_Client_ID(), getAD_Org_ID(),
			getM_Product_ID(), parent.getC_BPartner_ID(), getQtyInvoiced(), parent.isSOTrx());
		m_productPricing.setM_PriceList_ID(parent.getM_PriceList_ID());
		m_productPricing.setPriceDate(m_DateInvoiced);

		m_productPricing.calculatePrice();
		if (!m_productPricing.isCalculated())
			return;

		m_priceFound = true;
	}
"
org.compiere.model.MInvoiceLine.setTax,MInvoiceLine.java,"boolean setTax()
	{
		if (isDescription())
			return true;
		//
		MOrg org = MOrg.get(getCtx(), getAD_Org_ID());
		int M_Warehouse_ID = org.getM_Warehouse_ID();
		//
		int C_Tax_ID = Tax.get(getCtx(), getM_Product_ID(), getC_Charge_ID() , m_DateInvoiced, m_DateInvoiced,
			getAD_Org_ID(), M_Warehouse_ID,
			m_C_BPartner_Location_ID,		//	should be bill to
			m_C_BPartner_Location_ID, m_IsSOTrx);
		if (C_Tax_ID == 0)
		{
			log.log(Level.SEVERE, ""No Tax found"");
			return false;
		}
		setC_Tax_ID (C_Tax_ID);
		if (m_IsSOTrx)
		{
		}
		return true;
	}	//	setTax
"
org.compiere.model.MInvoiceLine.setTaxAmt,MInvoiceLine.java,"void setTaxAmt ()
	{
		BigDecimal TaxAmt = Env.ZERO;
		if (getC_Tax_ID() == 0)
			return;
	//	setLineNetAmt();
		MTax tax = MTax.get (getCtx(), getC_Tax_ID());
		if (tax.isDocumentLevel() && m_IsSOTrx)		//	AR Inv Tax
			return;
		//
		TaxAmt = tax.calculateTax(getLineNetAmt(), isTaxIncluded(), getPrecision());
		if (isTaxIncluded())
			setLineTotalAmt(getLineNetAmt());
		else
			setLineTotalAmt(getLineNetAmt().add(TaxAmt));
		super.setTaxAmt (TaxAmt);
	}	//	setTaxAmt
"
org.compiere.model.MInvoiceLine.setLineNetAmt,MInvoiceLine.java,"void setLineNetAmt ()
	{
		//	Calculations & Rounding
		BigDecimal net = getPriceActual().multiply(getQtyInvoiced());
		if (net.scale() > getPrecision())
			net = net.setScale(getPrecision(), BigDecimal.ROUND_HALF_UP);
		super.setLineNetAmt (net);
	}	//	setLineNetAmt
"
org.compiere.model.MInvoiceLine.setQty,MInvoiceLine.java,"void setQty (int Qty)
	{
		setQty(new BigDecimal(Qty));
	}	//	setQtyInvoiced
"
org.compiere.model.MInvoiceLine.setQty,MInvoiceLine.java,"void setQty (BigDecimal Qty)
	{
		setQtyEntered(Qty);
		setQtyInvoiced(getQtyEntered());
	}	//	setQtyInvoiced
"
org.compiere.model.MInvoiceLine.setQtyEntered,MInvoiceLine.java,"void setQtyEntered (BigDecimal QtyEntered)
	{
		if ((QtyEntered != null) && (getC_UOM_ID() != 0))
		{
			int precision = MUOM.getPrecision(getCtx(), getC_UOM_ID());
			QtyEntered = QtyEntered.setScale(precision, BigDecimal.ROUND_HALF_UP);
		}
		super.setQtyEntered (QtyEntered);
	}	//	setQtyEntered
"
org.compiere.model.MInvoiceLine.setQtyInvoiced,MInvoiceLine.java,"void setQtyInvoiced (BigDecimal QtyInvoiced)
	{
		MProduct product = getProduct();
		if ((QtyInvoiced != null) && (product != null))
		{
			int precision = product.getUOMPrecision();
			QtyInvoiced = QtyInvoiced.setScale(precision, BigDecimal.ROUND_HALF_UP);
		}
		super.setQtyInvoiced(QtyInvoiced);
	}	//	setQtyInvoiced
"
org.compiere.model.MInvoiceLine.setProduct,MInvoiceLine.java,"void setProduct (MProduct product)
	{
		m_product = product;
		if (m_product != null)
		{
			setM_Product_ID(m_product.getM_Product_ID());
			setC_UOM_ID (m_product.getC_UOM_ID());
		}
		else
		{
			setM_Product_ID(0);
			setC_UOM_ID (0);
		}
		setM_AttributeSetInstance_ID(0);
	}	//	setProduct
"
org.compiere.model.MInvoiceLine.setM_Product_ID,MInvoiceLine.java,"void setM_Product_ID (int M_Product_ID, boolean setUOM)
	{
		if (setUOM)
			setProduct(MProduct.get(getCtx(), M_Product_ID));
		else
			super.setM_Product_ID (M_Product_ID);
		setM_AttributeSetInstance_ID(0);
	}	//	setM_Product_ID
"
org.compiere.model.MInvoiceLine.setM_Product_ID,MInvoiceLine.java,"void setM_Product_ID (int M_Product_ID, int C_UOM_ID)
	{
		super.setM_Product_ID (M_Product_ID);
		super.setC_UOM_ID(C_UOM_ID);
		setM_AttributeSetInstance_ID(0);
	}	//	setM_Product_ID
"
org.compiere.model.MInvoiceLine.getProduct,MInvoiceLine.java,"MProduct getProduct()
	{
		if ((m_product == null) && (getM_Product_ID() != 0))
			m_product =  MProduct.get (getCtx(), getM_Product_ID());
		return m_product;
	}	//	getProduct
"
org.compiere.model.MInvoiceLine.getC_Project_ID,MInvoiceLine.java,"int getC_Project_ID()
	{
		int ii = super.getC_Project_ID ();
		if (ii == 0)
			ii = getParent().getC_Project_ID();
		return ii;
	}	//	getC_Project_ID
"
org.compiere.model.MInvoiceLine.getC_Activity_ID,MInvoiceLine.java,"int getC_Activity_ID()
	{
		int ii = super.getC_Activity_ID ();
		if (ii == 0)
			ii = getParent().getC_Activity_ID();
		return ii;
	}	//	getC_Activity_ID
"
org.compiere.model.MInvoiceLine.getC_Campaign_ID,MInvoiceLine.java,"int getC_Campaign_ID()
	{
		int ii = super.getC_Campaign_ID ();
		if (ii == 0)
			ii = getParent().getC_Campaign_ID();
		return ii;
	}	//	getC_Campaign_ID
"
org.compiere.model.MInvoiceLine.getUser1_ID,MInvoiceLine.java,"int getUser1_ID ()
	{
		int ii = super.getUser1_ID ();
		if (ii == 0)
			ii = getParent().getUser1_ID();
		return ii;
	}	//	getUser1_ID
"
org.compiere.model.MInvoiceLine.getUser2_ID,MInvoiceLine.java,"int getUser2_ID ()
	{
		int ii = super.getUser2_ID ();
		if (ii == 0)
			ii = getParent().getUser2_ID();
		return ii;
	}	//	getUser2_ID
"
org.compiere.model.MInvoiceLine.getAD_OrgTrx_ID,MInvoiceLine.java,"int getAD_OrgTrx_ID()
	{
		int ii = super.getAD_OrgTrx_ID();
		if (ii == 0)
			ii = getParent().getAD_OrgTrx_ID();
		return ii;
	}	//	getAD_OrgTrx_ID
"
org.compiere.model.MInvoiceLine.getOrderLine,MInvoiceLine.java,"MOrderLine getOrderLine()
	{
		if (getC_OrderLine_ID() != 0)
		{
			if ((m_oLine == null) || (m_oLine.getC_OrderLine_ID() != getC_OrderLine_ID()))
				m_oLine = new MOrderLine (getCtx(), getC_OrderLine_ID(), get_Trx());
		}
		return m_oLine;
	}
"
org.compiere.model.MInvoiceLine.toString,MInvoiceLine.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MInvoiceLine["")
			.append(get_ID()).append("","").append(getLine())
			.append("",QtyInvoiced="").append(getQtyInvoiced())
			.append("",LineNetAmt="").append(getLineNetAmt())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MInvoiceLine.getName,MInvoiceLine.java,"String getName ()
	{
		if (m_name == null)
		{
			String sql = ""SELECT COALESCE (p.Name, c.Name) ""
				+ ""FROM C_InvoiceLine il""
				+ "" LEFT OUTER JOIN M_Product p ON (il.M_Product_ID=p.M_Product_ID)""
				+ "" LEFT OUTER JOIN C_Charge C ON (il.C_Charge_ID=c.C_Charge_ID) ""
				+ ""WHERE C_InvoiceLine_ID=?"";
			PreparedStatement pstmt = null;
			try
			{
				pstmt = DB.prepareStatement(sql, get_Trx());
				pstmt.setInt(1, getC_InvoiceLine_ID());
				ResultSet rs = pstmt.executeQuery();
				if (rs.next())
					m_name = rs.getString(1);
				rs.close();
				pstmt.close();
				pstmt = null;
				if (m_name == null)
					m_name = ""??"";
			}
			catch (Exception e)
			{
				log.log(Level.SEVERE, ""getName"", e);
			}
			finally
			{
				try
				{
					if (pstmt != null)
						pstmt.close ();
				}
				catch (Exception e)
				{}
				pstmt = null;
			}
		}
		return m_name;
	}	//	getName
"
org.compiere.model.MInvoiceLine.setName,MInvoiceLine.java,"void setName (String tempName)
	{
		m_name = tempName;
	}	//	setName
"
org.compiere.model.MInvoiceLine.getDescriptionText,MInvoiceLine.java,"String getDescriptionText()
	{
		return super.getDescription();
	}	//	getDescriptionText
"
org.compiere.model.MInvoiceLine.getPrecision,MInvoiceLine.java,"int getPrecision()
	{
		if (m_precision != null)
			return m_precision.intValue();

		String sql = ""SELECT c.StdPrecision ""
			+ ""FROM C_Currency c INNER JOIN C_Invoice x ON (x.C_Currency_ID=c.C_Currency_ID) ""
			+ ""WHERE x.C_Invoice_ID=?"";
		int i = DB.getSQLValue(get_Trx(), sql, getC_Invoice_ID());
		if (i < 0)
		{
			log.warning(""Precision="" + i + "" - set to 2"");
			i = 2;
		}
		m_precision = Integer.valueOf(i);
		return m_precision.intValue();
	}	//	getPrecision
"
org.compiere.model.MInvoiceLine.isTaxIncluded,MInvoiceLine.java,"boolean isTaxIncluded()
	{
		if (m_M_PriceList_ID == 0)
		{
			m_M_PriceList_ID = DB.getSQLValue(get_Trx(),
				""SELECT M_PriceList_ID FROM C_Invoice WHERE C_Invoice_ID=?"",
				getC_Invoice_ID());
		}
		MPriceList pl = MPriceList.get(getCtx(), m_M_PriceList_ID, get_Trx());
		return pl.isTaxIncluded();
	}	//	isTaxIncluded
"
org.compiere.model.MInvoiceLine.createLeadRequest,MInvoiceLine.java,"void createLeadRequest(MInvoice invoice)
	{
		if ((getProduct() == null) || (m_product.getR_Source_ID() == 0))
			return;
		String summary = ""Purchased: "" + m_product.getName()
			+ "" - "" + getQtyEntered() + "" * "" + getPriceEntered();
		//
		MSource source = MSource.get(getCtx(), m_product.getR_Source_ID());
		//	Create Request
		if (X_R_Source.SOURCECREATETYPE_Both.equals(source.getSourceCreateType())
			|| X_R_Source.SOURCECREATETYPE_Request.equals(source.getSourceCreateType()))
		{
			MRequest request = new MRequest(getCtx(), 0, get_Trx());
			request.setClientOrg(this);
			request.setSummary(summary);
			request.setAD_User_ID(invoice.getAD_User_ID());
			request.setC_BPartner_ID(invoice.getC_BPartner_ID());
			request.setC_Invoice_ID(invoice.getC_Invoice_ID());
			request.setC_Order_ID(invoice.getC_Order_ID());
			request.setC_Activity_ID(invoice.getC_Activity_ID());
			request.setC_Campaign_ID(invoice.getC_Campaign_ID());
			request.setC_Project_ID(invoice.getC_Project_ID());
			//
			request.setM_Product_ID(getM_Product_ID());
			request.setR_Source_ID(source.getR_Source_ID());
			request.save();
		}
		//	Create Lead
		if (X_R_Source.SOURCECREATETYPE_Both.equals(source.getSourceCreateType())
			|| X_R_Source.SOURCECREATETYPE_Lead.equals(source.getSourceCreateType()))
		{
			MLead lead = new MLead(getCtx(), 0, get_Trx());
			lead.setClientOrg(this);
			lead.setDescription(summary);
			lead.setAD_User_ID(invoice.getAD_User_ID());
			lead.setC_BPartner_Location_ID(invoice.getC_BPartner_Location_ID());
			lead.setC_BPartner_ID(invoice.getC_BPartner_ID());
			lead.setC_Campaign_ID(invoice.getC_Campaign_ID());
			lead.setC_Project_ID(invoice.getC_Project_ID());
			//
			MBPartnerLocation bpLoc = new MBPartnerLocation (getCtx(), invoice.getC_BPartner_Location_ID(), null);
			MLocation loc = bpLoc.getLocation(false);
			lead.setAddress1(loc.getAddress1());
			lead.setAddress2(loc.getAddress2());
			lead.setCity(loc.getCity());
			lead.setPostal(loc.getPostal());
			lead.setPostal_Add(loc.getPostal_Add());
			lead.setRegionName(loc.getRegionName(false));
			lead.setC_Region_ID(loc.getC_Region_ID());
			lead.setC_City_ID(loc.getC_City_ID());
			lead.setC_Country_ID(loc.getC_Country_ID());
			//
			lead.setR_Source_ID(source.getR_Source_ID());
			lead.save();
		}
	}	//	createLeadRequest
"
org.compiere.model.MInvoiceLine.setS_ResourceAssignment_ID,MInvoiceLine.java,"void setS_ResourceAssignment_ID (String oldS_ResourceAssignment_ID,
			String newS_ResourceAssignment_ID, int windowNo) throws Exception
	{
		if ((newS_ResourceAssignment_ID == null) || (newS_ResourceAssignment_ID.length() == 0))
			return;
		int S_ResourceAssignment_ID = Integer.parseInt(newS_ResourceAssignment_ID);
		if (S_ResourceAssignment_ID == 0)
			return;
		//
		super.setS_ResourceAssignment_ID(S_ResourceAssignment_ID);

		int M_Product_ID = 0;
		String Name = null;
		String Description = null;
		BigDecimal Qty = null;
		String sql = ""SELECT p.M_Product_ID, ra.Name, ra.Description, ra.Qty ""
			+ ""FROM S_ResourceAssignment ra""
			+ "" INNER JOIN M_Product p ON (p.S_Resource_ID=ra.S_Resource_ID) ""
			+ ""WHERE ra.S_ResourceAssignment_ID=?"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, S_ResourceAssignment_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				M_Product_ID = rs.getInt (1);
				Name = rs.getString(2);
				Description = rs.getString(3);
				Qty = rs.getBigDecimal(4);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}

		log.fine(""S_ResourceAssignment_ID="" + S_ResourceAssignment_ID
				+ "" - M_Product_ID="" + M_Product_ID);
		if (M_Product_ID != 0)
		{
			setM_Product_ID(M_Product_ID);
			if (Description != null)
				Name += "" ("" + Description + "")"";
			if (!""."".equals(Name))
				setDescription(Name);
			if (Qty != null)
				setQtyInvoiced(Qty);
		}
	}	//	setS_ResourceAssignment_ID
"
org.compiere.model.MInvoiceLine.beforeSave,MInvoiceLine.java,"boolean beforeSave (boolean newRecord)
	{
		log.fine(""New="" + newRecord);
		//	Charge
		if (getC_Charge_ID() != 0)
		{
			if (getM_Product_ID() != 0)
				setM_Product_ID(0);
			setC_UOM_ID(MUOM.Each_ID);
		}
		else	//	Set Product Price
		{
			if (!m_priceSet)
			{
				if( (Env.ZERO.compareTo(getPriceActual()) == 0)
						&&  (Env.ZERO.compareTo(getPriceList()) == 0))
					setPrice();
				else
					checkPrice();

				if (!m_priceSet && !m_priceFound)
				{
					if(((Env.ZERO.compareTo(getPriceActual()) == 0)
							&&  (Env.ZERO.compareTo(getPriceList()) == 0)) ||
							getParent().isSOTrx())
					{
						log.saveError(""Error"", Msg.getMsg(getCtx(), ""ProductNotOnPriceList""));
						return false;
					}
				}
			}
		}

		//	Set Tax
		if (getC_Tax_ID() == 0)
			setTax();

		//	Get Line No
		if (getLine() == 0)
		{
			String sql = ""SELECT COALESCE(MAX(Line),0)+10 FROM C_InvoiceLine WHERE C_Invoice_ID=?"";
			int ii = DB.getSQLValue (get_Trx(), sql, getC_Invoice_ID());
			setLine (ii);
		}
		//	UOM
		if (getC_UOM_ID() == 0)
		{
			int C_UOM_ID = MUOM.getDefault_UOM_ID(getCtx());
			if (C_UOM_ID > 0)
				setC_UOM_ID (C_UOM_ID);
		}
		//	Qty Precision
		if (newRecord || is_ValueChanged(""QtyEntered""))
		{
			setQtyEntered(getQtyEntered());
			BigDecimal QtyInvoiced = MUOMConversion.convertProductFrom(getCtx(), getM_Product_ID(), getC_UOM_ID(), getQtyEntered());
			if( QtyInvoiced == null )
				QtyInvoiced = getQtyEntered();
			setQtyInvoiced(QtyInvoiced);
		}

		if (newRecord || is_ValueChanged(""QtyInvoiced""))
			setQtyInvoiced(getQtyInvoiced());

		//	Calculations & Rounding
		setLineNetAmt();
		if (getTaxAmt().compareTo(Env.ZERO) == 0)
			setTaxAmt();
		//
		return true;
	}	//	beforeSave
"
org.compiere.model.MInvoiceLine.afterSave,MInvoiceLine.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!success || isProcessed())
			return success;
		if (!newRecord && is_ValueChanged(""C_Tax_ID""))
		{
			//	Recalculate Tax for old Tax
			MInvoiceTax tax = MInvoiceTax.get (this, getPrecision(),
				true, get_Trx());	//	old Tax
			if (tax != null)
			{
				if (!tax.calculateTaxFromLines())
					return false;
				if (!tax.save(get_Trx()))
					return true;
			}
		}
		return updateHeaderTax();
	}	//	afterSave
"
org.compiere.model.MInvoiceLine.afterDelete,MInvoiceLine.java,"boolean afterDelete (boolean success)
	{
		if (!success)
			return success;
		return updateHeaderTax();
	}	//	afterDelete
"
org.compiere.model.MInvoiceLine.updateHeaderTax,MInvoiceLine.java,"boolean updateHeaderTax()
	{
		//	Recalculate Tax for this Tax
		MInvoiceTax tax = MInvoiceTax.get (this, getPrecision(),
			false, get_Trx());	//	current Tax
		if (tax != null)
		{
			if (!tax.calculateTaxFromLines())
				return false;
			if (!tax.save(get_Trx()))
				return false;
		}

		//	Update Invoice Header
		String sql = ""UPDATE C_Invoice i""
			+ "" SET TotalLines=""
				+ ""(SELECT COALESCE(SUM(LineNetAmt),0) FROM C_InvoiceLine il WHERE i.C_Invoice_ID=il.C_Invoice_ID) ""
			+ ""WHERE C_Invoice_ID="" + getC_Invoice_ID();
		int no = DB.executeUpdate(sql, get_Trx());
		if (no != 1)
			log.warning(""(1) #"" + no);

		if (isTaxIncluded())
			sql = ""UPDATE C_Invoice i ""
				+ ""SET GrandTotal=TotalLines ""
				+ ""WHERE C_Invoice_ID="" + getC_Invoice_ID();
		else
			sql = ""UPDATE C_Invoice i ""
				+ ""SET GrandTotal=TotalLines+""
					+ ""(SELECT COALESCE(SUM(TaxAmt),0) FROM C_InvoiceTax it WHERE i.C_Invoice_ID=it.C_Invoice_ID) ""
					+ ""WHERE C_Invoice_ID="" + getC_Invoice_ID();
		no = DB.executeUpdate(sql, get_Trx());
		if (no != 1)
			log.warning(""(2) #"" + no);
		m_parent = null;

		return no == 1;
	}	//	updateHeaderTax
"
org.compiere.model.MInvoiceLine.allocateLandedCosts,MInvoiceLine.java,"String allocateLandedCosts()
	{
		if (isProcessed())
			return ""Processed"";
		MLandedCost[] lcs = MLandedCost.getLandedCosts(this);
		if (lcs.length == 0)
			return """";
		String sql = ""DELETE FROM C_LandedCostAllocation WHERE C_InvoiceLine_ID="" + getC_InvoiceLine_ID();
		int no = DB.executeUpdate(sql, get_Trx());
		if (no != 0)
			log.info(""Deleted #"" + no);

		int inserted = 0;
		//	*** Single Criteria ***
		if (lcs.length == 1)
		{
			MLandedCost lc = lcs[0];
			if (lc.getM_InOut_ID() != 0)
			{
				//	Create List
				ArrayList<MInOutLine> list = new ArrayList<MInOutLine>();
				MInOut ship = new MInOut (getCtx(), lc.getM_InOut_ID(), get_Trx());
				MInOutLine[] lines = ship.getLines();
				for (MInOutLine element : lines) {
					if (element.isDescription() || (element.getM_Product_ID() == 0))
						continue;
					if ((lc.getM_Product_ID() == 0)
						|| (lc.getM_Product_ID() == element.getM_Product_ID()))
						list.add(element);
				}
				if (list.size() == 0)
					return ""No Matching Lines (with Product) in Shipment"";
				//	Calculate total & base
				BigDecimal total = Env.ZERO;
				for (int i = 0; i < list.size(); i++)
				{
					MInOutLine iol = list.get(i);
					total = total.add(iol.getBase(lc.getLandedCostDistribution()));
				}
				if (total.signum() == 0)
					return ""Total of Base values is 0 - "" + lc.getLandedCostDistribution();
				//	Create Allocations
				for (int i = 0; i < list.size(); i++)
				{
					MInOutLine iol = list.get(i);
					MLandedCostAllocation lca = new MLandedCostAllocation (this, lc.getM_CostElement_ID());
					lca.setM_Product_ID(iol.getM_Product_ID());
					lca.setM_AttributeSetInstance_ID(iol.getM_AttributeSetInstance_ID());
					BigDecimal base = iol.getBase(lc.getLandedCostDistribution());
					lca.setBase(base);
					if (base.signum() != 0)
					{
						double result = getLineNetAmt().multiply(base).doubleValue();
						result /= total.doubleValue();
						lca.setAmt(result, getPrecision());
					}
					if (!lca.save())
						return ""Cannot save line Allocation = "" + lca;
					inserted++;
				}
				log.info(""Inserted "" + inserted);
				allocateLandedCostRounding();
				return """";
			}
			//	Single Line
			else if (lc.getM_InOutLine_ID() != 0)
			{
				MInOutLine iol = new MInOutLine (getCtx(), lc.getM_InOutLine_ID(), get_Trx());
				if (iol.isDescription() || (iol.getM_Product_ID() == 0))
					return ""Invalid Receipt Line - "" + iol;
				MLandedCostAllocation lca = new MLandedCostAllocation (this, lc.getM_CostElement_ID());
				lca.setM_Product_ID(iol.getM_Product_ID());
				lca.setM_AttributeSetInstance_ID(iol.getM_AttributeSetInstance_ID());
				lca.setAmt(getLineNetAmt());
				if (lca.save())
					return """";
				return ""Cannot save single line Allocation = "" + lc;
			}
			//	Single Product
			else if (lc.getM_Product_ID() != 0)
			{
				MLandedCostAllocation lca = new MLandedCostAllocation (this, lc.getM_CostElement_ID());
				lca.setM_Product_ID(lc.getM_Product_ID());	//	No ASI
				lca.setAmt(getLineNetAmt());
				if (lca.save())
					return """";
				return ""Cannot save Product Allocation = "" + lc;
			}
			else
				return ""No Reference for "" + lc;
		}

		//	*** Multiple Criteria ***
		String LandedCostDistribution = lcs[0].getLandedCostDistribution();
		int M_CostElement_ID = lcs[0].getM_CostElement_ID();
		for (MLandedCost lc : lcs) {
			if (!LandedCostDistribution.equals(lc.getLandedCostDistribution()))
				return ""Multiple Landed Cost Rules must have consistent Landed Cost Distribution"";
			if ((lc.getM_Product_ID() != 0) && (lc.getM_InOut_ID() == 0) && (lc.getM_InOutLine_ID() == 0))
				return ""Multiple Landed Cost Rules cannot directly allocate to a Product"";
			if (M_CostElement_ID != lc.getM_CostElement_ID())
				return ""Multiple Landed Cost Rules cannot different Cost Elements"";
		}
		//	Create List
		ArrayList<MInOutLine> list = new ArrayList<MInOutLine>();
		for (MLandedCost lc : lcs) {
			if ((lc.getM_InOut_ID() != 0) && (lc.getM_InOutLine_ID() == 0))		//	entire receipt
			{
				MInOut ship = new MInOut (getCtx(), lc.getM_InOut_ID(), get_Trx());
				MInOutLine[] lines = ship.getLines();
				for (MInOutLine element : lines) {
					if (element.isDescription()		//	description or no product
						|| (element.getM_Product_ID() == 0))
						continue;
					if ((lc.getM_Product_ID() == 0		//	no restriction or product match
)
						|| (lc.getM_Product_ID() == element.getM_Product_ID()))
						list.add(element);
				}
			}
			else if (lc.getM_InOutLine_ID() != 0)	//	receipt line
			{
				MInOutLine iol = new MInOutLine (getCtx(), lc.getM_InOutLine_ID(), get_Trx());
				if (!iol.isDescription() && (iol.getM_Product_ID() != 0))
					list.add(iol);
			}
		}
		if (list.size() == 0)
			return ""No Matching Lines (with Product)"";
		//	Calculate total & base
		BigDecimal total = Env.ZERO;
		for (int i = 0; i < list.size(); i++)
		{
			MInOutLine iol = list.get(i);
			total = total.add(iol.getBase(LandedCostDistribution));
		}
		if (total.signum() == 0)
			return ""Total of Base values is 0 - "" + LandedCostDistribution;
		//	Create Allocations
		for (int i = 0; i < list.size(); i++)
		{
			MInOutLine iol = list.get(i);
			MLandedCostAllocation lca = new MLandedCostAllocation (this, lcs[0].getM_CostElement_ID());
			lca.setM_Product_ID(iol.getM_Product_ID());
			lca.setM_AttributeSetInstance_ID(iol.getM_AttributeSetInstance_ID());
			BigDecimal base = iol.getBase(LandedCostDistribution);
			lca.setBase(base);
			if (base.signum() != 0)
			{
				double result = getLineNetAmt().multiply(base).doubleValue();
				result /= total.doubleValue();
				lca.setAmt(result, getPrecision());
			}
			if (!lca.save())
				return ""Cannot save line Allocation = "" + lca;
			inserted++;
		}

		log.info(""Inserted "" + inserted);
		allocateLandedCostRounding();
		return """";
	}	//	allocate Costs
"
org.compiere.model.MInvoiceLine.allocateLandedCostRounding,MInvoiceLine.java,"void allocateLandedCostRounding()
	{
		MLandedCostAllocation[] allocations = MLandedCostAllocation.getOfInvoiceLine(
			getCtx(), getC_InvoiceLine_ID(), get_Trx());
		MLandedCostAllocation largestAmtAllocation = null;
		BigDecimal allocationAmt = Env.ZERO;
		for (MLandedCostAllocation allocation : allocations) {
			if ((largestAmtAllocation == null)
				|| (allocation.getAmt().compareTo(largestAmtAllocation.getAmt()) > 0))
				largestAmtAllocation = allocation;
			allocationAmt = allocationAmt.add(allocation.getAmt());
		}
		BigDecimal difference = getLineNetAmt().subtract(allocationAmt);
		if (difference.signum() != 0)
		{
			largestAmtAllocation.setAmt(largestAmtAllocation.getAmt().add(difference));
			largestAmtAllocation.save();
			log.config(""Difference="" + difference
				+ "", C_LandedCostAllocation_ID="" + largestAmtAllocation.getC_LandedCostAllocation_ID()
				+ "", Amt"" + largestAmtAllocation.getAmt());
		}
	}	//	allocateLandedCostRounding
"
org.compiere.model.MInvoiceLine.setQty,MInvoiceLine.java,"boolean setQty (int WindowNo, String columnName)
	{
		int M_Product_ID = getM_Product_ID();
	//	log.log(Level.WARNING,""qty - init - M_Product_ID="" + M_Product_ID);
		BigDecimal QtyInvoiced, QtyEntered, PriceActual, PriceEntered;

		//	No Product
		/*if (M_Product_ID == 0)
		{
			QtyEntered = getQtyEntered();
			setQtyInvoiced( QtyEntered);
		}*/
		//	UOM Changed - convert from Entered -> Product
		/*else*/ if (columnName.equals(""C_UOM_ID""))
		{
			int C_UOM_To_ID = getC_UOM_ID();
			QtyEntered = getQtyEntered();
			
			// Do rounding on Qty Entered only if UOM is specified
			if(C_UOM_To_ID != 0)
			{
				BigDecimal QtyEntered1 = QtyEntered.setScale(MUOM.getPrecision(getCtx(), C_UOM_To_ID), BigDecimal.ROUND_HALF_UP);
				if (QtyEntered.compareTo(QtyEntered1) != 0)
				{
					log.fine(""Corrected QtyEntered Scale UOM="" + C_UOM_To_ID
						+ ""; QtyEntered="" + QtyEntered + ""->"" + QtyEntered1);
					QtyEntered = QtyEntered1;
					setQtyEntered( QtyEntered);
				}
			}
			
			// UOM Conversion
			QtyInvoiced = MUOMConversion.convertProductFrom (getCtx(), M_Product_ID,
				C_UOM_To_ID, QtyEntered);
			if (QtyInvoiced == null)
				QtyInvoiced = QtyEntered;
			
			boolean conversion = QtyEntered.compareTo(QtyInvoiced) != 0;
			PriceActual = getPriceActual();
			PriceEntered = MUOMConversion.convertProductFrom (getCtx(), M_Product_ID,
				C_UOM_To_ID, PriceActual);
			if (PriceEntered == null)
				PriceEntered = PriceActual;
			log.fine(""qty - UOM="" + C_UOM_To_ID
				+ "", QtyEntered/PriceActual="" + QtyEntered + ""/"" + PriceActual
				+ "" -> "" + conversion
				+ "" QtyInvoiced/PriceEntered="" + QtyInvoiced + ""/"" + PriceEntered);
			setContext( WindowNo, ""UOMConversion"", conversion ? ""Y"" : ""N"");
			setQtyInvoiced( QtyInvoiced);
			setPriceEntered( PriceEntered);
		}
		//	QtyEntered changed - calculate QtyInvoiced
		else if (columnName.equals(""QtyEntered""))
		{
			int C_UOM_To_ID = getC_UOM_ID();
			QtyEntered = getQtyEntered();
			
			// Do rounding on Qty Entered only if UOM is specified
			if(C_UOM_To_ID != 0)
			{
				BigDecimal QtyEntered1 = QtyEntered.setScale(MUOM.getPrecision(getCtx(), C_UOM_To_ID), BigDecimal.ROUND_HALF_UP);
				if (QtyEntered.compareTo(QtyEntered1) != 0)
				{
					log.fine(""Corrected QtyEntered Scale UOM="" + C_UOM_To_ID
						+ ""; QtyEntered="" + QtyEntered + ""->"" + QtyEntered1);
					QtyEntered = QtyEntered1;
					setQtyEntered( QtyEntered);
				}
			}
			
			// UOM Conversion
			QtyInvoiced = MUOMConversion.convertProductFrom (getCtx(), M_Product_ID,
				C_UOM_To_ID, QtyEntered);
			if (QtyInvoiced == null)
				QtyInvoiced = QtyEntered;
			
			boolean conversion = QtyEntered.compareTo(QtyInvoiced) != 0;
			log.fine(""qty - UOM="" + C_UOM_To_ID
				+ "", QtyEntered="" + QtyEntered
				+ "" -> "" + conversion
				+ "" QtyInvoiced="" + QtyInvoiced);
			setContext( WindowNo, ""UOMConversion"", conversion ? ""Y"" : ""N"");
			setQtyInvoiced( QtyInvoiced);
		}
		//	QtyInvoiced changed - calculate QtyEntered (should not happen)
		else if (columnName.equals(""QtyInvoiced""))
		{
			int C_UOM_To_ID = getC_UOM_ID();
			QtyInvoiced = getQtyInvoiced();
			int precision = MProduct.get(getCtx(), M_Product_ID).getUOMPrecision();
			BigDecimal QtyInvoiced1 = QtyInvoiced.setScale(precision, BigDecimal.ROUND_HALF_UP);
			if (QtyInvoiced.compareTo(QtyInvoiced1) != 0)
			{
				log.fine(""Corrected QtyInvoiced Scale ""
					+ QtyInvoiced + ""->"" + QtyInvoiced1);
				QtyInvoiced = QtyInvoiced1;
				setQtyInvoiced( QtyInvoiced);
			}
			QtyEntered = MUOMConversion.convertProductTo (getCtx(), M_Product_ID,
				C_UOM_To_ID, QtyInvoiced);
			if (QtyEntered == null)
				QtyEntered = QtyInvoiced;
			boolean conversion = QtyInvoiced.compareTo(QtyEntered) != 0;
			log.fine(""qty - UOM="" + C_UOM_To_ID
				+ "", QtyInvoiced="" + QtyInvoiced
				+ "" -> "" + conversion
				+ "" QtyEntered="" + QtyEntered);
			setContext( WindowNo, ""UOMConversion"", conversion ? ""Y"" : ""N"");
			setQtyEntered( QtyEntered);
		}
		//
		return true;
	}	//	qty
"
org.compiere.model.MInvoiceLine.setAmt,MInvoiceLine.java,"boolean setAmt(int WindowNo, String columnName)
	{

	//	log.log(Level.WARNING,""amt - init"");
		int C_UOM_To_ID = getC_UOM_ID();
		int M_Product_ID = getM_Product_ID();
		int M_PriceList_ID = getCtx().getContextAsInt( WindowNo, ""M_PriceList_ID"");
		// int StdPrecision = MPriceList.getPricePrecision(getCtx(), M_PriceList_ID);
		// Using Currency Precision. Not PriceList precision
		int StdPrecision = getPrecision();
		BigDecimal QtyEntered, QtyInvoiced, PriceEntered, PriceActual, PriceLimit, Discount, PriceList;
		//	get values
		QtyEntered = getQtyEntered();
		QtyInvoiced = getQtyInvoiced();
		log.fine(""QtyEntered="" + QtyEntered + "", Invoiced="" + QtyInvoiced + "", UOM="" + C_UOM_To_ID);
		//
		PriceEntered = getPriceEntered();
		PriceActual = getPriceActual();
	//	Discount = (BigDecimal)mTab.getValue(""Discount"");
		PriceLimit = getPriceLimit();
		PriceList = getPriceList();
		log.fine(""PriceList="" + PriceList + "", Limit="" + PriceLimit + "", Precision="" + StdPrecision);
		log.fine(""PriceEntered="" + PriceEntered + "", Actual="" + PriceActual);// + "", Discount="" + Discount);

		//	Qty changed - recalc price
		if ((columnName.equals(""QtyInvoiced"")
			|| columnName.equals(""QtyEntered"")
			|| columnName.equals(""M_Product_ID""))
			&& !""N"".equals(getCtx().getContext( WindowNo, ""DiscountSchema"")))
		{
			int C_BPartner_ID = getCtx().getContextAsInt( WindowNo, ""C_BPartner_ID"");
			if (columnName.equals(""QtyEntered""))
				QtyInvoiced = MUOMConversion.convertProductTo (getCtx(), M_Product_ID,
					C_UOM_To_ID, QtyEntered);
			if (QtyInvoiced == null)
				QtyInvoiced = QtyEntered;
			boolean IsSOTrx = getCtx().isSOTrx(WindowNo);
			MProductPricing pp = new MProductPricing (getAD_Client_ID(), getAD_Org_ID(),
					M_Product_ID, C_BPartner_ID, QtyInvoiced, IsSOTrx);
			pp.setM_PriceList_ID(M_PriceList_ID);
			int M_PriceList_Version_ID = getCtx().getContextAsInt( WindowNo, ""M_PriceList_Version_ID"");
			pp.setM_PriceList_Version_ID(M_PriceList_Version_ID);
			Timestamp date = new Timestamp( getCtx().getContextAsTime( WindowNo, ""DateInvoiced"" ) );
			pp.setPriceDate(date);
			//
			PriceEntered = MUOMConversion.convertProductFrom (getCtx(), M_Product_ID,
				C_UOM_To_ID, pp.getPriceStd());
			if (PriceEntered == null)
				PriceEntered = pp.getPriceStd();
			//
			log.fine(""amt - QtyChanged -> PriceActual="" + pp.getPriceStd()
				+ "", PriceEntered="" + PriceEntered + "", Discount="" + pp.getDiscount());
			PriceActual = pp.getPriceStd();
			setPriceActual( PriceActual);
		//	mTab.setValue(""Discount"", pp.getDiscount());
			setPriceEntered( PriceEntered);
			setContext( WindowNo, ""DiscountSchema"", pp.isDiscountSchema() ? ""Y"" : ""N"");
		}
		else if (columnName.equals(""PriceActual""))
		{
			PriceActual = getPriceActual();
			PriceEntered = MUOMConversion.convertProductFrom (getCtx(), M_Product_ID,
				C_UOM_To_ID, PriceActual);
			if (PriceEntered == null)
				PriceEntered = PriceActual;
			//
			log.fine(""amt - PriceActual="" + PriceActual
				+ "" -> PriceEntered="" + PriceEntered);
			setPriceEntered( PriceEntered);
		}
		else if (columnName.equals(""PriceEntered""))
		{
			PriceEntered = getPriceEntered();
			PriceActual = MUOMConversion.convertProductTo (getCtx(), M_Product_ID,
				C_UOM_To_ID, PriceEntered);
			if (PriceActual == null)
				PriceActual = PriceEntered;
			//
			log.fine(""amt - PriceEntered="" + PriceEntered
				+ "" -> PriceActual="" + PriceActual);
			setPriceActual(PriceActual);
		}

		/**  Discount entered - Calculate Actual/Entered
		if (columnName.equals(""Discount""))
		{
			PriceActual = new BigDecimal ((100.0 - Discount.doubleValue()) / 100.0 * PriceList.doubleValue());
			if (PriceActual.scale() > StdPrecision)
				PriceActual = PriceActual.setScale(StdPrecision, BigDecimal.ROUND_HALF_UP);
			PriceEntered = MUOMConversion.convertProductFrom (ctx, M_Product_ID,
				C_UOM_To_ID, PriceActual);
			if (PriceEntered == null)
				PriceEntered = PriceActual;
			mTab.setValue(""PriceActual"", PriceActual);
			mTab.setValue(""PriceEntered"", PriceEntered);
		}
		//	calculate Discount
		else
		{
			if (PriceList.intValue() == 0)
				Discount = Env.ZERO;
			else
				Discount = new BigDecimal ((PriceList.doubleValue() - PriceActual.doubleValue()) / PriceList.doubleValue() * 100.0);
			if (Discount.scale() > 2)
				Discount = Discount.setScale(2, BigDecimal.ROUND_HALF_UP);
			mTab.setValue(""Discount"", Discount);
		}
		log.fine(""amt = PriceEntered="" + PriceEntered + "", Actual"" + PriceActual + "", Discount="" + Discount);
		/* */

		//	Check PriceLimit
		String epl = getCtx().getContext( WindowNo, ""EnforcePriceLimit"");
		boolean enforce = getCtx().isSOTrx(WindowNo) && (epl != null) && epl.equals(""Y"");
		if (enforce && MRole.getDefault(getCtx(), false).isOverwritePriceLimit())
			enforce = false;
		//	Check Price Limit?
		if (enforce && (PriceLimit.doubleValue() != 0.0)
		  && (PriceActual.compareTo(PriceLimit) < 0))
		{
			PriceActual = PriceLimit;
			PriceEntered = MUOMConversion.convertProductFrom (getCtx(), M_Product_ID,
				C_UOM_To_ID, PriceLimit);
			if (PriceEntered == null)
				PriceEntered = PriceLimit;
			log.fine(""amt =(under) PriceEntered="" + PriceEntered + "", Actual"" + PriceLimit);
			setPriceActual( PriceLimit);
			setPriceEntered( PriceEntered);
			addError(Msg.getMsg(getCtx(), ""UnderLimitPrice""));
			//	Repeat Discount calc
			if (PriceList.intValue() != 0)
			{
				Discount = new BigDecimal ((PriceList.doubleValue () - PriceActual.doubleValue ()) / PriceList.doubleValue () * 100.0);
				if (Discount.scale () > 2)
					Discount = Discount.setScale (2, BigDecimal.ROUND_HALF_UP);
			//	mTab.setValue (""Discount"", Discount);
			}
		}

		//	Line Net Amt
		BigDecimal LineNetAmt = QtyInvoiced.multiply(PriceActual);
		if (LineNetAmt.scale() > StdPrecision)
			LineNetAmt = LineNetAmt.setScale(StdPrecision, BigDecimal.ROUND_HALF_UP);
		log.info(""amt = LineNetAmt="" + LineNetAmt);
		setLineNetAmt( LineNetAmt);

		//	Calculate Tax Amount for PO
		boolean IsSOTrx = getCtx().isSOTrx( WindowNo );
		if (!IsSOTrx)
		{
			BigDecimal TaxAmt = Env.ZERO;
			if (columnName.equals(""TaxAmt""))
			{
				TaxAmt = getTaxAmt();
			}
			else
			{
				Integer taxID = getC_Tax_ID();
				if (taxID != null)
				{
					int C_Tax_ID = taxID.intValue();
					MTax tax = new MTax (getCtx(), C_Tax_ID, null);
					TaxAmt = tax.calculateTax(LineNetAmt, isTaxIncluded(), StdPrecision);
					setTaxAmt( TaxAmt);
				}
			}
			//	Add it up
			setLineTotalAmt( LineNetAmt.add(TaxAmt));
		}

		return true;
	}	//	amt
"
org.compiere.model.MInvoiceLine.setC_UOM_ID,MInvoiceLine.java,"void setC_UOM_ID (String oldC_UOM_ID,
			String newC_UOM_ID, int windowNo) throws Exception
	{
		if ((newC_UOM_ID == null) || (newC_UOM_ID.length() == 0))
			return;
		int C_UOM_ID = Integer.parseInt(newC_UOM_ID);
		if (C_UOM_ID == 0)
			return;
		//
		super.setC_UOM_ID(C_UOM_ID);
		setQty(windowNo, ""C_UOM_ID"");
		setAmt(windowNo, ""C_UOM_ID"");
	}	//	setC_UOM_ID
"
org.compiere.model.MInvoiceLine.setQtyEntered,MInvoiceLine.java,"void setQtyEntered (String oldQtyEntered,
			String newQtyEntered, int windowNo) throws Exception
	{
		if ((newQtyEntered == null) || (newQtyEntered.length() == 0))
			return;
		BigDecimal QtyEntered = new BigDecimal(newQtyEntered);
		super.setQtyEntered(QtyEntered);
		setQty(windowNo, ""QtyEntered"");
		setAmt(windowNo, ""QtyEntered"");
	}	//	setQtyEntered
"
org.compiere.model.MInvoiceLine.setQtyInvoiced,MInvoiceLine.java,"void setQtyInvoiced (String oldQtyInvoiced,
			String newQtyInvoiced, int windowNo) throws Exception
	{
		if ((newQtyInvoiced == null) || (newQtyInvoiced.length() == 0))
			return;
		BigDecimal qtyInvoiced = new BigDecimal(newQtyInvoiced);
		super.setQtyInvoiced(qtyInvoiced);
		setQty(windowNo, ""QtyInvoiced"");
		setAmt(windowNo, ""QtyInvoiced"");
	}	//	setQtyOrdered
"
org.compiere.model.MInvoiceLine.setC_Tax_ID,MInvoiceLine.java,"void setC_Tax_ID (String oldC_Tax_ID,
			String newC_Tax_ID, int windowNo) throws Exception
	{
		if ((newC_Tax_ID == null) || (newC_Tax_ID.length() == 0))
			return;
		BigDecimal C_Tax_ID = new BigDecimal(newC_Tax_ID);
		super.setTaxAmt( C_Tax_ID);
		setAmt(windowNo, ""C_Tax_ID"");
	}	//	setC_Tax_ID
"
org.compiere.model.MInvoiceLine.setPriceActual,MInvoiceLine.java,"void setPriceActual (String oldPriceActual,
			String newPriceActual, int windowNo) throws Exception
	{
		if ((newPriceActual == null) || (newPriceActual.length() == 0))
			return;
		BigDecimal PriceActual = new BigDecimal(newPriceActual);
		super.setPriceActual(PriceActual);
		setAmt(windowNo, ""PriceActual"");
	}	//	setPriceActual
"
org.compiere.model.MInvoiceLine.setPriceEntered,MInvoiceLine.java,"void setPriceEntered (String oldPriceEntered,
			String newPriceEntered, int windowNo) throws Exception
	{
		if ((newPriceEntered == null) || (newPriceEntered.length() == 0))
			return;
		BigDecimal PriceEntered = new BigDecimal(newPriceEntered);
		super.setPriceEntered(PriceEntered);
		setAmt(windowNo, ""PriceEntered"");
	}	//	setPriceEntered
"
org.compiere.model.MInvoiceLine.setTaxAmt,MInvoiceLine.java,"void setTaxAmt (String oldTaxAmt,
			String newTaxAmt, int windowNo) throws Exception
	{
		if ((newTaxAmt == null) || (newTaxAmt.length() == 0))
			return;
		BigDecimal taxAmt = new BigDecimal(newTaxAmt);
		super.setTaxAmt( taxAmt);
		setAmt(windowNo, ""TaxAmt"");
	}	//	setTaxAmt
"
org.compiere.model.MInvoiceLine.setM_Product_ID,MInvoiceLine.java,"void setM_Product_ID (String oldM_Product_ID,
			String newM_Product_ID, int WindowNo) throws Exception
	{
		if( (newM_Product_ID == null) || (newM_Product_ID.length() == 0) )
			return;
		int M_Product_ID = Integer.parseInt( newM_Product_ID );
		if( M_Product_ID == 0 )
			return;

		setC_Charge_ID( 0 );

		//	Set Attribute
		if ((getCtx().getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_Product_ID"") == M_Product_ID)
			&& (getCtx().getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_AttributeSetInstance_ID"") != 0))
			setM_AttributeSetInstance_ID( Integer.valueOf(getCtx().getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_AttributeSetInstance_ID"")));
		else
			setM_AttributeSetInstance_ID( -1 );

		/*****	Price Calculation see also qty	****/
		boolean IsSOTrx = getCtx().isSOTrx( WindowNo );
		int C_BPartner_ID = getCtx().getContextAsInt(WindowNo, ""C_BPartner_ID"");
		BigDecimal Qty = getQtyInvoiced();
		MProductPricing pp = new MProductPricing (getAD_Client_ID(), getAD_Org_ID(),
				M_Product_ID, C_BPartner_ID, Qty, IsSOTrx);
		//
		int M_PriceList_ID = getCtx().getContextAsInt( WindowNo, ""M_PriceList_ID"");
		pp.setM_PriceList_ID(M_PriceList_ID);
		int M_PriceList_Version_ID = getCtx().getContextAsInt( WindowNo, ""M_PriceList_Version_ID"");
		pp.setM_PriceList_Version_ID(M_PriceList_Version_ID);
		long time = getCtx().getContextAsTime(WindowNo, ""DateInvoiced"");
		pp.setPriceDate(time);

		pp.calculatePrice();
		if (!pp.isCalculated())
		{
			setPriceList( BigDecimal.ZERO);
			setPriceLimit( BigDecimal.ZERO);
			setPriceActual( BigDecimal.ZERO);
			setPriceEntered( BigDecimal.ZERO);

			p_changeVO.addError(Msg.getMsg(getCtx(), ""ProductNotOnPriceList""));
			return;

		}

		//
		setPriceList( pp.getPriceList());
		setPriceLimit( pp.getPriceLimit());
		setPriceActual( pp.getPriceStd());
		setPriceEntered( pp.getPriceStd());
		setContext( WindowNo, ""C_Currency_ID"", Integer.toString(pp.getC_Currency_ID()));
	//	mTab.setValue(""Discount"", pp.getDiscount());
		int newC_UOM_ID = Integer.valueOf(pp.getC_UOM_ID());
		setC_UOM_ID( newC_UOM_ID );
		
		// since UOM specified is changed (as a result of tab out from product), recalculate QtyEntered and QtyInvoiced based on new UOM
		BigDecimal QtyEntered = getQtyEntered();
		if(newC_UOM_ID != 0)
		{
			BigDecimal QtyEntered1 = QtyEntered.setScale(MUOM.getPrecision(getCtx(), newC_UOM_ID), BigDecimal.ROUND_HALF_UP);
			if (QtyEntered.compareTo(QtyEntered1) != 0)
			{
				log.fine(""Corrected QtyEntered Scale UOM="" + newC_UOM_ID 
					+ ""; QtyEntered="" + QtyEntered + ""->"" + QtyEntered1);  
				QtyEntered = QtyEntered1;
				setQtyEntered( QtyEntered);
			}
		}
		
		// UOM Conversion
		BigDecimal QtyInvoiced = MUOMConversion.convertProductFrom (getCtx(), M_Product_ID,	newC_UOM_ID, QtyEntered);
		if (QtyInvoiced == null)
			QtyInvoiced = QtyEntered;
		setQtyInvoiced( QtyInvoiced);
		
		setContext( WindowNo, ""EnforcePriceLimit"", pp.isEnforcePriceLimit() ? ""Y"" : ""N"");
		setContext( WindowNo, ""DiscountSchema"", pp.isDiscountSchema() ? ""Y"" : ""N"");
		//
		setTax( WindowNo, ""M_Product_ID"");

		return;
	}	//	product
"
org.compiere.model.MInvoiceLine.setC_Charge_ID,MInvoiceLine.java,"void setC_Charge_ID (String oldC_Charge_ID,
			String newC_Charge_ID, int WindowNo) throws Exception
	{
		if( (newC_Charge_ID == null) || (newC_Charge_ID.length() == 0) )
			return;
		int C_Charge_ID = Integer.parseInt( newC_Charge_ID );
		if( C_Charge_ID == 0 )
			return;

		//	No Product defined
		if (getM_Product_ID() != 0)
		{
			setC_Charge_ID( 0 );

			addError( Msg.getMsg( getCtx(), ""ChargeExclusively"" ) );
		}
		setM_AttributeSetInstance_ID( -1 );
		setS_ResourceAssignment_ID( 0 );
		setC_UOM_ID( Integer.valueOf(100));	//	EA

		setContext( WindowNo, ""DiscountSchema"", ""N"");
		String sql = ""SELECT ChargeAmt FROM C_Charge WHERE C_Charge_ID=?"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_Charge_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				setPriceEntered( rs.getBigDecimal (1));
				setPriceActual( rs.getBigDecimal (1));
				setPriceLimit( Env.ZERO);
				setPriceList( Env.ZERO);
				setContext( WindowNo, ""Discount"", Env.ZERO.toString() );
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql + e);
			addError( e.getLocalizedMessage() );
		}
		//
		setTax(WindowNo, ""C_Charge_ID"");
	}	//	charge
"
org.compiere.model.MInvoiceLine.setTax,MInvoiceLine.java,"boolean setTax (int WindowNo, String columnName )
	{
		//	Check Product
		int M_Product_ID = getM_Product_ID();
		int C_Charge_ID = getC_Charge_ID();
		log.fine(""Product="" + M_Product_ID + "", C_Charge_ID="" + C_Charge_ID);
		if ((M_Product_ID == 0) && (C_Charge_ID == 0))
			return setAmt( WindowNo, columnName );

		//	Check Partner Location
		int shipC_BPartner_Location_ID = getCtx().getContextAsInt( WindowNo, ""C_BPartner_Location_ID"");
		if (shipC_BPartner_Location_ID == 0)
			return setAmt( WindowNo, columnName );
		log.fine(""Ship BP_Location="" + shipC_BPartner_Location_ID);
		int billC_BPartner_Location_ID = shipC_BPartner_Location_ID;
		log.fine(""Bill BP_Location="" + billC_BPartner_Location_ID);

		//	Dates
		Timestamp billDate = new Timestamp(getCtx().getContextAsTime(WindowNo, ""DateInvoiced""));
		log.fine(""Bill Date="" + billDate);
		Timestamp shipDate = billDate;
		log.fine(""Ship Date="" + shipDate);

		int AD_Org_ID = getAD_Org_ID();
		log.fine(""Org="" + AD_Org_ID);

		int M_Warehouse_ID = getCtx().getContextAsInt( ""#M_Warehouse_ID"");
		log.fine(""Warehouse="" + M_Warehouse_ID);

		//
		int C_Tax_ID = Tax.get(getCtx(), M_Product_ID, C_Charge_ID, billDate, shipDate,
			AD_Org_ID, M_Warehouse_ID, billC_BPartner_Location_ID, shipC_BPartner_Location_ID,
			getCtx().isSOTrx( WindowNo ));
		log.info(""Tax ID="" + C_Tax_ID);
		//
		if (C_Tax_ID == 0)
		{
			ValueNamePair pp = CLogger.retrieveError();
			if (pp != null)
				addError(pp.getValue());
			else
				addError( Msg.getMsg( getCtx(), ""Tax Error"" ) );
		}
		else
			setC_Tax_ID( Integer.valueOf(C_Tax_ID));
		//
		return setAmt( WindowNo, columnName );
	}	//	tax
"
org.compiere.model.MProductCategory.get,MProductCategory.java,"MProductCategory get (Ctx ctx, int M_Product_Category_ID)
	{
		Integer ii = Integer.valueOf (M_Product_Category_ID);
		MProductCategory pc = s_cache.get(ctx, ii);
		if (pc == null)
			pc = new MProductCategory (ctx, M_Product_Category_ID, null);
		return pc;
	}	//	get
"
org.compiere.model.MProductCategory.getOfProduct,MProductCategory.java,"MProductCategory getOfProduct (Ctx ctx, int M_Product_ID)
	{
		MProductCategory retValue = null;
		PreparedStatement pstmt = null;
		String sql = ""SELECT * FROM M_Product_Category pc ""
					+ ""WHERE EXISTS (SELECT * FROM M_Product p ""
					+ ""WHERE p.M_Product_ID=? AND p.M_Product_Category_ID=pc.M_Product_Category_ID)"";
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, M_Product_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				retValue = new MProductCategory (ctx, rs, null);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

		return retValue;
	}	//	getOfProduct
"
org.compiere.model.MProductCategory.isCategory,MProductCategory.java,"boolean isCategory (int M_Product_Category_ID, int M_Product_ID)
	{
		if ((M_Product_ID == 0) || (M_Product_Category_ID == 0))
			return false;
		//	Look up
		Integer product = Integer.valueOf (M_Product_ID);
		Integer category = s_products.get(null, product);
		if (category != null)
			return category.intValue() == M_Product_Category_ID;

		String sql = ""SELECT M_Product_Category_ID FROM M_Product WHERE M_Product_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, M_Product_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				category = Integer.valueOf(rs.getInt(1));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		if (category != null)
		{
			//	TODO: LRU logic
			s_products.put(product, category);
			//
			s_log.fine(""M_Product_ID="" + M_Product_ID + ""("" + category
				+ "") in M_Product_Category_ID="" + M_Product_Category_ID
				+ "" - "" + (category.intValue() == M_Product_Category_ID));
			return category.intValue() == M_Product_Category_ID;
		}
		s_log.log(Level.SEVERE, ""Not found M_Product_ID="" + M_Product_ID);
		return false;
	}	//	isCategory
"
org.compiere.model.MProductCategory.getDefault,MProductCategory.java,"MProductCategory getDefault (Ctx ctx)
	{
		MProductCategory retValue = null;
		String sql = ""SELECT * FROM M_Product_Category ""
			+ ""WHERE AD_Client_ID=? ""
			+ ""ORDER BY ASCII(IsDefault) DESC, M_Product_Category_ID"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, ctx.getAD_Client_ID());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				retValue = new MProductCategory(ctx, rs, null);
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return retValue;
	}	//	getDefault
"
org.compiere.model.MProductCategory.afterSave,MProductCategory.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (newRecord & success)
			success = insert_Accounting(""M_Product_Category_Acct"", ""C_AcctSchema_Default"", null);

		return success;
	}	//	afterSave
"
org.compiere.model.MProductCategory.beforeDelete,MProductCategory.java,"boolean beforeDelete ()
	{
		return delete_Accounting(""M_Product_Category_Acct"");
	}	//	beforeDelete
"
org.compiere.model.MProductCategory.isFiFo,MProductCategory.java,"boolean isFiFo()
	{
		return MMPOLICY_FiFo.equals(getMMPolicy());
	}	//	isFiFo
"
org.compiere.model.MWithholding.afterSave,MWithholding.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (newRecord & success)
			success = insert_Accounting(""C_Withholding_Acct"", ""C_AcctSchema_Default"", null);

		return success;
	}	//	afterSave
"
org.compiere.model.MWithholding.beforeDelete,MWithholding.java,"boolean beforeDelete ()
	{
		return delete_Accounting(""C_Withholding_Acct""); 
	}	//	beforeDelete
"
org.compiere.model.MInterestArea.getAll,MInterestArea.java,"MInterestArea[] getAll (Ctx ctx)
	{
		ArrayList<MInterestArea> list = new ArrayList<MInterestArea>();
		String sql = ""SELECT * FROM R_InterestArea WHERE IsActive='Y'"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MInterestArea ia = new MInterestArea (ctx, rs, null);
				list.add (ia);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MInterestArea[] retValue = new MInterestArea[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getAll
"
org.compiere.model.MInterestArea.get,MInterestArea.java,"MInterestArea get (Ctx ctx, int R_InterestArea_ID)
	{
		Integer key = Integer.valueOf (R_InterestArea_ID);
		MInterestArea retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MInterestArea (ctx, R_InterestArea_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	} //	get
"
org.compiere.model.MInterestArea.getValue,MInterestArea.java,"String getValue()
	{
		String s = super.getValue ();
		if (s != null && s.length () > 0)
			return s;
		return super.getName();
	}	//	getValue
"
org.compiere.model.MInterestArea.toString,MInterestArea.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MInterestArea["")
			.append (get_ID()).append("" - "").append(getName())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MInterestArea.setSubscriptionInfo,MInterestArea.java,"void setSubscriptionInfo (int AD_User_ID)
	{
		m_AD_User_ID = AD_User_ID;
		m_ci = MContactInterest.get(getCtx(), getR_InterestArea_ID(), AD_User_ID, 
			false, get_Trx());
	}	//	setSubscription
"
org.compiere.model.MInterestArea.setAD_User_ID,MInterestArea.java,"void setAD_User_ID (int AD_User_ID)
	{
		m_AD_User_ID = AD_User_ID;
	}
"
org.compiere.model.MInterestArea.getAD_User_ID,MInterestArea.java,"int getAD_User_ID ()
	{
		return m_AD_User_ID;
	}
"
org.compiere.model.MInterestArea.getSubscribeDate,MInterestArea.java,"Timestamp getSubscribeDate ()
	{
		if (m_ci != null)
			return m_ci.getSubscribeDate();
		return null;
	}
"
org.compiere.model.MInterestArea.getOptOutDate,MInterestArea.java,"Timestamp getOptOutDate ()
	{
		if (m_ci != null)
			return m_ci.getOptOutDate();
		return null;
	}
"
org.compiere.model.MInterestArea.isSubscribed,MInterestArea.java,"boolean isSubscribed()
	{
		if (m_AD_User_ID <= 0 || m_ci == null)
			return false;
		//	We have a BPartner Contact
		return m_ci.isSubscribed();
	}	//	isSubscribed
"
org.compiere.model.MMovementLineMA.get,MMovementLineMA.java,"MMovementLineMA[] get (Ctx ctx, int M_MovementLine_ID, Trx trx)
	{
		ArrayList<MMovementLineMA> list = new ArrayList<MMovementLineMA>();
		String sql = ""SELECT * FROM M_MovementLineMA WHERE M_MovementLine_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, M_MovementLine_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				list.add (new MMovementLineMA (ctx, rs, trx));
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		MMovementLineMA[] retValue = new MMovementLineMA[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MMovementLineMA.deleteMovementMA,MMovementLineMA.java,"int deleteMovementMA (int M_Movement_ID, Trx trx)
	{
		String sql = ""DELETE FROM M_MovementLineMA ma WHERE EXISTS ""
			+ ""(SELECT * FROM M_MovementLine l WHERE l.M_MovementLine_ID=ma.M_MovementLine_ID""
			+ "" AND M_Movement_ID="" + M_Movement_ID + "")"";
		return DB.executeUpdate(sql, trx);
	}	//	deleteInOutMA
"
org.compiere.model.MMovementLineMA.deleteMovementLineMA,MMovementLineMA.java,"int deleteMovementLineMA (int M_MovementLine_ID, Trx trx)
	{
		String sql = ""DELETE FROM M_MovementLineMA ma WHERE EXISTS ""
			+ ""(SELECT * FROM M_MovementLine l WHERE l.M_MovementLine_ID=ma.M_MovementLine_ID""
			+ "" AND M_MovementLine_ID="" + M_MovementLine_ID + "")"";
		return DB.executeUpdate(sql, trx);
	}	//	deleteInOutMA
"
org.compiere.model.MMovementLineMA.toString,MMovementLineMA.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MMovementLineMA["");
		sb.append(""M_MovementLine_ID="").append(getM_MovementLine_ID())
			.append("",M_AttributeSetInstance_ID="").append(getM_AttributeSetInstance_ID())
			.append("", Qty="").append(getMovementQty())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MUOM.getMinute_UOM_ID,MUOM.java,"int getMinute_UOM_ID (Ctx ctx)
	{
		if (Ini.isClient())
		{
			Iterator<MUOM> it = s_cache.values().iterator();
			while (it.hasNext())
			{
				MUOM uom = it.next();
				if (uom.isMinute())
					return uom.getC_UOM_ID();
			}
		}
		//	Server
		int C_UOM_ID = 0;
		String sql = ""SELECT C_UOM_ID FROM C_UOM ""
			+ ""WHERE IsActive='Y' AND X12DE355='MJ'"";	//	HardCoded
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				C_UOM_ID = rs.getInt(1);
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		return C_UOM_ID;
	}	//	getMinute_UOM_ID
"
org.compiere.model.MUOM.getDefault_UOM_ID,MUOM.java,"int getDefault_UOM_ID (Ctx ctx)
	{
		String sql = ""SELECT C_UOM_ID ""
			+ ""FROM C_UOM ""
			+ ""WHERE AD_Client_ID IN (0,?) ""
			+ ""ORDER BY ASCII(IsDefault) DESC, AD_Client_ID DESC, C_UOM_ID"";
		return DB.getSQLValue(null, sql, ctx.getAD_Client_ID());
	}	//	getDefault_UOM_ID
"
org.compiere.model.MUOM.get,MUOM.java,"MUOM get (Ctx ctx, int C_UOM_ID)
	{
		if (s_cache.size() == 0)
			loadUOMs (ctx);
		//
		Integer ii = Integer.valueOf (C_UOM_ID);
		MUOM uom = s_cache.get(ctx, ii);
		if (uom != null)
			return uom;
		//
		uom = new MUOM (ctx, C_UOM_ID, null);
		s_cache.put(Integer.valueOf(C_UOM_ID), uom);
		return uom;
	}	//	getUOMfromCache
"
org.compiere.model.MUOM.getPrecision,MUOM.java,"int getPrecision (Ctx ctx, int C_UOM_ID)
	{
		MUOM uom = get(ctx, C_UOM_ID);
		return uom.getStdPrecision();
	}	//	getPrecision
"
org.compiere.model.MUOM.loadUOMs,MUOM.java,"void loadUOMs (Ctx ctx)
	{
		String sql = MRole.getDefault(ctx, false).addAccessSQL(
			""SELECT * FROM C_UOM ""
			+ ""WHERE IsActive='Y'"",
			""C_UOM"", MRole.SQL_NOTQUALIFIED, MRole.SQL_RO);
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				MUOM uom = new MUOM(ctx, rs, null);
				s_cache.put (Integer.valueOf(uom.getC_UOM_ID()), uom);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
	}	//	loadUOMs
"
org.compiere.model.MUOM.toString,MUOM.java,"String toString()
	{
		StringBuffer sb = new StringBuffer(""UOM["");
		sb.append(""ID="").append(get_ID())
			.append("", Name="").append(getName());
		return sb.toString();
	}	//	toString
"
org.compiere.model.MUOM.round,MUOM.java,"BigDecimal round (BigDecimal qty, boolean stdPrecision)
	{
		int precision = getStdPrecision();
		if (!stdPrecision)
			precision = getCostingPrecision();
		if (qty.scale() > precision)
			return qty.setScale(getStdPrecision(), BigDecimal.ROUND_HALF_UP);
		return qty;
	}	//	round
"
org.compiere.model.MUOM.isMinute,MUOM.java,"boolean isMinute()
	{
		return X12_MINUTE.equals(getX12DE355());
	}
"
org.compiere.model.MUOM.isHour,MUOM.java,"boolean isHour()
	{
		return X12_HOUR.equals(getX12DE355());
	}
"
org.compiere.model.MUOM.isDay,MUOM.java,"boolean isDay()
	{
		return X12_DAY.equals(getX12DE355());
	}
"
org.compiere.model.MUOM.isWorkDay,MUOM.java,"boolean isWorkDay()
	{
		return X12_DAY_WORK.equals(getX12DE355());
	}
"
org.compiere.model.MUOM.isWeek,MUOM.java,"boolean isWeek()
	{
		return X12_WEEK.equals(getX12DE355());
	}
"
org.compiere.model.MUOM.isMonth,MUOM.java,"boolean isMonth()
	{
		return X12_MONTH.equals(getX12DE355());
	}
"
org.compiere.model.MUOM.isWorkMonth,MUOM.java,"boolean isWorkMonth()
	{
		return X12_MONTH_WORK.equals(getX12DE355());
	}
"
org.compiere.model.MUOM.isYear,MUOM.java,"boolean isYear()
	{
		return X12_YEAR.equals(getX12DE355());
	}
"
org.compiere.model.CalloutProduct.productCategory,CalloutProduct.java,"String productCategory (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer M_Product_Category_ID = (Integer)value;
		if (M_Product_Category_ID == null || M_Product_Category_ID.intValue() == 0
			|| M_Product_Category_ID == 0)
			return """";

		MProductCategory pc = new MProductCategory (ctx, M_Product_Category_ID, null);
		mTab.setValue(""IsPurchasedToOrder"",pc.isPurchasedToOrder());

		return """";
	}	//	product
"
org.compiere.model.CalloutProduct.Organization,CalloutProduct.java,"String Organization (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer AD_Org_ID =(Integer)value;
        if (AD_Org_ID == null)
              return """";
		MLocator defaultLocator = MLocator.getDefaultLocatorOfOrg(ctx, AD_Org_ID);
		if (defaultLocator!=null)
			mTab.setValue(""M_Locator_ID"", defaultLocator.get_ID());
		return """";

	}  // default locator
"
org.compiere.model.MYear.get,MYear.java,"MYear get (Ctx ctx, int C_Year_ID)
	{
		MYear year = s_years.get(ctx, C_Year_ID);
		if (year != null)
			return year;
		//
		String sql = ""SELECT * FROM C_Year WHERE C_Year_ID=?"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, C_Year_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())	//	first only
				year = new MYear(ctx, rs, null);
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		return year;
	}	//	get
"
org.compiere.model.MYear.setYear,MYear.java,"void setYear ()
	{
		GregorianCalendar cal = new GregorianCalendar(Language.getLoginLanguage().getLocale());
		String Year = String.valueOf(cal.get(Calendar.YEAR));
		super.setFiscalYear(Year);
	}	//	setYear
"
org.compiere.model.MYear.getYearAsInt,MYear.java,"int getYearAsInt()
	{
		String year = getFiscalYear();
		try
		{
			return Integer.parseInt(year);
		}
		catch (Exception e)
		{
			StringTokenizer st = new StringTokenizer(year, ""/-, \t\n\r\f"");
			if (st.hasMoreTokens())
			{
				String year2 = st.nextToken();
				try
				{
					return Integer.parseInt(year2);
				}
				catch (Exception e2)
				{
					log.log(Level.WARNING, year + ""->"" + year2 + "" - "" + e2.toString());
				}
			}
			else
				log.log(Level.WARNING, year + "" - "" + e.toString());
		}
		return 0;
	}	//	getYearAsInt
"
org.compiere.model.MYear.getYY,MYear.java,"String getYY()
	{
		int yy = getYearAsInt();
		String year = String.valueOf(yy);
		if (year.length() == 4)
			return year.substring(2, 4);
		return getFiscalYear();
	}	//	getYY
"
org.compiere.model.MYear.toString,MYear.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MYear["");
		sb.append(get_ID()).append(""-"")
			.append(getFiscalYear())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MYear.beforeSave,MYear.java,"boolean beforeSave (boolean newRecord)
	{
		int yy = getYearAsInt();
		if (yy == 0)
		{
			log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""Year"") 
				+ "" -> "" + yy + "" (2006 - 2006/07 - 2006-07 - ...)"");
			return false;
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MYear.createStdPeriods,MYear.java,"boolean createStdPeriods(Locale locale)
	{
		if (locale == null)
		{
			MClient client = MClient.get(getCtx());
			locale = client.getLocale();
		}
		
		if (locale == null && Language.getLoginLanguage() != null)
			locale = Language.getLoginLanguage().getLocale();
		if (locale == null)
			locale = Env.getLanguage(getCtx()).getLocale();
		//
		String[] months = null;
		try
		{
			DateFormatSymbols symbols = new DateFormatSymbols(locale);
			months = symbols.getShortMonths();
		}
		catch (Exception e)
		{
			months = new String[]{""Jan"", ""Feb"", ""Nar"",
				""Apr"", ""May"", ""Jun"",
				""Jul"", ""Aug"", ""Sep"",
				""Oct"", ""Nov"", ""Dec""};
		}
		//
		int year = getYearAsInt();
		GregorianCalendar cal = new GregorianCalendar(locale);
		cal.set(Calendar.HOUR_OF_DAY, 0);
		cal.set(Calendar.MINUTE, 0);
		cal.set(Calendar.SECOND, 0);
		cal.set(Calendar.MILLISECOND, 0);
		//
		for (int month = 0; month < 12; month++)
		{
			cal.set(Calendar.YEAR, year);
			cal.set(Calendar.MONTH, month);
			cal.set(Calendar.DAY_OF_MONTH, 1);
			Timestamp start = new Timestamp(cal.getTimeInMillis());
			String name = months[month] + ""-"" + getYY();
			//
			cal.add(Calendar.MONTH, 1);
			cal.add(Calendar.DAY_OF_YEAR, -1);
			Timestamp end = new Timestamp(cal.getTimeInMillis());
			//
			MPeriod period = new MPeriod (this, month+1, name, start, end);
			if (!period.save(get_Trx()))	//	Creates Period Control
				return false;
		}
		return true;
	}	//	createStdPeriods
"
org.compiere.model.CalloutBankStatement.bankAccount,CalloutBankStatement.java,"String bankAccount (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		if (value == null)
			return """";
		int C_BankAccount_ID = ((Integer)value).intValue();
		MBankAccount ba = MBankAccount.get(ctx, C_BankAccount_ID);
		mTab.setValue(""BeginningBalance"", ba.getCurrentBalance());
		return """";
	}	//	bankAccount
"
org.compiere.model.CalloutBankStatement.amount,CalloutBankStatement.java,"String amount (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		if (isCalloutActive())
			return """";
		setCalloutActive(true);

		//  Get Stmt & Trx
		BigDecimal stmt = (BigDecimal)mTab.getValue(""StmtAmt"");
		if (stmt == null)
			stmt = Env.ZERO;
		BigDecimal p_trx = (BigDecimal)mTab.getValue(""TrxAmt"");
		if (p_trx == null)
			p_trx = Env.ZERO;
		BigDecimal bd = stmt.subtract(p_trx);

		//  Charge - calculate Interest
		if (mField.getColumnName().equals(""ChargeAmt""))
		{
			BigDecimal charge = (BigDecimal)value;
			if (charge == null)
				charge = Env.ZERO;
			bd = bd.subtract(charge);
		//	log.trace(log.l5_DData, ""Interest ("" + bd + "") = Stmt("" + stmt + "") - Trx("" + p_trx + "") - Charge("" + charge + "")"");
			mTab.setValue(""InterestAmt"", bd);
		}
		//  Calculate Charge
		else
		{
			BigDecimal interest = (BigDecimal)mTab.getValue(""InterestAmt"");
			if (interest == null)
				interest = Env.ZERO;
			bd = bd.subtract(interest);
		//	log.trace(log.l5_DData, ""Charge ("" + bd + "") = Stmt("" + stmt + "") - Trx("" + p_trx + "") - Interest("" + interest + "")"");
			mTab.setValue(""ChargeAmt"", bd);
		}
		setCalloutActive(false);
		return """";
	}   //  amount
"
org.compiere.model.CalloutBankStatement.payment,CalloutBankStatement.java,"String payment (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer C_Payment_ID = (Integer)value;
		if (C_Payment_ID == null || C_Payment_ID.intValue() == 0)
			return """";
		//
		BigDecimal stmt = (BigDecimal)mTab.getValue(""StmtAmt"");
		if (stmt == null)
			stmt = Env.ZERO;

		String sql = ""SELECT PayAmt FROM C_Payment_v WHERE C_Payment_ID=?"";		//	1
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_Payment_ID.intValue());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				BigDecimal bd = rs.getBigDecimal(1);
				mTab.setValue(""TrxAmt"", bd);
				if (stmt.compareTo(Env.ZERO) == 0)
					mTab.setValue(""StmtAmt"", bd);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, ""BankStmt_Payment"", e);
			return e.getLocalizedMessage();
		}
		//  Recalculate Amounts
		amount (ctx, WindowNo, mTab, mField, value);
		return """";
	}	//	payment
"
org.compiere.model.CalloutBankStatement.org,CalloutBankStatement.java,"String org (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		mTab.setValue(""BankAccount"", null);
		return """";
	}	//	org
"
org.compiere.model.MSetup.createNewClient,MSetup.java,"String createNewClient(MBPartner bp, String clientName) throws Exception
	{
		int C_Country_ID = 0;
		int C_Currency_ID = 0;
		int C_Region_ID = 0;
		String City = null;

		//	Get Info from BP
		if (bp != null)
		{
			if (Util.isEmpty(clientName))
				clientName = bp.getName();
			MBPartnerLocation[] locs = bp.getLocations(false);
			if (locs != null && locs.length > 0)
			{
				MBPartnerLocation loc = locs[0];	//	first
				MLocation addr = loc.getLocation(false);
				if (addr != null)
				{
					C_Country_ID = addr.getC_Country_ID();
					C_Region_ID = addr.getC_Region_ID();
					City = addr.getCity();
				}
			}
		}
		if (C_Country_ID != 0)
		{
			MCountry cc = MCountry.get(bp.getCtx(), C_Country_ID);
			C_Currency_ID = cc.getC_Currency_ID();
		}


		MSetup ms = new MSetup();
		boolean ok = ms.createClient(clientName, null, null, null);
		String info = ms.getInfo();
		if (!ok)
			throw new CompiereSystemException(info);
		ok = ms.createAccounting(C_Country_ID, C_Currency_ID, true, true, false, false, false, null);
		info += ms.getInfo();
		if (!ok)
			throw new CompiereSystemException(info);

		ok = ms.createEntities(City, C_Region_ID);
		info += ms.getInfo();
		if (!ok)
			throw new CompiereSystemException(info);

		//	Step 4 - Create Print Documents
		PrintUtil.setupPrintForm(ms.getAD_Client_ID());

		resetServer();
		return info;
	}	//	createNewClient
"
org.compiere.model.MSetup.resetServer,MSetup.java,"void resetServer()
	{
		//	Reset Cache
		CacheMgt.get().reset(null, 0);
		//	Reset Apps Server
		if (CConnection.get().isAppsServerOK(true))
		{
			try
			{
				Server server = CConnection.get().getServer();
				if (server != null)
				{
					server.cacheReset(null, 0);
					server.restartProcesses();
				}
			}
			catch (RemoteException e)
			{
			}
			catch (Exception e)
			{
			}
		}
	}	//	resetServer
"
org.compiere.model.MSetup.createClient,MSetup.java,"boolean createClient (String clientName, String orgName,
		String userClient, String userOrg)
	{
		if (Util.isEmpty(clientName))
			clientName = ""Tenant_"" + System.currentTimeMillis();
		if (Util.isEmpty(orgName))
			orgName = clientName + ""_Org"";
		if (Util.isEmpty(userClient))
			userClient = clientName + ""_Admin"";
		if (Util.isEmpty(userOrg))
			userOrg = clientName + ""_User"";
		//
		log.info(clientName);
		m_info = new StringBuffer();

		//	Test Client Name
		String sql = ""UPDATE AD_Client SET CreatedBy=0 WHERE Name=?"";
		if (DB.executeUpdate(sql, new Object[]{clientName}, true, m_trx) != 0)
		{
			String err = ""Tenant Name NOT unique: "" + clientName;
			log.log(Level.WARNING, err);
			m_info.append(err);
			m_trx.rollback();
			m_trx.close();
			return false;
		}

		//  Standard columns
		String name = null;
		int no = 0;

		/**
		 *  Create Client
		 */
		name = clientName;
		m_clientName = name;
		m_client = new MClient(m_ctx, 0, true, m_trx);
		m_client.setValue(m_clientName);
		m_client.setName(m_clientName);
		if (!m_client.save())
		{
			String err = ""Client NOT created"";
			log.log(Level.WARNING, err);
			m_info.append(err);
			m_trx.rollback();
			m_trx.close();
			return false;
		}
		int AD_Client_ID = m_client.getAD_Client_ID();
		m_ctx.setAD_Client_ID(AD_Client_ID);
		m_ctx.setContext(m_WindowNo, ""AD_Client_ID"", AD_Client_ID);

		//	Standard Values
		m_stdValues = String.valueOf(AD_Client_ID) + "",0,'Y',SysDate,0,SysDate,0"";
		//  Info - Client
		m_info.append(Msg.translate(m_lang, ""AD_Client_ID"")).append(""="").append(name).append(""\n"");

		//	Setup Sequences
		if (!MSequence.checkClientSequences (m_ctx, AD_Client_ID, m_trx))
		{
			String err = ""Sequences NOT created"";
			log.log(Level.WARNING, err);
			m_info.append(err);
			m_trx.rollback();
			m_trx.close();
			return false;
		}

		//  Trees and Client Info
		if (!m_client.setupClientInfo(m_lang))
		{
			String err = ""Client Info NOT created"";
			log.log(Level.WARNING, err);
			m_info.append(err);
			m_trx.rollback();
			m_trx.close();
			return false;
		}
		m_AD_Tree_Account_ID = m_client.getSetup_AD_Tree_Account_ID();

		/**
		 *  Create Org
		 */
		name = orgName;
		m_org = new MOrg (m_client, name);
		if (!m_org.save())
		{
			String err = ""Organization NOT created"";
			log.log(Level.WARNING, err);
			m_info.append(err);
			m_trx.rollback();
			m_trx.close();
			return false;
		}
		m_ctx.setContext(m_WindowNo, ""AD_Org_ID"", getAD_Org_ID());
		m_ctx.setAD_Org_ID(getAD_Org_ID());
		m_stdValuesOrg = AD_Client_ID + "","" + getAD_Org_ID() + "",'Y',SysDate,0,SysDate,0"";
		//  Info
		m_info.append(Msg.translate(m_lang, ""AD_Org_ID"")).append(""="").append(name).append(""\n"");

		/**
		 *  Create Roles
		 *  - Admin
		 *  - User
		 */
		name = m_clientName + "" AdminRole"";
		MRole admin = new MRole(m_ctx, 0, m_trx);
		admin.setClientOrg(m_client);
		admin.setName(name);
		admin.setUserLevel(X_AD_Role.USERLEVEL_TenantPlusOrganization);
		admin.setPreferenceType(X_AD_Role.PREFERENCETYPE_Tenant);
		admin.setIsShowAcct(true);
		if (!admin.save())
		{
			String err = ""Admin Role NOT inserted"";
			log.log(Level.WARNING, err);
			m_info.append(err);
			m_trx.rollback();
			m_trx.close();
			return false;
		}
		m_ctx.setAD_Role_ID(admin.getAD_Role_ID());
		//	OrgAccess x, 0
		MRoleOrgAccess adminClientAccess = new MRoleOrgAccess (admin, 0);
		if (!adminClientAccess.save())
			log.log(Level.WARNING, ""Admin Role_OrgAccess 0 NOT created"");
		//  OrgAccess x,y
		MRoleOrgAccess adminOrgAccess = new MRoleOrgAccess (admin, m_org.getAD_Org_ID());
		if (!adminOrgAccess.save())
			log.log(Level.WARNING, ""Admin Role_OrgAccess NOT created"");

		//  Info - Admin Role
		m_info.append(Msg.translate(m_lang, ""AD_Role_ID"")).append(""="").append(name).append(""\n"");

		//
		name = m_clientName + "" UserRole"";
		MRole user = new MRole (m_ctx, 0, m_trx);
		user.setClientOrg(m_client);
		user.setName(name);
		if (!user.save())
		{
			String err = ""User Role NOT inserted"";
			log.log(Level.WARNING, err);
			m_info.append(err);
			m_trx.rollback();
			m_trx.close();
			return false;
		}
		//  OrgAccess x,y
		MRoleOrgAccess userOrgAccess = new MRoleOrgAccess (user, m_org.getAD_Org_ID());
		if (!userOrgAccess.save())
			log.log(Level.WARNING, ""User Role_OrgAccess NOT created"");

		//  Info - Client Role
		m_info.append(Msg.translate(m_lang, ""AD_Role_ID"")).append(""="").append(name).append(""\n"");

		/**
		 *  Create Users
		 *  - Client
		 *  - Org
		 */
		name = userClient;
		AD_User_ID = getNextID(AD_Client_ID, ""AD_User"");
		AD_User_Name = name;
		name = DB.TO_STRING(name);
		sql = ""INSERT INTO AD_User("" + m_stdColumns + "",AD_User_ID,""
			+ "" Value,Name,Description,Password)""
			+ "" VALUES ("" + m_stdValues + "","" + AD_User_ID + "",""
			+ name + "","" + name + "","" + name + "","" + name + "")"";
		no = DB.executeUpdate(sql, m_trx);
		if (no != 1)
		{
			String err = ""Admin User NOT inserted - "" + AD_User_Name;
			log.log(Level.WARNING, err);
			m_info.append(err);
			m_trx.rollback();
			m_trx.close();
			return false;
		}
		m_ctx.setAD_User_ID(AD_User_ID);
		//  Info
		m_info.append(Msg.translate(m_lang, ""AD_User_ID"")).append(""="").append(AD_User_Name).append(""/"").append(AD_User_Name).append(""\n"");

		name = userOrg;
		if (name == null || name.length() == 0)
			name = m_clientName + ""Org"";
		AD_User_U_ID = getNextID(AD_Client_ID, ""AD_User"");
		AD_User_U_Name = name;
		name = DB.TO_STRING(name);
		sql = ""INSERT INTO AD_User("" + m_stdColumns + "",AD_User_ID,""
			+ ""Value,Name,Description,Password)""
			+ "" VALUES ("" + m_stdValues + "","" + AD_User_U_ID + "",""
			+ name + "","" + name + "","" + name + "","" + name + "")"";
		no = DB.executeUpdate(sql, m_trx);
		if (no != 1)
		{
			String err = ""Org User NOT inserted - "" + AD_User_U_Name;
			log.log(Level.WARNING, err);
			m_info.append(err);
			m_trx.rollback();
			m_trx.close();
			return false;
		}
		//  Info
		m_info.append(Msg.translate(m_lang, ""AD_User_ID"")).append(""="").append(AD_User_U_Name).append(""/"").append(AD_User_U_Name).append(""\n"");

		/**
		 *  Create User-Role
		 */
		//  ClientUser          - Admin & User
		sql = ""INSERT INTO AD_User_Roles("" + m_stdColumns + "",AD_User_ID,AD_Role_ID)""
			+ "" VALUES ("" + m_stdValues + "","" + AD_User_ID + "","" + admin.getAD_Role_ID() + "")"";
		no = DB.executeUpdate(sql, m_trx);
		if (no != 1)
			log.log(Level.WARNING, ""UserRole ClientUser+Admin NOT inserted"");
		sql = ""INSERT INTO AD_User_Roles("" + m_stdColumns + "",AD_User_ID,AD_Role_ID)""
			+ "" VALUES ("" + m_stdValues + "","" + AD_User_ID + "","" + user.getAD_Role_ID() + "")"";
		no = DB.executeUpdate(sql, m_trx);
		if (no != 1)
			log.log(Level.WARNING, ""UserRole ClientUser+User NOT inserted"");
		//  OrgUser             - User
		sql = ""INSERT INTO AD_User_Roles("" + m_stdColumns + "",AD_User_ID,AD_Role_ID)""
			+ "" VALUES ("" + m_stdValues + "","" + AD_User_U_ID + "","" + user.getAD_Role_ID() + "")"";
		no = DB.executeUpdate(sql, m_trx);
		if (no != 1)
			log.log(Level.WARNING, ""UserRole OrgUser+Org NOT inserted"");

		//	Processors
		MAcctProcessor ap = new MAcctProcessor(m_client, AD_User_ID);
		ap.save();

		MRequestProcessor rp = new MRequestProcessor (m_client, AD_User_ID);
		rp.save();

		log.info(""fini"");
		return true;
	}   //  createClient
"
org.compiere.model.MSetup.createAccounting,MSetup.java,"boolean createAccounting(int C_Country_ID, int C_Currency_ID,
		boolean hasProduct, boolean hasBPartner, boolean hasProject,
		boolean hasMCampaign, boolean hasSRegion,
		String AccountingFileName)
	{
		log.info(m_client.toString());
		if (C_Country_ID == 0)
			C_Country_ID = 100;		//	US
		if (C_Currency_ID == 0)
		{
			MCountry cc = new MCountry(m_ctx, C_Country_ID, m_trx);
			C_Currency_ID = cc.getC_Currency_ID();
		}
		if (C_Currency_ID == 0)
			C_Currency_ID = 100;	//	USD
		//
		m_C_Country_ID = C_Country_ID;
		m_C_Currency_ID = C_Currency_ID;
		m_hasProject = hasProject;
		m_hasMCampaign = hasMCampaign;
		m_hasSRegion = hasSRegion;

		//  Standard variables
		m_info = new StringBuffer(""\n----\n"");
		String name = null;
		StringBuffer sqlCmd = null;
		int no = 0;

		/**
		 *  Create Calendar
		 */
		m_calendar = new MCalendar(m_client);
		if (!m_calendar.save())
		{
			String err = ""Calendar NOT inserted"";
			log.log(Level.WARNING, err);
			m_info.append(err);
			m_trx.rollback();
			m_trx.close();
			return false;
		}
		//  Info
		m_info.append(Msg.translate(m_lang, ""C_Calendar_ID"")).append(""="").append(m_calendar.getName()).append(""\n"");

		if (m_calendar.createYear(m_client.getLocale()) == null)
			log.log(Level.WARNING, ""Year NOT inserted"");

		//	Create Account Elements
		name = m_clientName + "" "" + Msg.translate(m_lang, ""Account_ID"");
		MElement element = new MElement (m_client, name,
			X_C_Element.ELEMENTTYPE_Account, m_AD_Tree_Account_ID);
		if (!element.save())
		{
			String err = ""Acct Element NOT inserted"";
			log.log(Level.WARNING, err);
			m_info.append(err);
			m_trx.rollback();
			m_trx.close();
			return false;
		}
		int C_Element_ID = element.getC_Element_ID();
		m_info.append(Msg.translate(m_lang, ""C_Element_ID"")).append(""="").append(name).append(""\n"");

		//	Create Account Values
		if (Util.isEmpty(AccountingFileName))
			AccountingFileName = Compiere.getCompiereHome()
				+ File.separator + ""data""
				+ File.separator + ""import""
				+ File.separator + ""AccountingUS.csv"";
		File AccountingFile = new File(AccountingFileName);
		if (!AccountingFile.exists())
		{
			String errMsg = ""Not found: "" + AccountingFileName;
			m_info.append(errMsg);
			m_trx.rollback();
			m_trx.close();
			return false;
		}
		m_nap = new NaturalAccountMap(m_ctx, m_trx);
		String errMsg = m_nap.parseFile(AccountingFile);
		if (errMsg.length() != 0)
		{
			log.log(Level.WARNING, errMsg);
			m_info.append(errMsg);
			m_trx.rollback();
			m_trx.close();
			return false;
		}
		if (m_nap.saveAccounts(getAD_Client_ID(), getAD_Org_ID(), C_Element_ID))
			m_info.append(Msg.translate(m_lang, ""C_ElementValue_ID"")).append("" # "").append(m_nap.size()).append(""\n"");
		else
		{
			String err = ""Acct Element Values NOT inserted"";
			log.log(Level.WARNING, err);
			m_info.append(err);
			m_trx.rollback();
			m_trx.close();
			return false;
		}

		int C_ElementValue_ID = m_nap.getC_ElementValue_ID(""DEFAULT_ACCT"");
		log.fine(""C_ElementValue_ID="" + C_ElementValue_ID);

		/**
		 *  Create AccountingSchema
		 */
		m_as = new MAcctSchema (m_client, m_C_Currency_ID);
		if (!m_as.save())
		{
			String err = ""AcctSchema NOT inserted"";
			log.log(Level.WARNING, err);
			m_info.append(err);
			m_trx.rollback();
			m_trx.close();
			return false;
		}
		//  Info
		m_info.append(Msg.translate(m_lang, ""C_AcctSchema_ID"")).append(""="").append(m_as.getName()).append(""\n"");

		/**
		 *  Create AccountingSchema Elements (Structure)
		 */
		String sql2 = null;
		if (Env.isBaseLanguage(m_lang, ""AD_Reference""))	//	Get ElementTypes & Name
			sql2 = ""SELECT Value, Name FROM AD_Ref_List WHERE AD_Reference_ID=181"";
		else
			sql2 = ""SELECT l.Value, t.Name FROM AD_Ref_List l, AD_Ref_List_Trl t ""
				+ ""WHERE l.AD_Reference_ID=181 AND l.AD_Ref_List_ID=t.AD_Ref_List_ID"";
		try
		{
			int AD_Client_ID = m_client.getAD_Client_ID();
			PreparedStatement stmt = DB.prepareStatement(sql2, m_trx);
			ResultSet rs = stmt.executeQuery();
			while (rs.next())
			{
				String ElementType = rs.getString(1);
				name = rs.getString(2);
				//
				String IsMandatory = null;
				String IsBalanced = ""N"";
				int SeqNo = 0;
				int C_AcctSchema_Element_ID = 0;

				if (ElementType.equals(""OO""))
				{
					C_AcctSchema_Element_ID = getNextID(AD_Client_ID, ""C_AcctSchema_Element"");
					IsMandatory = ""Y"";
					IsBalanced = ""Y"";
					SeqNo = 10;
				}
				else if (ElementType.equals(""AC""))
				{
					C_AcctSchema_Element_ID = getNextID(AD_Client_ID, ""C_AcctSchema_Element"");
					IsMandatory = ""Y"";
					SeqNo = 20;
				}
				else if (ElementType.equals(""PR"") && hasProduct)
				{
					C_AcctSchema_Element_ID = getNextID(AD_Client_ID, ""C_AcctSchema_Element"");
					IsMandatory = ""N"";
					SeqNo = 30;
				}
				else if (ElementType.equals(""BP"") && hasBPartner)
				{
					C_AcctSchema_Element_ID = getNextID(AD_Client_ID, ""C_AcctSchema_Element"");
					IsMandatory = ""N"";
					SeqNo = 40;
				}
				else if (ElementType.equals(""PJ"") && hasProject)
				{
					C_AcctSchema_Element_ID = getNextID(AD_Client_ID, ""C_AcctSchema_Element"");
					IsMandatory = ""N"";
					SeqNo = 50;
				}
				else if (ElementType.equals(""MC"") && hasMCampaign)
				{
					C_AcctSchema_Element_ID = getNextID(AD_Client_ID, ""C_AcctSchema_Element"");
					IsMandatory = ""N"";
					SeqNo = 60;
				}
				else if (ElementType.equals(""SR"") && hasSRegion)
				{
					C_AcctSchema_Element_ID = getNextID(AD_Client_ID, ""C_AcctSchema_Element"");
					IsMandatory = ""N"";
					SeqNo = 70;
				}
				//	Not OT, LF, LT, U1, U2, AY

				if (IsMandatory != null)
				{
					sqlCmd = new StringBuffer (""INSERT INTO C_AcctSchema_Element("");
					sqlCmd.append(m_stdColumns).append("",C_AcctSchema_Element_ID,C_AcctSchema_ID,"")
						.append(""ElementType,Name,SeqNo,IsMandatory,IsBalanced) VALUES ("");
					sqlCmd.append(m_stdValues).append("","").append(C_AcctSchema_Element_ID).append("","").append(m_as.getC_AcctSchema_ID()).append("","")
						.append(""'"").append(ElementType).append(""','"").append(name).append(""',"").append(SeqNo).append("",'"")
						.append(IsMandatory).append(""','"").append(IsBalanced).append(""')"");
					no = DB.executeUpdate(sqlCmd.toString(), m_trx);
					if (no == 1)
						m_info.append(Msg.translate(m_lang, ""C_AcctSchema_Element_ID"")).append(""="").append(name).append(""\n"");

					/** Default value for mandatory elements: OO and AC */
					if (ElementType.equals(""OO""))
					{
						sqlCmd = new StringBuffer (""UPDATE C_AcctSchema_Element SET Org_ID="");
						sqlCmd.append(getAD_Org_ID()).append("" WHERE C_AcctSchema_Element_ID="").append(C_AcctSchema_Element_ID);
						no = DB.executeUpdate(sqlCmd.toString(), m_trx);
						if (no != 1)
							log.log(Level.WARNING, ""Default Org in AcctSchamaElement NOT updated"");
					}
					if (ElementType.equals(""AC""))
					{
						sqlCmd = new StringBuffer (""UPDATE C_AcctSchema_Element SET C_ElementValue_ID="");
						sqlCmd.append(C_ElementValue_ID).append("", C_Element_ID="").append(C_Element_ID);
						sqlCmd.append("" WHERE C_AcctSchema_Element_ID="").append(C_AcctSchema_Element_ID);
						no = DB.executeUpdate(sqlCmd.toString(), m_trx);
						if (no != 1)
							log.log(Level.WARNING, ""Default Account in AcctSchamaElement NOT updated"");
					}
				}
			}
			rs.close();
			stmt.close();
		}
		catch (SQLException e1)
		{
			log.log(Level.WARNING, ""Elements"", e1);
			m_info.append(e1.getMessage());
			m_trx.rollback();
			m_trx.close();
			return false;
		}
		//  Create AcctSchema


		//  Create GL Accounts
		m_accountsOK = true;
		sqlCmd = new StringBuffer (""INSERT INTO C_AcctSchema_GL ("");
		sqlCmd.append(m_stdColumns).append("",C_AcctSchema_ID,""
		/*jz
			+ ""USESUSPENSEBALANCING,SUSPENSEBALANCING_Acct,""
			+ ""USESUSPENSEERROR,SUSPENSEERROR_Acct,""
			+ ""USECURRENCYBALANCING,CURRENCYBALANCING_Acct,""
			+ ""RETAINEDEARNING_Acct,INCOMESUMMARY_Acct,""
			+ ""INTERCOMPANYDUETO_Acct,INTERCOMPANYDUEFROM_Acct,""
			+ ""PPVOFFSET_Acct, CommitmentOffset_Acct) VALUES ("");
		sqlCmd.append(m_stdValues).append("","").append(m_as.getC_AcctSchema_ID()).append("","")
			.append(""'Y',"").append(getAcct(""SUSPENSEBALANCING_Acct"")).append("","")
			.append(""'Y',"").append(getAcct(""SUSPENSEERROR_Acct"")).append("","")
			.append(""'Y',"").append(getAcct(""CURRENCYBALANCING_Acct"")).append("","");
		//  RETAINEDEARNING_Acct,INCOMESUMMARY_Acct,
		sqlCmd.append(getAcct(""RETAINEDEARNING_Acct"")).append("","")
			.append(getAcct(""INCOMESUMMARY_Acct"")).append("","")
		//  INTERCOMPANYDUETO_Acct,INTERCOMPANYDUEFROM_Acct)
			.append(getAcct(""INTERCOMPANYDUETO_Acct"")).append("","")
			.append(getAcct(""INTERCOMPANYDUEFROM_Acct"")).append("","")
			.append(getAcct(""PPVOFFSET_Acct"")).append("","")
			*/
			+ ""UseSuspenseBalancing,SuspenseBalancing_Acct,""
			+ ""UseSuspenseError,SuspenseError_Acct,""
			+ ""UseCurrencyBalancing,CurrencyBalancing_Acct,""
			+ ""RetainedEarning_Acct,IncomeSummary_Acct,""
			+ ""IntercompanyDueTo_Acct,IntercompanyDueFrom_Acct,""
			+ ""PPVOffset_Acct, CommitmentOffset_Acct) VALUES ("");
		sqlCmd.append(m_stdValues).append("","").append(m_as.getC_AcctSchema_ID()).append("","")
			.append(""'Y',"").append(getAcct(""SuspenseBalancing_Acct"")).append("","")
			.append(""'Y',"").append(getAcct(""SuspenseError_Acct"")).append("","")
			.append(""'Y',"").append(getAcct(""CurrencyBalancing_Acct"")).append("","");
		//  RETAINEDEARNING_Acct,INCOMESUMMARY_Acct,
		sqlCmd.append(getAcct(""RetainedEarning_Acct"")).append("","")
			.append(getAcct(""INCOMESUMMARY_Acct"")).append("","")
		//  INTERCOMPANYDUETO_Acct,INTERCOMPANYDUEFROM_Acct)
			.append(getAcct(""IntercompanyDueTo_Acct"")).append("","")
			.append(getAcct(""IntercompanyDueFrom_Acct"")).append("","")
			.append(getAcct(""PPVOffset_Acct"")).append("","")
			.append(getAcct(""CommitmentOffset_Acct""))
			.append("")"");
		if (m_accountsOK)
			no = DB.executeUpdate(sqlCmd.toString(), m_trx);
		else
			no = -1;
		if (no != 1)
		{
			String err = ""GL Accounts NOT inserted"";
			log.log(Level.WARNING, err);
			m_info.append(err);
			m_trx.rollback();
			m_trx.close();
			return false;
		}

		//	Create Std Accounts
		sqlCmd = new StringBuffer (""INSERT INTO C_AcctSchema_Default ("");
		sqlCmd.append(m_stdColumns).append("",C_AcctSchema_ID,""
			+ ""W_Inventory_Acct,W_Differences_Acct,W_Revaluation_Acct,W_InvActualAdjust_Acct, ""
			+ ""P_Revenue_Acct,P_Expense_Acct,P_CostAdjustment_Acct,P_InventoryClearing_Acct,P_Asset_Acct,P_COGS_Acct, ""
			+ ""P_PurchasePriceVariance_Acct,P_InvoicePriceVariance_Acct,P_TradeDiscountRec_Acct,P_TradeDiscountGrant_Acct, ""
			+ ""C_Receivable_Acct,C_Receivable_Services_Acct,C_Prepayment_Acct, ""
			+ ""V_Liability_Acct,V_Liability_Services_Acct,V_Prepayment_Acct, ""
			+ ""PayDiscount_Exp_Acct,PayDiscount_Rev_Acct,WriteOff_Acct, ""
			+ ""UnrealizedGain_Acct,UnrealizedLoss_Acct,RealizedGain_Acct,RealizedLoss_Acct, ""
			+ ""Withholding_Acct,E_Prepayment_Acct,E_Expense_Acct, ""
			+ ""PJ_Asset_Acct,PJ_WIP_Acct,""
			+ ""T_Expense_Acct,T_Liability_Acct,T_Receivables_Acct,T_Due_Acct,T_Credit_Acct, ""
			+ ""B_InTransit_Acct,B_Asset_Acct,B_Expense_Acct,B_InterestRev_Acct,B_InterestExp_Acct,""
			+ ""B_Unidentified_Acct,B_SettlementGain_Acct,B_SettlementLoss_Acct,""
			+ ""B_RevaluationGain_Acct,B_RevaluationLoss_Acct,B_PaymentSelect_Acct,B_UnallocatedCash_Acct, ""
			+ ""Ch_Expense_Acct,Ch_Revenue_Acct, ""
			+ ""UnEarnedRevenue_Acct,NotInvoicedReceivables_Acct,NotInvoicedRevenue_Acct,NotInvoicedReceipts_Acct, ""
			+ ""CB_Asset_Acct,CB_CashTransfer_Acct,CB_Differences_Acct,CB_Expense_Acct,CB_Receipt_Acct,""
			+ "" WO_CloseExpense_Acct, WO_Material_Acct) VALUES ("");
		sqlCmd.append(m_stdValues).append("","").append(m_as.getC_AcctSchema_ID()).append("","");
		//  W_INVENTORY_Acct,W_Differences_Acct,W_REVALUATION_Acct,W_INVACTUALADJUST_Acct
		sqlCmd.append(getAcct(""W_Inventory_Acct"")).append("","");
		sqlCmd.append(getAcct(""W_Differences_Acct"")).append("","");
		sqlCmd.append(getAcct(""W_Revaluation_Acct"")).append("","");
		sqlCmd.append(getAcct(""W_InvActualAdjust_Acct"")).append("", "");
		//  P_Revenue_Acct,P_Expense_Acct,P_Asset_Acct,P_COGS_Acct,
		sqlCmd.append(getAcct(""P_Revenue_Acct"")).append("","");
		sqlCmd.append(getAcct(""P_Expense_Acct"")).append("","");
		sqlCmd.append(getAcct(""P_CostAdjustment_Acct"")).append("","");
		sqlCmd.append(getAcct(""P_InventoryClearing_Acct"")).append("","");
		sqlCmd.append(getAcct(""P_Asset_Acct"")).append("","");
		sqlCmd.append(getAcct(""P_COGS_Acct"")).append("", "");
		//  P_PURCHASEPRICEVARIANCE_Acct,P_INVOICEPRICEVARIANCE_Acct,P_TRADEDISCOUNTREC_Acct,P_TRADEDISCOUNTGRANT_Acct,
		sqlCmd.append(getAcct(""P_PurchasePriceVariance_Acct"")).append("","");
		sqlCmd.append(getAcct(""P_InvoicePriceVariance_Acct"")).append("","");
		sqlCmd.append(getAcct(""P_TradeDiscountRec_Acct"")).append("","");
		sqlCmd.append(getAcct(""P_TradeDiscountGrant_Acct"")).append("", "");
		//  C_RECEIVABLE_Acct,C_Receivable_Services_Acct,C_PREPAYMENT_Acct,
		sqlCmd.append(getAcct(""C_Receivable_Acct"")).append("","");
		sqlCmd.append(getAcct(""C_Receivable_Services_Acct"")).append("","");
		sqlCmd.append(getAcct(""C_Prepayment_Acct"")).append("", "");
		//  V_LIABILITY_Acct,V_LIABILITY_Services_Acct,V_Prepayment_Acct,
		sqlCmd.append(getAcct(""V_Liability_Acct"")).append("","");
		sqlCmd.append(getAcct(""V_Liability_Services_Acct"")).append("","");
		sqlCmd.append(getAcct(""V_Prepayment_Acct"")).append("", "");
		//  PAYDISCOUNT_EXP_Acct,PAYDISCOUNT_REV_Acct,WRITEOFF_Acct,
		sqlCmd.append(getAcct(""PayDiscount_Exp_Acct"")).append("","");
		sqlCmd.append(getAcct(""PayDiscount_Rev_Acct"")).append("","");
		sqlCmd.append(getAcct(""WriteOff_Acct"")).append("", "");
		//  UNREALIZEDGAIN_Acct,UNREALIZEDLOSS_Acct,REALIZEDGAIN_Acct,REALIZEDLOSS_Acct,
		sqlCmd.append(getAcct(""UnrealizedGain_Acct"")).append("","");
		sqlCmd.append(getAcct(""UnrealizedLoss_Acct"")).append("","");
		sqlCmd.append(getAcct(""RealizedGain_Acct"")).append("","");
		sqlCmd.append(getAcct(""RealizedLoss_Acct"")).append("", "");
		//  WITHHOLDING_Acct,E_Prepayment_Acct,E_Expense_Acct,
		sqlCmd.append(getAcct(""Withholding_Acct"")).append("","");
		sqlCmd.append(getAcct(""E_Prepayment_Acct"")).append("","");
		sqlCmd.append(getAcct(""E_Expense_Acct"")).append("", "");
		//  PJ_Asset_Acct,PJ_WIP_Acct,
		sqlCmd.append(getAcct(""PJ_Asset_Acct"")).append("","");
		sqlCmd.append(getAcct(""PJ_WIP_Acct"")).append("","");
		//  T_Expense_Acct,T_Liability_Acct,T_Receivables_Acct,T_DUE_Acct,T_CREDIT_Acct,
		sqlCmd.append(getAcct(""T_Expense_Acct"")).append("","");
		sqlCmd.append(getAcct(""T_Liability_Acct"")).append("","");
		sqlCmd.append(getAcct(""T_Receivables_Acct"")).append("","");
		sqlCmd.append(getAcct(""T_Due_Acct"")).append("","");
		sqlCmd.append(getAcct(""T_Credit_Acct"")).append("", "");
		//  B_INTRANSIT_Acct,B_Asset_Acct,B_Expense_Acct,B_INTERESTREV_Acct,B_INTERESTEXP_Acct,
		sqlCmd.append(getAcct(""B_InTransit_Acct"")).append("","");
		sqlCmd.append(getAcct(""B_Asset_Acct"")).append("","");
		sqlCmd.append(getAcct(""B_Expense_Acct"")).append("","");
		sqlCmd.append(getAcct(""B_InterestREV_Acct"")).append("","");
		sqlCmd.append(getAcct(""B_InterestEXP_Acct"")).append("","");
		//  B_UNIDENTIFIED_Acct,B_SETTLEMENTGAIN_Acct,B_SETTLEMENTLOSS_Acct,
		sqlCmd.append(getAcct(""B_Unidentified_Acct"")).append("","");
		sqlCmd.append(getAcct(""B_SettlementGain_Acct"")).append("","");
		sqlCmd.append(getAcct(""B_SettlementLoss_Acct"")).append("","");
		//  B_RevaluationGain_Acct,B_RevaluationLoss_Acct,B_PAYMENTSELECT_Acct,B_UnallocatedCash_Acct,
		sqlCmd.append(getAcct(""B_RevaluationGain_Acct"")).append("","");
		sqlCmd.append(getAcct(""B_RevaluationLoss_Acct"")).append("","");
		sqlCmd.append(getAcct(""B_PaymentSelect_Acct"")).append("","");
		sqlCmd.append(getAcct(""B_UnallocatedCash_Acct"")).append("", "");
		//  CH_Expense_Acct,CH_Revenue_Acct,
		sqlCmd.append(getAcct(""Ch_Expense_Acct"")).append("","");
		sqlCmd.append(getAcct(""Ch_Revenue_Acct"")).append("", "");
		//  UnEarnedRevenue_Acct,NotInvoicedReceivables_Acct,NotInvoicedRevenue_Acct,NotInvoicedReceipts_Acct,
		sqlCmd.append(getAcct(""UnEarnedRevenue_Acct"")).append("","");
		sqlCmd.append(getAcct(""NotInvoicedReceivables_Acct"")).append("","");
		sqlCmd.append(getAcct(""NotInvoicedRevenue_Acct"")).append("","");
		sqlCmd.append(getAcct(""NotInvoicedReceipts_Acct"")).append("", "");
		//  CB_Asset_Acct,CB_CashTransfer_Acct,CB_Differences_Acct,CB_Expense_Acct,CB_Receipt_Acct)
		sqlCmd.append(getAcct(""CB_Asset_Acct"")).append("","");
		sqlCmd.append(getAcct(""CB_CashTransfer_Acct"")).append("","");
		sqlCmd.append(getAcct(""CB_Differences_Acct"")).append("","");
		sqlCmd.append(getAcct(""CB_Expense_Acct"")).append("","");
		sqlCmd.append(getAcct(""CB_Receipt_Acct"")).append("","");
		sqlCmd.append(getAcct(""WO_CLOSEEXPENSE_ACCT"")).append("","");
		sqlCmd.append(getAcct(""WO_MATERIAL_ACCT"")).append("")"");

		if (m_accountsOK)
			no = DB.executeUpdate(sqlCmd.toString(), m_trx);
		else
			no = -1;
		if (no != 1)
		{
			String err = ""Default Accounts Not inserted"";
			log.log(Level.WARNING, err);
			m_info.append(err);
			m_trx.rollback();
			m_trx.close();
			return false;
		}

		//  GL Categories
		createGLCategory(""Standard"", X_GL_Category.CATEGORYTYPE_Manual, true);
		int GL_None = createGLCategory(""None"", X_GL_Category.CATEGORYTYPE_Document, false);
		int GL_GL = createGLCategory(""Manual"", X_GL_Category.CATEGORYTYPE_Manual, false);
		int GL_ARI = createGLCategory(""AR Invoice"", X_GL_Category.CATEGORYTYPE_Document, false);
		int GL_ARR = createGLCategory(""AR Receipt"", X_GL_Category.CATEGORYTYPE_Document, false);
		int GL_MM = createGLCategory(""Material Management"", X_GL_Category.CATEGORYTYPE_Document, false);
		int GL_API = createGLCategory(""AP Invoice"", X_GL_Category.CATEGORYTYPE_Document, false);
		int GL_APP = createGLCategory(""AP Payment"", X_GL_Category.CATEGORYTYPE_Document, false);
		int GL_CASH = createGLCategory(""Cash/Payments"", X_GL_Category.CATEGORYTYPE_Document, false);

		//	Base DocumentTypes
		int ii = createDocType(""GL Journal"", Msg.getElement(m_ctx, ""GL_Journal_ID""),
			MDocBaseType.DOCBASETYPE_GLJournal, null, 0, 0,
			1000, GL_GL);
		if (ii == 0)
		{
			String err = ""Document Type not created"";
			m_info.append(err);
			m_trx.rollback();
			m_trx.close();
			return false;
		}
		createDocType(""GL Journal Batch"", Msg.getElement(m_ctx, ""GL_JournalBatch_ID""),
			MDocBaseType.DOCBASETYPE_GLJournal, null, 0, 0,
			100, GL_GL);
		//	MDocBaseType.DOCBASETYPE_GLDocument
		//
		int DT_I = createDocType(""AR Invoice"", Msg.getElement(m_ctx, ""C_Invoice_ID"", true),
			MDocBaseType.DOCBASETYPE_ARInvoice, null, 0, 0,
			100000, GL_ARI);
		int DT_II = createDocType(""AR Invoice Indirect"", Msg.getElement(m_ctx, ""C_Invoice_ID"", true),
			MDocBaseType.DOCBASETYPE_ARInvoice, null, 0, 0,
			150000, GL_ARI);
		int DT_IC = createDocType(""AR Credit Memo"", Msg.getMsg(m_ctx, ""CreditMemo""),
			MDocBaseType.DOCBASETYPE_ARCreditMemo, null, 0, 0,
			170000, GL_ARI);
		//	MDocBaseType.DOCBASETYPE_ARProFormaInvoice

		createDocType(""AP Invoice"", Msg.getElement(m_ctx, ""C_Invoice_ID"", false),
			MDocBaseType.DOCBASETYPE_APInvoice, null, 0, 0,
			0, GL_API);
		createDocType(""AP CreditMemo"", Msg.getMsg(m_ctx, ""CreditMemo""),
			MDocBaseType.DOCBASETYPE_APCreditMemo, null, 0, 0,
			0, GL_API);
		createDocType(""Match Invoice"", Msg.getElement(m_ctx, ""M_MatchInv_ID"", false),
			MDocBaseType.DOCBASETYPE_MatchInvoice, null, 0, 0,
			390000, GL_API);

		createDocType(""AR Receipt"", Msg.getElement(m_ctx, ""C_Payment_ID"", true),
			MDocBaseType.DOCBASETYPE_ARReceipt, null, 0, 0,
			0, GL_ARR);
		createDocType(""AP Payment"", Msg.getElement(m_ctx, ""C_Payment_ID"", false),
			MDocBaseType.DOCBASETYPE_APPayment, null, 0, 0,
			0, GL_APP);
		createDocType(""Allocation"", ""Allocation"",
			MDocBaseType.DOCBASETYPE_PaymentAllocation, null, 0, 0,
			490000, GL_CASH);

		int DT_S  = createDocType(""MM Shipment"", ""Delivery Note"",
			MDocBaseType.DOCBASETYPE_MaterialDelivery, null, 0, 0,
			500000, GL_MM);
		int DT_SI = createDocType(""MM Shipment Indirect"", ""Delivery Note"",
			MDocBaseType.DOCBASETYPE_MaterialDelivery, null, 0, 0,
			550000, GL_MM);
		int DT_SR = createDocType(""MM Customer Return"", ""Customer Return"",
			MDocBaseType.DOCBASETYPE_MaterialDelivery, null, 0, 0,
			590000, GL_MM, true, false);

		createDocType(""MM Receipt"", ""Vendor Delivery"",
			MDocBaseType.DOCBASETYPE_MaterialReceipt, null, 0, 0,
			0, GL_MM);
		createDocType(""MM Vendor Return"", ""Vendor Return"",
			MDocBaseType.DOCBASETYPE_MaterialReceipt, null, 0, 0,
			0, GL_MM, true, false);

		createDocType(""Purchase Order"", Msg.getElement(m_ctx, ""C_Order_ID"", false),
			MDocBaseType.DOCBASETYPE_PurchaseOrder, null, 0, 0,
			800000, GL_None);
		createDocType(""Vendor RMA"", ""Vendor RMA"",
			MDocBaseType.DOCBASETYPE_PurchaseOrder, null, 0, 0,
			890000, GL_None, true, false);
		createDocType(""Match PO"", Msg.getElement(m_ctx, ""M_MatchPO_ID"", false),
			MDocBaseType.DOCBASETYPE_MatchPO, null, 0, 0,
			880000, GL_None);
		createDocType(""Purchase Requisition"", Msg.getElement(m_ctx, ""M_Requisition_ID"", false),
			MDocBaseType.DOCBASETYPE_PurchaseRequisition, null, 0, 0,
			900000, GL_None);

		createDocType(""Bank Statement"", Msg.getElement(m_ctx, ""C_BankStatemet_ID"", true),
			MDocBaseType.DOCBASETYPE_BankStatement, null, 0, 0,
			700000, GL_CASH);
		createDocType(""Cash Journal"", Msg.getElement(m_ctx, ""C_Cash_ID"", true),
			MDocBaseType.DOCBASETYPE_CashJournal, null, 0, 0,
			750000, GL_CASH);

		createDocType(""Material Movement"", Msg.getElement(m_ctx, ""M_Movement_ID"", false),
			MDocBaseType.DOCBASETYPE_MaterialMovement, null, 0, 0,
			610000, GL_MM);
		createDocType(""Physical Inventory"", Msg.getElement(m_ctx, ""M_Inventory_ID"", false),
			MDocBaseType.DOCBASETYPE_MaterialPhysicalInventory, null, 0, 0,
			620000, GL_MM);
		createDocType(""Material Production"", Msg.getElement(m_ctx, ""M_Production_ID"", false),
			MDocBaseType.DOCBASETYPE_MaterialProduction, null, 0, 0,
			630000, GL_MM);
		createDocType(""Project Issue"", Msg.getElement(m_ctx, ""C_ProjectIssue_ID"", false),
			MDocBaseType.DOCBASETYPE_ProjectIssue, null, 0, 0,
			640000, GL_MM);

		//  Order Entry
		createDocType(""Binding offer"", ""Quotation"",
			MDocBaseType.DOCBASETYPE_SalesOrder, X_C_DocType.DOCSUBTYPESO_Quotation, 0, 0,
			10000, GL_None);
		createDocType(""Non binding offer"", ""Proposal"",
			MDocBaseType.DOCBASETYPE_SalesOrder, X_C_DocType.DOCSUBTYPESO_Proposal, 0, 0,
			20000, GL_None);
		createDocType(""Prepay Order"", ""Prepay Order"",
			MDocBaseType.DOCBASETYPE_SalesOrder, X_C_DocType.DOCSUBTYPESO_PrepayOrder, DT_S, DT_I,
			30000, GL_None);
		createDocType(""Standard Order"", ""Order Confirmation"",
			MDocBaseType.DOCBASETYPE_SalesOrder, X_C_DocType.DOCSUBTYPESO_StandardOrder, DT_S, DT_I,
			50000, GL_None);
		createDocType(""Customer RMA"", ""Customer RMA"",
			MDocBaseType.DOCBASETYPE_SalesOrder, X_C_DocType.DOCSUBTYPESO_StandardOrder, DT_SR, DT_IC,
			59000, GL_None, true, false);
		createDocType(""Credit Order"", ""Order Confirmation"",
			MDocBaseType.DOCBASETYPE_SalesOrder, X_C_DocType.DOCSUBTYPESO_OnCreditOrder, DT_SI, DT_I,
			60000, GL_None);   //  RE
		createDocType(""Warehouse Order"", ""Order Confirmation"",
			MDocBaseType.DOCBASETYPE_SalesOrder, X_C_DocType.DOCSUBTYPESO_WarehouseOrder, DT_S, DT_I,
			70000, GL_None);    //  LS
		int DT = createDocType(""POS Order"", ""Order Confirmation"",
			MDocBaseType.DOCBASETYPE_SalesOrder, X_C_DocType.DOCSUBTYPESO_POSOrder, DT_SI, DT_II,
			80000, GL_None);    // Bar
		//	POS As Default for window SO
		createPreference(""C_DocTypeTarget_ID"", String.valueOf(DT), 143);

		// Create WMS doc types if WMS is installed and licensed
		SysEnv se = SysEnv.get(""CWMS"", false);
        if (se!=null&& se.checkLicense())
        {
        	createDocType(""Material Putaway"", ""Material Putaway"",
        		MDocBaseType.DOCBASETYPE_MaterialPutaway, null, 0, 0, 0, GL_MM);
        	createDocType(""Material Pick"", ""Material Pick"",
            		MDocBaseType.DOCBASETYPE_MaterialPick, null, 0, 0, 0, GL_MM);
        	createDocType(""Material Replenish"", ""Material Replenish"",
            		MDocBaseType.DOCBASETYPE_MaterialReplenishment, null, 0, 0, 0, GL_MM);
        }

		//  Update ClientInfo
		sqlCmd = new StringBuffer (""UPDATE AD_ClientInfo SET "");
		sqlCmd.append(""C_AcctSchema1_ID="").append(m_as.getC_AcctSchema_ID())
			.append("", C_Calendar_ID="").append(m_calendar.getC_Calendar_ID())
			.append("" WHERE AD_Client_ID="").append(m_client.getAD_Client_ID());
		no = DB.executeUpdate(sqlCmd.toString(), m_trx);
		if (no != 1)
		{
			String err = ""ClientInfo not updated"";
			log.log(Level.WARNING, err);
			m_info.append(err);
			m_trx.rollback();
			m_trx.close();
			return false;
		}

		//	Validate Completeness
		DocumentTypeVerify.createDocumentTypes(m_ctx, getAD_Client_ID(), null, m_trx);
		DocumentTypeVerify.createPeriodControls(m_ctx, getAD_Client_ID(), null, m_trx);
		//
		log.info(""fini"");
		return true;
	}   //  createAccounting
"
org.compiere.model.MSetup.getAcct,MSetup.java,"int getAcct (String key)
	{
		log.fine(key);
		//  Element
		int C_ElementValue_ID = m_nap.getC_ElementValue_ID(key.toUpperCase());
		if (C_ElementValue_ID == 0)
		{
			log.warning(""Account not defined: "" + key);
			m_accountsOK = false;
			return 0;
		}

		MAccount vc = MAccount.getDefault(m_as, true);	//	optional null
		vc.setAD_Org_ID(0);		//	will be overwritten
		vc.setAccount_ID(C_ElementValue_ID);
		if (!vc.save())
		{
			log.warning(""Not Saved - Key="" + key + "", C_ElementValue_ID="" + C_ElementValue_ID);
			m_accountsOK = false;
			return 0;
		}
		int C_ValidCombination_ID = vc.getC_ValidCombination_ID();
		if (C_ValidCombination_ID == 0)
		{
			log.warning(""No account - Key="" + key + "", C_ElementValue_ID="" + C_ElementValue_ID);
			m_accountsOK = false;
		}
		return C_ValidCombination_ID;
	}   //  getAcct
"
org.compiere.model.MSetup.createGLCategory,MSetup.java,"int createGLCategory (String Name, String CategoryType, boolean isDefault)
	{
		MGLCategory cat = new MGLCategory (m_ctx, 0, m_trx);
		cat.setName(Name);
		cat.setCategoryType(CategoryType);
		cat.setIsDefault(isDefault);
		if (!cat.save())
		{
			log.log(Level.WARNING, ""GL Category NOT created - "" + Name);
			return 0;
		}
		//
		return cat.getGL_Category_ID();
	}   //  createGLCategory
"
org.compiere.model.MSetup.createDocType,MSetup.java,"int createDocType (String Name, String PrintName,
		String DocBaseType, String DocSubTypeSO,
		int C_DocTypeShipment_ID, int C_DocTypeInvoice_ID,
		int StartNo, int GL_Category_ID)
	{
		return createDocType(Name, PrintName, DocBaseType, DocSubTypeSO,
				C_DocTypeShipment_ID, C_DocTypeInvoice_ID,
				StartNo, GL_Category_ID, false, true);
	}	//	createDocType
"
org.compiere.model.MSetup.createDocType,MSetup.java,"int createDocType (String Name, String PrintName,
		String DocBaseType, String DocSubTypeSO,
		int C_DocTypeShipment_ID, int C_DocTypeInvoice_ID,
		int StartNo, int GL_Category_ID, boolean isReturnTrx,
		boolean IsCreateCounter)
	{
		MSequence sequence = null;
		if (StartNo != 0)
		{
			sequence = new MSequence(m_ctx, getAD_Client_ID(), Name, StartNo, m_trx);
			if (!sequence.save())
			{
				log.log(Level.WARNING, ""Sequence NOT created - "" + Name);
				return 0;
			}
		}

		MDocType dt = new MDocType (m_ctx, DocBaseType, Name, m_trx);
		if (PrintName != null && PrintName.length() > 0)
			dt.setPrintName(PrintName);	//	Defaults to Name
		if (DocSubTypeSO != null)
			dt.setDocSubTypeSO(DocSubTypeSO);
		if (C_DocTypeShipment_ID != 0)
			dt.setC_DocTypeShipment_ID(C_DocTypeShipment_ID);
		if (C_DocTypeInvoice_ID != 0)
			dt.setC_DocTypeInvoice_ID(C_DocTypeInvoice_ID);
		if (GL_Category_ID != 0)
			dt.setGL_Category_ID(GL_Category_ID);
		if (sequence == null)
			dt.setIsDocNoControlled(false);
		else
		{
			dt.setIsDocNoControlled(true);
			dt.setDocNoSequence_ID(sequence.getAD_Sequence_ID());
		}
		dt.setIsSOTrx();
		dt.setIsReturnTrx(isReturnTrx);
		dt.setIsCreateCounter(IsCreateCounter);
		if (!dt.save())
		{
			log.log(Level.WARNING, ""DocType NOT created - "" + Name);
			return 0;
		}
		//
		return dt.getC_DocType_ID();
	}   //  createDocType
"
org.compiere.model.MSetup.createEntities,MSetup.java,"boolean createEntities (String City, int C_Region_ID)
	{
		if (m_as == null)
		{
			log.warning (""No AcctountingSChema"");
			m_trx.rollback();
			m_trx.close();
			return false;
		}
		log.info(""C_Country_ID="" + m_C_Country_ID
			+ "", City="" + City + "", C_Region_ID="" + C_Region_ID);
		m_info = new StringBuffer(""\n----\n"");
		//
		String defaultName = Msg.translate(m_lang, ""Standard"");
		String defaultEntry = ""'"" + defaultName + ""',"";
		StringBuffer sqlCmd = null;
		int no = 0;

		//	Create Marketing Channel/Campaign
		int C_Channel_ID = getNextID(getAD_Client_ID(), ""C_Channel"");
		sqlCmd = new StringBuffer(""INSERT INTO C_Channel "");
		sqlCmd.append(""(C_Channel_ID,Name,"");
		sqlCmd.append(m_stdColumns).append("") VALUES ("");
		sqlCmd.append(C_Channel_ID).append("","").append(defaultEntry);
		sqlCmd.append(m_stdValues).append("")"");
		no = DB.executeUpdate(sqlCmd.toString(), m_trx);
		if (no != 1)
			log.log(Level.WARNING, ""Channel NOT inserted"");
		int C_Campaign_ID = getNextID(getAD_Client_ID(), ""C_Campaign"");
		sqlCmd = new StringBuffer(""INSERT INTO C_Campaign "");
		sqlCmd.append(""(C_Campaign_ID,C_Channel_ID,"").append(m_stdColumns).append("","");
		sqlCmd.append("" Value,Name,Costs) VALUES ("");
		sqlCmd.append(C_Campaign_ID).append("","").append(C_Channel_ID).append("","").append(m_stdValues).append("","");
		sqlCmd.append(defaultEntry).append(defaultEntry).append(""0)"");
		no = DB.executeUpdate(sqlCmd.toString(), m_trx);
		if (no == 1)
			m_info.append(Msg.translate(m_lang, ""C_Campaign_ID"")).append(""="").append(defaultName).append(""\n"");
		else
			log.log(Level.WARNING, ""Campaign NOT inserted"");
		if (m_hasMCampaign)
		{
			//  Default
			sqlCmd = new StringBuffer (""UPDATE C_AcctSchema_Element SET "");
			sqlCmd.append(""C_Campaign_ID="").append(C_Campaign_ID);
			sqlCmd.append("" WHERE C_AcctSchema_ID="").append(m_as.getC_AcctSchema_ID());
			sqlCmd.append("" AND ElementType='MC'"");
			no = DB.executeUpdate(sqlCmd.toString(), m_trx);
			if (no != 1)
				log.log(Level.WARNING, ""AcctSchema ELement Campaign NOT updated"");
		}

		//	Create Sales Region
		int C_SalesRegion_ID = getNextID(getAD_Client_ID(), ""C_SalesRegion"");
		sqlCmd = new StringBuffer (""INSERT INTO C_SalesRegion "");
		sqlCmd.append(""(C_SalesRegion_ID,"").append(m_stdColumns).append("","");
		sqlCmd.append("" Value,Name,IsSummary) VALUES ("");
		sqlCmd.append(C_SalesRegion_ID).append("","").append(m_stdValues).append("", "");
		sqlCmd.append(defaultEntry).append(defaultEntry).append(""'N')"");
		no = DB.executeUpdate(sqlCmd.toString(), m_trx);
		if (no == 1)
			m_info.append(Msg.translate(m_lang, ""C_SalesRegion_ID"")).append(""="").append(defaultName).append(""\n"");
		else
			log.log(Level.WARNING, ""SalesRegion NOT inserted"");
		if (m_hasSRegion)
		{
			//  Default
			sqlCmd = new StringBuffer (""UPDATE C_AcctSchema_Element SET "");
			sqlCmd.append(""C_SalesRegion_ID="").append(C_SalesRegion_ID);
			sqlCmd.append("" WHERE C_AcctSchema_ID="").append(m_as.getC_AcctSchema_ID());
			sqlCmd.append("" AND ElementType='SR'"");
			no = DB.executeUpdate(sqlCmd.toString(), m_trx);
			if (no != 1)
				log.log(Level.WARNING, ""AcctSchema ELement SalesRegion NOT updated"");
		}

		/**
		 *  Business Partner
		 */
		//  Create BP Group
		MBPGroup bpg = new MBPGroup (m_ctx, 0, m_trx);
		bpg.setValue(defaultName);
		bpg.setName(defaultName);
		bpg.setIsDefault(true);
		if (bpg.save())
			m_info.append(Msg.translate(m_lang, ""C_BP_Group_ID"")).append(""="").append(defaultName).append(""\n"");
		else
			log.log(Level.WARNING, ""BP Group NOT inserted"");

		//	Create BPartner
		MBPartner bp = new MBPartner (m_ctx, 0, m_trx);
		bp.setValue(defaultName);
		bp.setName(defaultName);
		bp.setBPGroup(bpg);
		if (bp.save())
			m_info.append(Msg.translate(m_lang, ""C_BPartner_ID"")).append(""="").append(defaultName).append(""\n"");
		else
			log.log(Level.WARNING, ""BPartner NOT inserted"");
		//  Location for Standard BP
		MLocation bpLoc = new MLocation(m_ctx, m_C_Country_ID, C_Region_ID, City, m_trx);
		bpLoc.save();
		MBPartnerLocation bpl = new MBPartnerLocation(bp);
		bpl.setC_Location_ID(bpLoc.getC_Location_ID());
		if (!bpl.save())
			log.log(Level.WARNING, ""BP_Location (Standard) NOT inserted"");
		//  Default
		sqlCmd = new StringBuffer (""UPDATE C_AcctSchema_Element SET "");
		sqlCmd.append(""C_BPartner_ID="").append(bp.getC_BPartner_ID());
		sqlCmd.append("" WHERE C_AcctSchema_ID="").append(m_as.getC_AcctSchema_ID());
		sqlCmd.append("" AND ElementType='BP'"");
		no = DB.executeUpdate(sqlCmd.toString(), m_trx);
		if (no != 1)
			log.log(Level.WARNING, ""AcctSchema Element BPartner NOT updated"");
		createPreference(""C_BPartner_ID"", String.valueOf(bp.getC_BPartner_ID()), 143);

		/**
		 *  Product
		 */
		//  Create Product Category
		MProductCategory pc = new MProductCategory(m_ctx, 0, m_trx);
		pc.setValue(defaultName);
		pc.setName(defaultName);
		pc.setIsDefault(true);
		if (pc.save())
			m_info.append(Msg.translate(m_lang, ""M_Product_Category_ID"")).append(""="").append(defaultName).append(""\n"");
		else
			log.log(Level.WARNING, ""Product Category NOT inserted"");

		//  UOM (EA)
		int C_UOM_ID = 100;

		//  TaxCategory
		int C_TaxCategory_ID = getNextID(getAD_Client_ID(), ""C_TaxCategory"");
		sqlCmd = new StringBuffer (""INSERT INTO C_TaxCategory "");
		sqlCmd.append(""(C_TaxCategory_ID,"").append(m_stdColumns).append("","");
		sqlCmd.append("" Name,IsDefault) VALUES ("");
		sqlCmd.append(C_TaxCategory_ID).append("","").append(m_stdValues).append("", "");
		if (m_C_Country_ID == 100)    // US
			sqlCmd.append(""'Sales Tax','Y')"");
		else
			sqlCmd.append(defaultEntry).append(""'Y')"");
		no = DB.executeUpdate(sqlCmd.toString(), m_trx);
		if (no != 1)
			log.log(Level.WARNING, ""TaxCategory NOT inserted"");

		//  Tax - Zero Rate
		MTax tax = new MTax (m_ctx, ""Standard"", Env.ZERO, C_TaxCategory_ID, m_trx);
		tax.setIsDefault(true);
		if (tax.save())
			m_info.append(Msg.translate(m_lang, ""C_Tax_ID""))
				.append(""="").append(tax.getName()).append(""\n"");
		else
			log.log(Level.WARNING, ""Tax NOT inserted"");

		//	Create Product
		MProduct product = new MProduct (m_ctx, 0, m_trx);
		product.setValue(defaultName);
		product.setName(defaultName);
		product.setC_UOM_ID(C_UOM_ID);
		product.setM_Product_Category_ID(pc.getM_Product_Category_ID());
		product.setC_TaxCategory_ID(C_TaxCategory_ID);
		if (product.save())
			m_info.append(Msg.translate(m_lang, ""M_Product_ID"")).append(""="").append(defaultName).append(""\n"");
		else
			log.log(Level.WARNING, ""Product NOT inserted"");
		//  Default
		sqlCmd = new StringBuffer (""UPDATE C_AcctSchema_Element SET "");
		sqlCmd.append(""M_Product_ID="").append(product.getM_Product_ID());
		sqlCmd.append("" WHERE C_AcctSchema_ID="").append(m_as.getC_AcctSchema_ID());
		sqlCmd.append("" AND ElementType='PR'"");
		no = DB.executeUpdate(sqlCmd.toString(), m_trx);
		if (no != 1)
			log.log(Level.WARNING, ""AcctSchema Element Product NOT updated"");

		/**
		 *  Location, Warehouse, Locator
		 */
		//  Location (Company)
		MLocation loc = new MLocation(m_ctx, m_C_Country_ID, C_Region_ID, City, m_trx);
		loc.save();
		sqlCmd = new StringBuffer (""UPDATE AD_OrgInfo SET C_Location_ID="");
		sqlCmd.append(loc.getC_Location_ID()).append("" WHERE AD_Org_ID="").append(getAD_Org_ID());
		no = DB.executeUpdate(sqlCmd.toString(), m_trx);
		if (no != 1)
			log.log(Level.WARNING, ""Location NOT inserted"");
		createPreference(""C_Country_ID"", String.valueOf(m_C_Country_ID), 0);

		//  Default Warehouse
		MWarehouse wh = new MWarehouse(m_ctx, 0, m_trx);
		wh.setValue(defaultName);
		wh.setName(defaultName);
		wh.setC_Location_ID(loc.getC_Location_ID());
		if (!wh.save())
			log.log(Level.WARNING, ""Warehouse NOT inserted"");

		//   Locator
		MLocator locator = new MLocator(wh, defaultName);
		locator.setIsDefault(true);
		if (!locator.save())
			log.log(Level.WARNING, ""Locator NOT inserted"");

		//  Update ClientInfo
		sqlCmd = new StringBuffer (""UPDATE AD_ClientInfo SET "");
		sqlCmd.append(""C_BPartnerCashTrx_ID="").append(bp.getC_BPartner_ID());
		sqlCmd.append("",M_ProductFreight_ID="").append(product.getM_Product_ID());
//		sqlCmd.append(""C_UOM_Volume_ID="");
//		sqlCmd.append("",C_UOM_Weight_ID="");
//		sqlCmd.append("",C_UOM_Length_ID="");
//		sqlCmd.append("",C_UOM_Time_ID="");
		sqlCmd.append("" WHERE AD_Client_ID="").append(getAD_Client_ID());
		no = DB.executeUpdate(sqlCmd.toString(), m_trx);
		if (no != 1)
		{
			String err = ""ClientInfo not updated"";
			log.log(Level.WARNING, err);
			m_info.append(err);
			return false;
		}

		/**
		 *  Other
		 */
		//  PriceList
		MPriceList pl = new MPriceList(m_ctx, 0, m_trx);
		pl.setName(defaultName);
		pl.setC_Currency_ID(m_C_Currency_ID);
		pl.setIsDefault(true);
		if (!pl.save())
			log.log(Level.WARNING, ""PriceList NOT inserted"");
		//  Price List
		MDiscountSchema ds = new MDiscountSchema(m_ctx, 0, m_trx);
		ds.setName(defaultName);
		ds.setDiscountType(X_M_DiscountSchema.DISCOUNTTYPE_Pricelist);
		if (!ds.save())
			log.log(Level.WARNING, ""DiscountSchema NOT inserted"");
		//  PriceList Version
		MPriceListVersion plv = new MPriceListVersion(pl);
		plv.setName();
		plv.setM_DiscountSchema_ID(ds.getM_DiscountSchema_ID());
		if (!plv.save())
			log.log(Level.WARNING, ""PriceList_Version NOT inserted"");
		//  ProductPrice
		MProductPrice pp = new MProductPrice(plv, product.getM_Product_ID(),
			Env.ONE, Env.ONE, Env.ONE);
		if (!pp.save())
			log.log(Level.WARNING, ""ProductPrice NOT inserted"");


		//	Create Sales Rep for Client-User
		MBPartner bpCU = new MBPartner (m_ctx, 0, m_trx);
		bpCU.setValue(AD_User_U_Name);
		bpCU.setName(AD_User_U_Name);
		bpCU.setBPGroup(bpg);
		bpCU.setIsEmployee(true);
		bpCU.setIsSalesRep(true);
		if (bpCU.save())
			m_info.append(Msg.translate(m_lang, ""SalesRep_ID"")).append(""="").append(AD_User_U_Name).append(""\n"");
		else
			log.log(Level.WARNING, ""SalesRep (User) NOT inserted"");
		//  Location for Client-User
		MLocation bpLocCU = new MLocation(m_ctx, m_C_Country_ID, C_Region_ID, City, m_trx);
		bpLocCU.save();
		MBPartnerLocation bplCU = new MBPartnerLocation(bpCU);
		bplCU.setC_Location_ID(bpLocCU.getC_Location_ID());
		if (!bplCU.save())
			log.log(Level.WARNING, ""BP_Location (User) NOT inserted"");
		//  Update User
		sqlCmd = new StringBuffer (""UPDATE AD_User SET C_BPartner_ID="");
		sqlCmd.append(bpCU.getC_BPartner_ID()).append("" WHERE AD_User_ID="").append(AD_User_U_ID);
		no = DB.executeUpdate(sqlCmd.toString(), m_trx);
		if (no != 1)
			log.log(Level.WARNING, ""User of SalesRep (User) NOT updated"");


		//	Create Sales Rep for Client-Admin
		MBPartner bpCA = new MBPartner (m_ctx, 0, m_trx);
		bpCA.setValue(AD_User_Name);
		bpCA.setName(AD_User_Name);
		bpCA.setBPGroup(bpg);
		bpCA.setIsEmployee(true);
		bpCA.setIsSalesRep(true);
		if (bpCA.save())
			m_info.append(Msg.translate(m_lang, ""SalesRep_ID"")).append(""="").append(AD_User_Name).append(""\n"");
		else
			log.log(Level.WARNING, ""SalesRep (Admin) NOT inserted"");
		//  Location for Client-Admin
		MLocation bpLocCA = new MLocation(m_ctx, m_C_Country_ID, C_Region_ID, City, m_trx);
		bpLocCA.save();
		MBPartnerLocation bplCA = new MBPartnerLocation(bpCA);
		bplCA.setC_Location_ID(bpLocCA.getC_Location_ID());
		if (!bplCA.save())
			log.log(Level.WARNING, ""BP_Location (Admin) NOT inserted"");
		//  Update User
		sqlCmd = new StringBuffer (""UPDATE AD_User SET C_BPartner_ID="");
		sqlCmd.append(bpCA.getC_BPartner_ID()).append("" WHERE AD_User_ID="").append(AD_User_ID);
		no = DB.executeUpdate(sqlCmd.toString(), m_trx);
		if (no != 1)
			log.log(Level.WARNING, ""User of SalesRep (Admin) NOT updated"");


		//  Payment Term
		int C_PaymentTerm_ID = getNextID(getAD_Client_ID(), ""C_PaymentTerm"");
		sqlCmd = new StringBuffer (""INSERT INTO C_PaymentTerm "");
		sqlCmd.append(""(C_PaymentTerm_ID,"").append(m_stdColumns).append("","");
		sqlCmd.append(""Value,Name,NetDays,GraceDays,DiscountDays,Discount,DiscountDays2,Discount2,IsDefault) VALUES ("");
		sqlCmd.append(C_PaymentTerm_ID).append("","").append(m_stdValues).append("","");
		sqlCmd.append(""'Immediate','Immediate',0,0,0,0,0,0,'Y')"");
		no = DB.executeUpdate(sqlCmd.toString(), m_trx);
		if (no != 1)
			log.log(Level.WARNING, ""PaymentTerm NOT inserted"");

		//  Project Cycle
		C_Cycle_ID = getNextID(getAD_Client_ID(), ""C_Cycle"");
		sqlCmd = new StringBuffer (""INSERT INTO C_Cycle "");
		sqlCmd.append(""(C_Cycle_ID,"").append(m_stdColumns).append("","");
		sqlCmd.append("" Name,C_Currency_ID) VALUES ("");
		sqlCmd.append(C_Cycle_ID).append("","").append(m_stdValues).append("", "");
		sqlCmd.append(defaultEntry).append(m_C_Currency_ID).append("")"");
		no = DB.executeUpdate(sqlCmd.toString(), m_trx);
		if (no != 1)
			log.log(Level.WARNING, ""Cycle NOT inserted"");

		/**
		 *  Organization level data	===========================================
		 */

		//	Create Default Project
		int C_Project_ID = getNextID(getAD_Client_ID(), ""C_Project"");
		sqlCmd = new StringBuffer (""INSERT INTO C_Project "");
		sqlCmd.append(""(C_Project_ID,"").append(m_stdColumns).append("","");
		sqlCmd.append("" Value,Name,C_Currency_ID,IsSummary) VALUES ("");
		sqlCmd.append(C_Project_ID).append("","").append(m_stdValuesOrg).append("", "");
		sqlCmd.append(defaultEntry).append(defaultEntry).append(m_C_Currency_ID).append("",'N')"");
		no = DB.executeUpdate(sqlCmd.toString(), m_trx);
		if (no == 1)
			m_info.append(Msg.translate(m_lang, ""C_Project_ID"")).append(""="").append(defaultName).append(""\n"");
		else
			log.log(Level.WARNING, ""Project NOT inserted"");
		//  Default Project
		if (m_hasProject)
		{
			sqlCmd = new StringBuffer (""UPDATE C_AcctSchema_Element SET "");
			sqlCmd.append(""C_Project_ID="").append(C_Project_ID);
			sqlCmd.append("" WHERE C_AcctSchema_ID="").append(m_as.getC_AcctSchema_ID());
			sqlCmd.append("" AND ElementType='PJ'"");
			no = DB.executeUpdate(sqlCmd.toString(), m_trx);
			if (no != 1)
				log.log(Level.WARNING, ""AcctSchema ELement Project NOT updated"");
		}

		//  CashBook
		MCashBook cb = new MCashBook(m_ctx, 0, m_trx);
		cb.setName(defaultName);
		cb.setC_Currency_ID(m_C_Currency_ID);
		if (cb.save())
			m_info.append(Msg.translate(m_lang, ""C_CashBook_ID"")).append(""="").append(defaultName).append(""\n"");
		else
			log.log(Level.WARNING, ""CashBook NOT inserted"");
		//
		m_trx.commit();
		m_trx.close();
		log.info(""fini"");
		return true;
	}   //  createEntities
"
org.compiere.model.MSetup.createPreference,MSetup.java,"void createPreference (String Attribute, String Value, int AD_Window_ID)
	{
		int AD_Preference_ID = getNextID(getAD_Client_ID(), ""AD_Preference"");
		StringBuffer sqlCmd = new StringBuffer (""INSERT INTO AD_Preference "");
		sqlCmd.append(""(AD_Preference_ID,"").append(m_stdColumns).append("","");
		sqlCmd.append(""Attribute,Value,AD_Window_ID) VALUES ("");
		sqlCmd.append(AD_Preference_ID).append("","").append(m_stdValues).append("","");
		sqlCmd.append(""'"").append(Attribute).append(""','"").append(Value).append(""',"");
		if (AD_Window_ID == 0)
			sqlCmd.append(DB.NULL(""I"", Types.INTEGER) + "" )"");  //jz nullif
		else
			sqlCmd.append(AD_Window_ID).append("")"");
		int no = DB.executeUpdate(sqlCmd.toString(), m_trx);
		if (no != 1)
			log.log(Level.WARNING, ""Preference NOT inserted - "" + Attribute);
	}   //  createPreference
"
org.compiere.model.MSetup.getNextID,MSetup.java,"int getNextID (int AD_Client_ID, String TableName)
	{
		//	TODO: Exception
		return DB.getNextID (AD_Client_ID, TableName, m_trx);
	}	//	getNextID
"
org.compiere.model.MSetup.getAD_Client_ID,MSetup.java,"int getAD_Client_ID()
	{
		return m_client.getAD_Client_ID();
	}
"
org.compiere.model.MSetup.getAD_Org_ID,MSetup.java,"int getAD_Org_ID()
	{
		return m_org.getAD_Org_ID();
	}
"
org.compiere.model.MSetup.getAD_User_ID,MSetup.java,"int getAD_User_ID()
	{
		return AD_User_ID;
	}
"
org.compiere.model.MSetup.getInfo,MSetup.java,"String getInfo()
	{
		return m_info.toString();
	}
"
org.compiere.model.MSetup.getUserName,MSetup.java,"String getUserName()
	{
		return AD_User_Name;
	}	//	getUserName
"
org.compiere.model.MSetup.main,MSetup.java,"void main(String[] args)
    {
	    Compiere.startup(true);
	    try
	    {
	    	String clientName = null;
	    	if (args.length > 0)
	    		clientName = args[0];
	    	String info = createNewClient(null, clientName);
	    	System.out.print(info);
	    }
	    catch (Exception e)
	    {
	    	e.printStackTrace();
		}
    }
"
org.compiere.model.PP_Optimal.getVersion,PP_Optimal.java,"String getVersion()
	{
		return ""Optimal "" + _CLIENT_VERSION;
	}   //  getVersion
"
org.compiere.model.PP_Optimal.processCC,PP_Optimal.java,"boolean processCC ()
		throws IllegalArgumentException
	{
		log.fine(p_mpp.getHostAddress() + "":"" + p_mpp.getHostPort() + "", Timeout="" + getTimeout()
			+ ""; Proxy="" + p_mpp.getProxyAddress() + "":"" + p_mpp.getProxyPort() + "" "" + p_mpp.getProxyLogon() + "" "" + p_mpp.getProxyPassword());
		setEncoded(true);

		String urlString = p_mpp.getHostAddress();
			//	""https://realtime.firepay.com/servlet/DPServlet"";
			//	""https://realtime.test.firepay.com/servlet/DPServlet"";
		if (p_mpp.getHostPort() != 0)
			urlString += "":"" + p_mpp.getHostPort();
		
		/** General Parameters			*/
		StringBuffer param = new StringBuffer(200);
		//	 Merchant username and password.
		param.append(createPair(MERCHANT_ID, p_mpp.getUserID(), 80))
			.append(AMP).append(createPair(MERCHANT_PWD, p_mpp.getPassword(), 20))
			.append(AMP).append(createPair(ACCOUNT_ID, p_mpp.getPartnerID(), 10));
	//	param.append(AMP).append(createPair(MERCHANT_DATA, ""comment"", 255));

		/**	Cipher supported : 	SSL_RSA_WITH_RC4_128_MD5, SSL_RSA_WITH_RC4_128_SHA,	SSL_RSA_WITH_DES_CBC_SHA, SSL_RSA_WITH_3DES_EDE_CBC_SHA, SSL_RSA_EXPORT_WITH_RC4_40_MD5
		param.append(""&Cipher=SSL_RSA_WITH_RC4_128_MD5"");
		//	HTTP Version
		param.append(""&HTTPVersion=1.0"");
		//	Path to the keystore (cacerts) file.
		**/

		param.append(AMP).append(createPair(CARD_TYPE, ""VI"", 6));
		param.append(AMP).append(createPair(CARD_NUMBER, p_mp.getCreditCardNumber(), 19));
		param.append(AMP).append(createPair(CARD_EXPIRATION, p_mp.getCreditCardExp(""/""), 5));
		param.append(AMP).append(createPair(AMOUNT, p_mp.getPayAmtInCents(), 10));
		param.append(AMP).append(createPair(OPERATION, OPERATION_Purchase, 1));
		param.append(AMP).append(createPair(MERCHANT_TXN, p_mp.getC_Payment_ID(), 255));
		param.append(AMP).append(createPair(CLIENT_VERSION, _CLIENT_VERSION, 4));
		param.append(AMP).append(createPair(CUST_NAME1, p_mp.getA_Name(), 255));
		param.append(AMP).append(createPair(STREET, p_mp.getA_Street(), 255));
		param.append(AMP).append(createPair(CITY, p_mp.getA_City(), 255));
		param.append(AMP).append(createPair(PROVINCE, p_mp.getA_State(), 2));
		param.append(AMP).append(createPair(ZIP, p_mp.getA_Zip(), 10));
		param.append(AMP).append(createPair(COUNTRY, p_mp.getA_Country(), 2));
	//	param.append(AMP).append(createPair(""&phone"", p_mp.getA_Phone(), 40));
		param.append(AMP).append(createPair(""&email"", p_mp.getA_EMail(), 40));
		param.append(AMP).append(createPair(CVD_INDICATOR, CVD_INDICATOR_Provided, 1));
		param.append(AMP).append(createPair(CVD_VALUE, ""123"", 4));
		
		try
		{
			log.fine(""-> "" + param.toString());
			Properties prop = getConnectPostProperties(urlString, param.toString());
			m_ok = prop != null;
			//	authCode=, authTime=1132330817, subErrorString=Card has expired: 04/04, errCode=91, clientVersion=1.1, status=E, subError=0, actionCode=CP, errString=Invalid Payment Information. Please verify request parameters.
			//	authCode=197705, authTime=1132336527, curAmount=0, avsInfo=B, clientVersion=1.1, status=SP, amount=200, cvdInfo=M, txnNumber=1000000
			if (m_ok)
			{
				String status = prop.getProperty(STATUS);
				m_ok = status != null && status.equals(""SP"");	//	Successful Purchase
				String authCode = prop.getProperty(AUTH_CODE);
				//
				String errString = prop.getProperty(ERROR_STRING);
				//
				log.fine(""<- Status="" + status + "", AuthCode="" + authCode + "", Error="" + errString);
			}
			if (!m_ok)
				log.warning(""<- "" + prop);
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, param.toString(), e);
			m_ok = false;
		}
		return m_ok;
	}	//	processCC
"
org.compiere.model.PP_Optimal.isProcessedOK,PP_Optimal.java,"boolean isProcessedOK ()
	{
		return m_ok;
	}	//	isProcessedOK
"
org.compiere.model.PP_Optimal.main,PP_Optimal.java,"void main (String[] args)
	{
/**
> Test Administration Server and Login
> -----------------------------------
> The information you require to access the TEST administration server 
> is (case sensitivity matters):
> 
> Web Site: https://admin.test.firepay.com
> 
> Test Account #2
> Username: sparctwo001
> User password: abcd1234
> 
> Test Payment Server URL
> -----------------------
> To connect your web site to our TEST payment service, your technical 
> people will use the following URL:
> 
> https://realtime.test.firepay.com/servlet/DPServlet
> 
> Test Cards
> ----------
> Below are the cards you can use in the test environment. Transactions 
> done with these cards will either be successful or fail depending on 
> the amount provided with the transaction (see below).
> 
> Visa:
> 4387751111011
> 4387751111029
> 4387751111111038
> 4387751111111053
> 
> MasterCard:
> 5442981111111015
> 5442981111111023
> 5442981111111031
> 5442981111111056
> 
> The following amounts will cause either approval or various declines 
> with the cards mentioned above:
> Amount less than 20.00 = Approval
> 20.00 to 29.99 = (221, 1002) Reenter
> 30.00 to 39.99 = (221, 1003) Referral
> 40.00 to 49.99 = (221, 1004) PickUp
> 50.00 to 59.99 = (34, 1005) Decline
> 60.00 to 69.99 = (2) Timeout
> Amount greater than 69.99 = Approval
**/
		CLogMgt.initialize(true);
		CLogMgt.setLevel(Level.ALL);
		PP_Optimal pp = new PP_Optimal();
		pp.processCC();
		pp.isProcessedOK();
		
	}	//	main
"
org.compiere.model.MValRule.get,MValRule.java,"MValRule get(Ctx ctx, int AD_Val_Rule_ID)
    {
	    Integer key = Integer.valueOf(AD_Val_Rule_ID);
	    MValRule retValue = s_cache.get(ctx, key);
	    if (retValue != null)
		    return retValue;
	    retValue = new MValRule(ctx, AD_Val_Rule_ID, null);
	    if (retValue.get_ID() != 0)
		    s_cache.put(key, retValue);
	    return retValue;
    }	//	get
"
org.compiere.model.MValRule.toString,MValRule.java,"String toString()
	{
		StringBuffer sb = new StringBuffer(""MValRule["")
			.append(get_ID()).append(""-"").append(getName()).append(""]"");
		return sb.toString();
	}	//	toString
"
org.compiere.model.MCostDetail.createOrder,MCostDetail.java,"boolean createOrder (MAcctSchema as, int AD_Org_ID, 
		int M_Product_ID, int M_AttributeSetInstance_ID,
		int C_OrderLine_ID, int M_CostElement_ID, 
		BigDecimal Amt, BigDecimal Qty,
		String Description, Trx trx)
	{
		//	Delete Unprocessed zero Differences
		String sql = ""DELETE FROM M_CostDetail ""
			+ ""WHERE Processed='N' AND COALESCE(DeltaAmt,0)=0 AND COALESCE(DeltaQty,0)=0""
			+ "" AND C_OrderLine_ID="" + C_OrderLine_ID
			+ "" AND M_AttributeSetInstance_ID="" + M_AttributeSetInstance_ID
			+ "" AND C_AcctSchema_ID = "" + as.getC_AcctSchema_ID();
		int no = DB.executeUpdate(sql, trx);
		if (no != 0)
			s_log.config(""Deleted #"" + no);
		MCostDetail cd = get (as.getCtx(), ""C_OrderLine_ID=? AND M_AttributeSetInstance_ID=?"", 
			C_OrderLine_ID, M_AttributeSetInstance_ID, trx);
		//
		if (cd == null)		//	createNew
		{
			cd = new MCostDetail (as, AD_Org_ID, 
				M_Product_ID, M_AttributeSetInstance_ID, 
				M_CostElement_ID, 
				Amt, Qty, Description, trx);
			cd.setC_OrderLine_ID (C_OrderLine_ID);
		}
		else
		{
			cd.setDeltaAmt(cd.getAmt().subtract(Amt));
			cd.setDeltaQty(cd.getQty().subtract(Qty));
			if (cd.isDelta())
				cd.setProcessed(false);
			else
				return true;	//	nothing to do
		}
		boolean ok = cd.save();
		if (ok && !cd.isProcessed())
		{
			MClient client = MClient.get(as.getCtx(), as.getAD_Client_ID());
			if (client.isCostImmediate())
				cd.process();
		}
		s_log.config(""("" + ok + "") "" + cd);
		return ok;
	}	//	createOrder
"
org.compiere.model.MCostDetail.createInvoice,MCostDetail.java,"boolean createInvoice (MAcctSchema as, int AD_Org_ID, 
		int M_Product_ID, int M_AttributeSetInstance_ID,
		int C_InvoiceLine_ID, int M_CostElement_ID, 
		BigDecimal Amt, BigDecimal Qty,
		String Description, Trx trx)
	{
		//	Delete Unprocessed zero Differences
		String sql = ""DELETE FROM M_CostDetail ""
			+ ""WHERE Processed='N' AND COALESCE(DeltaAmt,0)=0 AND COALESCE(DeltaQty,0)=0""
			+ "" AND C_InvoiceLine_ID="" + C_InvoiceLine_ID
			+ "" AND M_AttributeSetInstance_ID="" + M_AttributeSetInstance_ID
			+ "" AND C_AcctSchema_ID = "" + as.getC_AcctSchema_ID();
		int no = DB.executeUpdate(sql, trx);
		if (no != 0)
			s_log.config(""Deleted #"" + no);
		MCostDetail cd = get (as.getCtx(), ""C_InvoiceLine_ID=? AND M_AttributeSetInstance_ID=?"", 
			C_InvoiceLine_ID, M_AttributeSetInstance_ID, trx);
		//
		if (cd == null)		//	createNew
		{
			cd = new MCostDetail (as, AD_Org_ID, 
				M_Product_ID, M_AttributeSetInstance_ID, 
				M_CostElement_ID, 
				Amt, Qty, Description, trx);
			cd.setC_InvoiceLine_ID (C_InvoiceLine_ID);
		}
		else
		{
			cd.setDeltaAmt(cd.getAmt().subtract(Amt));
			cd.setDeltaQty(cd.getQty().subtract(Qty));
			if (cd.isDelta())
				cd.setProcessed(false);
			else
				return true;	//	nothing to do
		}
		boolean ok = cd.save();
		if (ok && !cd.isProcessed())
		{
			MClient client = MClient.get(as.getCtx(), as.getAD_Client_ID());
			if (client.isCostImmediate())
				cd.process();
		}
		s_log.config(""("" + ok + "") "" + cd);
		return ok;
	}	//	createInvoice
"
org.compiere.model.MCostDetail.createShipment,MCostDetail.java,"boolean createShipment (MAcctSchema as, int AD_Org_ID, 
		int M_Product_ID, int M_AttributeSetInstance_ID,
		int M_InOutLine_ID, int M_CostElement_ID, 
		BigDecimal Amt, BigDecimal Qty,
		String Description, boolean IsSOTrx, Trx trx)
	{
		//	Delete Unprocessed zero Differences
		String sql = ""DELETE FROM M_CostDetail ""
			+ ""WHERE Processed='N' AND COALESCE(DeltaAmt,0)=0 AND COALESCE(DeltaQty,0)=0""
			+ "" AND M_InOutLine_ID="" + M_InOutLine_ID
			+ "" AND M_AttributeSetInstance_ID="" + M_AttributeSetInstance_ID
			+ "" AND C_AcctSchema_ID = "" + as.getC_AcctSchema_ID();
		int no = DB.executeUpdate(sql, trx);
		if (no != 0)
			s_log.config(""Deleted #"" + no);
		MCostDetail cd = get (as.getCtx(), ""M_InOutLine_ID=? AND M_AttributeSetInstance_ID=?"", 
			M_InOutLine_ID, M_AttributeSetInstance_ID, trx);
		//
		if (cd == null)		//	createNew
		{
			cd = new MCostDetail (as, AD_Org_ID, 
				M_Product_ID, M_AttributeSetInstance_ID, 
				M_CostElement_ID, 
				Amt, Qty, Description, trx);
			cd.setM_InOutLine_ID(M_InOutLine_ID);
			cd.setIsSOTrx(IsSOTrx);
		}
		else
		{
			cd.setDeltaAmt(cd.getAmt().subtract(Amt));
			cd.setDeltaQty(cd.getQty().subtract(Qty));
			if (cd.isDelta())
				cd.setProcessed(false);
			else
				return true;	//	nothing to do
		}
		boolean ok = cd.save();
		if (ok && !cd.isProcessed())
		{
			MClient client = MClient.get(as.getCtx(), as.getAD_Client_ID());
			if (client.isCostImmediate())
				cd.process();
		}
		s_log.config(""("" + ok + "") "" + cd);
		return ok;
	}	//	createShipment
"
org.compiere.model.MCostDetail.createWorkOrderTransaction,MCostDetail.java,"boolean createWorkOrderTransaction (MAcctSchema as, int AD_Org_ID, 
		int M_Product_ID, int M_AttributeSetInstance_ID,
		int M_WorkOrderTransactionLine_ID, int M_CostElement_ID, 
		BigDecimal Amt, BigDecimal Qty,
		String Description, boolean IsSOTrx, Trx trx)
	{
		//	Delete Unprocessed zero Differences
		String sql = ""DELETE FROM M_CostDetail ""
			+ ""WHERE Processed='N' AND COALESCE(DeltaAmt,0)=0 AND COALESCE(DeltaQty,0)=0""
			+ "" AND M_WorkOrderTransactionLine_ID="" + M_WorkOrderTransactionLine_ID
			+ "" AND M_AttributeSetInstance_ID="" + M_AttributeSetInstance_ID
			+ "" AND C_AcctSchema_ID = "" + as.getC_AcctSchema_ID();
		int no = DB.executeUpdate(sql, trx);
		if (no != 0)
			s_log.config(""Deleted #"" + no);
		MCostDetail cd = get (as.getCtx(), ""M_WorkOrderTransactionLine_ID=? AND M_AttributeSetInstance_ID=?"", 
				M_WorkOrderTransactionLine_ID, M_AttributeSetInstance_ID, trx);
		//
		if (cd == null)		//	createNew
		{
			cd = new MCostDetail (as, AD_Org_ID, 
				M_Product_ID, M_AttributeSetInstance_ID, 
				M_CostElement_ID, 
				Amt, Qty, Description, trx);
			cd.setM_WorkOrderTransactionLine_ID(M_WorkOrderTransactionLine_ID);
			cd.setIsSOTrx(IsSOTrx);
		}
		else
		{
			cd.setDeltaAmt(cd.getAmt().subtract(Amt));
			cd.setDeltaQty(cd.getQty().subtract(Qty));
			if (cd.isDelta())
				cd.setProcessed(false);
			else
				return true;	//	nothing to do
		}
		boolean ok = cd.save();
		if (ok && !cd.isProcessed())
		{
			MClient client = MClient.get(as.getCtx(), as.getAD_Client_ID());
			if (client.isCostImmediate())
				cd.process();
		}
		s_log.config(""("" + ok + "") "" + cd);
		return ok;
	}	//	createWorkOrderTransaction
"
org.compiere.model.MCostDetail.createInventory,MCostDetail.java,"boolean createInventory (MAcctSchema as, int AD_Org_ID, 
		int M_Product_ID, int M_AttributeSetInstance_ID,
		int M_InventoryLine_ID, int M_CostElement_ID, 
		BigDecimal Amt, BigDecimal Qty,
		String Description, Trx trx)
	{
		//	Delete Unprocessed zero Differences
		String sql = ""DELETE FROM M_CostDetail ""
			+ ""WHERE Processed='N' AND COALESCE(DeltaAmt,0)=0 AND COALESCE(DeltaQty,0)=0""
			+ "" AND M_InventoryLine_ID="" + M_InventoryLine_ID
			+ "" AND M_AttributeSetInstance_ID="" + M_AttributeSetInstance_ID
			+ "" AND C_AcctSchema_ID = "" + as.getC_AcctSchema_ID();
		int no = DB.executeUpdate(sql, trx);
		if (no != 0)
			s_log.config(""Deleted #"" + no);
		MCostDetail cd = get (as.getCtx(), ""M_InventoryLine_ID=? AND M_AttributeSetInstance_ID=?"", 
			M_InventoryLine_ID, M_AttributeSetInstance_ID, trx);
		//
		if (cd == null)		//	createNew
		{
			cd = new MCostDetail (as, AD_Org_ID, 
				M_Product_ID, M_AttributeSetInstance_ID, 
				M_CostElement_ID, 
				Amt, Qty, Description, trx);
			cd.setM_InventoryLine_ID(M_InventoryLine_ID);
		}
		else
		{
			cd.setDeltaAmt(cd.getAmt().subtract(Amt));
			cd.setDeltaQty(cd.getQty().subtract(Qty));
			if (cd.isDelta())
				cd.setProcessed(false);
			else
				return true;	//	nothing to do
		}
		boolean ok = cd.save();
		if (ok && !cd.isProcessed())
		{
			MClient client = MClient.get(as.getCtx(), as.getAD_Client_ID());
			if (client.isCostImmediate())
				cd.process();
		}
		s_log.config(""("" + ok + "") "" + cd);
		return ok;
	}	//	createInventory
"
org.compiere.model.MCostDetail.createMovement,MCostDetail.java,"boolean createMovement (MAcctSchema as, int AD_Org_ID, 
		int M_Product_ID, int M_AttributeSetInstance_ID,
		int M_MovementLine_ID, int M_CostElement_ID, 
		BigDecimal Amt, BigDecimal Qty, boolean from,
		String Description, Trx trx)
	{
		//	Delete Unprocessed zero Differences
		String sql = ""DELETE FROM M_CostDetail ""
			+ ""WHERE Processed='N' AND COALESCE(DeltaAmt,0)=0 AND COALESCE(DeltaQty,0)=0""
			+ "" AND M_MovementLine_ID="" + M_MovementLine_ID 
			+ "" AND IsSOTrx="" + (from ? ""'Y'"" : ""'N'"")
			+ "" AND M_AttributeSetInstance_ID="" + M_AttributeSetInstance_ID
			+ "" AND C_AcctSchema_ID = "" + as.getC_AcctSchema_ID();
		int no = DB.executeUpdate(sql, trx);
		if (no != 0)
			s_log.config(""Deleted #"" + no);
		MCostDetail cd = get (as.getCtx(), ""M_MovementLine_ID=? AND M_AttributeSetInstance_ID=? AND IsSOTrx="" 
			+ (from ? ""'Y'"" : ""'N'""), 
			M_MovementLine_ID, M_AttributeSetInstance_ID, trx);
		//
		if (cd == null)		//	createNew
		{
			cd = new MCostDetail (as, AD_Org_ID, 
				M_Product_ID, M_AttributeSetInstance_ID, 
				M_CostElement_ID, 
				Amt, Qty, Description, trx);
			cd.setM_MovementLine_ID (M_MovementLine_ID);
			cd.setIsSOTrx(from);
		}
		else
		{
			cd.setDeltaAmt(cd.getAmt().subtract(Amt));
			cd.setDeltaQty(cd.getQty().subtract(Qty));
			if (cd.isDelta())
				cd.setProcessed(false);
			else
				return true;	//	nothing to do
		}
		boolean ok = cd.save();
		if (ok && !cd.isProcessed())
		{
			MClient client = MClient.get(as.getCtx(), as.getAD_Client_ID());
			if (client.isCostImmediate())
				cd.process();
		}
		s_log.config(""("" + ok + "") "" + cd);
		return ok;
	}	//	createMovement
"
org.compiere.model.MCostDetail.createProduction,MCostDetail.java,"boolean createProduction (MAcctSchema as, int AD_Org_ID, 
		int M_Product_ID, int M_AttributeSetInstance_ID,
		int M_ProductionLine_ID, int M_CostElement_ID, 
		BigDecimal Amt, BigDecimal Qty,
		String Description, Trx trx)
	{
		//	Delete Unprocessed zero Differences
		String sql = ""DELETE FROM M_CostDetail ""
			+ ""WHERE Processed='N' AND COALESCE(DeltaAmt,0)=0 AND COALESCE(DeltaQty,0)=0""
			+ "" AND M_ProductionLine_ID="" + M_ProductionLine_ID
			+ "" AND M_AttributeSetInstance_ID="" + M_AttributeSetInstance_ID
			+ "" AND C_AcctSchema_ID = "" + as.getC_AcctSchema_ID();
		int no = DB.executeUpdate(sql, trx);
		if (no != 0)
			s_log.config(""Deleted #"" + no);
		MCostDetail cd = get (as.getCtx(), ""M_ProductionLine_ID=? AND M_AttributeSetInstance_ID=?"", 
			M_ProductionLine_ID, M_AttributeSetInstance_ID, trx);
		//
		if (cd == null)		//	createNew
		{
			cd = new MCostDetail (as, AD_Org_ID, 
				M_Product_ID, M_AttributeSetInstance_ID, 
				M_CostElement_ID, 
				Amt, Qty, Description, trx);
			cd.setM_ProductionLine_ID(M_ProductionLine_ID);
		}
		else
		{
			cd.setDeltaAmt(cd.getAmt().subtract(Amt));
			cd.setDeltaQty(cd.getQty().subtract(Qty));
			if (cd.isDelta())
				cd.setProcessed(false);
			else
				return true;	//	nothing to do
		}
		boolean ok = cd.save();
		if (ok && !cd.isProcessed())
		{
			MClient client = MClient.get(as.getCtx(), as.getAD_Client_ID());
			if (client.isCostImmediate())
				cd.process();
		}
		s_log.config(""("" + ok + "") "" + cd);
		return ok;
	}	//	createProduction
"
org.compiere.model.MCostDetail.get,MCostDetail.java,"MCostDetail get (Ctx ctx, String whereClause, 
		int ID, int M_AttributeSetInstance_ID, Trx trx)
	{
		String sql = ""SELECT * FROM M_CostDetail WHERE "" + whereClause;
		MCostDetail retValue = null;
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, ID);
			pstmt.setInt (2, M_AttributeSetInstance_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				retValue = new MCostDetail (ctx, rs, trx);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql + "" - "" + ID, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return retValue;
	}	//	get
"
org.compiere.model.MCostDetail.processProduct,MCostDetail.java,"boolean processProduct (MProduct product, Trx trx)
	{
		String sql = ""SELECT * FROM M_CostDetail ""
			+ ""WHERE M_Product_ID=?""
			+ "" AND Processed='N' ""
			+ ""ORDER BY C_AcctSchema_ID, M_CostElement_ID, AD_Org_ID, M_AttributeSetInstance_ID, Created"";
		int counterOK = 0;
		int counterError = 0;
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, product.getM_Product_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MCostDetail cd = new MCostDetail(product.getCtx(), rs, trx);
				if (cd.process())	//	saves
					counterOK++;
				else
					counterError++;
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
			counterError++;
		}
		
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		s_log.config(product.getValue() + "": OK="" + counterOK + "", Errors="" + counterError);
		return counterError == 0;
	}	//	processProduct
"
org.compiere.model.MCostDetail.setAmt,MCostDetail.java,"void setAmt (BigDecimal Amt)
	{
		if (isProcessed())
			throw new IllegalStateException(""Cannot change Amt - processed"");
		if (Amt == null)
			super.setAmt (Env.ZERO);
		else
			super.setAmt (Amt);
	}	//	setAmt
"
org.compiere.model.MCostDetail.setQty,MCostDetail.java,"void setQty (BigDecimal Qty)
	{
		if (isProcessed())
			throw new IllegalStateException(""Cannot change Qty - processed"");
		if (Qty == null)
			super.setQty (Env.ZERO);
		else
			super.setQty (Qty);
	}	//	setQty
"
org.compiere.model.MCostDetail.isOrder,MCostDetail.java,"boolean isOrder()
	{
		return getC_OrderLine_ID() != 0;
	}	//	isOrder
"
org.compiere.model.MCostDetail.isInvoice,MCostDetail.java,"boolean isInvoice()
	{
		return getC_InvoiceLine_ID() != 0;
	}	//	isInvoice
"
org.compiere.model.MCostDetail.isShipment,MCostDetail.java,"boolean isShipment()
	{
		return isSOTrx() && getM_InOutLine_ID() != 0;
	}	//	isShipment
"
org.compiere.model.MCostDetail.isDelta,MCostDetail.java,"boolean isDelta()
	{
		return !(getDeltaAmt().signum() == 0 
			&& getDeltaQty().signum() == 0);
	}	//	isDelta
"
org.compiere.model.MCostDetail.afterSave,MCostDetail.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		return true;
	}	//	afterSave
"
org.compiere.model.MCostDetail.beforeDelete,MCostDetail.java,"boolean beforeDelete ()
	{
		return !isProcessed();
	}	//	beforeDelete
"
org.compiere.model.MCostDetail.toString,MCostDetail.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MCostDetail["");
		sb.append (get_ID());
		if (getC_OrderLine_ID() != 0)
			sb.append ("",C_OrderLine_ID="").append (getC_OrderLine_ID());
		if (getM_InOutLine_ID() != 0)
			sb.append ("",M_InOutLine_ID="").append (getM_InOutLine_ID());
		if (getC_InvoiceLine_ID() != 0)
			sb.append ("",C_InvoiceLine_ID="").append (getC_InvoiceLine_ID());
		if (getC_ProjectIssue_ID() != 0)
			sb.append ("",C_ProjectIssue_ID="").append (getC_ProjectIssue_ID());
		if (getM_MovementLine_ID() != 0)
			sb.append ("",M_MovementLine_ID="").append (getM_MovementLine_ID());
		if (getM_InventoryLine_ID() != 0)
			sb.append ("",M_InventoryLine_ID="").append (getM_InventoryLine_ID());
		if (getM_ProductionLine_ID() != 0)
			sb.append ("",M_ProductionLine_ID="").append (getM_ProductionLine_ID());
		sb.append("",Amt="").append(getAmt())
			.append("",Qty="").append(getQty());
		if (isDelta())
			sb.append("",DeltaAmt="").append(getDeltaAmt())
				.append("",DeltaQty="").append(getDeltaQty());
		sb.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MCostDetail.process,MCostDetail.java,"boolean process()
	{
		if (isProcessed())
		{
			log.info(""Already processed"");
			return true;
		}
		boolean ok = false;

		//	get costing level for product
		MAcctSchema as = new MAcctSchema (getCtx(), getC_AcctSchema_ID(), null);
		String CostingLevel = as.getCostingLevel();
		MProduct product = MProduct.get(getCtx(), getM_Product_ID());
		MProductCategoryAcct pca = MProductCategoryAcct.get (getCtx(),
			product.getM_Product_Category_ID(), getC_AcctSchema_ID(), null);	
		if (pca.getCostingLevel() != null)
			CostingLevel = pca.getCostingLevel();
		//	Org Element
		int Org_ID = getAD_Org_ID();
		int M_ASI_ID = getM_AttributeSetInstance_ID();
		if (X_C_AcctSchema.COSTINGLEVEL_Tenant.equals(CostingLevel))
		{
			Org_ID = 0;
			M_ASI_ID = 0;
		}
		else if (X_C_AcctSchema.COSTINGLEVEL_Organization.equals(CostingLevel))
			M_ASI_ID = 0;
		else if (X_C_AcctSchema.COSTINGLEVEL_BatchLot.equals(CostingLevel))
			Org_ID = 0;

		//	Create Material Cost elements
		if (getM_CostElement_ID() == 0)
		{
			MCostElement[] ces = MCostElement.getCostingMethods(this);
			for (MCostElement ce : ces) {
				ok = process (as, product, ce, Org_ID, M_ASI_ID);
				if (!ok)
					break;
			}
		}	//	Material Cost elements
		else
		{
			MCostElement ce = new MCostElement(getCtx(), getM_CostElement_ID(), get_Trx());
			ok = process (as, product, ce, Org_ID, M_ASI_ID);
		}
		
		//	Save it
		if (ok)
		{
			setDeltaAmt(null);
			setDeltaQty(null);
			setProcessed(true);
			ok = save();
		}
		log.info(ok + "" - "" + toString());
		return ok;
	}	//	process
"
org.compiere.model.MCostDetail.process,MCostDetail.java,"boolean process (MAcctSchema as, MProduct product, MCostElement ce, 
		int Org_ID, int M_ASI_ID)
	{
		MCost cost = MCost.get(product, M_ASI_ID, as, 
			Org_ID, ce.getM_CostElement_ID());
	//	if (cost == null)
	//		cost = new MCost(product, M_ASI_ID, 
	//			as, Org_ID, ce.getM_CostElement_ID());

		BigDecimal qty = getQty();
		BigDecimal amt = getAmt();
		int precision = as.getCostingPrecision();
		BigDecimal price = amt;
		if (qty.signum() != 0)
			price = amt.divide(qty, precision, BigDecimal.ROUND_HALF_UP);
		
		
		/** All Costing Methods
		if (ce.isAverageInvoice())
		else if (ce.isAveragePO())
		else if (ce.isFifo())
		else if (ce.isLifo())
		else if (ce.isLastInvoice())
		else if (ce.isLastPOPrice())
		else if (ce.isStandardCosting())
		else if (ce.isUserDefined())
		else if (!ce.isCostingMethod())
		**/
		
		//	*** Purchase Order Detail Record ***
		if (getC_OrderLine_ID() != 0)
		{
			new MOrderLine (getCtx(), getC_OrderLine_ID(), null);
			boolean isReturnTrx = qty.signum() < 0;
			log.fine("" "");
			
			if (ce.isAveragePO())
			{
				if (!isReturnTrx)
					cost.setWeightedAverage(amt, qty);
				else
					cost.add(amt, qty);

				log.finer(""PO - AveragePO - "" + cost);
			}
			else if (ce.isLastPOPrice())
			{
				if(!isReturnTrx)
				{
					if (qty.signum() != 0)
						cost.setCurrentCostPrice(price);
					else
					{
						BigDecimal cCosts = cost.getCurrentCostPrice().add(amt);
						cost.setCurrentCostPrice(cCosts);
					}
				}
				cost.add(amt, qty);
				log.finer(""PO - LastPO - "" + cost);
			}
			else if (ce.isUserDefined())
			{
				//	Interface
				log.finer(""PO - UserDef - "" + cost);
			}
			else if (!ce.isCostingMethod())
			{
				log.finer(""PO - "" + ce + "" - "" + cost);
			}
		//	else
		//		log.warning(""PO - "" + ce + "" - "" + cost);
		}
		
		//	*** AP Invoice Detail Record ***
		else if (getC_InvoiceLine_ID() != 0)
		{
			boolean isReturnTrx = qty.signum() < 0;
			if (ce.isAverageInvoice())
			{
				if (!isReturnTrx)
					cost.setWeightedAverage(amt, qty);
				else
					cost.add(amt, qty);
				log.finer(""Inv - AverageInv - "" + cost);
			}
			else if (ce.isFifo()
				|| ce.isLifo())
			{
				//	Real ASI - costing level Org
				MCostQueue cq = MCostQueue.get(product, getM_AttributeSetInstance_ID(), 
					as, Org_ID, ce.getM_CostElement_ID(), get_Trx());
				cq.setCosts(amt, qty, precision);
				cq.save();
				//	Get Costs - costing level Org/ASI
				MCostQueue[] cQueue = MCostQueue.getQueue(product, M_ASI_ID, 
					as, Org_ID, ce, get_Trx());
				if (cQueue != null && cQueue.length > 0)
					cost.setCurrentCostPrice(cQueue[0].getCurrentCostPrice());
				cost.add(amt, qty);
				log.finer(""Inv - FiFo/LiFo - "" + cost);
			}
			else if (ce.isLastInvoice())
			{
				if (!isReturnTrx)
				{
					if (qty.signum() != 0)
						cost.setCurrentCostPrice(price);
					else
					{
						BigDecimal cCosts = cost.getCurrentCostPrice().add(amt);
						cost.setCurrentCostPrice(cCosts);
					}
				}
				cost.add(amt, qty);
				log.finer(""Inv - LastInv - "" + cost);
			}
			else if (ce.isStandardCosting())
			{
				if (cost.getCurrentCostPrice().signum() == 0)
				{
					cost.setCurrentCostPrice(price);
					//	seed initial price
					if (cost.getCurrentCostPrice().signum() == 0 
						&& cost.get_ID() == 0)
						cost.setCurrentCostPrice(
							MCost.getSeedCosts(product, M_ASI_ID, 
								as, Org_ID, ce.getCostingMethod(), getC_OrderLine_ID()));
				}
				cost.add(amt, qty);
				log.finer(""Inv - Standard - "" + cost);
			}
			else if (ce.isUserDefined())
			{
				//	Interface
				cost.add(amt, qty);
				log.finer(""Inv - UserDef - "" + cost);
			}
			else if (!ce.isCostingMethod())		//	Cost Adjustments
			{
				BigDecimal cCosts = cost.getCurrentCostPrice().add(amt);
				cost.setCurrentCostPrice(cCosts);
				cost.add(amt, qty);
				log.finer(""Inv - none - "" + cost);
			}
		//	else
		//		log.warning(""Inv - "" + ce + "" - "" + cost);
		}
		//	*** Qty Adjustment Detail Record ***
		else if (getM_InOutLine_ID() != 0 		//	AR Shipment Detail Record  
			|| getM_MovementLine_ID() != 0 
			|| getM_InventoryLine_ID() != 0
			|| getM_ProductionLine_ID() != 0
			|| getC_ProjectIssue_ID() != 0
			|| getM_WorkOrderTransactionLine_ID()!=0)
		{
			boolean addition = qty.signum() > 0 && amt.signum() > 0;
			//
			if (ce.isAverageInvoice())
			{
				if (addition)
					cost.setWeightedAverage(amt, qty);
				else
					cost.setCurrentQty(cost.getCurrentQty().add(qty));
				log.finer(""QtyAdjust - AverageInv - "" + cost);
			}
			else if (ce.isAveragePO())
			{
				if (addition)
					cost.setWeightedAverage(amt, qty);
				else
					cost.setCurrentQty(cost.getCurrentQty().add(qty));
				log.finer(""QtyAdjust - AveragePO - "" + cost);
			}
			else if (ce.isFifo() || ce.isLifo())
			{
				if (addition)
				{
					//	Real ASI - costing level Org
					MCostQueue cq = MCostQueue.get(product, getM_AttributeSetInstance_ID(), 
						as, Org_ID, ce.getM_CostElement_ID(), get_Trx());
					cq.setCosts(amt, qty, precision);
					cq.save();
				}
				else
				{
					//	Adjust Queue - costing level Org/ASI
					MCostQueue.adjustQty(product, M_ASI_ID, 
						as, Org_ID, ce, qty.negate(), get_Trx());
				}
				//	Get Costs - costing level Org/ASI
				MCostQueue[] cQueue = MCostQueue.getQueue(product, M_ASI_ID, 
					as, Org_ID, ce, get_Trx());
				if (cQueue != null && cQueue.length > 0)
					cost.setCurrentCostPrice(cQueue[0].getCurrentCostPrice());
				cost.setCurrentQty(cost.getCurrentQty().add(qty));
				log.finer(""QtyAdjust - FiFo/Lifo - "" + cost);
			}
			else if (ce.isLastInvoice())
			{
				cost.setCurrentQty(cost.getCurrentQty().add(qty));
				log.finer(""QtyAdjust - LastInv - "" + cost);
			}
			else if (ce.isLastPOPrice())
			{
				cost.setCurrentQty(cost.getCurrentQty().add(qty));
				log.finer(""QtyAdjust - LastPO - "" + cost);
			}
			else if (ce.isStandardCosting())
			{
				if (addition)
				{
					cost.add(amt, qty);
					//	Initial
					if (cost.getCurrentCostPrice().signum() == 0 
						&& cost.get_ID() == 0)
						cost.setCurrentCostPrice(price);
				}
				else
					cost.setCurrentQty(cost.getCurrentQty().add(qty));
				log.finer(""QtyAdjust - Standard - "" + cost);
			}
			else if (ce.isUserDefined())
			{
				//	Interface
				if (addition)
					cost.add(amt, qty);
				else
					cost.setCurrentQty(cost.getCurrentQty().add(qty));
				log.finer(""QtyAdjust - UserDef - "" + cost);
			}
			else if (!ce.isCostingMethod())
			{
			//	Should not happen
				log.finer(""QtyAdjust - ?none? - "" + cost);
			}
			else
				log.warning(""QtyAdjust - "" + ce + "" - "" + cost);
		}
		else	//	unknown or no id
		{
			log.warning(""Unknown Type: "" + toString());
			return false;
		}
		
		return cost.save();
	}	//	process
"
org.compiere.model.MResourceUnAvailable.beforeSave,MResourceUnAvailable.java,"boolean beforeSave (boolean newRecord)
	{
		if (getDateTo() == null)
			setDateTo(getDateFrom());
		if (getDateFrom().after(getDateTo()))
		{
			log.saveError(""Error"", Msg.parseTranslation(getCtx(), ""@DateTo@ > @DateFrom@""));
			return false;
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MProductCategoryAcct.get,MProductCategoryAcct.java,"MProductCategoryAcct get (Ctx ctx, 
		int M_Product_Category_ID, int C_AcctSchema_ID, Trx trx)
	{
		MProductCategoryAcct retValue = null;
		PreparedStatement pstmt = null;
		String sql = ""SELECT * FROM  M_Product_Category_Acct ""
			+ ""WHERE M_Product_Category_ID=? AND C_AcctSchema_ID=?"";
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, M_Product_Category_ID);
			pstmt.setInt (2, C_AcctSchema_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				retValue = new MProductCategoryAcct (ctx, rs, trx);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return retValue;
	}	//	get
"
org.compiere.model.MProductCategoryAcct.checkCosting,MProductCategoryAcct.java,"void checkCosting()
	{
		//	Create Cost Elements
		if (getCostingMethod() != null && getCostingMethod().length() > 0)
			MCostElement.getMaterialCostElement(this, getCostingMethod());
	}	//	checkCosting
"
org.compiere.model.MProductCategoryAcct.afterSave,MProductCategoryAcct.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		checkCosting();
		return success;
	}	//	afterSave
"
org.compiere.model.MProductCategoryAcct.toString,MProductCategoryAcct.java,"String toString()
	{
		StringBuffer sb = new StringBuffer (""MProductCategoryAcct["");
		sb.append (get_ID())
			.append ("",M_Product_Category_ID="").append (getM_Product_Category_ID())
			.append ("",C_AcctSchema_ID="").append(getC_AcctSchema_ID())
			.append ("",CostingLevel="").append(getCostingLevel())
			.append ("",CostingMethod="").append(getCostingMethod())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MIndexColumn.getColumnName,MIndexColumn.java,"String getColumnName()
	{
		String sql = getColumnSQL();		//	Function Index
		if (sql != null && sql.length() > 0)
			return sql;
		int AD_Column_ID = getAD_Column_ID();
		return MColumn.getColumnName (getCtx(), AD_Column_ID);
	}	//	getColumnName
"
org.compiere.model.MIndexColumn.toString,MIndexColumn.java,"String toString()
	{
		StringBuffer sb = new StringBuffer (""MIndexColumn["");
		sb.append (get_ID()).append (""-"").append (getAD_Column_ID()).append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MRfQTopic.getSubscribers,MRfQTopic.java,"MRfQTopicSubscriber[] getSubscribers()
	{
		ArrayList<MRfQTopicSubscriber> list = new ArrayList<MRfQTopicSubscriber>();
		String sql = ""SELECT * FROM C_RfQ_TopicSubscriber ""
			+ ""WHERE C_RfQ_Topic_ID=? AND IsActive='Y'"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getC_RfQ_Topic_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MRfQTopicSubscriber (getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""getSubscribers"", e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		MRfQTopicSubscriber[] retValue = new MRfQTopicSubscriber[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getSubscribers
"
org.compiere.model.MIndexStop.setKeyword,MIndexStop.java,"void setKeyword (String Keyword)
	{
		String kw = MIndex.standardizeKeyword(Keyword);
		if (kw == null)
			kw = ""?"";
		super.setKeyword (kw);
	}	//	setKeyword
"
org.compiere.model.MIndexStop.beforeSave,MIndexStop.java,"boolean beforeSave (boolean newRecord)
	{
		if (newRecord || is_ValueChanged(""Keyword""))
			setKeyword(getKeyword());
		if (getKeyword().equals(""?""))
		{
			log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""Keyword""));
			return false;
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MStorage.get,MStorage.java,"MStorage get (Ctx ctx, int M_Locator_ID, 
		int M_Product_ID, int M_AttributeSetInstance_ID, Trx trx)
	{
		MStorage retValue = null;
		String sql = ""SELECT * FROM M_Storage ""
			+ ""WHERE M_Locator_ID=? AND M_Product_ID=? AND "";
		if (M_AttributeSetInstance_ID == 0)
			sql += ""(M_AttributeSetInstance_ID=? OR M_AttributeSetInstance_ID IS NULL)"";
		else
			sql += ""M_AttributeSetInstance_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, M_Locator_ID);
			pstmt.setInt (2, M_Product_ID);
			pstmt.setInt (3, M_AttributeSetInstance_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				retValue = new MStorage (ctx, rs, trx);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			s_log.log(Level.SEVERE, sql, ex);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;
		if (retValue == null)
			s_log.fine(""Not Found - M_Locator_ID="" + M_Locator_ID 
				+ "", M_Product_ID="" + M_Product_ID + "", M_AttributeSetInstance_ID="" + M_AttributeSetInstance_ID);
		else
			s_log.fine(""M_Locator_ID="" + M_Locator_ID 
				+ "", M_Product_ID="" + M_Product_ID + "", M_AttributeSetInstance_ID="" + M_AttributeSetInstance_ID);
		return retValue;
	}	//	get
"
org.compiere.model.MStorage.getAllWithASI,MStorage.java,"MStorage[] getAllWithASI (Ctx ctx, int M_Product_ID, int M_Locator_ID, 
		boolean FiFo, Trx trx)
	{
		ArrayList<MStorage> list = new ArrayList<MStorage>();
		String sql = ""SELECT * FROM M_Storage ""
			+ ""WHERE M_Product_ID=? AND M_Locator_ID=?""
			+ "" AND M_AttributeSetInstance_ID > 0""
			+ "" AND QtyOnHand > 0 ""
			+ ""ORDER BY M_AttributeSetInstance_ID"";
		if (!FiFo)
			sql += "" DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, M_Product_ID);
			pstmt.setInt (2, M_Locator_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add(new MStorage (ctx, rs, trx));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			s_log.log(Level.SEVERE, sql, ex);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;
		MStorage[] retValue = new MStorage[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getAllWithASI
"
org.compiere.model.MStorage.getAll,MStorage.java,"MStorage[] getAll (Ctx ctx, 
		int M_Product_ID, int M_Locator_ID, Trx trx)
	{
		ArrayList<MStorage> list = new ArrayList<MStorage>();
		String sql = ""SELECT * FROM M_Storage ""
			+ ""WHERE M_Product_ID=? AND M_Locator_ID=?""
			+ "" AND QtyOnHand <> 0 ""
			+ ""ORDER BY M_AttributeSetInstance_ID"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, M_Product_ID);
			pstmt.setInt (2, M_Locator_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add(new MStorage (ctx, rs, trx));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			s_log.log(Level.SEVERE, sql, ex);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;
		MStorage[] retValue = new MStorage[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getAll
"
org.compiere.model.MStorage.getOfProduct,MStorage.java,"MStorage[] getOfProduct (Ctx ctx, int M_Product_ID, Trx trx)
	{
		ArrayList<MStorage> list = new ArrayList<MStorage>();
		String sql = ""SELECT * FROM M_Storage ""
			+ ""WHERE M_Product_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, M_Product_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add(new MStorage (ctx, rs, trx));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			s_log.log(Level.SEVERE, sql, ex);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;
		MStorage[] retValue = new MStorage[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getOfProduct
"
org.compiere.model.MStorage.getM_InOutLineOf,MStorage.java,"MInOutLine getM_InOutLineOf()
	{
		MInOutLine retValue = null;
		String sql = ""SELECT * FROM M_InOutLine line ""
			+ ""WHERE M_AttributeSetInstance_ID=? ""
			+ ""OR EXISTS (SELECT 1 FROM ""
			+ ""M_InOutLineMA ma WHERE line.M_InOutLine_ID = ma.M_InOutLine_ID ""
			+ ""AND M_AttributeSetInstance_ID=?)"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getM_AttributeSetInstance_ID());
			pstmt.setInt (2, getM_AttributeSetInstance_ID());
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				retValue = new MInOutLine (getCtx(), rs, get_Trx());
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			s_log.log(Level.SEVERE, sql, ex);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;

		return retValue;		
	}
"
org.compiere.model.MStorage.getWarehouse,MStorage.java,"MStorage[] getWarehouse (Ctx ctx, int M_Warehouse_ID, 
			int M_Product_ID, int M_AttributeSetInstance_ID, int M_AttributeSet_ID,
			boolean allAttributeInstances, Timestamp minGuaranteeDate,
			boolean FiFo, Trx trx)
	{
		return getWarehouse(ctx, M_Warehouse_ID, M_Product_ID, M_AttributeSetInstance_ID, 
				M_AttributeSet_ID, allAttributeInstances, minGuaranteeDate, FiFo, false, 0, trx);
	}
"
org.compiere.model.MStorage.getWarehouse,MStorage.java,"MStorage[] getWarehouse (Ctx ctx, int M_Warehouse_ID, 
		int M_Product_ID, int M_AttributeSetInstance_ID, int M_AttributeSet_ID,
		boolean allAttributeInstances, Timestamp minGuaranteeDate,
		boolean FiFo, boolean allocationCheck, int M_SourceZone_ID, Trx trx)
	{
		if (M_Warehouse_ID == 0 || M_Product_ID == 0)
			return new MStorage[0];
		
		if (M_AttributeSet_ID == 0)
			allAttributeInstances = true;
		else
		{
			MAttributeSet mas = MAttributeSet.get(ctx, M_AttributeSet_ID);
			if (!mas.isInstanceAttribute())
				allAttributeInstances = true;
		}
		
		ArrayList<MStorage> list = new ArrayList<MStorage>();
		//	Specific Attribute Set Instance
		String sql = ""SELECT s.M_Product_ID,s.M_Locator_ID,s.M_AttributeSetInstance_ID,""
			+ ""s.AD_Client_ID,s.AD_Org_ID,s.IsActive,s.Created,s.CreatedBy,s.Updated,s.UpdatedBy,""
			+ ""s.QtyOnHand,s.QtyReserved,s.QtyOrdered,s.DateLastInventory, s.QtyAllocated, ""
			+ ""s.QtyDedicated, s.QtyExpected ""
			+ ""FROM M_Storage s""
			+ "" INNER JOIN M_Locator l ON (l.M_Locator_ID=s.M_Locator_ID) ""
			+ ""WHERE l.M_Warehouse_ID=?"" 
			+ "" AND s.M_Product_ID=?""
			+ "" AND COALESCE(s.M_AttributeSetInstance_ID,0)=? "";
		
		if(allocationCheck)
			sql += ""AND l.IsAvailableForAllocation='Y' "";
		
		if(M_SourceZone_ID != 0)
			sql += ""AND l.M_Locator_ID IN "" +
					"" (SELECT M_Locator_ID FROM M_ZoneLocator WHERE M_Zone_ID = ? ) "";
		
		sql+= ""ORDER BY l.PriorityNo DESC, M_AttributeSetInstance_ID"";
		
		if (!FiFo)
			sql += "" DESC"";
		//	All Attribute Set Instances
		if (allAttributeInstances)
		{
			sql = ""SELECT s.M_Product_ID,s.M_Locator_ID,s.M_AttributeSetInstance_ID,""
				+ ""s.AD_Client_ID,s.AD_Org_ID,s.IsActive,s.Created,s.CreatedBy,s.Updated,s.UpdatedBy,""
				+ ""s.QtyOnHand,s.QtyReserved,s.QtyOrdered,s.DateLastInventory, s.QtyAllocated, ""
				+ ""s.QtyDedicated, s.QtyExpected ""
				+ ""FROM M_Storage s""
				+ "" INNER JOIN M_Locator l ON (l.M_Locator_ID=s.M_Locator_ID)""
				+ "" LEFT OUTER JOIN M_AttributeSetInstance asi ON (s.M_AttributeSetInstance_ID=asi.M_AttributeSetInstance_ID) ""
				+ ""WHERE l.M_Warehouse_ID=?""
				+ "" AND s.M_Product_ID=? "";

			if(allocationCheck)
				sql += ""AND l.IsAvailableForAllocation='Y' "";

			if(M_SourceZone_ID != 0)
				sql += ""AND l.M_Locator_ID IN "" +
						"" (SELECT M_Locator_ID FROM M_ZoneLocator WHERE M_Zone_ID = ? ) "";

			if (minGuaranteeDate != null)
			{
				sql += ""AND (asi.GuaranteeDate IS NULL OR asi.GuaranteeDate>?) ""
					+ ""ORDER BY asi.GuaranteeDate,l.PriorityNo DESC, M_AttributeSetInstance_ID"";	//	Has Prio over Locator
				if (!FiFo)
					sql += "" DESC"";
				sql += "", s.QtyOnHand DESC"";
			}
			else
			{
				sql += ""ORDER BY l.PriorityNo DESC, s.M_AttributeSetInstance_ID"";
				if (!FiFo)
					sql += "" DESC"";
				sql += "", s.QtyOnHand DESC"";
			}
		} 
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, trx);
			int index = 1;
			pstmt.setInt(index++, M_Warehouse_ID);
			pstmt.setInt(index++, M_Product_ID);
			if(M_SourceZone_ID != 0)
				pstmt.setInt(index++, M_SourceZone_ID);
			if (!allAttributeInstances)
				pstmt.setInt(index++, M_AttributeSetInstance_ID);
			else if (minGuaranteeDate != null)
				pstmt.setTimestamp(index++, minGuaranteeDate);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add (new MStorage (ctx, rs, trx));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MStorage[] retValue = new MStorage[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getWarehouse
"
org.compiere.model.MStorage.getCreate,MStorage.java,"MStorage getCreate (Ctx ctx, int M_Locator_ID, 
		int M_Product_ID, int M_AttributeSetInstance_ID, Trx trx)
	{
		if (M_Locator_ID == 0)
			throw new IllegalArgumentException(""M_Locator_ID=0"");
		if (M_Product_ID == 0)
			throw new IllegalArgumentException(""M_Product_ID=0"");
		MStorage retValue = get(ctx, M_Locator_ID, M_Product_ID, M_AttributeSetInstance_ID, trx);
		if (retValue != null)
			return retValue;
		
		//	Insert row based on locator
		MLocator locator = new MLocator (ctx, M_Locator_ID, trx);
		if (locator.get_ID() != M_Locator_ID)
			throw new IllegalArgumentException(""Not found M_Locator_ID="" + M_Locator_ID);
		//
		retValue = new MStorage (locator, M_Product_ID, M_AttributeSetInstance_ID);
		retValue.save(trx);
		s_log.fine(""New "" + retValue);
		return retValue;
	}	//	getCreate
"
org.compiere.model.MStorage.add,MStorage.java,"boolean add (Ctx ctx, int M_Warehouse_ID, int M_Locator_ID, 
		int M_Product_ID, int M_AttributeSetInstance_ID, int reservationAttributeSetInstance_ID,
		BigDecimal diffQtyOnHand, BigDecimal diffQtyReserved, 
		BigDecimal diffQtyOrdered, Trx trx)
	{
		MStorage storage = null;
		StringBuffer diffText = new StringBuffer(""("");

		//	Get Storage
		if (storage == null)
			storage = getCreate (ctx, M_Locator_ID, 
				M_Product_ID, M_AttributeSetInstance_ID, trx);
		//	Verify
		if (storage.getM_Locator_ID() != M_Locator_ID 
			&& storage.getM_Product_ID() != M_Product_ID
			&& storage.getM_AttributeSetInstance_ID() != M_AttributeSetInstance_ID)
		{
			s_log.severe (""No Storage found - M_Locator_ID="" + M_Locator_ID 
				+ "",M_Product_ID="" + M_Product_ID + "",ASI="" + M_AttributeSetInstance_ID);
			return false;
		}
		MStorage storageASI = null;
		if (M_AttributeSetInstance_ID != reservationAttributeSetInstance_ID)
		{
			int reservationM_Locator_ID = M_Locator_ID;
			if (reservationAttributeSetInstance_ID == 0)
			{
				MWarehouse wh = MWarehouse.get (ctx, M_Warehouse_ID);
				reservationM_Locator_ID = wh.getDefaultM_Locator_ID();
			}
			storageASI = get(ctx, reservationM_Locator_ID, 
				M_Product_ID, reservationAttributeSetInstance_ID, trx);
			if (storageASI == null)	//	create if not existing - should not happen
			{
				MProduct product = MProduct.get(ctx, M_Product_ID);
				int xM_Locator_ID = MProductLocator.getFirstM_Locator_ID (product, M_Warehouse_ID);
				if (xM_Locator_ID == 0)
				{
					MWarehouse wh = MWarehouse.get (ctx, M_Warehouse_ID);
					xM_Locator_ID = wh.getDefaultM_Locator_ID();
				}
				storageASI = getCreate (ctx, xM_Locator_ID, 
					M_Product_ID, reservationAttributeSetInstance_ID, trx);
			}
		}		
		boolean changed = false;
		if (diffQtyOnHand != null && diffQtyOnHand.signum() != 0)
		{
			storage.setQtyOnHand (storage.getQtyOnHand().add (diffQtyOnHand));
			diffText.append(""OnHand="").append(diffQtyOnHand);
			changed = true;
		}
		//	Reserved Qty
		if (diffQtyReserved != null && diffQtyReserved.signum() != 0)
		{
			if (storageASI == null)	
				storage.setQtyReserved (storage.getQtyReserved().add (diffQtyReserved));
			else
				storageASI.setQtyReserved (storageASI.getQtyReserved().add (diffQtyReserved));
			diffText.append("" Reserved="").append(diffQtyReserved);
			changed = true;
		}
		if (diffQtyOrdered != null && diffQtyOrdered.signum() != 0)
		{
			if (storageASI == null)
				storage.setQtyOrdered (storage.getQtyOrdered().add (diffQtyOrdered));
			else
				storageASI.setQtyOrdered (storageASI.getQtyOrdered().add (diffQtyOrdered));
			diffText.append("" Ordered="").append(diffQtyOrdered);
			changed = true;
		}
		if (changed)
		{
			diffText.append("") -> "").append(storage.toString());
			s_log.fine(diffText.toString());
			if (storageASI != null)
				storageASI.save(trx);		//	No AttributeSetInstance (reserved/ordered)
			return storage.save (trx);
		}
		
		return true;
	}	//	add
"
org.compiere.model.MStorage.add,MStorage.java,"boolean add (Ctx ctx, int M_Warehouse_ID, int M_Locator_ID, 
		int M_Product_ID, int M_AttributeSetInstance_ID, int reservationAttributeSetInstance_ID,
		BigDecimal diffQtyOnHand, BigDecimal diffQtyReserved, 
		BigDecimal diffQtyOrdered, BigDecimal diffQtyDedicated, 
		BigDecimal diffQtyExpected, BigDecimal diffQtyAllocated, 
		Trx trx)
	{
		MStorage storage = null;
		StringBuffer diffText = new StringBuffer(""("");

		//	Get Storage
		if (storage == null)
			storage = getCreate (ctx, M_Locator_ID, 
				M_Product_ID, M_AttributeSetInstance_ID, trx);
		//	Verify
		if (storage.getM_Locator_ID() != M_Locator_ID 
			&& storage.getM_Product_ID() != M_Product_ID
			&& storage.getM_AttributeSetInstance_ID() != M_AttributeSetInstance_ID)
		{
			s_log.severe (""No Storage found - M_Locator_ID="" + M_Locator_ID 
				+ "",M_Product_ID="" + M_Product_ID + "",ASI="" + M_AttributeSetInstance_ID);
			return false;
		}
		MStorage storageASI = null;
		if (M_AttributeSetInstance_ID != reservationAttributeSetInstance_ID)
		{
			int reservationM_Locator_ID = M_Locator_ID;
			if (reservationAttributeSetInstance_ID == 0)
			{
				MWarehouse wh = MWarehouse.get (ctx, M_Warehouse_ID);
				reservationM_Locator_ID = wh.getDefaultM_Locator_ID();
			}
			storageASI = get(ctx, reservationM_Locator_ID, 
				M_Product_ID, reservationAttributeSetInstance_ID, trx);
			if (storageASI == null)	//	create if not existing - should not happen
			{
				MProduct product = MProduct.get(ctx, M_Product_ID);
				int xM_Locator_ID = MProductLocator.getFirstM_Locator_ID (product, M_Warehouse_ID);
				if (xM_Locator_ID == 0)
				{
					MWarehouse wh = MWarehouse.get (ctx, M_Warehouse_ID);
					xM_Locator_ID = wh.getDefaultM_Locator_ID();
				}
				storageASI = getCreate (ctx, xM_Locator_ID, 
					M_Product_ID, reservationAttributeSetInstance_ID, trx);
			}
		}		
		boolean changed = false;
		if (diffQtyOnHand != null && diffQtyOnHand.signum() != 0)
		{
			storage.setQtyOnHand (storage.getQtyOnHand().add (diffQtyOnHand));
			diffText.append(""OnHand="").append(diffQtyOnHand);
			changed = true;
		}
		//	Reserved Qty
		if (diffQtyReserved != null && diffQtyReserved.signum() != 0)
		{
			if (storageASI == null)	
				storage.setQtyReserved (storage.getQtyReserved().add (diffQtyReserved));
			else
				storageASI.setQtyReserved (storageASI.getQtyReserved().add (diffQtyReserved));
			diffText.append("" Reserved="").append(diffQtyReserved);
			changed = true;
		}
		if (diffQtyOrdered != null && diffQtyOrdered.signum() != 0)
		{
			if (storageASI == null)
				storage.setQtyOrdered (storage.getQtyOrdered().add (diffQtyOrdered));
			else
				storageASI.setQtyOrdered (storageASI.getQtyOrdered().add (diffQtyOrdered));
			diffText.append("" Ordered="").append(diffQtyOrdered);
			changed = true;
		}
		if (diffQtyDedicated != null && diffQtyDedicated.signum() != 0)
		{
			if (storageASI == null)
				storage.setQtyDedicated (storage.getQtyDedicated().add (diffQtyDedicated));
			else
				storageASI.setQtyDedicated (storageASI.getQtyDedicated().add (diffQtyDedicated));
			diffText.append("" Dedicated="").append(diffQtyDedicated);
			changed = true;
		}
		if (diffQtyAllocated != null && diffQtyAllocated.signum() != 0)
		{
			if (storageASI == null)
				storage.setQtyAllocated (storage.getQtyAllocated().add (diffQtyAllocated));
			else
				storageASI.setQtyAllocated (storageASI.getQtyAllocated().add (diffQtyAllocated));
			diffText.append("" Allocated="").append(diffQtyAllocated);
			changed = true;
		}
		if (diffQtyExpected != null && diffQtyExpected.signum() != 0)
		{
			if (storageASI == null)
				storage.setQtyExpected (storage.getQtyExpected().add (diffQtyExpected));
			else
				storageASI.setQtyExpected (storageASI.getQtyExpected().add (diffQtyExpected));
			diffText.append("" Expected="").append(diffQtyExpected);
			changed = true;
		}
		if (changed)
		{
			diffText.append("") -> "").append(storage.toString());
			s_log.fine(diffText.toString());
			if (storageASI != null)
				storageASI.save(trx);		//	No AttributeSetInstance (reserved/ordered)
			return storage.save (trx);
		}
		
		return true;
	}	//	add
"
org.compiere.model.MStorage.getM_Locator_ID,MStorage.java,"int getM_Locator_ID (int M_Warehouse_ID, 
		int M_Product_ID, int M_AttributeSetInstance_ID, BigDecimal Qty,
		Trx trx)
	{
		int M_Locator_ID = 0;
		int firstM_Locator_ID = 0;
		String sql = ""SELECT s.M_Locator_ID, s.QtyOnHand ""
			+ ""FROM M_Storage s""
			+ "" INNER JOIN M_Locator l ON (s.M_Locator_ID=l.M_Locator_ID)""
			+ "" INNER JOIN M_Product p ON (s.M_Product_ID=p.M_Product_ID)""
			+ "" LEFT OUTER JOIN M_AttributeSet mas ON (p.M_AttributeSet_ID=mas.M_AttributeSet_ID) ""
			+ ""WHERE l.M_Warehouse_ID=?""
			+ "" AND s.M_Product_ID=?""
			+ "" AND (mas.IsInstanceAttribute IS NULL OR mas.IsInstanceAttribute='N' OR s.M_AttributeSetInstance_ID=?)""
			+ "" AND l.IsActive='Y' ""
			+ ""ORDER BY l.PriorityNo DESC, s.QtyOnHand DESC"";
		
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, trx);
			pstmt.setInt(1, M_Warehouse_ID);
			pstmt.setInt(2, M_Product_ID);
			pstmt.setInt(3, M_AttributeSetInstance_ID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				BigDecimal QtyOnHand = rs.getBigDecimal(2);
				if (QtyOnHand != null && Qty.compareTo(QtyOnHand) <= 0)
				{
					M_Locator_ID = rs.getInt(1);
					break;
				}
				if (firstM_Locator_ID == 0)
					firstM_Locator_ID = rs.getInt(1);
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			s_log.log(Level.SEVERE, sql, ex);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;
		if (M_Locator_ID != 0)
			return M_Locator_ID;
		return firstM_Locator_ID;
	}	//	getM_Locator_ID
"
org.compiere.model.MStorage.getQtyAvailable,MStorage.java,"BigDecimal getQtyAvailable (int M_Warehouse_ID, 
		int M_Product_ID, int M_AttributeSetInstance_ID, Trx trx)
	{
		BigDecimal QtyOnHand = Env.ZERO;
		BigDecimal QtyReserved = Env.ZERO;
		
		PreparedStatement pstmt = null;
		String sql = ""SELECT SUM(QtyOnHand) ""
			+ ""FROM M_Storage s""
			+ "" INNER JOIN M_Locator l ON (s.M_Locator_ID=l.M_Locator_ID AND l.IsAvailableToPromise='Y') ""
			+ ""WHERE s.M_Product_ID=?""		//	#1
			+ "" AND l.M_Warehouse_ID=?"";
		if (M_AttributeSetInstance_ID != 0)
			sql += "" AND M_AttributeSetInstance_ID=?"";
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, M_Product_ID);
			pstmt.setInt (2, M_Warehouse_ID);
			if (M_AttributeSetInstance_ID != 0)
				pstmt.setInt(3, M_AttributeSetInstance_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
			{
				QtyOnHand = rs.getBigDecimal(1);
				if (rs.wasNull())
					QtyOnHand = Env.ZERO;
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		sql = ""SELECT SUM(QtyReserved) ""
			+ ""FROM M_Storage s""
			+ "" INNER JOIN M_Locator l ON (s.M_Locator_ID=l.M_Locator_ID) ""
			+ ""WHERE s.M_Product_ID=?""		//	#1
			+ "" AND l.M_Warehouse_ID=?"";
		if (M_AttributeSetInstance_ID != 0)
			sql += "" AND M_AttributeSetInstance_ID=?"";
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, M_Product_ID);
			pstmt.setInt (2, M_Warehouse_ID);
			if (M_AttributeSetInstance_ID != 0)
				pstmt.setInt(3, M_AttributeSetInstance_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
			{
				QtyReserved = rs.getBigDecimal(1);
				if (rs.wasNull())
					QtyReserved = Env.ZERO;
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		s_log.fine(""M_Warehouse_ID="" + M_Warehouse_ID 
			+ "",M_Product_ID="" + M_Product_ID + "" : "" 
			+ "" QtyOnHand="" + QtyOnHand + "", QtyReserved=""+QtyReserved);

		return QtyOnHand.subtract(QtyReserved);
	}	//	getQtyAvailable
"
org.compiere.model.MStorage.getQtyOnHand,MStorage.java,"BigDecimal getQtyOnHand (int M_Warehouse_ID, int M_Locator_ID,
		int M_Product_ID, int M_AttributeSetInstance_ID, Trx trx)
	{
		BigDecimal retValue = Env.ZERO;
		PreparedStatement pstmt = null;
		String sql = ""SELECT SUM(QtyOnHand) ""
			+ ""FROM M_Storage s""
			+ "" INNER JOIN M_Locator l ON (s.M_Locator_ID=l.M_Locator_ID) ""
			+ ""WHERE s.M_Product_ID=?""		//	#1
			+ "" AND l.M_Warehouse_ID=?""
			+ "" AND l.M_Locator_ID=?""
			+ "" AND M_AttributeSetInstance_ID<>?"";
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, M_Product_ID);
			pstmt.setInt (2, M_Warehouse_ID);
			pstmt.setInt (3, M_Locator_ID);
			pstmt.setInt(4, M_AttributeSetInstance_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
			{
				retValue = rs.getBigDecimal(1);
				if (rs.wasNull())
					retValue = Env.ZERO;
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		// Add qty onhand for current record
		retValue = retValue.add(getQtyOnHand());
		s_log.fine(""M_Warehouse_ID="" + M_Warehouse_ID 
			+ "",M_Product_ID="" + M_Product_ID + "" = "" + retValue);
		return retValue;
	}	//	getQtynhand
"
org.compiere.model.MStorage.getQtyDedicated,MStorage.java,"BigDecimal getQtyDedicated (int M_Warehouse_ID, int M_Locator_ID,
		int M_Product_ID, int M_AttributeSetInstance_ID, Trx trx)
	{
		BigDecimal retValue = Env.ZERO;
		PreparedStatement pstmt = null;
		String sql = ""SELECT SUM(QtyDedicated) ""
			+ ""FROM M_Storage s""
			+ "" INNER JOIN M_Locator l ON (s.M_Locator_ID=l.M_Locator_ID) ""
			+ ""WHERE s.M_Product_ID=?""		//	#1
			+ "" AND l.M_Warehouse_ID=?""
			+ "" AND l.M_Locator_ID=?""
			+ "" AND M_AttributeSetInstance_ID<>?"";
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, M_Product_ID);
			pstmt.setInt (2, M_Warehouse_ID);
			pstmt.setInt (3, M_Locator_ID);
			pstmt.setInt(4, M_AttributeSetInstance_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
			{
				retValue = rs.getBigDecimal(1);
				if (rs.wasNull())
					retValue = Env.ZERO;
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		// Add qty dedicated for current record
		retValue = retValue.add(getQtyDedicated());
		
		s_log.fine(""M_Warehouse_ID="" + M_Warehouse_ID 
			+ "",M_Product_ID="" + M_Product_ID + "" = "" + retValue);
		return retValue;
	}	//	getQtyDedicated
"
org.compiere.model.MStorage.getQtyAllocated,MStorage.java,"BigDecimal getQtyAllocated (int M_Warehouse_ID,int M_Locator_ID, 
		int M_Product_ID, int M_AttributeSetInstance_ID, Trx trx)
	{
		BigDecimal retValue = Env.ZERO;
		PreparedStatement pstmt = null;
		String sql = ""SELECT SUM(QtyAllocated) ""
			+ ""FROM M_Storage s""
			+ "" INNER JOIN M_Locator l ON (s.M_Locator_ID=l.M_Locator_ID) ""
			+ ""WHERE s.M_Product_ID=?""		//	#1
			+ "" AND l.M_Warehouse_ID=?""
			+ "" AND l.M_Locator_ID=?""
			+ "" AND M_AttributeSetInstance_ID<>?"";
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, M_Product_ID);
			pstmt.setInt (2, M_Warehouse_ID);
			pstmt.setInt (3, M_Locator_ID);
			pstmt.setInt(4, M_AttributeSetInstance_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
			{
				retValue = rs.getBigDecimal(1);
				if (rs.wasNull())
					retValue = Env.ZERO;
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		// Add qty dedicated for current record
		retValue = retValue.add(getQtyAllocated());
		
		s_log.fine(""M_Warehouse_ID="" + M_Warehouse_ID 
			+ "",M_Product_ID="" + M_Product_ID + "" = "" + retValue);
		return retValue;
	}	//	getQtyAllocated
"
org.compiere.model.MStorage.changeQtyOnHand,MStorage.java,"void changeQtyOnHand (BigDecimal qty, boolean add)
	{
		if (qty == null || qty.signum() == 0)
			return;
		if (add)
			setQtyOnHand(getQtyOnHand().add(qty));
		else
			setQtyOnHand(getQtyOnHand().subtract(qty));
	}	//	changeQtyOnHand
"
org.compiere.model.MStorage.getM_Warehouse_ID,MStorage.java,"int getM_Warehouse_ID()
	{
		if (m_M_Warehouse_ID == 0)
		{
			MLocator loc = MLocator.get(getCtx(), getM_Locator_ID());
			m_M_Warehouse_ID = loc.getM_Warehouse_ID();
		}
		return m_M_Warehouse_ID;
	}	//	getM_Warehouse_ID
"
org.compiere.model.MStorage.beforeSave,MStorage.java,"boolean beforeSave(boolean newRecord) 
	{
		//	Negative Inventory check
		if (newRecord || is_ValueChanged(""QtyOnHand"") 
						|| is_ValueChanged(""QtyDedicated"")
						|| is_ValueChanged(""QtyAllocated"")
						|| is_ValueChanged(""QtyExpected""))
		{
			
			MWarehouse wh = new MWarehouse(getCtx(), getM_Warehouse_ID(), get_Trx());
			if(wh.isDisallowNegativeInv())
			{
				PreparedStatement pstmt = null;
				BigDecimal QtyOnHand =Env.ZERO;
				BigDecimal QtyDedicated =Env.ZERO;
				BigDecimal QtyAllocated =Env.ZERO;
				
				String sql = ""SELECT SUM(QtyOnHand),SUM(QtyDedicated),SUM(QtyAllocated) ""
					+ ""FROM M_Storage s""
					+ "" INNER JOIN M_Locator l ON (s.M_Locator_ID=l.M_Locator_ID) ""
					+ ""WHERE s.M_Product_ID=?""		//	#1
					+ "" AND l.M_Warehouse_ID=?""
					+ "" AND l.M_Locator_ID=?""
					+ "" AND M_AttributeSetInstance_ID<>?"";
				try
				{
					pstmt = DB.prepareStatement (sql, get_Trx());
					pstmt.setInt (1, getM_Product_ID());
					pstmt.setInt (2, getM_Warehouse_ID());
					pstmt.setInt (3, getM_Locator_ID());
					pstmt.setInt(4, getM_AttributeSetInstance_ID());
					ResultSet rs = pstmt.executeQuery ();
					if (rs.next ())
					{
						QtyOnHand = rs.getBigDecimal(1);
						if (rs.wasNull())
							QtyOnHand = Env.ZERO;

						QtyDedicated = rs.getBigDecimal(2);
						if (rs.wasNull())
							QtyDedicated = Env.ZERO;

						QtyAllocated = rs.getBigDecimal(3);
						if (rs.wasNull())
							QtyAllocated = Env.ZERO;

					}
					rs.close ();
					pstmt.close ();
					pstmt = null;
				}
				catch (Exception e)
				{
					s_log.log(Level.SEVERE, sql, e);
				}
				try
				{
					if (pstmt != null)
						pstmt.close ();
					pstmt = null;
				}
				catch (Exception e)
				{
					pstmt = null;
				}
				
				QtyOnHand = QtyOnHand.add(getQtyOnHand());
				QtyDedicated = QtyDedicated.add(getQtyDedicated());
				QtyAllocated = QtyAllocated.add(getQtyAllocated());
				
				if(getQtyOnHand().signum() < 0 ||
						getQtyDedicated().signum() < 0 ||
						getQtyAllocated().signum() < 0 ||
						getQtyExpected().signum() < 0 ||
						QtyOnHand.signum() < 0 ||
						QtyOnHand.compareTo(QtyDedicated.add(QtyAllocated)) < 0 ||
						getQtyOnHand().compareTo(getQtyDedicated().add(getQtyAllocated())) < 0)
				{
					log.saveError(""Error"", Msg.getMsg(getCtx(), ""NegativeInventoryDisallowed""));
					return false;
				}
			}
		}

		return super.beforeSave(newRecord);
	}
"
org.compiere.model.MStorage.toString,MStorage.java,"String toString()
	{
		StringBuffer sb = new StringBuffer(""MStorage["")
			.append(""M_Locator_ID="").append(getM_Locator_ID())
				.append("",M_Product_ID="" +
						"""").append(getM_Product_ID())
				.append("",M_AttributeSetInstance_ID="").append(getM_AttributeSetInstance_ID())
			.append("": OnHand="").append(getQtyOnHand())
			.append("",Reserved="").append(getQtyReserved())
			.append("",Ordered="").append(getQtyOrdered())
			.append("",Dedicated="").append(getQtyDedicated())
			.append("",Allocated="").append(getQtyAllocated())
			.append(""]"");
		return sb.toString();
	}	//	toString
"
org.compiere.model.PP_PayPal.processCC,PP_PayPal.java,"boolean processCC ()
		throws IllegalArgumentException
	{
		return m_ok;
	}	//	processCC
"
org.compiere.model.PP_PayPal.isProcessedOK,PP_PayPal.java,"boolean isProcessedOK ()
	{
		return m_ok;
	}	//	isProcessedOK
"
org.compiere.model.PP_PayPal.main,PP_PayPal.java,"void main (String[] args)
	{
		CLogMgt.initialize(true);
		CLogMgt.setLevel(Level.ALL);
		PP_PayPal pp = new PP_PayPal();
		pp.processCC();
		pp.isProcessedOK();
		
	}	//	main
"
org.compiere.model.MOrderTax.get,MOrderTax.java,"MOrderTax get (MOrderLine line, int precision, 
		boolean oldTax, Trx trx)
	{
		MOrderTax retValue = null;
		if (line == null || line.getC_Order_ID() == 0)
		{
			s_log.fine(""No Order"");
			return null;
		}
		int C_Tax_ID = line.getC_Tax_ID();
		if (oldTax && line.is_ValueChanged(""C_Tax_ID""))
		{
			Object old = line.get_ValueOld(""C_Tax_ID"");
			if (old == null)
			{
				s_log.fine(""No Old Tax"");
				return null;
			}
			C_Tax_ID = ((Integer)old).intValue();
		}
		if (C_Tax_ID == 0)
		{
			s_log.fine(""No Tax"");
			return null;
		}
		
		String sql = ""SELECT * FROM C_OrderTax WHERE C_Order_ID=? AND C_Tax_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, line.getC_Order_ID());
			pstmt.setInt (2, C_Tax_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				retValue = new MOrderTax (line.getCtx(), rs, trx);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		if (retValue != null)
		{
			retValue.setPrecision(precision);
			retValue.set_Trx(trx);
			s_log.fine(""(old="" + oldTax + "") "" + retValue);
			return retValue;
		}
		
		//	Create New
		retValue = new MOrderTax(line.getCtx(), 0, trx);
		retValue.set_Trx(trx);
		retValue.setClientOrg(line);
		retValue.setC_Order_ID(line.getC_Order_ID());
		retValue.setC_Tax_ID(line.getC_Tax_ID());
		retValue.setPrecision(precision);
		retValue.setIsTaxIncluded(line.isTaxIncluded());
		s_log.fine(""(new) "" + retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MOrderTax.getPrecision,MOrderTax.java,"int getPrecision ()
	{
		if (m_precision == null)
			return 2;
		return m_precision.intValue();
	}	//	getPrecision
"
org.compiere.model.MOrderTax.setPrecision,MOrderTax.java,"void setPrecision (int precision)
	{
		m_precision = Integer.valueOf(precision);
	}	//	setPrecision
"
org.compiere.model.MOrderTax.getTax,MOrderTax.java,"MTax getTax()
	{
		if (m_tax == null)
			m_tax = MTax.get(getCtx(), getC_Tax_ID());
		return m_tax;
	}	//	getTax
"
org.compiere.model.MOrderTax.calculateTaxFromLines,MOrderTax.java,"boolean calculateTaxFromLines ()
	{
		BigDecimal taxBaseAmt = Env.ZERO;
		BigDecimal taxAmt = Env.ZERO;
		//
		boolean documentLevel = getTax().isDocumentLevel();
		MTax tax = getTax();
		//
		String sql = ""SELECT LineNetAmt FROM C_OrderLine WHERE C_Order_ID=? AND C_Tax_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getC_Order_ID());
			pstmt.setInt (2, getC_Tax_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				BigDecimal baseAmt = rs.getBigDecimal(1);
				taxBaseAmt = taxBaseAmt.add(baseAmt);
				//
				if (!documentLevel)		// calculate line tax
					taxAmt = taxAmt.add(tax.calculateTax(baseAmt, isTaxIncluded(), getPrecision()));
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, get_Trx().toString(), e);
			taxBaseAmt = null;
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		if (taxBaseAmt == null)
			return false;
		
		//	Calculate Tax
		if (documentLevel)		//	document level
			taxAmt = tax.calculateTax(taxBaseAmt, isTaxIncluded(), getPrecision());
		setTaxAmt(taxAmt);

		//	Set Base
		if (isTaxIncluded())
			setTaxBaseAmt (taxBaseAmt.subtract(taxAmt));
		else
			setTaxBaseAmt (taxBaseAmt);
		log.fine(toString());
		return true;
	}	//	calculateTaxFromLines
"
org.compiere.model.MOrderTax.toString,MOrderTax.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MOrderTax["");
		sb.append(""C_Order_ID="").append(getC_Order_ID())
			.append("",C_Tax_ID="").append(getC_Tax_ID())
			.append("", Base="").append(getTaxBaseAmt()).append("",Tax="").append(getTaxAmt())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.CalloutPaymentAllocate.invoice,CalloutPaymentAllocate.java,"String invoice (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer C_Invoice_ID = (Integer)value;
		if (isCalloutActive()		//	assuming it is resetting value
			|| C_Invoice_ID == null || C_Invoice_ID.intValue() == 0)
			return """";

		//	Check Payment
		int C_Payment_ID = ctx.getContextAsInt( WindowNo, ""C_Payment_ID"");
		MPayment payment = new MPayment (ctx, C_Payment_ID, null);
		if (payment.getC_Charge_ID() != 0 || payment.getC_Invoice_ID() != 0
			|| payment.getC_Order_ID() != 0)
			return Msg.getMsg(ctx, ""PaymentIsAllocated"");

		setCalloutActive(true);
		//
		mTab.setValue(""DiscountAmt"", Env.ZERO);
		mTab.setValue(""WriteOffAmt"", Env.ZERO);
		mTab.setValue(""OverUnderAmt"", Env.ZERO);

		int C_InvoicePaySchedule_ID = 0;
		if (ctx.getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_Invoice_ID"") == C_Invoice_ID.intValue()
			&& ctx.getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_InvoicePaySchedule_ID"") != 0)
			C_InvoicePaySchedule_ID = ctx.getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_InvoicePaySchedule_ID"");

		//  Payment Date
		Timestamp ts = new Timestamp(ctx.getContextAsTime( WindowNo, ""DateTrx""));
		String sql = ""SELECT C_BPartner_ID,C_Currency_ID,""		//	1..2
			+ "" invoiceOpen(C_Invoice_ID, ?),""					//	3		#1
			+ "" invoiceDiscount(C_Invoice_ID,?,?), IsSOTrx ""	//	4..5	#2/3
			+ ""FROM C_Invoice WHERE C_Invoice_ID=?"";			//			#4
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_InvoicePaySchedule_ID);
			pstmt.setTimestamp(2, ts);
			pstmt.setInt(3, C_InvoicePaySchedule_ID);
			pstmt.setInt(4, C_Invoice_ID.intValue());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
			//	mTab.setValue(""C_BPartner_ID"", Integer.valueOf(rs.getInt(1)));
			//	int C_Currency_ID = rs.getInt(2);					//	Set Invoice Currency
			//	mTab.setValue(""C_Currency_ID"", Integer.valueOf(C_Currency_ID));
				//
				BigDecimal InvoiceOpen = rs.getBigDecimal(3);		//	Set Invoice OPen Amount
				if (InvoiceOpen == null)
					InvoiceOpen = Env.ZERO;
				BigDecimal DiscountAmt = rs.getBigDecimal(4);		//	Set Discount Amt
				if (DiscountAmt == null)
					DiscountAmt = Env.ZERO;
				MInvoice invoice = new MInvoice(ctx, C_Invoice_ID, null);
				MDocType docType = new MDocType(ctx, invoice.getC_DocType_ID(), null);
				if (docType.isReturnTrx())
				{
					// Adjust discount amount for credit memos. Invoice Open Amt is already adjusted.
					DiscountAmt = DiscountAmt.negate();
				}

				mTab.setValue(""InvoiceAmt"", InvoiceOpen);
				mTab.setValue(""Amount"", InvoiceOpen.subtract(DiscountAmt));
				mTab.setValue(""DiscountAmt"", DiscountAmt);
				//  reset as dependent fields get reset
				ctx.setContext( WindowNo, ""C_Invoice_ID"", C_Invoice_ID.toString());
				mTab.setValue(""C_Invoice_ID"", C_Invoice_ID);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
			setCalloutActive(false);
			return e.getLocalizedMessage();
		}

		setCalloutActive(false);
		return """";
	}	//	invoice
"
org.compiere.model.CalloutPaymentAllocate.amounts,CalloutPaymentAllocate.java,"String amounts (Ctx ctx, int WindowNo, GridTab mTab, GridField mField,
		Object value, Object oldValue)
	{
		if (isCalloutActive())		//	assuming it is resetting value
			return """";
		//	No Invoice
		int C_Invoice_ID = ctx.getContextAsInt( WindowNo, ""C_Invoice_ID"");
		if (C_Invoice_ID == 0)
			return """";
		setCalloutActive(true);
		//	Get Info from Tab
		BigDecimal Amount = (BigDecimal)mTab.getValue(""Amount"");
		BigDecimal DiscountAmt = (BigDecimal)mTab.getValue(""DiscountAmt"");
		BigDecimal WriteOffAmt = (BigDecimal)mTab.getValue(""WriteOffAmt"");
		BigDecimal OverUnderAmt = (BigDecimal)mTab.getValue(""OverUnderAmt"");
		BigDecimal InvoiceAmt = (BigDecimal)mTab.getValue(""InvoiceAmt"");
		log.fine(""Amt="" + Amount + "", Discount="" + DiscountAmt
			+ "", WriteOff="" + WriteOffAmt + "", OverUnder="" + OverUnderAmt
			+ "", Invoice="" + InvoiceAmt);

		//	Changed Column
		String colName = mField.getColumnName();
		//  PayAmt - calculate write off
		if (colName.equals(""Amount""))
		{
			WriteOffAmt = InvoiceAmt.subtract(Amount).subtract(DiscountAmt).subtract(OverUnderAmt);
			mTab.setValue(""WriteOffAmt"", WriteOffAmt);
		}
		else    //  calculate Amount
		{
			Amount = InvoiceAmt.subtract(DiscountAmt).subtract(WriteOffAmt).subtract(OverUnderAmt);
			mTab.setValue(""Amount"", Amount);
		}

		setCalloutActive(false);
		return """";
	}	//	amounts
"
org.compiere.model.MPaymentProcessor.find,MPaymentProcessor.java,"MPaymentProcessor[] find (Ctx ctx,
		String tender, String CCType,
		int AD_Client_ID, int C_Currency_ID, BigDecimal Amt, Trx trx)
	{
		ArrayList<MPaymentProcessor> list = new ArrayList<MPaymentProcessor>();
		StringBuffer sql = new StringBuffer(""SELECT * ""
			+ ""FROM C_PaymentProcessor ""
			+ ""WHERE AD_Client_ID=? AND IsActive='Y'""				//	#1
			+ "" AND (C_Currency_ID IS NULL OR C_Currency_ID=?)""		//	#2
			+ "" AND (MinimumAmt IS NULL OR MinimumAmt = 0 OR MinimumAmt <= ?)"");	//	#3
		if (X_C_Payment.TENDERTYPE_DirectDeposit.equals(tender))
			sql.append("" AND AcceptDirectDeposit='Y'"");
		else if (X_C_Payment.TENDERTYPE_DirectDebit.equals(tender))
			sql.append("" AND AcceptDirectDebit='Y'"");
		else if (X_C_Payment.TENDERTYPE_Check.equals(tender))
			sql.append("" AND AcceptCheck='Y'"");
		//  CreditCards
		else if (X_C_Payment.CREDITCARDTYPE_ATM.equals(CCType))
			sql.append("" AND AcceptATM='Y'"");
		else if (X_C_Payment.CREDITCARDTYPE_Amex.equals(CCType))
			sql.append("" AND AcceptAMEX='Y'"");
		else if (X_C_Payment.CREDITCARDTYPE_Visa.equals(CCType))
			sql.append("" AND AcceptVISA='Y'"");
		else if (X_C_Payment.CREDITCARDTYPE_MasterCard.equals(CCType))
			sql.append("" AND AcceptMC='Y'"");
		else if (X_C_Payment.CREDITCARDTYPE_Diners.equals(CCType))
			sql.append("" AND AcceptDiners='Y'"");
		else if (X_C_Payment.CREDITCARDTYPE_Discover.equals(CCType))
			sql.append("" AND AcceptDiscover='Y'"");
		else if (X_C_Payment.CREDITCARDTYPE_PurchaseCard.equals(CCType))
			sql.append("" AND AcceptCORPORATE='Y'"");
		//
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql.toString(), trx);
			pstmt.setInt(1, AD_Client_ID);
			pstmt.setInt(2, C_Currency_ID);
			pstmt.setBigDecimal(3, Amt);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MPaymentProcessor (ctx, rs, trx));
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			s_log.log(Level.SEVERE, ""find - "" + sql, e);
			return null;
		}
		//
		if (list.size() == 0)
			s_log.warning(""find - not found - AD_Client_ID="" + AD_Client_ID
				+ "", C_Currency_ID="" + C_Currency_ID + "", Amt="" + Amt);
		else
			s_log.fine(""find - #"" + list.size() + "" - AD_Client_ID="" + AD_Client_ID
				+ "", C_Currency_ID="" + C_Currency_ID + "", Amt="" + Amt);
		MPaymentProcessor[] retValue = new MPaymentProcessor[list.size()];
		list.toArray(retValue);
		return retValue;
	}   //  find
"
org.compiere.model.MPaymentProcessor.toString,MPaymentProcessor.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MPaymentProcessor["")
			.append(get_ID ()).append(""-"").append(getName())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MPaymentProcessor.accepts,MPaymentProcessor.java,"boolean accepts (String TenderType, String CreditCardType)
	{
		if ((X_C_Payment.TENDERTYPE_DirectDeposit.equals(TenderType) && isAcceptDirectDeposit())
			|| (X_C_Payment.TENDERTYPE_DirectDebit.equals(TenderType) && isAcceptDirectDebit())
			|| (X_C_Payment.TENDERTYPE_Check.equals(TenderType) && isAcceptCheck())
			//
			|| (X_C_Payment.CREDITCARDTYPE_ATM.equals(CreditCardType) && isAcceptATM())
			|| (X_C_Payment.CREDITCARDTYPE_Amex.equals(CreditCardType) && isAcceptAMEX())
			|| (X_C_Payment.CREDITCARDTYPE_PurchaseCard.equals(CreditCardType) && isAcceptCorporate())
			|| (X_C_Payment.CREDITCARDTYPE_Diners.equals(CreditCardType) && isAcceptDiners())
			|| (X_C_Payment.CREDITCARDTYPE_Discover.equals(CreditCardType) && isAcceptDiscover())
			|| (X_C_Payment.CREDITCARDTYPE_MasterCard.equals(CreditCardType) && isAcceptMC())
			|| (X_C_Payment.CREDITCARDTYPE_Visa.equals(CreditCardType) && isAcceptVisa()))
			return true;
		return false;
	}	//	accepts
"
org.compiere.model.MCalendar.get,MCalendar.java,"MCalendar get (Ctx ctx, int C_Calendar_ID)
	{
		Integer key = Integer.valueOf (C_Calendar_ID);
		MCalendar retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MCalendar (ctx, C_Calendar_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MCalendar.getDefault,MCalendar.java,"MCalendar getDefault (Ctx ctx, int AD_Client_ID)
	{
		MClientInfo info = MClientInfo.get(ctx, AD_Client_ID);
		return get (ctx, info.getC_Calendar_ID());
	}	//	getDefault
"
org.compiere.model.MCalendar.getDefault,MCalendar.java,"MCalendar getDefault (Ctx ctx)
	{
		return getDefault(ctx, ctx.getAD_Client_ID());
	}	//	getDefault
"
org.compiere.model.MCalendar.createYear,MCalendar.java,"MYear createYear(Locale locale)
	{
		if (get_ID() == 0)
			return null;
		MYear year = new MYear (this);
		if (year.save())
			year.createStdPeriods(locale);
		//
		return year;
	}	//	createYear
"
org.compiere.model.MCalendar.toString,MCalendar.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MCalendar["");
		sb.append(get_ID()).append(""-"")
			.append(getName())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MInOutConfirm.create,MInOutConfirm.java,"MInOutConfirm create (MInOut ship, String confirmType, boolean checkExisting)
	{
		boolean confirmExist = false;
		MInOutConfirm cHeader = null;
		
		if (checkExisting)
		{
			MInOutConfirm[] confirmations = ship.getConfirmations(true);
			MInOutLine[] lines = ship.getLines();
			for (MInOutLine line : lines)
			{
				confirmExist = false;
				for (MInOutConfirm confirmation:confirmations)
				{
					if (confirmType.equals(confirmation.getConfirmType()))
					{
						cHeader = confirmation;
						MInOutLineConfirm[] cLines = confirmation.getLines(true);
						for (MInOutLineConfirm confirmLine : cLines)
						{
							if (confirmLine.getM_InOutLine_ID() == line.getM_InOutLine_ID())
							{
								confirmExist = true;
								break;
							}
						}
					}	
			    }
				if (confirmExist == false)
				{
					break;
				}
			}
			
			if(confirmExist == true)
			{
				s_log.info(""create - existing: "" + cHeader);
				return cHeader;
			}
		}

		if (cHeader == null)
		{
			cHeader = new MInOutConfirm (ship, confirmType);
			cHeader.save(ship.get_Trx());
		}
		MInOutLine[] shipLines = ship.getLines(true);
		for (MInOutLine sLine : shipLines) 
		{
			MInOutLineConfirm cLine = MInOutLineConfirm.get(cHeader, sLine);
			if(cLine == null)
			{
				cLine = new MInOutLineConfirm (cHeader);
				cLine.setInOutLine(sLine);
				cLine.save(ship.get_Trx());
			}
		}
		s_log.info(""New: "" + cHeader);
		return cHeader;
	}	//	MInOutConfirm
"
org.compiere.model.MInOutConfirm.getLines,MInOutConfirm.java,"MInOutLineConfirm[] getLines (boolean requery)
	{
		if ((m_lines != null) && !requery)
			return m_lines;
		String sql = ""SELECT * FROM M_InOutLineConfirm ""
			+ ""WHERE M_InOutConfirm_ID=?"";
		ArrayList<MInOutLineConfirm> list = new ArrayList<MInOutLineConfirm>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getM_InOutConfirm_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add(new MInOutLineConfirm(getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		m_lines = new MInOutLineConfirm[list.size ()];
		list.toArray (m_lines);
		return m_lines;
	}	//	getLines
"
org.compiere.model.MInOutConfirm.addDescription,MInOutConfirm.java,"void addDescription (String description)
	{
		String desc = getDescription();
		if (desc == null)
			setDescription(description);
		else
			setDescription(desc + "" | "" + description);
	}	//	addDescription
"
org.compiere.model.MInOutConfirm.getConfirmTypeName,MInOutConfirm.java,"String getConfirmTypeName ()
	{
		return MRefList.getListName (getCtx(), CONFIRMTYPE_AD_Reference_ID, getConfirmType());
	}	//	getConfirmTypeName
"
org.compiere.model.MInOutConfirm.toString,MInOutConfirm.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MInOutConfirm["");
		sb.append(get_ID()).append(""-"").append(getSummary())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MInOutConfirm.getDocumentInfo,MInOutConfirm.java,"String getDocumentInfo()
	{
		return Msg.getElement(getCtx(), ""M_InOutConfirm_ID"") + "" "" + getDocumentNo();
	}	//	getDocumentInfo
"
org.compiere.model.MInOutConfirm.createPDF,MInOutConfirm.java,"File createPDF ()
	{
		try
		{
			File temp = File.createTempFile(get_TableName()+get_ID()+""_"", "".pdf"");
			return createPDF (temp);
		}
		catch (Exception e)
		{
			log.severe(""Could not create PDF - "" + e.getMessage());
		}
		return null;
	}	//	getPDF
"
org.compiere.model.MInOutConfirm.createPDF,MInOutConfirm.java,"File createPDF (File file)
	{
	//	ReportEngine re = ReportEngine.get (getCtx(), ReportEngine.INVOICE, getC_Invoice_ID());
	//	if (re == null)
			return null;
	//	return re.getPDF(file);
	}	//	createPDF
"
org.compiere.model.MInOutConfirm.setIsApproved,MInOutConfirm.java,"void setIsApproved (boolean IsApproved)
	{
		if (IsApproved && !isApproved())
		{
			int AD_User_ID = getCtx().getAD_User_ID();
			MUser user = MUser.get(getCtx(), AD_User_ID);
			String info = user.getName()
				+ "": ""
				+ Msg.translate(getCtx(), ""IsApproved"")
				+ "" - "" + new Timestamp(System.currentTimeMillis());
			addDescription(info);
		}
		super.setIsApproved (IsApproved);
	}	//	setIsApproved
"
org.compiere.model.MInOutConfirm.processIt,MInOutConfirm.java,"boolean processIt (String processAction)
	{
		m_processMsg = null;
		DocumentEngine engine = new DocumentEngine (this, getDocStatus());
		return engine.processIt (processAction, getDocAction());
	}	//	processIt
"
org.compiere.model.MInOutConfirm.unlockIt,MInOutConfirm.java,"boolean unlockIt()
	{
		log.info(toString());
		setProcessing(false);
		return true;
	}	//	unlockIt
"
org.compiere.model.MInOutConfirm.invalidateIt,MInOutConfirm.java,"boolean invalidateIt()
	{
		log.info(toString());
		setDocAction(DOCACTION_Prepare);
		return true;
	}	//	invalidateIt
"
org.compiere.model.MInOutConfirm.prepareIt,MInOutConfirm.java,"String prepareIt()
	{
		log.info(toString());
		m_processMsg = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_BEFORE_PREPARE);
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;

		/**
		MDocType dt = MDocType.get(getCtx(), getC_DocTypeTarget_ID());

		//	Std Period open?
		if (!MPeriod.isOpen(getCtx(), getDateAcct(), dt.getDocBaseType()))
		{
			m_processMsg = ""@PeriodClosed@"";
			return DocAction.STATUS_Invalid;
		}
		**/

		MInOutLineConfirm[] lines = getLines(true);
		if (lines.length == 0)
		{
			m_processMsg = ""@NoLines@"";
			return DocActionConstants.STATUS_Invalid;
		}
		//	Set dispute if not fully confirmed
		boolean difference = false;
		for (int i = 0; i < lines.length; i++)
		{
			if (!lines[i].isFullyConfirmed())
			{
				difference = true;
				break;
			}
		}
		setIsInDispute(difference);

		//
		m_justPrepared = true;
		if (!DOCACTION_Complete.equals(getDocAction()))
			setDocAction(DOCACTION_Complete);
		return DocActionConstants.STATUS_InProgress;
	}	//	prepareIt
"
org.compiere.model.MInOutConfirm.approveIt,MInOutConfirm.java,"boolean  approveIt()
	{
		log.info(toString());
		setIsApproved(true);
		return true;
	}	//	approveIt
"
org.compiere.model.MInOutConfirm.rejectIt,MInOutConfirm.java,"boolean rejectIt()
	{
		log.info(toString());
		setIsApproved(false);
		return true;
	}	//	rejectIt
"
org.compiere.model.MInOutConfirm.completeIt,MInOutConfirm.java,"String completeIt()
	{
		//	Re-Check
		if (!m_justPrepared)
		{
			String status = prepareIt();
			if (!DocActionConstants.STATUS_InProgress.equals(status))
				return status;
		}
		//	Implicit Approval
		if (!isApproved())
			approveIt();
		log.info(toString());
		//
		MInOut inout = new MInOut (getCtx(), getM_InOut_ID(), get_Trx());
		MInOutLineConfirm[] lines = getLines(m_justPrepared);

		//	Check if we need to split Shipment
		if (isInDispute())
		{
			MDocType dt = MDocType.get(getCtx(), inout.getC_DocType_ID());
			if (dt.isSplitWhenDifference())
			{
				if (dt.getC_DocTypeDifference_ID() == 0)
				{
					m_processMsg = ""No Split Document Type defined for: "" + dt.getName();
					return DocActionConstants.STATUS_Invalid;
				}
				splitInOut (inout, dt.getC_DocTypeDifference_ID(), lines);
				m_lines = null;
			}
		}

		//	All lines
		for (MInOutLineConfirm confirmLine : lines) {
			confirmLine.set_Trx(get_Trx());
			if (!confirmLine.processLine (inout.isSOTrx(), getConfirmType()))
			{
				m_processMsg = ""ShipLine not saved - "" + confirmLine;
				return DocActionConstants.STATUS_Invalid;
			}
			if (confirmLine.isFullyConfirmed())
			{
				confirmLine.setProcessed(true);
				confirmLine.save(get_Trx());
			}
			else
			{
				if (createDifferenceDoc (inout, confirmLine))
				{
					confirmLine.setProcessed(true);
					confirmLine.save(get_Trx());
				}
				else
				{
					log.log(Level.SEVERE, ""Scrapped="" + confirmLine.getScrappedQty()
						+ "" - Difference="" + confirmLine.getDifferenceQty());
					return DocActionConstants.STATUS_Invalid;
				}
			}
		}	//	for all lines
		
	// if the shipment/receipt document requires mandatory confirmation documents, 
	//	check that the confirmation has been created for all the lines of the base document
		
		MDocType dt = MDocType.get(getCtx(), inout.getC_DocType_ID());
		boolean pick = dt.isPickQAConfirm();
		boolean ship = dt.isShipConfirm();

		if((pick && this.getConfirmType().equals(X_M_InOutConfirm.CONFIRMTYPE_PickQAConfirm)) 
				|| (ship && this.getConfirmType().equals(X_M_InOutConfirm.CONFIRMTYPE_ShipReceiptConfirm)))
		{
			MInOutLine[] sLines = inout.getLines();
			for (MInOutLine line : sLines)
			{
				if (MInOutLineConfirm.get(this, line)== null)
				{
					m_processMsg = ""Confirmations for all the lines of Base document are not cretaed"";
					log.saveError(""Confirmation not complete"",""Confirmations for all the lines of Base document are not created"");
					return DocActionConstants.STATUS_Invalid;
				}
			}
		}

		if (m_creditMemo != null)
			m_processMsg += "" @C_Invoice_ID@="" + m_creditMemo.getDocumentNo();
		if (m_inventory != null)
			m_processMsg += "" @M_Inventory_ID@="" + m_inventory.getDocumentNo();


		//	Try to complete Shipment
	//	if (inout.processIt(DocAction.ACTION_Complete))
	//		m_processMsg = ""@M_InOut_ID@ "" + inout.getDocumentNo() + "": @Completed@"";

		//	User Validation
		String valid = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_AFTER_COMPLETE);
		if (valid != null)
		{
			m_processMsg = valid;
			return DocActionConstants.STATUS_Invalid;
		}

		setProcessed(true);
		setDocAction(DOCACTION_Close);
		return DocActionConstants.STATUS_Completed;
	}	//	completeIt
"
org.compiere.model.MInOutConfirm.splitInOut,MInOutConfirm.java,"void splitInOut (MInOut original, int C_DocType_ID, MInOutLineConfirm[] confirmLines)
	{
		MInOut split = new MInOut (original, C_DocType_ID, original.getMovementDate());
		split.addDescription(""Splitted from "" + original.getDocumentNo());
		split.setIsInDispute(true);

		//nnayak : Change for bug 1431337
		split.setRef_InOut_ID(original.get_ID());

		if (!split.save(get_Trx()))
			throw new IllegalStateException(""Cannot save Split"");
		original.addDescription(""Split: "" + split.getDocumentNo());
		if (!original.save(get_Trx()))
			throw new IllegalStateException(""Cannot update original Shipment"");

		//	Go through confirmations
		for (MInOutLineConfirm confirmLine : confirmLines) {
			BigDecimal differenceQty = confirmLine.getDifferenceQty();
			if (differenceQty.compareTo(Env.ZERO) == 0)
				continue;
			//
			MInOutLine oldLine = confirmLine.getLine();
			log.fine(""Qty="" + differenceQty + "", Old="" + oldLine);
			//
			MInOutLine splitLine = new MInOutLine (split);
			splitLine.setC_OrderLine_ID(oldLine.getC_OrderLine_ID());
			splitLine.setC_UOM_ID(oldLine.getC_UOM_ID());
			splitLine.setDescription(oldLine.getDescription());
			splitLine.setIsDescription(oldLine.isDescription());
			splitLine.setLine(oldLine.getLine());
			splitLine.setM_AttributeSetInstance_ID(oldLine.getM_AttributeSetInstance_ID());
			splitLine.setM_Locator_ID(oldLine.getM_Locator_ID());
			splitLine.setM_Product_ID(oldLine.getM_Product_ID());
			splitLine.setM_Warehouse_ID(oldLine.getM_Warehouse_ID());
			splitLine.setRef_InOutLine_ID(oldLine.getRef_InOutLine_ID());
			splitLine.addDescription(""Split: from "" + oldLine.getMovementQty());
			//	Qtys
			splitLine.setQty(differenceQty);		//	Entered/Movement
			if (!splitLine.save(get_Trx()))
				throw new IllegalStateException(""Cannot save Split Line"");
			//	Old
			oldLine.addDescription(""Splitted: from "" + oldLine.getMovementQty());
			oldLine.setQty(oldLine.getMovementQty().subtract(differenceQty));
			if (!oldLine.save(get_Trx()))
				throw new IllegalStateException(""Cannot save Splited Line"");
			//	Update Confirmation Line
			confirmLine.setTargetQty(confirmLine.getTargetQty().subtract(differenceQty));
			confirmLine.setDifferenceQty(Env.ZERO);
			if (!confirmLine.save(get_Trx()))
				throw new IllegalStateException(""Cannot save Split Confirmation"");
		}	//	for all confirmations

		m_processMsg = ""Split @M_InOut_ID@="" + split.getDocumentNo()
			+ "" - @M_InOutConfirm_ID@="";

		//	Create Dispute Confirmation
		split.processIt(DocActionConstants.ACTION_Prepare);
	//	split.createConfirmation();
		split.save(get_Trx());
		MInOutConfirm[] splitConfirms = split.getConfirmations(true);
		if (splitConfirms.length > 0)
		{
			int index = 0;
			if (splitConfirms[index].isProcessed())
			{
				if (splitConfirms.length > 1)
					index++;	//	try just next
				if (splitConfirms[index].isProcessed())
				{
					m_processMsg += splitConfirms[index].getDocumentNo() + "" processed??"";
					return;
				}
			}
			splitConfirms[index].setIsInDispute(true);
			splitConfirms[index].save(get_Trx());
			m_processMsg += splitConfirms[index].getDocumentNo();
			//	Set Lines to unconfirmed
			MInOutLineConfirm[] splitConfirmLines = splitConfirms[index].getLines(false);
			for (MInOutLineConfirm splitConfirmLine : splitConfirmLines) {
				splitConfirmLine.setScrappedQty(Env.ZERO);
				splitConfirmLine.setConfirmedQty(Env.ZERO);
				splitConfirmLine.save(get_Trx());
			}
		}
		else
			m_processMsg += ""??"";

	}	//	splitInOut
"
org.compiere.model.MInOutConfirm.createDifferenceDoc,MInOutConfirm.java,"boolean createDifferenceDoc (MInOut inout, MInOutLineConfirm confirm)
	{
		if (m_processMsg == null)
			m_processMsg = """";
		else if (m_processMsg.length() > 0)
			m_processMsg += ""; "";
		//	Credit Memo if linked Document
		if ((confirm.getDifferenceQty().signum() != 0)
			&& !inout.isSOTrx() && !inout.isReturnTrx() && (inout.getRef_InOut_ID() != 0))
		{
			log.info(""Difference="" + confirm.getDifferenceQty());
			if (m_creditMemo == null)
			{
				m_creditMemo = new MInvoice (inout, null);
				m_creditMemo.setDescription(Msg.translate(getCtx(), ""M_InOutConfirm_ID"") + "" "" + getDocumentNo());
				m_creditMemo.setC_DocTypeTarget_ID(MDocBaseType.DOCBASETYPE_APCreditMemo);
				if (!m_creditMemo.save(get_Trx()))
				{
					m_processMsg += ""Credit Memo not created"";
					return false;
				}
				setC_Invoice_ID(m_creditMemo.getC_Invoice_ID());
			}
			MInvoiceLine line = new MInvoiceLine (m_creditMemo);
			line.setShipLine(confirm.getLine());
			line.setQty(confirm.getDifferenceQty());	//	Entered/Invoiced
			if (!line.save(get_Trx()))
			{
				m_processMsg += ""Credit Memo Line not created"";
				return false;
			}
			confirm.setC_InvoiceLine_ID(line.getC_InvoiceLine_ID());
		}

		//	Create Inventory Difference
		if (confirm.getScrappedQty().signum() != 0)
		{
			log.info(""Scrapped="" + confirm.getScrappedQty());
			if (m_inventory == null)
			{
				MWarehouse wh = MWarehouse.get(getCtx(), inout.getM_Warehouse_ID());
				m_inventory = new MInventory (wh);
				m_inventory.setDescription(Msg.translate(getCtx(), ""M_InOutConfirm_ID"") + "" "" + getDocumentNo());
				if (!m_inventory.save(get_Trx()))
				{
					m_processMsg += ""Inventory not created"";
					return false;
				}
				setM_Inventory_ID(m_inventory.getM_Inventory_ID());
			}
			MInOutLine ioLine = confirm.getLine();
			MInventoryLine line = new MInventoryLine (m_inventory,
				ioLine.getM_Locator_ID(), ioLine.getM_Product_ID(), ioLine.getM_AttributeSetInstance_ID(),
				confirm.getScrappedQty(), Env.ZERO);
			if (!line.save(get_Trx()))
			{
				m_processMsg += ""Inventory Line not created"";
				return false;
			}
			confirm.setM_InventoryLine_ID(line.getM_InventoryLine_ID());
		}

		//
		if (!confirm.save(get_Trx()))
		{
			m_processMsg += ""Confirmation Line not saved"";
			return false;
		}
		return true;
	}	//	createDifferenceDoc
"
org.compiere.model.MInOutConfirm.voidIt,MInOutConfirm.java,"boolean voidIt()
	{
		log.info(toString());
		return false;
	}	//	voidIt
"
org.compiere.model.MInOutConfirm.closeIt,MInOutConfirm.java,"boolean closeIt()
	{
		log.info(toString());

		setDocAction(DOCACTION_None);
		return true;
	}	//	closeIt
"
org.compiere.model.MInOutConfirm.reverseCorrectIt,MInOutConfirm.java,"boolean reverseCorrectIt()
	{
		log.info(toString());
		return false;
	}	//	reverseCorrectionIt
"
org.compiere.model.MInOutConfirm.reverseAccrualIt,MInOutConfirm.java,"boolean reverseAccrualIt()
	{
		log.info(toString());
		return false;
	}	//	reverseAccrualIt
"
org.compiere.model.MInOutConfirm.reActivateIt,MInOutConfirm.java,"boolean reActivateIt()
	{
		log.info(toString());
		return false;
	}	//	reActivateIt
"
org.compiere.model.MInOutConfirm.getSummary,MInOutConfirm.java,"String getSummary()
	{
		StringBuffer sb = new StringBuffer();
		sb.append(getDocumentNo());
		//	: Total Lines = 123.00 (#1)
		sb.append("": "")
			.append(Msg.translate(getCtx(),""ApprovalAmt"")).append(""="").append(getApprovalAmt())
			.append("" (#"").append(getLines(false).length).append("")"");
		//	 - Description
		if ((getDescription() != null) && (getDescription().length() > 0))
			sb.append("" - "").append(getDescription());
		return sb.toString();
	}	//	getSummary
"
org.compiere.model.MInOutConfirm.getProcessMsg,MInOutConfirm.java,"String getProcessMsg()
	{
		return m_processMsg;
	}	//	getProcessMsg
"
org.compiere.model.MInOutConfirm.getDoc_User_ID,MInOutConfirm.java,"int getDoc_User_ID()
	{
		return getUpdatedBy();
	}	//	getDoc_User_ID
"
org.compiere.model.MInOutConfirm.getC_Currency_ID,MInOutConfirm.java,"int getC_Currency_ID()
	{
	//	MPriceList pl = MPriceList.get(getCtx(), getM_PriceList_ID());
	//	return pl.getC_Currency_ID();
		return 0;
	}	//	getC_Currency_ID
"
org.compiere.model.CalloutAssignment.product,CalloutAssignment.java,"String product (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		if (isCalloutActive() || value == null)
			return """";
		//	get value
		int S_ResourceAssignment_ID = ((Integer)value).intValue();
		if (S_ResourceAssignment_ID == 0)
			return """";
		setCalloutActive(true);

		int M_Product_ID = 0;
		String Name = null;
		String Description = null;
		BigDecimal Qty = null;
		String sql = ""SELECT p.M_Product_ID, ra.Name, ra.Description, ra.Qty ""
			+ ""FROM S_ResourceAssignment ra""
			+ "" INNER JOIN M_Product p ON (p.S_Resource_ID=ra.S_Resource_ID) ""
			+ ""WHERE ra.S_ResourceAssignment_ID=?"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, S_ResourceAssignment_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				M_Product_ID = rs.getInt (1);
				Name = rs.getString(2);
				Description = rs.getString(3);
				Qty = rs.getBigDecimal(4);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, ""product"", e);
		}

		log.fine(""S_ResourceAssignment_ID="" + S_ResourceAssignment_ID + "" - M_Product_ID="" + M_Product_ID);
		if (M_Product_ID != 0)
		{
			mTab.setValue (""M_Product_ID"", Integer.valueOf (M_Product_ID));
			if (Description != null)
				Name += "" ("" + Description + "")"";
			if (!""."".equals(Name))
				mTab.setValue(""Description"", Name);
			//
			String variable = ""Qty"";	//	TimeExpenseLine
			if (mTab.getTableName().startsWith(""C_Order""))
				variable = ""QtyOrdered"";
			else if (mTab.getTableName().startsWith(""C_Invoice""))
				variable = ""QtyInvoiced"";
			if (Qty != null)
				mTab.setValue(variable, Qty);
		}
		setCalloutActive(false);
		return """";
	}	//	product
"
org.compiere.model.MBPGroup.get,MBPGroup.java,"MBPGroup get (Ctx ctx, int C_BP_Group_ID)
	{
		Integer key = Integer.valueOf (C_BP_Group_ID);
		MBPGroup retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MBPGroup (ctx, C_BP_Group_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MBPGroup.getDefault,MBPGroup.java,"MBPGroup getDefault (Ctx ctx)
	{
		int AD_Client_ID = ctx.getAD_Client_ID();
		Integer key = Integer.valueOf (AD_Client_ID);
		MBPGroup retValue = s_cacheDefault.get (ctx, key);
		if (retValue != null)
			return retValue;

		PreparedStatement pstmt = null;
		String sql = ""SELECT * FROM C_BP_Group g ""
			+ ""WHERE IsDefault='Y' AND AD_Client_ID=? ""
			+ ""ORDER BY IsActive DESC"";
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, AD_Client_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
			{
				retValue = new MBPGroup (ctx, rs, null);
				if (retValue.get_ID () != 0)
					s_cacheDefault.put (key, retValue);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		if (retValue == null)
			s_log.warning(""No Default BP Group for AD_Client_ID="" + AD_Client_ID);
		return retValue;
	}	//	get
"
org.compiere.model.MBPGroup.getOfBPartner,MBPGroup.java,"MBPGroup getOfBPartner (Ctx ctx, int C_BPartner_ID)
	{
		MBPGroup retValue = null;
		PreparedStatement pstmt = null;
		String sql = ""SELECT * FROM C_BP_Group g ""
			+ ""WHERE EXISTS (SELECT * FROM C_BPartner p ""
				+ ""WHERE p.C_BPartner_ID=? AND p.C_BP_Group_ID=g.C_BP_Group_ID)"";
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, C_BPartner_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
			{
				retValue = new MBPGroup (ctx, rs, null);
				Integer key = Integer.valueOf (retValue.getC_BP_Group_ID());
				if (retValue.get_ID () != 0)
					s_cache.put (key, retValue);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

		return retValue;
	}	//	getOfBPartner
"
org.compiere.model.MBPGroup.getCreditWatchPercent,MBPGroup.java,"BigDecimal getCreditWatchPercent ()
	{
		BigDecimal bd = super.getCreditWatchPercent();
		if (bd != null)
			return bd;
		return new BigDecimal(90);
	}	//	getCreditWatchPercent
"
org.compiere.model.MBPGroup.getCreditWatchRatio,MBPGroup.java,"BigDecimal getCreditWatchRatio()
	{
		BigDecimal bd = super.getCreditWatchPercent();
		if (bd != null)
			return bd.divide(Env.ONEHUNDRED, 2, BigDecimal.ROUND_HALF_UP);
		return new BigDecimal(0.90);
	}	//	getCreditWatchRatio
"
org.compiere.model.MBPGroup.beforeSave,MBPGroup.java,"boolean beforeSave (boolean newRecord)
	{
		// TODO Auto-generated method stub
		return true;
	}
"
org.compiere.model.MBPGroup.afterSave,MBPGroup.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (newRecord & success)
			return insert_Accounting(""C_BP_Group_Acct"", ""C_AcctSchema_Default"", null);
		return success;
	}	//	afterSave
"
org.compiere.model.MBPGroup.beforeDelete,MBPGroup.java,"boolean beforeDelete ()
	{
		return delete_Accounting(""C_BP_Group_Acct"");
	}	//	beforeDelete
"
org.compiere.model.MBPGroup.toString,MBPGroup.java,"String toString()
    {
	    StringBuffer sb = new StringBuffer(""MBPGroup["").append(get_ID())
	        .append(""-"").append(getName());
	    sb.append(""]"");
	    return sb.toString();
    }	//	toString
"
org.compiere.model.MAttributeSet.get,MAttributeSet.java,"MAttributeSet get (Ctx ctx, int M_AttributeSet_ID)
	{
		Integer key = Integer.valueOf (M_AttributeSet_ID);
		MAttributeSet retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MAttributeSet (ctx, M_AttributeSet_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MAttributeSet.getMAttributes,MAttributeSet.java,"MAttribute[] getMAttributes (boolean instanceAttributes)
	{
		if ((m_instanceAttributes == null && instanceAttributes)
			|| m_productAttributes == null && !instanceAttributes)
		{
			String sql = ""SELECT mau.M_Attribute_ID ""
				+ ""FROM M_AttributeUse mau""
				+ "" INNER JOIN M_Attribute ma ON (mau.M_Attribute_ID=ma.M_Attribute_ID) ""
				+ ""WHERE mau.IsActive='Y' AND ma.IsActive='Y'""
				+ "" AND mau.M_AttributeSet_ID=? AND ma.IsInstanceAttribute=? ""	//	#1,2
				+ ""ORDER BY mau.SeqNo"";
			ArrayList<MAttribute> list = new ArrayList<MAttribute>();
			PreparedStatement pstmt = null;
			try
			{
				pstmt = DB.prepareStatement(sql, get_Trx());
				pstmt.setInt(1, getM_AttributeSet_ID());
				pstmt.setString(2, instanceAttributes ? ""Y"" : ""N"");
				ResultSet rs = pstmt.executeQuery();
				while (rs.next())
				{
					MAttribute ma = new MAttribute (getCtx(), rs.getInt(1), get_Trx());
					list.add (ma);
				}
				rs.close();
				pstmt.close();
				pstmt = null;
			}
			catch (SQLException ex)
			{
				log.log(Level.SEVERE, sql, ex);
			}
			try
			{
				if (pstmt != null)
					pstmt.close();
			}
			catch (SQLException ex1)
			{
			}
			pstmt = null;
			
			//	Differentiate attributes
			if (instanceAttributes)
			{
				m_instanceAttributes = new MAttribute[list.size()];
				list.toArray (m_instanceAttributes);
			}
			else
			{
				m_productAttributes = new MAttribute[list.size()];
				list.toArray (m_productAttributes);
			}
		}
		//
		if (instanceAttributes)
		{
			if (isInstanceAttribute() != m_instanceAttributes.length > 0)
				setIsInstanceAttribute(m_instanceAttributes.length > 0);
		}
		
		//	Return
		if (instanceAttributes)
			return m_instanceAttributes;
		return m_productAttributes;
	}	//	getMAttributes
"
org.compiere.model.MAttributeSet.isMandatory,MAttributeSet.java,"boolean isMandatory()
	{
		return !MANDATORYTYPE_NotMandatory.equals(getMandatoryType())
			|| isLotMandatory()
			|| isSerNoMandatory()
			|| isGuaranteeDateMandatory();
	}	//	isMandatory
"
org.compiere.model.MAttributeSet.isMandatoryAlways,MAttributeSet.java,"boolean isMandatoryAlways()
	{
		return MANDATORYTYPE_AlwaysMandatory.equals(getMandatoryType());
	}	//	isMandatoryAlways
"
org.compiere.model.MAttributeSet.isMandatoryShipping,MAttributeSet.java,"boolean isMandatoryShipping()
	{
		return MANDATORYTYPE_WhenShipping.equals(getMandatoryType());
	}	//	isMandatoryShipping
"
org.compiere.model.MAttributeSet.excludeEntry,MAttributeSet.java,"boolean excludeEntry (int AD_Column_ID, boolean isSOTrx)
	{
		if (m_excludes == null)
		{
			ArrayList<X_M_AttributeSetExclude> list = new ArrayList<X_M_AttributeSetExclude>();
			String sql = ""SELECT * FROM M_AttributeSetExclude WHERE IsActive='Y' AND M_AttributeSet_ID=?"";
			PreparedStatement pstmt = null;
			try
			{
				pstmt = DB.prepareStatement(sql, (Trx) null);
				pstmt.setInt (1, getM_AttributeSet_ID());
				ResultSet rs = pstmt.executeQuery ();
				while (rs.next ())
					list.add (new X_M_AttributeSetExclude (getCtx(), rs, null));
				rs.close ();
				pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				log.log (Level.SEVERE, sql, e);
			}
			try
			{
				if (pstmt != null)
					pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				pstmt = null;
			}
			m_excludes = new X_M_AttributeSetExclude[list.size ()];
			list.toArray (m_excludes);
		}
		//	Find it
		if (m_excludes != null && m_excludes.length > 0)
		{
			MColumn column = MColumn.get(getCtx(), AD_Column_ID);
			for (X_M_AttributeSetExclude element : m_excludes) {
				if (element.getAD_Table_ID() == column.getAD_Table_ID()
					&& element.isSOTrx() == isSOTrx)
					return true;
			}
		}
		return false;
	}	//	excludeEntry
"
org.compiere.model.MAttributeSet.isExcludeLot,MAttributeSet.java,"boolean isExcludeLot (int AD_Column_ID, boolean isSOTrx)
	{
		if (getM_LotCtl_ID() == 0)
			return true;
		if (m_excludeLots == null)
		{
			ArrayList<X_M_LotCtlExclude> list = new ArrayList<X_M_LotCtlExclude>();
			String sql = ""SELECT * FROM M_LotCtlExclude WHERE IsActive='Y' AND M_LotCtl_ID=?"";
			PreparedStatement pstmt = null;
			try
			{
				pstmt = DB.prepareStatement(sql, (Trx) null);
				pstmt.setInt (1, getM_LotCtl_ID());
				ResultSet rs = pstmt.executeQuery ();
				while (rs.next ())
					list.add (new X_M_LotCtlExclude (getCtx(), rs, null));
				rs.close ();
				pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				log.log (Level.SEVERE, sql, e);
			}
			try
			{
				if (pstmt != null)
					pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				pstmt = null;
			}
			m_excludeLots = new X_M_LotCtlExclude[list.size ()];
			list.toArray (m_excludeLots);
		}
		//	Find it
		if (m_excludeLots != null && m_excludeLots.length > 0)
		{
			MColumn column = MColumn.get(getCtx(), AD_Column_ID);
			for (X_M_LotCtlExclude element : m_excludeLots) {
				if (element.getAD_Table_ID() == column.getAD_Table_ID()
					&& element.isSOTrx() == isSOTrx)
					return true;
			}
		}
		return false;
	}	//	isExcludeLot
"
org.compiere.model.MAttributeSet.isExcludeSerNo,MAttributeSet.java,"boolean isExcludeSerNo (int AD_Column_ID, boolean isSOTrx)
	{
		if (getM_SerNoCtl_ID() == 0)
			return true;
		if (m_excludeSerNos == null)
		{
			ArrayList<X_M_SerNoCtlExclude> list = new ArrayList<X_M_SerNoCtlExclude>();
			String sql = ""SELECT * FROM M_SerNoCtlExclude WHERE IsActive='Y' AND M_SerNoCtl_ID=?"";
			PreparedStatement pstmt = null;
			try
			{
				pstmt = DB.prepareStatement(sql, (Trx) null);
				pstmt.setInt (1, getM_SerNoCtl_ID());
				ResultSet rs = pstmt.executeQuery ();
				while (rs.next ())
					list.add (new X_M_SerNoCtlExclude (getCtx(), rs, null));
				rs.close ();
				pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				log.log (Level.SEVERE, sql, e);
			}
			try
			{
				if (pstmt != null)
					pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				pstmt = null;
			}
			m_excludeSerNos = new X_M_SerNoCtlExclude[list.size ()];
			list.toArray (m_excludeSerNos);
		}
		//	Find it
		if (m_excludeSerNos != null && m_excludeSerNos.length > 0)
		{
			MColumn column = MColumn.get(getCtx(), AD_Column_ID);
			for (X_M_SerNoCtlExclude element : m_excludeSerNos) {
				if (element.getAD_Table_ID() == column.getAD_Table_ID()
					&& element.isSOTrx() == isSOTrx)
					return true;
			}
		}
		return false;
	}	//	isExcludeSerNo
"
org.compiere.model.MAttributeSet.getLotCharStart,MAttributeSet.java,"String getLotCharStart()
	{
		String s = super.getLotCharSOverwrite ();
		if (s != null && s.length() == 1 && !s.equals("" ""))
			return s;
		return ""\u00ab"";
	}	//	getLotCharStart
"
org.compiere.model.MAttributeSet.getLotCharEnd,MAttributeSet.java,"String getLotCharEnd()
	{
		String s = super.getLotCharEOverwrite ();
		if (s != null && s.length() == 1 && !s.equals("" ""))
			return s;
		return ""\u00bb"";
	}	//	getLotCharEnd
"
org.compiere.model.MAttributeSet.getSerNoCharStart,MAttributeSet.java,"String getSerNoCharStart()
	{
		String s = super.getSerNoCharSOverwrite ();
		if (s != null && s.length() == 1 && !s.equals("" ""))
			return s;
		return ""#"";
	}	//	getSerNoCharStart
"
org.compiere.model.MAttributeSet.getSerNoCharEnd,MAttributeSet.java,"String getSerNoCharEnd()
	{
		String s = super.getSerNoCharEOverwrite ();
		if (s != null && s.length() == 1 && !s.equals("" ""))
			return s;
		return """";
	}	//	getSerNoCharEnd
"
org.compiere.model.MAttributeSet.beforeSave,MAttributeSet.java,"boolean beforeSave (boolean newRecord)
	{
		if (!isInstanceAttribute()
			&& (isSerNo() || isLot() || isGuaranteeDate()) )
			setIsInstanceAttribute(true);
		return true;
	}	//	beforeSave
"
org.compiere.model.MAttributeSet.afterSave,MAttributeSet.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		//	Set Instance Attribute
		if (!isInstanceAttribute())
		{
			String sql = ""UPDATE M_AttributeSet mas""
				+ "" SET IsInstanceAttribute='Y' ""
				+ ""WHERE M_AttributeSet_ID="" + getM_AttributeSet_ID()
				+ "" AND IsInstanceAttribute='N'""
				+ "" AND (IsSerNo='Y' OR IsLot='Y' OR IsGuaranteeDate='Y'""
					+ "" OR EXISTS (SELECT * FROM M_AttributeUse mau""
						+ "" INNER JOIN M_Attribute ma ON (mau.M_Attribute_ID=ma.M_Attribute_ID) ""
						+ ""WHERE mau.M_AttributeSet_ID=mas.M_AttributeSet_ID""
						+ "" AND mau.IsActive='Y' AND ma.IsActive='Y'""
						+ "" AND ma.IsInstanceAttribute='Y')""
						+ "")"";
			int no = DB.executeUpdate(sql, get_Trx());
			if (no != 0)
			{
				log.warning(""Set Instance Attribute"");
				setIsInstanceAttribute(true);
			}
		}
		//	Reset Instance Attribute
		if (isInstanceAttribute() && !isSerNo() && !isLot() && !isGuaranteeDate())
		{
			String sql = ""UPDATE M_AttributeSet mas""
				+ "" SET IsInstanceAttribute='N' ""
				+ ""WHERE M_AttributeSet_ID="" + getM_AttributeSet_ID()
				+ "" AND IsInstanceAttribute='Y'""
				+ ""	AND IsSerNo='N' AND IsLot='N' AND IsGuaranteeDate='N'""
				+ "" AND NOT EXISTS (SELECT * FROM M_AttributeUse mau""
					+ "" INNER JOIN M_Attribute ma ON (mau.M_Attribute_ID=ma.M_Attribute_ID) ""
					+ ""WHERE mau.M_AttributeSet_ID=mas.M_AttributeSet_ID""
					+ "" AND mau.IsActive='Y' AND ma.IsActive='Y'""
					+ "" AND ma.IsInstanceAttribute='Y')"";
			int no = DB.executeUpdate(sql, get_Trx());
			if (no != 0)
			{
				log.warning(""Reset Instance Attribute"");
				setIsInstanceAttribute(false);
			}
		}
		return success;
	}	//	afterSave
"
org.compiere.model.MProductDownload.migrateDownloads,MProductDownload.java,"void migrateDownloads (Ctx ctx)
	{
		String sql = ""SELECT COUNT(*) FROM M_ProductDownload"";
		int no = DB.getSQLValue(null, sql);
		if (no > 0)
			return;
		//
		int count = 0;
		sql = ""SELECT AD_Client_ID, AD_Org_ID, M_Product_ID, Name, DownloadURL ""
			+ ""FROM M_Product ""
			+ ""WHERE DownloadURL IS NOT NULL"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				int AD_Client_ID = rs.getInt(1);
				int AD_Org_ID = rs.getInt(2);
				int M_Product_ID = rs.getInt(3);
				String Name = rs.getString(4);
				String DownloadURL = rs.getString(5);
				//
				MProductDownload pdl = new MProductDownload(ctx, 0, null);
				pdl.setClientOrg(AD_Client_ID, AD_Org_ID);
				pdl.setM_Product_ID(M_Product_ID);
				pdl.setName(Name);
				pdl.setDownloadURL(DownloadURL);
				if (pdl.save())
				{
					count++;
					String sqlUpdate = ""UPDATE M_Product SET DownloadURL = NULL WHERE M_Product_ID="" + M_Product_ID;
					int updated = DB.executeUpdate(sqlUpdate, (Trx) null);
					if (updated != 1)
						s_log.warning(""Product not updated"");
				}
				else
					s_log.warning(""Product Download not created M_Product_ID="" + M_Product_ID);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		s_log.info(""#"" + count);
	}	//	migrateDownloads
"
org.compiere.model.MProductDownload.get,MProductDownload.java,"MProductDownload get(Ctx ctx, int M_ProductDownload_ID)
	{
		Integer key = Integer.valueOf (M_ProductDownload_ID);
		MProductDownload retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MProductDownload (ctx, M_ProductDownload_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MProductDownload.toString,MProductDownload.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MProductDownload["")
			.append(get_ID())
			.append("",M_Product_ID="").append(getM_Product_ID())
			.append("","").append(getDownloadURL())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MProductDownload.getDownloadName,MProductDownload.java,"String getDownloadName()
	{
		String url = getDownloadURL();
		if (url == null || !isActive())
			return null;
		int pos = Math.max(url.lastIndexOf('/'), url.lastIndexOf('\\'));
		if (pos != -1)
			return url.substring(pos+1);
		return url;
	}	//	getDownloadName
"
org.compiere.model.MProductDownload.getDownloadURL,MProductDownload.java,"URL getDownloadURL (String directory)
	{
		String dl_url = getDownloadURL();
		if (dl_url == null || !isActive())
			return null;

		URL url = null;
		try
		{
			if (dl_url.indexOf (""://"") != -1)
				url = new URL (dl_url);
			else
			{
				File f = getDownloadFile (directory);
				if (f != null)
					url = f.toURI().toURL ();
			}
		}
		catch (Exception ex)
		{
			log.log(Level.WARNING, dl_url, ex);
			return null;
		}
		return url;
	}	//	getDownloadURL
"
org.compiere.model.MProductDownload.getDownloadFile,MProductDownload.java,"File getDownloadFile (String directory)
	{
		File file = new File (getDownloadURL());	//	absolute file
		if (file.exists())
			return file;
		if (directory == null || directory.length() == 0)
		{
			log.log(Level.WARNING, ""Not found "" + getDownloadURL());
			return null;
		}
		String downloadURL2 = directory;
		if (!downloadURL2.endsWith(File.separator))
			downloadURL2 += File.separator;
		downloadURL2 += getDownloadURL();
		file = new File (downloadURL2);
		if (file.exists())
			return file;

		log.log(Level.WARNING, ""Not found "" + getDownloadURL() + "" / "" + downloadURL2);
		return null;
	}	//	getDownloadFile
"
org.compiere.model.MProductDownload.getDownloadStream,MProductDownload.java,"InputStream getDownloadStream (String directory)
	{
		String dl_url = getDownloadURL();
		if (dl_url == null || !isActive())
			return null;

		InputStream in = null;
		try
		{
			if (dl_url.indexOf (""://"") != -1)
			{
				URL url = new URL (dl_url);
				in = url.openStream();
			}
			else //	file
			{
				File file = getDownloadFile(directory);
				if (file == null)
					return null;
				in = new FileInputStream (file);
			}
		}
		catch (Exception ex)
		{
			log.log(Level.WARNING, dl_url, ex);
			return null;
		}
		return in;
	}	//	getDownloadStream
"
org.compiere.model.MProductDownload.saveDownload,MProductDownload.java,"boolean saveDownload (MAttachmentEntry entry)
	{
		String dl_url = getDownloadURL();
		if (dl_url == null || !isActive())
		{
			log.info(""No Attachment"");
			return false;
		}

		File outFile = null;
		FileOutputStream out = null;
		try
		{
			if (dl_url.indexOf (""://"") != -1)
			{
				URL url = new URL (dl_url);
				outFile = new File(url.toURI());
			}
			else //	file
			{
				MClient client = MClient.get(getCtx());
				String directory = client.getDocumentDir();
				if (directory != null && directory.length() > 0)
				{
					File dir = new File(directory);
					if (!dir.exists() && !dir.mkdir())
					{
						log.warning(""Cannot create Directory: "" + directory);
						return false;
					}
					outFile = new File(directory, dl_url);
				}
				else
					outFile = new File(dl_url);
			}
			if (outFile.exists())
			{
				boolean success = outFile.delete();
				if( !success )
					log.warning(""Failed to delete file: "" + outFile.toString());
			}
			out = new FileOutputStream(outFile);
			byte[] data = entry.getData(); 
			out.write(data);
			out.flush();
			out.close();
			log.info(outFile.toString() + "" -> "" + (data.length/1024) + ""kB"");
		}
		catch (Exception ex)
		{
			log.log(Level.WARNING, dl_url, ex);
			return false;
		}
		return true;
	}	//	saveDownload
"
org.compiere.model.PP_Authorize.processCC,PP_Authorize.java,"boolean processCC ()
		throws IllegalArgumentException
	{
		setEncoded(true);
		return m_ok;
	}	//	processCC
"
org.compiere.model.PP_Authorize.isProcessedOK,PP_Authorize.java,"boolean isProcessedOK ()
	{
		return m_ok;
	}	//	isProcessedOK
"
org.compiere.model.MAlertProcessor.getActive,MAlertProcessor.java,"MAlertProcessor[] getActive (Ctx ctx)
	{
		ArrayList<MAlertProcessor> list = new ArrayList<MAlertProcessor>();
		String sql = ""SELECT * FROM AD_AlertProcessor WHERE IsActive='Y'"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MAlertProcessor (ctx, rs, null));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MAlertProcessor[] retValue = new MAlertProcessor[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getActive
"
org.compiere.model.MAlertProcessor.getServerID,MAlertProcessor.java,"String getServerID ()
	{
		return ""AlertProcessor"" + get_ID();
	}	//	getServerID
"
org.compiere.model.MAlertProcessor.getDateNextRun,MAlertProcessor.java,"Timestamp getDateNextRun (boolean requery)
	{
		if (requery)
			load(get_Trx());
		return getDateNextRun();
	}	//	getDateNextRun
"
org.compiere.model.MAlertProcessor.getLogs,MAlertProcessor.java,"CompiereProcessorLog[] getLogs ()
	{
		ArrayList<MAlertProcessorLog> list = new ArrayList<MAlertProcessorLog>();
		String sql = ""SELECT * ""
			+ ""FROM AD_AlertProcessorLog ""
			+ ""WHERE AD_AlertProcessor_ID=? "" 
			+ ""ORDER BY Created DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, getAD_AlertProcessor_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MAlertProcessorLog (getCtx(), rs, null));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MAlertProcessorLog[] retValue = new MAlertProcessorLog[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getLogs
"
org.compiere.model.MAlertProcessor.deleteLog,MAlertProcessor.java,"int deleteLog()
	{
		if (getKeepLogDays() < 1)
			return 0;
		String sql = ""DELETE FROM AD_AlertProcessorLog ""
			+ ""WHERE AD_AlertProcessor_ID="" + getAD_AlertProcessor_ID() 
			//jz + "" AND (Created+"" + getKeepLogDays() + "") < SysDate"";
			+ "" AND addDays(Created,"" + getKeepLogDays() + "") < SysDate"";
		DB.executeUpdate(sql, get_Trx());
		return 0;
	}	//	deleteLog
"
org.compiere.model.MAlertProcessor.getAlerts,MAlertProcessor.java,"MAlert[] getAlerts (boolean reload)
	{
		if (m_alerts != null && !reload)
			return m_alerts;
		String sql = ""SELECT * FROM AD_Alert ""
			+ ""WHERE AD_AlertProcessor_ID=?"";
		ArrayList<MAlert> list = new ArrayList<MAlert>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, getAD_AlertProcessor_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MAlert (getCtx(), rs, null));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		m_alerts = new MAlert[list.size ()];
		list.toArray (m_alerts);
		return m_alerts;
	}	//	getAlerts
"
org.compiere.model.MLead.setAD_User_ID,MLead.java,"void setAD_User_ID()
	{
		if (getAD_User_ID() != 0)
			return;
		String email = getEMail();
		if (email != null && email.length() > 0)
		{
			m_user = MUser.get(getCtx(), email, get_Trx());
			if (m_user != null)
			{
			    super.setAD_User_ID(m_user.getAD_User_ID());
				if (getC_BPartner_ID() == 0)
					setC_BPartner_ID(m_user.getC_BPartner_ID());
				else if (m_user.getC_BPartner_ID() != getC_BPartner_ID())
				{
					log.warning(""@C_BPartner_ID@ (ID="" + getC_BPartner_ID() 
						+ "") <> @AD_User_ID@ @C_BPartner_ID@ (ID="" + m_user.getC_BPartner_ID() + "")"");
				}
			}
		}
	}	//	setAD_User_ID
"
org.compiere.model.MLead.setAD_User_ID,MLead.java,"void setAD_User_ID(int AD_User_ID)
	{
	    super.setAD_User_ID(AD_User_ID);
	    getUser();
	}	//	setAD_User_ID
"
org.compiere.model.MLead.getUser,MLead.java,"MUser getUser()
    {
		if (getAD_User_ID() == 0)
			m_user = null;
		else if (m_user == null 
			|| m_user.getAD_User_ID() != getAD_User_ID())
			m_user = new MUser(getCtx(), getAD_User_ID(), get_Trx());
	    return m_user;
    }	//	getUser
"
org.compiere.model.MLead.setC_BPartner_ID,MLead.java,"void setC_BPartner_ID(int C_BPartner_ID)
	{
	    super.setC_BPartner_ID(C_BPartner_ID);
	    getBPartner();
	}	//	setC_BPartner_ID
"
org.compiere.model.MLead.getBPartner,MLead.java,"MBPartner getBPartner()
	{
		if (getC_BPartner_ID() == 0)
			m_bp = null;
		else if (m_bp == null 
			|| m_bp.getC_BPartner_ID() != getC_BPartner_ID())
			m_bp = new MBPartner (getCtx(), getC_BPartner_ID(), get_Trx());
		return m_bp;
	}	//	getBPartner
"
org.compiere.model.MLead.setR_Request_ID,MLead.java,"void setR_Request_ID(int R_Request_ID)
	{
	    super.setR_Request_ID(R_Request_ID);
	    getRequest();
	}	//	setR_Request_ID
"
org.compiere.model.MLead.getRequest,MLead.java,"MRequest getRequest()
	{
		if (getR_Request_ID() == 0)
			m_request = null;
		else if (m_request == null 
			|| m_request.getR_Request_ID() != getR_Request_ID())
			m_request = new MRequest(getCtx(), getR_Request_ID(), get_Trx());
		return m_request;
	}	//	getRequest
"
org.compiere.model.MLead.setR_Status_ID,MLead.java,"void setR_Status_ID(int R_Status_ID)
	{
		if (isR_Status_IDValid(R_Status_ID))
			super.setR_Status_ID (R_Status_ID);
		else
			super.setR_Status_ID (0);
		getStatus();
	}	//	setR_Status_ID
"
org.compiere.model.MLead.isR_Status_IDValid,MLead.java,"boolean isR_Status_IDValid (int R_Status_ID)
	{
		if (R_Status_ID == 0)
			return true;
		
		m_Status = MStatus.get (getCtx(), R_Status_ID);
		int R_StatusCategory_ID = m_Status.getR_StatusCategory_ID();
		//
		int R_RequestType_ID = getR_RequestType_ID();
		if (R_RequestType_ID == 0)
		{
			log.warning (""No Client Request Type"");
			return false;
		}
		MRequestType rt = MRequestType.get (getCtx(), R_RequestType_ID);
		if (rt.getR_StatusCategory_ID() != R_StatusCategory_ID)
		{
			log.warning (""Status Category different - Status("" 
				+ R_StatusCategory_ID + "") <> RequestType("" 
				+ rt.getR_StatusCategory_ID() + "")"");
			return false;
		}
		return true;
	}	//	isR_Status_IDValid
"
org.compiere.model.MLead.getR_RequestType_ID,MLead.java,"int getR_RequestType_ID()
	{
		MClientInfo ci = MClientInfo.get (getCtx(), getAD_Client_ID());
		int R_RequestType_ID = ci.getR_RequestType_ID();
		if (R_RequestType_ID != 0)
			return R_RequestType_ID;
		log.warning(""Set Request Type in Window Client Info"");
		
		//	Default
		MRequestType rt = MRequestType.getDefault (getCtx());
		if (rt != null)
		{
			R_RequestType_ID = rt.getR_RequestType_ID();
		//	ci.setR_RequestType_ID(R_RequestType_ID);
		//	ci.save();
			return R_RequestType_ID;
		}
		//
		return 0;
	}	//	getR_RequestType_ID
"
org.compiere.model.MLead.getStatus,MLead.java,"MStatus getStatus()
	{
		if (getR_Status_ID() == 0)
			m_Status = null;
		else if (m_Status == null 
			|| m_Status.getR_Status_ID() != getR_Status_ID())
			m_Status = MStatus.get (getCtx(), getR_Status_ID()); 
		return m_Status;
	}	//	getStatus
"
org.compiere.model.MLead.setC_Project_ID,MLead.java,"void setC_Project_ID(int C_Project_ID)
	{
	    super.setC_Project_ID(C_Project_ID);
	    getProject();
	}	//	setC_Project_ID
"
org.compiere.model.MLead.getProject,MLead.java,"MProject getProject()
	{
		if (getC_Project_ID() == 0)
			m_project = null;
		else if (m_project == null 
			|| m_project.getC_Project_ID() != getC_Project_ID())
			m_project = new MProject(getCtx(), getC_Project_ID(), get_Trx());
		return m_project;
	}	//	getProject
"
org.compiere.model.MLead.getName,MLead.java,"String getName()
	{
    	String name = super.getName();			//	Subject
    	if (name == null)
    	{
    		name = getBPName();					//	BPartner
    		if (name == null)
    		{
    			name = getContactName();		//	Contact
    			if (name == null)
    			{
    				name = getDocumentNo();		//	DocumentNo
    				if (name == null)
    					name = ""Lead"";
    			}
    		}
    	}
    	return name;
	}	//	getName
"
org.compiere.model.MLead.toString,MLead.java,"String toString()
    {
	    StringBuffer sb = new StringBuffer(""MLead["");
	    sb.append(get_ID())
	    	.append(""-"").append(getName()).append(""]"");
	    return sb.toString();
    }	//	toString
"
org.compiere.model.MLead.createBP,MLead.java,"String createBP()
    {
    	if (getC_BPartner_ID() != 0 && getAD_User_ID() != 0 && getC_BPartner_Location_ID() == 0)
    		return ""@AlreadyExists@: @C_BPartner_ID@ (ID="" + getC_BPartner_ID() + "")"";
    	
    	//	BPartner
    	if (getC_BPartner_ID() == 0 
    		&& (getBPName() != null && getBPName().length() > 0))
    	{
    		//	Existing User
    		m_user = getUser();
    		if (m_user != null)
    		{
    			if (m_user.getC_BPartner_ID() != 0)
    			{
    				setC_BPartner_ID(m_user.getC_BPartner_ID());
    				log.info(""Set to BPartner of User - "" + m_user);
    				return createBPLocation();
    			}
    		}
    		//
    		m_bp = new MBPartner(getCtx(), get_Trx());	//	Template
    		m_bp.setAD_Org_ID(getAD_Org_ID());
    		m_bp.setValue(getBPName());
    		m_bp.setName(getBPName());
    		m_bp.setIsCustomer(true);
    		//
    		if (getC_BP_Group_ID() != 0)
    			m_bp.setC_BP_Group_ID(getC_BP_Group_ID());
    		if (getC_BP_Size_ID() != 0)
    			m_bp.setC_BP_Size_ID(getC_BP_Size_ID());
    		if (getC_BP_Status_ID() != 0)
    			m_bp.setC_BP_Status_ID(getC_BP_Status_ID());
    		if (getC_IndustryCode_ID() != 0)
    			m_bp.setC_IndustryCode_ID(getC_IndustryCode_ID());
    		if (getNAICS() != null)
    			m_bp.setNAICS(getNAICS());
    		if (getDUNS() != null)
    			m_bp.setDUNS(getDUNS());
    		if (getNumberEmployees() != 0)
    			m_bp.setNumberEmployees(getNumberEmployees());
    		if (getSalesVolume() != 0)
    			m_bp.setSalesVolume(getSalesVolume());
    		if (getSalesRep_ID() != 0)
    			m_bp.setSalesRep_ID(getSalesRep_ID());
    		if (!m_bp.save())
    			return ""@SaveError@"";
    		//	Update User
    		if (m_user != null && m_user.getC_BPartner_ID() == 0)
    		{
    			m_user.setC_BPartner_ID (m_bp.getC_BPartner_ID());
    			m_user.save();
    		}
    		//	Save BP
    		setC_BPartner_ID(m_bp.getC_BPartner_ID());
    	}	//	BPartner

    	String error = createBPContact();
    	if (error != null && error.length() > 0)
    		return error;
    	return createBPLocation();
    }	//	createBP
"
org.compiere.model.MLead.createBPContact,MLead.java,"String createBPContact()
    {
    	//	Contact exists
    	if (getAD_User_ID() != 0)
    		return null;
    	
    	//	Something to save
    	if ((getContactName() != null && getContactName().length() > 0)
    		)
    		;
    	else
    	{
    		log.fine(""No BP Contact Info to save"");
    		return null;
    	}
    		
   		if (m_user == null)
   		{
   			if (m_bp == null)
   				m_user = new MUser(getCtx(), 0, get_Trx());
   			else
   				m_user = new MUser(m_bp);
   		}
   		m_user.setName(getContactName());
   		//
   		if (getC_Job_ID() != 0)
   			m_user.setC_Job_ID(getC_Job_ID());
   		if (getEMail() != null)
   			m_user.setEMail(getEMail());
   		if (getC_Greeting_ID() != 0)
  			m_user.setC_Greeting_ID(getC_Greeting_ID());
   		if (getPhone() != null)
   			m_user.setPhone(getPhone());
   		if (getPhone2() != null)
   			m_user.setPhone2(getPhone2());
   		if (getFax() != null)
   			m_user.setFax(getFax());
   		//
   		if (!m_user.save())
   			log.warning(""Contact not saved"");
   		else
   			setAD_User_ID(m_user.getAD_User_ID());
   		return null;
    }	//	createBPContact
"
org.compiere.model.MLead.createBPLocation,MLead.java,"String createBPLocation()
    {
    	if (getC_BPartner_Location_ID() != 0
    		|| getC_Country_ID() == 0)	//	mandatory
    		return null;
    	
    	//	Something to save
    	if ((getAddress1() != null && getAddress1().length() > 0)
    		|| (getPostal() != null  && getPostal().length() > 0)
    		|| (getCity() != null  && getCity().length() > 0)
    		|| (getRegionName() != null  && getRegionName().length() > 0)
    	)
    		;
    	else
    	{
    		log.fine(""No BP Location Info to save"");
    		return null;
    	}
    	
    	//	Address
		MLocation location = new MLocation(getCtx(), getC_Country_ID(), 
			getC_Region_ID(), getCity(), get_Trx());
		location.setAddress1(getAddress1());
		location.setAddress2(getAddress2());
		location.setPostal(getPostal());
		location.setPostal_Add(getPostal_Add());
		location.setRegionName(getRegionName());
		if (location.save())
		{
			MBPartnerLocation bpl = new MBPartnerLocation (m_bp);
			bpl.setC_Location_ID(location.getC_Location_ID());
			bpl.setPhone(getPhone());
			bpl.setPhone2(getPhone2());
			bpl.setFax(getFax());
			if (bpl.save())
				setC_BPartner_Location_ID(bpl.getC_BPartner_Location_ID());
		}
    	return null;
    }	//	createBPLocation
"
org.compiere.model.MLead.createProject,MLead.java,"String createProject(int C_ProjectType_ID)
    {
    	if (getC_Project_ID() != 0)
    		return ""@AlreadyExists@: @C_Project_ID@ (ID="" + getC_Project_ID() + "")"";
    	if (getC_BPartner_ID() == 0)
    	{
    		String retValue = createBP();
    		if (retValue != null)
    			return retValue;
    	}
    	m_project = new MProject(getCtx(), 0, get_Trx());
    	m_project.setAD_Org_ID(getAD_Org_ID());
    	m_project.setProjectLineLevel(X_C_Project.PROJECTLINELEVEL_Project);
    	m_project.setName(getName());
    	m_project.setDescription(getDescription());
    	m_project.setNote(getHelp());
    	//
    	m_project.setC_BPartner_ID(getC_BPartner_ID());
    	m_project.setC_BPartner_Location_ID(getC_BPartner_Location_ID());
		m_project.setAD_User_ID(getAD_User_ID());
		m_project.setC_BPartnerSR_ID(getC_BPartnerSR_ID());
		m_project.setC_Campaign_ID(getC_Campaign_ID());

		m_project.setC_ProjectType_ID(C_ProjectType_ID);
		m_project.setSalesRep_ID(getSalesRep_ID());
		m_project.setC_SalesRegion_ID (getC_SalesRegion_ID());
		if (!m_project.save())
			return ""@SaveError@"";
		//
		if (getRequest() != null)
		{
			m_request.setC_Project_ID(m_project.getC_Project_ID());
			m_request.save();
		}
		//
    	setC_Project_ID(m_project.getC_Project_ID());
    	return null;
    }	//	createProject
"
org.compiere.model.MLead.createRequest,MLead.java,"String createRequest()
    {
    	int R_RequestType_ID = getR_RequestType_ID();
    	if (R_RequestType_ID == 0)
    		return ""@NotFound@: @R_RequestType_ID@ (@AD_Client_ID@)"";
    	return createRequest (R_RequestType_ID);
    }	//	createRequest
"
org.compiere.model.MLead.createRequest,MLead.java,"String createRequest(int R_RequestType_ID)
    {
    	if (getR_Request_ID() != 0)
    		return ""@AlreadyExists@: @R_Request_ID@ (ID="" + getR_Request_ID() + "")"";
    	if (getC_BPartner_ID() == 0)
    	{
    		String retValue = createBP();
    		if (retValue != null)
    			return retValue;
    	}
    	m_request = new MRequest(getCtx(), 0, get_Trx());
    	m_request.setAD_Org_ID(getAD_Org_ID());
    	String summary = getName();
    	if (summary == null)
    		summary = getHelp();
    	if (summary == null)
    		summary = getSummary();
    	if (summary == null)
    		summary = getDescription();
    	m_request.setSummary(summary);
    	//
    	m_request.setR_RequestType_ID(R_RequestType_ID);
    	if (isR_Status_IDValid (getR_Status_ID()))
    		m_request.setR_Status_ID(getR_Status_ID());
    	else
    		m_request.setR_Status_ID();
    	//
    	m_request.setC_Lead_ID (getC_Lead_ID());
    	//
    	m_request.setC_BPartner_ID(getC_BPartner_ID());
		m_request.setAD_User_ID(getAD_User_ID());
		m_request.setC_Project_ID(getC_Project_ID());
		m_request.setC_Campaign_ID(getC_Campaign_ID());
		m_request.setR_Source_ID (getR_Source_ID());
		m_request.setC_BPartnerSR_ID (getC_BPartnerSR_ID());
		m_request.setC_SalesRegion_ID (getC_SalesRegion_ID());

		m_request.setSalesRep_ID(getSalesRep_ID());
		if (!m_request.save())
			return ""@SaveError@"";
		//
    	setR_Request_ID(m_request.getR_Request_ID());    	
    	return null;
    }	//	createRequest
"
org.compiere.model.MLead.beforeSave,MLead.java,"boolean beforeSave(boolean newRecord)
    {
    	//	EMail Address specified
    	if (getEMail() != null && getAD_User_ID() == 0)
    		setAD_User_ID();
    	
    	if (newRecord || is_ValueChanged(""R_Status_ID""))
    	{
    		if (!isR_Status_IDValid (getR_Status_ID()))
    			setR_Status_ID (0);
    		else if (m_Status != null)
    			setProcessed(m_Status.isClosed());
    	}
    	
        return true;
    }	//	beforeSave
"
org.compiere.model.MLead.afterSave,MLead.java,"boolean afterSave(boolean newRecord, boolean success)
    {
    	if (!success)
    		return success;
    	
    	//	Create Contact Interest
    	if (getAD_User_ID() != 0 && getR_InterestArea_ID() != 0
    		&& (is_ValueChanged(""AD_User_ID"") || is_ValueChanged(""R_InterestArea_ID"")))
    	{
    		MContactInterest ci = MContactInterest.get (getCtx(),
    			getR_InterestArea_ID(), getAD_User_ID(), 
    			true, get_Trx());
			ci.save();		//	don't subscribe or re-activate
    	}
    	return true;
    }	//	afterSave
"
org.compiere.model.MLead.main,MLead.java,"void main(String[] args)
    {
    	Compiere.startup(true);
    	
		HashMap<String,String> parameter = new HashMap<String,String>();
		parameter.put(""EMail"",""test1""); 
		parameter.put(""SalesRep_ID"",""0""); 
		parameter.put(""AD_Org_ID"",""0""); 
		parameter.put(""Submit"",""Submit""); 
		parameter.put(""ForwardTo"",""http://www.compiere.com""); 
		parameter.put(""ContactName"",""Test 1""); 
		parameter.put(""Name"",""Test 1""); 
		parameter.put(""AD_Client_ID"",""11""); 
		parameter.put(""R_Source_ID"",""100"");
   
    	MLead lead = new MLead (Env.getCtx(), parameter, null);
		lead.save();
		System.out.println(lead);
    }	//	main
"
org.compiere.model.MPaySchedule.getParent,MPaySchedule.java,"MPaymentTerm getParent ()
	{
		if (m_parent == null)
			m_parent = new MPaymentTerm (getCtx(), getC_PaymentTerm_ID(), get_Trx());
		return m_parent;
	}	//	getParent
"
org.compiere.model.MPaySchedule.setParent,MPaySchedule.java,"void setParent (MPaymentTerm parent)
	{
		m_parent = parent;
	}	//	setParent
"
org.compiere.model.MPaySchedule.beforeSave,MPaySchedule.java,"boolean beforeSave (boolean newRecord)
	{
		if (is_ValueChanged(""Percentage""))
		{
			log.fine(""beforeSave"");
			setIsValid(false);
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MPaySchedule.afterSave,MPaySchedule.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (newRecord || is_ValueChanged(""Percentage""))
		{
			log.fine(""afterSave"");
			getParent();
			m_parent.validate();
			m_parent.save();
		}
		return success;
	}	//	afterSave
"
org.compiere.model.MWebProjectDomain.get,MWebProjectDomain.java,"MWebProjectDomain get(Ctx ctx, String ServerName, Trx trx) {
		MWebProjectDomain thisWebProjectDomain = null;
		String sql = ""SELECT * FROM CM_WebProject_Domain WHERE lower(FQDN) LIKE ? ORDER by CM_WebProject_Domain_ID DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, trx);
			pstmt.setString(1, ServerName);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				thisWebProjectDomain = (new MWebProjectDomain(ctx, rs, trx));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return thisWebProjectDomain;
	}
"
org.compiere.model.MTableIndex.get,MTableIndex.java,"MTableIndex[] get (MTable table)
	{
		ArrayList<MTableIndex> list = new ArrayList<MTableIndex>();
		String sql = ""SELECT * FROM AD_TableIndex WHERE AD_Table_ID=? AND IsActive='Y'"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, table.get_Trx());
			pstmt.setInt (1, table.getAD_Table_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MTableIndex (table.getCtx(), rs, table.get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		MTableIndex[] retValue = new MTableIndex[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MTableIndex.getTableIndexesByQuery,MTableIndex.java,"ArrayList<MTableIndex> getTableIndexesByQuery(Ctx ctx, String sql)
	{
		PreparedStatement pstmt = null;
		ArrayList<MTableIndex> list = new ArrayList<MTableIndex>();
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MTableIndex tableIndex = new MTableIndex (ctx, rs, null);
				list.add(tableIndex);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return list;
	}	//	getTableIndexes
"
org.compiere.model.MTableIndex.getColumns,MTableIndex.java,"MIndexColumn[] getColumns(boolean reload)
	{
		if (m_columns != null && !reload)
			return m_columns;
		ArrayList<MIndexColumn> list = new ArrayList<MIndexColumn>();
		String sql = ""SELECT * FROM AD_IndexColumn WHERE AD_TableIndex_ID=?""
			+ "" ORDER BY SeqNo"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getAD_TableIndex_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MIndexColumn (getCtx(), rs, get_Trx ()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		m_columns = new MIndexColumn[list.size ()];
		list.toArray (m_columns);
		return m_columns;
	}	//	getLines
"
org.compiere.model.MTableIndex.getTableName,MTableIndex.java,"String getTableName()
	{
		int AD_Table_ID = getAD_Table_ID();
		return MTable.getTableName (getCtx(), AD_Table_ID);
	}	//	getTableName
"
org.compiere.model.MTableIndex.createDDL,MTableIndex.java,"String createDDL()
	{
		StringBuffer sql = null;
		if (!isCreateConstraint())
		{
			sql = new StringBuffer(""CREATE "");
			if (isUnique())
				sql.append (""UNIQUE "");
			sql.append(""INDEX "").append (getName())
				.append("" ON "").append(getTableName())
				.append("" ("");
			//
			getColumns(false);
			for (int i = 0; i < m_columns.length; i++)
			{
				MIndexColumn ic = m_columns[i];
				if (i > 0)
					sql.append("","");
				sql.append (ic.getColumnName());
			}
			
			sql.append("")"");
		}
		else if (isUnique())
		{
			sql = new StringBuffer(""ALTER TABLE "" + getTableName() + "" ADD CONSTRAINT "" + getName() + "" UNIQUE ("");
			getColumns(false);
			for (int i = 0; i < m_columns.length; i++)
			{
				MIndexColumn ic = m_columns[i];
				if (i > 0)
					sql.append("","");
				sql.append (ic.getColumnName());
			}
			
			sql.append("")"");
		}
		else
		{
			log.severe(""Neither index nor unique constraint with "" + getTableName());
			return """";
		}
			
		return sql.toString();
	}	//	createDDL
"
org.compiere.model.MTableIndex.getDDL,MTableIndex.java,"String getDDL()
	{
		if (m_ddl == null)
			m_ddl = createDDL();
		return m_ddl;
	}	//	getDDL
"
org.compiere.model.MTableIndex.toString,MTableIndex.java,"String toString()
	{
		StringBuffer sb = new StringBuffer (""MTableIndex["");
		sb.append (get_ID()).append (""-"")
			.append (getName ())
			.append ("",AD_Table_ID="").append (getAD_Table_ID())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MHierarchy.get,MHierarchy.java,"MHierarchy get (Ctx ctx, int PA_Hierarchy_ID)
	{
		Integer key = Integer.valueOf (PA_Hierarchy_ID);
		MHierarchy retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MHierarchy (ctx, PA_Hierarchy_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	} //	get
"
org.compiere.model.MHierarchy.getAD_Tree_ID,MHierarchy.java,"int getAD_Tree_ID (String TreeType)
	{
		if (X_AD_Tree.TREETYPE_Activity.equals(TreeType))
			return getAD_Tree_Activity_ID();
		if (X_AD_Tree.TREETYPE_BPartner.equals(TreeType))
			return getAD_Tree_BPartner_ID();
		if (X_AD_Tree.TREETYPE_Campaign.equals(TreeType))
			return getAD_Tree_Campaign_ID();
		if (X_AD_Tree.TREETYPE_ElementValue.equals(TreeType))
			return getAD_Tree_Account_ID();
		if (X_AD_Tree.TREETYPE_Organization.equals(TreeType))
			return getAD_Tree_Org_ID();
		if (X_AD_Tree.TREETYPE_Product.equals(TreeType))
			return getAD_Tree_Product_ID();
		if (X_AD_Tree.TREETYPE_Project.equals(TreeType))
			return getAD_Tree_Project_ID();
		if (X_AD_Tree.TREETYPE_SalesRegion.equals(TreeType))
			return getAD_Tree_SalesRegion_ID();
		//
		log.warning(""Not supported: "" + TreeType);
		return 0;
	}	//	getAD_Tree_ID
"
org.compiere.model.MIndex.cleanUp,MIndex.java,"int cleanUp (Trx trx, int AD_Client_ID, int AD_Table_ID, int Record_ID)
	{
		StringBuffer sb = new StringBuffer (""DELETE FROM K_Index ""
			+ ""WHERE AD_Client_ID="" + AD_Client_ID + "" AND ""
			+ ""AD_Table_ID="" + AD_Table_ID + "" AND ""
			+ ""Record_ID="" + Record_ID);
		int no = DB.executeUpdate(sb.toString(), trx);
		return no;
	}
"
org.compiere.model.MIndex.setKeyword,MIndex.java,"void setKeyword (String Keyword)
	{
		String kw = standardizeKeyword(Keyword);
		if (kw == null)
			kw = ""?"";
		super.setKeyword (kw);
	}	//	setKeyword
"
org.compiere.model.MIndex.beforeSave,MIndex.java,"boolean beforeSave (boolean newRecord)
	{
		if (newRecord || is_ValueChanged(""Keyword""))
			setKeyword(getKeyword());
		if (getKeyword().equals(""?""))
		{
			log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""Keyword""));
			return false;
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MIndex.indexStringBuffer,MIndex.java,"Hashtable<String, String> indexStringBuffer(StringBuffer thisText)
	{
		return indexString(thisText.toString());
	}
"
org.compiere.model.MIndex.indexString,MIndex.java,"Hashtable<String,String> indexString(String thisText)
	{
 		thisText = removeHTML(thisText);
		if (thisText!=null) {
			String [] keywords = thisText.toUpperCase().split(""\\t|\\p{Punct}|\\p{Space}"");
			Hashtable<String,String> keyhash = new Hashtable<String,String>(keywords.length);
			int currentPos = 0;
			for (int i=0;i<keywords.length;i++)
			{	
				String thisExcerpt = """";
				if (keywords[i].length()>=2) 
				{
					if (!keyhash.contains(keywords[i]))
					{
						int startExcerpt = thisText.toUpperCase().indexOf(keywords[i],currentPos);
						if (startExcerpt>50)
							startExcerpt = startExcerpt - 50;
						if (startExcerpt>thisText.length () && startExcerpt>50 && thisText.length()>50) 
							startExcerpt = thisText.length()-50;
						int endExcerpt = thisText.toUpperCase().indexOf(keywords[i],currentPos) + keywords[i].length();
						if (endExcerpt>currentPos)
							currentPos = endExcerpt;
						if (endExcerpt<thisText.length()-50)
							endExcerpt = endExcerpt + 50;
						if (endExcerpt>thisText.length()) 
							endExcerpt = thisText.length ();
						thisExcerpt = thisText.substring(startExcerpt,endExcerpt);
						keyhash.put(keywords[i],thisExcerpt);
					}
				}
			}
			return keyhash;
		} else {
			return null;
		}
			
	}
"
org.compiere.model.MIndex.runIndex,MIndex.java,"boolean runIndex(String thisText, Ctx ctx, Trx trx, 
		int tableID, int recordID, int CMWebProjectID, Timestamp sourceUpdated) 
	{
		if (thisText!=null) {
			Hashtable<String, String> keyHash = indexString(thisText);
	        for (Enumeration<String> e=keyHash.keys(); e.hasMoreElements();) {
	            String name = e.nextElement();
	            String value = keyHash.get(name);
	            MIndex thisIndex = new MIndex(ctx, 0, trx);
	            thisIndex.setAD_Table_ID(tableID);
	            if (CMWebProjectID>0)
	                thisIndex.setCM_WebProject_ID(CMWebProjectID);
	            thisIndex.setExcerpt(value);
	            thisIndex.setKeyword(name);
	            thisIndex.setRecord_ID(recordID);
	            thisIndex.setSourceUpdated(sourceUpdated);
	            thisIndex.save();
	        }
	        return true;
		} else {
			return false;
		}
	}
"
org.compiere.model.MIndex.reIndex,MIndex.java,"void reIndex(boolean runCleanUp, String[] toBeIndexed, Ctx ctx, 
		int AD_Client_ID, int AD_Table_ID, int Record_ID, int CM_WebProject_ID, Timestamp lastUpdated) 
	{
		Trx trx = Trx.get(""ReIndex_"" + AD_Table_ID + ""_"" + Record_ID);
		try {
			if (!runCleanUp)
			{
				MIndex.cleanUp(trx, AD_Client_ID, AD_Table_ID, Record_ID);
			}
			for (String element : toBeIndexed) {
				MIndex.runIndex(element, ctx, trx, AD_Table_ID, Record_ID, 
					CM_WebProject_ID, lastUpdated);
			}
			trx.commit();
		}
		finally{
			trx.close();
		}
	}
"
org.compiere.model.MIndex.removeHTML,MIndex.java,"String removeHTML(String textElement) {
		String retValue = textElement.replaceAll (""<?\\w+((\\s+\\w+(\\s*=\\s*(?:\""b(.|\\n)*?\""|'(.|\\n)*?'|[^'\"">\\s]+))?)+\\s*|\\s*)/?>"", "" "");
		retValue = retValue.replaceAll (""</"", "" "");
		retValue = retValue.replaceAll (""\\\\n"", "" "");
		return retValue;
	}
"
org.compiere.model.MIndex.standardizeKeyword,MIndex.java,"String standardizeKeyword (String keyword)
	{
		if (keyword == null)
			return null;
		keyword = keyword.trim();
		if (keyword.length() == 0)
			return null;
		//
		keyword = keyword.toUpperCase();	//	default locale
		StringBuffer sb = new StringBuffer();
		char[] chars = keyword.toCharArray();
		for (char c : chars) {
			sb.append(standardizeCharacter(c));
		}
		return sb.toString();
	}	//	standardizeKeyword
"
org.compiere.model.MIndex.standardizeCharacter,MIndex.java,"String standardizeCharacter (char c)
	{
		if (c >= '!' && c <= 'Z')		//	includes Digits
			return String.valueOf(c);
		//
		int index = Arrays.binarySearch(s_char, c);
		if (index < 0)
			return String.valueOf(c);
		return s_string[index];
	}	//	standardizeKeyword
"
org.compiere.model.MIndex.getResults,MIndex.java,"MIndex[] getResults(String query, Ctx ctx, Trx trx) 
	{
		String sql = ""SELECT * FROM K_Index WHERE K_Index_ID IN ("" +
				""SELECT MAX(K_Index_ID) FROM K_Index WHERE "" +
				  ""Keyword LIKE ? GROUP BY AD_Table_ID, Record_ID)"";
		Hashtable<Integer,MIndex> tTable = new Hashtable<Integer,MIndex>();
		PreparedStatement pstmt = null;
		try
		{
			// First lookup full word
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setString (1, query.toUpperCase ());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MIndex tIndex = new MIndex(ctx, rs, trx);
				tTable.put (tIndex.get_ID (), tIndex);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
			// Second lookup with appended %
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setString (1, query.toUpperCase () + ""%"");
			rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MIndex tIndex = new MIndex(ctx, rs, trx);
				if(!tTable.containsKey (tIndex.get_ID ())) {
					tTable.put (tIndex.get_ID (), tIndex);
				}
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
			// Third lookup with prefix% and appended %
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setString (1, ""%"" + query.toUpperCase () + ""%"");
			rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MIndex tIndex = new MIndex(ctx, rs, trx);
				if(!tTable.containsKey (tIndex.get_ID ())) {
					tTable.put (tIndex.get_ID (), tIndex);
				}
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, ""getResults"", e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		// Log the search and the number of results
		MIndexLog thisLog = new MIndexLog(ctx,0,trx);
		thisLog.setIndexQuery (query);
		thisLog.setIndexQueryResult (tTable.size ());
		thisLog.setQuerySource (X_K_IndexLog.QUERYSOURCE_CollaborationManagement);
		thisLog.save ();
		
		MIndex [] entries = new MIndex [tTable.size ()];
		Enumeration<Integer> E = tTable.keys ();
		int i = 0;
		while (E.hasMoreElements ())
			entries[i++] = tTable.get (E.nextElement ());
		return entries;
	}
"
org.compiere.model.MInfoWindow.getLines,MInfoWindow.java,"MInfoColumn[] getLines(boolean reload)
	{
		if (m_lines != null && !reload)
			return m_lines;
		String sql = ""SELECT * FROM AD_InfoColumn WHERE AD_InfoWindow_ID=? ORDER BY SeqNo"";
		ArrayList<MInfoColumn> list = new ArrayList<MInfoColumn>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx ());
			pstmt.setInt (1, getAD_InfoWindow_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MInfoColumn (getCtx(), rs, get_Trx ()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		m_lines = new MInfoColumn[list.size ()];
		list.toArray (m_lines);
		return m_lines;
	}	//	getLines
"
org.compiere.model.MInfoWindow.getTableName,MInfoWindow.java,"String getTableName()
	{
		if (m_tableName == null)
		{
			MTable table = MTable.get (getCtx(), getAD_Table_ID());
			m_tableName = table.get_TableName();
		}
		return m_tableName;
	}	//	getTableName
"
org.compiere.model.MInfoWindow.getSQL,MInfoWindow.java,"String getSQL (MRole role)
	{
		if (m_lines == null)
			getLines(true);
		
		StringBuffer sql = new StringBuffer(""SELECT "");
		for (int i = 0; i < m_lines.length; i++)
		{
			MInfoColumn col = m_lines[i];
			if (i > 0)
				sql.append("","");
			sql.append(col.getSelectClause());
		}
		sql.append("" FROM "").append(getFromClause());

		//	Access
		if (role == null)
			role = MRole.getDefault (getCtx(), false);
		String finalSQL = role.addAccessSQL (sql.toString(), 
			getTableName(), MRole.SQL_FULLYQUALIFIED, MRole.SQL_RO);
		log.finer(finalSQL);
		return finalSQL;
	}	//	getSQL
"
org.compiere.model.MAcctProcessor.getActive,MAcctProcessor.java,"MAcctProcessor[] getActive (Ctx ctx)
	{
		ArrayList<MAcctProcessor> list = new ArrayList<MAcctProcessor>();
		String sql = ""SELECT * FROM C_AcctProcessor WHERE IsActive='Y'"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MAcctProcessor (ctx, rs, null));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, ""getActive"", e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MAcctProcessor[] retValue = new MAcctProcessor[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getActive
"
org.compiere.model.MAcctProcessor.getServerID,MAcctProcessor.java,"String getServerID ()
	{
		return ""AcctProcessor"" + get_ID();
	}	//	getServerID
"
org.compiere.model.MAcctProcessor.getDateNextRun,MAcctProcessor.java,"Timestamp getDateNextRun (boolean requery)
	{
		if (requery)
			load(get_Trx());
		return getDateNextRun();
	}	//	getDateNextRun
"
org.compiere.model.MAcctProcessor.getLogs,MAcctProcessor.java,"CompiereProcessorLog[] getLogs ()
	{
		ArrayList<MAcctProcessorLog> list = new ArrayList<MAcctProcessorLog>();
		String sql = ""SELECT * ""
			+ ""FROM C_AcctProcessorLog ""
			+ ""WHERE C_AcctProcessor_ID=? "" 
			+ ""ORDER BY Created DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getC_AcctProcessor_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MAcctProcessorLog (getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MAcctProcessorLog[] retValue = new MAcctProcessorLog[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getLogs
"
org.compiere.model.MAcctProcessor.deleteLog,MAcctProcessor.java,"int deleteLog()
	{
		if (getKeepLogDays() < 1)
			return 0;
		String sql = ""DELETE FROM C_AcctProcessorLog ""
			+ ""WHERE C_AcctProcessor_ID="" + getC_AcctProcessor_ID() 
			//jz + "" AND (Created+"" + getKeepLogDays() + "") < SysDate"";
			+ "" AND addDays(Created,"" + getKeepLogDays() + "") < SysDate"";
		int no = DB.executeUpdate(sql, get_Trx());
		return no;
	}	//	deleteLog
"
org.compiere.model.MCharge.getAccount,MCharge.java,"MAccount getAccount (int C_Charge_ID, MAcctSchema as, BigDecimal amount)
	{
		if (C_Charge_ID == 0 || as == null)
			return null;

		int acct_index = 1;     //  Expense (positive amt)
		if (amount != null && amount.signum() < 0)
			acct_index = 2;     //  Revenue (negative amt)
		String sql = ""SELECT CH_Expense_Acct, CH_Revenue_Acct FROM C_Charge_Acct WHERE C_Charge_ID=? AND C_AcctSchema_ID=?"";
		int Account_ID = 0;
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, C_Charge_ID);
			pstmt.setInt (2, as.getC_AcctSchema_ID());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				Account_ID = rs.getInt(acct_index);
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			s_log.log(Level.SEVERE, sql, e);
			return null;
		}
		//	No account
		if (Account_ID == 0)
		{
			s_log.severe (""NO account for C_Charge_ID="" + C_Charge_ID);
			return null;
		}

		//	Return Account
		MAccount acct = MAccount.get (as.getCtx(), Account_ID);
		return acct;
	}   //  getAccount
"
org.compiere.model.MCharge.get,MCharge.java,"MCharge get (Ctx ctx, int C_Charge_ID)
	{
		Integer key = Integer.valueOf (C_Charge_ID);
		MCharge retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MCharge (ctx, C_Charge_ID, null);
		if (retValue.get_ID() != 0)
			s_cache.put (key, retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MCharge.afterSave,MCharge.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (newRecord & success)
			success = insert_Accounting(""C_Charge_Acct"", ""C_AcctSchema_Default"", null);

		return success;
	}	//	afterSave
"
org.compiere.model.MCharge.beforeDelete,MCharge.java,"boolean beforeDelete ()
	{
		return delete_Accounting(""C_Charge_Acct""); 
	}	//	beforeDelete
"
org.compiere.model.MDunning.toString,MDunning.java,"String toString()
    {
	    StringBuffer sb = new StringBuffer(""MDunning["").append(get_ID())
	        .append(""-"").append(getName());
	    sb.append(""]"");
	    return sb.toString();
    }	//	toString
"
org.compiere.model.MFieldGroup.toString,MFieldGroup.java,"String toString()
	{
		StringBuffer sb = new StringBuffer(""MFieldGroup["");
		sb.append(get_ID())
			.append(""-"").append(getName())
			.append(""]"");
		return sb.toString();
	}	//	toString
"
org.compiere.model.MReplicationRun.setIsReplicated,MReplicationRun.java,"void setIsReplicated (boolean IsReplicated)
	{
		super.setIsReplicated(IsReplicated);
	}	//	setIsReplicated
"
org.compiere.model.MTimeExpense.getLines,MTimeExpense.java,"MTimeExpenseLine[] getLines ()
	{
		return getLines(true);
	}
"
org.compiere.model.MTimeExpense.getLines,MTimeExpense.java,"MTimeExpenseLine[] getLines (boolean requery)
	{
		if ((m_lines != null) && !requery)
			return m_lines;
		//
		int C_Currency_ID = getC_Currency_ID();
		ArrayList<MTimeExpenseLine> list = new ArrayList<MTimeExpenseLine>();
		//
		String sql = ""SELECT * FROM S_TimeExpenseLine WHERE S_TimeExpense_ID=? ORDER BY Line"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getS_TimeExpense_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MTimeExpenseLine te = new MTimeExpenseLine(getCtx(), rs, get_Trx());
				te.setC_Currency_Report_ID(C_Currency_ID);
				list.add(te);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			log.log(Level.SEVERE, ""getLines"", ex);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;
		//
		m_lines = new MTimeExpenseLine[list.size()];
		list.toArray(m_lines);
		return m_lines;
	}	//	getLines
"
org.compiere.model.MTimeExpense.addDescription,MTimeExpense.java,"void addDescription (String description)
	{
		String desc = getDescription();
		if (desc == null)
			setDescription(description);
		else
			setDescription(desc + "" | "" + description);
	}	//	addDescription
"
org.compiere.model.MTimeExpense.getM_Locator_ID,MTimeExpense.java,"int getM_Locator_ID()
	{
		if (m_M_Locator_ID != 0)
			return m_M_Locator_ID;
		//
		String sql = ""SELECT M_Locator_ID FROM M_Locator ""
			+ ""WHERE M_Warehouse_ID=? AND IsActive='Y' ORDER BY ASCII(IsDefault) DESC, Created"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, getM_Warehouse_ID());
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				m_M_Locator_ID = rs.getInt(1);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			log.log(Level.SEVERE, ""getM_Locator_ID"", ex);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;
		//
		return m_M_Locator_ID;
	}	//	getM_Locator_ID
"
org.compiere.model.MTimeExpense.setProcessed,MTimeExpense.java,"void setProcessed (boolean processed)
	{
		super.setProcessed (processed);
		if (get_ID() == 0)
			return;
		String sql = ""UPDATE S_TimeExpenseLine SET Processed='""
			+ (processed ? ""Y"" : ""N"")
			+ ""' WHERE S_TimeExpense_ID="" + getS_TimeExpense_ID();
		int noLine = DB.executeUpdate(sql, get_Trx());
		m_lines = null;
		log.fine(processed + "" - Lines="" + noLine);
	}	//	setProcessed
"
org.compiere.model.MTimeExpense.getDocumentInfo,MTimeExpense.java,"String getDocumentInfo()
	{
		return Msg.getElement(getCtx(), ""S_TimeExpense_ID"") + "" "" + getDocumentNo();
	}	//	getDocumentInfo
"
org.compiere.model.MTimeExpense.createPDF,MTimeExpense.java,"File createPDF ()
	{
		try
		{
			File temp = File.createTempFile(get_TableName()+get_ID()+""_"", "".pdf"");
			return createPDF (temp);
		}
		catch (Exception e)
		{
			log.severe(""Could not create PDF - "" + e.getMessage());
		}
		return null;
	}	//	getPDF
"
org.compiere.model.MTimeExpense.createPDF,MTimeExpense.java,"File createPDF (File file)
	{
	//	ReportEngine re = ReportEngine.get (getCtx(), ReportEngine.INVOICE, getC_Invoice_ID());
	//	if (re == null)
			return null;
	//	return re.getPDF(file);
	}	//	createPDF
"
org.compiere.model.MTimeExpense.processIt,MTimeExpense.java,"boolean processIt (String processAction)
	{
		m_processMsg = null;
		DocumentEngine engine = new DocumentEngine (this, getDocStatus());
		return engine.processIt (processAction, getDocAction());
	}	//	processIt
"
org.compiere.model.MTimeExpense.unlockIt,MTimeExpense.java,"boolean unlockIt()
	{
		log.info(""unlockIt - "" + toString());
		setProcessing(false);
		return true;
	}	//	unlockIt
"
org.compiere.model.MTimeExpense.invalidateIt,MTimeExpense.java,"boolean invalidateIt()
	{
		log.info(""invalidateIt - "" + toString());
		setDocAction(DOCACTION_Prepare);
		return true;
	}	//	invalidateIt
"
org.compiere.model.MTimeExpense.prepareIt,MTimeExpense.java,"String prepareIt()
	{
		log.info(toString());
		m_processMsg = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_BEFORE_PREPARE);
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;

		MTimeExpenseLine[] lines = getLines(false);
		if (lines.length == 0)
		{
			m_processMsg = ""@NoLines@"";
			return DocActionConstants.STATUS_Invalid;
		}

		//	Std Period open? - AP (Reimbursement) Invoice
		m_processMsg = MPeriod.isOpen(this, lines, getDateReport(), MDocBaseType.DOCBASETYPE_APInvoice);
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;

		//	Add up Amounts
		BigDecimal amt = Env.ZERO;
		for (MTimeExpenseLine line : lines) {
			amt = amt.add(line.getApprovalAmt());
		}
		setApprovalAmt(amt);

		//	Invoiced but no BP
		for (MTimeExpenseLine line : lines) {
			if (line.isInvoiced() && (line.getC_BPartner_ID() == 0))
			{
				m_processMsg = ""@Line@ "" + line.getLine() + "": Invoiced, but no Business Partner"";
				return DocActionConstants.STATUS_Invalid;
			}
		}

		m_justPrepared = true;
		if (!DOCACTION_Complete.equals(getDocAction()))
			setDocAction(DOCACTION_Complete);
		return DocActionConstants.STATUS_InProgress;
	}	//	prepareIt
"
org.compiere.model.MTimeExpense.approveIt,MTimeExpense.java,"boolean  approveIt()
	{
		log.info(""approveIt - "" + toString());
		setIsApproved(true);
		return true;
	}	//	approveIt
"
org.compiere.model.MTimeExpense.rejectIt,MTimeExpense.java,"boolean rejectIt()
	{
		log.info(""rejectIt - "" + toString());
		setIsApproved(false);
		return true;
	}	//	rejectIt
"
org.compiere.model.MTimeExpense.completeIt,MTimeExpense.java,"String completeIt()
	{
		//	Re-Check
		if (!m_justPrepared)
		{
			String status = prepareIt();
			if (!DocActionConstants.STATUS_InProgress.equals(status))
				return status;
		}
		//	Implicit Approval
		if (!isApproved())
			approveIt();
		log.info(toString());
		getLines(m_justPrepared);

		//	User Validation
		String valid = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_AFTER_COMPLETE);
		if (valid != null)
		{
			m_processMsg = valid;
			return DocActionConstants.STATUS_Invalid;
		}

		//
		setProcessed(true);
		setDocAction(DOCACTION_Close);
		return DocActionConstants.STATUS_Completed;
	}	//	completeIt
"
org.compiere.model.MTimeExpense.voidIt,MTimeExpense.java,"boolean voidIt()
	{
		log.info(""voidIt - "" + toString());
		return closeIt();
	}	//	voidIt
"
org.compiere.model.MTimeExpense.closeIt,MTimeExpense.java,"boolean closeIt()
	{
		log.info(""closeIt - "" + toString());

		//	Close Not delivered Qty
	//	setDocAction(DOCACTION_None);
		return true;
	}	//	closeIt
"
org.compiere.model.MTimeExpense.reverseCorrectIt,MTimeExpense.java,"boolean reverseCorrectIt()
	{
		log.info(""reverseCorrectIt - "" + toString());
		return false;
	}	//	reverseCorrectionIt
"
org.compiere.model.MTimeExpense.reverseAccrualIt,MTimeExpense.java,"boolean reverseAccrualIt()
	{
		log.info(""reverseAccrualIt - "" + toString());
		return false;
	}	//	reverseAccrualIt
"
org.compiere.model.MTimeExpense.reActivateIt,MTimeExpense.java,"boolean reActivateIt()
	{
		log.info(""reActivateIt - "" + toString());
	//	setProcessed(false);
		return false;
	}	//	reActivateIt
"
org.compiere.model.MTimeExpense.getSummary,MTimeExpense.java,"String getSummary()
	{
		StringBuffer sb = new StringBuffer();
		sb.append(getDocumentNo());
		//	: Total Lines = 123.00 (#1)
		sb.append("": "")
			.append(Msg.translate(getCtx(),""ApprovalAmt"")).append(""="").append(getApprovalAmt())
			.append("" (#"").append(getLines(false).length).append("")"");
		//	 - Description
		if ((getDescription() != null) && (getDescription().length() > 0))
			sb.append("" - "").append(getDescription());
		return sb.toString();
	}	//	getSummary
"
org.compiere.model.MTimeExpense.getProcessMsg,MTimeExpense.java,"String getProcessMsg()
	{
		return m_processMsg;
	}	//	getProcessMsg
"
org.compiere.model.MTimeExpense.getDoc_User_ID,MTimeExpense.java,"int getDoc_User_ID()
	{
		if (m_AD_User_ID != 0)
			return m_AD_User_ID;
		if (getC_BPartner_ID() != 0)
		{
			MUser[] users = MUser.getOfBPartner(getCtx(), getC_BPartner_ID());
			if (users.length > 0)
			{
				m_AD_User_ID = users[0].getAD_User_ID();
				return m_AD_User_ID;
			}
		}
		return getCreatedBy();
	}	//	getDoc_User_ID
"
org.compiere.model.MTimeExpense.getC_Currency_ID,MTimeExpense.java,"int getC_Currency_ID()
	{
		MPriceList pl = MPriceList.get(getCtx(), getM_PriceList_ID(), get_Trx());
		return pl.getC_Currency_ID();
	}	//	getC_Currency_ID
"
org.compiere.model.MJournalLine.setCurrency,MJournalLine.java,"void setCurrency (int C_Currency_ID, int C_ConversionType_ID, BigDecimal CurrencyRate)
	{
		setC_Currency_ID(C_Currency_ID);
		if (C_ConversionType_ID != 0)
			setC_ConversionType_ID(C_ConversionType_ID);
		if (CurrencyRate != null && CurrencyRate.signum() == 0)
			setCurrencyRate(CurrencyRate);
	}	//	setCurrency
"
org.compiere.model.MJournalLine.setC_Currency_ID,MJournalLine.java,"void setC_Currency_ID (int C_Currency_ID)
	{
		if (C_Currency_ID == 0)
			return;
		super.setC_Currency_ID (C_Currency_ID);		
	}	//	setC_Currency_ID
"
org.compiere.model.MJournalLine.getPrecision,MJournalLine.java,"int getPrecision()
	{
		if (m_precision < 0)
		{
			MJournal journal = new MJournal (getCtx(), getGL_Journal_ID(), get_Trx());
			MAcctSchema acctSchema = new MAcctSchema (getCtx(), journal.getC_AcctSchema_ID(), get_Trx());
			m_precision = acctSchema.getStdPrecision();
		}
		return m_precision;
	}	//	getPrecision
"
org.compiere.model.MJournalLine.setCurrencyRate,MJournalLine.java,"void setCurrencyRate (BigDecimal CurrencyRate)
	{
		if (CurrencyRate == null)
		{
			log.warning(""was NULL - set to 1"");
			super.setCurrencyRate (Env.ONE);
		}
		else if (CurrencyRate.signum() < 0)
		{
			log.warning(""negative - "" + CurrencyRate + "" - set to 1"");
			super.setCurrencyRate (Env.ONE);
		}
		else
			super.setCurrencyRate (CurrencyRate);
	}	//	setCurrencyRate
"
org.compiere.model.MJournalLine.setC_ConversionType_ID,MJournalLine.java,"void setC_ConversionType_ID (String oldC_ConversionType_ID, 
			String newC_ConversionType_ID, int windowNo) throws Exception
	{
		if (newC_ConversionType_ID == null || newC_ConversionType_ID.length() == 0)
			return;
		int C_ConversionType_ID = Integer.parseInt(newC_ConversionType_ID);
		if (C_ConversionType_ID == 0)
			return;
		setC_ConversionType_ID(C_ConversionType_ID);
		setRate(windowNo);
	}	//	setC_ConversionType_ID
"
org.compiere.model.MJournalLine.setC_AccountAlias_ID,MJournalLine.java,"void setC_AccountAlias_ID (String oldC_AccountAlias_ID, 
			String newC_AccountAlias_ID, int windowNo) throws Exception
	{
		if (newC_AccountAlias_ID == null || newC_AccountAlias_ID.length() == 0)
			return;
		int C_AccountAlias_ID = Integer.parseInt(newC_AccountAlias_ID);
		if (C_AccountAlias_ID == 0)
			return;
		setC_AccountAlias_ID(C_AccountAlias_ID);
		setC_ValidCombination_ID(C_AccountAlias_ID);
	}	//	setC_ConversionType_ID
"
org.compiere.model.MJournalLine.setC_ValidCombination_ID,MJournalLine.java,"void setC_ValidCombination_ID (String oldC_ValidCombination_ID, 
			String newC_ValidCombination_ID, int windowNo) throws Exception
	{
		if (newC_ValidCombination_ID == null || newC_ValidCombination_ID.length() == 0)
			return;
		int C_ValidCombination_ID = Integer.parseInt(newC_ValidCombination_ID);
		if (C_ValidCombination_ID == 0)
			return;
		setC_AccountAlias_ID(C_ValidCombination_ID);
		setC_ValidCombination_ID(C_ValidCombination_ID);
	}
"
org.compiere.model.MJournalLine.setDateAcct,MJournalLine.java,"void setDateAcct (String oldDateAcct, 
			String newDateAcct, int windowNo) throws Exception
	{
		if (newDateAcct == null || newDateAcct.length() == 0)
			return;
		Timestamp dateAcct = PO.convertToTimestamp(newDateAcct);
		setDateAcct(dateAcct);
		setRate(windowNo);
	}	//	setDateAcct(String, String, int)
"
org.compiere.model.MJournalLine.setC_Currency_ID,MJournalLine.java,"void setC_Currency_ID (String oldC_Currency_ID, 
			String newC_Currency_ID, int windowNo) throws Exception
	{
		if (newC_Currency_ID == null || newC_Currency_ID.length() == 0)
			return;
		int C_Currency_ID = Integer.parseInt(newC_Currency_ID);
		if (C_Currency_ID == 0)
			return;
		setC_Currency_ID(C_Currency_ID);
		setRate(windowNo);
	}	//	setC_Currency_ID
"
org.compiere.model.MJournalLine.setRate,MJournalLine.java,"void setRate(int windowNo)
	{
		//  Source info
		int C_Currency_ID = getC_Currency_ID();
		int C_ConversionType_ID = getC_ConversionType_ID();
		if (C_Currency_ID == 0 || C_ConversionType_ID == 0)
			return;
		Timestamp DateAcct = getDateAcct();
		if (DateAcct == null)
			DateAcct = new Timestamp(System.currentTimeMillis());
		//
		int C_AcctSchema_ID = getCtx().getContextAsInt(windowNo, ""C_AcctSchema_ID"");
		MAcctSchema as = MAcctSchema.get (getCtx(), C_AcctSchema_ID);
		int AD_Client_ID = getAD_Client_ID();
		int AD_Org_ID = getAD_Org_ID();

		BigDecimal CurrencyRate = MConversionRate.getRate(C_Currency_ID, as.getC_Currency_ID(), 
			DateAcct, C_ConversionType_ID, AD_Client_ID, AD_Org_ID);
		log.fine(""rate = "" + CurrencyRate);
		if (CurrencyRate == null)
			CurrencyRate = Env.ZERO;
		setCurrencyRate(CurrencyRate);
		setAmt(windowNo);
	}	//	setRate
"
org.compiere.model.MJournalLine.setAmtAcct,MJournalLine.java,"void setAmtAcct (BigDecimal AmtAcctDr, BigDecimal AmtAcctCr)
	{
		//	setConversion
		double rateDR = 0;
		if (AmtAcctDr != null && AmtAcctDr.signum() != 0)
		{
			rateDR = AmtAcctDr.doubleValue() / getAmtSourceDr().doubleValue();
			super.setAmtAcctDr(AmtAcctDr);
		}
		double rateCR = 0;
		if (AmtAcctCr != null && AmtAcctCr.signum() != 0)
		{
			rateCR = AmtAcctCr.doubleValue() / getAmtSourceCr().doubleValue();
			super.setAmtAcctCr(AmtAcctCr);
		}
		if (rateDR != 0 && rateCR != 0 && rateDR != rateCR)
		{
			log.warning(""Rates Different DR="" + rateDR + ""(used) <> CR="" + rateCR + ""(ignored)"");
			rateCR = 0;
		}
		if (rateDR < 0 || Double.isInfinite(rateDR) || Double.isNaN(rateDR))
		{
			log.warning(""DR Rate ignored - "" + rateDR);
			return;
		}
		if (rateCR < 0 || Double.isInfinite(rateCR) || Double.isNaN(rateCR))
		{
			log.warning(""CR Rate ignored - "" + rateCR);
			return;
		}
		
		if (rateDR != 0)
			setCurrencyRate(new BigDecimal(rateDR));
		if (rateCR != 0)
			setCurrencyRate(new BigDecimal(rateCR));
	}	//	setAmtAcct
"
org.compiere.model.MJournalLine.setAmtSourceCr,MJournalLine.java,"void setAmtSourceCr (String oldAmtSourceCr, 
			String newAmtSourceCr, int windowNo) throws Exception
	{
		if (newAmtSourceCr == null || newAmtSourceCr.length() == 0)
			return;
		BigDecimal AmtSourceCr = new BigDecimal(newAmtSourceCr);
		super.setAmtSourceCr(AmtSourceCr);
		setAmt(windowNo);
	}	//	setAmtSourceCr
"
org.compiere.model.MJournalLine.setAmtSourceDr,MJournalLine.java,"void setAmtSourceDr (String oldAmtSourceDr, 
			String newAmtSourceDr, int windowNo) throws Exception
	{
		if (newAmtSourceDr == null || newAmtSourceDr.length() == 0)
			return;
		BigDecimal AmtSourceDr = new BigDecimal(newAmtSourceDr);
		super.setAmtSourceDr(AmtSourceDr);
		setAmt(windowNo);
	}	//	setAmtSourceDr
"
org.compiere.model.MJournalLine.setCurrencyRate,MJournalLine.java,"void setCurrencyRate (String oldCurrencyRate, 
			String newCurrencyRate, int windowNo) throws Exception
	{
		if (newCurrencyRate == null || newCurrencyRate.length() == 0)
			return;
		BigDecimal CurrencyRate = new BigDecimal(newCurrencyRate);
		super.setCurrencyRate(CurrencyRate);
		setAmt(windowNo);
	}	//	setCurrencyRate
"
org.compiere.model.MJournalLine.setAmt,MJournalLine.java,"void setAmt(int windowNo)
	{
		//  Get Target Currency & Precision from C_AcctSchema.C_Currency_ID
		int C_AcctSchema_ID = getCtx().getContextAsInt(windowNo, ""C_AcctSchema_ID"");
		MAcctSchema as = MAcctSchema.get(getCtx(), C_AcctSchema_ID);
		int Precision = as.getStdPrecision();

		BigDecimal CurrencyRate = getCurrencyRate();
		if (CurrencyRate == null)
		{
			CurrencyRate = Env.ONE;
			setCurrencyRate(CurrencyRate);
		}

		//  AmtAcct = AmtSource * CurrencyRate  ==> Precision
		BigDecimal AmtSourceDr = getAmtSourceDr();
		if (AmtSourceDr == null)
			AmtSourceDr = Env.ZERO;
		BigDecimal AmtSourceCr = getAmtSourceCr();
		if (AmtSourceCr == null)
			AmtSourceCr = Env.ZERO;

		BigDecimal AmtAcctDr = AmtSourceDr.multiply(CurrencyRate);
		AmtAcctDr = AmtAcctDr.setScale(Precision, BigDecimal.ROUND_HALF_UP);
		setAmtAcctDr(AmtAcctDr);
		BigDecimal AmtAcctCr = AmtSourceCr.multiply(CurrencyRate);
		AmtAcctCr = AmtAcctCr.setScale(Precision, BigDecimal.ROUND_HALF_UP);
		setAmtAcctCr(AmtAcctCr);
	}	//	setAmt
"
org.compiere.model.MJournalLine.setC_ValidCombination_ID,MJournalLine.java,"void setC_ValidCombination_ID (int C_ValidCombination_ID)
	{
		super.setC_ValidCombination_ID (C_ValidCombination_ID);
		m_account = null;
		m_accountElement = null;
	}	//	setC_ValidCombination_ID
"
org.compiere.model.MJournalLine.setC_ValidCombination_ID,MJournalLine.java,"void setC_ValidCombination_ID (MAccount acct)
	{
		if (acct == null)
			throw new IllegalArgumentException(""Account is null"");
		super.setC_ValidCombination_ID (acct.getC_ValidCombination_ID());
		m_account = acct;
		m_accountElement = null;
	}	//	setC_ValidCombination_ID
"
org.compiere.model.MJournalLine.getAccount,MJournalLine.java,"MAccount getAccount()
	{
		if (m_account == null && getC_ValidCombination_ID() != 0)
			m_account = new MAccount (getCtx(), getC_ValidCombination_ID(), get_Trx());
		return m_account;
	}	//	getValidCombination
"
org.compiere.model.MJournalLine.getAccountElementValue,MJournalLine.java,"MElementValue getAccountElementValue()
	{
		if (m_accountElement == null)
		{
			MAccount vc = getAccount();
			if (vc != null && vc.getAccount_ID() != 0)
				m_accountElement = new MElementValue (getCtx(), vc.getAccount_ID(), get_Trx()); 
		}
		return m_accountElement;
	}	//	getAccountElement
"
org.compiere.model.MJournalLine.isDocControlled,MJournalLine.java,"boolean isDocControlled()
	{
		MElementValue acct = getAccountElementValue();
		if (acct == null)
		{
			log.warning (""Account not found for C_ValidCombination_ID="" + getC_ValidCombination_ID());
			return false;
		}
		return acct.isDocControlled();
	}	//	isDocControlled
"
org.compiere.model.MJournalLine.beforeSave,MJournalLine.java,"boolean beforeSave (boolean newRecord)
	{
		//	Acct Amts
		BigDecimal rate = getCurrencyRate();
		BigDecimal amt = rate.multiply(getAmtSourceDr());
		if (amt.scale() > getPrecision())
			amt = amt.setScale(getPrecision(), BigDecimal.ROUND_HALF_UP);
		setAmtAcctDr(amt);
		amt = rate.multiply(getAmtSourceCr());
		if (amt.scale() > getPrecision())
			amt = amt.setScale(getPrecision(), BigDecimal.ROUND_HALF_UP);
		setAmtAcctCr(amt);
		//	Set Line Org to Acct Org
		if (newRecord 
			|| is_ValueChanged(""C_ValidCombination_ID"")
			|| is_ValueChanged(""AD_Org_ID""))
			setAD_Org_ID(getAccount().getAD_Org_ID());
		return true;
	}	//	beforeSave
"
org.compiere.model.MJournalLine.afterSave,MJournalLine.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!success)
			return success;
		return updateJournalTotal();
	}	//	afterSave
"
org.compiere.model.MJournalLine.afterDelete,MJournalLine.java,"boolean afterDelete (boolean success)
	{
		if (!success)
			return success;
		return updateJournalTotal();
	}	//	afterDelete
"
org.compiere.model.MJournalLine.updateJournalTotal,MJournalLine.java,"boolean updateJournalTotal()
	{
		//	Update Journal Total
		String sql = ""UPDATE GL_Journal j""
			+ "" SET (TotalDr, TotalCr) = (SELECT COALESCE(SUM(AmtSourceDr),0), COALESCE(SUM(AmtSourceCr),0)"" //jz "", ""
				+ "" FROM GL_JournalLine jl WHERE jl.IsActive='Y' AND j.GL_Journal_ID=jl.GL_Journal_ID) ""
			+ ""WHERE GL_Journal_ID="" + getGL_Journal_ID();
		int no = DB.executeUpdate(sql, get_Trx());
		if (no != 1)
			log.warning(""afterSave - Update Journal #"" + no);
		
		MJournal journal = new MJournal (getCtx(), getGL_Journal_ID(), get_Trx());
		if (journal.getGL_JournalBatch_ID()!=0)
		{
			//	Update Batch Total
			sql = ""UPDATE GL_JournalBatch jb""
				+ "" SET (TotalDr, TotalCr) = (SELECT COALESCE(SUM(TotalDr),0), COALESCE(SUM(TotalCr),0)"" //jz hard coded "", ""
					+ "" FROM GL_Journal j WHERE jb.GL_JournalBatch_ID=j.GL_JournalBatch_ID) ""
				+ ""WHERE GL_JournalBatch_ID=""
					+ ""(SELECT DISTINCT GL_JournalBatch_ID FROM GL_Journal WHERE GL_Journal_ID="" 
					+ getGL_Journal_ID() + "")"";
			no = DB.executeUpdate(sql, get_Trx());
			if (no != 1)
				log.warning(""Update Batch #"" + no);
		}
		return no == 1;
	}	//	updateJournalTotal
"
org.compiere.model.MCostUpdate.beforeSave,MCostUpdate.java,"boolean beforeSave (boolean newRecord)
	{
		if (getAD_Org_ID() != 0)
			setAD_Org_ID(0);	
		setProcessed(true);
		setDocStatus(DocActionConstants.STATUS_Completed);
		setDocAction(DocActionConstants.ACTION_Close);
		return true;
	}	//	beforeSave
"
org.compiere.model.MCostUpdate.getLines,MCostUpdate.java,"MCostUpdateLine[] getLines ()
	{
		ArrayList<MCostUpdateLine> list = new ArrayList<MCostUpdateLine> ();
		StringBuffer sql = new StringBuffer(""SELECT * FROM M_CostUpdateline WHERE M_CostUpdate_ID=? "");
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql.toString(), get_Trx());
			pstmt.setInt(1, this.getM_CostUpdate_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				MCostUpdateLine ol = new MCostUpdateLine(getCtx(), rs, get_Trx());
				list.add(ol);
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql.toString(), e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		//
		MCostUpdateLine[] lines = new MCostUpdateLine[list.size ()];
		list.toArray (lines);
		return lines;
	}	//	getLines
"
org.compiere.model.MBPBankAccount.get,MBPBankAccount.java,"MBPBankAccount get (Ctx ctx, int C_BP_BankAccount_ID)
	{
		MBPBankAccount retValue = null;
		String sql = ""SELECT * FROM C_BP_BankAccount WHERE C_BP_BankAccount_ID=?"";
		PreparedStatement pstmt = null;
		try 
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_BP_BankAccount_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				retValue = new MBPBankAccount(ctx, rs, null);
			rs.close();
			pstmt.close();
			pstmt = null;
		} 
		catch (Exception e) 
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try {
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		} catch (Exception e) {
			pstmt = null;
		}
		return retValue;
	}	//	get
"
org.compiere.model.MBPBankAccount.getOfBPartner,MBPBankAccount.java,"MBPBankAccount[] getOfBPartner (Ctx ctx, int C_BPartner_ID)
	{
		String sql = ""SELECT * FROM C_BP_BankAccount WHERE C_BPartner_ID=? AND IsActive='Y'"";
		ArrayList<MBPBankAccount> list = new ArrayList<MBPBankAccount>();
		PreparedStatement pstmt = null;
		try 
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_BPartner_ID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) 
			{
				list.add(new MBPBankAccount(ctx, rs, null));
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		} 
		catch (Exception e) 
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try {
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		} catch (Exception e) {
			pstmt = null;
		}
		
		
		MBPBankAccount[] retValue = new MBPBankAccount[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getOfBPartner
"
org.compiere.model.MBPBankAccount.isDirectDeposit,MBPBankAccount.java,"boolean isDirectDeposit()
	{
		if (!isACH())
			return false;
		String s = getBPBankAcctUse();
		if (s == null)
			return true;
		return (s.equals(BPBANKACCTUSE_Both) || s.equals(BPBANKACCTUSE_DirectDeposit));
	}	//	isDirectDeposit
"
org.compiere.model.MBPBankAccount.isDirectDebit,MBPBankAccount.java,"boolean isDirectDebit()
	{
		if (!isACH())
			return false;
		String s = getBPBankAcctUse();
		if (s == null)
			return true;
		return (s.equals(BPBANKACCTUSE_Both) || s.equals(BPBANKACCTUSE_DirectDebit));
	}	//	isDirectDebit
"
org.compiere.model.MBPBankAccount.getBank,MBPBankAccount.java,"MBank getBank()
	{
		int C_Bank_ID = getC_Bank_ID();
		if (C_Bank_ID == 0)
			return null;
		if (m_bank == null)
			m_bank = new MBank (getCtx(), C_Bank_ID, get_Trx());
		return m_bank;
	}	//	getBank
"
org.compiere.model.MBPBankAccount.getRoutingNo,MBPBankAccount.java,"String getRoutingNo() 
	{
		MBank bank = getBank();
		String rt = super.getRoutingNo();
		if (bank != null)
			rt = bank.getRoutingNo();
		return rt;
	}	//	getRoutingNo
"
org.compiere.model.MBPBankAccount.updateInfo,MBPBankAccount.java,"boolean updateInfo(String AccountNo, String RoutingNo, String IBAN)
	{
		boolean change = false;
		if (!Util.isEmpty(AccountNo) && !Util.isEqual(AccountNo, getAccountNo()))
		{
			setAccountNo(AccountNo);
			change = true;
		}
		if (!Util.isEmpty(RoutingNo) && !Util.isEqual(RoutingNo, getRoutingNo()))
		{
			setRoutingNo(RoutingNo);
			change = true;
		}
		if (!Util.isEmpty(IBAN) && !Util.isEqual(IBAN, getIBAN()))
		{
			setIBAN(IBAN);
			change = true;
		}
		return change;
	}	//	updateInfo
"
org.compiere.model.MBPBankAccount.getA_Name,MBPBankAccount.java,"String getA_Name(boolean fromBP)
	{
		String name = super.getA_Name();
		if (Util.isEmpty(name))
		{
			MBPartner bp = MBPartner.get(getCtx(), getC_BPartner_ID());
			name = bp.getName();
		}
		return name;
	}	//	getA_Name
"
org.compiere.model.MBPBankAccount.getA_City,MBPBankAccount.java,"String getA_City(boolean fromBP)
	{
		String city = super.getA_City();
		if (Util.isEmpty(city))
		{
			MBPartner bp = MBPartner.get(getCtx(), getC_BPartner_ID());
			MBPartnerLocation[] locs = bp.getLocations(false);
			if (locs.length > 0)
			{
				MLocation addr = MLocation.get(getCtx(), locs[0].getC_Location_ID(), null);
				city = addr.getCity();
			}
		}
		return city;
	}	//	getA_City
"
org.compiere.model.MBPBankAccount.beforeSave,MBPBankAccount.java,"boolean beforeSave(boolean newRecord) 
	{
		//	maintain routing on bank level
		if (isACH() && getBank() != null)
			setRoutingNo(null);
		//	Verify Bank
		MBank bank = getBank();
		if (bank != null)
		{
			BankVerificationInterface verify = bank.getVerificationClass();
			if (verify != null)
			{
				String errorMsg = verify.verifyRoutingNo (bank.getC_Country_ID(), getRoutingNo());
				if (errorMsg != null)
				{
					log.saveError(""Error"", ""@Invalid@ @RoutingNo@ "" + errorMsg);
					return false;
				}
				//
				errorMsg = verify.verifyAccountNo (bank, getAccountNo());
				if (errorMsg != null)
				{
					log.saveError(""Error"", ""@Invalid@ @AccountNo@ "" + errorMsg);
					return false;
				}
				errorMsg = verify.verifyBBAN (bank, getBBAN());
				if (errorMsg != null)
				{
					log.saveError(""Error"", ""@Invalid@ @BBAN@ "" + errorMsg);
					return false;
				}
				errorMsg = verify.verifyIBAN (bank, getIBAN());
				if (errorMsg != null)
				{
					log.saveError(""Error"", ""@Invalid@ @IBAN@ "" + errorMsg);
					return false;
				}
			}
		}
		//
		return true;
	}	//	beforeSave
"
org.compiere.model.MBPBankAccount.toString,MBPBankAccount.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MBP_BankAccount["")
			.append (get_ID ())
			.append("", Name="").append(getA_Name())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MAlertRule.getSql,MAlertRule.java,"String getSql()
	{
		StringBuffer sql = new StringBuffer();
		sql.append(""SELECT "").append(getSelectClause())
			.append("" FROM "").append(getFromClause());
		if (getWhereClause() != null && getWhereClause().length() > 0)
			sql.append("" WHERE "").append(getWhereClause());
		if (getOtherClause() != null && getOtherClause().length() > 0)
			sql.append("" "").append(getOtherClause());
		return sql.toString();
	}	//	getSql
"
org.compiere.model.MAlertRule.getTableName,MAlertRule.java,"String getTableName()
	{
		int AD_Table_ID = getAD_Table_ID();
		if (AD_Table_ID != 0)
		{
			MTable table = MTable.get(getCtx(), AD_Table_ID);
			String tableName = table.getTableName();
			if (!Util.isEmpty(tableName))
				return tableName;
		}
		//	FROM clause
		String from = getFromClause().trim();
		StringTokenizer st = new StringTokenizer(from, "" ,\t\n\r\f"", false);
		int tokens = st.countTokens();
		if (tokens == 0)
			return null;
		if (tokens == 1)
			return st.nextToken();
		String mainTable = st.nextToken();
		if (st.hasMoreTokens())
		{
			String next = st.nextToken();
			if (next.equalsIgnoreCase(""RIGHT"")
				|| next.equalsIgnoreCase(""LEFT"")
				|| next.equalsIgnoreCase(""INNER"")
				|| next.equalsIgnoreCase(""FULL""))
				return mainTable;
			return next;
		}
		return mainTable;
	}	//	getTableName
"
org.compiere.model.MAlertRule.beforeSave,MAlertRule.java,"boolean beforeSave (boolean newRecord)
	{
		if (newRecord)
			setIsValid(true);
		if (isValid())
			setErrorMsg(null);
		return true;
	}	//	beforeSave
"
org.compiere.model.MAlertRule.toString,MAlertRule.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MAlertRule["");
		sb.append(get_ID())
			.append(""-"").append(getName())
			.append("",Valid="").append(isValid())
			.append("","").append(getSql());
		sb.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.CalloutProduction.product,CalloutProduction.java,"String product (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer M_Product_ID = (Integer)value;
		if (M_Product_ID == null || M_Product_ID.intValue() == 0)
			return """";
		//	Set Attribute
		if (ctx.getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_Product_ID"") == M_Product_ID.intValue()
			&& ctx.getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_AttributeSetInstance_ID"") != 0)
			mTab.setValue(""M_AttributeSetInstance_ID"", Integer.valueOf(ctx.getContextAsInt( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_AttributeSetInstance_ID"")));
		else
			mTab.setValue(""M_AttributeSetInstance_ID"", null);
		return """";
	}   //  product
"
org.compiere.model.CalloutProject.planned,CalloutProject.java,"String planned (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		if (isCalloutActive() || value == null)
			return """";
		setCalloutActive(true);

		BigDecimal PlannedQty, PlannedPrice, PriceList, Discount;
		int StdPrecision = ctx.getStdPrecision();

		//	get values
		PlannedQty = (BigDecimal)mTab.getValue(""PlannedQty"");
		if (PlannedQty == null)
			PlannedQty = Env.ONE;
		PlannedPrice = (BigDecimal)mTab.getValue(""PlannedPrice"");
		if (PlannedPrice == null)
			PlannedPrice = Env.ZERO;
		PriceList = (BigDecimal)mTab.getValue(""PriceList"");
		if (PriceList == null)
			PriceList = PlannedPrice;
		Discount = (BigDecimal)mTab.getValue(""Discount"");
		if (Discount == null)
			Discount = Env.ZERO;

		String columnName = mField.getColumnName();
		if (columnName.equals(""PlannedPrice""))
		{
			if (PriceList.signum() == 0)
				Discount = Env.ZERO;
			else
			{
				BigDecimal multiplier = PlannedPrice.multiply(Env.ONEHUNDRED)
					.divide(PriceList, StdPrecision, BigDecimal.ROUND_HALF_UP);
				Discount = Env.ONEHUNDRED.subtract(multiplier);
			}
			mTab.setValue(""Discount"", Discount);
			log.fine(""PriceList="" + PriceList + "" - Discount="" + Discount
				+ "" -> [PlannedPrice="" + PlannedPrice + ""] (Precision="" + StdPrecision+ "")"");
		}
		else if (columnName.equals(""PriceList""))
		{
			if (PriceList.signum() == 0)
				Discount = Env.ZERO;
			else
			{
				BigDecimal multiplier = PlannedPrice.multiply(Env.ONEHUNDRED)
					.divide(PriceList, StdPrecision, BigDecimal.ROUND_HALF_UP);
				Discount = Env.ONEHUNDRED.subtract(multiplier);
			}
			mTab.setValue(""Discount"", Discount);
			log.fine(""[PriceList="" + PriceList + ""] - Discount="" + Discount
				+ "" -> PlannedPrice="" + PlannedPrice + "" (Precision="" + StdPrecision+ "")"");
		}
		else if (columnName.equals(""Discount""))
		{
			BigDecimal multiplier = Discount.divide(Env.ONEHUNDRED, 10, BigDecimal.ROUND_HALF_UP);
			multiplier = Env.ONE.subtract(multiplier);
			//
			PlannedPrice = PriceList.multiply(multiplier);
			if (PlannedPrice.scale() > StdPrecision)
				PlannedPrice = PlannedPrice.setScale(StdPrecision, BigDecimal.ROUND_HALF_UP);
			mTab.setValue(""PlannedPrice"", PlannedPrice);
			log.fine(""PriceList="" + PriceList + "" - [Discount="" + Discount
				+ ""] -> PlannedPrice="" + PlannedPrice + "" (Precision="" + StdPrecision+ "")"");
		}

		//	Calculate Amount
		BigDecimal PlannedAmt = PlannedQty.multiply(PlannedPrice);
		if (PlannedAmt.scale() > StdPrecision)
			PlannedAmt = PlannedAmt.setScale(StdPrecision, BigDecimal.ROUND_HALF_UP);
		//
		log.fine(""PlannedQty="" + PlannedQty + "" * PlannedPrice="" + PlannedPrice + "" -> PlannedAmt="" + PlannedAmt + "" (Precision="" + StdPrecision+ "")"");
		mTab.setValue(""PlannedAmt"", PlannedAmt);
		setCalloutActive(false);
		return """";
	}	//	planned
"
org.compiere.model.CalloutProject.product,CalloutProject.java,"String product (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer M_Product_ID = (Integer)value;
		int M_PriceList_Version_ID = ctx.getContextAsInt( WindowNo, ""M_PriceList_Version_ID"");
		if (M_Product_ID == null || M_Product_ID.intValue() == 0
			|| M_PriceList_Version_ID == 0)
			return """";
		setCalloutActive(true);

		int C_BPartner_ID = ctx.getContextAsInt( WindowNo, ""C_BPartner_ID"");
		BigDecimal Qty = (BigDecimal)mTab.getValue(""PlannedQty"");
		boolean IsSOTrx = true;
		MProductPricing pp = new MProductPricing (ctx.getAD_Client_ID(), ctx.getAD_Org_ID(),
				M_Product_ID.intValue(), C_BPartner_ID, Qty, IsSOTrx);
		pp.setM_PriceList_Version_ID(M_PriceList_Version_ID);
		Timestamp date = (Timestamp)mTab.getValue(""PlannedDate"");
		if (date == null)
		{
			date = (Timestamp)mTab.getValue(""DateContract"");
			if (date == null)
			{
				date = (Timestamp)mTab.getValue(""DateFinish"");
				if (date == null)
					date = new Timestamp(System.currentTimeMillis());
			}
		}
		pp.setPriceDate(date);
		//
		BigDecimal PriceList = pp.getPriceList();
		mTab.setValue(""PriceList"", PriceList);
		BigDecimal PlannedPrice = pp.getPriceStd();
		mTab.setValue(""PlannedPrice"", PlannedPrice);
		BigDecimal Discount = pp.getDiscount();
		mTab.setValue(""Discount"", Discount);
		//
		int curPrecision = 2;
		BigDecimal PlannedAmt = pp.getLineAmt(curPrecision);
		mTab.setValue(""PlannedAmt"", PlannedAmt);
		//
		log.fine(""PlannedQty="" + Qty + "" * PlannedPrice="" + PlannedPrice + "" -> PlannedAmt="" + PlannedAmt);
		return """";
	}	//	product
"
org.compiere.model.GridWindow.get,GridWindow.java,"GridWindow get (Ctx ctx, int WindowNo, int AD_Window_ID)
	{
		log.config(""Window="" + WindowNo + "", AD_Window_ID="" + AD_Window_ID);
		GridWindowVO mWindowVO = GridWindowVO.create (ctx, WindowNo, AD_Window_ID);
		if (mWindowVO == null)
			return null;
		return new GridWindow(mWindowVO);
	}	//	get
"
org.compiere.model.GridWindow.dispose,GridWindow.java,"void dispose()
	{
		log.info(""AD_Window_ID="" + m_vo.AD_Window_ID);
		for (int i = 0; i < getTabCount(); i++)
			getTab(i).dispose();
		m_tabs.clear();
		m_tabs = null;
	}	//	dispose
"
org.compiere.model.GridWindow.loadCompete,GridWindow.java,"void loadCompete ()
	{
		//  for all tabs
		for (int i = 0; i < getTabCount(); i++)
			getTab(i).getMTable().loadComplete();
	}   //  loadComplete
"
org.compiere.model.GridWindow.loadTabData,GridWindow.java,"boolean loadTabData()
	{
		log.config("""");

		if (m_vo.Tabs == null)
			return false;

		for (int t = 0; t < m_vo.Tabs.size(); t++)
		{
			GridTabVO mTabVO = m_vo.Tabs.get(t);
			if (mTabVO != null)
			{
				int onlyCurrentDays = 0;
				if (t == 0 && isTransaction())
					onlyCurrentDays = 1;
				GridTab mTab = new GridTab(mTabVO, onlyCurrentDays);
				mTabVO.ctx.setContext(mTabVO.WindowNo, mTabVO.TabNo,
					""KeyColumnName"", mTab.getKeyColumnName());
				//	Set Link Column
				if (mTab.getLinkColumnName().length() == 0)
				{
					ArrayList<String> parents = mTab.getParentColumnNames();
					//	No Parent - no link
					if (parents.size() == 0)
						;
					//	Standard case
					else if (parents.size() == 1)
						mTab.setLinkColumnName(parents.get(0));
					else
					{
						//	More than one parent.
						//	Search prior tabs for the ""right parent""
						//	for all previous tabs
						for (int i = 0; i < m_tabs.size(); i++)
						{
							//	we have a tab
							GridTab tab = m_tabs.get(i);
							String tabKey = tab.getKeyColumnName();		//	may be """"
							//	look, if one of our parents is the key of that tab
							for (int j = 0; j < parents.size(); j++)
							{
								String parent = parents.get(j);
								if (parent.equals(tabKey))
								{
									mTab.setLinkColumnName(parent);
									break;
								}
								//	The tab could have more than one key, look into their parents
								if (tabKey.equals(""""))
									for (int k = 0; k < tab.getParentColumnNames().size(); k++)
										if (parent.equals(tab.getParentColumnNames().get(k)))
										{
											mTab.setLinkColumnName(parent);
											break;
										}
							}	//	for all parents
						}	//	for all previous tabs
					}	//	parents.size > 1
				}	//	set Link column
				mTab.setLinkColumnName(null);	//	overwrites, if AD_Column_ID exists
				//
				m_tabs.add(mTab);
			}
		}	//  for all tabs
		return logAccess();
	}	//	loadTabData
"
org.compiere.model.GridWindow.logAccess,GridWindow.java,"boolean logAccess()
	{
		MSession session = MSession.get(m_vo.ctx);
		if (session != null)
		{
			session.windowLog(m_vo.ctx.getAD_Client_ID(), m_vo.ctx.getAD_Org_ID(),
				getAD_Window_ID(), 0);
			return true;
		}
		//	No session
		m_tabs.clear();
		return false;
	}	//	logAccess
"
org.compiere.model.GridWindow.getImage,GridWindow.java,"Image getImage()
	{
		if (m_vo.AD_Image_ID == 0)
			return null;
		//
		MImage mImage = MImage.get(m_vo.ctx, m_vo.AD_Image_ID);
		return mImage.getImage();
	}   //  getImage
"
org.compiere.model.GridWindow.getIcon,GridWindow.java,"Icon getIcon()
	{
		if (m_vo.AD_Image_ID == 0)
			return null;
		//
		MImage mImage = MImage.get(m_vo.ctx, m_vo.AD_Image_ID);
		return mImage.getIcon();
	}   //  getIcon
"
org.compiere.model.GridWindow.getColor,GridWindow.java,"CompiereColor getColor()
	{
		if (m_vo.AD_Color_ID == 0)
			return null;
		MColor mc = new MColor(m_vo.ctx,  m_vo.AD_Color_ID, null);
		return mc.getCompiereColor();
	}   //  getColor
"
org.compiere.model.GridWindow.isSOTrx,GridWindow.java,"boolean isSOTrx()
	{
		return m_vo.IsSOTrx;
	}	//	isSOTrx
"
org.compiere.model.GridWindow.query,GridWindow.java,"void query()
	{
		log.info("""");
		GridTab tab = getTab(0);
		tab.query(0, 0, false);	//	updated
		if (tab.getRowCount() > 0)
			tab.navigate(0);
	}   //  open
"
org.compiere.model.GridWindow.enableEvents,GridWindow.java,"void enableEvents()
	{
		for (int i = 0; i < getTabCount(); i++)
			getTab(i).enableEvents();
	}   //  enableEvents
"
org.compiere.model.GridWindow.getTabCount,GridWindow.java,"int getTabCount()
	{
		return m_tabs.size();
	}	//	getTabCount
"
org.compiere.model.GridWindow.getTab,GridWindow.java,"GridTab getTab (int i)
	{
		if (i < 0 || i+1 > m_tabs.size())
			return null;
		return m_tabs.get(i);
	}	//	getTab
"
org.compiere.model.GridWindow.getAD_Window_ID,GridWindow.java,"int getAD_Window_ID()
	{
		return m_vo.AD_Window_ID;
	}	//	getAD_Window_ID
"
org.compiere.model.GridWindow.getWindowNo,GridWindow.java,"int getWindowNo()
	{
		return m_vo.WindowNo;
	}	//	getWindowNo
"
org.compiere.model.GridWindow.getName,GridWindow.java,"String getName()
	{
		return m_vo.Name;
	}	//	getName
"
org.compiere.model.GridWindow.getDescription,GridWindow.java,"String getDescription()
	{
		return m_vo.Description;
	}	//	getDescription
"
org.compiere.model.GridWindow.getHelp,GridWindow.java,"String getHelp()
	{
		return m_vo.Help;
	}	//	getHelp
"
org.compiere.model.GridWindow.getWindowType,GridWindow.java,"String getWindowType()
	{
		return m_vo.WindowType;
	}	//	getWindowType
"
org.compiere.model.GridWindow.isTransaction,GridWindow.java,"boolean isTransaction()
	{
		return m_vo.WindowType.equals(GridWindowVO.WINDOWTYPE_TRX);
	}   //	isTransaction
"
org.compiere.model.GridWindow.getWindowSize,GridWindow.java,"Dimension getWindowSize()
	{
		if (m_vo.WinWidth != 0 && m_vo.WinHeight != 0)
			return new Dimension (m_vo.WinWidth, m_vo.WinHeight);
		return null;
	}	//	getWindowSize
"
org.compiere.model.GridWindow.toString,GridWindow.java,"String toString()
	{
		return ""MWindow["" + m_vo.WindowNo + "","" + m_vo.Name + "" ("" + m_vo.AD_Window_ID + "")]"";
	}   //  toString
"
org.compiere.model.GridWindow.getHelpDoc,GridWindow.java,"WebDoc getHelpDoc (boolean javaClient)
	{
		String title = Msg.getMsg(m_vo.ctx, ""Window"") + "": "" + getName();
		WebDoc doc = null;
		if (javaClient)
		{
			doc = WebDoc.create (false, title, javaClient);
		}
		else	//	HTML
		{
			doc = WebDoc.createPopup (title);
			doc.addPopupClose();
		}

	//	body.addElement(""&copy;&nbsp;Compiere &nbsp; "");
	//	body.addElement(new a(""http://www.compiere.org/help/"", ""Online Help""));
		td center  = doc.addPopupCenter(false);
		//	Window
		if (getDescription().length() != 0)
			center.addElement(new p().addElement(new i(getDescription())));
		if (getHelp().length() != 0)
			center.addElement(new p().addElement(getHelp()));

		//	Links to Tabs
		int size = getTabCount();
		p p = new p();
		for (int i = 0; i < size; i++)
		{
			GridTab tab = getTab(i);
			if (i > 0)
				p.addElement("" - "");
			p.addElement(new a(""#Tab""+i).addElement(tab.getName()));
		}
		center.addElement(p)
			.addElement(new p().addElement(WebDoc.NBSP));

		//	For all Tabs
		for (int i = 0; i < size; i++)
		{
			table table = new table(""1"", ""5"", ""5"", ""100%"", null);
			GridTab tab = getTab(i);
			tr tr = new tr()
				.addElement(new th()
					.addElement(new a().setName(""Tab"" + i)
						.addElement(new h2(Msg.getMsg(m_vo.ctx, ""Tab"") + "": "" + tab.getName()))));
			if (tab.getDescription().length() != 0)
				tr.addElement(new th()
					.addElement(new i(tab.getDescription())));
			else
				tr.addElement(new th()
					.addElement(WebDoc.NBSP));
			table.addElement(tr);
			//	Desciption
			td td = new td().setColSpan(2);
			if (tab.getHelp().length() != 0)
				td.addElement(new p().addElement(tab.getHelp()));
			//	Links to Fields
			p = new p();
			for (int j = 0; j < tab.getFieldCount(); j++)
			{
				GridField field = tab.getField(j);
				String hdr = field.getHeader();
				if (hdr != null && hdr.length() > 0)
				{
					if (j > 0)
						p.addElement("" - "");
					p.addElement(new a(""#Field"" + i + j, hdr));
				}
			}
			td.addElement(p);
			table.addElement(new tr().addElement(td));

			//	For all Fields
			for (int j = 0; j < tab.getFieldCount(); j++)
			{
				GridField field = tab.getField(j);
				String hdr = field.getHeader();
				if (hdr != null && hdr.length() > 0)
				{
					td = new td().setColSpan(2)
						.addElement(new a().setName(""Field"" + i + j)
							.addElement(new h3(Msg.getMsg(m_vo.ctx, ""Field"") + "": "" + hdr))
						);
					if (field.getDescription().length() != 0)
						td.addElement(new i(field.getDescription()));
					//
					if (field.getHelp().length() != 0)
						td.addElement(new p().addElement(field.getHelp()));
					table.addElement(new tr().addElement(td));
				}
			}	//	for all Fields

			center.addElement(table);
			center.addElement(new p().addElement(WebDoc.NBSP));
		}	//	for all Tabs

		if (!javaClient)
			doc.addPopupClose();
	//	System.out.println(doc.toString());
		return doc;
	}	//	getHelpDoc
"
org.compiere.model.GridWindow.getModelUpdated,GridWindow.java,"Timestamp getModelUpdated (boolean recalc)
	{
		if (recalc || m_modelUpdated == null)
		{
			String sql = ""SELECT MAX(w.Updated), MAX(t.Updated), MAX(tt.Updated), MAX(f.Updated), MAX(c.Updated) ""
				+ ""FROM AD_Window w""
				+ "" INNER JOIN AD_Tab t ON (w.AD_Window_ID=t.AD_Window_ID)""
				+ "" INNER JOIN AD_Table tt ON (t.AD_Table_ID=tt.AD_Table_ID)""
				+ "" INNER JOIN AD_Field f ON (t.AD_Tab_ID=f.AD_Tab_ID)""
				+ "" INNER JOIN AD_Column c ON (f.AD_Column_ID=c.AD_Column_ID) ""
				+ ""WHERE w.AD_Window_ID=?"";
			PreparedStatement pstmt = null;
			try
			{
				pstmt = DB.prepareStatement(sql, (Trx) null);
				pstmt.setInt (1, getAD_Window_ID());
				ResultSet rs = pstmt.executeQuery ();
				if (rs.next ())
				{
					m_modelUpdated = rs.getTimestamp(1);	//	Window
					Timestamp ts = rs.getTimestamp(2);		//	Tab
					if (ts.after(m_modelUpdated))
						m_modelUpdated = ts;
					ts = rs.getTimestamp(3);				//	Table
					if (ts.after(m_modelUpdated))
						m_modelUpdated = ts;
					ts = rs.getTimestamp(4);				//	Field
					if (ts.after(m_modelUpdated))
						m_modelUpdated = ts;
					ts = rs.getTimestamp(5);				//	Column
					if (ts.after(m_modelUpdated))
						m_modelUpdated = ts;
				}
				rs.close ();
				pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				log.log (Level.SEVERE, sql, e);
			}
			try
			{
				if (pstmt != null)
					pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				pstmt = null;
			}
		}
		return m_modelUpdated;
	}	//	getModelUpdated
"
org.compiere.model.MMovementLine.getM_AttributeSetInstanceTo_ID,MMovementLine.java,"int getM_AttributeSetInstanceTo_ID ()
	{
		int M_AttributeSetInstanceTo_ID = super.getM_AttributeSetInstanceTo_ID();
		if (M_AttributeSetInstanceTo_ID == 0)
			M_AttributeSetInstanceTo_ID = super.getM_AttributeSetInstance_ID();
		return M_AttributeSetInstanceTo_ID;
	}	//	getM_AttributeSetInstanceTo_ID
"
org.compiere.model.MMovementLine.addDescription,MMovementLine.java,"void addDescription (String description)
	{
		String desc = getDescription();
		if (desc == null)
			setDescription(description);
		else
			setDescription(desc + "" | "" + description);
	}	//	addDescription
"
org.compiere.model.MMovementLine.getProduct,MMovementLine.java,"MProduct getProduct()
	{
		if (getM_Product_ID() != 0)
			return MProduct.get(getCtx(), getM_Product_ID());
		return null;
	}	//	getProduct
"
org.compiere.model.MMovementLine.setM_Product_ID,MMovementLine.java,"void setM_Product_ID (String oldM_Product_ID, 
			String newM_Product_ID, int windowNo) throws Exception
	{
		if (newM_Product_ID == null || newM_Product_ID.length() == 0)
			return;
		int M_Product_ID = Integer.parseInt(newM_Product_ID);
		if (M_Product_ID == 0)
			return;
		//
		super.setM_Product_ID(M_Product_ID);
		if (getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_Product_ID"") == M_Product_ID
			&& getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_AttributeSetInstance_ID"") != 0)
			setM_AttributeSetInstance_ID(getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_AttributeSetInstance_ID""));
		else
			setM_AttributeSetInstance_ID(0);
	}	//	setM_Product_ID
"
org.compiere.model.MMovementLine.setMovementQty,MMovementLine.java,"void setMovementQty (BigDecimal MovementQty)
	{
		if (MovementQty != null)
		{
			MProduct product = getProduct();
			if (product != null)
			{
				int precision = product.getUOMPrecision(); 
				MovementQty = MovementQty.setScale(precision, BigDecimal.ROUND_HALF_UP);
			}
		}
		super.setMovementQty(MovementQty);
	}	//	setMovementQty
"
org.compiere.model.MMovementLine.getParent,MMovementLine.java,"MMovement getParent() 
	{
		if (m_parent == null)
			m_parent = new MMovement (getCtx(), getM_Movement_ID(), get_Trx());
		return m_parent;
	}	//	getParent
"
org.compiere.model.MMovementLine.beforeSave,MMovementLine.java,"boolean beforeSave (boolean newRecord)
	{
		//	Set Line No
		if (getLine() == 0)
		{
			String sql = ""SELECT COALESCE(MAX(Line),0)+10 AS DefaultValue FROM M_MovementLine WHERE M_Movement_ID=?"";
			int ii = DB.getSQLValue (get_Trx(), sql, getM_Movement_ID());
			setLine (ii);
		}
		
		if (getM_Locator_ID() == getM_LocatorTo_ID())
		{
			log.saveError(""Error"", Msg.parseTranslation(getCtx(), ""@M_Locator_ID@ == @M_LocatorTo_ID@""));
			return false;
		}

		if (getMovementQty().signum() == 0)
		{
			log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""MovementQty""));
			return false;
		}

		//	Qty Precision
		if (newRecord || is_ValueChanged(""QtyEntered""))
			setMovementQty(getMovementQty());

		//	Mandatory Instance
		if (getM_AttributeSetInstanceTo_ID() == 0)
		{
			if (getM_AttributeSetInstance_ID() != 0)	//	set to from
				setM_AttributeSetInstanceTo_ID(getM_AttributeSetInstance_ID());
			else
			{
				MProduct product = getProduct();
				if (product != null
					&& product.getM_AttributeSet_ID() != 0)
				{
					MAttributeSet mas = MAttributeSet.get(getCtx(), product.getM_AttributeSet_ID());
					if (mas.isInstanceAttribute() 
						&& (mas.isMandatory() || mas.isMandatoryAlways()))
					{
						log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""M_AttributeSetInstanceTo_ID""));
						return false;
					}
				}
			}
		}	//	ASI
		
		return true;
	}	//	beforeSave
"
org.compiere.model.MRfQ.get,MRfQ.java,"MRfQ get (Ctx ctx, int C_RfQ_ID)
	{
		Integer key = Integer.valueOf (C_RfQ_ID);
		MRfQ retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MRfQ (ctx, C_RfQ_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MRfQ.getLines,MRfQ.java,"MRfQLine[] getLines()
	{
		ArrayList<MRfQLine> list = new ArrayList<MRfQLine>();
		String sql = ""SELECT * FROM C_RfQLine ""
			+ ""WHERE C_RfQ_ID=? AND IsActive='Y' ""
			+ ""ORDER BY Line"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getC_RfQ_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MRfQLine (getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MRfQLine[] retValue = new MRfQLine[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getLines
"
org.compiere.model.MRfQ.getResponses,MRfQ.java,"MRfQResponse[] getResponses (boolean activeOnly, boolean completedOnly)
	{
		ArrayList<MRfQResponse> list = new ArrayList<MRfQResponse>();
		String sql = ""SELECT * FROM C_RfQResponse ""
			+ ""WHERE C_RfQ_ID=?"";
		if (activeOnly)
			sql += "" AND IsActive='Y'"";
		if (completedOnly)
			sql += "" AND IsComplete='Y'"";
		sql += "" ORDER BY Price"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getC_RfQ_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MRfQResponse (getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MRfQResponse[] retValue = new MRfQResponse[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getResponses
"
org.compiere.model.MRfQ.toString,MRfQ.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MRfQ["");
		sb.append(get_ID()).append("",Name="").append(getName())
			.append("",QuoteType="").append(getQuoteType())
			.append(""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MRfQ.isQuoteTotalAmtOnly,MRfQ.java,"boolean isQuoteTotalAmtOnly()
	{
		return QUOTETYPE_QuoteTotalOnly.equals(getQuoteType());
	}	//	isQuoteTotalAmtOnly
"
org.compiere.model.MRfQ.isQuoteSelectedLines,MRfQ.java,"boolean isQuoteSelectedLines()
	{
		return QUOTETYPE_QuoteSelectedLines.equals(getQuoteType());
	}	//	isQuoteSelectedLines
"
org.compiere.model.MRfQ.isQuoteAllLines,MRfQ.java,"boolean isQuoteAllLines()
	{
		return QUOTETYPE_QuoteAllLines.equals(getQuoteType());
	}	//	isQuoteAllLines
"
org.compiere.model.MRfQ.checkQuoteTotalAmtOnly,MRfQ.java,"String checkQuoteTotalAmtOnly()
	{
		if (!isQuoteTotalAmtOnly())
			return null;
		//	Need to check Line Qty
		MRfQLine[] lines = getLines();
		for (MRfQLine line : lines) {
			MRfQLineQty[] qtys = line.getQtys();
			if (qtys.length > 1)
			{
				log.warning(""isQuoteTotalAmtOnlyValid - #"" + qtys.length + "" - "" + line);
				String msg = ""@Line@ "" + line.getLine() 
					+ "": #@C_RfQLineQty@="" + qtys.length + "" - @IsQuoteTotalAmt@"";
				return msg;
			}
		}
		return null;
	}	//	checkQuoteTotalAmtOnly
"
org.compiere.model.MRfQ.beforeSave,MRfQ.java,"boolean beforeSave (boolean newRecord)
	{
		//	Calculate Complete Date (also used to verify)
		if (getDateWorkStart() != null && getDeliveryDays() != 0)
			setDateWorkComplete (TimeUtil.addDays(getDateWorkStart(), getDeliveryDays()));
		//	Calculate Delivery Days
		else if (getDateWorkStart() != null && getDeliveryDays() == 0 && getDateWorkComplete() != null)
			setDeliveryDays (TimeUtil.getDaysBetween(getDateWorkStart(), getDateWorkComplete()));
		//	Calculate Start Date
		else if (getDateWorkStart() == null && getDeliveryDays() != 0 && getDateWorkComplete() != null)
			setDateWorkStart (TimeUtil.addDays(getDateWorkComplete(), getDeliveryDays() * -1));
		
		return true;
	}	//	beforeSave
"
org.compiere.model.MScheduler.getActive,MScheduler.java,"MScheduler[] getActive (Ctx ctx)
	{
		ArrayList<MScheduler> list = new ArrayList<MScheduler>();
		String sql = ""SELECT * FROM AD_Scheduler WHERE IsActive='Y'"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MScheduler (ctx, rs, null));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MScheduler[] retValue = new MScheduler[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getActive
"
org.compiere.model.MScheduler.getServerID,MScheduler.java,"String getServerID ()
	{
		return ""Scheduler"" + get_ID();
	}	//	getServerID
"
org.compiere.model.MScheduler.getDateNextRun,MScheduler.java,"Timestamp getDateNextRun (boolean requery)
	{
		if (requery)
			load(get_Trx());
		return getDateNextRun();
	}	//	getDateNextRun
"
org.compiere.model.MScheduler.getLogs,MScheduler.java,"CompiereProcessorLog[] getLogs()
	{
		ArrayList<MSchedulerLog> list = new ArrayList<MSchedulerLog>();
		String sql = ""SELECT * ""
			+ ""FROM AD_SchedulerLog ""
			+ ""WHERE AD_Scheduler_ID=? ""
			+ ""ORDER BY Created DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getAD_Scheduler_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MSchedulerLog (getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MSchedulerLog[] retValue = new MSchedulerLog[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getLogs
"
org.compiere.model.MScheduler.deleteLog,MScheduler.java,"int deleteLog()
	{
		if (getKeepLogDays() < 1)
			return 0;
		String sql = ""DELETE FROM AD_SchedulerLog ""
			+ ""WHERE AD_Scheduler_ID="" + getAD_Scheduler_ID()
			+ "" AND (Created+"" + getKeepLogDays() + "") < SysDate"";
		int no = DB.executeUpdate(sql, get_Trx());
		return no;
	}	//	deleteLog
"
org.compiere.model.MScheduler.getProcess,MScheduler.java,"MProcess getProcess()
	{
		if (m_process == null)
			m_process = new MProcess (getCtx(), getAD_Process_ID(), null);
		return m_process;
	}	//	getProcess
"
org.compiere.model.MScheduler.getParameters,MScheduler.java,"MSchedulerPara[] getParameters (boolean reload)
	{
		if (!reload && (m_parameter != null))
			return m_parameter;
		ArrayList<MSchedulerPara> list = new ArrayList<MSchedulerPara>();
		String sql = ""SELECT * FROM AD_Scheduler_Para WHERE AD_Scheduler_ID=? AND IsActive='Y'"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, getAD_Scheduler_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MSchedulerPara (getCtx(), rs, null));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		m_parameter = new MSchedulerPara[list.size()];
		list.toArray(m_parameter);
		return m_parameter;
	}	//	getParameter
"
org.compiere.model.MScheduler.getRecipients,MScheduler.java,"MSchedulerRecipient[] getRecipients (boolean reload)
	{
		if (!reload && (m_recipients != null))
			return m_recipients;
		ArrayList<MSchedulerRecipient> list = new ArrayList<MSchedulerRecipient>();
		String sql = ""SELECT * FROM AD_SchedulerRecipient WHERE AD_Scheduler_ID=? AND IsActive='Y'"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, getAD_Scheduler_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MSchedulerRecipient (getCtx(), rs, null));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		m_recipients = new MSchedulerRecipient[list.size()];
		list.toArray(m_recipients);
		return m_recipients;
	}	//	getRecipients
"
org.compiere.model.MScheduler.getRecipientAD_User_IDs,MScheduler.java,"Integer[] getRecipientAD_User_IDs()
	{
		ArrayList<Integer> list = new ArrayList<Integer>();
		MSchedulerRecipient[] recipients = getRecipients(false);
		for (MSchedulerRecipient recipient : recipients)
		{
			if (!recipient.isActive())
				continue;
			if (recipient.getAD_User_ID() != 0)
			{
				Integer ii = Integer.valueOf(recipient.getAD_User_ID());
				if (!list.contains(ii))
					list.add(ii);
			}
			if (recipient.getAD_Role_ID() != 0)
			{
				MUserRoles[] urs = MUserRoles.getOfRole(getCtx(), recipient.getAD_Role_ID());
				for (MUserRoles ur : urs) {
					if (!ur.isActive())
						continue;
					Integer ii = Integer.valueOf(ur.getAD_User_ID());
					if (!list.contains(ii))
						list.add(ii);
				}
			}
		}
		//	Add Updater
		if (list.size() == 0)
		{
			Integer ii = Integer.valueOf(getUpdatedBy());
			list.add(ii);
		}
		//
		Integer[] recipientIDs = new Integer[list.size()];
		list.toArray(recipientIDs);
		return recipientIDs;
	}	//	getRecipientAD_User_IDs
"
org.compiere.model.MScheduler.toString,MScheduler.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MScheduler["");
		sb.append (get_ID()).append (""-"").append (getName())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MScheduler.execute,MScheduler.java,"String execute (Trx p_trx) throws Exception
	{
		if (m_process == null)
			getProcess();
		if (m_process.isReport())
			return runReport(p_trx);
		else
			return runProcess(p_trx);
	}	//	execute
"
org.compiere.model.MScheduler.runReport,MScheduler.java,"String runReport (Trx p_trx) throws Exception
	{
		log.info(m_process.toString());
		if (!m_process.isReport() || (m_process.getAD_ReportView_ID() == 0))
			return ""Not a Report: AD_Process_ID="" + m_process.getAD_Process_ID()
				+ "" - "" + m_process.getName();
		//	Process
		int AD_Table_ID = 0;
		int Record_ID = 0;
		//
		MPInstance pInstance = new MPInstance(m_process, Record_ID);
		String error = fillParameter(pInstance);
		if (error != null)
		{
			notifySupervisor(false, error, null);
			return error;
		}

		//
		ProcessInfo pi = new ProcessInfo (m_process.getName(), m_process.getAD_Process_ID(),
			AD_Table_ID, Record_ID);
		pi.setAD_User_ID(getUpdatedBy());
		pi.setAD_Client_ID(getAD_Client_ID());
		pi.setAD_PInstance_ID(pInstance.getAD_PInstance_ID());
		if (!m_process.processIt(pi, p_trx) && (pi.getClassName() != null))
		{
			String msg = ""Process failed: ("" + pi.getClassName() + "") "" + pi.getSummary();
			notifySupervisor(false, msg, null);
			return msg;
		}

		//	Report
		ReportEngine re = ReportEngine.get(getCtx(), pi);
		if (re == null)
		{
			String msg = ""Cannot create Report AD_Process_ID="" + m_process.getAD_Process_ID()
				+ "" - "" + m_process.getName();
			notifySupervisor(false, msg, null);
			return msg;
		}
		File report = re.getPDF();
		//	Notice
		Integer[] userIDs = getRecipientAD_User_IDs();
		for (Integer userID : userIDs)
		{
			MNote note = new MNote(getCtx(),
					AD_Message_ID, userID.intValue(), p_trx);
			note.setClientOrg(getAD_Client_ID(), getAD_Org_ID());
			note.setTextMsg(getName());
			note.setDescription(getDescription());
			note.setRecord(AD_Table_ID, Record_ID);
			note.save();
			//	Attachment
			MAttachment attachment = new MAttachment (getCtx(),
					X_AD_Note.Table_ID, note.getAD_Note_ID(), p_trx);
			attachment.setClientOrg(getAD_Client_ID(), getAD_Org_ID());
			attachment.addEntry(report);
			attachment.setTextMsg(getName());
			attachment.save();
		}
		//
		notifySupervisor(true, pi.getSummary(), report);
		return pi.getSummary();
	}	//	runReport
"
org.compiere.model.MScheduler.runProcess,MScheduler.java,"String runProcess (Trx p_trx) throws Exception
	{
		log.info(m_process.toString());
		//	Process (see also MWFActivity.performWork
		int AD_Table_ID = 0;
		int Record_ID = 0;
		//
		MPInstance pInstance = new MPInstance(m_process, Record_ID);
		String error = fillParameter(pInstance);
		if (error != null)
		{
			notifySupervisor(false, error, null);
			return error;
		}
		//
		ProcessInfo pi = new ProcessInfo (m_process.getName(), m_process.getAD_Process_ID(),
			AD_Table_ID, Record_ID);
		pi.setAD_User_ID(getUpdatedBy());
		pi.setAD_Client_ID(getAD_Client_ID());
		pi.setAD_PInstance_ID(pInstance.getAD_PInstance_ID());
		m_process.processIt(pi, p_trx);
		notifySupervisor(!pi.isError(), pi.getSummary(), null);
		return pi.getSummary();
	}	//	runProcess
"
org.compiere.model.MScheduler.fillParameter,MScheduler.java,"String fillParameter(MPInstance pInstance)
	{
		StringBuffer sb = null;
		MSchedulerPara[] sParams = getParameters (false);
		MPInstancePara[] iParams = pInstance.getParameters();
		for (MPInstancePara iPara : iParams)
		{
			for (MSchedulerPara sPara : sParams)
			{
				if (iPara.getParameterName().equals(sPara.getColumnName()))
				{
					String variable = sPara.getParameterDefault();
					log.fine(sPara.getColumnName() + "" = "" + variable);
					//	Value - Constant/Variable
					String value = variable;
					if ((variable == null)
						|| ((variable != null) && (variable.length() == 0)))
						value = null;
					else if (variable.indexOf(""@"") != -1)	//	we may have a variable
					{
						//	Strip
						int index = variable.indexOf(""@"");
						String columnName = variable.substring(index+1);
						index = columnName.indexOf(""@"");
						if (index != -1)
						{
							columnName = columnName.substring(0, index);
							//	try Env
							String env = getCtx().getContext( columnName);
							if (env.length() == 0)
							{
								log.warning(sPara.getColumnName()
									+ "" - not in environment ="" + columnName
									+ ""("" + variable + "") - ignored"");
								break;
							}
							else
								value = env;
						}
					}	//	@variable@

					//	No Value
					if (value == null)
					{
						log.fine(sPara.getColumnName() + "" - empty"");
						break;
					}

					//	Convert to Type
					try
					{
						if (FieldType.isNumeric(sPara.getDisplayType())
							|| FieldType.isID(sPara.getDisplayType()))
						{
							BigDecimal bd = new BigDecimal (value);
							iPara.setP_Number(bd);
							log.fine(sPara.getColumnName()
								+ "" = "" + variable + "" (="" + bd + ""=)"");
						}
						else if (FieldType.isDate(sPara.getDisplayType()))
						{
							Timestamp ts = Timestamp.valueOf(value);
							iPara.setP_Date(ts);
							log.fine(sPara.getColumnName()
								+ "" = "" + variable + "" (="" + ts + ""=)"");
						}
						else
						{
							iPara.setP_String(value);
							log.fine(sPara.getColumnName()
								+ "" = "" + variable
								+ "" (="" + value + ""=) "" + value.getClass().getName());
						}
						if (!iPara.save())
							log.warning(""Not Saved - "" + sPara.getColumnName());
					}
					catch (Exception e)
					{
						String msg = sPara.getColumnName()
							+ "" = "" + variable + "" ("" + value
							+ "") "" + value.getClass().getName()
							+ "" - "" + e.getLocalizedMessage();
						log.warning(msg);
						if (sb == null)
							sb = new StringBuffer(msg);
						else
							sb.append(""; "").append(msg);
					}
					break;
				}	//	parameter match
			}	//	scheduler parameter loop
		}	//	instance parameter loop
		if (sb == null)
			return null;
		return sb.toString();
	}	//	fillParameter
"
org.compiere.model.MScheduler.notifySupervisor,MScheduler.java,"boolean notifySupervisor(boolean success, String message, File attachmentFile)
	{
		if (m_supervisor == null)
			m_supervisor = MUser.get(getCtx(), getSupervisor_ID());
		//	Send Mail
		if (m_supervisor.isNotificationEMail())
		{
			MClient client = MClient.get(getCtx(), getAD_Client_ID());
			String subject = client.getName() + "": "" + getName()
				+ (success ? "" OK"" : "" Error"");
			if (client.sendEMail(getSupervisor_ID(), subject, message, attachmentFile))
				return true;
		}
		//	Create Notice
		MNote note = new MNote(getCtx(), AD_Message_ID, getSupervisor_ID(), null);
		note.setClientOrg(getAD_Client_ID(), getAD_Org_ID());
		note.setTextMsg(getName());
		note.setDescription(message);
		note.setRecord(Table_ID, get_ID());		//	point to this
		boolean ok = note.save();
		//	Attachment
		if (ok && (attachmentFile != null))
		{
			MAttachment attachment = new MAttachment (getCtx(),
				X_AD_Note.Table_ID, note.getAD_Note_ID(), null);
			attachment.setClientOrg(getAD_Client_ID(), getAD_Org_ID());
			attachment.addEntry(attachmentFile);
			attachment.setTextMsg(getName());
			attachment.save();
		}
		return ok;
	}	//	sendEMail
"
org.compiere.model.MGroup.get,MGroup.java,"MGroup get (Ctx ctx, int R_Group_ID)
	{
		Integer key = Integer.valueOf (R_Group_ID);
		MGroup retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MGroup (ctx, R_Group_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	} //	get
"
org.compiere.model.MBPartnerLocation.getForBPartner,MBPartnerLocation.java,"MBPartnerLocation[] getForBPartner (Ctx ctx, int C_BPartner_ID, Trx trx)
	{
		ArrayList<MBPartnerLocation> list = new ArrayList<MBPartnerLocation>();
		String sql = ""SELECT * FROM C_BPartner_Location WHERE C_BPartner_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, C_BPartner_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				//jz list.add(new MBPartnerLocation(ctx, rs, null));
				list.add(new MBPartnerLocation(ctx, rs, trx));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MBPartnerLocation[] retValue = new MBPartnerLocation[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getForBPartner
"
org.compiere.model.MBPartnerLocation.getLocation,MBPartnerLocation.java,"MLocation getLocation (boolean requery)
	{
		if (m_location == null || requery)
			m_location = MLocation.get (getCtx(), getC_Location_ID(), get_Trx());
		return m_location;
	}	//	getLoaction
"
org.compiere.model.MBPartnerLocation.toString,MBPartnerLocation.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MBPartner_Location[ID="")
			.append(get_ID())
			.append("",C_Location_ID="").append(getC_Location_ID())
			.append("",Name="").append(getName())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MBPartnerLocation.beforeSave,MBPartnerLocation.java,"boolean beforeSave (boolean newRecord)
	{
		if (getC_Location_ID() == 0)
			return false;

		//	Set New Name
		if (!newRecord)
			return true;
		MLocation address = getLocation(true);
		m_uniqueName = getName();
		if (m_uniqueName != null && m_uniqueName.equals("".""))	//	default
			m_uniqueName = null;
		m_unique = 0;
		makeUnique(address);
		
		//	Check uniqueness
		MBPartnerLocation[] locations = getForBPartner(getCtx(), getC_BPartner_ID(), get_Trx());
		boolean unique = locations.length == 0;
		while (!unique)
		{
			unique = true;
			for (MBPartnerLocation location : locations) {
				if (location.getC_BPartner_Location_ID() == get_ID())
					continue;
				if (m_uniqueName.equals(location.getName()))
				{
					makeUnique(address);
					unique = false;
					break;
				}
			}
		}
		setName (m_uniqueName);
		return true;
	}	//	beforeSave
"
org.compiere.model.MBPartnerLocation.makeUnique,MBPartnerLocation.java,"void makeUnique (MLocation address)
	{
	//	m_uniqueName = address.toString();
	//	return;
		
		if (m_uniqueName == null)
			m_uniqueName = """";
		m_unique++;
		
		//	0 - City
		if (m_uniqueName.length() == 0)
		{
			String xx = address.getCity(); 
			if (xx != null && xx.length() > 0)
				m_uniqueName = xx;
			m_unique = 0;
		}
		//	1 + Address1
		if (m_unique == 1 ||  m_uniqueName.length() == 0)
		{
			String xx = address.getAddress1();
			if (xx != null && xx.length() > 0)
			{
				if (m_uniqueName.length() > 0)
					m_uniqueName += "" "";
				m_uniqueName += xx;
			}
			m_unique = 1;
		}
		//	2 + Address2
		if (m_unique == 2 ||  m_uniqueName.length() == 0)
		{
			String xx = address.getAddress2();
			if (xx != null && xx.length() > 0)
			{
				if (m_uniqueName.length() > 0)
					m_uniqueName += "" "";
				m_uniqueName += xx;
			}
			m_unique = 2;
		}
		//	3 - Region	
		if (m_unique == 3 ||  m_uniqueName.length() == 0)
		{
			String xx = address.getRegionName(true);
			{
				if (m_uniqueName.length() > 0)
					m_uniqueName += "" "";
				m_uniqueName += xx;
			}
			m_unique = 3;
		}
		//	4 - ID	
		if (m_unique == 4 ||  m_uniqueName.length() == 0)
		{
			int id = get_ID();
			if (id == 0)
				id = address.get_ID();
			m_uniqueName += ""#"" + id;		
			m_unique = 4;
		}
	}	//	makeUnique
"
org.compiere.model.MStatusCategory.getDefault,MStatusCategory.java,"MStatusCategory getDefault (Ctx ctx)
	{
		int AD_Client_ID = ctx.getAD_Client_ID();
		String sql = ""SELECT * FROM R_StatusCategory ""
			+ ""WHERE AD_Client_ID in (0,?) AND IsDefault='Y' ""
			+ ""ORDER BY AD_Client_ID DESC"";
		MStatusCategory retValue = null;
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, AD_Client_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				retValue = new MStatusCategory (ctx, rs, null);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return retValue;
	}	//	getDefault
"
org.compiere.model.MStatusCategory.createDefault,MStatusCategory.java,"MStatusCategory createDefault (Ctx ctx)
	{
		int AD_Client_ID = ctx.getAD_Client_ID();
		MStatusCategory retValue = new MStatusCategory(ctx, 0, null);
		retValue.setClientOrg(AD_Client_ID, 0);
		retValue.setName(Msg.getMsg(ctx, ""Standard""));
		retValue.setIsDefault(true);
		if (!retValue.save())
			return null;
		String sql = ""UPDATE R_Status SET R_StatusCategory_ID="" + retValue.getR_StatusCategory_ID()
			+ "" WHERE R_StatusCategory_ID IS NULL AND AD_Client_ID="" + AD_Client_ID;
		int no = DB.executeUpdate(sql, (Trx) null);
		s_log.info(""Default for AD_Client_ID="" + AD_Client_ID + "" - Status #"" + no);
		return retValue;
	}	//	createDefault
"
org.compiere.model.MStatusCategory.get,MStatusCategory.java,"MStatusCategory get (Ctx ctx, int R_StatusCategory_ID)
	{
		Integer key = Integer.valueOf (R_StatusCategory_ID);
		MStatusCategory retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MStatusCategory (ctx, R_StatusCategory_ID, null);
		if (retValue.get_ID() != 0)
			s_cache.put (key, retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MStatusCategory.getStatus,MStatusCategory.java,"MStatus[] getStatus(boolean reload)
	{
		if (m_status != null && !reload)
			return m_status;
		String sql = ""SELECT * FROM R_Status ""
			+ ""WHERE R_StatusCategory_ID=? ""
			+ ""ORDER BY SeqNo"";
		ArrayList<MStatus> list = new ArrayList<MStatus>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, getR_StatusCategory_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MStatus (getCtx(), rs, null));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		m_status = new MStatus[list.size ()];
		list.toArray (m_status);
		return m_status;
	}	//	getStatus
"
org.compiere.model.MStatusCategory.getDefaultR_Status_ID,MStatusCategory.java,"int getDefaultR_Status_ID()
	{
		if (m_status == null)
			getStatus(false);
		for (MStatus element : m_status) {
			if (element.isDefault() && element.isActive())
				return element.getR_Status_ID();
		}
		if (m_status.length > 0 
			&& m_status[0].isActive())
				return m_status[0].getR_Status_ID();
		return 0;
	}	//	getDefaultR_Status_ID
"
org.compiere.model.MStatusCategory.toString,MStatusCategory.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""RStatusCategory["");
		sb.append (get_ID()).append (""-"").append(getName()).append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MLandedCostAllocation.getOfInvoiceLine,MLandedCostAllocation.java,"MLandedCostAllocation[] getOfInvoiceLine (Ctx ctx, 
		int C_InvoiceLine_ID, Trx trx)
	{
		ArrayList<MLandedCostAllocation> list = new ArrayList<MLandedCostAllocation>();
		String sql = ""SELECT * FROM C_LandedCostAllocation WHERE C_InvoiceLine_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, C_InvoiceLine_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MLandedCostAllocation (ctx, rs, trx));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MLandedCostAllocation[] retValue = new MLandedCostAllocation[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getOfInvliceLine
"
org.compiere.model.MLandedCostAllocation.setAmt,MLandedCostAllocation.java,"void setAmt (double Amt, int precision)
	{
		BigDecimal bd = new BigDecimal(Amt);
		if (bd.scale() > precision)
			bd = bd.setScale(precision, BigDecimal.ROUND_HALF_UP);
		super.setAmt(bd);
	}	//	setAmt
"
org.compiere.model.MLandedCostAllocation.setQty,MLandedCostAllocation.java,"void setQty (BigDecimal Qty)
	{
		super.setQty (Qty);
	}	//	setQty
"
org.compiere.model.MRequest.getR_Request_ID,MRequest.java,"int getR_Request_ID (String mailText)
	{
		if (mailText == null)
			return 0;
		int indexStart = mailText.indexOf(TAG_START);
		if (indexStart == -1)
			return 0;
		int indexEnd = mailText.indexOf(TAG_END, indexStart);
		if (indexEnd == -1)
			return 0;
		//
		indexStart += 5;
		String idString = mailText.substring(indexStart, indexEnd);
		int R_Request_ID = 0;
		try
		{
			R_Request_ID = Integer.parseInt(idString);
		}
		catch (Exception e)
		{
			s_log.severe (""Cannot parse "" + idString);
		}
		return R_Request_ID;
	}	//	getR_Request_ID
"
org.compiere.model.MRequest.setR_RequestType_ID,MRequest.java,"void setR_RequestType_ID ()
	{
		m_requestType = MRequestType.getDefault(getCtx());
		if (m_requestType == null)
			log.warning(""No default found"");
		else
			super.setR_RequestType_ID(m_requestType.getR_RequestType_ID());
	}	//	setR_RequestType_ID
"
org.compiere.model.MRequest.setR_Status_ID,MRequest.java,"void setR_Status_ID ()
	{
		MStatus status = MStatus.getDefault(getCtx(), getR_RequestType_ID());
		if (status == null)
		{
			log.warning(""No default found"");
			if (getR_Status_ID() != 0)
				setR_Status_ID(0);
		}
		else
			setR_Status_ID(status.getR_Status_ID());
	}	//	setR_Status_ID
"
org.compiere.model.MRequest.addToResult,MRequest.java,"void addToResult (String Result)
	{
		String oldResult = getResult();
		if (Result == null || Result.length() == 0)
			;
		else if (oldResult == null || oldResult.length() == 0)
			setResult (Result);
		else
			setResult (oldResult + ""\n-\n"" + Result);
	}	//	addToResult
"
org.compiere.model.MRequest.setDueType,MRequest.java,"void setDueType()
	{
		Timestamp due = getDateNextAction();
		if (due == null)
			return;
		//
		int dueDateTolerance = getRequestType().getDueDateTolerance();
		Timestamp overdue = TimeUtil.addDays(due, dueDateTolerance);
		Timestamp now = new Timestamp (System.currentTimeMillis());
		//
		String DueType = DUETYPE_Due;
		if (now.before(due))
			DueType = DUETYPE_Scheduled;
		else if (now.after(overdue))
			DueType = DUETYPE_Overdue;
		super.setDueType(DueType);
	}	//	setDueType
"
org.compiere.model.MRequest.getActions,MRequest.java,"MRequestAction[] getActions()
	{
		String sql = ""SELECT * FROM R_RequestAction ""
			+ ""WHERE R_Request_ID=? ""
			+ ""ORDER BY Created DESC"";
		ArrayList<MRequestAction> list = new ArrayList<MRequestAction>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getR_Request_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MRequestAction(getCtx(), rs, get_Trx()));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		MRequestAction[] retValue = new MRequestAction[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getActions
"
org.compiere.model.MRequest.getUpdates,MRequest.java,"MRequestUpdate[] getUpdates(String confidentialType)
	{
		String sql = ""SELECT * FROM R_RequestUpdate ""
			+ ""WHERE R_Request_ID=? ""
			+ ""ORDER BY Created DESC"";
		ArrayList<MRequestUpdate> list = new ArrayList<MRequestUpdate>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getR_Request_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				MRequestUpdate ru = new MRequestUpdate(getCtx(), rs, get_Trx());
				if (confidentialType != null)
				{
					//	Private only if private
					if (ru.getConfidentialTypeEntry().equals(CONFIDENTIALTYPEENTRY_PrivateInformation)
						&& !confidentialType.equals(CONFIDENTIALTYPEENTRY_PrivateInformation))
						continue;
					//	Internal not if Customer/Public
					if (ru.getConfidentialTypeEntry().equals(CONFIDENTIALTYPEENTRY_Internal)
						&& (confidentialType.equals(CONFIDENTIALTYPEENTRY_PartnerConfidential)
							|| confidentialType.equals(CONFIDENTIALTYPEENTRY_PublicInformation)))
						continue;
					//	No Customer if public
					if (ru.getConfidentialTypeEntry().equals(CONFIDENTIALTYPEENTRY_PartnerConfidential)
						&& confidentialType.equals(CONFIDENTIALTYPEENTRY_PublicInformation))
						continue;
				}
				list.add(ru);
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		MRequestUpdate[] retValue = new MRequestUpdate[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getUpdates
"
org.compiere.model.MRequest.getUpdatesPublic,MRequest.java,"MRequestUpdate[] getUpdatesPublic()
	{
		return getUpdates(CONFIDENTIALTYPE_PublicInformation);
	}	//	getUpdatesPublic
"
org.compiere.model.MRequest.getUpdatesCustomer,MRequest.java,"MRequestUpdate[] getUpdatesCustomer()
	{
		return getUpdates(CONFIDENTIALTYPE_PartnerConfidential);
	}	//	getUpdatesCustomer
"
org.compiere.model.MRequest.getUpdatesInternal,MRequest.java,"MRequestUpdate[] getUpdatesInternal()
	{
		return getUpdates(CONFIDENTIALTYPE_Internal);
	}	//	getUpdatesInternal
"
org.compiere.model.MRequest.getRequestType,MRequest.java,"MRequestType getRequestType()
	{
		if (m_requestType == null)
		{
			int R_RequestType_ID = getR_RequestType_ID();
			if (R_RequestType_ID == 0)
			{
				setR_RequestType_ID();
				R_RequestType_ID = getR_RequestType_ID();
			}
			m_requestType = MRequestType.get (getCtx(), R_RequestType_ID);
		}
		return m_requestType;
	}	//	getRequestType
"
org.compiere.model.MRequest.getRequestTypeName,MRequest.java,"String getRequestTypeName()
	{
		if (m_requestType == null)
			getRequestType();
		if (m_requestType == null)
			return ""??"";
		return m_requestType.getName();
	}	//	getRequestTypeText
"
org.compiere.model.MRequest.getCategory,MRequest.java,"MRequestCategory getCategory()
	{
		if (getR_Category_ID() == 0)
			return null;
		return MRequestCategory.get(getCtx(), getR_Category_ID());
	}	//	getCategory
"
org.compiere.model.MRequest.getCategoryName,MRequest.java,"String getCategoryName()
	{
		MRequestCategory cat = getCategory();
		if (cat == null)
			return """";
		return cat.getName();
	}	//	getCategoryName
"
org.compiere.model.MRequest.getGroup,MRequest.java,"MGroup getGroup()
	{
		if (getR_Group_ID() == 0)
			return null;
		return MGroup.get(getCtx(), getR_Group_ID());
	}	//	getGroup
"
org.compiere.model.MRequest.getGroupName,MRequest.java,"String getGroupName()
	{
		MGroup grp = getGroup();
		if (grp == null)
			return """";
		return grp.getName();
	}	//	getGroupName
"
org.compiere.model.MRequest.getStatus,MRequest.java,"MStatus getStatus()
	{
		if (getR_Status_ID() == 0)
			return null;
		return MStatus.get(getCtx(), getR_Status_ID());
	}	//	getStatus
"
org.compiere.model.MRequest.getStatusName,MRequest.java,"String getStatusName()
	{
		MStatus sta = getStatus();
		if (sta == null)
			return ""?"";
		return sta.getName();
	}	//	getStatusName
"
org.compiere.model.MRequest.getResolution,MRequest.java,"MResolution getResolution()
	{
		if (getR_Resolution_ID() == 0)
			return null;
		return MResolution.get(getCtx(), getR_Resolution_ID());
	}	//	getResolution
"
org.compiere.model.MRequest.getResolutionName,MRequest.java,"String getResolutionName()
	{
		MResolution res = getResolution();
		if (res == null)
			return """";
		return res.getName();
	}	//	getResolutionName
"
org.compiere.model.MRequest.isOverdue,MRequest.java,"boolean isOverdue()
	{
		return DUETYPE_Overdue.equals(getDueType());
	}	//	isOverdue
"
org.compiere.model.MRequest.isDue,MRequest.java,"boolean isDue()
	{
		return DUETYPE_Due.equals(getDueType());
	}	//	isDue
"
org.compiere.model.MRequest.getDueTypeText,MRequest.java,"String getDueTypeText()
	{
		return MRefList.getListName(getCtx(), DUETYPE_AD_Reference_ID, getDueType());
	}	//	getDueTypeText
"
org.compiere.model.MRequest.getPriorityText,MRequest.java,"String getPriorityText()
	{
		return MRefList.getListName(getCtx(), PRIORITY_AD_Reference_ID, getPriority());
	}	//	getPriorityText
"
org.compiere.model.MRequest.getPriorityUserText,MRequest.java,"String getPriorityUserText()
	{
		return MRefList.getListName(getCtx(), PRIORITYUSER_AD_Reference_ID, getPriorityUser());
	}	//	getPriorityUserText
"
org.compiere.model.MRequest.getConfidentialText,MRequest.java,"String getConfidentialText()
	{
		return MRefList.getListName(getCtx(), CONFIDENTIALTYPE_AD_Reference_ID, getConfidentialType());
	}	//	getConfidentialText
"
org.compiere.model.MRequest.getConfidentialEntryText,MRequest.java,"String getConfidentialEntryText()
	{
		return MRefList.getListName(getCtx(), CONFIDENTIALTYPEENTRY_AD_Reference_ID, getConfidentialTypeEntry());
	}	//	getConfidentialTextEntry
"
org.compiere.model.MRequest.setDateLastAlert,MRequest.java,"void setDateLastAlert ()
	{
		super.setDateLastAlert (new Timestamp(System.currentTimeMillis()));
	}	//	setDateLastAlert
"
org.compiere.model.MRequest.getSalesRep,MRequest.java,"MUser getSalesRep()
	{
		if (getSalesRep_ID() == 0)
			return null;
		return MUser.get(getCtx(), getSalesRep_ID());
	}	//	getSalesRep
"
org.compiere.model.MRequest.getSalesRepName,MRequest.java,"String getSalesRepName()
	{
		MUser sr = getSalesRep();
		if (sr == null)
			return ""n/a"";
		return sr.getName();
	}	//	getSalesRepName
"
org.compiere.model.MRequest.getCreatedByName,MRequest.java,"String getCreatedByName()
	{
		MUser user = MUser.get(getCtx(), getCreatedBy());
		return user.getName();
	}	//	getCreatedByName
"
org.compiere.model.MRequest.getUser,MRequest.java,"MUser getUser()
	{
		if (getAD_User_ID() == 0)
			return null;
		if (m_user != null && m_user.getAD_User_ID() != getAD_User_ID())
			m_user = null;
		if (m_user == null)
			m_user = new MUser (getCtx(), getAD_User_ID(), get_Trx());
		return m_user;
	}	//	getUser
"
org.compiere.model.MRequest.setAD_User_ID,MRequest.java,"void setAD_User_ID (String oldAD_User_ID,
			String newAD_User_ID, int windowNo) throws Exception
	{
		if (newAD_User_ID == null || newAD_User_ID.length() == 0)
			return;
		int AD_User_ID = Integer.parseInt(newAD_User_ID);
		super.setAD_User_ID(AD_User_ID);
		if (AD_User_ID == 0)
			return;

		if(getC_BPartner_ID() == 0)
		{
			MUser user = new MUser (getCtx(), AD_User_ID, null);
			setC_BPartner_ID(user.getC_BPartner_ID());
		}

	}	//	setR_MailText_ID
"
org.compiere.model.MRequest.getBPartner,MRequest.java,"MBPartner getBPartner()
	{
		if (getC_BPartner_ID() == 0)
			return null;
		if (m_partner != null && m_partner.getC_BPartner_ID() != getC_BPartner_ID())
			m_partner = null;
		if (m_partner == null)
			m_partner = new MBPartner (getCtx(), getC_BPartner_ID(), get_Trx());
		return m_partner;
	}	//	getBPartner
"
org.compiere.model.MRequest.isWebCanUpdate,MRequest.java,"boolean isWebCanUpdate()
	{
		if (isProcessed())
			return false;
		if (getR_Status_ID() == 0)
			setR_Status_ID();
		if (getR_Status_ID() == 0)
			return false;
		MStatus status = MStatus.get(getCtx(), getR_Status_ID());
		if (status == null)
			return false;
		return status.isWebCanUpdate();
	}	//	isWebCanUpdate
"
org.compiere.model.MRequest.setPriority,MRequest.java,"void setPriority()
	{
		if (getPriorityUser() == null)
			setPriorityUser(PRIORITYUSER_Low);
		//
		if (getBPartner() != null)
		{
			MBPGroup bpg = MBPGroup.get(getCtx(), getBPartner().getC_BP_Group_ID());
			String prioBase = bpg.getPriorityBase();
			if (prioBase != null && !prioBase.equals(X_C_BP_Group.PRIORITYBASE_Same))
			{
				char targetPrio = getPriorityUser().charAt(0);
				if (prioBase.equals(X_C_BP_Group.PRIORITYBASE_Lower))
					targetPrio += 2;
				else
					targetPrio -= 2;
				if (targetPrio < PRIORITY_High.charAt(0))	//	1
					targetPrio = PRIORITY_High.charAt(0);
				if (targetPrio > PRIORITY_Low.charAt(0))	//	9
					targetPrio = PRIORITY_Low.charAt(0);
				if (getPriority() == null)
					setPriority(String.valueOf(targetPrio));
				else	//	previous priority
				{
					if (targetPrio < getPriority().charAt(0))
						setPriority(String.valueOf(targetPrio));
				}
			}
		}
		//	Same if nothing else
		if (getPriority() == null)
			setPriority(getPriorityUser());
	}	//	setPriority
"
org.compiere.model.MRequest.setConfidentialTypeEntry,MRequest.java,"void setConfidentialTypeEntry (String ConfidentialTypeEntry)
	{
		if (ConfidentialTypeEntry == null)
			ConfidentialTypeEntry = getConfidentialType();
		//
		if (CONFIDENTIALTYPE_Internal.equals(getConfidentialType()))
			super.setConfidentialTypeEntry (CONFIDENTIALTYPE_Internal);
		else if (CONFIDENTIALTYPE_PrivateInformation.equals(getConfidentialType()))
		{
			if (CONFIDENTIALTYPE_Internal.equals(ConfidentialTypeEntry)
				|| CONFIDENTIALTYPE_PrivateInformation.equals(ConfidentialTypeEntry))
				super.setConfidentialTypeEntry (ConfidentialTypeEntry);
			else
				super.setConfidentialTypeEntry (CONFIDENTIALTYPE_PrivateInformation);
		}
		else if (CONFIDENTIALTYPE_PartnerConfidential.equals(getConfidentialType()))
		{
			if (CONFIDENTIALTYPE_Internal.equals(ConfidentialTypeEntry)
				|| CONFIDENTIALTYPE_PrivateInformation.equals(ConfidentialTypeEntry)
				|| CONFIDENTIALTYPE_PartnerConfidential.equals(ConfidentialTypeEntry))
				super.setConfidentialTypeEntry (ConfidentialTypeEntry);
			else
				super.setConfidentialTypeEntry (CONFIDENTIALTYPE_PartnerConfidential);
		}
		else if (CONFIDENTIALTYPE_PublicInformation.equals(getConfidentialType()))
			super.setConfidentialTypeEntry (ConfidentialTypeEntry);
	}	//	setConfidentialTypeEntry
"
org.compiere.model.MRequest.webUpdate,MRequest.java,"boolean webUpdate (String result)
	{
		MStatus status = MStatus.get(getCtx(), getR_Status_ID());
		if (!status.isWebCanUpdate())
			return false;
		if (status.getUpdate_Status_ID() > 0)
			setR_Status_ID(status.getUpdate_Status_ID());
		setResult(result);
		return true;
	}	//	webUpdate
"
org.compiere.model.MRequest.toString,MRequest.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MRequest["");
		sb.append (get_ID()).append (""-"").append(getDocumentNo()).append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MRequest.createPDF,MRequest.java,"File createPDF ()
	{
		try
		{
			File temp = File.createTempFile(get_TableName()+get_ID()+""_"", "".pdf"");
			return createPDF (temp);
		}
		catch (Exception e)
		{
			log.severe(""Could not create PDF - "" + e.getMessage());
		}
		return null;
	}	//	getPDF
"
org.compiere.model.MRequest.createPDF,MRequest.java,"File createPDF (File file)
	{
	//	ReportEngine re = ReportEngine.get (getCtx(), ReportEngine.INVOICE, getC_Invoice_ID());
	//	if (re == null)
			return null;
	//	return re.getPDF(file);
	}	//	createPDF
"
org.compiere.model.MRequest.beforeSave,MRequest.java,"boolean beforeSave (boolean newRecord)
	{
		//	Request Type
		getRequestType();
		if (newRecord || is_ValueChanged(""R_RequestType_ID""))
		{
			if (m_requestType != null)
			{
				if (isInvoiced() != m_requestType.isInvoiced())
					setIsInvoiced(m_requestType.isInvoiced());
				if (getDateNextAction() == null && m_requestType.getAutoDueDateDays() > 0)
					setDateNextAction(TimeUtil.addDays(new Timestamp(System.currentTimeMillis()),
						m_requestType.getAutoDueDateDays()));
			}
			//	Is Status Valid
			if (getR_Status_ID() != 0)
			{
				MStatus sta = MStatus.get(getCtx(), getR_Status_ID());
				MRequestType rt = MRequestType.get(getCtx(), getR_RequestType_ID());
				if (sta.getR_StatusCategory_ID() != rt.getR_StatusCategory_ID())
					setR_Status_ID();	//	set to default
			}
		}

		//	Request Status
		if (getR_Status_ID() == 0)
			setR_Status_ID();
		//	Validate/Update Due Type
		setDueType();
		MStatus status = MStatus.get(getCtx(), getR_Status_ID());
		//	Close/Open
		if (status != null)
		{
			if (status.isOpen())
			{
				if (getStartDate() == null)
					setStartDate (new Timestamp(System.currentTimeMillis()));
				if (getCloseDate() != null)
					setCloseDate(null);
			}
			if (status.isClosed()
				&& getCloseDate() == null)
				setCloseDate(new Timestamp(System.currentTimeMillis()));
			if (status.isFinalClose())
				setProcessed(true);
		}

		//	Confidential Info
		if (getConfidentialType() == null)
		{
			getRequestType();
			if (m_requestType != null)
			{
				String ct = m_requestType.getConfidentialType();
				if (ct != null)
					setConfidentialType (ct);
			}
			if (getConfidentialType() == null)
				setConfidentialType(CONFIDENTIALTYPEENTRY_PublicInformation);
		}
		if (getConfidentialTypeEntry() == null)
			setConfidentialTypeEntry(getConfidentialType());
		else
			setConfidentialTypeEntry(getConfidentialTypeEntry());

		//	Importance / Priority
		setPriority();

		//	New
		if (newRecord)
			return true;

		//	Change Log
		m_changed = false;
		ArrayList<String> sendInfo = new ArrayList<String>();
		MRequestAction ra = new MRequestAction(this, false);
		//
		if (checkChange(ra, ""R_RequestType_ID""))
			sendInfo.add(""R_RequestType_ID"");
		if (checkChange(ra, ""R_Group_ID""))
			sendInfo.add(""R_Group_ID"");
		if (checkChange(ra, ""R_Category_ID""))
			sendInfo.add(""R_Category_ID"");
		if (checkChange(ra, ""R_Status_ID""))
			sendInfo.add(""R_Status_ID"");
		if (checkChange(ra, ""R_Resolution_ID""))
			sendInfo.add(""R_Resolution_ID"");
		//
		if (checkChange(ra, ""SalesRep_ID""))
		{
			//	Sender
			int AD_User_ID = getCtx().getAD_User_ID();
			if (AD_User_ID == 0)
				AD_User_ID = getUpdatedBy();
			//	Old
			Object oo = get_ValueOld(""SalesRep_ID"");
			int oldSalesRep_ID = 0;
			if (oo instanceof Integer)
				oldSalesRep_ID = ((Integer)oo).intValue();
			if (oldSalesRep_ID != 0)
			{
				//  RequestActionTransfer - Request {0} was transfered by {1} from {2} to {3}
				Object[] args = new Object[] {getDocumentNo(),
					MUser.getNameOfUser(AD_User_ID),
					MUser.getNameOfUser(oldSalesRep_ID),
					MUser.getNameOfUser(getSalesRep_ID())
					};
				String msg = Msg.getMsg(getCtx(), ""RequestActionTransfer"", args);
				addToResult(msg);
				sendInfo.add(""SalesRep_ID"");
			}
		}
		checkChange(ra, ""AD_Role_ID"");
		//
		checkChange(ra, ""Priority"");
		if (checkChange(ra, ""PriorityUser""))
			sendInfo.add(""PriorityUser"");
		if (checkChange(ra, ""IsEscalated""))
			sendInfo.add(""IsEscalated"");
		//
		checkChange(ra, ""ConfidentialType"");
		checkChange(ra, ""Summary"");
		checkChange(ra, ""IsSelfService"");
		checkChange(ra, ""C_BPartner_ID"");
		checkChange(ra, ""AD_User_ID"");
		checkChange(ra, ""C_Project_ID"");
		checkChange(ra, ""A_Asset_ID"");
		checkChange(ra, ""C_Order_ID"");
		checkChange(ra, ""C_Invoice_ID"");
		checkChange(ra, ""M_Product_ID"");
		checkChange(ra, ""C_Payment_ID"");
		checkChange(ra, ""M_InOut_ID"");
	//	checkChange(ra, ""C_Campaign_ID"");
	//	checkChange(ra, ""RequestAmt"");
		checkChange(ra, ""IsInvoiced"");
		checkChange(ra, ""C_Activity_ID"");
		checkChange(ra, ""DateNextAction"");
		checkChange(ra, ""M_ProductSpent_ID"");
		checkChange(ra, ""QtySpent"");
		checkChange(ra, ""QtyInvoiced"");
		checkChange(ra, ""StartDate"");
		checkChange(ra, ""CloseDate"");
		checkChange(ra, ""TaskStatus"");
		checkChange(ra, ""DateStartPlan"");
		checkChange(ra, ""DateCompletePlan"");
		//
		if (m_changed)
			ra.save();

		//	Current Info
		MRequestUpdate update = new MRequestUpdate(this);
		if (update.isNewInfo())
			update.save();
		else
			update = null;
		//
		m_emailTo = new StringBuffer();
		if (update != null || sendInfo.size() > 0)
		{
			sendNotices(sendInfo);

			//	Update
			if(ra != null)
				setDateLastAction(ra.getCreated());
			setLastResult(getResult());
			setDueType();
			//	Reset
			setConfidentialTypeEntry (getConfidentialType());
			setStartDate(null);
			setEndTime(null);
			setR_StandardResponse_ID(0);
			setR_MailText_ID(0);
			setResult(null);
		//	setQtySpent(null);
		//	setQtyInvoiced(null);
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MRequest.checkChange,MRequest.java,"boolean checkChange (MRequestAction ra, String columnName)
	{
		if (is_ValueChanged(columnName))
		{
			Object value = get_ValueOld(columnName);
			if (value == null)
				ra.addNullColumn(columnName);
			else
				ra.set_ValueNoCheck(columnName, value);
			m_changed = true;
			return true;
		}
		return false;
	}	//	checkChange
"
org.compiere.model.MRequest.setSalesRep_ID,MRequest.java,"void setSalesRep_ID (int SalesRep_ID)
	{
		if (SalesRep_ID != 0)
			super.setSalesRep_ID (SalesRep_ID);
		else if (getSalesRep_ID() != 0)
			log.warning(""Ignored - Tried to set SalesRep_ID to 0 from "" + getSalesRep_ID());
	}	//	setSalesRep_ID
"
org.compiere.model.MRequest.setR_MailText_ID,MRequest.java,"void setR_MailText_ID (String oldR_MailText_ID,
			String newR_MailText_ID, int windowNo) throws Exception
	{
		if (newR_MailText_ID == null || newR_MailText_ID.length() == 0)
			return;
		int R_MailText_ID = Integer.parseInt(newR_MailText_ID);
		super.setR_MailText_ID(R_MailText_ID);
		if (R_MailText_ID == 0)
			return;

		MMailText mt = new MMailText(getCtx(), R_MailText_ID, null);
		if (mt.get_ID() == R_MailText_ID)
		{
			String txt = mt.getMailText();
			txt = Env.parseContext(getCtx(), windowNo, txt, false, true);
			setResult(txt);
		}
	}	//	setR_MailText_ID
"
org.compiere.model.MRequest.setR_StandardResponse_ID,MRequest.java,"void setR_StandardResponse_ID (String oldR_StandardResponse_ID,
			String newR_StandardResponse_ID, int windowNo) throws Exception
	{
		if (newR_StandardResponse_ID == null || newR_StandardResponse_ID.length() == 0)
			return;
		int R_StandardResponse_ID = Integer.parseInt(newR_StandardResponse_ID);
		super.setR_StandardResponse_ID(R_StandardResponse_ID);
		if (R_StandardResponse_ID == 0)
			return;

		MStandardResponse sr = new MStandardResponse(getCtx(), R_StandardResponse_ID, null);
		if (sr.get_ID() == R_StandardResponse_ID)
		{
			String txt = sr.getResponseText();
			txt = Env.parseContext(getCtx(), windowNo, txt, false, true);
			setResult(txt);
		}
	}	//	setR_StandardResponse_ID
"
org.compiere.model.MRequest.setR_RequestType_ID,MRequest.java,"void setR_RequestType_ID (String oldR_RequestType_ID,
			String newR_RequestType_ID, int windowNo) throws Exception
	{
		if (newR_RequestType_ID == null || newR_RequestType_ID.length() == 0)
			return;
		int R_RequestType_ID = Integer.parseInt(newR_RequestType_ID);
		super.setR_RequestType_ID(R_RequestType_ID);
		if (R_RequestType_ID == 0)
			return;

		MRequestType rt = MRequestType.get(getCtx(), R_RequestType_ID);
		int R_Status_ID = rt.getDefaultR_Status_ID();
		setR_Status_ID(R_Status_ID);
	}	//	setR_RequestType_ID
"
org.compiere.model.MRequest.afterSave,MRequest.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!success)
			return success;

		//	Create Update
		if (newRecord && getResult() != null)
		{
			MRequestUpdate update = new MRequestUpdate(this);
			update.save();
		}
		//	Initial Mail
		if (newRecord)
			sendNotices(new ArrayList<String>());

		//	ChangeRequest - created in Request Processor
		if (getM_ChangeRequest_ID() != 0
			&& is_ValueChanged(""R_Group_ID""))	//	different ECN assignment?
		{
			int oldID = get_ValueOldAsInt(""R_Group_ID"");
			if (getR_Group_ID() == 0)
				setM_ChangeRequest_ID(0);	//	not effective as in afterSave
			else
			{
				MGroup oldG = MGroup.get(getCtx(), oldID);
				MGroup newG = MGroup.get(getCtx(), getR_Group_ID());
				if (oldG.getM_BOM_ID() != newG.getM_BOM_ID()
					|| oldG.getM_ChangeNotice_ID() != newG.getM_ChangeNotice_ID())
				{
					MChangeRequest ecr = new MChangeRequest(getCtx(), getM_ChangeRequest_ID(), get_Trx());
					if (!ecr.isProcessed()
						|| ecr.getM_FixChangeNotice_ID() == 0)
					{
						ecr.setM_BOM_ID(newG.getM_BOM_ID());
						ecr.setM_ChangeNotice_ID(newG.getM_ChangeNotice_ID());
						ecr.save();
					}
				}
			}
		}

		if (m_emailTo.length() > 0)
			log.saveInfo (""RequestActionEMailOK"", m_emailTo.toString());

		return success;
	}	//	afterSave
"
org.compiere.model.MRequest.sendNotices,MRequest.java,"void sendNotices(ArrayList<String> list)
	{
		//	Subject
		String subject = Msg.translate(getCtx(), ""R_Request_ID"")
			+ "" "" + Msg.getMsg(getCtx(), ""Updated"") + "": "" + getDocumentNo();
		//	Message
		StringBuffer message = new StringBuffer();
		//		UpdatedBy: Joe
		int UpdatedBy = getCtx().getAD_User_ID();
		MUser from = MUser.get(getCtx(), UpdatedBy);
		if (from != null)
			message.append(Msg.translate(getCtx(), ""UpdatedBy"")).append("": "")
				.append(from.getName());
		//		LastAction/Created: ...
		if (getDateLastAction() != null)
			message.append(""\n"").append(Msg.translate(getCtx(), ""DateLastAction""))
				.append("": "").append(getDateLastAction());
		else
			message.append(""\n"").append(Msg.translate(getCtx(), ""Created""))
				.append("": "").append(getCreated());
		//	Changes
		for (int i = 0; i < list.size(); i++)
		{
			String columnName = list.get(i);
			message.append(""\n"").append(Msg.getElement(getCtx(), columnName))
				.append("": "").append(get_DisplayValue(columnName, false))
				.append("" -> "").append(get_DisplayValue(columnName, true));
		}
		//	NextAction
		if (getDateNextAction() != null)
			message.append(""\n"").append(Msg.translate(getCtx(), ""DateNextAction""))
				.append("": "").append(getDateNextAction());
		message.append(SEPARATOR)
			.append(getSummary());
		if (getResult() != null)
			message.append(""\n----------\n"").append(getResult());
		message.append(getMailTrailer());
		File pdf = createPDF();
		log.finer(message.toString());

		//	Prepare sending Notice/Mail
		MClient client = MClient.get(getCtx(), getAD_Client_ID());
		//	Reset from if external
		if (from.getEMailUser() == null || from.getEMailUserPW() == null)
			from = null;
		m_success = 0;
		m_failure = 0;
		m_notices = 0;

		/** List of users - aviod duplicates	*/
		ArrayList<Integer> userList = new ArrayList<Integer>();
		String sql = ""SELECT u.AD_User_ID, u.NotificationType, u.EMail, u.Name, MAX(r.AD_Role_ID) ""
			+ ""FROM RV_RequestUpdates_Only ru""
			+ "" INNER JOIN AD_User u ON (ru.AD_User_ID=u.AD_User_ID)""
			+ "" LEFT OUTER JOIN AD_User_Roles r ON (u.AD_User_ID=r.AD_User_ID) ""
			+ ""WHERE ru.R_Request_ID=? ""
			+ ""GROUP BY u.AD_User_ID, u.NotificationType, u.EMail, u.Name"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, getR_Request_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				int AD_User_ID = rs.getInt(1);
				String NotificationType = rs.getString(2);
				if (NotificationType == null)
					NotificationType = X_AD_User.NOTIFICATIONTYPE_EMail;
				String email = rs.getString(3);
				String Name = rs.getString(4);
				//	Role
				int AD_Role_ID = rs.getInt(5);
				if (rs.wasNull())
					AD_Role_ID = -1;

				//	Don't send mail to oneself
		//		if (AD_User_ID == UpdatedBy)
		//			continue;

				//	No confidential to externals
				if (AD_Role_ID == -1
					&& (getConfidentialTypeEntry().equals(CONFIDENTIALTYPE_Internal)
						|| getConfidentialTypeEntry().equals(CONFIDENTIALTYPE_PrivateInformation)))
					continue;

				if (X_AD_User.NOTIFICATIONTYPE_None.equals(NotificationType))
				{
					log.config(""Opt out: "" + Name);
					continue;
				}
				if ((X_AD_User.NOTIFICATIONTYPE_EMail.equals(NotificationType)
					|| X_AD_User.NOTIFICATIONTYPE_EMailPlusNotice.equals(NotificationType))
					&& (email == null || email.length() == 0))
				{
					if (AD_Role_ID >= 0)
						NotificationType = X_AD_User.NOTIFICATIONTYPE_Notice;
					else
					{
						log.config(""No EMail: "" + Name);
						continue;
					}
				}
				if (X_AD_User.NOTIFICATIONTYPE_Notice.equals(NotificationType)
					&& AD_Role_ID >= 0)
				{
					log.config(""No internal User: "" + Name);
					continue;
				}

				//	Check duplicate receivers
				Integer ii = Integer.valueOf (AD_User_ID);
				if (userList.contains(ii))
					continue;
				userList.add(ii);
				//
				sendNoticeNow(AD_User_ID, NotificationType,
					client, from, subject, message.toString (), pdf);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//	New Sales Rep (may happen if sent from beforeSave
		if (!userList.contains(getSalesRep_ID()))
			sendNoticeNow(getSalesRep_ID(), null,
				client, from, subject, message.toString (), pdf);

		log.info(""EMail Success="" + m_success + "", Failure="" + m_failure
			+ "" - Notices="" + m_notices);
	}	//	sendNotice
"
org.compiere.model.MRequest.sendNoticeNow,MRequest.java,"void sendNoticeNow(int AD_User_ID, String NotificationType,
		MClient client, MUser from, String subject, String message, File pdf)
	{
		MUser to = MUser.get (getCtx(), AD_User_ID);
		if (NotificationType == null)
			NotificationType = to.getNotificationType();
		//	Send Mail
		if (X_AD_User.NOTIFICATIONTYPE_EMail.equals(NotificationType)
			|| X_AD_User.NOTIFICATIONTYPE_EMailPlusNotice.equals(NotificationType))
		{
			if (client.sendEMail(from, to, subject, message, pdf))
			{
				m_success++;
				if (m_emailTo.length() > 0)
					m_emailTo.append("", "");
				m_emailTo.append(to.getEMail());
			}
			else
			{
				log.warning(""Failed: "" + to);
				m_failure++;
				NotificationType = X_AD_User.NOTIFICATIONTYPE_Notice;
			}
		}
		//	Send Note
		if (X_AD_User.NOTIFICATIONTYPE_Notice.equals(NotificationType)
			|| X_AD_User.NOTIFICATIONTYPE_EMailPlusNotice.equals(NotificationType))
		{
			int AD_Message_ID = 834;
			MNote note = new MNote(getCtx(), AD_Message_ID, AD_User_ID,
				X_R_Request.Table_ID, getR_Request_ID(),
				subject, message.toString(), get_Trx());
			if (note.save())
				m_notices++;
		}
	}	//	sendNoticeNow
"
org.compiere.model.MRequest.getMailTrailer,MRequest.java,"String getMailTrailer()
	{
		StringBuffer sb = new StringBuffer(""\n"").append(SEPARATOR)
			.append(Msg.translate(getCtx(), ""R_Request_ID""))
			.append("": "").append(getDocumentNo())
			.append(""  "").append(getMailTag())
			.append(""\nSent by CompiereMail "");
		String serverAddress = getServerAddress();
		if (serverAddress != null)
		{
			if (serverAddress.startsWith(""http://""))
				serverAddress = Util.replace(serverAddress, ""http://"", ""https://"");
			sb.append(""\nReply via "").append(serverAddress)
				.append(""/apps/Compiere.html?W_Store_ID="").append(m_W_Store_ID)
				.append(""#Node?nodeID="").append(m_AD_Menu_ID)
				.append(""&Record_ID="").append(getR_Request_ID())
				.append(""&mode=single"");
		}
		return sb.toString();
	}	//	getMailTrailer
"
org.compiere.model.MRequest.getServerAddress,MRequest.java,"String getServerAddress()
	{
		if (m_serverAddress != null)
		{
			if (m_serverAddress.length() == 0)
				return null;	//	not found
			return m_serverAddress;
		}
		//	Get Info
		MStore[] stores = MStore.getOfClient(MClient.get(getCtx(), getAD_Client_ID()));
		for (MStore element : stores)
		{
			if (element.getAD_Client_ID() == getAD_Client_ID())	//	first one
			{
				m_serverAddress = element.getURL();
				m_W_Store_ID = element.getW_Store_ID();
				break;
			}
		}
		//	Menu
		if (m_serverAddress != null)
		{
			log.info(""Found: "" + m_serverAddress + ""; W_Store_ID="" + m_W_Store_ID);
			MMenu[] menues = MMenu.get(getCtx(), ""Name LIKE 'Support Request (External)'"");
			if (menues.length == 0)
			{
				m_serverAddress = null;
				log.warning(""No external Menu found for Link"");
			}
			else
				m_AD_Menu_ID = menues[0].getAD_Menu_ID();
		}
		else
			log.warning(""No Web Store found for AD_Client_ID="" + getAD_Client_ID());
		if (m_serverAddress == null)
		{
			m_serverAddress = """";
			return null;
		}
		return m_serverAddress;
	}	//	getServerAddress
"
org.compiere.model.MRequest.getMailTag,MRequest.java,"String getMailTag()
	{
		return TAG_START + get_ID() + TAG_END;
	}	//	getMailTag
"
org.compiere.model.MRequest.doClose,MRequest.java,"void doClose()
	{
		MStatus status = MStatus.get(getCtx(), getR_Status_ID());
		if (!status.isClosed())
		{
			MStatus[] closed = MStatus.getClosed(getCtx(), status.getR_StatusCategory_ID());
			MStatus newStatus = null;
			for (int i = 0; i < closed.length; i++)
			{
				if (!closed[i].isFinalClose())
				{
					newStatus = closed[i];
					break;
				}
			}
			if (newStatus == null && closed.length > 0)
				newStatus = closed[0];
			if (newStatus != null)
				setR_Status_ID(newStatus.getR_Status_ID());
		}
	}	//	doClose
"
org.compiere.model.MRequest.doEscalate,MRequest.java,"void doEscalate(boolean user)
	{
		if (user)
		{
			String Importance = getPriorityUser();
			if (PRIORITYUSER_Urgent.equals(Importance))
				;	//	high as it goes
			else if (PRIORITYUSER_High.equals(Importance))
				setPriorityUser(PRIORITYUSER_Urgent);
			else if (PRIORITYUSER_Medium.equals(Importance))
				setPriorityUser(PRIORITYUSER_High);
			else if (PRIORITYUSER_Low.equals(Importance))
				setPriorityUser(PRIORITYUSER_Medium);
			else if (PRIORITYUSER_Minor.equals(Importance))
				setPriorityUser(PRIORITYUSER_Low);
		}
		else
		{
			String Importance = getPriority();
			if (PRIORITY_Urgent.equals(Importance))
				;	//	high as it goes
			else if (PRIORITY_High.equals(Importance))
				setPriority(PRIORITY_Urgent);
			else if (PRIORITY_Medium.equals(Importance))
				setPriority(PRIORITY_High);
			else if (PRIORITY_Low.equals(Importance))
				setPriority(PRIORITY_Medium);
			else if (PRIORITY_Minor.equals(Importance))
				setPriority(PRIORITY_Low);
		}
	}	//	doEscalate
"
org.compiere.model.MProjectTypePhase.getTasks,MProjectTypePhase.java,"MProjectTypeTask[] getTasks()
	{
		ArrayList<MProjectTypeTask> list = new ArrayList<MProjectTypeTask>();
		String sql = ""SELECT * FROM C_Task WHERE C_Phase_ID=? ORDER BY SeqNo"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getC_Phase_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MProjectTypeTask (getCtx(), rs, get_Trx()));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			log.log(Level.SEVERE, sql, ex);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;
		//
		MProjectTypeTask[] retValue = new MProjectTypeTask[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getPhases
"
org.compiere.model.MDataMigrationEntry.beforeSave,MDataMigrationEntry.java,"boolean beforeSave(boolean newRecord) 
	{
		String et = getDataMigrationEntryType();
		if (DATAMIGRATIONENTRYTYPE_Record.equals(et))
		{
			if (getWhereClause() != null)
				setWhereClause(null);
		}
		else if (getRecord_ID() != 0)
			setRecord_ID(0);
		
		return true;
	}	//	beforeSave
"
org.compiere.model.MDataMigrationEntry.getEntryPOs,MDataMigrationEntry.java,"PO[] getEntryPOs(MTable table)
	{
		if (table == null || table.getAD_Table_ID() != getAD_Table_ID())
			table = new MTable(getCtx(), getAD_Table_ID(), null);
		
		//	Single Value
		String et = getDataMigrationEntryType();
		if (DATAMIGRATIONENTRYTYPE_Record.equals(et))
		{
			int Record_ID = getRecord_ID();
			if (Record_ID == 0)
			{
				log.warning(""No Record_ID"");
				return new PO[]{};
			}
			PO po = table.getPO(getCtx(), Record_ID, get_Trx());
			if (po == null || po.get_ID() != Record_ID)
			{
				log.warning(""Not found: Record_ID="" + Record_ID);
				return new PO[]{};
			}
			return new PO[]{po};
		}
			
		//	Where Clause
		MDataMigration data = MDataMigration.get(getCtx(), getAD_DataMigration_ID());
		ArrayList<PO> list = new ArrayList<PO>();
		StringBuffer sql = new StringBuffer(""SELECT * FROM "").append(table.getTableName())
			.append("" WHERE "").append(getWhereClause())
			.append(data.getSecurityWhereClause());
		PreparedStatement pstmt = null;
		try 
		{
			pstmt = DB.prepareStatement(sql.toString(), get_Trx());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(table.getPO(getCtx(), rs, get_Trx()));
			rs.close();
			pstmt.close();
			pstmt = null;
		} 
		catch (Exception e) 
		{
			log.log(Level.WARNING, sql.toString());
		}
		try 
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e) 
		{
			pstmt = null;
		}
		PO[] retValue = new PO[list.size()];
		list.toArray(retValue);
		return retValue;
	}
"
org.compiere.model.MDataMigrationEntry.toString,MDataMigrationEntry.java,"String toString()
    {
	    StringBuffer sb = new StringBuffer(""MDataMigrationEntry["")
	    	.append(get_ID())
	    	.append("",AD_Table_ID="").append(getAD_Table_ID());
	    String s = getWhereClause();
	    if (!Util.isEmpty(s))
	    	sb.append("",Where="").append(s);
	    if (getRecord_ID() != 0)
	    	sb.append("",Record_ID="").append(getRecord_ID());
	    sb.append(""]"");
	    return sb.toString();
    }	//	toString
"
org.compiere.model.MBankStatementMatcher.getMatchers,MBankStatementMatcher.java,"MBankStatementMatcher[] getMatchers (Ctx ctx, Trx trx)
	{
		ArrayList<MBankStatementMatcher> list = new ArrayList<MBankStatementMatcher>();
		String sql = MRole.getDefault(ctx, false).addAccessSQL(
			""SELECT * FROM C_BankStatementMatcher ORDER BY SeqNo"", 
			""C_BankStatementMatcher"", MRole.SQL_NOTQUALIFIED, MRole.SQL_RO);
		
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, trx);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add (new MBankStatementMatcher(ctx, rs, trx));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//	Convert		
		MBankStatementMatcher[] retValue = new MBankStatementMatcher[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getMatchers
"
org.compiere.model.MBankStatementMatcher.isMatcherValid,MBankStatementMatcher.java,"boolean isMatcherValid()
	{
		if (m_matcherValid == null)
			getMatcher();
		return m_matcherValid.booleanValue();
	}	//	isMatcherValid
"
org.compiere.model.MBankStatementMatcher.getMatcher,MBankStatementMatcher.java,"BankStatementMatcherInterface getMatcher()
	{
		if (m_matcher != null 
			|| (m_matcherValid != null && m_matcherValid.booleanValue()))
			return m_matcher;
			
		String className = getClassname();
		if (className == null || className.length() == 0)
			return null;
		
		try
		{
			Class<?> matcherClass = Class.forName(className);
			m_matcher = (BankStatementMatcherInterface)matcherClass.newInstance();
			m_matcherValid = Boolean.TRUE;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, className, e);
			m_matcher = null;
			m_matcherValid = Boolean.FALSE;
		}
		return m_matcher;
	}	//	getMatcher
"
org.compiere.model.MColorSchema.getColor,MColorSchema.java,"Color getColor (Ctx ctx, int PA_ColorSchema_ID, 
		BigDecimal target, BigDecimal actual)
	{
		int percent = 0;
		if (actual != null && actual.signum() != 0 
			&& target != null && target.signum() != 0)
		{
			BigDecimal pp = actual.multiply(Env.ONEHUNDRED)
				.divide(target, 0, BigDecimal.ROUND_HALF_UP);
			percent = pp.intValue();
		}
		return getColor(ctx, PA_ColorSchema_ID, percent);
	}	//	getColor
"
org.compiere.model.MColorSchema.getColor,MColorSchema.java,"Color getColor (Ctx ctx, int PA_ColorSchema_ID, int percent)
	{
		MColorSchema cs = get(ctx, PA_ColorSchema_ID);
		return cs.getColor(percent);
	}	//	getColor
"
org.compiere.model.MColorSchema.get,MColorSchema.java,"MColorSchema get (Ctx ctx, int PA_ColorSchema_ID)
	{
		if (PA_ColorSchema_ID == 0)
		{
			MColorSchema retValue = new MColorSchema(ctx, 0, null);
			retValue.setDefault();
			return retValue;
		}
		Integer key = Integer.valueOf (PA_ColorSchema_ID);
		MColorSchema retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MColorSchema (ctx, PA_ColorSchema_ID, null);
		if (retValue.get_ID() != 0)
			s_cache.put (key, retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MColorSchema.setDefault,MColorSchema.java,"void setDefault()
	{
		setName(""Default"");
		setMark1Percent (50);
		setAD_PrintColor1_ID (102);		//	red
		setMark2Percent (100);
		setAD_PrintColor2_ID (113);		//	yellow
		setMark3Percent (9999);
		setAD_PrintColor3_ID (103);		//	green
	}	//	setDefault
"
org.compiere.model.MColorSchema.beforeSave,MColorSchema.java,"boolean beforeSave (boolean newRecord)
	{
		if (getMark1Percent() > getMark2Percent())
			setMark1Percent(getMark2Percent());
		if (getMark2Percent() > getMark3Percent() && getMark3Percent() != 0)
			setMark2Percent(getMark3Percent());
		if (getMark3Percent() > getMark4Percent() && getMark4Percent() != 0)
			setMark4Percent(getMark4Percent());
		//
		return true;
	}	//	beforeSave
"
org.compiere.model.MColorSchema.getColor,MColorSchema.java,"Color getColor (int percent)
	{
		int AD_PrintColor_ID = 0;
		if (percent <= getMark1Percent() || getMark2Percent() == 0)
			AD_PrintColor_ID = getAD_PrintColor1_ID();
		else if (percent <= getMark2Percent() || getMark3Percent() == 0)
			AD_PrintColor_ID = getAD_PrintColor2_ID();
		else if (percent <= getMark3Percent() || getMark4Percent() == 0)
			AD_PrintColor_ID = getAD_PrintColor3_ID();
		else
			AD_PrintColor_ID = getAD_PrintColor4_ID();
		if (AD_PrintColor_ID == 0)
		{
			if (getAD_PrintColor3_ID() != 0)
				AD_PrintColor_ID = getAD_PrintColor3_ID();
			else if (getAD_PrintColor2_ID() != 0)
				AD_PrintColor_ID = getAD_PrintColor2_ID();
			else if (getAD_PrintColor1_ID() != 0)
				AD_PrintColor_ID = getAD_PrintColor1_ID();
		}
		if (AD_PrintColor_ID == 0)
			return Color.black;
		//
		MPrintColor pc = MPrintColor.get(getCtx(), AD_PrintColor_ID);
		if (pc != null)
			return pc.getColor();
		return Color.black;
	}	//	getColor
"
org.compiere.model.MColorSchema.toString,MColorSchema.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MColorSchema["");
		sb.append (get_ID()).append (""-"").append (getName()).append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MProject.copyFrom,MProject.java,"MProject copyFrom (Ctx ctx, int C_Project_ID, Timestamp dateDoc, Trx trx)
	{
		MProject from = new MProject (ctx, C_Project_ID, trx);
		if (from.getC_Project_ID() == 0)
			throw new IllegalArgumentException (""From Project not found C_Project_ID="" + C_Project_ID);
		//
		MProject to = new MProject (ctx, 0, trx);
		PO.copyValues(from, to, from.getAD_Client_ID(), from.getAD_Org_ID());
		to.set_ValueNoCheck (""C_Project_ID"", I_ZERO);
		//	Set Value with Time
		String Value = to.getValue() + "" "";
		String Time = dateDoc.toString();
		int length = Value.length() + Time.length();
		if (length <= 40)
			Value += Time;
		else
			Value += Time.substring (length-40);
		to.setValue(Value);
		to.setInvoicedAmt(Env.ZERO);
		to.setProjectBalanceAmt(Env.ZERO);
		to.setProcessed(false);
		//
		if (!to.save())
			throw new IllegalStateException(""Could not create Project"");

		if (to.copyDetailsFrom(from) == 0)
			throw new IllegalStateException(""Could not create Project Details"");

		return to;
	}	//	copyFrom
"
org.compiere.model.MProject.getC_ProjectType_ID_Int,MProject.java,"int getC_ProjectType_ID_Int()
	{
		String pj = super.getC_ProjectType_ID();
		if (pj == null)
			return 0;
		int C_ProjectType_ID = 0;
		try
		{
			C_ProjectType_ID = Integer.parseInt (pj);
		}
		catch (Exception ex)
		{
			log.log(Level.SEVERE, pj, ex);
		}
		return C_ProjectType_ID;
	}	//	getC_ProjectType_ID_Int
"
org.compiere.model.MProject.setC_ProjectType_ID,MProject.java,"void setC_ProjectType_ID (int C_ProjectType_ID)
	{
		if (C_ProjectType_ID == 0)
			super.set_Value(""C_ProjectType_ID"", null);
		else
			super.set_Value(""C_ProjectType_ID"", Integer.valueOf(C_ProjectType_ID));
	}	//	setC_ProjectType_ID
"
org.compiere.model.MProject.toString,MProject.java,"String toString()
	{
		StringBuffer sb = new StringBuffer (""MProject["").append(get_ID())
			.append(""-"").append(getValue()).append("",ProjectCategory="").append(getProjectCategory())
			.append(""]"");
		return sb.toString();
	}	//	toString
"
org.compiere.model.MProject.getM_PriceList_ID,MProject.java,"int getM_PriceList_ID()
	{
		if (getM_PriceList_Version_ID() == 0)
			return 0;
		if (m_M_PriceList_ID > 0)
			return m_M_PriceList_ID;
		//
		String sql = ""SELECT M_PriceList_ID FROM M_PriceList_Version WHERE M_PriceList_Version_ID=?"";
		m_M_PriceList_ID = DB.getSQLValue(null, sql, getM_PriceList_Version_ID());
		return m_M_PriceList_ID;
	}	//	getM_PriceList_ID
"
org.compiere.model.MProject.setM_PriceList_Version_ID,MProject.java,"void setM_PriceList_Version_ID (int M_PriceList_Version_ID)
	{
		super.setM_PriceList_Version_ID(M_PriceList_Version_ID);
		m_M_PriceList_ID = 0;	//	reset
	}	//	setM_PriceList_Version_ID
"
org.compiere.model.MProject.getLines,MProject.java,"MProjectLine[] getLines()
	{
		ArrayList<MProjectLine> list = new ArrayList<MProjectLine>();
		String sql = ""SELECT * FROM C_ProjectLine WHERE C_Project_ID=? ORDER BY Line"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getC_Project_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MProjectLine (getCtx(), rs, get_Trx()));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			log.log(Level.SEVERE, sql, ex);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;
		//
		MProjectLine[] retValue = new MProjectLine[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getLines
"
org.compiere.model.MProject.getIssues,MProject.java,"MProjectIssue[] getIssues()
	{
		ArrayList<MProjectIssue> list = new ArrayList<MProjectIssue>();
		String sql = ""SELECT * FROM C_ProjectIssue WHERE C_Project_ID=? ORDER BY Line"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getC_Project_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MProjectIssue (getCtx(), rs, get_Trx()));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			log.log(Level.SEVERE, sql, ex);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;
		//
		MProjectIssue[] retValue = new MProjectIssue[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getIssues
"
org.compiere.model.MProject.getPhases,MProject.java,"MProjectPhase[] getPhases()
	{
		ArrayList<MProjectPhase> list = new ArrayList<MProjectPhase>();
		String sql = ""SELECT * FROM C_ProjectPhase WHERE C_Project_ID=? ORDER BY SeqNo"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getC_Project_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MProjectPhase (getCtx(), rs, get_Trx()));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			log.log(Level.SEVERE, sql, ex);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;
		//
		MProjectPhase[] retValue = new MProjectPhase[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getPhases
"
org.compiere.model.MProject.copyDetailsFrom,MProject.java,"int copyDetailsFrom (MProject project)
	{
		if (isProcessed() || project == null)
			return 0;
		int count = copyLinesFrom(project)
			+ copyPhasesFrom(project);
		return count;
	}	//	copyDetailsFrom
"
org.compiere.model.MProject.copyLinesFrom,MProject.java,"int copyLinesFrom (MProject project)
	{
		if (isProcessed() || project == null)
			return 0;
		int count = 0;
		MProjectLine[] fromLines = project.getLines();
		for (MProjectLine element : fromLines) {
			MProjectLine line = new MProjectLine (getCtx(), 0, project.get_Trx());
			PO.copyValues(element, line, getAD_Client_ID(), getAD_Org_ID());
			line.setC_Project_ID(getC_Project_ID());
			line.setInvoicedAmt(Env.ZERO);
			line.setInvoicedQty(Env.ZERO);
			line.setC_OrderPO_ID(0);
			line.setC_Order_ID(0);
			line.setProcessed(false);
			if (line.save())
				count++;
		}
		if (fromLines.length != count)
			log.log(Level.SEVERE, ""Lines difference - Project="" + fromLines.length + "" <> Saved="" + count);

		return count;
	}	//	copyLinesFrom
"
org.compiere.model.MProject.copyPhasesFrom,MProject.java,"int copyPhasesFrom (MProject fromProject)
	{
		if (isProcessed() || fromProject == null)
			return 0;
		int count = 0;
		int taskCount = 0;
		//	Get Phases
		MProjectPhase[] myPhases = getPhases();
		MProjectPhase[] fromPhases = fromProject.getPhases();
		//	Copy Phases
		for (MProjectPhase element : fromPhases) {
			//	Check if Phase already exists
			int C_Phase_ID = element.getC_Phase_ID();
			boolean exists = false;
			if (C_Phase_ID == 0)
				exists = false;
			else
			{
				for (MProjectPhase element2 : myPhases) {
					if (element2.getC_Phase_ID() == C_Phase_ID)
					{
						exists = true;
						break;
					}
				}
			}
			//	Phase exist
			if (exists)
				log.info(""Phase already exists here, ignored - "" + element);
			else
			{
				MProjectPhase toPhase = new MProjectPhase (getCtx (), 0, get_Trx());
				PO.copyValues (element, toPhase, getAD_Client_ID (), getAD_Org_ID ());
				toPhase.setC_Project_ID (getC_Project_ID ());
				toPhase.setC_Order_ID (0);
				toPhase.setIsComplete (false);
				if (toPhase.save ())
				{
					count++;
					taskCount += toPhase.copyTasksFrom (element);
				}
			}
		}
		if (fromPhases.length != count)
			log.warning(""Count difference - Project="" + fromPhases.length + "" <> Saved="" + count);

		return count + taskCount;
	}	//	copyPhasesFrom
"
org.compiere.model.MProject.setProjectType,MProject.java,"void setProjectType (MProjectType type)
	{
		if (type == null)
			return;
		setC_ProjectType_ID(type.getC_ProjectType_ID());
		setProjectCategory(type.getProjectCategory());
		if (PROJECTCATEGORY_ServiceChargeProject.equals(getProjectCategory()))
			copyPhasesFrom(type);
	}	//	setProjectType
"
org.compiere.model.MProject.copyPhasesFrom,MProject.java,"int copyPhasesFrom (MProjectType type)
	{
		//	create phases
		int count = 0;
		int taskCount = 0;
		MProjectTypePhase[] typePhases = type.getPhases();
		for (MProjectTypePhase element : typePhases) {
			MProjectPhase toPhase = new MProjectPhase (this, element);
			if (toPhase.save())
			{
				count++;
				taskCount += toPhase.copyTasksFrom(element);
			}
		}
		log.fine(""#"" + count + ""/"" + taskCount 
			+ "" - "" + type);
		if (typePhases.length != count)
			log.log(Level.SEVERE, ""Count difference - Type="" + typePhases.length + "" <> Saved="" + count);
		return count;
	}	//	copyPhasesFrom
"
org.compiere.model.MProject.beforeSave,MProject.java,"boolean beforeSave (boolean newRecord)
	{
		if (getAD_User_ID() == -1)	//	Summary Project in Dimensions
			setAD_User_ID(0);
		
		//	Set Currency
		if (is_ValueChanged(""M_PriceList_Version_ID"") && getM_PriceList_Version_ID() != 0)
		{
			MPriceList pl = MPriceList.get(getCtx(), getM_PriceList_ID(), null);
			if (pl != null && pl.get_ID() != 0)
				setC_Currency_ID(pl.getC_Currency_ID());
		}
		
		return true;
	}	//	beforeSave
"
org.compiere.model.MProject.afterSave,MProject.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (newRecord & success)
		{
			success = insert_Accounting(""C_Project_Acct"", ""C_AcctSchema_Default"", null);
		}

		//	Value/Name change
		if (success && !newRecord 
			&& (is_ValueChanged(""Value"") || is_ValueChanged(""Name"")))
			MAccount.updateValueDescription(getCtx(), ""C_Project_ID="" + getC_Project_ID(), get_Trx());

		return success;
	}	//	afterSave
"
org.compiere.model.MProject.beforeDelete,MProject.java,"boolean beforeDelete ()
	{
		return delete_Accounting(""C_Project_Acct""); 
	}	//	beforeDelete
"
org.compiere.model.MAdvertisement.getMClickCount,MAdvertisement.java,"MClickCount getMClickCount()
	{
		if (getW_ClickCount_ID() == 0)
			return null;
		if (m_clickCount == null)
			m_clickCount = new MClickCount (getCtx(), getW_ClickCount_ID(), get_Trx());
		return m_clickCount;
	}	//	MClickCount
"
org.compiere.model.MAdvertisement.getClickTargetURL,MAdvertisement.java,"String getClickTargetURL()
	{
		getMClickCount();
		if (m_clickCount == null)
			return ""-"";
		return m_clickCount.getTargetURL();
	}	//	getClickTargetURL
"
org.compiere.model.MAdvertisement.setClickTargetURL,MAdvertisement.java,"void setClickTargetURL(String TargetURL)
	{
		getMClickCount();
		if (m_clickCount == null)
			m_clickCount = new MClickCount(this);
		if (m_clickCount != null)
		{
			m_clickCount.setTargetURL(TargetURL);
			m_clickCount.save(get_Trx());
		}
	}	//	getClickTargetURL
"
org.compiere.model.MAdvertisement.getClickCountWeek,MAdvertisement.java,"ValueNamePair[] getClickCountWeek ()
	{
		getMClickCount();
		if (m_clickCount == null)
			return new ValueNamePair[0];
		return m_clickCount.getCountWeek();
	}	//	getClickCountWeek
"
org.compiere.model.MAdvertisement.getMCounterCount,MAdvertisement.java,"MCounterCount getMCounterCount()
	{
		if (getW_CounterCount_ID() == 0)
			return null;
		if (m_counterCount == null)
			m_counterCount = new MCounterCount (getCtx(), getW_CounterCount_ID(), get_Trx());
		return m_counterCount;
	}	//	MCounterCount
"
org.compiere.model.MAdvertisement.getSalesRep_ID,MAdvertisement.java,"int getSalesRep_ID()
	{
		if (m_SalesRep_ID == 0)
		{
			m_SalesRep_ID = getAD_User_ID();
			if (m_SalesRep_ID == 0)
				m_SalesRep_ID = DB.getSQLValue(null,
					""SELECT AD_User_ID FROM AD_User ""
					+ ""WHERE C_BPartner_ID=? AND IsActive='Y' ORDER BY 1"", getC_BPartner_ID());
		}
		return m_SalesRep_ID;
	}	//	getSalesRep_ID
"
org.compiere.model.MDiscountSchemaBreak.applies,MDiscountSchemaBreak.java,"boolean applies (BigDecimal Value, int M_Product_ID, int M_Product_Category_ID)
	{
		if (!isActive())
			return false;
		
		//	below break value
		if (Value.compareTo(getBreakValue()) < 0)
			return false;
		
		//	No Product / Category 
		if (getM_Product_ID() == 0 
			&& getM_Product_Category_ID() == 0)
			return true;
		
		//	Product
		if (getM_Product_ID() == M_Product_ID)
			return true;
		
		//	Category
		if (M_Product_Category_ID != 0)
			return getM_Product_Category_ID() == M_Product_Category_ID;

		//	Look up Category of Product
		return MProductCategory.isCategory(getM_Product_Category_ID(), M_Product_ID);
	}	//	applies
"
org.compiere.model.MDiscountSchemaBreak.toString,MDiscountSchemaBreak.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MDiscountSchemaBreak["");
		sb.append(get_ID()).append(""-Seq="").append(getSeqNo());
		if (getM_Product_Category_ID() != 0)
			sb.append("",M_Product_Category_ID="").append(getM_Product_Category_ID());
		if (getM_Product_ID() != 0)
			sb.append("",M_Product_ID="").append(getM_Product_ID());
		sb.append("",Break="").append(getBreakValue());
		if (isBPartnerFlatDiscount())
			sb.append("",FlatDiscount"");
		else
			sb.append("",Discount="").append(getBreakDiscount());
		sb.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MProductionLine.setM_Product_ID,MProductionLine.java,"void setM_Product_ID (String oldM_Product_ID, 
			String newM_Product_ID, int windowNo) throws Exception
	{
		if (newM_Product_ID == null || newM_Product_ID.length() == 0)
			return;
		int M_Product_ID = Integer.parseInt(newM_Product_ID);
		super.setM_Product_ID(M_Product_ID);
		if (M_Product_ID == 0)
		{
			setM_AttributeSetInstance_ID(0);
			return;
		}
		//	Set Attribute
		int M_AttributeSetInstance_ID = getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_AttributeSetInstance_ID"");
		if (getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_Product_ID"") == M_Product_ID
			&& M_AttributeSetInstance_ID != 0)
			setM_AttributeSetInstance_ID(M_AttributeSetInstance_ID);
		else
			setM_AttributeSetInstance_ID(0);
	}	//	setM_Product_ID
"
org.compiere.model.CalloutRequest.copyMail,CalloutRequest.java,"String copyMail (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		String colName = mField.getColumnName();
		log.info(colName + ""="" + value);
		if (value == null)
			return """";

		Integer R_MailText_ID = (Integer)value;
		String sql = ""SELECT MailHeader, MailText FROM R_MailText ""
			+ ""WHERE R_MailText_ID=?"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, R_MailText_ID.intValue());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				String txt = rs.getString(2);
				txt = Env.parseContext(ctx, WindowNo, txt, false, true);
				mTab.setValue(""Result"", txt);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		return """";
	}   //  copyText
"
org.compiere.model.CalloutRequest.copyResponse,CalloutRequest.java,"String copyResponse (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		String colName = mField.getColumnName();
		log.info(colName + ""="" + value);
		if (value == null)
			return """";

		Integer R_StandardResponse_ID = (Integer)value;
		String sql = ""SELECT Name, ResponseText FROM R_StandardResponse ""
			+ ""WHERE R_StandardResponse_ID=?"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, R_StandardResponse_ID.intValue());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				String txt = rs.getString(2);
				txt = Env.parseContext(ctx, WindowNo, txt, false, true);
				mTab.setValue(""Result"", txt);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		return """";
	}   //  copyResponse
"
org.compiere.model.CalloutRequest.type,CalloutRequest.java,"String type (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		String colName = mField.getColumnName();
		log.info(colName + ""="" + value);
		mTab.setValue(""R_Status_ID"", null);
		if (value == null)
			return """";
		int R_RequestType_ID = ((Integer)value).intValue();
		if (R_RequestType_ID == 0)
			return """";
		MRequestType rt = MRequestType.get(ctx, R_RequestType_ID);
		int R_Status_ID = rt.getDefaultR_Status_ID();
		if (R_Status_ID != 0)
			mTab.setValue(""R_Status_ID"", Integer.valueOf(R_Status_ID));

		return """";
	}	//	type
"
org.compiere.model.PP_PayFlowPro.getVersion,PP_PayFlowPro.java,"String getVersion()
	{
		return ""PayFlowPro "" + m_pp.Version();
	}   //  getVersion
"
org.compiere.model.PP_PayFlowPro.processCC,PP_PayFlowPro.java,"boolean processCC () throws IllegalArgumentException
	{
		log.fine(p_mpp.getHostAddress() + "" "" + p_mpp.getHostPort() + "", Timeout="" + getTimeout()
			+ ""; Proxy="" + p_mpp.getProxyAddress() + "" "" + p_mpp.getProxyPort() + "" "" + p_mpp.getProxyLogon() + "" "" + p_mpp.getProxyPassword());
		//
		StringBuffer param = new StringBuffer();
		//  Transaction Type
		if (p_mp.getTrxType().equals(X_C_Payment.TRXTYPE_Sales))
			param.append(""TRXTYPE="").append(p_mp.getTrxType());
		else
			throw new IllegalArgumentException(""PP_PayFlowPro TrxType not supported - "" + p_mp.getTrxType());

		//  Mandatory Fields
		param.append(""&TENDER=C"")										//	CreditCard
			.append(""&ACCT="").append(MPaymentValidate.checkNumeric(p_mp.getCreditCardNumber()));	//	CreditCard No
		param.append(""&EXPDATE="");										//	ExpNo
		String month = String.valueOf(p_mp.getCreditCardExpMM());
		if (month.length() == 1)
			param.append(""0"");
		param.append(month);
		int expYY = p_mp.getCreditCardExpYY();
		if (expYY > 2000)
			expYY -= 2000;
		String year = String.valueOf(expYY);
		if (year.length() == 1)
			param.append(""0"");
		param.append(year);
		param.append(""&AMT="").append(p_mp.getPayAmt());					//	Amount

		//  Optional Control Fields		- AuthCode & Orig ID
		param.append(createPair(""&AUTHCODE"", p_mp.getVoiceAuthCode(), 6));
		param.append(createPair(""&ORIGID"", p_mp.getOrig_TrxID(), 12));	//	PNREF - returned
		//	CVV
		param.append(createPair(""&CVV2"", p_mp.getCreditCardVV(), 4));
	//	param.append(createPair(""&SWIPE"", p_mp.getXXX(), 80));			//	Track 1+2

		//	Address
		param.append(createPair(""&NAME"", p_mp.getA_Name(), 30));
		param.append(createPair(""&STREET"", p_mp.getA_Street(), 30));	//	Street
		param.append(createPair(""&ZIP"", p_mp.getA_Zip(), 9));			//	Zip 5-9
		//	CITY 20, STATE 2,
		param.append(createPair(""&EMAIL"", p_mp.getA_EMail(), 64));		//	EMail

		//	Amex Fields
		//	DESC, SHIPTOZIP, TAXAMT
	//	param.append(createPair(""&DESC"", p_mp.getXXX(), 23));			//	Description
		param.append(createPair(""&SHIPTOZIP"", p_mp.getA_Zip(), 6));		//	Zip 6
		param.append(createPair(""&TAXAMT"", p_mp.getTaxAmt(), 10));		//	Tax

		//	Invoice No
		param.append(createPair(""&INVNUM"", p_mp.getC_Invoice_ID(), 9));

		//	COMMENT1/2
		param.append(createPair(""&COMMENT1"", p_mp.getC_Payment_ID(), 128));		//	Comment
		param.append(createPair(""&COMMENT2"", p_mp.getC_BPartner_ID(), 128)); 	//	Comment2

		return process(param.toString());
	}   //  processCC
"
org.compiere.model.PP_PayFlowPro.process,PP_PayFlowPro.java,"boolean process (String parameter)
	{
		long start = System.currentTimeMillis();
		StringBuffer param = new StringBuffer(parameter);
		//  Usr/Pwd
		param
			.append(""&PARTNER="").append(p_mpp.getPartnerID())
			.append(""&VENDOR="").append(p_mpp.getVendorID())
			.append(""&USER="").append(p_mpp.getUserID())
			.append(""&PWD="").append(p_mpp.getPassword());
		log.fine(""-> "" + param.toString());

		// Call the PayFlowPro client.
		int rc = m_pp.CreateContext (p_mpp.getHostAddress(), p_mpp.getHostPort(), getTimeout(),
			p_mpp.getProxyAddress(), p_mpp.getProxyPort(), p_mpp.getProxyLogon(), p_mpp.getProxyPassword());
		String response = m_pp.SubmitTransaction(param.toString());
		m_pp.DestroyContext();
		//
		long ms = System.currentTimeMillis() - start;
		log.fine(""<- "" + ms + ""ms - "" + rc + "" - "" + response);
		p_mp.setR_Result("""");
		p_mp.setR_Info(response);		//	complete info

		//  RESULT=1&PNREF=PN0001480030&RESPMSG=Invalid User Authentication
		//  RESULT=0&PNREF=P60501480167&RESPMSG=Approved&AUTHCODE=010101&AVSADDR=X&AVSZIP=X
		//	RESULT=-31&RESPMSG=The certificate chain did not validate, no local certificate found, javax.net.ssl.SSLException: Cert Path = C:\Compiere2\lib, Working Directory = C:\Compiere\compiere-all2\client\temp
		StringTokenizer st = new StringTokenizer(response, ""&"", false);
		while (st.hasMoreTokens())
		{
			String token = st.nextToken();
			int pos = token.indexOf(""="");
			String name = token.substring(0, pos);
			String value = token.substring(pos+1);
			//
			if (name.equals(""RESULT""))
			{
				p_mp.setR_Result (value);
				m_ok = RESULT_OK.equals(value);
			}
			else if (name.equals(""PNREF""))
				p_mp.setR_PnRef(value);
			else if (name.equals(""RESPMSG""))
				p_mp.setR_RespMsg(value);
			else if (name.equals(""AUTHCODE""))
				p_mp.setR_AuthCode(value);
			else if (name.equals(""AVSADDR""))
				p_mp.setR_AvsAddr(value);
			else if (name.equals(""AVSZIP""))
				p_mp.setR_AvsZip(value);
			else if (name.equals(""IAVS""))		//	N=YSA, Y=International
				;
			else if (name.equals(""CVV2MATCH""))	//	Y/N X=not supported
				;
			else
				log.log(Level.SEVERE, ""Response unknown = "" + token);
		}
		//  Probelms with rc (e.g. 0 with Result=24)
		return m_ok;
	}   //  process
"
org.compiere.model.PP_PayFlowPro.isProcessedOK,PP_PayFlowPro.java,"boolean isProcessedOK()
	{
		return m_ok;
	}   //  isProcessedOK
"
org.compiere.model.MAlertRecipient.getAD_User_ID,MAlertRecipient.java,"int getAD_User_ID ()
	{
		Integer ii = (Integer)get_Value(""AD_User_ID"");
		if (ii == null) 
			return -1;
		return ii.intValue();
	}	//	getAD_User_ID
"
org.compiere.model.MAlertRecipient.getAD_Role_ID,MAlertRecipient.java,"int getAD_Role_ID ()
	{
		Integer ii = (Integer)get_Value(""AD_Role_ID"");
		if (ii == null) 
			return -1;
		return ii.intValue();
	}	//	getAD_Role_ID
"
org.compiere.model.MAlertRecipient.toString,MAlertRecipient.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MAlertRecipient["");
		sb.append(get_ID())
			.append("",AD_User_ID="").append(getAD_User_ID())
			.append("",AD_Role_ID="").append(getAD_Role_ID())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MNewsChannel.getNewsItems,MNewsChannel.java,"MNewsItem[] getNewsItems(String where)
	{
		ArrayList<MNewsItem> list = new ArrayList<MNewsItem>();
		String sql = ""SELECT * FROM CM_NewsItem WHERE CM_NewsChannel_ID=? AND IsActive='Y'"";
		if (where != null && where.length() > 0)
			sql += "" AND "" + where;
		sql += "" ORDER BY pubDate DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, this.get_Trx());
			pstmt.setInt (1, this.get_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add(new MNewsItem(this.getCtx(), rs, this.get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MNewsItem[] retValue = new MNewsItem[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getNewsItems
"
org.compiere.model.MNewsChannel.get_rss2ChannelCode,MNewsChannel.java,"StringBuffer get_rss2ChannelCode(StringBuffer xmlCode, boolean showFutureItems) 
	{
		if (this != null)	//	never null ??
		{
			xmlCode.append (""<channel>"");
			xmlCode.append (""  <title><![CDATA["" + this.getName ()
				+ ""]]></title>"");
			xmlCode.append (""  <link>"" + this.getLink ()
				+ ""</link>"");
			xmlCode.append (""  <description><![CDATA[""
				+ this.getDescription () + ""]]></description>"");
			xmlCode.append (""  <language>""
				+ this.getAD_Language () + ""</language>"");
			xmlCode.append (""  <copyright>"" + """" + ""</copyright>"");
			xmlCode.append (""  <pubDate>""
				+ this.getCreated () + ""</pubDate>"");
			xmlCode.append (""  <image>"");
			xmlCode.append (""    <url>"" + """" + ""</url>"");
			xmlCode.append (""    <title><![CDATA["" + """" + ""]]></title>"");
			xmlCode.append (""    <link>"" + """" + ""</link>"");
			xmlCode.append (""  </image>"");

			String whereClause = """";
			//jz if (!showFutureItems) whereClause = ""sysdate>pubdate""; 
			if (!showFutureItems) whereClause = "" SYSDATE > pubdate""; 
			MNewsItem[] theseItems = getNewsItems(whereClause);
				
			for (MNewsItem element : theseItems)
				xmlCode=element.get_rss2ItemCode(xmlCode,this);
			xmlCode.append (""</channel>"");
		}
		return xmlCode;
	}
"
org.compiere.model.MNewsChannel.afterSave,MNewsChannel.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!success)
			return success;
		reIndex(newRecord);
		return success;
	}	//	afterSave
"
org.compiere.model.MNewsChannel.reIndex,MNewsChannel.java,"void reIndex(boolean newRecord) 
	{
		String [] toBeIndexed = new String[2];
		toBeIndexed[0] = this.getName();
		toBeIndexed[1] = this.getDescription();
		MIndex.reIndex (newRecord, toBeIndexed, getCtx(), getAD_Client_ID(), get_Table_ID(), get_ID(), getCM_WebProject_ID(), this.getUpdated());
	}
"
org.compiere.model.MRecurring.toString,MRecurring.java,"String toString()
	{
		StringBuffer sb = new StringBuffer (""MRecurring["")
			.append(get_ID()).append(""-"").append(getName());
		if (getRecurringType().equals(X_C_Recurring.RECURRINGTYPE_Order))
			sb.append("",C_Order_ID="").append(getC_Order_ID());
		else if (getRecurringType().equals(X_C_Recurring.RECURRINGTYPE_Invoice))
			sb.append("",C_Invoice_ID="").append(getC_Invoice_ID());
		else if (getRecurringType().equals(X_C_Recurring.RECURRINGTYPE_Project))
			sb.append("",C_Project_ID="").append(getC_Project_ID());
		else if (getRecurringType().equals(X_C_Recurring.RECURRINGTYPE_GLJournal))
			sb.append("",GL_JournalBatch_ID="").append(getGL_JournalBatch_ID());
		sb.append("",Fequency="").append(getFrequencyType()).append(""*"").append(getFrequency());
		sb.append(""]"");
		return sb.toString();
	}	//	toString
"
org.compiere.model.MRecurring.executeRun,MRecurring.java,"String executeRun()
	{
		Timestamp dateDoc = getDateNextRun();
		if (!calculateRuns())
			throw new IllegalStateException (""No Runs Left"");

		//	log
		MRecurringRun run = new MRecurringRun (getCtx(), this);
		String msg = ""@Created@ "";


		//	Copy
		if (getRecurringType().equals(X_C_Recurring.RECURRINGTYPE_Order))
		{
			MOrder from = new MOrder (getCtx(), getC_Order_ID(), get_Trx());
			MOrder order = MOrder.copyFrom (from, dateDoc, 
				from.getC_DocType_ID(), false, false, get_Trx());
			run.setC_Order_ID(order.getC_Order_ID());
			msg += order.getDocumentNo();
		}
		else if (getRecurringType().equals(X_C_Recurring.RECURRINGTYPE_Invoice))
		{
			MInvoice from = new MInvoice (getCtx(), getC_Invoice_ID(), get_Trx());
			MInvoice invoice = MInvoice.copyFrom (from, dateDoc, 
				from.getC_DocType_ID(), false, get_Trx(), false);
			run.setC_Invoice_ID(invoice.getC_Invoice_ID());
			msg += invoice.getDocumentNo();
		}
		else if (getRecurringType().equals(X_C_Recurring.RECURRINGTYPE_Project))
		{
			MProject project = MProject.copyFrom (getCtx(), getC_Project_ID(), dateDoc, get_Trx());
			run.setC_Project_ID(project.getC_Project_ID());
			msg += project.getValue();
		}
		else if (getRecurringType().equals(X_C_Recurring.RECURRINGTYPE_GLJournal))
		{
			MJournalBatch journal = MJournalBatch.copyFrom (getCtx(), getGL_JournalBatch_ID(), dateDoc, get_Trx());
			run.setGL_JournalBatch_ID(journal.getGL_JournalBatch_ID());
			msg += journal.getDocumentNo();
		}
		else
			return ""Invalid @RecurringType@ = "" + getRecurringType();
		run.save(get_Trx());

		//
		setDateLastRun (run.getUpdated());
		setRunsRemaining (getRunsRemaining()-1);
		setDateNextRun();
		save(get_Trx());
		return msg;
	}	//	execureRun
"
org.compiere.model.MRecurring.calculateRuns,MRecurring.java,"boolean calculateRuns()
	{
		String sql = ""SELECT COUNT(*) FROM C_Recurring_Run WHERE C_Recurring_ID=?"";
		int current = DB.getSQLValue(get_Trx(), sql, getC_Recurring_ID());
		int remaining = getRunsMax() - current;
		setRunsRemaining(remaining);
		save();
		return remaining > 0;
	}	//	calculateRuns
"
org.compiere.model.MRecurring.setDateNextRun,MRecurring.java,"void setDateNextRun()
	{
		if (getFrequency() < 1)
			setFrequency(1);
		int frequency = getFrequency();
		Calendar cal = Calendar.getInstance();
		cal.setTime(getDateNextRun());
		//
		if (getFrequencyType().equals(FREQUENCYTYPE_Daily))
			cal.add(Calendar.DAY_OF_YEAR, frequency);
		else if (getFrequencyType().equals(FREQUENCYTYPE_Weekly))
			cal.add(Calendar.WEEK_OF_YEAR, frequency);
		else if (getFrequencyType().equals(FREQUENCYTYPE_Monthly))
			cal.add(Calendar.MONTH, frequency);
		else if (getFrequencyType().equals(FREQUENCYTYPE_Quarterly))
			cal.add(Calendar.MONTH, 3*frequency);
		Timestamp next = new Timestamp (cal.getTimeInMillis());
		setDateNextRun(next);
	}	//	setDateNextRun
"
org.compiere.model.MRecurring.beforeSave,MRecurring.java,"boolean beforeSave (boolean newRecord)
	{
		String rt = getRecurringType();
		if (rt == null)
		{
			log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""RecurringType""));
			return false;
		}
		if (rt.equals(X_C_Recurring.RECURRINGTYPE_Order)
			&& getC_Order_ID() == 0)
		{
			log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""C_Order_ID""));
			return false;
		}
		if (rt.equals(X_C_Recurring.RECURRINGTYPE_Invoice)
			&& getC_Invoice_ID() == 0)
		{
			log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""C_Invoice_ID""));
			return false;
		}
		if (rt.equals(X_C_Recurring.RECURRINGTYPE_GLJournal)
			&& getGL_JournalBatch_ID() == 0)
		{
			log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""GL_JournalBatch_ID""));
			return false;
		}
		if (rt.equals(X_C_Recurring.RECURRINGTYPE_Project)
			&& getC_Project_ID() == 0)
		{
			log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""C_Project_ID""));
			return false;
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MResolution.get,MResolution.java,"MResolution get (Ctx ctx, int R_Resolution_ID)
	{
		Integer key = Integer.valueOf (R_Resolution_ID);
		MResolution retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MResolution (ctx, R_Resolution_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MDistribution.get,MDistribution.java,"MDistribution[] get (MAccount acct,  
		String PostingType, int C_DocType_ID)
	{
		return get (acct.getCtx(), acct.getC_AcctSchema_ID(), 
			PostingType, C_DocType_ID,
			acct.getAD_Org_ID(), acct.getAccount_ID(),
			acct.getM_Product_ID(), acct.getC_BPartner_ID(), acct.getC_Project_ID(),
			acct.getC_Campaign_ID(), acct.getC_Activity_ID(), acct.getAD_OrgTrx_ID(),
			acct.getC_SalesRegion_ID(), acct.getC_LocTo_ID(), acct.getC_LocFrom_ID(),
			acct.getUser1_ID(), acct.getUser2_ID());
	}	//	get
"
org.compiere.model.MDistribution.get,MDistribution.java,"MDistribution[] get (Ctx ctx, int C_AcctSchema_ID, 
		String PostingType, int C_DocType_ID,
		int AD_Org_ID, int Account_ID,
		int M_Product_ID, int C_BPartner_ID, int C_Project_ID,
		int C_Campaign_ID, int C_Activity_ID, int AD_OrgTrx_ID,
		int C_SalesRegion_ID, int C_LocTo_ID, int C_LocFrom_ID,
		int User1_ID, int User2_ID)
	{
		MDistribution[] acctList = get (ctx, Account_ID);
		if (acctList == null || acctList.length == 0)
			return null;
		//
		ArrayList<MDistribution> list = new ArrayList<MDistribution>();
		for (MDistribution distribution : acctList) {
			if (!distribution.isActive() || !distribution.isValid())
				continue;
			//	Mandatory Acct Schema
			if (distribution.getC_AcctSchema_ID() != C_AcctSchema_ID)
				continue;
			//	Only Posting Type / DocType
			if (distribution.getPostingType() != null && !distribution.getPostingType().equals(PostingType))
				continue;
			if (distribution.getC_DocType_ID() != 0 && distribution.getC_DocType_ID() != C_DocType_ID)
				continue;
			
			//	Optional Elements - ""non-Any""
			if (!distribution.isAnyOrg() && distribution.getAD_Org_ID() != AD_Org_ID)
				continue;
			if (!distribution.isAnyAcct() && distribution.getAccount_ID() != Account_ID)
				continue;
			if (!distribution.isAnyProduct() && distribution.getM_Product_ID() != M_Product_ID)
				continue;
			if (!distribution.isAnyBPartner() && distribution.getC_BPartner_ID() != C_BPartner_ID)
				continue;
			if (!distribution.isAnyProject() && distribution.getC_Project_ID() != C_Project_ID)
				continue;
			if (!distribution.isAnyCampaign() && distribution.getC_Campaign_ID() != C_Campaign_ID)
				continue;
			if (!distribution.isAnyActivity() && distribution.getC_Activity_ID() != C_Activity_ID)
				continue;
			if (!distribution.isAnyOrgTrx() && distribution.getAD_OrgTrx_ID() != AD_OrgTrx_ID)
				continue;
			if (!distribution.isAnySalesRegion() && distribution.getC_SalesRegion_ID() != C_SalesRegion_ID)
				continue;
			if (!distribution.isAnyLocTo() && distribution.getC_LocTo_ID() != C_LocTo_ID)
				continue;
			if (!distribution.isAnyLocFrom() && distribution.getC_LocFrom_ID() != C_LocFrom_ID)
				continue;
			if (!distribution.isAnyUser1() && distribution.getUser1_ID() != User1_ID)
				continue;
			if (!distribution.isAnyUser2() && distribution.getUser2_ID() != User2_ID)
				continue;
			//
			list.add (distribution);
		}	//	 for all distributions with acct
		//
		MDistribution[] retValue = new MDistribution[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MDistribution.get,MDistribution.java,"MDistribution[] get (Ctx ctx, int Account_ID)
	{
		Integer key = Integer.valueOf (Account_ID);
		MDistribution[] retValue = s_accounts.get(ctx, key);
		if (retValue != null)
			return retValue;
		
		String sql = ""SELECT * FROM GL_Distribution ""
			+ ""WHERE Account_ID=?"";
		ArrayList<MDistribution> list = new ArrayList<MDistribution>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, Account_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MDistribution (ctx, rs, null));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e); 
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		retValue = new MDistribution[list.size ()];
		list.toArray (retValue);
		s_accounts.put(key, retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MDistribution.getLines,MDistribution.java,"MDistributionLine[] getLines (boolean reload)
	{
		if (m_lines != null && !reload)
			return m_lines;
		
		BigDecimal PercentTotal = Env.ZERO;
		ArrayList<MDistributionLine> list = new ArrayList<MDistributionLine>();
		String sql = ""SELECT * FROM GL_DistributionLine ""
			+ ""WHERE GL_Distribution_ID=? ORDER BY Line"";
		boolean hasNullRemainder = false;
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getGL_Distribution_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MDistributionLine dl = new MDistributionLine (getCtx(), rs, get_Trx());
				if (dl.isActive())
				{
					PercentTotal = PercentTotal.add(dl.getPercentDistribution());
					hasNullRemainder = dl.getPercentDistribution().signum() == 0;
				}
				dl.setParent(this);
				list.add (dl);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""getLines"", e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//	Update Ratio when saved and difference
		if (hasNullRemainder)
			PercentTotal = Env.ONEHUNDRED;
		if (get_ID() != 0 && PercentTotal.compareTo(getPercentTotal()) != 0)
		{
			setPercentTotal(PercentTotal);
			save();
		}
		//	return
		m_lines = new MDistributionLine[list.size ()];
		list.toArray (m_lines);
		return m_lines;
	}	//	getLines
"
org.compiere.model.MDistribution.validate,MDistribution.java,"String validate()
	{
		String retValue = null;
		getLines(true);
		if (m_lines.length == 0)
			retValue = ""@NoLines@"";
		else if (getPercentTotal().compareTo(Env.ONEHUNDRED) != 0)
			retValue = ""@PercentTotal@ <> 100"";
		else
		{
			//	More then one line with 0
			int lineFound = -1;
			for (MDistributionLine element : m_lines) {
				if (element.getPercentDistribution().signum() == 0)
				{
					if (lineFound >= 0 && element.getPercentDistribution().signum() == 0)
					{
						retValue = ""@Line@ "" + lineFound 
							+ "" + "" + element.getLine() + "": == 0"";
						break;
					}
					lineFound = element.getLine();
				}
			}	//	for all lines
		}
		
		setIsValid (retValue == null);
		return retValue;
	}	//	validate
"
org.compiere.model.MDistribution.distribute,MDistribution.java,"void distribute (MAccount acct, BigDecimal Amt, int C_Currency_ID)
	{
		log.info(""Amt="" + Amt + "" - "" + acct);
		getLines(false);
		int precision = MCurrency.getStdPrecision(getCtx(), C_Currency_ID);
		//	First Round
		BigDecimal total = Env.ZERO;
		int indexBiggest = -1;
		int indexZeroPercent = -1;
		for (int i = 0; i < m_lines.length; i++)
		{
			MDistributionLine dl = m_lines[i];
			if (!dl.isActive())
				continue;
			dl.setAccount(acct);
			//	Calculate Amount
			dl.calculateAmt (Amt, precision);	
			total = total.add(dl.getAmt());
		//	log.fine(""distribute - Line="" + dl.getLine() + "" - "" + dl.getPercent() + ""% "" + dl.getAmt() + "" - Total="" + total);
			//	Remainder
			if (dl.getPercentDistribution().signum() == 0)
				indexZeroPercent = i;
			if (indexZeroPercent == -1)
			{
				if (indexBiggest == -1)
					indexBiggest = i;
				else if (dl.getAmt().compareTo(m_lines[indexBiggest].getAmt()) > 0)
					indexBiggest = i;
			}
		}
		//	Adjust Remainder
		BigDecimal difference = Amt.subtract(total);
		if (difference.compareTo(Env.ZERO) != 0)
		{
			if (indexZeroPercent != -1)
			{
			//	log.fine(""distribute - Difference="" + difference + "" - 0%Line="" + m_lines[indexZeroPercent]); 
				m_lines[indexZeroPercent].setAmt (difference);
			}
			else if (indexBiggest != -1)
			{
			//	log.fine(""distribute - Difference="" + difference + "" - MaxLine="" + m_lines[indexBiggest] + "" - "" + m_lines[indexBiggest].getAmt()); 
				m_lines[indexBiggest].setAmt (m_lines[indexBiggest].getAmt().add(difference));
			}
			else
				log.warning(""Remaining Difference="" + difference); 
		}
		//
		if (CLogMgt.isLevelFinest())
		{
			for (MDistributionLine element : m_lines) {
				if (element.isActive())
					log.fine(""Amt="" + element.getAmt() + "" - "" + element.getAccount());
			}
		}
	}	//	distribute
"
org.compiere.model.MDistribution.beforeSave,MDistribution.java,"boolean beforeSave (boolean newRecord)
	{
		//	Reset not selected Any
		if (isAnyAcct() && getAccount_ID() != 0)
			setAccount_ID(0);
		if (isAnyActivity() && getC_Activity_ID() != 0)
			setC_Activity_ID(0);
		if (isAnyBPartner() && getC_BPartner_ID() != 0)
			setC_BPartner_ID(0);
		if (isAnyCampaign() && getC_Campaign_ID() != 0)
			setC_Campaign_ID(0);
		if (isAnyLocFrom() && getC_LocFrom_ID() != 0)
			setC_LocFrom_ID(0);
		if (isAnyLocTo() && getC_LocTo_ID() != 0)
			setC_LocTo_ID(0);
		if (isAnyOrg() && getOrg_ID() != 0)
			setOrg_ID(0);
		if (isAnyOrgTrx() && getAD_OrgTrx_ID() != 0)
			setAD_OrgTrx_ID(0);
		if (isAnyProduct() && getM_Product_ID() != 0)
			setM_Product_ID(0);
		if (isAnyProject() && getC_Project_ID() != 0)
			setC_Project_ID(0);
		if (isAnySalesRegion() && getC_SalesRegion_ID() != 0)
			setC_SalesRegion_ID(0);
		if (isAnyUser1() && getUser1_ID() != 0)
			setUser1_ID(0);
		if (isAnyUser2() && getUser2_ID() != 0)
			setUser2_ID(0);
		return true;
	}	//	beforeSave
"
org.compiere.model.MProjectTask.toString,MProjectTask.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MProjectTask["");
		sb.append (get_ID())
			.append (""-"").append (getSeqNo())
			.append (""-"").append (getName())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.Loader.setTableName,GridTable.java,"void setTableName(String newTableName)
	{
		if (m_open)
		{
			log.log(Level.SEVERE, ""Table already open - ignored"");
			return;
		}
		if (newTableName == null || newTableName.length() == 0)
			return;
		m_tableName = newTableName;
	}	//	setTableName
"
org.compiere.model.Loader.getTableName,GridTable.java,"String getTableName()
	{
		return m_tableName;
	}	//	getTableName
"
org.compiere.model.Loader.setSelectWhereClause,GridTable.java,"boolean setSelectWhereClause(String newWhereClause)
	{
		if (m_open)
		{
			log.log(Level.SEVERE, ""Table already open - ignored"");
			return false;
		}
		//
		m_whereClause = newWhereClause;
		if (m_whereClause == null)
			m_whereClause = """";
		return true;
	}	//	setWhereClause
"
org.compiere.model.Loader.getSelectWhereClause,GridTable.java,"String getSelectWhereClause()
	{
		return m_whereClause;
	}	//	getWhereClause
"
org.compiere.model.Loader.setOrderClause,GridTable.java,"void setOrderClause(String newOrderClause)
	{
		m_orderClause = newOrderClause;
		if (m_orderClause == null)
			m_orderClause = """";
	}	//	setOrderClause
"
org.compiere.model.Loader.getOrderClause,GridTable.java,"String getOrderClause()
	{
		return m_orderClause;
	}	//	getOrderClause
"
org.compiere.model.Loader.createSelectSql,GridTable.java,"String createSelectSql()
	{
		if (m_fields.size() == 0 || m_tableName == null || m_tableName.equals(""""))
			return """";

		//	Create SELECT Part
		StringBuffer select = new StringBuffer(""SELECT "");
		for (int i = 0; i < m_fields.size(); i++)
		{
			if (i > 0)
				select.append("","");
			GridField field = m_fields.get(i);
			select.append(field.getColumnSQL(true));	//	ColumnName or Virtual Column
		}
		//
		select.append("" FROM "").append(m_tableName);
		m_SQL_Select = select.toString();
		m_SQL_Count = ""SELECT COUNT(*) FROM "" + m_tableName;
		//

		StringBuffer m_SQL_Where = new StringBuffer("""");
		//	WHERE
		if (m_whereClause.length() > 0)
		{
			m_SQL_Where.append("" WHERE "");
			if (m_whereClause.indexOf(""@"") == -1)
			{
				m_SQL_Where.append(m_whereClause);
			}
			else    //  replace variables
				m_SQL_Where.append(Env.parseContext(m_ctx, m_WindowNo, m_whereClause, false));
			//
			if (m_whereClause.toUpperCase().indexOf(""=NULL"")>0)
				log.severe(""Invalid NULL - "" + m_tableName + ""="" + m_whereClause);
		}

		//	RO/RW Access
		m_SQL = m_SQL_Select + m_SQL_Where.toString();
		m_SQL_Count += m_SQL_Where.toString();
		if (m_withAccessControl)
		{
		//	boolean ro = MRole.SQL_RO;
		//	if (!m_readOnly)
		//		ro = MRole.SQL_RW;
			m_SQL = MRole.getDefault(m_ctx, false).addAccessSQL(m_SQL,
				m_tableName, MRole.SQL_FULLYQUALIFIED, MRole.SQL_RO);
			m_SQL_Count = MRole.getDefault(m_ctx, false).addAccessSQL(m_SQL_Count,
				m_tableName, MRole.SQL_FULLYQUALIFIED, MRole.SQL_RO);
		}

		//	ORDER BY
		if (!m_orderClause.equals(""""))
			m_SQL += "" ORDER BY "" + m_orderClause;
		//
		log.fine(m_SQL_Count);
		m_ctx.setContext(m_WindowNo, m_TabNo, ""SQL"", m_SQL);
		return m_SQL;
	}	//	createSelectSql
"
org.compiere.model.Loader.addField,GridTable.java,"void addField (GridField field)
	{
		log.fine(""("" + m_tableName + "") - "" + field.getColumnName());
		if (m_open)
		{
			log.log(Level.SEVERE, ""Table already open - ignored: "" + field.getColumnName());
			return;
		}
		if (!MRole.getDefault(m_ctx, false).isColumnAccess (m_AD_Table_ID, field.getAD_Column_ID(), true))
		{
			log.fine(""No Column Access "" + field.getColumnName());
			return;
		}
		//  Set Index for Key column
		if (field.isKey())
			m_indexKeyColumn = m_fields.size();
		else if (field.getColumnName().equals(""IsActive""))
			m_indexActiveColumn = m_fields.size();
		else if (field.getColumnName().equals(""Processed""))
			m_indexProcessedColumn = m_fields.size();
		else if (field.getColumnName().equals(""AD_Client_ID""))
			m_indexClientColumn = m_fields.size();
		else if (field.getColumnName().equals(""AD_Org_ID""))
			m_indexOrgColumn = m_fields.size();
		//
		m_fields.add(field);

		fireTableStructureChanged();
	}	//	addColumn
"
org.compiere.model.Loader.getColumnName,GridTable.java,"String getColumnName (int index)
	{
		if (index < 0 || index > m_fields.size())
		{
			log.log(Level.SEVERE, ""Invalid index="" + index);
			return """";
		}
		//
		GridField field = m_fields.get(index);
		return field.getColumnName();
	}   //  getColumnName
"
org.compiere.model.Loader.findColumn,GridTable.java,"int findColumn (String columnName)
	{
		for (int i = 0; i < m_fields.size(); i++)
		{
			GridField field = m_fields.get(i);
			if (columnName.equals(field.getColumnName()))
				return i;
		}
		return -1;
	}   //  findColumn
"
org.compiere.model.Loader.getColumnClass,GridTable.java,"Class<?> getColumnClass (int index)
	{
		if (index < 0 || index >= m_fields.size())
		{
			log.log(Level.SEVERE, ""Invalid index="" + index);
			return null;
		}
		GridField field = m_fields.get(index);
		return DisplayType.getClass(field.getDisplayType(), false);
	}   //  getColumnClass
"
org.compiere.model.Loader.setParameterSELECT,GridTable.java,"void setParameterSELECT (int index, Object parameter)
	{
		if (index >= m_parameterSELECT.size())
			m_parameterSELECT.add(parameter);
		else
			m_parameterSELECT.set(index, parameter);
	}	//	setParameterSELECT
"
org.compiere.model.Loader.setParameterWHERE,GridTable.java,"void setParameterWHERE (int index, Object parameter)
	{
		if (index >= m_parameterWHERE.size())
			m_parameterWHERE.add(parameter);
		else
			m_parameterWHERE.set(index, parameter);
	}	//	setParameterWHERE
"
org.compiere.model.Loader.getField,GridTable.java,"GridField getField (int index)
	{
		if (index < 0 || index >= m_fields.size())
			return null;
		return m_fields.get(index);
	}	//	getColumn
"
org.compiere.model.Loader.getField,GridTable.java,"GridField getField (String identifier)
	{
		if (identifier == null || identifier.length() == 0)
			return null;
		int cols = m_fields.size();
		for (int i = 0; i < cols; i++)
		{
			GridField field = m_fields.get(i);
			if (identifier.equalsIgnoreCase(field.getColumnName()))
				return field;
		}
	//	log.log(Level.WARNING, ""Not found: '"" + identifier + ""'"");
		return null;
	}	//	getField
"
org.compiere.model.Loader.getFields,GridTable.java,"GridField[] getFields ()
	{
		GridField[] retValue = new GridField[m_fields.size()];
		m_fields.toArray(retValue);
		return retValue;
	}   //  getField
"
org.compiere.model.Loader.open,GridTable.java,"boolean open (int maxRows)
	{
		log.info(""MaxRows="" + maxRows);
		m_maxRows = maxRows;
		if (m_open)
		{
			log.fine(""already open"");
			dataRefreshAll();
			return true;
		}

		//	create m_SQL and m_countSQL
		createSelectSql();
		if (m_SQL == null || m_SQL.equals(""""))
		{
			log.log(Level.SEVERE, ""No SQL"");
			return false;
		}

		//	Start Loading
		m_loader = new Loader();
		m_rowCount = m_loader.open(maxRows);
		m_buffer = new ArrayList<Object[]>(m_rowCount+10);
		m_sort = new ArrayList<MSort>(m_rowCount+10);
		if (m_rowCount > 0)
			m_loader.start();
		else
			m_loader.close();
		m_open = true;
		//
		m_changed = false;
		m_rowChanged = -1;

		fireTableDataChanged();
		//	Audit
		if (m_rowCount > 0)
		{
			MSession session = MSession.get(m_ctx);
			if (session != null)
				session.queryLog(m_ctx.getAD_Client_ID(), m_ctx.getAD_Org_ID(), m_AD_Table_ID,
					m_SQL_Count, m_rowCount);
			else
			{
				log.warning(""No Session"");
				close(true);
				return false;
			}
		}
		return true;
	}	//	open
"
org.compiere.model.Loader.loadComplete,GridTable.java,"void loadComplete()
	{
		//  Wait for loader
		if (m_loader != null)
		{
			if (m_loader.isAlive())
			{
				try
				{
					m_loader.join();
				}
				catch (InterruptedException ie)
				{
					log.log(Level.SEVERE, ""Join interrupted"", ie);
				}
			}
		}
		//  wait for field lookup loaders
		for (int i = 0; i < m_fields.size(); i++)
		{
			GridField field = m_fields.get(i);
			field.lookupLoadComplete();
		}
	}   //  loadComplete
"
org.compiere.model.Loader.isLoading,GridTable.java,"boolean isLoading()
	{
		if (m_loader != null && m_loader.isAlive())
			return true;
		return false;
	}   //  isLoading
"
org.compiere.model.Loader.isOpen,GridTable.java,"boolean isOpen()
	{
		return m_open;
	}	//	isOpen
"
org.compiere.model.Loader.close,GridTable.java,"void close (boolean finalCall)
	{
		if (!m_open)
			return;
		log.fine(""final="" + finalCall);

		//  remove listeners
		if (finalCall)
		{
			DataStatusListener evl[] = listenerList.getListeners(DataStatusListener.class);
			for (DataStatusListener element : evl)
				listenerList.remove(DataStatusListener.class, element);
			TableModelListener ev2[] = listenerList.getListeners(TableModelListener.class);
			for (TableModelListener element : ev2)
				listenerList.remove(TableModelListener.class, element);
			VetoableChangeListener vcl[] = m_vetoableChangeSupport.getVetoableChangeListeners();
			for (VetoableChangeListener element : vcl)
				m_vetoableChangeSupport.removeVetoableChangeListener(element);
		}

		//	Stop loader
		while (m_loader != null && m_loader.isAlive())
		{
			log.fine(""Interrupting Loader ..."");
			m_loader.interrupt();
			try
			{
				Thread.sleep(200);		//	.2 second
			}
			catch (InterruptedException ie)
			{}
		}

		if (!m_inserting)
			dataSave(false);	//	not manual

		if (m_buffer != null)
			m_buffer.clear();
		m_buffer = null;
		if (m_sort != null)
			m_sort.clear();
		m_sort = null;

		if (finalCall)
			dispose();

		//  Fields are disposed from MTab
		log.fine("""");
		m_open = false;
	}	//	close
"
org.compiere.model.Loader.dispose,GridTable.java,"void dispose()
	{
		//  MFields
		for (int i = 0; i < m_fields.size(); i++)
			m_fields.get(i).dispose();
		m_fields.clear();
		m_fields = null;
		//
		m_vetoableChangeSupport = null;
		//
		m_parameterSELECT.clear();
		m_parameterSELECT = null;
		m_parameterWHERE.clear();
		m_parameterWHERE = null;
		//  clear data arrays
		m_buffer = null;
		m_sort = null;
		m_rowData = null;
		m_oldValue = null;
		m_loader = null;
	}   //  dispose
"
org.compiere.model.Loader.getColumnCount,GridTable.java,"int getColumnCount()
	{
		return m_fields.size();
	}	//	getColumnCount
"
org.compiere.model.Loader.getFieldCount,GridTable.java,"int getFieldCount()
	{
		return m_fields.size();
	}	//	getFieldCount
"
org.compiere.model.Loader.getRowCount,GridTable.java,"int getRowCount()
	{
		return m_rowCount;
	}	//	getRowCount
"
org.compiere.model.Loader.setColorColumn,GridTable.java,"void setColorColumn (String columnName)
	{
		m_indexColorColumn = findColumn(columnName);
	}	//  setColorColumn
"
org.compiere.model.Loader.getColorCode,GridTable.java,"int getColorCode (int row)
	{
		if (m_indexColorColumn  == -1)
			return 0;
		Object data = getValueAt(row, m_indexColorColumn);
		//	We need to have a Number
		if (data == null || !(data instanceof BigDecimal))
			return 0;
		BigDecimal bd = (BigDecimal)data;
		return bd.signum();
	}	//	getColorCode
"
org.compiere.model.Loader.sort,GridTable.java,"void sort (int col, boolean ascending)
	{
		log.info(""#"" + col + "" "" + ascending);
		if (getRowCount() == 0)
			return;
		GridField field = getField (col);
		//	RowIDs are not sorted
		if (field.getDisplayType() == DisplayTypeConstants.RowID)
			return;
		boolean isLookup = FieldType.isLookup(field.getDisplayType());
		boolean isASI = DisplayTypeConstants.PAttribute == field.getDisplayType();

		//	fill MSort entities with data entity
		for (int i = 0; i < m_sort.size(); i++)
		{
			MSort sort = m_sort.get(i);
			Object[] rowData = m_buffer.get(sort.index);
			if (rowData[col] == null)
				sort.data = null;
			else if (isLookup || isASI)
				sort.data = field.getLookup().getDisplay(rowData[col]);	//	lookup
			else
				sort.data = rowData[col];								//	data
		}
		log.info(field.toString() + "" #"" + m_sort.size());

		//	sort it
		MSort sort = new MSort(0, null);
		sort.setSortAsc(ascending);
		Collections.sort(m_sort, sort);
		//	update UI
		fireTableDataChanged();
		//  Info detected by MTab.dataStatusChanged and current row set to 0
		fireDataStatusIEvent(""Sorted"", ""#"" + m_sort.size());
	}	//	sort
"
org.compiere.model.Loader.getKeyID,GridTable.java,"int getKeyID (int row)
	{
	//	Log.info(""MTable.getKeyID - row="" + row + "", keyColIdx="" + m_indexKeyColumn);
		if (m_indexKeyColumn != -1)
		{
			try
			{
				Integer ii = (Integer)getValueAt(row, m_indexKeyColumn);
				if (ii == null)
					return -1;
				return ii.intValue();
			}
			catch (Exception e)     //  Alpha Key
			{
/**				if (m_AD_Table_ID == MEntityType.Table_ID)
				{
					m_indexKeyColumn = findColumn(""AD_EntityType_ID"");
					try
					{
						Integer ii = (Integer)getValueAt(row, m_indexKeyColumn);
						if (ii == null)
							return -1;
						return ii.intValue();
					}
					catch (Exception ee)
					{
					}
				}
**/				return -1;
			}
		}
		return -1;
	}	//	getKeyID
"
org.compiere.model.Loader.getKeyColumnName,GridTable.java,"String getKeyColumnName()
	{
		if (m_indexKeyColumn != -1)
			return getColumnName(m_indexKeyColumn);
		return """";
	}	//	getKeyColumnName
"
org.compiere.model.Loader.getValueAt,GridTable.java,"Object getValueAt (int row, int col)
	{
	//	log.config( ""MTable.getValueAt r="" + row + "" c="" + col);
		if (!m_open || row < 0 || col < 0 || row >= m_rowCount)
		{
		//	log.fine( ""Out of bounds - Open="" + m_open + "", RowCount="" + m_rowCount);
			return null;
		}

		//	need to wait for data read into buffer
		int loops = 0;
		while (row >= m_buffer.size() && m_loader.isAlive() && loops < 15)
		{
			log.fine(""Waiting for loader row="" + row + "", size="" + m_buffer.size());
			try
			{
				Thread.sleep(500);		//	1/2 second
			}
			catch (InterruptedException ie)
			{}
			loops++;
		}

		//	empty buffer
		if (row >= m_buffer.size())
		{
		//	log.fine( ""Empty buffer"");
			return null;
		}

		//	return Data item
		MSort sort = m_sort.get(row);
		Object[] rowData = m_buffer.get(sort.index);
		//	out of bounds
		if (rowData == null || col > rowData.length)
		{
		//	log.fine( ""No data or Column out of bounds"");
			return null;
		}
		return rowData[col];
	}	//	getValueAt
"
org.compiere.model.Loader.setChanged,GridTable.java,"void setChanged (boolean changed)
	{
		//	Can we edit?
		if (!m_open || m_readOnly)
			return;

		//	Indicate Change
		m_changed = changed;
		if (!changed)
			m_rowChanged = -1;
		if (changed)
			fireDataStatusIEvent("""", """");
	}	//	setChanged
"
org.compiere.model.Loader.setValueAt,GridTable.java,"void setValueAt (Object value, int row, int col)
	{
		setValueAt (value, row, col, false);
	}	//	setValueAt
"
org.compiere.model.Loader.setValueAt,GridTable.java,"void setValueAt (Object value, int row, int col, boolean force)
	{
		//	Can we edit?
		if (!m_open || m_readOnly       //  not accessible
				|| row < 0 || col < 0   //  invalid index
				|| m_rowCount == 0)     //  no rows
		{
			log.finest(""r="" + row + "" c="" + col + "" - R/O="" + m_readOnly + "", Rows="" + m_rowCount + "" - Ignored"");
			return;
		}

		dataSave(row, false);

		//	Has anything changed?
		Object oldValue = getValueAt(row, col);
		if (!force && (
			oldValue == null && value == null
			||	oldValue != null && oldValue.equals(value)
			||	oldValue != null && value != null && oldValue.toString().equals(value.toString())
			||  oldValue == null && """".equals( value )
			))
		{
			log.finest(""r="" + row + "" c="" + col + "" - New="" + value + ""==Old="" + oldValue + "" - Ignored"");
			return;
		}

		log.fine(""r="" + row + "" c="" + col + "" = "" + value + "" ("" + oldValue + "")"");

		//  Save old value
		m_oldValue = new Object[3];
		m_oldValue[0] = Integer.valueOf(row);
		m_oldValue[1] = Integer.valueOf(col);
		m_oldValue[2] = oldValue;

		//	Set Data item
		MSort sort = m_sort.get(row);
		Object[] rowData = m_buffer.get(sort.index);
		m_rowChanged = row;

		/**	Selection
		if (col == 0)
		{
			rowData[col] = value;
			m_buffer.set(sort.index, rowData);
			return;
		}	**/

		//	save original value - shallow copy
		if (m_rowData == null)
		{
			int size = m_fields.size();
			m_rowData = new Object[size];
			for (int i = 0; i < size; i++)
				m_rowData[i] = rowData[i];
		}

		//	save & update
		rowData[col] = value;
		m_buffer.set(sort.index, rowData);
		//  update Table
		fireTableCellUpdated(row, col);
		//  update MField
		GridField field = getField(col);
		field.setValue(value, m_inserting);
		//  inform
		DataStatusEvent evt = createDSE();
		evt.setChangedColumn(col, field.getColumnName());
		fireDataStatusChanged(evt);
	}	//	setValueAt
"
org.compiere.model.Loader.getOldValue,GridTable.java,"Object getOldValue (int row, int col)
	{
		if (m_oldValue == null)
			return null;
		if (((Integer)m_oldValue[0]).intValue() == row
				&& ((Integer)m_oldValue[1]).intValue() == col)
			return m_oldValue[2];
		return null;
	}   // getOldValue
"
org.compiere.model.Loader.needSave,GridTable.java,"boolean needSave(boolean onlyRealChange)
	{
		return needSave(m_rowChanged, onlyRealChange);
	}   //  needSave
"
org.compiere.model.Loader.needSave,GridTable.java,"boolean needSave()
	{
		return needSave(m_rowChanged, false);
	}   //  needSave
"
org.compiere.model.Loader.needSave,GridTable.java,"boolean needSave(int newRow)
	{
		return needSave(newRow, false);
	}   //  needSave
"
org.compiere.model.Loader.needSave,GridTable.java,"boolean needSave(int newRow, boolean onlyRealChange)
	{
		log.fine(""Row="" + newRow +
			"", Changed="" + m_rowChanged + ""/"" + m_changed);  //  m_rowChanged set in setValueAt
		//  nothing done
		if (!m_changed && m_rowChanged == -1)
			return false;
		//  E.g. New unchanged records
		if (m_changed && m_rowChanged == -1 && onlyRealChange)
			return false;
		//  same row
		if (newRow == m_rowChanged)
			return false;

		return true;
	}	//	needSave
"
org.compiere.model.Loader.dataSave,GridTable.java,"boolean dataSave (int newRow, boolean manualCmd)
	{
		log.fine(""Row="" + newRow +
			"", Changed="" + m_rowChanged + ""/"" + m_changed);  //  m_rowChanged set in setValueAt
		//  nothing done
		if (!m_changed && m_rowChanged == -1)
			return true;
		//  same row, don't save yet
		if (newRow == m_rowChanged)
			return true;

		return dataSave(manualCmd) == SAVE_OK;
	}   //  dataSave
"
org.compiere.model.Loader.dataSave,GridTable.java,"char dataSave (boolean manualCmd)
	{
		//	cannot save
		if (!m_open)
		{
			log.warning (""Error - Open="" + m_open);
			return SAVE_ERROR;
		}
		//	no need - not changed - row not positioned - no Value changed
		if (m_rowChanged == -1)
		{
			log.config(""NoNeed - Changed="" + m_changed + "", Row="" + m_rowChanged);
		//	return SAVE_ERROR;
			if (!manualCmd)
				return SAVE_OK;
		}
		//  Value not changed
		if (m_rowData == null)
		{
			log.fine(""No Changes"");
			return SAVE_ERROR;
		}

		if (m_readOnly)
		//	If Processed - not editable (Find always editable)  -> ok for changing payment terms, etc.
		{
			log.warning(""IsReadOnly - ignored"");
			dataIgnore();
			return SAVE_ACCESS;
		}

		//	row not positioned - no Value changed
		if (m_rowChanged == -1)
		{
			if (m_newRow != -1)     //  new row and nothing changed - might be OK
				m_rowChanged = m_newRow;
			else
			{
				fireDataStatusEEvent(""SaveErrorNoChange"", """", false);
				return SAVE_ERROR;
			}
		}

		//	Can we change?
		int[] co = getClientOrg(m_rowChanged);
		int AD_Client_ID = co[0];
		int AD_Org_ID = co[1];
		boolean createError = true;
		if (!MRole.getDefault(m_ctx, false)
			.canUpdate(AD_Client_ID, AD_Org_ID, m_AD_Table_ID, 0, createError))
		{
			fireDataStatusEEvent(CLogger.retrieveError());
			dataIgnore();
			return SAVE_ACCESS;
		}

		log.info(""Row="" + m_rowChanged);

		//  inform about data save action, if not manually initiated
		try
		{
			if (!manualCmd)
				m_vetoableChangeSupport.fireVetoableChange(PROPERTY, -1, m_rowChanged);
		}
		catch (PropertyVetoException pve)
		{
			log.warning(pve.getMessage());
			dataIgnore();
			return SAVE_ABORT;
		}

		//	get updated row data
		MSort sort = m_sort.get(m_rowChanged);
		Object[] rowData = m_buffer.get(sort.index);

		//	Check Mandatory
		String missingColumns = getMandatory(rowData);
		if (missingColumns.length() != 0)
		{
		//	Trace.printStack(false, false);
			fireDataStatusEEvent(""FillMandatory"", missingColumns + ""\n"", true);
			return SAVE_MANDATORY;
		}

		//	Check miscellaneous errors
		String errorColumns = getErrorColumns();
		if (errorColumns.length() != 0)
		{
		//	Trace.printStack(false, false);
			fireDataStatusEEvent(""Error"", errorColumns + ""\n"", true);
			return SAVE_ERROR;
		}

		/**
		 *	Update row *****
		 */
		int Record_ID = 0;
		if (!m_inserting)
			Record_ID = getKeyID(m_rowChanged);
		try
		{
			if (!m_tableName.endsWith(""_Trl""))	//	translation tables have no model
				return dataSavePO (Record_ID);
		}
		catch (Exception e)
		{
			if (e instanceof ClassNotFoundException)
				log.warning(m_tableName + "" - "" + e.getLocalizedMessage());
			else
			{
				log.log(Level.SEVERE, ""Persistency Issue - ""
					+ m_tableName + "": "" + e.getLocalizedMessage(), e);
				return SAVE_ERROR;
			}
		}

		/*******	Manual Update of Row (i.e. not via PO class)	*******/
		log.info(""NonPO"");

		boolean error = false;
		lobReset();
		//
		String is = null;
		final String ERROR = ""ERROR: "";
		final String INFO  = ""Info: "";

		//	Update SQL with specific where clause
		StringBuffer select = new StringBuffer(""SELECT "");
		for (int i = 0; i < m_fields.size(); i++)
		{
			GridField field = m_fields.get(i);
			if (m_inserting && field.isVirtualColumn())
				continue;
			if (i > 0)
				select.append("","");
			select.append(field.getColumnSQL(true));	//	ColumnName or Virtual Column
		}
		//
		select.append("" FROM "").append(m_tableName);
		StringBuffer singleRowWHERE = new StringBuffer();
		StringBuffer multiRowWHERE = new StringBuffer();
		//	Create SQL	& RowID
		if (m_inserting)
			select.append("" WHERE 1=2"");
		else	//  FOR UPDATE causes  -  ORA-01002 fetch out of sequence
			select.append("" WHERE "").append(getWhereClause(rowData));
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (select.toString(),
				ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, null);
			ResultSet rs = pstmt.executeQuery();
			//	only one row
			if (!(m_inserting || rs.next()))
			{
				rs.close();
				pstmt.close();
				fireDataStatusEEvent(""SaveErrorRowNotFound"", """", true);
				dataRefresh(m_rowChanged);
				return SAVE_ERROR;
			}

			Object[] rowDataDB = null;
			//	Prepare
			boolean manualUpdate = ResultSet.CONCUR_READ_ONLY == rs.getConcurrency();
			if (DB.isRemoteObjects())
				manualUpdate = true;
			if (manualUpdate)
				createUpdateSqlReset();
			if (m_inserting)
			{
				if (manualUpdate)
					log.fine(""Prepare inserting ... manual"");
				else
				{
					log.fine(""Prepare inserting ... RowSet"");
					rs.moveToInsertRow ();
				}
			}
			else
			{
				log.fine(""Prepare updating ... manual="" + manualUpdate);
				//	get current Data in DB
				rowDataDB = readData (rs);
			}

			/**	Data:
			 *		m_rowData	= original Data
			 *		rowData 	= updated Data
			 *		rowDataDB	= current Data in DB
			 *	1) Difference between original & updated Data?	N:next
			 *	2) Difference between original & current Data?	Y:don't update
			 *	3) Update current Data
			 *	4) Refresh to get last Data (changed by trigger, ...)
			 */

			//	Constants for Created/Updated(By)
			Timestamp now = new Timestamp(System.currentTimeMillis());
			int user = m_ctx.getAD_User_ID();

			/**
			 *	for every column
			 */
			int size = m_fields.size();
			int colRs = 1;
			for (int col = 0; col < size; col++)
			{
				GridField field = m_fields.get (col);
				if (field.isVirtualColumn())
				{
					if (!m_inserting)
						colRs++;
					continue;
				}
				String columnName = field.getColumnName ();
			//	log.fine(columnName + ""= "" + m_rowData[col] + "" <> DB: "" + rowDataDB[col] + "" -> "" + rowData[col]);

				//	RowID, Virtual Column
				if (field.getDisplayType () == DisplayTypeConstants.RowID
					|| field.isVirtualColumn())
					; //	ignore

				//	New Key
				else if (field.isKey () && m_inserting)
				{
					if (columnName.endsWith (""_ID"") || columnName.toUpperCase().endsWith (""_ID""))
					{
						int insertID = DB.getNextID (m_ctx, m_tableName, null);	//	no p_trx
						if (manualUpdate)
							createUpdateSql (columnName, String.valueOf (insertID));
						else
							rs.updateInt (colRs, insertID); 						// ***
						singleRowWHERE.append (columnName).append (""="").append (insertID);
						//
						is = INFO + columnName + "" -> "" + insertID + "" (Key)"";
					}
					else //	Key with String value
					{
						String str = rowData[col].toString ();
						if (manualUpdate)
							createUpdateSql (columnName, DB.TO_STRING (str));
						else
							rs.updateString (colRs, str); 						// ***
						singleRowWHERE = new StringBuffer();	//	overwrite
						singleRowWHERE.append (columnName).append (""="").append (DB.TO_STRING(str));
						//
						is = INFO + columnName + "" -> "" + str + "" (StringKey)"";
					}
					log.fine(is);
				}	//	New Key

				//	New DocumentNo
				else if (columnName.equals (""DocumentNo""))
				{
					boolean newDocNo = false;
					String docNo = (String)rowData[col];
					//  we need to have a doc number
					if (docNo == null || docNo.length () == 0)
						newDocNo = true;
						//  Preliminary ID from CalloutSystem
					else if (docNo.startsWith (""<"") && docNo.endsWith ("">""))
						newDocNo = true;

					if (newDocNo || m_inserting)
					{
						String insertDoc = null;
						//  always overwrite if insering with mandatory DocType DocNo
						if (m_inserting)
							insertDoc = DB.getDocumentNo (m_ctx, m_WindowNo,
								m_tableName, true, null);	//	only doc type - no p_trx
						log.fine(""DocumentNo entered="" + docNo + "", DocTypeInsert="" + insertDoc + "", newDocNo="" + newDocNo);
						// can we use entered DocNo?
						if (insertDoc == null || insertDoc.length () == 0)
						{
							if (!newDocNo && docNo != null && docNo.length () > 0)
								insertDoc = docNo;
							else //  get a number from DocType or Table
								insertDoc = DB.getDocumentNo (m_ctx, m_WindowNo,
									m_tableName, false, null);	//	no p_trx
						}
						//	There might not be an automatic document no for this document
						if (insertDoc == null || insertDoc.length () == 0)
						{
							//  in case DB function did not return a value
							if (docNo != null && docNo.length () != 0)
								insertDoc = (String)rowData[col];
							else
							{
								error = true;
								is = ERROR + field.getColumnName () + ""= "" + rowData[col] + "" NO DocumentNo"";
								log.fine(is);
								break;
							}
						}
						//
						if (manualUpdate)
							createUpdateSql (columnName, DB.TO_STRING (insertDoc));
						else
							rs.updateString (colRs, insertDoc);					//	***
							//
						is = INFO + columnName + "" -> "" + insertDoc + "" (DocNo)"";
						log.fine(is);
					}
				}	//	New DocumentNo

				//  New Value(key)
				else if (columnName.equals (""Value"") && m_inserting)
				{
					String value = (String)rowData[col];
					//  Get from Sequence, if not entered
					if (value == null || value.length () == 0)
					{
						value = DB.getDocumentNo (m_ctx, m_WindowNo, m_tableName, false, null);
						//  No Value
						if (value == null || value.length () == 0)
						{
							error = true;
							is = ERROR + field.getColumnName () + ""= "" + rowData[col]
								 + "" No Value"";
							log.fine(is);
							break;
						}
					}
					if (manualUpdate)
						createUpdateSql (columnName, DB.TO_STRING (value));
					else
						rs.updateString (colRs, value); 							//	***
						//
					is = INFO + columnName + "" -> "" + value + "" (Value)"";
					log.fine(is);
				}	//	New Value(key)

				//	Updated		- check database
				else if (columnName.equals (""Updated""))
				{
					if (m_compareDB && !m_inserting && !m_rowData[col].equals (rowDataDB[col]))	//	changed
					{
						error = true;
						is = ERROR + field.getColumnName () + ""= "" + m_rowData[col]
							 + "" != DB: "" + rowDataDB[col];
						log.fine(is);
						break;
					}
					if (manualUpdate)
						createUpdateSql (columnName, DB.TO_DATE (now, false));
					else
						rs.updateTimestamp (colRs, now); 							//	***
						//
					is = INFO + ""Updated/By -> "" + now + "" - "" + user;
					log.fine(is);
				} //	Updated

				//	UpdatedBy	- update
				else if (columnName.equals (""UpdatedBy""))
				{
					if (manualUpdate)
						createUpdateSql (columnName, String.valueOf (user));
					else
						rs.updateInt (colRs, user); 								//	***
				} //	UpdatedBy

				//	Created
				else if (m_inserting && columnName.equals (""Created""))
				{
					if (manualUpdate)
						createUpdateSql (columnName, DB.TO_DATE (now, false));
					else
						rs.updateTimestamp (colRs, now); 							//	***
				} //	Created

				//	CreatedBy
				else if (m_inserting && columnName.equals (""CreatedBy""))
				{
					if (manualUpdate)
						createUpdateSql (columnName, String.valueOf (user));
					else
						rs.updateInt (colRs, user); 								//	***
				} //	CreatedBy

				//	Nothing changed & null
				else if (m_rowData[col] == null && rowData[col] == null)
				{
					if (m_inserting)
					{
						if (manualUpdate)
							createUpdateSql (columnName, ""NULL"");
						else
							rs.updateNull (colRs); 								//	***
						is = INFO + columnName + ""= NULL"";
						log.fine(is);
					}
				}

				//	***	Data changed ***
				else if (m_inserting
				  || !Util.isEqual(m_rowData[col], rowData[col])) 			//	changed
				{
					//	Original == DB
					if (m_inserting || !m_compareDB
					  || Util.isEqual(m_rowData[col], rowDataDB[col]))
					{
						if (CLogMgt.isLevelFinest())
							log.fine(columnName + ""="" + rowData[col]
								+ "" "" + (rowData[col]==null ? """" : rowData[col].getClass().getName()));
						//
						boolean encrypted = field.isEncryptedColumn();
						//
						String type = ""String"";
						if (rowData[col] == null)
						{
							if (manualUpdate)
								createUpdateSql (columnName, ""NULL"");
							else
								rs.updateNull (colRs); 							//	***
						}

						//	ID - int
						else if (FieldType.isID (field.getDisplayType())
							|| field.getDisplayType() == DisplayTypeConstants.Integer)
						{
							try
							{
								Object dd = rowData[col];
								Integer iii = null;
								if (dd instanceof Integer)
									iii = (Integer)dd;
								else
									iii = Integer.valueOf(dd.toString());
								if (encrypted)
									iii = (Integer)encrypt(iii);
								if (manualUpdate)
									createUpdateSql (columnName, String.valueOf (iii));
								else
									rs.updateInt (colRs, iii.intValue()); 		// 	***
							}
							catch (Exception e) //  could also be a String (AD_Language, AD_Message)
							{
								if (manualUpdate)
									createUpdateSql (columnName, DB.TO_STRING (rowData[col].toString ()));
								else
									rs.updateString (colRs, rowData[col].toString ()); //	***
							}
							type = ""Int"";
						}
						//	Numeric - BigDecimal
						else if (FieldType.isNumeric (field.getDisplayType ()))
						{
							BigDecimal bd = (BigDecimal)rowData[col];
							if (encrypted)
								bd = (BigDecimal)encrypt(bd);
							if (manualUpdate)
								createUpdateSql (columnName, bd.toString ());
							else
								rs.updateBigDecimal (colRs, bd); 				//	***
							type = ""Number"";
						}
						//	Date - Timestamp
						else if (FieldType.isDate (field.getDisplayType ()))
						{
							Timestamp ts = (Timestamp)rowData[col];
							if (encrypted)
								ts = (Timestamp)encrypt(ts);
							if (manualUpdate)
								createUpdateSql (columnName, DB.TO_DATE (ts, false));
							else
								rs.updateTimestamp (colRs, ts); 				//	***
							type = ""Date"";
						}
						//	LOB
						else if (field.getDisplayType() == DisplayTypeConstants.TextLong)
						{
							PO_LOB lob = new PO_LOB (getTableName(), columnName,
								null, field.getDisplayType(), rowData[col]);
							lobAdd(lob);
							type = ""CLOB"";
						}
						//	BLOB
						else if (field.getDisplayType() == DisplayTypeConstants.Binary
							||	field.getDisplayType() == DisplayTypeConstants.Image)
						{
							PO_LOB lob = new PO_LOB (getTableName(), columnName,
								null, field.getDisplayType(), rowData[col]);
							lobAdd(lob);
							type = ""BLOB"";
						}
						//	Boolean
						else if (field.getDisplayType() == DisplayTypeConstants.YesNo)
						{
							String yn = null;
							if (rowData[col] instanceof Boolean)
							{
								Boolean bb = (Boolean)rowData[col];
								yn = bb.booleanValue() ? ""Y"" : ""N"";
							}
							else
								yn = ""Y"".equals(rowData[col]) ? ""Y"" : ""N"";
							if (encrypted)
								;
							if (manualUpdate)
								createUpdateSql (columnName, DB.TO_STRING (yn));
							else
								rs.updateString (colRs, yn); 					//	***
						}
						//	String and others
						else
						{
							String str = rowData[col].toString ();
							if (encrypted)
								str = (String)encrypt(str);
							if (manualUpdate)
								createUpdateSql (columnName, DB.TO_STRING (str));
							else
								rs.updateString (colRs, str); 					//	***
						}
						//
						is = INFO + columnName + ""= "" + m_rowData[col]
							 + "" -> "" + rowData[col] + "" ("" + type + "")"";
						if (encrypted)
							is += "" encrypted"";
						log.fine(is);
					}
					//	Original != DB
					else
					{
						error = true;
						is = ERROR + field.getColumnName () + ""= "" + m_rowData[col]
							 + "" != DB: "" + rowDataDB[col] + "" -> "" + rowData[col];
						log.fine(is);
						Object o1 = m_rowData[col];
						Object o2 = rowDataDB[col];
						boolean eq = o1.equals(o2);
						log.fine((o1 == o2) + ""  "" + eq);
					}
				}	//	Data changed

				//	Single Key - retrieval sql
				if (field.isKey() && !m_inserting)
				{
					if (rowData[col] == null)
						throw new RuntimeException(""Key is NULL - "" + columnName);
					if (columnName.endsWith (""_ID""))
						singleRowWHERE.append (columnName).append (""="").append (rowData[col]);
					else
					{
						singleRowWHERE = new StringBuffer();	//	overwrite
						singleRowWHERE.append (columnName).append (""="").append (DB.TO_STRING(rowData[col].toString()));
					}
				}
				//	MultiKey Inserting - retrieval sql
				if (field.isParentColumn())
				{
					if (rowData[col] == null)
						throw new RuntimeException(""MultiKey Parent is NULL - "" + columnName);
					if (multiRowWHERE.length() != 0)
						multiRowWHERE.append("" AND "");
					if (columnName.endsWith (""_ID""))
						multiRowWHERE.append (columnName).append (""="").append (rowData[col]);
					else
						multiRowWHERE.append (columnName).append (""="").append (DB.TO_STRING(rowData[col].toString()));
				}
				//
				colRs++;
			}	//	for every column

			if (error)
			{
				if (manualUpdate)
					createUpdateSqlReset();
				else
					rs.cancelRowUpdates();
				rs.close();
				pstmt.close();
				fireDataStatusEEvent(""SaveErrorDataChanged"", """", true);
				dataRefresh(m_rowChanged);
				return SAVE_ERROR;
			}

			/**
			 *	Save to Database
			 */
			//
			String whereClause = singleRowWHERE.toString();
			if (whereClause.length() == 0)
				whereClause = multiRowWHERE.toString();
			if (m_inserting)
			{
				log.fine(""Inserting ..."");
				if (manualUpdate)
				{
					String sql = createUpdateSql(true, null);
					int no = DB.executeUpdateEx (sql, null);	//	no Trx
					if (no != 1)
						log.log(Level.SEVERE, ""Insert #="" + no + "" - "" + sql);
				}
				else
					rs.insertRow();
			}
			else
			{
				log.fine(""Updating ... "" + whereClause);
				if (manualUpdate)
				{
					String sql = createUpdateSql(false, whereClause);
					int no = DB.executeUpdateEx (sql, null);	//	no Trx
					if (no != 1)
						log.log(Level.SEVERE, ""Update #="" + no + "" - "" + sql);
				}
				else
					rs.updateRow();
			}

			log.fine(""Committing ..."");
			//DB.commit(true, null);	//	no Trx
			//
			lobSave(whereClause);
			rs.close();
			pstmt.close();

			//	Need to re-read row to get ROWID, Key, DocumentNo, Trigger, virtual columns
			log.fine(""Reading ... "" + whereClause);
			StringBuffer refreshSQL = new StringBuffer(m_SQL_Select)
				.append("" WHERE "").append(whereClause);
			pstmt = DB.prepareStatement(refreshSQL.toString(), (Trx) null);
			rs = pstmt.executeQuery();
			if (rs.next())
			{
				rowDataDB = readData(rs);
				//	update buffer
				m_buffer.set(sort.index, rowDataDB);
				fireTableRowsUpdated(m_rowChanged, m_rowChanged);
			}
			else
				log.log(Level.SEVERE, ""Inserted row not found"");
			//
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (SQLException e)
		{
			try
			{
				if (pstmt != null)
				  pstmt.close ();
				pstmt = null;
			}
			catch (Exception ex)
			{
			}

			String msg = ""SaveError"";
			if (e.getErrorCode() == 1)		//	Unique Constraint
			{
				log.log(Level.WARNING, ""Key Not Unique"", e);
				msg = ""SaveErrorNotUnique"";
			}
			else
				log.log(Level.SEVERE, select.toString(), e);
			fireDataStatusEEvent(msg, e.getLocalizedMessage(), true);
			return SAVE_ERROR;
		}

		//	everything ok
		m_rowData = null;
		m_changed = false;
		m_compareDB = true;
		m_rowChanged = -1;
		m_newRow = -1;
		m_inserting = false;
		fireDataStatusIEvent(""Saved"", """");
		//
		log.info(""fini"");
		return SAVE_OK;
	}	//	dataSave
"
org.compiere.model.Loader.dataSavePO,GridTable.java,"char dataSavePO (int Record_ID) throws Exception
	{
		log.fine(""ID="" + Record_ID);
		//
		MSort sort = m_sort.get(m_rowChanged);
		Object[] rowData = m_buffer.get(sort.index);
		//
		MTable table = MTable.get (m_ctx, m_AD_Table_ID);
		PO po = null;
		if (table.isSingleKey() || Record_ID == 0)
			po = table.getPO(m_ctx, Record_ID, null);
		else	//	Multi - Key
			po = table.getPO(m_ctx, getWhereClause(rowData), null);
		//	No Persistent Object
		if (po == null)
			throw new ClassNotFoundException (""No Persistent Object"");

		int size = m_fields.size();
		for (int col = 0; col < size; col++)
		{
			GridField field = m_fields.get (col);
			if (field.isVirtualColumn())
				continue;
			String columnName = field.getColumnName ();
			Object value = rowData[col];
			Object oldValue = m_rowData[col];
			//	RowID
			if (field.getDisplayType() == DisplayTypeConstants.RowID)
				; 	//	ignore

			//	Nothing changed & null
			else if (oldValue == null && value == null)
				;	//	ignore

			//	***	Data changed ***
			else if (m_inserting
			  || !Util.isEqual(oldValue, value)) 			//	changed
			{
				//	Check existence
				int poIndex = po.get_ColumnIndex(columnName);
				if (poIndex < 0)
				{
					//	Custom Fields not in PO
					po.set_CustomColumn(columnName, value);
				//	log.log(Level.SEVERE, ""Column not found: "" + columnName);
					continue;
				}

				Object dbValue = po.get_Value(poIndex);
				if (m_inserting
					|| !m_compareDB
					//	Original == DB
					|| Util.isEqual(oldValue, dbValue)
					//	Target == DB (changed by trigger to new value already)
					|| Util.isEqual(value, dbValue))
				{
					if (!po.set_ValueNoCheck (columnName, value))
					{
						fireDataStatusEEvent(""ValidationError"", columnName, true);
						dataRefresh(m_rowChanged);
						return SAVE_ERROR;
					}
				}
				//	Original != DB
				else
				{
					String msg = columnName
						+ ""= "" + oldValue
							+ (oldValue==null ? """" : ""("" + oldValue.getClass().getName() + "")"")
						+ "" != DB: "" + dbValue
							+ (dbValue==null ? """" : ""("" + dbValue.getClass().getName() + "")"")
						+ "" -> New: "" + value
							+ (value==null ? """" : ""("" + value.getClass().getName() + "")"");
				//	CLogMgt.setLevel(Level.FINEST);
				//	po.dump();
					fireDataStatusEEvent(""SaveErrorDataChanged"", msg, true);
					dataRefresh(m_rowChanged);
					return SAVE_ERROR;
				}
			}	//	Data changed

		}	//	for every column

		if (!po.save())
		{
			String msg = ""SaveError"";
			String info = """";
			ValueNamePair ppE = CLogger.retrieveError();
			if (ppE == null)
				ppE = CLogger.retrieveWarning();
			if (ppE != null)
			{
				msg = ppE.getValue();
				info = ppE.getName();
				//	Unique Constraint
				Exception ex = CLogger.retrieveException();
				if (ex != null
					&& ex instanceof SQLException
					&& ((SQLException)ex).getErrorCode() == 1)
					msg = ""SaveErrorNotUnique"";
			}
			fireDataStatusEEvent(msg, info, true);
			return SAVE_ERROR;
		}

		//	Refresh - update buffer
		String whereClause = po.get_WhereClause(true);
		log.fine(""Reading ... "" + whereClause);
		StringBuffer refreshSQL = new StringBuffer(m_SQL_Select)
			.append("" WHERE "").append(whereClause);
		PreparedStatement pstmt = DB.prepareStatement(refreshSQL.toString(), (Trx) null);
		try
		{
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				Object[] rowDataDB = readData(rs);
				//	update buffer
				m_buffer.set(sort.index, rowDataDB);
				fireTableRowsUpdated(m_rowChanged, m_rowChanged);
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (SQLException e)
		{
			try
			{
				if (pstmt != null)
				  pstmt.close ();
				pstmt = null;
			}
			catch (Exception ex)
			{
			}

			String msg = ""SaveError"";
			log.log(Level.SEVERE, refreshSQL.toString(), e);
			fireDataStatusEEvent(msg, e.getLocalizedMessage(), true);
			return SAVE_ERROR;
		}

		//	everything ok
		m_rowData = null;
		m_changed = false;
		m_compareDB = true;
		m_rowChanged = -1;
		m_newRow = -1;
		m_inserting = false;
		//
		ValueNamePair pp = CLogger.retrieveWarning();
		if (pp != null)
		{
			String msg = pp.getValue();
			String info = pp.getName();
			fireDataStatusEEvent(msg, info, false);
		}
		else
		{
			pp = CLogger.retrieveInfo();
			String msg = ""Saved"";
			String info = """";
			if (pp != null)
			{
				msg = pp.getValue();
				info = pp.getName();
			}
			fireDataStatusIEvent(msg, info);
		}
		//
		log.config(""fini"");
		return SAVE_OK;
	}	//	dataSavePO
"
org.compiere.model.Loader.getWhereClause,GridTable.java,"String getWhereClause (Object[] rowData)
	{
		int size = m_fields.size();
		StringBuffer singleRowWHERE = null;
		StringBuffer multiRowWHERE = null;
		for (int col = 0; col < size; col++)
		{
			GridField field = m_fields.get (col);
			if (field.isKey())
			{
				String columnName = field.getColumnName();
				Object value = rowData[col];
				if (value == null)
				{
					log.log(Level.WARNING, ""PK data is null - "" + columnName);
					return null;
				}
				if (columnName.endsWith (""_ID""))
					singleRowWHERE = new StringBuffer(columnName)
						.append (""="").append (value);
				else
					singleRowWHERE = new StringBuffer(columnName)
						.append (""="").append (DB.TO_STRING(value.toString()));
			}
			else if (field.isParentColumn())
			{
				String columnName = field.getColumnName();
				Object value = rowData[col];
				if (value == null)
				{
					log.log(Level.INFO, ""FK data is null - "" + columnName);
					continue;
				}
				if (multiRowWHERE == null)
					multiRowWHERE = new StringBuffer();
				else
					multiRowWHERE.append("" AND "");
				if (columnName.endsWith (""_ID""))
					multiRowWHERE.append (columnName)
						.append (""="").append (value);
				else
					multiRowWHERE.append (columnName)
						.append (""="").append (DB.TO_STRING(value.toString()));
			}
		}	//	for all columns
		if (singleRowWHERE != null)
			return singleRowWHERE.toString();
		if (multiRowWHERE != null)
			return multiRowWHERE.toString();
		log.log(Level.WARNING, ""No key Found"");
		return null;
	}	//	getWhereClause
"
org.compiere.model.Loader.createUpdateSql,GridTable.java,"void createUpdateSql (String columnName, String value)
	{
		m_createSqlColumn.add(columnName);
		m_createSqlValue.add(value);
		log.finest(""#"" + m_createSqlColumn.size()
				+ "" - "" + columnName + ""="" + value);
	}	//	createUpdateSQL
"
org.compiere.model.Loader.createUpdateSql,GridTable.java,"String createUpdateSql (boolean insert, String whereClause)
	{
		StringBuffer sb = new StringBuffer();
		if (insert)
		{
			sb.append(""INSERT INTO "").append(m_tableName).append("" ("");
			for (int i = 0; i < m_createSqlColumn.size(); i++)
			{
				if (i != 0)
					sb.append("","");
				sb.append(m_createSqlColumn.get(i));
			}
			sb.append("") VALUES ( "");
			for (int i = 0; i < m_createSqlValue.size(); i++)
			{
				if (i != 0)
					sb.append("","");
				sb.append(m_createSqlValue.get(i));
			}
			sb.append("")"");
		}
		else
		{
			sb.append(""UPDATE "").append(m_tableName).append("" SET "");
			for (int i = 0; i < m_createSqlColumn.size(); i++)
			{
				if (i != 0)
					sb.append("","");
				sb.append(m_createSqlColumn.get(i)).append(""="").append(m_createSqlValue.get(i));
			}
			sb.append("" WHERE "").append(whereClause);
		}
		log.fine(sb.toString());
		//	reset
		createUpdateSqlReset();
		return sb.toString();
	}	//	createUpdateSql
"
org.compiere.model.Loader.createUpdateSqlReset,GridTable.java,"void createUpdateSqlReset()
	{
		m_createSqlColumn = new ArrayList<String>();
		m_createSqlValue = new ArrayList<String>();
	}	//	createUpdateSqlReset
"
org.compiere.model.Loader.getMandatory,GridTable.java,"String getMandatory(Object[] rowData)
	{
		//  see also => ProcessParameter.saveParameter
		StringBuffer sb = new StringBuffer();

		//	Check all columns
		int size = m_fields.size();
		for (int i = 0; i < size; i++)
		{
			GridField field = m_fields.get(i);
			if (field.isMandatory(true))        //  check context
			{
				if (rowData[i] == null || rowData[i].toString().length() == 0)
				{
					field.setInserting (true);  //  set editable otherwise deadlock
					field.setError(true);
					if (sb.length() > 0)
						sb.append("", "");
					sb.append(field.getHeader());
				}
			}
		}

		if (sb.length() == 0)
			return """";
		return sb.toString();
	}	//	getMandatory
"
org.compiere.model.Loader.getErrorColumns,GridTable.java,"String getErrorColumns()
	{
		//  see also => ProcessParameter.saveParameter
		StringBuffer sb = new StringBuffer();

		//	Check all columns
		int size = m_fields.size();
		for (int i = 0; i < size; i++)
		{
			GridField field = m_fields.get(i);
			if (field.isError())        //  check context
			{
				if (sb.length() > 0)
					sb.append("", "");
				sb.append(field.getHeader());
			}
		}

		if (sb.length() == 0)
			return """";
		return sb.toString();
	}	//	getErrorColumns
"
org.compiere.model.Loader.lobReset,GridTable.java,"void lobReset()
	{
		m_lobInfo = null;
	}	//	resetLOB
"
org.compiere.model.Loader.lobAdd,GridTable.java,"void lobAdd (PO_LOB lob)
	{
		log.fine(""LOB="" + lob);
		if (m_lobInfo == null)
			m_lobInfo = new ArrayList<PO_LOB>();
		m_lobInfo.add(lob);
	}	//	lobAdd
"
org.compiere.model.Loader.lobSave,GridTable.java,"void lobSave (String whereClause)
	{
		if (m_lobInfo == null)
			return;
		for (int i = 0; i < m_lobInfo.size(); i++)
		{
			PO_LOB lob = m_lobInfo.get(i);
			lob.save(whereClause, null);		//	no p_trx
		}	//	for all LOBs
		lobReset();
	}	//	lobSave
"
org.compiere.model.Loader.dataNew,GridTable.java,"boolean dataNew (int currentRow, boolean copyCurrent)
	{
		log.info(""Current="" + currentRow + "", Copy="" + copyCurrent);
		//  Read only
		if (m_readOnly)
		{
			fireDataStatusEEvent(""AccessCannotInsert"", """", true);
			return false;
		}

		/** @todo No TableLevel */
		//  || !Access.canViewInsert(m_ctx, m_WindowNo, tableLevel, true, true))
		//  fireDataStatusEvent(Log.retrieveError());

		//  see if we need to save
		dataSave(-2, false);


		m_inserting = true;
		//	Create default data
		int size = m_fields.size();
		m_rowData = new Object[size];	//	""original"" data
		Object[] rowData = new Object[size];
		int tempWindowNo = m_WindowNo + EnvConstants.WINDOW_TEMP;
		//	fill data
		if (copyCurrent)
		{
			MSort sort = m_sort.get(currentRow);
			Object[] origData = m_buffer.get(sort.index);
			for (int i = 0; i < size; i++)
			{
				GridField field = m_fields.get(i);
				String columnName = field.getColumnName();

				if (field.isVirtualColumn())
					;
				else if (field.isKey()
					|| columnName.equals(""AD_Client_ID"")
					//
					|| columnName.startsWith(""Created"") || columnName.startsWith(""Updated"")
					|| columnName.equals(""EntityType"") || columnName.equals(""DocumentNo"")
					|| columnName.equals(""Processed"") || columnName.equals(""IsSelfService"")
					|| columnName.equals(""DocAction"") || columnName.equals(""DocStatus"")
					|| columnName.startsWith(""Ref_"")
					|| columnName.equals(""Posted"")
					//	Order/Invoice
					|| columnName.equals(""GrandTotal"") || columnName.equals(""TotalLines"")
					|| columnName.equals(""C_CashLine_ID"") || columnName.equals(""C_Payment_ID"")
					|| columnName.equals(""IsPaid"") || columnName.equals(""IsAllocated"")
					|| columnName.equalsIgnoreCase(""C_Location_ID"")
				)
				{
					Object oo = field.getDefault(m_ctx, tempWindowNo);
					rowData[i] = oo;
					if (oo != null)
						m_ctx.setContext(tempWindowNo, field.getColumnName(), oo.toString());
				}
				else
				{
					Object oo = origData[i];
					rowData[i] = oo;
					if (oo != null)
						m_ctx.setContext(tempWindowNo, field.getColumnName(), oo.toString());
				}
			}
		}
		else	//	new
		{
			for (int i = 0; i < size; i++)
			{
				GridField field = m_fields.get(i);
				Object oo = field.getDefault(m_ctx, tempWindowNo);
				rowData[i] = oo;
				if (oo != null)
					m_ctx.setContext(tempWindowNo, field.getColumnName(), oo.toString());
			}
		}
		m_ctx.removeWindow(tempWindowNo);
		m_changed = true;
		m_compareDB = true;
		m_rowChanged = -1;  //  only changed in setValueAt
		m_newRow = currentRow + 1;
		//  if there is no record, the current row could be 0 (and not -1)
		if (m_buffer.size() < m_newRow)
			m_newRow = m_buffer.size();

		//	add Data at end of buffer
		MSort sort = new MSort(m_buffer.size(), null);	//	index
		m_buffer.add(rowData);
		//	add Sort pointer
		m_sort.add(m_newRow, sort);
		m_rowCount++;

		//	inform
		log.finer(""Current="" + currentRow + "", New="" + m_newRow);
		fireTableRowsInserted(m_newRow, m_newRow);
		fireDataStatusIEvent(copyCurrent ? ""UpdateCopied"" : ""Inserted"", """");
		log.fine(""Current="" + currentRow + "", New="" + m_newRow + "" - complete"");
		return true;
	}	//	dataNew
"
org.compiere.model.Loader.dataDelete,GridTable.java,"boolean dataDelete (int row)
	{
		log.info(""Row="" + row);
		if (row < 0)
			return false;

		//	Tab R/O
		if (m_readOnly)
		{
			fireDataStatusEEvent(""AccessCannotDelete"", """", true);	//	privileges
			return false;
		}

		//	Is this record deletable?
		if (!m_deleteable)
		{
			fireDataStatusEEvent(""AccessNotDeleteable"", """", true);	//	audit
			return false;
		}

		//	Processed Column and not an Import Table
		if (m_indexProcessedColumn > 0 && !m_tableName.startsWith(""I_""))
		{
			Boolean processed = (Boolean)getValueAt(row, m_indexProcessedColumn);
			if (processed != null && processed.booleanValue())
			{
				fireDataStatusEEvent(""CannotDeleteTrx"", """", true);
				return false;
			}
		}

		/** @todo check Access */
		//  fireDataStatusEvent(Log.retrieveError());

		MSort sort = m_sort.get(row);
		Object[] rowData = m_buffer.get(sort.index);
		//
		MTable table = MTable.get (m_ctx, m_AD_Table_ID);
		PO po = null;
		int Record_ID = getKeyID(m_rowChanged);
		Trx p_trx = Trx.get(""GridDel"");
		if (Record_ID != -1)
			po = table.getPO(m_ctx, Record_ID, p_trx);
		else	//	Multi - Key
			po = table.getPO(m_ctx, getWhereClause(rowData), p_trx);

		//	Delete via PO
		if (po != null)
		{
			boolean ok = false;
			try
			{
				ok = po.delete(false);
			}
			catch (Throwable t)
			{
				log.log(Level.SEVERE, ""Delete"", t);
			}
			if (!ok)
			{
				p_trx.rollback();
				ValueNamePair vp = CLogger.retrieveError();
				if (vp != null)
					fireDataStatusEEvent(vp);
				else
					fireDataStatusEEvent(""DeleteError"", """", true);
				return false;
			}
			else
				p_trx.commit();
		}
		else	//	Delete via SQL
		{
			StringBuffer sql = new StringBuffer(""DELETE FROM "");
			sql.append(m_tableName).append("" WHERE "").append(getWhereClause(rowData));
			int no = 0;
			try
			{
				PreparedStatement pstmt = DB.prepareStatement(sql.toString(), (Trx) null);
				no = pstmt.executeUpdate();
				pstmt.close();
			}
			catch (SQLException e)
			{
				log.log(Level.SEVERE, sql.toString(), e);
				String msg = ""DeleteError"";
				if (e.getErrorCode() == 2292)	//	Child Record Found
					msg = ""DeleteErrorDependent"";
				fireDataStatusEEvent(msg, e.getLocalizedMessage(), true);
				return false;
			}
			//	Check Result
			if (no != 1)
			{
				log.log(Level.SEVERE, ""Number of deleted rows = "" + no);
				return false;
			}
		}

		p_trx.close();
		p_trx = null;


		//	Get Sort
		int bufferRow = sort.index;
		//	Delete row in Buffer and shifts all below up
		m_buffer.remove(bufferRow);
		m_rowCount--;

		//	Delete row in Sort
		m_sort.remove(row);
		//	Correct pointer in Sort
		for (int i = 0; i < m_sort.size(); i++)
		{
			MSort ptr = m_sort.get(i);
			if (ptr.index > bufferRow)
				ptr.index--;	//	move up
		}

		//	inform
		m_changed = false;
		m_rowChanged = -1;
		fireTableRowsDeleted(row, row);
		fireDataStatusIEvent(""Deleted"", """");
		log.fine(""Row="" + row + "" complete"");
		return true;
	}	//	dataDelete
"
org.compiere.model.Loader.dataIgnore,GridTable.java,"void dataIgnore()
	{
		if (!m_inserting && !m_changed && m_rowChanged < 0)
		{
			log.fine(""Nothing to ignore"");
			return;
		}
		log.info(""Inserting="" + m_inserting);

		//	Inserting - delete new row
		if (m_inserting)
		{
			//	Get Sort
			MSort sort = m_sort.get(m_newRow);
			int bufferRow = sort.index;
			//	Delete row in Buffer and shifts all below up
			m_buffer.remove(bufferRow);
			m_rowCount--;
			//	Delete row in Sort
			m_sort.remove(m_newRow);	//	pintint to the last column, so no adjustment
			//
			m_changed = false;
			m_rowData = null;
			m_rowChanged = -1;
			m_inserting = false;
			//	inform
			fireTableRowsDeleted(m_newRow, m_newRow);
		}
		else
		{
			//	update buffer
			if (m_rowData != null)
			{
				MSort sort = m_sort.get(m_rowChanged);
				m_buffer.set(sort.index, m_rowData);
			}
			m_changed = false;
			m_rowData = null;
			m_rowChanged = -1;
			m_inserting = false;
			//	inform
		//	fireTableRowsUpdated(m_rowChanged, m_rowChanged); >> messes up display?? (clearSelection)
		}
		m_newRow = -1;
		fireDataStatusIEvent(""Ignored"", """");
	}	//	dataIgnore
"
org.compiere.model.Loader.dataRefresh,GridTable.java,"void dataRefresh (int row)
	{
		log.info(""Row="" + row);

		if (row < 0 || m_sort.size() == 0 || m_inserting)
			return;

		MSort sort = m_sort.get(row);
		Object[] rowData = m_buffer.get(sort.index);

		//  ignore
		dataIgnore();

		//	Create SQL
		String where = getWhereClause(rowData);
		if (where == null || where.length() == 0)
			where = ""1=2"";
		String sql = m_SQL_Select + "" WHERE "" + where;
		sort = m_sort.get(row);
		Object[] rowDataDB = null;
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			ResultSet rs = pstmt.executeQuery();
			//	only one row
			if (rs.next())
				rowDataDB = readData(rs);
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
			fireTableRowsUpdated(row, row);
			fireDataStatusEEvent(""RefreshError"", sql, true);
			return;
		}

		//	update buffer
		m_buffer.set(sort.index, rowDataDB);
		//	info
		m_rowData = null;
		m_changed = false;
		m_rowChanged = -1;
		m_inserting = false;
		fireTableRowsUpdated(row, row);
		fireDataStatusIEvent(""Refreshed"", """");
	}	//	dataRefresh
"
org.compiere.model.Loader.dataRefreshAll,GridTable.java,"void dataRefreshAll()
	{
		log.info("""");
		m_inserting = false;	//	should not happen
		dataIgnore();
		close(false);
		open(m_maxRows);
		//	Info
		m_rowData = null;
		m_changed = false;
		m_rowChanged = -1;
		m_inserting = false;
		fireTableDataChanged();
		fireDataStatusIEvent(""Refreshed"", """");
	}	//	dataRefreshAll
"
org.compiere.model.Loader.dataRequery,GridTable.java,"boolean dataRequery (String whereClause)
	{
		log.info(whereClause);
		close(false);
		setSelectWhereClause(whereClause);
		boolean success = open(m_maxRows);
		//  Info
		m_rowData = null;
		m_changed = false;
		m_rowChanged = -1;
		m_inserting = false;
		fireTableDataChanged();
		fireDataStatusIEvent(""Refreshed"", """");
		return success;
	}	//	dataRequery
"
org.compiere.model.Loader.isCellEditable,GridTable.java,"boolean isCellEditable (int row, int col)
	{
	//	log.fine( ""MTable.isCellEditable - Row="" + row + "", Col="" + col);
		//	Make Rows selectable
	//	if (col == 0)
	//		return true;

		//	Entire Table not editable
		if (m_readOnly)
			return false;
		//	Key not editable
		if (col == m_indexKeyColumn)
			return false;
		/** @todo check link columns */

		//	Check column range
		if (col < 0 && col >= m_fields.size())
			return false;
		//  IsActive Column always editable if no processed exists
		if (col == m_indexActiveColumn && m_indexProcessedColumn == -1)
			return true;
		//	Row
		if (!isRowEditable(row))
			return false;

		//	Column
		return m_fields.get(col).isEditable(false);
	}	//	IsCellEditable
"
org.compiere.model.Loader.isRowEditable,GridTable.java,"boolean isRowEditable (int row)
	{
	//	log.fine( ""MTable.isRowEditable - Row="" + row);
		//	Entire Table not editable or no row
		if (m_readOnly || row < 0)
			return false;
		//	If not Active - not editable
		if (m_indexActiveColumn > 0)		//	&& m_TabNo != Find.s_TabNo)
		{
			Object value = getValueAt(row, m_indexActiveColumn);
			if (value instanceof Boolean)
			{
				if (!((Boolean)value).booleanValue())
					return false;
			}
			else if (""N"".equals(value))
				return false;
		}
		//	If Processed - not editable (Find always editable)
		if (m_indexProcessedColumn > 0)		//	&& m_TabNo != Find.s_TabNo)
		{
			Object processed = getValueAt(row, m_indexProcessedColumn);
			if (processed instanceof Boolean)
			{
				if (((Boolean)processed).booleanValue())
					return false;
			}
			else if (""Y"".equals(processed))
				return false;
		}
		//
		int[] co = getClientOrg(row);
		int AD_Client_ID = co[0];
		int AD_Org_ID = co[1];
		int Record_ID = getKeyID(row);
		return MRole.getDefault(m_ctx, false).canUpdate
			(AD_Client_ID, AD_Org_ID, m_AD_Table_ID, Record_ID, false);
	}	//	isRowEditable
"
org.compiere.model.Loader.getClientOrg,GridTable.java,"int[] getClientOrg (int row)
	{
		int AD_Client_ID = -1;
		if (m_indexClientColumn != -1)
		{
			Integer ii = (Integer)getValueAt(row, m_indexClientColumn);
			if (ii != null)
				AD_Client_ID = ii.intValue();
		}
		int AD_Org_ID = 0;
		if (m_indexOrgColumn != -1)
		{
			Integer ii = (Integer)getValueAt(row, m_indexOrgColumn);
			if (ii != null)
				AD_Org_ID = ii.intValue();
		}
		return new int[] {AD_Client_ID, AD_Org_ID};
	}	//	getClientOrg
"
org.compiere.model.Loader.setReadOnly,GridTable.java,"void setReadOnly (boolean value)
	{
		log.fine(""ReadOnly="" + value);
		m_readOnly = value;
	}	//	setReadOnly
"
org.compiere.model.Loader.isReadOnly,GridTable.java,"boolean isReadOnly()
	{
		return m_readOnly;
	}   //  isReadOnly
"
org.compiere.model.Loader.isInserting,GridTable.java,"boolean isInserting()
	{
		return m_inserting;
	}   //  isInserting
"
org.compiere.model.Loader.setCompareDB,GridTable.java,"void setCompareDB (boolean compareDB)
	{
		m_compareDB = compareDB;
	}  	//	setCompareDB
"
org.compiere.model.Loader.getCompareDB,GridTable.java,"boolean getCompareDB ()
	{
		return m_compareDB;
	}  	//	getCompareDB
"
org.compiere.model.Loader.setDeleteable,GridTable.java,"void setDeleteable (boolean value)
	{
		log.fine(""Deleteable="" + value);
		m_deleteable = value;
	}	//	setDeleteable
"
org.compiere.model.Loader.readData,GridTable.java,"Object[] readData (ResultSet rs)
	{
		int size = m_fields.size();
		Object[] rowData = new Object[size];
		String columnName = null;
		int displayType = 0;

		//	Types see also MField.createDefault
		try
		{
			//	get row data
			for (int j = 0; j < size; j++)
			{
				//	Column Info
				GridField field = m_fields.get(j);
				columnName = field.getColumnName();
				displayType = field.getDisplayType();
				//	Integer, ID, Lookup (UpdatedBy is a numeric column)
				if (displayType == DisplayTypeConstants.Integer
					|| FieldType.isID(displayType) // JJ: don't touch!
						&& (columnName.endsWith(""_ID"") || columnName.endsWith(""_Acct""))
					|| columnName.endsWith(""atedBy""))
				{
					rowData[j] = Integer.valueOf(rs.getInt(j+1));	//	Integer
					if (rs.wasNull())
						rowData[j] = null;
				}
				//	Number
				else if (FieldType.isNumeric(displayType))
					rowData[j] = rs.getBigDecimal(j+1);			//	BigDecimal
				//	Date
				else if (FieldType.isDate(displayType))
					rowData[j] = rs.getTimestamp(j+1);			//	Timestamp
				//	RowID or Key (and Selection)
				else if (displayType == DisplayTypeConstants.RowID)
					rowData[j] = null;
				//	YesNo
				else if (displayType == DisplayTypeConstants.YesNo)
				{
					String str = rs.getString(j+1);
					if (field.isEncryptedColumn())
						str = (String)decrypt(str);
					rowData[j] = Boolean.valueOf (""Y"".equals(str));	//	Boolean
				}
				//	LOB
				else if (FieldType.isLOB(displayType))
				{
					Object value = rs.getObject(j+1);
					if (rs.wasNull())
						rowData[j] = null;
					else if (value instanceof Clob)
					{
						Clob lob = (Clob)value;
						long length = lob.length();
						rowData[j] = lob.getSubString(1, (int)length);
					}
					else if (value instanceof Blob)
					{
						Blob lob = (Blob)value;
						long length = lob.length();
						rowData[j] = lob.getBytes(1, (int)length);
					}
					// For EnterpriseDB (Compiere Type Long Text is stored as Text in EDB)
					else if (value instanceof java.lang.String) {
						rowData[j] = value.toString();
					}

				}
				//	String
				else
					rowData[j] = rs.getString(j+1);				//	String
				//	Encrypted
				if (field.isEncryptedColumn() && displayType != DisplayTypeConstants.YesNo)
					rowData[j] = decrypt(rowData[j]);
			}
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, columnName + "", DT="" + displayType, e);
		}
		return rowData;
	}	//	readData
"
org.compiere.model.Loader.encrypt,GridTable.java,"Object encrypt (Object xx)
	{
		if (xx == null)
			return null;
		return SecureEngine.encrypt(xx);
	}	//	encrypt
"
org.compiere.model.Loader.decrypt,GridTable.java,"Object decrypt (Object yy)
	{
		if (yy == null)
			return null;
		return SecureEngine.decrypt(yy);
	}	//	decrypt
"
org.compiere.model.Loader.removeDataStatusListener,GridTable.java,"void removeDataStatusListener(DataStatusListener l)
	{
		listenerList.remove(DataStatusListener.class, l);
	}	//	removeDataStatusListener
"
org.compiere.model.Loader.addDataStatusListener,GridTable.java,"void addDataStatusListener(DataStatusListener l)
	{
		listenerList.add(DataStatusListener.class, l);
	}	//	addDataStatusListener
"
org.compiere.model.Loader.fireDataStatusChanged,GridTable.java,"void fireDataStatusChanged (DataStatusEvent e)
	{
		DataStatusListener[] listeners = listenerList.getListeners(DataStatusListener.class);
        for (DataStatusListener element : listeners)
			element.dataStatusChanged(e);
	}	//	fireDataStatusChanged
"
org.compiere.model.Loader.createDSE,GridTable.java,"DataStatusEvent createDSE()
	{
		boolean changed = m_changed;
		if (m_rowChanged != -1)
			changed = true;
		DataStatusEvent dse = new DataStatusEvent(this, m_rowCount, changed,
			m_ctx.isAutoCommit(m_WindowNo), m_inserting);
		dse.AD_Table_ID = m_AD_Table_ID;
		dse.Record_ID = null;
		return dse;
	}   //  createDSE
"
org.compiere.model.Loader.fireDataStatusIEvent,GridTable.java,"void fireDataStatusIEvent (String AD_Message, String info)
	{
		DataStatusEvent e = createDSE();
		e.setInfo(AD_Message, info, false,false);
		fireDataStatusChanged (e);
	}   //  fireDataStatusEvent
"
org.compiere.model.Loader.fireDataStatusEEvent,GridTable.java,"void fireDataStatusEEvent (String AD_Message, String info, boolean isError)
	{
	//	org.compiere.util.Trace.printStack();
		//
		DataStatusEvent e = createDSE();
		e.setInfo(AD_Message, info, isError, !isError);
		if (isError)
			log.saveWarning(AD_Message, info);
		fireDataStatusChanged (e);
	}   //  fireDataStatusEvent
"
org.compiere.model.Loader.fireDataStatusEEvent,GridTable.java,"void fireDataStatusEEvent (ValueNamePair errorLog)
	{
		if (errorLog != null)
			fireDataStatusEEvent (errorLog.getValue(), errorLog.getName(), true);
	}   //  fireDataStatusEvent
"
org.compiere.model.Loader.removeVetoableChangeListener,GridTable.java,"void removeVetoableChangeListener(VetoableChangeListener l)
	{
		m_vetoableChangeSupport.removeVetoableChangeListener(l);
	}   //  removeVetoableChangeListener
"
org.compiere.model.Loader.addVetoableChangeListener,GridTable.java,"void addVetoableChangeListener(VetoableChangeListener l)
	{
		m_vetoableChangeSupport.addVetoableChangeListener(l);
	}   //  addVetoableChangeListener
"
org.compiere.model.Loader.fireVetoableChange,GridTable.java,"void fireVetoableChange(PropertyChangeEvent e) throws java.beans.PropertyVetoException
	{
		m_vetoableChangeSupport.fireVetoableChange(e);
	}   //  fireVetoableChange
"
org.compiere.model.Loader.toString,GridTable.java,"String toString()
	{
		return new StringBuffer(""MTable["").append(m_tableName)
			.append("",WindowNo="").append(m_WindowNo)
			.append("",Tab="").append(m_TabNo).append(""]"").toString();
	}   //  toString
"
org.compiere.model.Loader.open,GridTable.java,"int open (int maxRows)
		{
		//	log.config( ""MTable Loader.open"");
			//	Get Number of Rows
			int rows = 0;
			try
			{
				PreparedStatement pstmt = DB.prepareStatement(m_SQL_Count, (Trx) null);
				setParameter (pstmt, true);
				ResultSet rs = pstmt.executeQuery();
				if (rs.next())
					rows = rs.getInt(1);
				rs.close();
				pstmt.close();
			}
			catch (SQLException e0)
			{
				//	Zoom Query may have invalid where clause
				if (e0.getErrorCode() == 904) 	//	ORA-00904: ""C_x_ID"": invalid identifier
					log.warning(""Count - "" + e0.getLocalizedMessage() + ""\nSQL="" + m_SQL_Count);
				else
					log.log(Level.SEVERE, ""Count SQL="" + m_SQL_Count, e0);
				return 0;
			}
			StringBuffer info = new StringBuffer(""Rows="");
			info.append(rows);
			if (rows == 0)
				info.append("" - "").append(m_SQL_Count);

			//	open Statement (closed by Loader.close)
			try
			{
				m_pstmt = DB.prepareStatement(m_SQL, (Trx) null);
				if (maxRows > 0 && rows > maxRows)
				{
					m_pstmt.setMaxRows(maxRows);
					info.append("" - MaxRows="").append(maxRows);
					rows = maxRows;
				}
			//	m_pstmt.setFetchSize(20);
				setParameter (m_pstmt, false);
				m_rs = m_pstmt.executeQuery();
			}
			catch (SQLException e)
			{
				log.log(Level.SEVERE, m_SQL, e);
				return 0;
			}
			log.fine(info.toString());
			return rows;
		}	//	open
"
org.compiere.model.Loader.close,GridTable.java,"void close()
		{
		//	log.config( ""MTable Loader.close"");
			try
			{
				if (m_rs != null)
					m_rs.close();
				if (m_pstmt != null)
					m_pstmt.close();
			}
			catch (SQLException e)
			{
				log.log(Level.SEVERE, ""closeRS"", e);
			}
			m_rs = null;
			m_pstmt = null;
		}	//	close
"
org.compiere.model.Loader.run,GridTable.java,"void run()
		{
			log.info("""");
			if (m_rs == null)
				return;

			try
			{
				while (m_rs.next())
				{
					if (this.isInterrupted())
					{
						log.fine(""Interrupted"");
						close();
						return;
					}
					//  Get Data
					Object[] rowData = readData(m_rs);
					//	add Data
					MSort sort = new MSort(m_buffer.size(), null);	//	index
					m_buffer.add(rowData);
					m_sort.add(sort);

					//	Statement all 250 rows & sleep
					if (m_buffer.size() % 250 == 0)
					{
						//	give the other processes a chance
						try
						{
							yield();
							sleep(10);		//	.01 second
						}
						catch (InterruptedException ie)
						{
							log.fine(""Interrupted while sleeping"");
							close();
							return;
						}
						DataStatusEvent evt = createDSE();
						evt.setLoading(m_buffer.size());
						fireDataStatusChanged(evt);
					}
				}	//	while(rs.next())
			}
			catch (SQLException e)
			{
				log.log(Level.SEVERE, ""run"", e);
			}
			close();
			fireDataStatusIEvent("""", """");
		}	//	run
"
org.compiere.model.Loader.setParameter,GridTable.java,"void setParameter (PreparedStatement pstmt, boolean countSQL)
		{
			if (m_parameterSELECT.size() == 0 && m_parameterWHERE.size() == 0)
				return;
			try
			{
				int pos = 1;	//	position in Statement
				//	Select Clause Parameters
				for (int i = 0; !countSQL && i < m_parameterSELECT.size(); i++)
				{
					Object para = m_parameterSELECT.get(i);
					if (para != null)
						log.fine(""Select "" + i + ""="" + para);
					//
					if (para == null)
						;
					else if (para instanceof Integer)
					{
						Integer ii = (Integer)para;
						pstmt.setInt (pos++, ii.intValue());
					}
					else if (para instanceof BigDecimal)
						pstmt.setBigDecimal (pos++, (BigDecimal)para);
					else
						pstmt.setString(pos++, para.toString());
				}
				//	Where Clause Parameters
				for (int i = 0; i < m_parameterWHERE.size(); i++)
				{
					Object para = m_parameterWHERE.get(i);
					if (para != null)
						log.fine(""Where "" + i + ""="" + para);
					//
					if (para == null)
						;
					else if (para instanceof Integer)
					{
						Integer ii = (Integer)para;
						pstmt.setInt (pos++, ii.intValue());
					}
					else if (para instanceof BigDecimal)
						pstmt.setBigDecimal (pos++, (BigDecimal)para);
					else
						pstmt.setString(pos++, para.toString());
				}
			}
			catch (SQLException e)
			{
				log.log(Level.SEVERE, ""parameter"", e);
			}
		}	//	setParameter
"
org.compiere.model.MImage.get,MImage.java,"MImage get (Ctx ctx, int AD_Image_ID)
	{
		if (AD_Image_ID == 0)
			return new MImage (ctx, AD_Image_ID, null);
		//
		Integer key = Integer.valueOf (AD_Image_ID);
		MImage retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MImage (ctx, AD_Image_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	} //	get
"
org.compiere.model.MImage.getImage,MImage.java,"Image getImage ()
	{
		if (m_image != null)
			return m_image;
		//	Via byte array
		byte[] data = getBinaryData();
		if (data != null && data.length > 0)
		{
			try
			{
				Toolkit tk = Toolkit.getDefaultToolkit();
				m_image = tk.createImage(data);
				return m_image;
			}
			catch (Exception e)
			{
				log.log(Level.WARNING, ""(byteArray)"", e);
				return null;
			}
		}
		//	Via URL
		URL url = getURL();
		if (url == null)
			return null;
		
		try
		{
			Toolkit tk = Toolkit.getDefaultToolkit();
			m_image = tk.getImage(url);
			return m_image;
		}
		catch (Exception e)
		{
			log.log(Level.WARNING, ""(URL)"", e);
		}
		return null;
	}   //  getImage
"
org.compiere.model.MImage.getIcon,MImage.java,"Icon getIcon ()
	{
		if (m_icon != null)
			return m_icon;
		//	Via byte array
		byte[] data = getBinaryData();
		if (data != null && data.length > 0)
		{
			try
			{
				m_icon = new ImageIcon(data, getName());
				return m_icon;
			}
			catch (Exception e)
			{
				log.log(Level.WARNING, ""(byteArray)"", e);
				return null;
			}
		}
		//	Via URL
		URL url = getURL();
		if (url == null)
			return null;
		
		try
		{
			m_icon = new ImageIcon(url, getName());
			return m_icon;
		}
		catch (Exception e)
		{
			log.log(Level.WARNING, ""(URL)"", e);
		}
		return null;
	}   //  getIcon
"
org.compiere.model.MImage.getURL,MImage.java,"URL getURL()
	{
		String str = getImageURL();
		if (str == null || str.length() == 0)
			return null;
		
		URL url = null;
		try
		{
			//	Try URL directly
			if (str.indexOf(""://"") != -1)
				url = new URL(str);
			else	//	Try Resource
				url = MImage.class.getResource(str);
			//
			if (url == null)
				log.config(""Not found: "" + str);
		}
		catch (Exception e)
		{
			log.warning(""Not found: "" + str + "" - "" + e.getMessage());
		}
		return url;
	}	//	getURL
"
org.compiere.model.MImage.setImageURL,MImage.java,"void setImageURL (String ImageURL)
	{
		m_image = null;
		m_icon = null;
		super.setImageURL (ImageURL);
	}	//	setImageURL
"
org.compiere.model.MImage.setBinaryData,MImage.java,"void setBinaryData (byte[] BinaryData)
	{
		m_image = null;
		m_icon = null;
		super.setBinaryData (BinaryData);
	}	//	setBinaryData
"
org.compiere.model.MImage.getData,MImage.java,"byte[] getData()
	{
		byte[] data = super.getBinaryData ();
		if (data != null)
			return data;
		//	From URL
		String str = getImageURL();
		if (str == null || str.length() == 0)
		{
			log.config(""No Image URL"");
			return null;
		}
		//	Get from URL
		URL url = getURL();
		if (url == null)
			return null;

		try
		{
			URLConnection conn = url.openConnection();
		    conn.setUseCaches(false);
		    InputStream is = conn.getInputStream();
			byte[] buffer = new byte[1024*8];   //  8kB
			ByteArrayOutputStream os = new ByteArrayOutputStream();
			int length = -1;
			while ((length = is.read(buffer)) != -1)
				os.write(buffer, 0, length);
			is.close();
			data = os.toByteArray();
			os.close();
		    
		}
		catch (Exception e)
		{
			log.config (e.toString());
		}
		return data;
	}	//	getData
"
org.compiere.model.MImage.toString,MImage.java,"String toString()
	{
		return ""MImage[ID="" + get_ID() + "",Name="" + getName() + ""]"";
	}   //  toString
"
org.compiere.model.MImage.beforeSave,MImage.java,"boolean beforeSave (boolean newRecord)
	{
		if (getAD_Org_ID() != 0)
			setAD_Org_ID(0);
		return true;
	}	//	beforeSave
"
org.compiere.model.MCStage.getStages,MCStage.java,"MCStage[] getStages (MWebProject project)
	{
		ArrayList<MCStage> list = new ArrayList<MCStage>();
		PreparedStatement pstmt = null;
		String sql = ""SELECT * FROM CM_CStage WHERE CM_WebProject_ID=? ORDER BY CM_CStage_ID"";
		try
		{
			pstmt = DB.prepareStatement (sql, project.get_Trx());
			pstmt.setInt (1, project.getCM_WebProject_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				list.add (new MCStage (project.getCtx(), rs, project.get_Trx()));
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MCStage[] retValue = new MCStage[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getStages
"
org.compiere.model.MCStage.getByName,MCStage.java,"MCStage getByName (MWebProject project, String RelativeURL, int parent_ID)
	{
		MCStage retValue = null;
		PreparedStatement pstmt = null;
		String sql = ""SELECT * FROM CM_CStage WHERE CM_WebProject_ID=? AND RelativeURL LIKE ? "" + //1,2
				""AND CM_CStage_ID IN (SELECT Node_ID FROM AD_TreeNodeCMS WHERE "" +
					"" AD_Tree_ID=? AND Parent_ID=?)"" + // 3, 4
				""ORDER BY CM_CStage_ID"";
		try
		{
			pstmt = DB.prepareStatement (sql, project.get_Trx());
			pstmt.setInt (1, project.getCM_WebProject_ID());
			pstmt.setString (2, RelativeURL);
			pstmt.setInt (3, project.getAD_TreeCMS_ID ());
			pstmt.setInt (4, parent_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				retValue = new MCStage (project.getCtx(), rs, project.get_Trx());
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return retValue;
	}	//	getStages
"
org.compiere.model.MCStage.getStagesByTemplate,MCStage.java,"MCStage[] getStagesByTemplate (MWebProject project, int CM_Template_ID)
	{
		ArrayList<MCStage> list = new ArrayList<MCStage>();
		PreparedStatement pstmt = null;
		String sql = ""SELECT * FROM CM_CStage WHERE CM_WebProject_ID=? AND CM_Template_ID=?"";
		try
		{
			pstmt = DB.prepareStatement (sql, project.get_Trx());
			pstmt.setInt (1, project.getCM_WebProject_ID());
			pstmt.setInt (2, CM_Template_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				list.add (new MCStage (project.getCtx(), rs, project.get_Trx()));
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MCStage[] retValue = new MCStage[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getStages
"
org.compiere.model.MCStage.getTemplate,MCStage.java,"MTemplate getTemplate() 
	{
		if (getCM_Template_ID()>0 && m_template==null)
			m_template = MTemplate.get(getCtx(), getCM_Template_ID(), null);
		return m_template;
	} // getTemplate
"
org.compiere.model.MCStage.setRelativeURL,MCStage.java,"void setRelativeURL (String RelativeURL)
	{
		if (RelativeURL != null)
		{
			if (RelativeURL.endsWith(""/""))
				RelativeURL = RelativeURL.substring(0, RelativeURL.length()-1);
			int index = RelativeURL.lastIndexOf(""/"");
			if (index != -1)
				RelativeURL = RelativeURL.substring(index+1);
		}
		super.setRelativeURL (RelativeURL);
	}	//	setRelativeURL
"
org.compiere.model.MCStage.getWebProject,MCStage.java,"MWebProject getWebProject()
	{
		if (m_project == null)
			m_project = MWebProject.get(getCtx(), getCM_WebProject_ID());
		return m_project;
	}	//	getWebProject
"
org.compiere.model.MCStage.getAD_Tree_ID,MCStage.java,"int getAD_Tree_ID()
	{
		return getWebProject().getAD_TreeCMS_ID();
	}	//	getAD_Tree_ID;
"
org.compiere.model.MCStage.toString,MCStage.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MCStage["")
			.append (get_ID()).append (""-"").append (getName()).append (""]"");
		return sb.toString ();
	} 	//	toString
"
org.compiere.model.MCStage.beforeSave,MCStage.java,"boolean beforeSave (boolean newRecord)
	{
		//	Length >0 if not (Binary, Image, Text Long)
		if ((!this.isSummary() || this.getContainerType().equals (""L"")) && getCM_Template_ID()==0)
		{
			log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""Template""));
			return false;
		}
		// On Modification set isModified
		if (is_Changed () && !is_ValueChanged(""IsModified""))
			setIsModified(true);
		//	Validate
		setRelativeURL(getRelativeURL());
		return true;
	}	//	beforeSave
"
org.compiere.model.MCStage.afterSave,MCStage.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!success)
			return success;
		// If Not Summary Node check whether all Elements and Templatetable Records exist.
		if (!isSummary()) { 
			checkElements();
			checkTemplateTable();
		}
		if (newRecord)
		{
			StringBuffer sb = new StringBuffer (""INSERT INTO AD_TreeNodeCMS ""
				+ ""(AD_Client_ID,AD_Org_ID, IsActive,Created,CreatedBy,Updated,UpdatedBy, ""
				+ ""AD_Tree_ID, Node_ID, Parent_ID, SeqNo) ""
				+ ""VALUES ("")
				.append(getAD_Client_ID()).append("",0, 'Y', SysDate, 0, SysDate, 0,"")
				.append(getAD_Tree_ID()).append("","").append(get_ID())
				.append("", 0, 999)"");
			int no = DB.executeUpdate(sb.toString(), get_Trx());
			if (no > 0)
				log.fine(""#"" + no + "" - TreeType=CMS"");
			else
				log.warning(""#"" + no + "" - TreeType=CMS"");
			return no > 0;
		}
		/*if (success) {
		}*/
		return success;
	}	//	afterSave
"
org.compiere.model.MCStage.afterDelete,MCStage.java,"boolean afterDelete (boolean success)
	{
		if (!success)
			return success;
		//
		StringBuffer sb = new StringBuffer (""DELETE FROM AD_TreeNodeCMS "")
			.append("" WHERE Node_ID="").append(get_IDOld())
			.append("" AND AD_Tree_ID="").append(getAD_Tree_ID());
		int no = DB.executeUpdate(sb.toString(), get_Trx());
		if (no > 0)
			log.fine(""#"" + no + "" - TreeType=CMS"");
		else
			log.warning(""#"" + no + "" - TreeType=CMS"");
		return no > 0;
	}	//	afterDelete
"
org.compiere.model.MCStage.validate,MCStage.java,"String validate()
	{
		return """";
	}	//	validate
"
org.compiere.model.MCStage.checkElements,MCStage.java,"boolean checkElements () {
		MTemplate thisTemplate = new MTemplate(getCtx(), this.getCM_Template_ID(), get_Trx());
		StringBuffer thisElementList = new StringBuffer(thisTemplate.getElements());
		while (thisElementList.indexOf(""\n"")>=0) {
			String thisElement = thisElementList.substring(0,thisElementList.indexOf(""\n""));
			thisElementList.delete(0,thisElementList.indexOf(""\n"")+1);
			if (thisElement!=null && !thisElement.equals(""""))
				checkElement(thisElement);
		}
		String thisElement = thisElementList.toString();
		if (thisElement!=null && !thisElement.equals(""""))
			checkElement(thisElement);
		return true;
	}
"
org.compiere.model.MCStage.getElementByName,MCStage.java,"MCStageElement getElementByName(String elementName) {
		return MCStageElement.getByName (getCtx(), get_ID(), elementName, get_Trx());
	}
"
org.compiere.model.MCStage.checkElement,MCStage.java,"void checkElement(String elementName) {
		MCStageElement thisElement = getElementByName(elementName);
		if (thisElement==null) {
			thisElement = new MCStageElement(getCtx(), 0, get_Trx());
			thisElement.setAD_Client_ID(getAD_Client_ID());
			thisElement.setAD_Org_ID(getAD_Org_ID());
			thisElement.setCM_CStage_ID(this.get_ID());
			thisElement.setContentHTML("" "");
			thisElement.setName(elementName);
			thisElement.save(get_Trx());
		}
	}
"
org.compiere.model.MCStage.checkTemplateTable,MCStage.java,"boolean checkTemplateTable () {
		int [] tableKeys = PO.getAllIDs(""CM_TemplateTable"", ""CM_Template_ID="" + this.getCM_Template_ID(), get_Trx());
		if (tableKeys!=null) {
			for (int element : tableKeys) {
				X_CM_TemplateTable thisTemplateTable = new X_CM_TemplateTable(getCtx(), element, get_Trx());
				int [] existingKeys = PO.getAllIDs(""CM_CStageTTable"", ""CM_TemplateTable_ID="" + thisTemplateTable.get_ID(), get_Trx());
				if (existingKeys==null || existingKeys.length==0) {
					X_CM_CStageTTable newCStageTTable = new X_CM_CStageTTable(getCtx(), 0, get_Trx());
					newCStageTTable.setAD_Client_ID(getAD_Client_ID());
					newCStageTTable.setAD_Org_ID(getAD_Org_ID());
					newCStageTTable.setCM_CStage_ID(get_ID());
					newCStageTTable.setCM_TemplateTable_ID(thisTemplateTable.get_ID());
					newCStageTTable.setDescription(thisTemplateTable.getDescription());
					newCStageTTable.setName(thisTemplateTable.getName());
					newCStageTTable.setOtherClause(thisTemplateTable.getOtherClause());
					newCStageTTable.setWhereClause(thisTemplateTable.getWhereClause());
					newCStageTTable.save();
				}
			}
		}
		return true;
	}
"
org.compiere.model.MWebProject.get,MWebProject.java,"MWebProject get (Ctx ctx, int CM_WebProject_ID)
	{
		Integer key = Integer.valueOf (CM_WebProject_ID);
		MWebProject retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MWebProject (ctx, CM_WebProject_ID, null);
		if (retValue.get_ID () == CM_WebProject_ID)
			s_cache.put (key, retValue);
		return retValue;
	} //	get
"
org.compiere.model.MWebProject.beforeSave,MWebProject.java,"boolean beforeSave (boolean newRecord)
	{
		//	Create Trees
		if (newRecord)
		{
			MTree tree = new MTree (getCtx(), 
				getName()+X_AD_Tree.TREETYPE_CMContainer, X_AD_Tree.TREETYPE_CMContainer, get_Trx());
			if (!tree.save())
				return false;
			setAD_TreeCMC_ID(tree.getAD_Tree_ID());
			//
			tree = new MTree (getCtx(), 
				getName()+X_AD_Tree.TREETYPE_CMContainerStage, X_AD_Tree.TREETYPE_CMContainerStage, get_Trx());
			if (!tree.save())
				return false;
			setAD_TreeCMS_ID(tree.getAD_Tree_ID());
			//
			tree = new MTree (getCtx(), 
				getName()+X_AD_Tree.TREETYPE_CMTemplate, X_AD_Tree.TREETYPE_CMTemplate, get_Trx());
			if (!tree.save())
				return false;
			setAD_TreeCMT_ID(tree.getAD_Tree_ID());
			//
			tree = new MTree (getCtx(), 
				getName()+X_AD_Tree.TREETYPE_CMMedia, X_AD_Tree.TREETYPE_CMMedia, get_Trx());
			if (!tree.save())
				return false;
			setAD_TreeCMM_ID(tree.getAD_Tree_ID());
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MWebProject.afterSave,MWebProject.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!success)
			return success;
		if (!newRecord)
		{
			// Clean Web Project Cache
		}
		return success;
	}	//	afterSave
"
org.compiere.model.MMovementLineConfirm.setMovementLine,MMovementLineConfirm.java,"void setMovementLine (MMovementLine line)
	{
		setM_MovementLine_ID(line.getM_MovementLine_ID());
		setTargetQty(line.getMovementQty());
		setConfirmedQty(getTargetQty());	//	suggestion
		m_line = line;
	}	//	setMovementLine
"
org.compiere.model.MMovementLineConfirm.getLine,MMovementLineConfirm.java,"MMovementLine getLine()
	{
		if (m_line == null)
			m_line = new MMovementLine (getCtx(), getM_MovementLine_ID(), get_Trx());
		return m_line;
	}	//	getLine
"
org.compiere.model.MMovementLineConfirm.processLine,MMovementLineConfirm.java,"boolean processLine ()
	{
		MMovementLine line = getLine();
		
		line.setTargetQty(getTargetQty());
		line.setMovementQty(getConfirmedQty());
		line.setConfirmedQty(getConfirmedQty());
		line.setScrappedQty(getScrappedQty());
		
		return line.save(get_Trx());
	}	//	processConfirmation
"
org.compiere.model.MMovementLineConfirm.isFullyConfirmed,MMovementLineConfirm.java,"boolean isFullyConfirmed()
	{
		return getTargetQty().compareTo(getConfirmedQty()) == 0;
	}	//	isFullyConfirmed
"
org.compiere.model.MMovementLineConfirm.beforeDelete,MMovementLineConfirm.java,"boolean beforeDelete ()
	{
		return false;
	}	//	beforeDelete
"
org.compiere.model.MMovementLineConfirm.beforeSave,MMovementLineConfirm.java,"boolean beforeSave (boolean newRecord)
	{
		//	Calculate Difference = Target - Confirmed - Scrapped
		BigDecimal difference = getTargetQty();
		difference = difference.subtract(getConfirmedQty());
		difference = difference.subtract(getScrappedQty());
		setDifferenceQty(difference);
		//
		return true;
	}	//	beforeSave
"
org.compiere.model.MChatType.get,MChatType.java,"MChatType get (Ctx ctx, int CM_ChatType_ID)
	{
		Integer key = Integer.valueOf (CM_ChatType_ID);
		MChatType retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MChatType (ctx, CM_ChatType_ID, null);
		if (retValue.get_ID () != CM_ChatType_ID)
			s_cache.put (key, retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MContainer.get,MContainer.java,"MContainer get(Ctx ctx, String relURL, int CM_WebProject_Id, Trx trx) {
		MContainer thisContainer = null;
		String sql = ""SELECT * FROM CM_Container WHERE (RelativeURL LIKE ? OR RelativeURL LIKE ?) AND CM_WebProject_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, trx);
			pstmt.setString (1,relURL);
			pstmt.setString (2,relURL+""/"");
			pstmt.setInt(3, CM_WebProject_Id);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				thisContainer = (new MContainer(ctx, rs, trx));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return thisContainer;
	}
"
org.compiere.model.MContainer.getByName,MContainer.java,"MContainer getByName(Ctx ctx, String Name, int CM_WebProject_Id, Trx trx) {
		MContainer thisContainer = null;
		String sql = ""SELECT * FROM CM_Container WHERE (Name LIKE ?) AND CM_WebProject_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, trx);
			pstmt.setString (1,Name);
			pstmt.setInt(2, CM_WebProject_Id);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				thisContainer = (new MContainer(ctx, rs, trx));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return thisContainer;
	}
"
org.compiere.model.MContainer.getByTitle,MContainer.java,"MContainer getByTitle(Ctx ctx, String Title, int CM_WebProject_Id, Trx trx) {
		MContainer thisContainer = null;
		String sql = ""SELECT * FROM CM_Container WHERE (Title LIKE ?) AND CM_WebProject_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, trx);
			pstmt.setString (1,Title);
			pstmt.setInt(2, CM_WebProject_Id);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				thisContainer = (new MContainer(ctx, rs, trx));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return thisContainer;
	}
"
org.compiere.model.MContainer.get,MContainer.java,"MContainer get(Ctx ctx, int CM_Container_ID, int CM_WebProject_Id, Trx trx) {
		MContainer thisContainer = null;
		String sql = ""SELECT * FROM CM_Container WHERE CM_Container_ID=? AND CM_WebProject_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, trx);
			pstmt.setInt(1, CM_Container_ID);
			pstmt.setInt(2, CM_WebProject_Id);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				thisContainer = (new MContainer(ctx, rs, trx));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return thisContainer;
	}
"
org.compiere.model.MContainer.deploy,MContainer.java,"MContainer deploy (MWebProject project, MCStage stage,
		String path)
	{
		MContainer cc = getDirect (stage.getCtx(), stage.getCM_CStage_ID (),
			stage.get_Trx ());
		if (cc == null) // new
			cc = new MContainer (stage.getCtx (), 0, stage.get_Trx ());
		cc.setStage (project, stage, path);
		cc.save ();
		if (!stage.isSummary ())
		{
			cc.updateElements (project, stage, stage.get_Trx ());
			cc.updateTTables (project, stage, stage.get_Trx ());
		}
		return cc;
	}	// copy
"
org.compiere.model.MContainer.getDirect,MContainer.java,"MContainer getDirect (Ctx ctx, int CM_Container_ID,
		Trx trx)
	{
		MContainer cc = null;
		PreparedStatement pstmt = null;
		String sql = ""SELECT * FROM CM_Container WHERE CM_Container_ID=?"";
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, CM_Container_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				cc = new MContainer (ctx, rs, trx);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return cc;
	} // getDirect
"
org.compiere.model.MContainer.getContainers,MContainer.java,"MContainer[] getContainers (MWebProject project)
	{
		ArrayList<MContainer> list = new ArrayList<MContainer> ();
		PreparedStatement pstmt = null;
		String sql = ""SELECT * FROM CM_Container WHERE CM_WebProject_ID=? ORDER BY CM_Container_ID"";
		try
		{
			pstmt = DB.prepareStatement (sql, project.get_Trx ());
			pstmt.setInt (1, project.getCM_WebProject_ID ());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				list.add (new MContainer (project.getCtx (), rs, project
					.get_Trx ()));
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MContainer[] retValue = new MContainer[list.size ()];
		list.toArray (retValue);
		return retValue;
	} // getContainers
"
org.compiere.model.MContainer.getWebProject,MContainer.java,"MWebProject getWebProject ()
	{
		if (m_project == null)
			m_project = MWebProject.get (getCtx (), getCM_WebProject_ID ());
		return m_project;
	} // getWebProject
"
org.compiere.model.MContainer.getTemplate,MContainer.java,"MTemplate getTemplate() 
	{
		if (getCM_Template_ID()>0 && m_template==null)
			m_template = MTemplate.get(getCtx(), getCM_Template_ID(), null);
		return m_template;
	} // getTemplate
"
org.compiere.model.MContainer.getAD_Tree_ID,MContainer.java,"int getAD_Tree_ID ()
	{
		return getWebProject ().getAD_TreeCMC_ID ();
	} // getAD_Tree_ID;
"
org.compiere.model.MContainer.setStage,MContainer.java,"void setStage (MWebProject project, MCStage stage, String path)
	{
		m_stage = stage;
		PO.copyValues (stage, this);
		setAD_Client_ID (project.getAD_Client_ID ());
		setAD_Org_ID (project.getAD_Org_ID ());
		setIsActive (stage.isActive ());
		setCM_ContainerLink_ID (stage.getCM_CStageLink_ID ());
		//
		setRelativeURL (path + stage.getRelativeURL ());
		//
		if (getMeta_Author () == null || getMeta_Author ().length () == 0)
			setMeta_Author (project.getMeta_Author ());
		if (getMeta_Content () == null || getMeta_Content ().length () == 0)
			setMeta_Content (project.getMeta_Content ());
		if (getMeta_Copyright () == null || getMeta_Copyright ().length () == 0)
			setMeta_Copyright (project.getMeta_Copyright ());
		if (getMeta_Publisher () == null || getMeta_Publisher ().length () == 0)
			setMeta_Publisher (project.getMeta_Publisher ());
		if (getMeta_RobotsTag () == null || getMeta_RobotsTag ().length () == 0)
			setMeta_RobotsTag (project.getMeta_RobotsTag ());
	} // setStage
"
org.compiere.model.MContainer.updateElements,MContainer.java,"void updateElements (MWebProject project, MCStage stage,
		Trx trx)
	{
		org.compiere.cm.CacheHandler thisHandler = new org.compiere.cm.CacheHandler (
			org.compiere.cm.CacheHandler.convertJNPURLToCacheURL (getCtx()
				.getContext(""java.naming.provider.url"")), log, getCtx (),
			get_Trx ());
		// First update the new ones...
		int[] tableKeys = PO.getAllIDs (""CM_CStage_Element"",
			""CM_CStage_ID="" + stage.get_ID (), trx);
		if (tableKeys != null && tableKeys.length > 0)
		{
			for (int element : tableKeys) {
				X_CM_CStage_Element thisStageElement = new X_CM_CStage_Element (
					project.getCtx (), element, trx);
				int[] thisContainerElementKeys = PO
					.getAllIDs (""CM_Container_Element"", ""CM_Container_ID=""
						+ stage.get_ID () + "" AND Name LIKE '""
						+ thisStageElement.getName () + ""'"", trx);
				X_CM_Container_Element thisContainerElement;
				if (thisContainerElementKeys != null
					&& thisContainerElementKeys.length > 0)
				{
					thisContainerElement = new X_CM_Container_Element (project
						.getCtx (), thisContainerElementKeys[0], trx);
				}
				else
				{
					thisContainerElement = new X_CM_Container_Element (project
						.getCtx (), 0, trx);
				}
				thisContainerElement.setCM_Container_ID (stage.get_ID ());
				X_CM_CStage_Element stageElement = new X_CM_CStage_Element (
					project.getCtx (), element, trx);
				thisContainerElement.setName (stageElement.getName ());
				thisContainerElement.setDescription (stageElement.getDescription());
				thisContainerElement.setHelp (stageElement.getHelp ());
				thisContainerElement.setIsActive (stageElement.isActive ());
				thisContainerElement.setIsValid (stageElement.isValid ());
				String contentHTML = thisStageElement.getContentHTML ();
				thisContainerElement.setContentHTML (contentHTML);
				// PO.copyValues(new
				// X_CM_CStage_Element(project.getCtx(),tableKeys[i],trx),
				// thisContainerElement);
				thisContainerElement.save (trx);
				// Remove Container from cache
				thisHandler.cleanContainerElement (thisContainerElement
					.get_ID ());
			}
		}
		// Now we are checking the existing ones to delete the unneeded ones...
		tableKeys = PO.getAllIDs (""CM_Container_Element"",
			""CM_Container_ID="" + stage.get_ID (), trx);
		if (tableKeys != null && tableKeys.length > 0)
		{
			for (int element : tableKeys) {
				X_CM_Container_Element thisContainerElement = new X_CM_Container_Element (
					project.getCtx (), element, trx);
				int[] thisCStageElementKeys = PO
					.getAllIDs (""CM_CStage_Element"", ""CM_CStage_ID=""
						+ stage.get_ID () + "" AND Name LIKE '""
						+ thisContainerElement.getName () + ""'"", trx);
				// If we cannot find a representative in the Stage we will delete from production
				if (thisCStageElementKeys == null
					|| thisCStageElementKeys.length < 1)
				{
					// First delete it from cache, then delete the record itself
					thisHandler.cleanContainerElement (thisContainerElement
						.get_ID ());
					thisContainerElement.delete (true);
				}
			}
		}
	}
"
org.compiere.model.MContainer.updateTTables,MContainer.java,"void updateTTables (MWebProject project, MCStage stage,
		Trx trx)
	{
		int[] tableKeys = PO.getAllIDs (""CM_CStageTTable"",
			""CM_CStage_ID="" + stage.get_ID (), trx);
		if (tableKeys != null && tableKeys.length > 0)
		{
			for (int element : tableKeys) {
				X_CM_CStageTTable thisStageTTable = new X_CM_CStageTTable (
					project.getCtx (), element, trx);
				int[] thisContainerTTableKeys = PO.getAllIDs (
					""CM_ContainerTTable"", ""CM_Container_ID="" + stage.get_ID ()
						+ "" AND CM_TemplateTable_ID=""
						+ thisStageTTable.getCM_TemplateTable_ID (), trx);
				X_CM_ContainerTTable thisContainerTTable;
				if (thisContainerTTableKeys != null
					&& thisContainerTTableKeys.length > 0)
				{
					thisContainerTTable = new X_CM_ContainerTTable (project
						.getCtx (), thisContainerTTableKeys[0], trx);
				}
				else
				{
					thisContainerTTable = new X_CM_ContainerTTable (project
						.getCtx (), 0, trx);
				}
				thisContainerTTable.setCM_Container_ID (stage.get_ID ());
				PO.copyValues (new X_CM_CStageTTable (project.getCtx (),
					element, trx), thisContainerTTable);
				thisContainerTTable.save (trx);
			}
		}
	}
"
org.compiere.model.MContainer.saveNew_getID,MContainer.java,"int saveNew_getID ()
	{
		if (m_stage != null)
			return m_stage.getCM_CStage_ID ();
		return 0;
	} // saveNew_getID
"
org.compiere.model.MContainer.toString,MContainer.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MContainer["").append (get_ID ())
			.append (""-"").append (getName ()).append (""]"");
		return sb.toString ();
	} // toString
"
org.compiere.model.MContainer.afterSave,MContainer.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!success)
			return success;
		if (newRecord)
		{
			StringBuffer sb = new StringBuffer (
				""INSERT INTO AD_TreeNodeCMC ""
					+ ""(AD_Client_ID,AD_Org_ID, IsActive,Created,CreatedBy,Updated,UpdatedBy, ""
					+ ""AD_Tree_ID, Node_ID, Parent_ID, SeqNo) "" + ""VALUES ("")
				.append (getAD_Client_ID ()).append (
					"",0, 'Y', SysDate, 0, SysDate, 0,"").append (
					getAD_Tree_ID ()).append ("","").append (get_ID ()).append (
					"", 0, 999)"");
			int no = DB.executeUpdate (sb.toString (), get_Trx ());
			if (no > 0)
				log.fine (""#"" + no + "" - TreeType=CMC"");
			else
				log.warning (""#"" + no + "" - TreeType=CMC"");
			return no > 0;
		}
		reIndex(newRecord);
		return success;
	} // afterSave
"
org.compiere.model.MContainer.getAllElements,MContainer.java,"MContainerElement[] getAllElements()
	{
		int elements[] = PO.getAllIDs(""CM_Container_Element"", ""CM_Container_ID="" + get_ID(), get_Trx());
		if (elements.length>0)
		{
			MContainerElement[] containerElements = new MContainerElement[elements.length];
			for (int i=0;i<elements.length;i++)
			{
				containerElements[i] = new MContainerElement(getCtx(), elements[i], get_Trx());
			}
			return containerElements;
		} else {
			return null;
		}
	}
"
org.compiere.model.MContainer.beforeDelete,MContainer.java,"boolean beforeDelete()
	{
		// Clean own index
		MIndex.cleanUp(get_Trx(), getAD_Client_ID(), get_Table_ID(), get_ID());
		// Clean ElementIndex
		MContainerElement[] theseElements = getAllElements();
		if (theseElements!=null)
		{
			for (MContainerElement element : theseElements) {
				element.delete(false);
			}
		}
		//
		StringBuffer sb = new StringBuffer (""DELETE FROM AD_TreeNodeCMC "")
			.append ("" WHERE Node_ID="").append (get_ID ()).append (
				"" AND AD_Tree_ID="").append (getAD_Tree_ID ());
		int no = DB.executeUpdate (sb.toString (), get_Trx ());
		if (no > 0)
			log.fine (""#"" + no + "" - TreeType=CMC"");
		else
			log.warning (""#"" + no + "" - TreeType=CMC"");
		return no > 0;
	}
"
org.compiere.model.MContainer.afterDelete,MContainer.java,"boolean afterDelete (boolean success)
	{
		if (!success)
			return success;
		//
		StringBuffer sb = new StringBuffer (""DELETE FROM AD_TreeNodeCMC "")
			.append ("" WHERE Node_ID="").append (get_IDOld ()).append (
				"" AND AD_Tree_ID="").append (getAD_Tree_ID ());
		int no = DB.executeUpdate (sb.toString (), get_Trx ());
		// If 0 than there is nothing to delete which is okay.
		if (no > 0)
			log.fine (""#"" + no + "" - TreeType=CMC"");
		else
			log.warning (""#"" + no + "" - TreeType=CMC"");
		return true;
	} // afterDelete
"
org.compiere.model.MContainer.reIndex,MContainer.java,"void reIndex(boolean newRecord)
	{
		if (isIndexed()) {
			String [] toBeIndexed = new String[8];
			toBeIndexed[0] = this.getName();
			toBeIndexed[1] = this.getDescription();
			toBeIndexed[2] = this.getRelativeURL();
			toBeIndexed[3] = this.getMeta_Author();
			toBeIndexed[4] = this.getMeta_Copyright();
			toBeIndexed[5] = this.getMeta_Description();
			toBeIndexed[6] = this.getMeta_Keywords();
			toBeIndexed[7] = this.getMeta_Publisher();
			MIndex.reIndex (newRecord, toBeIndexed, getCtx(), getAD_Client_ID(), get_Table_ID(), get_ID(), getCM_WebProject_ID(), this.getUpdated());
			MContainerElement[] theseElements = getAllElements();
			if (theseElements!=null)
				for (MContainerElement element : theseElements)
					element.reIndex (false);
		}
		if (!isIndexed() && !newRecord)
			MIndex.cleanUp (get_Trx(), getAD_Client_ID(), get_Table_ID(), get_ID());
	} // reIndex
"
org.compiere.model.MRfQResponseLine.getQtys,MRfQResponseLine.java,"MRfQResponseLineQty[] getQtys ()
	{
		return getQtys (false);
	}	//	getQtys
"
org.compiere.model.MRfQResponseLine.getQtys,MRfQResponseLine.java,"MRfQResponseLineQty[] getQtys (boolean requery)
	{
		if (m_qtys != null && !requery)
			return m_qtys;
		
		ArrayList<MRfQResponseLineQty> list = new ArrayList<MRfQResponseLineQty>();
		String sql = ""SELECT * FROM C_RfQResponseLineQty ""
			+ ""WHERE C_RfQResponseLine_ID=? AND IsActive='Y'"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getC_RfQResponseLine_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MRfQResponseLineQty(getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		m_qtys = new MRfQResponseLineQty[list.size ()];
		list.toArray (m_qtys);
		return m_qtys;
	}	//	getQtys
"
org.compiere.model.MRfQResponseLine.getRfQLine,MRfQResponseLine.java,"MRfQLine getRfQLine()
	{
		if (m_rfqLine == null)
			m_rfqLine = new MRfQLine(getCtx(), getC_RfQLine_ID(), get_Trx());
		return m_rfqLine;
	}	//	getRfQLine
"
org.compiere.model.MRfQResponseLine.toString,MRfQResponseLine.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MRfQResponseLine["");
		sb.append(get_ID()).append("",Winner="").append(isSelectedWinner())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MRfQResponseLine.beforeSave,MRfQResponseLine.java,"boolean beforeSave (boolean newRecord)
	{
		//	Calculate Complete Date (also used to verify)
		if (getDateWorkStart() != null && getDeliveryDays() != 0)
			setDateWorkComplete (TimeUtil.addDays(getDateWorkStart(), getDeliveryDays()));
		//	Calculate Delivery Days
		else if (getDateWorkStart() != null && getDeliveryDays() == 0 && getDateWorkComplete() != null)
			setDeliveryDays (TimeUtil.getDaysBetween(getDateWorkStart(), getDateWorkComplete()));
		//	Calculate Start Date
		else if (getDateWorkStart() == null && getDeliveryDays() != 0 && getDateWorkComplete() != null)
			setDateWorkStart (TimeUtil.addDays(getDateWorkComplete(), getDeliveryDays() * -1));

		if (!isActive())
			setIsSelectedWinner(false);
		return true;
	}	//	beforeSave
"
org.compiere.model.MRfQResponseLine.afterSave,MRfQResponseLine.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!isActive())
		{
			getQtys (false);
			for (MRfQResponseLineQty qty : m_qtys) {
				if (qty.isActive())
				{
					qty.setIsActive(false);
					qty.save();
				}
			}
		}
		return success;
	}	//	success
"
org.compiere.model.MGoalRestriction.toString,MGoalRestriction.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MGoalRestriction["");
		sb.append (get_ID()).append (""-"").append (getName()).append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MProductBOM.getBOMLines,MProductBOM.java,"MProductBOM[] getBOMLines (MProduct product)
	{
		return getBOMLines(product.getCtx(), product.getM_Product_ID(), product.get_Trx());
	}	//	getBOMLines
"
org.compiere.model.MProductBOM.getBOMLines,MProductBOM.java,"MProductBOM[] getBOMLines (Ctx ctx, int M_Product_ID, Trx trx)
	{
		String sql = ""SELECT * FROM M_Product_BOM WHERE M_Product_ID=? ORDER BY Line"";
		ArrayList<MProductBOM> list = new ArrayList<MProductBOM>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, trx);
			pstmt.setInt(1, M_Product_ID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MProductBOM (ctx, rs, trx));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
	//	s_log.fine(""getBOMLines - #"" + list.size() + "" - M_Product_ID="" + M_Product_ID);
		MProductBOM[] retValue = new MProductBOM[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getBOMLines
"
org.compiere.model.MProductBOM.getProduct,MProductBOM.java,"MProduct getProduct()
	{
		if (m_product == null && getM_ProductBOM_ID() != 0)
			m_product = MProduct.get (getCtx(), getM_ProductBOM_ID());
		return m_product;
	}	//	getProduct
"
org.compiere.model.MProductBOM.setM_ProductBOM_ID,MProductBOM.java,"void setM_ProductBOM_ID(int M_ProductBOM_ID)
	{
		super.setM_ProductBOM_ID (M_ProductBOM_ID);
		m_product = null;
	}	//	setM_ProductBOM_ID
"
org.compiere.model.MProductBOM.toString,MProductBOM.java,"String toString()
	{
		StringBuffer sb = new StringBuffer(""MProductBOM["");
		sb.append(get_ID()).append("",Line="").append(getLine())
			.append("",Type="").append(getBOMType()).append("",Qty="").append(getBOMQty());
		if (m_product == null)
			sb.append("",M_Product_ID="").append(getM_ProductBOM_ID());
		else
			sb.append("","").append(m_product);
		sb.append(""]"");
		return sb.toString();
	}	//	toString
"
org.compiere.model.MProductBOM.afterSave,MProductBOM.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		//	Product Line was changed
		if (newRecord || is_ValueChanged(""M_ProductBOM_ID""))
		{
			//	Invalidate BOM
			MProduct product = new MProduct (getCtx(), getM_Product_ID(), get_Trx());
			if (get_Trx() != null)
				product.load(get_Trx());
			if (product.isVerified())
			{
				product.setIsVerified(false);
				product.save(get_Trx());
			}
			//	Invalidate Products where BOM is used
			
		}
		return success;
	}	//	afterSave
"
org.compiere.model.MBPStatus.toString,MBPStatus.java,"String toString()
    {
	    StringBuffer sb = new StringBuffer(""MBPStatus["").append(get_ID())
	        .append(""-"").append(getName());
	    sb.append(""]"");
	    return sb.toString();
    }	//	toString
"
org.compiere.model.MCommissionAmt.getDetails,MCommissionAmt.java,"MCommissionDetail[] getDetails()
	{
		String sql = ""SELECT * FROM C_CommissionDetail WHERE C_CommissionAmt_ID=?"";
		ArrayList<MCommissionDetail> list = new ArrayList<MCommissionDetail>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getC_CommissionAmt_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MCommissionDetail(getCtx(), rs, get_Trx()));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e); 
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

		//	Convert
		MCommissionDetail[] retValue = new MCommissionDetail[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getDetails
"
org.compiere.model.MCommissionAmt.calculateCommission,MCommissionAmt.java,"void calculateCommission()
	{
		MCommissionDetail[] details = getDetails();
		BigDecimal ConvertedAmt = Env.ZERO;
		BigDecimal ActualQty = Env.ZERO;
		for (MCommissionDetail detail : details) {
			BigDecimal amt = detail.getConvertedAmt();
			if (amt == null)
				amt = Env.ZERO;
			ConvertedAmt = ConvertedAmt.add(amt);
			ActualQty = ActualQty.add(detail.getActualQty());
		}
		setConvertedAmt(ConvertedAmt);
		setActualQty(ActualQty);
		//
		MCommissionLine cl = new MCommissionLine(getCtx(), getC_CommissionLine_ID(), get_Trx());
		//	Qty
		BigDecimal qty = getActualQty().subtract(cl.getQtySubtract());
		if (cl.isPositiveOnly() && qty.signum() < 0)
			qty = Env.ZERO;
		qty = qty.multiply(cl.getQtyMultiplier());
		//	Amt
		BigDecimal amt = getConvertedAmt().subtract(cl.getAmtSubtract());
		if (cl.isPositiveOnly() && amt.signum() < 0)
			amt = Env.ZERO;
		amt = amt.multiply(cl.getAmtMultiplier());
		//
		setCommissionAmt(amt.add(qty));
	}	//	calculateCommission
"
org.compiere.model.MCommissionAmt.afterSave,MCommissionAmt.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!newRecord)
			updateRunHeader();
		return success;
	}	//	afterSave
"
org.compiere.model.MCommissionAmt.afterDelete,MCommissionAmt.java,"boolean afterDelete (boolean success)
	{
		if (success)
			updateRunHeader();
		return success;
	}	//	afterDelete
"
org.compiere.model.MCommissionAmt.updateRunHeader,MCommissionAmt.java,"void updateRunHeader()
	{
		MCommissionRun run = new MCommissionRun(getCtx(), getC_CommissionRun_ID(),get_Trx());
		run.updateFromAmt();
		run.save();
	}	//	updateRunHeader
"
org.compiere.model.MCommissionAmt.beforeDelete,MCommissionAmt.java,"boolean beforeDelete ()
	{
		//	Delete only if the Invoice is not generated
		
		MCommissionRun CommissionRun = new MCommissionRun (getCtx(), getC_CommissionRun_ID(),get_Trx());
		
		if(CommissionRun.getC_Invoice_ID()!=0)
		{
			//invoice exists, return false
			log.saveError(""CommissionRunNotDeleted"", Msg.translate(getCtx(),""""));
			return false;
		}

		return true;
	}	//	beforeDelete
"
org.compiere.model.MActivity.afterSave,MActivity.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!success)
			return success;
		//	Value/Name change
		if (!newRecord && (is_ValueChanged(""Value"") || is_ValueChanged(""Name"")))
			MAccount.updateValueDescription(getCtx(), ""C_Activity_ID="" + getC_Activity_ID(), get_Trx());
		return true;
	}	//	afterSave
"
org.compiere.model.MWikiToken.getPattern,MWikiToken.java,"Pattern getPattern()
	{
		if (pattern!=null)
			return pattern;
		pattern = Pattern.compile (getName());
		return pattern;
	}
"
org.compiere.model.MWikiToken.load,MWikiToken.java,"boolean load (Trx trx)
	{
		pattern = null;
		return super.load (trx);
	}
"
org.compiere.model.MWikiToken.getAllForPreload,MWikiToken.java,"MWikiToken[] getAllForPreload(Ctx ctx, Trx trx) 
	{
		ArrayList<MWikiToken> list = new ArrayList<MWikiToken>();
		String sql = ""SELECT * FROM CM_WikiToken WHERE Ad_Client_ID=0 AND IsActive='Y' ORDER By SeqNo"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, trx);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MWikiToken(ctx, rs, trx));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

		MWikiToken[] retValue = new MWikiToken[list.size()];
		list.toArray(retValue);
		return retValue;
	}
"
org.compiere.model.MWikiToken.processToken,MWikiToken.java,"StringBuffer processToken(StringBuffer source, int CM_WebProject_ID, String MediaPath)
	{
		if (getTokenType ().equals (X_CM_WikiToken.TOKENTYPE_Style)) {
			Matcher matcher = getPattern ().matcher (source);
			source = new StringBuffer(matcher.replaceAll (getMacro ()));
		} else if (getTokenType ().equals (X_CM_WikiToken.TOKENTYPE_SQLCommand)) {
			
		} else if (getTokenType ().equals (X_CM_WikiToken.TOKENTYPE_ExternalLink)) {
			Matcher matcher = getPattern ().matcher (source);
			source = new StringBuffer(matcher.replaceAll (getMacro ()));
		} else if (getTokenType ().equals (X_CM_WikiToken.TOKENTYPE_InternalLink)) {
			Matcher matcher = getPattern ().matcher (source);
			while(matcher.find ()) {
				if (matcher.group(1).equals (""Media:"")) 
				{
					String Name = matcher.group (2);
					MMedia thisMedia = MMedia.getByName (getCtx(), Name, CM_WebProject_ID, null);
					String replaceString = """";
					if (thisMedia != null)
					{
						if (matcher.groupCount ()>2)
							replaceString = ""<img src=\"""" + MediaPath + thisMedia.getFileName () + ""\"" alt=\"""" + matcher.group (3) + ""\""/>"";
					}
					source = new StringBuffer(matcher.replaceFirst (replaceString));
					matcher = getPattern ().matcher (source);
				} else {
					String link = matcher.group (1);
					MContainer thisContainer = MContainer.getByName (getCtx(), link, CM_WebProject_ID, null);
					if (thisContainer==null) 
						thisContainer = MContainer.getByTitle(getCtx(), link, CM_WebProject_ID, null);
					String replaceURL = ""/index.html"";
					if (thisContainer != null)
					{
						if (matcher.groupCount ()>1)
							replaceURL = ""<a href=\"""" + thisContainer.getRelativeURL () + ""\"">"" + matcher.group (2) + ""</a>"";
						else
							replaceURL = ""<a href=\"""" + thisContainer.getRelativeURL () + ""\"">"" + matcher.group (1) + ""</a>"";
					}
					source = new StringBuffer(matcher.replaceFirst (replaceURL));
					matcher = getPattern ().matcher (source);
				}
			}
			
		} 
		return source;
	}
"
org.compiere.model.MDataMigration.get,MDataMigration.java,"MDataMigration get(Ctx ctx, int AD_DataMigration_ID) 
	{
		Integer key = Integer.valueOf(AD_DataMigration_ID);
		MDataMigration retValue = s_cache.get(ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MDataMigration(ctx, AD_DataMigration_ID, null);
		if (retValue.get_ID() != 0)
			s_cache.put(key, retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MDataMigration.getWithEntityType,MDataMigration.java,"MDataMigration[] getWithEntityType (Ctx ctx, String entityType)
	{
		String sql = ""SELECT * FROM AD_DataMigration ""
			+ ""WHERE EntityType=? AND IsActive='Y'"";
		ArrayList<MDataMigration> list = new ArrayList<MDataMigration>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setString(1, entityType);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MDataMigration(ctx, rs, null));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MDataMigration[] retValue = new MDataMigration[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getWithEntityType
"
org.compiere.model.MDataMigration.getEntries,MDataMigration.java,"MDataMigrationEntry[] getEntries(boolean reload)
	{
		if (m_entries != null && !reload)
			return m_entries;
		String sql = ""SELECT * FROM AD_DataMigrationEntry ""
			+ ""WHERE AD_DataMigration_ID=? AND IsActive='Y' ""
			+ ""ORDER BY AD_Table_ID"";
		ArrayList<MDataMigrationEntry> list = new ArrayList<MDataMigrationEntry>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getAD_DataMigration_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MDataMigrationEntry(getCtx(), rs, get_Trx()));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		m_entries = new MDataMigrationEntry[list.size()];
		list.toArray(m_entries);
		return m_entries;
	}	//	getEntries
"
org.compiere.model.MDataMigration.getSecurityWhereClause,MDataMigration.java,"String getSecurityWhereClause()
	{
		StringBuffer where = new StringBuffer();
		String type = getDataMigrationType();
		int AD_Client_ID = getAD_Client_ID();
		int AD_ClientInclude_ID = getAD_ClientInclude_ID();
		if (DATAMIGRATIONTYPE_SystemOnly.equals(type))
			where.append(""AD_Client_ID=0"");
		else if (DATAMIGRATIONTYPE_SystemAndTenant.equals(type))
		{
			if (AD_Client_ID == AD_ClientInclude_ID)
				where.append(""AD_Client_ID="").append(AD_Client_ID);
			else
				where.append(""AD_Client_ID IN ("").append(AD_Client_ID)
					.append("","").append(AD_ClientInclude_ID).append("")"");
		}
		else	//	Client
		{
			if (AD_Client_ID > 0)
				where.append(""AD_Client_ID="").append(AD_Client_ID);
			else if (AD_ClientInclude_ID > 0)
				where.append(""AD_ClientInclude_ID="").append(AD_ClientInclude_ID);
			else
			{
				where.append(""AD_Client_ID="").append(AD_Client_ID);
				log.warning(""No Client ID"");
			}
		}
		
		if (where.length() > 0)
			where.insert(0, "" AND "");
		return where.toString();
	}	//	getSecurityWhereClause
"
org.compiere.model.MDataMigration.getClientList,MDataMigration.java,"ArrayList<Integer> getClientList()
	{
		ArrayList<Integer> retValue = new ArrayList<Integer>();
		String dmt = getDataMigrationType();
		if (DATAMIGRATIONTYPE_SystemOnly.equals(dmt)
			|| DATAMIGRATIONTYPE_SystemAndTenant.equals(dmt))
			retValue.add(0);
		if (DATAMIGRATIONTYPE_TenantOnly.equals(dmt)
			|| DATAMIGRATIONTYPE_SystemAndTenant.equals(dmt))
		{
			if (getAD_Client_ID() != 0)
				retValue.add(getAD_Client_ID());
			if (getAD_ClientInclude_ID() != 0
				&& getAD_ClientInclude_ID() != getAD_Client_ID())
				retValue.add(getAD_ClientInclude_ID());
		}
		return retValue;
	}	//	getClientList
"
org.compiere.model.MDataMigration.beforeSave,MDataMigration.java,"boolean beforeSave(boolean newRecord)
	{
		//	Temporary restrict to Tenant/System only
		int AD_Client_ID = getAD_Client_ID();
		String dmt = getDataMigrationType();
		if (AD_Client_ID == 0 && !DATAMIGRATIONTYPE_SystemOnly.equals(dmt))
			setDataMigrationType(DATAMIGRATIONTYPE_SystemOnly);
		if (AD_Client_ID != 0  && !DATAMIGRATIONTYPE_TenantOnly.equals(dmt))
			setDataMigrationType(DATAMIGRATIONTYPE_TenantOnly);
		
	    return true;
	}	//	beforeSave
"
org.compiere.model.MDataMigration.toString,MDataMigration.java,"String toString()
    {
	    StringBuffer sb = new StringBuffer(""MDataMigration["")
	    	.append(get_ID())
	        .append(""-"").append(getName());
	    sb.append(""]"");
	    return sb.toString();
    }	//	toString
"
org.compiere.model.MTimeExpenseLine.getQtyInvoiced,MTimeExpenseLine.java,"BigDecimal getQtyInvoiced ()
	{
		BigDecimal bd = super.getQtyInvoiced ();
		if (Env.ZERO.compareTo(bd) == 0)
			return getQty();
		return bd;
	}	//	getQtyInvoiced
"
org.compiere.model.MTimeExpenseLine.getQtyReimbursed,MTimeExpenseLine.java,"BigDecimal getQtyReimbursed ()
	{
		BigDecimal bd = super.getQtyReimbursed ();
		if (Env.ZERO.compareTo(bd) == 0)
			return getQty();
		return bd;
	}	//	getQtyReimbursed
"
org.compiere.model.MTimeExpenseLine.getPriceInvoiced,MTimeExpenseLine.java,"BigDecimal getPriceInvoiced ()
	{
		BigDecimal bd = super.getPriceInvoiced ();
		if (Env.ZERO.compareTo(bd) == 0)
			return getInvoicePrice();
		return bd;
	}	//	getPriceInvoiced
"
org.compiere.model.MTimeExpenseLine.getPriceReimbursed,MTimeExpenseLine.java,"BigDecimal getPriceReimbursed ()
	{
		BigDecimal bd = super.getPriceReimbursed ();
		if (Env.ZERO.compareTo(bd) == 0)
			return getConvertedAmt();
		return bd;
	}	//	getPriceReimbursed
"
org.compiere.model.MTimeExpenseLine.getApprovalAmt,MTimeExpenseLine.java,"BigDecimal getApprovalAmt()
	{
		return getQty().multiply(getConvertedAmt());
	}	//	getApprovalAmt
"
org.compiere.model.MTimeExpenseLine.getC_Currency_Report_ID,MTimeExpenseLine.java,"int getC_Currency_Report_ID()
	{
		if (m_C_Currency_Report_ID != 0)
			return m_C_Currency_Report_ID;
		//	Get it from header
		MTimeExpense te = new MTimeExpense (getCtx(), getS_TimeExpense_ID(), get_Trx());
		m_C_Currency_Report_ID = te.getC_Currency_ID();
		return m_C_Currency_Report_ID;
	}	//	getC_Currency_Report_ID
"
org.compiere.model.MTimeExpenseLine.setC_Currency_Report_ID,MTimeExpenseLine.java,"void setC_Currency_Report_ID (int C_Currency_ID)
	{
		m_C_Currency_Report_ID = C_Currency_ID;
	}	//	getC_Currency_Report_ID
"
org.compiere.model.MTimeExpenseLine.setS_ResourceAssignment_ID,MTimeExpenseLine.java,"void setS_ResourceAssignment_ID (String oldS_ResourceAssignment_ID, 
			String newS_ResourceAssignment_ID, int windowNo) throws Exception
	{
		if (newS_ResourceAssignment_ID == null || newS_ResourceAssignment_ID.length() == 0)
			return;
		int S_ResourceAssignment_ID = Integer.parseInt(newS_ResourceAssignment_ID);
		if (S_ResourceAssignment_ID == 0)
			return;
		//
		super.setS_ResourceAssignment_ID(S_ResourceAssignment_ID);

		int M_Product_ID = 0;
		String Name = null;
		String Description = null;
		BigDecimal Qty = null;
		String sql = ""SELECT p.M_Product_ID, ra.Name, ra.Description, ra.Qty ""
			+ ""FROM S_ResourceAssignment ra""
			+ "" INNER JOIN M_Product p ON (p.S_Resource_ID=ra.S_Resource_ID) ""
			+ ""WHERE ra.S_ResourceAssignment_ID=?"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, S_ResourceAssignment_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				M_Product_ID = rs.getInt (1);
				Name = rs.getString(2);
				Description = rs.getString(3);
				Qty = rs.getBigDecimal(4);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}

		log.fine(""S_ResourceAssignment_ID="" + S_ResourceAssignment_ID 
				+ "" - M_Product_ID="" + M_Product_ID);
		if (M_Product_ID != 0)
		{
			setM_Product_ID(M_Product_ID);
			if (Description != null)
				Name += "" ("" + Description + "")"";
			if (!""."".equals(Name))
				setDescription(Name);
			if (Qty != null)
				setQty(Qty);
		}
	}	//	setS_ResourceAssignment_ID
"
org.compiere.model.MTimeExpenseLine.setM_Product_ID,MTimeExpenseLine.java,"void setM_Product_ID (String oldM_Product_ID, 
			String newM_Product_ID, int windowNo) throws Exception
	{
		if (newM_Product_ID == null || newM_Product_ID.length() == 0)
			return;
		int M_Product_ID = Integer.parseInt(newM_Product_ID);
		super.setM_Product_ID(M_Product_ID);
		if (M_Product_ID == 0)
			return;
		
		//	Employee
		MTimeExpense hdr = new MTimeExpense(getCtx(), getS_TimeExpense_ID(), null);
		int C_BPartner_ID = hdr.getC_BPartner_ID();
		BigDecimal Qty = getQty();
		boolean IsSOTrx = true;
		MProductPricing pp = new MProductPricing (getAD_Client_ID(), getAD_Org_ID(),
				M_Product_ID, C_BPartner_ID, Qty, IsSOTrx);
		//
		int M_PriceList_ID = hdr.getM_PriceList_ID();
		pp.setM_PriceList_ID(M_PriceList_ID);
		Timestamp orderDate = getDateExpense();
		pp.setPriceDate(orderDate);
		//
		setExpenseAmt(pp.getPriceStd());
		setC_Currency_ID(pp.getC_Currency_ID());
		setAmt(windowNo, ""M_Product_ID"");
	}	//	setM_Product_ID
"
org.compiere.model.MTimeExpenseLine.setC_Currency_ID,MTimeExpenseLine.java,"void setC_Currency_ID (String oldC_Currency_ID, 
			String newC_Currency_ID, int windowNo) throws Exception
	{
		if (newC_Currency_ID == null || newC_Currency_ID.length() == 0)
			return;
		int C_Currency_ID = Integer.parseInt(newC_Currency_ID);
		super.setC_Currency_ID(C_Currency_ID);
		setAmt(windowNo, ""C_Currency_ID"");
	}	//	setC_Currency_ID
"
org.compiere.model.MTimeExpenseLine.setExpenseAmt,MTimeExpenseLine.java,"void setExpenseAmt (String oldExpenseAmt, 
			String newExpenseAmt, int windowNo) throws Exception
	{
		if (newExpenseAmt == null || newExpenseAmt.length() == 0)
			return;
		BigDecimal ExpenseAmt = new BigDecimal(newExpenseAmt);
		super.setExpenseAmt(ExpenseAmt);
		setAmt(windowNo, ""ExpenseAmt"");
	}	//	setExpenseAmt
"
org.compiere.model.MTimeExpenseLine.setAmt,MTimeExpenseLine.java,"void setAmt(int windowNo, String columnName)
	{
		//	get values
		BigDecimal ExpenseAmt = getExpenseAmt();
		int C_Currency_From_ID = getC_Currency_ID();
		int C_Currency_To_ID = getCtx().getContextAsInt(""$C_Currency_ID"");
		Timestamp DateExpense = getDateExpense();
		//
		log.fine(""Amt="" + ExpenseAmt + "", C_Currency_ID="" + C_Currency_From_ID);
		//	Converted Amount = Unit price
		BigDecimal ConvertedAmt = ExpenseAmt;
		//	convert if required
		if (ConvertedAmt.signum() != 0 && C_Currency_To_ID != C_Currency_From_ID)
		{
			ConvertedAmt = MConversionRate.convert (getCtx(),
				ConvertedAmt, C_Currency_From_ID, C_Currency_To_ID, 
				DateExpense, 0, getAD_Client_ID(), getAD_Org_ID());
		}
		setConvertedAmt(ConvertedAmt);
		log.fine(""ConvertedAmt="" + ConvertedAmt);
	}	//	setAmt
"
org.compiere.model.MTimeExpenseLine.beforeSave,MTimeExpenseLine.java,"boolean beforeSave (boolean newRecord)
	{
		//	Calculate Converted Amount
		if (newRecord || is_ValueChanged(""ExpenseAmt"") || is_ValueChanged(""C_Currency_ID""))
		{
			if (getC_Currency_ID() == getC_Currency_Report_ID())
				setConvertedAmt(getExpenseAmt());
			else
			{
				setConvertedAmt(MConversionRate.convert (getCtx(),
					getExpenseAmt(), getC_Currency_ID(), getC_Currency_Report_ID(), 
					getDateExpense(), 0, getAD_Client_ID(), getAD_Org_ID()) );
			}
		}
		if (isTimeReport())
		{
			setExpenseAmt(Env.ZERO);
			setConvertedAmt(Env.ZERO);
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MTimeExpenseLine.afterSave,MTimeExpenseLine.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (success)
		{
			updateHeader();
			if (newRecord || is_ValueChanged(""S_ResourceAssignment_ID""))
			{
				int S_ResourceAssignment_ID = getS_ResourceAssignment_ID();
				int old_S_ResourceAssignment_ID = 0;
				if (!newRecord)
				{
					Object ii = get_ValueOld(""S_ResourceAssignment_ID"");
					if (ii instanceof Integer)
					{
						old_S_ResourceAssignment_ID = ((Integer)ii).intValue();
						//	Changed Assignment
						if (old_S_ResourceAssignment_ID != S_ResourceAssignment_ID
							&& old_S_ResourceAssignment_ID != 0)
						{
							MResourceAssignment ra = new MResourceAssignment (getCtx(), 
								old_S_ResourceAssignment_ID, get_Trx());
							ra.delete(false);
						}
					}
				}
				//	Sync Assignment
				if (S_ResourceAssignment_ID != 0)
				{
					MResourceAssignment ra = new MResourceAssignment (getCtx(), 
						S_ResourceAssignment_ID, get_Trx());
					if (getQty().compareTo(ra.getQty()) != 0)
					{
						ra.setQty(getQty());
						if (getDescription() != null && getDescription().length() > 0)
							ra.setDescription(getDescription());
						ra.save();
					}
				}
			}
		}
		return success;
	}	//	afterSave
"
org.compiere.model.MTimeExpenseLine.afterDelete,MTimeExpenseLine.java,"boolean afterDelete (boolean success)
	{
		if (success)
		{
			updateHeader();
			//
			Object ii = get_ValueOld(""S_ResourceAssignment_ID"");
			if (ii instanceof Integer)
			{
				int old_S_ResourceAssignment_ID = ((Integer)ii).intValue();
				//	Deleted Assignment
				if (old_S_ResourceAssignment_ID != 0)
				{
					MResourceAssignment ra = new MResourceAssignment (getCtx(), 
						old_S_ResourceAssignment_ID, get_Trx());
					ra.delete(false);
				}
			}
		}
		return success;
	}	//	afterDelete
"
org.compiere.model.MTimeExpenseLine.updateHeader,MTimeExpenseLine.java,"void updateHeader()
	{
		String sql = ""UPDATE S_TimeExpense te""
			+ "" SET ApprovalAmt = ""
				+ ""(SELECT SUM(Qty*ConvertedAmt) FROM S_TimeExpenseLine tel ""
				+ ""WHERE te.S_TimeExpense_ID=tel.S_TimeExpense_ID) ""
			+ ""WHERE S_TimeExpense_ID="" + getS_TimeExpense_ID();
		DB.executeUpdate(sql, get_Trx());
		
		if (get_Trx() != null)
			get_Trx().commit();

	}	//	updateHeader
"
org.compiere.model.MMovementConfirm.create,MMovementConfirm.java,"MMovementConfirm create (MMovement move, boolean checkExisting)
	{
		if (checkExisting)
		{
			MMovementConfirm[] confirmations = move.getConfirmations(false);
			for (MMovementConfirm confirm : confirmations) {
				return confirm;
			}
		}

		MMovementConfirm confirm = new MMovementConfirm (move);
		confirm.save(move.get_Trx());
		MMovementLine[] moveLines = move.getLines(false);
		for (MMovementLine mLine : moveLines) {
			MMovementLineConfirm cLine = new MMovementLineConfirm (confirm);
			cLine.setMovementLine(mLine);
			cLine.save(move.get_Trx());
		}
		return confirm;
	}	//	MInOutConfirm
"
org.compiere.model.MMovementConfirm.getLines,MMovementConfirm.java,"MMovementLineConfirm[] getLines (boolean requery)
	{
		if ((m_lines != null) && !requery)
			return m_lines;
		String sql = ""SELECT * FROM M_MovementLineConfirm ""
			+ ""WHERE M_MovementConfirm_ID=?"";
		ArrayList<MMovementLineConfirm> list = new ArrayList<MMovementLineConfirm>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getM_MovementConfirm_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add(new MMovementLineConfirm(getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		m_lines = new MMovementLineConfirm[list.size ()];
		list.toArray (m_lines);
		return m_lines;
	}	//	getLines
"
org.compiere.model.MMovementConfirm.addDescription,MMovementConfirm.java,"void addDescription (String description)
	{
		String desc = getDescription();
		if (desc == null)
			setDescription(description);
		else
			setDescription(desc + "" | "" + description);
	}	//	addDescription
"
org.compiere.model.MMovementConfirm.setIsApproved,MMovementConfirm.java,"void setIsApproved (boolean IsApproved)
	{
		if (IsApproved && !isApproved())
		{
			int AD_User_ID = getCtx().getAD_User_ID();
			MUser user = MUser.get(getCtx(), AD_User_ID);
			String info = user.getName()
				+ "": ""
				+ Msg.translate(getCtx(), ""IsApproved"")
				+ "" - "" + new Timestamp(System.currentTimeMillis());
			addDescription(info);
		}
		super.setIsApproved (IsApproved);
	}	//	setIsApproved
"
org.compiere.model.MMovementConfirm.getDocumentInfo,MMovementConfirm.java,"String getDocumentInfo()
	{
		return Msg.getElement(getCtx(), ""M_MovementConfirm_ID"") + "" "" + getDocumentNo();
	}	//	getDocumentInfo
"
org.compiere.model.MMovementConfirm.createPDF,MMovementConfirm.java,"File createPDF ()
	{
		try
		{
			File temp = File.createTempFile(get_TableName()+get_ID()+""_"", "".pdf"");
			return createPDF (temp);
		}
		catch (Exception e)
		{
			log.severe(""Could not create PDF - "" + e.getMessage());
		}
		return null;
	}	//	getPDF
"
org.compiere.model.MMovementConfirm.createPDF,MMovementConfirm.java,"File createPDF (File file)
	{
	//	ReportEngine re = ReportEngine.get (getCtx(), ReportEngine.INVOICE, getC_Invoice_ID());
	//	if (re == null)
			return null;
	//	return re.getPDF(file);
	}	//	createPDF
"
org.compiere.model.MMovementConfirm.processIt,MMovementConfirm.java,"boolean processIt (String processAction)
	{
		m_processMsg = null;
		DocumentEngine engine = new DocumentEngine (this, getDocStatus());
		return engine.processIt (processAction, getDocAction());
	}	//	processIt
"
org.compiere.model.MMovementConfirm.unlockIt,MMovementConfirm.java,"boolean unlockIt()
	{
		log.info(""unlockIt - "" + toString());
		setProcessing(false);
		return true;
	}	//	unlockIt
"
org.compiere.model.MMovementConfirm.invalidateIt,MMovementConfirm.java,"boolean invalidateIt()
	{
		log.info(""invalidateIt - "" + toString());
		setDocAction(DOCACTION_Prepare);
		return true;
	}	//	invalidateIt
"
org.compiere.model.MMovementConfirm.prepareIt,MMovementConfirm.java,"String prepareIt()
	{
		log.info(toString());
		m_processMsg = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_BEFORE_PREPARE);
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;

		MMovementLineConfirm[] lines = getLines(true);
		if (lines.length == 0)
		{
			m_processMsg = ""@NoLines@"";
			return DocActionConstants.STATUS_Invalid;
		}

		//	Std Period open?
		m_processMsg = MPeriod.isOpen(this, lines, getUpdated(), MDocBaseType.DOCBASETYPE_MaterialMovement);
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;

		boolean difference = false;
		for (int i = 0; i < lines.length; i++)
		{
			if (!lines[i].isFullyConfirmed())
			{
				difference = true;
				break;
			}
		}
	//	setIsInDispute(difference);
		if (difference)
		{
			m_processMsg = ""@M_MovementLineConfirm_ID@ <> @IsFullyConfirmed@"";
			return DocActionConstants.STATUS_Invalid;
		}

		//	User Validation
		String valid = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_AFTER_COMPLETE);
		if (valid != null)
		{
			m_processMsg = valid;
			return DocActionConstants.STATUS_Invalid;
		}

		//
		m_justPrepared = true;
		if (!DOCACTION_Complete.equals(getDocAction()))
			setDocAction(DOCACTION_Complete);
		return DocActionConstants.STATUS_InProgress;
	}	//	prepareIt
"
org.compiere.model.MMovementConfirm.approveIt,MMovementConfirm.java,"boolean  approveIt()
	{
		log.info(""approveIt - "" + toString());
		setIsApproved(true);
		return true;
	}	//	approveIt
"
org.compiere.model.MMovementConfirm.rejectIt,MMovementConfirm.java,"boolean rejectIt()
	{
		log.info(""rejectIt - "" + toString());
		setIsApproved(false);
		return true;
	}	//	rejectIt
"
org.compiere.model.MMovementConfirm.completeIt,MMovementConfirm.java,"String completeIt()
	{
		//	Re-Check
		if (!m_justPrepared)
		{
			String status = prepareIt();
			if (!DocActionConstants.STATUS_InProgress.equals(status))
				return status;
		}
		//	Implicit Approval
		if (!isApproved())
			approveIt();
		log.info(toString());
		//
		MMovement move = new MMovement (getCtx(), getM_Movement_ID(), get_Trx());
		MMovementLineConfirm[] lines = getLines(m_justPrepared);
		for (MMovementLineConfirm confirm : lines)
		{
			confirm.set_Trx(get_Trx());
			if (!confirm.processLine ())
			{
				m_processMsg = ""ShipLine not saved - "" + confirm;
				return DocActionConstants.STATUS_Invalid;
			}
			if (confirm.isFullyConfirmed())
			{
				confirm.setProcessed(true);
				confirm.save(get_Trx());
			}
			else
			{
				if (createDifferenceDoc (move, confirm))
				{
					confirm.setProcessed(true);
					confirm.save(get_Trx());
				}
				else
				{
					log.log(Level.SEVERE, ""completeIt - Scrapped="" + confirm.getScrappedQty()
						+ "" - Difference="" + confirm.getDifferenceQty());

					m_processMsg = ""Differnce Doc not created"";
					return DocActionConstants.STATUS_Invalid;
				}
			}
		}	//	for all lines

		if (m_inventoryInfo != null)
		{
			m_processMsg = "" @M_Inventory_ID@: "" + m_inventoryInfo;
			addDescription(Msg.translate(getCtx(), ""M_Inventory_ID"")
				+ "": "" + m_inventoryInfo);
		}

		setProcessed(true);
		setDocAction(DOCACTION_Close);
		return DocActionConstants.STATUS_Completed;
	}	//	completeIt
"
org.compiere.model.MMovementConfirm.createDifferenceDoc,MMovementConfirm.java,"boolean createDifferenceDoc (MMovement move, MMovementLineConfirm confirm)
	{
		MMovementLine mLine = confirm.getLine();

		//	Difference - Create Inventory Difference for Source Location
		if (Env.ZERO.compareTo(confirm.getDifferenceQty()) != 0)
		{
			//	Get Warehouse for Source
			MLocator loc = MLocator.get(getCtx(), mLine.getM_Locator_ID());
			if ((m_inventoryFrom != null)
				&& (m_inventoryFrom.getM_Warehouse_ID() != loc.getM_Warehouse_ID()))
				m_inventoryFrom = null;

			if (m_inventoryFrom == null)
			{
				MWarehouse wh = MWarehouse.get(getCtx(), loc.getM_Warehouse_ID());
				m_inventoryFrom = new MInventory (wh);
				m_inventoryFrom.setDescription(Msg.translate(getCtx(), ""M_MovementConfirm_ID"") + "" "" + getDocumentNo());
				if (!m_inventoryFrom.save(get_Trx()))
				{
					m_processMsg += ""Inventory not created"";
					return false;
				}
				//	First Inventory
				if (getM_Inventory_ID() == 0)
				{
					setM_Inventory_ID(m_inventoryFrom.getM_Inventory_ID());
					m_inventoryInfo = m_inventoryFrom.getDocumentNo();
				}
				else
					m_inventoryInfo += "","" + m_inventoryFrom.getDocumentNo();
			}

			log.info(""createDifferenceDoc - Difference="" + confirm.getDifferenceQty());
			MInventoryLine line = new MInventoryLine (m_inventoryFrom,
					mLine.getM_Locator_ID(), mLine.getM_Product_ID(), mLine.getM_AttributeSetInstance_ID(),
					confirm.getDifferenceQty(), Env.ZERO);
			line.setDescription(Msg.translate(getCtx(), ""DifferenceQty""));
			if (!line.save(get_Trx()))
			{
				m_processMsg += ""Inventory Line not created"";
				return false;
			}
			confirm.setM_InventoryLine_ID(line.getM_InventoryLine_ID());
		}	//	Difference

		//	Scrapped - Create Inventory Difference for Target Location
		if (Env.ZERO.compareTo(confirm.getScrappedQty()) != 0)
		{
			//	Get Warehouse for Target
			MLocator loc = MLocator.get(getCtx(), mLine.getM_LocatorTo_ID());
			if ((m_inventoryTo != null)
				&& (m_inventoryTo.getM_Warehouse_ID() != loc.getM_Warehouse_ID()))
				m_inventoryTo = null;

			if (m_inventoryTo == null)
			{
				MWarehouse wh = MWarehouse.get(getCtx(), loc.getM_Warehouse_ID());
				m_inventoryTo = new MInventory (wh);
				m_inventoryTo.setDescription(Msg.translate(getCtx(), ""M_MovementConfirm_ID"") + "" "" + getDocumentNo());
				if (!m_inventoryTo.save(get_Trx()))
				{
					m_processMsg += ""Inventory not created"";
					return false;
				}
				//	First Inventory
				if (getM_Inventory_ID() == 0)
				{
					setM_Inventory_ID(m_inventoryTo.getM_Inventory_ID());
					m_inventoryInfo = m_inventoryTo.getDocumentNo();
				}
				else
					m_inventoryInfo += "","" + m_inventoryTo.getDocumentNo();
			}

			log.info(""createDifferenceDoc - Scrapped="" + confirm.getScrappedQty());
			MInventoryLine line = new MInventoryLine (m_inventoryTo,
				mLine.getM_LocatorTo_ID(), mLine.getM_Product_ID(), mLine.getM_AttributeSetInstance_ID(),
				confirm.getScrappedQty(), Env.ZERO);
			line.setDescription(Msg.translate(getCtx(), ""ScrappedQty""));
			if (!line.save(get_Trx()))
			{
				m_processMsg += ""Inventory Line not created"";
				return false;
			}
			confirm.setM_InventoryLine_ID(line.getM_InventoryLine_ID());
		}	//	Scrapped

		return true;
	}	//	createDifferenceDoc
"
org.compiere.model.MMovementConfirm.voidIt,MMovementConfirm.java,"boolean voidIt()
	{
		log.info(""voidIt - "" + toString());
		return false;
	}	//	voidIt
"
org.compiere.model.MMovementConfirm.closeIt,MMovementConfirm.java,"boolean closeIt()
	{
		log.info(""closeIt - "" + toString());

		//	Close Not delivered Qty
		setDocAction(DOCACTION_None);
		return true;
	}	//	closeIt
"
org.compiere.model.MMovementConfirm.reverseCorrectIt,MMovementConfirm.java,"boolean reverseCorrectIt()
	{
		log.info(""reverseCorrectIt - "" + toString());
		return false;
	}	//	reverseCorrectionIt
"
org.compiere.model.MMovementConfirm.reverseAccrualIt,MMovementConfirm.java,"boolean reverseAccrualIt()
	{
		log.info(""reverseAccrualIt - "" + toString());
		return false;
	}	//	reverseAccrualIt
"
org.compiere.model.MMovementConfirm.reActivateIt,MMovementConfirm.java,"boolean reActivateIt()
	{
		log.info(""reActivateIt - "" + toString());
		return false;
	}	//	reActivateIt
"
org.compiere.model.MMovementConfirm.getSummary,MMovementConfirm.java,"String getSummary()
	{
		StringBuffer sb = new StringBuffer();
		sb.append(getDocumentNo());
		//	: Total Lines = 123.00 (#1)
		sb.append("": "")
			.append(Msg.translate(getCtx(),""ApprovalAmt"")).append(""="").append(getApprovalAmt())
			.append("" (#"").append(getLines(false).length).append("")"");
		//	 - Description
		if ((getDescription() != null) && (getDescription().length() > 0))
			sb.append("" - "").append(getDescription());
		return sb.toString();
	}	//	getSummary
"
org.compiere.model.MMovementConfirm.getProcessMsg,MMovementConfirm.java,"String getProcessMsg()
	{
		return m_processMsg;
	}	//	getProcessMsg
"
org.compiere.model.MMovementConfirm.getDoc_User_ID,MMovementConfirm.java,"int getDoc_User_ID()
	{
		return getUpdatedBy();
	}	//	getDoc_User_ID
"
org.compiere.model.MMovementConfirm.getC_Currency_ID,MMovementConfirm.java,"int getC_Currency_ID()
	{
	//	MPriceList pl = MPriceList.get(getCtx(), getM_PriceList_ID());
	//	return pl.getC_Currency_ID();
		return 0;
	}	//	getC_Currency_ID
"
org.compiere.model.Loader.run,GridTab.java,"void run()
		{
			initTab (true);
		}   //  run
"
org.compiere.model.Loader.initTab,GridTab.java,"boolean initTab (boolean async)
	{
		log.fine(""#"" + m_vo.TabNo + "" - Async="" + async + "" - Where="" + m_vo.WhereClause);
		m_extendedWhere = m_vo.WhereClause;

		//	Get Field Data
		if (!loadFields())
		{
			return false;
		}

		//  Order By
		m_mTable.setOrderClause(getOrderByClause(m_vo.onlyCurrentDays));

		if (async)
			log.fine(""#"" + m_vo.TabNo + "" - Async="" + async + "" - fini"");
		return true;
	}	//	initTab
"
org.compiere.model.Loader.dispose,GridTab.java,"void dispose()
	{
		log.fine(""#"" + m_vo.TabNo);
		m_OrderBys = null;
		//
		m_parents.clear();
		m_parents = null;
		//
		m_mTable.close (true);  //  also disposes Fields
		m_mTable = null;
		//
		m_depOnField.clear();
		m_depOnField = null;
		if (m_Attachments != null)
			m_Attachments.clear();
		m_Attachments = null;
		if (m_Chats != null)
			m_Chats.clear();
		m_Chats = null;
		//
		m_vo.Fields.clear();
		m_vo.Fields = null;
		m_vo = null;
	}	//	dispose
"
org.compiere.model.Loader.loadFields,GridTab.java,"boolean loadFields()
	{
		log.fine(""#"" + m_vo.TabNo);

		if (m_vo.Fields == null)
			return false;

		//  Add Fields
		for (int f = 0; f < m_vo.Fields.size(); f++)
		{
			GridFieldVO voF = m_vo.Fields.get(f);
			//	Add Fields to Table
			if (voF != null)
			{
				GridField field = new GridField (voF);
				String columnName = field.getColumnName();
				//	Record Info
				if (field.isKey())
					m_keyColumnName = columnName;
				//	Parent Column(s)
				if (field.isParentColumn())
					m_parents.add(columnName);
				//	Order By
				int sortNo = field.getSortNo();
				if (sortNo == 0)
					;
				else if (Math.abs(sortNo) == 1)
				{
					m_OrderBys[0] = columnName;
					if (sortNo < 0)
						m_OrderBys[0] += "" DESC"";
				}
				else if (Math.abs(sortNo) == 2)
				{
					m_OrderBys[1] = columnName;
					if (sortNo < 0)
						m_OrderBys[1] += "" DESC"";
				}
				else if (Math.abs(sortNo) == 3)
				{
					m_OrderBys[2] = columnName;
					if (sortNo < 0)
						m_OrderBys[2] += "" DESC"";
				}
				//  Add field
				m_mTable.addField(field);

				//  List of ColumnNames, this field is dependent on
				ArrayList<String> list = field.getDependentOn();
				for (int i = 0; i < list.size(); i++)
					m_depOnField.put(list.get(i), field);   //  ColumnName, Field
				//  Add fields all fields are dependent on
				if (columnName.equals(""IsActive"")
					|| columnName.equals(""Processed"")
					|| columnName.equals(""Processing""))
					m_depOnField.put(columnName, null);
			}
		}   //  for all fields

		//  Add Standard Fields
		if (m_mTable.getField(""Created"") == null)
		{
			GridField created = new GridField (GridFieldVO.createStdField(m_vo.ctx,
				m_vo.WindowNo, m_vo.TabNo,
				m_vo.AD_Window_ID, m_vo.AD_Tab_ID, false, true, true));
			m_mTable.addField(created);
		}
		if (m_mTable.getField(""CreatedBy"") == null)
		{
			GridField createdBy = new GridField (GridFieldVO.createStdField(m_vo.ctx,
				m_vo.WindowNo, m_vo.TabNo,
				m_vo.AD_Window_ID, m_vo.AD_Tab_ID, false, true, false));
			m_mTable.addField(createdBy);
		}
		if (m_mTable.getField(""Updated"") == null)
		{
			GridField updated = new GridField (GridFieldVO.createStdField(m_vo.ctx,
				m_vo.WindowNo, m_vo.TabNo,
				m_vo.AD_Window_ID, m_vo.AD_Tab_ID, false, false, true));
			m_mTable.addField(updated);
		}
		if (m_mTable.getField(""UpdatedBy"") == null)
		{
			GridField updatedBy = new GridField (GridFieldVO.createStdField(m_vo.ctx,
				m_vo.WindowNo, m_vo.TabNo,
				m_vo.AD_Window_ID, m_vo.AD_Tab_ID, false, false, false));
			m_mTable.addField(updatedBy);
		}
		return true;
	}	//	loadFields
"
org.compiere.model.Loader.getDependentOn,GridTab.java,"ArrayList<String> getDependentOn()
	{
		ArrayList<String> list = new ArrayList<String>();
		//  Display
		Evaluator.parseDepends(list, m_vo.DisplayLogic);
		//
		if (list.size() > 0 && CLogMgt.isLevelFiner())
		{
			StringBuffer sb = new StringBuffer();
			for (int i = 0; i < list.size(); i++)
				sb.append(list.get(i)).append("" "");
			log.finer(""("" + m_vo.Name + "") "" + sb.toString());
		}
		return list;
	}   //  getDependentOn
"
org.compiere.model.Loader.getDisplayLogic,GridTab.java,"String getDisplayLogic()
	{
		return m_vo.DisplayLogic;
	}	//	getDisplayLogic
"
org.compiere.model.Loader.getTableModel,GridTab.java,"GridTable getTableModel()
	{
		return m_mTable;
	}   //  getTableModel
"
org.compiere.model.Loader.getIcon,GridTab.java,"javax.swing.Icon getIcon()
	{
		if (m_vo.AD_Image_ID == 0)
			return null;
		//
		/** @todo Load Image */
		return null;
	}   //  getIcon
"
org.compiere.model.Loader.hasDependants,GridTab.java,"boolean hasDependants (String columnName)
	{
	//	m_depOnField.printToLog();
		return m_depOnField.containsKey(columnName);
	}   //  isDependentOn
"
org.compiere.model.Loader.getDependantFields,GridTab.java,"ArrayList<GridField> getDependantFields (String columnName)
	{
		return m_depOnField.getValues(columnName);
	}   //  getDependentFields
"
org.compiere.model.Loader.setQuery,GridTab.java,"void setQuery(Query query)
	{
		if (query == null)
			m_query = new Query();
		else
		{
			m_query = query;
			m_vo.onlyCurrentDays = 0;
		}
	}	//	setQuery
"
org.compiere.model.Loader.getQuery,GridTab.java,"Query getQuery()
	{
		return m_query;
	}	//	getQuery
"
org.compiere.model.Loader.isQueryActive,GridTab.java,"boolean isQueryActive()
	{
		if (m_query != null)
			return m_query.isActive();
		return false;
	}	//	isQueryActive
"
org.compiere.model.Loader.isQueryNewRecord,GridTab.java,"boolean isQueryNewRecord()
	{
		if (m_query != null)
			return m_query.isNewRecordQuery();
		return false;
	}	//	isQueryNewRecord
"
org.compiere.model.Loader.enableEvents,GridTab.java,"void enableEvents()
	{
		//  Setup Events
		m_mTable.addDataStatusListener(this);
	//	m_mTable.addTableModelListener(this);
	}   //  enableEvents
"
org.compiere.model.Loader.query,GridTab.java,"void query (int onlyCurrentDays)
	{
		query (onlyCurrentDays, 0, false);	//	updated
	}	//	query
"
org.compiere.model.Loader.query,GridTab.java,"boolean query (int onlyCurrentDays, int maxRows, boolean created)
	{
		log.fine(""#"" + m_vo.TabNo
			+ "" - OnlyCurrentDays="" + onlyCurrentDays + "", Detail="" + isDetail());
		boolean success = true;
		//	is it same query?
		boolean refresh = m_oldQuery.equals(m_query.getWhereClause())
			&& m_vo.onlyCurrentDays == onlyCurrentDays
			&& oldCreated == created;
		m_oldQuery = m_query.getWhereClause();
		m_vo.onlyCurrentDays = onlyCurrentDays;
		oldCreated = created;

		/**
		 *	Set Where Clause
		 */
		//	Tab Where Clause
		StringBuffer where = new StringBuffer(m_vo.WhereClause);
		if (m_vo.onlyCurrentDays > 0)
		{
			if (where.length() > 0)
				where.append("" AND "");

			boolean showNotProcessed = findColumn (""Processed"") != -1;
			//	Show only unprocessed or the one updated within x days
			if (showNotProcessed)
				where.append(""(Processed='N' OR "");
			if (created)
				where.append(""Created>="");
			else
				where.append(""Updated>="");
		//	where.append(""addDays(current_timestamp, -"");
			where.append(""addDays(SysDate, -"")
				.append(m_vo.onlyCurrentDays).append("")"");
			if (showNotProcessed)
				where.append("")"");
		}
		//	Detail Query
		if (isDetail() && getTabNo() != 0)	//	first tab
		{
			String lc = getLinkColumnName();
			if (lc.equals(""""))
			{
				log.warning (""No link column"");
				if (where.length() > 0)
					where.append("" AND "");
				where.append ("" 2=3"");
				success = false;
			}
			else
			{
				String value = m_vo.ctx.getContext( m_vo.WindowNo, lc);
				//	Same link value?
				if (refresh)
					refresh = m_linkValue.equals(value);
				m_linkValue = value;
				//	Check validity
				if (value.length() == 0)
				{
					log.warning (""No value for link column "" + lc);
					if (where.length() > 0)
						where.append("" AND "");
					where.append ("" 2=4"");
					success = false;
				}
				else
				{
					//	we have column and value
					if (where.length() > 0)
						where.append("" AND "");
					if (""NULL"".equals(value.toUpperCase()))
					{
						where.append(lc).append("" IS NULL "");
						log.severe(""Null Value of link column "" + lc);
					}
					else
					{
						where.append(lc).append(""="");
						if (lc.endsWith(""_ID""))
							where.append(value);
						else
							where.append(""'"").append(value).append(""'"");
					}
				}
			}
		}	//	isDetail

		m_extendedWhere = where.toString();

		//	Final Query
		if (m_query.isActive())
		{
			String q = validateQuery(m_query);
			if (q != null)
			{
				if (where.length() > 0 )
					where.append("" AND "");
				where.append(q);
			}
		}

		/**
		 *	Query
		 */
		log.fine(""#"" + m_vo.TabNo + "" - "" + where);
		if (m_mTable.isOpen())
		{
			if (refresh)
				m_mTable.dataRefreshAll();
			else
				m_mTable.dataRequery(where.toString());
		}
		else
		{
			m_mTable.setSelectWhereClause(where.toString());
			m_mTable.open(maxRows);
		}
		//  Go to Record 0
		setCurrentRow(0, true);
		return success;
	}	//	query
"
org.compiere.model.Loader.validateQuery,GridTab.java,"String validateQuery (Query query)
	{
		if (query == null || query.getRestrictionCount() == 0)
			return null;

		//	Check: only one restriction
		if (query.getRestrictionCount() != 1)
		{
			log.fine(""Ignored(More than 1 Restriction): "" + query);
			return query.getWhereClause();
		}

		String colName = query.getColumnName(0);
		if (colName == null)
		{
			log.fine(""Ignored(No Column): "" + query);
			return query.getWhereClause();
		}
		//	a '(' in the name = function - don't try to resolve
		if (colName.indexOf('(') != -1)
		{
			log.fine(""Ignored(Function): "" + colName);
			return query.getWhereClause();
		}
		//	OK - Query is valid

		//	Zooms to the same Window (Parents, ..)
		String refColName = null;
		if (colName.equals(""R_RequestRelated_ID""))
			refColName = ""R_Request_ID"";
		else if (colName.startsWith(""C_DocType""))
			refColName = ""C_DocType_ID"";
		else if (colName.equals(""CreatedBy"") || colName.equals(""UpdatedBy""))
			refColName = ""AD_User_ID"";
		else if (colName.equals(""Orig_Order_ID""))
			refColName = ""C_Order_ID"";
		else if (colName.equals(""Orig_InOut_ID""))
			refColName = ""M_InOut_ID"";
		if (refColName != null)
		{
			query.setColumnName(0, refColName);
			if (getField(refColName) != null)
			{
				log.fine(""Column "" + colName + "" replaced with synonym "" + refColName);
				return query.getWhereClause();
			}
			refColName = null;
		}

		//	Simple Query.
		if (getField(colName) != null)
		{
			log.fine(""Field Found: "" + colName);
			return query.getWhereClause();
		}

		//	Find Refernce Column e.g. BillTo_ID -> C_BPartner_Location_ID
		String sql = ""SELECT cc.ColumnName ""
			+ ""FROM AD_Column c""
			+ "" INNER JOIN AD_Ref_Table r ON (c.AD_Reference_Value_ID=r.AD_Reference_ID)""
			+ "" INNER JOIN AD_Column cc ON (r.Column_Key_ID=cc.AD_Column_ID) ""
			+ ""WHERE c.AD_Reference_ID IN (18,30)"" 	//	Table/Search
			+ "" AND c.ColumnName=?"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setString(1, colName);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				refColName = rs.getString(1);
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, ""(ref) - Column="" + colName, e);
			return query.getWhereClause();
		}
		//	Reference Column found
		if (refColName != null)
		{
			query.setColumnName(0, refColName);
			if (getField(refColName) != null)
			{
				log.fine(""Column "" + colName + "" replaced with "" + refColName);
				return query.getWhereClause();
			}
			colName = refColName;
		}

		//	Column NOT in Tab - create EXISTS subquery
		String tableName = null;
		String tabKeyColumn = getKeyColumnName();
		//	Column=SalesRep_ID, Key=AD_User_ID, Query=SalesRep_ID=101

		sql = ""SELECT t.TableName ""
			+ ""FROM AD_Column c""
			+ "" INNER JOIN AD_Table t ON (c.AD_Table_ID=t.AD_Table_ID) ""
			+ ""WHERE c.ColumnName=? AND IsKey='Y'""		//	#1 Link Column
			+ "" AND EXISTS (SELECT * FROM AD_Column cc""
			+ "" WHERE cc.AD_Table_ID=t.AD_Table_ID AND cc.ColumnName=?)"";	//	#2 Tab Key Column
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setString(1, colName);
			pstmt.setString(2, tabKeyColumn);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				tableName = rs.getString(1);
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, ""Column="" + colName + "", Key="" + tabKeyColumn, e);
			return null;
		}

		//	Special Reference Handling
		if (tabKeyColumn.equals(""AD_Reference_ID""))
		{
			//	Column=AccessLevel, Key=AD_Reference_ID, Query=AccessLevel='6'
			sql = ""SELECT AD_Reference_ID FROM AD_Column WHERE ColumnName=?"";
			int AD_Reference_ID = DB.getSQLValue(null, sql, colName);
			return ""AD_Reference_ID="" + AD_Reference_ID;
		}

		//	Causes could be functions in query
		//	e.g. Column=UPPER(Name), Key=AD_Element_ID, Query=UPPER(AD_Element.Name) LIKE '%CUSTOMER%'
		if (tableName == null)
		{
			log.info (""Not successfull - Column=""
				+ colName + "", Key="" + tabKeyColumn
				+ "", Query="" + query);
			return query.getWhereClause();
		}

		query.setTableName(""xx"");
		StringBuffer result = new StringBuffer (""EXISTS (SELECT * FROM "")
			.append(tableName).append("" xx WHERE "")
			.append(query.getWhereClause(true))
			.append("" AND xx."").append(tabKeyColumn).append(""="")
			.append(getTableName()).append(""."").append(tabKeyColumn).append("")"");
		log.fine(result.toString());
		return result.toString();
	}	//	validateQuery
"
org.compiere.model.Loader.dataRefreshAll,GridTab.java,"void dataRefreshAll ()
	{
		log.fine(""#"" + m_vo.TabNo);
		/** @todo does not work with alpha key */
		int keyNo = m_mTable.getKeyID(m_currentRow);
		m_mTable.dataRefreshAll();
		//  Should use RowID - not working for tables with multiple keys
		if (keyNo != -1)
		{
			if (keyNo != m_mTable.getKeyID(m_currentRow))   //  something changed
			{
				int size = getRowCount();
				for (int i = 0; i < size; i++)
				{
					if (keyNo == m_mTable.getKeyID(i))
					{
						m_currentRow = i;
						break;
					}
				}
			}
		}
		setCurrentRow(m_currentRow, true);
	}   //  dataRefreshAll
"
org.compiere.model.Loader.dataRefresh,GridTab.java,"void dataRefresh ()
	{
		dataRefresh (m_currentRow);
	}   //  dataRefresh
"
org.compiere.model.Loader.dataRefresh,GridTab.java,"void dataRefresh (int row)
	{
		log.fine(""#"" + m_vo.TabNo + "" - row="" + row);
		m_mTable.dataRefresh(row);
		setCurrentRow(row, true);
	}   //  dataRefresh
"
org.compiere.model.Loader.dataSave,GridTab.java,"boolean dataSave(boolean manualCmd)
	{
		log.fine(""#"" + m_vo.TabNo + "" - row="" + m_currentRow);
		try
		{
			boolean retValue = (m_mTable.dataSave(manualCmd) == GridTable.SAVE_OK);
			if (manualCmd)
				setCurrentRow(m_currentRow, false);
			return retValue;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""#"" + m_vo.TabNo + "" - row="" + m_currentRow, e);
		}
		return false;
	}   //  dataSave
"
org.compiere.model.Loader.needSave,GridTab.java,"boolean needSave (boolean rowChange, boolean onlyRealChange)
	{
		if (rowChange)
		{
			return m_mTable.needSave(-2, onlyRealChange);
		}
		else
		{
			if (onlyRealChange)
				return m_mTable.needSave();
			else
				return m_mTable.needSave(onlyRealChange);
		}
	}   //  isDataChanged
"
org.compiere.model.Loader.dataIgnore,GridTab.java,"void dataIgnore()
	{
		log.fine(""#"" + m_vo.TabNo);
		m_mTable.dataIgnore();
		setCurrentRow(m_currentRow, false);    //  re-load data
		log.fine(""#"" + m_vo.TabNo + ""- fini"");
	}   //  dataIgnore
"
org.compiere.model.Loader.dataNew,GridTab.java,"boolean dataNew (boolean copy)
	{
		log.fine(""#"" + m_vo.TabNo);
		if (!isInsertRecord())
		{
			log.warning (""Insert Not allowed in TabNo="" + m_vo.TabNo);
			return false;
		}
		//	Prevent New Where Main Record is processed
		if (m_vo.TabNo > 0)
		{
			boolean processed = ""Y"".equals(m_vo.ctx.getContext( m_vo.WindowNo, ""Processed""));
		//	boolean active = ""Y"".equals(m_vo.ctx.getContext( m_vo.WindowNo, ""IsActive""));
			if (processed)
			{
				log.warning (""Not allowed in TabNo="" + m_vo.TabNo + "" -> Processed="" + processed);
				return false;
			}
			log.finest(""Processed="" + processed);
		}
		boolean retValue = m_mTable.dataNew (m_currentRow, copy);
		if (!retValue)
			return retValue;
		setCurrentRow(m_currentRow + 1, true);
		//  process all Callouts (no dependency check - assumed that settings are valid)
		for (int i = 0; i < getFieldCount(); i++)
			processCallout(getField(i));
		//  check validity of defaults
		for (int i = 0; i < getFieldCount(); i++)
		{
			getField(i).refreshLookup();
			getField(i).validateValue();
			getField(i).setError(false);
		}
		m_mTable.setChanged(false);
		return retValue;
	}   //  dataNew
"
org.compiere.model.Loader.dataDelete,GridTab.java,"boolean dataDelete()
	{
		log.fine(""#"" + m_vo.TabNo + "" - row="" + m_currentRow);
		boolean retValue = m_mTable.dataDelete(m_currentRow);
		setCurrentRow(m_currentRow, true);
		return retValue;
	}   //  dataDelete
"
org.compiere.model.Loader.getName,GridTab.java,"String getName()
	{
		return m_vo.Name;
	}	//	getName
"
org.compiere.model.Loader.getDescription,GridTab.java,"String getDescription()
	{
		return m_vo.Description;
	}	//	getDescription
"
org.compiere.model.Loader.getHelp,GridTab.java,"String getHelp()
	{
		return m_vo.Help;
	}	//	getHelp
"
org.compiere.model.Loader.getTabLevel,GridTab.java,"int getTabLevel()
	{
		return m_vo.TabLevel;
	}   //  getTabLevel
"
org.compiere.model.Loader.getCommitWarning,GridTab.java,"String getCommitWarning()
	{
		return m_vo.CommitWarning;
	}   //  getCommitWarning
"
org.compiere.model.Loader.getMTable,GridTab.java,"GridTable getMTable()
	{
		return m_mTable;
	}	//	getMTable
"
org.compiere.model.Loader.getKeyColumnName,GridTab.java,"String getKeyColumnName()
	{
		return m_keyColumnName;
	}	//	getKeyColumnName
"
org.compiere.model.Loader.getLinkColumnName,GridTab.java,"String getLinkColumnName()
	{
		return m_linkColumnName;
	}	//	getLinkColumnName
"
org.compiere.model.Loader.setLinkColumnName,GridTab.java,"void setLinkColumnName (String linkColumnName)
	{
		if (linkColumnName != null)
			m_linkColumnName = linkColumnName;
		else
		{
			if (m_vo.AD_Column_ID == 0)
				return;
			//	we have a link column identified (primary parent column)
			else
			{
				String SQL = ""SELECT ColumnName FROM AD_Column WHERE AD_Column_ID=?"";
				try
				{
					PreparedStatement pstmt = DB.prepareStatement(SQL, (Trx) null);
					pstmt.setInt(1, m_vo.AD_Column_ID);		//	Parent Link Column
					ResultSet rs = pstmt.executeQuery();
					if (rs.next())
						m_linkColumnName = rs.getString(1);
					rs.close();
					pstmt.close();
				}
				catch (SQLException e)
				{
					log.log(Level.SEVERE, """", e);
				}
				log.fine(""AD_Column_ID="" + m_vo.AD_Column_ID + "" - "" + m_linkColumnName);
			}
		}
		m_vo.ctx.setContext(m_vo.WindowNo, m_vo.TabNo, ""LinkColumnName"", m_linkColumnName);
	}	//	setLinkColumnName
"
org.compiere.model.Loader.isCurrent,GridTab.java,"boolean isCurrent()
	{
		//	Open?
		if (!m_mTable.isOpen())
			return false;
		//	Same Query
		if (!m_oldQuery.equals(m_query.getWhereClause()))
			return false;
		//	Detail?
		if (!isDetail())
			return true;
		//	Same link column value
		String value = m_vo.ctx.getContext( m_vo.WindowNo, getLinkColumnName());
		return m_linkValue.equals(value);
	}	//	isCurrent
"
org.compiere.model.Loader.isOpen,GridTab.java,"boolean isOpen()
	{
		//	Open?
		if (m_mTable != null)
			return m_mTable.isOpen();
		return false;
	}	//	isCurrent
"
org.compiere.model.Loader.isIncluded,GridTab.java,"boolean isIncluded()
	{
		return m_included;
	}   //  isIncluded
"
org.compiere.model.Loader.setIncluded,GridTab.java,"void setIncluded(boolean isIncluded)
	{
		m_included = isIncluded;
	}   //  setIncluded
"
org.compiere.model.Loader.getOnlyCurrentDays,GridTab.java,"int getOnlyCurrentDays()
	{
		return m_vo.onlyCurrentDays;
	}	//	getOnlyCurrentDays
"
org.compiere.model.Loader.getParentColumnNames,GridTab.java,"ArrayList<String> getParentColumnNames()
	{
		return m_parents;
	}	//	getParentColumnNames
"
org.compiere.model.Loader.isDetail,GridTab.java,"boolean isDetail()
	{
		//	We have IsParent columns and/or a link column
		if (m_parents.size() > 0 || m_vo.AD_Column_ID != 0)
			return true;
		return false;
	}	//	isDetail
"
org.compiere.model.Loader.isPrinted,GridTab.java,"boolean isPrinted()
	{
		return m_vo.AD_Process_ID != 0;
	}	//	isPrinted
"
org.compiere.model.Loader.getWindowNo,GridTab.java,"int getWindowNo()
	{
		return m_vo.WindowNo;
	}	//	getWindowNo
"
org.compiere.model.Loader.getTabNo,GridTab.java,"int getTabNo()
	{
		return m_vo.TabNo;
	}	//	getTabNo
"
org.compiere.model.Loader.getAD_Process_ID,GridTab.java,"int getAD_Process_ID()
	{
		return m_vo.AD_Process_ID;
	}	//	getAD_Process_ID
"
org.compiere.model.Loader.isHighVolume,GridTab.java,"boolean isHighVolume()
	{
		return m_vo.IsHighVolume;
	}	//	isHighVolume
"
org.compiere.model.Loader.isReadOnly,GridTab.java,"boolean isReadOnly()
	{
		if (m_vo.IsReadOnly)
			return true;

		//  no restrictions
		if (m_vo.ReadOnlyLogic == null || m_vo.ReadOnlyLogic.equals(""""))
			return m_vo.IsReadOnly;

		//  ** dynamic content **  uses get_ValueAsString
		boolean retValue = Evaluator.evaluateLogic(this, m_vo.ReadOnlyLogic);
		log.finest(m_vo.Name
			+ "" ("" + m_vo.ReadOnlyLogic + "") => "" + retValue);
		return retValue;
	}	//	isReadOnly
"
org.compiere.model.Loader.isAlwaysUpdateField,GridTab.java,"boolean isAlwaysUpdateField()
	{
		for (int i = 0; i < m_mTable.getColumnCount(); i++)
		{
			GridField field = m_mTable.getField(i);
			if (field.isAlwaysUpdateable())
				return true;
		}
		return false;
	}	//	isAlwaysUpdateField
"
org.compiere.model.Loader.isInsertRecord,GridTab.java,"boolean isInsertRecord()
	{
		if (isReadOnly())
			return false;
		return m_vo.IsInsertRecord;
	}	//	isInsertRecord
"
org.compiere.model.Loader.isDisplayed,GridTab.java,"boolean isDisplayed (boolean initialSetup)
	{
		//  no restrictions
		String dl = m_vo.DisplayLogic;
		if (dl == null || dl.equals(""""))
			return true;

		if (initialSetup)
		{
			if (dl.indexOf(""@#"") != -1)		//	global variable
			{
				String parsed = Env.parseContext (m_vo.ctx, 0, dl, false, false).trim();
				if (parsed.length() != 0)	//	variable defined
					return Evaluator.evaluateLogic(this, dl);
			}
			return true;
		}
		//
		boolean retValue = Evaluator.evaluateLogic(this, dl);
		log.config(m_vo.Name + "" ("" + dl + "") => "" + retValue);
		return retValue;
	}	//	isDisplayed
"
org.compiere.model.Loader.get_ValueAsString,GridTab.java,"String get_ValueAsString (String variableName)
	{
		return m_vo.ctx.getContext(m_vo.WindowNo, variableName, true);
	}	//	get_ValueAsString
"
org.compiere.model.Loader.isSingleRow,GridTab.java,"boolean isSingleRow()
	{
		return m_vo.IsSingleRow;
	}   //  isSingleRow;
"
org.compiere.model.Loader.setSingleRow,GridTab.java,"void setSingleRow (boolean isSingleRow)
	{
		m_vo.IsSingleRow = isSingleRow;
	}   //  setSingleRow
"
org.compiere.model.Loader.isTreeTab,GridTab.java,"boolean isTreeTab()
	{
		return m_vo.HasTree;
	}   //  isTreeTab
"
org.compiere.model.Loader.getAD_Tab_ID,GridTab.java,"int getAD_Tab_ID()
	{
		return m_vo.AD_Tab_ID;
	}	//	getAD_Tab_ID
"
org.compiere.model.Loader.getAD_Table_ID,GridTab.java,"int getAD_Table_ID()
	{
		return m_vo.AD_Table_ID;
	}	//	getAD_Table_ID
"
org.compiere.model.Loader.getAD_Window_ID,GridTab.java,"int getAD_Window_ID()
	{
		return m_vo.AD_Window_ID;
	}	//	getAD_Window_ID
"
org.compiere.model.Loader.getIncluded_Tab_ID,GridTab.java,"int getIncluded_Tab_ID()
	{
		return m_vo.Included_Tab_ID;
	}	//	getIncluded_Tab_ID
"
org.compiere.model.Loader.getTableName,GridTab.java,"String getTableName()
	{
		return m_vo.TableName;
	}	//	getTableName
"
org.compiere.model.Loader.getWhereClause,GridTab.java,"String getWhereClause()
	{
		return m_vo.WhereClause;
	}	//	getWhereClause
"
org.compiere.model.Loader.isSortTab,GridTab.java,"boolean isSortTab()
	{
		return m_vo.IsSortTab;
	}	//	isSortTab
"
org.compiere.model.Loader.getAD_ColumnSortOrder_ID,GridTab.java,"int getAD_ColumnSortOrder_ID()
	{
		return m_vo.AD_ColumnSortOrder_ID;
	}	//	getAD_ColumnSortOrder_ID
"
org.compiere.model.Loader.getAD_ColumnSortYesNo_ID,GridTab.java,"int getAD_ColumnSortYesNo_ID()
	{
		return m_vo.AD_ColumnSortYesNo_ID;
	}	//	getAD_ColumnSortYesNo_ID
"
org.compiere.model.Loader.getWhereExtended,GridTab.java,"String getWhereExtended()
	{
		return m_extendedWhere;
	}	//	getWhereExtended
"
org.compiere.model.Loader.getOrderByClause,GridTab.java,"String getOrderByClause(int onlyCurrentDays)
	{
		//	First Prio: Tab Order By
		if (m_vo.OrderByClause.length() > 0)
			return m_vo.OrderByClause;

		//	Second Prio: Fields (save it)
		m_vo.OrderByClause = """";
		for (int i = 0; i < 3; i++)
		{
			String order = m_OrderBys[i];
			if (order != null && order.length() > 0)
			{
				if (m_vo.OrderByClause.length() > 0)
					m_vo.OrderByClause += "","";
				m_vo.OrderByClause += order;
			}
		}
		if (m_vo.OrderByClause.length() > 0)
			return m_vo.OrderByClause;

		//	Third Prio: onlyCurrentRows
		m_vo.OrderByClause = ""Created"";
		if (onlyCurrentDays > 0)
			m_vo.OrderByClause += "" DESC"";
		return m_vo.OrderByClause;
	}	//	getOrderByClause
"
org.compiere.model.Loader.getTrxInfo,GridTab.java,"String getTrxInfo(String tableName, Ctx ctx, int windowNo, int tabNo)
	{
		//	InvoiceBatch
		if (tableName.startsWith(""C_InvoiceBatch""))
		{
			int Record_ID = ctx.getContextAsInt( windowNo, ""C_InvoiceBatch_ID"");
			log.fine(tableName + "" - "" + Record_ID);
			MessageFormat mf = null;
			try
			{
				mf = new MessageFormat(Msg.getMsg(Env.getAD_Language(ctx), ""InvoiceBatchSummary""));
			}
			catch (Exception e)
			{
				log.log(Level.SEVERE, ""InvoiceBatchSummary="" + Msg.getMsg(Env.getAD_Language(ctx), ""InvoiceBatchSummary""), e);
			}
			if (mf == null)
				return "" "";
			/**********************************************************************
			 *	** Message: ExpenseSummary **
			 *	{0} Line(s) {1,number,#,##0.00}  - Total: {2,number,#,##0.00}
			 *
			 *	{0} - Number of lines
			 *	{1} - Toral
			 *	{2} - Currency
			 */
			Object[] arguments = new Object[3];
			boolean filled = false;
			//
			String sql = ""SELECT COUNT(*), NVL(SUM(LineNetAmt),0), NVL(SUM(LineTotalAmt),0) ""
				+ ""FROM C_InvoiceBatchLine ""
				+ ""WHERE C_InvoiceBatch_ID=? AND IsActive='Y'"";
			//
			try
			{
				PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
				pstmt.setInt(1, Record_ID);
				ResultSet rs = pstmt.executeQuery();
				if (rs.next())
				{
					//	{0} - Number of lines
					Integer lines = Integer.valueOf(rs.getInt(1));
					arguments[0] = lines;
					//	{1} - Line net
					Double net = new Double(rs.getDouble(2));
					arguments[1] = net;
					//	{2} - Line net
					Double total = new Double(rs.getDouble(3));
					arguments[2] = total;
					filled = true;
				}
				rs.close();
				pstmt.close();
			}
			catch (SQLException e)
			{
				log.log(Level.SEVERE, tableName + ""\nSQL="" + sql, e);
			}
			if (filled)
				return mf.format (arguments);
			return "" "";
		}	//	InvoiceBatch

		//	Order || Invoice
		else if (tableName.startsWith(""C_Order"") || tableName.startsWith(""C_Invoice""))
		{
			int Record_ID;
			boolean isOrder = tableName.startsWith(""C_Order"");
			//
			StringBuffer sql = new StringBuffer(""SELECT COUNT(*) AS Lines,c.ISO_Code,o.TotalLines,o.GrandTotal,""
				+ ""currencyBase(o.GrandTotal,o.C_Currency_ID,o.DateAcct, o.AD_Client_ID,o.AD_Org_ID) AS ConvAmt "");
			if (isOrder)
			{
				Record_ID = ctx.getContextAsInt( windowNo, ""C_Order_ID"");
				sql.append(""FROM C_Order o""
					+ "" INNER JOIN C_Currency c ON (o.C_Currency_ID=c.C_Currency_ID)""
					+ "" INNER JOIN C_OrderLine l ON (o.C_Order_ID=l.C_Order_ID) ""
					+ ""WHERE o.C_Order_ID=? "");
			}
			else
			{
				Record_ID = ctx.getContextAsInt( windowNo, ""C_Invoice_ID"");
				sql.append(""FROM C_Invoice o""
					+ "" INNER JOIN C_Currency c ON (o.C_Currency_ID=c.C_Currency_ID)""
					+ "" INNER JOIN C_InvoiceLine l ON (o.C_Invoice_ID=l.C_Invoice_ID) ""
					+ ""WHERE o.C_Invoice_ID=? "");
			}
			sql.append(""GROUP BY o.C_Currency_ID, c.ISO_Code, o.TotalLines, o.GrandTotal, o.DateAcct, o.AD_Client_ID, o.AD_Org_ID"");

			log.fine(tableName + "" - "" + Record_ID);
			MessageFormat mf = null;
			MessageFormat mfMC = null;
			try
			{
				mf = new MessageFormat(Msg.getMsg(Env.getAD_Language(ctx), ""OrderSummary""));
				mfMC = new MessageFormat(Msg.getMsg(Env.getAD_Language(ctx), ""OrderSummaryMC""));
			}
			catch (Exception e)
			{
				log.log(Level.SEVERE, ""OrderSummary/MC"", e);
			}
			if (mf == null || mfMC == null)
				return "" "";
			/**********************************************************************
			 *	** Message: OrderSummary/MC **
			 *	{0} Line(s) - {1,number,#,##0.00} - Total: {3}{2,number,#,##0.00} = {5}{4,number,#,##0.00}
			 *	{0} Line(s) - {1,number,#,##0.00} - Total: {3}{2,number,#,##0.00}
			 *
			 *	{0} - Number of lines
			 *	{1} - Line toral
			 *	{2} - Grand total (including tax, etc.)
			 *	{3} - Source Currency
			 *	(4) - Grand total converted to local currency
			 *	{5} - Base Currency
			 */
			Object[] arguments = new Object[6];
			boolean filled = false;
			//
			try
			{
				PreparedStatement pstmt = DB.prepareStatement(sql.toString(), (Trx) null);
				pstmt.setInt(1, Record_ID);
				ResultSet rs = pstmt.executeQuery();
				if (rs.next())
				{
					//	{0} - Number of lines
					Integer lines = Integer.valueOf(rs.getInt(1));
					arguments[0] = lines;
					//	{1} - Line toral
					Double lineTotal = new Double(rs.getDouble(3));
					arguments[1] = lineTotal;
					//	{2} - Grand total (including tax, etc.)
					Double grandTotal = new Double(rs.getDouble(4));
					arguments[2] = grandTotal;
					//	{3} - Currency
					String currency = rs.getString(2);
					arguments[3] = currency;
					//	(4) - Grand total converted to Base
					Double grandBase = new Double(rs.getDouble(5));
					arguments[4] = grandBase;
					arguments[5] = ctx.getContext(""$CurrencyISO"");
					filled = true;
				}
				rs.close();
				pstmt.close();
			}
			catch (SQLException e)
			{
				log.log(Level.SEVERE, tableName + ""\nSQL="" + sql, e);
			}
			if (filled)
			{
				if (arguments[2].equals(arguments[4]))
					return mf.format (arguments);
				else
					return mfMC.format (arguments);
			}
			return "" "";
		}	//	Order || Invoice

		//	Expense Report
		else if (tableName.startsWith(""S_TimeExpense"") && tabNo == 0)
		{
			int Record_ID = ctx.getContextAsInt( windowNo, ""S_TimeExpense_ID"");
			log.fine(tableName + "" - "" + Record_ID);
			MessageFormat mf = null;
			try
			{
				mf = new MessageFormat(Msg.getMsg(Env.getAD_Language(ctx), ""ExpenseSummary""));
			}
			catch (Exception e)
			{
				log.log(Level.SEVERE, ""ExpenseSummary="" + Msg.getMsg(Env.getAD_Language(ctx), ""ExpenseSummary""), e);
			}
			if (mf == null)
				return "" "";
			/**********************************************************************
			 *	** Message: ExpenseSummary **
			 *	{0} Line(s) - Total: {1,number,#,##0.00} {2}
			 *
			 *	{0} - Number of lines
			 *	{1} - Toral
			 *	{2} - Currency
			 */
			Object[] arguments = new Object[3];
			boolean filled = false;
			//
			String SQL = ""SELECT COUNT(*) AS Lines, SUM(ConvertedAmt*Qty) ""
				+ ""FROM S_TimeExpenseLine ""
				+ ""WHERE S_TimeExpense_ID=?"";

			//
			try
			{
				PreparedStatement pstmt = DB.prepareStatement(SQL, (Trx) null);
				pstmt.setInt(1, Record_ID);
				ResultSet rs = pstmt.executeQuery();
				if (rs.next())
				{
					//	{0} - Number of lines
					Integer lines = Integer.valueOf(rs.getInt(1));
					arguments[0] = lines;
					//	{1} - Line toral
					Double total = new Double(rs.getDouble(2));
					arguments[1] = total;
					//	{3} - Currency
					arguments[2] = "" "";
					filled = true;
				}
				rs.close();
				pstmt.close();
			}
			catch (SQLException e)
			{
				log.log(Level.SEVERE, tableName + ""\nSQL="" + SQL, e);
			}
			if (filled)
				return mf.format (arguments);
			return "" "";
		}	//	S_TimeExpense


		//	Default - No Trx Info
		return null;
	}	//	getTrxInfo
"
org.compiere.model.Loader.loadAttachments,GridTab.java,"void loadAttachments()
	{
		log.fine(""#"" + m_vo.TabNo);
		if (!canHaveAttachment())
			return;

		String SQL = ""SELECT AD_Attachment_ID, Record_ID FROM AD_Attachment ""
			+ ""WHERE AD_Table_ID=?"";
		try
		{
			if (m_Attachments == null)
				m_Attachments = new HashMap<Integer,Integer>();
			else
				m_Attachments.clear();
			PreparedStatement pstmt = DB.prepareStatement(SQL, (Trx) null);
			pstmt.setInt(1, m_vo.AD_Table_ID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				Integer key = Integer.valueOf(rs.getInt(2));
				Integer value = Integer.valueOf(rs.getInt(1));
				m_Attachments.put(key, value);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, ""loadAttachments"", e);
		}
		log.config(""#"" + m_Attachments.size());
	}	//	loadAttachment
"
org.compiere.model.Loader.canHaveAttachment,GridTab.java,"boolean canHaveAttachment()
	{
		if (getKeyColumnName().endsWith(""_ID""))
			return true;
		return false;
	}   //	canHaveAttachment
"
org.compiere.model.Loader.hasAttachment,GridTab.java,"boolean hasAttachment()
	{
		if (m_Attachments == null)
			loadAttachments();
		if (m_Attachments == null || m_Attachments.isEmpty())
			return false;
		//
		Integer key = Integer.valueOf(m_mTable.getKeyID (m_currentRow));
		return m_Attachments.containsKey(key);
	}	//	hasAttachment
"
org.compiere.model.Loader.getAD_AttachmentID,GridTab.java,"int getAD_AttachmentID()
	{
		if (m_Attachments == null)
			loadAttachments();
		if (m_Attachments.isEmpty())
			return 0;
		//
		Integer key = Integer.valueOf(m_mTable.getKeyID (m_currentRow));
		Integer value = m_Attachments.get(key);
		if (value == null)
			return 0;
		else
			return value.intValue();
	}	//	getAttachmentID
"
org.compiere.model.Loader.loadChats,GridTab.java,"void loadChats()
	{
		log.fine(""#"" + m_vo.TabNo);
		if (!canHaveAttachment())
			return;

		String sql = ""SELECT CM_Chat_ID, Record_ID FROM CM_Chat ""
			+ ""WHERE AD_Table_ID=?"";
		try
		{
			if (m_Chats == null)
				m_Chats = new HashMap<Integer,Integer>();
			else
				m_Chats.clear();
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, m_vo.AD_Table_ID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				Integer key = Integer.valueOf(rs.getInt(2));	//	Record_ID
				Integer value = Integer.valueOf(rs.getInt(1));	//	CM_Chat_ID
				m_Chats.put(key, value);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		log.config(""#"" + m_Chats.size());
	}	//	loadChats
"
org.compiere.model.Loader.hasChat,GridTab.java,"boolean hasChat()
	{
		if (m_Chats == null)
			loadChats();
		if (m_Chats == null || m_Chats.isEmpty())
			return false;
		//
		Integer key = Integer.valueOf(m_mTable.getKeyID (m_currentRow));
		return m_Chats.containsKey(key);
	}	//	hasChat
"
org.compiere.model.Loader.getCM_ChatID,GridTab.java,"int getCM_ChatID()
	{
		if (m_Chats == null)
			loadChats();
		if (m_Chats.isEmpty())
			return 0;
		//
		Integer key = Integer.valueOf(m_mTable.getKeyID (m_currentRow));
		Integer value = m_Chats.get(key);
		if (value == null)
			return 0;
		else
			return value.intValue();
	}	//	getCM_ChatID
"
org.compiere.model.Loader.loadLocks,GridTab.java,"void loadLocks()
	{
		int AD_User_ID = Env.getCtx().getAD_User_ID();
		log.fine(""#"" + m_vo.TabNo + "" - AD_User_ID="" + AD_User_ID);
		if (!canHaveAttachment())
			return;

		String sql = ""SELECT Record_ID ""
			+ ""FROM AD_Private_Access ""
			+ ""WHERE AD_User_ID=? AND AD_Table_ID=? AND IsActive='Y' ""
			+ ""ORDER BY Record_ID"";
		try
		{
			if (m_Lock == null)
				m_Lock = new ArrayList<Integer>();
			else
				m_Lock.clear();
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, AD_User_ID);
			pstmt.setInt(2, m_vo.AD_Table_ID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				Integer key = Integer.valueOf(rs.getInt(1));
				m_Lock.add(key);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		log.fine(""#"" + m_Lock.size());
	}	//	loadLooks
"
org.compiere.model.Loader.isLocked,GridTab.java,"boolean isLocked()
	{
		if (!MRole.getDefault(m_vo.ctx, false).isPersonalLock())
			return false;
		if (m_Lock == null)
			loadLocks();
		if (m_Lock == null || m_Lock.isEmpty())
			return false;
		//
		Integer key = Integer.valueOf(m_mTable.getKeyID (m_currentRow));
		return m_Lock.contains(key);
	}	//	isLocked
"
org.compiere.model.Loader.lock,GridTab.java,"void lock (Ctx ctx, int Record_ID, boolean lock)
	{
		int AD_User_ID = ctx.getAD_User_ID();
		log.fine(""Lock="" + lock + "", AD_User_ID="" + AD_User_ID
			+ "", AD_Table_ID="" + m_vo.AD_Table_ID + "", Record_ID="" + Record_ID);
		MPrivateAccess access = MPrivateAccess.get (ctx, AD_User_ID, m_vo.AD_Table_ID, Record_ID);
		if (access == null)
			access = new MPrivateAccess (ctx, AD_User_ID, m_vo.AD_Table_ID, Record_ID);
		access.setIsActive(lock);
		access.save();
		//
		loadLocks();
	}	//	lock
"
org.compiere.model.Loader.dataStatusChanged,GridTab.java,"void dataStatusChanged (DataStatusEvent e)
	{
		log.fine(""#"" + m_vo.TabNo + "" - "" + e.toString());
		int oldCurrentRow = e.getCurrentRow();
		m_DataStatusEvent = e;          //  save it
		//  when sorted set current row to 0
		String msg = m_DataStatusEvent.getAD_Message();
		if (msg != null && msg.equals(""Sorted""))
			setCurrentRow(0, true);
		//  set current row
		m_DataStatusEvent.setCurrentRow(m_currentRow);
		//  Same row - update value
		if (oldCurrentRow == m_currentRow)
		{
			GridField field = m_mTable.getField(e.getChangedColumn());
			if (field != null)
			{
				Object value = m_mTable.getValueAt(m_currentRow, e.getChangedColumn());
				field.setValue(value, m_mTable.isInserting());
			}
		}
		else    //  Redistribute Info with current row info
			fireDataStatusChanged(m_DataStatusEvent);
	//	log.fine(""dataStatusChanged #"" + m_vo.TabNo + ""- fini"", e.toString());
	}	//	dataStatusChanged
"
org.compiere.model.Loader.fireDataStatusChanged,GridTab.java,"void fireDataStatusChanged (DataStatusEvent e)
	{
		DataStatusListener[] listeners = m_listenerList.getListeners(DataStatusListener.class);
		if (listeners.length == 0)
			return;
		log.fine(e.toString());
		//  WHO Info
		if (e.getCurrentRow() >= 0)
		{
			e.Created = (Timestamp)getValue(""Created"");
			e.CreatedBy = (Integer)getValue(""CreatedBy"");
			e.Updated = (Timestamp)getValue(""Updated"");
			e.UpdatedBy = (Integer)getValue(""UpdatedBy"");
			e.Record_ID = getValue(m_keyColumnName);
			//  Info
			StringBuffer info = new StringBuffer(getTableName());
			//  We have a key column
			if (m_keyColumnName != null && m_keyColumnName.length() > 0)
			{
				info.append("" - "")
					.append(m_keyColumnName).append(""="").append(e.Record_ID);
			}
			else    //  we have multiple parents
			{
				for (int i = 0; i < m_parents.size(); i++)
				{
					String keyCol = m_parents.get(i);
					info.append("" - "")
						.append(keyCol).append(""="").append(getValue(keyCol));
				}
			}
			e.Info = info.toString();
		}
		e.setInserting(m_mTable.isInserting());
		//  Distribute/fire it
        for (DataStatusListener element : listeners)
			element.dataStatusChanged(e);
	//	log.fine(""fini - "" + e.toString());
	}	//	fireDataStatusChanged
"
org.compiere.model.Loader.fireDataStatusEEvent,GridTab.java,"void fireDataStatusEEvent(String AD_Message, String info, boolean isError)
	{
		m_mTable.fireDataStatusEEvent(AD_Message, info, isError);
	}   //  fireDataStatusEvent
"
org.compiere.model.Loader.fireDataStatusEEvent,GridTab.java,"void fireDataStatusEEvent (ValueNamePair errorLog)
	{
		if (errorLog != null)
			m_mTable.fireDataStatusEEvent(errorLog);
	}   //  fireDataStatusEvent
"
org.compiere.model.Loader.getCurrentRow,GridTab.java,"int getCurrentRow()
	{
		if (m_currentRow != verifyRow(m_currentRow))
			setCurrentRow(m_mTable.getRowCount()-1, true);
		return m_currentRow;
	}   //  getCurrentRow
"
org.compiere.model.Loader.getRecord_ID,GridTab.java,"int getRecord_ID()
	{
		return m_mTable.getKeyID(m_currentRow);
	}   //  getRecord_ID
"
org.compiere.model.Loader.getKeyID,GridTab.java,"int getKeyID (int row)
	{
		return m_mTable.getKeyID (row);
	}   //  getCurrentKeyID
"
org.compiere.model.Loader.getAD_Client_ID,GridTab.java,"int getAD_Client_ID()
	{
		Object oo = getValue(""AD_Client_ID"");
		if (oo instanceof Integer)
			return (Integer)oo;
		return -1;
	}   //  getAD_Client_ID
"
org.compiere.model.Loader.navigate,GridTab.java,"int navigate (int targetRow)
	{
		//  nothing to do
		if (targetRow == m_currentRow)
			return m_currentRow;
		log.info (""Row="" + targetRow);

		//  Row range check
		int newRow = verifyRow(targetRow);

		//  Check, if we have old uncommitted data
		m_mTable.dataSave(newRow, false);

		//  new position
		int row =  setCurrentRow(newRow, true);
		return row;
	}   //  navigate
"
org.compiere.model.Loader.navigateRelative,GridTab.java,"int navigateRelative (int rowChange)
	{
		return navigate (m_currentRow + rowChange);
	}   //  navigateRelative
"
org.compiere.model.Loader.navigateCurrent,GridTab.java,"int navigateCurrent()
	{
		log.info(""Row="" + m_currentRow);
		return setCurrentRow(m_currentRow, true);
	}   //  navigateCurrent
"
org.compiere.model.Loader.verifyRow,GridTab.java,"int verifyRow (int targetRow)
	{
		int newRow = targetRow;
		//  Table Open?
		if (!m_mTable.isOpen())
		{
			log.severe (""Table not open"");
			return -1;
		}
		//  Row Count
		int rows = getRowCount();
		if (rows == 0)
		{
			log.fine(""No Rows"");
			return -1;
		}
		if (newRow >= rows)
		{
			newRow = rows-1;
			log.fine(""Set to max Row: "" + newRow);
		}
		else if (newRow < 0)
		{
			newRow = 0;
			log.fine(""Set to first Row"");
		}
		return newRow;
	}   //  verifyRow
"
org.compiere.model.Loader.setCurrentRow,GridTab.java,"int setCurrentRow (int newCurrentRow, boolean fireEvents)
	{
		int oldCurrentRow = m_currentRow;
		m_currentRow = verifyRow (newCurrentRow);
		log.fine(""Row="" + m_currentRow + "" - fire="" + fireEvents);

		//  Update Field Values
		int size = m_mTable.getColumnCount();
		for (int i = 0; i < size; i++)
		{
			GridField mField = m_mTable.getField(i);
			//  get Value from Table
			if (m_currentRow >= 0)
			{
				Object value = m_mTable.getValueAt(m_currentRow, i);
				mField.setValue(value, m_mTable.isInserting());

				// gwu: now always validated, not just when inserting
				mField.validateValue();
			}
			else
			{   //  no rows - set to a reasonable value - not updateable
//				Object value = null;
//				if (mField.isKey() || mField.isParent() || mField.getColumnName().equals(m_linkColumnName))
//					value = mField.getDefault();
				mField.setValue();
			}
		}

		if (!fireEvents)    //  prevents informing twice
			return m_currentRow;

		//  inform VTable/..    -> rowChanged
		m_propertyChangeSupport.firePropertyChange(PROPERTY, oldCurrentRow, m_currentRow);

		//  inform APanel/..    -> dataStatus with row updated
		if (m_DataStatusEvent == null)
			m_DataStatusEvent = new DataStatusEvent(this, getRowCount(),
				m_mTable.isInserting(),		//	changed
				Env.getCtx().isAutoCommit(m_vo.WindowNo), m_mTable.isInserting());
		//
		m_DataStatusEvent.setCurrentRow(m_currentRow);
		String status = m_DataStatusEvent.getAD_Message();
		if (status == null || status.length() == 0)
			 m_DataStatusEvent.setInfo(""NavigateOrUpdate"", null, false,false);
		fireDataStatusChanged(m_DataStatusEvent);
		return m_currentRow;
	}   //  setCurrentRow
"
org.compiere.model.Loader.getRowCount,GridTab.java,"int getRowCount()
	{
		int count = m_mTable.getRowCount();
		//  Wait a bit if currently loading
		if (count == 0 && m_mTable.isLoading())
		{
			try
			{
				Thread.sleep(100);      //  .1 sec
			}
			catch (InterruptedException e) {}
			count = m_mTable.getRowCount();
		}
		return count;
	}   //  getRowCount
"
org.compiere.model.Loader.getFieldCount,GridTab.java,"int getFieldCount()
	{
		return m_mTable.getColumnCount();
	}   //  getFieldCount
"
org.compiere.model.Loader.getField,GridTab.java,"GridField getField (int index)
	{
		return m_mTable.getField(index);
	}   //  getField
"
org.compiere.model.Loader.findColumn,GridTab.java,"int findColumn (String columnName)
	{
		return m_mTable.findColumn(columnName);
	}	//	findColumn
"
org.compiere.model.Loader.getField,GridTab.java,"GridField getField (String columnName)
	{
		return m_mTable.getField(columnName);
	}   //  getField
"
org.compiere.model.Loader.getFields,GridTab.java,"GridField[] getFields ()
	{
		return m_mTable.getFields();
	}   //  getField
"
org.compiere.model.Loader.setValue,GridTab.java,"String setValue (String columnName, Object value)
	{
		if (columnName == null)
			return ""NoColumn"";
		return setValue(m_mTable.getField(columnName), value);
	}   //  setValue
"
org.compiere.model.Loader.setValue,GridTab.java,"String setValue (GridField field, Object value)
	{
		if (field == null)
			return ""NoField"";

		log.fine(field.getColumnName() + ""="" + value + "" - Row="" + m_currentRow);

		int col = m_mTable.findColumn(field.getColumnName());
		m_mTable.setValueAt(value, m_currentRow, col, false);
		//
		return processFieldChange (field);
	}   //  setValue
"
org.compiere.model.Loader.isProcessed,GridTab.java,"boolean isProcessed()
	{
		int index = m_mTable.findColumn(""Processed"");
		if (index != -1)
		{
			Object oo = m_mTable.getValueAt(m_currentRow, index);
			if (oo instanceof String)
				return ""Y"".equals(oo);
			if (oo instanceof Boolean)
				return ((Boolean)oo).booleanValue();
		}
		return ""Y"".equals(m_vo.ctx.getContext( m_vo.WindowNo, ""Processed""));
	}	//	isProcessed
"
org.compiere.model.Loader.processFieldChange,GridTab.java,"String processFieldChange (GridField changedField)
	{
		processDependencies (changedField);
		return processCallout (changedField);
	}   //  processFieldChange
"
org.compiere.model.Loader.processDependencies,GridTab.java,"void processDependencies (GridField changedField)
	{
		String columnName = changedField.getColumnName();
	//	log.trace(log.l4_Data, ""Changed Column"", columnName);

		//  when column name is not in list of DependentOn fields - fini
		if (!hasDependants(columnName))
			return;

		//  Get dependent MFields (may be because of display or dynamic lookup)
		ArrayList<GridField> list = getDependantFields(columnName);
		for (int i = 0; i < list.size(); i++)
		{
			GridField dependentField = list.get(i);
		//	log.trace(log.l5_DData, ""Dependent Field"", dependentField==null ? ""null"" : dependentField.getColumnName());
			//  if the field has a lookup
			if (dependentField != null && dependentField.getLookup() instanceof MLookup)
			{
				MLookup mLookup = (MLookup)dependentField.getLookup();
			//	log.trace(log.l6_Database, ""Lookup Validation"", mLookup.getValidation());
				//  if the lookup is dynamic (i.e. contains this columnName as variable)
				if (mLookup.getValidation().indexOf(""@""+columnName+""@"") != -1)
				{
					log.fine(columnName + "" changed - ""
						+ dependentField.getColumnName() + "" set to null"");
					//  invalidate current selection
					setValue(dependentField, null);
				}
			}
			if (dependentField != null && dependentField.getLookup() instanceof MLocatorLookup)
			{
				// gwu: invalidate currently selected locator if any dependent fields changed
				MLocatorLookup locLookup = (MLocatorLookup) dependentField.getLookup();
				int valueAsInt = 0;
				if( changedField.getValue() != null && changedField.getValue() instanceof Number )
					valueAsInt = ((Number) changedField.getValue()).intValue();
				if( columnName.equals( ""M_Warehouse_ID"" ) )
				{
					locLookup.setOnly_Warehouse_ID( valueAsInt );
				}
				if( columnName.equals( ""M_Product_ID"" ) )
				{
					locLookup.setOnly_Product_ID( valueAsInt );
				}
				locLookup.setOnly_Outgoing(Env.getCtx().isSOTrx(m_vo.WindowNo ));
				locLookup.refresh();
				if( !locLookup.isValid( dependentField.getValue() ) )
					setValue(dependentField, null);
			}
		}   //  for all dependent fields
	}   //  processDependencies
"
org.compiere.model.Loader.processCallout,GridTab.java,"String processCallout (GridField field)
	{
		String callout = field.getCallout();
		if (callout.length() == 0)
			return """";
		//
		if (isProcessed())		//	only active records
			return """";			//	""DocProcessed"";

		Object value = field.getValue();
		Object oldValue = field.getOldValue();
		log.fine(field.getColumnName() + ""="" + value
			+ "" ("" + callout + "") - old="" + oldValue);

		StringTokenizer st = new StringTokenizer(callout, "";,"", false);
		while (st.hasMoreTokens())      //  for each callout
		{
			String cmd = st.nextToken().trim();
			Callout call = null;
			String method = null;
			int methodStart = cmd.lastIndexOf(""."");
			try
			{
				if (methodStart != -1)      //  no class
				{
					Class<?> cClass = Class.forName(cmd.substring(0,methodStart));
					call = (Callout)cClass.newInstance();
					method = cmd.substring(methodStart+1);
				}
			}
			catch (Exception e)
			{
				log.log(Level.SEVERE, ""class"", e);
				return ""Callout Invalid: "" + cmd + "" ("" + e.toString() + "")"";
			}

			if (call == null || method == null || method.length() == 0)
				return ""Callout Invalid: "" + method;

			String retValue = """";
			try
			{
				retValue = call.start(m_vo.ctx, method, m_vo.WindowNo, this, field, value, oldValue);
			}
			catch (Exception e)
			{
				log.log(Level.SEVERE, ""start"", e);
				retValue = 	""Callout Invalid: "" + e.toString();
				return retValue;
			}
			if (!retValue.equals(""""))		//	interrupt on first error
			{
				log.warning (retValue);
				return retValue;
			}
		}   //  for each callout
		return """";
	}	//	processCallout
"
org.compiere.model.Loader.getValue,GridTab.java,"Object getValue (String columnName)
	{
		if (columnName == null)
			return null;
		GridField field = m_mTable.getField(columnName);
		return getValue(field);
	}   //  getValue
"
org.compiere.model.Loader.getValue,GridTab.java,"Object getValue (GridField field)
	{
		if (field == null)
			return null;
		return field.getValue();
	}   //  getValue
"
org.compiere.model.Loader.getValue,GridTab.java,"Object getValue (int row, String columnName)
	{
		int col = m_mTable.findColumn(columnName);
		if (col == -1)
			return null;
		return m_mTable.getValueAt(row, col);
	}   //  getValue
"
org.compiere.model.Loader.toString,GridTab.java,"String toString()
	{
		String retValue = ""MTab #"" + m_vo.TabNo;
		if (m_vo != null)
		{
			retValue += "" "" + m_vo.Name + "" ("" + m_vo.AD_Tab_ID
				+ "") QueryActive="" + (m_query != null && m_query.isActive())
				+ "", CurrentDays="" + m_vo.onlyCurrentDays;
		}
		return retValue;
	}   //  toString
"
org.compiere.model.Loader.removePropertyChangeListener,GridTab.java,"void removePropertyChangeListener(PropertyChangeListener l)
	{
		m_propertyChangeSupport.removePropertyChangeListener(l);
	}
"
org.compiere.model.Loader.addPropertyChangeListener,GridTab.java,"void addPropertyChangeListener(PropertyChangeListener l)
	{
		m_propertyChangeSupport.addPropertyChangeListener(l);
	}
"
org.compiere.model.Loader.removeDataStatusListener,GridTab.java,"void removeDataStatusListener(DataStatusListener l)
	{
		m_listenerList.remove(DataStatusListener.class, l);
	}
"
org.compiere.model.Loader.addDataStatusListener,GridTab.java,"void addDataStatusListener(DataStatusListener l)
	{
		m_listenerList.add(DataStatusListener.class, l);
	}
"
org.compiere.model.MOrder.copyFrom,MOrder.java,"MOrder copyFrom (MOrder from, Timestamp dateDoc,
			int C_DocTypeTarget_ID,
			boolean counter, boolean copyASI, Trx trx)
	{
		MOrder to = new MOrder (from.getCtx(), 0, trx);
		to.set_Trx(trx);
		PO.copyValues(from, to, from.getAD_Client_ID(), from.getAD_Org_ID());
		to.set_ValueNoCheck (""C_Order_ID"", I_ZERO);
		to.set_ValueNoCheck (""DocumentNo"", null);
		//
		to.setDocStatus (DOCSTATUS_Drafted);		//	Draft
		to.setDocAction(DOCACTION_Complete);
		//
		to.setC_DocType_ID(0);
		to.setC_DocTypeTarget_ID (C_DocTypeTarget_ID, true);
		//
		to.setIsSelected (false);
		to.setDateOrdered (dateDoc);
		to.setDateAcct (dateDoc);
		to.setDatePromised (dateDoc);	//	assumption
		to.setDatePrinted(null);
		to.setIsPrinted (false);
		//
		to.setIsApproved (false);
		to.setIsCreditApproved(false);
		to.setC_Payment_ID(0);
		to.setC_CashLine_ID(0);
		//	Amounts are updated  when adding lines
		to.setGrandTotal(Env.ZERO);
		to.setTotalLines(Env.ZERO);
		//
		to.setIsDelivered(false);
		to.setIsInvoiced(false);
		to.setIsSelfService(false);
		to.setIsTransferred (false);
		to.setPosted (false);
		to.setProcessed (false);
		if (counter)
			to.setRef_Order_ID(from.getC_Order_ID());
		else
			to.setRef_Order_ID(0);
		//
		if (!to.save(trx))
			throw new IllegalStateException(""Could not create Order"");
		if (counter)
			from.setRef_Order_ID(to.getC_Order_ID());

		if (to.copyLinesFrom(from, counter, copyASI) == 0)
			throw new IllegalStateException(""Could not create Order Lines"");

		return to;
	}	//	copyFrom
"
org.compiere.model.MOrder.setClientOrg,MOrder.java,"void setClientOrg (int AD_Client_ID, int AD_Org_ID)
	{
		super.setClientOrg(AD_Client_ID, AD_Org_ID);
	}	//	setClientOrg
"
org.compiere.model.MOrder.addDescription,MOrder.java,"void addDescription (String description)
	{
		String desc = getDescription();
		if (desc == null)
			setDescription(description);
		else
			setDescription(desc + "" | "" + description);
	}	//	addDescription
"
org.compiere.model.MOrder.setC_BPartner_ID,MOrder.java,"void setC_BPartner_ID (int C_BPartner_ID)
	{
		super.setC_BPartner_ID (C_BPartner_ID);
		super.setBill_BPartner_ID (C_BPartner_ID);
	}	//	setC_BPartner_ID
"
org.compiere.model.MOrder.setBPartner,MOrder.java,"void setBPartner (MBPartner bp)
	{
		if ((bp == null) || !bp.isActive())
			return;

		setC_BPartner_ID(bp.getC_BPartner_ID());
		//	Defaults Payment Term
		int ii = 0;
		if (isSOTrx())
			ii = bp.getC_PaymentTerm_ID();
		else
			ii = bp.getPO_PaymentTerm_ID();
		if (ii != 0)
			setC_PaymentTerm_ID(ii);
		//	Default Price List
		if (isSOTrx())
			ii = bp.getM_PriceList_ID();
		else
			ii = bp.getPO_PriceList_ID();
		if (ii != 0)
			setM_PriceList_ID(ii);
		//	Default Delivery/Via Rule
		String ss = bp.getDeliveryRule();
		if (ss != null)
			setDeliveryRule(ss);
		ss = bp.getDeliveryViaRule();
		if (ss != null)
			setDeliveryViaRule(ss);
		//	Default Invoice/Payment Rule
		ss = bp.getInvoiceRule();
		if (ss != null)
			setInvoiceRule(ss);
		if (isSOTrx())
			ss = bp.getPaymentRule();
		else
			ss = bp.getPaymentRulePO();
		if (ss != null)
			setPaymentRule(ss);
		//	Sales Rep
		ii = bp.getSalesRep_ID();
		if (ii != 0)
			setSalesRep_ID(ii);


		//	Set Locations
		MBPartnerLocation[] locs = bp.getLocations(false);
		if (locs != null)
		{
			for (MBPartnerLocation element : locs) {
				if (element.isShipTo())
					super.setC_BPartner_Location_ID(element.getC_BPartner_Location_ID());
				if (element.isBillTo())
					setBill_Location_ID(element.getC_BPartner_Location_ID());
			}
			//	set to first
			if ((getC_BPartner_Location_ID() == 0) && (locs.length > 0))
				super.setC_BPartner_Location_ID(locs[0].getC_BPartner_Location_ID());
			if ((getBill_Location_ID() == 0) && (locs.length > 0))
				setBill_Location_ID(locs[0].getC_BPartner_Location_ID());
		}
		if (getC_BPartner_Location_ID() == 0)
			log.log(Level.SEVERE, ""MOrder.setBPartner - Has no Ship To Address: "" + bp);
		if (getBill_Location_ID() == 0)
			log.log(Level.SEVERE, ""MOrder.setBPartner - Has no Bill To Address: "" + bp);

		//	Set Contact
		MUser[] contacts = bp.getContacts(false);
		if ((contacts != null) && (contacts.length == 1))
			setAD_User_ID(contacts[0].getAD_User_ID());
		//
		setC_Project_ID(0);
	}	//	setBPartner
"
org.compiere.model.MOrder.setC_BPartner_ID,MOrder.java,"void setC_BPartner_ID (String oldC_BPartner_ID,
			String newC_BPartner_ID, int windowNo) throws Exception
			{
		if ((newC_BPartner_ID == null) || (newC_BPartner_ID.length() == 0))
			return;
		int C_BPartner_ID = Integer.parseInt(newC_BPartner_ID);
		if (C_BPartner_ID == 0)
			return;


		// Skip these steps for RMA. These fields are copied over from the orignal order instead.
		if (isReturnTrx())
		{
			setM_ReturnPolicy_ID();
			return;
		}

		String sql = ""SELECT p.AD_Language,p.C_PaymentTerm_ID,""
			+ "" COALESCE(p.M_PriceList_ID,g.M_PriceList_ID) AS M_PriceList_ID, p.PaymentRule,p.POReference,""
			+ "" p.SO_Description,p.IsDiscountPrinted,p.SalesRep_ID,""
			+ "" p.InvoiceRule,p.DeliveryRule,p.FreightCostRule,DeliveryViaRule,""
			+ "" p.SO_CreditLimit, p.SO_CreditLimit-p.SO_CreditUsed AS CreditAvailable,""
			+ "" lship.C_BPartner_Location_ID,c.AD_User_ID,""
			+ "" COALESCE(p.PO_PriceList_ID,g.PO_PriceList_ID) AS PO_PriceList_ID, p.PaymentRulePO,p.PO_PaymentTerm_ID,""
			+ "" lbill.C_BPartner_Location_ID AS Bill_Location_ID, p.SOCreditStatus, lship.IsBillTo ShipToIsBillTo ""
			+ ""FROM C_BPartner p""
			+ "" INNER JOIN C_BP_Group g ON (p.C_BP_Group_ID=g.C_BP_Group_ID)""
			+ "" LEFT OUTER JOIN C_BPartner_Location lbill ON (p.C_BPartner_ID=lbill.C_BPartner_ID AND lbill.IsBillTo='Y' AND lbill.IsActive='Y')""
			+ "" LEFT OUTER JOIN C_BPartner_Location lship ON (p.C_BPartner_ID=lship.C_BPartner_ID AND lship.IsShipTo='Y' AND lship.IsActive='Y')""
			+ "" LEFT OUTER JOIN AD_User c ON (p.C_BPartner_ID=c.C_BPartner_ID) ""
			+ ""WHERE p.C_BPartner_ID=? AND p.IsActive='Y'"";		//	#1

		boolean IsSOTrx = isSOTrx();
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_BPartner_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				super.setC_BPartner_ID(C_BPartner_ID);

				//	PriceList (indirect: IsTaxIncluded & Currency)
				int ii = rs.getInt(IsSOTrx ? ""M_PriceList_ID"" : ""PO_PriceList_ID"");
				if (ii != 0)
					setM_PriceList_ID(null, String.valueOf(ii), windowNo);
				else
				{	//	get default PriceList
					ii = getCtx().getContextAsInt(""#M_PriceList_ID"");
					if (ii != 0)
						setM_PriceList_ID(null, String.valueOf(ii), windowNo);
				}

				//	Bill-To BPartner
				setBill_BPartner_ID(C_BPartner_ID);
				int bill_Location_ID = rs.getInt(""Bill_Location_ID"");
				if (bill_Location_ID == 0)
					p_changeVO.addChangedValue(""Bill_Location_ID"", (String)null);
				else
					setBill_Location_ID(bill_Location_ID);

				// Ship-To Location
				int shipTo_ID = rs.getInt(""C_BPartner_Location_ID"");
				//	overwritten by InfoBP selection - works only if InfoWindow
				//	was used otherwise creates error (uses last value, may belong to differnt BP)
				if (getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_BPartner_ID"") == C_BPartner_ID)
				{
					String loc = getCtx().getContext(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_BPartner_Location_ID"");
					if (loc.length() > 0)
						shipTo_ID = Integer.parseInt(loc);
				}
				if (shipTo_ID == 0)
					p_changeVO.addChangedValue(""C_BPartner_Location_ID"", (String)null);
				else
					setC_BPartner_Location_ID(shipTo_ID);
				if (""Y"".equals(rs.getString(""ShipToIsBillTo"")))	//	set the same
					setBill_Location_ID(shipTo_ID);

				//	Contact - overwritten by InfoBP selection
				int contID = rs.getInt(""AD_User_ID"");
				if (getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_BPartner_ID"") == C_BPartner_ID)
				{
					String cont = getCtx().getContext(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""AD_User_ID"");
					if (cont.length() > 0)
						contID = Integer.parseInt(cont);
				}
				setAD_User_ID(contID);
				setBill_User_ID(contID);

				/* If user logged in is not a SalesRep, default the SalesRep associated with
				 * the customer.
				 */
				if(!MUser.isSalesRep(getCtx().getAD_User_ID()) && IsSOTrx)
				{
					int SalesRep_ID=rs.getInt(""SalesRep_ID"");
					if(SalesRep_ID!=0)
						setSalesRep_ID(SalesRep_ID);
				}

				//	CreditAvailable
				if (IsSOTrx)
				{
					BigDecimal CreditLimit = rs.getBigDecimal(""SO_CreditLimit"");
					//	String SOCreditStatus = rs.getString(""SOCreditStatus"");
					if ((CreditLimit != null) && (CreditLimit.signum() != 0))
					{
						BigDecimal CreditAvailable = rs.getBigDecimal(""CreditAvailable"");
						if ((p_changeVO != null)
								&& (CreditAvailable != null) && (CreditAvailable.signum() < 0))
						{
							String msg = Msg.getMsg(getCtx(), ""CreditLimitOver"",
									DisplayType.getNumberFormat(DisplayTypeConstants.Amount).format(CreditAvailable));
							p_changeVO.addError(msg);
						}
					}
				}

				//	PO Reference
				//	Do not set if already present
				String s = rs.getString(""POReference"");
				String poRef = getPOReference();
				if ((s != null) && (s.length() != 0) && ((poRef ==null) || (poRef.trim().length() == 0)))
					if(IsSOTrx)		//Do Not set if Purchase Order
						setPOReference(s);

				//	SO Description
				//	Do not set if already present
				s = rs.getString(""SO_Description"");
				if ((s != null) && (s.trim().length() != 0) && ((poRef ==null) || (poRef.trim().length() == 0)))
					if(IsSOTrx)		//Do Not set if Purchase Order
						setDescription(s);
				//	IsDiscountPrinted
				s = rs.getString(""IsDiscountPrinted"");
				setIsDiscountPrinted(""Y"".equals(s));

				//	Defaults, if not Walk-in Receipt or Walk-in Invoice
				String OrderType = getOrderTypeFromTargetDocType(windowNo);
				setInvoiceRule(INVOICERULE_AfterDelivery);
				setDeliveryRule(DELIVERYRULE_Availability);
				setPaymentRule(PAYMENTRULE_OnCredit);
				if (OrderType.equals(DocSubTypeSO_Prepay))
				{
					setInvoiceRule(INVOICERULE_Immediate);
					setDeliveryRule(DELIVERYRULE_AfterReceipt);
				}
				else if (OrderType.equals(MOrder.DocSubTypeSO_POS))	//  for POS
					setPaymentRule(PAYMENTRULE_Cash);
				else
				{
					//	PaymentRule
					s = rs.getString(IsSOTrx ? ""PaymentRule"" : ""PaymentRulePO"");
					if ((s != null) && (s.length() != 0))
					{
						if (s.equals(""B""))				//	No Cache in Non POS
							s = PAYMENTRULE_OnCredit;	//  Payment Term
						if (IsSOTrx && (s.equals(""S"") || s.equals(""U"")))	//	No Check/Transfer for SO_Trx
							s = PAYMENTRULE_OnCredit;	//  Payment Term
						setPaymentRule(s);
					}
					//	Payment Term
					ii = rs.getInt(IsSOTrx ? ""C_PaymentTerm_ID"" : ""PO_PaymentTerm_ID"");
					if (ii != 0)
						setC_PaymentTerm_ID(ii);
					//	InvoiceRule
					s = rs.getString(""InvoiceRule"");
					if ((s != null) && (s.length() != 0))
						setInvoiceRule(s);
					//	DeliveryRule
					s = rs.getString(""DeliveryRule"");
					if ((s != null) && (s.length() != 0))
						setDeliveryRule(s);
					//	FreightCostRule
					s = rs.getString(""FreightCostRule"");
					if ((s != null) && (s.length() != 0))
						setFreightCostRule(s);
					//	DeliveryViaRule
					s = rs.getString(""DeliveryViaRule"");
					if ((s != null) && (s.length() != 0))
						setDeliveryViaRule(s);
				}
				setC_Project_ID(0);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
			}	//	setC_BPartner_ID
"
org.compiere.model.MOrder.setBill_BPartner_ID,MOrder.java,"void setBill_BPartner_ID (String oldBill_BPartner_ID,
			String newBill_BPartner_ID, int windowNo) throws Exception
			{
		if ((newBill_BPartner_ID == null) || (newBill_BPartner_ID.length() == 0))
			return;
		int bill_BPartner_ID = Integer.parseInt(newBill_BPartner_ID);
		if (bill_BPartner_ID == 0)
			return;

		// Skip these steps for RMA. These fields are copied over from the orignal order instead.
		if (isReturnTrx())
			return;

		String sql = ""SELECT p.AD_Language,p.C_PaymentTerm_ID,""
			+ ""p.M_PriceList_ID,p.PaymentRule,p.POReference,""
			+ ""p.SO_Description,p.IsDiscountPrinted,""
			+ ""p.InvoiceRule,p.DeliveryRule,p.FreightCostRule,DeliveryViaRule,""
			+ ""p.SO_CreditLimit, p.SO_CreditLimit-p.SO_CreditUsed AS CreditAvailable,""
			+ ""c.AD_User_ID,""
			+ ""p.PO_PriceList_ID, p.PaymentRulePO, p.PO_PaymentTerm_ID,""
			+ ""lbill.C_BPartner_Location_ID AS Bill_Location_ID ""
			+ ""FROM C_BPartner p""
			+ "" LEFT OUTER JOIN C_BPartner_Location lbill ON (p.C_BPartner_ID=lbill.C_BPartner_ID AND lbill.IsBillTo='Y' AND lbill.IsActive='Y')""
			+ "" LEFT OUTER JOIN AD_User c ON (p.C_BPartner_ID=c.C_BPartner_ID) ""
			+ ""WHERE p.C_BPartner_ID=? AND p.IsActive='Y'"";		//	#1

		boolean IsSOTrx = isSOTrx();

		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, bill_BPartner_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				super.setBill_BPartner_ID(bill_BPartner_ID);
				//	PriceList (indirect: IsTaxIncluded & Currency)
				int ii = rs.getInt(IsSOTrx ? ""M_PriceList_ID"" : ""PO_PriceList_ID"");
				if (ii != 0)
					setM_PriceList_ID(null, String.valueOf(ii), windowNo);
				else
				{	//	get default PriceList
					ii = getCtx().getContextAsInt(""#M_PriceList_ID"");
					if (ii != 0)
						setM_PriceList_ID(null, String.valueOf(ii), windowNo);
				}

				int bill_Location_ID = rs.getInt(""Bill_Location_ID"");
				//	overwritten by InfoBP selection - works only if InfoWindow
				//	was used otherwise creates error (uses last value, may belong to differnt BP)
				if (getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_BPartner_ID"") == bill_BPartner_ID)
				{
					String loc = getCtx().getContext(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_BPartner_Location_ID"");
					if (loc.length() > 0)
						bill_Location_ID = Integer.parseInt(loc);
				}
				if (bill_Location_ID != 0)
					setBill_Location_ID(bill_Location_ID);

				//	Contact - overwritten by InfoBP selection
				int contID = rs.getInt(""AD_User_ID"");
				if (getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_BPartner_ID"") == bill_BPartner_ID)
				{
					String cont = getCtx().getContext(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""AD_User_ID"");
					if (cont.length() > 0)
						contID = Integer.parseInt(cont);
				}
				setBill_User_ID(contID);

				//	CreditAvailable
				if (IsSOTrx)
				{
					BigDecimal CreditLimit = rs.getBigDecimal(""SO_CreditLimit"");
					//	String SOCreditStatus = rs.getString(""SOCreditStatus"");
					if ((CreditLimit != null) && (CreditLimit.signum() != 0))
					{
						BigDecimal CreditAvailable = rs.getBigDecimal(""CreditAvailable"");
						if ((p_changeVO != null)
								&& (CreditAvailable != null) && (CreditAvailable.signum() < 0))
						{
							String msg = Msg.getMsg(getCtx(), ""CreditLimitOver"",
									DisplayType.getNumberFormat(DisplayTypeConstants.Amount).format(CreditAvailable));
							p_changeVO.addError(msg);
						}
					}
				}

				//	PO Reference
				String s = rs.getString(""POReference"");

				// Order Reference should not be reset by Bill To BPartner; only by BPartner
				/*if (s != null && s.length() != 0)
					setPOReference(s); */
				//	SO Description
				//  if there is an existing description, do not change it.
				s = rs.getString(""SO_Description"");
				String Description = getDescription();
				if ((s != null) && (s.trim().length() != 0) && ((Description ==null) || (Description.trim().length() == 0)))
					if(IsSOTrx)		//Do Not set if Purchase Order
						setDescription(s);
				//	IsDiscountPrinted
				s = rs.getString(""IsDiscountPrinted"");
				setIsDiscountPrinted(""Y"".equals(s));

				//	Defaults, if not Walk-in Receipt or Walk-in Invoice
				//	Defaults, if not Walk-in Receipt or Walk-in Invoice
				String OrderType = getOrderTypeFromTargetDocType(windowNo);
				setInvoiceRule(INVOICERULE_AfterDelivery);
				setPaymentRule(PAYMENTRULE_OnCredit);
				if (OrderType.equals(DocSubTypeSO_Prepay))
					setInvoiceRule(INVOICERULE_Immediate);
				else if (OrderType.equals(MOrder.DocSubTypeSO_POS))	//  for POS
					setPaymentRule(PAYMENTRULE_Cash);
				else
				{
					//	PaymentRule
					s = rs.getString(IsSOTrx ? ""PaymentRule"" : ""PaymentRulePO"");
					if ((s != null) && (s.length() != 0))
					{
						if (s.equals(""B""))				//	No Cache in Non POS
							s = PAYMENTRULE_OnCredit;	//  Payment Term
						if (IsSOTrx && (s.equals(""S"") || s.equals(""U"")))	//	No Check/Transfer for SO_Trx
							s = PAYMENTRULE_OnCredit;	//  Payment Term
						setPaymentRule(s);
					}
					//	Payment Term
					ii = rs.getInt(IsSOTrx ? ""C_PaymentTerm_ID"" : ""PO_PaymentTerm_ID"");
					if (ii != 0)
						setC_PaymentTerm_ID(ii);
					//	InvoiceRule
					s = rs.getString(""InvoiceRule"");
					if ((s != null) && (s.length() != 0))
						setInvoiceRule(s);
				}
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, ""bPartnerBill"", e);
		}
			}	//	setBill_BPartner_ID
"
org.compiere.model.MOrder.setC_BPartner_Location_ID,MOrder.java,"void setC_BPartner_Location_ID (int C_BPartner_Location_ID)
	{
		super.setC_BPartner_Location_ID (C_BPartner_Location_ID);
		super.setBill_Location_ID(C_BPartner_Location_ID);
	}	//	setC_BPartner_Location_ID
"
org.compiere.model.MOrder.setAD_User_ID,MOrder.java,"void setAD_User_ID (int AD_User_ID)
	{
		super.setAD_User_ID (AD_User_ID);
		super.setBill_User_ID (AD_User_ID);
	}	//	setAD_User_ID
"
org.compiere.model.MOrder.setShip_BPartner_ID,MOrder.java,"void setShip_BPartner_ID (int C_BPartner_ID)
	{
		super.setC_BPartner_ID (C_BPartner_ID);
	}	//	setShip_BPartner_ID
"
org.compiere.model.MOrder.setShip_Location_ID,MOrder.java,"void setShip_Location_ID (int C_BPartner_Location_ID)
	{
		super.setC_BPartner_Location_ID (C_BPartner_Location_ID);
	}	//	setShip_Location_ID
"
org.compiere.model.MOrder.setShip_User_ID,MOrder.java,"void setShip_User_ID (int AD_User_ID)
	{
		super.setAD_User_ID (AD_User_ID);
	}	//	setShip_User_ID
"
org.compiere.model.MOrder.setM_Warehouse_ID,MOrder.java,"void setM_Warehouse_ID (int M_Warehouse_ID)
	{
		super.setM_Warehouse_ID (M_Warehouse_ID);
	}	//	setM_Warehouse_ID
"
org.compiere.model.MOrder.setM_Warehouse_ID,MOrder.java,"void setM_Warehouse_ID (String oldM_Warehouse_ID,
			String newM_Warehouse_ID, int windowNo) throws Exception
			{
		if ((newM_Warehouse_ID == null) || (newM_Warehouse_ID.length() == 0))
			return;

		int M_Warehouse_ID=Integer.parseInt(newM_Warehouse_ID);
		if (M_Warehouse_ID == 0)
			return;
		setM_Warehouse_ID(M_Warehouse_ID);
		MWarehouse wh = new MWarehouse(getCtx(), M_Warehouse_ID, get_Trx());
		String DeliveryRule = getDeliveryRule();
		if((wh.isDisallowNegativeInv() && DeliveryRule.equals(X_C_Order.DELIVERYRULE_Force)) ||
				((DeliveryRule == null) || (DeliveryRule.length()==0)))
			setDeliveryRule(DELIVERYRULE_Availability);
		/** Need to set Delivery Rule to itself, because otherwise it gets nullified in webUI.
		 * Since Delivery Rule is dependent on the warehouse (Force is not allowed if Neg Inventory
		 * is disallowed, it gets reset when the warehouse is changed.
		 */
		else
			setDeliveryRule(DeliveryRule);
			}	//	setM_Warehouse_ID
"
org.compiere.model.MOrder.setIsDropShip,MOrder.java,"void setIsDropShip (boolean IsDropShip)
	{
		super.setIsDropShip (IsDropShip);
	}	//	setIsDropShip
"
org.compiere.model.MOrder.setPriceListVersion,MOrder.java,"void setPriceListVersion(int windowNo)
	{
		int M_PriceList_ID = getM_PriceList_ID();
		if (M_PriceList_ID == 0)
			return;

		Timestamp orderDate = getDateOrdered();
		if(orderDate == null)
			return;

		String sql = ""SELECT pl.IsTaxIncluded,pl.EnforcePriceLimit,pl.C_Currency_ID,c.StdPrecision,""
			+ ""plv.M_PriceList_Version_ID,plv.ValidFrom ""
			+ ""FROM M_PriceList pl,C_Currency c,M_PriceList_Version plv ""
			+ ""WHERE pl.C_Currency_ID=c.C_Currency_ID""
			+ "" AND pl.M_PriceList_ID=plv.M_PriceList_ID""
			+ "" AND pl.M_PriceList_ID=? ""						//	1
			+ "" AND plv.ValidFrom <=? ""							//  2
			+ "" AND plv.IsActive='Y' ""
			+ ""ORDER BY plv.ValidFrom DESC"";
		//	Use newest price list - may not be future
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, M_PriceList_ID);
			pstmt.setTimestamp(2, orderDate);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				//	Tax Included
				setIsTaxIncluded(""Y"".equals(rs.getString(1)));
				//	Price Limit Enforce
				if (p_changeVO != null)
					p_changeVO.setContext(getCtx(), windowNo, ""EnforcePriceLimit"", rs.getString(2));
				//	Currency
				Integer ii = Integer.valueOf(rs.getInt(3));
				setC_Currency_ID(ii);
				//	PriceList Version
				if (p_changeVO != null)
					p_changeVO.setContext(getCtx(), windowNo, ""M_PriceList_Version_ID"", rs.getInt(5));
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
	}
"
org.compiere.model.MOrder.setDateOrdered,MOrder.java,"void setDateOrdered (String oldDateOrdered,
			String newDateOrdered, int windowNo) throws Exception
			{
		if ((newDateOrdered == null) || (newDateOrdered.length() == 0))
			return;
		Timestamp dateOrdered = PO.convertToTimestamp(newDateOrdered);
		if (dateOrdered == null)
			return;
		setDateOrdered(dateOrdered);
		setPriceListVersion(windowNo);

			}	//	setDateOrdered
"
org.compiere.model.MOrder.setDateOrdered,MOrder.java,"void setDateOrdered(Timestamp dateOrdered)
	{
		super.setDateOrdered(dateOrdered);
		super.setDateAcct(dateOrdered);
	}	//	setDateOrdered
"
org.compiere.model.MOrder.setC_DocTypeTarget_ID,MOrder.java,"void setC_DocTypeTarget_ID (String oldC_DocTypeTarget_ID,
			String newC_DocTypeTarget_ID, int windowNo) throws Exception
			{
		if (Util.isEmpty(newC_DocTypeTarget_ID))
			return;
		int C_DocTypeTarget_ID = convertToInt(newC_DocTypeTarget_ID);
		if (C_DocTypeTarget_ID == 0)
			return;

		//	Re-Create new DocNo, if there is a doc number already
		//	and the existing source used a different Sequence number
		String oldDocNo = getDocumentNo();
		boolean newDocNo = (oldDocNo == null);
		if (!newDocNo && oldDocNo.startsWith(""<"") && oldDocNo.endsWith("">""))
			newDocNo = true;
		int oldC_DocType_ID = getC_DocType_ID();
		if ((oldC_DocType_ID == 0) && !Util.isEmpty(oldC_DocTypeTarget_ID))
			oldC_DocType_ID = convertToInt(oldC_DocTypeTarget_ID);

		String sql = ""SELECT d.DocSubTypeSO,d.HasCharges,'N',""			//	1..3
			+ ""d.IsDocNoControlled,s.CurrentNext,s.CurrentNextSys,""     //  4..6
			+ ""s.AD_Sequence_ID,d.IsSOTrx,d.IsReturnTrx ""               //	7..9
			+ ""FROM C_DocType d ""
			+ ""LEFT OUTER JOIN AD_Sequence s ON (d.DocNoSequence_ID=s.AD_Sequence_ID) ""
			+ ""WHERE C_DocType_ID=?"";	//	#1
		try
		{
			int AD_Sequence_ID = 0;

			//	Get old AD_SeqNo for comparison
			if (!newDocNo && (oldC_DocType_ID != 0))
			{
				PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
				pstmt.setInt(1, oldC_DocType_ID);
				ResultSet rs = pstmt.executeQuery();
				if (rs.next())
					AD_Sequence_ID = rs.getInt(7);
				rs.close();
				pstmt.close();
			}

			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_DocTypeTarget_ID);
			ResultSet rs = pstmt.executeQuery();
			String DocSubTypeSO = """";
			boolean IsSOTrx = true;
			boolean IsReturnTrx = false;
			if (rs.next())		//	we found document type
			{
				super.setC_DocTypeTarget_ID(C_DocTypeTarget_ID);
				//	Set Context:	Document Sub Type for Sales Orders
				DocSubTypeSO = rs.getString(1);
				if (DocSubTypeSO == null)
					DocSubTypeSO = ""--"";
				if (p_changeVO != null)
					//p_changeVO.setContext(getCtx(), windowNo, ""OrderType"", DocSubTypeSO);
					p_changeVO.addChangedValue(""OrderType"", DocSubTypeSO);

				//	No Drop Ship other than Standard
				if (!DocSubTypeSO.equals(DocSubTypeSO_Standard))
					setIsDropShip(false);

				//	IsSOTrx
				if (""N"".equals(rs.getString(8)))
					IsSOTrx = false;
				setIsSOTrx(IsSOTrx);

				// IsReturnTrx
				IsReturnTrx = ""Y"".equals(rs.getString(9));
				setIsReturnTrx(IsReturnTrx);

				if(!IsReturnTrx)
				{
					//	Delivery Rule
					if (DocSubTypeSO.equals(MOrder.DocSubTypeSO_POS))
						setDeliveryRule(DELIVERYRULE_Force);
					else if (DocSubTypeSO.equals(MOrder.DocSubTypeSO_Prepay))
						setDeliveryRule(DELIVERYRULE_AfterReceipt);
					else
						setDeliveryRule(DELIVERYRULE_Availability);

					//	Invoice Rule
					if (DocSubTypeSO.equals(DocSubTypeSO_POS)
							|| DocSubTypeSO.equals(DocSubTypeSO_Prepay)
							|| DocSubTypeSO.equals(DocSubTypeSO_OnCredit) )
						setInvoiceRule(INVOICERULE_Immediate);
					else
						setInvoiceRule(INVOICERULE_AfterDelivery);

					//	Payment Rule - POS Order
					if (DocSubTypeSO.equals(DocSubTypeSO_POS))
						setPaymentRule(PAYMENTRULE_Cash);
					else
						setPaymentRule(PAYMENTRULE_OnCredit);

					//	Set Context: Charges
					if (p_changeVO != null)
						p_changeVO.setContext(getCtx(), windowNo, ""HasCharges"", rs.getString(2));
				}
				else
				{
					if (DocSubTypeSO.equals(MOrder.DocSubTypeSO_POS))
						setDeliveryRule(DELIVERYRULE_Force);
					else
						setDeliveryRule(DELIVERYRULE_Manual);
				}

				//	DocumentNo
				if (rs.getString(4).equals(""Y""))			//	IsDocNoControlled
				{
					if (!newDocNo && (AD_Sequence_ID != rs.getInt(7)))
						newDocNo = true;
					if (newDocNo)
						if (Ini.isPropertyBool(Ini.P_COMPIERESYS)
								&& (getCtx().getAD_Client_ID() < 1000000))
							setDocumentNo(""<"" + rs.getString(6) + "">"");
						else
							setDocumentNo(""<"" + rs.getString(5) + "">"");
				}
			}
			rs.close();
			pstmt.close();

			// Skip remaining steps for RMA. These are copied over from original order.
			if(IsReturnTrx)
				return;

			//  When BPartner is changed, the Rules are not set if
			//  it is a POS or Credit Order (i.e. defaults from Standard BPartner)
			//  This re-reads the Rules and applies them.
			if (DocSubTypeSO.equals(DocSubTypeSO_POS)
					|| DocSubTypeSO.equals(DocSubTypeSO_Prepay))    //  not for POS/PrePay
				;
			else
			{
				sql = ""SELECT PaymentRule,C_PaymentTerm_ID,""            //  1..2
					+ ""InvoiceRule,DeliveryRule,""                       //  3..4
					+ ""FreightCostRule,DeliveryViaRule, ""               //  5..6
					+ ""PaymentRulePO,PO_PaymentTerm_ID ""
					+ ""FROM C_BPartner ""
					+ ""WHERE C_BPartner_ID=?"";		//	#1
				pstmt = DB.prepareStatement(sql, (Trx) null);
				int C_BPartner_ID = getC_BPartner_ID();
				pstmt.setInt(1, C_BPartner_ID);
				//
				rs = pstmt.executeQuery();
				if (rs.next())
				{
					//	PaymentRule
					String paymentRule = rs.getString(IsSOTrx ? ""PaymentRule"" : ""PaymentRulePO"");
					if ((paymentRule != null) && (paymentRule.length() != 0))
					{
						if (IsSOTrx 	//	No Cash/Check/Transfer for SO_Trx
								&& (paymentRule.equals(PAYMENTRULE_Cash)
										|| paymentRule.equals(PAYMENTRULE_Check)
										|| paymentRule.equals(PAYMENTRULE_DirectDeposit)))
							paymentRule = PAYMENTRULE_OnCredit;				//  Payment Term
						if (!IsSOTrx 	//	No Cash for PO_Trx
								&& (paymentRule.equals(PAYMENTRULE_Cash)))
							paymentRule = PAYMENTRULE_OnCredit;				//  Payment Term
						setPaymentRule(paymentRule);
					}
					//	Payment Term
					int C_PaymentTerm_ID = rs.getInt(IsSOTrx ? ""C_PaymentTerm_ID"" : ""PO_PaymentTerm_ID"");
					if (C_PaymentTerm_ID != 0)
						setC_PaymentTerm_ID(C_PaymentTerm_ID);
					//	InvoiceRule
					String invoiceRule = rs.getString(3);
					if ((invoiceRule != null) && (invoiceRule.length() != 0))
						setInvoiceRule(invoiceRule);
					//	DeliveryRule
					String deliveryRule = rs.getString(4);
					if ((deliveryRule != null) && (deliveryRule.length() != 0))
						setDeliveryRule(deliveryRule);
					//	FreightCostRule
					String freightCostRule = rs.getString(5);
					if ((freightCostRule != null) && (freightCostRule.length() != 0))
						setFreightCostRule(freightCostRule);
					//	DeliveryViaRule
					String deliveryViaRule = rs.getString(6);
					if ((deliveryViaRule != null) && (deliveryViaRule.length() != 0))
						setDeliveryViaRule(deliveryViaRule);
				}
				rs.close();
				pstmt.close();
			}   //  re-read customer rules
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
			}	//	setC_DocTypeTarget_ID
"
org.compiere.model.MOrder.setC_DocTypeTarget_ID,MOrder.java,"void setC_DocTypeTarget_ID (String DocSubTypeSO_x)
	{
		String sql = ""SELECT C_DocType_ID FROM C_DocType ""
			+ ""WHERE AD_Client_ID=? AND AD_Org_ID IN (0,"" + getAD_Org_ID()
			+ "") AND DocSubTypeSO=? AND IsReturnTrx='N' ""
			+ ""ORDER BY AD_Org_ID DESC, IsDefault DESC"";
		int C_DocType_ID = DB.getSQLValue(null, sql, getAD_Client_ID(), DocSubTypeSO_x);
		if (C_DocType_ID <= 0)
			log.severe (""Not found for AD_Client_ID="" + getAD_Client_ID () + "", SubType="" + DocSubTypeSO_x);
		else
		{
			log.fine(""(SO) - "" + DocSubTypeSO_x);
			setC_DocTypeTarget_ID (C_DocType_ID);
			setIsSOTrx(true);
			setIsReturnTrx(false);
		}
	}	//	setC_DocTypeTarget_ID
"
org.compiere.model.MOrder.setC_DocTypeTarget_ID,MOrder.java,"void setC_DocTypeTarget_ID(int C_DocTypeTarget_ID, boolean setReturnTrx)
	{
		super.setC_DocTypeTarget_ID(C_DocTypeTarget_ID);
		if (setReturnTrx)
		{
			MDocType dt = MDocType.get(getCtx(), C_DocTypeTarget_ID);
			setIsSOTrx(dt.isSOTrx());
			setIsReturnTrx(dt.isReturnTrx());
		}
	}	//	setC_DocTypeTarget_ID
"
org.compiere.model.MOrder.setC_DocTypeTarget_ID,MOrder.java,"void setC_DocTypeTarget_ID ()
	{
		if (isSOTrx())		//	SO = Std Order
		{
			setC_DocTypeTarget_ID(DocSubTypeSO_Standard);
			return;
		}
		//	PO
		String sql = ""SELECT C_DocType_ID FROM C_DocType ""
			+ ""WHERE AD_Client_ID=? AND AD_Org_ID IN (0,"" + getAD_Org_ID()
			+ "") AND DocBaseType='POO' AND IsReturnTrx='N' ""
			+ ""ORDER BY AD_Org_ID DESC, IsDefault DESC"";
		int C_DocType_ID = DB.getSQLValue(null, sql, getAD_Client_ID());
		if (C_DocType_ID <= 0)
			log.severe (""No POO found for AD_Client_ID="" + getAD_Client_ID ());
		else
		{
			log.fine(""(PO) - "" + C_DocType_ID);
			setC_DocTypeTarget_ID (C_DocType_ID);
			setIsReturnTrx(false);
		}
	}	//	setC_DocTypeTarget_ID
"
org.compiere.model.MOrder.copyLinesFrom,MOrder.java,"int copyLinesFrom (MOrder otherOrder, boolean counter, boolean copyASI)
	{
		if (isProcessed() || isPosted() || (otherOrder == null))
			return 0;
		MOrderLine[] fromLines = otherOrder.getLines(false, null);
		int count = 0;
		for (MOrderLine element : fromLines) {
			MOrderLine line = new MOrderLine (this);
			PO.copyValues(element, line, getAD_Client_ID(), getAD_Org_ID());
			line.setC_Order_ID(getC_Order_ID());
			line.setOrder(this);
			line.set_ValueNoCheck (""C_OrderLine_ID"", I_ZERO);	//	new
			//	References
			if (!copyASI)
			{
				line.setM_AttributeSetInstance_ID(0);
				line.setS_ResourceAssignment_ID(0);
			}
			if (counter)
				line.setRef_OrderLine_ID(element.getC_OrderLine_ID());
			else
				line.setRef_OrderLine_ID(0);
			//
			line.setQtyDelivered(Env.ZERO);
			line.setQtyInvoiced(Env.ZERO);
			line.setQtyReserved(Env.ZERO);
			line.setDateDelivered(null);
			line.setDateInvoiced(null);
			//	Tax
			if (getC_BPartner_ID() != otherOrder.getC_BPartner_ID())
				line.setTax();		//	recalculate
			//
			//
			line.setProcessed(false);
			if (line.save(get_Trx()))
				count++;
			//	Cross Link
			if (counter)
			{
				element.setRef_OrderLine_ID(line.getC_OrderLine_ID());
				element.save(get_Trx());
			}
		}
		if (fromLines.length != count)
			log.log(Level.SEVERE, ""Line difference - From="" + fromLines.length + "" <> Saved="" + count);
		return count;
	}	//	copyLinesFrom
"
org.compiere.model.MOrder.toString,MOrder.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MOrder["")
		.append(get_ID()).append(""-"").append(getDocumentNo())
		.append("",IsSOTrx="").append(isSOTrx())
		.append("",C_DocType_ID="").append(getC_DocType_ID())
		.append("", GrandTotal="").append(getGrandTotal())
		.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MOrder.getDocumentInfo,MOrder.java,"String getDocumentInfo()
	{
		MDocType dt = MDocType.get(getCtx(), getC_DocType_ID());
		return dt.getName() + "" "" + getDocumentNo();
	}	//	getDocumentInfo
"
org.compiere.model.MOrder.createPDF,MOrder.java,"File createPDF ()
	{
		try
		{
			File temp = File.createTempFile(get_TableName()+get_ID()+""_"", "".pdf"");
			return createPDF (temp);
		}
		catch (Exception e)
		{
			log.severe(""Could not create PDF - "" + e.getMessage());
		}
		return null;
	}	//	getPDF
"
org.compiere.model.MOrder.createPDF,MOrder.java,"File createPDF (File file)
	{
		ReportEngine re = ReportEngine.get (getCtx(), ReportEngine.ORDER, getC_Order_ID());
		if (re == null)
			return null;
		return re.getPDF(file);
	}	//	createPDF
"
org.compiere.model.MOrder.setM_PriceList_ID,MOrder.java,"void setM_PriceList_ID (int M_PriceList_ID)
	{
		MPriceList pl = MPriceList.get(getCtx(), M_PriceList_ID, null);
		if (pl.get_ID() == M_PriceList_ID)
		{
			super.setM_PriceList_ID(M_PriceList_ID);
			setC_Currency_ID(pl.getC_Currency_ID());
			setIsTaxIncluded(pl.isTaxIncluded());
		}
	}	//	setM_PriceList_ID
"
org.compiere.model.MOrder.setM_PriceList_ID,MOrder.java,"void setM_PriceList_ID (String oldM_PriceList_ID,
			String newM_PriceList_ID, int windowNo) throws Exception
			{
		if ((newM_PriceList_ID == null) || (newM_PriceList_ID.length() == 0))
			return;
		int M_PriceList_ID = Integer.parseInt(newM_PriceList_ID);
		if (M_PriceList_ID == 0)
			return;
		setM_PriceList_ID(M_PriceList_ID);

		setPriceListVersion(windowNo);
			}	//	setM_PriceList_ID
"
org.compiere.model.MOrder.setM_ReturnPolicy_ID,MOrder.java,"void setM_ReturnPolicy_ID ()
	{
		MBPartner bpartner = new MBPartner (getCtx(), getC_BPartner_ID(), null);

		if(bpartner.get_ID() !=0)
		{
			if(isSOTrx())
				super.setM_ReturnPolicy_ID(bpartner.getM_ReturnPolicy_ID());
			else
				super.setM_ReturnPolicy_ID(bpartner.getPO_ReturnPolicy_ID());
		}

	}	//	setM_ReturnPolicy_ID
"
org.compiere.model.MOrder.setOrigOrder,MOrder.java,"void setOrigOrder (MOrder origOrder)
	{
		if((origOrder == null) || (origOrder.get_ID()==0))
			return;

		setOrig_Order_ID(origOrder.getC_Order_ID());
		//	Get Details from Original Order
		//	MBPartner bpartner = new MBPartner (getCtx(), origOrder.getC_BPartner_ID(), null);

		// Reset Original Shipment
		setOrig_InOut_ID(-1);
		setC_BPartner_ID(origOrder.getC_BPartner_ID());
		setC_BPartner_Location_ID(origOrder.getC_BPartner_Location_ID());
		setAD_User_ID(origOrder.getAD_User_ID());
		setBill_BPartner_ID(origOrder.getBill_BPartner_ID());
		setBill_Location_ID(origOrder.getBill_Location_ID());
		setBill_User_ID(origOrder.getBill_User_ID());

		setM_ReturnPolicy_ID();

		setM_PriceList_ID(origOrder.getM_PriceList_ID());
		setPaymentRule(origOrder.getPaymentRule());
		setC_PaymentTerm_ID(origOrder.getC_PaymentTerm_ID());
		//setDeliveryRule(X_C_Order.DELIVERYRULE_Manual);

		setBill_Location_ID(origOrder.getBill_Location_ID());
		setInvoiceRule(origOrder.getInvoiceRule());
		setPaymentRule(origOrder.getPaymentRule());
		setDeliveryViaRule(origOrder.getDeliveryViaRule());
		setFreightCostRule(origOrder.getFreightCostRule());

		return;

	} // setOrigOrder
"
org.compiere.model.MOrder.setOrig_Order_ID,MOrder.java,"void setOrig_Order_ID (String oldOrig_Order_ID,
			String newOrig_Order_ID, int windowNo) throws Exception
			{
		if ((newOrig_Order_ID == null) || (newOrig_Order_ID.length() == 0))
			return;
		int Orig_Order_ID = Integer.parseInt(newOrig_Order_ID);
		if (Orig_Order_ID == 0)
			return;

		//		Get Details
		MOrder origOrder = new MOrder (getCtx(), Orig_Order_ID, null);
		if (origOrder.get_ID() != 0)
			setOrigOrder(origOrder);

			} // setOrig_Order_ID
"
org.compiere.model.MOrder.setOrigInOut,MOrder.java,"void setOrigInOut (MInOut origInOut)
	{
		if((origInOut == null) || (origInOut.get_ID()==0))
			return;

		setOrig_InOut_ID(origInOut.getM_InOut_ID());
		setC_Project_ID(origInOut.getC_Project_ID());
		setC_Campaign_ID(origInOut.getC_Campaign_ID());
		setC_Activity_ID(origInOut.getC_Activity_ID());
		setAD_OrgTrx_ID(origInOut.getAD_OrgTrx_ID());
		setUser1_ID(origInOut.getUser1_ID());
		setUser2_ID(origInOut.getUser2_ID());

		return;

	} // setOrigInOut
"
org.compiere.model.MOrder.setOrig_InOut_ID,MOrder.java,"void setOrig_InOut_ID (String oldOrig_InOut_ID,
			String newOrig_InOut_ID, int windowNo) throws Exception
			{
		if ((newOrig_InOut_ID == null) || (newOrig_InOut_ID.length() == 0))
			return;
		int Orig_InOut_ID = Integer.parseInt(newOrig_InOut_ID);
		if (Orig_InOut_ID == 0)
			return;

		//		Get Details
		MInOut origInOut = new MInOut (getCtx(), Orig_InOut_ID, null);
		if (origInOut.get_ID() != 0)
			setOrigInOut(origInOut);

			} // setOrig_InOut_ID
"
org.compiere.model.MOrder.getLines,MOrder.java,"MOrderLine[] getLines (String whereClause, String orderClause)
	{
		ArrayList<MOrderLine> list = new ArrayList<MOrderLine> ();
		StringBuffer sql = new StringBuffer(""SELECT * FROM C_OrderLine WHERE C_Order_ID=? "");
		if (whereClause != null)
			sql.append(whereClause);
		if (orderClause != null)
			sql.append("" "").append(orderClause);
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql.toString(), get_Trx());
			pstmt.setInt(1, getC_Order_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				MOrderLine ol = new MOrderLine(getCtx(), rs, get_Trx());
				ol.setHeaderInfo (this);
				list.add(ol);
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql.toString(), e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		//
		MOrderLine[] lines = new MOrderLine[list.size ()];
		list.toArray (lines);
		return lines;
	}	//	getLines
"
org.compiere.model.MOrder.getLines,MOrder.java,"MOrderLine[] getLines (int M_Product_ID, String whereClause, String orderClause)
	{
		ArrayList<MOrderLine> list = new ArrayList<MOrderLine> ();
		StringBuffer sql = new StringBuffer(""SELECT * FROM C_OrderLine WHERE C_Order_ID=? AND M_Product_ID=? "");

		if (whereClause != null)
			sql.append("" AND "").append(whereClause);

		if (orderClause != null)
			sql.append("" ORDER BY "").append(orderClause);
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql.toString(), get_Trx());
			pstmt.setInt(1, getC_Order_ID());
			pstmt.setInt(2, M_Product_ID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				MOrderLine ol = new MOrderLine(getCtx(), rs, get_Trx());
				ol.setHeaderInfo (this);
				list.add(ol);
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql.toString(), e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		//
		MOrderLine[] lines = new MOrderLine[list.size ()];
		list.toArray (lines);
		return lines;
	}	//	getLines
"
org.compiere.model.MOrder.getLines,MOrder.java,"MOrderLine[] getLines (boolean requery, String orderBy)
	{
		if ((m_lines != null) && !requery)
			return m_lines;
		//
		String orderClause = ""ORDER BY "";
		if ((orderBy != null) && (orderBy.length() > 0))
			orderClause += orderBy;
		else
			orderClause += ""Line"";
		m_lines = getLines(null, orderClause);
		return m_lines;
	}	//	getLines
"
org.compiere.model.MOrder.getLines,MOrder.java,"MOrderLine[] getLines()
	{
		return getLines(false, null);
	}	//	getLines
"
org.compiere.model.MOrder.renumberLines,MOrder.java,"void renumberLines (int step)
	{
		int number = step;
		MOrderLine[] lines = getLines(true, null);	//	Line is default
		for (MOrderLine line : lines) {
			line.setLine(number);
			line.save(get_Trx());
			number += step;
		}
		m_lines = null;
	}	//	renumberLines
"
org.compiere.model.MOrder.isOrderLine,MOrder.java,"boolean isOrderLine(int C_OrderLine_ID)
	{
		if (m_lines == null)
			getLines();
		for (MOrderLine element : m_lines)
			if (element.getC_OrderLine_ID() == C_OrderLine_ID)
				return true;
		return false;
	}	//	isOrderLine
"
org.compiere.model.MOrder.getTaxes,MOrder.java,"MOrderTax[] getTaxes(boolean requery)
	{
		if ((m_taxes != null) && !requery)
			return m_taxes;
		//
		ArrayList<MOrderTax> list = new ArrayList<MOrderTax>();
		String sql = ""SELECT * FROM C_OrderTax WHERE C_Order_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getC_Order_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MOrderTax(getCtx(), rs, get_Trx()));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		//
		m_taxes = new MOrderTax[list.size ()];
		list.toArray (m_taxes);
		return m_taxes;
	}	//	getTaxes
"
org.compiere.model.MOrder.getInvoices,MOrder.java,"MInvoice[] getInvoices(boolean hearderLinkOnly)
	{
		//	TODO get invoiced which are linked on line level
		ArrayList<MInvoice> list = new ArrayList<MInvoice>();
		String sql = ""SELECT * FROM C_Invoice WHERE C_Order_ID=? ORDER BY Created DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getC_Order_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MInvoice(getCtx(), rs, get_Trx()));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		//
		MInvoice[] retValue = new MInvoice[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getInvoices
"
org.compiere.model.MOrder.getC_Invoice_ID,MOrder.java,"int getC_Invoice_ID()
	{
		int C_Invoice_ID = 0;
		String sql = ""SELECT C_Invoice_ID FROM C_Invoice ""
			+ ""WHERE C_Order_ID=? AND DocStatus IN ('CO','CL') ""
			+ ""ORDER BY Created DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getC_Order_ID());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				C_Invoice_ID = rs.getInt(1);
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""getC_Invoice_ID"", e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		return C_Invoice_ID;
	}	//	getC_Invoice_ID
"
org.compiere.model.MOrder.getOpenInOut,MOrder.java,"MInOut getOpenInOut (int C_DocType_ID, int M_Warehouse_ID, int C_BPartner_ID, int C_BPartner_Location_ID)
	{
		//	TODO: getShipment if linked on line
		MInOut inout = null;
		String sql = ""SELECT M_InOut_ID ""+
		""FROM M_InOut WHERE C_Order_ID=? ""+
		"" AND M_Warehouse_ID=? ""+
		"" AND C_BPartner_ID=? ""+
		"" AND C_BPartner_Location_ID=? ""+
		"" AND C_DocType_ID=? ""+
		"" AND DocStatus IN ('DR','IP') ""+
		"" ORDER BY Created DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getC_Order_ID());
			pstmt.setInt(2, M_Warehouse_ID);
			pstmt.setInt(3, C_BPartner_ID);
			pstmt.setInt(4, C_BPartner_Location_ID);
			pstmt.setInt(5, C_DocType_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				inout = new MInOut(getCtx(), rs.getInt(1), get_Trx());
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		//
		return inout;
	}	//	getShipments
"
org.compiere.model.MOrder.getShipments,MOrder.java,"MInOut[] getShipments (boolean hearderLinkOnly)
	{
		//	TODO: getShipment if linked on line
		ArrayList<MInOut> list = new ArrayList<MInOut>();
		String sql = ""SELECT * FROM M_InOut WHERE C_Order_ID=? ORDER BY Created DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getC_Order_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MInOut(getCtx(), rs, get_Trx()));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		//
		MInOut[] retValue = new MInOut[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getShipments
"
org.compiere.model.MOrder.getRMAs,MOrder.java,"MOrder[] getRMAs ()
	{
		ArrayList<MOrder> list = new ArrayList<MOrder>();
		String sql = ""SELECT * FROM C_Order WHERE Orig_Order_ID=? ORDER BY Created DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getC_Order_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MOrder(getCtx(), rs, get_Trx()));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		//
		MOrder[] retValue = new MOrder[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getRMAs
"
org.compiere.model.MOrder.getShipmentLines,MOrder.java,"MInOutLine[] getShipmentLines()
	{
		ArrayList<MInOutLine> list = new ArrayList<MInOutLine>();
		String sql = ""SELECT * FROM M_InOutLine iol ""
			+ ""WHERE iol.C_OrderLine_ID IN ""
			+ ""(SELECT C_OrderLine_ID FROM C_OrderLine WHERE C_Order_ID=?) ""
			+ ""ORDER BY M_InOutLine_ID"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getC_Order_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MInOutLine(getCtx(), rs, get_Trx()));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		//
		MInOutLine[] retValue = new MInOutLine[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getShipmentLines
"
org.compiere.model.MOrder.getCurrencyISO,MOrder.java,"String getCurrencyISO()
	{
		return MCurrency.getISO_Code (getCtx(), getC_Currency_ID());
	}	//	getCurrencyISO
"
org.compiere.model.MOrder.getPrecision,MOrder.java,"int getPrecision()
	{
		return MCurrency.getStdPrecision(getCtx(), getC_Currency_ID());
	}	//	getPrecision
"
org.compiere.model.MOrder.getDocStatusName,MOrder.java,"String getDocStatusName()
	{
		return MRefList.getListName(getCtx(), 131, getDocStatus());
	}	//	getDocStatusName
"
org.compiere.model.MOrder.setDocAction,MOrder.java,"void setDocAction (String DocAction)
	{
		setDocAction (DocAction, false);
	}	//	setDocAction
"
org.compiere.model.MOrder.setDocAction,MOrder.java,"void setDocAction (String DocAction, boolean forceCreation)
	{
		super.setDocAction (DocAction);
		m_forceCreation = forceCreation;
	}	//	setDocAction
"
org.compiere.model.MOrder.setProcessed,MOrder.java,"void setProcessed (boolean processed)
	{
		super.setProcessed (processed);
		if (get_ID() == 0)
			return;
		String set = ""SET Processed='""
			+ (processed ? ""Y"" : ""N"")
			+ ""' WHERE C_Order_ID="" + getC_Order_ID();
		int noLine = DB.executeUpdate(""UPDATE C_OrderLine "" + set, get_Trx());
		int noTax = DB.executeUpdate(""UPDATE C_OrderTax "" + set, get_Trx());
		m_lines = null;
		m_taxes = null;
		log.fine(processed + "" - Lines="" + noLine + "", Tax="" + noTax);
	}	//	setProcessed
"
org.compiere.model.MOrder.beforeSave,MOrder.java,"boolean beforeSave (boolean newRecord)
	{
		//	Client/Org Check
		if (getAD_Org_ID() == 0)
		{
			int context_AD_Org_ID = getCtx().getAD_Org_ID();
			if (context_AD_Org_ID != 0)
			{
				setAD_Org_ID(context_AD_Org_ID);
				log.warning(""Changed Org to Context="" + context_AD_Org_ID);
			}
		}
		if (getAD_Client_ID() == 0)
		{
			m_processMsg = ""AD_Client_ID = 0"";
			return false;
		}

		//	New Record Doc Type - make sure DocType set to 0
		if (newRecord && (getC_DocType_ID() == 0))
			setC_DocType_ID (0);

		//	Default Warehouse
		if (getM_Warehouse_ID() == 0)
		{
			MOrg org = MOrg.get(getCtx(), getAD_Org_ID());
			setM_Warehouse_ID(org.getM_Warehouse_ID());
		}
		//	Warehouse Org
		if (newRecord
				|| is_ValueChanged(""AD_Org_ID"") || is_ValueChanged(""M_Warehouse_ID""))
		{
			MWarehouse wh = MWarehouse.get(getCtx(), getM_Warehouse_ID());
			if (wh.getAD_Org_ID() != getAD_Org_ID())
				log.saveWarning(""WarehouseOrgConflict"", """");
		}
		//	Reservations in Warehouse
		if (!newRecord && is_ValueChanged(""M_Warehouse_ID""))
		{
			MOrderLine[] lines = getLines(false,null);
			for (int i = 0; i < lines.length; i++)
			{
				if (!lines[i].canChangeWarehouse())		// saves Error
					return false;
			}
		}

		//	No Partner Info - set Template
		if (getC_BPartner_ID() == 0)
			setBPartner(MBPartner.getTemplate(getCtx(), getAD_Client_ID()));
		if (getC_BPartner_Location_ID() == 0)
			setBPartner(MBPartner.get(getCtx(), getC_BPartner_ID()));
		//	No Bill - get from Ship
		if (getBill_BPartner_ID() == 0)
		{
			setBill_BPartner_ID(getC_BPartner_ID());
		}
		if (getBill_Location_ID() == 0)
		{
			int bill_loc_id = getC_BPartner_Location_ID();
			MBPartnerLocation loc = new MBPartnerLocation( getCtx(), bill_loc_id, null );
			if( loc.isBillTo() )
				setBill_Location_ID( bill_loc_id );
		}

		//	BP Active check
		if (newRecord || is_ValueChanged(""C_BPartner_ID""))
		{
			MBPartner bp = MBPartner.get(getCtx(), getC_BPartner_ID());
			if (!bp.isActive())
			{
				log.saveError(""NotActive"", Msg.getMsg(getCtx(), ""C_BPartner_ID""));
				return false;
			}
		}
		if ((newRecord || is_ValueChanged(""Bill_BPartner_ID""))
				&& (getBill_BPartner_ID() != getC_BPartner_ID()))
		{
			MBPartner bp = MBPartner.get(getCtx(), getBill_BPartner_ID());
			if (!bp.isActive())
			{
				log.saveError(""NotActive"", Msg.getMsg(getCtx(), ""Bill_BPartner_ID""));
				return false;
			}
		}

		//	Default Price List
		if (getM_PriceList_ID() == 0)
		{
			int ii = DB.getSQLValue(null,
					""SELECT M_PriceList_ID FROM M_PriceList ""
					+ ""WHERE AD_Client_ID=? AND IsSOPriceList=? ""
					+ ""AND IsActive='Y' ""
					+ ""ORDER BY ASCII(IsDefault) DESC"", getAD_Client_ID(), isSOTrx() ? ""Y"" : ""N"");
			if (ii != 0)
				setM_PriceList_ID (ii);
		}


		boolean validPLV = false;
		// Verify that price list has a valid version for the date
		String sql1 = ""SELECT 1 ""
			+ ""FROM M_PriceList pl,M_PriceList_Version plv ""
			+ ""WHERE pl.M_PriceList_ID=plv.M_PriceList_ID""
			+ "" AND pl.M_PriceList_ID=? ""						//	1
			+ "" AND plv.ValidFrom <=? ""							//  2
			+ "" AND pl.IsActive='Y' ""
			+ "" AND plv.IsActive='Y' "";
		//	Use newest price list - may not be future
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql1, (Trx) null);
			pstmt.setInt(1, getM_PriceList_ID());
			pstmt.setTimestamp(2, getDateOrdered());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				validPLV = true;

			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql1, e);
			return false;
		}

		String docStatus = getDocStatus();
		if (!(DOCSTATUS_Completed.equals(docStatus) || DOCSTATUS_Closed.equals(docStatus) || DOCSTATUS_Voided
				.equals(docStatus))
				&& !validPLV) {
			log.saveError(""Error"", Msg.getMsg(getCtx(), ""PriceListVersionNotFound""));
			return false;
		}


		//	Default Currency
		if (getC_Currency_ID() == 0)
		{
			String sql = ""SELECT C_Currency_ID FROM M_PriceList WHERE M_PriceList_ID=?"";
			int ii = DB.getSQLValue (null, sql, getM_PriceList_ID());
			if (ii != 0)
				setC_Currency_ID (ii);
			else
				setC_Currency_ID(getCtx().getContextAsInt(""#C_Currency_ID""));
		}

		//	Default Sales Rep
		if (getSalesRep_ID() == 0)
		{
			int ii = getCtx().getContextAsInt(""#SalesRep_ID"");
			if (ii != 0)
				setSalesRep_ID (ii);
		}

		//	Default Document Type
		if (getC_DocTypeTarget_ID() == 0)
			setC_DocTypeTarget_ID(DocSubTypeSO_Standard);

		//	Default Payment Term
		if (getC_PaymentTerm_ID() == 0)
		{
			int ii = getCtx().getContextAsInt(""#C_PaymentTerm_ID"");
			if (ii != 0)
				setC_PaymentTerm_ID(ii);
			else
			{
				String sql = ""SELECT C_PaymentTerm_ID FROM C_PaymentTerm WHERE AD_Client_ID=? AND IsDefault='Y'"";
				ii = DB.getSQLValue(null, sql, getAD_Client_ID());
				if (ii != 0)
					setC_PaymentTerm_ID (ii);
			}
		}

		if(isReturnTrx())
		{
			Boolean withinPolicy = true;

			if(getM_ReturnPolicy_ID() == 0)
				setM_ReturnPolicy_ID();

			if (getM_ReturnPolicy_ID() != 0 )
			{
				MInOut origInOut = new MInOut (getCtx(), getOrig_InOut_ID(), null);
				MReturnPolicy rpolicy = new MReturnPolicy (getCtx(), getM_ReturnPolicy_ID(), null);
				log.fine(""RMA Date : "" + getDateOrdered() + "" Shipment Date : "" + origInOut.getMovementDate());
				withinPolicy = rpolicy.checkReturnPolicy(origInOut.getMovementDate(),getDateOrdered());
			}
			else
				withinPolicy = false;

			if(!withinPolicy)
			{
				if ( !MRole.getDefault(getCtx(), false).isOverrideReturnPolicy())
				{
					log.saveError(""Error"", Msg.getMsg(getCtx(), ""ReturnPolicyExceeded""));
					return false;
				}
				else
				{
					log.saveWarning(""Warning"", ""ReturnPolicyExceeded"");
				}
			}
		}


		return true;
	}	//	beforeSave
"
org.compiere.model.MOrder.afterSave,MOrder.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!success || newRecord)
			return success;

		//	Propagate Description changes
		if (is_ValueChanged(""Description"") || is_ValueChanged(""POReference""))
		{
			String sql = ""UPDATE C_Invoice i""
				+ "" SET (Description,POReference)=""
				+ ""(SELECT Description, POReference ""
				+ ""FROM C_Order o WHERE i.C_Order_ID=o.C_Order_ID) ""
				+ ""WHERE DocStatus NOT IN ('RE','CL') AND C_Order_ID="" + getC_Order_ID();

			int no = DB.executeUpdate(sql, get_Trx());
			log.fine(""Description -> #"" + no);
		}

		//	Propagate Changes of Payment Info to existing (not reversed/closed) invoices
		if (is_ValueChanged(""PaymentRule"") || is_ValueChanged(""C_PaymentTerm_ID"")
				|| is_ValueChanged(""DateAcct"") || is_ValueChanged(""C_Payment_ID"")
				|| is_ValueChanged(""C_CashLine_ID""))
		{
			String sql = ""UPDATE C_Invoice i ""
				+ ""SET (PaymentRule,C_PaymentTerm_ID,DateAcct,C_Payment_ID,C_CashLine_ID)=""
				+ ""(SELECT PaymentRule,C_PaymentTerm_ID,DateAcct,C_Payment_ID,C_CashLine_ID ""
				+ ""FROM C_Order o WHERE i.C_Order_ID=o.C_Order_ID) ""
				+ ""WHERE DocStatus NOT IN ('RE','CL') AND C_Order_ID="" + getC_Order_ID();
			//	Don't touch Closed/Reversed entries
			int no = DB.executeUpdate(sql, get_Trx());
			log.fine(""Payment -> #"" + no);
		}

		//	Sync Lines
		afterSaveSync(""AD_Org_ID"");
		afterSaveSync(""C_BPartner_ID"");
		afterSaveSync(""C_BPartner_Location_ID"");
		afterSaveSync(""DateOrdered"");
		afterSaveSync(""DatePromised"");
		afterSaveSync(""M_Warehouse_ID"");
		afterSaveSync(""M_Shipper_ID"");
		afterSaveSync(""C_Currency_ID"");
		//
		//only in batch mode redistribute tax
		if(getCtx().isBatchMode()) {
			String sql = ""SELECT * from C_OrderLine WHERE C_OrderLine_ID in (SELECT min(C_OrderLine_ID) from C_OrderLine WHERE C_Order_ID=? GROUP BY C_Tax_ID)""; 
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			try {
				pstmt.setInt(1, getC_Order_ID());
				ResultSet rs = pstmt.executeQuery ();
				while(rs.next()) {
					MOrderLine line = new MOrderLine(getCtx(), rs, get_Trx());
					line.updateHeaderTax();
				}
			}
			catch(SQLException e) {
				log.log(Level.SEVERE, ""Batch MOrder save - "" + sql.toString(), e);
			} finally {
				try {
				pstmt.close();
				}
				catch(Exception e){}
			}
		}
		
		return true;
	}	//	afterSave
"
org.compiere.model.MOrder.afterSaveSync,MOrder.java,"void afterSaveSync (String columnName)
	{
		if (is_ValueChanged(columnName))
		{
			String sql = ""UPDATE C_OrderLine ol""
				+ "" SET "" + columnName + "" =""
				+ ""(SELECT "" + columnName
				+ "" FROM C_Order o WHERE ol.C_Order_ID=o.C_Order_ID) ""
				+ ""WHERE C_Order_ID = ?"" ;
			int no = DB.executeUpdate(sql, getC_Order_ID(), get_Trx());
			log.fine(columnName + "" Lines -> #"" + no);
		}
	}	//	afterSaveSync
"
org.compiere.model.MOrder.beforeDelete,MOrder.java,"boolean beforeDelete ()
	{
		if (isProcessed())
			return false;

		getLines();
		for (int i = 0; i < m_lines.length; i++)
		{
			if (!m_lines[i].beforeDelete())
				return false;
		}
		return true;
	}	//	beforeDelete
"
org.compiere.model.MOrder.processIt,MOrder.java,"boolean processIt (String processAction)
	{
		m_processMsg = null;
		DocumentEngine engine = new DocumentEngine (this, getDocStatus());
		return engine.processIt (processAction, getDocAction());
	}	//	processIt
"
org.compiere.model.MOrder.unlockIt,MOrder.java,"boolean unlockIt()
	{
		log.info(""unlockIt - "" + toString());
		setProcessing(false);
		return true;
	}	//	unlockIt
"
org.compiere.model.MOrder.invalidateIt,MOrder.java,"boolean invalidateIt()
	{
		log.info(toString());
		setDocAction(DOCACTION_Prepare);
		return true;
	}	//	invalidateIt
"
org.compiere.model.MOrder.prepareIt,MOrder.java,"String prepareIt()
	{
		log.info(toString());
		m_processMsg = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_BEFORE_PREPARE);
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;
		MDocType dt = MDocType.get(getCtx(), getC_DocTypeTarget_ID());
		setIsReturnTrx(dt.isReturnTrx());
		setIsSOTrx(dt.isSOTrx());

		//	Lines
		MOrderLine[] lines = getLines(true, ""M_Product_ID"");
		if (lines.length == 0)
		{
			m_processMsg = ""@NoLines@"";
			return DocActionConstants.STATUS_Invalid;
		}

		//	Std Period open?
		m_processMsg = MPeriod.isOpen(this, lines, getDateAcct(), dt.getDocBaseType());
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;


		//	Convert DocType to Target
		if (getC_DocType_ID() != getC_DocTypeTarget_ID() )
		{
			//	Cannot change Std to anything else if different warehouses
			if (getC_DocType_ID() != 0)
			{
				MDocType dtOld = MDocType.get(getCtx(), getC_DocType_ID());
				if (X_C_DocType.DOCSUBTYPESO_StandardOrder.equals(dtOld.getDocSubTypeSO())		//	From SO
						&& !X_C_DocType.DOCSUBTYPESO_StandardOrder.equals(dt.getDocSubTypeSO()))	//	To !SO
				{
					for (MOrderLine element : lines) {
						if (element.getM_Warehouse_ID() != getM_Warehouse_ID())
						{
							log.warning(""different Warehouse "" + element);
							m_processMsg = ""@CannotChangeDocType@"";
							return DocActionConstants.STATUS_Invalid;
						}
					}
				}
			}

			//	New or in Progress/Invalid
			if (DOCSTATUS_Drafted.equals(getDocStatus())
					|| DOCSTATUS_InProgress.equals(getDocStatus())
					|| DOCSTATUS_Invalid.equals(getDocStatus())
					|| (getC_DocType_ID() == 0))
			{
				setC_DocType_ID(getC_DocTypeTarget_ID());
			}
			else	//	convert only if offer
			{
				if (dt.isOffer())
					setC_DocType_ID(getC_DocTypeTarget_ID());
				else
				{
					m_processMsg = ""@CannotChangeDocType@"";
					return DocActionConstants.STATUS_Invalid;
				}
			}
		}	//	convert DocType

		//	Mandatory Product Attribute Set Instance
		String mandatoryType = ""='Y'"";	//	IN ('Y','S')
		String sql = ""SELECT COUNT(*) ""
			+ ""FROM C_OrderLine ol""
			+ "" INNER JOIN M_Product p ON (ol.M_Product_ID=p.M_Product_ID)""
			+ "" INNER JOIN M_AttributeSet pas ON (p.M_AttributeSet_ID=pas.M_AttributeSet_ID) ""
			+ ""WHERE pas.MandatoryType"" + mandatoryType
			+ "" AND COALESCE(ol.M_AttributeSetInstance_ID,0) = 0""
			+ "" AND ol.C_Order_ID=?"";
		int no = DB.getSQLValue(get_Trx(), sql, getC_Order_ID());
		if (no != 0)
		{
			m_processMsg = ""@LinesWithoutProductAttribute@ ("" + no + "")"";
			return DocActionConstants.STATUS_Invalid;
		}

		//	Lines
		if (explodeBOM())
			lines = getLines(true, ""M_Product_ID"");
		if (!reserveStock(dt, lines))
		{
			m_processMsg = ""Cannot reserve Stock"";
			return DocActionConstants.STATUS_Invalid;
		}
		if (!calculateTaxTotal())
		{
			m_processMsg = ""Error calculating tax"";
			return DocActionConstants.STATUS_Invalid;
		}

		//	Credit Check
		if (isSOTrx() && !isReturnTrx())
		{
			MBPartner bp = MBPartner.get(getCtx(), getC_BPartner_ID());
			if(!X_C_BPartner.SOCREDITSTATUS_NoCreditCheck.equals(bp.getSOCreditStatus()))
			{
				if (X_C_BPartner.SOCREDITSTATUS_CreditStop.equals(bp.getSOCreditStatus()))
				{
					m_processMsg = ""@BPartnerCreditStop@ - @TotalOpenBalance@=""
						+ bp.getTotalOpenBalance()
						+ "", @SO_CreditLimit@="" + bp.getSO_CreditLimit();
					return DocActionConstants.STATUS_Invalid;
				}
				else if (X_C_BPartner.SOCREDITSTATUS_CreditHold.equals(bp.getSOCreditStatus()))
				{
					m_processMsg = ""@BPartnerCreditHold@ - @TotalOpenBalance@=""
						+ bp.getTotalOpenBalance()
						+ "", @SO_CreditLimit@="" + bp.getSO_CreditLimit();
					return DocActionConstants.STATUS_Invalid;
				}
				BigDecimal grandTotal = MConversionRate.convertBase(getCtx(),
						getGrandTotal(), getC_Currency_ID(), getDateOrdered(),
						getC_ConversionType_ID(), getAD_Client_ID(), getAD_Org_ID());
				if (X_C_BPartner.SOCREDITSTATUS_CreditHold.equals(bp.getSOCreditStatus(grandTotal)))
				{
					m_processMsg = ""@BPartnerOverOCreditHold@ - @TotalOpenBalance@=""
						+ bp.getTotalOpenBalance() + "", @GrandTotal@="" + grandTotal
						+ "", @SO_CreditLimit@="" + bp.getSO_CreditLimit();
					return DocActionConstants.STATUS_Invalid;
				}
			}
		}

		m_justPrepared = true;
		//	if (!DOCACTION_Complete.equals(getDocAction()))		don't set for just prepare
		//		setDocAction(DOCACTION_Complete);
		return DocActionConstants.STATUS_InProgress;
	}	//	prepareIt
"
org.compiere.model.MOrder.explodeBOM,MOrder.java,"boolean explodeBOM()
	{
		boolean retValue = false;
		String where = ""AND IsActive='Y' AND EXISTS ""
			+ ""(SELECT * FROM M_Product p WHERE C_OrderLine.M_Product_ID=p.M_Product_ID""
			+ "" AND	p.IsBOM='Y' AND p.IsVerified='Y' AND p.IsStocked='N')"";
		//
		String sql = ""SELECT COUNT(*) FROM C_OrderLine ""
			+ ""WHERE C_Order_ID=? "" + where;
		int count = DB.getSQLValue(get_Trx(), sql, getC_Order_ID());
		while (count != 0)
		{
			retValue = true;
			renumberLines (1000);		//	max 999 bom items

			//	Order Lines with non-stocked BOMs
			MOrderLine[] lines = getLines (where, ""ORDER BY Line"");
			for (MOrderLine line : lines) {
				MProduct product = MProduct.get (getCtx(), line.getM_Product_ID());
				log.fine(product.getName());
				//	New Lines
				int lineNo = line.getLine ();
				MBOMProduct[] boms = MBOMProduct.getBOMLines (product);
				for (MBOMProduct bom : boms) {
					MOrderLine newLine = new MOrderLine (this);
					newLine.setLine (++lineNo);
					newLine.setM_Product_ID (bom.getComponent ()
							.getM_Product_ID ());
					newLine.setC_UOM_ID (bom.getComponent ().getC_UOM_ID ());
					newLine.setQty (line.getQtyOrdered ().multiply (
							bom.getBOMQty ()));
					if (bom.getDescription () != null)
						newLine.setDescription (bom.getDescription ());
					//
					newLine.setPrice ();
					newLine.save (get_Trx());
				}
				//	Convert into Comment Line
				line.setM_Product_ID (0);
				line.setM_AttributeSetInstance_ID (0);
				line.setPrice (Env.ZERO);
				line.setPriceLimit (Env.ZERO);
				line.setPriceList (Env.ZERO);
				line.setLineNetAmt (Env.ZERO);
				line.setFreightAmt (Env.ZERO);
				//
				String description = product.getName ();
				if (product.getDescription () != null)
					description += "" "" + product.getDescription ();
				if (line.getDescription () != null)
					description += "" "" + line.getDescription ();
				line.setDescription (description);
				line.save (get_Trx());
			}	//	for all lines with BOM

			m_lines = null;		//	force requery
			count = DB.getSQLValue (get_Trx(), sql, getC_Order_ID ());
			renumberLines (10);
		}	//	while count != 0
		return retValue;
	}	//	explodeBOM
"
org.compiere.model.MOrder.reserveStock,MOrder.java,"boolean reserveStock (MDocType dt, MOrderLine[] lines)
	{
		if (dt == null)
			dt = MDocType.get(getCtx(), getC_DocType_ID());

		// Reserved quantity and ordered quantity should not be updated for returns
		if (dt.isReturnTrx())
			return true;

		//	Binding
		boolean binding = !dt.isProposal();
		//	Not binding - i.e. Target=0
		if (DOCACTION_Void.equals(getDocAction())
				//	Closing Binding Quotation
				|| (X_C_DocType.DOCSUBTYPESO_Quotation.equals(dt.getDocSubTypeSO())
						&& DOCACTION_Close.equals(getDocAction()))
						|| isDropShip() )
			binding = false;
		boolean isSOTrx = isSOTrx();
		log.fine(""Binding="" + binding + "" - IsSOTrx="" + isSOTrx);
		//	Force same WH for all but SO/PO
		int header_M_Warehouse_ID = getM_Warehouse_ID();
		if (X_C_DocType.DOCSUBTYPESO_StandardOrder.equals(dt.getDocSubTypeSO())
				|| MDocBaseType.DOCBASETYPE_PurchaseOrder.equals(dt.getDocBaseType()))
			header_M_Warehouse_ID = 0;		//	don't enforce

		BigDecimal Volume = Env.ZERO;
		BigDecimal Weight = Env.ZERO;

		//	Always check and (un) Reserve Inventory
		for (MOrderLine line : lines) {
			//	Check/set WH/Org
			if (header_M_Warehouse_ID != 0)	//	enforce WH
			{
				if (header_M_Warehouse_ID != line.getM_Warehouse_ID())
					line.setM_Warehouse_ID(header_M_Warehouse_ID);
				if (getAD_Org_ID() != line.getAD_Org_ID())
					line.setAD_Org_ID(getAD_Org_ID());
			}
			//	Binding
			BigDecimal target = binding ? line.getQtyOrdered() : Env.ZERO;
			BigDecimal difference = target
			.subtract(line.getQtyReserved())
			.subtract(line.getQtyDelivered());
			if (difference.signum() == 0)
			{
				MProduct product = line.getProduct();
				if (product != null)
				{
					Volume = Volume.add(product.getVolume().multiply(line.getQtyOrdered()));
					Weight = Weight.add(product.getWeight().multiply(line.getQtyOrdered()));
				}
				continue;
			}

			log.fine(""Line="" + line.getLine()
					+ "" - Target="" + target + "",Difference="" + difference
					+ "" - Ordered="" + line.getQtyOrdered()
					+ "",Reserved="" + line.getQtyReserved() + "",Delivered="" + line.getQtyDelivered());

			//	Check Product - Stocked and Item
			MProduct product = line.getProduct();
			if (product != null)
			{
				if (product.isStocked())
				{
					BigDecimal ordered = isSOTrx ? Env.ZERO : difference;
					BigDecimal reserved = isSOTrx ? difference : Env.ZERO;
					int M_Locator_ID = 0;
					//	Get Locator to reserve
					if (line.getM_AttributeSetInstance_ID() != 0)	//	Get existing Location
						M_Locator_ID = MStorage.getM_Locator_ID (line.getM_Warehouse_ID(),
								line.getM_Product_ID(), line.getM_AttributeSetInstance_ID(),
								ordered, get_Trx());
					//	Get default Location
					if (M_Locator_ID == 0)
					{
						MWarehouse wh = MWarehouse.get(getCtx(), line.getM_Warehouse_ID());
						M_Locator_ID = wh.getDefaultM_Locator_ID();
					}
					//	Update Storage
					if (!MStorage.add(getCtx(), line.getM_Warehouse_ID(), M_Locator_ID,
							line.getM_Product_ID(),
							line.getM_AttributeSetInstance_ID(), line.getM_AttributeSetInstance_ID(),
							Env.ZERO, reserved, ordered, get_Trx()))
						return false;
				}	//	stockec
				//	update line
				line.setQtyReserved(line.getQtyReserved().add(difference));
				if (!line.save(get_Trx()))
					return false;
				//
				Volume = Volume.add(product.getVolume().multiply(line.getQtyOrdered()));
				Weight = Weight.add(product.getWeight().multiply(line.getQtyOrdered()));
			}	//	product
		}	//	reverse inventory

		setVolume(Volume);
		setWeight(Weight);
		return true;
	}	//	reserveStock
"
org.compiere.model.MOrder.calculateTaxTotal,MOrder.java,"boolean calculateTaxTotal()
	{
		log.fine("""");
		//	Delete Taxes
		DB.executeUpdate(""DELETE FROM C_OrderTax WHERE C_Order_ID="" + getC_Order_ID(), get_Trx());
		m_taxes = null;

		//	Lines
		BigDecimal totalLines = Env.ZERO;
		ArrayList<Integer> taxList = new ArrayList<Integer>();
		MOrderLine[] lines = getLines();
		for (MOrderLine line : lines) {
			Integer taxID = Integer.valueOf(line.getC_Tax_ID());
			if (!taxList.contains(taxID))
			{
				MOrderTax oTax = MOrderTax.get (line, getPrecision(),
						false, get_Trx());	//	current Tax
				oTax.setIsTaxIncluded(isTaxIncluded());
				if (!oTax.calculateTaxFromLines())
					return false;
				if (!oTax.save(get_Trx()))
					return false;
				taxList.add(taxID);
			}
			totalLines = totalLines.add(line.getLineNetAmt());
		}

		//	Taxes
		BigDecimal grandTotal = totalLines;
		MOrderTax[] taxes = getTaxes(true);
		for (MOrderTax oTax : taxes) {
			MTax tax = oTax.getTax();
			if (tax.isSummary())
			{
				MTax[] cTaxes = tax.getChildTaxes(false);
				for (MTax cTax : cTaxes) {
					BigDecimal taxAmt = cTax.calculateTax(oTax.getTaxBaseAmt(), isTaxIncluded(), getPrecision());
					//
					MOrderTax newOTax = new MOrderTax(getCtx(), 0, get_Trx());
					newOTax.setClientOrg(this);
					newOTax.setC_Order_ID(getC_Order_ID());
					newOTax.setC_Tax_ID(cTax.getC_Tax_ID());
					newOTax.setPrecision(getPrecision());
					newOTax.setIsTaxIncluded(isTaxIncluded());
					newOTax.setTaxBaseAmt(oTax.getTaxBaseAmt());
					newOTax.setTaxAmt(taxAmt);
					if (!newOTax.save(get_Trx()))
						return false;
					//
					if (!isTaxIncluded())
						grandTotal = grandTotal.add(taxAmt);
				}
				if (!oTax.delete(true, get_Trx()))
					return false;
				m_taxes = null;
			}
			else
			{
				if (!isTaxIncluded())
					grandTotal = grandTotal.add(oTax.getTaxAmt());
			}
		}
		//
		setTotalLines(totalLines);
		setGrandTotal(grandTotal);
		return true;
	}	//	calculateTaxTotal
"
org.compiere.model.MOrder.approveIt,MOrder.java,"boolean  approveIt()
	{
		log.info(""approveIt - "" + toString());
		setIsApproved(true);
		return true;
	}	//	approveIt
"
org.compiere.model.MOrder.rejectIt,MOrder.java,"boolean rejectIt()
	{
		log.info(""rejectIt - "" + toString());
		setIsApproved(false);
		return true;
	}	//	rejectIt
"
org.compiere.model.MOrder.completeIt,MOrder.java,"String completeIt()
	{
		MDocType dt = MDocType.get(getCtx(), getC_DocType_ID());
		String DocSubTypeSO = dt.getDocSubTypeSO();

		//	Just prepare
		if (DOCACTION_Prepare.equals(getDocAction()))
		{
			setProcessed(false);
			return DocActionConstants.STATUS_InProgress;
		}

		if(!isReturnTrx())
		{
			//	Offers
			if (X_C_DocType.DOCSUBTYPESO_Proposal.equals(DocSubTypeSO)
					|| X_C_DocType.DOCSUBTYPESO_Quotation.equals(DocSubTypeSO))
			{
				//	Binding
				if (X_C_DocType.DOCSUBTYPESO_Quotation.equals(DocSubTypeSO))
					reserveStock(dt, getLines(true, ""M_Product_ID""));
				//	User Validation
				String valid = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_AFTER_COMPLETE);
				if (valid != null)
				{
					m_processMsg = valid;
					return DocActionConstants.STATUS_Invalid;
				}
				setProcessed(true);
				setDocAction(DOCACTION_Close);
				return DocActionConstants.STATUS_Completed;
			}
			//	Waiting Payment - until we have a payment
			if (!m_forceCreation
					&& X_C_DocType.DOCSUBTYPESO_PrepayOrder.equals(DocSubTypeSO)
					&& (getC_Payment_ID() == 0) && (getC_CashLine_ID() == 0))
			{
				setProcessed(true);
				return DocActionConstants.STATUS_WaitingPayment;
			}

			//	Re-Check
			if (!m_justPrepared)
			{
				String status = prepareIt();
				if (!DocActionConstants.STATUS_InProgress.equals(status))
					return status;
			}
		}

		//	Implicit Approval
		if (!isApproved())
			approveIt();
		//
		log.info(toString());
		getLines (m_justPrepared, null);
		StringBuffer info = new StringBuffer();

		/* nnayak - Bug 1720003 - We need to set the processed flag so the Tax Summary Line
		does not get recreated in the afterSave procedure of the MOrderLine class */
		setProcessed(true);

		boolean realTimePOS = false;

		//	Create SO Shipment - Force Shipment
		MInOut shipment = null;
		if (X_C_DocType.DOCSUBTYPESO_OnCreditOrder.equals(DocSubTypeSO)		//	(W)illCall(I)nvoice
				|| X_C_DocType.DOCSUBTYPESO_WarehouseOrder.equals(DocSubTypeSO)	//	(W)illCall(P)ickup
				|| X_C_DocType.DOCSUBTYPESO_POSOrder.equals(DocSubTypeSO)			//	(W)alkIn(R)eceipt
				|| X_C_DocType.DOCSUBTYPESO_PrepayOrder.equals(DocSubTypeSO))
		{
			if (!DELIVERYRULE_Force.equals(getDeliveryRule()))
			{
				MWarehouse wh = new MWarehouse (getCtx(), getM_Warehouse_ID(), get_Trx());
				if (!wh.isDisallowNegativeInv())
					setDeliveryRule(DELIVERYRULE_Force);
			}
			//
			shipment = generateShipment (dt, realTimePOS ? null : getDateOrdered());
			if (shipment == null)
				return DocActionConstants.STATUS_Invalid;
			info.append(""@M_InOut_ID@: "").append(shipment.getDocumentNo());
			String msg = shipment.getProcessMsg();
			if ((msg != null) && (msg.length() > 0))
				info.append("" ("").append(msg).append("")"");
		}	//	Shipment


		//	Create SO Invoice - Always invoice complete Order
		if ( X_C_DocType.DOCSUBTYPESO_POSOrder.equals(DocSubTypeSO)
				|| X_C_DocType.DOCSUBTYPESO_OnCreditOrder.equals(DocSubTypeSO)
				|| X_C_DocType.DOCSUBTYPESO_PrepayOrder.equals(DocSubTypeSO))
		{
			MInvoice invoice = createInvoice (dt, shipment, realTimePOS ? null : getDateOrdered());
			if (invoice == null)
				return DocActionConstants.STATUS_Invalid;
			info.append("" - @C_Invoice_ID@: "").append(invoice.getDocumentNo());
			String msg = invoice.getProcessMsg();
			if ((msg != null) && (msg.length() > 0))
				info.append("" ("").append(msg).append("")"");
		}	//	Invoice

		//	Counter Documents
		MOrder counter = createCounterDoc();
		if (counter != null)
			info.append("" - @CounterDoc@: @Order@="").append(counter.getDocumentNo());
		//	User Validation
		String valid = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_AFTER_COMPLETE);
		if (valid != null)
		{
			if (info.length() > 0)
				info.append("" - "");
			info.append(valid);
			m_processMsg = info.toString();
			return DocActionConstants.STATUS_Invalid;
		}

		setProcessed(true);
		m_processMsg = info.toString();
		//
		setDocAction(DOCACTION_Close);
		return DocActionConstants.STATUS_Completed;
	}	//	completeIt
"
org.compiere.model.MOrder.createInvoice,MOrder.java,"MInvoice createInvoice (MDocType dt, MInOut shipment, Timestamp invoiceDate)
	{
		log.info(dt.toString());
		MInvoice invoice = new MInvoice (this, dt.getC_DocTypeInvoice_ID(), invoiceDate);
		if (!invoice.save(get_Trx()))
		{
			m_processMsg = ""Could not create Invoice"";
			return null;
		}

		//	If we have a Shipment - use that as a base
		if (shipment != null)
		{
			if (!INVOICERULE_AfterDelivery.equals(getInvoiceRule()))
				setInvoiceRule(INVOICERULE_AfterDelivery);
			//
			MInOutLine[] sLines = shipment.getLines(false);
			for (MInOutLine sLine : sLines)
			{
				MInvoiceLine iLine = new MInvoiceLine(invoice);
				iLine.setShipLine(sLine);
				//	Qty = Delivered
				iLine.setQtyEntered(sLine.getQtyEntered());
				iLine.setQtyInvoiced(sLine.getMovementQty());
				if (!iLine.save(get_Trx()))
				{
					m_processMsg = ""Could not create Invoice Line from Shipment Line"";
					return null;
				}
				//
				sLine.setIsInvoiced(true);
				if (!sLine.save(get_Trx()))
				{
					log.warning(""Could not update Shipment line: "" + sLine);
				}
			}
		}
		else	//	Create Invoice from Order
		{
			if (!INVOICERULE_Immediate.equals(getInvoiceRule()))
				setInvoiceRule(INVOICERULE_Immediate);
			//
			MOrderLine[] oLines = getLines();
			for (MOrderLine oLine : oLines) {
				//
				MInvoiceLine iLine = new MInvoiceLine(invoice);
				iLine.setOrderLine(oLine);
				//	Qty = Ordered - Invoiced
				iLine.setQtyInvoiced(oLine.getQtyOrdered().subtract(oLine.getQtyInvoiced()));
				if (oLine.getQtyOrdered().compareTo(oLine.getQtyEntered()) == 0)
					iLine.setQtyEntered(iLine.getQtyInvoiced());
				else
					iLine.setQtyEntered(iLine.getQtyInvoiced().multiply(oLine.getQtyEntered())
							.divide(oLine.getQtyOrdered(), 12, BigDecimal.ROUND_HALF_UP));
				if (!iLine.save(get_Trx()))
				{
					m_processMsg = ""Could not create Invoice Line from Order Line"";
					return null;
				}
			}
		}
		//	Manually Process Invoice
		String status = invoice.completeIt();
		invoice.setDocStatus(status);
		invoice.save(get_Trx());
		setC_CashLine_ID(invoice.getC_CashLine_ID());
		if (!DOCSTATUS_Completed.equals(status))
		{
			m_processMsg = ""@C_Invoice_ID@: "" + invoice.getProcessMsg();
			return null;
		}
		return invoice;
	}	//	createInvoice
"
org.compiere.model.MOrder.createCounterDoc,MOrder.java,"MOrder createCounterDoc()
	{
		//	Is this itself a counter doc ?
		if (getRef_Order_ID() != 0)
			return null;

		//	Org Must be linked to BPartner
		MOrg org = MOrg.get(getCtx(), getAD_Org_ID());
		//jz int counterC_BPartner_ID = org.getLinkedC_BPartner_ID(get_TrxName());
		int counterC_BPartner_ID = org.getLinkedC_BPartner_ID(get_Trx());
		if (counterC_BPartner_ID == 0)
			return null;
		//	Business Partner needs to be linked to Org
		//jz MBPartner bp = MBPartner.get (getCtx(), getC_BPartner_ID());
		MBPartner bp = new MBPartner (getCtx(), getC_BPartner_ID(), get_Trx());
		int counterAD_Org_ID = bp.getAD_OrgBP_ID_Int();
		if (counterAD_Org_ID == 0)
			return null;

		//jz MBPartner counterBP = MBPartner.get (getCtx(), counterC_BPartner_ID);
		MBPartner counterBP = new MBPartner (getCtx(), counterC_BPartner_ID, get_Trx());
		MOrgInfo counterOrgInfo = MOrgInfo.get(getCtx(), counterAD_Org_ID, null);
		log.info(""Counter BP="" + counterBP.getName());

		//	Document Type
		int C_DocTypeTarget_ID = 0;
		MDocTypeCounter counterDT = MDocTypeCounter.getCounterDocType(getCtx(), getC_DocType_ID());
		if (counterDT != null)
		{
			log.fine(counterDT.toString());
			if (!counterDT.isCreateCounter() || !counterDT.isValid())
				return null;
			C_DocTypeTarget_ID = counterDT.getCounter_C_DocType_ID();
		}
		else	//	indirect
		{
			C_DocTypeTarget_ID = MDocTypeCounter.getCounterDocType_ID(getCtx(), getC_DocType_ID());
			log.fine(""Indirect C_DocTypeTarget_ID="" + C_DocTypeTarget_ID);
			if (C_DocTypeTarget_ID <= 0)
				return null;
		}
		//	Deep Copy
		MOrder counter = copyFrom (this, getDateOrdered(),
				C_DocTypeTarget_ID, true, false, get_Trx());
		MDocType dt = MDocType.get(getCtx(), C_DocTypeTarget_ID);
		if (!dt.isDocNoControlled())
			counter.setDocumentNo(getDocumentNo());		//	copy if manual
		//
		counter.setAD_Org_ID(counterAD_Org_ID);
		counter.setM_Warehouse_ID(counterOrgInfo.getM_Warehouse_ID());
		//
		counter.setBPartner(counterBP);
		counter.setDatePromised(getDatePromised());		// default is date ordered
		//	Refernces (Should not be required
		counter.setSalesRep_ID(getSalesRep_ID());
		counter.save(get_Trx());

		//	Update copied lines
		MOrderLine[] counterLines = counter.getLines(true, null);
		for (MOrderLine counterLine : counterLines) {
			counterLine.setOrder(counter);	//	copies header values (BP, etc.)
			counterLine.setPrice();
			counterLine.setTax();
			counterLine.save(get_Trx());
		}
		log.fine(counter.toString());

		//	Document Action
		if (counterDT != null)
		{
			if (counterDT.getDocAction() != null)
			{
				counter.setDocAction(counterDT.getDocAction());
				counter.processIt(counterDT.getDocAction());
				counter.setProcessing(false);
				counter.save(get_Trx());
			}
		}
		return counter;
	}	//	createCounterDoc
"
org.compiere.model.MOrder.voidIt,MOrder.java,"boolean voidIt()
	{
		//if it is a purchase order and has a matching receipt or Invoice, it can not be voided.
		if(!isSOTrx())
			if(isPOMatched())
			{
				m_processMsg=""Cannot void the PO which has a matched Receipt or Invoice"";
				return false;
			}
		MOrderLine[] lines = getLines(true, ""M_Product_ID"");
		log.info(toString());
		for (MOrderLine line : lines) {
			BigDecimal old = line.getQtyOrdered();
			if (old.signum() != 0)
			{
				line.addDescription(Msg.getMsg(getCtx(), ""Voided"") + "" ("" + old + "")"");
				line.setQtyLostSales(old);
				line.setQty(Env.ZERO);
				line.setLineNetAmt(Env.ZERO);
				line.save(get_Trx());
			}
		}
		addDescription(Msg.getMsg(getCtx(), ""Voided""));
		//	Clear Reservations
		if (!reserveStock(null, lines))
		{
			m_processMsg = ""Cannot unreserve Stock (void)"";
			return false;
		}

		if (!createReversals())
			return false;

		setProcessed(true);
		setDocAction(DOCACTION_None);
		return true;
	}	//	voidIt
"
org.compiere.model.MOrder.createReversals,MOrder.java,"boolean createReversals()
	{
		//	Cancel only Sales
		if (!isSOTrx())
			return true;

		log.info("""");
		StringBuffer info = new StringBuffer();

		//	Reverse All *Shipments*
		info.append(""@M_InOut_ID@:"");
		MInOut[] shipments = getShipments(false);	//	get all (line based)
		for (MInOut ship : shipments) {
			//	if closed - ignore
			if (X_M_InOut.DOCSTATUS_Closed.equals(ship.getDocStatus())
					|| X_M_InOut.DOCSTATUS_Reversed.equals(ship.getDocStatus())
					|| X_M_InOut.DOCSTATUS_Voided.equals(ship.getDocStatus()) )
				continue;
			ship.set_Trx(get_Trx());

			//	If not completed - void - otherwise reverse it
			if (!X_M_InOut.DOCSTATUS_Completed.equals(ship.getDocStatus()))
			{
				if (ship.voidIt())
					ship.setDocStatus(X_M_InOut.DOCSTATUS_Voided);
			}
			//	Create new Reversal with only that order
			else if (!ship.isOnlyForOrder(this))
			{
				ship.reverseCorrectIt(this);
				//	shipLine.setDocStatus(MInOut.DOCSTATUS_Reversed);
				info.append("" Parial "").append(ship.getDocumentNo());
			}
			else if (ship.reverseCorrectIt()) //	completed shipment
			{
				ship.setDocStatus(X_M_InOut.DOCSTATUS_Reversed);
				info.append("" "").append(ship.getDocumentNo());
			}
			else
			{
				m_processMsg = ""Could not reverse Shipment "" + ship;
				return false;
			}
			ship.setDocAction(X_M_InOut.DOCACTION_None);
			ship.save(get_Trx());
		}	//	for all shipments

		//	Reverse All *Invoices*
		info.append("" - @C_Invoice_ID@:"");
		MInvoice[] invoices = getInvoices(false);	//	get all (line based)
		for (MInvoice invoice : invoices) {
			//	if closed - ignore
			if (X_C_Invoice.DOCSTATUS_Closed.equals(invoice.getDocStatus())
					|| X_C_Invoice.DOCSTATUS_Reversed.equals(invoice.getDocStatus())
					|| X_C_Invoice.DOCSTATUS_Voided.equals(invoice.getDocStatus()) )
				continue;
			invoice.set_Trx(get_Trx());

			//	If not completed - void - otherwise reverse it
			if (!X_C_Invoice.DOCSTATUS_Completed.equals(invoice.getDocStatus()))
			{
				if (invoice.voidIt())
					invoice.setDocStatus(X_C_Invoice.DOCSTATUS_Voided);
			}
			else if (invoice.reverseCorrectIt())	//	completed invoice
			{
				invoice.setDocStatus(X_C_Invoice.DOCSTATUS_Reversed);
				info.append("" "").append(invoice.getDocumentNo());
			}
			else
			{
				m_processMsg = ""Could not reverse Invoice "" + invoice;
				return false;
			}
			invoice.setDocAction(X_C_Invoice.DOCACTION_None);
			invoice.save(get_Trx());
		}	//	for all shipments

		//	Reverse All *RMAs*
		info.append(""@C_Order_ID@:"");
		MOrder[] rmas = getRMAs();
		for (MOrder rma : rmas) {
			//	if closed - ignore
			if (X_C_Order.DOCSTATUS_Closed.equals(rma.getDocStatus())
					|| X_C_Order.DOCSTATUS_Reversed.equals(rma.getDocStatus())
					|| X_C_Order.DOCSTATUS_Voided.equals(rma.getDocStatus()) )
				continue;
			rma.set_Trx(get_Trx());

			//	If not completed - void - otherwise reverse it
			if (!X_C_Order.DOCSTATUS_Completed.equals(rma.getDocStatus()))
			{
				if (rma.voidIt())
					rma.setDocStatus(X_M_InOut.DOCSTATUS_Voided);
			}
			//	Create new Reversal with only that order
			else if (rma.reverseCorrectIt()) //	completed shipment
			{
				rma.setDocStatus(X_C_Order.DOCSTATUS_Reversed);
				info.append("" "").append(rma.getDocumentNo());
			}
			else
			{
				m_processMsg = ""Could not reverse RMA "" + rma;
				return false;
			}
			rma.setDocAction(X_M_InOut.DOCACTION_None);
			rma.save(get_Trx());
		}	//	for all shipments


		m_processMsg = info.toString();
		return true;
	}	//	createReversals
"
org.compiere.model.MOrder.closeIt,MOrder.java,"boolean closeIt()
	{
		log.info(toString());

		//	Close Not delivered Qty - SO/PO
		MOrderLine[] lines = getLines(true, ""M_Product_ID"");
		for (MOrderLine line : lines) {
			BigDecimal old = line.getQtyOrdered();
			if (old.compareTo(line.getQtyDelivered()) != 0)
			{
				line.setQtyLostSales(line.getQtyOrdered().subtract(line.getQtyDelivered()));
				line.setQtyOrdered(line.getQtyDelivered());
				//	QtyEntered unchanged
				line.addDescription(""Close ("" + old + "")"");
				line.save(get_Trx());
			}
		}
		//	Clear Reservations
		if (!reserveStock(null, lines))
		{
			m_processMsg = ""Cannot unreserve Stock (close)"";
			return false;
		}
		setProcessed(true);
		setDocAction(DOCACTION_None);
		return true;
	}	//	closeIt
"
org.compiere.model.MOrder.reverseCorrectIt,MOrder.java,"boolean reverseCorrectIt()
	{
		log.info(toString());
		return voidIt();
	}	//	reverseCorrectionIt
"
org.compiere.model.MOrder.reverseAccrualIt,MOrder.java,"boolean reverseAccrualIt()
	{
		log.info(toString());
		return false;
	}	//	reverseAccrualIt
"
org.compiere.model.MOrder.reActivateIt,MOrder.java,"boolean reActivateIt()
	{
		log.info(toString());

		MDocType dt = MDocType.get(getCtx(), getC_DocType_ID());
		String DocSubTypeSO = dt.getDocSubTypeSO();

		//	Replace Prepay with POS to revert all doc
		if (X_C_DocType.DOCSUBTYPESO_PrepayOrder.equals (DocSubTypeSO))
		{
			MDocType newDT = null;
			MDocType[] dts = MDocType.getOfClient (getCtx());
			for (MDocType type : dts) {
				if (X_C_DocType.DOCSUBTYPESO_PrepayOrder.equals(type.getDocSubTypeSO()))
				{
					if (type.isDefault() || (newDT == null))
						newDT = type;
				}
			}
			if (newDT == null)
				return false;
			else
			{
				setC_DocType_ID (newDT.getC_DocType_ID());
				setIsReturnTrx(newDT.isReturnTrx());
			}
		}

		//	PO - just re-open
		if (!isSOTrx())
			log.info(""Existing documents not modified - "" + dt);
		//	Reverse Direct Documents
		else if (X_C_DocType.DOCSUBTYPESO_OnCreditOrder.equals(DocSubTypeSO)	//	(W)illCall(I)nvoice
				|| X_C_DocType.DOCSUBTYPESO_WarehouseOrder.equals(DocSubTypeSO)	//	(W)illCall(P)ickup
				|| X_C_DocType.DOCSUBTYPESO_POSOrder.equals(DocSubTypeSO))			//	(W)alkIn(R)eceipt
		{
			if (!createReversals())
				return false;
		}
		else
		{
			log.info(""Existing documents not modified - SubType="" + DocSubTypeSO);
		}

		setDocAction(DOCACTION_Complete);
		setProcessed(false);
		return true;
	}	//	reActivateIt
"
org.compiere.model.MOrder.getSummary,MOrder.java,"String getSummary()
	{
		StringBuffer sb = new StringBuffer();
		sb.append(getDocumentNo());
		//	: Grand Total = 123.00 (#1)
		sb.append("": "").
		append(Msg.translate(getCtx(),""GrandTotal"")).append(""="").append(getGrandTotal());
		if (m_lines != null)
			sb.append("" (#"").append(m_lines.length).append("")"");
		//	 - Description
		if ((getDescription() != null) && (getDescription().length() > 0))
			sb.append("" - "").append(getDescription());
		return sb.toString();
	}	//	getSummary
"
org.compiere.model.MOrder.getProcessMsg,MOrder.java,"String getProcessMsg()
	{
		return m_processMsg;
	}	//	getProcessMsg
"
org.compiere.model.MOrder.getDoc_User_ID,MOrder.java,"int getDoc_User_ID()
	{
		return getSalesRep_ID();
	}	//	getDoc_User_ID
"
org.compiere.model.MOrder.getApprovalAmt,MOrder.java,"BigDecimal getApprovalAmt()
	{
		return getGrandTotal();
	}	//	getApprovalAmt
"
org.compiere.model.MOrder.generateShipment,MOrder.java,"MInOut generateShipment (MDocType dt, Timestamp movementDate)
	{
		log.info(""For "" + dt);
		MInOut shipment = new MInOut (this, dt.getC_DocTypeShipment_ID(), movementDate);
		if (!shipment.save(get_Trx()))
		{
			m_processMsg = ""Could not create Shipment"";
			return null;
		}

		MClient client = MClient.get(getCtx());
		MOrderLine[] olines = getLines (true, null);
		for (MOrderLine oline : olines) {
			//log.fine(""check: "" + line);
			BigDecimal toDeliver = oline.getQtyOrdered()
			.subtract(oline.getQtyDelivered());
			MProduct product = oline.getProduct();

			//	Comments & lines w/o product & services
			if (((product == null) || !product.isStocked())
					&& ((oline.getQtyOrdered().signum() == 0 	//	comments
					)
					|| (toDeliver.signum() != 0)))		//	lines w/o product
			{
				createLine (shipment, oline, toDeliver, null, false);
				continue;
			}

			//	Nothing to Deliver
			if ((product != null) && (toDeliver.signum() == 0))
				continue;

			//	Stored Product
			MProductCategory pc = MProductCategory.get(getCtx(), product.getM_Product_Category_ID());
			String MMPolicy = pc.getMMPolicy();
			if ((MMPolicy == null) || (MMPolicy.length() == 0))
				MMPolicy = client.getMMPolicy();
			//
			MStorage[] storages = MStorage.getWarehouse(getCtx(),
					oline.getM_Warehouse_ID(), oline.getM_Product_ID(), oline.getM_AttributeSetInstance_ID(),
					product.getM_AttributeSet_ID(), oline.getM_AttributeSetInstance_ID()==0, movementDate,
					X_AD_Client.MMPOLICY_FiFo.equals(MMPolicy), get_Trx());


			createLine (shipment, oline, toDeliver, storages, true);
		}	//	for all order lines

		//	Manually Process Shipment
		String status = shipment.completeIt();
		shipment.setDocStatus(status);
		shipment.save(get_Trx());
		if (!DOCSTATUS_Completed.equals(status))
		{
			m_processMsg = ""@M_InOut_ID@: "" + shipment.getProcessMsg();
			return null;
		}
		return shipment;
	}	//	generate
"
org.compiere.model.MOrder.createLine,MOrder.java,"void createLine (MInOut shipment, MOrderLine orderLine, BigDecimal qty,
			MStorage[] storages, boolean force)
	{
		//	Non Inventory Lines
		if (storages == null)
		{
			MInOutLine line = new MInOutLine (shipment);
			line.setOrderLine(orderLine, 0, Env.ZERO);
			line.setQty(qty);	//	Correct UOM
			if (orderLine.getQtyEntered().compareTo(orderLine.getQtyOrdered()) != 0)
				line.setQtyEntered(qty
						.multiply(orderLine.getQtyEntered())
						.divide(orderLine.getQtyOrdered(), 12, BigDecimal.ROUND_HALF_UP));
			line.setLine(orderLine.getLine());
			if (!line.save())
				throw new IllegalStateException(""Could not create Shipment Line"");
			//log.fine(line.toString());
			return;
		}

		//	Product
		MProduct product = orderLine.getProduct();
		boolean linePerASI = false;
		if (product.getM_AttributeSet_ID() != 0)
		{
			MAttributeSet mas = MAttributeSet.get(getCtx(), product.getM_AttributeSet_ID());
			linePerASI = mas.isInstanceAttribute();
		}

		//	Inventory Lines
		ArrayList<MInOutLine> list = new ArrayList<MInOutLine>();
		BigDecimal toDeliver = qty;
		for (MStorage storage : storages) {
			BigDecimal deliver = toDeliver;
			BigDecimal qtyAvailable = storage.getQtyOnHand().subtract(
					storage.getQtyDedicated()).subtract(
							storage.getQtyAllocated());
			if(qtyAvailable.compareTo(Env.ZERO) <= 0)
				continue;

			//	Not enough On Hand
			if (deliver.compareTo(qtyAvailable) > 0 )
			{
				deliver = qtyAvailable;
			}
			if ((deliver.signum() == 0) || (qtyAvailable.signum() <= 0))	//	zero deliver
				continue;
			int M_Locator_ID = storage.getM_Locator_ID();
			//
			MInOutLine line = null;
			if (!linePerASI)	//	find line with Locator
			{
				for (int ll = 0; ll < list.size(); ll++)
				{
					MInOutLine test = list.get(ll);
					if (test.getM_Locator_ID() == M_Locator_ID)
					{
						line = test;
						break;
					}
				}
			}
			if (line == null)	//	new line
			{
				line = new MInOutLine (shipment);
				line.setOrderLine(orderLine, M_Locator_ID, isSOTrx() ? deliver : Env.ZERO);
				line.setQty(deliver);
				list.add(line);
			}
			else				//	existing line
				line.setQty(line.getMovementQty().add(deliver));
			if (orderLine.getQtyEntered().compareTo(orderLine.getQtyOrdered()) != 0)
				line.setQtyEntered(line.getMovementQty().multiply(orderLine.getQtyEntered())
						.divide(orderLine.getQtyOrdered(), 12, BigDecimal.ROUND_HALF_UP));
			if (linePerASI)
				line.setM_AttributeSetInstance_ID(storage.getM_AttributeSetInstance_ID());
			if (!line.save())
				throw new IllegalStateException(""Could not create Shipment Line"");
			//log.fine(""ToDeliver="" + qty + ""/"" + deliver + "" - "" + line);
			toDeliver = toDeliver.subtract(deliver);
			//
			if (toDeliver.signum() == 0)
				break;
		}

		// Force remaining quantity to negative
		if (toDeliver.signum() != 0)
		{
			BigDecimal deliver = toDeliver;
			int M_Locator_ID=0;
			if(storages.length>0)
				M_Locator_ID= storages[0].getM_Locator_ID();
			if (M_Locator_ID == 0)		//	Get default Location
			{
				int M_Warehouse_ID = orderLine.getM_Warehouse_ID();
				M_Locator_ID = MProductLocator.getFirstM_Locator_ID (product, M_Warehouse_ID);
				if (M_Locator_ID == 0)
				{
					MWarehouse wh = MWarehouse.get (getCtx(), M_Warehouse_ID);
					M_Locator_ID = wh.getDefaultM_Locator_ID();
				}
			}
			//
			MInOutLine line = null;
			if (!linePerASI)	//	find line with Locator
			{
				for (int ll = 0; ll < list.size(); ll++)
				{
					MInOutLine test = list.get(ll);
					if (test.getM_Locator_ID() == M_Locator_ID)
					{
						line = test;
						break;
					}
				}
			}
			if (line == null)	//	new line
			{
				line = new MInOutLine (shipment);
				line.setOrderLine(orderLine, M_Locator_ID, isSOTrx() ? deliver : Env.ZERO);
				line.setQty(deliver);
				list.add(line);
			}
			else				//	existing line
				line.setQty(line.getMovementQty().add(deliver));
			if (orderLine.getQtyEntered().compareTo(orderLine.getQtyOrdered()) != 0)
				line.setQtyEntered(line.getMovementQty().multiply(orderLine.getQtyEntered())
						.divide(orderLine.getQtyOrdered(), 12, BigDecimal.ROUND_HALF_UP));
			if (!line.save())
				throw new IllegalStateException(""Could not create Shipment Line"");

		}
	}	//	createLine
"
org.compiere.model.MOrder.getOrderTypeFromTargetDocType,MOrder.java,"String getOrderTypeFromTargetDocType(int windowNo)
	{
		String orderType = ""--"";
		int C_DocTypeTarget_ID = getCtx().getContextAsInt(windowNo, ""C_DocTypeTarget_ID"");

		if( C_DocTypeTarget_ID != 0 )
		{
			String sql = ""SELECT DocSubTypeSO FROM C_DocType WHERE C_DocType_ID=?"";
			try
			{
				PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
				pstmt.setInt(1, C_DocTypeTarget_ID);
				ResultSet rs = pstmt.executeQuery();
				if (rs.next())
					orderType = rs.getString(1);
				rs.close();
				pstmt.close();
			}
			catch (SQLException e)
			{
				log.log(Level.SEVERE, sql, e);
			}
		}

		if(orderType == null)
			return """";

		return orderType;
	}
"
org.compiere.model.MOrder.isPOMatched,MOrder.java,"boolean isPOMatched( )
	{
		String sql = ""SELECT po.C_Orderline_ID FROM M_MatchPO po INNER JOIN C_Orderline o ON (po.C_Orderline_ID=o.C_Orderline_ID) "" +
		""WHERE o.C_Order_ID=? AND po.isActive='Y'"";

		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1,getC_Order_ID());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				rs.close();
				pstmt.close();
				return true;
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		return false;
	}
"
org.compiere.model.MAsset.getFromShipment,MAsset.java,"MAsset getFromShipment (Ctx ctx, int M_InOutLine_ID, Trx trx)
	{
		MAsset retValue = null;
		String sql = ""SELECT * FROM A_Asset WHERE M_InOutLine_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, M_InOutLine_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				retValue = new MAsset (ctx, rs, trx);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return retValue;
	}	//	getFromShipment
"
org.compiere.model.MAsset.getTrial,MAsset.java,"MAsset getTrial(Ctx ctx, MUser user, String entityType)
	{
		if (user == null)
		{
			s_log.warning(""Cannot create Trial - No User"");
			return null;
		}
		if (Util.isEmpty(entityType))
		{
			s_log.warning(""Cannot create Trial - No Entity Type"");
			return null;
		}
		MProduct product = MProduct.getTrial(ctx, entityType);
		if (product == null)
		{
			s_log.warning(""No Trial for Entity Type="" + entityType);
			return null;
		}
		//
		Timestamp now = new Timestamp(System.currentTimeMillis()); 
		//
		MAsset asset = new MAsset(ctx, 0, null);
		asset.setClientOrg(user);
		asset.setAssetServiceDate(now);
		asset.setIsOwned(false);
		asset.setIsTrialPhase(true);
		//
		MBPartner partner = new MBPartner (ctx, user.getC_BPartner_ID(), null);
		String documentNo = ""Trial"";
		//	Value
		String value = partner.getValue() + ""_"" + product.getValue();
		if (value.length() > 40-documentNo.length())
			value = value.substring(0,40-documentNo.length()) + documentNo;
		asset.setValue(value);
		//	Name		MProduct.afterSave
		String name = ""Trial "" + partner.getName() + "" - "" + product.getName();
		if (name.length() > 60)
			name = name.substring(0,60);
		asset.setName(name);
		//	Description
		String description = product.getDescription();
		asset.setDescription(description);

		//	User
		asset.setAD_User_ID(user.getAD_User_ID());
		asset.setC_BPartner_ID(user.getC_BPartner_ID());
		//	Product
		asset.setM_Product_ID(product.getM_Product_ID());
		asset.setA_Asset_Group_ID(product.getA_Asset_Group_ID());
		asset.setQty(new BigDecimal(product.getSupportUnits()));
		//	Guarantee & Version
		asset.setGuaranteeDate(TimeUtil.addDays(now, product.getTrialPhaseDays()));
		asset.setVersionNo(product.getVersionNo());
		//
		return asset;
	}	//	getTrial
"
org.compiere.model.MAsset.getOfGroup,MAsset.java,"ArrayList<MAsset> getOfGroup(MAssetGroup ag, boolean isOwned)
	{
		String sql = ""SELECT * FROM A_Asset ""
			+ ""WHERE A_Asset_Group_ID=?""
			+ "" AND IsOwned="" + (isOwned ? ""'Y'"" : ""'N'"") 
			+ "" ORDER BY A_Asset_ID"";
		ArrayList<MAsset> list = new ArrayList<MAsset>();
        PreparedStatement pstmt = null;
        try
        {
	        pstmt = DB.prepareStatement(sql, (Trx) null);
	        pstmt.setInt(1, ag.getA_Asset_Group_ID());
	        ResultSet rs = pstmt.executeQuery();
	        while (rs.next())
		        list.add(new MAsset(ag.getCtx(), rs, null));
	        rs.close();
	        pstmt.close();
	        pstmt = null;
        }
        catch (Exception e)
        {
        	s_log.log(Level.SEVERE, sql, e);
        }
        try
        {
	        if (pstmt != null)
		        pstmt.close();
	        pstmt = null;
        }
        catch (Exception e)
        {
	        pstmt = null;
        }
        return list;
	}	//	getOfGroup
"
org.compiere.model.MAsset.setValueNameDescription,MAsset.java,"void setValueNameDescription(MInOut shipment, MInOutLine line, 
		int deliveryCount)
	{
		MProduct product = line.getProduct(); 
		MBPartner partner = shipment.getBPartner();
		setValueNameDescription(shipment, deliveryCount, product, partner);
	}	//	setValueNameDescription
"
org.compiere.model.MAsset.setValueNameDescription,MAsset.java,"void setValueNameDescription (MInOut shipment,  
		int deliveryCount, MProduct product, MBPartner partner)
	{
		String documentNo = ""_"" + shipment.getDocumentNo();
		if (deliveryCount > 1)
			documentNo += ""_"" + deliveryCount;
		//	Value
		String value = partner.getValue() + ""_"" + product.getValue();
		if (value.length() > 40-documentNo.length())
			value = value.substring(0,40-documentNo.length()) + documentNo;
		setValue(value);
		
		//	Name		MProduct.afterSave
		String name = partner.getName() + "" - "" + product.getName();
		if (name.length() > 60)
			name = name.substring(0,60);
		setName(name);
		//	Description
		String description = product.getDescription();
		setDescription(description);
	}	//	setValueNameDescription
"
org.compiere.model.MAsset.addDescription,MAsset.java,"void addDescription (String description)
	{
		String desc = getDescription();
		if (desc == null)
			setDescription(description);
		else
			setDescription(desc + "" | "" + description);
	}	//	addDescription
"
org.compiere.model.MAsset.getQty,MAsset.java,"BigDecimal getQty()
	{
		BigDecimal qty = super.getQty();
		if (qty == null || qty.equals(Env.ZERO))
			setQty(Env.ONE);
		return super.getQty();
	}	//	getQty
"
org.compiere.model.MAsset.setQty,MAsset.java,"void setQty(BigDecimal Qty, int multiplier)
	{
		if (multiplier == 0)
			multiplier = 1;
		BigDecimal mm = new BigDecimal(multiplier);
		mm = Qty.multiply(mm);
		super.setQty (mm);
	}	//	setQty
"
org.compiere.model.MAsset.setQty,MAsset.java,"void setQty()
	{
	//	UPDATE M_Product SET SupportUnits=1 WHERE SupportUnits IS NULL OR SupportUnits<1;
	//	UPDATE A_Asset a SET Qty = (SELECT l.MovementQty * p.SupportUnits FROM M_InOutLine l, M_Product p WHERE a.M_InOutLine_ID=l.M_InOutLine_ID AND a.M_Product_ID=p.M_Product_ID) WHERE a.M_Product_ID IS NOT NULL AND a.M_InOutLine_ID IS NOT NULL;
		BigDecimal Qty = Env.ONE;
		if (getM_InOutLine_ID() != 0)
		{
			MInOutLine line = new MInOutLine(getCtx(), getM_InOutLine_ID(), get_Trx ());
			Qty = line.getMovementQty();
		}
		int multiplier = getProduct().getSupportUnits();
		BigDecimal mm = new BigDecimal(multiplier);
		super.setQty (Qty.multiply(mm));
	}	//	setQty
"
org.compiere.model.MAsset.toString,MAsset.java,"String toString()
	{
		StringBuffer sb = new StringBuffer (""MAsset["")
			.append (get_ID ())
			.append(""-"").append(getValue())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MAsset.getDeliveries,MAsset.java,"MAssetDelivery[] getDeliveries()
	{
		ArrayList<MAssetDelivery> list = new ArrayList<MAssetDelivery>();

		String sql = ""SELECT * FROM A_Asset_Delivery WHERE A_Asset_ID=? ORDER BY Created DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getA_Asset_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MAssetDelivery(getCtx(), rs, get_Trx()));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		//
		MAssetDelivery[] retValue = new MAssetDelivery[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getDeliveries
"
org.compiere.model.MAsset.getDeliveryCount,MAsset.java,"int getDeliveryCount()
	{
		String sql = ""SELECT COUNT(*) FROM A_Asset_Delivery WHERE A_Asset_ID=?"";
		return DB.getSQLValue(get_Trx(),
			sql, getA_Asset_ID());
	}	//	getDeliveries
"
org.compiere.model.MAsset.isDownloadable,MAsset.java,"boolean isDownloadable()
	{
		if (isActive(true))
		{
			getProduct();
			return m_product != null
				&& m_product.hasDownloads();
		}
		//
		return false;
	}	//	isDownloadable
"
org.compiere.model.MAsset.isActive,MAsset.java,"boolean isActive (boolean checkDate)
	{
		if (!checkDate)
			return isActive();
		if (!isActive())
			return false;
			
		//	Guarantee Date
		Timestamp guarantee = getGuaranteeDate();
		if (guarantee == null)
			return false;
		guarantee = TimeUtil.getDay(guarantee);
		Timestamp now = TimeUtil.getDay(System.currentTimeMillis());
		//	valid
		return !now.after(guarantee);	//	not after guarantee date
	}	//	isActive
"
org.compiere.model.MAsset.getProductVersionNo,MAsset.java,"String getProductVersionNo()
	{
		return getProduct().getVersionNo();
	}	//	getProductVersionNo
"
org.compiere.model.MAsset.getProductR_MailText_ID,MAsset.java,"int getProductR_MailText_ID()
	{
		return getProduct().getR_MailText_ID();
	}	//	getProductR_MailText_ID
"
org.compiere.model.MAsset.getProduct,MAsset.java,"MProduct getProduct()
	{
		if (m_product == null)
			m_product = MProduct.get (getCtx(), getM_Product_ID()); 
		return m_product;
	}	//	getProductInfo
"
org.compiere.model.MAsset.getProductDownloads,MAsset.java,"MProductDownload[] getProductDownloads()
	{
		if (m_product == null)
			getProduct();
		if (m_product != null)
			return m_product.getProductDownloads(false);
		return null;
	}	//	getProductDownloads
"
org.compiere.model.MAsset.getDownloadNames,MAsset.java,"String[] getDownloadNames()
	{
		MProductDownload[] dls = getProductDownloads();
		if (dls != null && dls.length > 0)
		{
			String[] retValue = new String[dls.length];
			for (int i = 0; i < retValue.length; i++)
				retValue[i] = dls[i].getName();
			log.fine(""#"" + dls.length);
			return retValue;
		}
		return new String[]{};
	}	//	addlDownloadNames
"
org.compiere.model.MAsset.getDownloadURLs,MAsset.java,"String[] getDownloadURLs()
	{
		MProductDownload[] dls = getProductDownloads();
		if (dls != null && dls.length > 0)
		{
			String[] retValue = new String[dls.length];
			for (int i = 0; i < retValue.length; i++)
			{
				String url = dls[i].getDownloadURL();
				int pos = Math.max(url.lastIndexOf('/'), url.lastIndexOf('\\'));
				if (pos != -1)
					url = url.substring(pos+1);
				retValue[i] = url;
			}
			return retValue;
		}
		return new String[]{};
	}	//	addlDownloadURLs
"
org.compiere.model.MAsset.getAssetGroup,MAsset.java,"MAssetGroup getAssetGroup()
	{
		return MAssetGroup.get (getCtx(), getA_Asset_Group_ID());
	}	//	getAssetGroup
"
org.compiere.model.MAsset.getSupportLevel,MAsset.java,"String getSupportLevel()
	{
		return getAssetGroup().getSupportLevel();
	}	//	getSupportLevel
"
org.compiere.model.MAsset.beforeSave,MAsset.java,"boolean beforeSave (boolean newRecord)
	{
		getQty();		//	set to 1
		return true;
	}	//	beforeSave
"
org.compiere.model.MAsset.confirmDelivery,MAsset.java,"MAssetDelivery confirmDelivery (EMail email, int AD_User_ID)
	{
		setVersionNo(getProductVersionNo());
		MAssetDelivery ad = new MAssetDelivery (this, email, null, AD_User_ID);
		return ad;
	}	//	confirmDelivery
"
org.compiere.model.MAsset.confirmDelivery,MAsset.java,"MAssetDelivery confirmDelivery (HttpServletRequest request, int AD_User_ID)
	{
		setVersionNo(getProductVersionNo());
		setLifeUseUnits(getLifeUseUnits().add(Env.ONE));
		MAssetDelivery ad = new MAssetDelivery (this, request, AD_User_ID);
		return ad;
	}	//	confirmDelivery
"
org.compiere.model.MMediaServer.getMediaServer,MMediaServer.java,"MMediaServer[] getMediaServer (MWebProject project)
	{
		ArrayList<MMediaServer> list = new ArrayList<MMediaServer>();
		PreparedStatement pstmt = null;
		String sql = ""SELECT * FROM CM_Media_Server WHERE CM_WebProject_ID=? ORDER BY CM_Media_Server_ID"";
		try
		{
			pstmt = DB.prepareStatement (sql, project.get_Trx());
			pstmt.setInt (1, project.getCM_WebProject_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				list.add (new MMediaServer (project.getCtx(), rs, project.get_Trx()));
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MMediaServer[] retValue = new MMediaServer[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getMediaServer
"
org.compiere.model.MMediaServer.getWebProject,MMediaServer.java,"MWebProject getWebProject()
	{
		if (m_project==null) 
			m_project = new MWebProject(getCtx(), getCM_WebProject_ID (), get_Trx ());
		return m_project;
	}
"
org.compiere.model.MMediaServer.reDeployAll,MMediaServer.java,"void reDeployAll () 
	{
		MMedia[] media = MMedia.getMedia (getWebProject());
		if (media!=null && media.length>0)
		{
			for (MMedia element : media) {
				MMediaDeploy thisDeploy = MMediaDeploy.getByMedia (getCtx(), element.get_ID (), get_ID(), true, null);
				if (thisDeploy.isDeployed ())
				{
					log.log (Level.FINE, ""Reset Deployed Flag on MediaItem"" + element.get_ID());
					thisDeploy.setIsDeployed (false);
					thisDeploy.save ();
				}
			}
		}
	}
"
org.compiere.model.MMediaServer.deploy,MMediaServer.java,"boolean deploy ()
	{
		MMedia[] media = MMedia.getMediaToDeploy(getCtx(), this.get_ID (), get_Trx());

		// Check whether the host is our example localhost, we will not deploy locally, but this is no error
		if (this.getIP_Address().equals(""127.0.0.1"") || this.getName().equals(""localhost"")) {
			log.warning(""You have not defined your own server, we will not really deploy to localhost!"");
			return true;
		}

		FTPClient ftp = new FTPClient();
		try
		{
			ftp.connect (getIP_Address());
			if (ftp.login (getUserName(), getPassword()))
				log.info(""Connected to "" + getIP_Address() + "" as "" + getUserName());
			else
			{
				log.warning(""Could NOT connect to "" + getIP_Address() + "" as "" + getUserName());
				return false;
			}
		}
		catch (Exception e)
		{
			log.log(Level.WARNING, ""Could NOT connect to "" + getIP_Address() 
				+ "" as "" + getUserName(), e);
			return false;
		}

		boolean success = true;
		String cmd = null;
		//	List the files in the directory
		try
		{
			cmd = ""cwd"";
			ftp.changeWorkingDirectory (getFolder());
			//
			cmd = ""list"";
			String[] fileNames = ftp.listNames();
			log.log(Level.FINE, ""Number of files in "" + getFolder() + "": "" + fileNames.length);
			
			/*
			FTPFile[] files = ftp.listFiles();
			log.config(""Number of files in "" + getFolder() + "": "" + files.length);
			for (int i = 0; i < files.length; i++)
				log.fine(files[i].getTimestamp() + "" \t"" + files[i].getName());*/
			//
			cmd = ""bin"";
			ftp.setFileType(FTP.BINARY_FILE_TYPE);
			//
			for (int i = 0; i < media.length; i++)
			{
				MMediaDeploy thisDeployment = MMediaDeploy.getByMedia (getCtx(), media[i].get_ID (), this.get_ID (), false, get_Trx());
				if (!media[i].isSummary() && media[i].getMediaType ()!=null) {
					log.log(Level.INFO, "" Deploying Media Item: "" + media[i].toString());
					MImage thisImage = media[i].getImage();
		
					// Open the file and output streams
					byte[] buffer = thisImage.getData();
					ByteArrayInputStream is = new ByteArrayInputStream(buffer);

					String fileName = media[i].get_ID() + media[i].getExtension();
					cmd = ""put "" + fileName;
					ftp.storeFile(fileName, is);
					is.close();
					thisDeployment.setIsDeployed (true);
					thisDeployment.save ();
				}
			}
		}
		catch (Exception e)
		{
			log.log(Level.WARNING, cmd, e);
			success = false;
		}
		//	Logout from the FTP Server and disconnect
		try
		{
			cmd = ""logout"";
			ftp.logout();
			log.log(Level.FINE, "" FTP logged out"");
			cmd = ""disconnect"";
			ftp.disconnect();
		}
		catch (Exception e)
		{
			log.log(Level.WARNING, cmd, e);
		}
		ftp = null;
		return success;
	}	//	deploy
"
org.compiere.model.MMediaServer.deleteMediaItem,MMediaServer.java,"boolean deleteMediaItem (MMedia t_media)
	{
		// Check whether the host is our example localhost, we will not deploy locally, but this is no error
		if (this.getIP_Address().equals(""127.0.0.1"") || this.getName().equals(""localhost"")) {
			log.warning(""You have not defined your own server, we will not really deploy to localhost!"");
			return true;
		}

		FTPClient ftp = new FTPClient();
		try
		{
			ftp.connect (getIP_Address());
			if (ftp.login (getUserName(), getPassword()))
				log.info(""Connected to "" + getIP_Address() + "" as "" + getUserName());
			else
			{
				log.warning(""Could NOT connect to "" + getIP_Address() + "" as "" + getUserName());
				return false;
			}
		}
		catch (Exception e)
		{
			log.log(Level.WARNING, ""Could NOT connect to "" + getIP_Address() 
				+ "" as "" + getUserName(), e);
			return false;
		}

		boolean success = true;
		String cmd = null;
		//	List the files in the directory
		try
		{
			cmd = ""cwd"";
			ftp.changeWorkingDirectory (getFolder());
			//
			if (!t_media.isSummary()) {
				log.log(Level.INFO, "" Deleting Media Item:"" + t_media.get_ID() + t_media.getExtension());
				ftp.dele (t_media.get_ID() + t_media.getExtension());
			}
		}
		catch (Exception e)
		{
			log.log(Level.WARNING, cmd, e);
			success = false;
		}
		//	Logout from the FTP Server and disconnect
		try
		{
			cmd = ""logout"";
			ftp.logout();
			cmd = ""disconnect"";
			ftp.disconnect();
		}
		catch (Exception e)
		{
			log.log(Level.WARNING, cmd, e);
		}
		ftp = null;
		return success;
	}	//	deploy
"
org.compiere.model.MMediaServer.toString,MMediaServer.java,"String toString() 
	{
		StringBuffer sb = new StringBuffer (""MMediaServer["")
		.append (get_ID()).append (""-"").append (getName()).append (""]"");
		return sb.toString ();
	}
"
org.compiere.model.MCStageElement.getByName,MCStageElement.java,"MCStageElement getByName (Ctx ctx, int CM_CStage_ID, String elementName, Trx trx)
	{
		String sql = ""SELECT * FROM CM_CStage_Element WHERE CM_CStage_ID=? AND Name LIKE ?"";
		MCStageElement thisElement = null;
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, CM_CStage_ID);
			pstmt.setString (2, elementName);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				thisElement = new MCStageElement(ctx, rs, trx);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, ""getByName"", e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return thisElement;
	}	//	getByName
"
org.compiere.model.MCStageElement.getParent,MCStageElement.java,"MCStage getParent() 
	{
		if (m_parent!=null)
			return m_parent;
		m_parent = new MCStage(getCtx(), getCM_CStage_ID (), get_Trx ());
		return m_parent;
	}
"
org.compiere.model.MCStageElement.afterSave,MCStageElement.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!success)
			return success;
		if (!getParent().isModified ()) 
		{
			getParent().setIsModified (true);
			getParent().save ();
		}
		return success;
	}	//	afterSave
"
org.compiere.model.MLdapUser.reset,MLdapUser.java,"void reset()
	{
		org = null;
		orgUnit = null;
		passwd = null;
		userId = null;
		errStr = null;
	}  // reset()
"
org.compiere.model.MLdapUser.setOrg,MLdapUser.java,"void setOrg(String org)
	{
		this.org = org;
	}  // setOrg()
"
org.compiere.model.MLdapUser.setOrgUnit,MLdapUser.java,"void setOrgUnit(String orgUnit)
	{
		this.orgUnit = orgUnit;
	}  // setOrg()
"
org.compiere.model.MLdapUser.setPassword,MLdapUser.java,"void setPassword(String passwd)
	{
		this.passwd = passwd;
	}  // setPassword()
"
org.compiere.model.MLdapUser.setUserId,MLdapUser.java,"void setUserId(String userId)
	{
		this.userId = userId;
	}  // setUserId()
"
org.compiere.model.MLdapUser.setErrorString,MLdapUser.java,"void setErrorString(String errStr)
	{
		this.errStr = errStr;
	}  // setErrorStr()
"
org.compiere.model.MLdapUser.getOrg,MLdapUser.java,"String getOrg()
	{
		return org;
	}  // getOrg()
"
org.compiere.model.MLdapUser.getOrgUnit,MLdapUser.java,"String getOrgUnit()
	{
		return orgUnit;
	}  // getOrgUnit()
"
org.compiere.model.MLdapUser.getPassword,MLdapUser.java,"String getPassword()
	{
		return passwd;
	}  // getPassword()
"
org.compiere.model.MLdapUser.getUserId,MLdapUser.java,"String getUserId()
	{
		return userId;
	}  // getUserId()
"
org.compiere.model.MLdapUser.getErrorMsg,MLdapUser.java,"String getErrorMsg()
	{
		return errStr;
	}  // getErrorString()
"
org.compiere.model.MRegistration.getAttributes,MRegistration.java,"MRegistrationAttribute[] getAttributes()
	{
		if (m_allAttributes == null)
			m_allAttributes = MRegistrationAttribute.getAll(getCtx());
		return m_allAttributes;
	}	//	getAttributes
"
org.compiere.model.MRegistration.getValues,MRegistration.java,"MRegistrationValue[] getValues()
	{
		return getValues (true);
	}	//	getValues
"
org.compiere.model.MRegistration.getValues,MRegistration.java,"MRegistrationValue[] getValues (boolean onlySelfService)
	{
		createMissingValues();
		//
		String sql = ""SELECT * FROM A_RegistrationValue rv ""
			+ ""WHERE A_Registration_ID=?"";
		if (onlySelfService)
			sql += "" AND EXISTS (SELECT * FROM A_RegistrationAttribute ra WHERE rv.A_RegistrationAttribute_ID=ra.A_RegistrationAttribute_ID""
				+ "" AND ra.IsActive='Y' AND ra.IsSelfService='Y')"";
	//	sql += "" ORDER BY A_RegistrationAttribute_ID"";
				
		ArrayList<MRegistrationValue> list = new ArrayList<MRegistrationValue>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getA_Registration_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MRegistrationValue(getCtx(), rs, get_Trx()));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//	Convert and Sort
		MRegistrationValue[] retValue = new MRegistrationValue[list.size()];
		list.toArray(retValue);
		Arrays.sort(retValue);
		return retValue;
	}	//	getValues
"
org.compiere.model.MRegistration.createMissingValues,MRegistration.java,"void createMissingValues()
	{
		String sql = ""SELECT ra.A_RegistrationAttribute_ID ""
			+ ""FROM A_RegistrationAttribute ra""
			+ "" LEFT OUTER JOIN A_RegistrationProduct rp ON (rp.A_RegistrationAttribute_ID=ra.A_RegistrationAttribute_ID)""
			+ "" LEFT OUTER JOIN A_Registration r ON (r.M_Product_ID=rp.M_Product_ID) ""
			+ ""WHERE r.A_Registration_ID=?""
			//	Not in Registration
			+ "" AND NOT EXISTS (SELECT A_RegistrationAttribute_ID FROM A_RegistrationValue v ""
				+ ""WHERE ra.A_RegistrationAttribute_ID=v.A_RegistrationAttribute_ID AND r.A_Registration_ID=v.A_Registration_ID)"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getA_Registration_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				MRegistrationValue v = new MRegistrationValue (this, rs.getInt(1), ""?"");
				v.save();
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, null, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
	}	//	createMissingValues
"
org.compiere.model.MRegistration.loadAttributeValues,MRegistration.java,"int loadAttributeValues (HttpServletRequest request)
	{
		//	save if not saved
		if (get_ID() == 0)
			save();
		int updatecount = 0;
		int insertcount = 0;
		
		//	read values for all attributes
		MRegistrationAttribute[] attributes = getAttributes();
		MRegistrationValue[] values = getValues(false);

		for (MRegistrationAttribute attribute : attributes) {
			String value = WebUtil.getParameter (request, attribute.getName());
			if (value == null)
				continue;
			boolean insert = true;
			for (MRegistrationValue regValue : values) {
				String attributeName = regValue.getRegistrationAttribute();
				if (attributeName==attribute.getName()){
					insert = false;
					String prev = regValue.getName();
					if (prev == null || (prev!=null && !prev.equals(value)))
						regValue.setDescription(""Previous="" + prev);
					regValue.setName(value);
					if (regValue.save())
						updatecount++;
					break;
				}
			}
			if (insert){
				MRegistrationValue regValue = new MRegistrationValue (this, 
						attribute.getA_RegistrationAttribute_ID(), value);
					if (regValue.save())
						insertcount++;
				
			}
		}
		log.fine(""loaded "" + insertcount + "" (of "" + attributes.length + "") new attributes"");
		log.fine(""updated ""+ updatecount + "" (of "" + values.length + "") existing attributes"");
		return updatecount+insertcount;
	}	//	loadAttributeValues
"
org.compiere.model.MBPRelation.get,MBPRelation.java,"MBPRelation[] get (Ctx ctx, int C_BPartner_ID, int C_BPartnerRelation_ID)
	{
		ArrayList<MBPRelation> list = new ArrayList<MBPRelation>();
		String sql = ""SELECT * FROM C_BP_Relation WHERE C_BPartner_ID=?"";
		if (C_BPartnerRelation_ID != 0)	
			sql += "" AND C_BPartnerRelation_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_BPartner_ID);
			if (C_BPartnerRelation_ID != 0)
				pstmt.setInt(2, C_BPartnerRelation_ID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MBPRelation(ctx, rs, null));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MBPRelation[] retValue = new MBPRelation[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MBPRelation.getAll,MBPRelation.java,"MBPRelation[] getAll (Ctx ctx, int C_BPartner_ID, int C_BPartnerRelation_ID)
	{
		ArrayList<MBPRelation> list = new ArrayList<MBPRelation>();
		String sql = ""SELECT * FROM C_BP_Relation WHERE C_BPartner_ID IN(?,?)""
			+ "" AND C_BPartnerRelation_ID IN(?,?)"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_BPartner_ID);
			pstmt.setInt(2, C_BPartnerRelation_ID);
			pstmt.setInt(3, C_BPartner_ID);
			pstmt.setInt(4, C_BPartnerRelation_ID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MBPRelation(ctx, rs, null));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MBPRelation[] retValue = new MBPRelation[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getAll
"
org.compiere.model.MStatus.get,MStatus.java,"MStatus get (Ctx ctx, int R_Status_ID)
	{
		if (R_Status_ID == 0)
			return null;
		Integer key = Integer.valueOf (R_Status_ID);
		MStatus retValue = s_cache.get(ctx, key);
		if (retValue == null)
		{
			retValue = new MStatus (ctx, R_Status_ID, null);
			s_cache.put(key, retValue);
		}
		return retValue;
	}	//	get
"
org.compiere.model.MStatus.getDefault,MStatus.java,"MStatus getDefault (Ctx ctx, int R_RequestType_ID)
	{
		Integer key = Integer.valueOf(R_RequestType_ID);
		MStatus retValue = s_cacheDefault.get(ctx, key);
		if (retValue != null)
			return retValue;
		//	Get New
		String sql = ""SELECT * FROM R_Status s ""
			+ ""WHERE EXISTS (SELECT * FROM R_RequestType rt ""
				+ ""WHERE rt.R_StatusCategory_ID=s.R_StatusCategory_ID""
				+ "" AND rt.R_RequestType_ID=?)""
			+ "" AND IsDefault='Y' ""
			+ ""ORDER BY SeqNo"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, R_RequestType_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				retValue = new MStatus (ctx, rs, null);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			s_log.log(Level.SEVERE, sql, ex);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;
		if (retValue != null)
			s_cacheDefault.put(key, retValue);
		return retValue;
	}	//	getDefault
"
org.compiere.model.MStatus.getClosed,MStatus.java,"MStatus[] getClosed (Ctx ctx, int R_StatusCategory_ID)
	{
		int AD_Client_ID = ctx.getAD_Client_ID();
		String sql = ""SELECT * FROM R_Status ""
			+ ""WHERE AD_Client_ID=? AND IsActive='Y' AND IsClosed='Y' ""
			+ "" AND R_StatusCategory_ID=? ""
			+ ""ORDER BY Value"";
		ArrayList<MStatus> list = new ArrayList<MStatus>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, AD_Client_ID);
			pstmt.setInt(2, R_StatusCategory_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				list.add(new MStatus (ctx, rs, null));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			s_log.log(Level.SEVERE, sql, ex);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;
		MStatus[] retValue = new MStatus[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MStatus.isRequestType,MStatus.java,"boolean isRequestType (int R_RequestType_ID)
	{
		if (R_RequestType_ID == 0)
			return false;
		MRequestType rt = MRequestType.get(getCtx(), R_RequestType_ID);
		if (rt.getR_RequestType_ID() != R_RequestType_ID)
			return false;
		return rt.getR_StatusCategory_ID() == getR_StatusCategory_ID();
	}	//	isRequestType
"
org.compiere.model.MStatus.beforeSave,MStatus.java,"boolean beforeSave (boolean newRecord)
	{
		if (isOpen() && isClosed())
			setIsClosed(false);
		if (isFinalClose() && !isClosed())
			setIsFinalClose(false);
		//
		if (!isWebCanUpdate() && getUpdate_Status_ID() != 0)
			setUpdate_Status_ID(0);
		if (getTimeoutDays() == 0 && getNext_Status_ID() != 0)
			setNext_Status_ID(0);
		//
		return true;
	}	//	beforeSave
"
org.compiere.model.MStatus.toString,MStatus.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MStatus["");
		sb.append(get_ID()).append(""-"").append(getName())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MMediaDeploy.getByMediaAndProject,MMediaDeploy.java,"MMediaDeploy [] getByMediaAndProject(Ctx ctx, int CM_Media_ID, MWebProject thisProject, boolean createIfMissing, Trx trx) 
	{
		ArrayList<MMediaDeploy> list = new ArrayList<MMediaDeploy>();
		MMediaServer[] theseServers = MMediaServer.getMediaServer (thisProject);
		if (theseServers!=null && theseServers.length>0)
			for (MMediaServer element : theseServers) {
				list.add (getByMedia(ctx,CM_Media_ID,element.get_ID (),createIfMissing, trx));
			}
		MMediaDeploy[] retValue = new MMediaDeploy[list.size ()];
		list.toArray (retValue);
		return retValue;
	}
"
org.compiere.model.MMediaDeploy.getServer,MMediaDeploy.java,"MMediaServer getServer() 
	{
		if (m_mserver==null)
			m_mserver = new MMediaServer(getCtx(), getCM_Media_Server_ID (), get_Trx());
		return m_mserver;
	}
"
org.compiere.model.MMediaDeploy.getByMedia,MMediaDeploy.java,"MMediaDeploy getByMedia(Ctx ctx, int CM_Media_ID, int CM_Media_Server_ID, boolean createIfMissing, Trx trx) {
		MMediaDeploy thisMMediaDeploy = null;
		String sql = ""SELECT * FROM CM_MediaDeploy WHERE CM_Media_ID=? AND CM_Media_Server_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, trx);
			pstmt.setInt (1, CM_Media_ID);
			pstmt.setInt (2, CM_Media_Server_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				thisMMediaDeploy = (new MMediaDeploy(ctx, rs, trx));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		if (thisMMediaDeploy == null && createIfMissing)
		{
			thisMMediaDeploy = new MMediaDeploy(ctx, 0, trx);
			thisMMediaDeploy.setCM_Media_Server_ID (CM_Media_Server_ID);
			thisMMediaDeploy.setCM_Media_ID (CM_Media_ID);
			thisMMediaDeploy.setIsDeployed (false);
			thisMMediaDeploy.setLastSynchronized (null);
			thisMMediaDeploy.save ();
		}	
		return thisMMediaDeploy;
	}
"
org.compiere.model.MPaySelectionLine.getOfInvoiceCheck,MPaySelectionLine.java,"MPaySelectionLine getOfInvoiceCheck (Ctx ctx, int C_Invoice_ID, int C_PaySelectionCheck_ID, Trx trx)
	{
		MPaySelectionLine retValue = null;
		String sql = ""SELECT * FROM C_PaySelectionLine WHERE C_Invoice_ID=? AND C_PaySelectionCheck_ID=? AND COALESCE(IsCancelled,'N')='N'"";
		int count = 0;
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, C_Invoice_ID);
			pstmt.setInt (2, C_PaySelectionCheck_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MPaySelectionLine psl = new MPaySelectionLine (ctx, rs, trx);
				if (retValue == null)
					retValue = psl;
				else if (!retValue.isProcessed() && psl.isProcessed())
					retValue = psl;
				count++;
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e); 
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		if (count > 1)
			s_log.warning (""More then one for C_Invoice_ID="" + C_Invoice_ID + "", C_PaySelectionCheck_ID="" + C_PaySelectionCheck_ID);
		return retValue;
	}	//	getOfPayment
"
org.compiere.model.MPaySelectionLine.setInvoice,MPaySelectionLine.java,"void setInvoice (int C_Invoice_ID, boolean isSOTrx, BigDecimal OpenAmt, 
		BigDecimal PayAmt, BigDecimal DiscountAmt)
	{
		setC_Invoice_ID (C_Invoice_ID);
		setIsSOTrx(isSOTrx);
		setOpenAmt(OpenAmt);
		setPayAmt (PayAmt);
		setDiscountAmt(DiscountAmt);
		setDifferenceAmt(OpenAmt.subtract(PayAmt).subtract(DiscountAmt));
	}	//	setInvoice
"
org.compiere.model.MPaySelectionLine.setC_Invoice_ID,MPaySelectionLine.java,"void setC_Invoice_ID (String oldC_Invoice_ID, 
			String newC_Invoice_ID, int windowNo) throws Exception
	{
		if (newC_Invoice_ID == null || newC_Invoice_ID.length() == 0)
			return;
		int C_Invoice_ID = Integer.parseInt(newC_Invoice_ID);
		//  reset as dependent fields get reset
		//p_changeVO.setContext(getCtx(), windowNo, ""C_Invoice_ID"", C_Invoice_ID);
		getCtx().setContext(windowNo, ""C_Invoice_ID"", C_Invoice_ID);
		setC_Invoice_ID(C_Invoice_ID);
		if (C_Invoice_ID == 0)
		{
			setPayAmt(Env.ZERO);
			setDiscountAmt(Env.ZERO);
			setDifferenceAmt(Env.ZERO);
			return;
		}

		int C_BankAccount_ID = getCtx().getContextAsInt(windowNo, ""C_BankAccount_ID"");
		Timestamp PayDate = new Timestamp(getCtx().getContextAsTime(windowNo, ""PayDate""));

		BigDecimal OpenAmt = Env.ZERO;
		BigDecimal DiscountAmt = Env.ZERO;
		boolean IsSOTrx = Boolean.FALSE;
		String sql = ""SELECT currencyConvert(invoiceOpen(i.C_Invoice_ID, 0), i.C_Currency_ID,""
				+ ""ba.C_Currency_ID, i.DateInvoiced, i.C_ConversionType_ID, i.AD_Client_ID, i.AD_Org_ID),""
			+ "" paymentTermDiscount(i.GrandTotal,i.C_Currency_ID,i.C_PaymentTerm_ID,i.DateInvoiced, ?), i.IsSOTrx "" // #1
			+ ""FROM C_Invoice_v i, C_BankAccount ba ""
			+ ""WHERE i.C_Invoice_ID=? AND ba.C_BankAccount_ID=?"";	//	#2..3
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setTimestamp(1, PayDate);
			pstmt.setInt(2, C_Invoice_ID);
			pstmt.setInt(3, C_BankAccount_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				OpenAmt = rs.getBigDecimal(1);
				DiscountAmt = rs.getBigDecimal(2);
				IsSOTrx = ""Y"".equals(rs.getString(3));
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}

		log.fine("" - OpenAmt="" + OpenAmt + "" (Invoice="" + C_Invoice_ID + "",BankAcct="" + C_BankAccount_ID + "")"");
		setInvoice(C_Invoice_ID, IsSOTrx, OpenAmt, OpenAmt.subtract(DiscountAmt), DiscountAmt);
	}	//	setC_Invoice_ID
"
org.compiere.model.MPaySelectionLine.setPayAmt,MPaySelectionLine.java,"void setPayAmt (String oldPayAmt, 
			String newPayAmt, int windowNo) throws Exception
	{
		if (newPayAmt == null || newPayAmt.length() == 0)
			return;
		BigDecimal PayAmt = PO.convertToBigDecimal(newPayAmt);

		BigDecimal OpenAmt = getOpenAmt();
		BigDecimal DiscountAmt = getDiscountAmt();
		BigDecimal DifferenceAmt = OpenAmt.subtract(PayAmt).subtract(DiscountAmt);

		//	get invoice info
		int C_Invoice_ID = getC_Invoice_ID();
		if (C_Invoice_ID == 0)
		{
			PayAmt = Env.ZERO;
			DifferenceAmt = Env.ZERO;
			DiscountAmt = Env.ZERO;
			setDiscountAmt(DiscountAmt);
		}
		log.fine(""OpenAmt="" + OpenAmt + "" - PayAmt="" + PayAmt
			+ "", Discount="" + DiscountAmt + "", Difference="" + DifferenceAmt);
		
		setPayAmt(PayAmt);
		setDifferenceAmt(DifferenceAmt);
	}	//	setPayAmt
"
org.compiere.model.MPaySelectionLine.getInvoice,MPaySelectionLine.java,"MInvoice getInvoice()
	{
		if (m_invoice == null)
			m_invoice = new MInvoice (getCtx(), getC_Invoice_ID(), get_Trx());
		return m_invoice;
	}	//	getInvoice
"
org.compiere.model.MPaySelectionLine.beforeSave,MPaySelectionLine.java,"boolean beforeSave (boolean newRecord)
	{
		setDifferenceAmt(getOpenAmt().subtract(getPayAmt()).subtract(getDiscountAmt()));
		return true;
	}	//	beforeSave
"
org.compiere.model.MPaySelectionLine.afterSave,MPaySelectionLine.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		setHeader();
		return success;
	}	//	afterSave
"
org.compiere.model.MPaySelectionLine.afterDelete,MPaySelectionLine.java,"boolean afterDelete (boolean success)
	{
		setHeader();
		return success;
	}	//	afterDelete
"
org.compiere.model.MPaySelectionLine.setHeader,MPaySelectionLine.java,"void setHeader()
	{
		//	Update Header
		String sql = ""UPDATE C_PaySelection ps ""
			+ ""SET TotalAmt = (SELECT COALESCE(SUM(psl.PayAmt),0) ""
				+ ""FROM C_PaySelectionLine psl ""
				+ ""WHERE ps.C_PaySelection_ID=psl.C_PaySelection_ID AND psl.IsActive='Y') ""
			+ ""WHERE C_PaySelection_ID="" + getC_PaySelection_ID();
		
		DB.executeUpdate(sql, get_Trx());
		
	}	//	setHeader
"
org.compiere.model.MPaySelectionLine.toString,MPaySelectionLine.java,"String toString()
	{
		StringBuffer sb = new StringBuffer(""MPaySelectionLine["");
		sb.append(get_ID()).append("",C_Invoice_ID="").append(getC_Invoice_ID())
			.append("",PayAmt="").append(getPayAmt())
			.append("",DifferenceAmt="").append(getDifferenceAmt())
			.append(""]"");
		return sb.toString();
	}	//	toString
"
org.compiere.model.MMeasure.get,MMeasure.java,"MMeasure get (Ctx ctx, int PA_Measure_ID)
	{
		Integer key = Integer.valueOf (PA_Measure_ID);
		MMeasure retValue = s_cache.get (ctx, key);
		if (retValue != null) {
			return retValue;
		}
		retValue = new MMeasure (ctx, PA_Measure_ID, null);
		if (retValue.get_ID() != 0)
			s_cache.put (key, retValue);
		return retValue;
	} //	get
"
org.compiere.model.MMeasure.toString,MMeasure.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MMeasure["");
		sb.append (get_ID()).append (""-"").append (getName()).append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MMeasure.beforeSave,MMeasure.java,"boolean beforeSave (boolean newRecord)
	{
		if (MEASURETYPE_Calculated.equals(getMeasureType())
			&& getPA_MeasureCalc_ID() == 0)
		{
			log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""PA_MeasureCalc_ID""));
			return false;
		}
		else if (MEASURETYPE_Ratio.equals(getMeasureType())
			&& getPA_Ratio_ID() == 0)
		{
			log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""PA_Ratio_ID""));
			return false;
		}
		else if (MEASURETYPE_UserDefined.equals(getMeasureType())
			&& (getCalculationClass() == null || getCalculationClass().length()==0))
		{
			log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""CalculationClass""));
			return false;
		}
		else if (MEASURETYPE_Request.equals(getMeasureType())
			&& getR_RequestType_ID() == 0)
		{
			log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""R_RequestType_ID""));
			return false;
		}
		else if (MEASURETYPE_Project.equals(getMeasureType())
			&& getC_ProjectType_ID() == 0)
		{
			log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""C_ProjectType_ID""));
			return false;
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MMeasure.afterSave,MMeasure.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		//	Update Goals with Manual Measure
		if (success && MEASURETYPE_Manual.equals(getMeasureType()))
			updateManualGoals();
		
		return success;
	}	//	afterSave
"
org.compiere.model.MMeasure.updateGoals,MMeasure.java,"boolean updateGoals()
	{
		String mt = getMeasureType();
		try
		{
			if (MEASURETYPE_Manual.equals(mt))
				return updateManualGoals();
			else if (MEASURETYPE_Achievements.equals(mt))
				return updateAchievementGoals();
			else if (MEASURETYPE_Calculated.equals(mt))
				return updateCalculatedGoals();
			else if (MEASURETYPE_Ratio.equals(mt))
				return updateRatios();
			else if (MEASURETYPE_Request.equals(mt))
				return updateRequests();
			else if (MEASURETYPE_Project.equals(mt))
				return updateProjects();
			//	Projects
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""MeasureType="" + mt, e);
		}
		return false;
	}	//	updateGoals
"
org.compiere.model.MMeasure.updateManualGoals,MMeasure.java,"boolean updateManualGoals()
	{
		if (!MEASURETYPE_Manual.equals(getMeasureType()))
			return false;
		MGoal[] goals = MGoal.getMeasureGoals (getCtx(), getPA_Measure_ID());
		for (MGoal goal : goals) {
			goal.setMeasureActual(getManualActual());
			goal.save();
		}
		return true;
	}	//	updateManualGoals
"
org.compiere.model.MMeasure.updateAchievementGoals,MMeasure.java,"boolean updateAchievementGoals()
	{
		if (!MEASURETYPE_Achievements.equals(getMeasureType()))
			return false;
		Timestamp today = new Timestamp(System.currentTimeMillis());
		MGoal[] goals = MGoal.getMeasureGoals (getCtx(), getPA_Measure_ID());
		for (MGoal goal : goals) {
			String MeasureScope = goal.getMeasureScope();
			String trunc = TimeUtil.TRUNC_DAY;
			if (X_PA_Goal.MEASUREDISPLAY_Year.equals(MeasureScope))
				trunc = TimeUtil.TRUNC_YEAR;
			else if (X_PA_Goal.MEASUREDISPLAY_Quarter.equals(MeasureScope))
				trunc = TimeUtil.TRUNC_QUARTER;
			else if (X_PA_Goal.MEASUREDISPLAY_Month.equals(MeasureScope))
				trunc = TimeUtil.TRUNC_MONTH;
			else if (X_PA_Goal.MEASUREDISPLAY_Week.equals(MeasureScope))
				trunc = TimeUtil.TRUNC_WEEK;
			Timestamp compare = TimeUtil.trunc(today, trunc); 
			//
			MAchievement[] achievements = MAchievement.getOfMeasure(getCtx(), getPA_Measure_ID());
			BigDecimal ManualActual = Env.ZERO;
			for (MAchievement achievement : achievements) {
				if (achievement.isAchieved() && achievement.getDateDoc() != null)
				{
					Timestamp ach = TimeUtil.trunc(achievement.getDateDoc(), trunc);
					if (compare.equals(ach))
						ManualActual = ManualActual.add(achievement.getManualActual());
				}
			}
			goal.setMeasureActual(ManualActual);
			goal.save();
		}
		return true;
	}	//	updateAchievementGoals
"
org.compiere.model.MMeasure.updateCalculatedGoals,MMeasure.java,"boolean updateCalculatedGoals()
	{
		if (!MEASURETYPE_Calculated.equals(getMeasureType()))
			return false;
		MGoal[] goals = MGoal.getMeasureGoals (getCtx(), getPA_Measure_ID());
		for (MGoal goal : goals) {
			//	Find Role
			MRole role = null;
			if (goal.getAD_Role_ID() != 0)
				role = MRole.get(getCtx(), goal.getAD_Role_ID());
			else if (goal.getAD_User_ID() != 0)
			{
				MUser user = MUser.get(getCtx(), goal.getAD_User_ID());
				MRole[] roles = user.getRoles(goal.getAD_Org_ID());
				if (roles.length > 0)
					role = roles[0];
			}
			if (role == null)
				role = MRole.getDefault(getCtx(), false);	//	could result in wrong data
			//
			MMeasureCalc mc = MMeasureCalc.get(getCtx(), getPA_MeasureCalc_ID());
			if (mc == null || mc.get_ID() == 0 || mc.get_ID() != getPA_MeasureCalc_ID())
			{
				log.log(Level.SEVERE, ""Not found PA_MeasureCalc_ID="" + getPA_MeasureCalc_ID());
				return false;
			}
			BigDecimal ManualActual = null;
			String sql = mc.getSqlPI(goal.getRestrictions(false), 
				goal.getMeasureScope(), getMeasureDataType(), null, role);		
			PreparedStatement pstmt = null;
			try		//	SQL statement could be wrong
			{
				pstmt = DB.prepareStatement(sql, (Trx) null);
				ResultSet rs = pstmt.executeQuery();
				if (rs.next())
					ManualActual = rs.getBigDecimal(1);
				rs.close ();
				pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				log.log (Level.SEVERE, sql, e);
			}
			try
			{
				if (pstmt != null)
					pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				pstmt = null;
			}
			//	SQL may return no rows or null
			if (ManualActual == null)
			{
				ManualActual = Env.ZERO;
				log.fine(""No Value = "" + sql);
			}
			goal.setMeasureActual(ManualActual);
			goal.save();
		}
		return true;
	}	//	updateCalculatedGoals
"
org.compiere.model.MMeasure.updateRatios,MMeasure.java,"boolean updateRatios()
	{
		if (!MEASURETYPE_Ratio.equals(getMeasureType()))
			return false;
		return false;
	}		//	updateRatios
"
org.compiere.model.MMeasure.updateRequests,MMeasure.java,"boolean updateRequests()
	{
		if (!MEASURETYPE_Request.equals(getMeasureType())
			|| getR_RequestType_ID() == 0)
			return false;
		MGoal[] goals = MGoal.getMeasureGoals (getCtx(), getPA_Measure_ID());
		for (MGoal goal : goals) {
			//	Find Role
			MRole role = null;
			if (goal.getAD_Role_ID() != 0)
				role = MRole.get(getCtx(), goal.getAD_Role_ID());
			else if (goal.getAD_User_ID() != 0)
			{
				MUser user = MUser.get(getCtx(), goal.getAD_User_ID());
				MRole[] roles = user.getRoles(goal.getAD_Org_ID());
				if (roles.length > 0)
					role = roles[0];
			}
			if (role == null)
				role = MRole.getDefault(getCtx(), false);	//	could result in wrong data
			//
			BigDecimal ManualActual = null;
			MRequestType rt = MRequestType.get(getCtx(), getR_RequestType_ID());
			String sql = rt.getSqlPI(goal.getRestrictions(false), 
				goal.getMeasureScope(), getMeasureDataType(), null, role);		
			PreparedStatement pstmt = null;
			try		//	SQL statement could be wrong
			{
				pstmt = DB.prepareStatement(sql, (Trx) null);
				ResultSet rs = pstmt.executeQuery();
				if (rs.next())
					ManualActual = rs.getBigDecimal(1);
				rs.close ();
				pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				log.log (Level.SEVERE, sql, e);
			}
			try
			{
				if (pstmt != null)
					pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				pstmt = null;
			}
			//	SQL may return no rows or null
			if (ManualActual == null)
			{
				ManualActual = Env.ZERO;
				log.fine(""No Value = "" + sql);
			}
			goal.setMeasureActual(ManualActual);
			goal.save();
		}
		return true;
	}		//	updateRequests
"
org.compiere.model.MMeasure.updateProjects,MMeasure.java,"boolean updateProjects()
	{
		if (!MEASURETYPE_Project.equals(getMeasureType())
			|| getC_ProjectType_ID() == 0)
			return false;
		MGoal[] goals = MGoal.getMeasureGoals (getCtx(), getPA_Measure_ID());
		for (MGoal goal : goals) {
			//	Find Role
			MRole role = null;
			if (goal.getAD_Role_ID() != 0)
				role = MRole.get(getCtx(), goal.getAD_Role_ID());
			else if (goal.getAD_User_ID() != 0)
			{
				MUser user = MUser.get(getCtx(), goal.getAD_User_ID());
				MRole[] roles = user.getRoles(goal.getAD_Org_ID());
				if (roles.length > 0)
					role = roles[0];
			}
			if (role == null)
				role = MRole.getDefault(getCtx(), false);	//	could result in wrong data
			//
			BigDecimal ManualActual = null;
			MProjectType pt = MProjectType.get(getCtx(), getC_ProjectType_ID());
			String sql = pt.getSqlPI(goal.getRestrictions(false), 
				goal.getMeasureScope(), getMeasureDataType(), null, role);		
			PreparedStatement pstmt = null;
			try		//	SQL statement could be wrong
			{
				pstmt = DB.prepareStatement(sql, (Trx) null);
				ResultSet rs = pstmt.executeQuery();
				if (rs.next())
					ManualActual = rs.getBigDecimal(1);
				rs.close ();
				pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				log.log (Level.SEVERE, sql, e);
			}
			try
			{
				if (pstmt != null)
					pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				pstmt = null;
			}
			//	SQL may return no rows or null
			if (ManualActual == null)
			{
				ManualActual = Env.ZERO;
				log.fine(""No Value = "" + sql);
			}
			goal.setMeasureActual(ManualActual);
			goal.save();
		}
		return true;
	}	//	updateProjects
"
org.compiere.model.MBankAccount.get,MBankAccount.java,"MBankAccount get (Ctx ctx, int C_BankAccount_ID)
	{
		Integer key = Integer.valueOf (C_BankAccount_ID);
		MBankAccount retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MBankAccount (ctx, C_BankAccount_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	} //	get
"
org.compiere.model.MBankAccount.toString,MBankAccount.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MBankAccount["")
			.append (get_ID())
			.append(""-"").append(getAccountNo())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MBankAccount.getBank,MBankAccount.java,"MBank getBank()
	{
		return MBank.get(getCtx(), getC_Bank_ID());
	}	//	getBank
"
org.compiere.model.MBankAccount.getName,MBankAccount.java,"String getName()
	{
		return getBank().getName() + "" "" + getAccountNo();
	}	//	getName
"
org.compiere.model.MBankAccount.beforeSave,MBankAccount.java,"boolean beforeSave(boolean newRecord)
	{
		MBank bank = getBank();
		BankVerificationInterface verify = bank.getVerificationClass();
		if (verify != null)
		{
			String errorMsg = verify.verifyAccountNo (bank, getAccountNo());
			if (errorMsg != null)
			{
				log.saveError(""Error"", ""@Invalid@ @AccountNo@ "" + errorMsg);
				return false;
			}
			errorMsg = verify.verifyBBAN (bank, getBBAN());
			if (errorMsg != null)
			{
				log.saveError(""Error"", ""@Invalid@ @BBAN@ "" + errorMsg);
				return false;
			}
			errorMsg = verify.verifyIBAN (bank, getIBAN());
			if (errorMsg != null)
			{
				log.saveError(""Error"", ""@Invalid@ @IBAN@ "" + errorMsg);
				return false;
			}
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MBankAccount.afterSave,MBankAccount.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (newRecord & success)
			return insert_Accounting(""C_BankAccount_Acct"", ""C_AcctSchema_Default"", null);
		return success;
	}	//	afterSave
"
org.compiere.model.MBankAccount.beforeDelete,MBankAccount.java,"boolean beforeDelete ()
	{
		return delete_Accounting(""C_BankAccount_Acct"");
	}	//	beforeDelete
"
org.compiere.model.MMedia.getMedia,MMedia.java,"MMedia[] getMedia (MWebProject project)
	{
		ArrayList<MMedia> list = new ArrayList<MMedia>();
		PreparedStatement pstmt = null;
		String sql = ""SELECT * FROM CM_Media WHERE CM_WebProject_ID=? ORDER BY CM_Media_ID"";
		try
		{
			pstmt = DB.prepareStatement (sql, project.get_Trx());
			pstmt.setInt (1, project.getCM_WebProject_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				list.add (new MMedia (project.getCtx(), rs, project.get_Trx()));
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MMedia[] retValue = new MMedia[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getMedia
"
org.compiere.model.MMedia.getMediaToDeploy,MMedia.java,"MMedia[] getMediaToDeploy (Ctx ctx, int CM_Media_Server_ID, Trx trx)
	{
		ArrayList<MMedia> list = new ArrayList<MMedia>();
		PreparedStatement pstmt = null;
		String sql = ""SELECT CMM.* FROM CM_Media CMM, CM_MediaDeploy CMMD WHERE "" +
				""CMM.CM_Media_ID = CMMD.CM_Media_ID AND "" +
				""CMMD.CM_Media_Server_ID = ? AND "" +
				""CMMD.IsDeployed='N' "" +
				""ORDER BY CMM.CM_Media_ID"";
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, CM_Media_Server_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				list.add (new MMedia (ctx, rs, trx));
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MMedia[] retValue = new MMedia[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getMedia
"
org.compiere.model.MMedia.getByName,MMedia.java,"MMedia getByName(Ctx ctx, String Name, int CM_WebProject_Id, Trx trx) {
		MMedia thisMedia = null;
		String sql = ""SELECT * FROM CM_Media WHERE (LOWER(Name) LIKE ?) AND CM_WebProject_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, trx);
			pstmt.setString (1,Name.toLowerCase ());
			pstmt.setInt(2, CM_WebProject_Id);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				thisMedia = (new MMedia(ctx, rs, trx));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return thisMedia;
	}
"
org.compiere.model.MMedia.getWebProject,MMedia.java,"MWebProject getWebProject()
	{
		if (m_project == null)
			m_project = MWebProject.get(getCtx(), getCM_WebProject_ID());
		return m_project;
	}	//	getWebProject
"
org.compiere.model.MMedia.getAD_Tree_ID,MMedia.java,"int getAD_Tree_ID()
	{
		return getWebProject().getAD_TreeCMM_ID();
	}	//	getAD_Tree_ID;
"
org.compiere.model.MMedia.beforeSave,MMedia.java,"boolean beforeSave (boolean newRecord)
	{
		if (isSummary())
		{
			setMediaType(null);
			setAD_Image_ID(0);
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MMedia.afterSave,MMedia.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!success)
			return success;
		if (newRecord)
		{
			StringBuffer sb = new StringBuffer (""INSERT INTO AD_TreeNodeCMM ""
				+ ""(AD_Client_ID,AD_Org_ID, IsActive,Created,CreatedBy,Updated,UpdatedBy, ""
				+ ""AD_Tree_ID, Node_ID, Parent_ID, SeqNo) ""
				+ ""VALUES ("")
				.append(getAD_Client_ID()).append("",0, 'Y', SysDate, 0, SysDate, 0,"")
				.append(getAD_Tree_ID()).append("","").append(get_ID())
				.append("", 0, 999)"");
			int no = DB.executeUpdate(sb.toString(), get_Trx());
			if (no > 0)
				log.fine(""#"" + no + "" - TreeType=CMM"");
			else
				log.warning(""#"" + no + "" - TreeType=CMM"");
			return no > 0;
		}
		// Construct / Update Deployment Procedure
		MMediaServer[] theseServers = MMediaServer.getMediaServer (m_project);
		if (theseServers!=null && theseServers.length>0)
			for (MMediaServer element : theseServers) {
				MMediaDeploy thisDeploy = MMediaDeploy.getByMedia (getCtx(), get_ID(), element.get_ID(), true, get_Trx());
				if (thisDeploy.isDeployed ())
				{
					thisDeploy.setIsDeployed (false);
					thisDeploy.save ();
				}
			}
		return success;
	}	//	afterSave
"
org.compiere.model.MMedia.toString,MMedia.java,"String toString() 
	{
		StringBuffer sb = new StringBuffer (""MMedia[ID="")
		.append(get_ID())
		.append("",FileName="").append(get_ID() + getExtension())
		.append (""]"");
		return sb.toString ();
	}
"
org.compiere.model.MMedia.beforeDelete,MMedia.java,"boolean beforeDelete()
	{
		// Delete from Deployment Server
		MMediaDeploy [] theseDeployers = MMediaDeploy.getByMediaAndProject (getCtx(), get_IDOld(), m_project, false, get_Trx());
		if (theseDeployers!=null && theseDeployers.length>0)
			for (int i=0;i<theseDeployers.length;i++)
				if (!theseDeployers[i].getServer().deleteMediaItem (this)) 
					log.warning (""Could not delete file + "" + this.toString () + "" from Server: "" + theseDeployers[i].getServer ());
		// Delete From MMediaDeploy
		StringBuffer sb = new StringBuffer (""DELETE FROM CM_MediaDeploy "")
			.append("" WHERE CM_Media_ID="").append(get_IDOld());
		int no = DB.executeUpdate(sb.toString(), get_Trx());
		if (no > 0)
			log.fine(""#"" + no + "" - CM_MediaDeploy"");
		else
			log.warning(""#"" + no + "" - CM_MediaDeploy"");

		return true;
	}
"
org.compiere.model.MMedia.afterDelete,MMedia.java,"boolean afterDelete (boolean success)
	{
		if (!success)
			return success;
		// Delete from tree
		StringBuffer sb = new StringBuffer (""DELETE FROM AD_TreeNodeCMM "")
			.append("" WHERE Node_ID="").append(get_IDOld())
			.append("" AND AD_Tree_ID="").append(getAD_Tree_ID());
		int no = DB.executeUpdate(sb.toString(), get_Trx());
		if (no > 0)
			log.fine(""#"" + no + "" - TreeType=CMM"");
		else
			log.warning(""#"" + no + "" - TreeType=CMM"");
		return no > 0;
	}	//	afterDelete
"
org.compiere.model.MMedia.getFileName,MMedia.java,"String getFileName()
	{
		return get_ID() + getExtension();
	}	//	getFileName
"
org.compiere.model.MMedia.getExtension,MMedia.java,"String getExtension()
	{
		String mt = getMediaType();
		if (MEDIATYPE_ApplicationPdf.equals(mt))
			return "".pdf"";
		if (MEDIATYPE_ImageGif.equals(mt))
			return "".gif"";
		if (MEDIATYPE_ImageJpeg.equals(mt))
			return "".jpg"";
		if (MEDIATYPE_ImagePng.equals(mt))
			return "".png"";
		if (MEDIATYPE_TextCss.equals(mt))
			return "".css"";
		if (MEDIATYPE_TextJs.equals (mt))
			return "".js"";
		//	Unknown
		return "".dat"";
	}	//	getExtension
"
org.compiere.model.MMedia.getImage,MMedia.java,"MImage getImage()
	{
		if (getAD_Image_ID() != 0)
			return MImage.get(getCtx(), getAD_Image_ID());
		return null;
	}	//	getImage
"
org.compiere.model.MMedia.getData,MMedia.java,"byte[] getData()
	{
		MImage image = getImage();
		if (image != null)
		{
			byte[] data = image.getData();
			if (data == null || data.length == 0)
				log.config(""No Image Data"");
		}
		
		//	Attachment
		MAttachment att = getAttachment();
		if (att == null || att.getEntryCount() == 0)
		{
			log.config(""No Attachment"");
			return null;
		}
		if (att.getEntryCount() > 1)
			log.warning(getName() + "" - more then one attachment - "" + att.getEntryCount());
		//
		MAttachmentEntry entry = att.getEntry(0);
		if (entry == null)
		{
			log.config(""No Attachment Entry"");
			return null;
		}
		byte[] buffer = entry.getData();
		if (buffer == null || buffer.length == 0)
		{
			log.config(""No Attachment Entry Data"");
			return null;
		}
		return buffer;
	}	//	getData
"
org.compiere.model.MMedia.getInputStream,MMedia.java,"InputStream getInputStream()
	{
		byte[] buffer = getData();
		ByteArrayInputStream is = new ByteArrayInputStream(buffer);
		return is;
	}	//	getInputStream
"
org.compiere.model.MMedia.getAttachmentUpdated,MMedia.java,"Timestamp getAttachmentUpdated()
	{
		MAttachment att = getAttachment();
		if (att == null)
			return null;
		return att.getUpdated();
	}	//	getAttachmentUpdated
"
org.compiere.model.MInOutLine.getOfOrderLine,MInOutLine.java,"MInOutLine[] getOfOrderLine (Ctx ctx, 
		int C_OrderLine_ID, String where, Trx trx)
	{
		ArrayList<MInOutLine> list = new ArrayList<MInOutLine>();
		String sql = ""SELECT * FROM M_InOutLine WHERE C_OrderLine_ID=?"";
		if (where != null && where.length() > 0)
			sql += "" AND "" + where;
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, C_OrderLine_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add(new MInOutLine(ctx, rs, trx));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MInOutLine[] retValue = new MInOutLine[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getOfOrderLine
"
org.compiere.model.MInOutLine.get,MInOutLine.java,"MInOutLine[] get (Ctx ctx, int C_OrderLine_ID, Trx trx)
	{
		ArrayList<MInOutLine> list = new ArrayList<MInOutLine>();
		String sql = ""SELECT * FROM M_InOutLine WHERE C_OrderLine_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, C_OrderLine_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add(new MInOutLine(ctx, rs, trx));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MInOutLine[] retValue = new MInOutLine[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getOfOrderLine
"
org.compiere.model.MInOutLine.getParent,MInOutLine.java,"MInOut getParent()
	{
		if (m_parent == null)
			m_parent = new MInOut (getCtx(), getM_InOut_ID(), get_Trx());
		return m_parent;
	}	//	getParent
"
org.compiere.model.MInOutLine.setOrderLine,MInOutLine.java,"void setOrderLine (MOrderLine oLine, int M_Locator_ID, BigDecimal Qty)
	{
		setC_OrderLine_ID(oLine.getC_OrderLine_ID());
		setLine(oLine.getLine());
		setC_UOM_ID(oLine.getC_UOM_ID());
		MProduct product = oLine.getProduct();
		if (product == null)
		{
			setM_Product_ID(0);
			setM_AttributeSetInstance_ID(0);
			super.setM_Locator_ID(0);
		}
		else
		{
			setM_Product_ID(oLine.getM_Product_ID());
			setM_AttributeSetInstance_ID(oLine.getM_AttributeSetInstance_ID());
			//
			if (product.isItem())
			{
				if (M_Locator_ID == 0)
					setM_Locator_ID(Qty);	//	requires warehouse, product, asi
				else
					setM_Locator_ID(M_Locator_ID);
			}
			else
				super.setM_Locator_ID(0);
		}
		setC_Charge_ID(oLine.getC_Charge_ID());
		setDescription(oLine.getDescription());
		setIsDescription(oLine.isDescription());
		//
		setAD_Org_ID(oLine.getAD_Org_ID());
		setC_Project_ID(oLine.getC_Project_ID());
		setC_ProjectPhase_ID(oLine.getC_ProjectPhase_ID());
		setC_ProjectTask_ID(oLine.getC_ProjectTask_ID());
		setC_Activity_ID(oLine.getC_Activity_ID());
		setC_Campaign_ID(oLine.getC_Campaign_ID());
		setAD_OrgTrx_ID(oLine.getAD_OrgTrx_ID());
		setUser1_ID(oLine.getUser1_ID());
		setUser2_ID(oLine.getUser2_ID());
	}	//	setOrderLine
"
org.compiere.model.MInOutLine.setC_OrderLine_ID,MInOutLine.java,"void setC_OrderLine_ID (String oldC_OrderLine_ID, 
			String newC_OrderLine_ID, int windowNo) throws Exception
	{
		if (newC_OrderLine_ID == null || newC_OrderLine_ID.length() == 0)
			return;
		int C_OrderLine_ID = Integer.parseInt(newC_OrderLine_ID);
		if (C_OrderLine_ID == 0)
			return;
		MOrderLine ol = new MOrderLine (getCtx(), C_OrderLine_ID, null);
		if (ol.get_ID() != 0)
		{
			setC_OrderLine_ID(C_OrderLine_ID);
			setDescription(ol.getDescription());
			BigDecimal MovementQty = ol.getQtyOrdered().subtract(ol.getQtyDelivered());
			setMovementQty(MovementQty);
			setOrderLine(ol, 0, MovementQty);
			BigDecimal QtyEntered = MovementQty;
			if (ol.getQtyEntered().compareTo(ol.getQtyOrdered()) != 0)
				QtyEntered = QtyEntered.multiply(ol.getQtyEntered())
					.divide(ol.getQtyOrdered(), 12, BigDecimal.ROUND_HALF_UP);
			setQtyEntered(QtyEntered);
			
			if(ol.getParent().isReturnTrx())
			{
				MInOutLine ioLine = new MInOutLine (getCtx(), ol.getOrig_InOutLine_ID(), null);	
				setM_Locator_ID(ioLine.getM_Locator_ID());
			}
			
		}
	}	//	setC_OrderLine_ID
"
org.compiere.model.MInOutLine.setInvoiceLine,MInOutLine.java,"void setInvoiceLine (MInvoiceLine iLine, int M_Locator_ID, BigDecimal Qty)
	{
		setC_OrderLine_ID(iLine.getC_OrderLine_ID());
		setLine(iLine.getLine());
		setC_UOM_ID(iLine.getC_UOM_ID());
		int M_Product_ID = iLine.getM_Product_ID();
		if (M_Product_ID == 0)
		{
			set_ValueNoCheck(""M_Product_ID"", null);
			set_ValueNoCheck(""M_Locator_ID"", null);
			set_ValueNoCheck(""M_AttributeSetInstance_ID"", null);
		}
		else
		{
			setM_Product_ID(M_Product_ID);
			setM_AttributeSetInstance_ID(iLine.getM_AttributeSetInstance_ID());			
			if (M_Locator_ID == 0)
				setM_Locator_ID(Qty);	//	requires warehouse, product, asi
			else
				setM_Locator_ID(M_Locator_ID);
		}
		setC_Charge_ID(iLine.getC_Charge_ID());
		setDescription(iLine.getDescription());
		setIsDescription(iLine.isDescription());
		//
		setC_Project_ID(iLine.getC_Project_ID());
		setC_ProjectPhase_ID(iLine.getC_ProjectPhase_ID());
		setC_ProjectTask_ID(iLine.getC_ProjectTask_ID());
		setC_Activity_ID(iLine.getC_Activity_ID());
		setC_Campaign_ID(iLine.getC_Campaign_ID());
		setAD_OrgTrx_ID(iLine.getAD_OrgTrx_ID());
		setUser1_ID(iLine.getUser1_ID());
		setUser2_ID(iLine.getUser2_ID());
	}	//	setInvoiceLine
"
org.compiere.model.MInOutLine.getM_Warehouse_ID,MInOutLine.java,"int getM_Warehouse_ID()
	{
		if (m_M_Warehouse_ID == 0)
			m_M_Warehouse_ID = getParent().getM_Warehouse_ID();
		return m_M_Warehouse_ID;
	}	//	getM_Warehouse_ID
"
org.compiere.model.MInOutLine.setM_Warehouse_ID,MInOutLine.java,"void setM_Warehouse_ID (int warehouse_ID)
	{
		m_M_Warehouse_ID = warehouse_ID;
	}	//	setM_Warehouse_ID
"
org.compiere.model.MInOutLine.setM_Locator_ID,MInOutLine.java,"void setM_Locator_ID (int M_Locator_ID)
	{
		if (M_Locator_ID < 0) 
			throw new IllegalArgumentException (""M_Locator_ID is mandatory."");
		//	set to 0 explicitly to reset
		set_Value (""M_Locator_ID"", Integer.valueOf(M_Locator_ID));	
	}	//	setM_Locator_ID
"
org.compiere.model.MInOutLine.setM_Locator_ID,MInOutLine.java,"void setM_Locator_ID(BigDecimal Qty)
	{
		//	Locator esatblished
		if (getM_Locator_ID() != 0)
			return;
		//	No Product
		if (getM_Product_ID() == 0)
		{
			set_ValueNoCheck(""M_Locator_ID"", null);
			return;
		}
		
		//	Get existing Location
		int M_Locator_ID = MStorage.getM_Locator_ID (getM_Warehouse_ID(), 
				getM_Product_ID(), getM_AttributeSetInstance_ID(), 
				Qty, get_Trx());
		//	Get default Location
		if (M_Locator_ID == 0)
		{
			MProduct product = MProduct.get(getCtx(), getM_Product_ID());
			M_Locator_ID = MProductLocator.getFirstM_Locator_ID (product, getM_Warehouse_ID());
			if (M_Locator_ID == 0)
			{
				MWarehouse wh = MWarehouse.get(getCtx(), getM_Warehouse_ID());
				if(wh.isWMSEnabled())
					M_Locator_ID = wh.getM_RcvLocator_ID();
				
				if(M_Locator_ID == 0)
					M_Locator_ID = wh.getDefaultM_Locator_ID();
			}
		}
		setM_Locator_ID(M_Locator_ID);
	}	//	setM_Locator_ID
"
org.compiere.model.MInOutLine.setQty,MInOutLine.java,"void setQty (BigDecimal Qty)
	{
		setQtyEntered(Qty);
		setMovementQty(getQtyEntered());
	}	//	setQtyInvoiced
"
org.compiere.model.MInOutLine.setQtyEntered,MInOutLine.java,"void setQtyEntered (BigDecimal QtyEntered)
	{
		if (QtyEntered != null && getC_UOM_ID() != 0)
		{
			int precision = MUOM.getPrecision(getCtx(), getC_UOM_ID());
			QtyEntered = QtyEntered.setScale(precision, BigDecimal.ROUND_HALF_UP);
		}
		super.setQtyEntered (QtyEntered);
	}	//	setQtyEntered
"
org.compiere.model.MInOutLine.setMovementQty,MInOutLine.java,"void setMovementQty (BigDecimal MovementQty)
	{
		MProduct product = getProduct();
		if (MovementQty != null && product != null)
		{
			int precision = product.getUOMPrecision();
			MovementQty = MovementQty.setScale(precision, BigDecimal.ROUND_HALF_UP);
		}
		super.setMovementQty(MovementQty);
	}	//	setMovementQty
"
org.compiere.model.MInOutLine.getProduct,MInOutLine.java,"MProduct getProduct()
	{
		if (m_product == null && getM_Product_ID() != 0)
			m_product = MProduct.get (getCtx(), getM_Product_ID());
		return m_product;
	}	//	getProduct
"
org.compiere.model.MInOutLine.setProduct,MInOutLine.java,"void setProduct (MProduct product)
	{
		m_product = product;
		if (m_product != null)
		{
			setM_Product_ID(m_product.getM_Product_ID());
			setC_UOM_ID (m_product.getC_UOM_ID());
		}
		else
		{
			setM_Product_ID(0);
			setC_UOM_ID (0);
		}
		setM_AttributeSetInstance_ID(0);
	}	//	setProduct
"
org.compiere.model.MInOutLine.setM_Product_ID,MInOutLine.java,"void setM_Product_ID (int M_Product_ID, boolean setUOM)
	{
		if (setUOM)
			setProduct(MProduct.get(getCtx(), M_Product_ID));
		else
			super.setM_Product_ID (M_Product_ID);
		setM_AttributeSetInstance_ID(0);
	}	//	setM_Product_ID
"
org.compiere.model.MInOutLine.setM_Product_ID,MInOutLine.java,"void setM_Product_ID (int M_Product_ID, int C_UOM_ID)
	{
		if (M_Product_ID != 0)
			super.setM_Product_ID (M_Product_ID);
		super.setC_UOM_ID(C_UOM_ID);
		setM_AttributeSetInstance_ID(0);
		m_product = null;
	}	//	setM_Product_ID
"
org.compiere.model.MInOutLine.setM_Product_ID,MInOutLine.java,"void setM_Product_ID (String oldM_Product_ID, 
			String newM_Product_ID, int windowNo) throws Exception
	{
		if (newM_Product_ID == null || newM_Product_ID.length() == 0)
			return;
		int M_Product_ID = Integer.parseInt(newM_Product_ID);
		if (M_Product_ID == 0)
		{
			setM_AttributeSetInstance_ID(0);
			return;
		}
		//
		super.setM_Product_ID(M_Product_ID);
		setC_Charge_ID(0);
		
		//	Set Attribute & Locator
		int M_Locator_ID = 0;
		if (getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_Product_ID"") == M_Product_ID
			&& getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_AttributeSetInstance_ID"") != 0)
		{
			setM_AttributeSetInstance_ID(getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_AttributeSetInstance_ID""));
			//	Locator from Info Window - ASI
			M_Locator_ID = getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_Locator_ID"");
			if (M_Locator_ID != 0)
				setM_Locator_ID(M_Locator_ID);
		}
		else
			setM_AttributeSetInstance_ID(0);
		//
		boolean IsSOTrx = getCtx().isSOTrx(windowNo);
		if (IsSOTrx)
			return;

		//	PO - Set UOM/Locator/Qty
		MProduct product = getProduct();
		setC_UOM_ID(product.getC_UOM_ID());
		BigDecimal QtyEntered = getQtyEntered();
		setMovementQty(QtyEntered);
		if (M_Locator_ID != 0)
			;		//	already set via ASI
		else
		{
			int M_Warehouse_ID = getCtx().getContextAsInt(windowNo, ""M_Warehouse_ID"");
			M_Locator_ID = MProductLocator.getFirstM_Locator_ID (product, M_Warehouse_ID);
			if (M_Locator_ID != 0)
				setM_Locator_ID(M_Locator_ID);
			else
			{
				MWarehouse wh = MWarehouse.get (getCtx(), M_Warehouse_ID);
				if(wh.isWMSEnabled())
					M_Locator_ID = wh.getM_RcvLocator_ID();
				
				if(M_Locator_ID == 0)
					M_Locator_ID = wh.getDefaultM_Locator_ID();
				
				setM_Locator_ID(M_Locator_ID);
			}
		}
	}	//	setM_Product_ID
"
org.compiere.model.MInOutLine.setM_AttributeSetInstance_ID,MInOutLine.java,"void setM_AttributeSetInstance_ID (String oldM_AttributeSetInstance_ID, 
			String newM_AttributeSetInstance_ID, int windowNo) throws Exception
	{
		if (newM_AttributeSetInstance_ID == null || newM_AttributeSetInstance_ID.length() == 0)
			return;
		int M_AttributeSetInstance_ID = Integer.parseInt(newM_AttributeSetInstance_ID);
		setM_AttributeSetInstance_ID(M_AttributeSetInstance_ID);
		if (M_AttributeSetInstance_ID == 0)
			return;
		//
		int M_Product_ID = getM_Product_ID();
		int M_Warehouse_ID = getCtx().getContextAsInt(windowNo, ""M_Warehouse_ID"");
		int M_Locator_ID = getM_Locator_ID();
		log.fine(""M_Product_ID="" + M_Product_ID
			+ "", M_ASI_ID="" + M_AttributeSetInstance_ID
			+ "" - M_Warehouse_ID="" + M_Warehouse_ID 
			+ "", M_Locator_ID="" + M_Locator_ID);
		//	Check Selection
		int M_ASI_ID =	Env.getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_AttributeSetInstance_ID"");
		if (M_ASI_ID == M_AttributeSetInstance_ID)
		{
			int selectedM_Locator_ID = Env.getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_Locator_ID"");
			if (selectedM_Locator_ID != 0)
			{
				log.fine(""Selected M_Locator_ID="" + selectedM_Locator_ID);
				setM_Locator_ID(selectedM_Locator_ID);
			}
		}
	}	//	setM_AttributeSetInstance_ID
"
org.compiere.model.MInOutLine.setC_UOM_ID,MInOutLine.java,"void setC_UOM_ID (String oldC_UOM_ID, 
			String newC_UOM_ID, int windowNo) throws Exception
	{
		if (newC_UOM_ID == null || newC_UOM_ID.length() == 0)
			return;
		int C_UOM_ID = Integer.parseInt(newC_UOM_ID);
		if (C_UOM_ID == 0)
			return;
		//
		super.setC_UOM_ID(C_UOM_ID);
		setQty(windowNo, ""C_UOM_ID"");
	}	//	setC_UOM_ID
"
org.compiere.model.MInOutLine.setQtyEntered,MInOutLine.java,"void setQtyEntered (String oldQtyEntered, 
			String newQtyEntered, int windowNo) throws Exception
	{
		if (newQtyEntered == null || newQtyEntered.length() == 0)
			return;
		BigDecimal QtyEntered = new BigDecimal(newQtyEntered);
		super.setQtyEntered(QtyEntered);
		setQty(windowNo, ""QtyEntered"");
	}	//	setQtyEntered
"
org.compiere.model.MInOutLine.setMovementQty,MInOutLine.java,"void setMovementQty (String oldMovementQty, 
			String newMovementQty, int windowNo) throws Exception
	{
		if (newMovementQty == null || newMovementQty.length() == 0)
			return;
		BigDecimal MovementQty = new BigDecimal(newMovementQty);
		super.setMovementQty(MovementQty);
		setQty(windowNo, ""MovementQty"");
	}	//	setMovementQty
"
org.compiere.model.MInOutLine.isAllocated,MInOutLine.java,"boolean isAllocated()
	{
		if(getQtyAllocated().signum()!=0)
			return true;
		
		return false;
	}
"
org.compiere.model.MInOutLine.setQty,MInOutLine.java,"void setQty (int windowNo, String columnName)
	{
		int M_Product_ID = getM_Product_ID();
		//	log.log(Level.WARNING,""qty - init - M_Product_ID="" + M_Product_ID);
		BigDecimal MovementQty, QtyEntered;
		int C_UOM_To_ID = getC_UOM_ID();
		
		//	No Product
		if (M_Product_ID == 0)
		{
			QtyEntered = getQtyEntered();
			setMovementQty(QtyEntered);
		}
		//	UOM Changed - convert from Entered -> Product
		else if (columnName.equals(""C_UOM_ID""))
		{
			QtyEntered = getQtyEntered();
			BigDecimal QtyEntered1 = QtyEntered.setScale(MUOM.getPrecision
				(getCtx(), C_UOM_To_ID), BigDecimal.ROUND_HALF_UP);
			if (QtyEntered.compareTo(QtyEntered1) != 0)
			{
				log.fine(""Corrected QtyEntered Scale UOM="" + C_UOM_To_ID 
					+ ""; QtyEntered="" + QtyEntered + ""->"" + QtyEntered1);  
				QtyEntered = QtyEntered1;
				setQtyEntered(QtyEntered);
			}
			MovementQty = MUOMConversion.convertProductFrom (getCtx(), 
				M_Product_ID, C_UOM_To_ID, QtyEntered);
			if (MovementQty == null)
				MovementQty = QtyEntered;
			boolean conversion = QtyEntered.compareTo(MovementQty) != 0;
			log.fine(""UOM="" + C_UOM_To_ID 
				+ "", QtyEntered="" + QtyEntered
				+ "" -> "" + conversion 
				+ "" MovementQty="" + MovementQty);
			p_changeVO.setContext(getCtx(), windowNo, ""UOMConversion"", conversion);
			setMovementQty(MovementQty);
		}
		//	No UOM defined
		else if (C_UOM_To_ID == 0)
		{
			QtyEntered = getQtyEntered();
			setMovementQty(QtyEntered);
		}
		//	QtyEntered changed - calculate MovementQty
		else if (columnName.equals(""QtyEntered""))
		{
			QtyEntered = getQtyEntered();
			BigDecimal QtyEntered1 = QtyEntered.setScale(MUOM.getPrecision
				(getCtx(), C_UOM_To_ID), BigDecimal.ROUND_HALF_UP);
			if (QtyEntered.compareTo(QtyEntered1) != 0)
			{
				log.fine(""Corrected QtyEntered Scale UOM="" + C_UOM_To_ID 
					+ ""; QtyEntered="" + QtyEntered + ""->"" + QtyEntered1);  
				QtyEntered = QtyEntered1;
				setQtyEntered(QtyEntered);
			}
			MovementQty = MUOMConversion.convertProductFrom (getCtx(), 
				M_Product_ID, C_UOM_To_ID, QtyEntered);
			if (MovementQty == null)
				MovementQty = QtyEntered;
			boolean conversion = QtyEntered.compareTo(MovementQty) != 0;
			log.fine(""UOM="" + C_UOM_To_ID 
				+ "", QtyEntered="" + QtyEntered
				+ "" -> "" + conversion 
				+ "" MovementQty="" + MovementQty);
			p_changeVO.setContext(getCtx(), windowNo, ""UOMConversion"", conversion);
			setMovementQty(MovementQty);
		}
		//	MovementQty changed - calculate QtyEntered (should not happen)
		else if (columnName.equals(""MovementQty""))
		{
			MovementQty = getMovementQty();
			int precision = MProduct.get(getCtx(), M_Product_ID).getUOMPrecision(); 
			BigDecimal MovementQty1 = MovementQty.setScale(precision, BigDecimal.ROUND_HALF_UP);
			if (MovementQty.compareTo(MovementQty1) != 0)
			{
				log.fine(""Corrected MovementQty "" 
					+ MovementQty + ""->"" + MovementQty1);  
				MovementQty = MovementQty1;
				setMovementQty(MovementQty);
			}
			QtyEntered = MUOMConversion.convertProductTo (getCtx(), 
				M_Product_ID, C_UOM_To_ID, MovementQty);
			if (QtyEntered == null)
				QtyEntered = MovementQty;
			boolean conversion = MovementQty.compareTo(QtyEntered) != 0;
			log.fine(""UOM="" + C_UOM_To_ID 
				+ "", MovementQty="" + MovementQty
				+ "" -> "" + conversion 
				+ "" QtyEntered="" + QtyEntered);
			p_changeVO.setContext(getCtx(), windowNo, ""UOMConversion"", conversion);
			setQtyEntered(QtyEntered);
		}
		
		// RMA : Check qty returned is more than qty shipped
		boolean IsReturnTrx = getParent().isReturnTrx();
		if(M_Product_ID != 0 
		   && IsReturnTrx) 
		{
			Integer oLine_ID = getC_OrderLine_ID();
			MOrderLine oLine = new MOrderLine (getCtx(), oLine_ID, null);
			if (oLine.get_ID() != 0)
			{
				Integer orig_IOLine_ID = oLine.getOrig_InOutLine_ID();
				if(orig_IOLine_ID != 0)
				{
					MInOutLine orig_IOLine = new MInOutLine (getCtx(), orig_IOLine_ID, null);
					BigDecimal shippedQty = orig_IOLine.getMovementQty();
					MovementQty = getMovementQty();
					if(shippedQty.compareTo(MovementQty)<0)
					{
						if(getCtx().isSOTrx(windowNo))
							p_changeVO.addError(Msg.getMsg(getCtx(), ""QtyShippedLessThanQtyReturned"", shippedQty));
						else
							p_changeVO.addError(Msg.getMsg(getCtx(), ""QtyReceivedLessThanQtyReturned"", shippedQty));
	
						setMovementQty(shippedQty);
						MovementQty = shippedQty;
	
						QtyEntered = MUOMConversion.convertProductTo (getCtx(), M_Product_ID, 
								C_UOM_To_ID, MovementQty);
						if (QtyEntered == null)
							QtyEntered = MovementQty;
						setQtyEntered(QtyEntered);
						log.fine(""QtyEntered : ""+ QtyEntered.toString() +
								""MovementQty : "" + MovementQty.toString());
					}
				}
			}
		}

	}	//	setQty
"
org.compiere.model.MInOutLine.addDescription,MInOutLine.java,"void addDescription (String description)
	{
		String desc = getDescription();
		if (desc == null)
			setDescription(description);
		else
			setDescription(desc + "" | "" + description);
	}	//	addDescription
"
org.compiere.model.MInOutLine.getC_Project_ID,MInOutLine.java,"int getC_Project_ID()
	{
		int ii = super.getC_Project_ID ();
		if (ii == 0)
			ii = getParent().getC_Project_ID();
		return ii;
	}	//	getC_Project_ID
"
org.compiere.model.MInOutLine.getC_Activity_ID,MInOutLine.java,"int getC_Activity_ID()
	{
		int ii = super.getC_Activity_ID ();
		if (ii == 0)
			ii = getParent().getC_Activity_ID();
		return ii;
	}	//	getC_Activity_ID
"
org.compiere.model.MInOutLine.getC_Campaign_ID,MInOutLine.java,"int getC_Campaign_ID()
	{
		int ii = super.getC_Campaign_ID ();
		if (ii == 0)
			ii = getParent().getC_Campaign_ID();
		return ii;
	}	//	getC_Campaign_ID
"
org.compiere.model.MInOutLine.getUser1_ID,MInOutLine.java,"int getUser1_ID ()
	{
		int ii = super.getUser1_ID ();
		if (ii == 0)
			ii = getParent().getUser1_ID();
		return ii;
	}	//	getUser1_ID
"
org.compiere.model.MInOutLine.getUser2_ID,MInOutLine.java,"int getUser2_ID ()
	{
		int ii = super.getUser2_ID ();
		if (ii == 0)
			ii = getParent().getUser2_ID();
		return ii;
	}	//	getUser2_ID
"
org.compiere.model.MInOutLine.getAD_OrgTrx_ID,MInOutLine.java,"int getAD_OrgTrx_ID()
	{
		int ii = super.getAD_OrgTrx_ID();
		if (ii == 0)
			ii = getParent().getAD_OrgTrx_ID();
		return ii;
	}	//	getAD_OrgTrx_ID
"
org.compiere.model.MInOutLine.getMatchPO,MInOutLine.java,"MMatchPO[] getMatchPO()
	{
		if (m_matchPO == null)
			m_matchPO = MMatchPO.get (getCtx(), getM_InOutLine_ID(), get_Trx());
		return m_matchPO;		
	}	//	getMatchPO
"
org.compiere.model.MInOutLine.getMatchPODifference,MInOutLine.java,"BigDecimal getMatchPODifference()
	{
		if (isDescription())
			return Env.ZERO;
		BigDecimal retValue = getMovementQty();
		MMatchPO[] po = getMatchPO();
		for (MMatchPO matchPO : po) {
			retValue = retValue.subtract (matchPO.getQty());
		}
		log.finer(""#"" + retValue);
		return retValue;
	}	//	getMatchPODifference
"
org.compiere.model.MInOutLine.isMatchPOPosted,MInOutLine.java,"boolean isMatchPOPosted()
	{
		MMatchPO[] po = getMatchPO();
		for (MMatchPO matchPO : po) {
			if (!matchPO.isPosted())
				return false;
		}
		return true;
	}	//	isMatchPOposted
"
org.compiere.model.MInOutLine.getMatchInv,MInOutLine.java,"MMatchInv[] getMatchInv()
	{
		if (m_matchInv == null)
			m_matchInv = MMatchInv.get (getCtx(), getM_InOutLine_ID(), get_Trx());
		return m_matchInv;		
	}	//	getMatchInv
"
org.compiere.model.MInOutLine.getMatchInvDifference,MInOutLine.java,"BigDecimal getMatchInvDifference()
	{
		if (isDescription())
			return Env.ZERO;
		BigDecimal retValue = getMovementQty();
		MMatchInv[] inv = getMatchInv();
		for (MMatchInv matchInv : inv) {
			retValue = retValue.subtract (matchInv.getQty());
		}
		log.finer(""#"" + retValue);
		return retValue;
	}	//	getMatchInvDifference
"
org.compiere.model.MInOutLine.isMatchInvPosted,MInOutLine.java,"boolean isMatchInvPosted()
	{
		MMatchInv[] inv = getMatchInv();
		for (MMatchInv matchInv : inv) {
			if (!matchInv.isPosted())
				return false;
		}
		return true;
	}	//	isMatchPOposted
"
org.compiere.model.MInOutLine.beforeSave,MInOutLine.java,"boolean beforeSave (boolean newRecord)
	{
		if(newRecord)
		{
			MInOut ship = getParent();
			MDocType dt = MDocType.get(getCtx(), ship.getC_DocType_ID());
			boolean isPick = dt.isPickQAConfirm();
			boolean isShip = dt.isShipConfirm();
			if (isPick || isShip)
			{
				MInOutConfirm [] confirmations = ship.getConfirmations(true);
				for(MInOutConfirm confirmation : confirmations)
				{
					if(confirmation.isProcessed())
					{
						log.saveError(""Confirmation document Already Processed"", ""Can not add new line as the confirmation document has already been processed"");
						return false;
					}
				}

			}
		}
	
		log.fine("""");
		//	Get Line No
		if (getLine() == 0)
		{
			String sql = ""SELECT COALESCE(MAX(Line),0)+10 FROM M_InOutLine WHERE M_InOut_ID=?"";
			int ii = DB.getSQLValue (get_Trx(), sql, getM_InOut_ID());
			setLine (ii);
		}
		//	UOM
		if (getC_UOM_ID() == 0)
			setC_UOM_ID (getCtx().getContextAsInt( ""#C_UOM_ID""));
		if (getC_UOM_ID() == 0)
		{
			int C_UOM_ID = MUOM.getDefault_UOM_ID(getCtx());
			if (C_UOM_ID > 0)
				setC_UOM_ID (C_UOM_ID);
		}
		//	Qty Precision
		if (newRecord || is_ValueChanged(""QtyEntered""))
			setQtyEntered(getQtyEntered());
		if (newRecord || is_ValueChanged(""MovementQty""))
			setMovementQty(getMovementQty());
		
		//	Order Line
		if (getC_OrderLine_ID() == 0)
		{
			if (getParent().isSOTrx())
			{
				log.saveError(""FillMandatory"", Msg.translate(getCtx(), ""C_Order_ID""));
				return false;
			}
		}
		
	//	if (getC_Charge_ID() == 0 && getM_Product_ID() == 0)
	//		;
		
		/**	 Qty on instance ASI
		if (getM_AttributeSetInstance_ID() != 0)
		{
			MProduct product = getProduct();
			int M_AttributeSet_ID = product.getM_AttributeSet_ID();
			boolean isInstance = M_AttributeSet_ID != 0;
			if (isInstance)
			{
				MAttributeSet mas = MAttributeSet.get(getCtx(), M_AttributeSet_ID);
				isInstance = mas.isInstanceAttribute();
			}
			//	Max
			if (isInstance)
			{
				MStorage storage = MStorage.get(getCtx(), getM_Locator_ID(), 
					getM_Product_ID(), getM_AttributeSetInstance_ID(), get_TrxName());
				if (storage != null)
				{
					BigDecimal qty = storage.getQtyOnHand();
					if (getMovementQty().compareTo(qty) > 0)
					{
						log.warning(""Qty - Stock="" + qty + "", Movement="" + getMovementQty());
						log.saveError(""QtyInsufficient"", ""="" + qty); 
						return false;
					}
				}
			}
		}	/**/
		
		return true;
	}	//	beforeSave
"
org.compiere.model.MInOutLine.beforeDelete,MInOutLine.java,"boolean beforeDelete ()
	{
		if (getParent().getDocStatus().equals(X_M_InOut.DOCSTATUS_Drafted) ||
			getParent().getDocStatus().equals(X_M_InOut.DOCSTATUS_InProgress))
			return true;
		log.saveError(""Error"", Msg.getMsg(getCtx(), ""CannotDelete""));
		return false;
	}	//	beforeDelete
"
org.compiere.model.MInOutLine.toString,MInOutLine.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MInOutLine["").append (get_ID())
			.append("",M_Product_ID="").append(getM_Product_ID())
			.append("",QtyEntered="").append(getQtyEntered())
			.append("",MovementQty="").append(getMovementQty())
			.append("",M_AttributeSetInstance_ID="").append(getM_AttributeSetInstance_ID())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MInOutLine.getBase,MInOutLine.java,"BigDecimal getBase (String CostDistribution)
	{
		if (X_C_LandedCost.LANDEDCOSTDISTRIBUTION_Costs.equals(CostDistribution))
		{
			//	TODO Costs!
			log.severe(""Not Implemented yet - Cost"");
			return Env.ZERO;
		}
		else if (X_C_LandedCost.LANDEDCOSTDISTRIBUTION_Line.equals(CostDistribution))
			return Env.ONE;
		else if (X_C_LandedCost.LANDEDCOSTDISTRIBUTION_Quantity.equals(CostDistribution))
			return getMovementQty();
		else if (X_C_LandedCost.LANDEDCOSTDISTRIBUTION_Volume.equals(CostDistribution))
		{
			MProduct product = getProduct();
			if (product == null)
			{
				log.severe(""No Product"");
				return Env.ZERO;
			}
			return getMovementQty().multiply(product.getVolume());
		}
		else if (X_C_LandedCost.LANDEDCOSTDISTRIBUTION_Weight.equals(CostDistribution))
		{
			MProduct product = getProduct();
			if (product == null)
			{
				log.severe(""No Product"");
				return Env.ZERO;
			}
			return getMovementQty().multiply(product.getWeight());
		}
		//
		log.severe(""Invalid Criteria: "" + CostDistribution);
		return Env.ZERO;
	}	//	getBase
"
org.compiere.model.MAllocationHdr.getOfPayment,MAllocationHdr.java,"MAllocationHdr[] getOfPayment (Ctx ctx, int C_Payment_ID, Trx trx)
	{
		String sql = ""SELECT * FROM C_AllocationHdr h ""
			+ ""WHERE IsActive='Y'""
			+ "" AND EXISTS (SELECT * FROM C_AllocationLine l ""
				+ ""WHERE h.C_AllocationHdr_ID=l.C_AllocationHdr_ID AND l.C_Payment_ID=?)"";
		ArrayList<MAllocationHdr> list = new ArrayList<MAllocationHdr>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, trx);
			pstmt.setInt(1, C_Payment_ID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add (new MAllocationHdr(ctx, rs, trx));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MAllocationHdr[] retValue = new MAllocationHdr[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getOfPayment
"
org.compiere.model.MAllocationHdr.getOfInvoice,MAllocationHdr.java,"MAllocationHdr[] getOfInvoice (Ctx ctx, int C_Invoice_ID, Trx trx)
	{
		String sql = ""SELECT * FROM C_AllocationHdr h ""
			+ ""WHERE IsActive='Y'""
			+ "" AND EXISTS (SELECT * FROM C_AllocationLine l ""
				+ ""WHERE h.C_AllocationHdr_ID=l.C_AllocationHdr_ID AND l.C_Invoice_ID=?)"";
		ArrayList<MAllocationHdr> list = new ArrayList<MAllocationHdr>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, trx);
			pstmt.setInt(1, C_Invoice_ID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add (new MAllocationHdr(ctx, rs, trx));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MAllocationHdr[] retValue = new MAllocationHdr[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getOfInvoice
"
org.compiere.model.MAllocationHdr.getLines,MAllocationHdr.java,"MAllocationLine[] getLines (boolean requery)
	{
		if ((m_lines != null) && (m_lines.length != 0) && !requery)
			return m_lines;
		//
		String sql = ""SELECT * FROM C_AllocationLine WHERE C_AllocationHdr_ID=?"";
		ArrayList<MAllocationLine> list = new ArrayList<MAllocationLine>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getC_AllocationHdr_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MAllocationLine line = new MAllocationLine(getCtx(), rs, get_Trx());
				line.setParent(this);
				list.add (line);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		} catch (Exception e)
		{
			pstmt = null;
		}
		//
		m_lines = new MAllocationLine[list.size ()];
		list.toArray (m_lines);
		return m_lines;
	}	//	getLines
"
org.compiere.model.MAllocationHdr.copyFrom,MAllocationHdr.java,"MAllocationHdr copyFrom (MAllocationHdr from, Timestamp dateAcct, Timestamp dateTrx,
		Trx trx)
	{
		MAllocationHdr to = new MAllocationHdr (from.getCtx(), 0, null);
		to.set_Trx(trx);
		PO.copyValues (from, to, from.getAD_Client_ID(), from.getAD_Org_ID());
		to.set_ValueNoCheck (""DocumentNo"", null);
		//
		to.setDocStatus (DOCSTATUS_Drafted);		//	Draft
		to.setDocAction(DOCACTION_Complete);
		//
		to.setDateTrx (dateAcct);
		to.setDateAcct (dateTrx);
		to.setIsManual(false);
		//
		to.setIsApproved (false);
		//
		to.setPosted (false);
		to.setProcessed (false);

		if (!to.save(trx))
			throw new IllegalStateException(""Could not create Allocation"");

		//	Lines
		if (to.copyLinesFrom(from) == 0)
			throw new IllegalStateException(""Could not create Allocation Lines"");

		return to;
	}	//	copyFrom
"
org.compiere.model.MAllocationHdr.copyLinesFrom,MAllocationHdr.java,"int copyLinesFrom (MAllocationHdr otherAllocation)
	{
		if (isProcessed() || isPosted() || (otherAllocation == null))
			return 0;
		MAllocationLine[] fromLines = otherAllocation.getLines(false);
		int count = 0;
		for (MAllocationLine fromLine : fromLines) {
			MAllocationLine line = new MAllocationLine (getCtx(), 0, get_Trx());
			PO.copyValues (fromLine, line, fromLine.getAD_Client_ID(), fromLine.getAD_Org_ID());
			line.setC_AllocationHdr_ID(getC_AllocationHdr_ID());
			line.setParent(this);
			line.set_ValueNoCheck (""C_AllocationLine_ID"", I_ZERO);	// new

			if (line.getC_Payment_ID() != 0)
			{
				MPayment payment = new MPayment(getCtx(), line.getC_Payment_ID(), get_Trx());
				if (DOCSTATUS_Reversed.equals(payment.getDocStatus()))
				{
					MPayment reversal = payment.getReversal();
					if (reversal != null)
					{
						line.setPaymentInfo(reversal.getC_Payment_ID(), 0);
					}
				}
				
				if (fromLine.getC_Invoice_ID() != 0)
				{
					MPaySelectionCheck psc = MPaySelectionCheck.getOfPayment(getCtx(), fromLine.getC_Payment_ID(), get_Trx());
					if (psc != null)
					{
						MPaySelectionLine psl = MPaySelectionLine.getOfInvoiceCheck(getCtx(), fromLine.getC_Invoice_ID(), psc.getC_PaySelectionCheck_ID(), get_Trx());
						if (psl != null)
						{
							psl.setIsCancelled(true);
							psl.save(get_Trx());
						}
					}
				}
			}

			if (line.save(get_Trx()))
				count++;
		}
		if (fromLines.length != count)
			log.log(Level.SEVERE, ""Line difference - From="" + fromLines.length + "" <> Saved="" + count);
		return count;
	}	//	copyLinesFrom
"
org.compiere.model.MAllocationHdr.setReversal,MAllocationHdr.java,"void setReversal(boolean reversal)
	{
		m_reversal = reversal;
	}	//	setReversal
"
org.compiere.model.MAllocationHdr.isReversal,MAllocationHdr.java,"boolean isReversal()
	{
		return m_reversal;
	}	//	isReversal
"
org.compiere.model.MAllocationHdr.addDescription,MAllocationHdr.java,"void addDescription (String description)
	{
		String desc = getDescription();
		if (desc == null)
			setDescription(description);
		else
			setDescription(desc + "" | "" + description);
	}	//	addDescription
"
org.compiere.model.MAllocationHdr.setProcessed,MAllocationHdr.java,"void setProcessed (boolean processed)
	{
		super.setProcessed (processed);
		if (get_ID() == 0)
			return;
		String sql = ""UPDATE C_AllocationHdr SET Processed='""
			+ (processed ? ""Y"" : ""N"")
			+ ""' WHERE C_AllocationHdr_ID="" + getC_AllocationHdr_ID();
		int no = DB.executeUpdate(sql, get_Trx());
		m_lines = null;
		log.fine(processed + "" - #"" + no);
	}	//	setProcessed
"
org.compiere.model.MAllocationHdr.beforeSave,MAllocationHdr.java,"boolean beforeSave (boolean newRecord)
	{
		//	Changed from Not to Active
		if (!newRecord && is_ValueChanged(""IsActive"") && isActive())
		{
			log.severe (""Cannot Re-Activate deactivated Allocations"");
			return false;
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MAllocationHdr.beforeDelete,MAllocationHdr.java,"boolean beforeDelete ()
	{
		Trx trx = get_Trx();
		if ((trx == null))
			log.warning (""No transaction"");
		//
		getLines(true);
		if (isPosted())
		{
			String msg = MPeriod.isOpen(this, m_lines, getDateAcct(), MDocBaseType.DOCBASETYPE_PaymentAllocation);
			if (msg != null)
			{
				log.warning (msg);
				return false;
			}
			setPosted(false);
			if (MFactAcct.delete (Table_ID, get_ID(), trx) < 0)
				return false;
		}
		//	Mark as Inactive
		setIsActive(false);		//	updated DB for line delete/process
		String sql = ""UPDATE C_AllocationHdr SET IsActive='N' WHERE C_AllocationHdr_ID=?"";
		DB.executeUpdate(sql, getC_AllocationHdr_ID(), trx);

		//	Unlink
		getLines(true);
		HashSet<Integer> bps = new HashSet<Integer>();
		for (MAllocationLine line : m_lines) {
			bps.add(Integer.valueOf(line.getC_BPartner_ID()));
			if (!line.delete(true, trx))
				return false;
		}

		return(updateBP(true));
	}	//	beforeDelete
"
org.compiere.model.MAllocationHdr.afterSave,MAllocationHdr.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		return success;
	}	//	afterSave
"
org.compiere.model.MAllocationHdr.processIt,MAllocationHdr.java,"boolean processIt (String processAction)
	{
		m_processMsg = null;
		DocumentEngine engine = new DocumentEngine (this, getDocStatus());
		return engine.processIt (processAction, getDocAction());
	}	//	processIt
"
org.compiere.model.MAllocationHdr.unlockIt,MAllocationHdr.java,"boolean unlockIt()
	{
		log.info(toString());
		setProcessing(false);
		return true;
	}	//	unlockIt
"
org.compiere.model.MAllocationHdr.invalidateIt,MAllocationHdr.java,"boolean invalidateIt()
	{
		log.info(toString());
		setDocAction(DOCACTION_Prepare);
		return true;
	}	//	invalidateIt
"
org.compiere.model.MAllocationHdr.prepareIt,MAllocationHdr.java,"String prepareIt()
	{
		log.info(toString());
		m_processMsg = ModelValidationEngine.get().fireDocValidate
			(this, ModelValidator.DOCTIMING_BEFORE_PREPARE);
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;

		//	Std Period open?
		MAllocationLine[] lines = getLines(true);
		if (lines.length == 0)
		{
			m_processMsg = ""@NoLines@"";
			return DocActionConstants.STATUS_Invalid;
		}
		m_processMsg = MPeriod.isOpen(this, lines, getDateAcct(), MDocBaseType.DOCBASETYPE_PaymentAllocation);
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;
		//	Add up Amounts & validate
		BigDecimal approval = Env.ZERO;
		for (MAllocationLine line : lines) {
			approval = approval.add(line.getWriteOffAmt()).add(line.getDiscountAmt());
			//	Make sure there is BP
			if (line.getC_BPartner_ID() == 0)
			{
				m_processMsg = ""No Business Partner"";
				return DocActionConstants.STATUS_Invalid;
			}
		}
		setApprovalAmt(approval);
		//
		m_justPrepared = true;
		if (!DOCACTION_Complete.equals(getDocAction()))
			setDocAction(DOCACTION_Complete);
		return DocActionConstants.STATUS_InProgress;
	}	//	prepareIt
"
org.compiere.model.MAllocationHdr.approveIt,MAllocationHdr.java,"boolean  approveIt()
	{
		log.info(toString());
		setIsApproved(true);
		return true;
	}	//	approveIt
"
org.compiere.model.MAllocationHdr.rejectIt,MAllocationHdr.java,"boolean rejectIt()
	{
		log.info(toString());
		setIsApproved(false);
		return true;
	}	//	rejectIt
"
org.compiere.model.MAllocationHdr.completeIt,MAllocationHdr.java,"String completeIt()
	{
		//	Re-Check
		if (!m_justPrepared)
		{
			String status = prepareIt();
			if (!DocActionConstants.STATUS_InProgress.equals(status))
				return status;
		}
		//	Implicit Approval
		if (!isApproved())
			approveIt();
		log.info(toString());

		//	Link
		getLines(m_justPrepared);
		HashSet<Integer> bps = new HashSet<Integer>();
		for (MAllocationLine line : m_lines) {
			bps.add(Integer.valueOf(line.processIt(isReversal())));
		}

		if(!updateBP(false))
			return DocActionConstants.STATUS_Invalid;

		//	User Validation
		String valid = ModelValidationEngine.get().fireDocValidate
			(this, ModelValidator.DOCTIMING_AFTER_COMPLETE);
		if (valid != null)
		{
			m_processMsg = valid;
			return DocActionConstants.STATUS_Invalid;
		}

		setProcessed(true);
		setDocAction(DOCACTION_Close);


		return DocActionConstants.STATUS_Completed;
	}	//	completeIt
"
org.compiere.model.MAllocationHdr.voidIt,MAllocationHdr.java,"boolean voidIt()
	{
		log.info(toString());
		boolean retvalue = false;
		if (DOCSTATUS_Closed.equals(getDocStatus())
			|| DOCSTATUS_Reversed.equals(getDocStatus())
			|| DOCSTATUS_Voided.equals(getDocStatus()))
		{
			m_processMsg = ""Document Closed: "" + getDocStatus();
			setDocAction(DOCACTION_None);
			return false;
		}

		//	Not Processed
		if (DOCSTATUS_Drafted.equals(getDocStatus())
			|| DOCSTATUS_Invalid.equals(getDocStatus())
			|| DOCSTATUS_InProgress.equals(getDocStatus())
			|| DOCSTATUS_Approved.equals(getDocStatus())
			|| DOCSTATUS_NotApproved.equals(getDocStatus()) )
		{
			//	Set lines to 0
			HashSet<Integer> bps = new HashSet<Integer>();
			MAllocationLine[] lines = getLines(false);
			for (MAllocationLine line : lines) {
				// Unlink invoices
				bps.add(Integer.valueOf(line.processIt(true)));

				line.setAmount(Env.ZERO);
				line.setDiscountAmt(Env.ZERO);
				line.setWriteOffAmt(Env.ZERO);
				line.setOverUnderAmt(Env.ZERO);

				line.save();
			}
			if(!updateBP(true))
				return false;

			addDescription(Msg.getMsg(getCtx(), ""Voided""));
			retvalue = true;
		}
		else
		{
			retvalue = reverseCorrectIt();
		}

		setProcessed(true);
		return retvalue;
	}	//	voidIt
"
org.compiere.model.MAllocationHdr.closeIt,MAllocationHdr.java,"boolean closeIt()
	{
		log.info(toString());

		setDocAction(DOCACTION_None);
		return true;
	}	//	closeIt
"
org.compiere.model.MAllocationHdr.reverseCorrectIt,MAllocationHdr.java,"boolean reverseCorrectIt()
	{
		log.info(toString());
		boolean retValue = reverseIt();
		return retValue;
	}	//	reverseCorrectionIt
"
org.compiere.model.MAllocationHdr.reverseAccrualIt,MAllocationHdr.java,"boolean reverseAccrualIt()
	{
		log.info(toString());
		boolean retValue = reverseIt();
		return retValue;
	}	//	reverseAccrualIt
"
org.compiere.model.MAllocationHdr.reActivateIt,MAllocationHdr.java,"boolean reActivateIt()
	{
		log.info(toString());
		return false;
	}	//	reActivateIt
"
org.compiere.model.MAllocationHdr.toString,MAllocationHdr.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MAllocationHdr["");
		sb.append(get_ID()).append(""-"").append(getSummary()).append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MAllocationHdr.getDocumentInfo,MAllocationHdr.java,"String getDocumentInfo()
	{
		return Msg.getElement(getCtx(), ""C_AllocationHdr_ID"") + "" "" + getDocumentNo();
	}	//	getDocumentInfo
"
org.compiere.model.MAllocationHdr.createPDF,MAllocationHdr.java,"File createPDF ()
	{
		try
		{
			File temp = File.createTempFile(get_TableName()+get_ID()+""_"", "".pdf"");
			return createPDF (temp);
		}
		catch (Exception e)
		{
			log.severe(""Could not create PDF - "" + e.getMessage());
		}
		return null;
	}	//	getPDF
"
org.compiere.model.MAllocationHdr.createPDF,MAllocationHdr.java,"File createPDF (File file)
	{
	//	ReportEngine re = ReportEngine.get (getCtx(), ReportEngine.INVOICE, getC_Invoice_ID());
	//	if (re == null)
			return null;
	//	return re.getPDF(file);
	}	//	createPDF
"
org.compiere.model.MAllocationHdr.getSummary,MAllocationHdr.java,"String getSummary()
	{
		StringBuffer sb = new StringBuffer();
		sb.append(getDocumentNo());
		//	: Total Lines = 123.00 (#1)
		sb.append("": "")
			.append(Msg.translate(getCtx(),""ApprovalAmt"")).append(""="").append(getApprovalAmt())
			.append("" (#"").append(getLines(false).length).append("")"");
		//	 - Description
		if ((getDescription() != null) && (getDescription().length() > 0))
			sb.append("" - "").append(getDescription());
		return sb.toString();
	}	//	getSummary
"
org.compiere.model.MAllocationHdr.getProcessMsg,MAllocationHdr.java,"String getProcessMsg()
	{
		return m_processMsg;
	}	//	getProcessMsg
"
org.compiere.model.MAllocationHdr.getDoc_User_ID,MAllocationHdr.java,"int getDoc_User_ID()
	{
		return getCreatedBy();
	}	//	getDoc_User_ID
"
org.compiere.model.MAllocationHdr.reverseIt,MAllocationHdr.java,"boolean reverseIt()
	{
		MAllocationLine[] iLines = getLines(true);
		String msg = MPeriod.isOpen(this, iLines, getDateAcct(), MDocBaseType.DOCBASETYPE_PaymentAllocation);
		if (msg != null)
			throw new IllegalStateException(msg);

		//	Deep Copy
		MAllocationHdr reversal = copyFrom (this, getDateAcct(), getDateTrx(),
			get_Trx());
		if (reversal == null)
		{
			m_processMsg = ""Could not create Payment Allocation Reversal"";
			return false;
		}
		reversal.setReversal(true);

		//	Reverse Line Amt
		MAllocationLine[] rLines = reversal.getLines(false);
		for (MAllocationLine rLine : rLines) {
			rLine.setAmount(rLine.getAmount().negate());
			rLine.setDiscountAmt(rLine.getDiscountAmt().negate());
			rLine.setWriteOffAmt(rLine.getWriteOffAmt().negate());
			rLine.setOverUnderAmt(rLine.getOverUnderAmt().negate());
			if (!rLine.save(get_Trx()))
			{
				m_processMsg = ""Could not correct Payment Allocation Reversal Line"";
				return false;
			}
		}
		reversal.addDescription(""{->"" + getDocumentNo() + "")"");
		//
		if (!reversal.processIt(DocActionConstants.ACTION_Complete))
		{
			m_processMsg = ""Reversal ERROR: "" + reversal.getProcessMsg();
			return false;
		}

		reversal.closeIt();
		reversal.setProcessing (false);
		reversal.setDocStatus(DOCSTATUS_Reversed);
		reversal.setDocAction(DOCACTION_None);
		reversal.save(get_Trx());
		m_processMsg = reversal.getDocumentNo();
		addDescription(""("" + reversal.getDocumentNo() + ""<-)"");

		setProcessed(true);
		setDocStatus(DOCSTATUS_Reversed);	//	may come from void
		setDocAction(DOCACTION_None);
		return true;
	}	//	reverse


	private boolean updateBP(boolean reverse)
	{

		getLines(false);
		for (MAllocationLine line : m_lines) {
			int C_Payment_ID = line.getC_Payment_ID();
			int C_BPartner_ID = line.getC_BPartner_ID();
			int M_Invoice_ID = line.getC_Invoice_ID();
			if ((C_Payment_ID !=0) || (C_BPartner_ID == 0) || (M_Invoice_ID == 0) )
				continue;

			MInvoice inv = new MInvoice (getCtx(), M_Invoice_ID, get_Trx());

			MBPartner bp = new MBPartner (getCtx(), line.getC_BPartner_ID(), get_Trx());
			//	Update total revenue and balance / credit limit (reversed on AllocationLine.processIt)
			BigDecimal cashAmt = MConversionRate.convertBase(getCtx(), line.getAmount().add(line.getDiscountAmt()).add(line.getWriteOffAmt()),	//	CM adjusted
			getC_Currency_ID(), getDateAcct(), 0, getAD_Client_ID(), getAD_Org_ID());
			if (cashAmt == null)
			{
				m_processMsg = ""Could not convert C_Currency_ID="" + getC_Currency_ID()
					+ "" to base C_Currency_ID="" + MClient.get(Env.getCtx()).getC_Currency_ID();
				return false;
			}

			//	Total Balance
			BigDecimal newBalance = bp.getTotalOpenBalance(false);
			if (newBalance == null)
				newBalance = Env.ZERO;

			if(reverse)
				newBalance = newBalance.add(cashAmt);
			else
				newBalance = newBalance.subtract(cashAmt);

			BigDecimal newCreditAmt = Env.ZERO;
			if (inv.isSOTrx())
			{
				newCreditAmt = bp.getSO_CreditUsed();

				if(reverse)
				{
					if (newCreditAmt == null)
						newCreditAmt = cashAmt;
					else
						newCreditAmt = newCreditAmt.add(cashAmt);
				}
				else
				{
					if (newCreditAmt == null)
						newCreditAmt = cashAmt.negate();
					else
						newCreditAmt = newCreditAmt.subtract(cashAmt);
				}
			}

			log.fine(""TotalOpenBalance="" + bp.getTotalOpenBalance(false) + ""("" + cashAmt
				+ "", Credit="" + bp.getSO_CreditUsed() + ""->"" + newCreditAmt
				+ "", Balance="" + bp.getTotalOpenBalance(false) + "" -> "" + newBalance);
			bp.setSO_CreditUsed(newCreditAmt);

			bp.setTotalOpenBalance(newBalance);
			bp.setSOCreditStatus();
			if (!bp.save(get_Trx()))
			{
				m_processMsg = ""Could not update Business Partner"";
				return false;
			}

		} // for all lines

		return true;
	}	//	updateBP

}   //  MAllocation
"
org.compiere.model.MAllocationHdr.updateBP,MAllocationHdr.java,"boolean updateBP(boolean reverse)
	{

		getLines(false);
		for (MAllocationLine line : m_lines) {
			int C_Payment_ID = line.getC_Payment_ID();
			int C_BPartner_ID = line.getC_BPartner_ID();
			int M_Invoice_ID = line.getC_Invoice_ID();
			if ((C_Payment_ID !=0) || (C_BPartner_ID == 0) || (M_Invoice_ID == 0) )
				continue;

			MInvoice inv = new MInvoice (getCtx(), M_Invoice_ID, get_Trx());

			MBPartner bp = new MBPartner (getCtx(), line.getC_BPartner_ID(), get_Trx());
			//	Update total revenue and balance / credit limit (reversed on AllocationLine.processIt)
			BigDecimal cashAmt = MConversionRate.convertBase(getCtx(), line.getAmount().add(line.getDiscountAmt()).add(line.getWriteOffAmt()),	//	CM adjusted
			getC_Currency_ID(), getDateAcct(), 0, getAD_Client_ID(), getAD_Org_ID());
			if (cashAmt == null)
			{
				m_processMsg = ""Could not convert C_Currency_ID="" + getC_Currency_ID()
					+ "" to base C_Currency_ID="" + MClient.get(Env.getCtx()).getC_Currency_ID();
				return false;
			}

			//	Total Balance
			BigDecimal newBalance = bp.getTotalOpenBalance(false);
			if (newBalance == null)
				newBalance = Env.ZERO;

			if(reverse)
				newBalance = newBalance.add(cashAmt);
			else
				newBalance = newBalance.subtract(cashAmt);

			BigDecimal newCreditAmt = Env.ZERO;
			if (inv.isSOTrx())
			{
				newCreditAmt = bp.getSO_CreditUsed();

				if(reverse)
				{
					if (newCreditAmt == null)
						newCreditAmt = cashAmt;
					else
						newCreditAmt = newCreditAmt.add(cashAmt);
				}
				else
				{
					if (newCreditAmt == null)
						newCreditAmt = cashAmt.negate();
					else
						newCreditAmt = newCreditAmt.subtract(cashAmt);
				}
			}

			log.fine(""TotalOpenBalance="" + bp.getTotalOpenBalance(false) + ""("" + cashAmt
				+ "", Credit="" + bp.getSO_CreditUsed() + ""->"" + newCreditAmt
				+ "", Balance="" + bp.getTotalOpenBalance(false) + "" -> "" + newBalance);
			bp.setSO_CreditUsed(newCreditAmt);

			bp.setTotalOpenBalance(newBalance);
			bp.setSOCreditStatus();
			if (!bp.save(get_Trx()))
			{
				m_processMsg = ""Could not update Business Partner"";
				return false;
			}

		} // for all lines

		return true;
	}	//	updateBP
"
org.compiere.model.MOrderLine.getNotReserved,MOrderLine.java,"BigDecimal getNotReserved (Ctx ctx, int M_Warehouse_ID,
		int M_Product_ID, int M_AttributeSetInstance_ID, int excludeC_OrderLine_ID)
	{
		BigDecimal retValue = Env.ZERO;
		String sql = ""SELECT SUM(QtyOrdered-QtyDelivered-QtyReserved) ""
			+ ""FROM C_OrderLine ol""
			+ "" INNER JOIN C_Order o ON (ol.C_Order_ID=o.C_Order_ID) ""
			+ ""WHERE ol.M_Warehouse_ID=?""	//	#1
			+ "" AND M_Product_ID=?""			//	#2
			+ "" AND o.IsSOTrx='Y' AND o.DocStatus='DR'""
			+ "" AND QtyOrdered-QtyDelivered-QtyReserved<>0""
			+ "" AND ol.C_OrderLine_ID<>?"";
		if (M_AttributeSetInstance_ID != 0)
			sql += "" AND M_AttributeSetInstance_ID=?"";

		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, M_Warehouse_ID);
			pstmt.setInt (2, M_Product_ID);
			pstmt.setInt (3, excludeC_OrderLine_ID);
			if (M_AttributeSetInstance_ID != 0)
				pstmt.setInt (4, M_AttributeSetInstance_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				retValue = rs.getBigDecimal(1);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		if (retValue == null)
			s_log.fine(""-"");
		else
			s_log.fine(retValue.toString());
		return retValue;
	}	//	getNotReserved
"
org.compiere.model.MOrderLine.setOrder,MOrderLine.java,"void setOrder (MOrder order)
	{
		setClientOrg(order);
		setC_BPartner_ID(order.getC_BPartner_ID());
		setC_BPartner_Location_ID(order.getC_BPartner_Location_ID());
		setM_Warehouse_ID(order.getM_Warehouse_ID());
		setDateOrdered(order.getDateOrdered());
		setDatePromised(order.getDatePromised());
		setC_Currency_ID(order.getC_Currency_ID());
		//
		setHeaderInfo(order);	//	sets m_order
		//	Don't set Activity, etc as they are overwrites
	}	//	setOrder
"
org.compiere.model.MOrderLine.setHeaderInfo,MOrderLine.java,"void setHeaderInfo (MOrder order)
	{
		m_parent = order;
		m_precision = Integer.valueOf(order.getPrecision());
		m_M_PriceList_ID = order.getM_PriceList_ID();
		m_IsSOTrx = order.isSOTrx();
	}	//	setHeaderInfo
"
org.compiere.model.MOrderLine.getParent,MOrderLine.java,"MOrder getParent()
	{
		if ((m_parent == null)
			|| (m_parent.get_Trx() != get_Trx()))
			m_parent = new MOrder(getCtx(), getC_Order_ID(), get_Trx());
		return m_parent;
	}	//	getParent
"
org.compiere.model.MOrderLine.setPrice,MOrderLine.java,"void setPrice (BigDecimal PriceActual)
	{
		setPriceEntered(PriceActual);
		setPriceActual (PriceActual);
	}	//	setPrice
"
org.compiere.model.MOrderLine.setPrice,MOrderLine.java,"void setPrice()
	{
		if (getM_Product_ID() == 0)
			return;
		if (m_M_PriceList_ID == 0)
			throw new IllegalStateException(""PriceList unknown!"");
		setPrice (m_M_PriceList_ID);
	}	//	setPrice
"
org.compiere.model.MOrderLine.setPrice,MOrderLine.java,"void setPrice (int M_PriceList_ID)
	{
		if (getM_Product_ID() == 0)
			return;
		//
		log.fine(toString() + "" - M_PriceList_ID="" + M_PriceList_ID);
		getProductPricing (M_PriceList_ID);
		setPriceActual (m_productPrice.getPriceStd());
		setPriceList (m_productPrice.getPriceList());
		setPriceLimit (m_productPrice.getPriceLimit());
		//
		if (getQtyEntered().compareTo(getQtyOrdered()) == 0)
			setPriceEntered(getPriceActual());
		else
			setPriceEntered(getPriceActual().multiply(getQtyOrdered()
				.divide(getQtyEntered(), 12, BigDecimal.ROUND_HALF_UP)));	//	recision

		//	Calculate Discount
		setDiscount(m_productPrice.getDiscount());

		//	Set UOM
		// gwu: only set UOM if not already set
		if( getC_UOM_ID() == 0 )
			setC_UOM_ID(m_productPrice.getC_UOM_ID());
	}	//	setPrice
"
org.compiere.model.MOrderLine.checkPrice,MOrderLine.java,"void checkPrice()
	{
		if (getM_Product_ID() == 0)
			return;
		if (m_M_PriceList_ID == 0)
			throw new IllegalStateException(""PriceList unknown!"");
		getProductPricing (m_M_PriceList_ID);
	}	//	setPrice
"
org.compiere.model.MOrderLine.getProductPricing,MOrderLine.java,"MProductPricing getProductPricing (int M_PriceList_ID)
	{
		m_productPrice = new MProductPricing (getAD_Client_ID(), getAD_Org_ID(),
			getM_Product_ID(), getC_BPartner_ID(), getQtyOrdered(), m_IsSOTrx);
		m_productPrice.setM_PriceList_ID(M_PriceList_ID);
		m_productPrice.setPriceDate(getDateOrdered());
		//
		m_productPrice.calculatePrice();
		return m_productPrice;
	}	//	getProductPrice
"
org.compiere.model.MOrderLine.setTax,MOrderLine.java,"boolean setTax()
	{
		int ii = Tax.get(getCtx(), getM_Product_ID(), getC_Charge_ID(),
			getDateOrdered(), getDateOrdered(),
			getAD_Org_ID(), getM_Warehouse_ID(),
			getC_BPartner_Location_ID(),		//	should be bill to
			getC_BPartner_Location_ID(), m_IsSOTrx);
		if (ii == 0)
		{
			log.log(Level.SEVERE, ""No Tax found"");
			return false;
		}
		setC_Tax_ID (ii);
		return true;
	}	//	setTax
"
org.compiere.model.MOrderLine.setTax,MOrderLine.java,"void setTax (int windowNo, String columnName)
	{
		if(CThreadUtil.isCalloutActive())
			return;
		//	Check Product
		int M_Product_ID = getM_Product_ID();
		int C_Charge_ID = getC_Charge_ID();
		log.fine(""Product="" + M_Product_ID + "", C_Charge_ID="" + C_Charge_ID);
		if ((M_Product_ID == 0) && (C_Charge_ID == 0)) {
			setAmt(windowNo, columnName);		//	true
			return;
		}

		//	Check Partner Location
		int shipC_BPartner_Location_ID = getC_BPartner_Location_ID();
		if (shipC_BPartner_Location_ID == 0) {
			setAmt(windowNo, columnName);		//
			return;
		}
		log.fine(""Ship BP_Location="" + shipC_BPartner_Location_ID);

		//
		Timestamp billDate = getDateOrdered();
		log.fine(""Bill Date="" + billDate);

		Timestamp shipDate = getDatePromised();
		log.fine(""Ship Date="" + shipDate);

		int AD_Org_ID = getAD_Org_ID();
		log.fine(""Org="" + AD_Org_ID);

		int M_Warehouse_ID = getM_Warehouse_ID();
		log.fine(""Warehouse="" + M_Warehouse_ID);

		int billC_BPartner_Location_ID = getCtx().getContextAsInt(windowNo, ""Bill_Location_ID"");
		if (billC_BPartner_Location_ID == 0)
			billC_BPartner_Location_ID = shipC_BPartner_Location_ID;
		log.fine(""Bill BP_Location="" + billC_BPartner_Location_ID);

		//
		int C_Tax_ID = Tax.get (getCtx(), M_Product_ID, C_Charge_ID, billDate, shipDate,
			AD_Org_ID, M_Warehouse_ID, billC_BPartner_Location_ID, shipC_BPartner_Location_ID,
			getCtx().isSOTrx(windowNo));
		log.info(""Tax ID="" + C_Tax_ID);
		//
		if (C_Tax_ID == 0)
		{
			ValueNamePair pp = CLogger.retrieveError();
			if (pp != null)
				p_changeVO.addError(pp.getValue());
			else
				p_changeVO.addError(""Tax Error"");
		}
		else
			super.setC_Tax_ID(C_Tax_ID);
		//
		setAmt(windowNo, columnName);
	}	//	setTax (callout)
"
org.compiere.model.MOrderLine.setLineNetAmt,MOrderLine.java,"void setLineNetAmt ()
	{
		BigDecimal bd = getPriceActual().multiply(getQtyOrdered());
		if (bd.scale() > getPrecision())
			bd = bd.setScale(getPrecision(), BigDecimal.ROUND_HALF_UP);
		super.setLineNetAmt (bd);
	}	//	setLineNetAmt
"
org.compiere.model.MOrderLine.getPrecision,MOrderLine.java,"int getPrecision()
	{
		if (m_precision != null)
			return m_precision.intValue();
		//
		if (getC_Currency_ID() == 0)
		{
			setOrder (getParent());
			if (m_precision != null)
				return m_precision.intValue();
		}
		if (getC_Currency_ID() != 0)
		{
			MCurrency cur = MCurrency.get(getCtx(), getC_Currency_ID());
			if (cur.get_ID() != 0)
			{
				m_precision = Integer.valueOf (cur.getStdPrecision());
				return m_precision.intValue();
			}
		}
		//	Fallback
		String sql = ""SELECT c.StdPrecision ""
			+ ""FROM C_Currency c INNER JOIN C_Order x ON (x.C_Currency_ID=c.C_Currency_ID) ""
			+ ""WHERE x.C_Order_ID=?"";
		int i = DB.getSQLValue(get_Trx(), sql, getC_Order_ID());
		m_precision = Integer.valueOf(i);
		return m_precision.intValue();
	}	//	getPrecision
"
org.compiere.model.MOrderLine.setProduct,MOrderLine.java,"void setProduct (MProduct product)
	{
		m_product = product;
		if (m_product != null)
		{
			setM_Product_ID(m_product.getM_Product_ID());
			setC_UOM_ID (m_product.getC_UOM_ID());
		}
		else
		{
			setM_Product_ID(0);
			set_ValueNoCheck (""C_UOM_ID"", null);
		}
		setM_AttributeSetInstance_ID(0);
	}	//	setProduct
"
org.compiere.model.MOrderLine.setM_Product_ID,MOrderLine.java,"void setM_Product_ID (int M_Product_ID, boolean setUOM)
	{
		if (setUOM)
			setProduct(MProduct.get(getCtx(), M_Product_ID));
		else
			super.setM_Product_ID (M_Product_ID);
		setM_AttributeSetInstance_ID(0);
	}	//	setM_Product_ID
"
org.compiere.model.MOrderLine.setM_Product_ID,MOrderLine.java,"void setM_Product_ID (int M_Product_ID, int C_UOM_ID)
	{
		super.setM_Product_ID (M_Product_ID);
		if (C_UOM_ID != 0)
			super.setC_UOM_ID(C_UOM_ID);
		setM_AttributeSetInstance_ID(0);
	}	//	setM_Product_ID
"
org.compiere.model.MOrderLine.setM_Product_ID,MOrderLine.java,"void setM_Product_ID (String oldM_Product_ID,
			String newM_Product_ID, int windowNo) throws Exception
	{
		if ((newM_Product_ID == null) || (newM_Product_ID.length() == 0))
		{
			setM_AttributeSetInstance_ID(0);
			return;
		}
		int M_Product_ID = Integer.parseInt(newM_Product_ID);
		super.setM_Product_ID(M_Product_ID);
		if (M_Product_ID == 0)
		{
			setM_AttributeSetInstance_ID(0);
			return;
		}

		// Skip these steps for RMA. These fields are copied over from the orignal order instead.
		if (getParent().isReturnTrx())
			return;


		//
		setC_Charge_ID(0);
		//	Set Attribute
		int M_AttributeSetInstance_ID = getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_AttributeSetInstance_ID"");
		if ((getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_Product_ID"") == M_Product_ID)
			&& (M_AttributeSetInstance_ID != 0))
			setM_AttributeSetInstance_ID(M_AttributeSetInstance_ID);
		else
			setM_AttributeSetInstance_ID(0);

		/*****	Price Calculation see also qty	****/
		int C_BPartner_ID = getCtx().getContextAsInt(windowNo, ""C_BPartner_ID"");
		BigDecimal Qty = getQtyOrdered();
		boolean IsSOTrx = getCtx().isSOTrx(windowNo);
		MProductPricing pp = new MProductPricing (getAD_Client_ID(), getAD_Org_ID(),
				M_Product_ID, C_BPartner_ID, Qty, IsSOTrx);
		//
		MOrder order = getParent();		
		order.setPriceListVersion(windowNo);	//	why?? inconstent to swing and invoice
		int M_PriceList_ID = order.getM_PriceList_ID();	
	//	int M_PriceList_ID = getCtx().getContextAsInt(WindowNo, ""M_PriceList_ID"");
		pp.setM_PriceList_ID(M_PriceList_ID);
		MPriceList pl = MPriceList.get(getCtx(), M_PriceList_ID, null);
		Timestamp orderDate = getDateOrdered();
		pp.setPriceDate(orderDate);
		int M_PriceList_Version_ID = pl.getPriceListVersion(orderDate).getM_PriceList_Version_ID();
		pp.setM_PriceList_Version_ID(M_PriceList_Version_ID);
		
		if (p_changeVO != null)
			p_changeVO.setContext(getCtx(), windowNo, ""M_PriceList_Version_ID"", M_PriceList_Version_ID);

		pp.calculatePrice();
		if (!pp.isCalculated())
		{
			setPriceList(BigDecimal.ZERO);
			setPriceLimit(BigDecimal.ZERO);
			setPriceActual(BigDecimal.ZERO);
			setPriceEntered(BigDecimal.ZERO);
			p_changeVO.addError(Msg.getMsg(getCtx(), ""ProductNotOnPriceList""));
			return;
		}

		//
		setPriceList(pp.getPriceList());
		setPriceLimit(pp.getPriceLimit());
		setPriceActual(pp.getPriceStd());
		setPriceEntered(pp.getPriceStd());
		setC_Currency_ID(pp.getC_Currency_ID());
		setDiscount(pp.getDiscount());
		setC_UOM_ID(pp.getC_UOM_ID());
		setQtyOrdered(getQtyEntered());
		if (p_changeVO != null)
		{
			p_changeVO.setContext(getCtx(), windowNo, ""EnforcePriceLimit"", pp.isEnforcePriceLimit());
			p_changeVO.setContext(getCtx(), windowNo, ""DiscountSchema"", pp.isDiscountSchema());
		}

		//	Check/Update Warehouse Setting
		//	int M_Warehouse_ID = ctx.getContextAsInt( Env.WINDOW_INFO, ""M_Warehouse_ID"");
		//	Integer wh = (Integer)mTab.getValue(""M_Warehouse_ID"");
		//	if (wh.intValue() != M_Warehouse_ID)
		//	{
		//		mTab.setValue(""M_Warehouse_ID"", Integer.valueOf(M_Warehouse_ID));
		//		ADialog.warn(,WindowNo, ""WarehouseChanged"");
		//	}


		if (IsSOTrx)
		{
			MProduct product = getProduct();
			if (product.isStocked())
			{
				BigDecimal QtyOrdered = getQtyOrdered();
				int M_Warehouse_ID = getM_Warehouse_ID();
				M_AttributeSetInstance_ID = getM_AttributeSetInstance_ID();
				BigDecimal available = MStorage.getQtyAvailable
					(M_Warehouse_ID, M_Product_ID, M_AttributeSetInstance_ID, null);
				if (available == null)
					available = Env.ZERO;
				if (available.signum() == 0)
					p_changeVO.addError(Msg.getMsg(getCtx(), ""NoQtyAvailable"", ""0""));
				else if (available.compareTo(QtyOrdered) < 0)
					p_changeVO.addError(Msg.getMsg(getCtx(), ""InsufficientQtyAvailable"", available.toString()));
				else
				{
					int C_OrderLine_ID = getC_OrderLine_ID();
					BigDecimal notReserved = MOrderLine.getNotReserved(getCtx(),
						M_Warehouse_ID, M_Product_ID, M_AttributeSetInstance_ID,
						C_OrderLine_ID);
					if (notReserved == null)
						notReserved = Env.ZERO;
					BigDecimal total = available.subtract(notReserved);
					if (total.compareTo(QtyOrdered) < 0)
					{
						String info = Msg.parseTranslation(getCtx(), ""@QtyAvailable@="" + available
							+ "" - @QtyNotReserved@="" + notReserved + "" = "" + total);
						p_changeVO.addError(Msg.getMsg(getCtx(), ""InsufficientQtyAvailable"", info));
					}
				}
			}
		}
		//
		setTax (windowNo, ""M_Product_ID"");
	}	//	setM_Product_ID
"
org.compiere.model.MOrderLine.setM_Warehouse_ID,MOrderLine.java,"void setM_Warehouse_ID (String oldM_Warehouse_ID,
			String newM_Warehouse_ID, int windowNo) throws Exception
	{
		if ((newM_Warehouse_ID == null) || (newM_Warehouse_ID.length() == 0))
			return;
		int M_Warehouse_ID = Integer.parseInt(newM_Warehouse_ID);
		if (M_Warehouse_ID == 0)
			return;
		super.setM_Warehouse_ID(M_Warehouse_ID);		

		int M_Product_ID = getM_Product_ID();
		// if product is not yet selected/chosen
		if (M_Product_ID == 0)
			return;

		// Skip these steps for RMA. These fields are copied over from the orignal order instead.
		if (getParent().isReturnTrx())
			return;

		boolean IsSOTrx = getCtx().isSOTrx(windowNo);

		if (IsSOTrx)
		{
			MProduct product = getProduct();
			if (product.isStocked())
			{
				BigDecimal QtyOrdered = getQtyOrdered();
				int M_AttributeSetInstance_ID = getM_AttributeSetInstance_ID();
				BigDecimal available = MStorage.getQtyAvailable
					(M_Warehouse_ID, M_Product_ID, M_AttributeSetInstance_ID, null);
				if (available == null)
					available = Env.ZERO;
				if (available.signum() == 0)
					p_changeVO.addError(Msg.getMsg(getCtx(), ""NoQtyAvailable"", ""0""));
				else if (available.compareTo(QtyOrdered) < 0)
					p_changeVO.addError(Msg.getMsg(getCtx(), ""InsufficientQtyAvailable"", available.toString()));
				else
				{
					int C_OrderLine_ID = getC_OrderLine_ID();
					BigDecimal notReserved = MOrderLine.getNotReserved(getCtx(),
						M_Warehouse_ID, M_Product_ID, M_AttributeSetInstance_ID,
						C_OrderLine_ID);
					if (notReserved == null)
						notReserved = Env.ZERO;
					BigDecimal total = available.subtract(notReserved);
					if (total.compareTo(QtyOrdered) < 0)
					{
						String info = Msg.parseTranslation(getCtx(), ""@QtyAvailable@="" + available
							+ "" - @QtyNotReserved@="" + notReserved + "" = "" + total);
						p_changeVO.addError(Msg.getMsg(getCtx(), ""InsufficientQtyAvailable"", info));
					}
				}
			}
		}
		setTax (windowNo, ""M_Warehouse_ID"");
	}	//	setM_Warehouse_ID
"
org.compiere.model.MOrderLine.getProduct,MOrderLine.java,"MProduct getProduct()
	{
		if ((m_product == null) && (getM_Product_ID() != 0))
			m_product =  MProduct.get (getCtx(), getM_Product_ID());
		return m_product;
	}	//	getProduct
"
org.compiere.model.MOrderLine.setM_AttributeSetInstance_ID,MOrderLine.java,"void setM_AttributeSetInstance_ID (int M_AttributeSetInstance_ID)
	{
		if (M_AttributeSetInstance_ID == 0)		//	 0 is valid ID
			set_Value(""M_AttributeSetInstance_ID"", Integer.valueOf(0));
		else
			super.setM_AttributeSetInstance_ID (M_AttributeSetInstance_ID);
	}	//	setM_AttributeSetInstance_ID
"
org.compiere.model.MOrderLine.setM_Warehouse_ID,MOrderLine.java,"void setM_Warehouse_ID (int M_Warehouse_ID)
	{
		if ((getM_Warehouse_ID() > 0)
			&& (getM_Warehouse_ID() != M_Warehouse_ID)
			&& !canChangeWarehouse())
			log.severe(""Ignored - Already Delivered/Invoiced/Reserved"");
		else
			super.setM_Warehouse_ID (M_Warehouse_ID);
	}	//	setM_Warehouse_ID
"
org.compiere.model.MOrderLine.setC_BPartner_Location_ID,MOrderLine.java,"void setC_BPartner_Location_ID (String oldC_BPartner_Location_ID,
			String newC_BPartner_Location_ID, int windowNo) throws Exception
	{
		if ((newC_BPartner_Location_ID == null) || (newC_BPartner_Location_ID.length() == 0))
			return;
		int C_BPartner_Location_ID = Integer.parseInt(newC_BPartner_Location_ID);
		if (C_BPartner_Location_ID == 0)
			return;
		//
		super.setC_BPartner_Location_ID(C_BPartner_Location_ID);
		setTax(windowNo, ""C_BPartner_Location_ID"");
	}	//	setC_BPartner_Location_ID
"
org.compiere.model.MOrderLine.setC_UOM_ID,MOrderLine.java,"void setC_UOM_ID (String oldC_UOM_ID,
			String newC_UOM_ID, int windowNo) throws Exception
	{
		if ((newC_UOM_ID == null) || (newC_UOM_ID.length() == 0))
			return;
		int C_UOM_ID = Integer.parseInt(newC_UOM_ID);
		if (C_UOM_ID == 0)
			return;
		//
		super.setC_UOM_ID(C_UOM_ID);
		setQty(windowNo, ""C_UOM_ID"");
		setAmt(windowNo, ""C_UOM_ID"");
	}	//	setC_UOM_ID
"
org.compiere.model.MOrderLine.setM_AttributeSetInstance_ID,MOrderLine.java,"void setM_AttributeSetInstance_ID (String oldM_AttributeSetInstance_ID,
			String newM_AttributeSetInstance_ID, int windowNo) throws Exception
	{
		if ((newM_AttributeSetInstance_ID == null) || (newM_AttributeSetInstance_ID.length() == 0))
			return;
		int M_AttributeSetInstance_ID = Integer.parseInt(newM_AttributeSetInstance_ID);
		if (M_AttributeSetInstance_ID == 0)
			return;
		//
		super.setM_AttributeSetInstance_ID(M_AttributeSetInstance_ID);
		setQty(windowNo, ""M_AttributeSetInstance_ID"");
	}	//	setM_AttributeSetInstance_ID
"
org.compiere.model.MOrderLine.setDiscount,MOrderLine.java,"void setDiscount (String oldDiscount,
			String newDiscount, int windowNo) throws Exception
	{
		if ((newDiscount == null) || (newDiscount.length() == 0))
			return;
		BigDecimal Discount = new BigDecimal(newDiscount);
		super.setDiscount(Discount);
		setAmt(windowNo, ""Discount"");
		
	}	//	setDiscount
"
org.compiere.model.MOrderLine.setPriceActual,MOrderLine.java,"void setPriceActual (String oldPriceActual,
			String newPriceActual, int windowNo) throws Exception
	{
		if ((newPriceActual == null) || (newPriceActual.length() == 0))
			return;
		BigDecimal PriceActual = new BigDecimal(newPriceActual);
		super.setPriceActual(PriceActual);
		setAmt(windowNo, ""PriceActual"");
		
	}	//	setPriceActual
"
org.compiere.model.MOrderLine.setPriceEntered,MOrderLine.java,"void setPriceEntered (String oldPriceEntered,
			String newPriceEntered, int windowNo) throws Exception
	{
		if ((newPriceEntered == null) || (newPriceEntered.length() == 0))
			return;
		BigDecimal PriceEntered = new BigDecimal(newPriceEntered);
		super.setPriceEntered(PriceEntered);
		setAmt(windowNo, ""PriceEntered"");
	}	//	setPriceEntered
"
org.compiere.model.MOrderLine.setPriceList,MOrderLine.java,"void setPriceList (String oldPriceList,
			String newPriceList, int windowNo) throws Exception
	{
		if ((newPriceList == null) || (newPriceList.length() == 0))
			return;
		BigDecimal PriceList = new BigDecimal(newPriceList);
		super.setPriceList(PriceList);
		setAmt(windowNo, ""PriceList"");
	}	//	setPriceList
"
org.compiere.model.MOrderLine.setQtyEntered,MOrderLine.java,"void setQtyEntered (String oldQtyEntered,
			String newQtyEntered, int windowNo) throws Exception
	{
		if ((newQtyEntered == null) || (newQtyEntered.length() == 0))
			return;
		BigDecimal QtyEntered = new BigDecimal(newQtyEntered);
		super.setQtyEntered(QtyEntered);
		setQty(windowNo, ""QtyEntered"");
		setAmt(windowNo, ""QtyEntered"");
	}	//	setQtyEntered
"
org.compiere.model.MOrderLine.setQtyOrdered,MOrderLine.java,"void setQtyOrdered (String oldQtyOrdered,
			String newQtyOrdered, int windowNo) throws Exception
	{
		if ((newQtyOrdered == null) || (newQtyOrdered.length() == 0))
			return;
		BigDecimal QtyOrdered = new BigDecimal(newQtyOrdered);
		super.setQtyOrdered(QtyOrdered);
		setQty(windowNo, ""QtyOrdered"");
		setAmt(windowNo, ""QtyOrdered"");
	}	//	setQtyOrdered
"
org.compiere.model.MOrderLine.setS_ResourceAssignment_ID,MOrderLine.java,"void setS_ResourceAssignment_ID (String oldS_ResourceAssignment_ID,
			String newS_ResourceAssignment_ID, int windowNo) throws Exception
	{
		if ((newS_ResourceAssignment_ID == null) || (newS_ResourceAssignment_ID.length() == 0))
			return;
		int S_ResourceAssignment_ID = Integer.parseInt(newS_ResourceAssignment_ID);
		if (S_ResourceAssignment_ID == 0)
			return;
		//
		super.setS_ResourceAssignment_ID(S_ResourceAssignment_ID);

		int M_Product_ID = 0;
		String Name = null;
		String Description = null;
		BigDecimal Qty = null;
		String sql = ""SELECT p.M_Product_ID, ra.Name, ra.Description, ra.Qty ""
			+ ""FROM S_ResourceAssignment ra""
			+ "" INNER JOIN M_Product p ON (p.S_Resource_ID=ra.S_Resource_ID) ""
			+ ""WHERE ra.S_ResourceAssignment_ID=?"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, S_ResourceAssignment_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				M_Product_ID = rs.getInt (1);
				Name = rs.getString(2);
				Description = rs.getString(3);
				Qty = rs.getBigDecimal(4);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}

		log.fine(""S_ResourceAssignment_ID="" + S_ResourceAssignment_ID
				+ "" - M_Product_ID="" + M_Product_ID);
		if (M_Product_ID != 0)
		{
			setM_Product_ID(M_Product_ID);
			if (Description != null)
				Name += "" ("" + Description + "")"";
			if (!""."".equals(Name))
				setDescription(Name);
			if (Qty != null)
				setQtyOrdered(Qty);
		}
	}	//	setS_ResourceAssignment_ID
"
org.compiere.model.MOrderLine.setAmt,MOrderLine.java,"void setAmt(int windowNo, String columnName)
	{
		if(CThreadUtil.isCalloutActive())
			return;
		log.info(""NOw in setAmt:""+columnName);
		int C_UOM_To_ID = getC_UOM_ID();
		int M_Product_ID = getM_Product_ID();
		int M_PriceList_ID = getCtx().getContextAsInt(windowNo, ""M_PriceList_ID"");
		int StdPrecision = MPriceList.getPricePrecision(getCtx(), M_PriceList_ID);
		BigDecimal QtyEntered, QtyOrdered, PriceEntered, PriceActual, PriceLimit, Discount, PriceList;
		//	get values
		QtyEntered = getQtyEntered();
		QtyOrdered = getQtyOrdered();
		log.fine(""QtyEntered="" + QtyEntered + "", Ordered="" + QtyOrdered + "", UOM="" + C_UOM_To_ID);
		//
		PriceEntered = getPriceEntered();
		PriceActual = getPriceActual();
		Discount = getDiscount();
		PriceLimit = getPriceLimit();
		PriceList = getPriceList();
		log.fine(""PriceList="" + PriceList + "", Limit="" + PriceLimit + "", Precision="" + StdPrecision);
		log.fine(""PriceEntered="" + PriceEntered + "", Actual="" + PriceActual + "", Discount="" + Discount);

		//	Qty changed - recalc price
		if ((columnName.equals(""QtyOrdered"")
			|| columnName.equals(""QtyEntered"")
			|| columnName.equals(""M_Product_ID""))
			&& !""N"".equals(getCtx().getContext(windowNo, ""DiscountSchema"")))
		{
			int C_BPartner_ID = getC_BPartner_ID();
			if (columnName.equals(""QtyEntered""))
				QtyOrdered = MUOMConversion.convertProductTo (getCtx(), M_Product_ID,
					C_UOM_To_ID, QtyEntered);
			if (QtyOrdered == null)
				QtyOrdered = QtyEntered;
			boolean IsSOTrx = getCtx().isSOTrx(windowNo);
			MProductPricing pp = new MProductPricing (getAD_Client_ID(), getAD_Org_ID(),
					M_Product_ID, C_BPartner_ID, QtyOrdered, IsSOTrx);
			pp.setM_PriceList_ID(M_PriceList_ID);
			int M_PriceList_Version_ID = getCtx().getContextAsInt(windowNo, ""M_PriceList_Version_ID"");
			pp.setM_PriceList_Version_ID(M_PriceList_Version_ID);
			Timestamp date = getDateOrdered();
			pp.setPriceDate(date);
			//
			PriceEntered = MUOMConversion.convertProductFrom (getCtx(), M_Product_ID,
				C_UOM_To_ID, pp.getPriceStd());
			if (PriceEntered == null)
				PriceEntered = pp.getPriceStd();
			//
			log.fine(""QtyChanged -> PriceActual="" + pp.getPriceStd()
				+ "", PriceEntered="" + PriceEntered + "", Discount="" + pp.getDiscount());
			PriceActual = pp.getPriceStd();
			setPriceActual(PriceActual);
			setDiscount(pp.getDiscount());
			setPriceEntered(PriceEntered);
			p_changeVO.setContext(getCtx(), windowNo, ""DiscountSchema"", pp.isDiscountSchema());
		}
		else if (columnName.equals(""PriceActual""))
		{
			PriceEntered = MUOMConversion.convertProductFrom (getCtx(), M_Product_ID,
				C_UOM_To_ID, PriceActual);
			if (PriceEntered == null)
				PriceEntered = PriceActual;
			//
			log.fine(""PriceActual="" + PriceActual
				+ "" -> PriceEntered="" + PriceEntered);
			setPriceEntered(PriceEntered);
		}
		else if (columnName.equals(""PriceEntered""))
		{
			PriceActual = MUOMConversion.convertProductTo (getCtx(), M_Product_ID,
				C_UOM_To_ID, PriceEntered);
			if (PriceActual == null)
				PriceActual = PriceEntered;
			//
			log.fine(""PriceEntered="" + PriceEntered
				+ "" -> PriceActual="" + PriceActual);
			setPriceActual(PriceActual);
		}

		//  Discount entered - Calculate Actual/Entered
		if (columnName.equals(""Discount""))
		{
			//Do not apply discount for charge lines
			int c_charge_id=getC_Charge_ID();			
			if(!(c_charge_id > 0))
			{
				PriceActual = new BigDecimal ((100.0 - Discount.doubleValue())
						/ 100.0 * PriceList.doubleValue());
				if (PriceActual.scale() > StdPrecision)
					PriceActual = PriceActual.setScale(StdPrecision, BigDecimal.ROUND_HALF_UP);
				PriceEntered = MUOMConversion.convertProductFrom (getCtx(), M_Product_ID,
						C_UOM_To_ID, PriceActual);
				if (PriceEntered == null)
					PriceEntered = PriceActual;
				setPriceActual(PriceActual);
				setPriceEntered(PriceEntered);
			}

		}
		//	calculate Discount
		else
		{
			if (PriceList.intValue() == 0)
				Discount = Env.ZERO;
			else
				Discount = new BigDecimal ((PriceList.doubleValue() - PriceActual.doubleValue()) / PriceList.doubleValue() * 100.0);
			if (Discount.scale() > 2)
				Discount = Discount.setScale(2, BigDecimal.ROUND_HALF_UP);
			setDiscount(Discount);
		}
		log.fine(""PriceEntered="" + PriceEntered + "", Actual="" + PriceActual + "", Discount="" + Discount);

		//	Check PriceLimit
		boolean epl = ""Y"".equals(getCtx().getContext(windowNo, ""EnforcePriceLimit""));
		boolean enforce = epl && getCtx().isSOTrx(windowNo);
		if (enforce && MRole.getDefault(getCtx(), false).isOverwritePriceLimit())
			enforce = false;
		//	Check Price Limit?
		if (enforce && (PriceLimit.doubleValue() != 0.0)
		  && (PriceActual.compareTo(PriceLimit) < 0))
		{
			PriceActual = PriceLimit;
			PriceEntered = MUOMConversion.convertProductFrom (getCtx(), M_Product_ID,
				C_UOM_To_ID, PriceLimit);
			if (PriceEntered == null)
				PriceEntered = PriceLimit;
			log.fine(""(under) PriceEntered="" + PriceEntered + "", Actual"" + PriceLimit);
			setPriceActual(PriceLimit);
			setPriceEntered(PriceEntered);
			p_changeVO.addError(Msg.getMsg(getCtx(), ""UnderLimitPrice""));
			//	Repeat Discount calc
			if (PriceList.intValue() != 0)
			{
				Discount = new BigDecimal ((PriceList.doubleValue () - PriceActual.doubleValue ()) / PriceList.doubleValue () * 100.0);
				if (Discount.scale () > 2)
					Discount = Discount.setScale (2, BigDecimal.ROUND_HALF_UP);
				setDiscount(Discount);
			}
		}

		//	Line Net Amt
		BigDecimal LineNetAmt = QtyOrdered.multiply(PriceActual);
		if (LineNetAmt.scale() > StdPrecision)
			LineNetAmt = LineNetAmt.setScale(StdPrecision, BigDecimal.ROUND_HALF_UP);
		log.info(""LineNetAmt="" + LineNetAmt);
		setLineNetAmt(LineNetAmt);
	}	//	setAmt (callout)
"
org.compiere.model.MOrderLine.setQty,MOrderLine.java,"void setQty (int windowNo, String columnName)
	{
		if(CThreadUtil.isCalloutActive())
			return;
		int M_Product_ID = getM_Product_ID();
		BigDecimal QtyOrdered = Env.ZERO;
		BigDecimal QtyEntered = null;
		BigDecimal PriceActual, PriceEntered;
		int C_UOM_To_ID = getC_UOM_ID();
		boolean IsReturnTrx = getParent().isReturnTrx();

		//	No Product
		if (M_Product_ID == 0)
		{
			QtyEntered = getQtyEntered();
			QtyOrdered = QtyEntered;
			setQtyOrdered(QtyOrdered);
		}
		//	UOM Changed - convert from Entered -> Product
		else if (columnName.equals(""C_UOM_ID"") || columnName.equals(""Orig_InOutLine_ID""))
		{
			QtyEntered = getQtyEntered();
			BigDecimal QtyEntered1 = QtyEntered.setScale(
				MUOM.getPrecision(getCtx(), C_UOM_To_ID), BigDecimal.ROUND_HALF_UP);
			if (QtyEntered.compareTo(QtyEntered1) != 0)
			{
				log.fine(""Corrected QtyEntered Scale UOM="" + C_UOM_To_ID
					+ ""; QtyEntered="" + QtyEntered + ""->"" + QtyEntered1);
				QtyEntered = QtyEntered1;
				setQtyEntered(QtyEntered);
			}
			QtyOrdered = MUOMConversion.convertProductFrom (getCtx(), M_Product_ID,
				C_UOM_To_ID, QtyEntered);
			if (QtyOrdered == null)
				QtyOrdered = QtyEntered;
			boolean conversion = QtyEntered.compareTo(QtyOrdered) != 0;
			PriceActual = getPriceActual();
			PriceEntered = MUOMConversion.convertProductFrom (getCtx(),
				M_Product_ID, C_UOM_To_ID, PriceActual);
			if (PriceEntered == null)
				PriceEntered = PriceActual;
			log.fine(""UOM="" + C_UOM_To_ID
				+ "", QtyEntered/PriceActual="" + QtyEntered + ""/"" + PriceActual
				+ "" -> "" + conversion
				+ "" QtyOrdered/PriceEntered="" + QtyOrdered + ""/"" + PriceEntered);
			p_changeVO.setContext(getCtx(), windowNo, ""UOMConversion"", conversion);
			setQtyOrdered(QtyOrdered);
			setPriceEntered(PriceEntered);
		}
		//	QtyEntered changed - calculate QtyOrdered
		else if (columnName.equals(""QtyEntered""))
		{
			QtyEntered = getQtyEntered();
			BigDecimal QtyEntered1 = QtyEntered.setScale(
				MUOM.getPrecision(getCtx(), C_UOM_To_ID), BigDecimal.ROUND_HALF_UP);
			if (QtyEntered.compareTo(QtyEntered1) != 0)
			{
				log.fine(""Corrected QtyEntered Scale UOM="" + C_UOM_To_ID
					+ ""; QtyEntered="" + QtyEntered + ""->"" + QtyEntered1);
				QtyEntered = QtyEntered1;
				setQtyEntered(QtyEntered);
			}
			QtyOrdered = MUOMConversion.convertProductFrom (getCtx(),
				M_Product_ID, C_UOM_To_ID, QtyEntered);
			if (QtyOrdered == null)
				QtyOrdered = QtyEntered;
			boolean conversion = QtyEntered.compareTo(QtyOrdered) != 0;
			log.fine(""UOM="" + C_UOM_To_ID
				+ "", QtyEntered="" + QtyEntered
				+ "" -> "" + conversion
				+ "" QtyOrdered="" + QtyOrdered);
			p_changeVO.setContext(getCtx(), windowNo, ""UOMConversion"", conversion);
			setQtyOrdered(QtyOrdered);
		}
		//	QtyOrdered changed - calculate QtyEntered (should not happen)
		else if (columnName.equals(""QtyOrdered""))
		{
			QtyOrdered = getQtyOrdered();
			int precision = getProduct().getUOMPrecision();
			BigDecimal QtyOrdered1 = QtyOrdered.setScale(precision, BigDecimal.ROUND_HALF_UP);
			if (QtyOrdered.compareTo(QtyOrdered1) != 0)
			{
				log.fine(""Corrected QtyOrdered Scale ""
					+ QtyOrdered + ""->"" + QtyOrdered1);
				QtyOrdered = QtyOrdered1;
				setQtyOrdered(QtyOrdered);
			}
			QtyEntered = MUOMConversion.convertProductTo (getCtx(),
				M_Product_ID, C_UOM_To_ID, QtyOrdered);
			if (QtyEntered == null)
				QtyEntered = QtyOrdered;
			boolean conversion = QtyOrdered.compareTo(QtyEntered) != 0;
			log.fine(""UOM="" + C_UOM_To_ID
				+ "", QtyOrdered="" + QtyOrdered
				+ "" -> "" + conversion
				+ "" QtyEntered="" + QtyEntered);
			p_changeVO.setContext(getCtx(), windowNo, ""UOMConversion"", conversion);
			setQtyEntered(QtyEntered);
		}
		else
		{
		//	QtyEntered = getQtyEntered();
			QtyOrdered = getQtyOrdered();
		}

		// RMA : Check qty returned is less than qty shipped
		if((M_Product_ID != 0)
				   && IsReturnTrx)
		{
			Integer inOutLine_ID = getOrig_InOutLine_ID();
			if(inOutLine_ID != 0)
			{
				BigDecimal shippedQty = MOrderLine.getInOutOpenQty(getCtx(), inOutLine_ID, getC_Order_ID(), getC_OrderLine_ID());

				QtyOrdered = getQtyOrdered();
				if(shippedQty.compareTo(QtyOrdered)<0)
				{
					if(getCtx().isSOTrx(windowNo))
						p_changeVO.addError(Msg.getMsg(getCtx(), ""ReturnQtyExceedsShippedQty""));
					else
						p_changeVO.addError(Msg.getMsg(getCtx(), ""ReturnQtyExceedsReceivedQty""));

					setQtyOrdered(shippedQty);
					QtyOrdered = shippedQty;

					QtyEntered = MUOMConversion.convertProductTo (getCtx(), M_Product_ID,
							C_UOM_To_ID, QtyOrdered);
					if (QtyEntered == null)
						QtyEntered = QtyOrdered;
					setQtyEntered(QtyEntered);
					log.fine(""QtyEntered : ""+ QtyEntered.toString() +
							""QtyOrdered : "" + QtyOrdered.toString());
				}
			}
		}

		//	Storage
		if ((M_Product_ID != 0)
			&& getCtx().isSOTrx(windowNo)
			&& (QtyOrdered.signum() > 0)
			&& !IsReturnTrx)		//	no negative (returns)
		{
			MProduct product = getProduct();
			if (product.isStocked())
			{
				int M_Warehouse_ID = getM_Warehouse_ID();
				int M_AttributeSetInstance_ID = getM_AttributeSetInstance_ID();
				BigDecimal available = MStorage.getQtyAvailable
					(M_Warehouse_ID, M_Product_ID, M_AttributeSetInstance_ID, null);
				if (available == null)
					available = Env.ZERO;
				if (available.signum() == 0)
					p_changeVO.addError(Msg.getMsg(getCtx(), ""NoQtyAvailable""));
				else if (available.compareTo(QtyOrdered) < 0)
					p_changeVO.addError(Msg.getMsg(getCtx(), ""InsufficientQtyAvailable"", available));
				else
				{
					int C_OrderLine_ID = getC_OrderLine_ID();
					BigDecimal notReserved = MOrderLine.getNotReserved(getCtx(),
						M_Warehouse_ID, M_Product_ID, M_AttributeSetInstance_ID,
						C_OrderLine_ID);
					if (notReserved == null)
						notReserved = Env.ZERO;
					BigDecimal total = available.subtract(notReserved);
					if (total.compareTo(QtyOrdered) < 0)
					{
						String info = Msg.parseTranslation(getCtx(), ""@QtyAvailable@="" + available
							+ ""  -  @QtyNotReserved@="" + notReserved + ""  =  "" + total);
						p_changeVO.addError(Msg.getMsg(getCtx(), ""InsufficientQtyAvailable"", info));
					}
				}
			}
		}
	}	//	setQty (callout)
"
org.compiere.model.MOrderLine.canChangeWarehouse,MOrderLine.java,"boolean canChangeWarehouse()
	{
		if (getQtyDelivered().signum() != 0)
		{
			log.saveError(""Error"", Msg.translate(getCtx(), ""QtyDelivered"") + ""="" + getQtyDelivered());
			return false;
		}
		if (getQtyInvoiced().signum() != 0)
		{
			log.saveError(""Error"", Msg.translate(getCtx(), ""QtyInvoiced"") + ""="" + getQtyInvoiced());
			return false;
		}
		if (getQtyReserved().signum() != 0)
		{
			log.saveError(""Error"", Msg.translate(getCtx(), ""QtyReserved"") + ""="" + getQtyReserved());
			return false;
		}
		//	We can change
		return true;
	}	//	canChangeWarehouse
"
org.compiere.model.MOrderLine.getC_Project_ID,MOrderLine.java,"int getC_Project_ID()
	{
		int ii = super.getC_Project_ID ();
		if (ii == 0)
			ii = getParent().getC_Project_ID();
		return ii;
	}	//	getC_Project_ID
"
org.compiere.model.MOrderLine.getC_Activity_ID,MOrderLine.java,"int getC_Activity_ID()
	{
		int ii = super.getC_Activity_ID ();
		if (ii == 0)
			ii = getParent().getC_Activity_ID();
		return ii;
	}	//	getC_Activity_ID
"
org.compiere.model.MOrderLine.getC_Campaign_ID,MOrderLine.java,"int getC_Campaign_ID()
	{
		int ii = super.getC_Campaign_ID ();
		if (ii == 0)
			ii = getParent().getC_Campaign_ID();
		return ii;
	}	//	getC_Campaign_ID
"
org.compiere.model.MOrderLine.getUser1_ID,MOrderLine.java,"int getUser1_ID ()
	{
		int ii = super.getUser1_ID ();
		if (ii == 0)
			ii = getParent().getUser1_ID();
		return ii;
	}	//	getUser1_ID
"
org.compiere.model.MOrderLine.getUser2_ID,MOrderLine.java,"int getUser2_ID ()
	{
		int ii = super.getUser2_ID ();
		if (ii == 0)
			ii = getParent().getUser2_ID();
		return ii;
	}	//	getUser2_ID
"
org.compiere.model.MOrderLine.getAD_OrgTrx_ID,MOrderLine.java,"int getAD_OrgTrx_ID()
	{
		int ii = super.getAD_OrgTrx_ID();
		if (ii == 0)
			ii = getParent().getAD_OrgTrx_ID();
		return ii;
	}	//	getAD_OrgTrx_ID
"
org.compiere.model.MOrderLine.toString,MOrderLine.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MOrderLine["")
			.append(get_ID()).append("",Line="").append(getLine())
			.append("",Ordered="").append(getQtyOrdered())
			.append("",Delivered="").append(getQtyDelivered())
			.append("",Dedicated="").append(getQtyDedicated())
			.append("",Allocated="").append(getQtyAllocated())
			.append("",Invoiced="").append(getQtyInvoiced())
			.append("",Reserved="").append(getQtyReserved())
			.append("", LineNet="").append(getLineNetAmt())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MOrderLine.addDescription,MOrderLine.java,"void addDescription (String description)
	{
		String desc = getDescription();
		if (desc == null)
			setDescription(description);
		else
			setDescription(desc + "" | "" + description);
	}	//	addDescription
"
org.compiere.model.MOrderLine.getDescriptionText,MOrderLine.java,"String getDescriptionText()
	{
		return super.getDescription();
	}	//	getDescriptionText
"
org.compiere.model.MOrderLine.getName,MOrderLine.java,"String getName()
	{
		getProduct();
		if (m_product != null)
			return m_product.getName();
		if (getC_Charge_ID() != 0)
		{
			MCharge charge = MCharge.get(getCtx(), getC_Charge_ID());
			return charge.getName();
		}
		return """";
	}	//	getName
"
org.compiere.model.MOrderLine.setC_Charge_ID,MOrderLine.java,"void setC_Charge_ID (int C_Charge_ID)
	{
		super.setC_Charge_ID (C_Charge_ID);
		if (C_Charge_ID > 0)
			set_ValueNoCheck (""C_UOM_ID"", null);
	}	//	setC_Charge_ID
"
org.compiere.model.MOrderLine.setC_Charge_ID,MOrderLine.java,"void setC_Charge_ID (String oldC_Charge_ID,
			String newC_Charge_ID, int windowNo) throws Exception
	{
		if ((newC_Charge_ID == null) || (newC_Charge_ID.length() == 0))
			return;
		int C_Charge_ID = Integer.parseInt(newC_Charge_ID);
		if (C_Charge_ID == 0)
			return;

		// Skip these steps for RMA. These fields are copied over from the orignal order instead.
		if (getParent().isReturnTrx())
			return;

		//
		//	No Product defined
		if (getM_Product_ID() != 0)
		{
			super.setC_Charge_ID(0);
			p_changeVO.addError(Msg.getMsg(getCtx(), ""ChargeExclusively""));
			return;
		}

		super.setC_Charge_ID(C_Charge_ID);
		setM_AttributeSetInstance_ID(0);
		setS_ResourceAssignment_ID(0);
		setC_UOM_ID(100);	//	EA

		p_changeVO.setContext(getCtx(), windowNo, ""DiscountSchema"", ""N"");
		String sql = ""SELECT ChargeAmt FROM C_Charge WHERE C_Charge_ID=?"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_Charge_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				setPriceEntered(rs.getBigDecimal (1));
				setPriceActual(rs.getBigDecimal (1));
				setPriceLimit(Env.ZERO);
				setPriceList(Env.ZERO);
				setDiscount(Env.ZERO);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		//
		setTax (windowNo, ""C_Charge_ID"");
	}	//	setC_Charge_ID
"
org.compiere.model.MOrderLine.setDiscount,MOrderLine.java,"void setDiscount()
	{
		BigDecimal list = getPriceList();
		//	No List Price
		if (Env.ZERO.compareTo(list) == 0)
			return;
		BigDecimal discount = list.subtract(getPriceActual())
			.multiply(new BigDecimal(100))
			.divide(list, getPrecision(), BigDecimal.ROUND_HALF_UP);
		setDiscount(discount);
	}	//	setDiscount
"
org.compiere.model.MOrderLine.isTaxIncluded,MOrderLine.java,"boolean isTaxIncluded()
	{
		if (m_M_PriceList_ID == 0)
		{
			m_M_PriceList_ID = DB.getSQLValue(get_Trx(),
				""SELECT M_PriceList_ID FROM C_Order WHERE C_Order_ID=?"",
				getC_Order_ID());
		}
		MPriceList pl = MPriceList.get(getCtx(), m_M_PriceList_ID, get_Trx());
		return pl.isTaxIncluded();
	}	//	isTaxIncluded
"
org.compiere.model.MOrderLine.setQty,MOrderLine.java,"void setQty (BigDecimal Qty)
	{
		super.setQtyEntered (Qty);
		super.setQtyOrdered (getQtyEntered());
	}	//	setQty
"
org.compiere.model.MOrderLine.setQtyEntered,MOrderLine.java,"void setQtyEntered (BigDecimal QtyEntered)
	{
		if ((QtyEntered != null) && (getC_UOM_ID() != 0))
		{
			int precision = MUOM.getPrecision(getCtx(), getC_UOM_ID());
			QtyEntered = QtyEntered.setScale(precision, BigDecimal.ROUND_HALF_UP);
		}
		super.setQtyEntered (QtyEntered);
	}	//	setQtyEntered
"
org.compiere.model.MOrderLine.setQtyOrdered,MOrderLine.java,"void setQtyOrdered (BigDecimal QtyOrdered)
	{
		MProduct product = getProduct();
		if ((QtyOrdered != null) && (product != null))
		{
			int precision = product.getUOMPrecision();
			QtyOrdered = QtyOrdered.setScale(precision, BigDecimal.ROUND_HALF_UP);
		}
		super.setQtyOrdered(QtyOrdered);
	}	//	setQtyOrdered
"
org.compiere.model.MOrderLine.setOrigOrderLine,MOrderLine.java,"void setOrigOrderLine (MOrderLine origOrderLine)
	{

		if ((origOrderLine == null) || (origOrderLine.get_ID()==0))
			return;

		setOrig_InOutLine_ID(-1);
		setC_Tax_ID(origOrderLine.getC_Tax_ID());

		setPriceList(origOrderLine.getPriceList());
		setPriceLimit(origOrderLine.getPriceLimit());
		setPriceActual(origOrderLine.getPriceActual());
		setPriceEntered(origOrderLine.getPriceEntered());
		setC_Currency_ID(origOrderLine.getC_Currency_ID());
		setDiscount(origOrderLine.getDiscount());

		return;

	} // setOrigOrder
"
org.compiere.model.MOrderLine.setOrig_OrderLine_ID,MOrderLine.java,"void setOrig_OrderLine_ID (String oldOrig_OrderLine_ID,
			String newOrig_OrderLine_ID, int windowNo) throws Exception
	{
		if ((newOrig_OrderLine_ID == null) || (newOrig_OrderLine_ID.length() == 0))
			return;
		int Orig_OrderLine_ID = Integer.parseInt(newOrig_OrderLine_ID);
		if (Orig_OrderLine_ID == 0)
			return;

		// For returns, Price Limit is not enforced
		p_changeVO.setContext(getCtx(), windowNo, ""EnforcePriceLimit"", false);
		// For returns, discount is copied over from the sales order
		p_changeVO.setContext(getCtx(), windowNo, ""DiscountSchema"", false);

		//	Get Details
		MOrderLine oLine = new MOrderLine (getCtx(), Orig_OrderLine_ID, null);
		if (oLine.get_ID() != 0)
			setOrigOrderLine(oLine);

	}	//	setOrig_Order_ID
"
org.compiere.model.MOrderLine.setOrigInOutLine,MOrderLine.java,"void setOrigInOutLine (MInOutLine Orig_InOutLine)
	{

		if ((Orig_InOutLine == null) || (Orig_InOutLine.get_ID()==0))
			return;

		setC_Project_ID(Orig_InOutLine.getC_Project_ID());
		setC_Campaign_ID(Orig_InOutLine.getC_Campaign_ID());
		setM_Product_ID(Orig_InOutLine.getM_Product_ID());
		setM_AttributeSetInstance_ID(Orig_InOutLine.getM_AttributeSetInstance_ID());
		setC_UOM_ID(Orig_InOutLine.getC_UOM_ID());

		return;

	} // setOrigOrder
"
org.compiere.model.MOrderLine.setOrig_InOutLine_ID,MOrderLine.java,"void setOrig_InOutLine_ID (String oldOrig_InOutLine_ID,
			String newOrig_InOutLine_ID, int windowNo) throws Exception
	{
		if ((newOrig_InOutLine_ID == null) || (newOrig_InOutLine_ID.length() == 0))
			return;
		int Orig_InOutLine_ID = Integer.parseInt(newOrig_InOutLine_ID);
		if (Orig_InOutLine_ID == 0)
			return;

		//		Get Details
		MInOutLine ioLine = new MInOutLine (getCtx(), Orig_InOutLine_ID, null);
		if (ioLine.get_ID() != 0)
			setOrigInOutLine(ioLine);

		setQty(windowNo, ""Orig_InOutLine_ID"");

	} // setOrig_Order_ID
"
org.compiere.model.MOrderLine.beforeSave,MOrderLine.java,"boolean beforeSave (boolean newRecord)
	{
		//	Get Defaults from Parent
		if ((getC_BPartner_ID() == 0) || (getC_BPartner_Location_ID() == 0)
			|| (getM_Warehouse_ID() == 0)
			|| (getC_Currency_ID() == 0))
			setOrder (getParent());
		if (m_M_PriceList_ID == 0)
			setHeaderInfo(getParent());


		//	R/O Check - Product/Warehouse Change
		if (!newRecord
			&& (is_ValueChanged(""M_Product_ID"") || is_ValueChanged(""M_Warehouse_ID"")))
		{
			if (!canChangeWarehouse())
				return false;
		}	//	Product Changed

		//	Charge
		if (getC_Charge_ID() != 0)
		{
			if (getM_Product_ID() != 0)
				setM_Product_ID(0);
			setC_UOM_ID(MUOM.Each_ID);
		}
		//	No Product
		if (getM_Product_ID() == 0)
			setM_AttributeSetInstance_ID(0);
		//	Product
		else	//	Set/check Product Price
		{
			if (m_productPrice == null )
			{
				//	Set Price if Actual = 0, otherwise, just check if product is on pricelist
				if((Env.ZERO.compareTo(getPriceActual()) == 0)
						&&  (Env.ZERO.compareTo(getPriceList()) == 0))
					setPrice();
				else
					checkPrice();
			}

			//	Check if on Price list
			if ((m_productPrice == null) || !m_productPrice.isCalculated())
			{
				if(((Env.ZERO.compareTo(getPriceActual()) == 0)
						&&  (Env.ZERO.compareTo(getPriceList()) == 0)) ||
						getParent().isSOTrx())
				{
					log.saveError(""Error"", Msg.getMsg(getCtx(), ""ProductNotOnPriceList""));
					return false;
				}
			}
		}

		//	UOM
		if ((getC_UOM_ID() == 0)
			&& ((getM_Product_ID() != 0)
				|| (getQtyEntered().signum() != 0)))
		{
			int C_UOM_ID = MUOM.getDefault_UOM_ID(getCtx());
			if (C_UOM_ID > 0)
				setC_UOM_ID (C_UOM_ID);
		}
		//	Qty Precision
		if (newRecord || is_ValueChanged(""QtyEntered""))
		{
			setQtyEntered(getQtyEntered());
			BigDecimal qtyOrdered = MUOMConversion.convertProductFrom(getCtx(), getM_Product_ID(), getC_UOM_ID(), getQtyEntered());
			if( qtyOrdered == null )
				qtyOrdered = getQtyEntered();
			setQtyOrdered(qtyOrdered);
		}
		if (newRecord || is_ValueChanged(""QtyOrdered""))
			setQtyOrdered(getQtyOrdered());

		//	Qty on instance ASI for SO
		if (m_IsSOTrx
			&& (getM_AttributeSetInstance_ID() != 0)
			&& (newRecord || is_ValueChanged(""M_Product_ID"")
				|| is_ValueChanged(""M_AttributeSetInstance_ID"")
				|| is_ValueChanged(""M_Warehouse_ID"")))
		{
			MProduct product = getProduct();
			if (product.isStocked())
			{
				int M_AttributeSet_ID = product.getM_AttributeSet_ID();
				boolean isInstance = M_AttributeSet_ID != 0;
				if (isInstance)
				{
					MAttributeSet mas = MAttributeSet.get(getCtx(), M_AttributeSet_ID);
					isInstance = mas.isInstanceAttribute();
				}
				//	Max
				if (isInstance)
				{
					MStorage[] storages = MStorage.getWarehouse(getCtx(),
						getM_Warehouse_ID(), getM_Product_ID(), getM_AttributeSetInstance_ID(),
						M_AttributeSet_ID, false, null, true, get_Trx());
					BigDecimal qty = Env.ZERO;
					for (MStorage element : storages) {
						if (element.getM_AttributeSetInstance_ID() == getM_AttributeSetInstance_ID())
							qty = qty.add(element.getQtyOnHand());
					}
					if (getQtyOrdered().compareTo(qty) > 0)
					{
						log.warning(""Qty - Stock="" + qty + "", Ordered="" + getQtyOrdered());
						log.saveError(""QtyInsufficient"", ""="" + qty);
						return false;
					}
				}
			}	//	stocked
		}	//	SO instance

		//	FreightAmt Not used
		if (Env.ZERO.compareTo(getFreightAmt()) != 0)
			setFreightAmt(Env.ZERO);

		//	Set Tax
		if (getC_Tax_ID() == 0)
			setTax();

		//	Get Line No
		if (getLine() == 0)
		{
			String sql = ""SELECT COALESCE(MAX(Line),0)+10 FROM C_OrderLine WHERE C_Order_ID=?"";
			int ii = DB.getSQLValue (get_Trx(), sql, getC_Order_ID());
			setLine (ii);
		}

		//	Calculations & Rounding
		setLineNetAmt();	//	extended Amount with or without tax
		setDiscount();

		// Validate Return Policy for RMA
		MOrder order = getParent();
		boolean isReturnTrx = order.isReturnTrx();
		if (isReturnTrx)
		{
			Boolean withinPolicy = true;

			if (order.getM_ReturnPolicy_ID() == 0)
				order.setM_ReturnPolicy_ID();

			if (order.getM_ReturnPolicy_ID()== 0)
				withinPolicy = false;
			else
			{
				MInOut origInOut = new MInOut (getCtx(), order.getOrig_InOut_ID(), get_Trx());
				MReturnPolicy rpolicy = new MReturnPolicy (getCtx(), order.getM_ReturnPolicy_ID(), get_Trx());

				log.fine(""RMA Date : "" + order.getDateOrdered() + "" Shipment Date : "" + origInOut.getMovementDate());
			    withinPolicy = rpolicy.checkReturnPolicy(origInOut.getMovementDate(),order.getDateOrdered(),getM_Product_ID());
			}

			if(!withinPolicy)
			{
				if ( !MRole.getDefault(getCtx(), false).isOverrideReturnPolicy())
				{
					log.saveError(""Error"", Msg.getMsg(getCtx(), ""ReturnPolicyExceeded""));
					return false;
				}
				else
					log.saveWarning(""Warning"", Msg.getMsg(getCtx(), ""ReturnPolicyExceeded""));
			}
		}

		return true;
	}	//	beforeSave
"
org.compiere.model.MOrderLine.beforeDelete,MOrderLine.java,"boolean beforeDelete ()
	{
		//	R/O Check - Something delivered. etc.
		if (Env.ZERO.compareTo(getQtyDelivered()) != 0)
		{
			log.saveError(""DeleteError"", Msg.translate(getCtx(), ""QtyDelivered"") + ""="" + getQtyDelivered());
			return false;
		}
		if (Env.ZERO.compareTo(getQtyInvoiced()) != 0)
		{
			log.saveError(""DeleteError"", Msg.translate(getCtx(), ""QtyInvoiced"") + ""="" + getQtyInvoiced());
			return false;
		}
		if (Env.ZERO.compareTo(getQtyReserved()) != 0)
		{
			//	For PO should be On Order
			log.saveError(""DeleteError"", Msg.translate(getCtx(), ""QtyReserved"") + ""="" + getQtyReserved());
			return false;
		}
		if (Env.ZERO.compareTo(getQtyDedicated()) != 0)
		{
			log.saveError(""DeleteError"", Msg.translate(getCtx(), ""QtyDedicated"") + ""="" + getQtyDedicated());
			return false;
		}
		if (Env.ZERO.compareTo(getQtyAllocated()) != 0)
		{
			log.saveError(""DeleteError"", Msg.translate(getCtx(), ""QtyAllocated"") + ""="" + getQtyAllocated());
			return false;
		}

		return true;
	}	//	beforeDelete
"
org.compiere.model.MOrderLine.afterSave,MOrderLine.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!success)
			return success;
		
		if (!isProcessed () && !getCtx().isBatchMode())
		{
			if (!newRecord && is_ValueChanged(""C_Tax_ID""))
			{
				//	Recalculate Tax for old Tax
				MOrderTax tax = MOrderTax.get (this, getPrecision(),
					true, get_Trx());	//	old Tax
				if (tax != null)
				{
					if (!tax.calculateTaxFromLines())
						return false;
					if (!tax.save(get_Trx()))
						return false;
				}
			}
			if(!updateHeaderTax())
				return false;
		}

		// Order: Fully Invoiced
		if (!newRecord && is_ValueChanged(""QtyInvoiced""))
		{
			String sql = ""UPDATE C_Order o""
				+ "" SET IsInvoiced = CASE WHEN (""
					+ ""SELECT COALESCE(SUM(QtyOrdered),0)-COALESCE(SUM(QtyInvoiced),0) ""
					+ ""FROM C_OrderLine ol WHERE ol.C_Order_ID=o.C_Order_ID) = 0 THEN 'Y' ELSE 'N' END ""
				+ ""WHERE C_Order_ID=?"";
			int no = DB.executeUpdate(sql, getC_Order_ID(), false, get_Trx());
			if (no != 1)
				return false;
		}

		return true;
	}	//	afterSave
"
org.compiere.model.MOrderLine.afterDelete,MOrderLine.java,"boolean afterDelete (boolean success)
	{
		if (!success)
			return success;
		if (getS_ResourceAssignment_ID() != 0)
		{
			MResourceAssignment ra = new MResourceAssignment(getCtx(), getS_ResourceAssignment_ID(), get_Trx());
			ra.delete(true);
		}

		return updateHeaderTax();
	}	//	afterDelete
"
org.compiere.model.MOrderLine.updateHeaderTax,MOrderLine.java,"boolean updateHeaderTax()
	{
		//	Recalculate Tax for this Tax
		MOrderTax tax = MOrderTax.get (this, getPrecision(),
			false, get_Trx());	//	current Tax
		if (!tax.calculateTaxFromLines())
			return false;
		if (!tax.save(get_Trx()))
			return false;

		//	Update Order Header
		String sql = ""UPDATE C_Order i""
			+ "" SET TotalLines=""
				+ ""(SELECT COALESCE(SUM(LineNetAmt),0) FROM C_OrderLine il WHERE i.C_Order_ID=il.C_Order_ID) ""
			+ ""WHERE C_Order_ID="" + getC_Order_ID();
		int no = DB.executeUpdate(sql, get_Trx());
		if (no != 1)
			log.warning(""(1) #"" + no);

		if (isTaxIncluded())
			sql = ""UPDATE C_Order i ""
				+ ""SET GrandTotal=TotalLines ""
				+ ""WHERE C_Order_ID="" + getC_Order_ID();
		else
			sql = ""UPDATE C_Order i ""
				+ ""SET GrandTotal=TotalLines+""
					+ ""(SELECT COALESCE(SUM(TaxAmt),0) FROM C_OrderTax it WHERE i.C_Order_ID=it.C_Order_ID) ""
					+ ""WHERE C_Order_ID="" + getC_Order_ID();
		no = DB.executeUpdate(sql, get_Trx());
		if (no != 1)
			log.warning(""(2) #"" + no);
		m_parent = null;
		return no == 1;
	}	//	updateHeaderTax
"
org.compiere.model.MOrderLine.getRef_OrderLine,MOrderLine.java,"MOrderLine getRef_OrderLine ()
	{
		String sql = ""SELECT C_OrderLine_ID FROM C_OrderLine WHERE Ref_OrderLine_ID=?"";
		MOrderLine line=null;

		int ii = DB.getSQLValue (get_Trx(), sql, getC_OrderLine_ID());
		if(ii > 0)
			line = new MOrderLine(getCtx(), ii, get_Trx());
		return line;
	}
"
org.compiere.model.MOrderLine.getInOutOpenQty,MOrderLine.java,"BigDecimal getInOutOpenQty(Ctx ctx, int M_InOutLine_ID, int C_Order_ID, int excludeC_OrderLine_ID)
	{
		MInOutLine inOutLine = new MInOutLine (ctx, M_InOutLine_ID, null);
		BigDecimal shippedQty = inOutLine.getMovementQty();

		BigDecimal retValue = Env.ZERO;
		String sql = ""SELECT SUM(QtyOrdered) ""
			+ ""FROM C_OrderLine ol""
			+ "" INNER JOIN C_Order o ON (ol.C_Order_ID=o.C_Order_ID) ""
			+ ""WHERE ol.Orig_InOutLine_ID=?""	//	#1
			+ "" AND o.IsReturnTrx='Y' ""
			+ "" AND (o.DocStatus IN ('CO','CL') OR o.C_Order_ID=?) ""
			+ "" AND ol.C_OrderLine_ID<>?"";
		
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, M_InOutLine_ID);
			pstmt.setInt (2, C_Order_ID);
			pstmt.setInt (3, excludeC_OrderLine_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				retValue = rs.getBigDecimal(1);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		if (retValue == null)
			s_log.fine(""-"");
		else
			s_log.fine(retValue.toString());
		
		if (retValue != null)
			return shippedQty.subtract(retValue);
		
		return shippedQty;
	}	//	getQtyRMA
"
org.compiere.model.Scriptlet.run,Scriptlet.java,"Object run (String variable, String script, Ctx ctx, int WindowNo)
	{
		Scriptlet scr = new Scriptlet (variable, script, ctx, WindowNo);
		scr.execute();
		return scr.getResult(false);
	}   //  run
"
org.compiere.model.Scriptlet.execute,Scriptlet.java,"Exception execute()
	{
		m_result = null;
		if (m_variable == null || m_variable.length() == 0 || m_script == null || m_script.length() == 0)
		{
			IllegalArgumentException e = new IllegalArgumentException(""No variable/script"");
			log.config(e.toString());
			return e;
		}
		Interpreter i = new Interpreter();
		loadEnvironment(i);
		try
		{
			log.config(m_script);
			i.eval(m_script);
		}
		catch (Exception e)
		{
			log.config(e.toString());
			return e;
		}
		try
		{
			m_result = i.get (m_variable);
			log.config(""Result ("" + m_result.getClass().getName() + "") "" + m_result);
		}
		catch (Exception e)
		{
			log.config(""Result - "" + e);
			if (e instanceof NullPointerException)
				e = new IllegalArgumentException(""Result Variable not found - "" + m_variable);
			return e;
		}
		return null;
	}   //  execute
"
org.compiere.model.Scriptlet.loadEnvironment,Scriptlet.java,"void loadEnvironment (Interpreter i)
	{
		if (m_ctx == null)
			return;
		Iterator<String> it = m_ctx.keySet().iterator();
		while (it.hasNext())
		{
			String key = it.next();
			Object value = m_ctx.get(key);
			try
			{
				if (value instanceof Boolean)
					i.set(key, ((Boolean)value).booleanValue());
				else if (value instanceof Integer)
					i.set(key, ((Integer)value).intValue());
				else if (value instanceof Double)
					i.set(key, ((Double)value).doubleValue());
				else
					i.set(key, value);
			}
			catch (EvalError ee)
			{
				log.log(Level.SEVERE, """", ee);
			}
		}
	}   //  setEnvironment
"
org.compiere.model.Scriptlet.getVariable,Scriptlet.java,"String getVariable()
	{
		return m_variable;
	}   //  getVariable
"
org.compiere.model.Scriptlet.setVariable,Scriptlet.java,"void setVariable(String variable)
	{
		if (variable == null || variable.length() == 0)
			m_variable = VARIABLE;
		else
			m_variable = variable;
	}
"
org.compiere.model.Scriptlet.setScript,Scriptlet.java,"void setScript(String script)
	{
		if (script == null)
			m_script = """";
		else
			m_script = script;
	}   //  setScript
"
org.compiere.model.Scriptlet.getScript,Scriptlet.java,"String getScript()
	{
		return m_script;
	}   //  getScript
"
org.compiere.model.Scriptlet.setEnvironment,Scriptlet.java,"void setEnvironment (Ctx prop, int WindowNo)
	{
		if (prop == null)
			prop = Env.getCtx();

		m_ctx = new HashMap<String,Object>();
		//  Convert properties to HashMap
		Iterator<String> it = prop.keySet().iterator();
		while (it.hasNext())
		{
			String key = it.next();
			//  filter
			if (key == null || key.length() == 0
				|| key.startsWith(""P"")              //  Preferences
				|| (key.indexOf(""|"") != -1 && !key.startsWith(String.valueOf(WindowNo)))    //  other Window Settings
				)
				continue;

			String value = prop.getContext(key);
			setEnvironment (key, value);
		}

	}   //  setEnvironment
"
org.compiere.model.Scriptlet.setEnvironment,Scriptlet.java,"void setEnvironment (String key, String stringValue)
	{
		if (key == null || key.length() == 0)
			return;
	//	log.fine( ""Scriptlet.setEnvironment "" + key, stringValue);
		if (stringValue == null)
		{
			m_ctx.remove(key);
			return;
		}

		//  Boolean
		if (stringValue.equals(""Y""))
		{
			m_ctx.put(convertKey(key), Boolean.valueOf(true));
			return;
		}
		if (stringValue.equals(""N""))
		{
			m_ctx.put(convertKey(key), Boolean.valueOf(false));
			return;
		}

		//  Timestamp
		Timestamp timeValue = null;
		try
		{
			timeValue = Timestamp.valueOf(stringValue);
			m_ctx.put(convertKey(key), timeValue);
			return;
		}
		catch (Exception e) {}

		//  Numeric
		Integer intValue = null;
		try {
			intValue = Integer.valueOf(stringValue);
		} catch (NumberFormatException e) {}
		Double doubleValue = null;
		try {
			doubleValue = Double.valueOf(stringValue);
		} catch (NumberFormatException e) {}
		if (doubleValue != null)
		{
			if (intValue != null)
			{
				double di = Double.parseDouble(intValue.toString());
				//  the numbers are the same -> integer
				if (Double.compare(di, doubleValue.doubleValue()) == 0)
				{
					m_ctx.put(convertKey(key), intValue);
					return;
				}
			}
			m_ctx.put(convertKey(key), doubleValue);
			return;
		}
		if (intValue != null)
		{
			m_ctx.put(convertKey(key), intValue);
			return;
		}
		m_ctx.put(convertKey(key), stringValue);
	}   //  SetEnvironment
"
org.compiere.model.Scriptlet.setEnvironment,Scriptlet.java,"void setEnvironment (String key, Object value)
	{
		if (key != null && key.length() > 0)
		{
		//	log.fine( ""Scriptlet.setEnvironment "" + key, value);
			if (value == null)
				m_ctx.remove(key);
			else
				m_ctx.put(convertKey(key), value);
		}
	}   //  SetEnvironment
"
org.compiere.model.Scriptlet.convertKey,Scriptlet.java,"String convertKey (String key)
	{
		String retValue = Util.replace(key, ""#"", ""_"");
		return retValue;
	}   //  convertKey
"
org.compiere.model.Scriptlet.setEnvironment,Scriptlet.java,"void setEnvironment (HashMap<String,Object> ctx)
	{
		if (ctx == null)
			m_ctx = new HashMap<String,Object>();
		else
			m_ctx = ctx;
	}   //  setEnvironment
"
org.compiere.model.Scriptlet.getEnvironment,Scriptlet.java,"HashMap<String,Object> getEnvironment()
	{
		return m_ctx;
	}   //  getEnvironment
"
org.compiere.model.Scriptlet.getResult,Scriptlet.java,"Object getResult (boolean runIt)
	{
		if (runIt)
			execute();
		return m_result;
	}   //  getResult
"
org.compiere.model.Scriptlet.toString,Scriptlet.java,"String toString()
	{
		StringBuffer sb = new StringBuffer(m_variable);
		sb.append("" { "").append(m_script).append("" } = "").append(getResult(true));
		return sb.toString();
	}   //  toString
"
org.compiere.model.MRequisitionLine.getC_BPartner_ID,MRequisitionLine.java,"int getC_BPartner_ID ()
	{
		return m_C_BPartner_ID;
	}
"
org.compiere.model.MRequisitionLine.setC_BPartner_ID,MRequisitionLine.java,"void setC_BPartner_ID (int partner_ID)
	{
		m_C_BPartner_ID = partner_ID;
	}
"
org.compiere.model.MRequisitionLine.getParent,MRequisitionLine.java,"MRequisition getParent()
	{
		if (m_parent == null)
			m_parent = new MRequisition (getCtx(), getM_Requisition_ID(), get_Trx());
		return m_parent;
	}	//	getParent
"
org.compiere.model.MRequisitionLine.setPrice,MRequisitionLine.java,"void setPrice()
	{
		if (getC_Charge_ID() != 0)
		{
			MCharge charge = MCharge.get(getCtx(), getC_Charge_ID());
			setPriceActual(charge.getChargeAmt());
		}
		if (getM_Product_ID() == 0)
			return;
		if (m_M_PriceList_ID == 0)
			m_M_PriceList_ID = getParent().getM_PriceList_ID();
		if (m_M_PriceList_ID == 0)
		{
			log.log(Level.SEVERE, ""PriceList unknown!"");
			return;
		}
		setPrice (m_M_PriceList_ID);
	}	//	setPrice
"
org.compiere.model.MRequisitionLine.setPrice,MRequisitionLine.java,"void setPrice (int M_PriceList_ID)
	{
		if (getM_Product_ID() == 0)
			return;
		//
		log.fine(""M_PriceList_ID="" + M_PriceList_ID);
		boolean isSOTrx = false;
		MProductPricing pp = new MProductPricing (getAD_Client_ID(), getAD_Org_ID(),
			getM_Product_ID(), getC_BPartner_ID(), getQty(), isSOTrx);
		pp.setM_PriceList_ID(M_PriceList_ID);
	//	pp.setPriceDate(getDateOrdered());
		//
		setPriceActual (pp.getPriceStd());
	}	//	setPrice
"
org.compiere.model.MRequisitionLine.setLineNetAmt,MRequisitionLine.java,"void setLineNetAmt ()
	{
		BigDecimal lineNetAmt = getQty().multiply(getPriceActual());
		super.setLineNetAmt (lineNetAmt);
	}	//	setLineNetAmt
"
org.compiere.model.MRequisitionLine.setM_Product_ID,MRequisitionLine.java,"void setM_Product_ID (String oldM_Product_ID, 
			String newM_Product_ID, int windowNo) throws Exception
	{
		if (newM_Product_ID == null || newM_Product_ID.length() == 0)
			return;
		int M_Product_ID = Integer.parseInt(newM_Product_ID);
		super.setM_Product_ID(M_Product_ID);
		if (M_Product_ID == 0)
		{
			setM_AttributeSetInstance_ID(0);
			return;
		}
		//	Set Attribute
		int M_AttributeSetInstance_ID = getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_AttributeSetInstance_ID"");
		if (getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_Product_ID"") == M_Product_ID
			&& M_AttributeSetInstance_ID != 0)
			setM_AttributeSetInstance_ID(M_AttributeSetInstance_ID);
		else
			setM_AttributeSetInstance_ID(0);

		int C_BPartner_ID = getC_BPartner_ID();
		BigDecimal Qty = getQty();
		boolean isSOTrx = false;
		MProductPricing pp = new MProductPricing (getAD_Client_ID(), getAD_Org_ID(),
			M_Product_ID, C_BPartner_ID, Qty, isSOTrx);
		//
		int M_PriceList_ID = getCtx().getContextAsInt(windowNo, ""M_PriceList_ID"");
		pp.setM_PriceList_ID(M_PriceList_ID);
		int M_PriceList_Version_ID = getCtx().getContextAsInt(windowNo, ""M_PriceList_Version_ID"");
		pp.setM_PriceList_Version_ID(M_PriceList_Version_ID);
		Timestamp orderDate = new Timestamp(getCtx().getContextAsTime(windowNo, ""DateRequired""));
		pp.setPriceDate(orderDate);
		//		
		setPriceActual(pp.getPriceStd());
		p_changeVO.setContext(getCtx(), windowNo, ""EnforcePriceLimit"", pp.isEnforcePriceLimit());	//	not used
		p_changeVO.setContext(getCtx(), windowNo, ""DiscountSchema"", pp.isDiscountSchema());
	}	//	setM_Product_ID
"
org.compiere.model.MRequisitionLine.setPriceActual,MRequisitionLine.java,"void setPriceActual (String oldPriceActual, 
			String newPriceActual, int windowNo) throws Exception
	{
		if (newPriceActual == null || newPriceActual.length() == 0)
			return;
		BigDecimal PriceActual = new BigDecimal(newPriceActual);
		super.setPriceActual(PriceActual);
		setAmt(windowNo, ""PriceActual"");
	}	//	setPriceActual
"
org.compiere.model.MRequisitionLine.setQty,MRequisitionLine.java,"void setQty (String oldQty, 
			String newQty, int windowNo) throws Exception
	{
		if (newQty == null || newQty.length() == 0)
			return;
		BigDecimal Qty = new BigDecimal(newQty);
		super.setQty(Qty);
		setAmt(windowNo, ""Qty"");
	}	//	setQty
"
org.compiere.model.MRequisitionLine.setAmt,MRequisitionLine.java,"void setAmt(int windowNo, String columnName)
	{
		BigDecimal Qty = getQty();
		//	Qty changed - recalc price
		if (columnName.equals(""Qty"") 
			&& ""Y"".equals(getCtx().getContext(windowNo, ""DiscountSchema"")))
		{
			int M_Product_ID = getM_Product_ID();
			int C_BPartner_ID = getC_BPartner_ID();
			boolean isSOTrx = false;
			MProductPricing pp = new MProductPricing (getAD_Client_ID(), getAD_Org_ID(),
				M_Product_ID, C_BPartner_ID, Qty, isSOTrx);
			//
			int M_PriceList_ID = getCtx().getContextAsInt(windowNo, ""M_PriceList_ID"");
			pp.setM_PriceList_ID(M_PriceList_ID);
			int M_PriceList_Version_ID = getCtx().getContextAsInt(windowNo, ""M_PriceList_Version_ID"");
			pp.setM_PriceList_Version_ID(M_PriceList_Version_ID);
			Timestamp orderDate = new Timestamp(getCtx().getContextAsTime(windowNo, ""DateInvoiced""));
			pp.setPriceDate(orderDate);
			//
			setPriceActual(pp.getPriceStd());
		}

		int StdPrecision = getCtx().getStdPrecision();
		BigDecimal PriceActual = getPriceActual();

		//	get values
		log.fine(""Qty="" + Qty + "", Price="" + PriceActual + "", Precision="" + StdPrecision);

		//	Multiply
		BigDecimal LineNetAmt = Qty.multiply(PriceActual);
		if (LineNetAmt.scale() > StdPrecision)
			LineNetAmt = LineNetAmt.setScale(StdPrecision, BigDecimal.ROUND_HALF_UP);
		setLineNetAmt(LineNetAmt);
		log.info(""LineNetAmt="" + LineNetAmt);
	}	//	setAmt	
"
org.compiere.model.MRequisitionLine.beforeSave,MRequisitionLine.java,"boolean beforeSave (boolean newRecord)
	{
		if (getLine() == 0)
		{
			String sql = ""SELECT COALESCE(MAX(Line),0)+10 FROM M_RequisitionLine WHERE M_Requisition_ID=?"";
			int ii = DB.getSQLValue (get_Trx(), sql, getM_Requisition_ID());
			setLine (ii);
		}
		//	Product & ASI - Charge
		if (getM_Product_ID() != 0 && getC_Charge_ID() != 0)
			setC_Charge_ID(0);
		if (getM_AttributeSetInstance_ID() != 0 && getC_Charge_ID() != 0)
			setM_AttributeSetInstance_ID(0);
		//
		if (getPriceActual().compareTo(Env.ZERO) == 0)
			setPrice();
		setLineNetAmt();
		return true;
	}	//	beforeSave
"
org.compiere.model.MRequisitionLine.afterSave,MRequisitionLine.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!success)
			return success;
		return updateHeader();
	}	//	afterSave
"
org.compiere.model.MRequisitionLine.afterDelete,MRequisitionLine.java,"boolean afterDelete (boolean success)
	{
		if (!success)
			return success;
		return updateHeader();
	}	//	afterDelete
"
org.compiere.model.MRequisitionLine.updateHeader,MRequisitionLine.java,"boolean updateHeader()
	{
		log.fine("""");
		String sql = ""UPDATE M_Requisition r""
			+ "" SET TotalLines=""
				+ ""(SELECT COALESCE(SUM(LineNetAmt),0) FROM M_RequisitionLine rl ""
				+ ""WHERE r.M_Requisition_ID=rl.M_Requisition_ID) ""
			+ ""WHERE M_Requisition_ID="" + getM_Requisition_ID();
		int no = DB.executeUpdate(sql, get_Trx());
		if (no != 1)
			log.log(Level.SEVERE, ""Header update #"" + no);
		m_parent = null;
		
		if (get_Trx() != null)
			get_Trx().commit();
		
		return no == 1;
	}	//	updateHeader
"
org.compiere.model.MCommissionDetail.setLineIDs,MCommissionDetail.java,"void setLineIDs (int C_OrderLine_ID, int C_InvoiceLine_ID)
	{
		if (C_OrderLine_ID != 0)
			setC_OrderLine_ID(C_OrderLine_ID);
		if (C_InvoiceLine_ID != 0)
			setC_InvoiceLine_ID(C_InvoiceLine_ID);
	}	//	setLineIDs
"
org.compiere.model.MCommissionDetail.setConvertedAmt,MCommissionDetail.java,"void setConvertedAmt (Timestamp date)
	{
		BigDecimal amt = MConversionRate.convertBase(getCtx(), 
			getActualAmt(), getC_Currency_ID(), date, 0, 	//	type
			getAD_Client_ID(), getAD_Org_ID());
		if (amt != null)
			setConvertedAmt(amt);
	}	//	setConvertedAmt
"
org.compiere.model.MCommissionDetail.afterSave,MCommissionDetail.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!newRecord)
			updateAmtHeader();
		return success;
	}	//	afterSave
"
org.compiere.model.MCommissionDetail.afterDelete,MCommissionDetail.java,"boolean afterDelete (boolean success)
	{
		if (success)
			updateAmtHeader();
		return success;
	}	//	afterDelete
"
org.compiere.model.MCommissionDetail.updateAmtHeader,MCommissionDetail.java,"void updateAmtHeader()
	{
		MCommissionAmt amt = new MCommissionAmt(getCtx(), getC_CommissionAmt_ID(), get_Trx());
		amt.calculateCommission();
		amt.save();
	}	//	updateAmtHeader
"
org.compiere.model.MCommissionDetail.beforeDelete,MCommissionDetail.java,"boolean beforeDelete ()
	{
		//	Delete only if the Invoice is not generated
		
		MCommissionAmt CommissionAmt = new MCommissionAmt(getCtx(),getC_CommissionAmt_ID(),get_Trx());
		MCommissionRun CommissionRun = new MCommissionRun (getCtx(), CommissionAmt.getC_CommissionRun_ID(),get_Trx());
		
		if(CommissionRun.getC_Invoice_ID()!=0)
		{
			//invoice exists, return false
			log.saveError(""CommissionRunNotDeleted"", Msg.translate(getCtx(),""""));
			return false;
		}

		return true;
	}	//	beforeDelete
"
org.compiere.model.MInOutLineMA.get,MInOutLineMA.java,"MInOutLineMA[] get (Ctx ctx, int M_InOutLine_ID, Trx trx)
	{
		ArrayList<MInOutLineMA> list = new ArrayList<MInOutLineMA>();
		String sql = ""SELECT * FROM M_InOutLineMA WHERE M_InOutLine_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, M_InOutLine_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				list.add (new MInOutLineMA (ctx, rs, trx));
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		MInOutLineMA[] retValue = new MInOutLineMA[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MInOutLineMA.deleteInOutMA,MInOutLineMA.java,"int deleteInOutMA (int M_InOut_ID, Trx trx)
	{
		String sql = ""DELETE FROM M_InOutLineMA ma WHERE EXISTS ""
			+ ""(SELECT * FROM M_InOutLine l WHERE l.M_InOutLine_ID=ma.M_InOutLine_ID""
			+ "" AND M_InOut_ID="" + M_InOut_ID + "")"";
		return DB.executeUpdate(sql, trx);
	}	//	deleteInOutMA
"
org.compiere.model.MInOutLineMA.deleteInOutLineMA,MInOutLineMA.java,"int deleteInOutLineMA (int M_InOutLine_ID, Trx trx)
	{
		String sql = ""DELETE FROM M_InOutLineMA ma WHERE EXISTS ""
			+ ""(SELECT * FROM M_InOutLine l WHERE l.M_InOutLine_ID=ma.M_InOutLine_ID""
			+ "" AND M_InOutLine_ID="" + M_InOutLine_ID + "")"";
		return DB.executeUpdate(sql, trx);
	}	//	deleteInOutLineMA
"
org.compiere.model.MInOutLineMA.toString,MInOutLineMA.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MInOutLineMA["");
		sb.append(""M_InOutLine_ID="").append(getM_InOutLine_ID())
			.append("",M_AttributeSetInstance_ID="").append(getM_AttributeSetInstance_ID())
			.append("", Qty="").append(getMovementQty())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MPriceList.get,MPriceList.java,"MPriceList get (Ctx ctx, int M_PriceList_ID, Trx trx)
	{
		Integer key = Integer.valueOf (M_PriceList_ID);
		MPriceList retValue = s_cache.get(ctx, key);
		if (retValue == null)
		{
			retValue = new MPriceList (ctx, M_PriceList_ID, trx);
			s_cache.put(key, retValue);
		}
		return retValue;		
	}	//	get
"
org.compiere.model.MPriceList.getDefault,MPriceList.java,"MPriceList getDefault (Ctx ctx, boolean IsSOPriceList)
	{
		int AD_Client_ID = ctx.getAD_Client_ID();
		MPriceList retValue = null;
		//	Search for it in cache
		Iterator<MPriceList> it = s_cache.values().iterator();
		while (it.hasNext())
		{
			retValue = it.next();
			if (retValue.isDefault() && retValue.getAD_Client_ID() == AD_Client_ID)
				return retValue;
		}
		
		/**	Get from DB **/
		retValue = null;
		String sql = ""SELECT * FROM M_PriceList ""
			+ ""WHERE AD_Client_ID=?""
			+ "" AND IsDefault='Y'""
			+ "" AND IsSOPriceList=?"" // YS: Changed from hard code to Parameter
			+ ""ORDER BY M_PriceList_ID"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, AD_Client_ID);
			if (IsSOPriceList)
				pstmt.setString (2, ""Y"");
			else
				pstmt.setString (2, ""N"");
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				retValue = new MPriceList (ctx, rs, null);
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//	Return value
		if (retValue != null)
		{
			Integer key = Integer.valueOf (retValue.getM_PriceList_ID());
			s_cache.put(key, retValue);
		}
		return retValue;
	}	//	getDefault
"
org.compiere.model.MPriceList.getStandardPrecision,MPriceList.java,"int getStandardPrecision (Ctx ctx, int M_PriceList_ID)
	{
		MPriceList pl = MPriceList.get(ctx, M_PriceList_ID, null);
		return pl.getStandardPrecision();
	}	//	getStandardPrecision
"
org.compiere.model.MPriceList.getPricePrecision,MPriceList.java,"int getPricePrecision (Ctx ctx, int M_PriceList_ID)
	{
		MPriceList pl = MPriceList.get(ctx, M_PriceList_ID, null);
		return pl.getPricePrecision();
	}	//	getPricePrecision
"
org.compiere.model.MPriceList.getPriceListVersion,MPriceList.java,"MPriceListVersion getPriceListVersion (Timestamp valid)
	{
		if (valid == null)
			valid = new Timestamp (System.currentTimeMillis());
		//	Assume there is no later
		if (m_plv != null && m_plv.getValidFrom().before(valid))
			return m_plv;

		String sql = ""SELECT * FROM M_PriceList_Version ""
			+ ""WHERE M_PriceList_ID=?""
			+ "" AND TRUNC(ValidFrom,'DD')<=? AND IsActive='Y'""
			+ ""ORDER BY ValidFrom DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getM_PriceList_ID());
			pstmt.setTimestamp(2, valid);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				m_plv = new MPriceListVersion (getCtx(), rs, get_Trx());
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		if (m_plv == null)
			log.warning(""None found M_PriceList_ID="" 
				+ getM_PriceList_ID() + "" - "" + valid + "" - "" + sql);
		else
			log.fine(m_plv.toString());
		return m_plv;
	}	//	getPriceListVersion
"
org.compiere.model.MPriceList.getStandardPrecision,MPriceList.java,"int getStandardPrecision()
	{
		if (m_precision == null)
		{
			MCurrency c = MCurrency.get(getCtx(), getC_Currency_ID());
			m_precision = Integer.valueOf (c.getStdPrecision());
		}
		return m_precision.intValue();
	}	//	getStandardPrecision
"
org.compiere.model.MPriceList.toString,MPriceList.java,"String toString()
    {
	    StringBuffer sb = new StringBuffer(""MPriceList["").append(get_ID())
	        .append(""-"").append(getName());
	    sb.append(""]"");
	    return sb.toString();
    }	//	toString
"
org.compiere.model.MDistributionRun.getLines,MDistributionRun.java,"MDistributionRunLine[] getLines (boolean reload)
	{
		if (!reload && m_lines != null)
			return m_lines;
		//
		String sql = ""SELECT * FROM M_DistributionRunLine ""
			+ ""WHERE M_DistributionRun_ID=? AND IsActive='Y' AND TotalQty IS NOT NULL AND TotalQty<> 0 ORDER BY Line"";
		ArrayList<MDistributionRunLine> list = new ArrayList<MDistributionRunLine>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getM_DistributionRun_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MDistributionRunLine(getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		m_lines = new MDistributionRunLine[list.size()];
		list.toArray (m_lines);
		return m_lines;
	}	//	getLines
"
org.compiere.model.MCommissionRun.getAmts,MCommissionRun.java,"MCommissionAmt[] getAmts()
	{
		String sql = ""SELECT * FROM C_CommissionAmt WHERE C_CommissionRun_ID=?"";
		ArrayList<MCommissionAmt> list = new ArrayList<MCommissionAmt>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getC_CommissionRun_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MCommissionAmt(getCtx(), rs, get_Trx()));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		//	Convert
		MCommissionAmt[] retValue = new MCommissionAmt[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getAmts
"
org.compiere.model.MCommissionRun.updateFromAmt,MCommissionRun.java,"void updateFromAmt()
	{
		MCommissionAmt[] amts = getAmts();
		BigDecimal GrandTotal = Env.ZERO;
		for (MCommissionAmt amt : amts) {
			GrandTotal = GrandTotal.add(amt.getCommissionAmt());
		}
		setGrandTotal(GrandTotal);
	}	//	updateFromAmt
"
org.compiere.model.MCommissionRun.beforeDelete,MCommissionRun.java,"boolean beforeDelete ()
	{
		//	Delete only if the Invoice is not generated
		
		if(getC_Invoice_ID()!=0)
		{
			//invoice exists, return false
			log.saveError(""CommissionRunNotDeleted"", Msg.translate(getCtx(),""""));
			return false;
		}
       
		return true;
	}	//	beforeDelete
"
org.compiere.model.MResourceType.afterSave,MResourceType.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!success)
			return success;
		
		//	Update Products
		if (!newRecord)
		{
			ArrayList<MProduct> products = MProduct.findAll(getCtx(), ""S_Resource_ID IN ""
				+ ""(SELECT S_Resource_ID FROM S_Resource WHERE S_ResourceType_ID="" 
				+ getS_ResourceType_ID() + "")"", get_Trx());
			for (int i = 0; i < products.size(); i++)
			{
				MProduct product = products.get(i);
				if (product.setResource(this))
					product.save(get_Trx());
			}
		}
		
		return success;
	}	//	afterSave
"
org.compiere.model.MPaySelection.getLines,MPaySelection.java,"MPaySelectionLine[] getLines(boolean requery)
	{
		if (m_lines != null && !requery)
			return m_lines;
		ArrayList<MPaySelectionLine> list = new ArrayList<MPaySelectionLine>();
		String sql = ""SELECT * FROM C_PaySelectionLine WHERE C_PaySelection_ID=? ORDER BY Line"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getC_PaySelection_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MPaySelectionLine(getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""getLines"", e); 
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		m_lines = new MPaySelectionLine[list.size ()];
		list.toArray (m_lines);
		return m_lines;
	}	//	getLines
"
org.compiere.model.MPaySelection.getC_Currency_ID,MPaySelection.java,"int getC_Currency_ID()
	{
		if (m_C_Currency_ID == 0)
		{
			String sql = ""SELECT C_Currency_ID FROM C_BankAccount "" 
				+ ""WHERE C_BankAccount_ID=?"";
			m_C_Currency_ID = DB.getSQLValue(null, sql, getC_BankAccount_ID());
		}
		return m_C_Currency_ID;
	}	//	getC_Currency_ID
"
org.compiere.model.MPaySelection.toString,MPaySelection.java,"String toString()
	{
		StringBuffer sb = new StringBuffer(""MPaySelection["");
		sb.append(get_ID()).append("","").append(getName())
			.append(""]"");
		return sb.toString();
	}	//	toString
"
org.compiere.model.MRequestCategory.get,MRequestCategory.java,"MRequestCategory get (Ctx ctx, int R_Category_ID)
	{
		Integer key = Integer.valueOf (R_Category_ID);
		MRequestCategory retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MRequestCategory (ctx, R_Category_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	} //	get
"
org.compiere.model.MBOM.get,MBOM.java,"MBOM get (Ctx ctx, int M_BOM_ID)
	{
		Integer key = Integer.valueOf (M_BOM_ID);
		MBOM retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MBOM (ctx, M_BOM_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MBOM.getOfProduct,MBOM.java,"MBOM[] getOfProduct (Ctx ctx, int M_Product_ID, 
		Trx trx, String whereClause)
	{
		ArrayList<MBOM> list = new ArrayList<MBOM>();
		String sql = ""SELECT * FROM M_BOM WHERE M_Product_ID=?"";
		if (whereClause != null && whereClause.length() > 0)
			sql += "" AND "" + whereClause;
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, M_Product_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MBOM (ctx, rs, trx));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		MBOM[] retValue = new MBOM[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getOfProduct
"
org.compiere.model.MBOM.beforeSave,MBOM.java,"boolean beforeSave (boolean newRecord)
	{
		//	BOM Type
		if (newRecord || is_ValueChanged(""BOMType"") || is_ValueChanged(""BOMUse"") )
		{
			//	Only one Current Active per BOM Use
			if (getBOMType().equals(BOMTYPE_CurrentActive))
			{
				MBOM[] boms = getOfProduct(getCtx(), getM_Product_ID(), get_Trx(),
					""BOMType='A' AND BOMUse='"" + getBOMUse() + ""' AND IsActive='Y'"");
				if (boms.length == 0	//	only one = this 
					|| (boms.length == 1 && boms[0].getM_BOM_ID() == getM_BOM_ID()))
					;
				else
				{
					log.saveError(""Error"", Msg.getMsg(getCtx(), 
						""BOMCurrentActive"")); 
					return false;
				}
			}
			//	Only one MTO
			else if (getBOMType().equals(BOMTYPE_Make_To_Order))
			{
				MBOM[] boms = getOfProduct(getCtx(), getM_Product_ID(), get_Trx(), 
					""BOMType='O' AND IsActive='Y'"");
				if (boms.length == 0	//	only one = this 
					|| (boms.length == 1 && boms[0].getM_BOM_ID() == getM_BOM_ID()))
					;
				else
				{
					log.saveError(""Error"", Msg.getMsg(getCtx(), 
						""BOMMakeToOrder""));
					return false;
				}
			}
		}	//	BOM Type
		
		return true;
		
	}	//	beforeSave
"
org.compiere.model.MBOM.afterSave,MBOM.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		//	BOM Type or Use was changed
		if (newRecord || is_ValueChanged(""BOMType"") || is_ValueChanged(""BOMUse"") || is_ValueChanged(""IsActive""))
		{
			//	Invalidate BOM
			MProduct product = new MProduct (getCtx(), getM_Product_ID(), get_Trx());
			if (get_Trx() != null)
				product.load(get_Trx());
			if (product.isVerified())
			{
				product.setIsVerified(false);
				product.save(get_Trx());
			}

			//TODO: Invalidate products where this BOM is used (in a multi-level scenario)

			
		}
		return success;
	}	//	afterSave
"
org.compiere.model.MInOut.createFrom,MInOut.java,"MInOut createFrom (MOrder order, Timestamp movementDate,
			boolean forceDelivery, boolean allAttributeInstances, Timestamp minGuaranteeDate,
			boolean complete, Trx trx)
	{
		if (order == null)
			throw new IllegalArgumentException(""No Order"");
		//
		if (!forceDelivery && DELIVERYRULE_CompleteLine.equals(order.getDeliveryRule()))
		{
			return null;
		}

		//	Create Meader
		MInOut retValue = new MInOut (order, 0, movementDate);
		retValue.setDocAction(complete ? DOCACTION_Complete : DOCACTION_Prepare);

		//	Check if we can create the lines
		MOrderLine[] oLines = order.getLines(true, ""M_Product_ID"");
		for (MOrderLine element : oLines) {
			BigDecimal qty = element.getQtyOrdered().subtract(element.getQtyDelivered());
			//	Nothing to deliver
			if (qty.signum() == 0)
				continue;
			//	Stock Info
			MStorage[] storages = null;
			MProduct product = element.getProduct();
			if ((product != null) && (product.get_ID() != 0) && product.isStocked())
			{
				MProductCategory pc = MProductCategory.get(order.getCtx(), product.getM_Product_Category_ID());
				String MMPolicy = pc.getMMPolicy();
				if ((MMPolicy == null) || (MMPolicy.length() == 0))
				{
					MClient client = MClient.get(order.getCtx());
					MMPolicy = client.getMMPolicy();
				}
				storages = MStorage.getWarehouse (order.getCtx(), order.getM_Warehouse_ID(),
						element.getM_Product_ID(), element.getM_AttributeSetInstance_ID(),
						product.getM_AttributeSet_ID(),
						allAttributeInstances, minGuaranteeDate,
						X_AD_Client.MMPOLICY_FiFo.equals(MMPolicy), trx);
			}
			if (!forceDelivery)
			{
				BigDecimal maxQty = Env.ZERO;
				for (MStorage element2 : storages)
					maxQty = maxQty.add(element2.getQtyOnHand());
				if (DELIVERYRULE_Availability.equals(order.getDeliveryRule()))
				{
					if (maxQty.compareTo(qty) < 0)
						qty = maxQty;
				}
				else if (DELIVERYRULE_CompleteLine.equals(order.getDeliveryRule()))
				{
					if (maxQty.compareTo(qty) < 0)
						continue;
				}
			}
			//	Create Line
			if (retValue.get_ID() == 0)	//	not saved yet
				retValue.save(trx);
			//	Create a line until qty is reached
			for (MStorage element2 : storages) {
				BigDecimal lineQty = element2.getQtyOnHand();
				if (lineQty.compareTo(qty) > 0)
					lineQty = qty;
				MInOutLine line = new MInOutLine (retValue);
				line.setOrderLine(element, element2.getM_Locator_ID(),
						order.isSOTrx() ? lineQty : Env.ZERO);
				line.setQty(lineQty);	//	Correct UOM for QtyEntered
				if (element.getQtyEntered().compareTo(element.getQtyOrdered()) != 0)
					line.setQtyEntered(lineQty
							.multiply(element.getQtyEntered())
							.divide(element.getQtyOrdered(), 12, BigDecimal.ROUND_HALF_UP));
				line.setC_Project_ID(element.getC_Project_ID());
				line.save(trx);
				//	Delivered everything ?
				qty = qty.subtract(lineQty);
				//	storage[ll].changeQtyOnHand(lineQty, !order.isSOTrx());	// Credit Memo not considered
				//	storage[ll].save(get_TrxName());
				if (qty.signum() == 0)
					break;
			}
		}	//	for all order lines

		//	No Lines saved
		if (retValue.get_ID() == 0)
			return null;

		return retValue;
	}	//	createFrom
"
org.compiere.model.MInOut.copyFrom,MInOut.java,"MInOut copyFrom (MInOut from, Timestamp dateDoc,
			int C_DocType_ID, boolean isSOTrx, boolean isReturnTrx,
			boolean counter, Trx trx, boolean setOrder)
	{
		MInOut to = new MInOut (from.getCtx(), 0, null);
		to.set_Trx(trx);
		copyValues(from, to, from.getAD_Client_ID(), from.getAD_Org_ID());
		to.set_ValueNoCheck (""M_InOut_ID"", I_ZERO);
		to.set_ValueNoCheck (""DocumentNo"", null);
		//
		to.setDocStatus (DOCSTATUS_Drafted);		//	Draft
		to.setDocAction(DOCACTION_Complete);
		//
		to.setC_DocType_ID (C_DocType_ID);
		to.setIsReturnTrx(isReturnTrx);
		to.setIsSOTrx(isSOTrx);
		if (counter)
		{
			if(!isReturnTrx)
				to.setMovementType (isSOTrx ? MOVEMENTTYPE_CustomerShipment : MOVEMENTTYPE_VendorReceipts);
			else
				to.setMovementType (isSOTrx ? MOVEMENTTYPE_CustomerReturns : MOVEMENTTYPE_VendorReturns);
		}

		//
		to.setDateOrdered (dateDoc);
		to.setDateAcct (dateDoc);
		to.setMovementDate(dateDoc);
		to.setDatePrinted(null);
		to.setIsPrinted (false);
		to.setDateReceived(null);
		to.setNoPackages(0);
		to.setShipDate(null);
		to.setPickDate(null);
		to.setIsInTransit(false);
		//
		to.setIsApproved (false);
		to.setC_Invoice_ID(0);
		to.setTrackingNo(null);
		to.setIsInDispute(false);
		//
		to.setPosted (false);
		to.setProcessed (false);
		to.setC_Order_ID(0);	//	Overwritten by setOrder
		if (counter)
		{
			to.setC_Order_ID(0);
			to.setRef_InOut_ID(from.getM_InOut_ID());
			//	Try to find Order/Invoice link
			if (from.getC_Order_ID() != 0)
			{
				MOrder peer = new MOrder (from.getCtx(), from.getC_Order_ID(), from.get_Trx());
				if (peer.getRef_Order_ID() != 0)
					to.setC_Order_ID(peer.getRef_Order_ID());
			}
			if (from.getC_Invoice_ID() != 0)
			{
				MInvoice peer = new MInvoice (from.getCtx(), from.getC_Invoice_ID(), from.get_Trx());
				if (peer.getRef_Invoice_ID() != 0)
					to.setC_Invoice_ID(peer.getRef_Invoice_ID());
			}
		}
		else
		{
			to.setRef_InOut_ID(0);
			if (setOrder)
				to.setC_Order_ID(from.getC_Order_ID());
		}
		//
		if (!to.save(trx))
			throw new IllegalStateException(""Could not create Shipment"");
		if (counter)
			from.setRef_InOut_ID(to.getM_InOut_ID());

		if (to.copyLinesFrom(from, counter, setOrder) == 0)
			throw new IllegalStateException(""Could not create Shipment Lines"");

		return to;
	}	//	copyFrom
"
org.compiere.model.MInOut.getDocStatusName,MInOut.java,"String getDocStatusName()
	{
		return MRefList.getListName(getCtx(), 131, getDocStatus());
	}	//	getDocStatusName
"
org.compiere.model.MInOut.addDescription,MInOut.java,"void addDescription (String description)
	{
		String desc = getDescription();
		if (desc == null)
			setDescription(description);
		else
			setDescription(desc + "" | "" + description);
	}	//	addDescription
"
org.compiere.model.MInOut.toString,MInOut.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MInOut["")
		.append (get_ID()).append(""-"").append(getDocumentNo())
		.append("",DocStatus="").append(getDocStatus())
		.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MInOut.getDocumentInfo,MInOut.java,"String getDocumentInfo()
	{
		MDocType dt = MDocType.get(getCtx(), getC_DocType_ID());
		return dt.getName() + "" "" + getDocumentNo();
	}	//	getDocumentInfo
"
org.compiere.model.MInOut.createPDF,MInOut.java,"File createPDF ()
	{
		try
		{
			File temp = File.createTempFile(get_TableName()+get_ID()+""_"", "".pdf"");
			return createPDF (temp);
		}
		catch (Exception e)
		{
			log.severe(""Could not create PDF - "" + e.getMessage());
		}
		return null;
	}	//	getPDF
"
org.compiere.model.MInOut.createPDF,MInOut.java,"File createPDF (File file)
	{
		ReportEngine re = ReportEngine.get (getCtx(), ReportEngine.SHIPMENT, getC_Invoice_ID());
		if (re == null)
			return null;
		return re.getPDF(file);
	}	//	createPDF
"
org.compiere.model.MInOut.getLines,MInOut.java,"MInOutLine[] getLines (boolean requery)
	{
		if ((m_lines != null) && !requery)
			return m_lines;
		ArrayList<MInOutLine> list = new ArrayList<MInOutLine>();
		String sql = ""SELECT * FROM M_InOutLine WHERE M_InOut_ID=? ORDER BY Line"";
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getM_InOut_ID());
			rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MInOutLine(getCtx(), rs, get_Trx()));
			rs.close();
			rs = null;
			pstmt.close();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			log.log(Level.SEVERE, sql, ex);
			list = null;
			//	throw new DBException(ex);
		}
		finally
		{
			try
			{
				if (rs != null)
					rs.close();
				if (pstmt != null)
					pstmt.close();
			}
			catch (SQLException e)
			{
			}
		}
		pstmt = null;
		rs = null;
		//
		if (list == null)
			return null;
		//
		m_lines = new MInOutLine[list.size()];
		list.toArray(m_lines);
		return m_lines;
	}	//	getMInOutLines
"
org.compiere.model.MInOut.getLines,MInOut.java,"MInOutLine[] getLines()
	{
		return getLines(false);
	}	//	getLines
"
org.compiere.model.MInOut.getConfirmations,MInOut.java,"MInOutConfirm[] getConfirmations(boolean requery)
	{
		if ((m_confirms != null) && !requery)
			return m_confirms;

		ArrayList<MInOutConfirm> list = new ArrayList<MInOutConfirm> ();
		String sql = ""SELECT * FROM M_InOutConfirm WHERE M_InOut_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getM_InOut_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add(new MInOutConfirm(getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

		m_confirms = new MInOutConfirm[list.size ()];
		list.toArray (m_confirms);
		return m_confirms;
	}	//	getConfirmations
"
org.compiere.model.MInOut.copyLinesFrom,MInOut.java,"int copyLinesFrom (MInOut otherShipment, boolean counter, boolean setOrder)
	{
		if (isProcessed() || isPosted() || (otherShipment == null))
			return 0;
		MInOutLine[] fromLines = otherShipment.getLines(false);
		int count = 0;
		for (MInOutLine fromLine : fromLines) {
			MInOutLine line = new MInOutLine (this);
			line.set_Trx(get_Trx());
			if (counter)	//	header
				PO.copyValues(fromLine, line, getAD_Client_ID(), getAD_Org_ID());
			else
				PO.copyValues(fromLine, line, fromLine.getAD_Client_ID(), fromLine.getAD_Org_ID());
			line.setM_InOut_ID(getM_InOut_ID());
			line.set_ValueNoCheck (""M_InOutLine_ID"", I_ZERO);	//	new
			//	Reset
			if (!setOrder)
				line.setC_OrderLine_ID(0);
			if (!counter)
				line.setM_AttributeSetInstance_ID(0);
			//	line.setS_ResourceAssignment_ID(0);
			line.setRef_InOutLine_ID(0);
			line.setIsInvoiced(false);
			//
			line.setConfirmedQty(Env.ZERO);
			line.setPickedQty(Env.ZERO);
			line.setScrappedQty(Env.ZERO);
			line.setTargetQty(Env.ZERO);
			//	Set Locator based on header Warehouse
			if (getM_Warehouse_ID() != otherShipment.getM_Warehouse_ID())
			{
				line.setM_Locator_ID(0);
				line.setM_Locator_ID(Env.ZERO);
			}
			//
			if (counter)
			{
				line.setRef_InOutLine_ID(fromLine.getM_InOutLine_ID());
				if (fromLine.getC_OrderLine_ID() != 0)
				{
					MOrderLine peer = new MOrderLine (getCtx(), fromLine.getC_OrderLine_ID(), get_Trx());
					if (peer.getRef_OrderLine_ID() != 0)
						line.setC_OrderLine_ID(peer.getRef_OrderLine_ID());
				}
			}
			//
			line.setProcessed(false);
			if (line.save(get_Trx()))
				count++;
			//	Cross Link
			if (counter)
			{
				fromLine.setRef_InOutLine_ID(line.getM_InOutLine_ID());
				fromLine.save(get_Trx());
			}
		}
		if (fromLines.length != count)
			log.log(Level.SEVERE, ""Line difference - From="" + fromLines.length + "" <> Saved="" + count);
		return count;
	}	//	copyLinesFrom
"
org.compiere.model.MInOut.setReversal,MInOut.java,"void setReversal(boolean reversal)
	{
		m_reversal = reversal;
	}	//	setReversal
"
org.compiere.model.MInOut.isReversal,MInOut.java,"boolean isReversal()
	{
		return m_reversal;
	}	//	isReversal
"
org.compiere.model.MInOut.setOrder,MInOut.java,"void setOrder (MOrder order)
	{
		setClientOrg(order);
		setC_Order_ID(order.getC_Order_ID());
		//
		setC_BPartner_ID (order.getC_BPartner_ID());
		setC_BPartner_Location_ID (order.getC_BPartner_Location_ID());	//	shipment address
		setAD_User_ID(order.getAD_User_ID());
		//
		setM_Warehouse_ID (order.getM_Warehouse_ID());
		setIsSOTrx (order.isSOTrx());
		setIsReturnTrx (order.isReturnTrx());

		if (!isReturnTrx())
			setMovementType (order.isSOTrx() ? MOVEMENTTYPE_CustomerShipment : MOVEMENTTYPE_VendorReceipts);
		else
			setMovementType (order.isSOTrx() ? MOVEMENTTYPE_CustomerReturns : MOVEMENTTYPE_VendorReturns);
		//
		setDeliveryRule (order.getDeliveryRule());
		setDeliveryViaRule (order.getDeliveryViaRule());
		setM_Shipper_ID(order.getM_Shipper_ID());
		setFreightCostRule (order.getFreightCostRule());
		setFreightAmt(order.getFreightAmt());
		setSalesRep_ID(order.getSalesRep_ID());
		//
		setC_Activity_ID(order.getC_Activity_ID());
		setC_Campaign_ID(order.getC_Campaign_ID());
		setC_Charge_ID(order.getC_Charge_ID());
		setChargeAmt(order.getChargeAmt());
		//
		setC_Project_ID(order.getC_Project_ID());
		setDateOrdered(order.getDateOrdered());
		setDescription(order.getDescription());
		setPOReference(order.getPOReference());
		setSalesRep_ID(order.getSalesRep_ID());
		setAD_OrgTrx_ID(order.getAD_OrgTrx_ID());
		setUser1_ID(order.getUser1_ID());
		setUser2_ID(order.getUser2_ID());

	}	//	setOrder
"
org.compiere.model.MInOut.setC_Order_ID,MInOut.java,"void setC_Order_ID (String oldC_Order_ID,
			String newC_Order_ID, int windowNo) throws Exception
			{
		if ((newC_Order_ID == null) || (newC_Order_ID.length() == 0))
			return;
		int C_Order_ID = Integer.parseInt(newC_Order_ID);
		if (C_Order_ID == 0)
			return;
		//	Get Details
		MOrder order = new MOrder (getCtx(), C_Order_ID, null);
		if (order.get_ID() != 0)
			setOrder(order);
			}	//	setC_Order_ID
"
org.compiere.model.MInOut.setProcessed,MInOut.java,"void setProcessed (boolean processed)
	{
		super.setProcessed (processed);
		if (get_ID() == 0)
			return;
		String sql = ""UPDATE M_InOutLine SET Processed='""
			+ (processed ? ""Y"" : ""N"")
			+ ""' WHERE M_InOut_ID="" + getM_InOut_ID();
		int noLine = DB.executeUpdate(sql, get_Trx());
		m_lines = null;
		log.fine(processed + "" - Lines="" + noLine);
	}	//	setProcessed
"
org.compiere.model.MInOut.getBPartner,MInOut.java,"MBPartner getBPartner()
	{
		if (m_partner == null)
			m_partner = new MBPartner (getCtx(), getC_BPartner_ID(), get_Trx());
		return m_partner;
	}	//	getPartner
"
org.compiere.model.MInOut.setC_DocType_ID,MInOut.java,"void setC_DocType_ID (String DocBaseType)
	{
		String sql = ""SELECT C_DocType_ID FROM C_DocType ""
			+ ""WHERE AD_Client_ID=? AND DocBaseType=?""
			+ "" AND IsActive='Y' AND IsReturnTrx='N'""
			+ "" AND IsSOTrx='"" + (isSOTrx() ? ""Y"" : ""N"") + ""' ""
			+ ""ORDER BY ASCII(IsDefault) DESC"";
		int C_DocType_ID = DB.getSQLValue(null, sql, getAD_Client_ID(), DocBaseType);
		if (C_DocType_ID <= 0)
			log.log(Level.SEVERE, ""Not found for AC_Client_ID=""
					+ getAD_Client_ID() + "" - "" + DocBaseType);
		else
		{
			log.fine(""DocBaseType="" + DocBaseType + "" - C_DocType_ID="" + C_DocType_ID);
			setC_DocType_ID (C_DocType_ID);
			boolean isSOTrx = MDocBaseType.DOCBASETYPE_MaterialDelivery.equals(DocBaseType);
			setIsSOTrx (isSOTrx);
			setIsReturnTrx(false);
		}
	}	//	setC_DocType_ID
"
org.compiere.model.MInOut.setC_DocType_ID,MInOut.java,"void setC_DocType_ID()
	{
		if (isSOTrx())
			setC_DocType_ID(MDocBaseType.DOCBASETYPE_MaterialDelivery);
		else
			setC_DocType_ID(MDocBaseType.DOCBASETYPE_MaterialReceipt);
	}	//	setC_DocType_ID
"
org.compiere.model.MInOut.setC_DocType_ID,MInOut.java,"void setC_DocType_ID(int C_DocType_ID, boolean setReturnTrx)
	{
		super.setC_DocType_ID(C_DocType_ID);
		if (setReturnTrx)
		{
			MDocType dt = MDocType.get(getCtx(), C_DocType_ID);
			setIsReturnTrx(dt.isReturnTrx());
			setIsSOTrx(dt.isSOTrx());
		}
	}	//	setC_DocType_ID
"
org.compiere.model.MInOut.setC_DocType_ID,MInOut.java,"void setC_DocType_ID (String oldC_DocType_ID,
			String newC_DocType_ID, int windowNo) throws Exception
			{
		if (Util.isEmpty(newC_DocType_ID))
			return;
		int C_DocType_ID = convertToInt(newC_DocType_ID);
		if (C_DocType_ID == 0)
			return;

		//	Re-Create new DocNo, if there is a doc number already
		//	and the existing source used a different Sequence number
		String oldDocNo = getDocumentNo();
		boolean newDocNo = (oldDocNo == null);
		if (!newDocNo && oldDocNo.startsWith(""<"") && oldDocNo.endsWith("">""))
			newDocNo = true;
		int oldDocType_ID = getC_DocType_ID();
		if ((oldDocType_ID == 0) && !Util.isEmpty(oldC_DocType_ID))
			oldDocType_ID = convertToInt(oldC_DocType_ID);

		String sql = ""SELECT d.DocBaseType, d.IsDocNoControlled,""
			+ "" s.CurrentNext, d.IsReturnTrx, s.CurrentNextSys, s.AD_Sequence_ID ""
			+ ""FROM C_DocType d""
			+ "" LEFT OUTER JOIN AD_Sequence s ON (d.DocNoSequence_ID=s.AD_Sequence_ID)""
			+ ""WHERE C_DocType_ID=?"";		//	1
		try
		{
			int AD_Sequence_ID = 0;

			//	Get old AD_SeqNo for comparison
			if (!newDocNo && (oldDocType_ID != 0))
			{
				PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
				pstmt.setInt(1, oldDocType_ID);
				ResultSet rs = pstmt.executeQuery();
				if (rs.next())
					AD_Sequence_ID = rs.getInt(6);
				rs.close();
				pstmt.close();
			}

			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_DocType_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				setC_DocType_ID(C_DocType_ID);
				p_changeVO.setContext(getCtx(), windowNo, ""C_DocTypeTarget_ID"", C_DocType_ID);
				//	Set Movement Type
				String DocBaseType = rs.getString(""DocBaseType"");
				boolean IsReturnTrx = ""Y"".equals(rs.getString(4));
				if (DocBaseType.equals(MDocBaseType.DOCBASETYPE_MaterialDelivery))		//	Shipments
				{
					if (IsReturnTrx)
						setMovementType(MOVEMENTTYPE_CustomerReturns);
					else
						setMovementType(MOVEMENTTYPE_CustomerShipment);
				}
				else if (DocBaseType.equals(MDocBaseType.DOCBASETYPE_MaterialReceipt))	//	Receipts
				{
					if(IsReturnTrx)
						setMovementType(MOVEMENTTYPE_VendorReturns);
					else
						setMovementType(MOVEMENTTYPE_VendorReceipts);
				}
				setIsReturnTrx(IsReturnTrx);

				//	DocumentNo
				if (rs.getString(2).equals(""Y""))			//	IsDocNoControlled
				{
					if (!newDocNo && (AD_Sequence_ID != rs.getInt(6)))
						newDocNo = true;
					if (newDocNo)
						if (Ini.isPropertyBool(Ini.P_COMPIERESYS)
								&& (Env.getCtx().getAD_Client_ID() < 1000000))
							setDocumentNo(""<"" + rs.getString(5) + "">"");
						else
							setDocumentNo(""<"" + rs.getString(3) + "">"");
				}

			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
			}	//	setC_DocType_ID
"
org.compiere.model.MInOut.setBPartner,MInOut.java,"void setBPartner (MBPartner bp)
	{
		if (bp == null)
			return;

		setC_BPartner_ID(bp.getC_BPartner_ID());

		//	Set Locations
		MBPartnerLocation[] locs = bp.getLocations(false);
		if (locs != null)
		{
			for (MBPartnerLocation element : locs) {
				if (element.isShipTo())
					setC_BPartner_Location_ID(element.getC_BPartner_Location_ID());
			}
			//	set to first if not set
			if ((getC_BPartner_Location_ID() == 0) && (locs.length > 0))
				setC_BPartner_Location_ID(locs[0].getC_BPartner_Location_ID());
		}
		if (getC_BPartner_Location_ID() == 0)
			log.log(Level.SEVERE, ""Has no To Address: "" + bp);

		//	Set Contact
		MUser[] contacts = bp.getContacts(false);
		if ((contacts != null) && (contacts.length > 0))	//	get first User
			setAD_User_ID(contacts[0].getAD_User_ID());
		//
		setC_Project_ID(0);
	}	//	setBPartner
"
org.compiere.model.MInOut.setC_BPartner_ID,MInOut.java,"void setC_BPartner_ID (String oldC_BPartner_ID,
			String newC_BPartner_ID, int windowNo) throws Exception
			{
		if ((newC_BPartner_ID == null) || (newC_BPartner_ID.length() == 0))
			return;
		int C_BPartner_ID = Integer.parseInt(newC_BPartner_ID);
		if (C_BPartner_ID == 0)
			return;

		//
		String sql = ""SELECT p.AD_Language, p.POReference,""
			+ ""SO_CreditLimit, p.SO_CreditLimit-p.SO_CreditUsed AS CreditAvailable,""
			+ ""l.C_BPartner_Location_ID, c.AD_User_ID ""
			+ ""FROM C_BPartner p""
			+ "" LEFT OUTER JOIN C_BPartner_Location l ON (p.C_BPartner_ID=l.C_BPartner_ID)""
			+ "" LEFT OUTER JOIN AD_User c ON (p.C_BPartner_ID=c.C_BPartner_ID) ""
			+ ""WHERE p.C_BPartner_ID=?"";		//	1
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_BPartner_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				setC_BPartner_ID(C_BPartner_ID);
				//	Location
				int ii = rs.getInt(""C_BPartner_Location_ID"");
				if (ii != 0)
					setC_BPartner_Location_ID(ii);
				//	Contact
				ii = rs.getInt(""AD_User_ID"");
				setAD_User_ID(ii);

				//	CreditAvailable
				if (isSOTrx() && !isReturnTrx())
				{
					BigDecimal CreditLimit = rs.getBigDecimal(""SO_CreditLimit"");
					if ((CreditLimit != null) && (CreditLimit.signum() != 0))
					{
						BigDecimal CreditAvailable = rs.getBigDecimal(""CreditAvailable"");
						if ((p_changeVO != null)
								&& (CreditAvailable != null) && (CreditAvailable.signum() < 0))
						{
							String msg = Msg.getMsg(getCtx(), ""CreditLimitOver"",
									DisplayType.getNumberFormat(DisplayTypeConstants.Amount).format(CreditAvailable));
							p_changeVO.addError(msg);
						}
					}
				}
				setC_Project_ID(0);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
			}	//	setC_BPartner_ID
"
org.compiere.model.MInOut.setMovementDate,MInOut.java,"void setMovementDate (String oldMovementDate,
			String newMovementDate, int windowNo) throws Exception
			{
		if ((newMovementDate == null) || (newMovementDate.length() == 0))
			return;
		Timestamp movementDate = PO.convertToTimestamp(newMovementDate);
		if (movementDate == null)
			return;
		setMovementDate(movementDate);
		setDateAcct(movementDate);
			}	//	setMovementDate
"
org.compiere.model.MInOut.setM_Warehouse_ID,MInOut.java,"void setM_Warehouse_ID (int M_Warehouse_ID)
	{
		if (M_Warehouse_ID == 0)
		{
			log.severe(""Ignored - Cannot set AD_Warehouse_ID to 0"");
			return;
		}
		super.setM_Warehouse_ID (M_Warehouse_ID);
		//
		MWarehouse wh = MWarehouse.get(getCtx(), getM_Warehouse_ID());
		if (wh.getAD_Org_ID() != getAD_Org_ID())
		{
			log.warning(""M_Warehouse_ID="" + M_Warehouse_ID
					+ "", Overwritten AD_Org_ID="" + getAD_Org_ID() + ""->"" + wh.getAD_Org_ID());
			setAD_Org_ID(wh.getAD_Org_ID());
		}
	}	//	setM_Warehouse_ID
"
org.compiere.model.MInOut.setM_Warehouse_ID,MInOut.java,"void setM_Warehouse_ID (String oldM_Warehouse_ID,
			String newM_Warehouse_ID, int windowNo) throws Exception
			{
		if ((newM_Warehouse_ID == null) || (newM_Warehouse_ID.length() == 0))
			return;
		int M_Warehouse_ID = Integer.parseInt(newM_Warehouse_ID);
		if (M_Warehouse_ID == 0)
			return;
		//
		String sql = ""SELECT w.AD_Org_ID, l.M_Locator_ID, w.IsDisallowNegativeInv, ""
			+ ""w.IsWMSEnabled, w.M_RCVLocator_ID ""
			+ ""FROM M_Warehouse w""
			+ "" LEFT OUTER JOIN M_Locator l ON (l.M_Warehouse_ID=w.M_Warehouse_ID AND l.IsDefault='Y') ""
			+ ""WHERE w.M_Warehouse_ID=?"";		//	1

		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, M_Warehouse_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				setM_Warehouse_ID(M_Warehouse_ID);
				//	Org
				int AD_Org_ID = rs.getInt(1);
				setAD_Org_ID(AD_Org_ID);

				// Locator
				Boolean isWMSEnabled = rs.getString(4).equals(""Y"");
				int M_Locator_ID = 0;
				if (isWMSEnabled)
					M_Locator_ID = rs.getInt(5);

				if(M_Locator_ID == 0 )
					M_Locator_ID = rs.getInt(2);

				if (M_Locator_ID == 0)
					p_changeVO.setContext(getCtx(), windowNo, ""M_Locator_ID"", (String)null);
				else
				{
					log.config(""M_Locator_ID="" + M_Locator_ID);
					p_changeVO.setContext(getCtx(), windowNo, ""M_Locator_ID"", M_Locator_ID);
				}

				Boolean disallowNegInv = rs.getString(3).equals(""Y"");
				String DeliveryRule = getDeliveryRule();
				if((disallowNegInv && DeliveryRule.equals(X_C_Order.DELIVERYRULE_Force)) ||
						((DeliveryRule == null) || (DeliveryRule.length()==0)))
					setDeliveryRule(DELIVERYRULE_Availability);
				/** Need to set Delivery Rule to itself, because otherwise it gets nullified in webUI.
				 * Since Delivery Rule is dependent on the warehouse (Force is not allowed if Neg Inventory
				 * is disallowed, it gets reset when the warehouse is changed.
				 */
				else
					setDeliveryRule(DeliveryRule);

			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		setDeliveryRule(""A"");
			}	//	setM_Warehouse_ID
"
org.compiere.model.MInOut.createConfirmation,MInOut.java,"void createConfirmation()
	{
		MDocType dt = MDocType.get(getCtx(), getC_DocType_ID());
		boolean pick = dt.isPickQAConfirm();
		boolean ship = dt.isShipConfirm();
		//	Nothing to do
		if (!pick && !ship)
		{
			log.fine(""No need"");
			return;
		}

		//	Create Both .. after each other
		if (pick && ship)
		{
			boolean havePick = false;
			boolean haveShip = false;
			MInOutConfirm[] confirmations = getConfirmations(false);
			for (MInOutConfirm confirm : confirmations) {
				if (X_M_InOutConfirm.CONFIRMTYPE_PickQAConfirm.equals(confirm.getConfirmType()))
				{
					if (!confirm.isProcessed())		//	wait until done
					{
						MInOutConfirm.create (this, X_M_InOutConfirm.CONFIRMTYPE_PickQAConfirm, true); //Create confirmation lines for missing shipment lines.
						log.fine(""Unprocessed: "" + confirm);
						return;
					}
					havePick = true;
				}
				else if (X_M_InOutConfirm.CONFIRMTYPE_ShipReceiptConfirm.equals(confirm.getConfirmType()))
					haveShip = true;
			}
			//	Create Pick
			if (!havePick)
			{
				MInOutConfirm.create (this, X_M_InOutConfirm.CONFIRMTYPE_PickQAConfirm, false);
				return;
			}
			//	Create Ship
			if (!haveShip)
			{
				MInOutConfirm.create (this, X_M_InOutConfirm.CONFIRMTYPE_ShipReceiptConfirm, false);
				return;
			}
			return;
		}
		//	Create just one
		if (pick)
			MInOutConfirm.create (this, X_M_InOutConfirm.CONFIRMTYPE_PickQAConfirm, true);
		else if (ship)
			MInOutConfirm.create (this, X_M_InOutConfirm.CONFIRMTYPE_ShipReceiptConfirm, true);
	}	//	createConfirmation
"
org.compiere.model.MInOut.beforeSave,MInOut.java,"boolean beforeSave (boolean newRecord)
	{
		//	Warehouse Org
		if (newRecord)
		{
			MWarehouse wh = MWarehouse.get(getCtx(), getM_Warehouse_ID());
			if (wh.getAD_Org_ID() != getAD_Org_ID())
			{
				log.saveError(""WarehouseOrgConflict"", """");
				return false;
			}
		}
		//	Shipment - Needs Order
		if (isSOTrx() && (getC_Order_ID() == 0))
		{
			log.saveError(""FillMandatory"", Msg.translate(getCtx(), ""C_Order_ID""));
			return false;
		}
		if (newRecord || is_ValueChanged(""C_BPartner_ID""))
		{
			MBPartner bp = MBPartner.get(getCtx(), getC_BPartner_ID());
			if (!bp.isActive())
			{
				log.saveError(""NotActive"", Msg.getMsg(getCtx(), ""C_BPartner_ID""));
				return false;
			}
		}


		return true;
	}	//	beforeSave
"
org.compiere.model.MInOut.afterSave,MInOut.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!success || newRecord)
			return success;

		if (is_ValueChanged(""AD_Org_ID""))
		{
			String sql = ""UPDATE M_InOutLine ol""
				+ "" SET AD_Org_ID =""
				+ ""(SELECT AD_Org_ID""
				+ "" FROM M_InOut o WHERE ol.M_InOut_ID=o.M_InOut_ID) ""
				+ ""WHERE M_InOut_ID="" + getC_Order_ID();
			int no = DB.executeUpdate(sql, get_Trx());
			log.fine(""Lines -> #"" + no);
		}
		return true;
	}	//	afterSave
"
org.compiere.model.MInOut.processIt,MInOut.java,"boolean processIt (String processAction)
	{
		m_processMsg = null;
		DocumentEngine engine = new DocumentEngine (this, getDocStatus());
		return engine.processIt (processAction, getDocAction());
	}	//	process
"
org.compiere.model.MInOut.unlockIt,MInOut.java,"boolean unlockIt()
	{
		log.info(toString());
		setProcessing(false);
		return true;
	}	//	unlockIt
"
org.compiere.model.MInOut.invalidateIt,MInOut.java,"boolean invalidateIt()
	{
		log.info(toString());
		setDocAction(DOCACTION_Prepare);
		return true;
	}	//	invalidateIt
"
org.compiere.model.MInOut.prepareIt,MInOut.java,"String prepareIt()
	{
		log.info(toString());
		m_processMsg = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_BEFORE_PREPARE);
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;

		MDocType dt = MDocType.get(getCtx(), getC_DocType_ID());
		setIsReturnTrx(dt.isReturnTrx());
		setIsSOTrx(dt.isSOTrx());

		//	Lines
		MInOutLine[] lines = getLines(true);
		if ((lines == null) || (lines.length == 0))
		{
			m_processMsg = ""@NoLines@"";
			return DocActionConstants.STATUS_Invalid;
		}
		//	Std Period open?
		m_processMsg = MPeriod.isOpen(this, lines, getDateAcct(), dt.getDocBaseType());
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;

		//	Credit Check
		if (isSOTrx() && !isReversal() && !isReturnTrx())
		{
			MBPartner bp = new MBPartner (getCtx(), getC_BPartner_ID(), null);

			if(!X_C_BPartner.SOCREDITSTATUS_NoCreditCheck.equals(bp.getSOCreditStatus()))
			{
				if (X_C_BPartner.SOCREDITSTATUS_CreditStop.equals(bp.getSOCreditStatus()))
				{
					m_processMsg = ""@BPartnerCreditStop@ - @TotalOpenBalance@=""
						+ bp.getTotalOpenBalance()
						+ "", @SO_CreditLimit@="" + bp.getSO_CreditLimit();
					return DocActionConstants.STATUS_Invalid;
				}
				if (X_C_BPartner.SOCREDITSTATUS_CreditHold.equals(bp.getSOCreditStatus()))
				{
					m_processMsg = ""@BPartnerCreditHold@ - @TotalOpenBalance@=""
						+ bp.getTotalOpenBalance()
						+ "", @SO_CreditLimit@="" + bp.getSO_CreditLimit();
					return DocActionConstants.STATUS_Invalid;
				}

				BigDecimal notInvoicedAmt = MBPartner.getNotInvoicedAmt(getC_BPartner_ID());
				if (X_C_BPartner.SOCREDITSTATUS_CreditHold.equals(bp.getSOCreditStatus(notInvoicedAmt)))
				{
					m_processMsg = ""@BPartnerOverSCreditHold@ - @TotalOpenBalance@=""
						+ bp.getTotalOpenBalance() + "", @NotInvoicedAmt@="" + notInvoicedAmt
						+ "", @SO_CreditLimit@="" + bp.getSO_CreditLimit();
					return DocActionConstants.STATUS_Invalid;
				}
			}
		}

		BigDecimal Volume = Env.ZERO;
		BigDecimal Weight = Env.ZERO;

		//	Mandatory Attributes
		for (MInOutLine line : lines) {
			MProduct product = line.getProduct();
			if (product != null)
			{
				Volume = Volume.add(product.getVolume().multiply(line.getMovementQty()));
				Weight = Weight.add(product.getWeight().multiply(line.getMovementQty()));
			}
			//
			if (line.getM_AttributeSetInstance_ID() != 0){
				// validate the mandatory attributes in the attribute set
				MAttributeSetInstance masi = MAttributeSetInstance.get(getCtx(),
						line.getM_AttributeSetInstance_ID(), line.getM_Product_ID());

				int M_AttributeSet_ID = product.getM_AttributeSet_ID();
				if (M_AttributeSet_ID != 0)
				{
					MAttributeSet mas = MAttributeSet.get(getCtx(), M_AttributeSet_ID);

					if(mas.isGuaranteeDateMandatory() && (masi.getGuaranteeDate() == null)){
						// the current attribute set is invalid, so clear it out
						m_processMsg = ""@M_AttributeSet_ID@ - @GuaranteeDate@ @IsMandatory@"";
						return DocActionConstants.STATUS_Invalid;
					}

					if(mas.isSerNoMandatory() && ((masi.getSerNo() == null) || masi.getSerNo().equals(""""))){
						m_processMsg = ""@M_AttributeSet_ID@ - @SerNo@ @IsMandatory@"";
						return DocActionConstants.STATUS_Invalid;
					}

					if(mas.isLotMandatory() && (masi.getM_Lot_ID() == 0)){
						m_processMsg = ""@M_AttributeSet_ID@ - @M_Lot_ID@ @IsMandatory@"";
						return DocActionConstants.STATUS_Invalid;
					}

				}
				continue;
			}
			if (product != null)
			{
				int M_AttributeSet_ID = product.getM_AttributeSet_ID();
				if (M_AttributeSet_ID != 0)
				{
					MAttributeSet mas = MAttributeSet.get(getCtx(), M_AttributeSet_ID);
					if ((mas != null)
							&& ((isSOTrx() && mas.isMandatory())
									|| (!isSOTrx() && mas.isMandatoryAlways())) )
					{
						m_processMsg = ""@M_AttributeSet_ID@ @IsMandatory@"";
						return DocActionConstants.STATUS_Invalid;
					}
				}
			}
		}
		setVolume(Volume);
		setWeight(Weight);

		if (!isReversal())	//	don't change reversal
		{
			/* nnayak - Bug 1750251 : check material policy and update storage
			   at the line level in completeIt()*/
			// checkMaterialPolicy();	//	set MASI
			createConfirmation();
		}

		m_justPrepared = true;
		if (!DOCACTION_Complete.equals(getDocAction()))
			setDocAction(DOCACTION_Complete);
		return DocActionConstants.STATUS_InProgress;
	}	//	prepareIt
"
org.compiere.model.MInOut.approveIt,MInOut.java,"boolean  approveIt()
	{
		log.info(toString());
		setIsApproved(true);
		return true;
	}	//	approveIt
"
org.compiere.model.MInOut.rejectIt,MInOut.java,"boolean rejectIt()
	{
		log.info(toString());
		setIsApproved(false);
		return true;
	}	//	rejectIt
"
org.compiere.model.MInOut.completeIt,MInOut.java,"String completeIt()
	{
		//	Re-Check
		if (!m_justPrepared)
		{
			String status = prepareIt();
			if (!DocActionConstants.STATUS_InProgress.equals(status))
				return status;
		}

		//	Outstanding (not processed) Incoming Confirmations ?

		MInOutConfirm[] confirmations = getConfirmations(true);
		for (MInOutConfirm confirm : confirmations)
		{
			if (!confirm.isProcessed())
			{
				if (X_M_InOutConfirm.CONFIRMTYPE_CustomerConfirmation.equals(confirm.getConfirmType()))
					continue;
				//
				m_processMsg = ""Open @M_InOutConfirm_ID@: "" +
				confirm.getConfirmTypeName() + "" - "" + confirm.getDocumentNo();
				return DocActionConstants.STATUS_InProgress;
			}
		}


		//	Implicit Approval
		if (!isApproved())
			approveIt();
		log.info(toString());
		StringBuffer info = new StringBuffer();

		//	For all lines
		MInOutLine[] lines = getLines(m_justPrepared);
		for (MInOutLine sLine : lines)
		{
			MProduct product = sLine.getProduct();

			//	Qty & Type
			String MovementType = getMovementType();
			BigDecimal Qty = sLine.getMovementQty();
			if (MovementType.charAt(1) == '-')	//	C- Customer Shipment - V- Vendor Return
				Qty = Qty.negate();
			BigDecimal QtySO = Env.ZERO;
			BigDecimal QtyPO = Env.ZERO;

			//	Update Order Line
			MOrderLine oLine = null;
			if (sLine.getC_OrderLine_ID() != 0)
			{
				oLine = new MOrderLine (getCtx(), sLine.getC_OrderLine_ID(), get_Trx());
				log.fine(""OrderLine - Reserved="" + oLine.getQtyReserved()
						+ "", Delivered="" + oLine.getQtyDelivered());

				// nnayak - Qty reserved and Qty updated not affected by returns
				if(!isReturnTrx())
				{
					if (isSOTrx())
						QtySO = sLine.getMovementQty().negate();
					else
						QtyPO = sLine.getMovementQty().negate();
				}
			}

			log.info(""Line="" + sLine.getLine() + "" - Qty="" + sLine.getMovementQty() + ""Return "" + isReturnTrx() );

			/* reverse allocations if neccessary */
			if(sLine.isAllocated())
				reverseAllocation(sLine);

			/* nnayak - Bug 1750251 : If you have multiple lines for the same product
			in the same Sales Order, or if the generate shipment process was generating
			multiple shipments for the same product in the same run, the first layer
			was getting consumed by all the shipments. As a result, the first layer had
			negative Inventory even though there were other positive layers. */
			checkMaterialPolicy(sLine);

			//	Stock Movement - Counterpart MOrder.reserveStock
			if ((product != null)
					&& product.isStocked() )
			{
				log.fine(""Material Transaction"");
				MTransaction mtrx = null;
				//	Reservation ASI - assume none
				int reservationAttributeSetInstance_ID = 0; // sLine.getM_AttributeSetInstance_ID();
				if (oLine != null)
					reservationAttributeSetInstance_ID = oLine.getM_AttributeSetInstance_ID();
				//
				if (sLine.getM_AttributeSetInstance_ID() == 0)
				{
					MInOutLineMA mas[] = MInOutLineMA.get(getCtx(),
							sLine.getM_InOutLine_ID(), get_Trx());
					for (MInOutLineMA ma : mas) {
						BigDecimal QtyMA = ma.getMovementQty();
						if (MovementType.charAt(1) == '-')	//	C- Customer Shipment - V- Vendor Return
							QtyMA = QtyMA.negate();
						BigDecimal QtySOMA = Env.ZERO;
						BigDecimal QtyPOMA = Env.ZERO;

						// nnayak - Don't update qty reserved or qty ordered for Returns
						if ((sLine.getC_OrderLine_ID() != 0) && !isReturnTrx())
						{
							if (isSOTrx() )
								QtySOMA = ma.getMovementQty().negate();
							else
								QtyPOMA = ma.getMovementQty().negate();
						}

						log.fine(""QtyMA : ""+QtyMA+"" QtySOMA ""+QtySOMA + "" QtyPOMA ""+ QtyPOMA);
						//	Update Storage - see also VMatch.createMatchRecord
						if (!MStorage.add(getCtx(), getM_Warehouse_ID(),
								sLine.getM_Locator_ID(),	
								sLine.getM_Product_ID(),
								ma.getM_AttributeSetInstance_ID(), reservationAttributeSetInstance_ID,
								QtyMA, Env.ZERO/*QtySOMA*/, Env.ZERO/*QtyPOMA*/, get_Trx()))
						{
							ValueNamePair pp = CLogger.retrieveError();
							if (pp != null)
								m_processMsg = pp.getName();
							else
								m_processMsg = ""Cannot correct Inventory (MA)"";
							return DocActionConstants.STATUS_Invalid;
						}

						if((oLine != null) && !isReturnTrx()){
							//	Now correct the reserved/ordered quantity using logic identical to MOrder.reserveStock
							int M_Locator_ID = 0;
							//	Get Locator to reserve
							if (oLine.getM_AttributeSetInstance_ID() != 0)	//	Get existing Location
								M_Locator_ID = MStorage.getM_Locator_ID (oLine.getM_Warehouse_ID(),
										oLine.getM_Product_ID(), oLine.getM_AttributeSetInstance_ID(),
										oLine.getQtyOrdered(), get_Trx());
							//	Get default Location
							if (M_Locator_ID == 0)
							{
								MWarehouse wh = MWarehouse.get(getCtx(), oLine.getM_Warehouse_ID());
								M_Locator_ID = wh.getDefaultM_Locator_ID();
							}
							//	Update Storage
							if (!MStorage.add(getCtx(), oLine.getM_Warehouse_ID(), M_Locator_ID,
									oLine.getM_Product_ID(),
									oLine.getM_AttributeSetInstance_ID(), oLine.getM_AttributeSetInstance_ID(),
									Env.ZERO, QtySOMA, QtyPOMA, get_Trx())){
								ValueNamePair pp = CLogger.retrieveError();
								if(pp != null)
									m_processMsg = pp.getName();
								else
									m_processMsg = ""Cannot reverse reservation (MA)"";
								return DocActionConstants.STATUS_Invalid;
							}
						}

						//	Create Transaction
						mtrx = new MTransaction (getCtx(), sLine.getAD_Org_ID(),
								MovementType, sLine.getM_Locator_ID(),
								sLine.getM_Product_ID(), ma.getM_AttributeSetInstance_ID(),
								QtyMA, getMovementDate(), get_Trx());
						mtrx.setM_InOutLine_ID(sLine.getM_InOutLine_ID());
						if (!mtrx.save())
						{
							m_processMsg = ""Could not create Material Transaction (MA)"";
							return DocActionConstants.STATUS_Invalid;
						}
					}
				}
				//	sLine.getM_AttributeSetInstance_ID() != 0
				if (mtrx == null)
				{
					//	Fallback: Update Storage - see also VMatch.createMatchRecord
					if (!MStorage.add(getCtx(), getM_Warehouse_ID(),
							sLine.getM_Locator_ID(),	
							sLine.getM_Product_ID(),
							sLine.getM_AttributeSetInstance_ID(), reservationAttributeSetInstance_ID,
							Qty, Env.ZERO/*QtySO*/, Env.ZERO/*QtyPO*/, get_Trx()))
					{
						ValueNamePair pp = CLogger.retrieveError();
						if (pp != null)
							m_processMsg = pp.getName();
						else
							m_processMsg = ""Cannot correct Inventory"";
						return DocActionConstants.STATUS_Invalid;
					}

					if((sLine.getC_OrderLine_ID() != 0) && !isReturnTrx()){
						//	Now correct the reserved/ordered quantity using logic identical to MOrder.reserveStock
						int M_Locator_ID = 0;
						//	Get Locator to reserve
						if (oLine.getM_AttributeSetInstance_ID() != 0)	//	Get existing Location
							M_Locator_ID = MStorage.getM_Locator_ID (oLine.getM_Warehouse_ID(),
									oLine.getM_Product_ID(), oLine.getM_AttributeSetInstance_ID(),
									oLine.getQtyOrdered(), get_Trx());
						//	Get default Location
						if (M_Locator_ID == 0)
						{
							MWarehouse wh = MWarehouse.get(getCtx(), oLine.getM_Warehouse_ID());
							M_Locator_ID = wh.getDefaultM_Locator_ID();
						}
						//	Update Storage
						if (!MStorage.add(getCtx(), oLine.getM_Warehouse_ID(), M_Locator_ID,
								oLine.getM_Product_ID(),
								oLine.getM_AttributeSetInstance_ID(), oLine.getM_AttributeSetInstance_ID(),
								Env.ZERO, QtySO, QtyPO, get_Trx())){
							ValueNamePair pp = CLogger.retrieveError();
							if(pp != null)
								m_processMsg = pp.getName();
							else
								m_processMsg = ""Cannot reverse reservation"";
							return DocActionConstants.STATUS_Invalid;
						}
					}

					//	FallBack: Create Transaction
					mtrx = new MTransaction (getCtx(), sLine.getAD_Org_ID(),
							MovementType, sLine.getM_Locator_ID(),
							sLine.getM_Product_ID(), sLine.getM_AttributeSetInstance_ID(),
							Qty, getMovementDate(), get_Trx());
					mtrx.setM_InOutLine_ID(sLine.getM_InOutLine_ID());
					if (!mtrx.save())
					{
						m_processMsg = ""Could not create Material Transaction"";
						return DocActionConstants.STATUS_Invalid;
					}
				}
			}	//	stock movement

			//	Correct Order Line
			if ((product != null) && (oLine != null) && !isReturnTrx())		//	other in VMatch.createMatchRecord
			{
				if(isSOTrx())
					oLine.setQtyReserved(oLine.getQtyReserved().add(Qty));
				else
					oLine.setQtyReserved(oLine.getQtyReserved().subtract(Qty));
			}

			//	Update Sales Order Line
			if (oLine != null)
			{
				if(!isReturnTrx())
				{
					if (isSOTrx()							//	PO is done by Matching
							|| (sLine.getM_Product_ID() == 0))	//	PO Charges, empty lines
					{
						if (isSOTrx())
							oLine.setQtyDelivered(oLine.getQtyDelivered().subtract(Qty));
						else
							oLine.setQtyDelivered(oLine.getQtyDelivered().add(Qty));
						oLine.setDateDelivered(getMovementDate());	//	overwrite=last
					}
				}
				else // Returns
				{
					MOrderLine origOrderLine = new MOrderLine (getCtx(), oLine.getOrig_OrderLine_ID(), get_Trx());
					if (isSOTrx()							//	PO is done by Matching
							|| (sLine.getM_Product_ID() == 0))	//	PO Charges, empty lines
					{
						if (isSOTrx())
						{
							oLine.setQtyDelivered(oLine.getQtyDelivered().add(Qty));
							oLine.setQtyReturned(oLine.getQtyReturned().add(Qty));
							origOrderLine.setQtyReturned(origOrderLine.getQtyReturned().add(Qty));
						}
						else
						{
							oLine.setQtyDelivered(oLine.getQtyDelivered().subtract(Qty));
							oLine.setQtyReturned(oLine.getQtyReturned().subtract(Qty));
							origOrderLine.setQtyReturned(origOrderLine.getQtyReturned().subtract(Qty));
						}
					}

					oLine.setDateDelivered(getMovementDate());	//	overwrite=last

					if (!origOrderLine.save())
					{
						m_processMsg = ""Could not update Original Order Line"";
						return DocActionConstants.STATUS_Invalid;
					}
					log.fine(""QtyRet "" + origOrderLine.getQtyReturned().toString() + "" Qty : ""+Qty.toString());

				}
				if (!oLine.save())
				{
					m_processMsg = ""Could not update Order Line"";
					return DocActionConstants.STATUS_Invalid;
				}
				else
					log.fine(""OrderLine -> Reserved="" + oLine.getQtyReserved().toString()
							+ "", Delivered="" + oLine.getQtyDelivered().toString()
							+ "", Returned="" + oLine.getQtyReturned().toString());
			}

			//	Create Asset for SO
			if ((product != null)
					&& isSOTrx()
					&& product.isCreateAsset()
					&& (sLine.getMovementQty().signum() > 0)
					&& !isReversal()
					&& !isReturnTrx())
			{
				log.fine(""Asset"");
				info.append(""@A_Asset_ID@: "");
				int noAssets = sLine.getMovementQty().intValue();
				MAsset firstAsset = null;
				if (!product.isOneAssetPerUOM())
					noAssets = 1;
				for (int i = 0; i < noAssets; i++)
				{
					if (i > 0)
						info.append("" - "");
					int deliveryCount = i+1;
					if (!product.isOneAssetPerUOM())
						deliveryCount = 0;
					MAsset asset = new MAsset (this, sLine, deliveryCount);
					if (!asset.save(get_Trx()))
					{
						m_processMsg = ""Could not create Asset"";
						return DocActionConstants.STATUS_Invalid;
					}
					if (firstAsset == null)
						firstAsset = asset;
					info.append(asset.getValue());
				}
				//	Auto Provisioning
				String licenseInfo = product.getLicenseInfo();
				if ((licenseInfo != null) && (licenseInfo.indexOf(""AutoProvision"") != -1))
				{
					MBPartner bp = getBPartner();
					String ss = """";
					try
					{
						ss = MSetup.createNewClient(bp, null);
						info.append("", AutoProvision OK"");
					}
					catch (Exception e)
					{
						ss = e.getMessage();
						log.warning(ss);
						info.append("", AutoProvision Error"");
					}
					sLine.setDescription(ss);
					sLine.save();
					oLine.setDescription(ss);
					oLine.save();
					if (firstAsset != null)
					{
						firstAsset.setHelp(ss);
						firstAsset.save();
					}
				}
			}	//	Asset


			//	Matching
			if (!isSOTrx()
					&& (sLine.getM_Product_ID() != 0)
					&& !isReversal())
			{
				BigDecimal matchQty = sLine.getMovementQty();
				//	Invoice - Receipt Match (requires Product)
				MInvoiceLine iLine = MInvoiceLine.getOfInOutLine (sLine);

				if ((iLine != null) && (iLine.getM_Product_ID() != 0))
				{
					if (matchQty.compareTo(iLine.getQtyInvoiced())>0)
						matchQty = iLine.getQtyInvoiced();

					MMatchInv[] matches = MMatchInv.get(getCtx(),
							sLine.getM_InOutLine_ID(), iLine.getC_InvoiceLine_ID(), get_Trx());
					if ((matches == null) || (matches.length == 0))
					{
						MMatchInv inv = new MMatchInv (iLine, getMovementDate(), matchQty);
						if (sLine.getM_AttributeSetInstance_ID() != iLine.getM_AttributeSetInstance_ID())
						{
							iLine.setM_AttributeSetInstance_ID(sLine.getM_AttributeSetInstance_ID());
							iLine.save();	//	update matched invoice with ASI
							inv.setM_AttributeSetInstance_ID(sLine.getM_AttributeSetInstance_ID());
						}
						if (!inv.save(get_Trx()))
						{
							m_processMsg = ""Could not create Inv Matching"";
							return DocActionConstants.STATUS_Invalid;
						}
					}
				}

				//	Link to Order
				if (sLine.getC_OrderLine_ID() != 0)
				{
					log.fine(""PO Matching"");
					matchQty = sLine.getMovementQty();
					//	Ship - PO
					MMatchPO po = MMatchPO.create (null, sLine, getMovementDate(), matchQty);
					if (!po.save(get_Trx()))
					{
						m_processMsg = ""Could not create PO Matching"";
						return DocActionConstants.STATUS_Invalid;
					}
					//	Update PO with ASI if complete shipment
					if ((oLine != null) && (oLine.getM_AttributeSetInstance_ID() == 0)
							&& (oLine.getQtyOrdered().compareTo(matchQty) == 0))
					{
						oLine.setM_AttributeSetInstance_ID(sLine.getM_AttributeSetInstance_ID());
						oLine.save(get_Trx());
					}
				}
				else	//	No Order - Try finding links via Invoice
				{
					//	Invoice has an Order Link
					if ((iLine != null) && (iLine.getC_OrderLine_ID() != 0))
					{
						//	Invoice is created before  Shipment
						log.fine(""PO(Inv) Matching"");
						//	Ship - Invoice
						MMatchPO po = MMatchPO.create (iLine, sLine,
								getMovementDate(), matchQty);
						if (!po.save(get_Trx()))
						{
							m_processMsg = ""Could not create PO(Inv) Matching"";
							return DocActionConstants.STATUS_Invalid;
						}
						//	Update PO with ASI
						oLine = new MOrderLine (getCtx(), po.getC_OrderLine_ID(), get_Trx());
						if ((oLine != null) && (oLine.getM_AttributeSetInstance_ID() == 0))
						{
							oLine.setM_AttributeSetInstance_ID(sLine.getM_AttributeSetInstance_ID());
							oLine.save(get_Trx());
						}
					}
				}	//	No Order
			}	//	PO Matching

		}	//	for all lines

		//	Counter Documents
		MInOut counter = createCounterDoc();
		if (counter != null)
			info.append("" - @CounterDoc@: @M_InOut_ID@="").append(counter.getDocumentNo());
		//	User Validation
		String valid = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_AFTER_COMPLETE);
		if (valid != null)
		{
			m_processMsg = valid;
			return DocActionConstants.STATUS_Invalid;
		}

		m_processMsg = info.toString();
		setProcessed(true);
		setDocAction(DOCACTION_Close);
		return DocActionConstants.STATUS_Completed;
	}	//	completeIt
"
org.compiere.model.MInOut.checkMaterialPolicy,MInOut.java,"void checkMaterialPolicy(MInOutLine line)
	{

		int no = MInOutLineMA.deleteInOutLineMA(line.getM_InOutLine_ID(), get_Trx());
		if (no > 0)
			log.config(""Delete old #"" + no);

		//	Incoming Trx
		String MovementType = getMovementType();
		boolean inTrx = MovementType.charAt(1) == '+';	//	V+ Vendor Receipt, C+ Customer Return
		MClient client = MClient.get(getCtx());

		boolean needSave = false;
		MProduct product = line.getProduct();

		//	Need to have Location
		if ((product != null)
				&& (line.getM_Locator_ID() == 0))
		{
			line.setM_Warehouse_ID(getM_Warehouse_ID());
			line.setM_Locator_ID(inTrx ? Env.ZERO : line.getMovementQty());	//	default Locator
			needSave = true;
		}

		//	Attribute Set Instance
		if ((product != null)
				&& (line.getM_AttributeSetInstance_ID() == 0))
		{
			if (inTrx)
			{
				MAttributeSetInstance asi = new MAttributeSetInstance(getCtx(), 0, get_Trx());
				asi.setClientOrg(getAD_Client_ID(), 0);
				asi.setM_AttributeSet_ID(product.getM_AttributeSet_ID());
				if (asi.save())
				{
					line.setM_AttributeSetInstance_ID(asi.getM_AttributeSetInstance_ID());
					log.config(""New ASI="" + line);
					needSave = true;
				}
			}
			else	//	Outgoing Trx
			{
				MProductCategory pc = MProductCategory.get(getCtx(), product.getM_Product_Category_ID());
				String MMPolicy = pc.getMMPolicy();
				if ((MMPolicy == null) || (MMPolicy.length() == 0))
					MMPolicy = client.getMMPolicy();
				//
				MStorage[] storages = MStorage.getAllWithASI(getCtx(),
						line.getM_Product_ID(),	line.getM_Locator_ID(),
						X_AD_Client.MMPOLICY_FiFo.equals(MMPolicy), get_Trx());
				BigDecimal qtyToDeliver = line.getMovementQty();
				for (int ii = 0; ii < storages.length; ii++)
				{
					MStorage storage = storages[ii];
					BigDecimal qtyAvailable = storage.getQtyOnHand().subtract(
							storage.getQtyDedicated()).subtract(
									storage.getQtyAllocated());
					if(qtyAvailable.compareTo(Env.ZERO) <= 0)
						continue;

					if (ii == 0)
					{
						if (qtyAvailable.compareTo(qtyToDeliver) >= 0)
						{
							line.setM_AttributeSetInstance_ID(storage.getM_AttributeSetInstance_ID());
							needSave = true;
							log.config(""Direct - "" + line);
							qtyToDeliver = Env.ZERO;
						}
						else
						{
							log.config(""Split - "" + line);
							MInOutLineMA ma = new MInOutLineMA (line,
									storage.getM_AttributeSetInstance_ID(),
									qtyAvailable);
							if (!ma.save())
								;
							qtyToDeliver = qtyToDeliver.subtract(qtyAvailable);
							log.fine(""#"" + ii + "": "" + ma + "", QtyToDeliver="" + qtyToDeliver);
						}
					}
					else	//	 create addl material allocation
					{
						MInOutLineMA ma = new MInOutLineMA (line,
								storage.getM_AttributeSetInstance_ID(),
								qtyToDeliver);
						if (qtyAvailable.compareTo(qtyToDeliver) >= 0)
							qtyToDeliver = Env.ZERO;
						else
						{
							ma.setMovementQty(qtyAvailable);
							qtyToDeliver = qtyToDeliver.subtract(qtyAvailable);
						}
						if (!ma.save())
							;
						log.fine(""#"" + ii + "": "" + ma + "", QtyToDeliver="" + qtyToDeliver);
					}
					if (qtyToDeliver.signum() == 0)
						break;
				}	//	 for all storages

				//	No AttributeSetInstance found for remainder
				if (qtyToDeliver.signum() != 0)
				{
					MInOutLineMA ma = new MInOutLineMA (line,
							0, qtyToDeliver);
					if (!ma.save())
						;
					log.fine(""##: "" + ma);
				}
			}	//	outgoing Trx
		}	//	attributeSetInstance

		if (needSave && !line.save())
			log.severe(""NOT saved "" + line);
	}	//	checkMaterialPolicy
"
org.compiere.model.MInOut.createCounterDoc,MInOut.java,"MInOut createCounterDoc()
	{
		//	Is this a counter doc ?
		if (getRef_InOut_ID() != 0)
			return null;

		//	Org Must be linked to BPartner
		MOrg org = MOrg.get(getCtx(), getAD_Org_ID());
		//jz int counterC_BPartner_ID = org.getLinkedC_BPartner_ID(get_TrxName());
		int counterC_BPartner_ID = org.getLinkedC_BPartner_ID(get_Trx());
		if (counterC_BPartner_ID == 0)
			return null;
		//	Business Partner needs to be linked to Org
		//jz MBPartner bp = new MBPartner (getCtx(), getC_BPartner_ID(), null);
		MBPartner bp = new MBPartner (getCtx(), getC_BPartner_ID(), get_Trx());
		int counterAD_Org_ID = bp.getAD_OrgBP_ID_Int();
		if (counterAD_Org_ID == 0)
			return null;

		//jz MBPartner counterBP = new MBPartner (getCtx(), counterC_BPartner_ID, null);
		MBPartner counterBP = new MBPartner (getCtx(), counterC_BPartner_ID, get_Trx());
		MOrgInfo counterOrgInfo = MOrgInfo.get(getCtx(), counterAD_Org_ID, null);
		log.info(""Counter BP="" + counterBP.getName());

		//	Document Type
		int C_DocTypeTarget_ID = 0;
		boolean isReturnTrx = false;
		MDocTypeCounter counterDT = MDocTypeCounter.getCounterDocType(getCtx(), getC_DocType_ID());
		if (counterDT != null)
		{
			log.fine(counterDT.toString());
			if (!counterDT.isCreateCounter() || !counterDT.isValid())
				return null;
			C_DocTypeTarget_ID = counterDT.getCounter_C_DocType_ID();
			isReturnTrx = counterDT.getCounterDocType().isReturnTrx();
		}
		else	//	indirect
		{
			C_DocTypeTarget_ID = MDocTypeCounter.getCounterDocType_ID(getCtx(), getC_DocType_ID());
			log.fine(""Indirect C_DocTypeTarget_ID="" + C_DocTypeTarget_ID);
			if (C_DocTypeTarget_ID <= 0)
				return null;
		}

		//	Deep Copy
		MInOut counter = copyFrom(this, getMovementDate(),
				C_DocTypeTarget_ID, !isSOTrx(), isReturnTrx,  true, get_Trx(), true);
		MDocType dt = MDocType.get(getCtx(), C_DocTypeTarget_ID);
		if (!dt.isDocNoControlled())
			counter.setDocumentNo(getDocumentNo());		//	copy if manual
		//
		counter.setAD_Org_ID(counterAD_Org_ID);
		counter.setM_Warehouse_ID(counterOrgInfo.getM_Warehouse_ID());
		//
		counter.setBPartner(counterBP);
		//	Refernces (Should not be required
		counter.setSalesRep_ID(getSalesRep_ID());
		counter.save(get_Trx());

		String MovementType = counter.getMovementType();
		boolean inTrx = MovementType.charAt(1) == '+';	//	V+ Vendor Receipt

		//	Update copied lines
		MInOutLine[] counterLines = counter.getLines(true);
		for (MInOutLine counterLine : counterLines) {
			counterLine.setClientOrg(counter);
			counterLine.setM_Warehouse_ID(counter.getM_Warehouse_ID());
			counterLine.setM_Locator_ID(0);
			counterLine.setM_Locator_ID(inTrx ? Env.ZERO : counterLine.getMovementQty());
			//
			counterLine.save(get_Trx());
		}

		log.fine(counter.toString());

		//	Document Action
		if (counterDT != null)
		{
			if (counterDT.getDocAction() != null)
			{
				counter.setDocAction(counterDT.getDocAction());
				counter.processIt(counterDT.getDocAction());
				counter.setProcessing(false);
				counter.save(get_Trx());
			}
		}
		return counter;
	}	//	createCounterDoc
"
org.compiere.model.MInOut.reverseAllocation,MInOut.java,"String reverseAllocation(MInOutLine line)
	{
		if (!line.isAllocated())
			return """";

		MInOutLineMA[] maLines = MInOutLineMA.get(getCtx(),
				line.getM_InOutLine_ID(), get_Trx());

		if((maLines == null) || (maLines.length == 0))
			return """";

		for (MInOutLineMA ma : maLines) {
			BigDecimal qtyAllocated = ma.getQtyAllocated();

			if (qtyAllocated.compareTo(BigDecimal.ZERO) <= 0)
				continue;

			// Reverse Quantity Allocated for the source locator
			if (!MStorage.add(getCtx(), getM_Warehouse_ID(),
					line.getM_Locator_ID(), line.getM_Product_ID(),
					ma.getM_AttributeSetInstance_ID(), ma.getM_AttributeSetInstance_ID(),
					Env.ZERO, Env.ZERO, Env.ZERO, Env.ZERO,
					Env.ZERO, qtyAllocated.negate(), get_Trx()))
			{
				ValueNamePair pp = CLogger.retrieveError();
				if (pp != null)
					return (""CannotReverseQtyAllocated : "" + pp.getName());
				else
					return (Msg.getMsg(getCtx(), ""CannotReverseQtyAllocated""));
			}

			if(!ma.delete(false))
				return (Msg.getMsg(getCtx(), ""CannotReverseQtyAllocated""));

		}

		MOrderLine orderLine = new MOrderLine(getCtx(), line.getC_OrderLine_ID(), get_Trx());
		orderLine.setQtyAllocated(orderLine.getQtyAllocated().subtract(line.getQtyAllocated()));
		if(!orderLine.save())
			return (Msg.getMsg(getCtx(), ""CannotReverseQtyAllocated""));

		line.setQtyAllocated(Env.ZERO);
		if(!line.save())
			return (Msg.getMsg(getCtx(), ""CannotReverseQtyAllocated""));
		return """";
	} // reverseMALines
"
org.compiere.model.MInOut.voidIt,MInOut.java,"boolean voidIt()
	{
		log.info(toString());

		if (DOCSTATUS_Closed.equals(getDocStatus())
				|| DOCSTATUS_Reversed.equals(getDocStatus())
				|| DOCSTATUS_Voided.equals(getDocStatus()))
		{
			m_processMsg = ""Document Closed: "" + getDocStatus();
			return false;
		}

		//	Not Processed
		if (DOCSTATUS_Drafted.equals(getDocStatus())
				|| DOCSTATUS_Invalid.equals(getDocStatus())
				|| DOCSTATUS_InProgress.equals(getDocStatus())
				|| DOCSTATUS_Approved.equals(getDocStatus())
				|| DOCSTATUS_NotApproved.equals(getDocStatus()) )
		{
			//	Set lines to 0
			MInOutLine[] lines = getLines(false);
			for (MInOutLine line : lines) {
				if(line.getQtyAllocated().signum()>0)
					reverseAllocation(line);

				BigDecimal old = line.getMovementQty();
				if (old.signum() != 0)
				{
					line.setQty(Env.ZERO);
					line.addDescription(""Void ("" + old + "")"");
					line.save(get_Trx());
				}
			}
		}
		else
		{
			return reverseCorrectIt();
		}

		setProcessed(true);
		setDocAction(DOCACTION_None);
		return true;
	}	//	voidIt
"
org.compiere.model.MInOut.closeIt,MInOut.java,"boolean closeIt()
	{
		log.info(toString());
		setProcessed(true);
		setDocAction(DOCACTION_None);
		return true;
	}	//	closeIt
"
org.compiere.model.MInOut.isOnlyForOrder,MInOut.java,"boolean isOnlyForOrder(MOrder order)
	{
		//	TODO Compare Lines
		return getC_Order_ID() == order.getC_Order_ID();
	}	//	isOnlyForOrder
"
org.compiere.model.MInOut.reverseCorrectIt,MInOut.java,"boolean reverseCorrectIt(MOrder order)
	{
		log.info(toString());
		MDocType dt = MDocType.get(getCtx(), getC_DocType_ID());
		//
		MInOutLine[] lines = getLines(false);
		m_processMsg = MPeriod.isOpen(this, lines, getDateAcct(), dt.getDocBaseType());
		if (m_processMsg != null)
			return false;

		//	Reverse/Delete Matching
		if (!isSOTrx())
		{
			MMatchInv[] mInv = MMatchInv.getInOut(getCtx(), getM_InOut_ID(), get_Trx());
			for (MMatchInv element : mInv)
				element.delete(true);
			MMatchPO[] mPO = MMatchPO.getInOut(getCtx(), getM_InOut_ID(), get_Trx());
			for (MMatchPO element : mPO) {
				if (element.getC_InvoiceLine_ID() == 0)
					element.delete(true);
				else
				{
					element.setM_InOutLine_ID(0);
					element.save();
				}
			}
		}

		//	Deep Copy
		MInOut reversal = copyFrom (this, getMovementDate(),
				getC_DocType_ID(), isSOTrx(), dt.isReturnTrx(), false, get_Trx(), true);
		if (reversal == null)
		{
			m_processMsg = ""Could not create Ship Reversal"";
			return false;
		}
		reversal.setReversal(true);

		//	Reverse Line Qty
		MInOutLine[] sLines = getLines(false);
		MInOutLine[] rLines = reversal.getLines(false);
		for (int i = 0; i < rLines.length; i++)
		{
			MInOutLine rLine = rLines[i];
			rLine.setQtyEntered(rLine.getQtyEntered().negate());
			rLine.setMovementQty(rLine.getMovementQty().negate());
			rLine.setM_AttributeSetInstance_ID(sLines[i].getM_AttributeSetInstance_ID());

			if (!rLine.save(get_Trx()))
			{
				m_processMsg = ""Could not correct Ship Reversal Line"";
				return false;
			}
			//	We need to copy MA
			if (rLine.getM_AttributeSetInstance_ID() == 0)
			{
				MInOutLineMA mas[] = MInOutLineMA.get(getCtx(),
						sLines[i].getM_InOutLine_ID(), get_Trx());
				for (MInOutLineMA element : mas) {
					MInOutLineMA ma = new MInOutLineMA (rLine,
							element.getM_AttributeSetInstance_ID(),
							element.getMovementQty().negate());
					if (!ma.save())
						;
				}
			}
			//	De-Activate Asset
			MAsset asset = MAsset.getFromShipment(getCtx(), sLines[i].getM_InOutLine_ID(), get_Trx());
			if (asset != null)
			{
				asset.setIsActive(false);
				asset.addDescription(""("" + reversal.getDocumentNo() + "" #"" + rLine.getLine() + ""<-)"");
				asset.save();
			}
		}
		reversal.setC_Order_ID(getC_Order_ID());
		reversal.addDescription(""{->"" + getDocumentNo() + "")"");

		//
		if (!reversal.processIt(DocActionConstants.ACTION_Complete)
				|| !reversal.getDocStatus().equals(DocActionConstants.STATUS_Completed))
		{
			m_processMsg = ""Reversal ERROR: "" + reversal.getProcessMsg();
			return false;
		}
		reversal.closeIt();
		reversal.setProcessing (false);
		reversal.setDocStatus(DOCSTATUS_Reversed);
		reversal.setDocAction(DOCACTION_None);
		reversal.save(get_Trx());
		//
		addDescription(""("" + reversal.getDocumentNo() + ""<-)"");

		m_processMsg = reversal.getDocumentNo();
		setProcessed(true);
		setDocStatus(DOCSTATUS_Reversed);		//	 may come from void
		setDocAction(DOCACTION_None);
		return true;
	}	//	reverseCorrectionIt

	/**
	 * 	Reverse Correction - same date
	 * 	@return true if success
	 */
	public boolean reverseCorrectIt()
	{
		return reverseCorrectIt(null);
	}	//	reverseCorrectIt

	/**
	 * 	Reverse Accrual - none
	 * 	@return false
	 */
	public boolean reverseAccrualIt()
	{
		log.info(toString());
		return false;
	}	//	reverseAccrualIt

	/**
	 * 	Re-activate
	 * 	@return false
	 */
	public boolean reActivateIt()
	{
		log.info(toString());
		return false;
	}	//	reActivateIt


	/*************************************************************************
	 * 	Get Summary
	 *	@return Summary of Document
	 */
	public String getSummary()
	{
		StringBuffer sb = new StringBuffer();
		sb.append(getDocumentNo());
		//	: Total Lines = 123.00 (#1)
		sb.append("":"")
		//	.append(Msg.translate(getCtx(),""TotalLines"")).append(""="").append(getTotalLines())
		.append("" (#"").append(getLines(false).length).append("")"");
		//	 - Description
		if ((getDescription() != null) && (getDescription().length() > 0))
			sb.append("" - "").append(getDescription());
		return sb.toString();
	}	//	getSummary

	/**
	 * 	Get Process Message
	 *	@return clear text error message
	 */
	public String getProcessMsg()
	{
		return m_processMsg;
	}	//	getProcessMsg

	/**
	 * 	Get Document Owner (Responsible)
	 *	@return AD_User_ID
	 */
	public int getDoc_User_ID()
	{
		return getSalesRep_ID();
	}	//	getDoc_User_ID

	/**
	 * 	Get Document Approval Amount
	 *	@return amount
	 */
	public BigDecimal getApprovalAmt()
	{
		return Env.ZERO;
	}	//	getApprovalAmt

	/**
	 * 	Get C_Currency_ID
	 *	@return Accounting Currency
	 */
	public int getC_Currency_ID ()
	{
		return getCtx().getContextAsInt(""$C_Currency_ID "");
	}	//	getC_Currency_ID

	/**
	 * 	Document Status is Complete or Closed
	 *	@return true if CO, CL or RE
	 */
	public boolean isComplete()
	{
		String ds = getDocStatus();
		return DOCSTATUS_Completed.equals(ds)
		|| DOCSTATUS_Closed.equals(ds)
		|| DOCSTATUS_Reversed.equals(ds);
	}	//	isComplete

}	//	MInOut
"
org.compiere.model.MInOut.reverseCorrectIt,MInOut.java,"boolean reverseCorrectIt()
	{
		return reverseCorrectIt(null);
	}	//	reverseCorrectIt
"
org.compiere.model.MInOut.reverseAccrualIt,MInOut.java,"boolean reverseAccrualIt()
	{
		log.info(toString());
		return false;
	}	//	reverseAccrualIt
"
org.compiere.model.MInOut.reActivateIt,MInOut.java,"boolean reActivateIt()
	{
		log.info(toString());
		return false;
	}	//	reActivateIt
"
org.compiere.model.MInOut.getSummary,MInOut.java,"String getSummary()
	{
		StringBuffer sb = new StringBuffer();
		sb.append(getDocumentNo());
		//	: Total Lines = 123.00 (#1)
		sb.append("":"")
		//	.append(Msg.translate(getCtx(),""TotalLines"")).append(""="").append(getTotalLines())
		.append("" (#"").append(getLines(false).length).append("")"");
		//	 - Description
		if ((getDescription() != null) && (getDescription().length() > 0))
			sb.append("" - "").append(getDescription());
		return sb.toString();
	}	//	getSummary
"
org.compiere.model.MInOut.getProcessMsg,MInOut.java,"String getProcessMsg()
	{
		return m_processMsg;
	}	//	getProcessMsg
"
org.compiere.model.MInOut.getDoc_User_ID,MInOut.java,"int getDoc_User_ID()
	{
		return getSalesRep_ID();
	}	//	getDoc_User_ID
"
org.compiere.model.MInOut.getApprovalAmt,MInOut.java,"BigDecimal getApprovalAmt()
	{
		return Env.ZERO;
	}	//	getApprovalAmt
"
org.compiere.model.MInOut.getC_Currency_ID,MInOut.java,"int getC_Currency_ID ()
	{
		return getCtx().getContextAsInt(""$C_Currency_ID "");
	}	//	getC_Currency_ID
"
org.compiere.model.MInOut.isComplete,MInOut.java,"boolean isComplete()
	{
		String ds = getDocStatus();
		return DOCSTATUS_Completed.equals(ds)
		|| DOCSTATUS_Closed.equals(ds)
		|| DOCSTATUS_Reversed.equals(ds);
	}	//	isComplete
"
org.compiere.model.MRequestProcessor.getActive,MRequestProcessor.java,"MRequestProcessor[] getActive (Ctx ctx)
	{
		ArrayList<MRequestProcessor> list = new ArrayList<MRequestProcessor>();
		String sql = ""SELECT * FROM R_RequestProcessor WHERE IsActive='Y'"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MRequestProcessor (ctx, rs, null));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MRequestProcessor[] retValue = new MRequestProcessor[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getActive
"
org.compiere.model.MRequestProcessor.getRoutes,MRequestProcessor.java,"MRequestProcessorRoute[] getRoutes (boolean reload)
	{
		if ((m_routes != null) && !reload)
			return m_routes;

		String sql = ""SELECT * FROM R_RequestProcessor_Route WHERE R_RequestProcessor_ID=? ORDER BY SeqNo"";
		ArrayList<MRequestProcessorRoute> list = new ArrayList<MRequestProcessorRoute>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getR_RequestProcessor_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MRequestProcessorRoute (getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		m_routes = new MRequestProcessorRoute[list.size ()];
		list.toArray (m_routes);
		return m_routes;
	}	//	getRoutes
"
org.compiere.model.MRequestProcessor.getLogs,MRequestProcessor.java,"CompiereProcessorLog[] getLogs()
	{
		ArrayList<MRequestProcessorLog> list = new ArrayList<MRequestProcessorLog>();
		String sql = ""SELECT * ""
			+ ""FROM R_RequestProcessorLog ""
			+ ""WHERE R_RequestProcessor_ID=? ""
			+ ""ORDER BY Created DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getR_RequestProcessor_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MRequestProcessorLog (getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MRequestProcessorLog[] retValue = new MRequestProcessorLog[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getLogs
"
org.compiere.model.MRequestProcessor.deleteLog,MRequestProcessor.java,"int deleteLog()
	{
		if (getKeepLogDays() < 1)
			return 0;
		String sql = ""DELETE FROM R_RequestProcessorLog ""
			+ ""WHERE R_RequestProcessor_ID="" + getR_RequestProcessor_ID()
			//jz + "" AND (Created+"" + getKeepLogDays() + "") < SysDate"";
			+ "" AND addDays(Created,"" + getKeepLogDays() + "") < SysDate"";
		int no = DB.executeUpdate(sql, get_Trx());
		return no;
	}	//	deleteLog
"
org.compiere.model.MRequestProcessor.getDateNextRun,MRequestProcessor.java,"Timestamp getDateNextRun (boolean requery)
	{
		if (requery)
			load(get_Trx());
		return getDateNextRun();
	}	//	getDateNextRun
"
org.compiere.model.MRequestProcessor.getServerID,MRequestProcessor.java,"String getServerID()
	{
		return ""RequestProcessor"" + get_ID();
	}	//	getServerID
"
org.compiere.model.MResourceAssignment.afterSave,MResourceAssignment.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		/*
		v_Description := :new.Name;
	IF (:new.Description IS NOT NULL AND LENGTH(:new.Description) > 0) THEN
		v_Description := v_Description || ' (' || :new.Description || ')';			
	END IF;
	
	-- Update Expense Line
	UPDATE S_TimeExpenseLine
	  SET  Description = v_Description,
		Qty = :new.Qty
	WHERE S_ResourceAssignment_ID = :new.S_ResourceAssignment_ID
	  AND (Description <> v_Description OR Qty <> :new.Qty);
	  
	-- Update Order Line
	UPDATE C_OrderLine
	  SET  Description = v_Description,
		QtyOrdered = :new.Qty
	WHERE S_ResourceAssignment_ID = :new.S_ResourceAssignment_ID
	  AND (Description <> v_Description OR QtyOrdered <> :new.Qty);

	-- Update Invoice Line
	UPDATE C_InvoiceLine
	  SET  Description = v_Description,
		QtyInvoiced = :new.Qty
	WHERE S_ResourceAssignment_ID = :new.S_ResourceAssignment_ID
	  AND (Description <> v_Description OR QtyInvoiced <> :new.Qty);
	  */
		return success;
	}	//	afterSave
"
org.compiere.model.MResourceAssignment.toString,MResourceAssignment.java,"String toString()
	{
		StringBuffer sb = new StringBuffer (""MResourceAssignment[ID="");
		sb.append(get_ID())
			.append("",S_Resource_ID="").append(getS_Resource_ID())
			.append("",From="").append(getAssignDateFrom())
			.append("",To="").append(getAssignDateTo())
			.append("",Qty="").append(getQty())
			.append(""]"");
		return sb.toString();
	}   //  toString
"
org.compiere.model.MResourceAssignment.beforeDelete,MResourceAssignment.java,"boolean beforeDelete ()
	{
		//	 allow to delete, when not confirmed
		if (isConfirmed())
			return false;
		
		return true;
	}	//	beforeDelete
"
org.compiere.model.ScheduleUtil.getAssignmentSlots,ScheduleUtil.java,"MAssignmentSlot[] getAssignmentSlots (int S_Resource_ID,
		Timestamp start_Date, Timestamp end_Date,
		BigDecimal qty, boolean getAll, Trx trx)
	{
		log.config(start_Date.toString());
		if (m_S_Resource_ID != S_Resource_ID)
			getBaseInfo (S_Resource_ID);
		//
		ArrayList<MAssignmentSlot> list = new ArrayList<MAssignmentSlot>();
		MAssignmentSlot ma = null;

		if (!m_isAvailable)
		{
			ma = new MAssignmentSlot (EARLIEST, LATEST,
				Msg.getMsg (m_ctx, ""ResourceNotAvailable""), """", MAssignmentSlot.STATUS_NotAvailable);
			if (!getAll)
				return new MAssignmentSlot[] {ma};
			list.add(ma);
		}

		m_startDate = start_Date;
		m_endDate = end_Date;
		if (m_endDate == null)
			m_endDate = MUOMConversion.getEndDate(m_ctx, m_startDate, m_C_UOM_ID, qty);
		log.fine( ""- EndDate="" + m_endDate);


		//	Resource Unavailability -------------------------------------------
	//	log.fine( ""- Unavailability -"");
		String sql = ""SELECT Description, DateFrom, DateTo ""
		  + ""FROM S_ResourceUnavailable ""
		  + ""WHERE S_Resource_ID=?""					//	#1
		  + "" AND DateTo >= ?""						//	#2	start
		  + "" AND DateFrom <= ?""					//	#3	end
		  + "" AND IsActive='Y'"";
		try
		{
	//		log.fine( sql, ""ID="" + S_Resource_ID + "", Start="" + m_startDate + "", End="" + m_endDate);
			PreparedStatement pstmt = DB.prepareStatement(sql, trx);
			pstmt.setInt(1, m_S_Resource_ID);
			pstmt.setTimestamp(2, m_startDate);
			pstmt.setTimestamp(3, m_endDate);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				ma = new MAssignmentSlot (TimeUtil.getDay(rs.getTimestamp(2)),
					TimeUtil.getNextDay(rs.getTimestamp(3)),	//	user entered date need to convert to not including end time
					Msg.getMsg (m_ctx, ""ResourceUnAvailable""), rs.getString(1),
					MAssignmentSlot.STATUS_UnAvailable);
			//	log.fine( ""- Unavailable"", ma);
				if (getAll)
					createDaySlot (list, ma);
				else
					list.add(ma);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
			ma = new MAssignmentSlot (EARLIEST, LATEST,
				Msg.getMsg (m_ctx, ""ResourceUnAvailable""), e.toString(),
				MAssignmentSlot.STATUS_UnAvailable);
		}
		if (ma != null && !getAll)
			return new MAssignmentSlot[] {ma};


		//	NonBusinessDay ----------------------------------------------------
	//	log.fine( ""- NonBusinessDay -"");
		//	""WHERE TRUNC(Date1) BETWEEN TRUNC(?) AND TRUNC(?)""   causes
		//	ORA-00932: inconsistent datatypes: expected NUMBER got TIMESTAMP
		sql = MRole.getDefault(m_ctx, false).addAccessSQL (
			""SELECT Name, Date1 FROM C_NonBusinessDay ""
			+ ""WHERE TRUNC(Date1,'DD') BETWEEN ? AND ?"",
			""C_NonBusinessDay"", false, false);	// not qualified - RO
		try
		{
			Timestamp startDay = TimeUtil.getDay(m_startDate);
			Timestamp endDay = TimeUtil.getDay(m_endDate);
	//		log.fine( sql, ""Start="" + startDay + "", End="" + endDay);
			PreparedStatement pstmt = DB.prepareStatement(sql, trx);
			pstmt.setTimestamp(1, startDay);
			pstmt.setTimestamp(2, endDay);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				ma = new MAssignmentSlot (TimeUtil.getDay(rs.getTimestamp(2)),
					TimeUtil.getNextDay(rs.getTimestamp(2)),	//	user entered date need to convert to not including end time
					Msg.getMsg(m_ctx, ""NonBusinessDay""), rs.getString(1),
					MAssignmentSlot.STATUS_NonBusinessDay);
				log.finer(""- NonBusinessDay "" + ma);
				list.add(ma);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
			ma = new MAssignmentSlot (EARLIEST, LATEST,
				Msg.getMsg(m_ctx, ""NonBusinessDay""), e.toString(),
				MAssignmentSlot.STATUS_NonBusinessDay);
		}
		if (ma != null && !getAll)
			return new MAssignmentSlot[] {ma};


		//	ResourceType Available --------------------------------------------
	//	log.fine( ""- ResourceTypeAvailability -"");
		sql = ""SELECT Name, IsTimeSlot,TimeSlotStart,TimeSlotEnd, ""	//	1..4
			+ ""IsDateSlot,OnMonday,OnTuesday,OnWednesday,""			//	5..8
			+ ""OnThursday,OnFriday,OnSaturday,OnSunday ""			//	9..12
			+ ""FROM S_ResourceType ""
			+ ""WHERE S_ResourceType_ID=?"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, trx);
			pstmt.setInt(1, m_S_ResourceType_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				m_typeName = rs.getString(1);
				//	TimeSlot
				if (""Y"".equals(rs.getString(2)))
				{
					m_slotStartTime = TimeUtil.getDayTime (m_startDate, rs.getTimestamp(3));
					m_slotEndTime = TimeUtil.getDayTime (m_endDate, rs.getTimestamp(4));
					if (TimeUtil.inRange(m_startDate, m_endDate, m_slotStartTime, m_slotEndTime))
					{
						ma = new MAssignmentSlot (m_slotStartTime, m_slotEndTime,
							Msg.getMsg(m_ctx, ""ResourceNotInSlotTime""), m_typeName,
							MAssignmentSlot.STATUS_NotInSlotTime);
						if (getAll)
							createTimeSlot (list,
								rs.getTimestamp(3), rs.getTimestamp(4));
					}
				}	//	TimeSlot

				//	DaySlot
				if (""Y"".equals(rs.getString(5)))
				{
					if (TimeUtil.inRange(m_startDate, m_endDate,
						""Y"".equals(rs.getString(6)), ""Y"".equals(rs.getString(7)), 				//	Mo..Tu
						""Y"".equals(rs.getString(8)), ""Y"".equals(rs.getString(9)), ""Y"".equals(rs.getString(10)),	//  We..Fr
						""Y"".equals(rs.getString(11)), ""Y"".equals(rs.getString(12))))
					{
						ma = new MAssignmentSlot (m_startDate, m_endDate,
							Msg.getMsg(m_ctx, ""ResourceNotInSlotDay""), m_typeName,
							MAssignmentSlot.STATUS_NotInSlotDay);
						if (getAll)
							createDaySlot (list,
								""Y"".equals(rs.getString(6)), ""Y"".equals(rs.getString(7)), 		//	Mo..Tu
								""Y"".equals(rs.getString(8)), ""Y"".equals(rs.getString(9)), ""Y"".equals(rs.getString(10)),	//  We..Fr
								""Y"".equals(rs.getString(11)), ""Y"".equals(rs.getString(12)));
					}
				}	//	DaySlot

			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
			ma = new MAssignmentSlot (EARLIEST, LATEST,
				Msg.getMsg(m_ctx, ""ResourceNotInSlotDay""), e.toString(),
				MAssignmentSlot.STATUS_NonBusinessDay);
		}
		if (ma != null && !getAll)
			return new MAssignmentSlot[] {ma};

		//	Assignments -------------------------------------------------------
		sql = ""SELECT S_ResourceAssignment_ID ""
			+ ""FROM S_ResourceAssignment ""
			+ ""WHERE S_Resource_ID=?""					//	#1
			+ "" AND AssignDateTo >= ?""					//	#2	start
			+ "" AND AssignDateFrom <= ?""				//	#3	end
			+ "" AND IsActive='Y'"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, trx);
			pstmt.setInt(1, m_S_Resource_ID);
			pstmt.setTimestamp(2, m_startDate);
			pstmt.setTimestamp(3, m_endDate);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				MResourceAssignment mAssignment = 
					new MResourceAssignment(Env.getCtx(), rs.getInt(1), trx);
				ma = new MAssignmentSlot (mAssignment);
				if (!getAll)
					break;
				list.add(ma);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
			ma = new MAssignmentSlot (EARLIEST, LATEST,
				Msg.translate(m_ctx, ""S_R""), e.toString(),
				MAssignmentSlot.STATUS_NotConfirmed);
		}
		if (ma != null && !getAll)
			return new MAssignmentSlot[] {ma};

		/*********************************************************************/

		//	fill m_timeSlots (required for layout)
		createTimeSlots();

		//	Clean list - date range
		ArrayList<MAssignmentSlot> clean = new ArrayList<MAssignmentSlot>(list.size());
		for (int i = 0; i < list.size(); i++)
		{
			MAssignmentSlot mas = list.get(i);
			if ((mas.getStartTime().equals(m_startDate) || mas.getStartTime().after(m_startDate))
					&& (mas.getEndTime().equals(m_endDate) || mas.getEndTime().before(m_endDate)))
				clean.add(mas);
		}
		//	Delete Unavailability TimeSlots when all day assigments exist
		MAssignmentSlot[] sorted = new MAssignmentSlot[clean.size()];
		clean.toArray(sorted);
		Arrays.sort(sorted);	//	sorted by start/end date
		list.clear();	//	used as day list
		clean.clear();	//	cleaned days
		Timestamp sortedDay = null;
		for (MAssignmentSlot element : sorted) {
			if (sortedDay == null)
				sortedDay = TimeUtil.getDay(element.getStartTime());
			if (sortedDay.equals(TimeUtil.getDay(element.getStartTime())))
				list.add(element);
			else
			{
				//	process info list -> clean
				layoutSlots (list, clean);
				//	prepare next
				list.clear();
				list.add(element);
				sortedDay = TimeUtil.getDay(element.getStartTime());
			}
		}
		//	process info list -> clean
		layoutSlots (list, clean);

		//	Return
		MAssignmentSlot[] retValue = new MAssignmentSlot[clean.size()];
		clean.toArray(retValue);
		Arrays.sort(retValue);	//	sorted by start/end date
		return retValue;
	}	//	getAssignmentSlots
"
org.compiere.model.ScheduleUtil.layoutSlots,ScheduleUtil.java,"void layoutSlots (ArrayList<MAssignmentSlot> list, ArrayList<MAssignmentSlot> clean)
	{
		int size = list.size();
	//	System.out.println(""Start List="" + size + "", Clean="" + clean.size());
		if (size == 0)
			return;
		else if (size == 1)
		{
			MAssignmentSlot mas = list.get(0);
			layoutY (mas);
			clean.add (mas);
			return;
		}

		//	Delete Unavailability TimeSlots when all day assigments exist
		boolean allDay = false;
		for (int i = 0; !allDay && i < size; i++)
		{
			MAssignmentSlot mas = list.get(i);
			if (mas.getStatus() == MAssignmentSlot.STATUS_NotAvailable
				|| mas.getStatus() == MAssignmentSlot.STATUS_UnAvailable
				|| mas.getStatus() == MAssignmentSlot.STATUS_NonBusinessDay
				|| mas.getStatus() == MAssignmentSlot.STATUS_NotInSlotDay)
				allDay = true;

		}
		if (allDay)
		{
			//	delete Time Slot
			for (int i = 0; i < list.size(); i++)
			{
				MAssignmentSlot mas = list.get(i);
				if (mas.getStatus() == MAssignmentSlot.STATUS_NotInSlotTime)
					list.remove(i--);
			}
		}

		//	Copy & Y layout remaining
		for (int i = 0; i < list.size(); i++)
		{
			MAssignmentSlot mas = list.get(i);
			layoutY (mas);
			clean.add (mas);
		}

		//	X layout
		int maxYslots = m_timeSlots.length;
		int[] xSlots = new int[maxYslots];		//	number of parallel slots
		for (int i = 0; i < list.size(); i++)
		{
			MAssignmentSlot mas = list.get(i);
			for (int y = mas.getYStart(); y < mas.getYEnd(); y++)
				xSlots[y]++;
		}
		//	Max parallel X Slots
		int maxXslots = 0;
		for (int element : xSlots) {
			if (element > maxXslots)
				maxXslots = element;
		}
		//	Only one column
		if (maxXslots < 2)
		{
			for (int i = 0; i < list.size(); i++)
			{
				MAssignmentSlot mas = list.get(i);
				mas.setX(0, 1);
			}
			return;
		}

		//	Create xy Matrix
		ArrayList<ArrayList<ArrayList<MAssignmentSlot>>> matrix = new ArrayList<ArrayList<ArrayList<MAssignmentSlot>>>();
		//	Populate Matrix first column
		for (int y = 0; y < maxYslots; y++)
		{
			ArrayList<MAssignmentSlot> xyList = new ArrayList<MAssignmentSlot>();
			matrix.get(0).set(y, xyList);
			//	see if one assignment fits into slot
			for (int i = 0; i < list.size(); i++)
			{
				MAssignmentSlot mas = list.get(i);
				if (y >= mas.getYStart() && y <= mas.getYEnd())
					xyList.add(mas);
			}
			//	initiate right columns
			for (int x = 1; x < maxXslots; x++)
				matrix.get(x).set(y, new ArrayList<MAssignmentSlot>());
		}	//	for all y slots

		/**
		 * 	(AB)()	->	(B)(A)	->	(B)(A)
		 *  (BC)()	->	(BC)()	->	(B)(C)
		 * 	- if the row above is empty, move the first one right
		 *  - else	- check col_1..x above and move any content if the same
		 *  		- if size > 0
		 * 				- if the element is is not the same as above,
		 * 					move to the first empty column on the right
		 */
		//	if in one column cell, there is more than one, move it to the right
		for (int y = 0; y < maxYslots; y++)
		{
			//	if an element is the same as the line above, move it there
			if (y > 0 && matrix.get(0).get(y).size() > 0)
			{
				for (int x = 1; x < maxXslots; x++)
				{
					if (matrix.get(x).get(y-1).size() > 0)	//	above slot is not empty
					{
						Object above = matrix.get(x).get(y-1).get(0);
						for (int i = 0; i < matrix.get(x).get(y).size(); i++)
						{
							if (above.equals(matrix.get(0).get(y).get(i)))	//	same - move it
							{
								matrix.get(x).get(y).add(matrix.get(0).get(y).get(i));
								matrix.get(0).get(y).remove(i--);
							}
						}
					}
				}
			}	//	if an element is the same as the line above, move it there

			//	we need to move items to the right
			if (matrix.get(0).get(y).size() > 1)
			{
				Object above = null;
				if (y > 0 && matrix.get(0).get(y-1).size() > 0)
					above = matrix.get(0).get(y-1).get(0);
				//
				for (int i = 0; matrix.get(0).get(y).size() > 1; i++)
				{
					MAssignmentSlot move = matrix.get(0).get(y).get(i);
					if (!move.equals(above))	//	we can move it
					{
						for (int x = 1; move != null && x < maxXslots; x++)
						{
							if (matrix.get(x).get(y).size() == 0)	//	found an empty slot
							{
								matrix.get(x).get(y).add(move);
								matrix.get(0).get(y).remove(i--);
								move = null;
							}
						}
					}
				}
			}	//	we need to move items to the right
		}	//	 for all y slots

		//	go through the matrix and assign the X position
		for (int y = 0; y < maxYslots; y++)
		{
			for (int x = 0; x < maxXslots; x++)
			{
				if (matrix.get(x).get(y).size() > 0)
				{
					MAssignmentSlot mas = matrix.get(x).get(y).get(0);
					mas.setX(x, xSlots[y]);
				}
			}
		}
		//	clean up
		matrix = null;
	}	//	layoutSlots
"
org.compiere.model.ScheduleUtil.layoutY,ScheduleUtil.java,"void layoutY (MAssignmentSlot mas)
	{
		int timeSlotStart = getTimeSlotIndex(mas.getStartTime(), false);
		int timeSlotEnd = getTimeSlotIndex(mas.getEndTime(), true);
		if (TimeUtil.isAllDay(mas.getStartTime(), mas.getEndTime()))
			timeSlotEnd = m_timeSlots.length - 1;
		//
		mas.setY (timeSlotStart, timeSlotEnd);
	}	//	layoutY
"
org.compiere.model.ScheduleUtil.getTimeSlotIndex,ScheduleUtil.java,"int getTimeSlotIndex (Timestamp time, boolean endTime)
	{
		//	Just one slot
		if (m_timeSlots.length <= 1)
			return 0;
		//	search for it
		for (int i = 0; i < m_timeSlots.length; i++)
		{
			if (m_timeSlots[i].inSlot (time, endTime))
				return i;
		}
		log.log(Level.SEVERE, ""MSchedule.getTimeSlotIndex - did not find Slot for "" + time + "" end="" + endTime);
		return 0;
	}	//	getTimeSlotIndex
"
org.compiere.model.ScheduleUtil.getBaseInfo,ScheduleUtil.java,"void getBaseInfo (int S_Resource_ID)
	{
		//	Resource is Active and Available
		String sql = MRole.getDefault(m_ctx, false).addAccessSQL (
			""SELECT r.IsActive,r.IsAvailable,NULL,""	//	r.IsSingleAssignment,""
			+ ""r.S_ResourceType_ID,rt.C_UOM_ID ""
			+ ""FROM S_Resource r, S_ResourceType rt ""
			+ ""WHERE r.S_Resource_ID=?""
			+ "" AND r.S_ResourceType_ID=rt.S_ResourceType_ID"",
			""r"", MRole.SQL_FULLYQUALIFIED, MRole.SQL_RO);
		//
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, S_Resource_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				if (!""Y"".equals(rs.getString(1)))					//	Active
					m_isAvailable = false;
				if (m_isAvailable && !""Y"".equals(rs.getString(2)))	//	Available
					m_isAvailable = false;
				//
				m_S_ResourceType_ID = rs.getInt(4);
				m_C_UOM_ID = rs.getInt(5);
			//	log.fine( ""- Resource_ID="" + m_S_ResourceType_ID + "",IsAvailable="" + m_isAvailable);
			}
			else
				m_isAvailable = false;
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
			m_isAvailable = false;
		}
		m_S_Resource_ID = S_Resource_ID;
	}	//	getBaseInfo
"
org.compiere.model.ScheduleUtil.createTimeSlot,ScheduleUtil.java,"void createTimeSlot (ArrayList<MAssignmentSlot> list,
		Timestamp startTime, Timestamp endTime)
	{
	//	log.fine( ""MSchedule.createTimeSlot"");
		GregorianCalendar cal = new GregorianCalendar(Language.getLoginLanguage().getLocale());
		cal.setTimeInMillis(m_startDate.getTime());
		//	End Date for Comparison
		GregorianCalendar calEnd = new GregorianCalendar(Language.getLoginLanguage().getLocale());
		calEnd.setTimeInMillis(m_endDate.getTime());

		while (cal.before(calEnd))
		{
			//	00:00..startTime
			cal.set(Calendar.HOUR_OF_DAY, 0);
			cal.set(Calendar.MINUTE, 0);
			cal.set(Calendar.SECOND, 0);
			cal.set(Calendar.MILLISECOND, 0);
			Timestamp start = new Timestamp (cal.getTimeInMillis());
			//
			GregorianCalendar cal_1 = new GregorianCalendar(Language.getLoginLanguage().getLocale());
			cal_1.setTimeInMillis(startTime.getTime());
			cal.set(Calendar.HOUR_OF_DAY, cal_1.get(Calendar.HOUR_OF_DAY));
			cal.set(Calendar.MINUTE, cal_1.get(Calendar.MINUTE));
			cal.set(Calendar.SECOND, cal_1.get(Calendar.SECOND));
			Timestamp end = new Timestamp (cal.getTimeInMillis());
			//
			MAssignmentSlot	ma = new MAssignmentSlot (start, end,
				Msg.getMsg(m_ctx, ""ResourceNotInSlotTime""), """",
				MAssignmentSlot.STATUS_NotInSlotTime);
			list.add(ma);

			//	endTime .. 00:00 next day
			cal_1.setTimeInMillis(endTime.getTime());
			cal.set(Calendar.HOUR_OF_DAY, cal_1.get(Calendar.HOUR_OF_DAY));
			cal.set(Calendar.MINUTE, cal_1.get(Calendar.MINUTE));
			cal.set(Calendar.SECOND, cal_1.get(Calendar.SECOND));
			start = new Timestamp (cal.getTimeInMillis());
			//
			cal.set(Calendar.HOUR_OF_DAY, 0);
			cal.set(Calendar.MINUTE, 0);
			cal.set(Calendar.SECOND, 0);
			cal.add(Calendar.DAY_OF_YEAR, 1);
			end = new Timestamp (cal.getTimeInMillis());
			//
			ma = new MAssignmentSlot (start, end,
				Msg.getMsg(m_ctx, ""ResourceNotInSlotTime""), """",
				MAssignmentSlot.STATUS_NotInSlotTime);
			list.add(ma);
		}
	}	//	createTimeSlot
"
org.compiere.model.ScheduleUtil.createDaySlot,ScheduleUtil.java,"void createDaySlot (ArrayList<MAssignmentSlot> list,
		boolean OnMonday, boolean OnTuesday, boolean OnWednesday,
		boolean OnThursday, boolean OnFriday, boolean OnSaturday, boolean OnSunday)
	{
	//	log.fine( ""MSchedule.createDaySlot"");
		GregorianCalendar cal = new GregorianCalendar(Language.getLoginLanguage().getLocale());
		cal.setTimeInMillis(m_startDate.getTime());
		//	End Date for Comparison
		GregorianCalendar calEnd = new GregorianCalendar(Language.getLoginLanguage().getLocale());
		calEnd.setTimeInMillis(m_endDate.getTime());

		while (cal.before(calEnd))
		{
			int weekday = cal.get(Calendar.DAY_OF_WEEK);
			if ((!OnSaturday && weekday == Calendar.SATURDAY)
				|| (!OnSunday && weekday == Calendar.SUNDAY)
				|| (!OnMonday && weekday == Calendar.MONDAY)
				|| (!OnTuesday && weekday == Calendar.TUESDAY)
				|| (!OnWednesday && weekday == Calendar.WEDNESDAY)
				|| (!OnThursday && weekday == Calendar.THURSDAY)
				|| (!OnFriday && weekday == Calendar.FRIDAY))
			{
				//	00:00..00:00 next day
				cal.set(Calendar.HOUR_OF_DAY, 0);
				cal.set(Calendar.MINUTE, 0);
				cal.set(Calendar.SECOND, 0);
				cal.set(Calendar.MILLISECOND, 0);
				Timestamp start = new Timestamp (cal.getTimeInMillis());
				cal.add(Calendar.DAY_OF_YEAR, 1);
				Timestamp end = new Timestamp (cal.getTimeInMillis());

				MAssignmentSlot	ma = new MAssignmentSlot (start, end,
					Msg.getMsg(m_ctx, ""ResourceNotInSlotDay""), """",
					MAssignmentSlot.STATUS_NotInSlotDay);
				list.add(ma);
			}
			else	//	next day
				cal.add(Calendar.DAY_OF_YEAR, 1);
		}
	}	//	createDaySlot
"
org.compiere.model.ScheduleUtil.createDaySlot,ScheduleUtil.java,"void createDaySlot (ArrayList<MAssignmentSlot> list, MAssignmentSlot ma)
	{
	//	log.fine( ""MSchedule.createDaySlot"", ma);
		//
		Timestamp start = ma.getStartTime();
		GregorianCalendar calStart = new GregorianCalendar();
		calStart.setTime(start);
		calStart.set(Calendar.HOUR_OF_DAY, 0);
		calStart.set(Calendar.MINUTE, 0);
		calStart.set(Calendar.SECOND, 0);
		calStart.set(Calendar.MILLISECOND, 0);
		Timestamp end = ma.getEndTime();
		GregorianCalendar calEnd = new GregorianCalendar();
		calEnd.setTime(end);
		calEnd.set(Calendar.HOUR_OF_DAY, 0);
		calEnd.set(Calendar.MINUTE, 0);
		calEnd.set(Calendar.SECOND, 0);
		calEnd.set(Calendar.MILLISECOND, 0);
		//
		while (calStart.before(calEnd))
		{
			Timestamp xStart = new Timestamp(calStart.getTimeInMillis());
			calStart.add(Calendar.DAY_OF_YEAR, 1);
			Timestamp xEnd = new Timestamp(calStart.getTimeInMillis());
			MAssignmentSlot myMa = new MAssignmentSlot (xStart, xEnd,
				ma.getName(), ma.getDescription(), ma.getStatus());
			list.add(myMa);
		}
	}	//	createDaySlot
"
org.compiere.model.ScheduleUtil.getDayTimeSlots,ScheduleUtil.java,"MAssignmentSlot[] getDayTimeSlots ()
	{
		return m_timeSlots;
	}	//	getDayTimeSlots
"
org.compiere.model.ScheduleUtil.createTimeSlots,ScheduleUtil.java,"void createTimeSlots()
	{
		//	development error
		if (m_typeName == null)
			throw new IllegalStateException(""ResourceTypeName not set"");

		ArrayList<MAssignmentSlot> list = new ArrayList<MAssignmentSlot>();
        MUOM.get (m_ctx, m_C_UOM_ID);
		int minutes = MUOMConversion.convertToMinutes (m_ctx, m_C_UOM_ID, Env.ONE);
		log.config(""Minutes="" + minutes);
		//
		if (minutes > 0 && minutes < 60*24)
		{
			//	Set Start Time
			GregorianCalendar cal = new GregorianCalendar();
			cal.setTime(m_startDate);
			cal.set(Calendar.HOUR_OF_DAY, 0);
			cal.set(Calendar.MINUTE, 0);
			cal.set(Calendar.SECOND, 0);
			cal.set(Calendar.MILLISECOND, 0);
			//	we have slots - create first
			if (m_slotStartTime != null)
			{
				long start = cal.getTimeInMillis();
				cal.setTime(TimeUtil.getDayTime(m_startDate, m_slotStartTime));	//	set to start time
				cal.set(Calendar.SECOND, 0);
				cal.set(Calendar.MILLISECOND, 0);
				list.add(new MAssignmentSlot(start, cal.getTimeInMillis()));
			}
			//	Set End Time
			GregorianCalendar calEnd = new GregorianCalendar();
			if (m_slotEndTime != null)
			{
				calEnd.setTime(TimeUtil.getDayTime(m_startDate, m_slotEndTime));
				calEnd.set(Calendar.SECOND, 0);
				calEnd.set(Calendar.MILLISECOND, 0);
			}
			else	//	No Slot - all day
			{
				calEnd.setTime(m_startDate);
				calEnd.set(Calendar.HOUR_OF_DAY, 0);
				calEnd.set(Calendar.MINUTE, 0);
				calEnd.set(Calendar.SECOND, 0);
				calEnd.set(Calendar.MILLISECOND, 0);
				calEnd.add(Calendar.DAY_OF_YEAR, 1);
			}
//System.out.println(""Start="" + new Timestamp(cal.getTimeInMillis()));
//System.out.println(""Endt="" + new Timestamp(calEnd.getTimeInMillis()));

			//	Set end Slot Time
			GregorianCalendar calEndSlot = new GregorianCalendar();
			calEndSlot.setTime(cal.getTime());
			calEndSlot.add(Calendar.MINUTE, minutes);

			while (cal.before(calEnd))
			{
				list.add(new MAssignmentSlot(cal.getTimeInMillis(), calEndSlot.getTimeInMillis()));
				//	Next Slot
				cal.add(Calendar.MINUTE, minutes);
				calEndSlot.add(Calendar.MINUTE, minutes);
			}
			//	create last slot
			calEndSlot.setTime(cal.getTime());
			calEndSlot.set(Calendar.HOUR_OF_DAY, 0);
			calEndSlot.set(Calendar.MINUTE, 0);
			calEndSlot.set(Calendar.SECOND, 0);
			calEndSlot.set(Calendar.MILLISECOND, 0);
			calEndSlot.add(Calendar.DAY_OF_YEAR, 1);	//	00:00 next day
			list.add(new MAssignmentSlot(cal.getTimeInMillis(), calEndSlot.getTimeInMillis()));
		}

		else	//	Day, ....
		{
			list.add (new MAssignmentSlot(TimeUtil.getDay(m_startDate), TimeUtil.getNextDay(m_startDate)));
		}

		//
		m_timeSlots = new MAssignmentSlot[list.size()];
		list.toArray(m_timeSlots);
	}	//	createTimeSlots
"
org.compiere.model.ScheduleUtil.getS_Resource_ID,ScheduleUtil.java,"int getS_Resource_ID()
	{
		return m_S_Resource_ID;
	}	//	getS_Resource_ID
"
org.compiere.model.ScheduleUtil.getStartDate,ScheduleUtil.java,"Timestamp getStartDate ()
	{
		return m_startDate;
	}	//	getStartDate
"
org.compiere.model.ScheduleUtil.getEndDate,ScheduleUtil.java,"Timestamp getEndDate ()
	{
		return m_endDate;
	}	//	getEndDate
"
org.compiere.model.MCash.get,MCash.java,"MCash get (Ctx ctx, int AD_Org_ID,
		Timestamp dateAcct, int C_Currency_ID, Trx trx)
	{
		MCash retValue = null;
		//	Existing Journal
		String sql = ""SELECT * FROM C_Cash c ""
			+ ""WHERE c.AD_Org_ID=?""						//	#1
			+ "" AND TRUNC(c.StatementDate, 'DD')=?""			//	#2
			+ "" AND c.Processed='N'""
			+ "" AND EXISTS (SELECT * FROM C_CashBook cb ""
				+ ""WHERE c.C_CashBook_ID=cb.C_CashBook_ID AND cb.AD_Org_ID=c.AD_Org_ID""
				+ "" AND cb.C_Currency_ID=?)"";			//	#3
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, AD_Org_ID);
			pstmt.setTimestamp (2, TimeUtil.getDay(dateAcct));
			pstmt.setInt (3, C_Currency_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				retValue = new MCash (ctx, rs, trx);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		if (retValue != null)
			return retValue;

		//	Get CashBook
		MCashBook cb = MCashBook.get (ctx, AD_Org_ID, C_Currency_ID);
		if (cb == null)
		{
			s_log.warning(""No CashBook for AD_Org_ID="" + AD_Org_ID + "", C_Currency_ID="" + C_Currency_ID);
			return null;
		}

		//	Create New Journal
		retValue = new MCash (cb, dateAcct);
		retValue.save(trx);
		return retValue;
	}	//	get
"
org.compiere.model.MCash.get,MCash.java,"MCash get (Ctx ctx, int C_CashBook_ID,
		Timestamp dateAcct, Trx trx)
	{
		MCash retValue = null;
		//	Existing Journal
		String sql = ""SELECT * FROM C_Cash c ""
			+ ""WHERE c.C_CashBook_ID=?""					//	#1
			+ "" AND TRUNC(c.StatementDate,'DD')=?""			//	#2
			+ "" AND c.Processed='N'"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, C_CashBook_ID);
			pstmt.setTimestamp (2, TimeUtil.getDay(dateAcct));
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				retValue = new MCash (ctx, rs, trx);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		if (retValue != null)
			return retValue;

		//	Get CashBook
		MCashBook cb = new MCashBook (ctx, C_CashBook_ID, trx);
		if (cb.get_ID() ==0)
		{
			s_log.warning(""Not found C_CashBook_ID="" + C_CashBook_ID);
			return null;
		}

		//	Create New Journal
		retValue = new MCash (cb, dateAcct);
		retValue.save(trx);
		return retValue;
	}	//	get
"
org.compiere.model.MCash.getLines,MCash.java,"MCashLine[] getLines (boolean requery)
	{
		if ((m_lines != null) && !requery)
			return m_lines;
		ArrayList<MCashLine> list = new ArrayList<MCashLine>();
		String sql = ""SELECT * FROM C_CashLine WHERE C_Cash_ID=? ORDER BY Line"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getC_Cash_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MCashLine (getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

		m_lines = new MCashLine[list.size ()];
		list.toArray (m_lines);
		return m_lines;
	}	//	getLines
"
org.compiere.model.MCash.getCashBook,MCash.java,"MCashBook getCashBook()
	{
		if (m_book == null)
			m_book = MCashBook.get(getCtx(), getC_CashBook_ID());
		return m_book;
	}	//	getCashBook
"
org.compiere.model.MCash.getDocumentNo,MCash.java,"String getDocumentNo()
	{
		return getName();
	}	//	getDocumentNo
"
org.compiere.model.MCash.getDocumentInfo,MCash.java,"String getDocumentInfo()
	{
		return Msg.getElement(getCtx(), ""C_Cash_ID"") + "" "" + getDocumentNo();
	}	//	getDocumentInfo
"
org.compiere.model.MCash.createPDF,MCash.java,"File createPDF ()
	{
		try
		{
			File temp = File.createTempFile(get_TableName()+get_ID()+""_"", "".pdf"");
			return createPDF (temp);
		}
		catch (Exception e)
		{
			log.severe(""Could not create PDF - "" + e.getMessage());
		}
		return null;
	}	//	getPDF
"
org.compiere.model.MCash.createPDF,MCash.java,"File createPDF (File file)
	{
	//	ReportEngine re = ReportEngine.get (getCtx(), ReportEngine.INVOICE, getC_Invoice_ID());
	//	if (re == null)
			return null;
	//	return re.getPDF(file);
	}	//	createPDF
"
org.compiere.model.MCash.setStatementDate,MCash.java,"void setStatementDate (String oldStatementDate,
			String newStatementDate, int windowNo) throws Exception
	{
		if ((newStatementDate == null) || (newStatementDate.length() == 0))
			return;
		Timestamp statementDate = PO.convertToTimestamp(newStatementDate);
		if (statementDate == null)
			return;
		setStatementDate(statementDate);
	}	//	setStatementDate
"
org.compiere.model.MCash.setStatementDate,MCash.java,"void setStatementDate(Timestamp statementDate)
	{
		super.setStatementDate(statementDate);
		super.setDateAcct(statementDate);
	}	//	setStatementDate
"
org.compiere.model.MCash.beforeSave,MCash.java,"boolean beforeSave (boolean newRecord)
	{
		setAD_Org_ID(getCashBook().getAD_Org_ID());
		if (getAD_Org_ID() == 0)
		{
			log.saveError(""Error"", Msg.parseTranslation(getCtx(), ""@AD_Org_ID@""));
			return false;
		}
		//	Calculate End Balance
		setEndingBalance(getBeginningBalance().add(getStatementDifference()));
		return true;
	}	//	beforeSave
"
org.compiere.model.MCash.processIt,MCash.java,"boolean processIt (String processAction)
	{
		m_processMsg = null;
		DocumentEngine engine = new DocumentEngine (this, getDocStatus());
		return engine.processIt (processAction, getDocAction());
	}	//	process
"
org.compiere.model.MCash.unlockIt,MCash.java,"boolean unlockIt()
	{
		log.info(toString());
		setProcessing(false);
		return true;
	}	//	unlockIt
"
org.compiere.model.MCash.invalidateIt,MCash.java,"boolean invalidateIt()
	{
		log.info(toString());
		setDocAction(DOCACTION_Prepare);
		return true;
	}	//	invalidateIt
"
org.compiere.model.MCash.prepareIt,MCash.java,"String prepareIt()
	{
		log.info(toString());
		m_processMsg = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_BEFORE_PREPARE);
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;

		//	Lines
		MCashLine[] lines = getLines(false);
		if (lines.length == 0)
		{
			m_processMsg = ""@NoLines@"";
			return DocActionConstants.STATUS_Invalid;
		}

		//	Std Period open?
		m_processMsg = MPeriod.isOpen(this, lines, getDateAcct(), MDocBaseType.DOCBASETYPE_CashJournal);
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;

		//	Add up Amounts
		BigDecimal difference = Env.ZERO;
		int C_Currency_ID = getC_Currency_ID();
		for (MCashLine line : lines) {
			if (!line.isActive())
				continue;
			if (C_Currency_ID == line.getC_Currency_ID())
				difference = difference.add(line.getAmount());
			else
			{
				BigDecimal amt = MConversionRate.convert(getCtx(), line.getAmount(),
					line.getC_Currency_ID(), C_Currency_ID, getDateAcct(), 0,
					getAD_Client_ID(), getAD_Org_ID());
				if (amt == null)
				{
					m_processMsg = ""No Conversion Rate found - @C_CashLine_ID@= "" + line.getLine();
					return DocActionConstants.STATUS_Invalid;
				}
				difference = difference.add(amt);
			}
		}
		setStatementDifference(difference);
	//	setEndingBalance(getBeginningBalance().add(getStatementDifference()));
		//
		m_justPrepared = true;
		if (!DOCACTION_Complete.equals(getDocAction()))
			setDocAction(DOCACTION_Complete);
		return DocActionConstants.STATUS_InProgress;
	}	//	prepareIt
"
org.compiere.model.MCash.approveIt,MCash.java,"boolean  approveIt()
	{
		log.info(toString());
		setIsApproved(true);
		return true;
	}	//	approveIt
"
org.compiere.model.MCash.rejectIt,MCash.java,"boolean rejectIt()
	{
		log.info(toString());
		setIsApproved(false);
		return true;
	}	//	rejectIt
"
org.compiere.model.MCash.completeIt,MCash.java,"String completeIt()
	{
		//	Re-Check
		if (!m_justPrepared)
		{
			String status = prepareIt();
			if (!DocActionConstants.STATUS_InProgress.equals(status))
				return status;
		}
		//	Implicit Approval
		if (!isApproved())
			approveIt();
		//
		log.info(toString());

		//	Allocation Header
		MAllocationHdr alloc = new MAllocationHdr(getCtx(), false,
			getDateAcct(), getC_Currency_ID(),
			Msg.translate(getCtx(), ""C_Cash_ID"") + "": "" + getName(), get_Trx());
		alloc.setAD_Org_ID(getAD_Org_ID());
		if (!alloc.save())
		{
			m_processMsg = ""Could not create Allocation Hdr"";
			return DocActionConstants.STATUS_Invalid;
		}
		//
		MCashLine[] lines = getLines(m_justPrepared);
		for (MCashLine cLine : lines) {
			if (X_C_CashLine.CASHTYPE_Invoice.equals(cLine.getCashType()))
			{
				boolean differentCurrency = getC_Currency_ID() != cLine.getC_Currency_ID();
				MAllocationHdr hdr = alloc;
				if (differentCurrency)
				{
					hdr = new MAllocationHdr(getCtx(), false,
						getDateAcct(), cLine.getC_Currency_ID(),
						Msg.translate(getCtx(), ""C_Cash_ID"") + "": "" + getName(), get_Trx());
					hdr.setAD_Org_ID(getAD_Org_ID());
					if (!hdr.save())
					{
						m_processMsg = ""Could not create Allocation Hdr"";
						return DocActionConstants.STATUS_Invalid;
					}
				}
				//	Allocation Line
				MAllocationLine aLine = new MAllocationLine (hdr, cLine.getAmount(),
					cLine.getDiscountAmt(), cLine.getWriteOffAmt(), Env.ZERO);
				aLine.setAD_Org_ID(cLine.getAD_Org_ID());
				aLine.setC_Invoice_ID(cLine.getC_Invoice_ID());
				aLine.setC_CashLine_ID(cLine.getC_CashLine_ID());
				if (!aLine.save())
				{
					m_processMsg = ""Could not create Allocation Line"";
					return DocActionConstants.STATUS_Invalid;
				}
				if (differentCurrency)
				{
					//	Should start WF
					hdr.processIt(DocActionConstants.ACTION_Complete);
					hdr.save();
				}
			}
			else if (X_C_CashLine.CASHTYPE_BankAccountTransfer.equals(cLine.getCashType()))
			{
				//	Payment just as intermediate info
				MPayment pay = new MPayment (getCtx(), 0, get_Trx());
				pay.setAD_Org_ID(getAD_Org_ID());
				String documentNo = getName();
				pay.setDocumentNo(documentNo);
				pay.setR_PnRef(documentNo);
				pay.set_Value(""TrxType"", ""X"");		//	Transfer
				pay.set_Value(""TenderType"", ""X"");
				//
				pay.setC_BankAccount_ID(cLine.getC_BankAccount_ID());
				pay.setC_DocType_ID(true);	//	Receipt
				pay.setDateTrx(getStatementDate());
				pay.setDateAcct(getDateAcct());
				pay.setAmount(cLine.getC_Currency_ID(), cLine.getAmount().negate());	//	Transfer
				pay.setDescription(cLine.getDescription());
				pay.setDocStatus(X_C_Payment.DOCSTATUS_Closed);
				pay.setDocAction(X_C_Payment.DOCACTION_None);
				pay.setPosted(true);
				pay.setIsAllocated(true);	//	Has No Allocation!
				pay.setProcessed(true);
				if (!pay.save())
				{
					m_processMsg = ""Could not create Payment"";
					return DocActionConstants.STATUS_Invalid;
				}
			}
		}
		//	Should start WF
		alloc.processIt(DocActionConstants.ACTION_Complete);
		alloc.save();

		//	User Validation
		String valid = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_AFTER_COMPLETE);
		if (valid != null)
		{
			m_processMsg = valid;
			return DocActionConstants.STATUS_Invalid;
		}
		//
		setProcessed(true);
		setDocAction(DOCACTION_Close);
		return DocActionConstants.STATUS_Completed;
	}	//	completeIt
"
org.compiere.model.MCash.voidIt,MCash.java,"boolean voidIt()
	{
		log.info(toString());
		setDocAction(DOCACTION_None);
		return false;
	}	//	voidIt
"
org.compiere.model.MCash.closeIt,MCash.java,"boolean closeIt()
	{
		log.info(toString());
		setDocAction(DOCACTION_None);
		return true;
	}	//	closeIt
"
org.compiere.model.MCash.reverseCorrectIt,MCash.java,"boolean reverseCorrectIt()
	{
		log.info(toString());
		return false;
	}	//	reverseCorrectionIt
"
org.compiere.model.MCash.reverseAccrualIt,MCash.java,"boolean reverseAccrualIt()
	{
		log.info(toString());
		return false;
	}	//	reverseAccrualIt
"
org.compiere.model.MCash.reActivateIt,MCash.java,"boolean reActivateIt()
	{
		log.info(toString());
		setProcessed(false);
		if (reverseCorrectIt())
			return true;
		return false;
	}	//	reActivateIt
"
org.compiere.model.MCash.setProcessed,MCash.java,"void setProcessed (boolean processed)
	{
		super.setProcessed (processed);
		String sql = ""UPDATE C_CashLine SET Processed='""
			+ (processed ? ""Y"" : ""N"")
			+ ""' WHERE C_Cash_ID="" + getC_Cash_ID();
		int noLine = DB.executeUpdate (sql, get_Trx());
		m_lines = null;
		log.fine(processed + "" - Lines="" + noLine);
	}	//	setProcessed
"
org.compiere.model.MCash.toString,MCash.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MCash["");
		sb.append (get_ID ())
			.append (""-"").append (getName())
			.append("", Balance="").append(getBeginningBalance())
			.append(""->"").append(getEndingBalance())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MCash.getSummary,MCash.java,"String getSummary()
	{
		StringBuffer sb = new StringBuffer();
		sb.append(getName());
		//	: Total Lines = 123.00 (#1)
		sb.append("": "")
			.append(Msg.translate(getCtx(),""BeginningBalance"")).append(""="").append(getBeginningBalance())
			.append("","")
			.append(Msg.translate(getCtx(),""EndingBalance"")).append(""="").append(getEndingBalance())
			.append("" (#"").append(getLines(false).length).append("")"");
		//	 - Description
		if ((getDescription() != null) && (getDescription().length() > 0))
			sb.append("" - "").append(getDescription());
		return sb.toString();
	}	//	getSummary
"
org.compiere.model.MCash.getProcessMsg,MCash.java,"String getProcessMsg()
	{
		return m_processMsg;
	}	//	getProcessMsg
"
org.compiere.model.MCash.getDoc_User_ID,MCash.java,"int getDoc_User_ID()
	{
		return getCreatedBy();
	}	//	getDoc_User_ID
"
org.compiere.model.MCash.getApprovalAmt,MCash.java,"BigDecimal getApprovalAmt()
	{
		return getStatementDifference();
	}	//	getApprovalAmt
"
org.compiere.model.MCash.getC_Currency_ID,MCash.java,"int getC_Currency_ID ()
	{
		return getCashBook().getC_Currency_ID();
	}	//	getC_Currency_ID
"
org.compiere.model.MForm.afterSave,MForm.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (newRecord)
		{
			int AD_Role_ID = getCtx().getAD_Role_ID();
			MFormAccess pa = new MFormAccess(this, AD_Role_ID);
			pa.save();
		}
		return success;
	}	//	afterSave
"
org.compiere.model.MLotCtl.createLot,MLotCtl.java,"MLot createLot (int M_Product_ID)
	{
		StringBuffer name = new StringBuffer();
		if (getPrefix() != null)
			name.append(getPrefix());
		int no = getCurrentNext();
		name.append(no);
		if (getSuffix() != null)
			name.append(getSuffix());
		//
		no += getIncrementNo();
		setCurrentNext(no);
		save();
		//
		MLot retValue = new MLot (this, M_Product_ID, name.toString());
		retValue.save();
		return retValue;
	}	//	createLot
"
org.compiere.model.MRequestUpdate.isNewInfo,MRequestUpdate.java,"boolean isNewInfo()
	{
		return getResult() != null;
	}	//	isNewInfo
"
org.compiere.model.MRequestUpdate.getCreatedByName,MRequestUpdate.java,"String getCreatedByName()
	{
		MUser user = MUser.get(getCtx(), getCreatedBy());
		return user.getName();
	}	//	getCreatedByName
"
org.compiere.model.MRequestUpdate.getConfidentialEntryText,MRequestUpdate.java,"String getConfidentialEntryText()
	{
		return MRefList.getListName(getCtx(), CONFIDENTIALTYPEENTRY_AD_Reference_ID, getConfidentialTypeEntry());
	}	//	getConfidentialTextEntry
"
org.compiere.model.MRequestUpdate.beforeSave,MRequestUpdate.java,"boolean beforeSave (boolean newRecord)
	{
		if (getConfidentialTypeEntry() == null)
			setConfidentialTypeEntry(CONFIDENTIALTYPEENTRY_PublicInformation);
		return true;
	}	//	beforeSave
"
org.compiere.model.MFactAcct.delete,MFactAcct.java,"int delete (int AD_Table_ID, int Record_ID, Trx trx)
	{
		StringBuffer sb = new StringBuffer();
		sb.append(""DELETE FROM Fact_Acct WHERE AD_Table_ID="").append(AD_Table_ID)
			.append("" AND Record_ID="").append(Record_ID);
		int no = DB.executeUpdate(sb.toString(), trx);
		if (no == -1)
			s_log.log(Level.SEVERE, ""failed: AD_Table_ID="" + AD_Table_ID + "", Record_ID"" + Record_ID);
		else
			s_log.fine(""delete - AD_Table_ID="" + AD_Table_ID 
				+ "", Record_ID="" + Record_ID + "" - #"" + no);
		return no;
	}	//	delete
"
org.compiere.model.MFactAcct.toString,MFactAcct.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MFactAcct["");
		sb.append(get_ID()).append(""-Acct="").append(getAccount_ID())
			.append("",Dr="").append(getAmtSourceDr()).append(""|"").append(getAmtAcctDr())
			.append("",Cr="").append(getAmtSourceCr()).append(""|"").append(getAmtAcctCr())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MFactAcct.getMAccount,MFactAcct.java,"MAccount getMAccount()
	{
		MAccount acct = MAccount.get (getCtx(), getAD_Client_ID(), getAD_Org_ID(),
			getC_AcctSchema_ID(), getAccount_ID(), getC_SubAcct_ID(),
			getM_Product_ID(), getC_BPartner_ID(), getAD_OrgTrx_ID(), 
			getC_LocFrom_ID(), getC_LocTo_ID(), getC_SalesRegion_ID(), 
			getC_Project_ID(), getC_Campaign_ID(), getC_Activity_ID(),
			getUser1_ID(), getUser2_ID(), getUserElement1_ID(), getUserElement2_ID());
		if (acct != null && acct.get_ID() == 0)
			acct.save();
		return acct;
	}	//	getMAccount
"
org.compiere.model.MUOMConversion.convert,MUOMConversion.java,"BigDecimal convert (Ctx ctx,
		int C_UOM_ID, int C_UOM_To_ID, BigDecimal qty)
	{
		if (qty == null || qty.equals(Env.ZERO) || C_UOM_ID == C_UOM_To_ID)
			return qty;
		BigDecimal retValue = getRate (ctx, C_UOM_ID, C_UOM_To_ID);
		if (retValue != null)
		{
			MUOM uom = MUOM.get (ctx, C_UOM_To_ID);
			if (uom != null)
				return uom.round(retValue.multiply(qty), true);
			return retValue.multiply(qty);
		}
		return null;
	}	//	convert
"
org.compiere.model.MUOMConversion.getRate,MUOMConversion.java,"BigDecimal getRate (Ctx ctx,
		int C_UOM_ID, int C_UOM_To_ID)
	{
		//	nothing to do
		if (C_UOM_ID == C_UOM_To_ID)
			return Env.ONE;
		//
		Point p = new Point(C_UOM_ID, C_UOM_To_ID);
		//	get conversion
		BigDecimal retValue = getRate (ctx, p);
		return retValue;
	}	//	convert
"
org.compiere.model.MUOMConversion.convertToMinutes,MUOMConversion.java,"int convertToMinutes (Ctx ctx,
		int C_UOM_ID, BigDecimal qty)
	{
		if (qty == null)
			return 0;
		int C_UOM_To_ID = MUOM.getMinute_UOM_ID(ctx);
		if (C_UOM_ID == C_UOM_To_ID)
			return qty.intValue();
		//
		BigDecimal result = convert (ctx, C_UOM_ID, C_UOM_To_ID, qty);
		if (result == null)
			return 0;
		return result.intValue();
	}	//	convert
"
org.compiere.model.MUOMConversion.getEndDate,MUOMConversion.java,"Timestamp getEndDate (Ctx ctx, Timestamp startDate, int C_UOM_ID, BigDecimal qty)
	{
		GregorianCalendar endDate = new GregorianCalendar();
		endDate.setTime(startDate);
		//
		int minutes = MUOMConversion.convertToMinutes (ctx, C_UOM_ID, qty);
		endDate.add(Calendar.MINUTE, minutes);
		//
		Timestamp retValue = new Timestamp(endDate.getTimeInMillis());
	//	log.config( ""TimeUtil.getEndDate"", ""Start="" + startDate
	//		+ "", Qty="" + qty + "", End="" + retValue);
		return retValue;
	}	//	startDate
"
org.compiere.model.MUOMConversion.getRate,MUOMConversion.java,"BigDecimal getRate (Ctx ctx, Point p)
	{
		BigDecimal retValue = null;
		if (Ini.isClient())
		{
			if (s_conversions.isEmpty())
				createRates(ctx);
			retValue = s_conversions.get(null, p);
		}
		else
			retValue = getRate (p.x, p.y);
		if (retValue != null)
			return retValue;
		//	try to derive
		return deriveRate (ctx, p.x, p.y);
	}	//	getConversion
"
org.compiere.model.MUOMConversion.createRates,MUOMConversion.java,"void createRates (Ctx ctx)
	{
		//
		String sql = MRole.getDefault(ctx, false).addAccessSQL (
			""SELECT C_UOM_ID, C_UOM_To_ID, MultiplyRate, DivideRate ""
			+ ""FROM C_UOM_Conversion ""
			+ ""WHERE IsActive='Y' AND M_Product_ID IS NULL"",
			""C_UOM_Conversion"", MRole.SQL_NOTQUALIFIED, MRole.SQL_RO);
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				Point p = new Point (rs.getInt(1), rs.getInt(2));
				BigDecimal mr = rs.getBigDecimal(3);
				BigDecimal dr = rs.getBigDecimal(4);
				if (mr != null)
					s_conversions.put(p, mr);
				//	reverse
				if (dr == null && mr != null)
					dr = Env.ONE.divide(mr, BigDecimal.ROUND_HALF_UP);
				if (dr != null)
					s_conversions.put(new Point(p.y,p.x), dr);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
	}	//	createRatess
"
org.compiere.model.MUOMConversion.deriveRate,MUOMConversion.java,"BigDecimal deriveRate (Ctx ctx,
		int C_UOM_ID, int C_UOM_To_ID)
	{
		if (C_UOM_ID == C_UOM_To_ID)
			return Env.ONE;
		//	get Info
		MUOM from = MUOM.get (ctx, C_UOM_ID);
		MUOM to = MUOM.get (ctx, C_UOM_To_ID);
		if (from == null || to == null)
			return null;

		//	Time - Minute
		if (from.isMinute())
		{
			if (to.isHour())
				return new BigDecimal(1.0/60.0);
			if (to.isDay())
				return new BigDecimal(1.0/1440.0);		//	24 * 60
			if (to.isWorkDay())
				return new BigDecimal(1.0/480.0);		//	8 * 60
			if (to.isWeek())
				return new BigDecimal(1.0/10080.0);		//	7 * 24 * 60
			if (to.isMonth())
				return new BigDecimal(1.0/43200.0);		//	30 * 24 * 60
			if (to.isWorkMonth())
				return new BigDecimal(1.0/9600.0);		//	4 * 5 * 8 * 60
			if (to.isYear())
				return new BigDecimal(1.0/525600.0);	//	365 * 24 * 60
		}
		//	Time - Hour
		if (from.isHour())
		{
			if (to.isMinute())
				return new BigDecimal(60.0);
			if (to.isDay())
				return new BigDecimal(1.0/24.0);
			if (to.isWorkDay())
				return new BigDecimal(1.0/8.0);
			if (to.isWeek())
				return new BigDecimal(1.0/168.0);		//	7 * 24
			if (to.isMonth())
				return new BigDecimal(1.0/720.0);		//	30 * 24
			if (to.isWorkMonth())
				return new BigDecimal(1.0/160.0);		//	4 * 5 * 8
			if (to.isYear())
				return new BigDecimal(1.0/8760.0);		//	365 * 24
		}
		//	Time - Day
		if (from.isDay())
		{
			if (to.isMinute())
				return new BigDecimal(1440.0);			//	24 * 60
			if (to.isHour())
				return new BigDecimal(24.0);
			if (to.isWorkDay())
				return new BigDecimal(3.0);				//	24 / 8
			if (to.isWeek())
				return new BigDecimal(1.0/7.0);			//	7
			if (to.isMonth())
				return new BigDecimal(1.0/30.0);		//	30
			if (to.isWorkMonth())
				return new BigDecimal(1.0/20.0);		//	4 * 5
			if (to.isYear())
				return new BigDecimal(1.0/365.0);		//	365
		}
		//	Time - WorkDay
		if (from.isWorkDay())
		{
			if (to.isMinute())
				return new BigDecimal(480.0);			//	8 * 60
			if (to.isHour())
				return new BigDecimal(8.0);				//	8
			if (to.isDay())
				return new BigDecimal(1.0/3.0);			//	24 / 8
			if (to.isWeek())
				return new BigDecimal(1.0/5);			//	5
			if (to.isMonth())
				return new BigDecimal(1.0/20.0);		//	4 * 5
			if (to.isWorkMonth())
				return new BigDecimal(1.0/20.0);		//	4 * 5
			if (to.isYear())
				return new BigDecimal(1.0/240.0);		//	4 * 5 * 12
		}
		//	Time - Week
		if (from.isWeek())
		{
			if (to.isMinute())
				return new BigDecimal(10080.0);			//	7 * 24 * 60
			if (to.isHour())
				return new BigDecimal(168.0);			//	7 * 24
			if (to.isDay())
				return new BigDecimal(7.0);
			if (to.isWorkDay())
				return new BigDecimal(5.0);
			if (to.isMonth())
				return new BigDecimal(1.0/4.0);			//	4
			if (to.isWorkMonth())
				return new BigDecimal(1.0/4.0);			//	4
			if (to.isYear())
				return new BigDecimal(1.0/50.0);		//	50
		}
		//	Time - Month
		if (from.isMonth())
		{
			if (to.isMinute())
				return new BigDecimal(43200.0);			//	30 * 24 * 60
			if (to.isHour())
				return new BigDecimal(720.0);			//	30 * 24
			if (to.isDay())
				return new BigDecimal(30.0);			//	30
			if (to.isWorkDay())
				return new BigDecimal(20.0);			//	4 * 5
			if (to.isWeek())
				return new BigDecimal(4.0);				//	4
			if (to.isWorkMonth())
				return new BigDecimal(1.5);				//	30 / 20
			if (to.isYear())
				return new BigDecimal(1.0/12.0);		//	12
		}
		//	Time - WorkMonth
		if (from.isWorkMonth())
		{
			if (to.isMinute())
				return new BigDecimal(9600.0);			//	4 * 5 * 8 * 60
			if (to.isHour())
				return new BigDecimal(160.0);			//	4 * 5 * 8
			if (to.isDay())
				return new BigDecimal(20.0);			//	4 * 5
			if (to.isWorkDay())
				return new BigDecimal(20.0);			//	4 * 5
			if (to.isWeek())
				return new BigDecimal(4.0);				//	4
			if (to.isMonth())
				return new BigDecimal(20.0/30.0);		//	20 / 30
			if (to.isYear())
				return new BigDecimal(1.0/12.0);		//	12
		}
		//	Time - Year
		if (from.isYear())
		{
			if (to.isMinute())
				return new BigDecimal(518400.0);		//	12 * 30 * 24 * 60
			if (to.isHour())
				return new BigDecimal(8640.0);			//	12 * 30 * 24
			if (to.isDay())
				return new BigDecimal(365.0);			//	365
			if (to.isWorkDay())
				return new BigDecimal(240.0);			//	12 * 4 * 5
			if (to.isWeek())
				return new BigDecimal(50.0);			//	52
			if (to.isMonth())
				return new BigDecimal(12.0);			//	12
			if (to.isWorkMonth())
				return new BigDecimal(12.0);			//	12
		}
		//
		return null;
	}	//	deriveRate
"
org.compiere.model.MUOMConversion.getRate,MUOMConversion.java,"BigDecimal getRate (int C_UOM_ID, int C_UOM_To_ID)
	{
		return convert (C_UOM_ID, C_UOM_To_ID, GETRATE, false);
	}	//	getConversion
"
org.compiere.model.MUOMConversion.convert,MUOMConversion.java,"BigDecimal convert (int C_UOM_From_ID, int C_UOM_To_ID, 
		BigDecimal qty, boolean StdPrecision)
	{
		//  Nothing to do
		if (qty == null || qty.equals(Env.ZERO)
				|| C_UOM_From_ID == C_UOM_To_ID)
			return qty;
		//
		BigDecimal retValue = null;
		int precision = 2;
		String sql = ""SELECT c.MultiplyRate, uomTo.StdPrecision, uomTo.CostingPrecision ""
			+ ""FROM	C_UOM_Conversion c""
			+ "" INNER JOIN C_UOM uomTo ON (c.C_UOM_To_ID=uomTo.C_UOM_ID) ""
			+ ""WHERE c.IsActive='Y' AND c.C_UOM_ID=? AND c.C_UOM_To_ID=? ""		//	#1/2
			+ "" AND c.M_Product_ID IS NULL""
			+ ""ORDER BY c.AD_Client_ID DESC, c.AD_Org_ID DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_UOM_From_ID);
			pstmt.setInt(2, C_UOM_To_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				retValue = rs.getBigDecimal(1);
				precision = rs.getInt(StdPrecision ? 2 : 3);
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		if (retValue == null)
		{
			s_log.info (""NOT found - FromUOM="" + C_UOM_From_ID
				+ "", ToUOM="" + C_UOM_To_ID);
			return null;
		}
			
		//	Just get Rate
		if (GETRATE.equals(qty))
			return retValue;
		
		//	Calculate & Scale
		retValue = retValue.multiply(qty);
		if (retValue.scale() > precision)
			retValue = retValue.setScale(precision, BigDecimal.ROUND_HALF_UP);
		return retValue;
	}   //  convert
"
org.compiere.model.MUOMConversion.convertProductTo,MUOMConversion.java,"BigDecimal convertProductTo (Ctx ctx,
		int M_Product_ID, int C_UOM_To_ID, BigDecimal qtyPrice)
	{
		if (qtyPrice == null || qtyPrice.signum() == 0 
			|| M_Product_ID == 0 || C_UOM_To_ID == 0)
			return qtyPrice;
		
		BigDecimal retValue = getProductRateTo (ctx, M_Product_ID, C_UOM_To_ID);
		if (retValue != null)
		{
			if (Env.ONE.compareTo(retValue) == 0)
				return qtyPrice;
			MUOM uom = MUOM.get (ctx, C_UOM_To_ID);
			if (uom != null)
				return uom.round(retValue.multiply(qtyPrice), true);
			return retValue.multiply(qtyPrice);
		}
		return null;
	}	//	convertProductTo
"
org.compiere.model.MUOMConversion.getProductRateTo,MUOMConversion.java,"BigDecimal getProductRateTo (Ctx ctx,
		int M_Product_ID, int C_UOM_To_ID)
	{
		if (M_Product_ID == 0)
			return null;
		MUOMConversion[] rates = getProductConversions(ctx, M_Product_ID, false);
		if (rates.length == 0)
		{
			s_log.fine(""None found"");
			return null;
		}
		
		for (MUOMConversion rate : rates) {
			if (rate.getC_UOM_To_ID() == C_UOM_To_ID)
				return rate.getMultiplyRate();
		}
		s_log.fine(""None applied"");
		return null;
	}	//	getProductRateTo
"
org.compiere.model.MUOMConversion.convertProductFrom,MUOMConversion.java,"BigDecimal convertProductFrom (Ctx ctx,
		int M_Product_ID, int C_UOM_To_ID, BigDecimal qtyPrice)
	{
		//	No conversion
		if (qtyPrice == null || qtyPrice.equals(Env.ZERO) 
			|| C_UOM_To_ID == 0|| M_Product_ID == 0)
		{
			s_log.fine(""No Conversion - QtyPrice="" + qtyPrice);
			return qtyPrice;
		}
		
		BigDecimal retValue = getProductRateFrom (ctx, M_Product_ID, C_UOM_To_ID);
		if (retValue != null)
		{
			if (Env.ONE.compareTo(retValue) == 0)
				return qtyPrice;
			MUOM uom = MUOM.get (ctx, C_UOM_To_ID);
			if (uom != null)
				return uom.round(retValue.multiply(qtyPrice), true);
			return retValue.multiply(qtyPrice);
		}
		s_log.fine(""No Rate M_Product_ID="" + M_Product_ID);
		return null;
	}	//	convertProductFrom
"
org.compiere.model.MUOMConversion.getProductRateFrom,MUOMConversion.java,"BigDecimal getProductRateFrom (Ctx ctx,
		int M_Product_ID, int C_UOM_To_ID)
	{
		MUOMConversion[] rates = getProductConversions(ctx, M_Product_ID, false);
		if (rates.length == 0)
		{
			s_log.fine(""None found"");
			return null;
		}
		
		for (MUOMConversion rate : rates) {
			if (rate.getC_UOM_To_ID() == C_UOM_To_ID)
				return rate.getDivideRate();
		}
		s_log.fine(""None applied"");
		return null;
	}	//	getProductRateFrom
"
org.compiere.model.MUOMConversion.getProductConversions,MUOMConversion.java,"MUOMConversion[] getProductConversions (Ctx ctx, int M_Product_ID, boolean requery)
	{
		if (M_Product_ID == 0)
			return new MUOMConversion[0];
		Integer key = Integer.valueOf (M_Product_ID);
		MUOMConversion[] result = s_conversionProduct.get(ctx, key);
		if (!requery && result != null)
			return result;
		
		ArrayList<MUOMConversion> list = new ArrayList<MUOMConversion>();
		//	Add default conversion 1:1
		MUOMConversion defRate = new MUOMConversion (MProduct.get(ctx, M_Product_ID));
		list.add(defRate);
		//
		String sql = ""SELECT * FROM C_UOM_Conversion c ""
			+ ""WHERE c.M_Product_ID=?""
			+ "" AND EXISTS (SELECT * FROM M_Product p ""
				+ ""WHERE c.M_Product_ID=p.M_Product_ID AND c.C_UOM_ID=p.C_UOM_ID)""
			+ "" AND c.IsActive='Y'"";  
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, M_Product_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add(new MUOMConversion(ctx, rs, null));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		//	Convert & save
		result = new MUOMConversion[list.size ()];
		list.toArray (result);
		s_conversionProduct.put(key, result);
		s_log.fine(""M_Product_ID="" + M_Product_ID + "" #"" + result.length);
		return result;
	}	//	getProductConversions
"
org.compiere.model.MUOMConversion.beforeSave,MUOMConversion.java,"boolean beforeSave (boolean newRecord)
	{
		//	From - To is the same
		if (getC_UOM_ID() == getC_UOM_To_ID())
		{
			log.saveError(""Error"", Msg.parseTranslation(getCtx(), ""@C_UOM_ID@ = @C_UOM_ID@""));
			return false;
		}
		//	Nothing to convert
		if (getMultiplyRate().compareTo(Env.ZERO) <= 0)
		{
			log.saveError(""Error"", Msg.parseTranslation(getCtx(), ""@MultiplyRate@ <= 0""));
			return false;
		}
		//	Enforce Product UOM
		if (getM_Product_ID() != 0 
			&& (newRecord || is_ValueChanged(""M_Product_ID"")))
		{
			MProduct product = MProduct.get(getCtx(), getM_Product_ID());
			if (product.getC_UOM_ID() != getC_UOM_ID())
			{
				MUOM uom = MUOM.get(getCtx(), product.getC_UOM_ID());
				log.saveError(""ProductUOMConversionUOMError"", uom.getName());
				return false;
			}
		}

		//	The Product UoM needs to be the smallest UoM - Multiplier  must be > 0
		if (getM_Product_ID() != 0 && getDivideRate().compareTo(Env.ONE) < 0)
		{
			log.saveError(""ProductUOMConversionRateError"", ""DivideRate="" + getDivideRate() + "" < 1"");
			return false;
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MUOMConversion.toString,MUOMConversion.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MUOMConversion["");
		sb.append(get_ID()).append(""-C_UOM_ID="").append(getC_UOM_ID())
			.append("",C_UOM_To_ID="").append(getC_UOM_To_ID())
			.append("",M_Product_ID="").append(getM_Product_ID())
			.append(""-Multiply="").append(getMultiplyRate())
			.append(""/Divide="").append(getDivideRate())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MUOMConversion.setMultiplyRate,MUOMConversion.java,"void setMultiplyRate (String MultiplyRateOld, 
			String MultiplyRateNew, int windowNo) throws Exception
	{
		setMultiplyRate(convertToBigDecimal(MultiplyRateNew));
	}	//	setMultiplyRate
"
org.compiere.model.MUOMConversion.setMultiplyRate,MUOMConversion.java,"void setMultiplyRate (BigDecimal MultiplyRate)
	{
		if (MultiplyRate == null 
			|| MultiplyRate.signum() == 0 
			|| MultiplyRate.compareTo(Env.ONE) == 0)
		{
			super.setDivideRate(Env.ONE);
			super.setMultiplyRate(Env.ONE);
		}
		else
		{
			super.setMultiplyRate(MultiplyRate);
			double dd = 1 / MultiplyRate.doubleValue();
			super.setDivideRate(new BigDecimal(dd));
		}
	}	//	setMultiplyRate
"
org.compiere.model.MUOMConversion.setDivideRate,MUOMConversion.java,"void setDivideRate (String DivideRateOld, 
			String DivideRateNew, int WindowNo) throws Exception
	{
		setDivideRate(convertToBigDecimal(DivideRateNew));
	}	//	setDivideRate
"
org.compiere.model.MUOMConversion.setDivideRate,MUOMConversion.java,"void setDivideRate (BigDecimal DivideRate)
	{
		if (DivideRate == null 
			|| DivideRate.signum() == 0 
			|| DivideRate.compareTo(Env.ONE) == 0)
		{
			super.setDivideRate(Env.ONE);
			super.setMultiplyRate(Env.ONE);
		}
		else
		{
			super.setDivideRate(DivideRate);
			double dd = 1 / DivideRate.doubleValue();
			super.setMultiplyRate(new BigDecimal(dd));
		}
	}	//	setDivideRate
"
org.compiere.model.CalloutInvoiceBatch.date,CalloutInvoiceBatch.java,"String date (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		if (value == null)
			return """";
		mTab.setValue (""DateAcct"", value);
		//
		setDocumentNo(ctx, WindowNo, mTab);
		return """";
	}	//	date
"
org.compiere.model.CalloutInvoiceBatch.bPartner,CalloutInvoiceBatch.java,"String bPartner (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer C_BPartner_ID = (Integer)value;
		if (C_BPartner_ID == null || C_BPartner_ID.intValue() == 0)
			return """";

		String sql = ""SELECT p.AD_Language,p.C_PaymentTerm_ID,""
			+ "" COALESCE(p.M_PriceList_ID,g.M_PriceList_ID) AS M_PriceList_ID, p.PaymentRule,p.POReference,""
			+ "" p.SO_Description,p.IsDiscountPrinted,""
			+ "" p.SO_CreditLimit, p.SO_CreditLimit-p.SO_CreditUsed AS CreditAvailable,""
			+ "" l.C_BPartner_Location_ID,c.AD_User_ID,""
			+ "" COALESCE(p.PO_PriceList_ID,g.PO_PriceList_ID) AS PO_PriceList_ID, p.PaymentRulePO,p.PO_PaymentTerm_ID ""
			+ ""FROM C_BPartner p""
			+ "" INNER JOIN C_BP_Group g ON (p.C_BP_Group_ID=g.C_BP_Group_ID)""
			+ "" LEFT OUTER JOIN C_BPartner_Location l ON (p.C_BPartner_ID=l.C_BPartner_ID AND l.IsBillTo='Y' AND l.IsActive='Y')""
			+ "" LEFT OUTER JOIN AD_User c ON (p.C_BPartner_ID=c.C_BPartner_ID) ""
			+ ""WHERE p.C_BPartner_ID=? AND p.IsActive='Y'"";		//	#1

		boolean IsSOTrx = ctx.isSOTrx(WindowNo);
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_BPartner_ID.intValue());
			ResultSet rs = pstmt.executeQuery();
			//
			if (rs.next())
			{
				//	PaymentRule
				String s = rs.getString(IsSOTrx ? ""PaymentRule"" : ""PaymentRulePO"");
				if (s != null && s.length() != 0)
				{
					if (ctx.getContext( WindowNo, ""DocBaseType"").endsWith(""C""))	//	Credits are Payment Term
						s = ""P"";
					else if (IsSOTrx && (s.equals(""S"") || s.equals(""U"")))	//	No Check/Transfer for SO_Trx
						s = ""P"";											//  Payment Term
			//		mTab.setValue(""PaymentRule"", s);
				}
				//  Payment Term
				Integer ii = Integer.valueOf(rs.getInt(IsSOTrx ? ""C_PaymentTerm_ID"" : ""PO_PaymentTerm_ID""));
				if (!rs.wasNull())
					mTab.setValue(""C_PaymentTerm_ID"", ii);

				//	Location
				int locID = rs.getInt(""C_BPartner_Location_ID"");
				//	overwritten by InfoBP selection - works only if InfoWindow
				//	was used otherwise creates error (uses last value, may belong to differnt BP)
				if (C_BPartner_ID.toString().equals(ctx.getContext( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_BPartner_ID"")))
				{
					String loc = ctx.getContext( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_BPartner_Location_ID"");
					if (loc.length() > 0)
						locID = Integer.parseInt(loc);
				}
				if (locID == 0)
					mTab.setValue(""C_BPartner_Location_ID"", null);
				else
					mTab.setValue(""C_BPartner_Location_ID"", Integer.valueOf(locID));

				//	Contact - overwritten by InfoBP selection
				int contID = rs.getInt(""AD_User_ID"");
				if (C_BPartner_ID.toString().equals(ctx.getContext( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""C_BPartner_ID"")))
				{
					String cont = ctx.getContext( EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""AD_User_ID"");
					if (cont.length() > 0)
						contID = Integer.parseInt(cont);
				}
				if (contID == 0)
					mTab.setValue(""AD_User_ID"", null);
				else
					mTab.setValue(""AD_User_ID"", Integer.valueOf(contID));

				//	CreditAvailable
				if (IsSOTrx)
				{
					double CreditLimit = rs.getDouble(""SO_CreditLimit"");
					if (CreditLimit != 0)
					{
						double CreditAvailable = rs.getDouble(""CreditAvailable"");
						if (!rs.wasNull() && CreditAvailable < 0)
							mTab.fireDataStatusEEvent(""CreditLimitOver"",
								DisplayType.getNumberFormat(DisplayTypeConstants.Amount).format(CreditAvailable),
								false);
					}
				}
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
			return e.getLocalizedMessage();
		}
		//
		setDocumentNo(ctx, WindowNo, mTab);
		return tax (ctx, WindowNo, mTab, mField, value);
	}	//	bPartner
"
org.compiere.model.CalloutInvoiceBatch.docType,CalloutInvoiceBatch.java,"String docType (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		setDocumentNo(ctx, WindowNo, mTab);
		return """";
	}	//	docType
"
org.compiere.model.CalloutInvoiceBatch.setDocumentNo,CalloutInvoiceBatch.java,"void setDocumentNo (Ctx ctx, int WindowNo, GridTab mTab)
	{
		//	Get last line
		int C_InvoiceBatch_ID = ctx.getContextAsInt( WindowNo, ""C_InvoiceBatch_ID"");
		String sql = ""SELECT COALESCE(MAX(C_InvoiceBatchLine_ID),0) FROM C_InvoiceBatchLine WHERE C_InvoiceBatch_ID=?"";
		int C_InvoiceBatchLine_ID = DB.getSQLValue(null, sql, C_InvoiceBatch_ID);
		if (C_InvoiceBatchLine_ID == 0)
			return;
		MInvoiceBatchLine last = new MInvoiceBatchLine(Env.getCtx(), C_InvoiceBatchLine_ID, null);

		//	Need to Increase when different DocType or BP
		int C_DocType_ID = ctx.getContextAsInt( WindowNo, ""C_DocType_ID"");
		int C_BPartner_ID = ctx.getContextAsInt( WindowNo, ""C_BPartner_ID"");
		if (C_DocType_ID == last.getC_DocType_ID()
			&& C_BPartner_ID == last.getC_BPartner_ID())
			return;

		//	New Number
		String oldDocNo = last.getDocumentNo();
		if (oldDocNo == null)
			return;
		int docNo = 0;
		try
		{
			docNo = Integer.parseInt(oldDocNo);
		}
		catch (Exception e)
		{
		}
		if (docNo == 0)
			return;
		String newDocNo = String.valueOf(docNo+1);
		mTab.setValue(""DocumentNo"", newDocNo);
	}	//	setDocumentNo
"
org.compiere.model.CalloutInvoiceBatch.charge,CalloutInvoiceBatch.java,"String charge (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer C_Charge_ID = (Integer)value;
		if (C_Charge_ID == null || C_Charge_ID.intValue() == 0)
			return """";

		String sql = ""SELECT ChargeAmt FROM C_Charge WHERE C_Charge_ID=?"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_Charge_ID.intValue());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				mTab.setValue (""PriceEntered"", rs.getBigDecimal (1));
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
			return e.getLocalizedMessage();
		}
		//
		return tax (ctx, WindowNo, mTab, mField, value);
	}	//	charge
"
org.compiere.model.CalloutInvoiceBatch.tax,CalloutInvoiceBatch.java,"String tax (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		String column = mField.getColumnName();
		if (value == null)
			return """";

		int C_Charge_ID = 0;
		if (column.equals(""C_Charge_ID""))
			C_Charge_ID = ((Integer)value).intValue();
		else
			C_Charge_ID = ctx.getContextAsInt( WindowNo, ""C_Charge_ID"");
		log.fine(""C_Charge_ID="" + C_Charge_ID);
		if (C_Charge_ID == 0)
			return amt (ctx, WindowNo, mTab, mField, value);	//

		//	Check Partner Location
		int C_BPartner_Location_ID = ctx.getContextAsInt( WindowNo, ""C_BPartner_Location_ID"");
		if (C_BPartner_Location_ID == 0)
			return amt (ctx, WindowNo, mTab, mField, value);	//
		log.fine(""BP_Location="" + C_BPartner_Location_ID);

		//	Dates
		Timestamp billDate = new Timestamp(ctx.getContextAsTime( WindowNo, ""DateInvoiced""));
		log.fine(""Bill Date="" + billDate);
		Timestamp shipDate = billDate;
		log.fine(""Ship Date="" + shipDate);

		int AD_Org_ID = ctx.getContextAsInt( WindowNo, ""AD_Org_ID"");
		log.fine(""Org="" + AD_Org_ID);

		int M_Warehouse_ID = ctx.getContextAsInt( ""#M_Warehouse_ID"");
		log.fine(""Warehouse="" + M_Warehouse_ID);

		//
		int C_Tax_ID = Tax.get(ctx, 0, C_Charge_ID, billDate, shipDate,
			AD_Org_ID, M_Warehouse_ID, C_BPartner_Location_ID, C_BPartner_Location_ID,
			ctx.getContext( WindowNo, ""IsSOTrx"").equals(""Y""));
		log.info(""Tax ID="" + C_Tax_ID);
		//
		if (C_Tax_ID == 0)
			mTab.fireDataStatusEEvent(CLogger.retrieveError());
		else
			mTab.setValue(""C_Tax_ID"", Integer.valueOf(C_Tax_ID));
		//
		return amt (ctx, WindowNo, mTab, mField, value);
	}	//	tax
"
org.compiere.model.CalloutInvoiceBatch.amt,CalloutInvoiceBatch.java,"String amt (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		if (isCalloutActive() || value == null)
			return """";
		setCalloutActive(true);

		int StdPrecision = ctx.getStdPrecision();

		//	get values
		BigDecimal QtyEntered = (BigDecimal)mTab.getValue(""QtyEntered"");
		BigDecimal PriceEntered = (BigDecimal)mTab.getValue(""PriceEntered"");
		log.fine(""QtyEntered="" + QtyEntered + "", PriceEntered="" + PriceEntered);
		if (QtyEntered == null)
			QtyEntered = Env.ZERO;
		if (PriceEntered == null)
			PriceEntered = Env.ZERO;

		//	Line Net Amt
		BigDecimal LineNetAmt = QtyEntered.multiply(PriceEntered);
		if (LineNetAmt.scale() > StdPrecision)
			LineNetAmt = LineNetAmt.setScale(StdPrecision, BigDecimal.ROUND_HALF_UP);

		//	Calculate Tax Amount
		boolean IsTaxIncluded = ""Y"".equals(ctx.getContext( WindowNo, ""IsTaxIncluded""));

		BigDecimal TaxAmt = null;
		if (mField.getColumnName().equals(""TaxAmt""))
		{
			TaxAmt = (BigDecimal)mTab.getValue(""TaxAmt"");
		}
		else
		{
			Integer taxID = (Integer)mTab.getValue(""C_Tax_ID"");
			if (taxID != null)
			{
				int C_Tax_ID = taxID.intValue();
				MTax tax = new MTax (ctx, C_Tax_ID, null);
				TaxAmt = tax.calculateTax(LineNetAmt, IsTaxIncluded, StdPrecision);
				mTab.setValue(""TaxAmt"", TaxAmt);
			}
		}
		if (TaxAmt == null)
			TaxAmt = Env.ZERO;

		//
		if (IsTaxIncluded)
		{
			mTab.setValue(""LineTotalAmt"", LineNetAmt);
			mTab.setValue(""LineNetAmt"", LineNetAmt.subtract(TaxAmt));
		}
		else
		{
			mTab.setValue(""LineNetAmt"", LineNetAmt);
			mTab.setValue(""LineTotalAmt"", LineNetAmt.add(TaxAmt));
		}
		setCalloutActive(false);
		return """";
	}	//	amt
"
org.compiere.model.MProjectLine.setLine,MProjectLine.java,"void setLine()
	{
		setLine(DB.getSQLValue(get_Trx(), 
			""SELECT COALESCE(MAX(Line),0)+10 FROM C_ProjectLine WHERE C_Project_ID=?"", getC_Project_ID()));
	}	//	setLine
"
org.compiere.model.MProjectLine.setMProjectIssue,MProjectLine.java,"void setMProjectIssue (MProjectIssue pi)
	{
		setC_ProjectIssue_ID(pi.getC_ProjectIssue_ID());
		setM_Product_ID(pi.getM_Product_ID());
		setCommittedQty(pi.getMovementQty());
		if (getDescription() != null)
			setDescription(pi.getDescription());
	}	//	setMProjectIssue
"
org.compiere.model.MProjectLine.setC_OrderPO_ID,MProjectLine.java,"void setC_OrderPO_ID (int C_OrderPO_ID)
	{
		super.setC_OrderPO_ID(C_OrderPO_ID);
	}	//	setC_OrderPO_ID
"
org.compiere.model.MProjectLine.getProject,MProjectLine.java,"MProject getProject()
	{
		if (m_parent == null && getC_Project_ID() != 0)
		{
			m_parent = new MProject (getCtx(), getC_Project_ID(), get_Trx());
			if (get_Trx() != null)
				m_parent.load(get_Trx());
		}
		return m_parent;
	}	//	getProject
"
org.compiere.model.MProjectLine.getLimitPrice,MProjectLine.java,"BigDecimal getLimitPrice()
	{
		BigDecimal limitPrice = getPlannedPrice();
		if (getM_Product_ID() == 0)
			return limitPrice;
		if (getProject() == null)
			return limitPrice;
		boolean isSOTrx = true;
		MProductPricing pp = new MProductPricing (getAD_Client_ID(), getAD_Org_ID(),
			getM_Product_ID(), m_parent.getC_BPartner_ID(), getPlannedQty(), isSOTrx);
		pp.setM_PriceList_ID(m_parent.getM_PriceList_ID());
		if (pp.calculatePrice())
			limitPrice = pp.getPriceLimit();
		return limitPrice;
	}	//	getLimitPrice
"
org.compiere.model.MProjectLine.getCurPrecision,MProjectLine.java,"int getCurPrecision()
	{
		return 2;
	}	//	getCurPrecision
"
org.compiere.model.MProjectLine.setM_Product_ID,MProjectLine.java,"void setM_Product_ID (String oldM_Product_ID, 
			String newM_Product_ID, int windowNo) throws Exception
	{
		if (newM_Product_ID == null || newM_Product_ID.length() == 0)
			return;
		int M_Product_ID = Integer.parseInt(newM_Product_ID);
		super.setM_Product_ID(M_Product_ID);
		if (M_Product_ID == 0)
			return;
		//
		int M_PriceList_Version_ID = getCtx().getContextAsInt(windowNo, ""M_PriceList_Version_ID"");
		if (M_PriceList_Version_ID == 0)
			return;	

		int C_BPartner_ID = getCtx().getContextAsInt(windowNo, ""C_BPartner_ID"");
		BigDecimal Qty = getPlannedQty();
		boolean IsSOTrx = true;
		MProductPricing pp = new MProductPricing (getAD_Client_ID(), getAD_Org_ID(),
				M_Product_ID, C_BPartner_ID, Qty, IsSOTrx);
		pp.setM_PriceList_Version_ID(M_PriceList_Version_ID);
		Timestamp date = getPlannedDate();
		if (date == null)
			date = new Timestamp(getCtx().getContextAsTime(windowNo, ""DateContract""));
		pp.setPriceDate(date);
		//
		BigDecimal PriceList = pp.getPriceList();
		setPriceList(PriceList);
		BigDecimal PlannedPrice = pp.getPriceStd();
		setPlannedPrice(PlannedPrice);
		BigDecimal Discount = pp.getDiscount();
		setDiscount(Discount);
		//
		BigDecimal PlannedAmt = pp.getLineAmt(getCurPrecision());
		setPlannedAmt(PlannedAmt);
		//	
		p_changeVO.setContext(getCtx(), windowNo, ""StdPrecision"", pp.getPrecision());
		log.fine(""PlannedQty="" + Qty + "" * PlannedPrice="" + PlannedPrice + "" -> PlannedAmt="" + PlannedAmt);
	}	//	setM_Product_ID
"
org.compiere.model.MProjectLine.setDiscount,MProjectLine.java,"void setDiscount (String oldDiscount, 
			String newDiscount, int windowNo) throws Exception
	{
		if (newDiscount == null || newDiscount.length() == 0)
			return;
		BigDecimal Discount = new BigDecimal(newDiscount);
		super.setDiscount(Discount);
		setAmt(windowNo, ""Discount"");
	}	//	setDiscount
"
org.compiere.model.MProjectLine.setPriceList,MProjectLine.java,"void setPriceList (String oldPriceList, 
			String newPriceList, int windowNo) throws Exception
	{
		if (newPriceList == null || newPriceList.length() == 0)
			return;
		BigDecimal PriceList = new BigDecimal(newPriceList);
		super.setPriceList(PriceList);
		setAmt(windowNo, ""PriceList"");
	}	//	setPriceList
"
org.compiere.model.MProjectLine.setPlannedPrice,MProjectLine.java,"void setPlannedPrice (String oldPlannedPrice, 
			String newPlannedPrice, int windowNo) throws Exception
	{
		if (newPlannedPrice == null || newPlannedPrice.length() == 0)
			return;
		BigDecimal PlannedPrice = new BigDecimal(newPlannedPrice);
		super.setPlannedPrice(PlannedPrice);
		setAmt(windowNo, ""PlannedPrice"");
	}	//	setPlannedPrice
"
org.compiere.model.MProjectLine.setPlannedQty,MProjectLine.java,"void setPlannedQty (String oldPlannedQty, 
			String newPlannedQty, int windowNo) throws Exception
	{
		if (newPlannedQty == null || newPlannedQty.length() == 0)
			return;
		BigDecimal PlannedQty = new BigDecimal(newPlannedQty);
		super.setPlannedQty(PlannedQty);
		setAmt(windowNo, ""PlannedQty"");
	}	//	setPlannedQty
"
org.compiere.model.MProjectLine.setAmt,MProjectLine.java,"void setAmt(int windowNo, String columnName)
	{
		if(CThreadUtil.isCalloutActive())
			return;
		int curPrecision = getCurPrecision();
		int plPrecision = getCtx().getContextAsInt(windowNo, ""StdPrecision"");

		//	get values
		BigDecimal PlannedQty = getPlannedQty();
		if (PlannedQty == null)
			PlannedQty = Env.ONE;
		BigDecimal PlannedPrice = getPlannedPrice();
		if (PlannedPrice == null)
			PlannedPrice = Env.ZERO;
		BigDecimal PriceList = getPriceList();
		if (PriceList == null)
			PriceList = PlannedPrice;
		BigDecimal Discount = getDiscount();
		if (Discount == null)
			Discount = Env.ZERO;
		
		if (columnName.equals(""PlannedPrice""))
		{
			if (PriceList.signum() == 0)
				Discount = Env.ZERO;
			else
			{
				BigDecimal multiplier = PlannedPrice.multiply(Env.ONEHUNDRED)
					.divide(PriceList, plPrecision, BigDecimal.ROUND_HALF_UP);
				Discount = Env.ONEHUNDRED.subtract(multiplier);
			}
			setDiscount(Discount);
			log.fine(""PriceList="" + PriceList + "" - Discount="" + Discount 
				+ "" -> [PlannedPrice="" + PlannedPrice + ""] (Precision="" + plPrecision+ "")"");
		}
		else if (columnName.equals(""PriceList""))
		{
			if (PriceList.signum() == 0)
				Discount = Env.ZERO;
			else
			{
				BigDecimal multiplier = PlannedPrice.multiply(Env.ONEHUNDRED)
					.divide(PriceList, plPrecision, BigDecimal.ROUND_HALF_UP);
				Discount = Env.ONEHUNDRED.subtract(multiplier);
			}
			setDiscount(Discount);
			log.fine(""[PriceList="" + PriceList + ""] - Discount="" + Discount 
				+ "" -> PlannedPrice="" + PlannedPrice + "" (Precision="" + plPrecision+ "")"");
		}
		else if (columnName.equals(""Discount""))
		{
			BigDecimal multiplier = Discount.divide(Env.ONEHUNDRED, 10, BigDecimal.ROUND_HALF_UP);
			multiplier = Env.ONE.subtract(multiplier);
			//
			PlannedPrice = PriceList.multiply(multiplier);			
			if (PlannedPrice.scale() > plPrecision)
				PlannedPrice = PlannedPrice.setScale(plPrecision, BigDecimal.ROUND_HALF_UP);
			setPlannedPrice(PlannedPrice);
			log.fine(""PriceList="" + PriceList + "" - [Discount="" + Discount 
				+ ""] -> PlannedPrice="" + PlannedPrice + "" (Precision="" + plPrecision+ "")"");
		}
		
		//	Calculate Line Amount
		BigDecimal PlannedAmt = PlannedQty.multiply(PlannedPrice);
		if (PlannedAmt.scale() > curPrecision)
			PlannedAmt = PlannedAmt.setScale(curPrecision, BigDecimal.ROUND_HALF_UP);
		//
		log.fine(""PlannedQty="" + PlannedQty + "" * PlannedPrice="" + PlannedPrice 
			+ "" -> PlannedAmt="" + PlannedAmt + "" (Precision="" + curPrecision+ "")"");
		setPlannedAmt(PlannedAmt);
	}	//	setAmt
"
org.compiere.model.MProjectLine.toString,MProjectLine.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MProjectLine["");
			sb.append (get_ID()).append (""-"")
				.append (getLine())
				.append("",C_Project_ID="").append(getC_Project_ID())
				.append("",C_ProjectPhase_ID="").append(getC_ProjectPhase_ID())
				.append("",C_ProjectTask_ID="").append(getC_ProjectTask_ID())
				.append("",C_ProjectIssue_ID="").append(getC_ProjectIssue_ID())
				.append("", M_Product_ID="").append(getM_Product_ID())
				.append("", PlannedQty="").append(getPlannedQty())
				.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MProjectLine.beforeSave,MProjectLine.java,"boolean beforeSave (boolean newRecord)
	{
		if (getLine() == 0)
			setLine();
		
		//	Planned Amount	- Currency Precision
		BigDecimal PlannedAmt = getPlannedQty().multiply(getPlannedPrice());
		if (PlannedAmt.scale() > getCurPrecision())
			PlannedAmt = PlannedAmt.setScale(getCurPrecision(), BigDecimal.ROUND_HALF_UP);
		setPlannedAmt(PlannedAmt);
		
		//	Planned Margin
		if (is_ValueChanged(""M_Product_ID"") || is_ValueChanged(""M_Product_Category_ID"")
			|| is_ValueChanged(""PlannedQty"") || is_ValueChanged(""PlannedPrice""))
		{
			if (getM_Product_ID() != 0)
			{
				BigDecimal marginEach = getPlannedPrice().subtract(getLimitPrice());
				setPlannedMarginAmt(marginEach.multiply(getPlannedQty()));
			}
			else if (getM_Product_Category_ID() != 0)
			{
				MProductCategory category = MProductCategory.get(getCtx(), getM_Product_Category_ID());
				BigDecimal marginEach = category.getPlannedMargin();
				setPlannedMarginAmt(marginEach.multiply(getPlannedQty()));
			}
		}
		
		//	Phase/Task
		if (is_ValueChanged(""C_ProjectTask_ID"") && getC_ProjectTask_ID() != 0)
		{
			MProjectTask pt = new MProjectTask(getCtx(), getC_ProjectTask_ID(), get_Trx());
			if (pt == null || pt.get_ID() == 0)
			{
				log.warning(""Project Task Not Found - ID="" + getC_ProjectTask_ID());
				return false;
			}
			else
				setC_ProjectPhase_ID(pt.getC_ProjectPhase_ID());
		}
		if (is_ValueChanged(""C_ProjectPhase_ID"") && getC_ProjectPhase_ID() != 0)
		{
			MProjectPhase pp = new MProjectPhase(getCtx(), getC_ProjectPhase_ID(), get_Trx());
			if (pp == null || pp.get_ID() == 0)
			{
				log.warning(""Project Phase Not Found - "" + getC_ProjectPhase_ID());
				return false;
			}
			else
				setC_Project_ID(pp.getC_Project_ID());
		}
		
		return true;
	}	//	beforeSave
"
org.compiere.model.MProjectLine.afterSave,MProjectLine.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		updateHeader();
		return success;
	}	//	afterSave
"
org.compiere.model.MProjectLine.afterDelete,MProjectLine.java,"boolean afterDelete (boolean success)
	{
		updateHeader();
		return success;
	}	//	afterDelete
"
org.compiere.model.MProjectLine.updateHeader,MProjectLine.java,"void updateHeader()
	{
		String sql = ""UPDATE C_Project p ""
			+ ""SET (PlannedAmt,PlannedQty,PlannedMarginAmt,""
				+ ""CommittedAmt,CommittedQty,""
				+ ""InvoicedAmt, InvoicedQty) = ""
				+ ""(SELECT COALESCE(SUM(pl.PlannedAmt),0), COALESCE(SUM(pl.PlannedQty),0), COALESCE(SUM(pl.PlannedMarginAmt),0),""
				+ "" COALESCE(SUM(pl.CommittedAmt),0), COALESCE(SUM(pl.CommittedQty),0),""
				+ "" COALESCE(SUM(pl.InvoicedAmt),0), COALESCE(SUM(pl.InvoicedQty),0) ""
				+ ""FROM C_ProjectLine pl ""
				+ ""WHERE pl.C_Project_ID=p.C_Project_ID AND pl.IsActive='Y') ""
			+ ""WHERE C_Project_ID="" + getC_Project_ID();
		int no = DB.executeUpdate(sql, get_Trx());
		if (no != 1)
			log.log(Level.SEVERE, ""updateHeader - #"" + no);
	}	//	updateHeader
"
org.compiere.model.MDistributionLine.getParent,MDistributionLine.java,"MDistribution getParent ()
	{
		if (m_parent == null)
			m_parent = new MDistribution (getCtx(), getGL_Distribution_ID(), get_Trx()); 
		return m_parent;
	}	//	getParent
"
org.compiere.model.MDistributionLine.setParent,MDistributionLine.java,"void setParent (MDistribution parent)
	{
		m_parent = parent;
	}	//	setParent
"
org.compiere.model.MDistributionLine.setAccount,MDistributionLine.java,"void setAccount (MAccount acct)
	{
		m_account = acct;
	}	//	setAccount
"
org.compiere.model.MDistributionLine.getAccount,MDistributionLine.java,"MAccount getAccount()
	{
		MAccount acct = MAccount.get(getCtx(), 
			m_account.getAD_Client_ID(), 
			isOverwriteOrg() && getOrg_ID() != 0 ? getOrg_ID() : m_account.getAD_Org_ID(), 
			m_account.getC_AcctSchema_ID(),
			isOverwriteAcct() && getAccount_ID() != 0 ? getAccount_ID() : m_account.getAccount_ID(),
				m_account.getC_SubAcct_ID(),
			//	
			isOverwriteProduct() ? getM_Product_ID() : m_account.getM_Product_ID(), 
			isOverwriteBPartner() ? getC_BPartner_ID() : m_account.getC_BPartner_ID(), 
			isOverwriteOrgTrx() ? getAD_OrgTrx_ID() : m_account.getAD_OrgTrx_ID(), 
			isOverwriteLocFrom() ? getC_LocFrom_ID() : m_account.getC_LocFrom_ID(), 
			isOverwriteLocTo() ? getC_LocTo_ID() : m_account.getC_LocTo_ID(), 
			isOverwriteSalesRegion() ? getC_SalesRegion_ID() : m_account.getC_SalesRegion_ID(), 
			isOverwriteProject() ? getC_Project_ID() : m_account.getC_Project_ID(), 
			isOverwriteCampaign() ? getC_Campaign_ID() : m_account.getC_Campaign_ID(), 
			isOverwriteActivity() ? getC_Activity_ID() : m_account.getC_Activity_ID(),
			isOverwriteUser1() ? getUser1_ID() : m_account.getUser1_ID(), 
			isOverwriteUser2() ? getUser2_ID() : m_account.getUser2_ID(),
				m_account.getUserElement1_ID(),
				m_account.getUserElement2_ID());
		return acct;
	}	//	setAccount
"
org.compiere.model.MDistributionLine.getAmt,MDistributionLine.java,"BigDecimal getAmt ()
	{
		return m_amt;
	}	//	getAmt
"
org.compiere.model.MDistributionLine.setAmt,MDistributionLine.java,"void setAmt (BigDecimal amt)
	{
		m_amt = amt;
	}	//	setAmt
"
org.compiere.model.MDistributionLine.calculateAmt,MDistributionLine.java,"void calculateAmt (BigDecimal amt, int precision)
	{
		m_amt = amt.multiply(getPercentDistribution());
		m_amt = m_amt.divide(Env.ONEHUNDRED, precision, BigDecimal.ROUND_HALF_UP);
	}	//	setAmt
"
org.compiere.model.MDistributionLine.beforeSave,MDistributionLine.java,"boolean beforeSave (boolean newRecord)
	{
		if (getLine() == 0)
		{
			String sql = ""SELECT COALESCE(MAX(Line),0)+10 FROM GL_DistributionLine WHERE GL_Distribution_ID=?"";
			int ii = DB.getSQLValue (get_Trx(), sql, getGL_Distribution_ID());
			setLine (ii);
		}
		//	Reset not selected Overwrite
		if (!isOverwriteAcct() && getAccount_ID() != 0)
			setAccount_ID(0);
		if (!isOverwriteActivity() && getC_Activity_ID() != 0)
			setC_Activity_ID(0);
		if (!isOverwriteBPartner() && getC_BPartner_ID() != 0)
			setC_BPartner_ID(0);
		if (!isOverwriteCampaign() && getC_Campaign_ID() != 0)
			setC_Campaign_ID(0);
		if (!isOverwriteLocFrom() && getC_LocFrom_ID() != 0)
			setC_LocFrom_ID(0);
		if (!isOverwriteLocTo() && getC_LocTo_ID() != 0)
			setC_LocTo_ID(0);
		if (!isOverwriteOrg() && getOrg_ID() != 0)
			setOrg_ID(0);
		if (!isOverwriteOrgTrx() && getAD_OrgTrx_ID() != 0)
			setAD_OrgTrx_ID(0);
		if (!isOverwriteProduct() && getM_Product_ID() != 0)
			setM_Product_ID(0);
		if (!isOverwriteProject() && getC_Project_ID() != 0)
			setC_Project_ID(0);
		if (!isOverwriteSalesRegion() && getC_SalesRegion_ID() != 0)
			setC_SalesRegion_ID(0);
		if (!isOverwriteUser1() && getUser1_ID() != 0)
			setUser1_ID(0);
		if (!isOverwriteUser2() && getUser2_ID() != 0)
			setUser2_ID(0);
		
		//	Account Overwrite cannot be 0
		if (isOverwriteAcct() && getAccount_ID() == 0)
		{
			log.saveError(""Error"", Msg.parseTranslation(getCtx(), ""@Account_ID@ = 0""));
			return false;
		}
		//	Org Overwrite cannot be 0
		if (isOverwriteOrg() && getOrg_ID() == 0)
		{
			log.saveError(""Error"", Msg.parseTranslation(getCtx(), ""@Org_ID@ = 0""));
			return false;
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MDistributionLine.afterSave,MDistributionLine.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		getParent();
		m_parent.validate();
		m_parent.save();
		return success;
	}	//	afterSave
"
org.compiere.model.MInventoryLine.get,MInventoryLine.java,"MInventoryLine get (MInventory inventory, 
		int M_Locator_ID, int M_Product_ID, int M_AttributeSetInstance_ID)
	{
		MInventoryLine retValue = null;
		String sql = ""SELECT * FROM M_InventoryLine ""
			+ ""WHERE M_Inventory_ID=? AND M_Locator_ID=?""
			+ "" AND M_Product_ID=? AND M_AttributeSetInstance_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, inventory.get_Trx());
			pstmt.setInt (1, inventory.getM_Inventory_ID());
			pstmt.setInt(2, M_Locator_ID);
			pstmt.setInt(3, M_Product_ID);
			pstmt.setInt(4, M_AttributeSetInstance_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				retValue = new MInventoryLine (inventory.getCtx(), rs, inventory.get_Trx());
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		return retValue;
	}	//	get
"
org.compiere.model.MInventoryLine.getQtyBook,MInventoryLine.java,"BigDecimal getQtyBook ()
	{
		BigDecimal bd = super.getQtyBook ();
		if (bd == null)
			bd = Env.ZERO;
		return bd;
	}	//	getQtyBook
"
org.compiere.model.MInventoryLine.getQtyCount,MInventoryLine.java,"BigDecimal getQtyCount ()
	{
		BigDecimal bd = super.getQtyCount();
		if (bd == null)
			bd = Env.ZERO;
		return bd;
	}	//	getQtyBook
"
org.compiere.model.MInventoryLine.getProduct,MInventoryLine.java,"MProduct getProduct()
	{
		int M_Product_ID = getM_Product_ID();
		if (M_Product_ID == 0)
			return null;
		if (m_product != null && m_product.getM_Product_ID() != M_Product_ID)
			m_product = null;	//	reset
		if (m_product == null)
			m_product = MProduct.get(getCtx(), M_Product_ID);
		return m_product;
	}	//	getProduct
"
org.compiere.model.MInventoryLine.setQtyCount,MInventoryLine.java,"void setQtyCount (BigDecimal QtyCount)
	{
		if (QtyCount != null)
		{
			MProduct product = getProduct();
			if (product != null)
			{
				int precision = product.getUOMPrecision(); 
				QtyCount = QtyCount.setScale(precision, BigDecimal.ROUND_HALF_UP);
			}
		}
		super.setQtyCount(QtyCount);
	}	//	setQtyCount
"
org.compiere.model.MInventoryLine.setQtyInternalUse,MInventoryLine.java,"void setQtyInternalUse (BigDecimal QtyInternalUse)
	{
		if (QtyInternalUse != null)
		{
			MProduct product = getProduct();
			if (product != null)
			{
				int precision = product.getUOMPrecision(); 
				QtyInternalUse = QtyInternalUse.setScale(precision, BigDecimal.ROUND_HALF_UP);
			}
		}
		super.setQtyInternalUse(QtyInternalUse);
	}	//	setQtyInternalUse
"
org.compiere.model.MInventoryLine.addDescription,MInventoryLine.java,"void addDescription (String description)
	{
		String desc = getDescription();
		if (desc == null)
			setDescription(description);
		else
			setDescription(desc + "" | "" + description);
	}	//	addDescription
"
org.compiere.model.MInventoryLine.setParent,MInventoryLine.java,"void setParent(MInventory parent)
	{
		m_parent = parent; 
	}	//	setParent
"
org.compiere.model.MInventoryLine.getParent,MInventoryLine.java,"MInventory getParent()
	{
		if (m_parent == null)
			m_parent = new MInventory (getCtx(), getM_Inventory_ID(), get_Trx());
		return m_parent;
	}	//	getParent
"
org.compiere.model.MInventoryLine.setM_Product_ID,MInventoryLine.java,"void setM_Product_ID (String oldM_Product_ID, 
			String newM_Product_ID, int windowNo) throws Exception
	{
		if (newM_Product_ID == null || newM_Product_ID.length() == 0)
			return;
		int M_Product_ID = Integer.parseInt(newM_Product_ID);
		super.setM_Product_ID(M_Product_ID);
		//
		if (getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_Product_ID"") == M_Product_ID)
		{
			int M_AttributeSetInstance_ID = getCtx().getContextAsInt(EnvConstants.WINDOW_INFO, EnvConstants.TAB_INFO, ""M_AttributeSetInstance_ID"");
			setM_AttributeSetInstance_ID(M_AttributeSetInstance_ID);
		}
		else
			setM_AttributeSetInstance_ID( -1 );
			
		setQtyBook(windowNo, ""M_Product_ID"");
	}	//	setM_Product_ID
"
org.compiere.model.MInventoryLine.setM_AttributeSetInstance_ID,MInventoryLine.java,"void setM_AttributeSetInstance_ID (String oldM_AttributeSetInstance_ID, 
			String newM_AttributeSetInstance_ID, int windowNo) throws Exception
	{
		if (newM_AttributeSetInstance_ID == null || newM_AttributeSetInstance_ID.length() == 0)
			return;
		//
		int M_AttributeSetInstance_ID = Integer.parseInt(newM_AttributeSetInstance_ID);
		super.setM_AttributeSetInstance_ID(M_AttributeSetInstance_ID);
		//
		setQtyBook(windowNo, ""M_AttributeSetInstance_ID"");
	}	//	setM_AttributeSetInstance_ID
"
org.compiere.model.MInventoryLine.setM_Locator_ID,MInventoryLine.java,"void setM_Locator_ID (String oldM_Locator_ID, 
			String newM_Locator_ID, int windowNo) throws Exception
	{
		if (newM_Locator_ID == null || newM_Locator_ID.length() == 0)
			return;
		int M_Locator_ID = Integer.parseInt(newM_Locator_ID);
		super.setM_Locator_ID(M_Locator_ID);
		setQtyBook(windowNo, ""M_Locator_ID"");
	}	//	setM_Locator_ID
"
org.compiere.model.MInventoryLine.setQtyBook,MInventoryLine.java,"void setQtyBook (int windowNo, String columnName)
	{
		int M_Product_ID = getM_Product_ID();
		int M_Locator_ID = getM_Locator_ID();
		if (M_Product_ID == 0 || M_Locator_ID == 0)
		{
			setQtyBook(Env.ZERO);
			return;
		}
		int M_AttributeSetInstance_ID = getM_AttributeSetInstance_ID();

		// Set QtyBook from first storage location
		BigDecimal QtyBook = Env.ZERO;
		String sql = ""SELECT QtyOnHand FROM M_Storage ""
			+ ""WHERE M_Product_ID=?""	//	1
			+ "" AND M_Locator_ID=?""		//	2
			+ "" AND M_AttributeSetInstance_ID=?"";
		if (M_AttributeSetInstance_ID == 0)
			sql = ""SELECT SUM(QtyOnHand) FROM M_Storage ""
			+ ""WHERE M_Product_ID=?""	//	1
			+ "" AND M_Locator_ID=?"";	//	2
		
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, M_Product_ID);
			pstmt.setInt(2, M_Locator_ID);
			if (M_AttributeSetInstance_ID != 0)
				pstmt.setInt(3, M_AttributeSetInstance_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				QtyBook = rs.getBigDecimal(1);
			rs.close();
			pstmt.close();
			
			// Sum returns a NULL if there are no rows 
			if(QtyBook == null)
				QtyBook = Env.ZERO;
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		setQtyBook(QtyBook);
		//
		log.info(""M_Product_ID="" + M_Product_ID 
			+ "", M_Locator_ID="" + M_Locator_ID
			+ "", M_AttributeSetInstance_ID="" + M_AttributeSetInstance_ID
			+ "" - QtyBook="" + QtyBook);
	}	//	setQtyBook
"
org.compiere.model.MInventoryLine.toString,MInventoryLine.java,"String toString()
	{
		StringBuffer sb = new StringBuffer (""MInventoryLine["");
		sb.append (get_ID())
			.append(""-M_Product_ID="").append (getM_Product_ID())
			.append("",QtyCount="").append(getQtyCount())
			.append("",QtyInternalUse="").append(getQtyInternalUse())
			.append("",QtyBook="").append(getQtyBook())
			.append("",M_AttributeSetInstance_ID="").append(getM_AttributeSetInstance_ID())
			.append(""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MInventoryLine.beforeSave,MInventoryLine.java,"boolean beforeSave (boolean newRecord)
	{
		if (newRecord && m_isManualEntry)
		{
			//	Product requires ASI
			if (getM_AttributeSetInstance_ID() == 0)
			{
				MProduct product = MProduct.get(getCtx(), getM_Product_ID());
				if (product.getM_AttributeSet_ID() != 0)
				{
					MAttributeSet mas = MAttributeSet.get(getCtx(), product.getM_AttributeSet_ID());
					if (mas.isInstanceAttribute() 
						&& (mas.isMandatory() || mas.isMandatoryAlways()))
					{
						log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""M_AttributeSetInstance_ID""));
						return false;
					}
				}
			}	//	No ASI
		}	//	new or manual
		
		//	Set Line No
		if (getLine() == 0)
		{
			String sql = ""SELECT COALESCE(MAX(Line),0)+10 AS DefaultValue FROM M_InventoryLine WHERE M_Inventory_ID=?"";
			int ii = DB.getSQLValue (get_Trx(), sql, getM_Inventory_ID());
			setLine (ii);
		}

		//	Enforce Qty UOM
		if (newRecord || is_ValueChanged(""QtyCount""))
			setQtyCount(getQtyCount());
		if (newRecord || is_ValueChanged(""QtyInternalUse""))
			setQtyInternalUse(getQtyInternalUse());
		
		//	InternalUse Inventory
		if (isInternalUse() && getQtyInternalUse().signum() == 0)
		{
			log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""QtyInternalUse""));
			return false;
		}
		if (getQtyInternalUse().signum() != 0)
		{
			if (!INVENTORYTYPE_ChargeAccount.equals(getInventoryType()))
				setInventoryType(INVENTORYTYPE_ChargeAccount);
			//
			if (getC_Charge_ID() == 0)
			{
				log.saveError(""InternalUseNeedsCharge"", """");
				return false;
			}
		}
		else if (INVENTORYTYPE_ChargeAccount.equals(getInventoryType()))
		{
			if (getC_Charge_ID() == 0)
			{
				log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""C_Charge_ID""));
				return false;
			}
		}
		else if (getC_Charge_ID() != 0)
			setC_Charge_ID(0);
		
		//	Set AD_Org to parent if not charge
		if (getC_Charge_ID() == 0)
			setAD_Org_ID(getParent().getAD_Org_ID());
		
		return true;
	}	//	beforeSave
"
org.compiere.model.MInventoryLine.afterSave,MInventoryLine.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		//	Create MA
		if (newRecord && success 
			&& m_isManualEntry && getM_AttributeSetInstance_ID() == 0)
			createMA(true);
		return true;
	}	//	afterSave
"
org.compiere.model.MInventoryLine.createMA,MInventoryLine.java,"void createMA(boolean updateQtyBooked)
	{
		int delMA = MInventoryLineMA.deleteInventoryLineMA(getM_InventoryLine_ID(), get_Trx());
		log.info(""DeletedMA="" + delMA);
		
		MStorage[] storages = MStorage.getAll(getCtx(), getM_Product_ID(), 
			getM_Locator_ID(), get_Trx());
		boolean allZeroASI = true;
		for (MStorage element : storages) {
			if (element.getM_AttributeSetInstance_ID() != 0)
			{
				allZeroASI = false;
				break;
			}
		}
		if (allZeroASI)
			return;
		
		MInventoryLineMA ma = null; 
		BigDecimal sum = Env.ZERO;
		for (MStorage storage : storages) {
			// nnayak - ignore negative layers
			if (storage.getQtyOnHand().signum() <= 0)
				continue;
			if (ma != null 
				&& ma.getM_AttributeSetInstance_ID() == storage.getM_AttributeSetInstance_ID())
				ma.setMovementQty(ma.getMovementQty().add(storage.getQtyOnHand()));
			else
				ma = new MInventoryLineMA (this, 
					storage.getM_AttributeSetInstance_ID(), storage.getQtyOnHand());
			if (!ma.save())
				;
			sum = sum.add(storage.getQtyOnHand());
		}
		if (updateQtyBooked && sum.compareTo(getQtyBook()) != 0)
		{
			log.warning(""QtyBook="" + getQtyBook() + "" corrected to Sum of MA="" + sum);
			setQtyBook(sum);
		}
	}	//	createMA
"
org.compiere.model.MTaxCategory.getDefault,MTaxCategory.java,"MTaxCategory getDefault (Ctx ctx)
	{
		String sql = ""SELECT * FROM C_TaxCategory ""
			+ ""WHERE AD_Client_ID=? ""
			+ ""ORDER BY ASCII(IsDefault) DESC, C_TaxCategory_ID"";
		MTaxCategory retValue = null;
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, ctx.getAD_Client_ID());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				retValue = new MTaxCategory(ctx, rs, null);
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return retValue;
	}	//	getDefault
"
org.compiere.model.MAttributeUse.afterSave,MAttributeUse.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		//	also used for afterDelete
		String sql = ""UPDATE M_AttributeSet mas""
			+ "" SET IsInstanceAttribute='Y' ""
			+ ""WHERE M_AttributeSet_ID="" + getM_AttributeSet_ID()
			+ "" AND IsInstanceAttribute='N'""
			+ "" AND (IsSerNo='Y' OR IsLot='Y' OR IsGuaranteeDate='Y'""
				+ "" OR EXISTS (SELECT * FROM M_AttributeUse mau""
					+ "" INNER JOIN M_Attribute ma ON (mau.M_Attribute_ID=ma.M_Attribute_ID) ""
					+ ""WHERE mau.M_AttributeSet_ID=mas.M_AttributeSet_ID""
					+ "" AND mau.IsActive='Y' AND ma.IsActive='Y'""
					+ "" AND ma.IsInstanceAttribute='Y')""
					+ "")"";
		int no = DB.executeUpdate(sql, get_Trx());
		if (no != 0)
			log.fine(""afterSave - Set Instance Attribute"");
		//
		sql = ""UPDATE M_AttributeSet mas""
			+ "" SET IsInstanceAttribute='N' ""
			+ ""WHERE M_AttributeSet_ID="" + getM_AttributeSet_ID()
			+ "" AND IsInstanceAttribute='Y'""
			+ ""	AND IsSerNo='N' AND IsLot='N' AND IsGuaranteeDate='N'""
			+ "" AND NOT EXISTS (SELECT * FROM M_AttributeUse mau""
				+ "" INNER JOIN M_Attribute ma ON (mau.M_Attribute_ID=ma.M_Attribute_ID) ""
				+ ""WHERE mau.M_AttributeSet_ID=mas.M_AttributeSet_ID""
				+ "" AND mau.IsActive='Y' AND ma.IsActive='Y'""
				+ "" AND ma.IsInstanceAttribute='Y')"";
		no = DB.executeUpdate(sql, get_Trx());
		if (no != 0)
			log.fine(""afterSave - Reset Instance Attribute"");
		
		return success;
	}	//	afterSave
"
org.compiere.model.MAttributeUse.afterDelete,MAttributeUse.java,"boolean afterDelete (boolean success)
	{
		afterSave(false, success);
		return success;
	}	//	afterDelete
"
org.compiere.model.MPriceListVersion.getPriceList,MPriceListVersion.java,"MPriceList getPriceList()
	{
		if (m_pl == null && getM_PriceList_ID() != 0)
			m_pl = MPriceList.get (getCtx(), getM_PriceList_ID(), null);
		return m_pl;
	}	//	PriceList
"
org.compiere.model.MPriceListVersion.getProductPrice,MPriceListVersion.java,"MProductPrice[] getProductPrice (boolean refresh)
	{
		if (m_pp != null && !refresh)
			return m_pp;
		m_pp = getProductPrice(null);
		return m_pp;
	}	//	getProductPrice
"
org.compiere.model.MPriceListVersion.getProductPrice,MPriceListVersion.java,"MProductPrice[] getProductPrice (String whereClause)
	{
		ArrayList<MProductPrice> list = new ArrayList<MProductPrice>();
		String sql = ""SELECT * FROM M_ProductPrice WHERE M_PriceList_Version_ID=?"";
		if (whereClause != null)
			sql += "" "" + whereClause;
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx ());
			pstmt.setInt (1, getM_PriceList_Version_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MProductPrice(getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		MProductPrice[] pp = new MProductPrice[list.size()];
		list.toArray(pp);
		return pp;
	}	//	getProductPrice
"
org.compiere.model.MPriceListVersion.setName,MPriceListVersion.java,"void setName()
	{
		if (getValidFrom() == null)
			setValidFrom (TimeUtil.getDay(null));
		if (getName() == null)
		{
			String name = DisplayType.getDateFormat(DisplayTypeConstants.Date)
				.format(getValidFrom());
			setName(name);
		}
	}	//	setName
"
org.compiere.model.MPriceListVersion.beforeSave,MPriceListVersion.java,"boolean beforeSave (boolean newRecord)
	{
		setName();
		
		Timestamp plvValidFrom = getValidFrom();
		MDiscountSchema ds = new MDiscountSchema (getCtx(), getM_DiscountSchema_ID(), get_Trx());
		Timestamp dsValidFrom = ds.getValidFrom();
		
		if (plvValidFrom.before(dsValidFrom))
		{
			log.saveError(""Error"", Msg.getMsg(getCtx(), ""DiscountSchemaNotValid""));
			return false;						
		}
		
		return true;
	}	//	beforeSave
"
org.compiere.model.MDistributionRunLine.getActualQty,MDistributionRunLine.java,"BigDecimal getActualQty()
	{
		return m_actualQty;
	}	//	getActualQty
"
org.compiere.model.MDistributionRunLine.addActualQty,MDistributionRunLine.java,"void addActualQty(BigDecimal add)
	{
		m_actualQty = m_actualQty.add(add);
	}	//	addActualQty
"
org.compiere.model.MDistributionRunLine.getActualMin,MDistributionRunLine.java,"BigDecimal getActualMin()
	{
		return m_actualMin;
	}	//	getActualMin
"
org.compiere.model.MDistributionRunLine.addActualMin,MDistributionRunLine.java,"void addActualMin(BigDecimal add)
	{
		m_actualMin = m_actualMin.add(add);
	}	//	addActualMin
"
org.compiere.model.MDistributionRunLine.isActualMinGtTotal,MDistributionRunLine.java,"boolean isActualMinGtTotal()
	{
		return m_actualMin.compareTo(getTotalQty()) > 0;
	}	//	isActualMinGtTotal
"
org.compiere.model.MDistributionRunLine.getActualAllocation,MDistributionRunLine.java,"BigDecimal getActualAllocation()
	{
		return m_actualAllocation;
	}	//	getActualAllocation
"
org.compiere.model.MDistributionRunLine.addActualAllocation,MDistributionRunLine.java,"void addActualAllocation(BigDecimal add)
	{
		m_actualAllocation = m_actualAllocation.add(add);
	}	//	addActualAllocation
"
org.compiere.model.MDistributionRunLine.isActualAllocationEqTotal,MDistributionRunLine.java,"boolean isActualAllocationEqTotal()
	{
		return m_actualAllocation.compareTo(getTotalQty()) == 0;
	}	//	isActualAllocationEqTotal
"
org.compiere.model.MDistributionRunLine.getActualAllocationDiff,MDistributionRunLine.java,"BigDecimal getActualAllocationDiff()
	{
		return getTotalQty().subtract(m_actualAllocation);
	}	//	getActualAllocationDiff
"
org.compiere.model.MDistributionRunLine.getLastDifference,MDistributionRunLine.java,"BigDecimal getLastDifference()
	{
		return m_lastDifference;
	}	//	getLastDifference
"
org.compiere.model.MDistributionRunLine.setLastDifference,MDistributionRunLine.java,"void setLastDifference(BigDecimal difference)
	{
		m_lastDifference = difference;
	}	//	setLastDifference
"
org.compiere.model.MDistributionRunLine.getMaxAllocation,MDistributionRunLine.java,"BigDecimal getMaxAllocation()
	{
		return m_maxAllocation;
	}	//	getMaxAllocation
"
org.compiere.model.MDistributionRunLine.setMaxAllocation,MDistributionRunLine.java,"void setMaxAllocation (BigDecimal max, boolean set)
	{
		if (set || max.compareTo(m_maxAllocation) > 0)
			m_maxAllocation = max;
	}	//	setMaxAllocation
"
org.compiere.model.MDistributionRunLine.resetCalculations,MDistributionRunLine.java,"void resetCalculations()
	{
		m_actualQty = Env.ZERO;
		m_actualMin = Env.ZERO;
		m_actualAllocation = Env.ZERO;
	//	m_lastDifference = Env.ZERO;
		m_maxAllocation = Env.ZERO;
		
	}	//	resetCalculations
"
org.compiere.model.MDistributionRunLine.getProduct,MDistributionRunLine.java,"MProduct getProduct()
	{
		if (m_product == null)
			m_product = MProduct.get(getCtx(), getM_Product_ID());
		return m_product;
	}	//	getProduct
"
org.compiere.model.MDistributionRunLine.getUOMPrecision,MDistributionRunLine.java,"int getUOMPrecision()
	{
		return getProduct().getUOMPrecision();
	}	//	getUOMPrecision
"
org.compiere.model.MDistributionRunLine.toString,MDistributionRunLine.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MDistributionRunLine["")
			.append(get_ID()).append(""-"")
			.append(getInfo())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MDistributionRunLine.getInfo,MDistributionRunLine.java,"String getInfo()
	{
		StringBuffer sb = new StringBuffer ();
		sb.append(""Line="").append(getLine())
			.append ("",TotalQty="").append(getTotalQty())
			.append("",SumMin="").append(getActualMin())
			.append("",SumQty="").append(getActualQty())
			.append("",SumAllocation="").append(getActualAllocation())
			.append("",MaxAllocation="").append(getMaxAllocation())
			.append("",LastDiff="").append(getLastDifference());
		return sb.toString ();
	}	//	getInfo
"
org.compiere.model.MProjectPhase.getTasks,MProjectPhase.java,"MProjectTask[] getTasks()
	{
		ArrayList<MProjectTask> list = new ArrayList<MProjectTask>();
		String sql = ""SELECT * FROM C_ProjectTask WHERE C_ProjectPhase_ID=? ORDER BY SeqNo"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getC_ProjectPhase_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MProjectTask (getCtx(), rs, get_Trx()));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			log.log(Level.SEVERE, sql, ex);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;
		//
		MProjectTask[] retValue = new MProjectTask[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getTasks
"
org.compiere.model.MProjectPhase.copyTasksFrom,MProjectPhase.java,"int copyTasksFrom (MProjectPhase fromPhase)
	{
		if (fromPhase == null)
			return 0;
		int count = 0;
		//
		MProjectTask[] myTasks = getTasks();
		MProjectTask[] fromTasks = fromPhase.getTasks();
		//	Copy Project Tasks
		for (MProjectTask element : fromTasks) {
			//	Check if Task already exists
			int C_Task_ID = element.getC_Task_ID();
			boolean exists = false;
			if (C_Task_ID == 0)
				exists = false;
			else
			{
				for (MProjectTask element2 : myTasks) {
					if (element2.getC_Task_ID() == C_Task_ID)
					{
						exists = true;
						break;
					}
				}
			}
			//	Phase exist
			if (exists)
				log.info(""Task already exists here, ignored - "" + element);
			else
			{
				MProjectTask toTask = new MProjectTask (getCtx (), 0, get_Trx());
				PO.copyValues (element, toTask, getAD_Client_ID (), getAD_Org_ID ());
				toTask.setC_ProjectPhase_ID (getC_ProjectPhase_ID ());
				if (toTask.save ())
					count++;
			}
		}
		if (fromTasks.length != count)
			log.warning(""Count difference - ProjectPhase="" + fromTasks.length + "" <> Saved="" + count);

		return count;
	}	//	copyTasksFrom
"
org.compiere.model.MProjectPhase.copyTasksFrom,MProjectPhase.java,"int copyTasksFrom (MProjectTypePhase fromPhase)
	{
		if (fromPhase == null)
			return 0;
		int count = 0;
		//	Copy Type Tasks
		MProjectTypeTask[] fromTasks = fromPhase.getTasks();
		for (MProjectTypeTask element : fromTasks) {
			MProjectTask toTask = new MProjectTask (this, element);
			if (toTask.save())
				count++;
		}
		log.fine(""#"" + count + "" - "" + fromPhase);
		if (fromTasks.length != count)
			log.log(Level.SEVERE, ""Count difference - TypePhase="" + fromTasks.length + "" <> Saved="" + count);

		return count;
	}	//	copyTasksFrom
"
org.compiere.model.MProjectPhase.toString,MProjectPhase.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MProjectPhase["");
		sb.append (get_ID())
			.append (""-"").append (getSeqNo())
			.append (""-"").append (getName())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MSchedule.get,MSchedule.java,"MSchedule get(Ctx ctx, int AD_Schedule_ID)
	{
		Integer key = Integer.valueOf (AD_Schedule_ID);
		MSchedule retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MSchedule (ctx, AD_Schedule_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MSchedule.getMonthDay,MSchedule.java,"int getMonthDay()
	{
		int day = super.getMonthDay();
		if (day < 1)
			day = 1;
		else if (day > 31)
			day = 31;
		return day;
	}	//	getMonthDay
"
org.compiere.model.MSchedule.getWeekDay,MSchedule.java,"String getWeekDay()
	{
		String wd = super.getWeekDay();
		if ((wd == null) || isWeekDayValid(wd))
			wd = WEEKDAY_Monday;
		return wd;
	}	//	getWeekDay
"
org.compiere.model.MSchedule.beforeSave,MSchedule.java,"boolean beforeSave(boolean newRecord)
	{
		if (getScheduleType() == null)
			setScheduleType (SCHEDULETYPE_Frequency);

		//	Set Schedule Type & Frequencies
		if (SCHEDULETYPE_Frequency.equals(getScheduleType()))
		{
			if (getFrequencyType() == null)
				setFrequencyType(FREQUENCYTYPE_Day);
			if (getFrequency() < 1)
				setFrequency(1);
			if (!isOnMonday() && !isOnTuesday() && !isOnWednesday() && !isOnThursday() &&
					!isOnFriday() && !isOnSaturday() && !isOnSunday() )
				setOnMonday(true);
		}
		else if (SCHEDULETYPE_MonthDay.equals(getScheduleType()))
		{
			if ((super.getMonthDay() < 1) || (super.getMonthDay() > 31))
				setMonthDay(1);
		}
		else	//	SCHEDULETYPE_WeekDay
		{
			if (getScheduleType() == null)
				setScheduleType(SCHEDULETYPE_WeekDay);
			if (super.getWeekDay() == null)
				setWeekDay(WEEKDAY_Monday);
		}
		//	Hour/Minute
		if ((getScheduleHour() > 23) || (getScheduleHour() < 0))
			setScheduleHour(0);
		if ((getScheduleMinute() > 59) || (getScheduleMinute() < 0))
			setScheduleMinute(0);
		return true;
	}	//	beforeSave
"
org.compiere.model.MSchedule.toString,MSchedule.java,"String toString()
	{
		StringBuffer sb = new StringBuffer (""MSchedule["");
		sb.append (get_ID()).append (""-"").append (getName());
		String scheduleType = getScheduleType();
		sb.append ("",Type="").append(scheduleType);
		if (SCHEDULETYPE_Frequency.equals(scheduleType))
		{
			sb.append ("",Frequency="").append(getFrequencyType())
				.append(""*"").append(getFrequency());
			if (isOnMonday())
				sb.append("",Mo"");
			if (isOnTuesday())
				sb.append("",Tu"");
			if (isOnWednesday())
				sb.append("",We"");
			if (isOnThursday())
				sb.append("",Th"");
			if (isOnFriday())
				sb.append("",Fr"");
			if (isOnSaturday())
				sb.append("",Sa"");
			if (isOnSunday())
				sb.append("",Su"");
		}
		else if (SCHEDULETYPE_MonthDay.equals(scheduleType))
			sb.append("",Day="").append(getMonthDay());
		else
			sb.append("",Day="").append(getWeekDay());
		//
		sb.append ("",HH="").append(getScheduleHour())
			.append ("",MM="").append(getScheduleMinute());
		//
		sb.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MSchedule.isOKtoRunOnIP,MSchedule.java,"boolean isOKtoRunOnIP()
	{
		String ipOnly = getRunOnlyOnIP();
		if ((ipOnly == null) || (ipOnly.length() == 0))
			return true;

		StringTokenizer st = new StringTokenizer(ipOnly, "";"");
		while (st.hasMoreElements())
		{
			String ip = st.nextToken();
			if (checkIP(ip))
				return true;
		}
		return false;
	}	//	isOKtoRunOnIP
"
org.compiere.model.MSchedule.checkIP,MSchedule.java,"boolean checkIP(String ipOnly)
	{
		try
		{
			InetAddress box = InetAddress.getLocalHost();
			String ip = box.getHostAddress();
			if (ipOnly.indexOf(ip) == -1)
			{
				// TODO: We need to handle this better, for the moment reduced to fine.
				log.fine (""Not allowed here - IP="" + ip + "" does not match "" + ipOnly);
				return false;
			}
			log.fine (""Allowed here - IP="" + ip + "" matches "" + ipOnly);
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, """", e);
			return false;
		}
		return true;
	}	// checkIP
"
org.compiere.model.MSchedule.getNextRunMS,MSchedule.java,"long getNextRunMS (long last)
	{
		Calendar calNow = Calendar.getInstance();
		calNow.setTimeInMillis (last);
		//
		Calendar calNext = Calendar.getInstance();
		calNext.setTimeInMillis (last);
		calNext.set (Calendar.SECOND, 0);
		calNext.set (Calendar.MILLISECOND, 0);
		//
		int hour = getScheduleHour();
		int minute = getScheduleMinute();
		//
		String scheduleType = getScheduleType();
		if (SCHEDULETYPE_Frequency.equals(scheduleType))
		{
			String frequencyType = getFrequencyType();
			int frequency = getFrequency();

			ArrayList<Integer> validDays = new ArrayList<Integer>();
			if(isOnMonday())
				validDays.add(new Integer(Calendar.MONDAY));
			if(isOnTuesday())
				validDays.add(new Integer(Calendar.TUESDAY));
			if(isOnWednesday())
				validDays.add(new Integer(Calendar.WEDNESDAY));
			if(isOnThursday())
				validDays.add(new Integer(Calendar.THURSDAY));
			if(isOnFriday())
				validDays.add(new Integer(Calendar.FRIDAY));
			if(isOnSaturday())
				validDays.add(new Integer(Calendar.SATURDAY));
			if(isOnSunday())
				validDays.add(new Integer(Calendar.SUNDAY));

			if(validDays.isEmpty())
			{
				log.warning(""Incorrect Schedule setup. Please enable at least one of the weekdays"");
				validDays.add(new Integer(Calendar.MONDAY));
			}

			boolean increment=true;
			int ct = 0;
			while ((ct < 8)
				&& !(validDays.contains(new Integer(calNext.get(Calendar.DAY_OF_WEEK)))))
			{
				calNext.add(Calendar.DAY_OF_YEAR, 1);
				ct++;
				increment=false;
			}


			/*****	DAY		******/
			if (X_R_RequestProcessor.FREQUENCYTYPE_Day.equals(frequencyType))
			{
				calNext.set (Calendar.HOUR_OF_DAY, hour);
				calNext.set (Calendar.MINUTE, minute);
				if(increment)
				{
					calNext.add(Calendar.DAY_OF_YEAR, frequency);
				}
			}	//	Day

			/*****	HOUR	******/
			else if (X_R_RequestProcessor.FREQUENCYTYPE_Hour.equals(frequencyType))
			{
				calNext.set (Calendar.MINUTE, minute);
				if(increment)
				{
					calNext.add (Calendar.HOUR_OF_DAY, frequency);
				}

			}	//	Hour

			/*****	MINUTE	******/
			else if (X_R_RequestProcessor.FREQUENCYTYPE_Minute.equals(frequencyType))
			{
				if(increment)
				{
					calNext.add(Calendar.MINUTE, frequency);
				}
			}	//	Minute

		}

		/*****	MONTH	******/
		else if (SCHEDULETYPE_MonthDay.equals(scheduleType))
		{
			calNext.set (Calendar.HOUR, hour);
			calNext.set (Calendar.MINUTE, minute);
			//
			int day = getMonthDay();
			int dd = calNext.get(Calendar.DAY_OF_MONTH);
			int max = calNext.getActualMaximum (Calendar.DAY_OF_MONTH);
			int dayUsed = Math.min (day, max);
			//	Same Month
			if (dd < dayUsed)
				calNext.set (Calendar.DAY_OF_MONTH, dayUsed);
			else
			{
				if (calNext.get (Calendar.MONTH) == Calendar.DECEMBER)
				{
					calNext.add (Calendar.YEAR, 1);
					calNext.set (Calendar.MONTH, Calendar.JANUARY);
				}
				else
					calNext.add (Calendar.MONTH, 1);
				max = calNext.getActualMaximum (Calendar.DAY_OF_MONTH);
				dayUsed = Math.min (day, max);
				calNext.set (Calendar.DAY_OF_MONTH, dayUsed);
			}
		}	//	month

		/*****	WEEK	******/
		else // if (SCHEDULETYPE_WeekDay.equals(scheduleType))
		{
			String weekDay = getWeekDay();
			int dayOfWeek = 0;
			if (WEEKDAY_Monday.equals(weekDay))
				dayOfWeek = Calendar.MONDAY;
			else if (WEEKDAY_Tuesday.equals(weekDay))
				dayOfWeek = Calendar.TUESDAY;
			else if (WEEKDAY_Wednesday.equals(weekDay))
				dayOfWeek = Calendar.WEDNESDAY;
			else if (WEEKDAY_Thursday.equals(weekDay))
				dayOfWeek = Calendar.THURSDAY;
			else if (WEEKDAY_Friday.equals(weekDay))
				dayOfWeek = Calendar.FRIDAY;
			else if (WEEKDAY_Saturday.equals(weekDay))
				dayOfWeek = Calendar.SATURDAY;
			else if (WEEKDAY_Sunday.equals(weekDay))
				dayOfWeek = Calendar.SUNDAY;
			calNext.set (Calendar.DAY_OF_WEEK, dayOfWeek);
			calNext.set (Calendar.HOUR, hour);
			calNext.set (Calendar.MINUTE, minute);
			calNext.set (Calendar.SECOND, 0);
			calNext.set (Calendar.MILLISECOND, 0);
			//
			if (!calNext.after(calNow))
			{
				calNext.add (Calendar.WEEK_OF_YEAR, 1);
			}
		}	//	week

		long delta = calNext.getTimeInMillis() - calNow.getTimeInMillis();
		String info = ""Now="" + calNow.getTime().toString()
			+ "", Next="" + calNext.getTime().toString()
			+ "", Delta="" + delta
			+ "", "" + toString();
		if (delta < 0)
		{
			log.warning(info);
		}
		else
			log.info (info);

		return calNext.getTimeInMillis();
	}	//	getNextRunMS
"
org.compiere.model.MSchedule.getNext,MSchedule.java,"Timestamp[] getNext (Timestamp start, int iterations)
	{
		Timestamp[]nexts = new Timestamp[iterations];
		long startMS = start.getTime();
		for (int i = 0; i < nexts.length; i++)
		{
			Timestamp next = new Timestamp (getNextRunMS (startMS));
			startMS = next.getTime();
			nexts[i] = next;
		}
		return nexts;
	}	//	getNext
"
org.compiere.model.MSchedule.main,MSchedule.java,"void main(String[] args)
	{
		Compiere.startup (true);
		CLogMgt.setLevel (Level.FINE);
		MSchedule s = null;
		Timestamp start = TimeUtil.getDay (2007, 12, 01);

		/**	Test Case - Day		**/
		s = new MSchedule(Env.getCtx (), 0, null);
		PO.log.info (""*** Day 2 ***"");
		s.setScheduleType (SCHEDULETYPE_Frequency);
		s.setFrequencyType (FREQUENCYTYPE_Day);
		s.setFrequency (2);
	//	start = new Timestamp(System.currentTimeMillis());
		s.getNext (start, 10);

		/**	Test Case - Hour 	**/
		s = new MSchedule(Env.getCtx (), 0, null);
		PO.log.info (""*** Hour 5 ***"");
		s.setScheduleType (SCHEDULETYPE_Frequency);
		s.setFrequencyType (FREQUENCYTYPE_Hour);
		s.setFrequency (5);
	//	start = new Timestamp(System.currentTimeMillis());
		s.getNext (start, 10);

		/**	Test Case - Minute	**/
		s = new MSchedule(Env.getCtx (), 0, null);
		PO.log.info (""*** Minute 15 ***"");
		s.setScheduleType (SCHEDULETYPE_Frequency);
		s.setFrequencyType (FREQUENCYTYPE_Minute);
		s.setFrequency (15);
	//	start = new Timestamp(System.currentTimeMillis());
		s.getNext (start, 10);

		/**	Test Case - WeekDay	**/
		s = new MSchedule(Env.getCtx (), 0, null);
		PO.log.info (""*** WeekDay Mo ***"");
		s.setScheduleType (SCHEDULETYPE_WeekDay);
		s.setWeekDay (WEEKDAY_Monday);
	//	start = new Timestamp(System.currentTimeMillis());
		s.getNext (start, 92);

		/**	Test Case - Month	**/
		s = new MSchedule(Env.getCtx (), 0, null);
		PO.log.info (""*** MonthDay 31 ***"");
		s.setScheduleType (SCHEDULETYPE_MonthDay);
		s.setMonthDay (31);
		//	start = new Timestamp(System.currentTimeMillis());
		s.getNext (start, 14);
		/** **/

	}	//	main
"
org.compiere.model.MChatEntry.isConfidentialType,MChatEntry.java,"boolean isConfidentialType(String ConfidentialType)
	{
		String ct = getConfidentialType();
		if (ConfidentialType == null 
			|| CONFIDENTIALTYPE_PublicInformation.equals(ct))
			return true;
		if (CONFIDENTIALTYPE_PartnerConfidential.equals(ct))
		{
			return CONFIDENTIALTYPE_PartnerConfidential.equals(ConfidentialType);
		}
		else if (CONFIDENTIALTYPE_PrivateInformation.equals(ct))
		{
			return CONFIDENTIALTYPE_Internal.equals(ConfidentialType)
				|| CONFIDENTIALTYPE_PrivateInformation.equals(ConfidentialType);
		}
		else if (CONFIDENTIALTYPE_Internal.equals(ct))
		{
			return CONFIDENTIALTYPE_Internal.equals(ConfidentialType);
		}
		return false;
	}	//	
"
org.compiere.model.MPaySelectionCheck.getOfPayment,MPaySelectionCheck.java,"MPaySelectionCheck getOfPayment (Ctx ctx, int C_Payment_ID, Trx trx)
	{
		MPaySelectionCheck retValue = null;
		String sql = ""SELECT * FROM C_PaySelectionCheck WHERE C_Payment_ID=?"";
		int count = 0;
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, C_Payment_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MPaySelectionCheck psc = new MPaySelectionCheck (ctx, rs, trx);
				if (retValue == null)
					retValue = psc;
				else if (!retValue.isProcessed() && psc.isProcessed())
					retValue = psc;
				count++;
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e); 
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		if (count > 1)
			s_log.warning (""More then one for C_Payment_ID="" + C_Payment_ID);
		return retValue;
	}	//	getOfPayment
"
org.compiere.model.MPaySelectionCheck.createForPayment,MPaySelectionCheck.java,"MPaySelectionCheck createForPayment (Ctx ctx, int C_Payment_ID, Trx trx)
	{
		if (C_Payment_ID == 0)
			return null;
		MPayment payment = new MPayment (ctx, C_Payment_ID, null);
		//	Map Payment Rule <- Tender Type
		String PaymentRule = PAYMENTRULE_Check;
		if (payment.getTenderType().equals(X_C_Payment.TENDERTYPE_CreditCard))
			PaymentRule = PAYMENTRULE_CreditCard;
		else if (payment.getTenderType().equals(X_C_Payment.TENDERTYPE_DirectDebit))
			PaymentRule = PAYMENTRULE_DirectDebit;
		else if (payment.getTenderType().equals(X_C_Payment.TENDERTYPE_DirectDeposit))
			PaymentRule = PAYMENTRULE_DirectDeposit;
	//	else if (payment.getTenderType().equals(MPayment.TENDERTYPE_Check))
	//		PaymentRule = MPaySelectionCheck.PAYMENTRULE_Check;
		
		//	Create new PaySelection
		MPaySelection ps = new MPaySelection(ctx, 0, trx);
		ps.setC_BankAccount_ID (payment.getC_BankAccount_ID());
		ps.setName (Msg.translate(ctx, ""C_Payment_ID"") + "": "" + payment.getDocumentNo());
		ps.setDescription(payment.getDescription());
		ps.setPayDate (payment.getDateTrx());
		ps.setTotalAmt (payment.getPayAmt());
		ps.setIsApproved (true);
		ps.save();
		
		//	Create new PaySelection Line
		MPaySelectionLine psl = null;
		if (payment.getC_Invoice_ID() != 0)
		{
			psl = new MPaySelectionLine (ps, 10, PaymentRule);
			psl.setC_Invoice_ID(payment.getC_Invoice_ID());
			psl.setIsSOTrx (payment.isReceipt());
			psl.setOpenAmt(payment.getPayAmt().add(payment.getDiscountAmt()));
			psl.setPayAmt (payment.getPayAmt());
			psl.setDiscountAmt(payment.getDiscountAmt());
			psl.setDifferenceAmt (Env.ZERO);
			psl.save();
		}
		
		//	Create new PaySelection Check
		MPaySelectionCheck psc = new MPaySelectionCheck(ps, PaymentRule);
		psc.setC_BPartner_ID (payment.getC_BPartner_ID());
		psc.setC_Payment_ID(payment.getC_Payment_ID());
		psc.setIsReceipt(payment.isReceipt());
		psc.setPayAmt (payment.getPayAmt());
		psc.setDiscountAmt(payment.getDiscountAmt());
		psc.setQty (1);
		psc.setDocumentNo(payment.getDocumentNo());
		psc.setProcessed(true);
		psc.save();
		
		//	Update optional Line
		if (psl != null)
		{
			psl.setC_PaySelectionCheck_ID(psc.getC_PaySelectionCheck_ID());
			psl.setProcessed(true);
			psl.save();
		}
		
		//	Indicate Done
		ps.setProcessed(true);
		ps.save();
		return psc;
	}	//	createForPayment
"
org.compiere.model.MPaySelectionCheck.get,MPaySelectionCheck.java,"MPaySelectionCheck[] get (int C_PaySelection_ID,
		String PaymentRule, int startDocumentNo, Trx trx)
	{
		s_log.fine(""C_PaySelection_ID="" + C_PaySelection_ID
			+ "", PaymentRule="" +  PaymentRule + "", startDocumentNo="" + startDocumentNo);
		ArrayList<MPaySelectionCheck> list = new ArrayList<MPaySelectionCheck>();

		int docNo = startDocumentNo;
		String sql = ""SELECT * FROM C_PaySelectionCheck ""
			+ ""WHERE C_PaySelection_ID=? AND PaymentRule=?"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, trx);
			pstmt.setInt(1, C_PaySelection_ID);
			pstmt.setString(2, PaymentRule);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				MPaySelectionCheck check = new MPaySelectionCheck (Env.getCtx(), rs, trx);
				//	Set new Check Document No - saved in confirmPrint
				check.setDocumentNo(String.valueOf(docNo++));
				list.add(check);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}

		//  convert to Array
		MPaySelectionCheck[] retValue = new MPaySelectionCheck[list.size()];
		list.toArray(retValue);
		return retValue;
	}   //  get
"
org.compiere.model.MPaySelectionCheck.exportToFile,MPaySelectionCheck.java,"int exportToFile (MPaySelectionCheck[] checks, File file)
	{
		if (checks == null || checks.length == 0)
			return 0;
		//  Must be a file
		if (file.isDirectory())
		{
			s_log.log(Level.WARNING, ""File is directory - "" + file.getAbsolutePath());
			return 0;
		}
		//  delete if exists
		try
		{
			if (file.exists())
				file.delete();
		}
		catch (Exception e)
		{
			s_log.log(Level.WARNING, ""Could not delete - "" + file.getAbsolutePath(), e);
		}

		char x = '""';      //  ease
		int noLines = 0;
		StringBuffer line = null;
		try
		{
			FileWriter fw = new FileWriter(file);

			//  write header
			line = new StringBuffer();
			line.append(x).append(""Value"").append(x).append("","")
				.append(x).append(""Name"").append(x).append("","")
				.append(x).append(""Contact"").append(x).append("","")
				.append(x).append(""Addr1"").append(x).append("","")
				.append(x).append(""Addr2"").append(x).append("","")
				.append(x).append(""City"").append(x).append("","")
				.append(x).append(""State"").append(x).append("","")
				.append(x).append(""ZIP"").append(x).append("","")
				.append(x).append(""Country"").append(x).append("","")
				.append(x).append(""ReferenceNo"").append(x).append("","")
			    .append(x).append(""BPRoutingNo"").append(x).append("","")
				.append(x).append(""BPAccountNo"").append(x).append("","")
				.append(x).append(""BPAName"").append(x).append("","")
				.append(x).append(""BPACity"").append(x).append("","")
				.append(x).append(""BPBBAN"").append(x).append("","")
				.append(x).append(""BPIBAN"").append(x).append("","")
				.append(x).append(""BAName"").append(x).append("","")
				.append(x).append(""BARoutingNo"").append(x).append("","")
				.append(x).append(""BASwiftCode"").append(x).append("","")
				.append(x).append(""DocumentNo"").append(x).append("","")
				.append(x).append(""PayDate"").append(x).append("","")
				.append(x).append(""Currency"").append(x).append("","")
				.append(x).append(""PayAmount"").append(x).append("","")
				.append(x).append(""Comment"").append(x)
				.append(Env.NL);
			fw.write(line.toString());
			noLines++;

			//  write lines
			for (MPaySelectionCheck mpp : checks) {
				if (mpp == null)
					continue;
				//  BPartner Info
				String bp[] = getBPartnerInfo(mpp.getC_BPartner_ID());
				//  Target BankAccount Info
				String bpba[] = getBPBankAccountInfo(mpp.getC_BP_BankAccount_ID ());

				//  Comment - list of invoice document no
				StringBuffer comment = new StringBuffer();
				MPaySelectionLine[] psls = mpp.getPaySelectionLines(false);
				for (int l = 0; l < psls.length; l++)
				{
					if (l > 0)
						comment.append("", "");
					comment.append(psls[l].getInvoice().getDocumentNo());
				}
				line = new StringBuffer();
				line.append(x).append(bp[BP_VALUE]).append(x).append("","")   // Value
					.append(x).append(bp[BP_NAME]).append(x).append("","")    // Name
					.append(x).append(bp[BP_CONTACT]).append(x).append("","") // Contact
					.append(x).append(bp[BP_ADDR1]).append(x).append("","")   // Addr1
					.append(x).append(bp[BP_ADDR2]).append(x).append("","")   // Addr2
					.append(x).append(bp[BP_CITY]).append(x).append("","")    // City
					.append(x).append(bp[BP_REGION]).append(x).append("","")  // State
					.append(x).append(bp[BP_POSTAL]).append(x).append("","")  // ZIP
					.append(x).append(bp[BP_COUNTRY]).append(x).append("","") // Country
					.append(x).append(bp[BP_REFNO]).append(x).append("","")   // ReferenceNo
				    .append(x).append(bpba[BPBA_RoutingNo]).append(x).append("","")   // Routing No (as of BPBankAccount
					.append(x).append(bpba[BPBA_AccountNo]).append(x).append("","")   // AccountNo
					.append(x).append(bpba[BPBA_AName]).append(x).append("","")       // Account Name
					.append(x).append(bpba[BPBA_ACity]).append(x).append("","")       // Account City
					.append(x).append(bpba[BPBA_BBAN]).append(x).append("","")        // BBAN
					.append(x).append(bpba[BPBA_IBAN]).append(x).append("","")        // IBAN
					.append(x).append(bpba[BA_Name]).append(x).append("","")          // Bank Name
					.append(x).append(bpba[BA_RoutingNo]).append(x).append("","")     // Bank RoutingNo
					.append(x).append(bpba[BA_SwitftCode]).append(x).append("","")    // SwiftCode
					//  Payment Info
					.append(x).append(mpp.getDocumentNo()).append(x).append("","")    // DocumentNo
					.append(mpp.getParent().getPayDate()).append("","")               // PayDate
					.append(x).append(MCurrency.getISO_Code(Env.getCtx(), mpp.getParent().getC_Currency_ID())).append(x).append("","")    // Currency
					.append(mpp.getPayAmt()).append("","")                // PayAmount
					.append(x).append(comment.toString()).append(x)     // Comment
					.append(Env.NL);
				fw.write(line.toString());
				noLines++;
			}   //  write line

			fw.flush();
			fw.close();
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, """", e);
		}

		return noLines;
	}   //  exportToFile
"
org.compiere.model.MPaySelectionCheck.getBPartnerInfo,MPaySelectionCheck.java,"String[] getBPartnerInfo (int C_BPartner_ID)
	{
		String[] bp = new String[10];

		String sql = ""SELECT bp.Value, bp.Name, c.Name AS Contact, ""
			+ ""a.Address1, a.Address2, a.City, r.Name AS Region, a.Postal, ""
			+ ""cc.Name AS Country, bp.ReferenceNo ""
			/*//jz use SQL standard outer join
			+ ""FROM C_BPartner bp, AD_User c, C_BPartner_Location l, C_Location a, C_Region r, C_Country cc ""
			+ ""WHERE bp.C_BPartner_ID=?""        // #1
			+ "" AND bp.C_BPartner_ID=c.C_BPartner_ID(+)""
			+ "" AND bp.C_BPartner_ID=l.C_BPartner_ID""
			+ "" AND l.C_Location_ID=a.C_Location_ID""
			+ "" AND a.C_Region_ID=r.C_Region_ID(+)""
			+ "" AND a.C_Country_ID=cc.C_Country_ID ""
			*/
			+ ""FROM C_BPartner bp ""
			+ ""LEFT OUTER JOIN AD_User c ON (bp.C_BPartner_ID=c.C_BPartner_ID) ""
			+ ""INNER JOIN C_BPartner_Location l ON (bp.C_BPartner_ID=l.C_BPartner_ID) ""
			+ ""INNER JOIN C_Location a ON (l.C_Location_ID=a.C_Location_ID) ""
			+ ""LEFT OUTER JOIN C_Region r ON (a.C_Region_ID=r.C_Region_ID) ""
			+ ""INNER JOIN C_Country cc ON (a.C_Country_ID=cc.C_Country_ID) ""
			+ ""WHERE bp.C_BPartner_ID=?""        // #1
			+ ""ORDER BY l.IsBillTo DESC"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_BPartner_ID);
			ResultSet rs = pstmt.executeQuery();
			//
			if (rs.next())
			{
				bp[BP_VALUE] = rs.getString(1);
				if (bp[BP_VALUE] == null)
					bp[BP_VALUE] = """";
				bp[BP_NAME] = rs.getString(2);
				if (bp[BP_NAME] == null)
					bp[BP_NAME] = """";
				bp[BP_CONTACT] = rs.getString(3);
				if (bp[BP_CONTACT] == null)
					bp[BP_CONTACT] = """";
				bp[BP_ADDR1] = rs.getString(4);
				if (bp[BP_ADDR1] == null)
					bp[BP_ADDR1] = """";
				bp[BP_ADDR2] = rs.getString(5);
				if (bp[BP_ADDR2] == null)
					bp[BP_ADDR2] = """";
				bp[BP_CITY] = rs.getString(6);
				if (bp[BP_CITY] == null)
					bp[BP_CITY] = """";
				bp[BP_REGION] = rs.getString(7);
				if (bp[BP_REGION] == null)
					bp[BP_REGION] = """";
				bp[BP_POSTAL] = rs.getString(8);
				if (bp[BP_POSTAL] == null)
					bp[BP_POSTAL] = """";
				bp[BP_COUNTRY] = rs.getString(9);
				if (bp[BP_COUNTRY] == null)
					bp[BP_COUNTRY] = """";
				bp[BP_REFNO] = rs.getString(10);
				if (bp[BP_REFNO] == null)
					bp[BP_REFNO] = """";
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		return bp;
	}   //  getBPartnerInfo
"
org.compiere.model.MPaySelectionCheck.getBPBankAccountInfo,MPaySelectionCheck.java,"String[] getBPBankAccountInfo (int C_BP_BankAccount_ID)
	{
		String[] bp = new String[10];

		String sql = ""SELECT bpba.RoutingNo, bpba.AccountNo, bpba.A_Name, bpba.A_City, bpba.BBAN, ""
			+ ""bpba.IBAN, ba.Name, ba.RoutingNo, ba.SwiftCode ""
			/*//jz use SQL standard outer join
			+ ""FROM C_BPartner bp, AD_User c, C_BPartner_Location l, C_Location a, C_Region r, C_Country cc ""
			+ ""WHERE bp.C_BPartner_ID=?""        // #1
			+ "" AND bp.C_BPartner_ID=c.C_BPartner_ID(+)""
			+ "" AND bp.C_BPartner_ID=l.C_BPartner_ID""
			+ "" AND l.C_Location_ID=a.C_Location_ID""
			+ "" AND a.C_Region_ID=r.C_Region_ID(+)""
			+ "" AND a.C_Country_ID=cc.C_Country_ID ""
			*/
			+ ""FROM C_BP_BankAccount bpba ""
			+ ""LEFT OUTER JOIN C_Bank ba ON (bpba.C_Bank_ID = ba.C_Bank_ID) ""
			+ ""WHERE bpba.C_BP_BankAccount_ID=?"";        // #1
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_BP_BankAccount_ID);
			ResultSet rs = pstmt.executeQuery();
			//
			if (rs.next())
			{
				bp[BPBA_RoutingNo] = rs.getString(1);
				if (bp[BPBA_RoutingNo] == null)
					bp[BPBA_RoutingNo] = """";
				bp[BPBA_AccountNo] = rs.getString(2);
				if (bp[BPBA_AccountNo] == null)
					bp[BPBA_AccountNo] = """";
				bp[BPBA_AName] = rs.getString(3);
				if (bp[BPBA_AName] == null)
					bp[BPBA_AName] = """";
				bp[BPBA_ACity] = rs.getString(4);
				if (bp[BPBA_ACity] == null)
					bp[BPBA_ACity] = """";
				bp[BPBA_BBAN] = rs.getString(5);
				if (bp[BPBA_BBAN] == null)
					bp[BPBA_BBAN] = """";
				bp[BPBA_IBAN] = rs.getString(6);
				if (bp[BPBA_IBAN] == null)
					bp[BPBA_IBAN] = """";
				bp[BA_Name] = rs.getString(7);
				if (bp[BA_Name] == null)
					bp[BA_Name] = """";
				bp[BA_RoutingNo] = rs.getString(8);
				if (bp[BA_RoutingNo] == null)
					bp[BA_RoutingNo] = """";
				bp[BA_SwitftCode] = rs.getString(9);
				if (bp[BA_SwitftCode] == null)
					bp[BA_SwitftCode] = """";
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		return bp;
	}   //  getBPartnerInfo
"
org.compiere.model.MPaySelectionCheck.confirmPrint,MPaySelectionCheck.java,"int confirmPrint (MPaySelectionCheck[] checks, MPaymentBatch batch)
	{
		int lastDocumentNo = 0;
		for (MPaySelectionCheck check : checks) {
			MPayment payment;
			//	Existing Payment
			if (check.getC_Payment_ID() != 0)
			{
				payment = new MPayment(check.getCtx(), check.getC_Payment_ID(), null);
				//	Update check number
				if (check.getPaymentRule().equals(PAYMENTRULE_Check))
				{
					payment.setCheckNo(check.getDocumentNo());
					if (!payment.save())
						s_log.log(Level.SEVERE, ""Payment not saved: "" + payment);
				}
			}
			else	//	New Payment
			{
				payment = new MPayment(check.getCtx(), 0, null);
				payment.setAD_Org_ID(check.getAD_Org_ID());
				payment.setAD_Client_ID(check.getAD_Client_ID());
				//
				if (check.getPaymentRule().equals(PAYMENTRULE_Check)){
					payment.setBankCheck (check.getParent().getC_BankAccount_ID(), false, check.getDocumentNo());
					payment.setTenderType(X_C_Payment.TENDERTYPE_Check);
				}
				else if (check.getPaymentRule().equals(PAYMENTRULE_CreditCard)){
					payment.setTenderType(X_C_Payment.TENDERTYPE_CreditCard);
				}
				else if (check.getPaymentRule().equals(PAYMENTRULE_DirectDeposit)){
					payment.setBankACH(check);
					payment.setTenderType(X_C_Payment.TENDERTYPE_DirectDeposit);
				}
				else if (check.getPaymentRule().equals(PAYMENTRULE_DirectDebit)){
					payment.setBankACH(check);
					payment.setTenderType(X_C_Payment.TENDERTYPE_DirectDebit);
				}
				else
				{
					s_log.log(Level.SEVERE, ""Unsupported Payment Rule="" + check.getPaymentRule());
					continue;
				}
				payment.setTrxType(X_C_Payment.TRXTYPE_CreditPayment);
				payment.setAmount(check.getParent().getC_Currency_ID(), check.getPayAmt());
				payment.setDiscountAmt(check.getDiscountAmt());
				payment.setDateTrx(check.getParent().getPayDate());
				payment.setC_BPartner_ID(check.getC_BPartner_ID());
				//	Link to Batch
				if (batch != null)
				{
					if (batch.getC_PaymentBatch_ID() == 0)
						batch.save();	//	new
					payment.setC_PaymentBatch_ID(batch.getC_PaymentBatch_ID());
				}
				//	Link to Invoice
				MPaySelectionLine[] psls = check.getPaySelectionLines(false);
				s_log.fine(""confirmPrint - "" + check + "" (#SelectionLines="" + psls.length + "")"");
				if (check.getQty() == 1 && psls != null && psls.length == 1)
				{
					MPaySelectionLine psl = psls[0];
					s_log.fine(""Map to Invoice "" + psl);
					//
					payment.setC_Invoice_ID (psl.getC_Invoice_ID());
					payment.setDiscountAmt (psl.getDiscountAmt());
					payment.setWriteOffAmt(psl.getDifferenceAmt());
					BigDecimal overUnder = psl.getOpenAmt().subtract(psl.getPayAmt())
						.subtract(psl.getDiscountAmt()).subtract(psl.getDifferenceAmt());
					payment.setOverUnderAmt(overUnder);
				}
				else
					payment.setDiscountAmt(Env.ZERO);
				payment.setWriteOffAmt(Env.ZERO);
				if (!payment.save()){
					s_log.log(Level.SEVERE, ""Payment not saved: "" + payment);
					return lastDocumentNo;
				}
				else {
					int C_Payment_ID = payment.get_ID();
					if (C_Payment_ID < 1){
						s_log.log(Level.SEVERE, ""Payment not created="" + check);
						return lastDocumentNo;
					}
					else
					{
						check.setC_Payment_ID (C_Payment_ID);
						if (!check.save ()){
							s_log.log(Level.SEVERE, ""Check not saved: "" + check);
							return lastDocumentNo;
						}

						//	Should start WF
						payment.processIt(DocActionConstants.ACTION_Complete);
						if (!payment.save()){
							s_log.log(Level.SEVERE, ""Payment not saved after complete: "" + payment);
							return lastDocumentNo;
						}
					}
				}
			}	//	new Payment

			//	Get Check Document No
			try
			{
				int no = Integer.parseInt(check.getDocumentNo());
				if (lastDocumentNo < no)
					lastDocumentNo = no;
			}
			catch (NumberFormatException ex)
			{
				s_log.log(Level.SEVERE, ""DocumentNo="" + check.getDocumentNo(), ex);
			}
			check.setIsPrinted(true);
			check.setProcessed(true);
			if (!check.save ())
				s_log.log(Level.SEVERE, ""Check not saved after documentNo update: "" + check);
		}	//	all checks

		s_log.fine(""Last Document No = "" + lastDocumentNo);
		return lastDocumentNo;
	}	//	confirmPrint
"
org.compiere.model.MPaySelectionCheck.addLine,MPaySelectionCheck.java,"void addLine (MPaySelectionLine line)
	{
		if (getC_BPartner_ID() != line.getInvoice().getC_BPartner_ID())
			throw new IllegalArgumentException(""Line for fifferent BPartner"");
		//
		if (isReceipt() == line.isSOTrx())
		{
			setPayAmt (getPayAmt().add(line.getPayAmt()));
			setDiscountAmt(getDiscountAmt().add(line.getDiscountAmt()));
		}
		else
		{
			setPayAmt (getPayAmt().subtract(line.getPayAmt()));
			setDiscountAmt(getDiscountAmt().subtract(line.getDiscountAmt()));
		}
		setQty (getQty()+1);
	}	//	addLine
"
org.compiere.model.MPaySelectionCheck.getParent,MPaySelectionCheck.java,"MPaySelection getParent()
	{
		if (m_parent == null)
			m_parent = new MPaySelection (getCtx(), getC_PaySelection_ID(), get_Trx());
		return m_parent;
	}	//	getParent
"
org.compiere.model.MPaySelectionCheck.isValid,MPaySelectionCheck.java,"boolean isValid()
	{
		if (getC_BP_BankAccount_ID() != 0)
			return true;
		return !isDirect();
	}	//	isValid
"
org.compiere.model.MPaySelectionCheck.isDirect,MPaySelectionCheck.java,"boolean isDirect()
	{
		return (X_C_Order.PAYMENTRULE_DirectDeposit.equals(getPaymentRule())
			|| X_C_Order.PAYMENTRULE_DirectDebit.equals(getPaymentRule()));
	}	//	isDirect
"
org.compiere.model.MPaySelectionCheck.toString,MPaySelectionCheck.java,"String toString()
	{
		StringBuffer sb = new StringBuffer(""MPaymentCheck["");
		sb.append(get_ID()).append(""-"").append(getDocumentNo())
			.append(""-"").append(getPayAmt())
			.append("",PaymetRule="").append(getPaymentRule())
			.append("",Qty="").append(getQty())
			.append(""]"");
		return sb.toString();
	}	//	toString
"
org.compiere.model.MPaySelectionCheck.getPaySelectionLines,MPaySelectionCheck.java,"MPaySelectionLine[] getPaySelectionLines (boolean requery)
	{
		if (m_lines != null && !requery)
			return m_lines;
		ArrayList<MPaySelectionLine> list = new ArrayList<MPaySelectionLine>();
		String sql = ""SELECT * FROM C_PaySelectionLine WHERE C_PaySelectionCheck_ID=? ORDER BY Line"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getC_PaySelectionCheck_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MPaySelectionLine(getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		m_lines = new MPaySelectionLine[list.size ()];
		list.toArray (m_lines);
		return m_lines;
	}	//	getPaySelectionLines
"
org.compiere.model.MPaySelectionCheck.updateForPayment,MPaySelectionCheck.java,"boolean updateForPayment (int C_Payment_ID)
	{
	
		if (C_Payment_ID == 0)
			return false;
		MPayment payment = new MPayment (Env.getCtx(), C_Payment_ID, null);
		//PaySelection
		MPaySelection ps = new MPaySelection(Env.getCtx(), getC_PaySelection_ID(), get_Trx());
		//get the lines.
		MPaySelectionLine[] lines=ps.getLines(false);
		//if lines already there, do nothing.  Allocation is done only once.
		if(lines.length!=0)
			return false;

		//	Create new PaySelection Line
		MAllocationHdr[] hdrs=MAllocationHdr.getOfPayment(Env.getCtx(), C_Payment_ID, null);
		int counter=0;
		for (MAllocationHdr hdr : hdrs) {
			MAllocationLine[] alls=hdr.getLines(false);
			for (MAllocationLine all : alls) {
				if(all.getC_Invoice_ID()!=0)
				{
					MPaySelectionLine psl = new MPaySelectionLine (ps, ++counter, getPaymentRule());
					BigDecimal one = new BigDecimal(1);
					if(!payment.isReceipt())
						one=one.negate();
					BigDecimal openAmt=all.getAmount().add(all.getDiscountAmt()).add(all.getWriteOffAmt()).add(all.getOverUnderAmt());
					psl.setInvoice(all.getC_Invoice_ID(), isReceipt(), openAmt.multiply(one), 
							all.getAmount().multiply(one), all.getDiscountAmt().multiply(one));
					psl.setC_PaySelectionCheck_ID(getC_PaySelectionCheck_ID());
					psl.setProcessed(true);
					psl.save();
				}
			}
		}
		return true;
	}	//	updateForPayment
"
org.compiere.model.CalloutEngine.start,CalloutEngine.java,"String start (Ctx ctx, String methodName, int WindowNo,
		GridTab mTab, GridField mField, Object value, Object oldValue)
	{
		if (methodName == null || methodName.length() == 0)
			throw new IllegalArgumentException (""No Method Name"");
		//
		String retValue = """";
		StringBuffer msg = new StringBuffer(methodName).append("" - "")
			.append(mField.getColumnName())
			.append(""="").append(value)
			.append("" (old="").append(oldValue)
			.append("") {active="").append(isCalloutActive()).append(""}"");
		if (!isCalloutActive())
			log.info (msg.toString());

		//	Find Method
		Method method = getMethod(methodName);
		if (method == null)
			throw new IllegalArgumentException (""Method not found: "" + methodName);
		int argLength = method.getParameterTypes().length;
		if (!(argLength == 5 || argLength == 6))
			throw new IllegalArgumentException (""Method "" + methodName
				+ "" has invalid no of arguments: "" + argLength);

		//	Call Method
		try
		{
			Object[] args = null;
			if (argLength == 6)
				args = new Object[] {ctx, Integer.valueOf(WindowNo), mTab, mField, value, oldValue};
			else
				args = new Object[] {ctx, Integer.valueOf(WindowNo), mTab, mField, value};
			retValue = (String)method.invoke(this, args);
		}
		catch (Exception e)
		{
			setCalloutActive(false);
			Throwable ex = e.getCause();	//	InvocationTargetException
			if (ex == null)
				ex = e;
			log.log(Level.SEVERE, ""start: "" + methodName, ex);
			ex.printStackTrace(System.err);
			retValue = ex.getLocalizedMessage();
		}
		return retValue;
	}	//	start
"
org.compiere.model.CalloutEngine.convert,CalloutEngine.java,"String convert (String methodName, String value)
	{
		if (methodName == null || methodName.length() == 0)
			throw new IllegalArgumentException (""No Method Name"");
		//
		String retValue = null;
		StringBuffer msg = new StringBuffer(methodName).append("" - "").append(value);
		log.info (msg.toString());
		//
		//	Find Method
		Method method = getMethod(methodName);
		if (method == null)
			throw new IllegalArgumentException (""Method not found: "" + methodName);
		int argLength = method.getParameterTypes().length;
		if (argLength != 1)
			throw new IllegalArgumentException (""Method "" + methodName
				+ "" has invalid no of arguments: "" + argLength);

		//	Call Method
		try
		{
			Object[] args = new Object[] {value};
			retValue = (String)method.invoke(this, args);
		}
		catch (Exception e)
		{
			setCalloutActive(false);
			log.log(Level.SEVERE, ""convert: "" + methodName, e);
			e.printStackTrace(System.err);
		}
		return retValue;
	}   //  convert
"
org.compiere.model.CalloutEngine.getMethod,CalloutEngine.java,"Method getMethod (String methodName)
	{
		Method[] allMethods = getClass().getMethods();
		for (Method element : allMethods)
		{
			if (methodName.equals(element.getName())
				&& String.class.equals(element.getReturnType()))
				return element;
		}
		return null;
	}	//	getMethod
"
org.compiere.model.CalloutEngine.isCalloutActive,CalloutEngine.java,"boolean isCalloutActive()
	{
		return s_calloutActive;
	}	//	isCalloutActive
"
org.compiere.model.CalloutEngine.setCalloutActive,CalloutEngine.java,"void setCalloutActive (boolean active)
	{
		s_calloutActive = active;
	}	//	setCalloutActive
"
org.compiere.model.CalloutEngine.dateAcct,CalloutEngine.java,"String dateAcct (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		if (isCalloutActive())		//	assuming it is resetting value
			return """";
	//	setCalloutActive(true);
		if (value == null || !(value instanceof Timestamp))
			return """";
		mTab.setValue(""DateAcct"", value);
	//	setCalloutActive(false);
		return """";
	}	//	dateAcct
"
org.compiere.model.CalloutEngine.rate,CalloutEngine.java,"String rate (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		if (isCalloutActive() || value == null)		//	assuming it is Conversion_Rate
			return """";
		setCalloutActive(true);

		BigDecimal rate1 = (BigDecimal)value;
		BigDecimal rate2 = Env.ZERO;
		BigDecimal one = new BigDecimal(1.0);

		if (rate1.doubleValue() != 0.0)	//	no divide by zero
			rate2 = one.divide(rate1, 12, BigDecimal.ROUND_HALF_UP);
		//
		if (mField.getColumnName().equals(""MultiplyRate""))
			mTab.setValue(""DivideRate"", rate2);
		else
			mTab.setValue(""MultiplyRate"", rate2);
		log.info(mField.getColumnName() + ""="" + rate1 + "" => "" + rate2);
		setCalloutActive(false);
		return """";
	}	//	rate
"
org.compiere.model.MInvoiceTax.get,MInvoiceTax.java,"MInvoiceTax get (MInvoiceLine line, int precision, 
		boolean oldTax, Trx trx)
	{
		MInvoiceTax retValue = null;
		if (line == null || line.getC_Invoice_ID() == 0 || line.isDescription())
			return null;
		int C_Tax_ID = line.getC_Tax_ID();
		if (oldTax && line.is_ValueChanged(""C_Tax_ID""))
		{
			Object old = line.get_ValueOld(""C_Tax_ID"");
			if (old == null)
				return null;
			C_Tax_ID = ((Integer)old).intValue();
		}
		if (C_Tax_ID == 0)
		{
			s_log.warning(""C_Tax_ID=0"");
			return null;
		}
		
		String sql = ""SELECT * FROM C_InvoiceTax WHERE C_Invoice_ID=? AND C_Tax_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, line.getC_Invoice_ID());
			pstmt.setInt (2, C_Tax_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
			{
				retValue = new MInvoiceTax (line.getCtx(), rs, trx);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e); 
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		if (retValue != null)
		{
			retValue.set_Trx(trx);
			retValue.setPrecision(precision);
			s_log.fine(""(old="" + oldTax + "") "" + retValue);
			return retValue;
		}
		
		//	Create New
		retValue = new MInvoiceTax(line.getCtx(), 0, trx);
		retValue.set_Trx(trx);
		retValue.setClientOrg(line);
		retValue.setC_Invoice_ID(line.getC_Invoice_ID());
		retValue.setC_Tax_ID(line.getC_Tax_ID());
		retValue.setPrecision(precision);
		retValue.setIsTaxIncluded(line.isTaxIncluded());
		s_log.fine(""(new) "" + retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MInvoiceTax.getPrecision,MInvoiceTax.java,"int getPrecision ()
	{
		if (m_precision == null)
			return 2;
		return m_precision.intValue();
	}	//	getPrecision
"
org.compiere.model.MInvoiceTax.setPrecision,MInvoiceTax.java,"void setPrecision (int precision)
	{
		m_precision = Integer.valueOf(precision);
	}	//	setPrecision
"
org.compiere.model.MInvoiceTax.getTax,MInvoiceTax.java,"MTax getTax()
	{
		if (m_tax == null)
			m_tax = MTax.get(getCtx(), getC_Tax_ID());
		return m_tax;
	}	//	getTax
"
org.compiere.model.MInvoiceTax.calculateTaxFromLines,MInvoiceTax.java,"boolean calculateTaxFromLines ()
	{
		BigDecimal taxBaseAmt = Env.ZERO;
		BigDecimal taxAmt = Env.ZERO;
		//
		boolean documentLevel = getTax().isDocumentLevel();
		MTax tax = getTax();
		//
		String sql = ""SELECT il.LineNetAmt, COALESCE(il.TaxAmt,0), i.IsSOTrx ""
			+ ""FROM C_InvoiceLine il""
			+ "" INNER JOIN C_Invoice i ON (il.C_Invoice_ID=i.C_Invoice_ID) ""
			+ ""WHERE il.C_Invoice_ID=? AND il.C_Tax_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getC_Invoice_ID());
			pstmt.setInt (2, getC_Tax_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				//	BaseAmt
				BigDecimal baseAmt = rs.getBigDecimal(1);
				taxBaseAmt = taxBaseAmt.add(baseAmt);
				//	TaxAmt
				BigDecimal amt = rs.getBigDecimal(2);
				if (amt == null)
					amt = Env.ZERO;
				boolean isSOTrx = ""Y"".equals(rs.getString(3));
				//
				if (documentLevel || baseAmt.signum() == 0)
					amt = Env.ZERO;
				else if (amt.signum() != 0 && !isSOTrx)	//	manually entered
					;
				else	// calculate line tax
					amt = tax.calculateTax(baseAmt, isTaxIncluded(), getPrecision());
				//
				taxAmt = taxAmt.add(amt);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""setTaxBaseAmt"", e);
			taxBaseAmt = null;
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		if (taxBaseAmt == null)
			return false;
		
		//	Calculate Tax
		if (documentLevel || taxAmt.signum() == 0)
			taxAmt = tax.calculateTax(taxBaseAmt, isTaxIncluded(), getPrecision());
		setTaxAmt(taxAmt);

		//	Set Base
		if (isTaxIncluded())
			setTaxBaseAmt (taxBaseAmt.subtract(taxAmt));
		else
			setTaxBaseAmt (taxBaseAmt);
		return true;
	}	//	calculateTaxFromLines
"
org.compiere.model.MInvoiceTax.toString,MInvoiceTax.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MInvoiceTax["");
		sb.append(""C_Invoice_ID="").append(getC_Invoice_ID())
			.append("",C_Tax_ID="").append(getC_Tax_ID())
			.append("", Base="").append(getTaxBaseAmt()).append("",Tax="").append(getTaxAmt())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MDunningRunEntry.setBPartner,MDunningRunEntry.java,"void setBPartner (MBPartner bp, boolean isSOTrx)
	{
		setC_BPartner_ID(bp.getC_BPartner_ID());
		MBPartnerLocation[] locations = bp.getLocations(false);
		//	Location
		if (locations.length == 1)
			setC_BPartner_Location_ID (locations[0].getC_BPartner_Location_ID());
		else
		{
			for (MBPartnerLocation location : locations) {
				if (!location.isActive())
					continue;
				if ((location.isPayFrom() && isSOTrx)
					|| (location.isRemitTo() && !isSOTrx))
				{
					setC_BPartner_Location_ID (location.getC_BPartner_Location_ID());
					break;
				}
			}
		}
		if (getC_BPartner_Location_ID() == 0)
		{
			String msg = ""@C_BPartner_ID@ "" + bp.getName();
			if (isSOTrx)
				msg += "" @No@ @IsPayFrom@"";
			else
				msg += "" @No@ @IsRemitTo@"";
			throw new IllegalArgumentException (msg);
		}
		//	User with location
		MUser[] users = MUser.getOfBPartner(getCtx(), bp.getC_BPartner_ID());
		if (users.length == 1)
			setAD_User_ID (users[0].getAD_User_ID());
		else
		{
			for (MUser user : users) {
				if (user.getC_BPartner_Location_ID() == getC_BPartner_Location_ID())
				{
					setAD_User_ID (user.getAD_User_ID());
					break;
				}
			}
		}
		//
		int SalesRep_ID = bp.getSalesRep_ID();
		if (SalesRep_ID != 0)
			setSalesRep_ID (SalesRep_ID);
	}	//	setBPartner
"
org.compiere.model.MDunningRunEntry.getLines,MDunningRunEntry.java,"MDunningRunLine[] getLines() 
	{
		return getLines(false); 
	}	//	getLines
"
org.compiere.model.MDunningRunEntry.getLines,MDunningRunEntry.java,"MDunningRunLine[] getLines (boolean onlyInvoices) 
	{
		ArrayList<MDunningRunLine> list = new ArrayList<MDunningRunLine>();
		String sql = ""SELECT * FROM C_DunningRunLine WHERE C_DunningRunEntry_ID=?"";
		if (onlyInvoices)
			sql += "" AND C_Invoice_ID IS NOT NULL"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, get_ID ());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MDunningRunLine(getCtx(), rs, get_Trx()));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

		//
		MDunningRunLine[] retValue = new MDunningRunLine[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getLines
"
org.compiere.model.MDunningRunEntry.hasInvoices,MDunningRunEntry.java,"boolean hasInvoices() 
	{
		boolean retValue = false;
		String sql = ""SELECT COUNT(*) FROM C_DunningRunLine WHERE C_DunningRunEntry_ID=? AND C_Invoice_ID IS NOT NULL"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, get_ID ());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				if (rs.getInt(1) > 0) 
					retValue = true;
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return retValue;
	}	//	hasInvoices
"
org.compiere.model.MDunningRunEntry.getParent,MDunningRunEntry.java,"MDunningRun getParent() 
	{
		if (m_parent == null) 
			m_parent = new MDunningRun(getCtx(), getC_DunningRun_ID (), get_Trx());
		return m_parent;
	}	//	getParent
"
org.compiere.model.MDunningRunEntry.beforeSave,MDunningRunEntry.java,"boolean beforeSave (boolean newRecord)
	{
		//	Set Processed
		if (isProcessed() && is_ValueChanged(""Processed""))
		{
			MDunningRunLine[] theseLines = getLines();
			for (MDunningRunLine element : theseLines) {
				element.setProcessed (true);
				element.save(get_Trx());
			}
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MInventory.get,MInventory.java,"MInventory get (Ctx ctx, int M_Inventory_ID)
	{
		Integer key = Integer.valueOf (M_Inventory_ID);
		MInventory retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MInventory (ctx, M_Inventory_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	} //	get
"
org.compiere.model.MInventory.getLines,MInventory.java,"MInventoryLine[] getLines (boolean requery)
	{
		if ((m_lines != null) && !requery)
			return m_lines;
		//
		ArrayList<MInventoryLine> list = new ArrayList<MInventoryLine>();
		String sql = ""SELECT * FROM M_InventoryLine WHERE M_Inventory_ID=? ORDER BY Line"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getM_Inventory_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MInventoryLine (getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		} catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		} catch (Exception e)
		{
			pstmt = null;
		}

		m_lines = new MInventoryLine[list.size ()];
		list.toArray (m_lines);
		return m_lines;
	}	//	getLines
"
org.compiere.model.MInventory.addDescription,MInventory.java,"void addDescription (String description)
	{
		String desc = getDescription();
		if (desc == null)
			setDescription(description);
		else
			setDescription(desc + "" | "" + description);
	}	//	addDescription
"
org.compiere.model.MInventory.setClientOrg,MInventory.java,"void setClientOrg (int AD_Client_ID, int AD_Org_ID)
	{
		super.setClientOrg(AD_Client_ID, AD_Org_ID);
	}	//	setClientOrg
"
org.compiere.model.MInventory.toString,MInventory.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MInventory["");
		sb.append (get_ID())
			.append (""-"").append (getDocumentNo())
			.append ("",M_Warehouse_ID="").append(getM_Warehouse_ID())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MInventory.getDocumentInfo,MInventory.java,"String getDocumentInfo()
	{
		MDocType dt = MDocType.get(getCtx(), getC_DocType_ID());
		return dt.getName() + "" "" + getDocumentNo();
	}	//	getDocumentInfo
"
org.compiere.model.MInventory.createPDF,MInventory.java,"File createPDF ()
	{
		try
		{
			File temp = File.createTempFile(get_TableName()+get_ID()+""_"", "".pdf"");
			return createPDF (temp);
		}
		catch (Exception e)
		{
			log.severe(""Could not create PDF - "" + e.getMessage());
		}
		return null;
	}	//	getPDF
"
org.compiere.model.MInventory.createPDF,MInventory.java,"File createPDF (File file)
	{
	//	ReportEngine re = ReportEngine.get (getCtx(), ReportEngine.INVOICE, getC_Invoice_ID());
	//	if (re == null)
			return null;
	//	return re.getPDF(file);
	}	//	createPDF
"
org.compiere.model.MInventory.beforeSave,MInventory.java,"boolean beforeSave (boolean newRecord)
	{
		if (getC_DocType_ID() == 0)
		{
			MDocType types[] = MDocType.getOfDocBaseType(getCtx(), MDocBaseType.DOCBASETYPE_MaterialPhysicalInventory);
			if (types.length > 0)	//	get first
				setC_DocType_ID(types[0].getC_DocType_ID());
			else
			{
				log.saveError(""Error"", Msg.parseTranslation(getCtx(), ""@NotFound@ @C_DocType_ID@""));
				return false;
			}
		}

		//	Warehouse Org
		if (newRecord
			|| is_ValueChanged(""AD_Org_ID"") || is_ValueChanged(""M_Warehouse_ID""))
		{
			MWarehouse wh = MWarehouse.get(getCtx(), getM_Warehouse_ID());
			if (wh.getAD_Org_ID() != getAD_Org_ID())
			{
				log.saveError(""WarehouseOrgConflict"", """");
				return false;
			}
		}

		return true;
	}	//	beforeSave
"
org.compiere.model.MInventory.setProcessed,MInventory.java,"void setProcessed (boolean processed)
	{
		super.setProcessed (processed);
		if (get_ID() == 0)
			return;
		String sql = ""UPDATE M_InventoryLine SET Processed='""
			+ (processed ? ""Y"" : ""N"")
			+ ""' WHERE M_Inventory_ID="" + getM_Inventory_ID();
		int noLine = DB.executeUpdate(sql, get_Trx());
		m_lines = null;
		log.fine(""Processed="" + processed + "" - Lines="" + noLine);
	}	//	setProcessed
"
org.compiere.model.MInventory.processIt,MInventory.java,"boolean processIt (String processAction)
	{
		m_processMsg = null;
		DocumentEngine engine = new DocumentEngine (this, getDocStatus());
		return engine.processIt (processAction, getDocAction());
	}	//	processIt
"
org.compiere.model.MInventory.unlockIt,MInventory.java,"boolean unlockIt()
	{
		log.info(toString());
		setProcessing(false);
		return true;
	}	//	unlockIt
"
org.compiere.model.MInventory.invalidateIt,MInventory.java,"boolean invalidateIt()
	{
		log.info(toString());
		setDocAction(DOCACTION_Prepare);
		return true;
	}	//	invalidateIt
"
org.compiere.model.MInventory.prepareIt,MInventory.java,"String prepareIt()
	{
		log.info(toString());
		m_processMsg = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_BEFORE_PREPARE);
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;

		MInventoryLine[] lines = getLines(false);
		if (lines.length == 0)
		{
			m_processMsg = ""@NoLines@"";
			return DocActionConstants.STATUS_Invalid;
		}

		//	Std Period open?
		m_processMsg =MPeriod.isOpen(this, lines, getMovementDate(), MDocBaseType.DOCBASETYPE_MaterialPhysicalInventory);
		if (m_processMsg != null)
			return DocActionConstants.STATUS_Invalid;

		//	TODO: Add up Amounts
	//	setApprovalAmt();


		m_justPrepared = true;
		if (!DOCACTION_Complete.equals(getDocAction()))
			setDocAction(DOCACTION_Complete);
		return DocActionConstants.STATUS_InProgress;
	}	//	prepareIt
"
org.compiere.model.MInventory.approveIt,MInventory.java,"boolean  approveIt()
	{
		log.info(toString());
		setIsApproved(true);
		return true;
	}	//	approveIt
"
org.compiere.model.MInventory.rejectIt,MInventory.java,"boolean rejectIt()
	{
		log.info(toString());
		setIsApproved(false);
		return true;
	}	//	rejectIt
"
org.compiere.model.MInventory.completeIt,MInventory.java,"String completeIt()
	{
		//	Re-Check
		if (!m_justPrepared)
		{
			String status = prepareIt();
			if (!DocActionConstants.STATUS_InProgress.equals(status))
				return status;
		}
		//	Implicit Approval
		if (!isApproved())
			approveIt();
		log.info(toString());
		//
		MInventoryLine[] lines = getLines(m_justPrepared);
		for (MInventoryLine line : lines) {
			if (!line.isActive())
				continue;

			line.createMA(false);

			MTransaction p_trx = null;
			if (line.getM_AttributeSetInstance_ID() == 0)
			{
				BigDecimal qtyDiff = line.getQtyInternalUse().negate();

				if (qtyDiff.signum() == 0)
					qtyDiff = line.getQtyCount().subtract(line.getQtyBook());
				//
				if (qtyDiff.signum() > 0)
				{
					//	Storage
					MStorage storage = MStorage.get(getCtx(), line.getM_Locator_ID(),
						line.getM_Product_ID(), 0, get_Trx());
					if (storage == null)
						storage = MStorage.getCreate(getCtx(), line.getM_Locator_ID(),
							line.getM_Product_ID(), 0, get_Trx());
					BigDecimal qtyNew = storage.getQtyOnHand().add(qtyDiff);
					log.fine(""Diff="" + qtyDiff
						+ "" - OnHand="" + storage.getQtyOnHand() + ""->"" + qtyNew);
					storage.setQtyOnHand(qtyNew);
					storage.setDateLastInventory(getMovementDate());
					if (!storage.save(get_Trx()))
					{
						ValueNamePair pp = CLogger.retrieveError();
						if (pp != null)
							m_processMsg = pp.getName();
						else
							m_processMsg = ""Storage not updated(1)"";
						return DocActionConstants.STATUS_Invalid;
					}
					log.fine(storage.toString());
					//	Transaction
					p_trx = new MTransaction (getCtx(), line.getAD_Org_ID(),
						X_M_Transaction.MOVEMENTTYPE_InventoryIn,
						line.getM_Locator_ID(), line.getM_Product_ID(), 0,
						qtyDiff, getMovementDate(), get_Trx());
					p_trx.setM_InventoryLine_ID(line.getM_InventoryLine_ID());
					if (!p_trx.save())
					{
						m_processMsg = ""Transaction not inserted(1)"";
						return DocActionConstants.STATUS_Invalid;
					}
				}
				else	//	negative qty
				{
					MInventoryLineMA mas[] = MInventoryLineMA.get(getCtx(),
						line.getM_InventoryLine_ID(), get_Trx());
					for (MInventoryLineMA ma : mas) {
						//	Storage
						MStorage storage = MStorage.get(getCtx(), line.getM_Locator_ID(),
							line.getM_Product_ID(), ma.getM_AttributeSetInstance_ID(), get_Trx());
						if (storage == null)
							storage = MStorage.getCreate(getCtx(), line.getM_Locator_ID(),
								line.getM_Product_ID(), ma.getM_AttributeSetInstance_ID(), get_Trx());
						//
						BigDecimal maxDiff = qtyDiff;
						if ((maxDiff.signum() < 0)
							&& (ma.getMovementQty().compareTo(maxDiff.negate()) < 0))
							maxDiff = ma.getMovementQty().negate();
						BigDecimal qtyNew = ma.getMovementQty().add(maxDiff);	//	Storage+Diff
						log.fine(""MA Qty="" + ma.getMovementQty()
							+ "",Diff="" + qtyDiff + ""|"" + maxDiff
							+ "" - OnHand="" + storage.getQtyOnHand() + ""->"" + qtyNew
							+ "" {"" + ma.getM_AttributeSetInstance_ID() + ""}"");
						//
						storage.setQtyOnHand(qtyNew);
						storage.setDateLastInventory(getMovementDate());
						if (!storage.save(get_Trx()))
						{
							ValueNamePair pp = CLogger.retrieveError();
							if (pp != null)
								m_processMsg = pp.getName();
							else
								m_processMsg = ""Storage not updated (MA)"";
							return DocActionConstants.STATUS_Invalid;
						}
						log.fine(storage.toString());

						//	Transaction
						p_trx = new MTransaction (getCtx(), line.getAD_Org_ID(),
							X_M_Transaction.MOVEMENTTYPE_InventoryIn,
							line.getM_Locator_ID(), line.getM_Product_ID(), ma.getM_AttributeSetInstance_ID(),
							maxDiff, getMovementDate(), get_Trx());
						p_trx.setM_InventoryLine_ID(line.getM_InventoryLine_ID());
						if (!p_trx.save())
						{
							m_processMsg = ""Transaction not inserted (MA)"";
							return DocActionConstants.STATUS_Invalid;
						}
						//
						qtyDiff = qtyDiff.subtract(maxDiff);
						if (qtyDiff.signum() == 0)
							break;
					}
					// nnayak - if the quantity issued was greator than the quantity onhand, we need to create a transaction
					// for the remaining quantity
					if (qtyDiff.signum() != 0)
					{
						MStorage storage = MStorage.getCreate(getCtx(), line.getM_Locator_ID(),
								line.getM_Product_ID(), line.getM_AttributeSetInstance_ID(), get_Trx());
						BigDecimal qtyNew = storage.getQtyOnHand().add(qtyDiff);
						log.fine(""Count="" + line.getQtyCount()
							+ "",Book="" + line.getQtyBook() + "", Difference="" + qtyDiff
							+ "" - OnHand="" + storage.getQtyOnHand() + ""->"" + qtyNew);
						//
						storage.setQtyOnHand(qtyNew);

						storage.setDateLastInventory(getMovementDate());
						if (!storage.save(get_Trx()))
						{
							ValueNamePair pp = CLogger.retrieveError();
							if (pp != null)
								m_processMsg = pp.getName();
							else
								m_processMsg = ""Storage not updated (MA)"";
							return DocActionConstants.STATUS_Invalid;
						}
						log.fine(storage.toString());

						//	Transaction
						p_trx = new MTransaction (getCtx(), line.getAD_Org_ID(),
							X_M_Transaction.MOVEMENTTYPE_InventoryIn,
							line.getM_Locator_ID(), line.getM_Product_ID(), line.getM_AttributeSetInstance_ID(),
							qtyDiff, getMovementDate(), get_Trx());
						p_trx.setM_InventoryLine_ID(line.getM_InventoryLine_ID());
						if (!p_trx.save())
						{
							m_processMsg = ""Transaction not inserted (MA)"";
							return DocActionConstants.STATUS_Invalid;
						}
						//
					}
				}	//	negative qty
			}

			//	Fallback
			if (p_trx == null)
			{
				//	Storage
				MStorage storage = MStorage.get(getCtx(), line.getM_Locator_ID(),
					line.getM_Product_ID(), line.getM_AttributeSetInstance_ID(), get_Trx());
				if (storage == null)
					storage = MStorage.getCreate(getCtx(), line.getM_Locator_ID(),
						line.getM_Product_ID(), line.getM_AttributeSetInstance_ID(), get_Trx());
				//
				BigDecimal qtyDiff = line.getQtyInternalUse().negate();
				if (Env.ZERO.compareTo(qtyDiff) == 0)
					qtyDiff = line.getQtyCount().subtract(line.getQtyBook());
				BigDecimal qtyNew = storage.getQtyOnHand().add(qtyDiff);
				log.fine(""Count="" + line.getQtyCount()
					+ "",Book="" + line.getQtyBook() + "", Difference="" + qtyDiff
					+ "" - OnHand="" + storage.getQtyOnHand() + ""->"" + qtyNew);
				//
				storage.setQtyOnHand(qtyNew);
				storage.setDateLastInventory(getMovementDate());
				if (!storage.save(get_Trx()))
				{
					ValueNamePair pp = CLogger.retrieveError();
					if (pp != null)
						m_processMsg = pp.getName();
					else
						m_processMsg = ""Storage not updated(2)"";
					return DocActionConstants.STATUS_Invalid;
				}
				log.fine(storage.toString());

				//	Transaction
				p_trx = new MTransaction (getCtx(), line.getAD_Org_ID(),
					X_M_Transaction.MOVEMENTTYPE_InventoryIn,
					line.getM_Locator_ID(), line.getM_Product_ID(), line.getM_AttributeSetInstance_ID(),
					qtyDiff, getMovementDate(), get_Trx());
				p_trx.setM_InventoryLine_ID(line.getM_InventoryLine_ID());
				if (!p_trx.save())
				{
					m_processMsg = ""Transaction not inserted(2)"";
					return DocActionConstants.STATUS_Invalid;
				}
			}	//	Fallback

		}	//	for all lines

		//	User Validation
		String valid = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.DOCTIMING_AFTER_COMPLETE);
		if (valid != null)
		{
			m_processMsg = valid;
			return DocActionConstants.STATUS_Invalid;
		}
		//
		setProcessed(true);
		setDocAction(DOCACTION_Close);
		return DocActionConstants.STATUS_Completed;
	}	//	completeIt
"
org.compiere.model.MInventory.voidIt,MInventory.java,"boolean voidIt()
	{
		log.info(toString());
		if (DOCSTATUS_Closed.equals(getDocStatus())
			|| DOCSTATUS_Reversed.equals(getDocStatus())
			|| DOCSTATUS_Voided.equals(getDocStatus()))
		{
			m_processMsg = ""Document Closed: "" + getDocStatus();
			return false;
		}

		//	Not Processed
		if (DOCSTATUS_Drafted.equals(getDocStatus())
			|| DOCSTATUS_Invalid.equals(getDocStatus())
			|| DOCSTATUS_InProgress.equals(getDocStatus())
			|| DOCSTATUS_Approved.equals(getDocStatus())
			|| DOCSTATUS_NotApproved.equals(getDocStatus()) )
		{
			//	Set lines to 0
			MInventoryLine[] lines = getLines(false);
			for (MInventoryLine line : lines) {
				BigDecimal oldCount = line.getQtyCount();
				BigDecimal oldInternal = line.getQtyInternalUse();
				if ((oldCount.compareTo(line.getQtyBook()) != 0)
					|| (oldInternal.signum() != 0))
				{
					line.setQtyInternalUse(Env.ZERO);
					line.setQtyCount(line.getQtyBook());
					line.addDescription(""Void ("" + oldCount + ""/"" + oldInternal + "")"");
					line.save(get_Trx());
				}
			}
		}
		else
		{
			return reverseCorrectIt();
		}

		setProcessed(true);
		setDocAction(DOCACTION_None);
		return true;
	}	//	voidIt
"
org.compiere.model.MInventory.closeIt,MInventory.java,"boolean closeIt()
	{
		log.info(toString());

		setDocAction(DOCACTION_None);
		return true;
	}	//	closeIt
"
org.compiere.model.MInventory.reverseCorrectIt,MInventory.java,"boolean reverseCorrectIt()
	{
		log.info(toString());
		MDocType dt = MDocType.get(getCtx(), getC_DocType_ID());
		//
		MInventoryLine[] oLines = getLines(true);
		m_processMsg = MPeriod.isOpen(this, oLines, getMovementDate(), dt.getDocBaseType());
		if (m_processMsg != null)
			return false;

		//	Deep Copy
		MInventory reversal = new MInventory(getCtx(), 0, get_Trx());
		copyValues(this, reversal, getAD_Client_ID(), getAD_Org_ID());
		reversal.setDocStatus(DOCSTATUS_Drafted);
		reversal.setDocAction(DOCACTION_Complete);
		reversal.setIsApproved (false);
		reversal.setPosted(false);
		reversal.setProcessed(false);
		reversal.addDescription(""{->"" + getDocumentNo() + "")"");
		if (!reversal.save())
		{
			m_processMsg = ""Could not create Inventory Reversal"";
			return false;
		}

		//	Reverse Line Qty
		for (MInventoryLine oLine : oLines) {
			MInventoryLine rLine = new MInventoryLine(getCtx(), 0, get_Trx());
			copyValues(oLine, rLine, oLine.getAD_Client_ID(), oLine.getAD_Org_ID());
			rLine.setM_Inventory_ID(reversal.getM_Inventory_ID());
			rLine.setParent(reversal);
			//
			rLine.setQtyBook (oLine.getQtyCount());		//	switch
			rLine.setQtyCount (oLine.getQtyBook());
			rLine.setQtyInternalUse (oLine.getQtyInternalUse().negate());
			if (!rLine.save())
			{
				m_processMsg = ""Could not create Inventory Reversal Line"";
				return false;
			}
		}
		//
		if (!reversal.processIt(DocActionConstants.ACTION_Complete))
		{
			m_processMsg = ""Reversal ERROR: "" + reversal.getProcessMsg();
			return false;
		}
		reversal.closeIt();
		reversal.setDocStatus(DOCSTATUS_Reversed);
		reversal.setDocAction(DOCACTION_None);
		reversal.save();
		m_processMsg = reversal.getDocumentNo();

		//	Update Reversed (this)
		addDescription(""("" + reversal.getDocumentNo() + ""<-)"");
		setProcessed(true);
		setDocStatus(DOCSTATUS_Reversed);	//	may come from void
		setDocAction(DOCACTION_None);

		return true;
	}	//	reverseCorrectionIt

	/**
	 * 	Reverse Accrual
	 * 	@return false
	 */
	public boolean reverseAccrualIt()
	{
		log.info(toString());
		return false;
	}	//	reverseAccrualIt

	/**
	 * 	Re-activate
	 * 	@return false
	 */
	public boolean reActivateIt()
	{
		log.info(toString());
		return false;
	}	//	reActivateIt


	/*************************************************************************
	 * 	Get Summary
	 *	@return Summary of Document
	 */
	public String getSummary()
	{
		StringBuffer sb = new StringBuffer();
		sb.append(getDocumentNo());
		//	: Total Lines = 123.00 (#1)
		sb.append("": "")
			.append(Msg.translate(getCtx(),""ApprovalAmt"")).append(""="").append(getApprovalAmt())
			.append("" (#"").append(getLines(false).length).append("")"");
		//	 - Description
		if ((getDescription() != null) && (getDescription().length() > 0))
			sb.append("" - "").append(getDescription());
		return sb.toString();
	}	//	getSummary

	/**
	 * 	Get Process Message
	 *	@return clear text error message
	 */
	public String getProcessMsg()
	{
		return m_processMsg;
	}	//	getProcessMsg

	/**
	 * 	Get Document Owner (Responsible)
	 *	@return AD_User_ID
	 */
	public int getDoc_User_ID()
	{
		return getUpdatedBy();
	}	//	getDoc_User_ID

	/**
	 * 	Get Document Currency
	 *	@return C_Currency_ID
	 */
	public int getC_Currency_ID()
	{
	//	MPriceList pl = MPriceList.get(getCtx(), getM_PriceList_ID());
	//	return pl.getC_Currency_ID();
		return 0;
	}	//	getC_Currency_ID

}	//	MInventory
"
org.compiere.model.MInventory.reverseAccrualIt,MInventory.java,"boolean reverseAccrualIt()
	{
		log.info(toString());
		return false;
	}	//	reverseAccrualIt
"
org.compiere.model.MInventory.reActivateIt,MInventory.java,"boolean reActivateIt()
	{
		log.info(toString());
		return false;
	}	//	reActivateIt
"
org.compiere.model.MInventory.getSummary,MInventory.java,"String getSummary()
	{
		StringBuffer sb = new StringBuffer();
		sb.append(getDocumentNo());
		//	: Total Lines = 123.00 (#1)
		sb.append("": "")
			.append(Msg.translate(getCtx(),""ApprovalAmt"")).append(""="").append(getApprovalAmt())
			.append("" (#"").append(getLines(false).length).append("")"");
		//	 - Description
		if ((getDescription() != null) && (getDescription().length() > 0))
			sb.append("" - "").append(getDescription());
		return sb.toString();
	}	//	getSummary
"
org.compiere.model.MInventory.getProcessMsg,MInventory.java,"String getProcessMsg()
	{
		return m_processMsg;
	}	//	getProcessMsg
"
org.compiere.model.MInventory.getDoc_User_ID,MInventory.java,"int getDoc_User_ID()
	{
		return getUpdatedBy();
	}	//	getDoc_User_ID
"
org.compiere.model.MInventory.getC_Currency_ID,MInventory.java,"int getC_Currency_ID()
	{
	//	MPriceList pl = MPriceList.get(getCtx(), getM_PriceList_ID());
	//	return pl.getC_Currency_ID();
		return 0;
	}	//	getC_Currency_ID
"
org.compiere.model.MAttributeSetInstance.get,MAttributeSetInstance.java,"MAttributeSetInstance get (Ctx ctx, 
		int M_AttributeSetInstance_ID, int M_Product_ID)
	{
		MAttributeSetInstance retValue = null;
		//	Load Instance if not 0
		if (M_AttributeSetInstance_ID != 0)
		{
			s_log.fine(""From M_AttributeSetInstance_ID="" + M_AttributeSetInstance_ID);
			return new MAttributeSetInstance (ctx, M_AttributeSetInstance_ID, null);
		}
		//	Get new from Product
		s_log.fine(""From M_Product_ID="" + M_Product_ID);
		if (M_Product_ID == 0)
			return null;
		String sql = ""SELECT M_AttributeSet_ID, M_AttributeSetInstance_ID ""
			+ ""FROM M_Product ""
			+ ""WHERE M_Product_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, M_Product_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				int M_AttributeSet_ID = rs.getInt(1);
			//	M_AttributeSetInstance_ID = rs.getInt(2);	//	needed ?
				//
				retValue = new MAttributeSetInstance (ctx, 0, M_AttributeSet_ID, null);
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			s_log.log(Level.SEVERE, sql, ex);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;
		//
		return retValue;
	}	//	get
"
org.compiere.model.MAttributeSetInstance.setMAttributeSet,MAttributeSetInstance.java,"void setMAttributeSet (MAttributeSet mas)
	{
		m_mas = mas;
		setM_AttributeSet_ID(mas.getM_AttributeSet_ID());
	}	//	setAttributeSet
"
org.compiere.model.MAttributeSetInstance.getMAttributeSet,MAttributeSetInstance.java,"MAttributeSet getMAttributeSet()
	{
		if (m_mas == null && getM_AttributeSet_ID() != 0)
			m_mas = new MAttributeSet (getCtx(), getM_AttributeSet_ID(), get_Trx());
		return m_mas;
	}	//	getMAttributeSet
"
org.compiere.model.MAttributeSetInstance.setDescription,MAttributeSetInstance.java,"void setDescription()
	{
		//	Make sure we have a Attribute Set
		getMAttributeSet();
		if (m_mas == null)
		{
			setDescription ("""");
			return;
		}
		
		StringBuffer sb = new StringBuffer();
		
		//	Instance Attribute Values
		MAttribute[] attributes = m_mas.getMAttributes(true);
		for (MAttribute element : attributes) {
			MAttributeInstance mai = element.getMAttributeInstance(getM_AttributeSetInstance_ID());
			if (mai != null && mai.getValue() != null)
			{
				if (sb.length() > 0)
					sb.append(""_"");
				sb.append(mai.getValue());
			}
		}
		//	SerNo
		if (m_mas.isSerNo() && getSerNo() != null)
		{
			if (sb.length() > 0)
				sb.append(""_"");
			sb.append(m_mas.getSerNoCharStart()).append(getSerNo()).append(m_mas.getSerNoCharEnd());
		}
		//	Lot
		if (m_mas.isLot() && getLot() != null)
		{
			if (sb.length() > 0)
				sb.append(""_"");
			sb.append(m_mas.getLotCharStart()).append(getLot()).append(m_mas.getLotCharEnd());
		}
		//	GuaranteeDate
		if (m_mas.isGuaranteeDate() && getGuaranteeDate() != null)
		{
			if (sb.length() > 0)
				sb.append(""_"");
			sb.append (m_dateFormat.format(getGuaranteeDate()));
		}

		//	Product Attribute Values
		attributes = m_mas.getMAttributes(false);
		for (MAttribute element : attributes) {
			MAttributeInstance mai = element.getMAttributeInstance(getM_AttributeSetInstance_ID());
			if (mai != null && mai.getValue() != null)
			{
				if (sb.length() > 0)
					sb.append(""_"");
				sb.append(mai.getValue());
			}
		}
		setDescription (sb.toString());
	}	//	setDescription
"
org.compiere.model.MAttributeSetInstance.getGuaranteeDate,MAttributeSetInstance.java,"Timestamp getGuaranteeDate(boolean getNew)
	{
		if (getNew)
		{
			int days = getMAttributeSet().getGuaranteeDays();
			if (days > 0)
			{
				Timestamp ts = TimeUtil.addDays(new Timestamp(System.currentTimeMillis()), days);
				setGuaranteeDate(ts);
			}
		}
		return getGuaranteeDate();
	}	//	getGuaranteeDate
"
org.compiere.model.MAttributeSetInstance.getLot,MAttributeSetInstance.java,"String getLot (boolean getNew, int M_Product_ID)
	{
		if (getNew)
			createLot(M_Product_ID);
		return getLot();
	}	//	getLot
"
org.compiere.model.MAttributeSetInstance.createLot,MAttributeSetInstance.java,"KeyNamePair createLot (int M_Product_ID)
	{
		KeyNamePair retValue = null;
		int M_LotCtl_ID = getMAttributeSet().getM_LotCtl_ID();
		if (M_LotCtl_ID != 0)
		{
			MLotCtl ctl = new MLotCtl (getCtx(), M_LotCtl_ID, null);
			MLot lot = ctl.createLot(M_Product_ID);
			setM_Lot_ID (lot.getM_Lot_ID());
			setLot (lot.getName());
			retValue = new KeyNamePair (lot.getM_Lot_ID(), lot.getName());	
		}
		return retValue;
	}	//	createLot
"
org.compiere.model.MAttributeSetInstance.setLot,MAttributeSetInstance.java,"void setLot (String Lot, int M_Product_ID)
	{
		//	Try to find it
		MLot mLot = MLot.getProductLot(getCtx(), M_Product_ID, Lot, get_Trx());
		if (mLot != null)
			setM_Lot_ID(mLot.getM_Lot_ID());
		setLot (Lot);
	}	//	setLot
"
org.compiere.model.MAttributeSetInstance.isExcludeLot,MAttributeSetInstance.java,"boolean isExcludeLot (int AD_Column_ID, boolean isSOTrx)
	{
		getMAttributeSet();
		if (m_mas != null)
			return m_mas.isExcludeLot (AD_Column_ID, isSOTrx);
		return false;
	}	//	isExcludeLot
"
org.compiere.model.MAttributeSetInstance.getSerNo,MAttributeSetInstance.java,"String getSerNo (boolean getNew)
	{
		if (getNew)
		{
			int M_SerNoCtl_ID = getMAttributeSet().getM_SerNoCtl_ID();
			if (M_SerNoCtl_ID != 0)
			{
				MSerNoCtl ctl = new MSerNoCtl (getCtx(), M_SerNoCtl_ID, get_Trx());
				setSerNo(ctl.createSerNo());
			}
		}
		return getSerNo();
	}	//	getSerNo
"
org.compiere.model.MAttributeSetInstance.isExcludeSerNo,MAttributeSetInstance.java,"boolean isExcludeSerNo (int AD_Column_ID, boolean isSOTrx)
	{
		getMAttributeSet();
		if (m_mas != null)
			return m_mas.isExcludeSerNo (AD_Column_ID, isSOTrx);
		return false;
	}	//	isExcludeSerNo
"
org.compiere.model.MPOS.get,MPOS.java,"MPOS get (Ctx ctx, int C_POS_ID)
	{
		Integer key = Integer.valueOf (C_POS_ID);
		MPOS retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MPOS (ctx, C_POS_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	} //	get
"
org.compiere.model.MPOS.beforeSave,MPOS.java,"boolean beforeSave (boolean newRecord)
	{
		//	Org Consistency
		if (newRecord 
			|| is_ValueChanged(""C_CashBook_ID"") || is_ValueChanged(""M_Warehouse_ID""))
		{
			MCashBook cb = MCashBook.get(getCtx(), getC_CashBook_ID());
			if (cb.getAD_Org_ID() != getAD_Org_ID())
			{
				log.saveError(""Error"", Msg.parseTranslation(getCtx(), ""@AD_Org_ID@: @C_CashBook_ID@""));
				return false;
			}
			MWarehouse wh = MWarehouse.get(getCtx(), getM_Warehouse_ID());
			if (wh.getAD_Org_ID() != getAD_Org_ID())
			{
				log.saveError(""Error"", Msg.parseTranslation(getCtx(), ""@AD_Org_ID@: @M_Warehouse_ID@""));
				return false;
			}
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MPOS.getBPartner,MPOS.java,"MBPartner getBPartner()
	{
		if (m_template == null)
		{
			if (getC_BPartnerCashTrx_ID() == 0)
				m_template = MBPartner.getBPartnerCashTrx (getCtx(), getAD_Client_ID());
			else
				m_template = new MBPartner(getCtx(), getC_BPartnerCashTrx_ID(), get_Trx());
			log.fine(""getBPartner - "" + m_template);
		}
		return m_template;
	}	//	getBPartner
"
org.compiere.model.MCtxArea.toString,MCtxArea.java,"String toString()
	{
		StringBuffer sb = new StringBuffer(""MCtxArea["")
			.append(get_ID()).append(""-"").append(getName()).append(""]"");
		return sb.toString();
	}	//	toString
"
org.compiere.model.MContactInterest.get,MContactInterest.java,"MContactInterest get (Ctx ctx, 
		int R_InterestArea_ID, int AD_User_ID, boolean isActive, Trx trx)
	{
		MContactInterest retValue = null;
		String sql = ""SELECT * FROM R_ContactInterest ""
			+ ""WHERE R_InterestArea_ID=? AND AD_User_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, trx);
			pstmt.setInt(1, R_InterestArea_ID);
			pstmt.setInt(2, AD_User_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				retValue = new MContactInterest (ctx, rs, trx);
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//	New
		if (retValue == null)
		{
			retValue = new MContactInterest (ctx, R_InterestArea_ID, AD_User_ID, 
				isActive, trx);
			s_log.fine(""NOT found - "" + retValue);
		}
		else
			s_log.fine(""Found - "" + retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MContactInterest.setOptOutDate,MContactInterest.java,"void setOptOutDate (Timestamp OptOutDate)
	{
		if (OptOutDate == null)
			OptOutDate = new Timestamp(System.currentTimeMillis());
		log.fine("""" + OptOutDate);
		super.setOptOutDate(OptOutDate);
		setIsActive(false);
	}	//	setOptOutDate
"
org.compiere.model.MContactInterest.unsubscribe,MContactInterest.java,"void unsubscribe()
	{
		setOptOutDate(null);
	}	//	unsubscribe
"
org.compiere.model.MContactInterest.isOptOut,MContactInterest.java,"boolean isOptOut()
	{
		return getOptOutDate() != null;
	}	//	isOptOut
"
org.compiere.model.MContactInterest.setSubscribeDate,MContactInterest.java,"void setSubscribeDate (Timestamp SubscribeDate)
	{
		if (SubscribeDate == null)
			SubscribeDate = new Timestamp(System.currentTimeMillis());
		log.fine("""" + SubscribeDate);
		super.setSubscribeDate(SubscribeDate);
		super.setOptOutDate(null);
		setIsActive(true);
	}	//	setSubscribeDate
"
org.compiere.model.MContactInterest.subscribe,MContactInterest.java,"void subscribe()
	{
		setSubscribeDate(null);
		if (!isActive())
			setIsActive(true);
	}	//	subscribe
"
org.compiere.model.MContactInterest.subscribe,MContactInterest.java,"void subscribe (boolean subscribe)
	{
		if (subscribe)
			setSubscribeDate(null);
		else
			setOptOutDate(null);
	}	//	subscribe
"
org.compiere.model.MContactInterest.isSubscribed,MContactInterest.java,"boolean isSubscribed()
	{
		return isActive() && getOptOutDate() == null;
	}	//	isSubscribed
"
org.compiere.model.MContactInterest.afterSave,MContactInterest.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (success && newRecord && isSubscribed())
		{
			MInterestArea ia = MInterestArea.get(getCtx(), getR_InterestArea_ID());
			if (ia.getR_Source_ID() != 0)
			{
				String summary = ""Subscribe: "" + ia.getName();
				//
				MSource source = MSource.get(getCtx(), ia.getR_Source_ID());
				MUser user = null;
				if (get_Trx() == null)
					user = MUser.get(getCtx(), getAD_User_ID());
				else
					user = new MUser (getCtx(), getAD_User_ID(), get_Trx());
				//	Create Request
				if (X_R_Source.SOURCECREATETYPE_Both.equals(source.getSourceCreateType())
					|| X_R_Source.SOURCECREATETYPE_Request.equals(source.getSourceCreateType()))
				{
					MRequest request = new MRequest(getCtx(), 0, get_Trx());
					request.setClientOrg(this);
					request.setSummary(summary);
					request.setAD_User_ID(getAD_User_ID());
					request.setC_BPartner_ID(user.getC_BPartner_ID());
					request.setR_Source_ID(source.getR_Source_ID());
					request.save();
				}
				//	Create Lead
				if (X_R_Source.SOURCECREATETYPE_Both.equals(source.getSourceCreateType())
					|| X_R_Source.SOURCECREATETYPE_Lead.equals(source.getSourceCreateType()))
				{
					MLead lead = new MLead(getCtx(), 0, get_Trx());
					lead.setClientOrg(this);
					lead.setDescription(summary);
					lead.setAD_User_ID(getAD_User_ID());
					lead.setR_InterestArea_ID(getR_InterestArea_ID());
					lead.setC_BPartner_ID(user.getC_BPartner_ID());
					lead.setR_Source_ID(source.getR_Source_ID());
					lead.save();
				}
			}
		}
	    return success;
	}	//	afterSave
"
org.compiere.model.MContactInterest.toString,MContactInterest.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MContactInterest["")
			.append(""R_InterestArea_ID="").append(getR_InterestArea_ID())
			.append("",AD_User_ID="").append(getAD_User_ID())
			.append("",Subscribed="").append(isSubscribed())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MContactInterest.main,MContactInterest.java,"void main (String[] args)
	{
		org.compiere.Compiere.startup(true);
		int R_InterestArea_ID = 1000002;
		int AD_User_ID = 1000002;
		MContactInterest ci = MContactInterest.get(Env.getCtx(), R_InterestArea_ID, AD_User_ID, false, null);
		ci.subscribe();
		ci.save();
		//
		ci = MContactInterest.get(Env.getCtx(), R_InterestArea_ID, AD_User_ID, false, null);
	}	//	main
"
org.compiere.model.MSchedulerPara.getColumnName,MSchedulerPara.java,"String getColumnName()
	{
		if (m_parameter == null)
			m_parameter = MProcessPara.get(getCtx(), getAD_Process_Para_ID());
		return m_parameter.getColumnName();
	}	//	getColumnName
"
org.compiere.model.MSchedulerPara.getDisplayType,MSchedulerPara.java,"int getDisplayType()
	{
		if (m_parameter == null)
			m_parameter = MProcessPara.get(getCtx(), getAD_Process_Para_ID());
		return m_parameter.getAD_Reference_ID();
	}	//	getDisplayType
"
org.compiere.model.MSchedulerPara.toString,MSchedulerPara.java,"String toString() 
	{
		StringBuffer sb = new StringBuffer(""MSchedulerPara["");
		sb.append(get_ID()).append(""-"")
			.append(getColumnName()).append(""="").append(getParameterDefault())
			.append(""]"");
		return sb.toString();
	} //	toString
"
org.compiere.model.MBankStatementLine.setPayment,MBankStatementLine.java,"void setPayment (MPayment payment)
	{
		setC_Payment_ID (payment.getC_Payment_ID());
		setC_Currency_ID (payment.getC_Currency_ID());
		//
		BigDecimal amt = payment.getPayAmt(true); 
		setTrxAmt(amt);
		setStmtAmt(amt);
		//
		setDescription(payment.getDescription());
	}	//	setPayment
"
org.compiere.model.MBankStatementLine.addDescription,MBankStatementLine.java,"void addDescription (String description)
	{
		String desc = getDescription();
		if (desc == null)
			setDescription(description);
		else
			setDescription(desc + "" | "" + description);
	}	//	addDescription
"
org.compiere.model.MBankStatementLine.setStatementLineDate,MBankStatementLine.java,"void setStatementLineDate(Timestamp StatementLineDate)
	{
		super.setStatementLineDate(StatementLineDate);
		setValutaDate (StatementLineDate);
		setDateAcct (StatementLineDate);
	}	//	setStatementLineDate
"
org.compiere.model.MBankStatementLine.setStatementLineDate,MBankStatementLine.java,"void setStatementLineDate (String oldStatementLineDate, 
			String newStatementLineDate, int windowNo) throws Exception
	{
		if (newStatementLineDate == null || newStatementLineDate.length() == 0)
			return;
		Timestamp statementLineDate = PO.convertToTimestamp(newStatementLineDate);
		if (statementLineDate == null)
			return;
		setStatementLineDate(statementLineDate);
	}	//	setDateOrdered
"
org.compiere.model.MBankStatementLine.setChargeAmt,MBankStatementLine.java,"void setChargeAmt (String oldChargeAmt, 
			String newChargeAmt, int windowNo) throws Exception
	{
		if (newChargeAmt == null || newChargeAmt.length() == 0)
			return;
		BigDecimal ChargeAmt = new BigDecimal(newChargeAmt);
		super.setChargeAmt(ChargeAmt);
		setAmt(windowNo, ""ChargeAmt"");
	}	//	setChangeAmt
"
org.compiere.model.MBankStatementLine.setInterestAmt,MBankStatementLine.java,"void setInterestAmt (String oldInterestAmt, 
			String newInterestAmt, int windowNo) throws Exception
	{
		if (newInterestAmt == null || newInterestAmt.length() == 0)
			return;
		BigDecimal InterestAmt = new BigDecimal(newInterestAmt);
		super.setInterestAmt(InterestAmt);
		setAmt(windowNo, ""InterestAmt"");
	}	//	setInterestAmt
"
org.compiere.model.MBankStatementLine.setStmtAmt,MBankStatementLine.java,"void setStmtAmt (String oldStmtAmt, 
			String newStmtAmt, int windowNo) throws Exception
	{
		if (newStmtAmt == null || newStmtAmt.length() == 0)
			return;
		BigDecimal StmtAmt = new BigDecimal(newStmtAmt);
		super.setStmtAmt(StmtAmt);
		setAmt(windowNo, ""StmtAmt"");
	}	//	setStmtAmt
"
org.compiere.model.MBankStatementLine.setAmt,MBankStatementLine.java,"void setAmt (int windowNo, String columnName)
	{
		BigDecimal stmt = getStmtAmt();
		if (stmt == null)
			stmt = Env.ZERO;
		BigDecimal p_trx = getTrxAmt();
		if (p_trx == null)
			p_trx = Env.ZERO;
		BigDecimal bd = stmt.subtract(p_trx);

		//  Charge - calculate Interest
		if (columnName.equals(""ChargeAmt""))
		{
			BigDecimal charge = getChargeAmt();
			if (charge == null)
				charge = Env.ZERO;
			bd = bd.subtract(charge);
		//	log.trace(log.l5_DData, ""Interest ("" + bd + "") = Stmt("" + stmt + "") - Trx("" + p_trx + "") - Charge("" + charge + "")"");
			setInterestAmt(bd);
		}
		//  Calculate Charge
		else
		{
			BigDecimal interest = getInterestAmt();
			if (interest == null)
				interest = Env.ZERO;
			bd = bd.subtract(interest);
		//	log.trace(log.l5_DData, ""Charge ("" + bd + "") = Stmt("" + stmt + "") - Trx("" + p_trx + "") - Interest("" + interest + "")"");
			setChargeAmt(bd);
		}
	}	//	setAmt
"
org.compiere.model.MBankStatementLine.setC_Payment_ID,MBankStatementLine.java,"void setC_Payment_ID (String oldC_Payment_ID, 
			String newC_Payment_ID, int windowNo) throws Exception
	{
		if (newC_Payment_ID == null || newC_Payment_ID.length() == 0)
			return;
		int C_Payment_ID = Integer.parseInt(newC_Payment_ID);
		if (C_Payment_ID == 0)
			return;
		setC_Payment_ID(C_Payment_ID);
		
		BigDecimal stmt = getStmtAmt();
		if (stmt == null)
			stmt = Env.ZERO;

		String sql = ""SELECT PayAmt FROM C_Payment_v WHERE C_Payment_ID=?"";		//	1
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, C_Payment_ID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				BigDecimal bd = rs.getBigDecimal(1);
				setTrxAmt(bd);
				if (stmt.signum() == 0)
					setStmtAmt(bd);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		//  Recalculate Amounts
		setAmt (windowNo, ""C_Payment_ID"");
	}	//	setC_Payment_ID
"
org.compiere.model.MBankStatementLine.beforeSave,MBankStatementLine.java,"boolean beforeSave (boolean newRecord)
	{
		if (getChargeAmt().signum() != 0 && getC_Charge_ID() == 0)
		{
			log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""C_Charge_ID""));
			return false;
		}
		//	Set Line No
		if (getLine() == 0)
		{
			String sql = ""SELECT COALESCE(MAX(Line),0)+10 AS DefaultValue FROM C_BankStatementLine WHERE C_BankStatement_ID=?"";
			int ii = DB.getSQLValue (get_Trx(), sql, getC_BankStatement_ID());
			setLine (ii);
		}
		
		//	Set References
		if (getC_Payment_ID() != 0 && getC_BPartner_ID() == 0)
		{
			MPayment payment = new MPayment (getCtx(), getC_Payment_ID(), get_Trx());
			setC_BPartner_ID(payment.getC_BPartner_ID());
			if (payment.getC_Invoice_ID() != 0)
				setC_Invoice_ID(payment.getC_Invoice_ID());
		}
		if (getC_Invoice_ID() != 0 && getC_BPartner_ID() == 0)
		{
			MInvoice invoice = new MInvoice (getCtx(), getC_Invoice_ID(), get_Trx());
			setC_BPartner_ID(invoice.getC_BPartner_ID());
		}
		
		//	Calculate Charge = Statement - p_trx - Interest  
		BigDecimal amt = getStmtAmt();
		amt = amt.subtract(getTrxAmt());
		amt = amt.subtract(getInterestAmt());
		if (amt.compareTo(getChargeAmt()) != 0)
			setChargeAmt (amt);
		//
		
		return true;
	}	//	beforeSave
"
org.compiere.model.MBankStatementLine.afterSave,MBankStatementLine.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		updateHeader();
		return success;
	}	//	afterSave
"
org.compiere.model.MBankStatementLine.afterDelete,MBankStatementLine.java,"boolean afterDelete (boolean success)
	{
		updateHeader();
		return success;
	}	//	afterSave
"
org.compiere.model.MBankStatementLine.updateHeader,MBankStatementLine.java,"void updateHeader()
	{
		String sql = ""UPDATE C_BankStatement bs""
			+ "" SET StatementDifference=(SELECT COALESCE( SUM(StmtAmt), 0 ) FROM C_BankStatementLine bsl "" 
				+ ""WHERE bsl.C_BankStatement_ID=bs.C_BankStatement_ID AND bsl.IsActive='Y') ""
			+ ""WHERE C_BankStatement_ID="" + getC_BankStatement_ID();
		DB.executeUpdate(sql, get_Trx());
		sql = ""UPDATE C_BankStatement bs""
			+ "" SET EndingBalance=BeginningBalance+StatementDifference ""
			+ ""WHERE C_BankStatement_ID="" + getC_BankStatement_ID();
		DB.executeUpdate(sql, get_Trx());
	}	//	updateHeader
"
org.compiere.model.MResource.getResourceType,MResource.java,"MResourceType getResourceType()
	{
		if (m_resourceType == null && getS_ResourceType_ID() != 0)
			m_resourceType = new MResourceType (getCtx(), getS_ResourceType_ID(), get_Trx());
		return m_resourceType;
	}	//	getResourceType
"
org.compiere.model.MResource.getProduct,MResource.java,"MProduct getProduct()
	{
		if (m_product == null)
		{
			ArrayList<MProduct> products = MProduct.findAll(getCtx(), 
				""S_Resource_ID="" + getS_Resource_ID(), get_Trx());
			if (products.size() > 0)
				m_product = products.get(0);
		}
		return m_product;
	}	//	getProduct
"
org.compiere.model.MResource.beforeSave,MResource.java,"boolean beforeSave (boolean newRecord)
	{
		if (newRecord)
		{
			if (getValue() == null || getValue().length() == 0)
				setValue(getName());
			m_product = new MProduct(this, getResourceType());
			return m_product.save(get_Trx());
		}
		return true;
	}	//	beforeSave
"
org.compiere.model.MResource.afterSave,MResource.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!success)
			return success;
			
		MProduct prod = getProduct();
		if (prod.setResource(this))
			prod.save(get_Trx());
		
		return success;
	}	//	afterSave
"
org.compiere.model.MDocTypeCounter.getCounterDocType_ID,MDocTypeCounter.java,"int getCounterDocType_ID (Ctx ctx, int C_DocType_ID)
	{
		//	Direct Relationship
		MDocTypeCounter dtCounter = getCounterDocType (ctx, C_DocType_ID);
		if (dtCounter != null)
		{
			if (!dtCounter.isCreateCounter() || !dtCounter.isValid())
				return -1;
			return dtCounter.getCounter_C_DocType_ID();
		}
		
		//	Indirect Relationship
		int Counter_C_DocType_ID = 0;
		MDocType dt = MDocType.get(ctx, C_DocType_ID);
		if (!dt.isCreateCounter())
			return -1;
		String cDocBaseType = getCounterDocBaseType(dt.getDocBaseType());
		if (cDocBaseType == null)
			return 0;
		MDocType[] counters = MDocType.getOfDocBaseType(ctx, cDocBaseType);
		for (int i = 0; i < counters.length; i++)
		{
			MDocType counter = counters[i];
			if (counter.isDefaultCounterDoc())
			{
				Counter_C_DocType_ID = counter.getC_DocType_ID();
				break;
			}
			if (counter.isDefault())
				Counter_C_DocType_ID = counter.getC_DocType_ID();
			else if (i == 0)
				Counter_C_DocType_ID = counter.getC_DocType_ID();
		}
		return Counter_C_DocType_ID;
	}	// getCounterDocType_ID
"
org.compiere.model.MDocTypeCounter.getCounterDocType,MDocTypeCounter.java,"MDocTypeCounter getCounterDocType (Ctx ctx, int C_DocType_ID)
	{
		Integer key = Integer.valueOf (C_DocType_ID);
		MDocTypeCounter retValue = s_counter.get(ctx, key);
		if (retValue != null)
			return retValue;
		
		//	Direct Relationship
		MDocTypeCounter temp = null;
		String sql = ""SELECT * FROM C_DocTypeCounter WHERE C_DocType_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, C_DocType_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next () && retValue == null)
			{
				retValue = new MDocTypeCounter (ctx, rs, null);
				if (!retValue.isCreateCounter() || !retValue.isValid())
				{
					temp = retValue; 
					retValue = null;
				}
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, ""getCounterDocType"", e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		if (retValue != null)	//	valid
			return retValue;
		if (temp != null)		//	invalid
			return temp;
		return null;			//	nothing found
	}	//	getCounterDocType
"
org.compiere.model.MDocTypeCounter.get,MDocTypeCounter.java,"MDocTypeCounter get (Ctx ctx, int C_DocTypeCounter_ID, Trx trx)
	{
		Integer key = Integer.valueOf (C_DocTypeCounter_ID);
		MDocTypeCounter retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MDocTypeCounter (ctx, C_DocTypeCounter_ID, trx);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	}	//	get
"
org.compiere.model.MDocTypeCounter.getCounterDocBaseType,MDocTypeCounter.java,"String getCounterDocBaseType (String DocBaseType)
	{
		if (DocBaseType == null)
			return null;
		String retValue = null;
		//	SO/PO
		if (MDocBaseType.DOCBASETYPE_SalesOrder.equals(DocBaseType))
			retValue = MDocBaseType.DOCBASETYPE_PurchaseOrder;
		else if (MDocBaseType.DOCBASETYPE_PurchaseOrder.equals(DocBaseType))
			retValue = MDocBaseType.DOCBASETYPE_SalesOrder;
		//	AP/AR Invoice
		else if (MDocBaseType.DOCBASETYPE_APInvoice.equals(DocBaseType))
			retValue = MDocBaseType.DOCBASETYPE_ARInvoice;
		else if (MDocBaseType.DOCBASETYPE_ARInvoice.equals(DocBaseType))
			retValue = MDocBaseType.DOCBASETYPE_APInvoice;
		//	Shipment
		else if (MDocBaseType.DOCBASETYPE_MaterialDelivery.equals(DocBaseType))
			retValue = MDocBaseType.DOCBASETYPE_MaterialReceipt;
		else if (MDocBaseType.DOCBASETYPE_MaterialReceipt.equals(DocBaseType))
			retValue = MDocBaseType.DOCBASETYPE_MaterialDelivery;
		//	AP/AR CreditMemo
		else if (MDocBaseType.DOCBASETYPE_APCreditMemo.equals(DocBaseType))
			retValue = MDocBaseType.DOCBASETYPE_ARCreditMemo;
		else if (MDocBaseType.DOCBASETYPE_ARCreditMemo.equals(DocBaseType))
			retValue = MDocBaseType.DOCBASETYPE_APCreditMemo;
		//	Receipt / Payment
		else if (MDocBaseType.DOCBASETYPE_ARReceipt.equals(DocBaseType))
			retValue = MDocBaseType.DOCBASETYPE_APPayment;
		else if (MDocBaseType.DOCBASETYPE_APPayment.equals(DocBaseType))
			retValue = MDocBaseType.DOCBASETYPE_ARReceipt;
		//
		else
			s_log.log(Level.SEVERE, ""getCounterDocBaseType for "" + DocBaseType + "": None found"");
		return retValue;
	}	//	getCounterDocBaseType
"
org.compiere.model.MDocTypeCounter.setC_DocType_ID,MDocTypeCounter.java,"void setC_DocType_ID (int C_DocType_ID)
	{
		super.setC_DocType_ID (C_DocType_ID);
		if (isValid())
			setIsValid(false);
	}	//	setC_DocType_ID
"
org.compiere.model.MDocTypeCounter.setCounter_C_DocType_ID,MDocTypeCounter.java,"void setCounter_C_DocType_ID (int Counter_C_DocType_ID)
	{
		super.setCounter_C_DocType_ID (Counter_C_DocType_ID);
		if (isValid())
			setIsValid(false);
	}	//	setCounter_C_DocType_ID
"
org.compiere.model.MDocTypeCounter.getDocType,MDocTypeCounter.java,"MDocType getDocType()
	{
		MDocType dt = null;
		if (getC_DocType_ID() > 0)
		{
			dt = MDocType.get(getCtx(), getC_DocType_ID());
			if (dt.get_ID() == 0)
				dt = null;
		}
		return dt;
	}	//	getDocType
"
org.compiere.model.MDocTypeCounter.getCounterDocType,MDocTypeCounter.java,"MDocType getCounterDocType()
	{
		MDocType dt = null;
		if (getCounter_C_DocType_ID() > 0)
		{
			dt = MDocType.get(getCtx(), getCounter_C_DocType_ID());
			if (dt.get_ID() == 0)
				dt = null;
		}
		return dt;
	}	//	getCounterDocType
"
org.compiere.model.MDocTypeCounter.validate,MDocTypeCounter.java,"String validate()
	{
		MDocType dt = getDocType();
		if (dt == null)
		{
			log.log(Level.SEVERE, ""No DocType="" + getC_DocType_ID());
			setIsValid(false);
			return ""No Document Type"";
		}
		MDocType c_dt = getCounterDocType();
		if (c_dt == null)
		{
			log.log(Level.SEVERE, ""No Counter DocType="" + getCounter_C_DocType_ID());
			setIsValid(false);
			return ""No Counter Document Type"";
		}
		//
		String dtBT = dt.getDocBaseType();
		String c_dtBT = c_dt.getDocBaseType();
		log.fine(dtBT + "" -> "" + c_dtBT);

		//	SO / PO
		if ((MDocBaseType.DOCBASETYPE_SalesOrder.equals(dtBT) && MDocBaseType.DOCBASETYPE_PurchaseOrder.equals(c_dtBT))
			|| (MDocBaseType.DOCBASETYPE_SalesOrder.equals(c_dtBT) && MDocBaseType.DOCBASETYPE_PurchaseOrder.equals(dtBT))) 
			setIsValid(true);
		//	AP/AR Invoice
		else if ((MDocBaseType.DOCBASETYPE_APInvoice.equals(dtBT) && MDocBaseType.DOCBASETYPE_ARInvoice.equals(c_dtBT))
			|| (MDocBaseType.DOCBASETYPE_APInvoice.equals(c_dtBT) && MDocBaseType.DOCBASETYPE_ARInvoice.equals(dtBT))) 
			setIsValid(true);
		//	Shipment
		else if ((MDocBaseType.DOCBASETYPE_MaterialDelivery.equals(dtBT) && MDocBaseType.DOCBASETYPE_MaterialReceipt.equals(c_dtBT))
			|| (MDocBaseType.DOCBASETYPE_MaterialDelivery.equals(c_dtBT) && MDocBaseType.DOCBASETYPE_MaterialReceipt.equals(dtBT))) 
			setIsValid(true);
		//	AP/AR CreditMemo
		else if ((MDocBaseType.DOCBASETYPE_APCreditMemo.equals(dtBT) && MDocBaseType.DOCBASETYPE_ARCreditMemo.equals(c_dtBT))
			|| (MDocBaseType.DOCBASETYPE_APCreditMemo.equals(c_dtBT) && MDocBaseType.DOCBASETYPE_ARCreditMemo.equals(dtBT))) 
			setIsValid(true);
		//	Receipt / Payment
		else if ((MDocBaseType.DOCBASETYPE_ARReceipt.equals(dtBT) && MDocBaseType.DOCBASETYPE_APPayment.equals(c_dtBT))
			|| (MDocBaseType.DOCBASETYPE_ARReceipt.equals(c_dtBT) && MDocBaseType.DOCBASETYPE_APPayment.equals(dtBT))) 
			setIsValid(true);
		else
		{
			log.warning(""NOT - "" + dtBT + "" -> "" + c_dtBT);
			setIsValid(false);
			return ""Not valid"";
		}
		//	Counter should have document numbering 
		if (!c_dt.isDocNoControlled())
			return ""Counter Document Type should be automatically Document Number controlled"";
		return null;
	}	//	validate
"
org.compiere.model.MDocTypeCounter.toString,MDocTypeCounter.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MDocTypeCounter["");
		sb.append(get_ID()).append("","").append(getName())
			.append("",C_DocType_ID="").append(getC_DocType_ID())
			.append("",Counter="").append(getCounter_C_DocType_ID())
			.append("",DocAction="").append(getDocAction())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.model.MDocTypeCounter.beforeSave,MDocTypeCounter.java,"boolean beforeSave (boolean newRecord)
	{
		if (getAD_Org_ID() != 0)
			setAD_Org_ID(0);
		
		if (!newRecord
			&& (is_ValueChanged(""C_DocType_ID"") || is_ValueChanged(""Counter_C_DocType_ID"")))
			setIsValid(false);
		
		//	try to validate
		if (!isValid())
			 validate();
		return true;
	}	//	beforeSave
"
org.compiere.model.MLot.getProductLots,MLot.java,"MLot[] getProductLots (Ctx ctx, int M_Product_ID, Trx trx)
	{
		String sql = ""SELECT * FROM M_Lot WHERE M_Product_ID=?"";
		ArrayList<MLot> list = new ArrayList<MLot>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, M_Product_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MLot (ctx, rs, trx));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			s_log.log(Level.SEVERE, sql, ex);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;
		//
		MLot[] retValue = new MLot[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getProductLots
"
org.compiere.model.MLot.getProductLot,MLot.java,"MLot getProductLot (Ctx ctx, int M_Product_ID, String lot, Trx trx)
	{
		String sql = ""SELECT * FROM M_Lot WHERE M_Product_ID=? AND Name=?"";
		MLot retValue = null;
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, M_Product_ID);
			pstmt.setString(2, lot);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				retValue = new MLot (ctx, rs, trx);
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			s_log.log(Level.SEVERE, sql, ex);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;
		return retValue;
	}	//	getProductLot
"
org.compiere.model.MLot.getProductLotPairs,MLot.java,"KeyNamePair[] getProductLotPairs (int M_Product_ID, Trx trx)
	{
		String sql = ""SELECT M_Lot_ID, Name FROM M_Lot WHERE M_Product_ID=?"";
		ArrayList<KeyNamePair> list = new ArrayList<KeyNamePair>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt (1, M_Product_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new KeyNamePair (rs.getInt(1), rs.getString(2)));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			s_log.log(Level.SEVERE, sql, ex);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;
		//
		KeyNamePair[] retValue = new KeyNamePair[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getProductLotPairs
"
org.compiere.model.MLot.toString,MLot.java,"String toString()
	{
		return getName();
	}	//	toString
"
org.compiere.model.CalloutTimeExpense.product,CalloutTimeExpense.java,"String product (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		Integer M_Product_ID = (Integer)value;
		if (M_Product_ID == null || M_Product_ID.intValue() == 0)
			return """";
		setCalloutActive(true);
		BigDecimal priceActual = null;

		//	get expense date - or default to today's date
		Timestamp DateExpense = new Timestamp(ctx.getContextAsTime( WindowNo, ""DateExpense""));
		String sql = null;
		try
		{
			boolean noPrice = true;

			//	Search Pricelist for current version
			sql = ""SELECT bomPriceStd(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceStd,""
				+ ""bomPriceList(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceList,""
				+ ""bomPriceLimit(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceLimit,""
				+ ""p.C_UOM_ID,pv.ValidFrom,pl.C_Currency_ID ""
				+ ""FROM M_Product p, M_ProductPrice pp, M_PriceList pl, M_PriceList_Version pv ""
				+ ""WHERE p.M_Product_ID=pp.M_Product_ID""
				+ "" AND pp.M_PriceList_Version_ID=pv.M_PriceList_Version_ID""
				+ "" AND pv.M_PriceList_ID=pl.M_PriceList_ID""
				+ "" AND pv.IsActive='Y'""
				+ "" AND p.M_Product_ID=?""		//	1
				+ "" AND pl.M_PriceList_ID=?""	//	2
				+ "" ORDER BY pv.ValidFrom DESC"";
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, M_Product_ID.intValue());
			pstmt.setInt(2, ctx.getContextAsInt( WindowNo, ""M_PriceList_ID""));
			ResultSet rs = pstmt.executeQuery();
			while (rs.next() && noPrice)
			{
				Timestamp plDate = rs.getTimestamp(""ValidFrom"");
				//	we have the price list
				//	if order date is after or equal PriceList validFrom
				if (plDate == null || !DateExpense.before(plDate))
				{
					noPrice = false;
					//	Price
					priceActual = rs.getBigDecimal(""PriceStd"");
					if (priceActual == null)
						priceActual = rs.getBigDecimal(""PriceList"");
					if (priceActual == null)
						priceActual = rs.getBigDecimal(""PriceLimit"");
					//	Currency
					Integer ii = Integer.valueOf(rs.getInt(""C_Currency_ID""));
					if (!rs.wasNull())
						mTab.setValue(""C_Currency_ID"", ii);
				}
			}
			rs.close();
			pstmt.close();

			//	no prices yet - look base pricelist
			if (noPrice)
			{
				//	Find if via Base Pricelist
				sql = ""SELECT bomPriceStd(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceStd,""
					+ ""bomPriceList(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceList,""
					+ ""bomPriceLimit(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceLimit,""
					+ ""p.C_UOM_ID,pv.ValidFrom,pl.C_Currency_ID ""
					+ ""FROM M_Product p, M_ProductPrice pp, M_PriceList pl, M_PriceList bpl, M_PriceList_Version pv ""
					+ ""WHERE p.M_Product_ID=pp.M_Product_ID""
					+ "" AND pp.M_PriceList_Version_ID=pv.M_PriceList_Version_ID""
					+ "" AND pv.M_PriceList_ID=bpl.M_PriceList_ID""
					+ "" AND pv.IsActive='Y'""
					+ "" AND bpl.M_PriceList_ID=pl.BasePriceList_ID""	//	Base
					+ "" AND p.M_Product_ID=?""		//  1
					+ "" AND pl.M_PriceList_ID=?""	//	2
					+ "" ORDER BY pv.ValidFrom DESC"";

				pstmt = DB.prepareStatement(sql, (Trx) null);
				pstmt.setInt(1, M_Product_ID.intValue());
				pstmt.setInt(2, ctx.getContextAsInt( WindowNo, ""M_PriceList_ID""));
				rs = pstmt.executeQuery();
				while (rs.next() && noPrice)
				{
					java.sql.Date plDate = rs.getDate(""ValidFrom"");
					//	we have the price list
					//	if order date is after or equal PriceList validFrom
					if (plDate == null || !DateExpense.before(plDate))
					{
						noPrice = false;
						//	Price
						priceActual = rs.getBigDecimal(""PriceStd"");
						if (priceActual == null)
							priceActual = rs.getBigDecimal(""PriceList"");
						if (priceActual == null)
							priceActual = rs.getBigDecimal(""PriceLimit"");
						//	Currency
						Integer ii = Integer.valueOf(rs.getInt(""C_Currency_ID""));
						if (!rs.wasNull())
							mTab.setValue(""C_Currency_ID"", ii);
					}
				}
				rs.close();
				pstmt.close();
			}
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
			setCalloutActive(false);
			return e.getLocalizedMessage();
		}

		//	finish
		setCalloutActive(false);	//	calculate amount
		if (priceActual == null)
			priceActual = Env.ZERO;
		mTab.setValue(""ExpenseAmt"", priceActual);
		return """";
	}	//	Expense_Product
"
org.compiere.model.CalloutTimeExpense.amount,CalloutTimeExpense.java,"String amount (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		if (isCalloutActive())
			return """";
		setCalloutActive(true);

		//	get values
		BigDecimal ExpenseAmt = (BigDecimal)mTab.getValue(""ExpenseAmt"");
		Integer C_Currency_From_ID = (Integer)mTab.getValue(""C_Currency_ID"");
		int C_Currency_To_ID = ctx.getContextAsInt( ""$C_Currency_ID"");
		Timestamp DateExpense = new Timestamp(ctx.getContextAsTime( WindowNo, ""DateExpense""));
		//
		log.fine(""Amt="" + ExpenseAmt + "", C_Currency_ID="" + C_Currency_From_ID);
		//	Converted Amount = Unit price
		BigDecimal ConvertedAmt = ExpenseAmt;
		//	convert if required
		if (!ConvertedAmt.equals(Env.ZERO) && C_Currency_To_ID != C_Currency_From_ID.intValue())
		{
			int AD_Client_ID = ctx.getContextAsInt( WindowNo, ""AD_Client_ID"");
			int AD_Org_ID = ctx.getContextAsInt( WindowNo, ""AD_Org_ID"");
			ConvertedAmt = MConversionRate.convert (ctx,
				ConvertedAmt, C_Currency_From_ID.intValue(), C_Currency_To_ID,
				DateExpense, 0, AD_Client_ID, AD_Org_ID);
		}
		mTab.setValue(""ConvertedAmt"", ConvertedAmt);
		log.fine(""= ConvertedAmt="" + ConvertedAmt);

		setCalloutActive(false);
		return """";
	}	//	Expense_Amount
"
org.compiere.report.MReportSource.getWhereClause,MReportSource.java,"String getWhereClause(int PA_Hierarchy_ID)
	{
		String et = getElementType();
		//	ID for Tree Leaf Value
		int ID = 0;
		//
		if (X_C_AcctSchema_Element.ELEMENTTYPE_Account.equals(et))
			ID = getC_ElementValue_ID ();
		else if (X_C_AcctSchema_Element.ELEMENTTYPE_Activity.equals(et))
			ID = getC_Activity_ID ();
		else if (X_C_AcctSchema_Element.ELEMENTTYPE_BPartner.equals(et))
			ID = getC_BPartner_ID ();
		else if (X_C_AcctSchema_Element.ELEMENTTYPE_Campaign.equals(et))
			ID = getC_Campaign_ID ();
		else if (X_C_AcctSchema_Element.ELEMENTTYPE_LocationFrom.equals(et))
			ID = getC_Location_ID ();
		else if (X_C_AcctSchema_Element.ELEMENTTYPE_LocationTo.equals(et))
			ID = getC_Location_ID ();
		else if (X_C_AcctSchema_Element.ELEMENTTYPE_Organization.equals(et))
			ID = getOrg_ID ();
		else if (X_C_AcctSchema_Element.ELEMENTTYPE_Product.equals(et))
			ID = getM_Product_ID ();
		else if (X_C_AcctSchema_Element.ELEMENTTYPE_Project.equals(et))
			ID = getC_Project_ID ();
		else if (X_C_AcctSchema_Element.ELEMENTTYPE_SalesRegion.equals(et))
			ID = getC_SalesRegion_ID ();
		else if (X_C_AcctSchema_Element.ELEMENTTYPE_OrgTrx.equals(et))
			ID = getOrg_ID ();	//	(re)uses Org_ID
		else if (X_C_AcctSchema_Element.ELEMENTTYPE_UserList1.equals(et))
			ID = getC_ElementValue_ID ();
		else if (X_C_AcctSchema_Element.ELEMENTTYPE_UserList2.equals(et))
			ID = getC_ElementValue_ID ();
//		else if (MAcctSchemaElement.ELEMENTTYPE_UserElement1.equals(et))
//			ID = getUserElement1_ID ();
//		else if (MAcctSchemaElement.ELEMENTTYPE_UserElement2.equals(et))
//			ID = getUserElement2_ID ();
		if (ID == 0)
		{
			log.fine(""No Restrictions - No ID for EntityType="" + et);
			return """";
		}
		//
		return MReportTree.getWhereClause (getCtx(), PA_Hierarchy_ID, et, ID);
	}	//	getWhereClause
"
org.compiere.report.MReportSource.toString,MReportSource.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MReportSource["")
			.append(get_ID()).append("" - "").append(getDescription())
			.append("" - "").append(getElementType());
		sb.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.report.MReportSource.copy,MReportSource.java,"MReportSource copy (Ctx ctx, int AD_Client_ID, int AD_Org_ID, 
		int PA_ReportLine_ID, MReportSource source, Trx trx)
	{
		MReportSource retValue = new MReportSource (ctx, 0, trx);
		PO.copyValues(source, retValue, AD_Client_ID, AD_Org_ID);
		retValue.setPA_ReportLine_ID(PA_ReportLine_ID);
		return retValue;
	}	//	copy
"
org.compiere.report.MReport.list,MReport.java,"void list()
	{
		System.out.println(toString());
		if (m_columnSet != null)
			m_columnSet.list();
		System.out.println();
		if (m_lineSet != null)
			m_lineSet.list();
	}	//	dump
"
org.compiere.report.MReport.getWhereClause,MReport.java,"String getWhereClause()
	{
		//	AD_Client indirectly via AcctSchema
		StringBuffer sb = new StringBuffer();
		//	Mandatory 	AcctSchema
		sb.append(""C_AcctSchema_ID="").append(getC_AcctSchema_ID());
		//
		return sb.toString();
	}	//	getWhereClause
"
org.compiere.report.MReport.toString,MReport.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MReport["")
			.append(get_ID()).append("" - "").append(getName());
		if (getDescription() != null)
			sb.append(""("").append(getDescription()).append("")"");
		sb.append("" - C_AcctSchema_ID="").append(getC_AcctSchema_ID())
			.append("", C_Calendar_ID="").append(getC_Calendar_ID());
		sb.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.report.MReport.getColumnSet,MReport.java,"MReportColumnSet	getColumnSet()
	{
		return m_columnSet;
	}
"
org.compiere.report.MReport.getLineSet,MReport.java,"MReportLineSet getLineSet()
	{
		return m_lineSet;
	}
"
org.compiere.report.MReportLine.loadSources,MReportLine.java,"void loadSources()
	{
		ArrayList<MReportSource> list = new ArrayList<MReportSource>();
		String sql = ""SELECT * FROM PA_ReportSource WHERE PA_ReportLine_ID=? AND IsActive='Y'"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getPA_ReportLine_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MReportSource (getCtx(), rs, null));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, null, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		//
		m_sources = new MReportSource[list.size()];
		list.toArray(m_sources);
		log.finest(""ID="" + getPA_ReportLine_ID()
			+ "" - Size="" + list.size());
	}	//	loadSources
"
org.compiere.report.MReportLine.getSources,MReportLine.java,"MReportSource[] getSources()
	{
		if (LINETYPE_SegmentValue.equals(getLineType()))
			return m_sources;
		return new MReportSource[0];
	}	//	getSources
"
org.compiere.report.MReportLine.list,MReportLine.java,"void list()
	{
		System.out.println(""- "" + toString());
		if (m_sources == null)
			return;
		for (MReportSource element : m_sources)
			System.out.println(""  - "" + element.toString());
	}	//	list
"
org.compiere.report.MReportLine.getSourceColumnName,MReportLine.java,"String getSourceColumnName()
	{
		String ColumnName = null;
		for (MReportSource element : m_sources) {
			String col = MAcctSchemaElement.getColumnName (element.getElementType());
			if (ColumnName == null || ColumnName.length() == 0)
				ColumnName = col;
			else if (!ColumnName.equals(col))
			{
				log.config(""More than one: "" + ColumnName + "" - "" + col);
				return null;
			}
		}
		return ColumnName;
	}	//	getColumnName
"
org.compiere.report.MReportLine.getSourceValueQuery,MReportLine.java,"String getSourceValueQuery()
	{
		if (m_sources != null && m_sources.length > 0)
			return MAcctSchemaElement.getValueQuery(m_sources[0].getElementType());
		return null;
	}	//
"
org.compiere.report.MReportLine.getSelectClause,MReportLine.java,"String getSelectClause (boolean withSum)
	{
		String at = getAmountType().substring(0,1);	//	first letter
		StringBuffer sb = new StringBuffer();
		if (withSum)
			sb.append(""SUM("");
		if (AmountType_Balance.equals(at))
		//	sb.append(""AmtAcctDr-AmtAcctCr"");
			sb.append(""acctBalance(Account_ID,AmtAcctDr,AmtAcctCr)"");
		else if (AmountType_CR.equals(at))
			sb.append(""AmtAcctCr"");
		else if (AmountType_DR.equals(at))
			sb.append(""AmtAcctDr"");
		else if (AmountType_Qty.equals(at))
			sb.append(""Qty"");
		else
		{
			log.log(Level.SEVERE, ""AmountType="" + getAmountType () + "", at="" + at);
			return ""NULL"";
		}
		if (withSum)
			sb.append("")"");
		return sb.toString();
	}	//	getSelectClause
"
org.compiere.report.MReportLine.isPeriod,MReportLine.java,"boolean isPeriod()
	{
		String at = getAmountType();
		if (at == null)
			return false;
		return AMOUNTTYPE_PeriodBalance.equals(at)
			|| AMOUNTTYPE_PeriodCreditOnly.equals(at)
			|| AMOUNTTYPE_PeriodDebitOnly.equals(at)
			|| AMOUNTTYPE_PeriodQuantity.equals(at);
	}	//	isPeriod
"
org.compiere.report.MReportLine.isYear,MReportLine.java,"boolean isYear()
	{
		String at = getAmountType();
		if (at == null)
			return false;
		return AMOUNTTYPE_YearBalance.equals(at)
			|| AMOUNTTYPE_YearCreditOnly.equals(at)
			|| AMOUNTTYPE_YearDebitOnly.equals(at)
			|| AMOUNTTYPE_YearQuantity.equals(at);
	}	//	isYear
"
org.compiere.report.MReportLine.isTotal,MReportLine.java,"boolean isTotal()
	{
		String at = getAmountType();
		if (at == null)
			return false;
		return AMOUNTTYPE_TotalBalance.equals(at)
			|| AMOUNTTYPE_TotalCreditOnly.equals(at)
			|| AMOUNTTYPE_TotalDebitOnly.equals(at)
			|| AMOUNTTYPE_TotalQuantity.equals(at);
	}	//	isTotal
"
org.compiere.report.MReportLine.getWhereClause,MReportLine.java,"String getWhereClause(int PA_Hierarchy_ID)
	{
		if (m_sources == null)
			return """";
		if (m_whereClause == null)
		{
			//	Only one
			if (m_sources.length == 0)
				m_whereClause = """";
			else if (m_sources.length == 1)
				m_whereClause = m_sources[0].getWhereClause(PA_Hierarchy_ID);
			else
			{
				//	Multiple
				StringBuffer sb = new StringBuffer (""("");
				for (int i = 0; i < m_sources.length; i++)
				{
					if (i > 0)
						sb.append ("" OR "");
					sb.append (m_sources[i].getWhereClause(PA_Hierarchy_ID));
				}
				sb.append ("")"");
				m_whereClause = sb.toString ();
			}
			//	Posting Type
			String PostingType = getPostingType();
			if (PostingType != null && PostingType.length() > 0)
			{
				if (m_whereClause.length() > 0)
					m_whereClause += "" AND "";
				m_whereClause += ""PostingType='"" + PostingType + ""'"";
			}
			log.fine(m_whereClause);
		}
		return m_whereClause;
	}	//	getWhereClause
"
org.compiere.report.MReportLine.isPostingType,MReportLine.java,"boolean isPostingType()
	{
		String PostingType = getPostingType();
		return (PostingType != null && PostingType.length() > 0);
	}	//	isPostingType
"
org.compiere.report.MReportLine.toString,MReportLine.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MReportLine["")
			.append(get_ID()).append(""-"").append(getName()).append(""-"").append(getDescription())
			.append("", SeqNo="").append(getSeqNo()).append("",AmountType="").append(getAmountType())
			.append("",LineType="").append(getLineType());
		if (isLineTypeCalculation())
			sb.append(""-Calculation="").append(getCalculationType())
				.append("":"").append(getOper_1_ID()).append("":"").append(getOper_2_ID());
		else	//	SegmentValue
			sb.append(""-SegmentValue-PostingType="").append(getPostingType())
				.append("",AmountType="").append(getAmountType());
		sb.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.report.MReportLine.isLineTypeCalculation,MReportLine.java,"boolean isLineTypeCalculation()
	{
		return LINETYPE_Calculation.equals(getLineType());
	}
"
org.compiere.report.MReportLine.isLineTypeSegmentValue,MReportLine.java,"boolean isLineTypeSegmentValue()
	{
		return LINETYPE_SegmentValue.equals(getLineType());
	}
"
org.compiere.report.MReportLine.isCalculationTypeRange,MReportLine.java,"boolean isCalculationTypeRange()
	{
		return CALCULATIONTYPE_AddRangeOp1ToOp2.equals(getCalculationType());
	}
"
org.compiere.report.MReportLine.isCalculationTypeAdd,MReportLine.java,"boolean isCalculationTypeAdd()
	{
		return CALCULATIONTYPE_AddOp1PlusOp2.equals(getCalculationType());
	}
"
org.compiere.report.MReportLine.isCalculationTypeSubtract,MReportLine.java,"boolean isCalculationTypeSubtract()
	{
		return CALCULATIONTYPE_SubtractOp1_Op2.equals(getCalculationType());
	}
"
org.compiere.report.MReportLine.isCalculationTypePercent,MReportLine.java,"boolean isCalculationTypePercent()
	{
		return CALCULATIONTYPE_PercentageOp1OfOp2.equals(getCalculationType());
	}
"
org.compiere.report.MReportLine.beforeSave,MReportLine.java,"boolean beforeSave (boolean newRecord)
	{
		if (LINETYPE_SegmentValue.equals(getLineType()))
		{
			if (getCalculationType() != null)
				setCalculationType(null);
			if (getOper_1_ID() != 0)
				setOper_1_ID(0);
			if (getOper_2_ID() != 0)
				setOper_2_ID(0);
		}
		return true;
	}	//	beforeSave
"
org.compiere.report.MReportLine.copy,MReportLine.java,"MReportLine copy (Ctx ctx, int AD_Client_ID, int AD_Org_ID, 
		int PA_ReportLineSet_ID, MReportLine source, Trx trx)
	{
		MReportLine retValue = new MReportLine (ctx, 0, trx);
		PO.copyValues(source, retValue, AD_Client_ID, AD_Org_ID);
		//
		retValue.setPA_ReportLineSet_ID(PA_ReportLineSet_ID);
		retValue.setOper_1_ID(0);
		retValue.setOper_2_ID(0);
		return retValue;
	}	//	copy
"
org.compiere.report.FinReportPeriod.getPeriodWhere,FinReportPeriod.java,"String getPeriodWhere ()
	{
		StringBuffer sql = new StringBuffer (""BETWEEN "");
		sql.append(DB.TO_DATE(m_StartDate))
			.append("" AND "")
			.append(DB.TO_DATE(m_EndDate));
		return sql.toString();
	}	//	getPeriodWhere
"
org.compiere.report.FinReportPeriod.getYearWhere,FinReportPeriod.java,"String getYearWhere ()
	{
		StringBuffer sql = new StringBuffer (""BETWEEN "");
		sql.append(DB.TO_DATE(m_YearStartDate))
			  .append("" AND "")
			  .append(DB.TO_DATE(m_EndDate));
		return sql.toString();
	}	//	getPeriodWhere
"
org.compiere.report.FinReportPeriod.getTotalWhere,FinReportPeriod.java,"String getTotalWhere ()
	{
		StringBuffer sql = new StringBuffer (""<= "");
		sql.append(DB.TO_DATE(m_EndDate));
		return sql.toString();
	}	//	getPeriodWhere
"
org.compiere.report.FinReportPeriod.inPeriod,FinReportPeriod.java,"boolean inPeriod (Timestamp date)
	{
		if (date == null)
			return false;
		if (date.before(m_StartDate))
			return false;
		if (date.after(m_EndDate))
			return false;
		return true;
	}	//	inPeriod
"
org.compiere.report.FinReportPeriod.getName,FinReportPeriod.java,"String getName()
	{
		return m_Name;
	}
"
org.compiere.report.FinReportPeriod.getC_Period_ID,FinReportPeriod.java,"int getC_Period_ID()
	{
		return m_C_Period_ID;
	}
"
org.compiere.report.FinReportPeriod.getEndDate,FinReportPeriod.java,"Timestamp getEndDate()
	{
		return m_EndDate;
	}
"
org.compiere.report.FinReportPeriod.getStartDate,FinReportPeriod.java,"Timestamp getStartDate()
	{
		return m_StartDate;
	}
"
org.compiere.report.FinReportPeriod.getYearStartDate,FinReportPeriod.java,"Timestamp getYearStartDate()
	{
		return m_YearStartDate;
	}
"
org.compiere.report.FinReportPeriod.toString,FinReportPeriod.java,"String toString()
    {
	    StringBuffer sb = new StringBuffer(""FinReportPeriod["")
	    	.append(m_C_Period_ID)
	        .append(""-"").append(m_Name);
	    sb.append(""]"");
	    return sb.toString();
    } //	toString
"
org.compiere.report.MReportLineSet.loadLines,MReportLineSet.java,"void loadLines()
	{
		ArrayList<MReportLine> list = new ArrayList<MReportLine>();
		String sql = ""SELECT * FROM PA_ReportLine ""
			+ ""WHERE PA_ReportLineSet_ID=? AND IsActive='Y' ""
			+ ""ORDER BY SeqNo"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getPA_ReportLineSet_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MReportLine (getCtx(), rs, get_Trx()));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		//
		m_lines = new MReportLine[list.size()];
		list.toArray(m_lines);
		log.finest(""ID="" + getPA_ReportLineSet_ID()
			+ "" - Size="" + list.size());
	}	//	loadColumns
"
org.compiere.report.MReportLineSet.getLiness,MReportLineSet.java,"MReportLine[] getLiness()
	{
		return m_lines;
	}	//	getLines
"
org.compiere.report.MReportLineSet.list,MReportLineSet.java,"void list()
	{
		System.out.println(toString());
		if (m_lines == null)
			return;
		for (MReportLine element : m_lines)
			element.list();
	}	//	list
"
org.compiere.report.MReportLineSet.toString,MReportLineSet.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MReportLineSet["")
			.append(get_ID()).append("" - "").append(getName())
			.append (""]"");
		return sb.toString ();
	}
"
org.compiere.report.MReportColumn.copy,MReportColumn.java,"MReportColumn copy (Ctx ctx, int AD_Client_ID, int AD_Org_ID, 
		int PA_ReportColumnSet_ID, MReportColumn source, Trx trx)
	{
		MReportColumn retValue = new MReportColumn (ctx, 0, trx);
		PO.copyValues(source, retValue, AD_Client_ID, AD_Org_ID);
		//
		retValue.setPA_ReportColumnSet_ID(PA_ReportColumnSet_ID);	//	parent
		retValue.setOper_1_ID(0);
		retValue.setOper_2_ID(0);
		return retValue;
	}	//	copy
"
org.compiere.report.MReportColumn.getSelectClause,MReportColumn.java,"String getSelectClause (boolean withSum)
	{
		//	Amount Type = Period Balance, Period Credit
		String amountType = getAmountType().substring(0,1);	//	first character
		StringBuffer sb = new StringBuffer();
		if (withSum)
			sb.append(""SUM("");
		if (AmountType_Balance.equals(amountType))
		//	sb.append(""AmtAcctDr-AmtAcctCr"");
			sb.append(""acctBalance(Account_ID,AmtAcctDr,AmtAcctCr)"");
		else if (AmountType_CR.equals(amountType))
			sb.append(""AmtAcctCr"");
		else if (AmountType_DR.equals(amountType))
			sb.append(""AmtAcctDr"");
		else if (AmountType_Qty.equals(amountType))
			sb.append(""Qty"");
		else
		{
			log.log(Level.SEVERE, ""AmountType="" + getAmountType () + "", at="" + amountType);
			return ""NULL"";
		}
		if (withSum)
			sb.append("")"");
		return sb.toString();
	}	//	getSelectClause
"
org.compiere.report.MReportColumn.isPeriod,MReportColumn.java,"boolean isPeriod()
	{
		String at = getAmountType();
		if (at == null)
			return false;
		return AMOUNTTYPE_PeriodBalance.equals(at)
			|| AMOUNTTYPE_PeriodCreditOnly.equals(at)
			|| AMOUNTTYPE_PeriodDebitOnly.equals(at)
			|| AMOUNTTYPE_PeriodQuantity.equals(at);
	}	//	isPeriod
"
org.compiere.report.MReportColumn.isYear,MReportColumn.java,"boolean isYear()
	{
		String at = getAmountType();
		if (at == null)
			return false;
		return AMOUNTTYPE_YearBalance.equals(at)
			|| AMOUNTTYPE_YearCreditOnly.equals(at)
			|| AMOUNTTYPE_YearDebitOnly.equals(at)
			|| AMOUNTTYPE_YearQuantity.equals(at);
	}	//	isYear
"
org.compiere.report.MReportColumn.isTotal,MReportColumn.java,"boolean isTotal()
	{
		String at = getAmountType();
		if (at == null)
			return false;
		return AMOUNTTYPE_TotalBalance.equals(at)
			|| AMOUNTTYPE_TotalCreditOnly.equals(at)
			|| AMOUNTTYPE_TotalDebitOnly.equals(at)
			|| AMOUNTTYPE_TotalQuantity.equals(at);
	}	//	isTotalBalance
"
org.compiere.report.MReportColumn.getWhereClause,MReportColumn.java,"String getWhereClause(int PA_Hierarchy_ID)
	{
		if (!isColumnTypeSegmentValue())
			return """";
		
		String et = getElementType();
		int ID = 0;
		if (X_PA_ReportColumn.ELEMENTTYPE_Organization.equals(et))
			ID = getOrg_ID();
		else if (X_PA_ReportColumn.ELEMENTTYPE_BPartner.equals(et))
			ID = getC_BPartner_ID();
		else if (X_PA_ReportColumn.ELEMENTTYPE_Product.equals(et))
			ID = getM_Product_ID();
		else if (X_PA_ReportColumn.ELEMENTTYPE_Project.equals(et))
			ID = getC_Project_ID();
		else if (X_PA_ReportColumn.ELEMENTTYPE_Activity.equals(et))
			ID = getC_Activity_ID();
		else if (X_PA_ReportColumn.ELEMENTTYPE_Campaign.equals(et))
			ID = getC_Campaign_ID();
		else if (X_PA_ReportColumn.ELEMENTTYPE_LocationFrom.equals(et))
			ID = getC_Location_ID();
		else if (X_PA_ReportColumn.ELEMENTTYPE_LocationTo.equals(et))
			ID = getC_Location_ID();
		else if (X_PA_ReportColumn.ELEMENTTYPE_OrgTrx.equals(et))
			ID = getOrg_ID();
		else if (X_PA_ReportColumn.ELEMENTTYPE_SalesRegion.equals(et))
			ID = getC_SalesRegion_ID();
		else if (X_PA_ReportColumn.ELEMENTTYPE_Account.equals(et))
			ID = getC_ElementValue_ID();
		else if (X_PA_ReportColumn.ELEMENTTYPE_UserList1.equals(et))
			ID = getC_ElementValue_ID();
		else if (X_PA_ReportColumn.ELEMENTTYPE_UserList2.equals(et))
			ID = getC_ElementValue_ID();
	//	else if (MReportColumn.ELEMENTTYPE_UserElement1.equals(et))
	//		ID = getC_ElementValue_ID();
	//	else if (MReportColumn.ELEMENTTYPE_UserElement2.equals(et))
	//		ID = getC_ElementValue_ID();
		else
			log.warning(""Unsupported Element Type="" + et);

		if (ID == 0)
		{
			log.fine(""No Restrictions - No ID for EntityType="" + et);
			return """";
		}
		return "" AND "" + MReportTree.getWhereClause (getCtx(), PA_Hierarchy_ID, et, ID);
	}	//	getWhereClause
"
org.compiere.report.MReportColumn.toString,MReportColumn.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MReportColumn["")
			.append(get_ID()).append(""-"").append(getName()).append(""-"").append(getDescription())
			.append("",SeqNo="").append(getSeqNo()).append("", AmountType="").append(getAmountType())
			.append("",CurrencyType="").append(getCurrencyType()).append(""/"").append(getC_Currency_ID())
			.append("",ColumnType="").append(getColumnType());
		if (isColumnTypeCalculation())
			sb.append(""-Calculation="").append(getCalculationType())
				.append("":"").append(getOper_1_ID()).append("":"").append(getOper_2_ID());
		else if (isColumnTypeRelativePeriod())
			sb.append(""-Period="").append(getRelativePeriod());
		else
			sb.append(""-SegmentValue ElementType="").append(getElementType());
		sb.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.report.MReportColumn.isCalculationTypeRange,MReportColumn.java,"boolean isCalculationTypeRange()
	{
		return CALCULATIONTYPE_AddRangeOp1ToOp2.equals(getCalculationType());
	}
"
org.compiere.report.MReportColumn.isCalculationTypeAdd,MReportColumn.java,"boolean isCalculationTypeAdd()
	{
		return CALCULATIONTYPE_AddOp1PlusOp2.equals(getCalculationType());
	}
"
org.compiere.report.MReportColumn.isCalculationTypeSubtract,MReportColumn.java,"boolean isCalculationTypeSubtract()
	{
		return CALCULATIONTYPE_SubtractOp1_Op2.equals(getCalculationType());
	}
"
org.compiere.report.MReportColumn.isCalculationTypePercent,MReportColumn.java,"boolean isCalculationTypePercent()
	{
		return CALCULATIONTYPE_PercentageOp1OfOp2.equals(getCalculationType());
	}
"
org.compiere.report.MReportColumn.isColumnTypeCalculation,MReportColumn.java,"boolean isColumnTypeCalculation()
	{
		return COLUMNTYPE_Calculation.equals(getColumnType());
	}
"
org.compiere.report.MReportColumn.isColumnTypeRelativePeriod,MReportColumn.java,"boolean isColumnTypeRelativePeriod()
	{
		return COLUMNTYPE_RelativePeriod.equals(getColumnType());
	}
"
org.compiere.report.MReportColumn.isColumnTypeSegmentValue,MReportColumn.java,"boolean isColumnTypeSegmentValue()
	{
		return COLUMNTYPE_SegmentValue.equals(getColumnType());
	}
"
org.compiere.report.MReportColumn.getRelativePeriodAsInt,MReportColumn.java,"int getRelativePeriodAsInt ()
	{
		BigDecimal bd = getRelativePeriod();
		if (bd == null)
			return 0;
		return bd.intValue();
	}	//	getRelativePeriodAsInt
"
org.compiere.report.MReportColumn.getRelativePeriod,MReportColumn.java,"BigDecimal getRelativePeriod()
	{
		if (getColumnType().equals(COLUMNTYPE_RelativePeriod)
			|| getColumnType().equals(COLUMNTYPE_SegmentValue))
			return super.getRelativePeriod();
		return null;
	}	//	getRelativePeriod
"
org.compiere.report.MReportColumn.getElementType,MReportColumn.java,"String getElementType()
	{
		if (getColumnType().equals(COLUMNTYPE_SegmentValue))
			return super.getElementType();
		return null;
	}	//	getElementType
"
org.compiere.report.MReportColumn.getCalculationType,MReportColumn.java,"String getCalculationType()
	{
		if (getColumnType().equals(COLUMNTYPE_Calculation))
			return super.getCalculationType();
		return null;
	}	//	getCalculationType
"
org.compiere.report.MReportColumn.beforeSave,MReportColumn.java,"boolean beforeSave(boolean newRecord)
	{
		//	Validate Type
		String ct = getColumnType();
		if (ct.equals(COLUMNTYPE_RelativePeriod))
		{
			setElementType(null);
			setCalculationType(null);
		}
		else if (ct.equals(COLUMNTYPE_Calculation))
		{
			setElementType(null);
			setRelativePeriod(null);
		}
		else if (ct.equals(COLUMNTYPE_SegmentValue))
		{
			setCalculationType(null);
		}
		return true;
	}	//	beforeSave
"
org.compiere.report.FinStatement.prepare,FinStatement.java,"void prepare()
	{
		StringBuffer sb = new StringBuffer (""Record_ID="")
			.append(getRecord_ID());
		//	Parameter
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_AcctSchema_ID""))
				p_C_AcctSchema_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""PostingType""))
				p_PostingType = (String)element.getParameter(); 
			else if (name.equals(""C_Period_ID""))
				p_C_Period_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""DateAcct""))
			{
				p_DateAcct_From = (Timestamp)element.getParameter();
				p_DateAcct_To = (Timestamp)element.getParameter_To();
			}
			else if (name.equals(""PA_Hierarchy_ID""))
				p_PA_Hierarchy_ID = element.getParameterAsInt();
			else if (name.equals(""AD_Org_ID""))
				p_AD_Org_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""Account_ID""))
				p_Account_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""C_BPartner_ID""))
				p_C_BPartner_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""M_Product_ID""))
				p_M_Product_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""C_Project_ID""))
				p_C_Project_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""C_Activity_ID""))
				p_C_Activity_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""C_SalesRegion_ID""))
				p_C_SalesRegion_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""C_Campaign_ID""))
				p_C_Campaign_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""UpdateBalances""))
				p_UpdateBalances = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		//	Mandatory C_AcctSchema_ID, PostingType
		m_parameterWhere.append(""C_AcctSchema_ID="").append(p_C_AcctSchema_ID)
			.append("" AND PostingType='"").append(p_PostingType).append(""'"");
		//	Optional Account_ID
		if (p_Account_ID != 0)
			m_parameterWhere.append("" AND "").append(MReportTree.getWhereClause(getCtx(), 
				p_PA_Hierarchy_ID, X_C_AcctSchema_Element.ELEMENTTYPE_Account, p_Account_ID));
		//	Optional Org
		if (p_AD_Org_ID != 0)
			m_parameterWhere.append("" AND "").append(MReportTree.getWhereClause(getCtx(), 
				p_PA_Hierarchy_ID, X_C_AcctSchema_Element.ELEMENTTYPE_Organization, p_AD_Org_ID));
		//	Optional BPartner
		if (p_C_BPartner_ID != 0)
			m_parameterWhere.append("" AND "").append(MReportTree.getWhereClause(getCtx(), 
				p_PA_Hierarchy_ID, X_C_AcctSchema_Element.ELEMENTTYPE_BPartner, p_C_BPartner_ID));
		//	Optional Product
		if (p_M_Product_ID != 0)
			m_parameterWhere.append("" AND "").append(MReportTree.getWhereClause(getCtx(), 
				p_PA_Hierarchy_ID, X_C_AcctSchema_Element.ELEMENTTYPE_Product, p_M_Product_ID));
		//	Optional Project
		if (p_C_Project_ID != 0)
			m_parameterWhere.append("" AND "").append(MReportTree.getWhereClause(getCtx(), 
				p_PA_Hierarchy_ID, X_C_AcctSchema_Element.ELEMENTTYPE_Project, p_C_Project_ID));
		//	Optional Activity
		if (p_C_Activity_ID != 0)
			m_parameterWhere.append("" AND "").append(MReportTree.getWhereClause(getCtx(), 
				p_PA_Hierarchy_ID, X_C_AcctSchema_Element.ELEMENTTYPE_Activity, p_C_Activity_ID));
		//	Optional Campaign
		if (p_C_Campaign_ID != 0)
			m_parameterWhere.append("" AND C_Campaign_ID="").append(p_C_Campaign_ID);
		//	m_parameterWhere.append("" AND "").append(MReportTree.getWhereClause(getCtx(), 
		//		MAcctSchemaElement.ELEMENTTYPE_Campaign, p_C_Campaign_ID));
		//	Optional Sales Region
		if (p_C_SalesRegion_ID != 0)
			m_parameterWhere.append("" AND "").append(MReportTree.getWhereClause(getCtx(), 
				p_PA_Hierarchy_ID, X_C_AcctSchema_Element.ELEMENTTYPE_SalesRegion, p_C_SalesRegion_ID));
		//
		setDateAcct();
		sb.append("" - DateAcct "").append(p_DateAcct_From).append(""-"").append(p_DateAcct_To);
		sb.append("" - Where="").append(m_parameterWhere);
		log.fine(sb.toString());
	}	//	prepare
"
org.compiere.report.FinStatement.setDateAcct,FinStatement.java,"void setDateAcct()
	{
		//	Get Default Calendar
		m_acctSchema = MAcctSchema.get(getCtx(), p_C_AcctSchema_ID);
	   	m_C_Calendar_ID = MClientInfo.get(getCtx(), m_acctSchema.getAD_Client_ID()).getC_Calendar_ID();
		//	Date defined
		if (p_DateAcct_From != null)
		{
			if (p_DateAcct_To == null)
				p_DateAcct_To = new Timestamp (System.currentTimeMillis());
			return;
		}
		//	Get Date from Period
		if (p_C_Period_ID == 0)
		{
			GregorianCalendar cal = new GregorianCalendar(Language.getLoginLanguage().getLocale());
			cal.setTimeInMillis(System.currentTimeMillis());
			cal.set(Calendar.HOUR_OF_DAY, 0);
			cal.set(Calendar.MINUTE, 0);
			cal.set(Calendar.SECOND, 0);
			cal.set(Calendar.MILLISECOND, 0);
			cal.set(Calendar.DAY_OF_MONTH, 1);		//	set to first of month
			p_DateAcct_From = new Timestamp (cal.getTimeInMillis());
			cal.add(Calendar.MONTH, 1);
			cal.add(Calendar.DAY_OF_YEAR, -1);		//	last of month
			p_DateAcct_To = new Timestamp (cal.getTimeInMillis());
		}
		else
		{
			MPeriod period = MPeriod.get(getCtx(), p_C_Period_ID);
			p_DateAcct_From = period.getStartDate();
			p_DateAcct_To = period.getEndDate();
			m_C_Calendar_ID = period.getC_Calendar_ID();
		}
	}	//	setDateAcct
"
org.compiere.report.FinStatement.doIt,FinStatement.java,"String doIt()
	{
		//	Update AcctSchema Balances
		if (p_UpdateBalances)
			FinBalance.updateBalance (getCtx(), p_C_AcctSchema_ID, 
				false, null, get_TrxName(), this);

		createBalanceLine();
		createDetailLines();

		int AD_PrintFormat_ID = 134;
		if (Ini.isClient())
			getProcessInfo().setTransientObject (MPrintFormat.get (getCtx(), AD_PrintFormat_ID, false));
		else
			getProcessInfo().setSerializableObject(MPrintFormat.get (getCtx(), AD_PrintFormat_ID, false));

		log.fine((System.currentTimeMillis() - m_start) + "" ms"");
		return """";
	}	//	doIt
"
org.compiere.report.FinStatement.createBalanceLine,FinStatement.java,"void createBalanceLine()
	{
		StringBuffer sb = new StringBuffer (""INSERT INTO T_ReportStatement ""
			+ ""(AD_PInstance_ID, Fact_Acct_ID, LevelNo,""
			+ ""DateAcct, Name, Description,""
			+ ""AmtAcctDr, AmtAcctCr, Balance, Qty) "");
		sb.append(""SELECT "").append(getAD_PInstance_ID()).append("",0,1,"")	//	LevelNo=1
			.append(DB.TO_DATE(p_DateAcct_From, true)).append("","")
			.append(DB.TO_STRING(Msg.getMsg(Env.getCtx(), ""BeginningBalance""))).append("",NULL,""
			+ ""COALESCE(SUM(AmtAcctDr),0), COALESCE(SUM(AmtAcctCr),0), COALESCE(SUM(AmtAcctDr-AmtAcctCr),0), COALESCE(SUM(Qty),0) ""
			+ ""FROM Fact_Acct_Balance ""
			+ ""WHERE "").append(m_parameterWhere)
			.append("" AND DateAcct < "").append(DB.TO_DATE(p_DateAcct_From));
			
		//	Start Beginning of Year
		if (p_Account_ID > 0)
		{
			m_acct = new MElementValue (getCtx(), p_Account_ID, get_TrxName());
			if (!m_acct.isBalanceSheet())
			{
				MPeriod first = MPeriod.getFirstInYear (getCtx(), m_C_Calendar_ID, p_DateAcct_From);
				if (first != null)
					sb.append("" AND DateAcct >= "").append(DB.TO_DATE(first.getStartDate()));
				else
					log.log(Level.SEVERE, ""First period not found"");
			}
		}
		//
		int no = DB.executeUpdate(sb.toString(), get_TrxName());
		log.fine(""#"" + no + "" (Account_ID="" + p_Account_ID + "")"");
		log.finest(sb.toString());
	}	//	createBalanceLine
"
org.compiere.report.FinStatement.createDetailLines,FinStatement.java,"void createDetailLines()
	{
		StringBuffer sb = new StringBuffer (""INSERT INTO T_ReportStatement ""
			+ ""(AD_PInstance_ID, Fact_Acct_ID, LevelNo,""
			+ ""DateAcct, Name, Description,""
			+ ""AmtAcctDr, AmtAcctCr, Balance, Qty) "");
		sb.append(""SELECT "").append(getAD_PInstance_ID()).append("",Fact_Acct_ID,2,"")	//	LevelNo=2
			.append(""DateAcct,NULL,NULL,""
			+ ""AmtAcctDr, AmtAcctCr, AmtAcctDr-AmtAcctCr, Qty ""
			+ ""FROM Fact_Acct ""
			+ ""WHERE "").append(m_parameterWhere)
			.append("" AND DateAcct BETWEEN "").append(DB.TO_DATE(p_DateAcct_From))
			.append("" AND "").append(DB.TO_DATE(p_DateAcct_To));
		//
		int no = DB.executeUpdate(sb.toString(), get_TrxName());
		log.fine(""#"" + no);
		log.finest(sb.toString());

		//	Set Name,Description
		String sql_select = ""SELECT e.Name, fa.Description ""
			+ ""FROM Fact_Acct fa""
			+ "" INNER JOIN AD_Table t ON (fa.AD_Table_ID=t.AD_Table_ID)""
			+ "" INNER JOIN AD_Element e ON (t.TableName||'_ID'=e.ColumnName) ""
			+ ""WHERE r.Fact_Acct_ID=fa.Fact_Acct_ID"";
		//	Translated Version ...
		sb = new StringBuffer (""UPDATE T_ReportStatement r SET (Name,Description)=("")
			.append(sql_select).append("") ""
			+ ""WHERE Fact_Acct_ID <> 0 AND AD_PInstance_ID="").append(getAD_PInstance_ID());
		//
	   no = DB.executeUpdate(sb.toString(), get_TrxName());
	   log.fine(""Name #"" + no);
	   log.finest(""Name - "" + sb);

	}	//	createDetailLines
"
org.compiere.report.TrialBalance.prepare,TrialBalance.java,"void prepare()
	{
		StringBuffer sb = new StringBuffer (""AD_PInstance_ID="")
			.append(getAD_PInstance_ID());
		//	Parameter
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_AcctSchema_ID""))
				p_C_AcctSchema_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""C_Period_ID""))
				p_C_Period_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""DateAcct""))
			{
				p_DateAcct_From = (Timestamp)element.getParameter();
				p_DateAcct_To = (Timestamp)element.getParameter_To();
			}
			else if (name.equals(""PA_Hierarchy_ID""))
				p_PA_Hierarchy_ID = element.getParameterAsInt();
			else if (name.equals(""AD_Org_ID""))
				p_AD_Org_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""Account_ID""))
				p_Account_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""AccountValue""))
			{
				p_AccountValue_From = (String)element.getParameter();
				p_AccountValue_To = (String)element.getParameter_To();
			}
			else if (name.equals(""C_BPartner_ID""))
				p_C_BPartner_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""M_Product_ID""))
				p_M_Product_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""C_Project_ID""))
				p_C_Project_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""C_Activity_ID""))
				p_C_Activity_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""C_SalesRegion_ID""))
				p_C_SalesRegion_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""C_Campaign_ID""))
				p_C_Campaign_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""PostingType""))
				p_PostingType = (String)element.getParameter();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		//	Mandatory C_AcctSchema_ID
		m_parameterWhere.append(""C_AcctSchema_ID="").append(p_C_AcctSchema_ID);
		//	Optional Account_ID
		if (p_Account_ID != 0)
			m_parameterWhere.append("" AND "").append(MReportTree.getWhereClause(getCtx(), 
				p_PA_Hierarchy_ID,X_C_AcctSchema_Element.ELEMENTTYPE_Account, p_Account_ID));
		if (p_AccountValue_From != null && p_AccountValue_From.length() == 0)
			p_AccountValue_From = null;
		if (p_AccountValue_To != null && p_AccountValue_To.length() == 0)
			p_AccountValue_To = null;
		if (p_AccountValue_From != null && p_AccountValue_To != null)
			m_parameterWhere.append("" AND (Account_ID IS NULL OR EXISTS (SELECT * FROM C_ElementValue ev "")
				.append(""WHERE Account_ID=ev.C_ElementValue_ID AND ev.Value >= "")
				.append(DB.TO_STRING(p_AccountValue_From)).append("" AND ev.Value <= "")
				.append(DB.TO_STRING(p_AccountValue_To)).append(""))"");
		else if (p_AccountValue_From != null && p_AccountValue_To == null)
			m_parameterWhere.append("" AND (Account_ID IS NULL OR EXISTS (SELECT * FROM C_ElementValue ev "")
			.append(""WHERE Account_ID=ev.C_ElementValue_ID AND ev.Value >= "")
			.append(DB.TO_STRING(p_AccountValue_From)).append(""))"");
		else if (p_AccountValue_From == null && p_AccountValue_To != null)
			m_parameterWhere.append("" AND (Account_ID IS NULL OR EXISTS (SELECT * FROM C_ElementValue ev "")
			.append(""WHERE Account_ID=ev.C_ElementValue_ID AND ev.Value <= "")
			.append(DB.TO_STRING(p_AccountValue_To)).append(""))"");
		//	Optional Org
		if (p_AD_Org_ID != 0)
			m_parameterWhere.append("" AND "").append(MReportTree.getWhereClause(getCtx(), 
				p_PA_Hierarchy_ID, X_C_AcctSchema_Element.ELEMENTTYPE_Organization, p_AD_Org_ID));
		//	Optional BPartner
		if (p_C_BPartner_ID != 0)
			m_parameterWhere.append("" AND "").append(MReportTree.getWhereClause(getCtx(), 
				p_PA_Hierarchy_ID, X_C_AcctSchema_Element.ELEMENTTYPE_BPartner, p_C_BPartner_ID));
		//	Optional Product
		if (p_M_Product_ID != 0)
			m_parameterWhere.append("" AND "").append(MReportTree.getWhereClause(getCtx(), 
				p_PA_Hierarchy_ID, X_C_AcctSchema_Element.ELEMENTTYPE_Product, p_M_Product_ID));
		//	Optional Project
		if (p_C_Project_ID != 0)
			m_parameterWhere.append("" AND "").append(MReportTree.getWhereClause(getCtx(), 
				p_PA_Hierarchy_ID, X_C_AcctSchema_Element.ELEMENTTYPE_Project, p_C_Project_ID));
		//	Optional Activity
		if (p_C_Activity_ID != 0)
			m_parameterWhere.append("" AND "").append(MReportTree.getWhereClause(getCtx(), 
				p_PA_Hierarchy_ID, X_C_AcctSchema_Element.ELEMENTTYPE_Activity, p_C_Activity_ID));
		//	Optional Campaign
		if (p_C_Campaign_ID != 0)
			m_parameterWhere.append("" AND C_Campaign_ID="").append(p_C_Campaign_ID);
		//	m_parameterWhere.append("" AND "").append(MReportTree.getWhereClause(getCtx(), 
		//		MAcctSchemaElement.ELEMENTTYPE_Campaign, p_C_Campaign_ID));
		//	Optional Sales Region
		if (p_C_SalesRegion_ID != 0)
			m_parameterWhere.append("" AND "").append(MReportTree.getWhereClause(getCtx(), 
				p_PA_Hierarchy_ID, X_C_AcctSchema_Element.ELEMENTTYPE_SalesRegion, p_C_SalesRegion_ID));
		//	Mandatory Posting Type
		m_parameterWhere.append("" AND PostingType='"").append(p_PostingType).append(""'"");
		//
		setDateAcct();
		sb.append("" - DateAcct "").append(p_DateAcct_From).append(""-"").append(p_DateAcct_To);
		sb.append("" - Where="").append(m_parameterWhere);
		log.fine(sb.toString());
	}	//	prepare
"
org.compiere.report.TrialBalance.setDateAcct,TrialBalance.java,"void setDateAcct()
	{
		//	Get Default Calendar
		m_acctSchema = MAcctSchema.get(getCtx(), p_C_AcctSchema_ID);
	   	m_C_Calendar_ID = MClientInfo.get(getCtx(), m_acctSchema.getAD_Client_ID()).getC_Calendar_ID();
		//	Date defined
		if (p_DateAcct_From != null)
		{
			if (p_DateAcct_To == null)
				p_DateAcct_To = new Timestamp (System.currentTimeMillis());
			return;
		}
		//	Get Date from Period
		if (p_C_Period_ID == 0)
		{
			GregorianCalendar cal = new GregorianCalendar(Language.getLoginLanguage().getLocale());
			cal.setTimeInMillis(System.currentTimeMillis());
			cal.set(Calendar.HOUR_OF_DAY, 0);
			cal.set(Calendar.MINUTE, 0);
			cal.set(Calendar.SECOND, 0);
			cal.set(Calendar.MILLISECOND, 0);
			cal.set(Calendar.DAY_OF_MONTH, 1);		//	set to first of month
			p_DateAcct_From = new Timestamp (cal.getTimeInMillis());
			cal.add(Calendar.MONTH, 1);
			cal.add(Calendar.DAY_OF_YEAR, -1);		//	last of month
			p_DateAcct_To = new Timestamp (cal.getTimeInMillis());
		}
		else
		{
			MPeriod period = MPeriod.get(getCtx(), p_C_Period_ID);
			p_DateAcct_From = period.getStartDate();
			p_DateAcct_To = period.getEndDate();
			m_C_Calendar_ID = period.getC_Calendar_ID();
		}
	}	//	setDateAcct
"
org.compiere.report.TrialBalance.doIt,TrialBalance.java,"String doIt()
	{
		createBalanceLine();
		createDetailLines();

	//	int AD_PrintFormat_ID = 134;
	//	getProcessInfo().setTransientObject (MPrintFormat.get (getCtx(), AD_PrintFormat_ID, false));

		log.fine((System.currentTimeMillis() - m_start) + "" ms"");
		return """";
	}	//	doIt
"
org.compiere.report.TrialBalance.createBalanceLine,TrialBalance.java,"void createBalanceLine()
	{
		StringBuffer sql = new StringBuffer (s_insert);
		//	(AD_PInstance_ID, Fact_Acct_ID,
		sql.append(""SELECT "").append(getAD_PInstance_ID()).append("",0,"");
		//	AD_Client_ID, AD_Org_ID, Created,CreatedBy, Updated,UpdatedBy,
		sql.append(getAD_Client_ID()).append("","");
		if (p_AD_Org_ID == 0)
			sql.append(""0"");
		else
			sql.append(p_AD_Org_ID);
		sql.append("", SysDate,"").append(getAD_User_ID())
			.append("",SysDate,"").append(getAD_User_ID()).append("","");
		//	C_AcctSchema_ID, Account_ID, AccountValue, DateTrx, DateAcct, C_Period_ID,
		sql.append(p_C_AcctSchema_ID).append("","");
		if (p_Account_ID == 0)
			sql.append (""null"");
		else
			sql.append (p_Account_ID);
		if (p_AccountValue_From != null)
			sql.append("","").append(DB.TO_STRING(p_AccountValue_From));
		else if (p_AccountValue_To != null)
			sql.append("",' '"");
		else
			sql.append("",null"");
		Timestamp balanceDay = p_DateAcct_From; // TimeUtil.addDays(p_DateAcct_From, -1);
		sql.append("",null,"").append(DB.TO_DATE(balanceDay, true)).append("","");
		if (p_C_Period_ID == 0)
			sql.append(""null"");
		else
			sql.append(p_C_Period_ID);
		sql.append("","");
		//	AD_Table_ID, Record_ID, Line_ID,
		sql.append(""null,null,null,"");
		//	GL_Category_ID, GL_Budget_ID, C_Tax_ID, M_Locator_ID, PostingType,
		sql.append(""null,null,null,null,'"").append(p_PostingType).append(""',"");
		//	C_Currency_ID, AmtSourceDr, AmtSourceCr, AmtSourceBalance,
		sql.append(""null,null,null,null,"");
		//	AmtAcctDr, AmtAcctCr, AmtAcctBalance, C_UOM_ID, Qty,
		sql.append("" COALESCE(SUM(AmtAcctDr),0),COALESCE(SUM(AmtAcctCr),0),""
				  + ""COALESCE(SUM(AmtAcctDr),0)-COALESCE(SUM(AmtAcctCr),0),""
			+ "" null,COALESCE(SUM(Qty),0),"");
		//	M_Product_ID, C_BPartner_ID, AD_OrgTrx_ID, C_LocFrom_ID,C_LocTo_ID,
		if (p_M_Product_ID == 0)
			sql.append (""null"");
		else
			sql.append (p_M_Product_ID);
		sql.append("","");
		if (p_C_BPartner_ID == 0)
			sql.append (""null"");
		else
			sql.append (p_C_BPartner_ID);
		sql.append("","");
		if (p_AD_OrgTrx_ID == 0)
			sql.append (""null"");
		else
			sql.append (p_AD_OrgTrx_ID);
		sql.append("","");
		if (p_C_LocFrom_ID == 0)
			sql.append (""null"");
		else
			sql.append (p_C_LocFrom_ID);
		sql.append("","");
		if (p_C_LocTo_ID == 0)
			sql.append (""null"");
		else
			sql.append (p_C_LocTo_ID);
		sql.append("","");
		//	C_SalesRegion_ID, C_Project_ID, C_Campaign_ID, C_Activity_ID,
		if (p_C_SalesRegion_ID == 0)
			sql.append (""null"");
		else
			sql.append (p_C_SalesRegion_ID);
		sql.append("","");
		if (p_C_Project_ID == 0)
			sql.append (""null"");
		else
			sql.append (p_C_Project_ID);
		sql.append("","");
		if (p_C_Campaign_ID == 0)
			sql.append (""null"");
		else
			sql.append (p_C_Campaign_ID);
		sql.append("","");
		if (p_C_Activity_ID == 0)
			sql.append (""null"");
		else
			sql.append (p_C_Activity_ID);
		sql.append("","");
		//	User1_ID, User2_ID, A_Asset_ID, Description)
		if (p_User1_ID == 0)
			sql.append (""null"");
		else
			sql.append (p_User1_ID);
		sql.append("","");
		if (p_User2_ID == 0)
			sql.append (""null"");
		else
			sql.append (p_User2_ID);
		sql.append("", null,null"");
		sql.append("","");
		sql.append( p_PA_Hierarchy_ID );
		//
		sql.append("" FROM Fact_Acct WHERE AD_Client_ID="").append(getAD_Client_ID())
			.append ("" AND "").append(m_parameterWhere)
			.append("" AND DateAcct < "").append(DB.TO_DATE(p_DateAcct_From, true));
		//	Start Beginning of Year
		if (p_Account_ID > 0)
		{
			m_acct = new MElementValue (getCtx(), p_Account_ID, get_TrxName());
			if (!m_acct.isBalanceSheet())
			{
				MPeriod first = MPeriod.getFirstInYear (getCtx(), m_C_Calendar_ID, p_DateAcct_From);
				if (first != null)
					sql.append("" AND DateAcct >= "").append(DB.TO_DATE(first.getStartDate(), true));
				else
					log.log(Level.SEVERE, ""first period not found"");
			}
		}
		//
		int no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no == 0)
			log.fine(sql.toString());
		log.fine(""#"" + no + "" (Account_ID="" + p_Account_ID + "")"");
	}	//	createBalanceLine
"
org.compiere.report.TrialBalance.createDetailLines,TrialBalance.java,"void createDetailLines()
	{
		StringBuffer sql = new StringBuffer (s_insert);
		//	(AD_PInstance_ID, Fact_Acct_ID,
		sql.append(""SELECT "").append(getAD_PInstance_ID()).append("",Fact_Acct_ID,"");
		//	AD_Client_ID, AD_Org_ID, Created,CreatedBy, Updated,UpdatedBy,
		sql.append(getAD_Client_ID()).append("",AD_Org_ID,Created,CreatedBy, Updated,UpdatedBy,"");
		//	C_AcctSchema_ID, Account_ID, DateTrx, AccountValue, DateAcct, C_Period_ID,
		sql.append(""C_AcctSchema_ID, Account_ID, null, DateTrx, DateAcct, C_Period_ID,"");
		//	AD_Table_ID, Record_ID, Line_ID,
		sql.append(""AD_Table_ID, Record_ID, Line_ID,"");
		//	GL_Category_ID, GL_Budget_ID, C_Tax_ID, M_Locator_ID, PostingType,
		sql.append(""GL_Category_ID, GL_Budget_ID, C_Tax_ID, M_Locator_ID, PostingType,"");
		//	C_Currency_ID, AmtSourceDr, AmtSourceCr, AmtSourceBalance,
		sql.append(""C_Currency_ID, AmtSourceDr,AmtSourceCr, AmtSourceDr-AmtSourceCr,"");
		//	AmtAcctDr, AmtAcctCr, AmtAcctBalance, C_UOM_ID, Qty,
		sql.append("" AmtAcctDr,AmtAcctCr, AmtAcctDr-AmtAcctCr, C_UOM_ID,Qty,"");
		//	M_Product_ID, C_BPartner_ID, AD_OrgTrx_ID, C_LocFrom_ID,C_LocTo_ID,
		sql.append (""M_Product_ID, C_BPartner_ID, AD_OrgTrx_ID, C_LocFrom_ID,C_LocTo_ID,"");
		//	C_SalesRegion_ID, C_Project_ID, C_Campaign_ID, C_Activity_ID,
		sql.append (""C_SalesRegion_ID, C_Project_ID, C_Campaign_ID, C_Activity_ID,"");
		//	User1_ID, User2_ID, A_Asset_ID, Description)
		sql.append (""User1_ID, User2_ID, A_Asset_ID, Description"");
		sql.append( "", "" + p_PA_Hierarchy_ID );
		//
		sql.append("" FROM Fact_Acct WHERE AD_Client_ID="").append(getAD_Client_ID())
			.append ("" AND "").append(m_parameterWhere)
			.append("" AND DateAcct >= "").append(DB.TO_DATE(p_DateAcct_From, true))
			.append("" AND TRUNC(DateAcct,'DD') <= "").append(DB.TO_DATE(p_DateAcct_To, true));
		//
		int no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no == 0)
			log.fine(sql.toString());
		log.fine(""#"" + no + "" (Account_ID="" + p_Account_ID + "")"");
		
		//	Update AccountValue
		String sql2 = ""UPDATE T_TrialBalance tb SET AccountValue = ""
			+ ""(SELECT Value FROM C_ElementValue ev WHERE ev.C_ElementValue_ID=tb.Account_ID) ""
			+ ""WHERE tb.Account_ID IS NOT NULL"";
		no = DB.executeUpdate(sql2, get_TrxName());
		if (no > 0)
			log.fine(""Set AccountValue #"" + no);
		
	}	//	createDetailLines
"
org.compiere.report.MReportTree.get,MReportTree.java,"MReportTree get (Ctx ctx, int PA_Hierarchy_ID, String ElementType)
	{
		String key = PA_Hierarchy_ID + ElementType;
		MReportTree tree = s_trees.get(ctx, key);
		if (tree == null)
		{
			tree = new MReportTree (ctx, PA_Hierarchy_ID, ElementType);
			s_trees.put(key, tree);
		}
		return tree;
	}	//	get
"
org.compiere.report.MReportTree.getWhereClause,MReportTree.java,"String getWhereClause (Ctx ctx,
		int PA_Hierarchy_ID, String ElementType, int ID)
	{
		MReportTree tree = get (ctx, PA_Hierarchy_ID, ElementType);
		return tree.getWhereClause(ID);
	}	//	getWhereClause
"
org.compiere.report.MReportTree.getChildIDs,MReportTree.java,"Integer[] getChildIDs (Ctx ctx,
		int PA_Hierarchy_ID, String ElementType, int ID)
	{
		MReportTree tree = get (ctx, PA_Hierarchy_ID, ElementType);
		return tree.getChildIDs(ID);
	}	//	getChildIDs
"
org.compiere.report.MReportTree.getAD_Tree_ID,MReportTree.java,"int getAD_Tree_ID ()
	{
		if (m_PA_Hierarchy_ID == 0)
			return getDefaultAD_Tree_ID();

		MHierarchy hierarchy = MHierarchy.get(m_ctx, m_PA_Hierarchy_ID);
		int AD_Tree_ID = hierarchy.getAD_Tree_ID (m_TreeType);

		if (AD_Tree_ID == 0)
			return getDefaultAD_Tree_ID();

		return AD_Tree_ID;
	}	//	getAD_Tree_ID
"
org.compiere.report.MReportTree.getDefaultAD_Tree_ID,MReportTree.java,"int getDefaultAD_Tree_ID()
	{
		int AD_Tree_ID = 0;
		int AD_Client_ID = m_ctx.getAD_Client_ID();

		String sql = ""SELECT AD_Tree_ID, Name FROM AD_Tree ""
			+ ""WHERE AD_Client_ID=? AND TreeType=? AND IsActive='Y' AND IsAllNodes='Y' ""
			+ ""ORDER BY ASCII(IsDefault) DESC, AD_Tree_ID"";	//	assumes first is primary tree
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, AD_Client_ID);
			pstmt.setString(2, m_TreeType);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				AD_Tree_ID = rs.getInt(1);
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}

		return AD_Tree_ID;
	}	//	getDefaultAD_Tree_ID
"
org.compiere.report.MReportTree.getElementType,MReportTree.java,"String getElementType()
	{
		return m_ElementType;
	}	//	getElementType
"
org.compiere.report.MReportTree.getTreeType,MReportTree.java,"String getTreeType()
	{
		return m_TreeType;
	}	//	getTreeType
"
org.compiere.report.MReportTree.getTree,MReportTree.java,"MTree getTree()
	{
		return m_tree;
	}	//	getTreeType
"
org.compiere.report.MReportTree.getWhereClause,MReportTree.java,"String getWhereClause (int ID)
	{
		log.fine(""("" + m_ElementType + "") ID="" + ID);
		String ColumnName = MAcctSchemaElement.getColumnName(m_ElementType);
		if (ID == 0)	//	All
			return ColumnName + "" IS NOT NULL"";
		//
		CTreeNode node = m_tree.getRoot().findNode(ID);
		log.finest(""Root="" + node);
		//
		StringBuffer result = null;
		if ((node != null) && node.isSummary())
		{
			StringBuffer sb = new StringBuffer();
			Enumeration<?> en = node.preorderEnumeration();
			while (en.hasMoreElements())
			{
				CTreeNode nn = (CTreeNode)en.nextElement();
				if (!nn.isSummary())
				{
					if (sb.length () > 0)
						sb.append ("","");
					sb.append(nn.getNode_ID());
					log.finest(""- "" + nn);
				}
				else
					log.finest(""- skipped parent ("" + nn + "")"");
			}
			if (sb.length () > 0)
			{
				result = new StringBuffer (ColumnName).append("" IN ("").append(sb).append("")"");
			}

		}
		else	//	not found or not summary
		{
			result = new StringBuffer (ColumnName).append(""="").append(ID);
		}

	if(result == null)
	{
		return """";
	}
	else
		return (result.toString());
	//log.finest(result.toString());


}//	getWhereClause
"
org.compiere.report.MReportTree.getChildIDs,MReportTree.java,"Integer[] getChildIDs (int ID)
	{
		log.fine(""("" + m_ElementType + "") ID="" + ID);
		ArrayList<Integer> list = new ArrayList<Integer>();
		//
		CTreeNode node = m_tree.getRoot().findNode(ID);
		log.finest(""Root="" + node);
		//
		if ((node != null) && node.isSummary())
		{
			Enumeration<?> en = node.preorderEnumeration();
			while (en.hasMoreElements())
			{
				CTreeNode nn = (CTreeNode)en.nextElement();
				if (!nn.isSummary())
				{
					list.add(Integer.valueOf(nn.getNode_ID()));
					log.finest(""- "" + nn);
				}
				else
					log.finest(""- skipped parent ("" + nn + "")"");
			}
		}
		else	//	not found or not summary
			list.add(Integer.valueOf(ID));
		//
		Integer[] retValue = new Integer[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getWhereClause
"
org.compiere.report.MReportTree.toString,MReportTree.java,"String toString()
	{
		StringBuffer sb = new StringBuffer(""MReportTree[ElementType="");
		sb.append(m_ElementType).append("",TreeType="").append(m_TreeType)
			.append("","").append(m_tree)
			.append(""]"");
		return sb.toString();
	}	//	toString
"
org.compiere.report.FinBalance.prepare,FinBalance.java,"void prepare()
	{
		//	Parameter
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_AcctSchema_ID""))
				p_C_AcctSchema_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""IsRecreate""))
				p_IsRecreate = ""Y"".equals(element.getParameter());
			else if (name.equals(""DateFrom""))
				p_DateFrom = (Timestamp)element.getParameter();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.report.FinBalance.doIt,FinBalance.java,"String doIt() throws java.lang.Exception
	{
		log.fine(""C_AcctSchema_ID="" + p_C_AcctSchema_ID
			+ "",IsRecreate="" + p_IsRecreate
			+ "",DateFrom="" + p_DateFrom);

		String msg = """";
		if (p_C_AcctSchema_ID != 0)
			msg = updateBalance(getCtx(), p_C_AcctSchema_ID,
				p_IsRecreate, p_DateFrom, get_TrxName(), this);
		else
			msg = updateBalanceClient(getCtx(),
				p_IsRecreate, p_DateFrom, get_TrxName(), this);
		return msg;
	}	//	doIt
"
org.compiere.report.FinBalance.deleteBalance,FinBalance.java,"String deleteBalance (int AD_Client_ID, int C_AcctSchema_ID,
		Timestamp dateFrom, Trx trx, SvrProcess svrPrc)
	{
		ArrayList<Object> params = new ArrayList<Object>();
		StringBuffer sql = new StringBuffer (""DELETE FROM Fact_Acct_Balance WHERE AD_Client_ID=?"");
		params.add(new Integer(AD_Client_ID));
		if (C_AcctSchema_ID != 0)
		{
			sql.append ("" AND C_AcctSchema_ID=?"");
			params.add(new Integer(C_AcctSchema_ID));
		}
		if (dateFrom != null)
		{
			sql.append("" AND DateAcct>=?"");
			params.add(dateFrom);
		}
		//
		int no = DB.executeUpdate(sql.toString(), params, false, trx);
		String msg = ""@Deleted@="" + no;
		s_log.info(""C_AcctSchema_ID="" + C_AcctSchema_ID
			+ "",DateAcct="" + dateFrom
			+ "" #="" + no);
		if (svrPrc != null)
			svrPrc.addLog(0, dateFrom, new BigDecimal(no), ""Deleted"");
		//
		return msg;
	}	//	deleteBalance
"
org.compiere.report.FinBalance.updateBalance,FinBalance.java,"String updateBalance (Ctx ctx, int C_AcctSchema_ID,
		boolean deleteFirst, Timestamp dateFrom, Trx trx,
		SvrProcess svrPrc)
	{
		s_log.info(""C_AcctSchema_ID="" + C_AcctSchema_ID
			+ "",DeleteFirst="" + deleteFirst
			+ ""DateFrom="" + dateFrom);
		long start = System.currentTimeMillis();

		ArrayList<MFactAccumulation> accums = MFactAccumulation.getAll(ctx, C_AcctSchema_ID);
		dateFrom = MFactAccumulation.getDateFrom(accums, dateFrom);
		//	Potentially updating accumulated History - need to delete it.
		if (!deleteFirst && (accums.size() > 0))
			deleteFirst = true;

		if (deleteFirst)
			deleteBalance(ctx.getAD_Client_ID(), C_AcctSchema_ID,
				dateFrom, trx, svrPrc);

		//	Update existing
		ArrayList<Object> params = new ArrayList<Object>();
		String sql = ""UPDATE Fact_Acct_Balance ab ""
			+ ""SET (AmtAcctDr, AmtAcctCr, Qty)= ""
			+ ""(SELECT COALESCE(SUM(AmtAcctDr),0), COALESCE(SUM(AmtAcctCr),0), COALESCE(SUM(Qty),0) ""
			+ ""FROM Fact_Acct a ""
			+ ""WHERE a.AD_Client_ID=ab.AD_Client_ID AND a.AD_Org_ID=ab.AD_Org_ID""
			+ "" AND a.C_AcctSchema_ID=ab.C_AcctSchema_ID AND TRUNC(a.DateAcct)=TRUNC(ab.DateAcct)""
			+ "" AND a.Account_ID=ab.Account_ID AND a.PostingType=ab.PostingType""
			+ "" AND COALESCE(a.M_Product_ID,0)=COALESCE(ab.M_Product_ID,0) AND COALESCE(a.C_BPartner_ID,0)=COALESCE(ab.C_BPartner_ID,0)""
			+ "" AND COALESCE(a.C_Project_ID,0)=COALESCE(ab.C_Project_ID,0) AND COALESCE(a.AD_OrgTrx_ID,0)=COALESCE(ab.AD_OrgTrx_ID,0)""
			+ "" AND COALESCE(a.C_SalesRegion_ID,0)=COALESCE(ab.C_SalesRegion_ID,0) AND COALESCE(a.C_Activity_ID,0)=COALESCE(ab.C_Activity_ID,0)""
			+ "" AND COALESCE(a.C_Campaign_ID,0)=COALESCE(ab.C_Campaign_ID,0) AND COALESCE(a.C_LocTo_ID,0)=COALESCE(ab.C_LocTo_ID,0) AND COALESCE(a.C_LocFrom_ID,0)=COALESCE(ab.C_LocFrom_ID,0)""
			+ "" AND COALESCE(a.User1_ID,0)=COALESCE(ab.User1_ID,0) AND COALESCE(a.User2_ID,0)=COALESCE(ab.User2_ID,0) AND COALESCE(a.GL_Budget_ID,0)=COALESCE(ab.GL_Budget_ID,0) ""
			+ ""GROUP BY AD_Client_ID,AD_Org_ID, C_AcctSchema_ID, TRUNC(DateAcct),""
			+ "" Account_ID, PostingType, M_Product_ID, C_BPartner_ID,""
			+ "" C_Project_ID, AD_OrgTrx_ID, C_SalesRegion_ID, C_Activity_ID,""
			+ "" C_Campaign_ID, C_LocTo_ID, C_LocFrom_ID, User1_ID, User2_ID, GL_Budget_ID) ""
			+ ""WHERE C_AcctSchema_ID=?"";
		params.add(new Integer(C_AcctSchema_ID));
		if (dateFrom != null)
		{
			sql += "" AND DateAcct>=?"";
			params.add(dateFrom);
		}
		sql += "" AND EXISTS (SELECT 1 FROM Fact_Acct a ""
				+ ""WHERE a.AD_Client_ID=ab.AD_Client_ID AND a.AD_Org_ID=ab.AD_Org_ID""
				+ "" AND a.C_AcctSchema_ID=ab.C_AcctSchema_ID AND TRUNC(a.DateAcct)=TRUNC(ab.DateAcct)""
				+ "" AND a.Account_ID=ab.Account_ID AND a.PostingType=ab.PostingType""
				+ "" AND COALESCE(a.M_Product_ID,0)=COALESCE(ab.M_Product_ID,0) AND COALESCE(a.C_BPartner_ID,0)=COALESCE(ab.C_BPartner_ID,0)""
				+ "" AND COALESCE(a.C_Project_ID,0)=COALESCE(ab.C_Project_ID,0) AND COALESCE(a.AD_OrgTrx_ID,0)=COALESCE(ab.AD_OrgTrx_ID,0)""
				+ ""	AND COALESCE(a.C_SalesRegion_ID,0)=COALESCE(ab.C_SalesRegion_ID,0) AND COALESCE(a.C_Activity_ID,0)=COALESCE(ab.C_Activity_ID,0)""
				+ "" AND COALESCE(a.C_Campaign_ID,0)=COALESCE(ab.C_Campaign_ID,0) AND COALESCE(a.C_LocTo_ID,0)=COALESCE(ab.C_LocTo_ID,0) AND COALESCE(a.C_LocFrom_ID,0)=COALESCE(ab.C_LocFrom_ID,0)""
				+ "" AND COALESCE(a.User1_ID,0)=COALESCE(ab.User1_ID,0) AND COALESCE(a.User2_ID,0)=COALESCE(ab.User2_ID,0) AND COALESCE(a.GL_Budget_ID,0)=COALESCE(ab.GL_Budget_ID,0) ""
				/* maybe redundant
				+ ""GROUP BY AD_Client_ID,AD_Org_ID,""
				+ "" C_AcctSchema_ID, TRUNC(DateAcct,'DD'),""
				+ "" Account_ID, PostingType,""
				+ "" M_Product_ID, C_BPartner_ID,""
				+ "" C_Project_ID, AD_OrgTrx_ID,""
				+ "" C_SalesRegion_ID, C_Activity_ID,""
				+ "" C_Campaign_ID, C_LocTo_ID, C_LocFrom_ID,""
				+ "" User1_ID, User2_ID, GL_Budget_ID
				*/
				+ "")"";
		if (!deleteFirst)
		{
			int no = DB.executeUpdate(sql, params, false, trx);
			s_log.config(""Updates="" + no);
			if (svrPrc != null)
				svrPrc.addLog(0, dateFrom, new BigDecimal(no), ""Updates"");
		}

		/** Insert		**/
		params = new ArrayList<Object>();
		sql = ""INSERT INTO Fact_Acct_Balance ""
			+ ""(AD_Client_ID, AD_Org_ID, C_AcctSchema_ID, DateAcct,""
			+ "" Account_ID, PostingType, M_Product_ID, C_BPartner_ID,""
			+ ""	C_Project_ID, AD_OrgTrx_ID,	C_SalesRegion_ID,C_Activity_ID,""
			+ "" C_Campaign_ID, C_LocTo_ID, C_LocFrom_ID, User1_ID, User2_ID, GL_Budget_ID,""
			+ "" AmtAcctDr, AmtAcctCr, Qty) ""
		//
			+ ""SELECT AD_Client_ID, AD_Org_ID, C_AcctSchema_ID, TRUNC(DateAcct),""
			+ "" Account_ID, PostingType, M_Product_ID, C_BPartner_ID,""
			+ "" C_Project_ID, AD_OrgTrx_ID, C_SalesRegion_ID,C_Activity_ID,""
			+ "" C_Campaign_ID, C_LocTo_ID, C_LocFrom_ID, User1_ID, User2_ID, GL_Budget_ID,""
			+ "" COALESCE(SUM(AmtAcctDr),0), COALESCE(SUM(AmtAcctCr),0), COALESCE(SUM(Qty),0) ""
			+ ""FROM Fact_Acct a ""
			+ ""WHERE C_AcctSchema_ID=?"";
		params.add(new Integer(C_AcctSchema_ID));
		if (dateFrom != null)
		{
			sql += "" AND DateAcct>=?"";
			params.add(dateFrom);
		}
		if (!deleteFirst)
			sql += "" AND NOT EXISTS (SELECT 1 FROM Fact_Acct_Balance x ""
				+ ""WHERE a.AD_Client_ID=x.AD_Client_ID AND a.AD_Org_ID=x.AD_Org_ID""
				+ "" AND a.C_AcctSchema_ID=x.C_AcctSchema_ID AND TRUNC(a.DateAcct)=TRUNC(x.DateAcct)""
				+ "" AND a.Account_ID=x.Account_ID AND a.PostingType=x.PostingType""
				+ "" AND COALESCE(a.M_Product_ID,0)=COALESCE(x.M_Product_ID,0) AND COALESCE(a.C_BPartner_ID,0)=COALESCE(x.C_BPartner_ID,0)""
				+ "" AND COALESCE(a.C_Project_ID,0)=COALESCE(x.C_Project_ID,0) AND COALESCE(a.AD_OrgTrx_ID,0)=COALESCE(x.AD_OrgTrx_ID,0)""
				+ "" AND COALESCE(a.C_SalesRegion_ID,0)=COALESCE(x.C_SalesRegion_ID,0) AND COALESCE(a.C_Activity_ID,0)=COALESCE(x.C_Activity_ID,0)""
				+ "" AND COALESCE(a.C_Campaign_ID,0)=COALESCE(x.C_Campaign_ID,0) AND COALESCE(a.C_LocTo_ID,0)=COALESCE(x.C_LocTo_ID,0) AND COALESCE(a.C_LocFrom_ID,0)=COALESCE(x.C_LocFrom_ID,0)""
				+ "" AND COALESCE(a.User1_ID,0)=COALESCE(x.User1_ID,0) AND COALESCE(a.User2_ID,0)=COALESCE(x.User2_ID,0) AND COALESCE(a.GL_Budget_ID,0)=COALESCE(x.GL_Budget_ID,0) )"";
		sql += "" GROUP BY AD_Client_ID,AD_Org_ID, C_AcctSchema_ID, TRUNC(DateAcct),""
			+ "" Account_ID, PostingType, M_Product_ID, C_BPartner_ID,""
			+ "" C_Project_ID, AD_OrgTrx_ID, C_SalesRegion_ID, C_Activity_ID,""
			+ "" C_Campaign_ID, C_LocTo_ID, C_LocFrom_ID, User1_ID, User2_ID, GL_Budget_ID"";

		int no = DB.executeUpdate(sql, params, false, trx);
		s_log.config(""Inserts="" + no);
		if (svrPrc != null)
			svrPrc.addLog(0, dateFrom, new BigDecimal(no), ""Inserts"");

		//	Accumulation
		Timestamp acctToDate = null;
		Timestamp acctFromDate = dateFrom; //	greater than (dateTo is LE)
		for (MFactAccumulation accum : accums)
        {
			String type = accum.getBalanceAccumulation();
			boolean ok = true;
			if (X_Fact_Accumulation.BALANCEACCUMULATION_Daily.equals(type))
				;
			else if (X_Fact_Accumulation.BALANCEACCUMULATION_CalendarWeek.equals(type))
			{
				acctToDate = accum.getDateTo();
				ok = summarizeBalance(TimeUtil.TRUNC_WEEK, C_AcctSchema_ID,
					acctFromDate, acctToDate, trx, svrPrc);
				acctFromDate = accum.getDateTo();
			}
			else if (X_Fact_Accumulation.BALANCEACCUMULATION_CalendarMonth.equals(type))
			{
				acctToDate = accum.getDateTo();
				ok = summarizeBalance(TimeUtil.TRUNC_MONTH, C_AcctSchema_ID,
					acctFromDate, acctToDate, trx,svrPrc);
				acctFromDate = accum.getDateTo();
			}
			else if (X_Fact_Accumulation.BALANCEACCUMULATION_PeriodOfACompiereCalendar.equals(type))
			{
				int C_Calendar_ID = accum.getC_Calendar_ID();
				if (C_Calendar_ID != 0)
				{
					acctToDate = accum.getDateTo();


					acctFromDate = accum.getDateTo();
				}
			}
			if (!ok)
			{
				s_log.warning(""Check Errors and re-run"");
			}
        }

		start = System.currentTimeMillis() - start;
		s_log.info((start/1000) + "" sec"");
		return ""#"" + no;
	}	//	updateBalance
"
org.compiere.report.FinBalance.summarizeBalance,FinBalance.java,"boolean summarizeBalance(String trunc, int C_AcctSchema_ID,
		Timestamp acctFromDate, Timestamp acctToDate, Trx trx,
		SvrProcess svrPrc)
	{
		SimpleDateFormat format = DisplayType.getDateFormat();
		String toDate = ""\u2264"" + format.format(acctToDate) + "": "";
		String whereTrunc = ""TRUNC(DateAcct,'"" + trunc + ""')"";
		StringBuffer whereRange = new StringBuffer(""WHERE "");
		if (acctFromDate != null)
			whereRange.append(""DateAcct>="").append(DB.TO_DATE(acctFromDate, true))
				.append("" AND "");
		whereRange.append(""DateAcct<="").append(DB.TO_DATE(acctToDate, true));

		//	Insert zeroes if not exists
		String sql = ""INSERT INTO Fact_Acct_Balance""
			+ "" (AD_Client_ID, AD_Org_ID, C_AcctSchema_ID, DateAcct,""
			+ "" Account_ID, PostingType, M_Product_ID, C_BPartner_ID,""
			+ "" C_Project_ID, AD_OrgTrx_ID,	C_SalesRegion_ID,C_Activity_ID,""
			+ "" C_Campaign_ID, C_LocTo_ID, C_LocFrom_ID, User1_ID, User2_ID, GL_Budget_ID,""
			+ "" AmtAcctDr, AmtAcctCr, Qty) ""
		//	Insert
			+ ""SELECT AD_Client_ID, AD_Org_ID, C_AcctSchema_ID, "" + whereTrunc
			+ "", Account_ID, PostingType, M_Product_ID, C_BPartner_ID,""
			+ "" C_Project_ID, AD_OrgTrx_ID, C_SalesRegion_ID,C_Activity_ID,""
			+ "" C_Campaign_ID, C_LocTo_ID, C_LocFrom_ID, User1_ID, User2_ID, GL_Budget_ID,""
			+ "" 0,0,0 ""
			+ ""FROM Fact_Acct_Balance a ""
			+ whereRange
			+ "" AND C_AcctSchema_ID="" + C_AcctSchema_ID
			//
			+ "" AND NOT EXISTS (SELECT 1 FROM Fact_Acct_Balance x ""
				+ ""WHERE a.AD_Client_ID=x.AD_Client_ID AND a.AD_Org_ID=x.AD_Org_ID""
				+ "" AND a.C_AcctSchema_ID=x.C_AcctSchema_ID AND TRUNC(a.DateAcct,'"" + trunc + ""')=TRUNC(x.DateAcct)""
				+ "" AND a.Account_ID=x.Account_ID AND a.PostingType=x.PostingType""
				+ "" AND COALESCE(a.M_Product_ID,0)=COALESCE(x.M_Product_ID,0) AND COALESCE(a.C_BPartner_ID,0)=COALESCE(x.C_BPartner_ID,0)""
				+ "" AND COALESCE(a.C_Project_ID,0)=COALESCE(x.C_Project_ID,0) AND COALESCE(a.AD_OrgTrx_ID,0)=COALESCE(x.AD_OrgTrx_ID,0)""
				+ "" AND COALESCE(a.C_SalesRegion_ID,0)=COALESCE(x.C_SalesRegion_ID,0) AND COALESCE(a.C_Activity_ID,0)=COALESCE(x.C_Activity_ID,0)""
				+ "" AND COALESCE(a.C_Campaign_ID,0)=COALESCE(x.C_Campaign_ID,0) AND COALESCE(a.C_LocTo_ID,0)=COALESCE(x.C_LocTo_ID,0) AND COALESCE(a.C_LocFrom_ID,0)=COALESCE(x.C_LocFrom_ID,0)""
				+ "" AND COALESCE(a.User1_ID,0)=COALESCE(x.User1_ID,0) AND COALESCE(a.User2_ID,0)=COALESCE(x.User2_ID,0) AND COALESCE(a.GL_Budget_ID,0)=COALESCE(x.GL_Budget_ID,0) )""
			//
			+ "" GROUP BY AD_Client_ID, AD_Org_ID, C_AcctSchema_ID, "" + whereTrunc
			+ "", Account_ID, PostingType, M_Product_ID, C_BPartner_ID,""
			+ "" C_Project_ID, AD_OrgTrx_ID, C_SalesRegion_ID,C_Activity_ID,""
			+ "" C_Campaign_ID, C_LocTo_ID, C_LocFrom_ID, User1_ID, User2_ID, GL_Budget_ID"";
		int noInsert = DB.executeUpdate(sql, trx);
		s_log.config(""Insert "" + trunc + "" #"" + noInsert);
		if (svrPrc != null)
			svrPrc.addLog(0, acctFromDate, new BigDecimal(noInsert), toDate + ""Accumulation Insert"");

		//	Update
		sql = ""UPDATE Fact_Acct_Balance a SET (AmtAcctDr, AmtAcctCr, Qty) = ""
				+ ""(SELECT COALESCE(SUM(AmtAcctDr),0), COALESCE(SUM(AmtAcctCr),0), COALESCE(SUM(Qty),0) ""
				+ ""FROM Fact_Acct_Balance x ""
				+ whereRange
				+ "" AND TRUNC(a.DateAcct,'"" + trunc + ""')=TRUNC(x.DateAcct,'"" + trunc + ""')""
				+ "" AND a.AD_Client_ID=x.AD_Client_ID AND a.AD_Org_ID=x.AD_Org_ID""
				+ "" AND a.C_AcctSchema_ID=x.C_AcctSchema_ID""
				+ "" AND a.Account_ID=x.Account_ID AND a.PostingType=x.PostingType""
				+ "" AND COALESCE(a.M_Product_ID,0)=COALESCE(x.M_Product_ID,0) AND COALESCE(a.C_BPartner_ID,0)=COALESCE(x.C_BPartner_ID,0)""
				+ "" AND COALESCE(a.C_Project_ID,0)=COALESCE(x.C_Project_ID,0) AND COALESCE(a.AD_OrgTrx_ID,0)=COALESCE(x.AD_OrgTrx_ID,0)""
				+ "" AND COALESCE(a.C_SalesRegion_ID,0)=COALESCE(x.C_SalesRegion_ID,0) AND COALESCE(a.C_Activity_ID,0)=COALESCE(x.C_Activity_ID,0)""
				+ "" AND COALESCE(a.C_Campaign_ID,0)=COALESCE(x.C_Campaign_ID,0) AND COALESCE(a.C_LocTo_ID,0)=COALESCE(x.C_LocTo_ID,0) AND COALESCE(a.C_LocFrom_ID,0)=COALESCE(x.C_LocFrom_ID,0)""
				+ "" AND COALESCE(a.User1_ID,0)=COALESCE(x.User1_ID,0) AND COALESCE(a.User2_ID,0)=COALESCE(x.User2_ID,0) AND COALESCE(a.GL_Budget_ID,0)=COALESCE(x.GL_Budget_ID,0) ""
				+ ""GROUP BY AD_Client_ID, AD_Org_ID, C_AcctSchema_ID, "" + whereTrunc
				+ "", Account_ID, PostingType, M_Product_ID, C_BPartner_ID,""
				+ "" C_Project_ID, AD_OrgTrx_ID, C_SalesRegion_ID,C_Activity_ID,""
				+ "" C_Campaign_ID, C_LocTo_ID, C_LocFrom_ID, User1_ID, User2_ID, GL_Budget_ID""
				+ "") ""
			//	Update WHERE
			+ whereRange
			+ "" AND C_AcctSchema_ID="" + C_AcctSchema_ID
			+ "" AND DateAcct="" + whereTrunc;
		s_log.finest(sql);
		int noUpdate = DB.executeUpdate(sql, trx);
		s_log.config(""Update "" + trunc + "" #"" + noUpdate);
		if (svrPrc != null)
			svrPrc.addLog(0, acctFromDate, new BigDecimal(noUpdate), toDate + ""Accumulation Update"");

		if (noUpdate == 0)	//	nothing to delete if nothing summarized
			return true;

		//	Delete
		sql = ""DELETE FROM Fact_Acct_Balance ""
			+ whereRange
			+ "" AND C_AcctSchema_ID="" + C_AcctSchema_ID
			+ "" AND DateAcct<>"" + whereTrunc;
		s_log.finest(sql);
		int noDelete = DB.executeUpdate(sql, trx);
		float factor = 1;
		if (noInsert != 0)
			factor = noDelete / noInsert;
		else if (noUpdate != 0)
			factor = noDelete / noUpdate;
		s_log.config(""Delete "" + trunc + "" #"" + noDelete + "" - Factor="" + factor);
		if (svrPrc != null)
			svrPrc.addLog(0, acctFromDate, new BigDecimal(noDelete), toDate + ""Accumulation Delete - Factor="" + factor);

		return (noUpdate >= 0) && (noDelete >= 0);
	}	//	summarizeBalance
"
org.compiere.report.FinBalance.updateBalanceClient,FinBalance.java,"String updateBalanceClient (Ctx ctx,
		boolean deleteFirst, Timestamp dateFrom, Trx trx, SvrProcess svrPrc)
	{
		int AD_Client_ID = ctx.getAD_Client_ID();
		StringBuffer info = new StringBuffer();
		MAcctSchema[] ass = MAcctSchema.getClientAcctSchema(ctx, AD_Client_ID);
		for (MAcctSchema as : ass)
		{
			if (info.length() > 0)
				info.append("" - "");
			String msg = updateBalance(ctx, as.getC_AcctSchema_ID(),
				deleteFirst, dateFrom, trx, svrPrc);
			info.append(as.getName()).append("":"").append(msg);
		}
		return info.toString();
	}	//	updateBalanceClient
"
org.compiere.report.FinReport.prepare,FinReport.java,"void prepare()
	{
		StringBuffer sb = new StringBuffer (""Record_ID="")
			.append(getRecord_ID());
		//	Parameter
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_Period_ID""))
				p_C_Period_ID = element.getParameterAsInt();
			else if (name.equals(""PA_Hierarchy_ID""))
				p_PA_Hierarchy_ID = element.getParameterAsInt();
			else if (name.equals(""Org_ID""))
				p_Org_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""C_BPartner_ID""))
				p_C_BPartner_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""M_Product_ID""))
				p_M_Product_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""C_Project_ID""))
				p_C_Project_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""C_Activity_ID""))
				p_C_Activity_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""C_SalesRegion_ID""))
				p_C_SalesRegion_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""C_Campaign_ID""))
				p_C_Campaign_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""UpdateBalances""))
				p_UpdateBalances = ""Y"".equals(element.getParameter());
			else if (name.equals(""DetailsSourceFirst""))
				p_DetailsSourceFirst = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		//	Optional Org
		if (p_Org_ID != 0)
			m_parameterWhere.append("" AND "").append(MReportTree.getWhereClause(getCtx(), 
				p_PA_Hierarchy_ID, X_C_AcctSchema_Element.ELEMENTTYPE_Organization, p_Org_ID));
		//	Optional BPartner
		if (p_C_BPartner_ID != 0)
			m_parameterWhere.append("" AND "").append(MReportTree.getWhereClause(getCtx(), 
				p_PA_Hierarchy_ID, X_C_AcctSchema_Element.ELEMENTTYPE_BPartner, p_C_BPartner_ID));
		//	Optional Product
		if (p_M_Product_ID != 0)
			m_parameterWhere.append("" AND "").append(MReportTree.getWhereClause(getCtx(), 
				p_PA_Hierarchy_ID, X_C_AcctSchema_Element.ELEMENTTYPE_Product, p_M_Product_ID));
		//	Optional Project
		if (p_C_Project_ID != 0)
			m_parameterWhere.append("" AND "").append(MReportTree.getWhereClause(getCtx(), 
				p_PA_Hierarchy_ID, X_C_AcctSchema_Element.ELEMENTTYPE_Project, p_C_Project_ID));
		//	Optional Activity
		if (p_C_Activity_ID != 0)
			m_parameterWhere.append("" AND "").append(MReportTree.getWhereClause(getCtx(), 
				p_PA_Hierarchy_ID, X_C_AcctSchema_Element.ELEMENTTYPE_Activity, p_C_Activity_ID));
		//	Optional Campaign
		if (p_C_Campaign_ID != 0)
			m_parameterWhere.append("" AND C_Campaign_ID="").append(p_C_Campaign_ID);
		//	m_parameterWhere.append("" AND "").append(MReportTree.getWhereClause(getCtx(), 
		//		MAcctSchemaElement.ELEMENTTYPE_Campaign, p_C_Campaign_ID));
		//	Optional Sales Region
		if (p_C_SalesRegion_ID != 0)
			m_parameterWhere.append("" AND "").append(MReportTree.getWhereClause(getCtx(), 
				p_PA_Hierarchy_ID, X_C_AcctSchema_Element.ELEMENTTYPE_SalesRegion, p_C_SalesRegion_ID));

		//	Load Report Definition
		m_report = new MReport (getCtx(), getRecord_ID(), null);
		sb.append("" - "").append(m_report);
		//
		setPeriods();
		sb.append("" - C_Period_ID="").append(p_C_Period_ID)
			.append("" - "").append(m_parameterWhere);
		//
		log.info(sb.toString());
	//	m_report.list();
	}	//	prepare
"
org.compiere.report.FinReport.setPeriods,FinReport.java,"void setPeriods()
	{
		log.info(""C_Calendar_ID="" + m_report.getC_Calendar_ID());
		Timestamp today = TimeUtil.getDay(System.currentTimeMillis());
		ArrayList<FinReportPeriod> list = new ArrayList<FinReportPeriod>();

		String sql = ""SELECT p.C_Period_ID, p.Name, p.StartDate, p.EndDate, MIN(p1.StartDate) ""
			+ ""FROM C_Period p ""
			+ "" INNER JOIN C_Year y ON (p.C_Year_ID=y.C_Year_ID),""
			+ "" C_Period p1 ""
			+ ""WHERE y.C_Calendar_ID=?""
			+ "" AND p.PeriodType='S' ""
			+ "" AND p1.C_Year_ID=y.C_Year_ID AND p1.PeriodType='S' ""
			+ ""GROUP BY p.C_Period_ID, p.Name, p.StartDate, p.EndDate ""
			+ ""ORDER BY p.StartDate"";

		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, m_report.getC_Calendar_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				FinReportPeriod frp = new FinReportPeriod (rs.getInt(1), rs.getString(2),
					rs.getTimestamp(3), rs.getTimestamp(4), rs.getTimestamp(5));
				list.add(frp);
				if (p_C_Period_ID == 0 && frp.inPeriod(today))
					p_C_Period_ID = frp.getC_Period_ID();
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		//	convert to Array
		m_periods = new FinReportPeriod[list.size()];
		list.toArray(m_periods);
		//	today after latest period
		if (p_C_Period_ID == 0)
		{
			m_reportPeriod = m_periods.length - 1;
			p_C_Period_ID = m_periods[m_reportPeriod].getC_Period_ID ();
		}
	}	//	setPeriods
"
org.compiere.report.FinReport.doIt,FinReport.java,"String doIt() throws Exception
	{
		log.info(""AD_PInstance_ID="" + getAD_PInstance_ID());
		//	** Create Temporary and empty Report Lines from PA_ReportLine
		//	- AD_PInstance_ID, PA_ReportLine_ID, 0, 0
		int PA_ReportLineSet_ID = m_report.getLineSet().getPA_ReportLineSet_ID();
		int level = 1;
		if (p_DetailsSourceFirst)					//	LevelNo
			level = -1;
		StringBuffer sql = new StringBuffer (""INSERT INTO T_Report "")
			.append(""(AD_PInstance_ID, PA_ReportLine_ID, Record_ID,Fact_Acct_ID, SeqNo,LevelNo, Name,Description) "")
			.append(""SELECT "").append(getAD_PInstance_ID()).append("", PA_ReportLine_ID, 0,0, SeqNo,"")
			.append(level).append("", Name,Description "")
			.append(""FROM PA_ReportLine "")
			.append(""WHERE IsActive='Y' AND PA_ReportLineSet_ID="").append(PA_ReportLineSet_ID);

		int no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Report Lines = "" + no);	//	Level 1

		//	Update AcctSchema Balances
		if (p_UpdateBalances)
			FinBalance.updateBalance (getCtx(), 
				m_report.getC_AcctSchema_ID(), false, null, get_TrxName(), this);

		//	** Get Data	** Segment Values
		m_columns = m_report.getColumnSet().getColumns();
		if (m_columns.length == 0)
			throw new CompiereUserException(""@No@ @PA_ReportColumn_ID@"");
		m_lines = m_report.getLineSet().getLiness();
		if (m_lines.length == 0)
			throw new CompiereUserException(""@No@ @PA_ReportLine_ID@"");
		
		//	for all lines
		for (int line = 0; line < m_lines.length; line++)
		{
			//	Line Segment Value (i.e. not calculation)
			if (m_lines[line].isLineTypeSegmentValue())
				updateLine (line);
		}	//	for all lines

		insertLineDetail();		//	also clean up
		doCalculations();

		deleteUnprintedLines();

		//	Create Report
		if (Ini.isClient())
			getProcessInfo().setTransientObject (getPrintFormat());
		else
			getProcessInfo().setSerializableObject(getPrintFormat());

		log.fine((System.currentTimeMillis() - m_start) + "" ms"");
		return """";
	}	//	doIt
"
org.compiere.report.FinReport.updateLine,FinReport.java,"void updateLine (int line)
	{
		log.info("""" + m_lines[line]);

		//	No source lines - Headings
		if (m_lines[line] == null || m_lines[line].getSources().length == 0)
		{
			log.warning (""No Source lines: "" + m_lines[line]);
			return;
		}

		StringBuffer update = new StringBuffer();
		//	for all columns
		for (int col = 0; col < m_columns.length; col++)
		{
			//	Ignore calculation columns
			if (m_columns[col].isColumnTypeCalculation())
				continue;
			StringBuffer info = new StringBuffer();
			info.append(""Line="").append(line).append("",Col="").append(col);

			//	SELECT SUM()
			StringBuffer select = new StringBuffer (""SELECT "");
			if (m_lines[line].getAmountType() != null)				//	line amount type overwrites column
			{
				String sql = m_lines[line].getSelectClause (true);
				select.append (sql);
				info.append("": LineAmtType="").append(m_lines[line].getAmountType());
			}
			else if (m_columns[col].getAmountType() != null)
			{
				String sql = m_columns[col].getSelectClause (true);
				select.append (sql);
				info.append("": ColumnAmtType="").append(m_columns[col].getAmountType());
			}
			else
			{
				log.warning(""No Amount Type in line: "" + m_lines[line] + "" or column: "" + m_columns[col]);
				continue;
			}

			//	Get Period/Date info
			select.append("" FROM Fact_Acct_Balance WHERE DateAcct "");
			BigDecimal relativeOffset = null;	//	current
			if (m_columns[col].isColumnTypeRelativePeriod())
				relativeOffset = m_columns[col].getRelativePeriod();
			FinReportPeriod frp = getPeriod (relativeOffset);
			if (m_lines[line].getAmountType() != null)			//	line amount type overwrites column
			{
				info.append("" - LineDateAcct="");
				if (m_lines[line].isPeriod())
				{
					String sql = frp.getPeriodWhere();
					info.append(""Period"");
					select.append(sql);
				}
				else if (m_lines[line].isYear())
				{
					String sql = frp.getYearWhere();
					info.append(""Year"");
					select.append(sql);
				}
				else if (m_lines[line].isTotal())
				{
					String sql = frp.getTotalWhere();
					info.append(""Total"");
					select.append(sql);
				}
				else
				{
					log.log(Level.SEVERE, ""No valid Line AmountType"");
					select.append(""=0"");	// valid sql	
				}
			}
			else if (m_columns[col].getAmountType() != null)
			{
				info.append("" - ColumnDateAcct="");
				if (m_columns[col].isPeriod())
				{
					String sql = frp.getPeriodWhere();
					info.append(""Period"");
					select.append(sql);
				}
				else if (m_columns[col].isYear())
				{
					String sql = frp.getYearWhere();
					info.append(""Year"");
					select.append(sql);
				}
				else if (m_columns[col].isTotal())
				{
					String sql = frp.getTotalWhere();
					info.append(""Total"");
					select.append(sql);
				}
				else
				{
					log.log(Level.SEVERE, ""No valid Column AmountType"");
					select.append(""=0"");	// valid sql	
				}
			}
				
			//	Line Where
			String s = m_lines[line].getWhereClause(p_PA_Hierarchy_ID);	//	(sources, posting type)
			if (s != null && s.length() > 0)
				select.append("" AND "").append(s);

			//	Report Where
			s = m_report.getWhereClause();
			if (s != null && s.length() > 0)
				select.append("" AND "").append(s);

			//	PostingType
			if (!m_lines[line].isPostingType())		//	only if not defined on line
			{
				String PostingType = m_columns[col].getPostingType();
				if (PostingType != null && PostingType.length() > 0)
					select.append("" AND PostingType='"").append(PostingType).append(""'"");
			}
			
			if (m_columns[col].isColumnTypeSegmentValue())
				select.append(m_columns[col].getWhereClause(p_PA_Hierarchy_ID));
			
			//	Parameter Where
			select.append(m_parameterWhere);
			log.finest(""Line="" + line + "",Col="" + line + "": "" + select);

			//	Update SET portion
			if (update.length() > 0)
				update.append("", "");
			update.append(""Col_"").append(col)
				.append("" = ("").append(select).append("")"");
			//
			log.finest(info.toString());
		}
		//	Update Line Values
		if (update.length() > 0)
		{
			update.insert (0, ""UPDATE T_Report SET "");
			update.append("" WHERE AD_PInstance_ID="").append(getAD_PInstance_ID())
				.append("" AND PA_ReportLine_ID="").append(m_lines[line].getPA_ReportLine_ID())
				.append("" AND ABS(LevelNo)<3"");		//	1=Line 2=Acct
			int no = DB.executeUpdate(update.toString(), get_TrxName());
			if (no != 1)
				log.log(Level.SEVERE, ""#="" + no + "" for "" + update);
			log.finest(update.toString());
		}
	}	//	updateLine
"
org.compiere.report.FinReport.doCalculations,FinReport.java,"void doCalculations()
	{
		//	for all lines	***************************************************
		for (int line = 0; line < m_lines.length; line++)
		{
			if (!m_lines[line].isLineTypeCalculation ())
				continue;

			int oper_1 = m_lines[line].getOper_1_ID();
			int oper_2 = m_lines[line].getOper_2_ID();

			log.fine(""Line "" + line + "" = #"" + oper_1 + "" "" 
				+ m_lines[line].getCalculationType() + "" #"" + oper_2);

			//	Adding
			if (m_lines[line].isCalculationTypeAdd() 
				|| m_lines[line].isCalculationTypeRange())
			{
				//	Reverse range
				if (oper_1 > oper_2)
				{
					int temp = oper_1;
					oper_1 = oper_2;
					oper_2 = temp;
				}
				StringBuffer sb = new StringBuffer (""UPDATE T_Report SET ("");
				for (int col = 0; col < m_columns.length; col++)
				{
					if (col > 0)
						sb.append("","");
					sb.append (""Col_"").append (col);
				}
				sb.append("") = (SELECT "");
				for (int col = 0; col < m_columns.length; col++)
				{
					if (col > 0)
						//jz for update sql translating sb.append("","");
						sb.append("", "");
					sb.append (""COALESCE(SUM(Col_"").append (col).append(""),0)"");
				}
				sb.append("" FROM T_Report WHERE AD_PInstance_ID="").append(getAD_PInstance_ID())
					.append("" AND PA_ReportLine_ID IN ("");
				if (m_lines[line].isCalculationTypeAdd())
					sb.append(oper_1).append("","").append(oper_2);
				else
					sb.append(getLineIDs (oper_1, oper_2));		//	list of columns to add up
				sb.append("") AND ABS(LevelNo)<2) ""		//	1=Line 2=Acct
					+ ""WHERE AD_PInstance_ID="").append(getAD_PInstance_ID())
					.append("" AND PA_ReportLine_ID="").append(m_lines[line].getPA_ReportLine_ID())
					.append("" AND ABS(LevelNo)<2"");		//	not p_trx
				int no = DB.executeUpdate(sb.toString(), get_TrxName());
				if (no != 1)
					log.log(Level.SEVERE, ""(+) #="" + no + "" for "" + m_lines[line] + "" - "" + sb.toString());
				else
				{
					log.fine(""(+) Line="" + line + "" - "" + m_lines[line]);
					log.finest (""(+) "" + sb.toString ());
				}
			}
			else	//	No Add (subtract, percent)
			{
				//	Step 1 - get First Value or 0 in there
				StringBuffer sb = new StringBuffer (""UPDATE T_Report SET ("");
				for (int col = 0; col < m_columns.length; col++)
				{
					if (col > 0)
						sb.append("","");
					sb.append (""Col_"").append (col);
				}
				sb.append("") = (SELECT "");
				for (int col = 0; col < m_columns.length; col++)
				{
					if (col > 0)
						sb.append("", ""); //jz "", ""
					sb.append (""COALESCE(r2.Col_"").append (col).append("",0)"");
				}
				sb.append("" FROM T_Report r2 WHERE r2.AD_PInstance_ID="").append(getAD_PInstance_ID())
					.append("" AND r2.PA_ReportLine_ID="").append(oper_1)
					.append("" AND r2.Record_ID=0 AND r2.Fact_Acct_ID=0) ""
				//
					+ ""WHERE AD_PInstance_ID="").append(getAD_PInstance_ID())
					   .append("" AND PA_ReportLine_ID="").append(m_lines[line].getPA_ReportLine_ID())
					.append("" AND ABS(LevelNo)<2"");			//	1=Line 2=Acct
				int no = DB.executeUpdate(sb.toString(), get_TrxName());
				if (no != 1)
				{
					log.severe (""(x) #="" + no + "" for "" + m_lines[line] + "" - "" + sb.toString ());
					continue;
				}

				//	Step 2 - do Calculation with Second Value
				sb = new StringBuffer (""UPDATE T_Report r1 SET ("");
				for (int col = 0; col < m_columns.length; col++)
				{
					if (col > 0)
						sb.append("","");
					sb.append (""Col_"").append (col);
				}
				sb.append("") = (SELECT "");
				for (int col = 0; col < m_columns.length; col++)
				{
					if (col > 0)
						sb.append("",  "");//jz hard coded "", ""
					sb.append (""COALESCE(r1.Col_"").append (col).append("",0)"");
					if (m_lines[line].isCalculationTypeSubtract())
						sb.append(""-"");
					else
						sb.append(""/"");
					sb.append (""COALESCE(r2.Col_"").append (col).append("",0.000000001)"");
					if (m_lines[line].isCalculationTypePercent())
						sb.append("" *100"");
				}
				sb.append("" FROM T_Report r2 WHERE r2.AD_PInstance_ID="").append(getAD_PInstance_ID())
					.append("" AND r2.PA_ReportLine_ID="").append(oper_2)
					.append("" AND r2.Record_ID=0 AND r2.Fact_Acct_ID=0) ""
				//
					+ ""WHERE AD_PInstance_ID="").append(getAD_PInstance_ID())
					   .append("" AND PA_ReportLine_ID="").append(m_lines[line].getPA_ReportLine_ID())
					.append("" AND ABS(LevelNo)<2"");			//	1=Line 2=Acct
				no = DB.executeUpdate(sb.toString(), get_TrxName());
				if (no != 1)
					log.severe (""(x) #="" + no + "" for "" + m_lines[line] + "" - "" + sb.toString ());
				else
				{
					log.fine(""(x) Line="" + line + "" - "" + m_lines[line]);
					log.finest (sb.toString());
				}
			}
		}	//	for all lines


		//	for all columns		***********************************************
		for (int col = 0; col < m_columns.length; col++)
		{
			//	Only Calculations
			if (!m_columns[col].isColumnTypeCalculation ())
				continue;

			StringBuffer sb = new StringBuffer (""UPDATE T_Report SET "");
			//	Column to set
			sb.append (""Col_"").append (col).append(""="");
			//	First Operand
			int ii_1 = getColumnIndex(m_columns[col].getOper_1_ID());
			if (ii_1 < 0)
			{
				log.log(Level.SEVERE, ""Column Index for Operator 1 not found - "" + m_columns[col]);
				continue;
			}
			//	Second Operand
			int ii_2 = getColumnIndex(m_columns[col].getOper_2_ID());
			if (ii_2 < 0)
			{
				log.log(Level.SEVERE, ""Column Index for Operator 2 not found - "" + m_columns[col]);
				continue;
			}
			log.fine(""Column "" + col + "" = #"" + ii_1 + "" "" 
				+ m_columns[col].getCalculationType() + "" #"" + ii_2);
			//	Reverse Range
			if (ii_1 > ii_2 && m_columns[col].isCalculationTypeRange())
			{
				log.fine(""Swap operands from "" + ii_1 + "" op "" + ii_2);
				int temp = ii_1;
				ii_1 = ii_2;
				ii_2 = temp;
			}

			//	+
			if (m_columns[col].isCalculationTypeAdd())
				sb.append (""COALESCE(Col_"").append (ii_1).append("",0)"")
					.append(""+"")
					.append (""COALESCE(Col_"").append (ii_2).append("",0)"");
			//	-
			else if (m_columns[col].isCalculationTypeSubtract())
				sb.append (""COALESCE(Col_"").append (ii_1).append("",0)"")
					.append(""-"")
					.append (""COALESCE(Col_"").append (ii_2).append("",0)"");
			//	/
			if (m_columns[col].isCalculationTypePercent()) 
				sb.append (""CASE WHEN COALESCE(Col_"").append(ii_2)
					.append("",0)=0 THEN NULL ELSE "")
					.append(""COALESCE(Col_"").append (ii_1).append("",0)"")
					.append(""/"")
					.append (""Col_"").append (ii_2)
					.append(""*100 END"");	//	Zero Divide
			//	Range
			else if (m_columns[col].isCalculationTypeRange())
			{
				sb.append (""COALESCE(Col_"").append (ii_1).append("",0)"");
				for (int ii = ii_1+1; ii <= ii_2; ii++)
					sb.append(""+COALESCE(Col_"").append (ii).append("",0)"");
			}
			//
			sb.append("" WHERE AD_PInstance_ID="").append(getAD_PInstance_ID())
				.append("" AND ABS(LevelNo)<3"");			//	1=Line 2=Acct
			int no = DB.executeUpdate(sb.toString(), get_TrxName());
			if (no < 1)
				log.severe (""#="" + no + "" for "" + m_columns[col] 
					+ "" - "" + sb.toString());
			else
			{
				log.fine(""Col="" + col + "" - "" + m_columns[col]);
				log.finest (sb.toString ());
			}
		} 	//	for all columns

	}	//	doCalculations
"
org.compiere.report.FinReport.getLineIDs,FinReport.java,"String getLineIDs (int fromID, int toID)
	{
		log.finest(""From="" + fromID + "" To="" + toID);
		StringBuffer sb = new StringBuffer();
		sb.append(fromID);
		boolean addToList = false;
		for (MReportLine element : m_lines) {
			int PA_ReportLine_ID = element.getPA_ReportLine_ID();
			log.finest(""Add="" + addToList 
				+ "" ID="" + PA_ReportLine_ID + "" - "" + element);
			if (addToList)
			{
				sb.append ("","").append (PA_ReportLine_ID);
				if (PA_ReportLine_ID == toID)		//	done
					break;
			}
			else if (PA_ReportLine_ID == fromID)	//	from already added
				addToList = true;
		}
		return sb.toString();
	}	//	getLineIDs
"
org.compiere.report.FinReport.getColumnIndex,FinReport.java,"int getColumnIndex (int PA_ReportColumn_ID)
	{
		for (int i = 0; i < m_columns.length; i++)
		{
			if (m_columns[i].getPA_ReportColumn_ID() == PA_ReportColumn_ID)
				return i;
		}
		return -1;
	}	//	getColumnIndex
"
org.compiere.report.FinReport.getPeriod,FinReport.java,"FinReportPeriod getPeriod (BigDecimal relativeOffset)
	{
		if (relativeOffset == null)
			return getPeriod(0);
		return getPeriod(relativeOffset.intValue());
	}	//	getPeriod
"
org.compiere.report.FinReport.getPeriod,FinReport.java,"FinReportPeriod getPeriod (int relativeOffset)
	{
		//	find current reporting period C_Period_ID
		if (m_reportPeriod < 0)
		{
			for (int i = 0; i < m_periods.length; i++)
			{
				if (p_C_Period_ID == m_periods[i].getC_Period_ID())
				{
					m_reportPeriod = i;
					break;
				}
			}
		}
		if (m_reportPeriod < 0 || m_reportPeriod >= m_periods.length)
			throw new UnsupportedOperationException (""Period index not found - ReportPeriod=""
				+ m_reportPeriod + "", C_Period_ID="" + p_C_Period_ID);

		//	Bounds check
		int index = m_reportPeriod + relativeOffset;
		if (index < 0)
		{
			log.log(Level.SEVERE, ""Relative Offset("" + relativeOffset 
				+ "") not valid for selected Period("" + m_reportPeriod + "")"");
			index = 0;
		}
		else if (index >= m_periods.length)
		{
			log.log(Level.SEVERE, ""Relative Offset("" + relativeOffset 
				+ "") not valid for selected Period("" + m_reportPeriod + "")"");
			index = m_periods.length - 1;
		}
		//	Get Period
		return m_periods[index];
	}	//	getPeriod
"
org.compiere.report.FinReport.insertLineDetail,FinReport.java,"void insertLineDetail()
	{
		if (!m_report.isListSources())
			return;
		log.info("""");

		//	for all source lines
		for (int line = 0; line < m_lines.length; line++)
		{
			//	Line Segment Value (i.e. not calculation)
			if (m_lines[line].isLineTypeSegmentValue ())
				insertLineSource (line);
		}

		//	Clean up empty rows
		StringBuffer sql = new StringBuffer (""DELETE FROM T_Report WHERE ABS(LevelNo)<>1"")
			.append("" AND Col_0 IS NULL AND Col_1 IS NULL AND Col_2 IS NULL AND Col_3 IS NULL AND Col_4 IS NULL AND Col_5 IS NULL AND Col_6 IS NULL AND Col_7 IS NULL AND Col_8 IS NULL AND Col_9 IS NULL"")
			.append("" AND Col_10 IS NULL AND Col_11 IS NULL AND Col_12 IS NULL AND Col_13 IS NULL AND Col_14 IS NULL AND Col_15 IS NULL AND Col_16 IS NULL AND Col_17 IS NULL AND Col_18 IS NULL AND Col_19 IS NULL AND Col_20 IS NULL""); 
		int no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Deleted empty #="" + no);
		
		//	Set SeqNo
		sql = new StringBuffer (""UPDATE T_Report r1 ""
			+ ""SET SeqNo = (SELECT SeqNo ""
				+ ""FROM T_Report r2 ""
				+ ""WHERE r1.AD_PInstance_ID=r2.AD_PInstance_ID AND r1.PA_ReportLine_ID=r2.PA_ReportLine_ID""
				+ "" AND r2.Record_ID=0 AND r2.Fact_Acct_ID=0)""
			+ ""WHERE SeqNo IS NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""SeqNo #="" + no);

		if (!m_report.isListTrx())
			return;

		//	Set Name,Description - Indent Level 2
		String sql_select = ""SELECT '__'||e.Name, fa.Description ""
			+ ""FROM Fact_Acct fa""
			+ "" INNER JOIN AD_Table t ON (fa.AD_Table_ID=t.AD_Table_ID)""
			+ "" INNER JOIN AD_Element e ON (t.TableName||'_ID'=e.ColumnName) ""
			+ ""WHERE r.Fact_Acct_ID=fa.Fact_Acct_ID"";
		//	Translated Version ...
		sql = new StringBuffer (""UPDATE T_Report r SET (Name,Description)=("")
			.append(sql_select).append("") ""
			+ ""WHERE Fact_Acct_ID <> 0 AND AD_PInstance_ID="")
			.append(getAD_PInstance_ID());
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (CLogMgt.isLevelFinest())
			log.fine(""Trx Name #="" + no + "" - "" + sql.toString());
	}	//	insertLineDetail
"
org.compiere.report.FinReport.insertLineSource,FinReport.java,"void insertLineSource (int line)
	{
		log.info(""Line="" + line + "" - "" + m_lines[line]);

		//	No source lines
		if (m_lines[line] == null || m_lines[line].getSources().length == 0)
			return;
		String variable = m_lines[line].getSourceColumnName();
		if (variable == null)
			return;
		log.fine(""Variable="" + variable);
		

		//	Insert
		StringBuffer insert = new StringBuffer(""INSERT INTO T_Report ""
			+ ""(AD_PInstance_ID, PA_ReportLine_ID, Record_ID,Fact_Acct_ID,LevelNo "");
		for (int col = 0; col < m_columns.length; col++)
			insert.append("",Col_"").append(col);
		//	Select
		insert.append("") SELECT "")
			.append(getAD_PInstance_ID()).append("","")
			.append(m_lines[line].getPA_ReportLine_ID())
			.append("","").append(variable).append("",0,"");	//	Record_ID, Fact_Acct_ID
		if (p_DetailsSourceFirst)							//	LevelNo
			insert.append(""-"");
		insert.append(""2 "");

		//	for all columns create select statement
		for (MReportColumn element : m_columns) {
			insert.append("", "");
			//	No calculation
			if (element.isColumnTypeCalculation())
			{
				insert.append(""NULL"");
				continue;
			}

			//	SELECT SUM()
			StringBuffer select = new StringBuffer (""SELECT "");
			if (m_lines[line].getAmountType() != null)				//	line amount type overwrites column
				select.append (m_lines[line].getSelectClause (true));
			else if (element.getAmountType() != null)
				select.append (element.getSelectClause (true));
			else
			{
				insert.append(""NULL"");
				continue;
			}

			//	Get Period info
			select.append("" FROM Fact_Acct_Balance fb WHERE DateAcct "");
			FinReportPeriod frp = getPeriod (element.getRelativePeriod());
			if (m_lines[line].getAmountType() != null)			//	line amount type overwrites column
			{
				if (m_lines[line].isPeriod())
					select.append(frp.getPeriodWhere());
				else if (m_lines[line].isYear())
					select.append(frp.getYearWhere());
				else
					select.append(frp.getTotalWhere());
			}
			else if (element.getAmountType() != null)
			{
				if (element.isPeriod())
					select.append(frp.getPeriodWhere());
				else if (element.isYear())
					select.append(frp.getYearWhere());
				else
					select.append(frp.getTotalWhere());
			}
			//	Link
			select.append("" AND fb."").append(variable).append(""=x."").append(variable);
			//	PostingType
			if (!m_lines[line].isPostingType())		//	only if not defined on line
			{
				String PostingType = element.getPostingType();
				if (PostingType != null && PostingType.length() > 0)
					select.append("" AND fb.PostingType='"").append(PostingType).append(""'"");
			}
			//	Report Where
			String s = m_report.getWhereClause();
			if (s != null && s.length() > 0)
				select.append("" AND "").append(s);
			
			//	Limited Segment Values
			if (element.isColumnTypeSegmentValue())
				select.append(element.getWhereClause(p_PA_Hierarchy_ID));
			
			//	Parameter Where
			select.append(m_parameterWhere);
		//	System.out.println(""    c="" + col + "", l="" + line + "": "" + select);
			//
			insert.append(""("").append(select).append("")"");
		}
		//	WHERE (sources, posting type)
		StringBuffer where = new StringBuffer(m_lines[line].getWhereClause(p_PA_Hierarchy_ID));
		String s = m_report.getWhereClause();
		if (s != null && s.length() > 0)
		{
			if (where.length() > 0)
				where.append("" AND "");
			where.append(s);
		}
		if (where.length() > 0)
			where.append("" AND "");
		where.append(variable).append("" IS NOT NULL"");

		//	FROM .. WHERE
		insert.append("" FROM Fact_Acct_Balance x WHERE "").append(where);	
		//
		insert.append(m_parameterWhere)
			.append("" GROUP BY "").append(variable);

		int no = DB.executeUpdate(insert.toString(), get_TrxName());
		if (CLogMgt.isLevelFinest())
			log.fine(""Source #="" + no + "" - "" + insert);
		if (no == 0)
			return;

		//	Set Name,Description
		StringBuffer sql = new StringBuffer (""UPDATE T_Report SET (Name,Description)=("")
			.append(m_lines[line].getSourceValueQuery()).append(""Record_ID) "");
			//
		StringBuffer whereUpdate = new StringBuffer(""WHERE Record_ID <> 0 AND AD_PInstance_ID="").append(getAD_PInstance_ID())
			.append("" AND PA_ReportLine_ID="").append(m_lines[line].getPA_ReportLine_ID())
			.append("" AND Fact_Acct_ID=0"");
		sql.append(whereUpdate);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (CLogMgt.isLevelFinest())
			log.fine(""Name #="" + no + "" - "" + sql.toString());
		//	Indent Level 1
		StringBuffer sql2 = new StringBuffer (""UPDATE T_Report SET Name='_'||Name "");
		sql2.append(whereUpdate);
		no = DB.executeUpdate(sql2.toString(), get_TrxName());
		if (CLogMgt.isLevelFinest())
			log.fine(""Name #="" + no + "" - "" + sql2.toString());
		
		//	Details
		if (m_report.isListTrx())
			insertLineTrx (line, variable);
	}	//	insertLineSource
"
org.compiere.report.FinReport.insertLineTrx,FinReport.java,"void insertLineTrx (int line, String variable)
	{
		log.info(""Line="" + line + "" - Variable="" + variable);
		MReportLine rLine = m_lines[line];
		
		String lineWhere = rLine.getWhereClause(p_PA_Hierarchy_ID);
		
		//	Insert
		StringBuffer insert = new StringBuffer(""INSERT INTO T_Report ""
			+ ""(AD_PInstance_ID, PA_ReportLine_ID, Record_ID,Fact_Acct_ID,LevelNo "");
		for (int col = 0; col < m_columns.length; col++)
			insert.append("",Col_"").append(col);
		//	Select
		insert.append("") SELECT "")
			.append(getAD_PInstance_ID()).append("","")
			.append(rLine.getPA_ReportLine_ID()).append("","")
			.append(variable).append("",Fact_Acct_ID, "");
		if (p_DetailsSourceFirst)
			insert.append(""-"");
		insert.append(""3 "");

		//	for all columns create select statement
		for (MReportColumn column : m_columns) {
			insert.append("", "");
			String sqlValue = ""NULL"";
			//	Amount Type ... Qty
			if (rLine.getAmountType() != null)				//	line amount type overwrites column
				sqlValue = rLine.getSelectClause (false);
			else if (column.getAmountType() != null)
				sqlValue = column.getSelectClause (false);
			//	Segment Values
			if (column.isColumnTypeSegmentValue())
			{
				String colWhere = column.getWhereClause(p_PA_Hierarchy_ID);
				sqlValue = ""(SELECT "" + sqlValue 
					+ "" FROM Fact_Acct AA WHERE AA.Fact_Acct_ID=Fact_Acct.Fact_Acct_ID"" 
					+ colWhere + "")"";
			}
			//	Only relative Period (not calculation or segment value)
			else if (!(column.isColumnTypeRelativePeriod() 
				&& column.getRelativePeriodAsInt() == 0))
			{
			//	sqlValue = ""NULL"";
			}
			insert.append (sqlValue);
		}
		//	(sources, posting type)
		StringBuffer where = new StringBuffer(lineWhere);
		//	Report Where
		String s = m_report.getWhereClause();
		if (s != null && s.length() > 0)
		{
			if (where.length() > 0)
				where.append("" AND "");
			where.append(s);
		}
		//	Period restriction
		FinReportPeriod frp = getPeriod (0);
		if (where.length() > 0)
			where.append("" AND "");
		where.append("" DateAcct "").append(frp.getPeriodWhere());
		
		//	PostingType ??
//		if (!m_lines[line].isPostingType())		//	only if not defined on line
//		{
//	      String PostingType = m_columns[col].getPostingType();
//  	    if (PostingType != null && PostingType.length() > 0)
//      	  	where.append("" AND PostingType='"").append(PostingType).append(""'"");
//		}
		where.append("" AND "").append(variable).append("" IS NOT NULL"");
		
		//	Final FROM .. Where
		insert.append("" FROM Fact_Acct WHERE "").append(where);

		int no = DB.executeUpdate(insert.toString(), get_TrxName());
		log.finest(""Trx #="" + no + "" - "" + insert);
		if (no == 0)
			return;
	}	//	insertLineTrx
"
org.compiere.report.FinReport.deleteUnprintedLines,FinReport.java,"void deleteUnprintedLines()
	{
		for (int line = 0; line < m_lines.length; line++)
		{
			//	Not Printed - Delete in T
			if (!m_lines[line].isPrinted())
			{
				String sql = ""DELETE FROM T_Report WHERE AD_PInstance_ID="" + getAD_PInstance_ID()
					+ "" AND PA_ReportLine_ID="" + m_lines[line].getPA_ReportLine_ID();
				int no = DB.executeUpdate(sql, get_TrxName());
				if (no > 0)
					log.fine(m_lines[line].getName() + "" - #"" + no);
			}
		}	//	for all lines
	}	//	deleteUnprintedLines
"
org.compiere.report.FinReport.getPrintFormat,FinReport.java,"MPrintFormat getPrintFormat()
	{
		int AD_PrintFormat_ID = m_report.getAD_PrintFormat_ID();
		log.info(""AD_PrintFormat_ID="" + AD_PrintFormat_ID);
		MPrintFormat pf = null;
		boolean createNew = AD_PrintFormat_ID == 0;

		//	Create New
		if (createNew)
		{
			int AD_Table_ID = 544;		//	T_Report
			pf = MPrintFormat.createFromTable(Env.getCtx(), AD_Table_ID);
			AD_PrintFormat_ID = pf.getAD_PrintFormat_ID();
			m_report.setAD_PrintFormat_ID(AD_PrintFormat_ID);
			m_report.save();
		}
		else
			pf = MPrintFormat.get (getCtx(), AD_PrintFormat_ID, false);	//	use Cache

		//	Print Format Sync
		if (!m_report.getName().equals(pf.getName()))
			pf.setName(m_report.getName());
		if (m_report.getDescription() == null)
		{
			if (pf.getDescription () != null)
				pf.setDescription (null);
		}
		else if (!m_report.getDescription().equals(pf.getDescription()))
			pf.setDescription(m_report.getDescription());
		pf.save();
		log.fine(pf + "" - #"" + pf.getItemCount());

		//	Print Format Item Sync
		int count = pf.getItemCount();
		for (int i = 0; i < count; i++)
		{
			MPrintFormatItem pfi = pf.getItem(i);
			String ColumnName = pfi.getColumnName();
			//
			if (ColumnName == null)
			{
				log.log(Level.SEVERE, ""No ColumnName for #"" + i + "" - "" + pfi);
				if (pfi.isPrinted())
					pfi.setIsPrinted(false);
				if (pfi.isOrderBy())
					pfi.setIsOrderBy(false);
				if (pfi.getSortNo() != 0)
					pfi.setSortNo(0);
			}
			else if (ColumnName.startsWith(""Col""))
			{
				int index = Integer.parseInt(ColumnName.substring(4));
				if (index < m_columns.length)
				{
					pfi.setIsPrinted(m_columns[index].isPrinted());
					String s = m_columns[index].getName();
					if (!pfi.getName().equals(s))
					{
						pfi.setName (s);
						pfi.setPrintName (s);
					}
					int seq = 30 + index;
					if (pfi.getSeqNo() != seq)
						pfi.setSeqNo(seq);
				}
				else	//	not printed
				{
					if (pfi.isPrinted())
						pfi.setIsPrinted(false);
				}
				//	Not Sorted
				if (pfi.isOrderBy())
					pfi.setIsOrderBy(false);
				if (pfi.getSortNo() != 0)
					pfi.setSortNo(0);
			}
			else if (ColumnName.equals(""SeqNo""))
			{
				if (pfi.isPrinted())
					pfi.setIsPrinted(false);
				if (!pfi.isOrderBy())
					pfi.setIsOrderBy(true);
				if (pfi.getSortNo() != 10)
					pfi.setSortNo(10);
			}
			else if (ColumnName.equals(""Record_ID""))
			{
				// 	Correct ORDER BY replaced in DataEngine.getPrintDataInfo
				//	CASE WHEN Record_ID=0 AND LevelNo=-1 THEN 99999 ELSE Record_ID END
				if (pfi.isPrinted())
					pfi.setIsPrinted(false);
				if (!pfi.isOrderBy())
					pfi.setIsOrderBy(true);
				if (pfi.getSortNo() != 20)
					pfi.setSortNo(20);
			}
			else if (ColumnName.equals(""LevelNo""))
			{
				if (pfi.isPrinted())
					pfi.setIsPrinted(false);
				if (!pfi.isOrderBy())
					pfi.setIsOrderBy(true);
				if (pfi.getSortNo() != 30)
					pfi.setSortNo(30);
			}
			else if (ColumnName.equals(""Name""))
			{
				if (pfi.getSeqNo() != 10)
					pfi.setSeqNo(10);
				if (!pfi.isPrinted())
					pfi.setIsPrinted(true);
				if (!pfi.isOrderBy())
					pfi.setIsOrderBy(true);
				if (pfi.getSortNo() != 40)
					pfi.setSortNo(40);
			}
			else if (ColumnName.equals(""Description""))
			{
				if (pfi.getSeqNo() != 20)
					pfi.setSeqNo(20);
				if (!pfi.isPrinted())
					pfi.setIsPrinted(true);
				if (pfi.isOrderBy())
					pfi.setIsOrderBy(false);
				if (pfi.getSortNo() != 0)
					pfi.setSortNo(0);
			}
			else	//	Not Printed, No Sort
			{
				if (pfi.isPrinted())
					pfi.setIsPrinted(false);
				if (pfi.isOrderBy())
					pfi.setIsOrderBy(false);
				if (pfi.getSortNo() != 0)
					pfi.setSortNo(0);
			}
			pfi.save();
			log.fine(pfi.toString());
		}
		//	set translated to original
		pf.setTranslation();
		//	First one is unsorted - just re-load
		if (createNew)
			pf = MPrintFormat.get (getCtx(), AD_PrintFormat_ID, false);	//	use Cache
		return pf;
	}	//	getPrintFormat
"
org.compiere.report.MReportColumnSet.loadColumns,MReportColumnSet.java,"void loadColumns()
	{
		ArrayList<MReportColumn> list = new ArrayList<MReportColumn>();
		String sql = ""SELECT * FROM PA_ReportColumn WHERE PA_ReportColumnSet_ID=? AND IsActive='Y' ORDER BY SeqNo"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, getPA_ReportColumnSet_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(new MReportColumn (getCtx(), rs, null));
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		//
		m_columns = new MReportColumn[list.size()];
		list.toArray(m_columns);
		log.finest(""ID="" + getPA_ReportColumnSet_ID() 
			+ "" - Size="" + list.size());
	}	//	loadColumns
"
org.compiere.report.MReportColumnSet.getColumns,MReportColumnSet.java,"MReportColumn[] getColumns()
	{
		return m_columns;
	}	//	getColumns
"
org.compiere.report.MReportColumnSet.list,MReportColumnSet.java,"void list()
	{
		System.out.println(toString());
		if (m_columns == null)
			return;
		for (MReportColumn element : m_columns)
			System.out.println(""- "" + element.toString());
	}	//	list
"
org.compiere.report.MReportColumnSet.toString,MReportColumnSet.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MReportColumnSet["")
			.append(get_ID()).append("" - "").append(getName())
			.append (""]"");
		return sb.toString ();
	}
"
org.compiere.report.AcctDistribution.setDateAcct,AcctDistribution.java,"void setDateAcct()
	{
		//	Date defined
		if (p_DateAcct_From != null)
		{
			if (p_DateAcct_To == null)
				p_DateAcct_To = new Timestamp (System.currentTimeMillis());
			return;
		}
		//	Get Date from Period
		if (p_C_Period_ID == 0)
		{
			GregorianCalendar cal = new GregorianCalendar(Language.getLoginLanguage().getLocale());
			cal.setTimeInMillis(System.currentTimeMillis());
			cal.set(Calendar.HOUR_OF_DAY, 0);
			cal.set(Calendar.MINUTE, 0);
			cal.set(Calendar.SECOND, 0);
			cal.set(Calendar.MILLISECOND, 0);
			cal.set(Calendar.DAY_OF_MONTH, 1);		//	set to first of month
			p_DateAcct_From = new Timestamp (cal.getTimeInMillis());
			cal.add(Calendar.MONTH, 1);
			cal.add(Calendar.DAY_OF_YEAR, -1);		//	last of month
			p_DateAcct_To = new Timestamp (cal.getTimeInMillis());
		}
		else
		{
			MPeriod period = MPeriod.get(getCtx(), p_C_Period_ID);
			p_DateAcct_From = period.getStartDate();
			p_DateAcct_To = period.getEndDate();
		}
	}	//	setDateAcct
"
org.compiere.report.AcctDistribution.prepare,AcctDistribution.java,"void prepare()
	{
		StringBuffer sb = new StringBuffer (""Record_ID="")
			.append(getRecord_ID());
		//	Parameter
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_AcctSchema_ID""))
				p_C_AcctSchema_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""PostingType""))
				p_PostingType = (String)element.getParameter(); 
			else if (name.equals(""C_Period_ID""))
				p_C_Period_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""DateAcct""))
			{
				p_DateAcct_From = (Timestamp)element.getParameter();
				p_DateAcct_To = (Timestamp)element.getParameter_To();
			}
			else if (name.equals(""AD_Org_ID""))
				p_AD_Org_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""Account_ID""))
				p_Account_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""C_BPartner_ID""))
				p_C_BPartner_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""C_SalesRegion_ID""))
				p_C_SalesRegion_ID = ((BigDecimal)element.getParameter()).intValue();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		
		setDateAcct();
		sb.append("" - DateAcct "").append(p_DateAcct_From).append(""-"").append(p_DateAcct_To);
		sb.append("" - Where="").append(m_parameterWhere);
		log.fine(sb.toString());
	}	//	prepare
"
org.compiere.report.AcctDistribution.doIt,AcctDistribution.java,"String doIt()
	{
		createDetailLines();
		return """";
	}	//	doIt
"
org.compiere.report.AcctDistribution.createDetailLines,AcctDistribution.java,"void createDetailLines()
	{
		ArrayList<Object> params = new ArrayList<Object>();
		StringBuffer sb = new StringBuffer (""INSERT INTO T_Fact_Acct (AD_PInstance_ID,""
				+ "" AD_Client_ID, AD_Org_ID, ""
				+ "" C_AcctSchema_ID, Account_ID, AccountValue, AccountName, DateAcct, "" 
				+ "" C_Period_ID, M_Product_ID, ProductValue, ProductName, C_SalesRegion_ID, "" 
				+ "" C_BPartner_ID, BPartnerValue, BPartnerName, Description, Fact_Acct_ID, "" 
				+ "" AmtAcctDr, AmtAcctCr, Name, Qty, AccountType, PostingType, ""
				+ "" AD_Table_ID, Record_ID) "");

		sb.append(""SELECT ?"")
			 	.append("", f.AD_Client_ID, f.AD_Org_ID, "" 
			 	+ ""f.C_AcctSchema_ID, f.Account_ID, ev.Value, ev.Name, f.DateAcct,""	
			 	+ ""f.C_Period_ID, f.M_Product_ID,p.Value, p.Name, f.C_SalesRegion_ID,""
			 	+ ""f.C_BPartner_ID, bp.Value, bp.Name, f.Description, f.Fact_Acct_ID, ""
			 	+ ""f.AmtAcctDr, f.AmtAcctCr, e.Name, Qty, ev.AccountType, f.PostingType, ""
			 	+ ""f.AD_Table_ID, f.Record_ID ""
			 	+ ""FROM Fact_Acct f ""
			 		+ "" INNER JOIN C_ElementValue ev ON (f.Account_ID=ev.C_ElementValue_ID)""
					+ "" INNER JOIN AD_Table t ON (f.AD_Table_ID=t.AD_Table_ID)""
					+ "" INNER JOIN AD_Element e ON (t.TableName||'_ID'=e.ColumnName) ""
					+ "" LEFT OUTER JOIN C_BPartner bp ON (bp.C_BPartner_ID=f.C_BPartner_ID) ""
					+ "" LEFT OUTER JOIN M_Product p ON (p.M_Product_ID=f.M_Product_ID) "");
					

		params.add(getAD_PInstance_ID());
		
		//	Mandatory C_AcctSchema_ID, PostingType
		m_parameterWhere.append("" WHERE C_AcctSchema_ID=? "")
						.append("" AND PostingType=? "");
		params.add(p_C_AcctSchema_ID);
		params.add(p_PostingType);

		if(p_DateAcct_From!=null && p_DateAcct_To!=null)
		{
			m_parameterWhere.append(""AND DateAcct BETWEEN ? AND ? "");
			params.add(p_DateAcct_From);
			params.add(p_DateAcct_To);
		}
		else if(p_DateAcct_From!=null)
		{
			m_parameterWhere.append(""AND DateAcct >= ? "");
			params.add(p_DateAcct_From);
		}
		else if(p_DateAcct_To!=null)
		{
			m_parameterWhere.append(""AND DateAcct <= ? "");
			params.add(p_DateAcct_To);			
		}
		
		//	Optional Account_ID
		if (p_Account_ID != 0)
		{
			m_parameterWhere.append("" AND f.Account_ID=? "");
			params.add(p_Account_ID);
		}
		
		//	Optional Org
		if (p_AD_Org_ID != 0)
		{
			m_parameterWhere.append("" AND f.AD_Org_ID=? "");
			params.add(p_AD_Org_ID);
		}
		
		//	Optional BPartner
		if (p_C_BPartner_ID != 0)
		{
			m_parameterWhere.append("" AND f.C_BPartner_ID=? "");
			params.add(p_C_BPartner_ID);
		}

		if (p_C_SalesRegion_ID != 0)
		{	
			m_parameterWhere.append("" AND f.C_SalesRegion_ID=? "");
			params.add(p_C_SalesRegion_ID);
		}
		
		if(p_C_Period_ID != 0)
		{	
			m_parameterWhere.append("" AND f.C_Period_ID=? "");
			params.add(p_C_Period_ID);
		}

		sb.append(m_parameterWhere);
		//
		int no = DB.executeUpdate(sb.toString(), params, false, get_TrxName());
		log.fine(""#"" + no);
		log.finest(sb.toString());

	   String sql = ""SELECT DISTINCT t.AD_Table_ID, t.TableName, c.AD_Column_ID"" 
		   			+ "" FROM T_Fact_Acct tfa ""
					+ "" INNER JOIN AD_Table t ON (tfa.AD_Table_ID=t.AD_Table_ID) ""
					+ "" LEFT OUTER JOIN AD_Column c ON (t.AD_Table_ID=c.AD_Table_ID AND c.ColumnName = 'C_DocType_ID') ""
		   			+ ""WHERE AD_PInstance_ID=?  "";
	   
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_TrxName());
			pstmt.setInt (1, getAD_PInstance_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				int AD_Table_ID = rs.getInt(1);
				String tableName = rs.getString(2);
				boolean hasDocType = rs.getInt(3) != 0;
				updateDocumentDetails(AD_Table_ID, tableName, hasDocType);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
	   
	}	//	createDetailLines
"
org.compiere.report.AcctDistribution.updateDocumentDetails,AcctDistribution.java,"void updateDocumentDetails(int AD_Table_ID, String tableName, boolean hasDocType)
	{
		int no = 0;
		ArrayList<Object> params = new ArrayList<Object>();
		StringBuffer sb;
		
		if(!hasDocType)
		{	
			String sql_select = ""SELECT DocumentNo ""
				+ ""FROM "" + tableName +"" tn ""
				+ ""WHERE tfa.Record_ID=tn."" + tableName + ""_ID"";
			
			sb = new StringBuffer (""UPDATE T_Fact_Acct tfa SET (DocumentNo)=( "")
								.append(sql_select).append("") ""
								+ ""WHERE AD_PInstance_ID=? "")
								.append(""AND tfa.AD_Table_ID= ?"");
	
		}
		else
		{
			String sql_select = ""SELECT tn.DocumentNo, d.C_DocType_ID, d.PrintName ""
									+ ""FROM "" + tableName +"" tn ""
										+ ""INNER JOIN C_DocType d ON (tn.C_DocType_ID=d.C_DocType_ID)""
									+ ""WHERE tfa.Record_ID=tn."" + tableName + ""_ID"";
		
			sb = new StringBuffer (""UPDATE T_Fact_Acct tfa SET (DocumentNo, C_DocType_ID, Name)=("")
								.append(sql_select).append("") ""
								+ ""WHERE AD_PInstance_ID=?"")
								.append(""AND tfa.AD_Table_ID=?"");
		}

		
		params.add(getAD_PInstance_ID());
		params.add(AD_Table_ID);
		
		no = DB.executeUpdate(sb.toString(), params, false, get_TrxName());
		log.finest(""Update - "" + sb);		
		log.fine(""AD_Table_ID : "" + AD_Table_ID + "" Table Name : "" + tableName + "" : Updated # : ""+no);
	}
"
org.compiere.report.core.RModelData.dispose,RModelData.java,"void dispose()
	{
		rows.clear();
		m_rows.clear();
		rowsMeta.clear();
		cols.clear();
	}   //  dispose
"
org.compiere.report.core.RModelData.query,RModelData.java,"void query (Ctx ctx, String whereClause, String orderClause)
	{
		RColumn rc = null;
		//  Create SQL
		StringBuffer sql = new StringBuffer (""SELECT "");
		int size = cols.size();
		for (int i = 0; i < size; i++)
		{
			rc = cols.get(i);
			if (i > 0)
				sql.append("","");
			sql.append(rc.getColSQL());
		}
		sql.append("" FROM "").append(m_TableName).append("" "").append(RModel.TABLE_ALIAS);
		if (whereClause != null && whereClause.length() > 0)
			sql.append("" WHERE "").append(whereClause);
		String finalSQL = MRole.getDefault(ctx, false).addAccessSQL(
			sql.toString(), RModel.TABLE_ALIAS, MRole.SQL_FULLYQUALIFIED, MRole.SQL_RO);
		if (orderClause != null && orderClause.length() > 0)
			finalSQL += "" ORDER BY "" + orderClause;
		log.fine(finalSQL);

		//  FillData
		int index = 0;      //  rowset index
		m_rows.clear();
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(finalSQL, null);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				ArrayList<Object> row = new ArrayList<Object>(size);
				index = 1;
				//  Columns
				for (int i = 0; i < size; i++)
				{
					rc = cols.get(i);
					//  Get ID
					if (rc.isIDcol())
						row.add(new KeyNamePair (rs.getInt(index++), rs.getString(index++)));
					//  Null check
					else if (rs.getObject(index) == null)
					{
						index++;
						row.add(null);
					}
					else if (rc.getColClass() == String.class)
						row.add(rs.getString(index++));
					else if (rc.getColClass() == BigDecimal.class)
						row.add(rs.getBigDecimal(index++));
					else if (rc.getColClass() == Double.class)
						row.add(new Double(rs.getDouble(index++)));
					else if (rc.getColClass() == Integer.class)
						row.add(Integer.valueOf(rs.getInt(index++)));
					else if (rc.getColClass() == Timestamp.class)
						row.add(rs.getTimestamp(index++));
					else if (rc.getColClass() == Boolean.class)
						row.add(Boolean.valueOf(""Y"".equals(rs.getString(index++))));
					else    //  should not happen
					{
						row.add(rs.getString(index++));
					}
				}
				m_rows.add(row);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			if (index == 0)
				log.log(Level.SEVERE, finalSQL, e);
			else
				log.log(Level.SEVERE, ""Index="" + index + "","" + rc, e);
			e.printStackTrace();
		}
		process();
	}   //  query
"
org.compiere.report.core.RModelData.process,RModelData.java,"void process()
	{
		log.fine(""Start Rows="" + m_rows.size());

		//  Row level Funcions
		//  would come here

		//  Group by Values
		int gSize = groups.size();
		int[] groupBys = new int[gSize];
		Object[] groupBysValue = new Object[gSize];
		Object INITVALUE = new Object();
		for (int i = 0; i < gSize; i++)
		{
			groupBys[i] = (groups.get(i)).intValue();
			groupBysValue[i] = INITVALUE;
			log.fine(""GroupBy level="" + i + "" col="" + groupBys[i]);
		}
		//  Add additional row to force group change
		if (gSize > 0)
		{
			ArrayList<Object> newRow = new ArrayList<Object>();
			for (int c = 0; c < cols.size(); c++)
				newRow.add("""");
			m_rows.add(newRow);
		}

		//  Function Values - Function - GroupValue
		int fSize = functions.size();
		int[] funcCols = new int[fSize];
		String[] funcFuns = new String[fSize];
		int index = 0;
		Iterator<Integer> it = functions.keySet().iterator();
		while (it.hasNext())
		{
			Integer key = it.next();
			funcCols[index] = key.intValue();
			funcFuns[index] = functions.get(key);
			log.fine(""Function "" + funcFuns[index] + "" col="" + funcCols[index]);
			index++;
		}
		BigDecimal[][] funcVals = new BigDecimal [fSize][gSize+1];
		int totalIndex = gSize;  //  place for overall total
		log.fine(""FunctionValues = [ "" + fSize + "" * "" + (gSize+1) + "" ]"");
		for (int f = 0; f < fSize; f++)
			for (int g = 0; g < gSize+1; g++)
				funcVals[f][g] = Env.ZERO;

		rows.clear();
		//  Copy m_rows into rows
		for (int r = 0; r < m_rows.size(); r++)
		{
			ArrayList<Object> row = m_rows.get(r);
			//  do we have a group break
			boolean[] haveBreak = new boolean[groupBys.length];
			for (int level = 0; level < groupBys.length; level ++)
			{
				int idx = groupBys[level];
				if (groupBysValue[level] == INITVALUE)
					haveBreak[level] = false;
				else if (!groupBysValue[level].equals(row.get(idx)))
					haveBreak[level] = true;
				else
					haveBreak[level] = false;
				//  previous level had a break
				if (level > 0 && haveBreak[level-1])
					haveBreak[level] = true;
			}
			//  create group levels - reverse order
			for (int level = groupBys.length-1; level >= 0; level--)
			{
				int idx = groupBys[level];
				if (groupBysValue[level] == INITVALUE)
					groupBysValue[level] = row.get(idx);
				else if (haveBreak[level])
				{
				//	log.fine( ""GroupBy Change level="" + level + "" col="" + idx + "" - "" + groupBysValue[level]);
					//  create new row
					ArrayList<Object> newRow = new ArrayList<Object>();
					for (int c = 0; c < cols.size(); c++)
					{
						if (c == idx)   //  the group column
						{
							if (groupBysValue[c] == null || groupBysValue[c].toString().length() == 0)
								newRow.add(""="");
							else
								newRow.add(groupBysValue[c]);
						}
						else
						{
							boolean found = false;
							for (int fc = 0; fc < funcCols.length; fc++)
							{
								if (c == funcCols[fc])
								{
								//	newRow.add(""fc= "" + fc + "" gl="" + level + "" "" + funcFuns[fc]);
									newRow.add(funcVals[fc][level]);
									funcVals[fc][level] = Env.ZERO;
									found = true;
								}
							}
							if (!found)
								newRow.add(null);
						}
					}   //  for all columns
					//
					m_groupRows.add(Integer.valueOf(rows.size())); //  group row indicator
					rows.add(newRow);
					groupBysValue[level] = row.get(idx);
				}
			}   //  for all groups

			//	functions
			for (int fc = 0; fc < funcCols.length; fc++)
			{
				int col = funcCols[fc];
				//  convert value to big decimal
				Object value = row.get(col);
				BigDecimal bd = Env.ZERO;
				if (value == null)
					;
				else if (value instanceof BigDecimal)
					bd = (BigDecimal)value;
				else
				{
					try {
						bd = new BigDecimal(value.toString());
					} catch (Exception e) { }
				}

				for (int level = 0; level < gSize+1; level++)
				{
					if (funcFuns[fc].equals(RModel.FUNCTION_SUM))
						funcVals[fc][level] = funcVals[fc][level].add(bd);
					else if (funcFuns[fc].equals(RModel.FUNCTION_COUNT))
						funcVals[fc][level] = funcVals[fc][level].add(ONE);
				}   //  for all group levels
			}   //  for all functions

			rows.add(row);
		}   //  for all m_rows

		//  total row
		if (functions.size() > 0)
		{
			ArrayList<Object> newRow = new ArrayList<Object>();
			for (int c = 0; c < cols.size(); c++)
			{
				boolean found = false;
				for (int fc = 0; fc < funcCols.length; fc++)
				{
					if (c == funcCols[fc])
					{
						newRow.add(funcVals[fc][totalIndex]);
						found = true;
					}
				}
				if (!found)
					newRow.add(null);
			}   //  for all columns
			//  remove empty row added earlier to force group change
			if (gSize > 0)
				rows.remove(rows.size()-1);
			m_groupRows.add(Integer.valueOf(rows.size())); //  group row indicator
			rows.add(newRow);
		}
		log.fine(""End Rows="" + rows.size());
		m_rows.clear();
	}   //  process
"
org.compiere.report.core.RModelData.isGroupRow,RModelData.java,"boolean isGroupRow (int row)
	{
		//  build boolean Array
		if (m_groupRowsIndicator == null)
		{
			m_groupRowsIndicator = new ArrayList<Boolean>(rows.size());
			for (int r = 0; r < rows.size(); r++)
				m_groupRowsIndicator.add(Boolean.valueOf(m_groupRows.contains(Integer.valueOf(r))));
		}
		if (row < 0 || row >= m_groupRowsIndicator.size())
			return false;
		return (m_groupRowsIndicator.get(row)).booleanValue();
	}   // isGroupRow
"
org.compiere.report.core.RModelData.moveRow,RModelData.java,"void moveRow (int from, int to)
	{
		if (from < 0 || to >= rows.size())
			throw new IllegalArgumentException(""Row from invalid"");
		if (to < 0 || to >= rows.size())
			throw new IllegalArgumentException(""Row to invalid"");
		//  Move Data
		ArrayList<Object> temp = rows.get(from);
		rows.remove(from);
		rows.add(to, temp);
		//  Move Description indicator >>> m_groupRows is not in sync after row move !!
		if (m_groupRowsIndicator != null)
		{
			Boolean tempB = m_groupRowsIndicator.get(from);
			m_groupRowsIndicator.remove(from);
			m_groupRowsIndicator.add(to, tempB);
		}
	}   //  moveRow
"
org.compiere.report.core.RModelData.getTableName,RModelData.java,"String getTableName()
	{
		return m_TableName;
	}
"
org.compiere.report.core.RModel.getRColumn,RModel.java,"RColumn getRColumn (int col)
	{
		if (col < 0 || col > m_data.cols.size())
			throw new java.lang.IllegalArgumentException(""Column invalid"");
		return m_data.cols.get(col);
	}   //  getRColumn
"
org.compiere.report.core.RModel.addColumn,RModel.java,"void addColumn (RColumn rc)
	{
		m_data.cols.add(rc);
	}   //  addColumn
"
org.compiere.report.core.RModel.addColumn,RModel.java,"void addColumn (RColumn rc, int index)
	{
		m_data.cols.add(index, rc);
	}   //  addColumn
"
org.compiere.report.core.RModel.addRow,RModel.java,"void addRow ()
	{
		m_data.rows.add(new ArrayList<Object>());
		m_data.rowsMeta.add(null);
	}   //  addRow
"
org.compiere.report.core.RModel.addRow,RModel.java,"void addRow (int index)
	{
		m_data.rows.add(index, new ArrayList<Object>());
		m_data.rowsMeta.add(index, null);
	}   //  addRow
"
org.compiere.report.core.RModel.addRow,RModel.java,"void addRow (ArrayList<Object> l)
	{
		m_data.rows.add(l);
		m_data.rowsMeta.add(null);
	}   //  addRow
"
org.compiere.report.core.RModel.addRow,RModel.java,"void addRow (ArrayList<Object> l, int index)
	{
		m_data.rows.add(index, l);
		m_data.rowsMeta.add(index, null);
	}   //  addRow
"
org.compiere.report.core.RModel.getColumnIndex,RModel.java,"int getColumnIndex (String columnName)
	{
		if (columnName == null || columnName.length() == 0)
			return -1;
		//
		for (int i = 0; i < m_data.cols.size(); i++)
		{
			RColumn rc = m_data.cols.get(i);
		//	log.fine( ""Column "" + i + "" "" + rc.getColSQL() + "" ? "" + columnName);
			if (rc.getColSQL().startsWith(columnName))
			{
				log.fine( ""Column "" + i + "" "" + rc.getColSQL() + "" = "" + columnName);
				return i;
			}
		}
		return -1;
	}   //  getColumnIndex
"
org.compiere.report.core.RModel.query,RModel.java,"void query (Ctx ctx, String whereClause, String orderClause)
	{
		m_data.query (ctx, whereClause, orderClause);
	}   //  query
"
org.compiere.report.core.RModel.setGroup,RModel.java,"void setGroup (String columnName)
	{
		setGroup(getColumnIndex(columnName));
	}   //  setGroup
"
org.compiere.report.core.RModel.setGroup,RModel.java,"void setGroup (int col)
	{
		log.config( ""RModel.setGroup col="" + col);
		if (col < 0 || col >= m_data.cols.size())
			return;
		Integer ii = Integer.valueOf(col);
		if (!m_data.groups.contains(ii))
			m_data.groups.add(ii);
	}   //  setGroup
"
org.compiere.report.core.RModel.isGroupRow,RModel.java,"boolean isGroupRow (int row)
	{
		return m_data.isGroupRow(row);
	}   // isGroupRow
"
org.compiere.report.core.RModel.setFunction,RModel.java,"void setFunction (String columnName, String function)
	{
		setFunction(getColumnIndex(columnName), function);
	}   //  setFunction
"
org.compiere.report.core.RModel.setFunction,RModel.java,"void setFunction (int col, String function)
	{
		log.config( ""RModel.setFunction col="" + col + "" - "" + function);
		if (col < 0 || col >= m_data.cols.size())
			return;
		m_data.functions.put(Integer.valueOf(col), function);
	}   //  setFunction
"
org.compiere.report.core.RModel.getRowCount,RModel.java,"int getRowCount()
	{
		return m_data.rows.size();
	}   //  getRowCount
"
org.compiere.report.core.RModel.getColumnCount,RModel.java,"int getColumnCount()
	{
		return m_data.cols.size();
	}   //  getColumnCount
"
org.compiere.report.core.RModel.getColumnName,RModel.java,"String getColumnName (int col)
	{
		if (col < 0 || col > m_data.cols.size())
			throw new java.lang.IllegalArgumentException(""Column invalid"");
		RColumn rc = m_data.cols.get(col);
		if (rc != null)
			return rc.getColHeader();
		return null;
	}   //  getColumnName
"
org.compiere.report.core.RModel.getColumnClass,RModel.java,"Class<?> getColumnClass (int col)
	{
		if (col < 0 || col > m_data.cols.size())
			throw new java.lang.IllegalArgumentException(""Column invalid"");
		RColumn rc = m_data.cols.get(col);
		if (rc != null)
			return rc.getColClass();
		return null;
	}   //  getColumnC;ass
"
org.compiere.report.core.RModel.isCellEditable,RModel.java,"boolean isCellEditable (int rowIndex, int columnIndex)
	{
		return m_editable;
	}   //  isCellEditable
"
org.compiere.report.core.RModel.getValueAt,RModel.java,"Object getValueAt(int row, int col)
	{
		//  invalid row
		if (row < 0 || row >= m_data.rows.size())
			return null;
	//		throw new java.lang.IllegalArgumentException(""Row invalid"");
		if (col < 0 || col >= m_data.cols.size())
			return null;
	//		throw new java.lang.IllegalArgumentException(""Column invalid"");
		//
		ArrayList<?> myRow = m_data.rows.get(row);
		//  invalid column
		if (myRow == null || col >= myRow.size())
			return null;
		//  setValue
		return myRow.get(col);
	}   //  getValueAt
"
org.compiere.report.core.RModel.sort,RModel.java,"void sort(final boolean asc, final int sortCol) {
		if(m_data.rows.size() == 0)
			return;
		
			if (m_data.rows.get(0).get(sortCol) instanceof Number) {

				Collections.sort(m_data.rows, new Comparator<ArrayList<Object>>() {
					@Override
					public int compare(ArrayList<Object> a1, ArrayList<Object> a2) {
						
						Object o1 = a1.get(sortCol);
						Object o2 = a2.get(sortCol);
						if(o1 == null || o1.toString().equals(""""))
							return asc ? -1 : 1;
						if(o2 == null || o2.toString().equals(""""))
							return asc ? 1 : -1;

						BigDecimal s1 = new BigDecimal( o1.toString());
						BigDecimal s2 = new BigDecimal( o2.toString() );
						return asc ? s1.compareTo( s2 ) : s2.compareTo( s1 );
					}
				});

			} else if (m_data.rows.get(0).get(sortCol) instanceof Date) {
				Collections.sort(m_data.rows, new Comparator<ArrayList<Object>>() {
					@Override
					public int compare(ArrayList<Object> a1, ArrayList<Object> a2) {
						Object o1 = a1.get(sortCol);
						Object o2 = a2.get(sortCol);
						if(o1 == null || o1.toString().equals(""""))
							return asc ? -1 : 1;
						if(o2 == null || o2.toString().equals(""""))
							return asc ? 1 : -1;

						Date s1 = (Date)(o1);
						Date s2 = (Date)(o2);
						return asc ? s1.compareTo( s2 ) : s2.compareTo( s1 );
					}
				});

			} else {
				Collections.sort(m_data.rows, new Comparator<ArrayList<Object>>() {
					@Override
					public int compare(ArrayList<Object> a1, ArrayList<Object> a2) {
						Object o1 = a1.get(sortCol);
						Object o2 = a2.get(sortCol);
						if(o1 == null || o1.toString().equals(""""))
							return asc ? -1 : 1;
						if(o2 == null || o2.toString().equals(""""))
							return asc ? 1 : -1;
						String s1 = o1.toString();
						String s2 = o2.toString();
						return asc ? s1.compareTo( s2 ) : s2.compareTo( s1 );
					}
				});
			}
	}
"
org.compiere.report.core.RModel.compare,RModel.java,"int compare(ArrayList<Object> a1, ArrayList<Object> a2) {
						
						Object o1 = a1.get(sortCol);
						Object o2 = a2.get(sortCol);
						if(o1 == null || o1.toString().equals(""""))
							return asc ? -1 : 1;
						if(o2 == null || o2.toString().equals(""""))
							return asc ? 1 : -1;

						BigDecimal s1 = new BigDecimal( o1.toString());
						BigDecimal s2 = new BigDecimal( o2.toString() );
						return asc ? s1.compareTo( s2 ) : s2.compareTo( s1 );
					}
"
org.compiere.report.core.RModel.compare,RModel.java,"int compare(ArrayList<Object> a1, ArrayList<Object> a2) {
						Object o1 = a1.get(sortCol);
						Object o2 = a2.get(sortCol);
						if(o1 == null || o1.toString().equals(""""))
							return asc ? -1 : 1;
						if(o2 == null || o2.toString().equals(""""))
							return asc ? 1 : -1;

						Date s1 = (Date)(o1);
						Date s2 = (Date)(o2);
						return asc ? s1.compareTo( s2 ) : s2.compareTo( s1 );
					}
"
org.compiere.report.core.RModel.compare,RModel.java,"int compare(ArrayList<Object> a1, ArrayList<Object> a2) {
						Object o1 = a1.get(sortCol);
						Object o2 = a2.get(sortCol);
						if(o1 == null || o1.toString().equals(""""))
							return asc ? -1 : 1;
						if(o2 == null || o2.toString().equals(""""))
							return asc ? 1 : -1;
						String s1 = o1.toString();
						String s2 = o2.toString();
						return asc ? s1.compareTo( s2 ) : s2.compareTo( s1 );
					}
"
org.compiere.report.core.RModel.setValueAt,RModel.java,"void setValueAt(Object aValue, int row, int col)
	{
		//  invalid row
		if (row < 0 || row >= m_data.rows.size())
			throw new IllegalArgumentException(""Row invalid"");
		if (col < 0 || col >= m_data.cols.size())
			throw new IllegalArgumentException(""Column invalid"");
		if (!isCellEditable(row, col))
			throw new IllegalArgumentException(""Cell is read only"");
		//
		ArrayList<Object> myRow = m_data.rows.get(row);
		//  invalid row
		if (myRow == null)
			throw new java.lang.IllegalArgumentException(""Row not initialized"");
		//  not enough columns - add nulls
		if (col >= myRow.size())
			while (myRow.size() < m_data.cols.size())
				myRow.add(null);
		//  setValue
		myRow.set(col, aValue);
	}   //  setValueAt
"
org.compiere.report.core.RModel.moveRow,RModel.java,"void moveRow (int from, int to)
	{
		m_data.moveRow(from,to);
	}   //  moveRow
"
org.compiere.report.core.RModel.getTableName,RModel.java,"String getTableName()
	{
		return m_data.getTableName();
	}
"
org.compiere.report.core.ResultTable.setModel,ResultTable.java,"void setModel (RModel reportModel)
	{
		log.config(reportModel.toString());
		super.setModel(new ResultTableModel(reportModel));
		//
		TableColumnModel tcm = getColumnModel();
		//  Set Editor/Renderer
		for (int i = 0; i < tcm.getColumnCount(); i++)
		{
			TableColumn tc = tcm.getColumn(i);
			RColumn rc = reportModel.getRColumn(i);
			if (rc.getColHeader().equals(tc.getHeaderValue()))
			{
				ResultTableCellRenderer rtcr = new ResultTableCellRenderer(reportModel, rc);
				tc.setCellRenderer(rtcr);
				//
			}
			else
				log.log(Level.SEVERE, ""RColumn="" + rc.getColHeader() + "" <> TableColumn="" + tc.getHeaderValue());
		}
		autoSize();
	}   //  setModel
"
org.compiere.report.core.ResultTable.setModel,ResultTable.java,"void setModel (TableModel ignored)
	{
		//  throw new IllegalArgumentException(""Requires RModel"");  //  default construvtor calls this
		super.setModel(ignored);
	}   //  setModel
"
org.compiere.report.core.ResultTable.tableChanged,ResultTable.java,"void tableChanged(TableModelEvent e)
	{
		super.tableChanged(e);
		log.fine(""Type="" + e.getType());
	}   //  tableChanged
"
org.compiere.report.core.ResultTable.mouseClicked,ResultTable.java,"void mouseClicked(MouseEvent e)
	{
		int col = getColumnModel().getColumnIndexAtX(e.getX());
		log.fine(""Column "" + col + "" = "" + getColumnModel().getColumn(col).getHeaderValue()
			+ "", Table r="" + this.getSelectedRow() + "" c="" + this.getSelectedColumn());

		//  clicked Cell
		if (e.getSource() == this)
		{
		}
		//  clicked Header
		else
		{
			int mc = convertColumnIndexToModel(col);
			sort(mc);
		}
	}   //  mouseClicked
"
org.compiere.report.core.ResultTable.autoSize,ResultTable.java,"void autoSize()
	{
		log.config("""");
		//
		final int SLACK = 8;		//	making sure it fits in a column
		final int MAXSIZE = 300;    //	max size of a column
		//
		TableColumnModel tcm = getColumnModel();
		//  For all columns
		for (int col = 0; col < tcm.getColumnCount(); col++)
		{
			TableColumn tc = tcm.getColumn(col);
		//  log.config( ""Column="" + col, tc.getHeaderValue());
			int width = 0;

			//	Header
			TableCellRenderer renderer = tc.getHeaderRenderer();
			if (renderer == null)
				renderer = new DefaultTableCellRenderer();
			Component comp = renderer.getTableCellRendererComponent
				(this, tc.getHeaderValue(), false, false, 0, 0);
		//	log.fine( ""Hdr - preferred="" + comp.getPreferredSize().width + "", width="" + comp.getWidth());
			width = comp.getPreferredSize().width + SLACK;

			//	Cells
			int maxRow = Math.min(30, getRowCount());       //  first 30 rows
			for (int row = 0; row < maxRow; row++)
			{
				renderer = getCellRenderer(row, col);
				comp = renderer.getTableCellRendererComponent
					(this, getValueAt(row, col), false, false, row, col);
				int rowWidth = comp.getPreferredSize().width + SLACK;
				width = Math.max(width, rowWidth);
			}
			//	Width not greater ..
			width = Math.min(MAXSIZE, width);
			tc.setPreferredWidth(width);
		//	log.fine( ""width="" + width);
		}	//	for all columns
	}	//	autoSize
"
org.compiere.report.core.ResultTable.sort,ResultTable.java,"void sort (int modelColumnIndex)
	{
		int rows = getRowCount();
		if (rows == 0)
			return;
		//  other column
		if (modelColumnIndex != m_lastSortIndex)
			m_asc = true;
		else
			m_asc = !m_asc;

		m_lastSortIndex = modelColumnIndex;
		//
		log.config(""#"" + modelColumnIndex
			+ "" - rows="" + rows + "", asc="" + m_asc);
		ResultTableModel model = (ResultTableModel)getModel();

		//  Prepare sorting
		MSort sort = new MSort(0, null);
		sort.setSortAsc(m_asc);
		//  while something to sort
		sorting:
		while (true)
		{
			//  Create sortList
			ArrayList<MSort> sortList = new ArrayList<MSort>(rows);
			//	fill with data entity
			for (int i = 0; i < rows; i++)
			{
				Object value = model.getValueAt(i, modelColumnIndex);
				sortList.add(new MSort(i, value));
			}
			//	sort list it
			Collections.sort(sortList, sort);
			//  move out of sequence row
			for (int i = 0; i < rows; i++)
			{
				int index = (sortList.get(i)).index;
				if (i != index)
				{
			//		log.config( ""move "" + i + "" to "" + index);
					model.moveRow (i, index);
					continue sorting;
				}
			}
			//  we are done
		//	log.config( ""done"");
			break;
		}   //  while something to sort
	}   //  sort
"
org.compiere.report.core.ResultTableModel.getRowCount,ResultTableModel.java,"int getRowCount()
	{
		return m_model.getRowCount();
	}   //  getRowCount
"
org.compiere.report.core.ResultTableModel.getColumnCount,ResultTableModel.java,"int getColumnCount()
	{
		return m_model.getColumnCount();
	}   //  getColumnCount
"
org.compiere.report.core.ResultTableModel.getColumnName,ResultTableModel.java,"String getColumnName(int columnIndex)
	{
		return m_model.getColumnName(columnIndex);
	}   //  getColumnIndex
"
org.compiere.report.core.ResultTableModel.getColumnClass,ResultTableModel.java,"Class<?> getColumnClass(int columnIndex)
	{
		return m_model.getColumnClass(columnIndex);
	}   //  getColumnClass
"
org.compiere.report.core.ResultTableModel.isCellEditable,ResultTableModel.java,"boolean isCellEditable(int rowIndex, int columnIndex)
	{
		return false;
	}   //  isCellEditable
"
org.compiere.report.core.ResultTableModel.getValueAt,ResultTableModel.java,"Object getValueAt(int row, int col)
	{
		return m_model.getValueAt(row, col);
	}   //  getValueAt
"
org.compiere.report.core.ResultTableModel.setValueAt,ResultTableModel.java,"void setValueAt(Object aValue, int row, int col)
	{
		m_model.setValueAt(aValue, row, col);
		fireTableChanged(new TableModelEvent (this, row, row, col, TableModelEvent.UPDATE));
	}   //  setValueAt
"
org.compiere.report.core.ResultTableModel.moveRow,ResultTableModel.java,"void moveRow (int from, int to)
	{
		m_model.moveRow (from, to);
	}   //  moveRow
"
org.compiere.report.core.ResultTableCellEditor.getTableCellEditorComponent,ResultTableCellEditor.java,"Component getTableCellEditorComponent (JTable table, Object value,
		boolean isSelected, int row, int col)
	{
		if (m_rc == null)
			return null;
		return null;
	}   //  getTableCellEditorComponent
"
org.compiere.report.core.ResultTableCellEditor.getCellEditorValue,ResultTableCellEditor.java,"Object getCellEditorValue()
	{
		if (m_rc == null)
			return null;
		return null;
	}   //  getCellEditorValue
"
org.compiere.report.core.ResultTableCellEditor.isCellEditable,ResultTableCellEditor.java,"boolean isCellEditable(EventObject anEvent)
	{
		if (m_rc == null)
			return false;
		return !m_rc.isReadOnly();
	}   //  isCellEditable
"
org.compiere.report.core.ResultTableCellEditor.shouldSelectCell,ResultTableCellEditor.java,"boolean shouldSelectCell(EventObject anEvent)
	{
		if (m_rc == null)
			return false;
		return !m_rc.isReadOnly();
	}   //  shouldSelectCell
"
org.compiere.report.core.RColumn.getColHeader,RColumn.java,"String getColHeader()
	{
		return m_colHeader;
	}
"
org.compiere.report.core.RColumn.setColHeader,RColumn.java,"void setColHeader(String colHeader)
	{
		m_colHeader = colHeader;
	}
"
org.compiere.report.core.RColumn.getColSQL,RColumn.java,"String getColSQL()
	{
		return m_colSQL;
	}
"
org.compiere.report.core.RColumn.setColSQL,RColumn.java,"void setColSQL(String colSQL)
	{
		m_colSQL = colSQL;
	}
"
org.compiere.report.core.RColumn.isIDcol,RColumn.java,"boolean isIDcol()
	{
		return m_isIDcol;
	}
"
org.compiere.report.core.RColumn.getColClass,RColumn.java,"Class<?> getColClass()
	{
		return m_colClass;
	}
"
org.compiere.report.core.RColumn.setColClass,RColumn.java,"void setColClass(Class<?> colClass)
	{
		m_colClass = colClass;
	}
"
org.compiere.report.core.RColumn.getColSize,RColumn.java,"int getColSize()
	{
		return m_colSize;
	}   //  getColumnSize
"
org.compiere.report.core.RColumn.setColSize,RColumn.java,"void setColSize(int colSize)
	{
		m_colSize = colSize;
	}   //  getColumnSize
"
org.compiere.report.core.RColumn.getDisplayType,RColumn.java,"int getDisplayType()
	{
		return m_displayType;
	}   //  getDisplayType
"
org.compiere.report.core.RColumn.isReadOnly,RColumn.java,"boolean isReadOnly()
	{
		return m_readOnly;
	}
"
org.compiere.report.core.RColumn.setReadOnly,RColumn.java,"void setReadOnly(boolean readOnly)
	{
		m_readOnly = readOnly;
	}
"
org.compiere.report.core.RColumn.setColorColumn,RColumn.java,"void setColorColumn(boolean colorColumn)
	{
		m_colorColumn = colorColumn;
	}
"
org.compiere.report.core.RColumn.isColorColumn,RColumn.java,"boolean isColorColumn()
	{
		return m_colorColumn;
	}
"
org.compiere.report.core.RColumn.toString,RColumn.java,"String toString()
	{
		StringBuffer sb = new StringBuffer(""RColumn["");
		sb.append(m_colSQL).append(""="").append(m_colHeader)
			.append(""]"");
		return sb.toString();
	}	//	toString
"
org.compiere.report.core.ResultTableCellRenderer.getTableCellRendererComponent,ResultTableCellRenderer.java,"Component getTableCellRendererComponent(JTable table, Object value,
		boolean isSelected, boolean hasFocus, int row, int col)
	{
		//  Get Component
		Component c = m_check;
		if (c == null)  //  default JLabel
			c = super.getTableCellRendererComponent(table,value, isSelected,hasFocus, row,col);
		//  Background
		if (m_rm.isCellEditable(row, col))
			c.setBackground(CompierePLAF.getFieldBackground_Normal());
		else
			c.setBackground(CompierePLAF.getFieldBackground_Inactive());
		//
		if (m_rm.isGroupRow(row))
			c.setFont(c.getFont().deriveFont(Font.BOLD));
		//  Value
		setValue (value);
		return c;
	}   //  getTableCellRendererComponent
"
org.compiere.report.core.ResultTableCellRenderer.setValue,ResultTableCellRenderer.java,"void setValue (Object value)
	{
		//  Boolean
		if (m_check != null)
		{
			boolean sel = false;
			if (value != null && ((Boolean)value).booleanValue())
				sel = true;
			m_check.setSelected(sel);
			return;
		}

		//  JLabel
		if (value == null)
			setText("""");
		else if (m_nFormat != null)
			try
			{
				setText(m_nFormat.format(value));
			}
			catch (Exception e)
			{
				setText(value.toString());
			}
		else if (m_dFormat != null)
			try
			{
				setText(m_dFormat.format(value));
			}
			catch (Exception e)
			{
				setText(value.toString());
			}
		else
			setText(value.toString());
	}   //  setValue
"
org.compiere.sla.SLAGoalProcess.prepare,SLAGoalProcess.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
		p_PA_SLA_Goal_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.sla.SLAGoalProcess.doIt,SLAGoalProcess.java,"String doIt () throws Exception
	{
		log.info (""PA_SLA_Goal_ID="" + p_PA_SLA_Goal_ID);
		MSLAGoal goal = new MSLAGoal(getCtx(), p_PA_SLA_Goal_ID, get_TrxName());
		if (goal.get_ID() == 0)
			throw new CompiereUserException(""@PA_SLA_Goal_ID@ "" + p_PA_SLA_Goal_ID);

		MSLACriteria criteria = new MSLACriteria(getCtx(), goal.getPA_SLA_Criteria_ID(), get_TrxName());
		if (criteria.get_ID() == 0)
			throw new CompiereUserException(""@PA_SLA_Criteria_ID@ "" + goal.getPA_SLA_Criteria_ID());
		
		SLACriteria pgm = criteria.newInstance();
		int no = pgm.createMeasures(goal);
		//
		goal.setMeasureActual(pgm.calculateMeasure(goal));
		goal.setDateLastRun(new Timestamp(System.currentTimeMillis()));
		goal.save();
		//
		return ""@Created@ "" + no + "" - @MeasureActual@="" + goal.getMeasureActual();
	}	//	doIt
"
org.compiere.sla.SLACriteria.createMeasures,SLACriteria.java,"int createMeasures (MSLACriteria criteria)
	{
		int counter = 0;
		MSLAGoal[] goals = criteria.getGoals();
		for (MSLAGoal goal : goals) {
			if (goal.isActive())
				counter += createMeasures (goal);
		}
		return counter;
	}	//	createMeasures
"
org.compiere.sla.SLACriteria.calculateMeasures,SLACriteria.java,"void calculateMeasures (MSLACriteria criteria)
	{
		MSLAGoal[] goals = criteria.getGoals();
		for (MSLAGoal goal : goals) {
			if (goal.isActive())
			{
				goal.setMeasureActual(calculateMeasure(goal));
				goal.setDateLastRun(new Timestamp(System.currentTimeMillis()));
				goal.save();
			}
		}
	}	//	calculateMeasures
"
org.compiere.sla.DeliveryAccuracy.createMeasures,DeliveryAccuracy.java,"int createMeasures (MSLAGoal goal)
	{
		String sql = ""SELECT M_InOut_ID, io.MovementDate-o.DatePromised,"" 	//	1..2
			+ "" io.MovementDate, o.DatePromised, o.DocumentNo ""
			+ ""FROM M_InOut io""
			+ "" INNER JOIN C_Order o ON (io.C_Order_ID=o.C_Order_ID) ""
			+ ""WHERE io.C_BPartner_ID=?""
			+ "" AND NOT EXISTS ""
				+ ""(SELECT * FROM PA_SLA_Measure m ""
				+ ""WHERE m.PA_SLA_Goal_ID=?""
				+ "" AND m.AD_Table_ID="" + X_M_InOut.Table_ID
				+ "" AND m.Record_ID=io.M_InOut_ID)"";
		int counter = 0;
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, goal.getC_BPartner_ID());
			pstmt.setInt (2, goal.getPA_SLA_Goal_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				int M_InOut_ID = rs.getInt(1);
				BigDecimal MeasureActual = rs.getBigDecimal(2);
				Timestamp MovementDate = rs.getTimestamp(3);
				String Description = rs.getString(5) + "": "" + rs.getTimestamp(4);
				if (goal.isDateValid(MovementDate))
				{
					MSLAMeasure measure = new MSLAMeasure(goal, MovementDate, 
						MeasureActual, Description);
					measure.setLink(X_M_InOut.Table_ID, M_InOut_ID);
					if (measure.save())
						counter++;
				}
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""createMeasures"", e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return counter;
	}	//	createMeasures
"
org.compiere.sla.DeliveryAccuracy.calculateMeasure,DeliveryAccuracy.java,"BigDecimal calculateMeasure (MSLAGoal goal)
	{
		//	Average
		BigDecimal retValue = Env.ZERO;
		BigDecimal total = Env.ZERO;
		int count = 0;
		//
		MSLAMeasure[] measures = goal.getAllMeasures();
		for (MSLAMeasure measure : measures) {
			if (!measure.isActive() 
				|| (goal.getValidFrom() != null && measure.getDateTrx().before(goal.getValidFrom()))
				|| (goal.getValidTo() != null && measure.getDateTrx().after(goal.getValidTo())))
				continue;
			//
			total = total.add(measure.getMeasureActual());
			count++;
			//
			if (!measure.isProcessed())
			{
				measure.setProcessed(true);
				measure.save();
			}
		}
		//	Goal Expired
		if (goal.getValidTo() != null 
			&& goal.getValidTo().after(new Timestamp(System.currentTimeMillis())))
			goal.setProcessed(true);
			
		//	Calculate with 2 digits precision
		if (count != 0)
			retValue = total.divide(new BigDecimal(count), 2, BigDecimal.ROUND_HALF_UP);
		return retValue;
	}	//	calculateMeasure
"
org.compiere.sla.SLAMeasureProcess.prepare,SLAMeasureProcess.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
		p_PA_SLA_Measure_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.sla.SLAMeasureProcess.doIt,SLAMeasureProcess.java,"String doIt () throws Exception
	{
		log.info (""PA_SLA_Measure_ID="" + p_PA_SLA_Measure_ID);
		MSLAMeasure measure = new MSLAMeasure (getCtx(), p_PA_SLA_Measure_ID, get_TrxName());
		if (measure.get_ID() == 0)
			throw new CompiereUserException(""@PA_SLA_Measure_ID@ "" + p_PA_SLA_Measure_ID);
		
		MSLAGoal goal = new MSLAGoal(getCtx(), measure.getPA_SLA_Goal_ID(), get_TrxName());
		if (goal.get_ID() == 0)
			throw new CompiereUserException(""@PA_SLA_Goal_ID@ "" + measure.getPA_SLA_Goal_ID());

		MSLACriteria criteria = new MSLACriteria(getCtx(), goal.getPA_SLA_Criteria_ID(), get_TrxName());
		if (criteria.get_ID() == 0)
			throw new CompiereUserException(""@PA_SLA_Criteria_ID@ "" + goal.getPA_SLA_Criteria_ID());
		
		SLACriteria pgm = criteria.newInstance();
		//
		goal.setMeasureActual(pgm.calculateMeasure(goal));
		goal.setDateLastRun(new Timestamp(System.currentTimeMillis()));
		goal.save();
		//
		return ""@MeasureActual@="" + goal.getMeasureActual();
	}	//	doIt
"
org.compiere.cm.WebProjectDeploy.prepare,WebProjectDeploy.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""CM_WebProject_ID""))
				p_CM_WebProject_ID = element.getParameterAsInt();
			else if (name.equals(""ReDeploy""))
				if (element.getParameter().toString ().equals (""Y""))
					p_isRedeploy = true;
				else 
					p_isRedeploy = false;
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.cm.WebProjectDeploy.doIt,WebProjectDeploy.java,"String doIt ()
		throws Exception
	{
		org.compiere.cm.CacheHandler thisHandler = new org.compiere.cm.CacheHandler
		(org.compiere.cm.CacheHandler.convertJNPURLToCacheURL
			(getCtx().getContext(""java.naming.provider.url"")), log, getCtx(), get_TrxName());
		
		log.info(""CM_WebProject_ID="" + p_CM_WebProject_ID);
		m_project = new MWebProject(getCtx(), p_CM_WebProject_ID, get_TrxName());
		if (m_project.get_ID() != p_CM_WebProject_ID)
			throw new CompiereUserException(""@NotFound@ @CM_WebProject_ID@ "" + p_CM_WebProject_ID);
		
		log.log (Level.INFO, ""Starting media deployment"");
		//	Deploy Media
		MMediaServer[] mserver = MMediaServer.getMediaServer(m_project);
			
		for (MMediaServer element : mserver) {
			log.log (Level.INFO, ""Media Server deployment started on: "" + mserver.toString ());
			if (p_isRedeploy)
				element.reDeployAll ();
			element.deploy();
			log.log (Level.INFO, ""Media Server deployment finished on: "" + mserver.toString ());
		}
		
		//	Stage
		MCStage[] stages = MCStage.getStages(m_project);
		for (MCStage element : stages)
			m_map.put(Integer.valueOf(element.getCM_CStage_ID()), element);
		
		//	Copy Stage Tree
		MTree treeS = new MTree (getCtx(), m_project.getAD_TreeCMS_ID(), false, false, get_TrxName());
		CTreeNode root = treeS.getRoot();
		copyStage(root, ""/"", p_isRedeploy);
		
		//	Delete Inactive Containers
		MContainer[] containers = MContainer.getContainers(m_project);
		for (MContainer container : containers) {
			if (!m_idList.contains(Integer.valueOf(container.getCM_Container_ID())))
			{
				String name = container.getName();
				if (container.delete(true))
					log.fine(""Deleted: "" + name);
				else	//	e.g. was referenced
				{
					log.warning(""Failed Delete: "" + name);
					addLog(0,null,null, ""@Error@ @Delete@: "" + name);
				}
			}
			// Remove Container from cache
			thisHandler.cleanContainer(container.get_ID());
		}	//	Delete Inactive

		//	Sync Stage & Container Tree
		MTreeNodeCMS nodesCMS[] = MTreeNodeCMS.getTree(getCtx(), m_project.getAD_TreeCMS_ID(), get_TrxName());
		MTreeNodeCMC nodesCMC[] = MTreeNodeCMC.getTree(getCtx(), m_project.getAD_TreeCMC_ID(), get_TrxName());
		for (MTreeNodeCMS nodeCMS : nodesCMS) {
			int Node_ID = nodeCMS.getNode_ID();
			for (MTreeNodeCMC nodeCMC : nodesCMC) {
				if (nodeCMC.getNode_ID() == Node_ID)
				{
					//if (nodeCMS.getParent_ID()!=0) 
						nodeCMC.setParent_ID(nodeCMS.getParent_ID());
					nodeCMC.setSeqNo(nodeCMS.getSeqNo());
					nodeCMC.save();
					break;
				}
			}
		}	//	for all stage nodes
		// Clean ContainerTree Cache
		thisHandler.cleanContainerTree (p_CM_WebProject_ID);
	
		return ""@Copied@ @CM_Container_ID@ #"" + m_idList.size();
	}	//	doIt
"
org.compiere.cm.WebProjectDeploy.copyStage,WebProjectDeploy.java,"void copyStage (CTreeNode node, String path, boolean isRedeploy)
	{
		org.compiere.cm.CacheHandler thisHandler = new org.compiere.cm.CacheHandler
		(org.compiere.cm.CacheHandler.convertJNPURLToCacheURL
			(getCtx().getContext(""java.naming.provider.url"")), log, getCtx(), get_TrxName());
		Integer ID = Integer.valueOf(node.getNode_ID());
		MCStage stage = m_map.get(ID);
		//	
		int size = node.getChildCount();
		for (int i = 0; i < size; i++)
		{
			CTreeNode child = (CTreeNode)node.getChildAt(i);
			ID = Integer.valueOf(child.getNode_ID());
			stage = m_map.get(ID);
			if (stage == null)
			{
				log.warning(""Not Found ID="" + ID);
				continue;
			}
			if (!stage.isActive())
				continue;
			// If we have a stage and it is modified we will update!
			if (stage != null)
			{
				if (isRedeploy || stage.isModified () || stage.isSummary ())
				{
					log.log (Level.INFO, ""Deploying container: "" + path + stage.toString ());
					MContainer cc = MContainer.deploy (m_project, stage, path);
					if (cc != null)
					{
						addLog (0, null, null, ""@Updated@: "" + cc.getName());
						m_idList.add(ID);
					}
					// Remove Container from cache
					thisHandler.cleanContainer(cc.get_ID());
					// Reset Modified flag...
					stage.setIsModified(false);
					stage.save(stage.get_Trx());
				} else {
					// If not modified we should check update status...
					// But even if updtodate we need to add it to the list, because otherwise it will get deleted!
					m_idList.add (ID);
				}
			}
			if (child.isSummary())
				copyStage (child, path + stage.getRelativeURL() + ""/"", isRedeploy);
		}
	}	//	copyStage
"
org.compiere.cm.CalloutTemplate.invalidate,CalloutTemplate.java,"String invalidate (Ctx ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		//	Summary ?
		if (mTab.getValue(""IsSummary"")!=null)
		{
			mTab.setValue(""IsValid"", false);
			return """";
		}
		return """";
	}	//	charge
"
org.compiere.cm.MediaDirectDeploy.prepare,MediaDirectDeploy.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			//else if (name.equals(""CM_WebProject_ID""))
				//p_CM_WebProject_ID = ((BigDecimal)para[i].getParameter()).intValue();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	} // prepare
"
org.compiere.cm.MediaDirectDeploy.doIt,MediaDirectDeploy.java,"String doIt ()
		throws Exception
	{
		MMedia thisMedia = new MMedia(getCtx(), getRecord_ID(), get_TrxName());
		MMediaServer[] theseServers = MMediaServer.getMediaServer (thisMedia.getWebProject ());
		if (theseServers!=null)
		{
			for (MMediaServer element : theseServers) {
				MMediaDeploy thisDeploy = MMediaDeploy.getByMedia (getCtx(), getRecord_ID(), element.get_ID(), true, get_TrxName());
				thisDeploy.setIsDeployed (false);
				thisDeploy.save(get_TrxName());
				thisDeploy.load (get_TrxName());
				get_TrxName().commit ();
				element.deploy ();
			}
		}
		return null;
	}
"
org.compiere.cm.CacheClearAll.prepare,CacheClearAll.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			//else if (name.equals(""CM_WebProject_ID""))
				//p_CM_WebProject_ID = ((BigDecimal)para[i].getParameter()).intValue();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	} // prepare
"
org.compiere.cm.CacheClearAll.doIt,CacheClearAll.java,"String doIt ()
		throws Exception
	{
		MTemplate thisTemplate = new MTemplate(getCtx (), getRecord_ID (), get_TrxName ());
		thisTemplate.setIsValid (true);
		thisTemplate.save ();
		return null;
	}
"
org.compiere.cm.CacheClearServer.prepare,CacheClearServer.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			//else if (name.equals(""CM_WebProject_ID""))
				//p_CM_WebProject_ID = ((BigDecimal)para[i].getParameter()).intValue();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	} // prepare
"
org.compiere.cm.CacheClearServer.doIt,CacheClearServer.java,"String doIt ()
		throws Exception
	{
		MTemplate thisTemplate = new MTemplate(getCtx (), getRecord_ID (), get_TrxName ());
		thisTemplate.setIsValid (true);
		thisTemplate.save ();
		return null;
	}
"
org.compiere.cm.TemplateValidate.prepare,TemplateValidate.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			//else if (name.equals(""CM_WebProject_ID""))
				//p_CM_WebProject_ID = ((BigDecimal)para[i].getParameter()).intValue();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	} // prepare
"
org.compiere.cm.TemplateValidate.doIt,TemplateValidate.java,"String doIt ()
		throws Exception
	{
		MTemplate thisTemplate = new MTemplate(getCtx (), getRecord_ID (), get_TrxName ());
		thisTemplate.setIsValid (true);
		thisTemplate.save ();
		return null;
	}
"
org.compiere.cm.CacheHandler.cleanTemplate,CacheHandler.java,"void cleanTemplate(Integer ID) {
		cleanTemplate("""" + ID);
	}
"
org.compiere.cm.CacheHandler.cleanTemplate,CacheHandler.java,"void cleanTemplate(String ID) {
		runURLRequest(""Template"", ID);
	}
"
org.compiere.cm.CacheHandler.emptyTemplate,CacheHandler.java,"void emptyTemplate() {
		runURLRequest(""Template"", ""0"");
	}
"
org.compiere.cm.CacheHandler.cleanContainer,CacheHandler.java,"void cleanContainer(Integer ID) {
		cleanContainer("""" + ID);
	}
"
org.compiere.cm.CacheHandler.cleanContainer,CacheHandler.java,"void cleanContainer(String ID) {
		runURLRequest(""Container"", ID);
	}
"
org.compiere.cm.CacheHandler.cleanContainerTree,CacheHandler.java,"void cleanContainerTree(Integer ID) {
		cleanContainerTree("""" + ID);
	}
"
org.compiere.cm.CacheHandler.cleanContainerTree,CacheHandler.java,"void cleanContainerTree(String ID) {
		runURLRequest(""ContainerTree"", ID);
	}
"
org.compiere.cm.CacheHandler.cleanContainerElement,CacheHandler.java,"void cleanContainerElement(Integer ID) {
		cleanContainerElement("""" + ID);
	}
"
org.compiere.cm.CacheHandler.cleanContainerElement,CacheHandler.java,"void cleanContainerElement(String ID) {
		runURLRequest(""ContainerElement"", ID);
	}
"
org.compiere.cm.CacheHandler.runURLRequest,CacheHandler.java,"void runURLRequest(String cache, String ID) {
		String thisURL = null;
		for (String element : cacheURLs) {
			try {
				thisURL = ""http://"" + element + ""/cache/Service?Cache="" + cache + ""&ID="" + ID;
				URL url = new URL(thisURL);
				Proxy thisProxy = Proxy.NO_PROXY;
				
			    URLConnection urlConn = url.openConnection(thisProxy);
			    urlConn.setUseCaches(false);
			    urlConn.connect();
			    Reader stream =             new java.io.InputStreamReader(
			                                urlConn.getInputStream());
			    StringBuffer srvOutput = new StringBuffer();

			    	try {
			    		int c;
			    		while ( (c=stream.read()) != -1 )
			    			srvOutput.append( (char)c );
			    		
			    	} catch (Exception E2) {
			    		E2.printStackTrace();
			    	}
			    	
			    stream.close();
			} catch (IOException E) {
				if (log!=null)
					log.warning(""Can't clean cache at:"" + thisURL + "" be carefull, your deployment server may use invalid or old cache data!"");
			}
		}
	}
"
org.compiere.cm.CacheHandler.convertJNPURLToCacheURL,CacheHandler.java,"String convertJNPURLToCacheURL(String JNPURL) {
		if (JNPURL.indexOf(""jnp://"")>=0) {
			JNPURL = JNPURL.substring(JNPURL.indexOf(""jnp://"")+6);
		}
		if (JNPURL.indexOf("":"")>=0) {
			JNPURL = JNPURL.substring(0,JNPURL.indexOf("":""));
		}
		if (JNPURL.length()>0) {
			return JNPURL;
		} else {
			return null;
		}
	}
"
org.compiere.cm.CStageValidate.prepare,CStageValidate.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_CM_CStage_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.cm.CStageValidate.doIt,CStageValidate.java,"String doIt ()
		throws Exception
	{
		log.info(""CM_CStage_ID="" + p_CM_CStage_ID);
		MCStage stage = new MCStage (getCtx(), p_CM_CStage_ID, get_TrxName());
		return stage.validate();
	}	//	doIt
"
org.compiere.process.InOutCreateConfirm.prepare,InOutCreateConfirm.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) 
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""ConfirmType""))
				p_ConfirmType = (String)element.getParameter();
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
		p_M_InOut_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.InOutCreateConfirm.doIt,InOutCreateConfirm.java,"String doIt () throws Exception
	{
		log.info(""M_InOut_ID="" + p_M_InOut_ID + "", Type="" + p_ConfirmType);
		MInOut shipment = new MInOut (getCtx(), p_M_InOut_ID, null);
		if (shipment.get_ID() == 0)
			throw new IllegalArgumentException(""Not found M_InOut_ID="" + p_M_InOut_ID);
		//
		MInOutConfirm confirm = MInOutConfirm.create (shipment, p_ConfirmType, true);
		if (confirm == null)
			throw new Exception (""Cannot create Confirmation for "" + shipment.getDocumentNo());
		//
		return confirm.getDocumentNo();
	}	//	doIt
"
org.compiere.process.ProjectClose.prepare,ProjectClose.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
		m_C_Project_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.ProjectClose.doIt,ProjectClose.java,"String doIt() throws Exception
	{
		MProject project = new MProject (getCtx(), m_C_Project_ID, get_TrxName());
		log.info(""doIt - "" + project);

		MProjectLine[] projectLines = project.getLines();
		if (X_C_Project.PROJECTCATEGORY_WorkOrderJob.equals(project.getProjectCategory())
			|| X_C_Project.PROJECTCATEGORY_AssetProject.equals(project.getProjectCategory()))
		{
			/** @todo Check if we should close it */
		}

		//	Close lines
		for (MProjectLine element : projectLines) {
			element.setProcessed(true);
			element.save();
		}

		project.setProcessed(true);
		project.save();

		return """";
	}	//	doIt
"
org.compiere.process.LeadBPartner.prepare,LeadBPartner.java,"void prepare()
	{
		p_C_Lead_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.LeadBPartner.doIt,LeadBPartner.java,"String doIt()
	    throws Exception
	{
		log.info(""C_Lead_ID="" + p_C_Lead_ID);
		if (p_C_Lead_ID == 0)
			throw new CompiereUserException(""@C_Lead_ID@ ID=0"");
		MLead lead = new MLead (getCtx(), p_C_Lead_ID, get_TrxName());
		if (lead.get_ID() != p_C_Lead_ID)
			throw new CompiereUserException(""@NotFound@: @C_Lead_ID@ ID="" + p_C_Lead_ID);
		//
		String retValue = lead.createBP();
		if (retValue != null)
			throw new CompiereSystemException(retValue);
		lead.save();
		//
		MBPartner bp = lead.getBPartner();
		if (bp != null)
			return ""@C_BPartner_ID@: "" + bp.getName();
		MUser user = lead.getUser();
		if (user != null)
			return ""@AD_User_ID@: "" + user.getName();
		return ""@SaveError@"";
	}	//	doIt
"
org.compiere.process.RemoteSetupVO.toString,RemoteSetupVO.java,"String toString()
	{
		return ""RemoteSetupVO[test="" + Test
			+ "",IDRange="" + IDRangeStart + ""-"" + IDRangeEnd
			+ "",AD_Client_ID="" + AD_Client_ID + "",AD_Org_ID="" + AD_Org_ID
			+ "",Prefix="" + Prefix + "",Suffix="" + Suffix
			+ ""]"";
	}	//	toString
"
org.compiere.process.ImportDelete.prepare,ImportDelete.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) 
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_Table_ID""))
				p_AD_Table_ID = ((BigDecimal)element.getParameter()).intValue();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.ImportDelete.doIt,ImportDelete.java,"String doIt() throws Exception
	{
		log.info(""AD_Table_ID="" + p_AD_Table_ID);
		//	get Table Info
		MTable table = new MTable (getCtx(), p_AD_Table_ID, get_TrxName());
		if (table.get_ID() == 0)
			throw new IllegalArgumentException (""No AD_Table_ID="" + p_AD_Table_ID);
		String tableName = table.getTableName();
		if (!tableName.startsWith(""I""))
			throw new IllegalArgumentException (""Not an import table = "" + tableName);
		
		//	Delete
		String sql = ""DELETE FROM "" + tableName + "" WHERE AD_Client_ID="" + getAD_Client_ID();
		int no = DB.executeUpdate(sql, get_TrxName());
		String msg = Msg.translate(getCtx(), tableName + ""_ID"") + "" #"" + no;
		return msg;
	}	//	ImportDelete
"
org.compiere.process.PaySelectionCreateCheck.prepare,PaySelectionCreateCheck.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""PaymentRule""))
				p_PaymentRule = (String)element.getParameter();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_C_PaySelection_ID = getRecord_ID();
		if (p_PaymentRule != null && p_PaymentRule.equals(X_C_Order.PAYMENTRULE_DirectDebit))
			p_PaymentRule = null;
	}	//	prepare
"
org.compiere.process.PaySelectionCreateCheck.doIt,PaySelectionCreateCheck.java,"String doIt () throws Exception
	{
		log.info (""C_PaySelection_ID="" + p_C_PaySelection_ID
			+ "", PaymentRule="" + p_PaymentRule);
		
		MPaySelection psel = new MPaySelection (getCtx(), p_C_PaySelection_ID, get_TrxName());
		if (psel.get_ID() == 0)
			throw new IllegalArgumentException(""Not found C_PaySelection_ID="" + p_C_PaySelection_ID);
		if (psel.isProcessed())
			throw new IllegalArgumentException(""@Processed@"");
		//
		MPaySelectionLine[] lines = psel.getLines(false);
		if (lines != null && lines.length > 0 )
		{

			for (MPaySelectionLine line : lines) {
				if (!line.isActive() || line.isProcessed())
					continue;
				if(p_PaymentRule != null)
					line.setPaymentRule(p_PaymentRule);
				createCheck (line);
			}
			//
			psel.setProcessed(true);
			psel.save();

			return ""@C_PaySelectionCheck_ID@ - #"" + m_list.size();
		}
		
		return ""@NoPaymentLines@"";
	}	//	doIt
"
org.compiere.process.PaySelectionCreateCheck.createCheck,PaySelectionCreateCheck.java,"void createCheck (MPaySelectionLine line) throws Exception
	{
		//	Try to find one
		for (int i = 0; i < m_list.size(); i++)
		{
			MPaySelectionCheck check = m_list.get(i);
			//	Add to existing
			if (check.getC_BPartner_ID() == line.getInvoice().getC_BPartner_ID() &&
				check.getPaymentRule().equals(line.getPaymentRule()))
			{
				check.addLine(line);
				if (!check.save())
					throw new IllegalStateException(""Cannot save MPaySelectionCheck"");
				line.setC_PaySelectionCheck_ID(check.getC_PaySelectionCheck_ID());
				line.setProcessed(true);
				if (!line.save())
					throw new IllegalStateException(""Cannot save MPaySelectionLine"");
				return;
			}
		}
		//	Create new
		String PaymentRule = line.getPaymentRule();
		if (p_PaymentRule != null)
		{
			if (!X_C_Order.PAYMENTRULE_DirectDebit.equals(PaymentRule))
				PaymentRule = p_PaymentRule;
		}
		MPaySelectionCheck check = new MPaySelectionCheck(line, PaymentRule);
		if (!check.isValid())
		{
			int C_BPartner_ID = check.getC_BPartner_ID();
			MBPartner bp = MBPartner.get(getCtx(), C_BPartner_ID);
			String msg = ""@NotFound@ @C_BP_BankAccount@: "" + bp.getName();
			throw new CompiereUserException(msg);
		}
		if (!check.save())
			throw new IllegalStateException(""Cannot save MPaySelectionCheck"");
		line.setC_PaySelectionCheck_ID(check.getC_PaySelectionCheck_ID());
		line.setProcessed(true);
		if (!line.save())
			throw new IllegalStateException(""Cannot save MPaySelectionLine"");
		m_list.add(check);
	}	//	createCheck
"
org.compiere.process.ImportBankStatement.prepare,ImportBankStatement.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) 
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_Client_ID""))
				p_AD_Client_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""AD_Org_ID""))
				p_AD_Org_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""C_BankAccount_ID""))
				p_C_BankAccount_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""DeleteOldImported""))
				p_deleteOldImported = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		m_ctx = Env.getCtx();
	}	//	prepare
"
org.compiere.process.ImportBankStatement.doIt,ImportBankStatement.java,"String doIt() throws java.lang.Exception
	{
		log.info(""AD_Org_ID="" + p_AD_Org_ID + "", C_BankAccount_ID"" + p_C_BankAccount_ID);
		StringBuffer sql = null;
		int no = 0;
		String clientCheck = "" AND AD_Client_ID="" + p_AD_Client_ID;

		//	****	Prepare	****

		//	Delete Old Imported
		if (p_deleteOldImported)
		{
			sql = new StringBuffer (""DELETE FROM I_BankStatement ""
				  + ""WHERE I_IsImported='Y'"").append (clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			log.fine(""Delete Old Impored ="" + no);
		}

		//	Set Client, Org, IsActive, Created/Updated
		sql = new StringBuffer (""UPDATE I_BankStatement ""
			  + ""SET AD_Client_ID = COALESCE (AD_Client_ID,"").append (p_AD_Client_ID).append (""),""
			  + "" AD_Org_ID = COALESCE (AD_Org_ID,"").append (p_AD_Org_ID).append (""),"");
		sql.append("" IsActive = COALESCE (IsActive, 'Y'),""
			  + "" Created = COALESCE (Created, SysDate),""
			  + "" CreatedBy = COALESCE (CreatedBy, 0),""
			  + "" Updated = COALESCE (Updated, SysDate),""
			  + "" UpdatedBy = COALESCE (UpdatedBy, 0),""
			  + "" I_ErrorMsg = NULL,""
			  + "" I_IsImported = 'N' ""
			  + ""WHERE I_IsImported<>'Y' OR I_IsImported IS NULL OR AD_Client_ID IS NULL OR AD_Org_ID IS NULL OR AD_Client_ID=0 OR AD_Org_ID=0"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info (""Reset="" + no);

		String ts = DB.isPostgreSQL()?""COALESCE(I_ErrorMsg,'')"":""I_ErrorMsg"";  //java bug, it could not be used directly
		sql = new StringBuffer (""UPDATE I_BankStatement o ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Org, '""
			+ ""WHERE (AD_Org_ID IS NULL OR AD_Org_ID=0""
			+ "" OR EXISTS (SELECT * FROM AD_Org oo WHERE o.AD_Org_ID=oo.AD_Org_ID AND (oo.IsSummary='Y' OR oo.IsActive='N')))""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Org="" + no);
			
		//	Set Bank Account
		sql = new StringBuffer(""UPDATE I_BankStatement i ""
			+ ""SET C_BankAccount_ID=""
			+ ""( ""
			+ "" SELECT C_BankAccount_ID ""
			+ "" FROM C_BankAccount a, C_Bank b ""
			+ "" WHERE b.IsOwnBank='Y' ""
			+ "" AND a.AD_Client_ID=i.AD_Client_ID ""
			+ "" AND a.C_Bank_ID=b.C_Bank_ID ""
			+ "" AND a.AccountNo=i.BankAccountNo ""
			+ "" AND b.RoutingNo=i.RoutingNo ""
			+ "" OR b.SwiftCode=i.RoutingNo ""
			+ "") ""
			+ ""WHERE i.C_BankAccount_ID IS NULL ""
			+ ""AND i.I_IsImported<>'Y' ""
			+ ""OR i.I_IsImported IS NULL"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""Bank Account (With Routing No)="" + no);
		//
		sql = new StringBuffer(""UPDATE I_BankStatement i "" 
		 	+ ""SET C_BankAccount_ID=""
			+ ""( ""
			+ "" SELECT C_BankAccount_ID ""
			+ "" FROM C_BankAccount a, C_Bank b ""
			+ "" WHERE b.IsOwnBank='Y' ""
			+ "" AND a.C_Bank_ID=b.C_Bank_ID "" 
			+ "" AND a.AccountNo=i.BankAccountNo ""
			+ "" AND a.AD_Client_ID=i.AD_Client_ID ""
			+ "") ""
			+ ""WHERE i.C_BankAccount_ID IS NULL ""
			+ ""AND i.I_isImported<>'Y' ""
			+ ""OR i.I_isImported IS NULL"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""Bank Account (Without Routing No)="" + no);
		//
		sql = new StringBuffer(""UPDATE I_BankStatement i ""
			+ ""SET C_BankAccount_ID=(SELECT C_BankAccount_ID FROM C_BankAccount a WHERE a.C_BankAccount_ID="").append(p_C_BankAccount_ID);
		sql.append("" and a.AD_Client_ID=i.AD_Client_ID) ""
			+ ""WHERE i.C_BankAccount_ID IS NULL ""
			+ ""AND i.BankAccountNo IS NULL ""
			+ ""AND i.I_isImported<>'Y' ""
			+ ""OR i.I_isImported IS NULL"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""Bank Account="" + no);
		//	
		sql = new StringBuffer(""UPDATE I_BankStatement ""
			+ ""SET I_isImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Bank Account, ' ""
			+ ""WHERE C_BankAccount_ID IS NULL ""
			+ ""AND I_isImported<>'Y' ""
			+ ""OR I_isImported IS NULL"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid Bank Account="" + no);
		 
		//	Set Currency
		sql = new StringBuffer (""UPDATE I_BankStatement i ""
			+ ""SET C_Currency_ID=(SELECT C_Currency_ID FROM C_Currency c""
			+ "" WHERE i.ISO_Code=c.ISO_Code AND c.AD_Client_ID IN (0,i.AD_Client_ID)) ""
			+ ""WHERE C_Currency_ID IS NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""Set Currency="" + no);
		//
		sql = new StringBuffer(""UPDATE I_BankStatement i ""
			//jz	+ ""SET i.C_Currency_ID=(SELECT C_Currency_ID FROM C_BankAccount WHERE C_BankAccount_ID=i.C_BankAccount_ID) ""
				+ ""SET C_Currency_ID=(SELECT C_Currency_ID FROM C_BankAccount WHERE C_BankAccount_ID=i.C_BankAccount_ID) ""
			+ ""WHERE i.C_Currency_ID IS NULL ""
			+ ""AND i.ISO_Code IS NULL"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""Set Currency="" + no);
		//
		sql = new StringBuffer (""UPDATE I_BankStatement ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Currency,' ""
			+ ""WHERE C_Currency_ID IS NULL ""
			+ ""AND I_IsImported<>'E' ""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid Currency="" + no);
		
		 
		//	Set Amount
		 sql = new StringBuffer(""UPDATE I_BankStatement ""
		 	+ ""SET ChargeAmt=0 ""
			+ ""WHERE ChargeAmt IS NULL ""
			+ ""AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""Charge Amount="" + no);
		//
		 sql = new StringBuffer(""UPDATE I_BankStatement ""
		 	+ ""SET InterestAmt=0 ""
			+ ""WHERE InterestAmt IS NULL ""
			+ ""AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""Interest Amount="" + no);
		//
		 sql = new StringBuffer(""UPDATE I_BankStatement ""
		 	+ ""SET TrxAmt=StmtAmt - InterestAmt - ChargeAmt ""
			+ ""WHERE TrxAmt IS NULL ""
			+ ""AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""Transaction Amount="" + no);
		//
		sql = new StringBuffer(""UPDATE I_BankStatement ""
			+ ""SET I_isImported='E', I_ErrorMsg=""+ts +""||'Err=Invalid Amount, ' ""
			+ ""WHERE TrxAmt + ChargeAmt + InterestAmt <> StmtAmt ""
			+ ""AND I_isImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""Invaid Amount="" + no);
		 
		 //	Set Valuta Date
		sql = new StringBuffer(""UPDATE I_BankStatement ""
		 	+ ""SET ValutaDate=StatementLineDate ""
			+ ""WHERE ValutaDate IS NULL ""
			+ ""AND I_isImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""Valuta Date="" + no);
			
		//	Check Payment<->Invoice combination
		sql = new StringBuffer(""UPDATE I_BankStatement ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'Err=Invalid Payment<->Invoice, ' ""
			+ ""WHERE I_BankStatement_ID IN ""
				+ ""(SELECT I_BankStatement_ID ""
				+ ""FROM I_BankStatement i""
				+ "" INNER JOIN C_Payment p ON (i.C_Payment_ID=p.C_Payment_ID) ""
				+ ""WHERE i.C_Invoice_ID IS NOT NULL ""
				+ "" AND p.C_Invoice_ID IS NOT NULL ""
				+ "" AND p.C_Invoice_ID<>i.C_Invoice_ID) "")
			.append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""Payment<->Invoice Mismatch="" + no);
			
		//	Check Payment<->BPartner combination
		sql = new StringBuffer(""UPDATE I_BankStatement ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'Err=Invalid Payment<->BPartner, ' ""
			+ ""WHERE I_BankStatement_ID IN ""
				+ ""(SELECT I_BankStatement_ID ""
				+ ""FROM I_BankStatement i""
				+ "" INNER JOIN C_Payment p ON (i.C_Payment_ID=p.C_Payment_ID) ""
				+ ""WHERE i.C_BPartner_ID IS NOT NULL ""
				+ "" AND p.C_BPartner_ID IS NOT NULL ""
				+ "" AND p.C_BPartner_ID<>i.C_BPartner_ID) "")
			.append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""Payment<->BPartner Mismatch="" + no);
			
		//	Check Invoice<->BPartner combination
		sql = new StringBuffer(""UPDATE I_BankStatement ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'Err=Invalid Invoice<->BPartner, ' ""
			+ ""WHERE I_BankStatement_ID IN ""
				+ ""(SELECT I_BankStatement_ID ""
				+ ""FROM I_BankStatement i""
				+ "" INNER JOIN C_Invoice v ON (i.C_Invoice_ID=v.C_Invoice_ID) ""
				+ ""WHERE i.C_BPartner_ID IS NOT NULL ""
				+ "" AND v.C_BPartner_ID IS NOT NULL ""
				+ "" AND v.C_BPartner_ID<>i.C_BPartner_ID) "")
			.append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""Invoice<->BPartner Mismatch="" + no);
			
		//	Check Invoice.BPartner<->Payment.BPartner combination
		sql = new StringBuffer(""UPDATE I_BankStatement ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'Err=Invalid Invoice.BPartner<->Payment.BPartner, ' ""
			+ ""WHERE I_BankStatement_ID IN ""
				+ ""(SELECT I_BankStatement_ID ""
				+ ""FROM I_BankStatement i""
				+ "" INNER JOIN C_Invoice v ON (i.C_Invoice_ID=v.C_Invoice_ID)""
				+ "" INNER JOIN C_Payment p ON (i.C_Payment_ID=p.C_Payment_ID) ""
				+ ""WHERE p.C_Invoice_ID<>v.C_Invoice_ID""
				+ "" AND v.C_BPartner_ID<>p.C_BPartner_ID) "")
			.append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""Invoice.BPartner<->Payment.BPartner Mismatch="" + no);
			
		//	Detect Duplicates
		 sql = new StringBuffer(""SELECT i.I_BankStatement_ID, l.C_BankStatementLine_ID, i.EftTrxID ""
			+ ""FROM I_BankStatement i, C_BankStatement s, C_BankStatementLine l ""
			+ ""WHERE i.I_isImported='N' ""
			+ ""AND s.C_BankStatement_ID=l.C_BankStatement_ID ""
			+ ""AND i.EftTrxID IS NOT NULL AND ""
			//	Concatinate EFT Info
			+ ""(l.EftTrxID||l.EftAmt||l.EftStatementLineDate||l.EftValutaDate||l.EftTrxType||l.EftCurrency||l.EftReference||s.EftStatementReference ""
			+ ""||l.EftCheckNo||l.EftMemo||l.EftPayee||l.EftPayeeAccount) ""
			+ ""= ""
			+ ""(i.EftTrxID||i.EftAmt||i.EftStatementLineDate||i.EftValutaDate||i.EftTrxType||i.EftCurrency||i.EftReference||i.EftStatementReference ""
			+ ""||i.EftCheckNo||i.EftMemo||i.EftPayee||i.EftPayeeAccount) "");
		
		StringBuffer updateSql = new StringBuffer(""UPDATE I_Bankstatement ""
				+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'Err=Duplicate['||?||']' ""
				+ ""WHERE I_BankStatement_ID=?"").append(clientCheck);
		PreparedStatement pupdt = DB.prepareStatement(updateSql.toString(), get_TrxName());
		
		PreparedStatement pstmtDuplicates = null;
		no = 0;
		try
		{
			pstmtDuplicates = DB.prepareStatement(sql.toString(), get_TrxName());
			ResultSet rs = pstmtDuplicates.executeQuery();
			while (rs.next())
			{
				String info = ""Line_ID="" + rs.getInt(2)		//	l.C_BankStatementLine_ID
				 + "",EDTTrxID="" + rs.getString(3);			//	i.EftTrxID
				pupdt.setString(1, info);	
				pupdt.setInt(2, rs.getInt(1));	//	i.I_BankStatement_ID
				pupdt.executeUpdate();
				no++;
			}
			rs.close();
			pstmtDuplicates.close();
			pupdt.close();
			
			rs = null;
			pstmtDuplicates = null;
			pupdt = null;
		}
		catch(Exception e)
		{
			log.log(Level.SEVERE, ""DetectDuplicates "" + e.getMessage());
		}
		if (no != 0)
			log.info(""Duplicates="" + no);
		
		commit();
		
		//Import Bank Statement
		sql = new StringBuffer(""SELECT * FROM I_BankStatement""
			+ "" WHERE I_IsImported='N'""
			+ "" ORDER BY C_BankAccount_ID, Name, EftStatementDate, EftStatementReference"");
			
		MBankStatement statement = null;
		MBankAccount account = null;
		PreparedStatement pstmt = null;
		int lineNo = 10;
		int noInsert = 0;
		int noInsertLine = 0;
		try
		{
			pstmt = DB.prepareStatement(sql.toString(), get_TrxName());
			ResultSet rs = pstmt.executeQuery();
				
			while (rs.next())
			{ 
				X_I_BankStatement imp = new X_I_BankStatement(m_ctx, rs, get_TrxName());
				//	Get the bank account for the first statement
				if (account == null)
				{
					account = MBankAccount.get (m_ctx, imp.getC_BankAccount_ID());
					statement = null;
					log.info(""New Statement, Account="" + account.getAccountNo());
				}
				//	Create a new Bank Statement for every account
				else if (account.getC_BankAccount_ID() != imp.getC_BankAccount_ID())
				{
					account = MBankAccount.get (m_ctx, imp.getC_BankAccount_ID());
					statement = null;
					log.info(""New Statement, Account="" + account.getAccountNo());
				}
				//	Create a new Bank Statement for every statement name
				else if ((statement.getName() != null) && (imp.getName() != null))
				{
					if (!statement.getName().equals(imp.getName()))
					{
						statement = null;
						log.info(""New Statement, Statement Name="" + imp.getName());
					}
				}
				//	Create a new Bank Statement for every statement reference
				else if ((statement.getEftStatementReference() != null) && (imp.getEftStatementReference() != null))
				{
					if (!statement.getEftStatementReference().equals(imp.getEftStatementReference()))
					{
						statement = null;
						log.info(""New Statement, Statement Reference="" + imp.getEftStatementReference());
					}
				}
				//	Create a new Bank Statement for every statement date
				else if ((statement.getStatementDate() != null) && (imp.getStatementDate() != null))
				{
					if (!statement.getStatementDate().equals(imp.getStatementDate()))
					{
						statement = null;
						log.info(""New Statement, Statement Date="" + imp.getStatementDate());
					}
				}
				
				//	New Statement
				if (statement == null)
				{
					statement = new MBankStatement(account);
					statement.setEndingBalance(Env.ZERO);
					
					//	Copy statement data
					if (imp.getName() != null)
					{
						statement.setName(imp.getName());
					}
					if (imp.getStatementDate() != null)
					{
						statement.setStatementDate(imp.getStatementDate());
					}
					statement.setDescription(imp.getDescription());
					statement.setEftStatementReference(imp.getEftStatementReference());
					statement.setEftStatementDate(imp.getEftStatementDate());
					if (statement.save())
					{
						noInsert++;
					}
					lineNo = 10;
				}
				
				//	New StatementLine
				MBankStatementLine line = new MBankStatementLine(statement, lineNo);
				
				//	Copy statement line data
				//line.setC_BPartner_ID(imp.getC_BPartner_ID());
				//line.setC_Invoice_ID(imp.getC_Invoice_ID());
				line.setReferenceNo(imp.getReferenceNo());
				line.setDescription(imp.getLineDescription());
				line.setStatementLineDate(imp.getStatementLineDate());
				line.setDateAcct(imp.getStatementLineDate());
				line.setValutaDate(imp.getValutaDate());
				line.setIsReversal(imp.isReversal());
				line.setC_Currency_ID(imp.getC_Currency_ID());
				line.setTrxAmt(imp.getTrxAmt());
				line.setStmtAmt(imp.getStmtAmt());
				if (imp.getC_Charge_ID() != 0)
				{
					line.setC_Charge_ID(imp.getC_Charge_ID());
				}
				line.setInterestAmt(imp.getInterestAmt());
				line.setChargeAmt(imp.getChargeAmt());
				line.setMemo(imp.getMemo());
				if (imp.getC_Payment_ID() != 0)
				{
					line.setC_Payment_ID(imp.getC_Payment_ID());
				}
				
				//	Copy statement line reference data
				line.setEftTrxID(imp.getEftTrxID());
				line.setEftTrxType(imp.getEftTrxType());
				line.setEftCheckNo(imp.getEftCheckNo());
				line.setEftReference(imp.getEftReference());
				line.setEftMemo(imp.getEftMemo());
				line.setEftPayee(imp.getEftPayee());
				line.setEftPayeeAccount(imp.getEftPayeeAccount());
				line.setEftStatementLineDate(imp.getEftStatementLineDate());
				line.setEftValutaDate(imp.getEftValutaDate());
				line.setEftCurrency(imp.getEftCurrency());
				line.setEftAmt(imp.getEftAmt());
				
				//	Save statement line
				if (line.save())
				{
					imp.setC_BankStatement_ID(statement.getC_BankStatement_ID());
					imp.setC_BankStatementLine_ID(line.getC_BankStatementLine_ID());
					imp.setI_IsImported(X_I_BankStatement.I_ISIMPORTED_Yes);
					imp.setProcessed(true);
					imp.save();
					noInsertLine++;
					lineNo += 10;	
				}
				line = null;
				
			}
			
			//	Close database connection
			rs.close();
			pstmt.close();
			rs = null;
			pstmt = null;

		}
		catch(Exception e)
		{
			log.log(Level.SEVERE, sql.toString(), e);
		}
		
		//	Set Error to indicator to not imported
		sql = new StringBuffer (""UPDATE I_BankStatement ""
			+ ""SET I_IsImported='N', Updated=SysDate ""
			+ ""WHERE I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		addLog (0, null, new BigDecimal (no), ""@Errors@"");
		//
		addLog (0, null, new BigDecimal (noInsert), ""@C_BankStatement_ID@: @Inserted@"");
		addLog (0, null, new BigDecimal (noInsertLine), ""@C_BankStatementLine_ID@: @Inserted@"");
		return """";

	}	//	doIt
"
org.compiere.process.SendMailText.prepare,SendMailText.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para)
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""R_InterestArea_ID""))
				p_R_InterestArea_ID = element.getParameterAsInt();
			else if (name.equals(""R_MailText_ID""))
				p_R_MailText_ID = element.getParameterAsInt();
			else if (name.equals(""C_BP_Group_ID""))
				p_C_BP_Group_ID = element.getParameterAsInt();
			else if (name.equals(""AD_User_ID""))
				p_AD_User_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.SendMailText.doIt,SendMailText.java,"String doIt() throws Exception
	{
		log.info(""R_MailText_ID="" + p_R_MailText_ID);
		//	Mail Test
		m_MailText = new MMailText (getCtx(), p_R_MailText_ID, get_TrxName());
		if (m_MailText.getR_MailText_ID() == 0)
			throw new Exception (""Not found @R_MailText_ID@="" + p_R_MailText_ID);
		//	Client Info
		m_client = MClient.get (getCtx());
		if (m_client.getAD_Client_ID() == 0)
			throw new Exception (""Not found @AD_Client_ID@"");
		if (m_client.getSmtpHost() == null || m_client.getSmtpHost().length() == 0)
			throw new Exception (""No SMTP Host found"");
		//
		if (p_AD_User_ID > 0)
		{
			m_from = new MUser (getCtx(), p_AD_User_ID, get_TrxName());
			if (m_from.getAD_User_ID() == 0)
				throw new Exception (""No found @AD_User_ID@="" + p_AD_User_ID);
		}
		log.fine(""From "" + m_from);
		long start = System.currentTimeMillis();

		if (p_R_InterestArea_ID > 0)
			sendInterestArea();
		if (p_C_BP_Group_ID > 0)
			sendBPGroup();

		return ""@Created@="" + m_counter + "", @Errors@="" + m_errors + "" - ""
			+ (System.currentTimeMillis()-start) + ""ms"";
	}	//	doIt
"
org.compiere.process.SendMailText.sendInterestArea,SendMailText.java,"void sendInterestArea()
	{
		log.info(""R_InterestArea_ID="" + p_R_InterestArea_ID);
		m_ia = MInterestArea.get(getCtx(), p_R_InterestArea_ID);
		String unsubscribe = null;
		if (m_ia.isSelfService())
		{
			unsubscribe = ""\n\n---------.----------.----------.----------.----------.----------\n""
				+ Msg.getElement(getCtx(), ""R_InterestArea_ID"")
				+ "": "" + m_ia.getName()
				+ ""\n"" + Msg.getMsg(getCtx(), ""UnsubscribeInfo"")
				+ ""\n"";
			MStore[] wstores = MStore.getOfClient(m_client);
			int index = 0;
			for (int i = 0; i < wstores.length; i++)
			{
				if (wstores[i].isDefault())
				{
					index = i;
					break;
				}
			}
			if (wstores.length > 0)
				unsubscribe += wstores[index].getWebContext(true);
		}

		//
		String sql = ""SELECT u.Name, u.EMail, u.AD_User_ID ""
			+ ""FROM R_ContactInterest ci""
			+ "" INNER JOIN AD_User u ON (ci.AD_User_ID=u.AD_User_ID) ""
			+ ""WHERE ci.IsActive='Y' AND u.IsActive='Y'""
			+ "" AND ci.OptOutDate IS NULL""
			+ "" AND u.EMail IS NOT NULL""
			+ "" AND ci.R_InterestArea_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_TrxName());
			pstmt.setInt(1, p_R_InterestArea_ID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				Boolean ok = sendIndividualMail (rs.getString(1), rs.getInt(3), unsubscribe);
				if (ok == null)
					;
				else if (ok.booleanValue())
					m_counter++;
				else
					m_errors++;
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			log.log(Level.SEVERE, sql, ex);
		}
		//	Clean Up
		try
		{
			if (pstmt != null)
				pstmt.close();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;
		m_ia = null;
	}	//	sendInterestArea
"
org.compiere.process.SendMailText.sendBPGroup,SendMailText.java,"void sendBPGroup()
	{
		log.info(""C_BP_Group_ID="" + p_C_BP_Group_ID);
		String sql = ""SELECT u.Name, u.EMail, u.AD_User_ID ""
			+ ""FROM AD_User u""
			+ "" INNER JOIN C_BPartner bp ON (u.C_BPartner_ID=bp.C_BPartner_ID) ""
			+ ""WHERE u.IsActive='Y' AND bp.IsActive='Y'""
			+ "" AND u.EMail IS NOT NULL""
			+ "" AND bp.C_BP_Group_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_TrxName());
			pstmt.setInt(1, p_C_BP_Group_ID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				Boolean ok = sendIndividualMail (rs.getString(1), rs.getInt(3), null);
				if (ok == null)
					;
				else if (ok.booleanValue())
					m_counter++;
				else
					m_errors++;
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			log.log(Level.SEVERE, sql, ex);
		}
		//	Clean Up
		try
		{
			if (pstmt != null)
				pstmt.close();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;
	}	//	sendBPGroup
"
org.compiere.process.SendMailText.sendIndividualMail,SendMailText.java,"Boolean sendIndividualMail (String Name, int AD_User_ID, String unsubscribe)
	{
		//	Prevent two email
		Integer ii = Integer.valueOf (AD_User_ID);
		if (m_list.contains(ii))
			return null;
		m_list.add(ii);
		//
		MUser to = new MUser (getCtx(), AD_User_ID, null);
		if (to.isEMailBounced())			//	ignore bounces
			return null;
		m_MailText.setUser(AD_User_ID);		//	parse context
		String message = m_MailText.getMailText(true);
		//	Unsubscribe
		if (unsubscribe != null)
			message += unsubscribe;
		//
		EMail email = m_client.createEMail(m_from, to, m_MailText.getMailHeader(), message);
		if (email == null)
			return Boolean.FALSE;
		if (m_MailText.isHtml())
			email.setMessageHTML(m_MailText.getMailHeader(), message);
		else
		{
			email.setSubject (m_MailText.getMailHeader());
			email.setMessageText (message);
		}
		if (!email.isValid() && !email.isValid(true))
		{
			log.warning(email.toString());
			to.setIsActive(false);
			to.addDescription(""Invalid EMail"");
			to.save();
			return Boolean.FALSE;
		}
		boolean OK = EMail.SENT_OK.equals(email.send());
		new MUserMail(m_MailText, AD_User_ID, email).save();
		//
		if (OK)
			log.fine(to.getEMail());
		else
			log.warning(""FAILURE - "" + to.getEMail());
		addLog(0, null, null, (OK ? ""@OK@"" : ""@ERROR@"") + "" - "" + to.getEMail());
		return Boolean.valueOf(OK);
	}	//	sendIndividualMail
"
org.compiere.process.MergeProcess.prepare,MergeProcess.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();

		for (int i = 0; (i < para.length); i++)
		{
			String name = para[i].getParameterName();
			if (para[i].getParameter() == null)
				;
			else if (name.equals(""AD_Org_ID"")){				
				from_ID = ((BigDecimal)para[i].getParameter()).intValue();				
			}				
			else if (name.equals(""AD_Org_To_ID"")){
				to_ID = ((BigDecimal)para[i].getParameter()).intValue();
				columnName = AD_ORG_ID;
				m_deleteTables = s_delete_Org;
				entity = ""Organization"";
			}
			else if (name.equals(""AD_User_ID"")){
				from_ID = ((BigDecimal)para[i].getParameter()).intValue();					
			}				
			else if (name.equals(""AD_User_To_ID"")){
				to_ID = ((BigDecimal)para[i].getParameter()).intValue();
				m_deleteTables = s_delete_User;
				columnName = AD_USER_ID;
				entity = ""User"";
			}
			else if (name.equals(""C_BPartner_ID"")){
				from_ID = ((BigDecimal)para[i].getParameter()).intValue();					
			}				
			else if (name.equals(""C_BPartner_To_ID"")){
				to_ID = ((BigDecimal)para[i].getParameter()).intValue();
				m_deleteTables = s_delete_BPartner;
				columnName = C_BPARTNER_ID;
				entity = ""BusPartner"";
			}			
			else if (name.equals(""M_Product_ID"")){
				from_ID = ((BigDecimal)para[i].getParameter()).intValue();					
			}				
			else if (name.equals(""M_Product_To_ID"")){
				to_ID = ((BigDecimal)para[i].getParameter()).intValue();
				m_deleteTables = s_delete_Product;
				columnName = M_PRODUCT_ID;
				entity=""Product"";
			}			
		}
	}	//	prepare
"
org.compiere.process.MergeProcess.doIt,MergeProcess.java,"String doIt() throws Exception
	{		
		log.info (""doIt "");
		
		if (!preMerge(columnName, from_ID, to_ID))
			return m_errorLog.toString();
		
		String msg =   Msg.translate( getCtx(), ""MergeFrom"") + "" = "" + fromValue
		+ ""\n"" + Msg.translate(getCtx(), ""MergeTo"") + "" = "" + toValue +""\n"";
		boolean success = merge (columnName, from_ID, to_ID);
		postMerge(columnName, to_ID);
			
		if (success){
			return msg +"" #""+m_totalCount;
		}
		else{
			throw new CompiereSystemException("" ""+m_errorLog.toString());
		}		
	}	//	doIt
"
org.compiere.process.MergeProcess.preMerge,MergeProcess.java,"boolean preMerge(String ColumnName,int from_ID, int to_ID){
		 
		
		if (from_ID < 0) throw new IllegalArgumentException(getTranslatedMessage(""Invalid"")+"" ""+getTranslatedMessage(""From"")+"" ""+getTranslatedMessage(""Parameter""));
		if (to_ID < 0 ) throw new IllegalArgumentException(getTranslatedMessage(""Invalid"")+"" ""+getTranslatedMessage(""To"")+"" ""+getTranslatedMessage(""Parameter""));
		
		if (from_ID == to_ID){
			String entityMessage=Msg.getMsg(getCtx(), entity).replace(""&"", """");
			throw new IllegalArgumentException(Msg.getMsg(getCtx(), ""MergeInvalidParameter"",new Object[]{entityMessage,entityMessage}));
		}			
		
		String fromSql = "" SELECT Name FROM ""+columnName.substring(0, columnName.length()-3)+"" WHERE ""+columnName+"" = ? "";
		PreparedStatement pstmt = null;
		
		try
		{			
			pstmt = DB.prepareStatement(fromSql, (Trx) null);
			pstmt.setString(1, String.valueOf(from_ID));
			
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				fromValue = rs.getString(1);				
			}
			rs.close();
			pstmt.close();
			pstmt = null;		
		}
		catch (Exception ex)
		{
			log.log(Level.SEVERE, columnName, ex);
			return false;
		}
		String toSql = "" SELECT Name FROM ""+columnName.substring(0, columnName.length()-3)+"" WHERE ""+columnName+"" =  ?"";
		pstmt = null;
		
		try
		{		
			pstmt = DB.prepareStatement(toSql, (Trx) null);
			pstmt.setString(1, String.valueOf(to_ID));
			
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				toValue = rs.getString(1);				
			}
			rs.close();
			pstmt.close();
			pstmt = null;	
		}
		catch (Exception ex)
		{
			log.log(Level.SEVERE, columnName, ex);
			return false;
		}	
		
		if (columnName.equals(M_PRODUCT_ID)){
			try {
				String sql=""SELECT 1 FROM M_Storage WHERE M_Product_ID = ""+from_ID+"" AND M_AttributeSetInstance_ID = 0 AND (QtyAllocated  > 0 OR QtyOrdered > 0 OR QtyReserved > 0) "";
				pstmt = DB.prepareStatement(sql,(Trx) null);
				ResultSet rs = pstmt.executeQuery();
				
				if (rs.next()){
					m_errorLog.append(getTranslatedMessage(""MergeProductAllocated""));
					return false;
				}
				rs.close();
				pstmt.close();
				pstmt = null;
				
				sql = ""SELECT 1 FROM Fact_Acct WHERE M_Product_ID = ""+from_ID;				
				pstmt = DB.prepareStatement(sql,(Trx) null);
				rs = pstmt.executeQuery();
				
				if (rs.next()){
					m_errorLog.append(Msg.getMsg(getCtx(), ""MergeAccountingTransactionsPosted"",new Object[]{entity,fromValue}));					
					return false;
				}
				rs.close();
				pstmt.close();
				pstmt = null;
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return false;
			}
		}		
		return true;
	}
"
org.compiere.process.MergeProcess.merge,MergeProcess.java,"boolean merge (String ColumnName, int from_ID, int to_ID)
	{
		String TableName = ColumnName.substring(0, ColumnName.length()-3);
		log.config(ColumnName
			+ "" - From="" + from_ID + "",To="" + to_ID);

		boolean success = true;
		m_totalCount = 0;
		m_errorLog = new StringBuffer();
		String sql = ""SELECT t.TableName, c.ColumnName ""
			+ ""FROM AD_Table t""
			+ "" INNER JOIN AD_Column c ON (t.AD_Table_ID=c.AD_Table_ID) ""
			+ ""WHERE t.IsView='N'""
				+ "" AND c.ColumnSQL IS NULL ""
				+ "" AND t.TableName NOT IN ('C_TaxDeclarationAcct')""
				+ "" AND (""
				+ ""(c.ColumnName=? AND c.IsKey='N')""		//	#1 - direct
			+ "" OR ""
				+ ""c.AD_Reference_Value_ID IN ""				//	Table Reference
					+ ""(SELECT rt.AD_Reference_ID FROM AD_Ref_Table rt""
					+ "" INNER JOIN AD_Column cc ON (rt.AD_Table_ID=cc.AD_Table_ID AND rt.Column_Key_ID=cc.AD_Column_ID) ""
					+ ""WHERE cc.IsKey='Y' AND cc.ColumnName=?)""	//	#2
			+ "") ""
			+ ""ORDER BY t.LoadSeq DESC"";
		PreparedStatement pstmt = null;
		Savepoint sp = null;
		try
		{
			m_con = DB.createConnection(false, Connection.TRANSACTION_READ_COMMITTED);
			sp = m_con.setSavepoint(""merge"");
			//
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setString(1, ColumnName);
			pstmt.setString(2, ColumnName);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				String tName = rs.getString(1);
				String cName = rs.getString(2);
				if (!TableName.equals(tName))	//	to be sure - sql should prevent it
				{
					int count = mergeTable (tName, cName, from_ID, to_ID);
					if (count < 0)
						success = false;
					else
						m_totalCount += count;
				}
			}
			rs.close();
			pstmt.close();
			pstmt = null;
			//
			log.config(""Success="" + success
				+ "" - "" + ColumnName + "" - From="" + from_ID + "",To="" + to_ID);
			if (success)
			{
				//SR10018367: Cannot delete Organization, instead make Inactive
				if (TableName.equals(""AD_Org""))
					sql = ""UPDATE ""+TableName+"" SET IsActive = 'N' WHERE "" + ColumnName + ""="" + from_ID;
				else
					sql = ""DELETE FROM "" + TableName + "" WHERE "" + ColumnName + ""="" + from_ID;
				Statement stmt = m_con.createStatement();
				int count = 0;
				try
				{
					count = stmt.executeUpdate (sql);
					if (count != 1)
					{
						m_errorLog.append(Env.NL).append(sql)
							.append("" - Count="").append(count);
						success = false;
					}
				}
				catch (SQLException ex1)
				{
					m_errorLog.append(Env.NL).append(sql)
						.append("" - "").append(ex1.toString());
					success = false;
				}
				stmt.close();
				stmt = null;
			}
			//
			if (success)
				m_con.commit();
			else
				m_con.rollback(sp);
			m_con.close();
			m_con = null;
		}
		catch (Exception ex)
		{
			log.log(Level.SEVERE, ColumnName, ex);
		}
		//	Cleanup
		try
		{
			if (pstmt != null)
				pstmt.close();
			if (m_con != null)
				m_con.close();
		}
		catch (Exception ex)
		{
		}
		pstmt = null;
		m_con = null;
		//
		return success;
	}	//	merge
"
org.compiere.process.MergeProcess.mergeTable,MergeProcess.java,"int mergeTable (String TableName, String ColumnName, int from_ID, int to_ID)
	{
		log.fine(TableName + ""."" + ColumnName + "" - From="" + from_ID + "",To="" + to_ID);
		String sql = ""UPDATE "" + TableName
			+ "" SET "" + ColumnName + ""="" + to_ID
			+ "" WHERE "" + ColumnName + ""="" + from_ID;
		boolean delete = false;
		for (String element : m_deleteTables) {
			if (element.equals(TableName))
			{
				delete = true;
				sql = ""DELETE FROM "" + TableName + "" WHERE "" + ColumnName + ""="" + from_ID;
			}
		}

		int count = -1;

		try
		{
			Statement stmt = m_con.createStatement ();
			try
			{
				count = stmt.executeUpdate (sql);
				log.fine(count
					+ (delete ? "" -Delete- "" : "" -Update- "") + TableName);
			}
			catch (SQLException ex1)
			{				
				if (!delete){					
					if (	(columnName.equals(M_PRODUCT_ID) && TableName.equals(""M_Storage"")) //if UPDATE M_Storage SET M_Product_ID = to_ID fails with ORA-0001: Unique Constraint, then delete the row in M_Storage for the FROM Product 
							||(columnName.equals(AD_USER_ID) && TableName.equals(""R_ContactInterest"")) //if UPDATE R_ContactInterest SET AD_User_ID = to_ID fails with ORA-001: Unique Constraint, then delete the row in AD_User for the FROM User 
					)					
					{
						String deleteSql=""DELETE FROM ""+TableName+"" WHERE ""+ColumnName+"" = ""+from_ID;
						Statement delStmt= m_con.createStatement();
						try{
							count = delStmt.executeUpdate(deleteSql);
							log.fine(count + ""Delete: ""+TableName);
						}
						catch (SQLException ex2){
							count = -1;
							m_errorLog.append(Env.NL)
							.append(""DELETE FROM "" )
							.append(TableName).append("" - "").append(ex2.toString())
							.append("" - "").append(deleteSql);
						}
					}					  
					else{
						count = -1;
						m_errorLog.append(Env.NL)
							.append(delete ? ""DELETE FROM "" : ""UPDATE "")
							.append(TableName).append("" - "").append(ex1.toString())
							.append("" - "").append(sql);
					}
				}
				else{
					count = -1;
					m_errorLog.append(Env.NL)
						.append(delete ? ""DELETE FROM "" : ""UPDATE "")
						.append(TableName).append("" - "").append(ex1.toString())
						.append("" - "").append(sql);
				}
			}
			stmt.close();
			stmt = null;
		}
		catch (SQLException ex)
		{
			count = -1;
			m_errorLog.append(Env.NL)
				.append(delete ? ""DELETE FROM "" : ""UPDATE "")
				.append(TableName).append("" - "").append(ex.toString())
				.append("" - "").append(sql);
		}
		return count;
	}	//	mergeTable
"
org.compiere.process.MergeProcess.postMerge,MergeProcess.java,"void postMerge (String ColumnName, int to_ID)
	{
		if (ColumnName.equals(AD_ORG_ID))
		{
			
		}
		else if (ColumnName.equals(AD_USER_ID))
		{
			
		}
		else if (ColumnName.equals(C_BPARTNER_ID))
		{
			MBPartner bp = new MBPartner (Env.getCtx(), to_ID, null);
			if (bp.get_ID() != 0)
			{
				MPayment[] payments = MPayment.getOfBPartner(Env.getCtx(), bp.getC_BPartner_ID(), null);
				for (MPayment payment : payments) {
					if (payment.testAllocation())
						payment.save();
				}
				MInvoice[] invoices = MInvoice.getOfBPartner(Env.getCtx(), bp.getC_BPartner_ID(), null);
				for (MInvoice invoice : invoices) {
					if (invoice.testAllocation())
						invoice.save();
				}
				bp.setTotalOpenBalance();
				bp.setActualLifeTimeValue();
				bp.save();
			}
		}
		else if (ColumnName.equals(M_PRODUCT_ID))
		{
			
		}
	}	//	postMerge
"
org.compiere.process.MergeProcess.getTranslatedMessage,MergeProcess.java,"String getTranslatedMessage(String text){
		return Msg.translate(getCtx(), text);
	}
"
org.compiere.process.StorageCleanup.prepare,StorageCleanup.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_DocType_ID""))
				p_C_DocType_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.StorageCleanup.doIt,StorageCleanup.java,"String doIt () throws Exception
	{
		log.info("""");
		//	Clean up empty Storage
		String sql = ""DELETE FROM M_Storage ""
			+ ""WHERE QtyOnHand = 0 AND QtyReserved = 0 AND QtyOrdered = 0""
			+ "" AND QtyDedicated = 0 AND QtyAllocated = 0""
			//jz + "" AND Created < SysDate-3"";
			+ "" AND Created < addDays(SysDate,-3)"";
		int no = DB.executeUpdate(sql, get_TrxName());
		log.info(""Delete Empty #"" + no);
		
		//
		sql = ""SELECT * ""
			+ ""FROM M_Storage s ""
			+ ""WHERE AD_Client_ID = ?""
			+ "" AND QtyOnHand < 0""
			//	Instance Attribute
			+ "" AND EXISTS (SELECT * FROM M_Product p""
				+ "" INNER JOIN M_AttributeSet mas ON (p.M_AttributeSet_ID=mas.M_AttributeSet_ID) ""
				+ ""WHERE s.M_Product_ID=p.M_Product_ID AND mas.IsInstanceAttribute='Y')""
			//	Stock in same location
		//	+ "" AND EXISTS (SELECT * FROM M_Storage sl ""
		//		+ ""WHERE sl.QtyOnHand > 0""
		//		+ "" AND s.M_Product_ID=sl.M_Product_ID""
		//		+ "" AND s.M_Locator_ID=sl.M_Locator_ID)""
			//	Stock in same Warehouse
			+ "" AND EXISTS (SELECT * FROM M_Storage sw""
				+ "" INNER JOIN M_Locator swl ON (sw.M_Locator_ID=swl.M_Locator_ID), M_Locator sl ""
				+ ""WHERE sw.QtyOnHand > 0""
				+ "" AND s.M_Product_ID=sw.M_Product_ID""
				+ "" AND s.M_Locator_ID=sl.M_Locator_ID""
				+ "" AND sl.M_Warehouse_ID=swl.M_Warehouse_ID)"";
		PreparedStatement pstmt = null;
		int lines = 0;
		try
		{
			pstmt = DB.prepareStatement (sql, get_TrxName());
			pstmt.setInt(1, getCtx().getAD_Client_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				lines += move (new MStorage(getCtx(), rs, get_TrxName()));
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		return ""#"" + lines;
	}	//	doIt
"
org.compiere.process.StorageCleanup.move,StorageCleanup.java,"int move (MStorage target)
	{
		log.info(target.toString());
		BigDecimal qty = target.getQtyOnHand().negate();

		//	Create Movement
		MMovement mh = new MMovement (getCtx(), 0, get_TrxName());
		mh.setAD_Org_ID(target.getAD_Org_ID());
		mh.setC_DocType_ID(p_C_DocType_ID);
		mh.setDescription(getName());
		if (!mh.save())
			return 0;

		int lines = 0;
		MStorage[] sources = getSources(target.getM_Product_ID(), target.getM_Locator_ID());
		for (MStorage source : sources) {
			//	Movement Line
			MMovementLine ml = new MMovementLine(mh);
			ml.setM_Product_ID(target.getM_Product_ID());
			ml.setM_LocatorTo_ID(target.getM_Locator_ID());
			ml.setM_AttributeSetInstanceTo_ID(target.getM_AttributeSetInstance_ID());
			//	From
			ml.setM_Locator_ID(source.getM_Locator_ID());
			ml.setM_AttributeSetInstance_ID(source.getM_AttributeSetInstance_ID());
			
			BigDecimal qtyMove = qty;
			if (qtyMove.compareTo(source.getQtyOnHand()) > 0)
				qtyMove = source.getQtyOnHand();
			ml.setMovementQty(qtyMove);
			//
			lines++;
			ml.setLine(lines*10);
			if (!ml.save())
				return 0;
			
			qty = qty.subtract(qtyMove);
			if (qty.signum() <= 0)
				break;
		}	//	for all movements
		
		//	Process
		mh.processIt(DocActionConstants.ACTION_Complete);
		mh.save();
		
		addLog(0, null, new BigDecimal(lines), ""@M_Movement_ID@ "" + mh.getDocumentNo() + "" ("" 
			+ MRefList.get(getCtx(), X_M_Movement.DOCSTATUS_AD_Reference_ID, 
				mh.getDocStatus(), get_TrxName()) + "")"");

		eliminateReservation(target);
		return lines;
	}	//	move
"
org.compiere.process.StorageCleanup.eliminateReservation,StorageCleanup.java,"void eliminateReservation(MStorage target)
	{
		//	Negative Ordered / Reserved Qty
		if (target.getQtyReserved().signum() != 0 || target.getQtyOrdered().signum() != 0)
		{
			int M_Locator_ID = target.getM_Locator_ID();
			MStorage storage0 = MStorage.get(getCtx(), M_Locator_ID, 
				target.getM_Product_ID(), 0, get_TrxName());
			if (storage0 == null)
			{
				MLocator defaultLoc = MLocator.getDefault(getCtx(), M_Locator_ID);
				if (M_Locator_ID != defaultLoc.getM_Locator_ID())
				{
					M_Locator_ID = defaultLoc.getM_Locator_ID();
					storage0 = MStorage.get(getCtx(), M_Locator_ID, 
						target.getM_Product_ID(), 0, get_TrxName());
				}
			}
			if (storage0 != null)
			{
				BigDecimal reserved = Env.ZERO;
				BigDecimal ordered = Env.ZERO;
				if (target.getQtyReserved().add(storage0.getQtyReserved()).signum() >= 0)
					reserved = target.getQtyReserved();		//	negative
				if (target.getQtyOrdered().add(storage0.getQtyOrdered()).signum() >= 0)
					ordered = target.getQtyOrdered();		//	negative
				//	Eliminate Reservation
				if (reserved.signum() != 0 || ordered.signum() != 0)
				{
					if (MStorage.add(getCtx(), target.getM_Warehouse_ID(), target.getM_Locator_ID(), 
						target.getM_Product_ID(), 
						target.getM_AttributeSetInstance_ID(), target.getM_AttributeSetInstance_ID(),
						Env.ZERO, reserved.negate(), ordered.negate(), get_TrxName()))
					{
						if (MStorage.add(getCtx(), storage0.getM_Warehouse_ID(), storage0.getM_Locator_ID(), 
							storage0.getM_Product_ID(), 
							storage0.getM_AttributeSetInstance_ID(), storage0.getM_AttributeSetInstance_ID(),
							Env.ZERO, reserved, ordered, get_TrxName()))
							log.info(""Reserved="" + reserved + "",Ordered="" + ordered);
						else
							log.warning(""Failed Storage0 Update"");
					}
					else
						log.warning(""Failed Target Update"");
				}
			}
		}
	}	//	eliminateReservation
"
org.compiere.process.StorageCleanup.getSources,StorageCleanup.java,"MStorage[] getSources (int M_Product_ID, int M_Locator_ID)
	{
		ArrayList<MStorage> list = new ArrayList<MStorage>();
		String sql = ""SELECT * ""
			+ ""FROM M_Storage s ""
			+ ""WHERE QtyOnHand > 0""
			+ "" AND M_Product_ID=?""
			//	Empty ASI
			+ "" AND (M_AttributeSetInstance_ID=0""
			+ "" OR EXISTS (SELECT * FROM M_AttributeSetInstance asi ""
				+ ""WHERE s.M_AttributeSetInstance_ID=asi.M_AttributeSetInstance_ID""
				+ "" AND asi.Description IS NULL) )""
			//	Stock in same Warehouse
			+ "" AND EXISTS (SELECT * FROM M_Locator sl, M_Locator x ""
				+ ""WHERE s.M_Locator_ID=sl.M_Locator_ID""
				+ "" AND x.M_Locator_ID=?""
				+ "" AND sl.M_Warehouse_ID=x.M_Warehouse_ID) ""
			+ ""ORDER BY M_AttributeSetInstance_ID"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_TrxName());
			pstmt.setInt (1, M_Product_ID);
			pstmt.setInt (2, M_Locator_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				list.add (new MStorage (getCtx(), rs, get_TrxName()));
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		MStorage[] retValue = new MStorage[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getSources
"
org.compiere.process.AssetDelivery.prepare,AssetDelivery.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""A_Asset_Group_ID""))
				m_A_Asset_Group_ID = element.getParameterAsInt();
			else if (name.equals(""M_Product_ID""))
				m_M_Product_ID = element.getParameterAsInt();
			else if (name.equals(""C_BPartner_ID""))
				m_C_BPartner_ID = element.getParameterAsInt();
			else if (name.equals(""A_Asset_ID""))
				m_A_Asset_ID = element.getParameterAsInt();
			else if (name.equals(""GuaranteeDate""))
				m_GuaranteeDate = (Timestamp)element.getParameter();
			else if (name.equals(""NoGuarantee_MailText_ID""))
				m_NoGuarantee_MailText_ID = element.getParameterAsInt();
			else if (name.equals(""AttachAsset""))
				m_AttachAsset = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		if (m_GuaranteeDate == null)
			m_GuaranteeDate = new Timestamp (System.currentTimeMillis());
		//
		m_client = MClient.get(getCtx());
	}	//	prepare
"
org.compiere.process.AssetDelivery.doIt,AssetDelivery.java,"String doIt() throws java.lang.Exception
	{
		log.info("""");
		long start = System.currentTimeMillis();

		//	Test
		if (m_client.getSmtpHost() == null || m_client.getSmtpHost().length() == 0)
			throw new Exception (""No Client SMTP Info"");
		if (m_client.getRequestEMail() == null)
			throw new Exception (""No Client Request User"");

		//	Asset selected
		if (m_A_Asset_ID != 0)
		{
			String msg = deliverIt (m_A_Asset_ID);
			addLog (m_A_Asset_ID, null, null, msg);
			return msg;
		}
		//
		StringBuffer sql = new StringBuffer (""SELECT A_Asset_ID, GuaranteeDate ""
			+ ""FROM A_Asset a""
			+ "" INNER JOIN M_Product p ON (a.M_Product_ID=p.M_Product_ID) ""
			+ ""WHERE "");
		if (m_A_Asset_Group_ID != 0)
			sql.append(""a.A_Asset_Group_ID="").append(m_A_Asset_Group_ID).append("" AND "");
		if (m_M_Product_ID != 0)
			sql.append(""p.M_Product_ID="").append(m_M_Product_ID).append("" AND "");
		if (m_C_BPartner_ID != 0)
			sql.append(""a.C_BPartner_ID="").append(m_C_BPartner_ID).append("" AND "");
		String s = sql.toString();
		if (s.endsWith("" WHERE ""))
			throw new Exception (""@RestrictSelection@"");
		//	No mail to expired
		if (m_NoGuarantee_MailText_ID == 0)
		{
			sql.append(""TRUNC(GuaranteeDate,'DD') >= "").append(DB.TO_DATE(m_GuaranteeDate, true));
			s = sql.toString();
		}
		//	Clean up
		if (s.endsWith("" AND ""))
			s = sql.substring(0, sql.length()-5);
		//
		PreparedStatement pstmt = null;
		int count = 0;
		int errors = 0;
		int reminders = 0;
		try
		{
			pstmt = DB.prepareStatement(s, (Trx) null);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				int A_Asset_ID = rs.getInt(1);
				Timestamp GuaranteeDate = rs.getTimestamp(2);

				//	Guarantee Expired
				if (GuaranteeDate != null && GuaranteeDate.before(m_GuaranteeDate))
				{
					if (m_NoGuarantee_MailText_ID != 0)
					{
						sendNoGuaranteeMail (A_Asset_ID, m_NoGuarantee_MailText_ID, get_TrxName());
						reminders++;
					}
				}
				else	//	Guarantee valid
				{
					String msg = deliverIt (A_Asset_ID);
					addLog (A_Asset_ID, null, null, msg);
					if (msg.startsWith (""** ""))
						errors++;
					else
						count++;
				}
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, s, e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		log.info(""Count="" + count + "", Errors="" + errors + "", Reminder="" + reminders
			+ "" - "" + (System.currentTimeMillis()-start) + ""ms"");
		return ""@Sent@="" + count + "" - @Errors@="" + errors;
	}	//	doIt
"
org.compiere.process.AssetDelivery.sendNoGuaranteeMail,AssetDelivery.java,"String sendNoGuaranteeMail (int A_Asset_ID, int R_MailText_ID, Trx trx)
	{
		MAsset asset = new MAsset (getCtx(), A_Asset_ID, trx);
		if (asset.getAD_User_ID() == 0)
			return ""** No Asset User"";
		MUser user = new MUser (getCtx(), asset.getAD_User_ID(), get_TrxName());
		if (user.getEMail() == null || user.getEMail().length() == 0)
			return ""** No Asset User Email"";
		if (m_MailText == null || m_MailText.getR_MailText_ID() != R_MailText_ID)
			m_MailText = new MMailText (getCtx(), R_MailText_ID, get_TrxName());
		if (m_MailText.getMailHeader() == null || m_MailText.getMailHeader().length() == 0)
			return ""** No Subject"";

		//	Create Mail
		EMail email = m_client.createEMail(user.getEMail(), user.getName(), null, null);
		if (email == null)
			return ""** Invalid: "" + user.getEMail();
		m_MailText.setPO(user);
		m_MailText.setPO(asset);
		String message = m_MailText.getMailText(true);
		if (m_MailText.isHtml())
			email.setMessageHTML(m_MailText.getMailHeader(), message);
		else
		{
			email.setSubject (m_MailText.getMailHeader());
			email.setMessageText (message);
		}
		String msg = email.send();
		new MUserMail(m_MailText, asset.getAD_User_ID(), email).save();
		if (!EMail.SENT_OK.equals(msg))
			return ""** Not delivered: "" + user.getEMail() + "" - "" + msg;
		//
		return user.getEMail();
	}	//	sendNoGuaranteeMail
"
org.compiere.process.AssetDelivery.deliverIt,AssetDelivery.java,"String deliverIt (int A_Asset_ID)
	{
		log.fine(""A_Asset_ID="" + A_Asset_ID);
		long start = System.currentTimeMillis();
		//
		MAsset asset = new MAsset (getCtx(), A_Asset_ID, get_TrxName());
		if (asset.getAD_User_ID() == 0)
			return ""** No Asset User"";
		MUser user = new MUser (getCtx(), asset.getAD_User_ID(), get_TrxName());
		if (user.getEMail() == null || user.getEMail().length() == 0)
			return ""** No Asset User Email"";
		if (asset.getProductR_MailText_ID() == 0)
			return ""** Product Mail Text"";
		if (m_MailText == null || m_MailText.getR_MailText_ID() != asset.getProductR_MailText_ID())
			m_MailText = new MMailText (getCtx(), asset.getProductR_MailText_ID(), get_TrxName());
		if (m_MailText.getMailHeader() == null || m_MailText.getMailHeader().length() == 0)
			return ""** No Subject"";

		//	Create Mail
		EMail email = m_client.createEMail(user.getEMail(), user.getName(), null, null);
		if (email == null || !email.isValid())
		{
			asset.setHelp(asset.getHelp() + "" - Invalid EMail"");
			asset.setIsActive(false);
			return ""** Invalid EMail: "" + user.getEMail() + "" - "" + email;
		}
		if (m_client.isSmtpAuthorization())
			email.createAuthenticator(m_client.getRequestUser(), m_client.getRequestUserPW());
		m_MailText.setUser(user);
		m_MailText.setPO(asset);
		String message = m_MailText.getMailText(true);
		if (m_MailText.isHtml() || m_AttachAsset)
			email.setMessageHTML(m_MailText.getMailHeader(), message);
		else
		{
			email.setSubject (m_MailText.getMailHeader());
			email.setMessageText (message);
		}
		if (m_AttachAsset)
		{
			MProductDownload[] pdls = asset.getProductDownloads();
			if (pdls != null)
			{
				for (MProductDownload element : pdls) {
					URL url = element.getDownloadURL(m_client.getDocumentDir());
					if (url != null)
						email.addAttachment(url);
				}
			}
			else
				log.warning(""No DowloadURL for A_Asset_ID="" + A_Asset_ID);
		}
		String msg = email.send();
		new MUserMail(m_MailText, asset.getAD_User_ID(), email).save();
		if (!EMail.SENT_OK.equals(msg))
			return ""** Not delivered: "" + user.getEMail() + "" - "" + msg;

		MAssetDelivery ad = asset.confirmDelivery(email, user.getAD_User_ID());
		ad.save();
		asset.save();
		//
		log.fine((System.currentTimeMillis()-start) + "" ms"");
		//	success
		return user.getEMail() + "" - "" + asset.getProductVersionNo();
	}	//	deliverIt
"
org.compiere.process.RemoteMergeDataVO.toString,RemoteMergeDataVO.java,"String toString()
	{
		return ""RemoteNewDataVO[test="" + Test
			+ ""-"" + TableName
	//		+ "","" + Sql
			+ ""]"";
	}	//	toString
"
org.compiere.process.AcctSchemaDefaultCopy.prepare,AcctSchemaDefaultCopy.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) 
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_AcctSchema_ID""))
				p_C_AcctSchema_ID = element.getParameterAsInt();
			else if (name.equals(""CopyOverwriteAcct""))
				p_CopyOverwriteAcct = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.AcctSchemaDefaultCopy.doIt,AcctSchemaDefaultCopy.java,"String doIt () throws Exception
	{
		log.info(""C_AcctSchema_ID="" + p_C_AcctSchema_ID
			+ "", CopyOverwriteAcct="" + p_CopyOverwriteAcct);
		if (p_C_AcctSchema_ID == 0)
			throw new CompiereSystemException(""C_AcctSchema_ID=0"");
		MAcctSchema as = MAcctSchema.get(getCtx(), p_C_AcctSchema_ID);
		if (as.get_ID() != p_C_AcctSchema_ID)
			throw new CompiereSystemException(""@NotFound@ @C_AcctSchema_ID@ ID="" + p_C_AcctSchema_ID);
		MAcctSchemaDefault acct = MAcctSchemaDefault.get (getCtx(), p_C_AcctSchema_ID);
		if (acct == null || acct.get_ID() != p_C_AcctSchema_ID)
			throw new CompiereSystemException(""Default Not Found - C_AcctSchema_ID="" + p_C_AcctSchema_ID);
		
		String sql = null;
		int updated = 0;
		int created = 0;
		int updatedTotal = 0;
		int createdTotal = 0;
		
		//	Update existing Product Category
		if (p_CopyOverwriteAcct)
		{
			sql = ""UPDATE M_Product_Category_Acct pa ""
				+ ""SET P_Revenue_Acct="" + acct.getP_Revenue_Acct()
				+ "", P_Expense_Acct="" + acct.getP_Expense_Acct()
				+ "", P_CostAdjustment_Acct="" + acct.getP_CostAdjustment_Acct()
				+ "", P_InventoryClearing_Acct="" + acct.getP_InventoryClearing_Acct()
				+ "", P_Asset_Acct="" + acct.getP_Asset_Acct()
				+ "", P_COGS_Acct="" + acct.getP_COGS_Acct()
				+ "", P_PurchasePriceVariance_Acct="" + acct.getP_PurchasePriceVariance_Acct()
				+ "", P_InvoicePriceVariance_Acct="" + acct.getP_InvoicePriceVariance_Acct()
				+ "", P_TradeDiscountRec_Acct="" + acct.getP_TradeDiscountRec_Acct()
				+ "", P_TradeDiscountGrant_Acct="" + acct.getP_TradeDiscountGrant_Acct()
				+ "", Updated=SysDate, UpdatedBy=0 ""
				+ ""WHERE pa.C_AcctSchema_ID="" + p_C_AcctSchema_ID
				+ "" AND EXISTS (SELECT * FROM M_Product_Category p ""
					+ ""WHERE p.M_Product_Category_ID=pa.M_Product_Category_ID)"";
			updated = DB.executeUpdate(sql, get_TrxName());
			addLog(0, null, new BigDecimal(updated), ""@Updated@ @M_Product_Category_ID@"");
			updatedTotal += updated;
		}
		//	Insert new Product Category
		sql = ""INSERT INTO M_Product_Category_Acct ""
			+ ""(M_Product_Category_ID, C_AcctSchema_ID,""
			+ "" AD_Client_ID, AD_Org_ID, IsActive, Created, CreatedBy, Updated, UpdatedBy,""
			+ "" P_Revenue_Acct, P_Expense_Acct, P_CostAdjustment_Acct, P_InventoryClearing_Acct, P_Asset_Acct, P_CoGs_Acct,""
			+ "" P_PurchasePriceVariance_Acct, P_InvoicePriceVariance_Acct,""
			+ "" P_TradeDiscountRec_Acct, P_TradeDiscountGrant_Acct) ""
			+ ""SELECT p.M_Product_Category_ID, acct.C_AcctSchema_ID,""
			+ "" p.AD_Client_ID, p.AD_Org_ID, 'Y', SysDate, 0, SysDate, 0,""
			+ "" acct.P_Revenue_Acct, acct.P_Expense_Acct, acct.P_CostAdjustment_Acct, acct.P_InventoryClearing_Acct, acct.P_Asset_Acct, acct.P_CoGs_Acct,""
			+ "" acct.P_PurchasePriceVariance_Acct, acct.P_InvoicePriceVariance_Acct,""
			+ "" acct.P_TradeDiscountRec_Acct, acct.P_TradeDiscountGrant_Acct ""
			+ ""FROM M_Product_Category p""
			+ "" INNER JOIN C_AcctSchema_Default acct ON (p.AD_Client_ID=acct.AD_Client_ID) ""
			+ ""WHERE acct.C_AcctSchema_ID="" + p_C_AcctSchema_ID
			+ "" AND NOT EXISTS (SELECT * FROM M_Product_Category_Acct pa ""
				+ ""WHERE pa.M_Product_Category_ID=p.M_Product_Category_ID""
				+ "" AND pa.C_AcctSchema_ID=acct.C_AcctSchema_ID)"";
		created = DB.executeUpdate(sql, get_TrxName());
		addLog(0, null, new BigDecimal(created), ""@Created@ @M_Product_Category_ID@"");
		createdTotal += created;
		if (!p_CopyOverwriteAcct)	//	Insert new Products
		{
			sql = ""INSERT INTO M_Product_Acct ""
				+ ""(M_Product_ID, C_AcctSchema_ID,""
				+ "" AD_Client_ID, AD_Org_ID, IsActive, Created, CreatedBy, Updated, UpdatedBy,""
				+ "" P_Revenue_Acct, P_Expense_Acct, P_CostAdjustment_Acct, P_InventoryClearing_Acct, P_Asset_Acct, P_CoGs_Acct,""
				+ "" P_PurchasePriceVariance_Acct, P_InvoicePriceVariance_Acct,""
				+ "" P_TradeDiscountRec_Acct, P_TradeDiscountGrant_Acct) ""
				+ ""SELECT p.M_Product_ID, acct.C_AcctSchema_ID,""
				+ "" p.AD_Client_ID, p.AD_Org_ID, 'Y', SysDate, 0, SysDate, 0,""
				+ "" acct.P_Revenue_Acct, acct.P_Expense_Acct, acct.P_CostAdjustment_Acct, acct.P_InventoryClearing_Acct, acct.P_Asset_Acct, acct.P_CoGs_Acct,""
				+ "" acct.P_PurchasePriceVariance_Acct, acct.P_InvoicePriceVariance_Acct,""
				+ "" acct.P_TradeDiscountRec_Acct, acct.P_TradeDiscountGrant_Acct ""
				+ ""FROM M_Product p""
				+ "" INNER JOIN M_Product_Category_Acct acct ON (acct.M_Product_Category_ID=p.M_Product_Category_ID)""
				+ ""WHERE acct.C_AcctSchema_ID="" + p_C_AcctSchema_ID
				+ "" AND p.M_Product_Category_ID=acct.M_Product_Category_ID""
				+ "" AND NOT EXISTS (SELECT * FROM M_Product_Acct pa ""
					+ ""WHERE pa.M_Product_ID=p.M_Product_ID""
					+ "" AND pa.C_AcctSchema_ID=acct.C_AcctSchema_ID)"";
			created = DB.executeUpdate(sql, get_TrxName());
			addLog(0, null, new BigDecimal(created), ""@Created@ @M_Product_ID@"");
			createdTotal += created;
		}
		
		
		//	Update Business Partner Group
		if (p_CopyOverwriteAcct)
		{
			sql = ""UPDATE C_BP_Group_Acct a ""
				+ ""SET C_Receivable_Acct="" + acct.getC_Receivable_Acct()
				+ "", C_Receivable_Services_Acct="" + acct.getC_Receivable_Services_Acct()
				+ "", C_Prepayment_Acct="" + acct.getC_Prepayment_Acct()
				+ "", V_Liability_Acct="" + acct.getV_Liability_Acct()
				+ "", V_Liability_Services_Acct="" + acct.getV_Liability_Services_Acct()
				+ "", V_Prepayment_Acct="" + acct.getV_Prepayment_Acct()
				+ "", PayDiscount_Exp_Acct="" + acct.getPayDiscount_Exp_Acct()
				+ "", PayDiscount_Rev_Acct="" + acct.getPayDiscount_Rev_Acct()
				+ "", WriteOff_Acct="" + acct.getWriteOff_Acct()
				+ "", NotInvoicedReceipts_Acct="" + acct.getNotInvoicedReceipts_Acct()
				+ "", UnEarnedRevenue_Acct="" + acct.getUnEarnedRevenue_Acct()
				+ "", NotInvoicedRevenue_Acct="" + acct.getNotInvoicedRevenue_Acct()
				+ "", NotInvoicedReceivables_Acct="" + acct.getNotInvoicedReceivables_Acct()
				+ "", Updated=SysDate, UpdatedBy=0 ""
				+ ""WHERE a.C_AcctSchema_ID="" + p_C_AcctSchema_ID
				+ "" AND EXISTS (SELECT * FROM C_BP_Group_Acct x ""
					+ ""WHERE x.C_BP_Group_ID=a.C_BP_Group_ID)"";
			updated = DB.executeUpdate(sql, get_TrxName());
			addLog(0, null, new BigDecimal(updated), ""@Updated@ @C_BP_Group_ID@"");
			updatedTotal += updated;
		}
		// Insert Business Partner Group
		sql = ""INSERT INTO C_BP_Group_Acct ""
			+ ""(C_BP_Group_ID, C_AcctSchema_ID,""
			+ "" AD_Client_ID, AD_Org_ID, IsActive, Created, CreatedBy, Updated, UpdatedBy,""
			+ "" C_Receivable_Acct, C_Receivable_Services_Acct, C_PrePayment_Acct,""
			+ "" V_Liability_Acct, V_Liability_Services_Acct, V_PrePayment_Acct,""
			+ "" PayDiscount_Exp_Acct, PayDiscount_Rev_Acct, WriteOff_Acct,""
			+ "" NotInvoicedReceipts_Acct, UnEarnedRevenue_Acct,""
			+ "" NotInvoicedRevenue_Acct, NotInvoicedReceivables_Acct) ""
			+ ""SELECT x.C_BP_Group_ID, acct.C_AcctSchema_ID,""
			+ "" x.AD_Client_ID, x.AD_Org_ID, 'Y', SysDate, 0, SysDate, 0,""
			+ "" acct.C_Receivable_Acct, acct.C_Receivable_Services_Acct, acct.C_PrePayment_Acct,""
			+ "" acct.V_Liability_Acct, acct.V_Liability_Services_Acct, acct.V_PrePayment_Acct,""
			+ "" acct.PayDiscount_Exp_Acct, acct.PayDiscount_Rev_Acct, acct.WriteOff_Acct,""
			+ "" acct.NotInvoicedReceipts_Acct, acct.UnEarnedRevenue_Acct,""
			+ "" acct.NotInvoicedRevenue_Acct, acct.NotInvoicedReceivables_Acct ""
			+ ""FROM C_BP_Group x""
			+ "" INNER JOIN C_AcctSchema_Default acct ON (x.AD_Client_ID=acct.AD_Client_ID) ""
			+ ""WHERE acct.C_AcctSchema_ID="" + p_C_AcctSchema_ID
			+ "" AND NOT EXISTS (SELECT * FROM C_BP_Group_Acct a ""
				+ ""WHERE a.C_BP_Group_ID=x.C_BP_Group_ID""
				+ "" AND a.C_AcctSchema_ID=acct.C_AcctSchema_ID)"";
		created = DB.executeUpdate(sql, get_TrxName());
		addLog(0, null, new BigDecimal(created), ""@Created@ @C_BP_Group_ID@"");
		createdTotal += created;

		
		//	Update Business Partner - Employee
		if (p_CopyOverwriteAcct)
		{
			sql = ""UPDATE C_BP_Employee_Acct a ""
				+ ""SET E_Expense_Acct="" + acct.getE_Expense_Acct()
				+ "", E_Prepayment_Acct="" + acct.getE_Prepayment_Acct()
				+ "", Updated=SysDate, UpdatedBy=0 ""
				+ ""WHERE a.C_AcctSchema_ID="" + p_C_AcctSchema_ID
				+ "" AND EXISTS (SELECT * FROM C_BP_Employee_Acct x ""
					+ ""WHERE x.C_BPartner_ID=a.C_BPartner_ID)"";
			updated = DB.executeUpdate(sql, get_TrxName());
			addLog(0, null, new BigDecimal(updated), ""@Updated@ @C_BPartner_ID@ @IsEmployee@"");
			updatedTotal += updated;
		}
		//	Insert new Business Partner - Employee
		sql = ""INSERT INTO C_BP_Employee_Acct ""
			+ ""(C_BPartner_ID, C_AcctSchema_ID,""
			+ "" AD_Client_ID, AD_Org_ID, IsActive, Created, CreatedBy, Updated, UpdatedBy,""
			+ "" E_Expense_Acct, E_Prepayment_Acct) ""
			+ ""SELECT x.C_BPartner_ID, acct.C_AcctSchema_ID,""
			+ "" x.AD_Client_ID, x.AD_Org_ID, 'Y', SysDate, 0, SysDate, 0,""
			+ "" acct.E_Expense_Acct, acct.E_Prepayment_Acct ""
			+ ""FROM C_BPartner x""
			+ "" INNER JOIN C_AcctSchema_Default acct ON (x.AD_Client_ID=acct.AD_Client_ID) ""
			+ ""WHERE acct.C_AcctSchema_ID="" + p_C_AcctSchema_ID
			+ "" AND NOT EXISTS (SELECT * FROM C_BP_Employee_Acct a ""
				+ ""WHERE a.C_BPartner_ID=x.C_BPartner_ID""
				+ "" AND a.C_AcctSchema_ID=acct.C_AcctSchema_ID)"";
		created = DB.executeUpdate(sql, get_TrxName());
		addLog(0, null, new BigDecimal(created), ""@Created@ @C_BPartner_ID@ @IsEmployee@"");
		createdTotal += created;
		//
		if (!p_CopyOverwriteAcct)
		{
			sql = ""INSERT INTO C_BP_Customer_Acct ""
				+ ""(C_BPartner_ID, C_AcctSchema_ID,""
				+ "" AD_Client_ID, AD_Org_ID, IsActive, Created, CreatedBy, Updated, UpdatedBy,""
				+ "" C_Receivable_Acct, C_Receivable_Services_Acct, C_PrePayment_Acct) ""
				+ ""SELECT p.C_BPartner_ID, acct.C_AcctSchema_ID,""
				+ "" p.AD_Client_ID, p.AD_Org_ID, 'Y', SysDate, 0, SysDate, 0,""
				+ "" acct.C_Receivable_Acct, acct.C_Receivable_Services_Acct, acct.C_PrePayment_Acct ""
				+ ""FROM C_BPartner p""
				+ "" INNER JOIN C_BP_Group_Acct acct ON (acct.C_BP_Group_ID=p.C_BP_Group_ID)""
				+ ""WHERE acct.C_AcctSchema_ID="" + p_C_AcctSchema_ID			//	#
				+ "" AND p.C_BP_Group_ID=acct.C_BP_Group_ID""
				+ "" AND NOT EXISTS (SELECT * FROM C_BP_Customer_Acct ca ""
					+ ""WHERE ca.C_BPartner_ID=p.C_BPartner_ID""
					+ "" AND ca.C_AcctSchema_ID=acct.C_AcctSchema_ID)"";
			created = DB.executeUpdate(sql, get_TrxName());
			addLog(0, null, new BigDecimal(created), ""@Created@ @C_BPartner_ID@ @IsCustomer@"");
			createdTotal += created;
			//
			sql = ""INSERT INTO C_BP_Vendor_Acct ""
				+ ""(C_BPartner_ID, C_AcctSchema_ID,""
				+ "" AD_Client_ID, AD_Org_ID, IsActive, Created, CreatedBy, Updated, UpdatedBy,""
				+ "" V_Liability_Acct, V_Liability_Services_Acct, V_PrePayment_Acct) ""
				+ ""SELECT p.C_BPartner_ID, acct.C_AcctSchema_ID,""
				+ "" p.AD_Client_ID, p.AD_Org_ID, 'Y', SysDate, 0, SysDate, 0,""
				+ "" acct.V_Liability_Acct, acct.V_Liability_Services_Acct, acct.V_PrePayment_Acct ""
				+ ""FROM C_BPartner p""
				+ "" INNER JOIN C_BP_Group_Acct acct ON (acct.C_BP_Group_ID=p.C_BP_Group_ID)""
				+ ""WHERE acct.C_AcctSchema_ID="" + p_C_AcctSchema_ID			//	#
				+ "" AND p.C_BP_Group_ID=acct.C_BP_Group_ID""
				+ "" AND NOT EXISTS (SELECT * FROM C_BP_Vendor_Acct va ""
					+ ""WHERE va.C_BPartner_ID=p.C_BPartner_ID AND va.C_AcctSchema_ID=acct.C_AcctSchema_ID)"";
			created = DB.executeUpdate(sql, get_TrxName());
			addLog(0, null, new BigDecimal(created), ""@Created@ @C_BPartner_ID@ @IsVendor@"");
			createdTotal += created;
		}

		//	Update Warehouse
		if (p_CopyOverwriteAcct)
		{
			sql = ""UPDATE M_Warehouse_Acct a ""
				+ ""SET W_Inventory_Acct="" + acct.getW_Inventory_Acct()
				+ "", W_Differences_Acct="" + acct.getW_Differences_Acct()
				+ "", W_Revaluation_Acct="" + acct.getW_Revaluation_Acct()
				+ "", W_InvActualAdjust_Acct="" + acct.getW_InvActualAdjust_Acct()
				+ "", Updated=SysDate, UpdatedBy=0 ""
				+ ""WHERE a.C_AcctSchema_ID="" + p_C_AcctSchema_ID
				+ "" AND EXISTS (SELECT * FROM M_Warehouse_Acct x ""
					+ ""WHERE x.M_Warehouse_ID=a.M_Warehouse_ID)"";
			updated = DB.executeUpdate(sql, get_TrxName());
			addLog(0, null, new BigDecimal(updated), ""@Updated@ @M_Warehouse_ID@"");
			updatedTotal += updated;
		}
		//	Insert new Warehouse
		sql = ""INSERT INTO M_Warehouse_Acct ""
			+ ""(M_Warehouse_ID, C_AcctSchema_ID,""
			+ "" AD_Client_ID, AD_Org_ID, IsActive, Created, CreatedBy, Updated, UpdatedBy,""
			+ "" W_Inventory_Acct, W_Differences_Acct, W_Revaluation_Acct, W_InvActualAdjust_Acct) ""
			+ ""SELECT x.M_Warehouse_ID, acct.C_AcctSchema_ID,""
			+ "" x.AD_Client_ID, x.AD_Org_ID, 'Y', SysDate, 0, SysDate, 0,""
			+ "" acct.W_Inventory_Acct, acct.W_Differences_Acct, acct.W_Revaluation_Acct, acct.W_InvActualAdjust_Acct ""
			+ ""FROM M_Warehouse x""
			+ "" INNER JOIN C_AcctSchema_Default acct ON (x.AD_Client_ID=acct.AD_Client_ID) ""
			+ ""WHERE acct.C_AcctSchema_ID="" + p_C_AcctSchema_ID
			+ "" AND NOT EXISTS (SELECT * FROM M_Warehouse_Acct a ""
				+ ""WHERE a.M_Warehouse_ID=x.M_Warehouse_ID""
				+ "" AND a.C_AcctSchema_ID=acct.C_AcctSchema_ID)"";
		created = DB.executeUpdate(sql, get_TrxName());
		addLog(0, null, new BigDecimal(created), ""@Created@ @M_Warehouse_ID@"");
		createdTotal += created;


		//	Update Project
		if (p_CopyOverwriteAcct)
		{
			sql = ""UPDATE C_Project_Acct a ""
				+ ""SET PJ_Asset_Acct="" + acct.getPJ_Asset_Acct()
				+ "", PJ_WIP_Acct="" + acct.getPJ_Asset_Acct()
				+ "", Updated=SysDate, UpdatedBy=0 ""
				+ ""WHERE a.C_AcctSchema_ID="" + p_C_AcctSchema_ID
				+ "" AND EXISTS (SELECT * FROM C_Project_Acct x ""
					+ ""WHERE x.C_Project_ID=a.C_Project_ID)"";
			updated = DB.executeUpdate(sql, get_TrxName());
			addLog(0, null, new BigDecimal(updated), ""@Updated@ @C_Project_ID@"");
			updatedTotal += updated;
		}
		//	Insert new Projects
		sql = ""INSERT INTO C_Project_Acct ""
			+ ""(C_Project_ID, C_AcctSchema_ID,""
			+ "" AD_Client_ID, AD_Org_ID, IsActive, Created, CreatedBy, Updated, UpdatedBy,""
			+ "" PJ_Asset_Acct, PJ_WIP_Acct) ""
			+ ""SELECT x.C_Project_ID, acct.C_AcctSchema_ID,""
			+ "" x.AD_Client_ID, x.AD_Org_ID, 'Y', SysDate, 0, SysDate, 0,""
			+ "" acct.PJ_Asset_Acct, acct.PJ_WIP_Acct ""
			+ ""FROM C_Project x""
			+ "" INNER JOIN C_AcctSchema_Default acct ON (x.AD_Client_ID=acct.AD_Client_ID) ""
			+ ""WHERE acct.C_AcctSchema_ID="" + p_C_AcctSchema_ID
			+ "" AND NOT EXISTS (SELECT * FROM C_Project_Acct a ""
				+ ""WHERE a.C_Project_ID=x.C_Project_ID""
				+ "" AND a.C_AcctSchema_ID=acct.C_AcctSchema_ID)"";
		created = DB.executeUpdate(sql, get_TrxName());
		addLog(0, null, new BigDecimal(created), ""@Created@ @C_Project_ID@"");
		createdTotal += created;


		//	Update Tax
		if (p_CopyOverwriteAcct)
		{
			sql = ""UPDATE C_Tax_Acct a ""
				+ ""SET T_Due_Acct="" + acct.getT_Due_Acct()
				+ "", T_Liability_Acct="" + acct.getT_Liability_Acct()
				+ "", T_Credit_Acct="" + acct.getT_Credit_Acct()
				+ "", T_Receivables_Acct="" + acct.getT_Receivables_Acct()
				+ "", T_Expense_Acct="" + acct.getT_Expense_Acct()
				+ "", Updated=SysDate, UpdatedBy=0 ""
				+ ""WHERE a.C_AcctSchema_ID="" + p_C_AcctSchema_ID
				+ "" AND EXISTS (SELECT * FROM C_Tax_Acct x ""
					+ ""WHERE x.C_Tax_ID=a.C_Tax_ID)"";
			updated = DB.executeUpdate(sql, get_TrxName());
			addLog(0, null, new BigDecimal(updated), ""@Updated@ @C_Tax_ID@"");
			updatedTotal += updated;
		}
		//	Insert new Tax
		sql = ""INSERT INTO C_Tax_Acct ""
			+ ""(C_Tax_ID, C_AcctSchema_ID,""
			+ "" AD_Client_ID, AD_Org_ID, IsActive, Created, CreatedBy, Updated, UpdatedBy,""
			+ "" T_Due_Acct, T_Liability_Acct, T_Credit_Acct, T_Receivables_Acct, T_Expense_Acct) ""
			+ ""SELECT x.C_Tax_ID, acct.C_AcctSchema_ID,""
			+ "" x.AD_Client_ID, x.AD_Org_ID, 'Y', SysDate, 0, SysDate, 0,""
			+ "" acct.T_Due_Acct, acct.T_Liability_Acct, acct.T_Credit_Acct, acct.T_Receivables_Acct, acct.T_Expense_Acct ""
			+ ""FROM C_Tax x""
			+ "" INNER JOIN C_AcctSchema_Default acct ON (x.AD_Client_ID=acct.AD_Client_ID) ""
			+ ""WHERE acct.C_AcctSchema_ID="" + p_C_AcctSchema_ID
			+ "" AND NOT EXISTS (SELECT * FROM C_Tax_Acct a ""
				+ ""WHERE a.C_Tax_ID=x.C_Tax_ID""
				+ "" AND a.C_AcctSchema_ID=acct.C_AcctSchema_ID)"";
		created = DB.executeUpdate(sql, get_TrxName());
		addLog(0, null, new BigDecimal(created), ""@Created@ @C_Tax_ID@"");
		createdTotal += created;


		//	Update BankAccount
		if (p_CopyOverwriteAcct)
		{
			sql = ""UPDATE C_BankAccount_Acct a ""
				+ ""SET B_InTransit_Acct="" + acct.getB_InTransit_Acct()
				+ "", B_Asset_Acct="" + acct.getB_Asset_Acct()
				+ "", B_Expense_Acct="" + acct.getB_Expense_Acct()
				+ "", B_InterestRev_Acct="" + acct.getB_InterestRev_Acct()
				+ "", B_InterestExp_Acct="" + acct.getB_InterestExp_Acct()
				+ "", B_Unidentified_Acct="" + acct.getB_Unidentified_Acct()
				+ "", B_UnallocatedCash_Acct="" + acct.getB_UnallocatedCash_Acct()
				+ "", B_PaymentSelect_Acct="" + acct.getB_PaymentSelect_Acct()
				+ "", B_SettlementGain_Acct="" + acct.getB_SettlementGain_Acct()
				+ "", B_SettlementLoss_Acct="" + acct.getB_SettlementLoss_Acct()
				+ "", B_RevaluationGain_Acct="" + acct.getB_RevaluationGain_Acct()
				+ "", B_RevaluationLoss_Acct="" + acct.getB_RevaluationLoss_Acct()
				+ "", Updated=SysDate, UpdatedBy=0 ""
				+ ""WHERE a.C_AcctSchema_ID="" + p_C_AcctSchema_ID
				+ "" AND EXISTS (SELECT * FROM C_BankAccount_Acct x ""
					+ ""WHERE x.C_BankAccount_ID=a.C_BankAccount_ID)"";
			updated = DB.executeUpdate(sql, get_TrxName());
			addLog(0, null, new BigDecimal(updated), ""@Updated@ @C_BankAccount_ID@"");
			updatedTotal += updated;
		}
		//	Insert new BankAccount
		sql = ""INSERT INTO C_BankAccount_Acct ""
			+ ""(C_BankAccount_ID, C_AcctSchema_ID,""
			+ "" AD_Client_ID, AD_Org_ID, IsActive, Created, CreatedBy, Updated, UpdatedBy,""
			+ "" B_InTransit_Acct, B_Asset_Acct, B_Expense_Acct, B_InterestRev_Acct, B_InterestExp_Acct,""
			+ "" B_Unidentified_Acct, B_UnallocatedCash_Acct, B_PaymentSelect_Acct,""
			+ "" B_SettlementGain_Acct, B_SettlementLoss_Acct,""
			+ "" B_RevaluationGain_Acct, B_RevaluationLoss_Acct) ""
			+ ""SELECT x.C_BankAccount_ID, acct.C_AcctSchema_ID,""
			+ "" x.AD_Client_ID, x.AD_Org_ID, 'Y', SysDate, 0, SysDate, 0,""
			+ "" acct.B_InTransit_Acct, acct.B_Asset_Acct, acct.B_Expense_Acct, acct.B_InterestRev_Acct, acct.B_InterestExp_Acct,""
			+ "" acct.B_Unidentified_Acct, acct.B_UnallocatedCash_Acct, acct.B_PaymentSelect_Acct,""
			+ "" acct.B_SettlementGain_Acct, acct.B_SettlementLoss_Acct,""
			+ "" acct.B_RevaluationGain_Acct, acct.B_RevaluationLoss_Acct ""
			+ ""FROM C_BankAccount x""
			+ "" INNER JOIN C_AcctSchema_Default acct ON (x.AD_Client_ID=acct.AD_Client_ID) ""
			+ ""WHERE acct.C_AcctSchema_ID="" + p_C_AcctSchema_ID
			+ "" AND NOT EXISTS (SELECT * FROM C_BankAccount_Acct a ""
				+ ""WHERE a.C_BankAccount_ID=x.C_BankAccount_ID""
				+ "" AND a.C_AcctSchema_ID=acct.C_AcctSchema_ID)"";
		created = DB.executeUpdate(sql, get_TrxName());
		addLog(0, null, new BigDecimal(created), ""@Created@ @C_BankAccount_ID@"");
		createdTotal += created;


		//	Update Withholding
		if (p_CopyOverwriteAcct)
		{
			sql = ""UPDATE C_Withholding_Acct a ""
				+ ""SET Withholding_Acct="" + acct.getWithholding_Acct()
				+ "", Updated=SysDate, UpdatedBy=0 ""
				+ ""WHERE a.C_AcctSchema_ID="" + p_C_AcctSchema_ID 
				+ "" AND EXISTS (SELECT * FROM C_Withholding_Acct x ""
					+ ""WHERE x.C_Withholding_ID=a.C_Withholding_ID)"";
			updated = DB.executeUpdate(sql, get_TrxName());
			addLog(0, null, new BigDecimal(updated), ""@Updated@ @C_Withholding_ID@"");
			updatedTotal += updated;
		}
		//	Insert new Withholding
		sql = ""INSERT INTO C_Withholding_Acct ""
			+ ""(C_Withholding_ID, C_AcctSchema_ID,""
			+ "" AD_Client_ID, AD_Org_ID, IsActive, Created, CreatedBy, Updated, UpdatedBy,""
			+ ""	Withholding_Acct) ""
			+ ""SELECT x.C_Withholding_ID, acct.C_AcctSchema_ID,""
			+ "" x.AD_Client_ID, x.AD_Org_ID, 'Y', SysDate, 0, SysDate, 0,""
			+ "" acct.Withholding_Acct ""
			+ ""FROM C_Withholding x""
			+ "" INNER JOIN C_AcctSchema_Default acct ON (x.AD_Client_ID=acct.AD_Client_ID) ""
			+ ""WHERE acct.C_AcctSchema_ID="" + p_C_AcctSchema_ID
			+ "" AND NOT EXISTS (SELECT * FROM C_Withholding_Acct a ""
				+ ""WHERE a.C_Withholding_ID=x.C_Withholding_ID""
				+ "" AND a.C_AcctSchema_ID=acct.C_AcctSchema_ID)"";
		created = DB.executeUpdate(sql, get_TrxName());
		addLog(0, null, new BigDecimal(created), ""@Created@ @C_Withholding_ID@"");
		createdTotal += created;

		
		//	Update Charge
		if (p_CopyOverwriteAcct)
		{
			sql = ""UPDATE C_Charge_Acct a ""
				+ ""SET Ch_Expense_Acct="" + acct.getCh_Expense_Acct()
				+ "", Ch_Revenue_Acct="" + acct.getCh_Revenue_Acct()
				+ "", Updated=SysDate, UpdatedBy=0 ""
				+ ""WHERE a.C_AcctSchema_ID="" + p_C_AcctSchema_ID
				+ "" AND EXISTS (SELECT * FROM C_Charge_Acct x ""
					+ ""WHERE x.C_Charge_ID=a.C_Charge_ID)"";
			updated = DB.executeUpdate(sql, get_TrxName());
			addLog(0, null, new BigDecimal(updated), ""@Updated@ @C_Charge_ID@"");
			updatedTotal += updated;
		}
		//	Insert new Charge
		sql = ""INSERT INTO C_Charge_Acct ""
			+ ""(C_Charge_ID, C_AcctSchema_ID,""
			+ "" AD_Client_ID, AD_Org_ID, IsActive, Created, CreatedBy, Updated, UpdatedBy,""
			+ "" Ch_Expense_Acct, Ch_Revenue_Acct) ""
			+ ""SELECT x.C_Charge_ID, acct.C_AcctSchema_ID,""
			+ "" x.AD_Client_ID, x.AD_Org_ID, 'Y', SysDate, 0, SysDate, 0,""
			+ "" acct.Ch_Expense_Acct, acct.Ch_Revenue_Acct ""
			+ ""FROM C_Charge x""
			+ "" INNER JOIN C_AcctSchema_Default acct ON (x.AD_Client_ID=acct.AD_Client_ID) ""
			+ ""WHERE acct.C_AcctSchema_ID="" + p_C_AcctSchema_ID
			+ "" AND NOT EXISTS (SELECT * FROM C_Charge_Acct a ""
				+ ""WHERE a.C_Charge_ID=x.C_Charge_ID""
				+ "" AND a.C_AcctSchema_ID=acct.C_AcctSchema_ID)"";
		created = DB.executeUpdate(sql, get_TrxName());
		addLog(0, null, new BigDecimal(created), ""@Created@ @C_Charge_ID@"");
		createdTotal += created;


		//	Update Cashbook
		if (p_CopyOverwriteAcct)
		{
			sql = ""UPDATE C_Cashbook_Acct a ""
				+ ""SET CB_Asset_Acct="" + acct.getCB_Asset_Acct()
				+ "", CB_Differences_Acct="" + acct.getCB_Differences_Acct()
				+ "", CB_CashTransfer_Acct="" + acct.getCB_CashTransfer_Acct()
				+ "", CB_Expense_Acct="" + acct.getCB_Expense_Acct()
				+ "", CB_Receipt_Acct="" + acct.getCB_Receipt_Acct()
				+ "", Updated=SysDate, UpdatedBy=0 ""
				+ ""WHERE a.C_AcctSchema_ID="" + p_C_AcctSchema_ID
				+ "" AND EXISTS (SELECT * FROM C_Cashbook_Acct x ""
					+ ""WHERE x.C_Cashbook_ID=a.C_Cashbook_ID)"";
			updated = DB.executeUpdate(sql, get_TrxName());
			addLog(0, null, new BigDecimal(updated), ""@Updated@ @C_Cashbook_ID@"");
			updatedTotal += updated;
		}
		//	Insert new Cashbook
		sql = ""INSERT INTO C_Cashbook_Acct ""
			+ ""(C_Cashbook_ID, C_AcctSchema_ID,""
			+ "" AD_Client_ID, AD_Org_ID, IsActive, Created, CreatedBy, Updated, UpdatedBy,""
			+ "" CB_Asset_Acct, CB_Differences_Acct, CB_CashTransfer_Acct,""
			+ "" CB_Expense_Acct, CB_Receipt_Acct) ""
			+ ""SELECT x.C_Cashbook_ID, acct.C_AcctSchema_ID,""
			+ "" x.AD_Client_ID, x.AD_Org_ID, 'Y', SysDate, 0, SysDate, 0,""
			+ "" acct.CB_Asset_Acct, acct.CB_Differences_Acct, acct.CB_CashTransfer_Acct,""
			+ "" acct.CB_Expense_Acct, acct.CB_Receipt_Acct ""
			+ ""FROM C_Cashbook x""
			+ "" INNER JOIN C_AcctSchema_Default acct ON (x.AD_Client_ID=acct.AD_Client_ID) ""
			+ ""WHERE acct.C_AcctSchema_ID="" + p_C_AcctSchema_ID
			+ "" AND NOT EXISTS (SELECT * FROM C_Cashbook_Acct a ""
				+ ""WHERE a.C_Cashbook_ID=x.C_Cashbook_ID""
				+ "" AND a.C_AcctSchema_ID=acct.C_AcctSchema_ID)"";
		created = DB.executeUpdate(sql, get_TrxName());
		addLog(0, null, new BigDecimal(created), ""@Created@ @C_Cashbook_ID@"");
		createdTotal += created;
		
        // Update Work Order accounts only if manufacturing is licensed
		// TODO: replace the asset and differences acct with new accts for work order, to be defined on this page
		SysEnv se = SysEnv.get(""CMFG"");
		if (!(se==null) && se.checkLicense())
		{
			//	Update Work Order Class
			if (p_CopyOverwriteAcct)
			{
				sql = ""UPDATE M_WorkOrderClass_Acct a ""
					+ ""SET WO_Material_Acct="" + acct.getWO_Material_Acct()
					+ "", WO_CloseExpense_Acct="" + acct.getWO_CloseExpense_Acct()
					+ "", Updated=SysDate, UpdatedBy=0 ""
					+ ""WHERE a.C_AcctSchema_ID="" + p_C_AcctSchema_ID
					+ "" AND EXISTS (SELECT * FROM M_WorkOrderClass_Acct x ""
					+ ""WHERE x.M_WorkOrderClass_ID=a.M_WorkOrderClass_ID)"";
				updated = DB.executeUpdate(sql, get_TrxName());
				addLog(0, null, new BigDecimal(updated), ""@Updated@ @M_WorkOrderClass_ID@"");
				updatedTotal += updated;
			}
			//	Insert new Work Order Class
			sql = ""INSERT INTO M_WorkOrderClass_Acct ""
				+ ""(M_WorkOrderClass_ID, C_AcctSchema_ID,""
				+ "" AD_Client_ID, AD_Org_ID, IsActive, Created, CreatedBy, Updated, UpdatedBy,""
				+ "" WO_Material_Acct, WO_CloseExpense_Acct) ""
				+ ""SELECT x.M_WorkOrderClass_ID, acct.C_AcctSchema_ID,""
				+ "" x.AD_Client_ID, x.AD_Org_ID, 'Y', SysDate, 0, SysDate, 0,""
				+ "" acct.WO_Material_Acct, acct.WO_CloseExpense_Acct ""
				+ ""FROM M_WorkOrderClass x""
				+ "" INNER JOIN C_AcctSchema_Default acct ON (x.AD_Client_ID=acct.AD_Client_ID) ""
				+ ""WHERE acct.C_AcctSchema_ID="" + p_C_AcctSchema_ID
				+ "" AND NOT EXISTS (SELECT * FROM M_WorkOrderClass_Acct a ""
				+ ""WHERE a.M_WorkOrderClass_ID=x.M_WorkOrderClass_ID""
				+ "" AND a.C_AcctSchema_ID=acct.C_AcctSchema_ID)"";
			created = DB.executeUpdate(sql, get_TrxName());
			addLog(0, null, new BigDecimal(created), ""@Created@ @M_WorkOrderClass_ID@"");
			createdTotal += created;
		}

		return ""@Created@="" + createdTotal + "", @Updated@="" + updatedTotal;
	}	//	doIt
"
org.compiere.process.ImportBPartner.prepare,ImportBPartner.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) 
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_Client_ID""))
				p_AD_Client_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""DeleteOldImported""))
				p_deleteOldImported = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		if (p_DateValue == null)
			p_DateValue = new Timestamp (System.currentTimeMillis());
	}	//	prepare
"
org.compiere.process.ImportBPartner.doIt,ImportBPartner.java,"String doIt() throws java.lang.Exception
	{
		StringBuffer sql = null;
		int no = 0;
		String clientCheck = "" AND AD_Client_ID="" + p_AD_Client_ID;

		//	****	Prepare	****

		//	Delete Old Imported
		if (p_deleteOldImported)
		{
			sql = new StringBuffer (""DELETE FROM I_BPartner ""
				+ ""WHERE I_IsImported='Y'"").append(clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			log.fine(""Delete Old Impored ="" + no);
		}

		//	Set Client, Org, IsActive, Created/Updated
		sql = new StringBuffer (""UPDATE I_BPartner ""
			+ ""SET AD_Client_ID = COALESCE (AD_Client_ID, "").append(p_AD_Client_ID).append(""),""
			+ "" AD_Org_ID = COALESCE (AD_Org_ID, 0),""
			+ "" IsActive = COALESCE (IsActive, 'Y'),""
			+ "" Created = COALESCE (Created, SysDate),""
			+ "" CreatedBy = COALESCE (CreatedBy, 0),""
			+ "" Updated = COALESCE (Updated, SysDate),""
			+ "" UpdatedBy = COALESCE (UpdatedBy, 0),""
			+ "" I_ErrorMsg = NULL,""
			+ "" I_IsImported = 'N' ""
			+ ""WHERE I_IsImported<>'Y' OR I_IsImported IS NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Reset="" + no);

		//	Set BP_Group
		sql = new StringBuffer (""UPDATE I_BPartner i ""
			+ ""SET GroupValue=(SELECT MAX(Value) FROM C_BP_Group g WHERE g.IsDefault='Y'""
			+ "" AND g.AD_Client_ID=i.AD_Client_ID) "");
		sql.append(""WHERE GroupValue IS NULL AND C_BP_Group_ID IS NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Group Default="" + no);
		//
		sql = new StringBuffer (""UPDATE I_BPartner i ""
			+ ""SET C_BP_Group_ID=(SELECT C_BP_Group_ID FROM C_BP_Group g""
			+ "" WHERE i.GroupValue=g.Value AND g.AD_Client_ID=i.AD_Client_ID) ""
			+ ""WHERE C_BP_Group_ID IS NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Group="" + no);
		//
		String ts = DB.isPostgreSQL()?""COALESCE(I_ErrorMsg,'')"":""I_ErrorMsg"";  //java bug, it could not be used directly
		sql = new StringBuffer (""UPDATE I_BPartner ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Group, ' ""
			+ ""WHERE C_BP_Group_ID IS NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.config(""Invalid Group="" + no);

		//	Set Country
		/**
		sql = new StringBuffer (""UPDATE I_BPartner i ""
			+ ""SET CountryCode=(SELECT CountryCode FROM C_Country c WHERE c.IsDefault='Y'""
			+ "" AND c.AD_Client_ID IN (0, i.AD_Client_ID) AND ROWNUM=1) ""
			+ ""WHERE CountryCode IS NULL AND C_Country_ID IS NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Country Default="" + no);
		**/
		//
		sql = new StringBuffer (""UPDATE I_BPartner i ""
			+ ""SET C_Country_ID=(SELECT C_Country_ID FROM C_Country c""
			+ "" WHERE i.CountryCode=c.CountryCode AND c.IsSummary='N' AND c.AD_Client_ID IN (0, i.AD_Client_ID)) ""
			+ ""WHERE C_Country_ID IS NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Country="" + no);
		//
		sql = new StringBuffer (""UPDATE I_BPartner ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Country, ' ""
			+ ""WHERE C_Country_ID IS NULL AND (City IS NOT NULL OR Address1 IS NOT NULL)""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.config(""Invalid Country="" + no);

		//	Set Region
		sql = new StringBuffer (""UPDATE I_BPartner i ""
			+ ""Set RegionName=(SELECT Name FROM C_Region r""
			+ "" WHERE r.IsDefault='Y' AND r.C_Country_ID=i.C_Country_ID""
			+ "" AND r.AD_Client_ID IN (0, i.AD_Client_ID)) "" );
		/*
		if (DB.isOracle()) //jz
		{
			sql.append("" AND ROWNUM=1) "");
		}
		else 
			sql.append("" AND r.UPDATED IN (SELECT MAX(UPDATED) FROM C_Region r1""
			+ "" WHERE r1.IsDefault='Y' AND r1.C_Country_ID=i.C_Country_ID""
			+ "" AND r1.AD_Client_ID IN (0, i.AD_Client_ID) "");
			*/
		sql.append(""WHERE RegionName IS NULL AND C_Region_ID IS NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Region Default="" + no);
		//
		sql = new StringBuffer (""UPDATE I_BPartner i ""
			+ ""Set C_Region_ID=(SELECT C_Region_ID FROM C_Region r""
			+ "" WHERE r.Name=i.RegionName AND r.C_Country_ID=i.C_Country_ID""
			+ "" AND r.AD_Client_ID IN (0, i.AD_Client_ID)) ""
			+ ""WHERE C_Region_ID IS NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Region="" + no);
		//
		sql = new StringBuffer (""UPDATE I_BPartner i ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Region, ' ""
			+ ""WHERE C_Region_ID IS NULL ""
			+ "" AND EXISTS (SELECT * FROM C_Country c""
			+ "" WHERE c.C_Country_ID=i.C_Country_ID AND c.HasRegion='Y')""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.config(""Invalid Region="" + no);

		//	Set Greeting
		sql = new StringBuffer (""UPDATE I_BPartner i ""
			+ ""SET C_Greeting_ID=(SELECT C_Greeting_ID FROM C_Greeting g""
			+ "" WHERE i.BPContactGreeting=g.Name AND g.AD_Client_ID IN (0, i.AD_Client_ID)) ""
			+ ""WHERE C_Greeting_ID IS NULL AND BPContactGreeting IS NOT NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Greeting="" + no);
		//
		sql = new StringBuffer (""UPDATE I_BPartner i ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Greeting, ' ""
			+ ""WHERE C_Greeting_ID IS NULL AND BPContactGreeting IS NOT NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.config(""Invalid Greeting="" + no);

		//	Existing User ?
		sql = new StringBuffer (""UPDATE I_BPartner i ""
			+ ""SET (C_BPartner_ID,AD_User_ID)=""
				+ ""(SELECT C_BPartner_ID,AD_User_ID FROM AD_User u ""
				+ ""WHERE i.EMail=u.EMail AND u.AD_Client_ID=i.AD_Client_ID) ""
			+ ""WHERE i.EMail IS NOT NULL AND I_IsImported='N'"").append(clientCheck);

		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Found EMail User="" + no);

		//	Existing BPartner ? Match Value
		sql = new StringBuffer (""UPDATE I_BPartner i ""
			+ ""SET C_BPartner_ID=(SELECT C_BPartner_ID FROM C_BPartner p""
			+ "" WHERE i.Value=p.Value AND p.AD_Client_ID=i.AD_Client_ID) ""
			+ ""WHERE C_BPartner_ID IS NULL AND Value IS NOT NULL""
			+ "" AND I_IsImported='N'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Found BPartner="" + no);

		//	Existing Contact ? Match Name
		sql = new StringBuffer (""UPDATE I_BPartner i ""
			+ ""SET AD_User_ID=(SELECT AD_User_ID FROM AD_User c""
			+ "" WHERE i.ContactName=c.Name AND i.C_BPartner_ID=c.C_BPartner_ID AND c.AD_Client_ID=i.AD_Client_ID) ""
			+ ""WHERE C_BPartner_ID IS NOT NULL AND AD_User_ID IS NULL AND ContactName IS NOT NULL""
			+ "" AND I_IsImported='N'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Found Contact="" + no);

		//	Existing Location ? Exact Match
		sql = new StringBuffer (""UPDATE I_BPartner i ""
			+ ""SET C_BPartner_Location_ID=(SELECT C_BPartner_Location_ID""
			+ "" FROM C_BPartner_Location bpl INNER JOIN C_Location l ON (bpl.C_Location_ID=l.C_Location_ID)""
			+ "" WHERE i.C_BPartner_ID=bpl.C_BPartner_ID AND bpl.AD_Client_ID=i.AD_Client_ID""
			+ "" AND COALESCE(i.Address1,N' ')=COALESCE(l.Address1,N' ') ""
			+ "" AND COALESCE(i.Address2,N' ')=COALESCE(l.Address2,N' ')""
			+ "" AND COALESCE(i.Address3,N' ')=COALESCE(l.Address3,N' ') ""
			+ "" AND COALESCE(i.Address4,N' ')=COALESCE(l.Address4,N' ')""
			+ "" AND COALESCE(i.City,N' ')=COALESCE(l.City,N' ') ""
			+ "" AND COALESCE(i.Postal,N' ')=COALESCE(l.Postal,N' ') ""
			+ "" AND COALESCE(i.Postal_Add,N' ')=COALESCE(l.Postal_Add,N' ')""
			+ "" AND COALESCE(i.C_Region_ID,0)=COALESCE(l.C_Region_ID,0)""
			+ "" AND COALESCE(i.C_Country_ID,0)=COALESCE(l.C_Country_ID,0)) ""
			+ ""WHERE C_BPartner_ID IS NOT NULL AND C_BPartner_Location_ID IS NULL""
			+ "" AND I_IsImported='N'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Found Location="" + no);

		//	Interest Area
		sql = new StringBuffer (""UPDATE I_BPartner i "" 
			+ ""SET R_InterestArea_ID=(SELECT R_InterestArea_ID FROM R_InterestArea ia ""
				+ ""WHERE i.InterestAreaName=ia.Name AND ia.AD_Client_ID=i.AD_Client_ID) ""
			+ ""WHERE R_InterestArea_ID IS NULL AND InterestAreaName IS NOT NULL""
			+ "" AND I_IsImported='N'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Interest Area="" + no);

		
		commit();
		//	-------------------------------------------------------------------
		int noInsert = 0;
		int noUpdate = 0;

		//	Go through Records
		sql = new StringBuffer (""SELECT * FROM I_BPartner ""
			+ ""WHERE I_IsImported='N'"").append(clientCheck);
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql.toString(), get_TrxName());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				X_I_BPartner impBP = new X_I_BPartner (getCtx(), rs, get_TrxName());
				log.fine(""I_BPartner_ID="" + impBP.getI_BPartner_ID()
					+ "", C_BPartner_ID="" + impBP.getC_BPartner_ID()
					+ "", C_BPartner_Location_ID="" + impBP.getC_BPartner_Location_ID()
					+ "", AD_User_ID="" + impBP.getAD_User_ID());


				//	****	Create/Update BPartner	****
				MBPartner bp = null;
				if (impBP.getC_BPartner_ID() == 0)	//	Insert new BPartner
				{
					bp = new MBPartner(impBP);
					if (bp.save())
					{
						impBP.setC_BPartner_ID(bp.getC_BPartner_ID());
						log.finest(""Insert BPartner - "" + bp.getC_BPartner_ID());
						noInsert++;
					}
					else
					{
						sql = new StringBuffer (""UPDATE I_BPartner i ""
							+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||"")
							.append(""Cannot Insert BPartner"")
							.append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());
						DB.executeUpdate(sql.toString(), get_TrxName());
						continue;
					}
				}
				else				//	Update existing BPartner
				{
					bp = new MBPartner(getCtx(), impBP.getC_BPartner_ID(), get_TrxName());
				//	if (impBP.getValue() != null)			//	not to overwite
				//		bp.setValue(impBP.getValue());
					if (impBP.getName() != null)
					{
						bp.setName(impBP.getName());
						bp.setName2(impBP.getName2());
					}
					if (impBP.getDUNS() != null)
						bp.setDUNS(impBP.getDUNS());
					if (impBP.getTaxID() != null)
						bp.setTaxID(impBP.getTaxID());
					if (impBP.getNAICS() != null)
						bp.setNAICS(impBP.getNAICS());
					if (impBP.getC_BP_Group_ID() != 0)
						bp.setC_BP_Group_ID(impBP.getC_BP_Group_ID());
					if (impBP.getDescription() != null)
						bp.setDescription(impBP.getDescription());
					//
					if (bp.save())
					{
						log.finest(""Update BPartner - "" + bp.getC_BPartner_ID());
						noUpdate++;
					}
					else
					{
						sql = new StringBuffer (""UPDATE I_BPartner i ""
							+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||"")
							.append(""' Cannot Update BPartner' "") //jz
							.append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());
						DB.executeUpdate(sql.toString(), get_TrxName());
						continue;
					}
				}

				//	****	Create/Update BPartner Location	****
				MBPartnerLocation bpl = null;
				if (impBP.getC_BPartner_Location_ID() != 0)		//	Update Location
				{
					bpl = new MBPartnerLocation(getCtx(), impBP.getC_BPartner_Location_ID(), get_TrxName());
					MLocation location = new MLocation(getCtx(), bpl.getC_Location_ID(), get_TrxName());
					location.setC_Country_ID(impBP.getC_Country_ID());
					location.setC_Region_ID(impBP.getC_Region_ID());
					location.setCity(impBP.getCity());
					location.setAddress1(impBP.getAddress1());
					location.setAddress2(impBP.getAddress2());
					location.setAddress3(impBP.getAddress3());
					location.setAddress4(impBP.getAddress4());
					location.setPostal(impBP.getPostal());
					location.setPostal_Add(impBP.getPostal_Add());
					location.setRegionName(impBP.getRegionName());
					if (!location.save())
						log.warning(""Location not updated"");
					else
						bpl.setC_Location_ID(location.getC_Location_ID());
					if (impBP.getPhone() != null)
						bpl.setPhone(impBP.getPhone());
					if (impBP.getPhone2() != null)
						bpl.setPhone2(impBP.getPhone2());
					if (impBP.getFax() != null)
						bpl.setFax(impBP.getFax());
					bpl.save();
				}
				else 	//	New Location
					if (impBP.getC_Country_ID() != 0 &&
						impBP.getC_Region_ID() != 0 &&
						( impBP.getAddress1() != null
						|| impBP.getAddress2() != null
						|| impBP.getAddress3() != null						
						|| impBP.getAddress4() != null
						|| impBP.getPostal() != null 
						|| impBP.getCity() != null))
				{
					MLocation location = new MLocation(getCtx(), impBP.getC_Country_ID(), 
						impBP.getC_Region_ID(), impBP.getCity(), get_TrxName());
					location.setAddress1(impBP.getAddress1());
					location.setAddress2(impBP.getAddress2());
					location.setAddress3(impBP.getAddress3());
					location.setAddress4(impBP.getAddress4());
					location.setPostal(impBP.getPostal());
					location.setPostal_Add(impBP.getPostal_Add());
					location.setRegionName(impBP.getRegionName());
					if (location.save())
						log.finest(""Insert Location - "" + location.getC_Location_ID());
					else
					{
						rollback();
						noInsert--;
						sql = new StringBuffer (""UPDATE I_BPartner i ""
							+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||"")
							.append(""Cannot Insert Location"")
							.append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());
						DB.executeUpdate(sql.toString(), get_TrxName());
						continue;
					}
					//
					bpl = new MBPartnerLocation (bp);
					bpl.setC_Location_ID(location.getC_Location_ID());
					bpl.setPhone(impBP.getPhone());
					bpl.setPhone2(impBP.getPhone2());
					bpl.setFax(impBP.getFax());
					if (bpl.save())
					{
						log.finest(""Insert BP Location - "" + bpl.getC_BPartner_Location_ID());
						impBP.setC_BPartner_Location_ID(bpl.getC_BPartner_Location_ID());
					}
					else
					{
						rollback();
						noInsert--;
						sql = new StringBuffer (""UPDATE I_BPartner i ""
							+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||"")
							.append(""Cannot Insert BPLocation"")
							.append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());
						DB.executeUpdate(sql.toString(), get_TrxName());
						continue;
					}
				}

				//	****	Create/Update Contact	****
				MUser user = null;
				if (impBP.getAD_User_ID() != 0)
				{
					user = new MUser (getCtx(), impBP.getAD_User_ID(), get_TrxName());
					if (user.getC_BPartner_ID() == 0)
						user.setC_BPartner_ID(bp.getC_BPartner_ID());
					else if (user.getC_BPartner_ID() != bp.getC_BPartner_ID())
					{
						rollback();
						noInsert--;
						sql = new StringBuffer (""UPDATE I_BPartner i ""
							+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||"")
							.append(""BP of User <> BP"")
							.append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());
						DB.executeUpdate(sql.toString(), get_TrxName());
						continue;
					}
					if (impBP.getC_Greeting_ID() != 0)
						user.setC_Greeting_ID(impBP.getC_Greeting_ID());
					String name = impBP.getContactName();
					if (name == null || name.length() == 0)
						name = impBP.getEMail();
					user.setName(name);
					if (impBP.getTitle() != null)
						user.setTitle(impBP.getTitle());
					if (impBP.getContactDescription() != null)
						user.setDescription(impBP.getContactDescription());
					if (impBP.getComments() != null)
						user.setComments(impBP.getComments());
					if (impBP.getPhone() != null)
						user.setPhone(impBP.getPhone());
					if (impBP.getPhone2() != null)
						user.setPhone2(impBP.getPhone2());
					if (impBP.getFax() != null)
						user.setFax(impBP.getFax());
					if (impBP.getEMail() != null)
						user.setEMail(impBP.getEMail());
					if (impBP.getBirthday() != null)
						user.setBirthday(impBP.getBirthday());
					if (bpl != null)
						user.setC_BPartner_Location_ID(bpl.getC_BPartner_Location_ID());
					if (user.save())
					{
						log.finest(""Update BP Contact - "" + user.getAD_User_ID());
					}
					else
					{
						rollback();
						noInsert--;
						sql = new StringBuffer (""UPDATE I_BPartner i ""
							+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||"")
							.append(""Cannot Update BP Contact"")
							.append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());
						DB.executeUpdate(sql.toString(), get_TrxName());
						continue;
					}
				}
				else 	//	New Contact
					if (impBP.getContactName() != null || impBP.getEMail() != null)
				{
					user = new MUser (bp);
					if (impBP.getC_Greeting_ID() != 0)
						user.setC_Greeting_ID(impBP.getC_Greeting_ID());
					String name = impBP.getContactName();
					if (name == null || name.length() == 0)
						name = impBP.getEMail();
					user.setName(name);
					user.setTitle(impBP.getTitle());
					user.setDescription(impBP.getContactDescription());
					user.setComments(impBP.getComments());
					user.setPhone(impBP.getPhone());
					user.setPhone2(impBP.getPhone2());
					user.setFax(impBP.getFax());
					user.setEMail(impBP.getEMail());
					user.setBirthday(impBP.getBirthday());
					if (bpl != null)
						user.setC_BPartner_Location_ID(bpl.getC_BPartner_Location_ID());
					if (user.save())
					{
						log.finest(""Insert BP Contact - "" + user.getAD_User_ID());
						impBP.setAD_User_ID(user.getAD_User_ID());
					}
					else
					{
						rollback();
						noInsert--;
						sql = new StringBuffer (""UPDATE I_BPartner i ""
							+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||"")
							.append(""Cannot Insert BPContact"")
							.append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());
						DB.executeUpdate(sql.toString(), get_TrxName());
						continue;
					}
				}

				//	Interest Area
				if (impBP.getR_InterestArea_ID() != 0 && user != null)
				{
					MContactInterest ci = MContactInterest.get(getCtx(), 
						impBP.getR_InterestArea_ID(), user.getAD_User_ID(), 
						true, get_TrxName());
					ci.save();		//	don't subscribe or re-activate
				}
				//
				impBP.setI_IsImported(X_I_BPartner.I_ISIMPORTED_Yes);
				impBP.setProcessed(true);
				impBP.setProcessing(false);
				impBP.save();
				commit();
			}	//	for all I_Product
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, """", e);
			rollback();
		}

		//	Set Error to indicator to not imported
		sql = new StringBuffer (""UPDATE I_BPartner ""
			+ ""SET I_IsImported='N', Updated=SysDate ""
			+ ""WHERE I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		addLog (0, null, new BigDecimal (no), ""@Errors@"");
		addLog (0, null, new BigDecimal (noInsert), ""@C_BPartner_ID@: @Inserted@"");
		addLog (0, null, new BigDecimal (noUpdate), ""@C_BPartner_ID@: @Updated@"");
		return """";
	}	//	doIt
"
org.compiere.process.ProjectIssue.prepare,ProjectIssue.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_Project_ID""))
				m_C_Project_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""M_InOut_ID""))
				m_M_InOut_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""S_TimeExpense_ID""))
				m_S_TimeExpense_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""M_Locator_ID""))
				m_M_Locator_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""C_ProjectLine_ID""))
				m_C_ProjectLine_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""M_Product_ID""))
				m_M_Product_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""M_AttributeSetInstance_ID""))
				((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""MovementQty""))
				m_MovementQty = (BigDecimal)element.getParameter();
			else if (name.equals(""MovementDate""))
				m_MovementDate = (Timestamp)element.getParameter();
			else if (name.equals(""Description""))
				m_Description = (String)element.getParameter();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		  }
	}	//	prepare
"
org.compiere.process.ProjectIssue.doIt,ProjectIssue.java,"String doIt() throws Exception
	{
		//	Check Parameter
		m_project = new MProject (getCtx(), m_C_Project_ID, get_TrxName());
		if (!(X_C_Project.PROJECTCATEGORY_WorkOrderJob.equals(m_project.getProjectCategory())
			|| X_C_Project.PROJECTCATEGORY_AssetProject.equals(m_project.getProjectCategory())))
			throw new IllegalArgumentException(""Project not Work Order or Asset ="" + m_project.getProjectCategory());
		log.info(m_project.toString());
		//
		if (m_M_InOut_ID != 0)
			return issueReceipt();
		if (m_S_TimeExpense_ID != 0)
			return issueExpense();
		if (m_M_Locator_ID == 0)
			throw new IllegalArgumentException(""Locator missing"");
		if (m_C_ProjectLine_ID != 0)
			return issueProjectLine();
		return issueInventory();
	}	//	doIt
"
org.compiere.process.ProjectIssue.issueReceipt,ProjectIssue.java,"String issueReceipt()
	{
		MInOut inOut = new MInOut (getCtx(), m_M_InOut_ID, null);
		if (inOut.isSOTrx() || !inOut.isProcessed()
			|| !(X_M_InOut.DOCSTATUS_Completed.equals(inOut.getDocStatus()) || X_M_InOut.DOCSTATUS_Closed.equals(inOut.getDocStatus())))
			throw new IllegalArgumentException (""Receipt not valid - "" + inOut);
		log.info(inOut.toString());
		//	Set Project of Receipt
		if (inOut.getC_Project_ID() == 0)
		{
			inOut.setC_Project_ID(m_project.getC_Project_ID());
			inOut.save();
		}
		else if (inOut.getC_Project_ID() != m_project.getC_Project_ID())
			throw new IllegalArgumentException (""Receipt for other Project ("" 
				+ inOut.getC_Project_ID() + "")"");

		MInOutLine[] inOutLines = inOut.getLines(false);
		int counter = 0;
		for (MInOutLine element : inOutLines) {
			//	Need to have a Product
			if (element.getM_Product_ID() == 0)
				continue;
			//	Need to have Quantity
			if (element.getMovementQty() == null || element.getMovementQty().signum() == 0)
				continue;
			//	not issued yet
			if (projectIssueHasReceipt(element.getM_InOutLine_ID()))
				continue;
			//	Create Issue
			MProjectIssue pi = new MProjectIssue (m_project);
			pi.setMandatory (element.getM_Locator_ID(), element.getM_Product_ID(), element.getMovementQty());
			if (m_MovementDate != null)		//	default today
				pi.setMovementDate(m_MovementDate);
			if (m_Description != null && m_Description.length() > 0)
				pi.setDescription(m_Description);
			else if (element.getDescription() != null)
				pi.setDescription(element.getDescription());
			else if (inOut.getDescription() != null)
				pi.setDescription(inOut.getDescription());
			pi.setM_InOutLine_ID(element.getM_InOutLine_ID());
			pi.process();

			//	Find/Create Project Line
			MProjectLine pl = null;
			MProjectLine[] pls = m_project.getLines();
			for (MProjectLine element2 : pls) {
				//	The Order we generated is the same as the Order of the receipt
				if (element2.getC_OrderPO_ID() == inOut.getC_Order_ID()
					&& element2.getM_Product_ID() == element.getM_Product_ID()
					&& element2.getC_ProjectIssue_ID() == 0)		//	not issued
				{
					pl = element2;
					break;
				}
			}
			if (pl == null)
				pl = new MProjectLine(m_project);
			pl.setMProjectIssue(pi);		//	setIssue
			pl.save();
			addLog(pi.getLine(), pi.getMovementDate(), pi.getMovementQty(), null);
			counter++;
		}	//	all InOutLines

		return ""@Created@ "" + counter;
	}	//	issueReceipt
"
org.compiere.process.ProjectIssue.issueExpense,ProjectIssue.java,"String issueExpense()
	{
		//	Get Expense Report
		MTimeExpense expense = new MTimeExpense (getCtx(), m_S_TimeExpense_ID, get_TrxName());
		if (!expense.isProcessed())
		  throw new IllegalArgumentException (""Time+Expense not processed - "" + expense);

		//	for all expense lines
		MTimeExpenseLine[] expenseLines = expense.getLines(false);
		int counter = 0;
		for (MTimeExpenseLine element : expenseLines) {
			//	Need to have a Product
			if (element.getM_Product_ID() == 0)
				continue;
			//	Need to have Quantity
			if (element.getQty() == null || element.getQty().signum() == 0)
				continue;
			//	Need to the same project
			if (element.getC_Project_ID() != m_project.getC_Project_ID())
				continue;
			//	not issued yet
			if (projectIssueHasExpense(element.getS_TimeExpenseLine_ID()))
				continue;

			//	Find Location
			int M_Locator_ID = 0;
		//	MProduct product = new MProduct (getCtx(), expenseLines[i].getM_Product_ID());
		//	if (product.isStocked())
				M_Locator_ID = MStorage.getM_Locator_ID(expense.getM_Warehouse_ID(), 
					element.getM_Product_ID(), 0, 	//	no ASI
					element.getQty(), null);
			if (M_Locator_ID == 0)	//	Service/Expense - get default (and fallback)
				M_Locator_ID = expense.getM_Locator_ID();

			//	Create Issue
			MProjectIssue pi = new MProjectIssue (m_project);
			pi.setMandatory (M_Locator_ID, element.getM_Product_ID(), element.getQty());
			if (m_MovementDate != null)		//	default today
				pi.setMovementDate(m_MovementDate);
			if (m_Description != null && m_Description.length() > 0)
				pi.setDescription(m_Description);
			else if (element.getDescription() != null)
				pi.setDescription(element.getDescription());
			pi.setS_TimeExpenseLine_ID(element.getS_TimeExpenseLine_ID());
			pi.process();
			//	Find/Create Project Line
			MProjectLine pl = new MProjectLine(m_project);
			pl.setMProjectIssue(pi);		//	setIssue
			pl.save();
			addLog(pi.getLine(), pi.getMovementDate(), pi.getMovementQty(), null);
			counter++;
		}	//	allExpenseLines
		
		return ""@Created@ "" + counter;
	}	//	issueExpense
"
org.compiere.process.ProjectIssue.issueProjectLine,ProjectIssue.java,"String issueProjectLine()
	{
		MProjectLine pl = new MProjectLine(getCtx(), m_C_ProjectLine_ID, get_TrxName());
		if (pl.getM_Product_ID() == 0)
			throw new IllegalArgumentException(""Projet Line has no Product"");
		if (pl.getC_ProjectIssue_ID() != 0)
			throw new IllegalArgumentException(""Projet Line already been issued"");
		if (m_M_Locator_ID == 0)
			throw new IllegalArgumentException(""No Locator"");
		//	Set to Qty 1
		if (pl.getPlannedQty() == null || pl.getPlannedQty().signum() == 0)
			pl.setPlannedQty(Env.ONE);
		//
		MProjectIssue pi = new MProjectIssue (m_project);
		pi.setMandatory (m_M_Locator_ID, pl.getM_Product_ID(), pl.getPlannedQty());
		if (m_MovementDate != null)		//	default today
			pi.setMovementDate(m_MovementDate);
		if (m_Description != null && m_Description.length() > 0)
			pi.setDescription(m_Description);
		else if (pl.getDescription() != null)
			pi.setDescription(pl.getDescription());
		pi.process();

		//	Update Line
		pl.setMProjectIssue(pi);
		pl.save();
		addLog(pi.getLine(), pi.getMovementDate(), pi.getMovementQty(), null);
		return ""@Created@ 1"";
	}	//	issueProjectLine
"
org.compiere.process.ProjectIssue.issueInventory,ProjectIssue.java,"String issueInventory()
	{
		if (m_M_Locator_ID == 0)
			throw new IllegalArgumentException(""No Locator"");
		if (m_M_Product_ID == 0)
			throw new IllegalArgumentException(""No Product"");
		//	Set to Qty 1
		if (m_MovementQty == null || m_MovementQty.signum() == 0)
			m_MovementQty = Env.ONE;
		//
		MProjectIssue pi = new MProjectIssue (m_project);
		pi.setMandatory (m_M_Locator_ID, m_M_Product_ID, m_MovementQty);
		if (m_MovementDate != null)		//	default today
			pi.setMovementDate(m_MovementDate);
		if (m_Description != null && m_Description.length() > 0)
			pi.setDescription(m_Description);
		pi.process();

		//	Create Project Line
		MProjectLine pl = new MProjectLine(m_project);
		pl.setMProjectIssue(pi);
		pl.save();
		addLog(pi.getLine(), pi.getMovementDate(), pi.getMovementQty(), null);
		return ""@Created@ 1"";
	}	//	issueInventory
"
org.compiere.process.ProjectIssue.projectIssueHasExpense,ProjectIssue.java,"boolean projectIssueHasExpense (int S_TimeExpenseLine_ID)
	{
		if (m_projectIssues == null)
			m_projectIssues = m_project.getIssues();
		for (MProjectIssue element : m_projectIssues) {
			if (element.getS_TimeExpenseLine_ID() == S_TimeExpenseLine_ID)
				return true;
		}
		return false;
	}	//	projectIssueHasExpense
"
org.compiere.process.ProjectIssue.projectIssueHasReceipt,ProjectIssue.java,"boolean projectIssueHasReceipt (int M_InOutLine_ID)
	{
		if (m_projectIssues == null)
			m_projectIssues = m_project.getIssues();
		for (MProjectIssue element : m_projectIssues) {
			if (element.getM_InOutLine_ID() == M_InOutLine_ID)
				return true;
		}
		return false;
	}	//	projectIssueHasReceipt
"
org.compiere.process.LeadRequest.prepare,LeadRequest.java,"void prepare()
	{
		p_C_Lead_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.LeadRequest.doIt,LeadRequest.java,"String doIt()
	    throws Exception
	{
		log.info(""C_Lead_ID="" + p_C_Lead_ID);
		if (p_C_Lead_ID == 0)
			throw new CompiereUserException(""@C_Lead_ID@ ID=0"");
		MLead lead = new MLead (getCtx(), p_C_Lead_ID, get_TrxName());
		if (lead.get_ID() != p_C_Lead_ID)
			throw new CompiereUserException(""@NotFound@: @C_Lead_ID@ ID="" + p_C_Lead_ID);
		//
		String retValue = lead.createRequest();
		if (retValue != null)
			throw new CompiereSystemException(retValue);
		lead.save();
		MRequest request = lead.getRequest();
		//
		return ""@R_Request_ID@ "" + request.getDocumentNo();
	}	//	doIt
"
org.compiere.process.OrderPOCreate.prepare,OrderPOCreate.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""DateOrdered""))
			{
				p_DateOrdered_From = (Timestamp)element.getParameter();
				p_DateOrdered_To = (Timestamp)element.getParameter_To();
			}
			else if (name.equals(""C_BPartner_ID""))
				p_C_BPartner_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""Vendor_ID""))
				p_Vendor_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""C_Order_ID""))
				p_C_Order_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""IsDropShip""))
				p_IsDropShip = (String)element.getParameter();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.OrderPOCreate.doIt,OrderPOCreate.java,"String doIt() throws Exception
	{
		log.info(""DateOrdered="" + p_DateOrdered_From + "" - "" + p_DateOrdered_To 
			+ "" - C_BPartner_ID="" + p_C_BPartner_ID + "" - Vendor_ID="" + p_Vendor_ID
			+ "" - IsDropShip="" + p_IsDropShip + "" - C_Order_ID="" + p_C_Order_ID);
		if (p_C_Order_ID == 0 && p_IsDropShip == null
			&& p_DateOrdered_From == null && p_DateOrdered_To == null
			&& p_C_BPartner_ID == 0 && p_Vendor_ID == 0)
			throw new IllegalPathStateException(""You need to restrict selection"");
		//
		String sql = ""SELECT * FROM C_Order o ""
			+ ""WHERE o.IsSOTrx='Y'""
			//	No Duplicates
			//	"" AND o.Ref_Order_ID IS NULL""
			+ "" AND NOT EXISTS (SELECT * FROM C_OrderLine ol WHERE o.C_Order_ID=ol.C_Order_ID AND ol.Ref_OrderLine_ID IS NOT NULL)""
			; 
		if (p_C_Order_ID != 0)
			sql += "" AND o.C_Order_ID=?"";
		else
		{
			if (p_C_BPartner_ID != 0)
				sql += "" AND o.C_BPartner_ID=?"";
			if (p_IsDropShip != null)
				sql += "" AND o.IsDropShip=?"";
			if (p_Vendor_ID != 0)
				sql += "" AND EXISTS (SELECT * FROM C_OrderLine ol""
					+ "" INNER JOIN M_Product_PO po ON (ol.M_Product_ID=po.M_Product_ID) ""
						+ ""WHERE o.C_Order_ID=ol.C_Order_ID AND po.C_BPartner_ID=?)""; 
			if (p_DateOrdered_From != null && p_DateOrdered_To != null)
				sql += ""AND TRUNC(o.DateOrdered,'DD') BETWEEN ? AND ?"";
			else if (p_DateOrdered_From != null && p_DateOrdered_To == null)
				sql += ""AND TRUNC(o.DateOrdered,'DD') >= ?"";
			else if (p_DateOrdered_From == null && p_DateOrdered_To != null)
				sql += ""AND TRUNC(o.DateOrdered,'DD') <= ?"";
		}
		PreparedStatement pstmt = null;
		int counter = 0;
		try
		{
			pstmt = DB.prepareStatement (sql, get_TrxName());
			if (p_C_Order_ID != 0)
				pstmt.setInt (1, p_C_Order_ID);
			else
			{
				int index = 1;
				if (p_C_BPartner_ID != 0)
					pstmt.setInt (index++, p_C_BPartner_ID);
				if (p_IsDropShip != null)
					pstmt.setString(index++, p_IsDropShip);
				if (p_Vendor_ID != 0)
					pstmt.setInt (index++, p_Vendor_ID);
				if (p_DateOrdered_From != null && p_DateOrdered_To != null)
				{
					pstmt.setTimestamp(index++, p_DateOrdered_From);
					pstmt.setTimestamp(index++, p_DateOrdered_To);
				}
				else if (p_DateOrdered_From != null && p_DateOrdered_To == null)
					pstmt.setTimestamp(index++, p_DateOrdered_From);
				else if (p_DateOrdered_From == null && p_DateOrdered_To != null)
					pstmt.setTimestamp(index++, p_DateOrdered_To);
			}
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				counter += createPOFromSO (new MOrder (getCtx(), rs, get_TrxName()));
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (SQLException e)
		{
			pstmt = null;
		}
		if (counter == 0)
			log.fine(sql);
		return ""@Created@ "" + counter;
	}	//	doIt
"
org.compiere.process.OrderPOCreate.createPOFromSO,OrderPOCreate.java,"int createPOFromSO (MOrder so)
	{
		log.info(so.toString());
		MOrderLine[] soLines = so.getLines(true, null);
		if (soLines == null || soLines.length == 0)
		{
			log.warning(""No Lines - "" + so);
			return 0;
		}
		//
		int counter = 0;
		//	Order Lines with a Product which has a current vendor 
		String sql = ""SELECT DISTINCT po.C_BPartner_ID, po.M_Product_ID ""
			+ ""FROM M_Product_PO po"" 
			+ "" INNER JOIN C_OrderLine ol ON (po.M_Product_ID=ol.M_Product_ID) ""
			+ ""WHERE ol.C_Order_ID=? AND po.IsCurrentVendor='Y' ""
			+ ""ORDER BY 1"";
		PreparedStatement pstmt = null;
		MOrder po = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_TrxName());
			pstmt.setInt (1, so.getC_Order_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				//	New Order
				int C_BPartner_ID = rs.getInt(1);
				if (po == null || po.getBill_BPartner_ID() != C_BPartner_ID)
				{
					po = createPOForVendor(rs.getInt(1), so);
					addLog(0, null, null, po.getDocumentNo());
					counter++;
				}

				//	Line
				int M_Product_ID = rs.getInt(2);
				for (MOrderLine element : soLines) {
					if (element.getM_Product_ID() == M_Product_ID)
					{
						MOrderLine poLine = new MOrderLine (po);
						poLine.setRef_OrderLine_ID(element.getC_OrderLine_ID());
						poLine.setM_Product_ID(element.getM_Product_ID());
						poLine.setM_AttributeSetInstance_ID(element.getM_AttributeSetInstance_ID());
						poLine.setC_UOM_ID(element.getC_UOM_ID());
						poLine.setQtyEntered(element.getQtyEntered());
						poLine.setQtyOrdered(element.getQtyOrdered());
						poLine.setDescription(element.getDescription());
						poLine.setDatePromised(element.getDatePromised());
						poLine.setPrice();
						poLine.save();
						poLine.updateHeaderTax();
					}
				}
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//	Set Reference to PO
		if (counter == 1 && po != null)
		{
			so.setRef_Order_ID(po.getC_Order_ID());
			so.save();
		}
		return counter;
	}	//	createPOFromSO
"
org.compiere.process.OrderPOCreate.createPOForVendor,OrderPOCreate.java,"MOrder createPOForVendor(int C_BPartner_ID, MOrder so)
	{
		MOrder po = new MOrder (getCtx(), 0, get_TrxName());
		po.setClientOrg(so.getAD_Client_ID(), so.getAD_Org_ID());
		po.setRef_Order_ID(so.getC_Order_ID());
		po.setIsSOTrx(false);
		po.setC_DocTypeTarget_ID();
		//
		po.setDescription(so.getDescription());
		po.setPOReference(so.getDocumentNo());
		po.setPriorityRule(so.getPriorityRule());
		po.setSalesRep_ID(so.getSalesRep_ID());
		po.setM_Warehouse_ID(so.getM_Warehouse_ID());
		//	Set Vendor
		MBPartner vendor = new MBPartner (getCtx(), C_BPartner_ID, get_TrxName());
		po.setBPartner(vendor);
		//	Drop Ship
		po.setIsDropShip(so.isDropShip());
		if (so.isDropShip())
		{
			po.setShip_BPartner_ID(so.getC_BPartner_ID());
			po.setShip_Location_ID(so.getC_BPartner_Location_ID());
			po.setShip_User_ID(so.getAD_User_ID());
		}
		//	References
		po.setC_Activity_ID(so.getC_Activity_ID());
		po.setC_Campaign_ID(so.getC_Campaign_ID());
		po.setC_Project_ID(so.getC_Project_ID());
		po.setUser1_ID(so.getUser1_ID());
		po.setUser2_ID(so.getUser2_ID());
		//
		po.save();
		return po;
	}	//	createPOForVendor
"
org.compiere.process.RemoteUpdateVO.toString,RemoteUpdateVO.java,"String toString()
	{
		return ""RemoteUpdateVO[test="" + Test
			+ ""-"" + TableName
	//		+ "","" + Sql
			+ ""]"";
	}	//	toString
"
org.compiere.process.PeriodControlStatus.prepare,PeriodControlStatus.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_C_PeriodControl_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.PeriodControlStatus.doIt,PeriodControlStatus.java,"String doIt() throws Exception
	{
		log.info (""C_PeriodControl_ID="" + p_C_PeriodControl_ID);
		MPeriodControl pc = new MPeriodControl (getCtx(), p_C_PeriodControl_ID, get_TrxName());
		if (pc.get_ID() == 0)
			throw new CompiereUserException(""@NotFound@  @C_PeriodControl_ID@="" + p_C_PeriodControl_ID);
		//	Permanently closed
		if (X_C_PeriodControl.PERIODACTION_PermanentlyClosePeriod.equals(pc.getPeriodStatus()))
			throw new CompiereUserException(""@PeriodStatus@ = "" + pc.getPeriodStatus());
		//	No Action
		if (X_C_PeriodControl.PERIODACTION_NoAction.equals(pc.getPeriodAction()))
			return ""@OK@"";
	
		//	Open
		if (X_C_PeriodControl.PERIODACTION_OpenPeriod.equals(pc.getPeriodAction()))
			pc.setPeriodStatus(X_C_PeriodControl.PERIODSTATUS_Open);
		//	Close
		if (X_C_PeriodControl.PERIODACTION_ClosePeriod.equals(pc.getPeriodAction()))
			pc.setPeriodStatus(X_C_PeriodControl.PERIODSTATUS_Closed);
		//	Close Permanently
		if (X_C_PeriodControl.PERIODACTION_PermanentlyClosePeriod.equals(pc.getPeriodAction()))
			pc.setPeriodStatus(X_C_PeriodControl.PERIODSTATUS_PermanentlyClosed);
		pc.setPeriodAction(X_C_PeriodControl.PERIODACTION_NoAction);
		//
		boolean ok = pc.save();
		
		//	Reset Cache
		CacheMgt.get().reset(""C_PeriodControl"", 0);
		CacheMgt.get().reset(""C_Period"", pc.getC_Period_ID());

		if (!ok)
			return ""@Error@"";
		return ""@OK@"";
	}	//	doIt
"
org.compiere.process.ImportGLJournal.prepare,ImportGLJournal.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) 
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_Client_ID""))
				m_AD_Client_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""AD_Org_ID""))
				m_AD_Org_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""C_AcctSchema_ID""))
				m_C_AcctSchema_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""DateAcct""))
				m_DateAcct = (Timestamp)element.getParameter();
			else if (name.equals(""IsValidateOnly""))
				m_IsValidateOnly = ""Y"".equals(element.getParameter());
			else if (name.equals(""IsImportOnlyNoErrors""))
				m_IsImportOnlyNoErrors = ""Y"".equals(element.getParameter());
			else if (name.equals(""DeleteOldImported""))
				m_DeleteOldImported = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.ImportGLJournal.doIt,ImportGLJournal.java,"String doIt() throws java.lang.Exception
	{
		log.info(""IsValidateOnly="" + m_IsValidateOnly + "", IsImportOnlyNoErrors="" + m_IsImportOnlyNoErrors);
		StringBuffer sql = null;
		int no = 0;
		String clientCheck = "" AND AD_Client_ID="" + m_AD_Client_ID;

		//	****	Prepare	****

		//	Delete Old Imported
		if (m_DeleteOldImported)
		{
			sql = new StringBuffer (""DELETE FROM I_GLJournal ""
				  + ""WHERE I_IsImported='Y'"").append (clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			log.fine(""Delete Old Impored ="" + no);
		}

		//	Set IsActive, Created/Updated
		sql = new StringBuffer (""UPDATE I_GLJournal ""
			+ ""SET IsActive = COALESCE (IsActive, 'Y'),""
			+ "" Created = COALESCE (Created, SysDate),""
			+ "" CreatedBy = COALESCE (CreatedBy, 0),""
			+ "" Updated = COALESCE (Updated, SysDate),""
			+ "" UpdatedBy = COALESCE (UpdatedBy, 0),""
			+ "" I_ErrorMsg = NULL,""
			+ "" I_IsImported = 'N' ""
			+ ""WHERE I_IsImported<>'Y' OR I_IsImported IS NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info (""Reset="" + no);

		//	Set Client from Name
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET AD_Client_ID=(SELECT c.AD_Client_ID FROM AD_Client c WHERE c.Value=i.ClientValue) ""
			+ ""WHERE (AD_Client_ID IS NULL OR AD_Client_ID=0) AND ClientValue IS NOT NULL""
			+ "" AND I_IsImported<>'Y'"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Client from Value="" + no);

		//	Set Default Client, Doc Org, AcctSchema, DatAcct
		sql = new StringBuffer (""UPDATE I_GLJournal ""
			  + ""SET AD_Client_ID = COALESCE (AD_Client_ID,"").append (m_AD_Client_ID).append (""),""
			  + "" AD_OrgDoc_ID = COALESCE (AD_OrgDoc_ID,"").append (m_AD_Org_ID).append (""),"");
		if (m_C_AcctSchema_ID != 0)
			sql.append("" C_AcctSchema_ID = COALESCE (C_AcctSchema_ID,"").append (m_C_AcctSchema_ID).append (""),"");
		if (m_DateAcct != null)
			sql.append("" DateAcct = COALESCE (DateAcct,"").append (DB.TO_DATE(m_DateAcct)).append (""),"");
		sql.append("" Updated = COALESCE (Updated, SysDate) ""
			  + ""WHERE I_IsImported<>'Y' OR I_IsImported IS NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Client/DocOrg/Default="" + no);

		//	Error Doc Org
		String ts = DB.isPostgreSQL()?""COALESCE(I_ErrorMsg,'')"":""I_ErrorMsg"";  //java bug, it could not be used directly
		sql = new StringBuffer (""UPDATE I_GLJournal o ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Doc Org, '""
			+ ""WHERE (AD_OrgDoc_ID IS NULL OR AD_OrgDoc_ID=0""
			+ "" OR EXISTS (SELECT * FROM AD_Org oo WHERE o.AD_Org_ID=oo.AD_Org_ID AND (oo.IsSummary='Y' OR oo.IsActive='N')))""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Doc Org="" + no);

		//	Set AcctSchema
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET C_AcctSchema_ID=(SELECT a.C_AcctSchema_ID FROM C_AcctSchema a""
			+ "" WHERE i.AcctSchemaName=a.Name AND i.AD_Client_ID=a.AD_Client_ID) ""
			+ ""WHERE C_AcctSchema_ID IS NULL AND AcctSchemaName IS NOT NULL""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set AcctSchema from Name="" + no);
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET C_AcctSchema_ID=(SELECT c.C_AcctSchema1_ID FROM AD_ClientInfo c WHERE c.AD_Client_ID=i.AD_Client_ID) ""
			+ ""WHERE C_AcctSchema_ID IS NULL AND AcctSchemaName IS NULL""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set AcctSchema from Client="" + no);
		//	Error AcctSchema
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid AcctSchema, '""
			+ ""WHERE (C_AcctSchema_ID IS NULL OR C_AcctSchema_ID=0""
			+ "" OR NOT EXISTS (SELECT * FROM C_AcctSchema a WHERE i.AD_Client_ID=a.AD_Client_ID))""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid AcctSchema="" + no);

		//	Set DateAcct (mandatory)
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET DateAcct=SysDate ""
			+ ""WHERE DateAcct IS NULL""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set DateAcct="" + no);

		//	Document Type
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET C_DocType_ID=(SELECT d.C_DocType_ID FROM C_DocType d""
			+ "" WHERE d.Name=i.DocTypeName AND d.DocBaseType='GLJ' AND i.AD_Client_ID=d.AD_Client_ID) ""
			+ ""WHERE C_DocType_ID IS NULL AND DocTypeName IS NOT NULL""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set DocType="" + no);
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid DocType, '""
			+ ""WHERE (C_DocType_ID IS NULL OR C_DocType_ID=0""
			+ "" OR NOT EXISTS (SELECT * FROM C_DocType d WHERE i.AD_Client_ID=d.AD_Client_ID AND d.DocBaseType='GLJ'))""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid DocType="" + no);

		//	GL Category
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET GL_Category_ID=(SELECT c.GL_Category_ID FROM GL_Category c""
			+ "" WHERE c.Name=i.CategoryName AND i.AD_Client_ID=c.AD_Client_ID) ""
			+ ""WHERE GL_Category_ID IS NULL AND CategoryName IS NOT NULL""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set DocType="" + no);
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Category, '""
			+ ""WHERE (GL_Category_ID IS NULL OR GL_Category_ID=0)""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Category="" + no);

		//	Set Currency
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET C_Currency_ID=(SELECT c.C_Currency_ID FROM C_Currency c""
			+ "" WHERE c.ISO_Code=i.ISO_Code AND c.AD_Client_ID IN (0,i.AD_Client_ID)) ""
			+ ""WHERE C_Currency_ID IS NULL AND ISO_Code IS NOT NULL""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Currency from ISO="" + no);
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET C_Currency_ID=(SELECT a.C_Currency_ID FROM C_AcctSchema a""
			+ "" WHERE a.C_AcctSchema_ID=i.C_AcctSchema_ID AND a.AD_Client_ID=i.AD_Client_ID)""
			+ ""WHERE C_Currency_ID IS NULL AND ISO_Code IS NULL""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Default Currency="" + no);
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Currency, '""
			+ ""WHERE (C_Currency_ID IS NULL OR C_Currency_ID=0)""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Currency="" + no);

		//	Set Conversion Type
		sql = new StringBuffer (""UPDATE I_GLJournal i "" 
			+ ""SET ConversionTypeValue='S' ""
			+ ""WHERE C_ConversionType_ID IS NULL AND ConversionTypeValue IS NULL""
			+ "" AND I_IsImported='N'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set CurrencyType Value to Spot ="" + no);
		sql = new StringBuffer (""UPDATE I_GLJournal i "" 
			+ ""SET C_ConversionType_ID=(SELECT c.C_ConversionType_ID FROM C_ConversionType c""
			+ "" WHERE c.Value=i.ConversionTypeValue AND c.AD_Client_ID IN (0,i.AD_Client_ID)) ""
			+ ""WHERE C_ConversionType_ID IS NULL AND ConversionTypeValue IS NOT NULL""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set CurrencyType from Value="" + no);
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid CurrencyType, '""
			+ ""WHERE (C_ConversionType_ID IS NULL OR C_ConversionType_ID=0) AND ConversionTypeValue IS NOT NULL""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid CurrencyTypeValue="" + no);


		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=No ConversionType, '""
			+ ""WHERE (C_ConversionType_ID IS NULL OR C_ConversionType_ID=0)""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""No CourrencyType="" + no);

		//	Set/Overwrite Home Currency Rate
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET CurrencyRate=1""
			+ ""WHERE EXISTS (SELECT * FROM C_AcctSchema a""
			+ "" WHERE a.C_AcctSchema_ID=i.C_AcctSchema_ID AND a.C_Currency_ID=i.C_Currency_ID)""
			+ "" AND C_Currency_ID IS NOT NULL AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Home CurrencyRate="" + no);
		//	Set Currency Rate
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
		   + ""SET CurrencyRate=(SELECT MAX(r.MultiplyRate) FROM C_Conversion_Rate r, C_AcctSchema s""
		   + "" WHERE s.C_AcctSchema_ID=i.C_AcctSchema_ID AND s.AD_Client_ID=i.AD_Client_ID""
		   + "" AND r.C_Currency_ID=i.C_Currency_ID AND r.C_Currency_To_ID=s.C_Currency_ID""
		   + "" AND r.AD_Client_ID=i.AD_Client_ID AND r.AD_Org_ID=i.AD_OrgDoc_ID""
		   + "" AND r.C_ConversionType_ID=i.C_ConversionType_ID""
		   + "" AND i.DateAcct BETWEEN r.ValidFrom AND r.ValidTo ""
	   //	ORDER BY ValidFrom DESC
		   + "") WHERE CurrencyRate IS NULL OR CurrencyRate=0 AND C_Currency_ID>0""
		   + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Org Rate="" + no);
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET CurrencyRate=(SELECT MAX(r.MultiplyRate) FROM C_Conversion_Rate r, C_AcctSchema s""
			+ "" WHERE s.C_AcctSchema_ID=i.C_AcctSchema_ID AND s.AD_Client_ID=i.AD_Client_ID""
			+ "" AND r.C_Currency_ID=i.C_Currency_ID AND r.C_Currency_To_ID=s.C_Currency_ID""
			+ "" AND r.AD_Client_ID=i.AD_Client_ID""
			+ "" AND r.C_ConversionType_ID=i.C_ConversionType_ID""
			+ "" AND i.DateAcct BETWEEN r.ValidFrom AND r.ValidTo ""
		//	ORDER BY ValidFrom DESC
			+ "") WHERE CurrencyRate IS NULL OR CurrencyRate=0 AND C_Currency_ID>0""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Client Rate="" + no);
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=No Rate, '""
			+ ""WHERE CurrencyRate IS NULL OR CurrencyRate=0""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""No Rate="" + no);

		//	Set Period
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET C_Period_ID=(SELECT MAX(p.C_Period_ID) FROM C_Period p""
			+ "" INNER JOIN C_Year y ON (y.C_Year_ID=p.C_Year_ID)""
			+ "" INNER JOIN AD_ClientInfo c ON (c.C_Calendar_ID=y.C_Calendar_ID)""
			+ "" WHERE c.AD_Client_ID=i.AD_Client_ID""
			+ "" AND i.DateAcct BETWEEN p.StartDate AND p.EndDate AND p.PeriodType='S') ""
			+ ""WHERE C_Period_ID IS NULL""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Period="" + no);
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Period, '""
			+ ""WHERE C_Period_ID IS NULL OR C_Period_ID NOt IN ""
			+ ""(SELECT C_Period_ID FROM C_Period p""
			+ "" INNER JOIN C_Year y ON (y.C_Year_ID=p.C_Year_ID)""
			+ "" INNER JOIN AD_ClientInfo c ON (c.C_Calendar_ID=y.C_Calendar_ID) ""
			+ "" WHERE c.AD_Client_ID=i.AD_Client_ID""
			+ "" AND i.DateAcct BETWEEN p.StartDate AND p.EndDate AND p.PeriodType='S')""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Period="" + no);
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET I_ErrorMsg=""+ts +""||'WARN=Period Closed, ' ""
			+ ""WHERE C_Period_ID IS NOT NULL AND NOT EXISTS""
			+ "" (SELECT * FROM C_PeriodControl pc WHERE pc.C_Period_ID=i.C_Period_ID AND DocBaseType='GLJ' AND PeriodStatus='O') ""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Period Closed="" + no);

		//	Budget Name
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET GL_Budget_ID= ""
			+ "" (SELECT GL_Budget_ID FROM GL_Budget b WHERE i.BudgetName=b.Name)""
			+ "" WHERE GL_Budget_ID IS NULL AND BudgetName is NOT NULL ""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Budget ="" + no);

		//	Posting Type
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET PostingType='B' ""
			+ ""WHERE PostingType IS NULL AND GL_Budget_ID IS NOT NULL AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Budget PostingType="" + no);

		sql = new StringBuffer (""UPDATE I_GLJournal i ""
				+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Budget specified for Actual Journal, ' ""
				+ "" WHERE PostingType='A' AND GL_Budget_ID IS NOT NULL""
				+ "" AND I_IsImported<>'Y'"").append (clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			if (no != 0)
				log.warning (""Budget specified for Actual Journal ="" + no);

			//	Posting Type
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET PostingType='A' ""
			+ ""WHERE PostingType IS NULL AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Actual PostingType="" + no);
		
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid PostingType, ' ""
			+ ""WHERE PostingType IS NULL OR NOT EXISTS""
			+ "" (SELECT * FROM AD_Ref_List r WHERE r.AD_Reference_ID=125 AND i.PostingType=r.Value)""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid PostingTypee="" + no);


		//	** Account Elements (optional) **
		//	(C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0)

		//	Set Org from Name (* is overwritten and default)
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET AD_Org_ID=(SELECT o.AD_Org_ID FROM AD_Org o""
			+ "" WHERE o.Value=i.OrgValue AND o.IsSummary='N' AND i.AD_Client_ID=o.AD_Client_ID) ""
			+ ""WHERE (AD_Org_ID IS NULL OR AD_Org_ID=0) AND OrgValue IS NOT NULL""
			+ "" AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Org from Value="" + no);
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET AD_Org_ID=AD_OrgDoc_ID ""
			+ ""WHERE (AD_Org_ID IS NULL OR AD_Org_ID=0) AND OrgValue IS NULL AND AD_OrgDoc_ID IS NOT NULL AND AD_OrgDoc_ID<>0""
			+ "" AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Org from Doc Org="" + no);
		//	Error Org
		sql = new StringBuffer (""UPDATE I_GLJournal o ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Org, '""
			+ ""WHERE (AD_Org_ID IS NULL OR AD_Org_ID=0""
			+ "" OR EXISTS (SELECT * FROM AD_Org oo WHERE o.AD_Org_ID=oo.AD_Org_ID AND (oo.IsSummary='Y' OR oo.IsActive='N')))""
			+ "" AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Org="" + no);

		//	Set Account
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET Account_ID=(SELECT MAX(ev.C_ElementValue_ID) FROM C_ElementValue ev""
			+ "" INNER JOIN C_Element e ON (e.C_Element_ID=ev.C_Element_ID)""
			+ "" INNER JOIN C_AcctSchema_Element ase ON (e.C_Element_ID=ase.C_Element_ID AND ase.ElementType='AC')""
			+ "" WHERE ev.Value=i.AccountValue AND ev.IsSummary='N'""
			+ "" AND i.C_AcctSchema_ID=ase.C_AcctSchema_ID AND i.AD_Client_ID=ev.AD_Client_ID) ""
			+ ""WHERE Account_ID IS NULL AND AccountValue IS NOT NULL""
			+ "" AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Account from Value="" + no);
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Account, '""
			+ ""WHERE (Account_ID IS NULL OR Account_ID=0)""
			+ "" AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Account="" + no);

		//	Set BPartner
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET C_BPartner_ID=(SELECT bp.C_BPartner_ID FROM C_BPartner bp""
			+ "" WHERE bp.Value=i.BPartnerValue AND bp.IsSummary='N' AND i.AD_Client_ID=bp.AD_Client_ID) ""
			+ ""WHERE C_BPartner_ID IS NULL AND BPartnerValue IS NOT NULL""
			+ "" AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set BPartner from Value="" + no);
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid BPartner, '""
			+ ""WHERE C_BPartner_ID IS NULL AND BPartnerValue IS NOT NULL""
			+ "" AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid BPartner="" + no);

		//	Set Product
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET M_Product_ID=(SELECT MAX(p.M_Product_ID) FROM M_Product p""
			+ "" WHERE (p.Value=i.ProductValue OR p.UPC=i.UPC OR p.SKU=i.SKU)""
			+ "" AND p.IsSummary='N' AND i.AD_Client_ID=p.AD_Client_ID) ""
			+ ""WHERE M_Product_ID IS NULL AND (ProductValue IS NOT NULL OR UPC IS NOT NULL OR SKU IS NOT NULL)""
			+ "" AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Product from Value="" + no);
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Product, '""
			+ ""WHERE M_Product_ID IS NULL AND (ProductValue IS NOT NULL OR UPC IS NOT NULL OR SKU IS NOT NULL)""
			+ "" AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Product="" + no);

		//	Set Project
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET C_Project_ID=(SELECT p.C_Project_ID FROM C_Project p""
			+ "" WHERE p.Value=i.ProjectValue AND p.IsSummary='N' AND i.AD_Client_ID=p.AD_Client_ID) ""
			+ ""WHERE C_Project_ID IS NULL AND ProjectValue IS NOT NULL""
			+ "" AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Project from Value="" + no);
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Project, '""
			+ ""WHERE C_Project_ID IS NULL AND ProjectValue IS NOT NULL""
			+ "" AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Project="" + no);

		//	Set TrxOrg
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET AD_OrgTrx_ID=(SELECT o.AD_Org_ID FROM AD_Org o""
			+ "" WHERE o.Value=i.OrgValue AND o.IsSummary='N' AND i.AD_Client_ID=o.AD_Client_ID) ""
			+ ""WHERE AD_OrgTrx_ID IS NULL AND OrgTrxValue IS NOT NULL""
			+ "" AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set OrgTrx from Value="" + no);
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid OrgTrx, '""
			+ ""WHERE AD_OrgTrx_ID IS NULL AND OrgTrxValue IS NOT NULL""
			+ "" AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid OrgTrx="" + no);


		//	Source Amounts
		sql = new StringBuffer (""UPDATE I_GLJournal ""
			+ ""SET AmtSourceDr = 0 ""
			+ ""WHERE AmtSourceDr IS NULL""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set 0 Source Dr="" + no);
		sql = new StringBuffer (""UPDATE I_GLJournal ""
			+ ""SET AmtSourceCr = 0 ""
			+ ""WHERE AmtSourceCr IS NULL""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set 0 Source Cr="" + no);
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET I_ErrorMsg=""+ts +""||'WARN=Zero Source Balance, ' ""
			+ ""WHERE (AmtSourceDr-AmtSourceCr)=0""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Zero Source Balance="" + no);

		//	Accounted Amounts (Only if No Error)
		sql = new StringBuffer (""UPDATE I_GLJournal ""
			+ ""SET AmtAcctDr = ROUND(AmtSourceDr * CurrencyRate, 2) ""	//	HARDCODED rounding
			+ ""WHERE AmtAcctDr IS NULL OR AmtAcctDr=0""
			+ "" AND I_IsImported='N'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Calculate Acct Dr="" + no);
		sql = new StringBuffer (""UPDATE I_GLJournal ""
			+ ""SET AmtAcctCr = ROUND(AmtSourceCr * CurrencyRate, 2) ""
			+ ""WHERE AmtAcctCr IS NULL OR AmtAcctCr=0""
			+ "" AND I_IsImported='N'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Calculate Acct Cr="" + no);
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET I_ErrorMsg=""+ts +""||'WARN=Zero Acct Balance, ' ""
			+ ""WHERE (AmtSourceDr-AmtSourceCr)<>0 AND (AmtAcctDr-AmtAcctCr)=0""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Zero Acct Balance="" + no);
		sql = new StringBuffer (""UPDATE I_GLJournal i ""
			+ ""SET I_ErrorMsg=""+ts +""||'WARN=Check Acct Balance, ' ""
			+ ""WHERE ABS(AmtAcctDr-AmtAcctCr)>100000000""	//	100 mio
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Chack Acct Balance="" + no);


		/*********************************************************************/

		//	Get Balance
		sql = new StringBuffer (""SELECT SUM(AmtSourceDr)-SUM(AmtSourceCr), SUM(AmtAcctDr)-SUM(AmtAcctCr) ""
			+ ""FROM I_GLJournal ""
			+ ""WHERE I_IsImported='N'"").append (clientCheck);
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql.toString(), get_TrxName());
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
			{
				BigDecimal source = rs.getBigDecimal(1);
				BigDecimal acct = rs.getBigDecimal(2);
				if (source != null && source.signum() == 0
					&& acct != null && acct.signum() == 0)
					log.info (""Import Balance = 0"");
				else
					log.warning(""Balance Source="" + source  + "", Acct="" + acct);
				if (source != null)
					addLog (0, null, source, ""@AmtSourceDr@ - @AmtSourceCr@"");
				if (acct != null)
					addLog (0, null, acct, ""@AmtAcctDr@ - @AmtAcctCr@"");
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			log.log(Level.SEVERE, sql.toString(), ex);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;

		//	Count Errors
		int errors = DB.getSQLValue(get_TrxName(), 
			""SELECT COUNT(*) FROM I_GLJournal WHERE I_IsImported NOT IN ('Y','N')"" + clientCheck);

		commit();

		if (errors != 0)
		{
			if (m_IsValidateOnly || m_IsImportOnlyNoErrors)
				throw new Exception (""@Errors@="" + errors);
		}
		else if (m_IsValidateOnly)
			return ""@Errors@="" + errors;

		log.info(""Validation Errors="" + errors);
		
		/*********************************************************************/

		int noInsert = 0;
		int noInsertJournal = 0;
		int noInsertLine = 0;

		MJournalBatch batch = null;		//	Change Batch per Batch DocumentNo
		String BatchDocumentNo = """";
		MJournal journal = null;
		String JournalDocumentNo = """";
		Timestamp DateAcct = null;

		//	Go through Journal Records
		sql = new StringBuffer (""SELECT * FROM I_GLJournal ""
			+ ""WHERE I_IsImported='N'"").append (clientCheck)
			.append("" ORDER BY COALESCE(BatchDocumentNo, TO_NCHAR(I_GLJournal_ID)),	COALESCE(JournalDocumentNo, TO_NCHAR(I_GLJournal_ID)), C_AcctSchema_ID, PostingType, C_DocType_ID, GL_Category_ID, C_Currency_ID, TRUNC(DateAcct,'DD'), Line, I_GLJournal_ID"");
		try
		{
			pstmt = DB.prepareStatement (sql.toString (), get_TrxName());
			ResultSet rs = pstmt.executeQuery ();
			//
			while (rs.next())
			{
				X_I_GLJournal imp = new X_I_GLJournal (getCtx (), rs, get_TrxName());

				//	New Batch if Batch Document No changes
				String impBatchDocumentNo = imp.getBatchDocumentNo();
				if (impBatchDocumentNo == null)
					impBatchDocumentNo = """";
				if (batch == null
					|| imp.isCreateNewBatch()
					|| journal.getC_AcctSchema_ID() != imp.getC_AcctSchema_ID()
					|| !BatchDocumentNo.equals(impBatchDocumentNo))
				{
					BatchDocumentNo = impBatchDocumentNo;	//	cannot compare real DocumentNo
					batch = new MJournalBatch (getCtx(), 0, null);
					batch.setClientOrg(imp.getAD_Client_ID(), imp.getAD_OrgDoc_ID());
					if (imp.getBatchDocumentNo() != null 
						&& imp.getBatchDocumentNo().length() > 0)
						batch.setDocumentNo (imp.getBatchDocumentNo());
					batch.setC_DocType_ID(imp.getC_DocType_ID());
					batch.setPostingType(imp.getPostingType());
					String description = imp.getBatchDescription();
					if (description == null || description.length() == 0)
						description = ""*Import-"";
					else
						description += "" *Import-"";
					description += new Timestamp(System.currentTimeMillis());
					batch.setDescription(description);
					if (!batch.save())
					{
						log.log(Level.SEVERE, ""Batch not saved"");
						Exception ex = CLogger.retrieveException();
						if (ex != null)
						{
							addLog (0, null, null, ex.getLocalizedMessage());
							throw ex;
						}
						break;
					}
					noInsert++;
					journal = null;
				}
				//	Journal
				String impJournalDocumentNo = imp.getJournalDocumentNo();
				if (impJournalDocumentNo == null)
					impJournalDocumentNo = """";
				Timestamp impDateAcct = TimeUtil.getDay(imp.getDateAcct());
				if (journal == null
					|| imp.isCreateNewJournal()
					|| !JournalDocumentNo.equals(impJournalDocumentNo)
					|| journal.getC_DocType_ID() != imp.getC_DocType_ID()
					|| journal.getGL_Category_ID() != imp.getGL_Category_ID()
					|| !journal.getPostingType().equals(imp.getPostingType())
					|| journal.getC_Currency_ID() != imp.getC_Currency_ID()
					|| !impDateAcct.equals(DateAcct)
				)
				{
					JournalDocumentNo = impJournalDocumentNo;	//	cannot compare real DocumentNo
					DateAcct = impDateAcct;
					journal = new MJournal (getCtx(), 0, get_TrxName());
					journal.setGL_JournalBatch_ID(batch.getGL_JournalBatch_ID());
					journal.setClientOrg(imp.getAD_Client_ID(), imp.getAD_OrgDoc_ID());
					//
					String description = imp.getBatchDescription();
					if (description == null || description.length() == 0)
						description = ""(Import)"";
					journal.setDescription (description);
					if (imp.getJournalDocumentNo() != null && imp.getJournalDocumentNo().length() > 0)
						journal.setDocumentNo (imp.getJournalDocumentNo());
					//
					journal.setC_AcctSchema_ID (imp.getC_AcctSchema_ID());
					journal.setC_DocType_ID (imp.getC_DocType_ID());
					journal.setGL_Category_ID (imp.getGL_Category_ID());
					journal.setPostingType (imp.getPostingType());
					journal.setGL_Budget_ID(imp.getGL_Budget_ID());
					//
					journal.setCurrency (imp.getC_Currency_ID(), imp.getC_ConversionType_ID(), imp.getCurrencyRate());
					//
					journal.setC_Period_ID(imp.getC_Period_ID());
					journal.setDateAcct(imp.getDateAcct());		//	sets Period if not defined
					journal.setDateDoc (imp.getDateAcct());
					//
					if (!journal.save())
					{
						log.log(Level.SEVERE, ""Journal not saved"");
						Exception ex = CLogger.retrieveException();
						if (ex != null)
						{
							addLog (0, null, null, ex.getLocalizedMessage());
							throw ex;
						}
						break;
					}
					noInsertJournal++;
				}

				//	Lines
				MJournalLine line = new MJournalLine (journal);
				//
				line.setDescription(imp.getDescription());
				line.setCurrency (imp.getC_Currency_ID(), imp.getC_ConversionType_ID(), imp.getCurrencyRate());
				//	Set/Get Account Combination
				if (imp.getC_ValidCombination_ID() == 0)
				{
					MAccount acct = MAccount.get(getCtx(), imp.getAD_Client_ID(), imp.getAD_Org_ID(), 
						imp.getC_AcctSchema_ID(), imp.getAccount_ID(), 0,
						imp.getM_Product_ID(), imp.getC_BPartner_ID(), imp.getAD_OrgTrx_ID(),
						imp.getC_LocFrom_ID(), imp.getC_LocTo_ID(), imp.getC_SalesRegion_ID(),
						imp.getC_Project_ID(), imp.getC_Campaign_ID(), imp.getC_Activity_ID(),
						imp.getUser1_ID(), imp.getUser2_ID(), 0, 0);
					if (acct != null && acct.get_ID() == 0)
						acct.save();
					if (acct == null || acct.get_ID() == 0)
					{
						imp.setI_ErrorMsg(""ERROR creating Account"");
						imp.setI_IsImported(X_I_GLJournal.I_ISIMPORTED_No);
						imp.save();
						continue;
					}
					else
					{
						line.setC_ValidCombination_ID(acct.get_ID());
						imp.setC_ValidCombination_ID(acct.get_ID());
					}
				}
				else
					line.setC_ValidCombination_ID (imp.getC_ValidCombination_ID());
				//
				line.setLine (imp.getLine());
				line.setAmtSourceCr (imp.getAmtSourceCr());
				line.setAmtSourceDr (imp.getAmtSourceDr());
				line.setAmtAcct (imp.getAmtAcctDr(), imp.getAmtAcctCr());	//	only if not 0
				line.setDateAcct (imp.getDateAcct());
				//
				line.setC_UOM_ID(imp.getC_UOM_ID());
				line.setQty(imp.getQty());
				//
				if (line.save())
				{
					imp.setGL_JournalBatch_ID(batch.getGL_JournalBatch_ID());
					imp.setGL_Journal_ID(journal.getGL_Journal_ID());
					imp.setGL_JournalLine_ID(line.getGL_JournalLine_ID());
					imp.setI_IsImported(X_I_GLJournal.I_ISIMPORTED_Yes);
					imp.setProcessed(true);
					if (imp.save())
						noInsertLine++;
				}
			}	//	while records
			rs.close();
			pstmt.close();
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, """", e);
		}
		//	clean up
		try
		{
			if (pstmt != null)
				pstmt.close ();
		}
		catch (SQLException ex1)
		{
		}
		pstmt = null;

		//	Set Error to indicator to not imported
		sql = new StringBuffer (""UPDATE I_GLJournal ""
			+ ""SET I_IsImported='N', Updated=SysDate ""
			+ ""WHERE I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		addLog (0, null, new BigDecimal (no), ""@Errors@"");
		//
		addLog (0, null, new BigDecimal (noInsert), ""@GL_JournalBatch_ID@: @Inserted@"");
		addLog (0, null, new BigDecimal (noInsertJournal), ""@GL_Journal_ID@: @Inserted@"");
		addLog (0, null, new BigDecimal (noInsertLine), ""@GL_JournalLine_ID@: @Inserted@"");
		return """";
	}	//	doIt
"
org.compiere.process.ProjectSetType.prepare,ProjectSetType.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				continue;
			else if (name.equals(""C_ProjectType_ID""))
				m_C_ProjectType_ID = ((BigDecimal)element.getParameter()).intValue();
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		  }
	}	//	prepare
"
org.compiere.process.ProjectSetType.doIt,ProjectSetType.java,"String doIt() throws Exception
	{
		m_C_Project_ID = getRecord_ID();
		log.info(""doIt - C_Project_ID="" + m_C_Project_ID + "", C_ProjectType_ID="" + m_C_ProjectType_ID);
		//
		MProject project = new MProject (getCtx(), m_C_Project_ID, get_TrxName());
		if (project.getC_Project_ID() == 0 || project.getC_Project_ID() != m_C_Project_ID)
			throw new IllegalArgumentException(""Project not found C_Project_ID="" + m_C_Project_ID);
		if (project.getC_ProjectType_ID_Int() > 0)
			throw new IllegalArgumentException(""Project already has Type (Cannot overwrite) "" + project.getC_ProjectType_ID());
		//
		MProjectType type = new MProjectType (getCtx(), m_C_ProjectType_ID, get_TrxName());
		if (type.getC_ProjectType_ID() == 0 || type.getC_ProjectType_ID() != m_C_ProjectType_ID)
			throw new IllegalArgumentException(""Project Type not found C_ProjectType_ID="" + m_C_ProjectType_ID);

		boolean isPhaseValid = false;
		for( MProjectTypePhase phase : type.getPhases() )
		{
			if( phase.getC_Phase_ID() == project.getC_Phase_ID() )
			{
				isPhaseValid = true;
				break;
			}
		}
		if( !isPhaseValid )
			project.setC_Phase_ID(0);

		//	Set & Copy if Service
		project.setProjectType(type);
		if (!project.save())
			throw new Exception (""@Error@"");
		//
		return ""@OK@"";
	}	//	doIt
"
org.compiere.process.OrderOpen.prepare,OrderOpen.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_Order_ID""))
				p_C_Order_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.OrderOpen.doIt,OrderOpen.java,"String doIt() throws Exception
	{
		log.info(""Open C_Order_ID="" + p_C_Order_ID);
		if (p_C_Order_ID == 0)
			throw new IllegalArgumentException(""C_Order_ID == 0"");
		//
		MOrder order = new MOrder (getCtx(), p_C_Order_ID, get_TrxName());
		if (X_C_Order.DOCSTATUS_Closed.equals(order.getDocStatus()))
		{
			order.setDocStatus(X_C_Order.DOCSTATUS_Completed);
			return order.save() ? ""@OK@"" : ""@Error@"";
		}
		else
			throw new IllegalStateException(""Order is not closed"");
	}	//	doIt
"
org.compiere.process.ViewCreate.prepare,ViewCreate.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""EntityType""))
				p_EntityType = (String)element.getParameter();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.ViewCreate.doIt,ViewCreate.java,"String doIt () throws Exception
	{
		ArrayList<MTable> list = new ArrayList<MTable>();
		boolean retval = true;
		p_AD_Table_ID = (getProcessInfo()!=null)?getRecord_ID():0;
		
		if (p_AD_Table_ID > 0) {
			// create one specific view
			log.info(""Creating a view for AD_Table_ID="" + p_AD_Table_ID);
			MTable table = MTable.get(Env.getCtx(), p_AD_Table_ID);
			list.add(table);
		} else {
			// process all views for the entity type		
			log.info(""Creating views for EntityType="" + p_EntityType);

			//get views from AD
			PreparedStatement pstmt = null;
			String sql = ""SELECT * FROM AD_Table WHERE IsActive='Y' AND IsView='Y'"";

			if (p_EntityType != null)
			{
				// Currently support only single entity type
				sql += "" AND EntityType in ('"" + p_EntityType + ""')"";
			}
			sql += "" ORDER BY LoadSeq"";
			try
			{
				pstmt = DB.prepareStatement(sql, (Trx) null);
				ResultSet rs = pstmt.executeQuery ();
				while (rs.next ())
				{
					MTable table = new MTable (Env.getCtx(), rs, null);
					list.add(table);
				}
				rs.close ();
				pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				log.log (Level.SEVERE, sql, e);
				return ""Fail. Error to get view definition."";
			}
			try
			{
				if (pstmt != null)
					pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				pstmt = null;
			}
		}		
		
		String errViews = """";

		Trx trx = Trx.get(""getDatabaseMetaData"");
		DatabaseMetaData md = trx.getConnection().getMetaData();
		String schema = CConnection.get().getDbUid();
		
		for (MTable mt : list)
		{
			String vcsql = mt.getViewCreate(true);
			if (vcsql != null && vcsql.length()>0)
			{
				try
				{
					int no = -1;
					if (DB.isMSSQLServer() || DB.isPostgreSQL())
					{
						String view = mt.getTableName();
						if (md.storesUpperCaseIdentifiers()){
							schema = schema.toUpperCase();
							view = view.toUpperCase();
						} else {
							schema = schema.toLowerCase();
							view = view.toLowerCase ();
						}						
						ResultSet trs = md.getTables(null, schema, view, new String[] {""VIEW""});	
						if (trs!=null){
							if (trs.next()){
								if (DB.isMSSQLServer())
									no = DB.executeUpdate(""DROP VIEW "" + mt.getTableName(), (Object[])null, true, (Trx) null);
								else
									no = DB.executeUpdate(""DROP VIEW "" + mt.getTableName() +"" CASCADE"", (Object[])null, true, (Trx) null);
							}
							trs.close();
						}
						vcsql = vcsql.replace("" OR REPLACE "", "" "");
					}
					
					no = DB.executeUpdate(vcsql, (Trx) null);
					if (no != -1)
					{
						m_count++;
						log.log (Level.INFO, ""Created view "" + mt.getTableName());
					}
					else
					{
						//if (!DB.isMSSQLServer()){
							log.log (Level.SEVERE, vcsql);
							retval = false;
						//}
							errViews = errViews + mt.getTableName() + "", "";
					}
					
					/*
					//create table columns
					MColumn[] mcs = mt.getColumns(false);
					//for (MColumn mc : mcs)
					//	mc.delete(true);
					if (mcs==null || mcs.length==0)
					{
						//TODO jz temp disable until fix it
						//TableCreateColumns tcc = new TableCreateColumns(p_EntityType, mt.get_ID());
						//tcc.doIt();	
						ProcessInfo pi = new ProcessInfo ("""", 173, mt.get_Table_ID(), mt.get_ID());
						pi.setAD_User_ID (Env.getAD_User_ID(Env.getCtx()));
						pi.setAD_Client_ID (Env.getAD_Client_ID(Env.getCtx()));
						pi.setIsBatch(false);
						//jz ProcessCtl.process(this, 0, pi, get_Trx()); //  calls lockUI, unlockUI
					}
					else
						log.warning(""View "" + mt.get_TableName() + "" has had columns already."");
						*/
				}
				catch (Exception e)
				{
					log.log (Level.SEVERE, vcsql, e);
					retval = false;
				}
			}
			else
			{
				log.log (Level.SEVERE, ""Fail to get view create sql for "" + mt.getTableName());
				retval = false;
			}
		}

		if (trx!=null)
			trx.close();
		
		if (!retval)
			return ""Fail. Error to create views: "" + errViews + "" created view #"" + m_count;
		else
			return ""Created view #"" + m_count;
	}	//	doIt
"
org.compiere.process.ViewCreate.isUILocked,ViewCreate.java,"boolean isUILocked()
	{
		return false;
	}   //  isLoacked
"
org.compiere.process.ViewCreate.executeASync,ViewCreate.java,"void executeASync (ProcessInfo pi)
	{
		log.config(""-"");
	}   //  executeASync
"
org.compiere.process.BankStatementMatcher.prepare,BankStatementMatcher.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		m_matchers = MBankStatementMatcher.getMatchers(getCtx(), get_TrxName());
	}	//	prepare
"
org.compiere.process.BankStatementMatcher.doIt,BankStatementMatcher.java,"String doIt() throws Exception
	{
		int Table_ID = getTable_ID();
		int Record_ID = getRecord_ID();
		if (m_matchers == null || m_matchers.length == 0)
			throw new IllegalStateException(""No Matchers found"");
		//
		log.info (""doIt - Table_ID="" + Table_ID + "", Record_ID="" + Record_ID
			+ "", Matchers="" + m_matchers.length);
		
		if (Table_ID == X_I_BankStatement.Table_ID)
			return match (new X_I_BankStatement(getCtx(), Record_ID, get_TrxName()));
		else if (Table_ID == X_C_BankStatement.Table_ID)
			return match (new MBankStatement(getCtx(), Record_ID, get_TrxName()));
		else if (Table_ID == X_C_BankStatementLine.Table_ID)
			return match (new MBankStatementLine(getCtx(), Record_ID, get_TrxName()));
		
		return ""??"";
	}	//	doIt
"
org.compiere.process.BankStatementMatcher.match,BankStatementMatcher.java,"String match (X_I_BankStatement ibs)
	{
		if (m_matchers == null || ibs == null || ibs.getC_Payment_ID() != 0)
			return ""--"";
			
		log.fine("""" + ibs);
		BankStatementMatchInfo info = null;
		for (MBankStatementMatcher element : m_matchers) {
			if (element.isMatcherValid())
			{
				info = element.getMatcher().findMatch(ibs);
				if (info != null && info.isMatched())
				{
					if (info.getC_Payment_ID() > 0)
						ibs.setC_Payment_ID(info.getC_Payment_ID());
					if (info.getC_Invoice_ID() > 0)
						ibs.setC_Invoice_ID(info.getC_Invoice_ID());
					if (info.getC_BPartner_ID() > 0)
						ibs.setC_BPartner_ID(info.getC_BPartner_ID());
					ibs.save();
					return ""OK"";
				}
			}
		}	//	for all matchers
		return ""--"";
	}	//	match 
"
org.compiere.process.BankStatementMatcher.match,BankStatementMatcher.java,"String match (MBankStatementLine bsl)
	{
		if (m_matchers == null || bsl == null || bsl.getC_Payment_ID() != 0)
			return ""--"";
			
		log.fine(""match - "" + bsl);
		BankStatementMatchInfo info = null;
		for (MBankStatementMatcher element : m_matchers) {
			if (element.isMatcherValid())
			{
				info = element.getMatcher().findMatch(bsl);
				if (info != null && info.isMatched())
				{
					if (info.getC_Payment_ID() > 0)
						bsl.setC_Payment_ID(info.getC_Payment_ID());
					if (info.getC_Invoice_ID() > 0)
						bsl.setC_Invoice_ID(info.getC_Invoice_ID());
					if (info.getC_BPartner_ID() > 0)
						bsl.setC_BPartner_ID(info.getC_BPartner_ID());
					bsl.save();
					return ""OK"";
				}
			}
		}	//	for all matchers
		return ""--"";
	}	//	match 
"
org.compiere.process.BankStatementMatcher.match,BankStatementMatcher.java,"String match (MBankStatement bs)
	{
		if (m_matchers == null || bs == null)
			return ""--"";
		log.fine(""match - "" + bs);
		int count = 0;
		MBankStatementLine[] lines = bs.getLines(false);
		for (MBankStatementLine element : lines) {
			if (element.getC_Payment_ID() == 0)
			{
				match(element);
				count++;
			}
		}
		return String.valueOf(count);
	}	//	match 
"
org.compiere.process.LanguageMaintenance.prepare,LanguageMaintenance.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""MaintenanceMode""))
				p_MaintenanceMode = (String)element.getParameter();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_AD_Language_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.LanguageMaintenance.doIt,LanguageMaintenance.java,"String doIt() throws Exception
	{
		m_language = MLanguage.get (getCtx(), p_AD_Language_ID, get_TrxName());
		log.info(""Mode="" + p_MaintenanceMode + "", ID="" + p_AD_Language_ID
			+ "" - "" + m_language);
		
		if (m_language.isBaseLanguage())
			throw new Exception (""Base Language has no Translations"");
		
		int deleteNo = 0;
		int insertNo = 0;
		
		//	Delete
		if (MAINTENANCEMODE_Delete.equals(p_MaintenanceMode)
			|| MAINTENANCEMODE_ReCreate.equals(p_MaintenanceMode))
		{
			deleteNo = m_language.maintain(false);
		}
		//	Add
		if (MAINTENANCEMODE_Add.equals(p_MaintenanceMode)
			|| MAINTENANCEMODE_ReCreate.equals(p_MaintenanceMode))
		{
			if (m_language.isActive() && m_language.isSystemLanguage())
			{
				insertNo = m_language.maintain(true);
			}
			else
				throw new Exception (""Language not active System Language"");
		}
		//	Delete
		if (MAINTENANCEMODE_Delete.equals(p_MaintenanceMode))
		{
			if (m_language.isSystemLanguage())
			{
				m_language.setIsSystemLanguage(false);
				m_language.save();
			}
		}
		
		return ""@Deleted@="" + deleteNo + "" - @Inserted@="" + insertNo;
	}	//	doIt
"
org.compiere.process.LeadProject.prepare,LeadProject.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_ProjectType_ID""))
				p_C_ProjectType_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_C_Lead_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.LeadProject.doIt,LeadProject.java,"String doIt() throws Exception
	{
		log.info(""C_Lead_ID="" + p_C_Lead_ID + "",C_ProjectType_ID="" + p_C_ProjectType_ID);
		if (p_C_Lead_ID == 0)
			throw new CompiereUserException(""@C_Lead_ID@ ID=0"");
		if (p_C_ProjectType_ID == 0)
			throw new CompiereUserException(""@C_ProjectType_ID@ ID=0"");
		MLead lead = new MLead (getCtx(), p_C_Lead_ID, get_TrxName());
		if (lead.get_ID() != p_C_Lead_ID)
			throw new CompiereUserException(""@NotFound@: @C_Lead_ID@ ID="" + p_C_Lead_ID);
		//
		String retValue = lead.createProject(p_C_ProjectType_ID);
		if (retValue != null)
			throw new CompiereSystemException(retValue);
		lead.save();
		MProject project = lead.getProject();
		//
		return ""@C_Project_ID@ "" + project.getName();
	}	//	doIt
"
org.compiere.process.CommissionCalc.prepare,CommissionCalc.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""StartDate""))
				p_StartDate = (Timestamp)element.getParameter();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.CommissionCalc.doIt,CommissionCalc.java,"String doIt() throws Exception
	{
		log.info(""C_Commission_ID="" + getRecord_ID() + "", StartDate="" + p_StartDate);
		if (p_StartDate == null)
			p_StartDate = new Timestamp (System.currentTimeMillis());
		m_com = new MCommission (getCtx(), getRecord_ID(), get_TrxName());
		if (m_com.get_ID() == 0)
			throw new CompiereUserException (""No Commission"");
			
		//	Create Commission	
		MCommissionRun comRun = new MCommissionRun (m_com);
		setStartEndDate();
		comRun.setStartDate(p_StartDate);		
		//	01-Jan-2000 - 31-Jan-2001 - USD
		SimpleDateFormat format = DisplayType.getDateFormat(DisplayTypeConstants.Date);
		String description = format.format(p_StartDate) 
			+ "" - "" + format.format(m_EndDate)
			+ "" - "" + MCurrency.getISO_Code(getCtx(), m_com.getC_Currency_ID());
		comRun.setDescription(description);
		if (!comRun.save())
			throw new CompiereSystemException (""Could not save Commission Run"");
		
		MCommissionLine[] lines = m_com.getLines();
		for (MCommissionLine element : lines) {
			//	Amt for Line - Updated By Trigger
			MCommissionAmt comAmt = new MCommissionAmt (comRun, element.getC_CommissionLine_ID());
			if (!comAmt.save())
				throw new CompiereSystemException (""Could not save Commission Amt"");
			//
			StringBuffer sql = new StringBuffer();
			if (X_C_Commission.DOCBASISTYPE_Receipt.equals(m_com.getDocBasisType()))
			{
				if (m_com.isListDetails())
				{
					sql.append(""SELECT h.C_Currency_ID, (l.LineNetAmt*al.Amount/h.GrandTotal) AS Amt,""
						+ "" (l.QtyInvoiced*al.Amount/h.GrandTotal) AS Qty,""
						+ "" NULL, l.C_InvoiceLine_ID, p.DocumentNo||'_'||h.DocumentNo,""
						+ "" COALESCE(prd.Value,l.Description), h.DateInvoiced ""
						+ ""FROM C_Payment p""
						+ "" INNER JOIN C_AllocationLine al ON (p.C_Payment_ID=al.C_Payment_ID)""
						+ "" INNER JOIN C_Invoice h ON (al.C_Invoice_ID = h.C_Invoice_ID)""
						+ "" INNER JOIN C_InvoiceLine l ON (h.C_Invoice_ID = l.C_Invoice_ID) ""
						+ "" LEFT OUTER JOIN M_Product prd ON (l.M_Product_ID = prd.M_Product_ID) ""
						+ ""WHERE p.DocStatus IN ('CL','CO','RE')""
						+ "" AND h.IsSOTrx='Y'""
						+ "" AND p.AD_Client_ID = ?""
						+ "" AND p.DateTrx BETWEEN ? AND ?"");
				}
				else
				{
					sql.append(""SELECT h.C_Currency_ID, SUM(l.LineNetAmt*al.Amount/h.GrandTotal) AS Amt,""
						+ "" SUM(l.QtyInvoiced*al.Amount/h.GrandTotal) AS Qty,""
						+ "" NULL, NULL, NULL, NULL, MAX(h.DateInvoiced) ""
						+ ""FROM C_Payment p""
						+ "" INNER JOIN C_AllocationLine al ON (p.C_Payment_ID=al.C_Payment_ID)""
						+ "" INNER JOIN C_Invoice h ON (al.C_Invoice_ID = h.C_Invoice_ID)""
						+ "" INNER JOIN C_InvoiceLine l ON (h.C_Invoice_ID = l.C_Invoice_ID) ""
						+ ""WHERE p.DocStatus IN ('CL','CO','RE')""
						+ "" AND h.IsSOTrx='Y'""
						+ "" AND p.AD_Client_ID = ?""
						+ "" AND p.DateTrx BETWEEN ? AND ?"");
				}
			}
			else if (X_C_Commission.DOCBASISTYPE_Order.equals(m_com.getDocBasisType()))
			{
				if (m_com.isListDetails())
				{
					sql.append(""SELECT h.C_Currency_ID, l.LineNetAmt, l.QtyOrdered, ""
						+ ""l.C_OrderLine_ID, NULL, h.DocumentNo,""
						+ "" COALESCE(prd.Value,l.Description),h.DateOrdered ""
						+ ""FROM C_Order h""
						+ "" INNER JOIN C_OrderLine l ON (h.C_Order_ID = l.C_Order_ID)""
						+ "" LEFT OUTER JOIN M_Product prd ON (l.M_Product_ID = prd.M_Product_ID) ""
						+ ""WHERE h.DocStatus IN ('CL','CO')""
						+ "" AND h.IsSOTrx='Y'""
						+ "" AND h.AD_Client_ID = ?""
						+ "" AND h.DateOrdered BETWEEN ? AND ?"");
				}
				else
				{
					sql.append(""SELECT h.C_Currency_ID, SUM(l.LineNetAmt) AS Amt,""
						+ "" SUM(l.QtyOrdered) AS Qty, ""
						+ ""NULL, NULL, NULL, NULL, MAX(h.DateOrdered) ""
						+ ""FROM C_Order h""
						+ "" INNER JOIN C_OrderLine l ON (h.C_Order_ID = l.C_Order_ID) ""
						+ ""WHERE h.DocStatus IN ('CL','CO')""
						+ "" AND h.IsSOTrx='Y'""
						+ "" AND h.AD_Client_ID = ?""
						+ "" AND h.DateOrdered BETWEEN ? AND ?"");
				}
			}
			else 	//	Invoice Basis
			{
				if (m_com.isListDetails())
				{
					sql.append(""SELECT h.C_Currency_ID, l.LineNetAmt, l.QtyInvoiced, ""
						+ ""NULL, l.C_InvoiceLine_ID, h.DocumentNo,""
						+ "" COALESCE(prd.Value,l.Description),h.DateInvoiced ""
						+ ""FROM C_Invoice h""
						+ "" INNER JOIN C_InvoiceLine l ON (h.C_Invoice_ID = l.C_Invoice_ID)""
						+ "" LEFT OUTER JOIN M_Product prd ON (l.M_Product_ID = prd.M_Product_ID) ""
						+ ""WHERE h.DocStatus IN ('CL','CO','VO','RE')""
						+ "" AND h.IsSOTrx='Y'""
						+ "" AND h.AD_Client_ID = ?""
						+ "" AND h.DateInvoiced BETWEEN ? AND ?"");
				}
				else
				{
					sql.append(""SELECT h.C_Currency_ID, SUM(l.LineNetAmt) AS Amt,""
						+ "" SUM(l.QtyInvoiced) AS Qty, ""
						+ ""NULL, NULL, NULL, NULL, MAX(h.DateInvoiced) ""
						+ ""FROM C_Invoice h""
						+ "" INNER JOIN C_InvoiceLine l ON (h.C_Invoice_ID = l.C_Invoice_ID) ""
						+ ""WHERE h.DocStatus IN ('CL','CO','VO','RE')""
						+ "" AND h.IsSOTrx='Y'""
						+ "" AND h.AD_Client_ID = ?""
						+ "" AND h.DateInvoiced BETWEEN ? AND ?"");
				}
			}
			//	CommissionOrders/Invoices
			if (element.isCommissionOrders())
			{
				MUser[] users = MUser.getOfBPartner(getCtx(), m_com.getC_BPartner_ID());
				if (users == null || users.length == 0)
					throw new CompiereUserException (""Commission Business Partner has no Users/Contact"");
				if (users.length == 1)
				{
					int SalesRep_ID = users[0].getAD_User_ID();
					sql.append("" AND h.SalesRep_ID="").append(SalesRep_ID);
				}
				else
				{
					log.warning(""Not 1 User/Contact for C_BPartner_ID="" 
						+ m_com.getC_BPartner_ID() + "" but "" + users.length);
					sql.append("" AND h.SalesRep_ID IN (SELECT AD_User_ID FROM AD_User WHERE C_BPartner_ID="")
						.append(m_com.getC_BPartner_ID()).append("")"");
				}
			}
			//	Organization
			if (element.getOrg_ID() != 0)
				sql.append("" AND h.AD_Org_ID="").append(element.getOrg_ID());
			//	BPartner
			if (element.getC_BPartner_ID() != 0)
				sql.append("" AND h.C_BPartner_ID="").append(element.getC_BPartner_ID());
			//	BPartner Group
			if (element.getC_BP_Group_ID() != 0)
				sql.append("" AND h.C_BPartner_ID IN ""
					+ ""(SELECT C_BPartner_ID FROM C_BPartner WHERE C_BP_Group_ID="").append(element.getC_BP_Group_ID()).append("")"");
			//	Sales Region
			if (element.getC_SalesRegion_ID() != 0)
				sql.append("" AND h.C_BPartner_Location_ID IN ""
					+ ""(SELECT C_BPartner_Location_ID FROM C_BPartner_Location WHERE C_SalesRegion_ID="").append(element.getC_SalesRegion_ID()).append("")"");
			//	Product
			if (element.getM_Product_ID() != 0)
				sql.append("" AND l.M_Product_ID="").append(element.getM_Product_ID());
			//	Product Category
			if (element.getM_Product_Category_ID() != 0)
				sql.append("" AND l.M_Product_ID IN ""
					+ ""(SELECT M_Product_ID FROM M_Product WHERE M_Product_Category_ID="").append(element.getM_Product_Category_ID()).append("")"");
			//	Grouping
			if (!m_com.isListDetails())
				sql.append("" GROUP BY h.C_Currency_ID"");
			//
			log.fine(""Line="" + element.getLine() + "" - "" + sql);
			//
			createDetail(sql.toString(), comAmt);
			comAmt.calculateCommission();
			comAmt.save();
		}	//	for all commission lines
		
	//	comRun.updateFromAmt();
	//	comRun.save();
		
		//	Save Last Run
		m_com.setDateLastRun (p_StartDate);
		m_com.save();
		
		return ""@C_CommissionRun_ID@ = "" + comRun.getDocumentNo() 
			+ "" - "" + comRun.getDescription();
	}	//	doIt
"
org.compiere.process.CommissionCalc.setStartEndDate,CommissionCalc.java,"void setStartEndDate()
	{
		GregorianCalendar cal = new GregorianCalendar(Language.getLoginLanguage().getLocale());
		cal.setTimeInMillis(p_StartDate.getTime());
		cal.set(Calendar.HOUR_OF_DAY, 0);
		cal.set(Calendar.MINUTE, 0);
		cal.set(Calendar.SECOND, 0);
		cal.set(Calendar.MILLISECOND, 0);
		//	Yearly
		if (X_C_Commission.FREQUENCYTYPE_Yearly.equals(m_com.getFrequencyType()))
		{
			cal.set(Calendar.DAY_OF_YEAR, 1);
			p_StartDate = new Timestamp (cal.getTimeInMillis());
			//
			cal.add(Calendar.YEAR, 1);
			cal.add(Calendar.DAY_OF_YEAR, -1); 
			m_EndDate = new Timestamp (cal.getTimeInMillis());
			
		}
		//	Quarterly
		else if (X_C_Commission.FREQUENCYTYPE_Quarterly.equals(m_com.getFrequencyType()))
		{
			cal.set(Calendar.DAY_OF_MONTH, 1);
			int month = cal.get(Calendar.MONTH);
			if (month < Calendar.APRIL)
				cal.set(Calendar.MONTH, Calendar.JANUARY);
			else if (month < Calendar.JULY)
				cal.set(Calendar.MONTH, Calendar.APRIL);
			else if (month < Calendar.OCTOBER)
				cal.set(Calendar.MONTH, Calendar.JULY);
			else
				cal.set(Calendar.MONTH, Calendar.OCTOBER);
			p_StartDate = new Timestamp (cal.getTimeInMillis());
			//
			cal.add(Calendar.MONTH, 3);
			cal.add(Calendar.DAY_OF_YEAR, -1); 
			m_EndDate = new Timestamp (cal.getTimeInMillis());
		}
		//	Weekly
		else if (X_C_Commission.FREQUENCYTYPE_Weekly.equals(m_com.getFrequencyType()))
		{
			cal.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);
			p_StartDate = new Timestamp (cal.getTimeInMillis());
			//
			cal.add(Calendar.DAY_OF_YEAR, 7); 
			m_EndDate = new Timestamp (cal.getTimeInMillis());
		}
		//	Monthly
		else
		{
			cal.set(Calendar.DAY_OF_MONTH, 1);
			p_StartDate = new Timestamp (cal.getTimeInMillis());
			//
			cal.add(Calendar.MONTH, 1);
			cal.add(Calendar.DAY_OF_YEAR, -1); 
			m_EndDate = new Timestamp (cal.getTimeInMillis());
		}
		log.fine(""setStartEndDate = "" + p_StartDate + "" - "" + m_EndDate);
		
		/**
		String sd = DB.TO_DATE(p_StartDate, true);
		StringBuffer sql = new StringBuffer (""SELECT "");
		if (MCommission.FREQUENCYTYPE_Quarterly.equals(m_com.getFrequencyType()))
			sql.append(""TRUNC("").append(sd).append("", 'Q'), TRUNC("").append(sd).append(""+92, 'Q')-1"");
		else if (MCommission.FREQUENCYTYPE_Weekly.equals(m_com.getFrequencyType()))
			sql.append(""TRUNC("").append(sd).append("", 'DAY'), TRUNC("").append(sd).append(""+7, 'DAY')-1"");
		else	//	Month
			sql.append(""TRUNC("").append(sd).append("", 'MM'), TRUNC("").append(sd).append(""+31, 'MM')-1"");
		sql.append("" FROM DUAL"");
		**/
	}	//	setStartEndDate
"
org.compiere.process.CommissionCalc.createDetail,CommissionCalc.java,"void createDetail (String sql, MCommissionAmt comAmt)
	{
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_TrxName());
			pstmt.setInt(1, m_com.getAD_Client_ID());
			pstmt.setTimestamp(2, p_StartDate);
			pstmt.setTimestamp(3, m_EndDate);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				//	CommissionAmount, C_Currency_ID, Amt, Qty,
				MCommissionDetail cd = new MCommissionDetail (comAmt,
					rs.getInt(1), rs.getBigDecimal(2), rs.getBigDecimal(3));
					
				//	C_OrderLine_ID, C_InvoiceLine_ID,
				cd.setLineIDs(rs.getInt(4), rs.getInt(5));
				
				//	Reference, Info,
				String s = rs.getString(6);
				if (s != null)
					cd.setReference(s);
				s = rs.getString(7);
				if (s != null)
					cd.setInfo(s);
				
				//	Date
				Timestamp date = rs.getTimestamp(8);
				cd.setConvertedAmt(date);
				
				//
				if (!cd.save())		//	creates memory leak
					throw new IllegalArgumentException (""CommissionCalc - Detail Not saved"");
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""createDetail"", e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
	}	//	createDetail
"
org.compiere.process.RequestInvoice.prepare,RequestInvoice.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""R_RequestType_ID""))
				p_R_RequestType_ID = element.getParameterAsInt();
			else if (name.equals(""R_Group_ID""))
				p_R_Group_ID = element.getParameterAsInt();
			else if (name.equals(""R_Category_ID""))
				p_R_Category_ID = element.getParameterAsInt();
			else if (name.equals(""C_BPartner_ID""))
				p_C_BPartner_ID = element.getParameterAsInt();
			else if (name.equals(""M_Product_ID""))
				p_M_Product_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.RequestInvoice.doIt,RequestInvoice.java,"String doIt () throws Exception
	{
		log.info(""R_RequestType_ID="" + p_R_RequestType_ID + "", R_Group_ID="" + p_R_Group_ID
			+ "", R_Category_ID="" + p_R_Category_ID + "", C_BPartner_ID="" + p_C_BPartner_ID
			+ "", p_M_Product_ID="" + p_M_Product_ID);
		
		MRequestType type = MRequestType.get (getCtx(), p_R_RequestType_ID);
		if (type.get_ID() == 0)
			throw new CompiereSystemException(""@R_RequestType_ID@ @NotFound@ "" + p_R_RequestType_ID);
		if (!type.isInvoiced())
			throw new CompiereSystemException(""@R_RequestType_ID@ <> @IsInvoiced@"");
		
		String sql = ""SELECT * FROM R_Request r""
			+ "" INNER JOIN R_Status s ON (r.R_Status_ID=s.R_Status_ID) ""
			+ ""WHERE s.IsClosed='Y'""
			+ "" AND r.R_RequestType_ID=?"";
		if (p_R_Group_ID != 0)
			sql += "" AND r.R_Group_ID=?"";
		if (p_R_Category_ID != 0)
			sql += "" AND r.R_Category_ID=?"";
		if (p_C_BPartner_ID != 0)
			sql += "" AND r.C_BPartner_ID=?"";
		sql += "" AND r.IsInvoiced='Y' ""
			+ ""ORDER BY C_BPartner_ID"";
		
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_TrxName());
			int index = 1;
			pstmt.setInt (index++, p_R_RequestType_ID);
			if (p_R_Group_ID != 0)
				pstmt.setInt (index++, p_R_Group_ID);
			if (p_R_Category_ID != 0)
				pstmt.setInt (index++, p_R_Category_ID);
			if (p_C_BPartner_ID != 0)
				pstmt.setInt (index++, p_C_BPartner_ID);
			ResultSet rs = pstmt.executeQuery ();
			int oldC_BPartner_ID = 0;
			while (rs.next ())
			{
				MRequest request = new MRequest (getCtx(), rs, get_TrxName());
				if (!request.isInvoiced())
					continue;
				if (oldC_BPartner_ID != request.getC_BPartner_ID())
					invoiceDone();
				if (m_invoice == null)
				{
					invoiceNew(request);
					oldC_BPartner_ID = request.getC_BPartner_ID();
				}
				invoiceLine(request);
			}
			invoiceDone();
			//
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//	R_Category_ID
		return null;
	}	//	doIt
"
org.compiere.process.RequestInvoice.invoiceDone,RequestInvoice.java,"void invoiceDone()
	{
		//	Close Old
		if (m_invoice != null)
		{
			if (m_linecount == 0)
				m_invoice.delete(false);
			else
			{
				m_invoice.processIt(DocActionConstants.ACTION_Prepare);
				m_invoice.save();
				addLog(0, null, m_invoice.getGrandTotal(), m_invoice.getDocumentNo());
			}
		}
		m_invoice = null;
	}	//	invoiceDone
"
org.compiere.process.RequestInvoice.invoiceNew,RequestInvoice.java,"void invoiceNew (MRequest request)
	{
		m_invoice = new MInvoice (getCtx(), 0, get_TrxName());
		m_invoice.setC_DocTypeTarget_ID(MDocBaseType.DOCBASETYPE_ARInvoice);
		
		MBPartner partner = new MBPartner (getCtx(), request.getC_BPartner_ID(), null);
		m_invoice.setBPartner(partner);
		
		m_invoice.save();
		m_linecount = 0;
	}	//	invoiceNew
"
org.compiere.process.RequestInvoice.invoiceLine,RequestInvoice.java,"void invoiceLine (MRequest request)
	{
		MRequestUpdate[] updates = request.getUpdates(null);
		for (MRequestUpdate element : updates) {
			BigDecimal qty = element.getQtyInvoiced();
			if (qty == null || qty.signum() == 0)
				continue;
			
			MInvoiceLine il = new MInvoiceLine(m_invoice);
			m_linecount++;
			il.setLine(m_linecount*10);
			//
			il.setQty(qty);
			//	Product
			int M_Product_ID = element.getM_ProductSpent_ID();
			if (M_Product_ID == 0)
				M_Product_ID = p_M_Product_ID;
			il.setM_Product_ID(M_Product_ID);
			//
			il.setPrice();
			il.save();
		}
	}	//	invoiceLine
"
org.compiere.process.RoleMakeSysAdmin.prepare,RoleMakeSysAdmin.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para)
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_User_ID""))
				p_AD_User_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.RoleMakeSysAdmin.doIt,RoleMakeSysAdmin.java,"String doIt() throws Exception
	{
		log.info(""AD_User_ID="" + p_AD_User_ID);
		if (p_AD_User_ID == 0)
			throw new CompiereUserException(""@NotFound@ @AD_User_ID@ =0"");
		MUser user = new MUser(getCtx(), p_AD_User_ID, get_TrxName());
		if (user.get_ID() != p_AD_User_ID)
			throw new CompiereUserException(""@NotFound@ @AD_User_ID@ ="" + p_AD_User_ID);
		if (user.getAD_Client_ID() != getCtx().getAD_Client_ID())
			throw new CompiereUserException(""@AD_Client_ID@ ""
				+ user.getAD_Client_ID() + "" <> ""+ getCtx().getAD_Client_ID());

		//	Move to System Level
		user.setClientOrg(0, 0);
		if (!user.save())
		{
			String errorMsg = """";
			ValueNamePair ep = CLogger.retrieveError();
			if (ep != null)
				errorMsg = ep.getName();
			throw new CompiereSystemException(""@AD_User_ID@: "" + errorMsg);
		}

		//	Create new User Role
		//	(user should not have SysAdmin role yet - parameter check)
		MUserRoles ur = new MUserRoles(getCtx(), user.getAD_User_ID(), 0, get_TrxName());
		if (!ur.save())
		{
			String errorMsg = """";
			ValueNamePair ep = CLogger.retrieveError();
			if (ep != null)
				errorMsg = ep.getName();
			throw new CompiereSystemException(""@AD_Role_ID@: "" + errorMsg);
		}

		return ""OK"";
	}	//	doIt
"
org.compiere.process.CopyFromInvoice.prepare,CopyFromInvoice.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_Invoice_ID""))
				m_C_Invoice_ID = ((BigDecimal)element.getParameter()).intValue();
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.CopyFromInvoice.doIt,CopyFromInvoice.java,"String doIt() throws Exception
	{
		int To_C_Invoice_ID = getRecord_ID();
		log.info(""From C_Invoice_ID="" + m_C_Invoice_ID + "" to "" + To_C_Invoice_ID);
		if (To_C_Invoice_ID == 0)
			throw new IllegalArgumentException(""Target C_Invoice_ID == 0"");
		if (m_C_Invoice_ID == 0)
			throw new IllegalArgumentException(""Source C_Invoice_ID == 0"");
		MInvoice from = new MInvoice (getCtx(), m_C_Invoice_ID, null);
		MInvoice to = new MInvoice (getCtx(), To_C_Invoice_ID, null);
		//
		int no = to.copyLinesFrom (from, false, false);
		//
		return ""@Copied@="" + no;
	}	//	doIt
"
org.compiere.process.CopyFromOrder.prepare,CopyFromOrder.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_Order_ID""))
				p_C_Order_ID = ((BigDecimal)element.getParameter()).intValue();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.CopyFromOrder.doIt,CopyFromOrder.java,"String doIt() throws Exception
	{
		int To_C_Order_ID = getRecord_ID();
		log.info(""From C_Order_ID="" + p_C_Order_ID + "" to "" + To_C_Order_ID);
		if (To_C_Order_ID == 0)
			throw new IllegalArgumentException(""Target C_Order_ID == 0"");
		if (p_C_Order_ID == 0)
			throw new IllegalArgumentException(""Source C_Order_ID == 0"");
		MOrder from = new MOrder (getCtx(), p_C_Order_ID, get_TrxName());
		MOrder to = new MOrder (getCtx(), To_C_Order_ID, get_TrxName());
		//
		int no = to.copyLinesFrom (from, false, false);		//	no Attributes
		//
		return ""@Copied@="" + no;
	}	//	doIt
"
org.compiere.process.InvoiceBatchProcess.prepare,InvoiceBatchProcess.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""DocAction""))
				p_DocAction = (String)element.getParameter();
		}
		p_C_InvoiceBatch_ID = getRecord_ID();
	}   //  prepare
"
org.compiere.process.InvoiceBatchProcess.doIt,InvoiceBatchProcess.java,"String doIt () throws Exception
	{
		log.info(""C_InvoiceBatch_ID="" + p_C_InvoiceBatch_ID + "", DocAction="" + p_DocAction);
		if (p_C_InvoiceBatch_ID == 0)
			throw new CompiereUserException(""C_InvoiceBatch_ID = 0"");
		MInvoiceBatch batch = new MInvoiceBatch(getCtx(), p_C_InvoiceBatch_ID, get_TrxName());
		if (batch.get_ID() == 0)
			throw new CompiereUserException(""@NotFound@: @C_InvoiceBatch_ID@ - "" + p_C_InvoiceBatch_ID);
		if (batch.isProcessed())
			throw new CompiereUserException(""@Processed@"");
		//
		if (batch.getControlAmt().signum() != 0
			&& batch.getControlAmt().compareTo(batch.getDocumentAmt()) != 0)
			throw new CompiereUserException(""@ControlAmt@ <> @DocumentAmt@"");		
		//
		MInvoiceBatchLine[] lines = batch.getLines(false);
		for (MInvoiceBatchLine line : lines) {
			if (line.getC_Invoice_ID() != 0 || line.getC_InvoiceLine_ID() != 0)
				continue;
			
			if ((m_oldDocumentNo != null 
					&& !m_oldDocumentNo.equals(line.getDocumentNo()))
				|| m_oldC_BPartner_ID != line.getC_BPartner_ID()
				|| m_oldC_BPartner_Location_ID != line.getC_BPartner_Location_ID())
				completeInvoice();
			//	New Invoice
			if (m_invoice == null)
			{
				m_invoice = new MInvoice (batch, line);
				if (!m_invoice.save())
					throw new CompiereUserException(""Cannot save Invoice"");
				//
				m_oldDocumentNo = line.getDocumentNo();
				m_oldC_BPartner_ID = line.getC_BPartner_ID();
				m_oldC_BPartner_Location_ID = line.getC_BPartner_Location_ID();
			}
			
			if (line.isTaxIncluded() != m_invoice.isTaxIncluded())
			{
				//	rollback
				throw new CompiereUserException(""Line "" + line.getLine() + "" TaxIncluded inconsistent"");
			}
			
			//	Add Line
			MInvoiceLine invoiceLine = new MInvoiceLine (m_invoice);
			invoiceLine.setDescription(line.getDescription());
			invoiceLine.setC_Charge_ID(line.getC_Charge_ID());
			invoiceLine.setQty(line.getQtyEntered());	// Entered/Invoiced
			invoiceLine.setPrice(line.getPriceEntered());
			invoiceLine.setC_Tax_ID(line.getC_Tax_ID());
			invoiceLine.setTaxAmt(line.getTaxAmt());
			invoiceLine.setLineNetAmt(line.getLineNetAmt());
			invoiceLine.setLineTotalAmt(line.getLineTotalAmt());
			if (!invoiceLine.save())
			{
				//	rollback
				throw new CompiereUserException(""Cannot save Invoice Line"");
			}

			//	Update Batch Line
			line.setC_Invoice_ID(m_invoice.getC_Invoice_ID());
			line.setC_InvoiceLine_ID(invoiceLine.getC_InvoiceLine_ID());
			line.save();
			
		}	//	for all lines
		completeInvoice();
		//
		batch.setProcessed(true);
		batch.save();
		
		return ""#"" + m_count;
	}	//	doIt
"
org.compiere.process.InvoiceBatchProcess.completeInvoice,InvoiceBatchProcess.java,"void completeInvoice()
	{
		if (m_invoice == null)
			return;
		
		m_invoice.setDocAction(p_DocAction);
		m_invoice.processIt(p_DocAction);
		m_invoice.save();
		
		addLog(0, m_invoice.getDateInvoiced(), m_invoice.getGrandTotal(), m_invoice.getDocumentNo());
		m_count++;
		
		m_invoice = null;
	}	//	completeInvoice
"
org.compiere.process.InOutCreateInvoice.prepare,InOutCreateInvoice.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) 
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""M_PriceList_ID""))
				p_M_PriceList_ID = element.getParameterAsInt();
			else if (name.equals(""InvoiceDocumentNo""))
				p_InvoiceDocumentNo = (String)element.getParameter();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_M_InOut_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.InOutCreateInvoice.doIt,InOutCreateInvoice.java,"String doIt () throws Exception
	{
		log.info(""M_InOut_ID="" + p_M_InOut_ID 
			+ "", M_PriceList_ID="" + p_M_PriceList_ID
			+ "", InvoiceDocumentNo="" + p_InvoiceDocumentNo);
		if (p_M_InOut_ID == 0)
			throw new IllegalArgumentException(""@NotFound@ @M_InOut_ID@"");
		//
		MInOut ship = new MInOut (getCtx(), p_M_InOut_ID, null);
		if (ship.get_ID() == 0)
			throw new IllegalArgumentException(""@NotFound@ @M_InOut_ID@"");
		if (!X_M_InOut.DOCSTATUS_Completed.equals(ship.getDocStatus()))
			throw new IllegalArgumentException(""@InvoiceCreateDocNotCompleted@"");
		
		MInvoice invoice = new MInvoice (ship, null);

		if(ship.isReturnTrx())
			invoice.setC_DocTypeTarget_ID(ship.isSOTrx() ? MDocBaseType.DOCBASETYPE_ARCreditMemo : MDocBaseType.DOCBASETYPE_APCreditMemo);
		
		if (p_M_PriceList_ID != 0)
			invoice.setM_PriceList_ID(p_M_PriceList_ID);
		if (p_InvoiceDocumentNo != null && p_InvoiceDocumentNo.length() > 0)
			invoice.setDocumentNo(p_InvoiceDocumentNo);
		if (!invoice.save())
		{
			String error = CLogger.retrieveError().getName();
			throw new IllegalArgumentException(""@SaveError@ Invoice "" + error);
		}
		MInOutLine[] shipLines = ship.getLines(false);
		for (MInOutLine sLine : shipLines) {
			MInvoiceLine line = new MInvoiceLine(invoice);
			line.setShipLine(sLine);
			line.setQtyEntered(sLine.getQtyEntered());
			line.setQtyInvoiced(sLine.getMovementQty());
			if (!line.save())
				throw new IllegalArgumentException(""@SaveError@ Invoice Line"");
		}
		
		return invoice.getDocumentNo();
	}	//	InOutCreateInvoice
"
org.compiere.process.BPPaymentAllocCleanup.prepare,BPPaymentAllocCleanup.java,"void prepare ()
	{
		p_C_BPartner_ID = getRecord_ID();
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_BPartner_ID""))
				p_C_BPartner_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.BPPaymentAllocCleanup.doIt,BPPaymentAllocCleanup.java,"String doIt () throws Exception
	{
		log.info(""C_BPartner_ID="" + p_C_BPartner_ID);
		if (p_C_BPartner_ID == 0)
			throw new CompiereUserException (""No Business Partner selected"");
		MPayment.setIsAllocated (getCtx(), p_C_BPartner_ID, null);
		MInvoice.setIsPaid (getCtx(), p_C_BPartner_ID, null);
		
		return ""OK"";
	}	//	doIt
"
org.compiere.process.BOMValidate.prepare,BOMValidate.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""M_Product_Category_ID""))
				p_M_Product_Category_ID = element.getParameterAsInt();
			else if (name.equals(""IsReValidate""))
				p_IsReValidate = ""Y"".equals(element.getParameter());
			else if (name.equals(""IsCheckPriceList""))
				p_IsCheckPriceList = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_M_Product_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.BOMValidate.doIt,BOMValidate.java,"String doIt() throws Exception
	{
		if (p_M_Product_ID != 0)
		{
			m_CalledFromMenu = false;
			log.info(""M_Product_ID="" + p_M_Product_ID);
			return validateProduct(new MProduct(getCtx(), p_M_Product_ID, get_TrxName()));
		}
		log.info(""M_Product_Category_ID="" + p_M_Product_Category_ID
				+ "", IsReValidate="" + p_IsReValidate + "", IsCheckPriceList="" + p_IsCheckPriceList );
		//
		int counter = 0;
		PreparedStatement pstmt = null;
		String sql = ""SELECT * FROM M_Product ""
			+ ""WHERE IsBOM='Y' AND "";
		if (p_M_Product_Category_ID == 0)
			sql += ""AD_Client_ID=? "";
		else
			sql += ""M_Product_Category_ID=? "";
		if (!p_IsReValidate)
			sql += ""AND IsVerified<>'Y' "";
		sql += ""ORDER BY Name"";
		int AD_Client_ID = getCtx().getAD_Client_ID();
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			if (p_M_Product_Category_ID == 0)
				pstmt.setInt (1, AD_Client_ID);
			else
				pstmt.setInt(1, p_M_Product_Category_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				String info = validateProduct(new MProduct(getCtx(), rs, get_TrxName()));
				addLog(0, null, null, info);
				counter++;
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return ""#"" + counter;
	}	//	doIt
"
org.compiere.process.BOMValidate.validateProduct,BOMValidate.java,"String validateProduct (MProduct product)
	{
		m_product = product;

		if (!m_product.isBOM())
		{				
			m_product.setIsVerified(false);
			m_product.save();
			return m_product.getName() + "" @NotValid@"";
		}

		/** Price list versions where the BOMproduct is included*/ 
		parentPLV = new ArrayList<Integer>();
		parentPLVexist = false;
		if(p_IsCheckPriceList)
		{       
			PreparedStatement pstmt = null;
			String sql = ""SELECT M_Pricelist_Version_ID FROM M_ProductPrice WHERE M_Product_ID=? AND IsActive = 'Y'"";

			try
			{
				pstmt = DB.prepareStatement(sql, (Trx) null);
				pstmt.setInt(1, m_product.get_ID());
				ResultSet rs = pstmt.executeQuery ();
				while (rs.next ())
					parentPLV.add(Integer.valueOf(rs.getInt(1)));

				if (parentPLV.size() > 0)
					parentPLVexist = true;
				rs.close ();
				pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				log.log (Level.SEVERE, sql, e);
			}
			try
			{
				if (pstmt != null)
					pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				pstmt = null;
			}
		}/** End of finding PLV's for the BOMProduct */


		MBOM[] boms = MBOM.getOfProduct(getCtx(), m_product.getM_Product_ID(), get_TrxName(), "" IsActive = 'Y' "");
		if (boms.length == 0)
		{
			log.warning (m_product.getName() + "": ""  + ""Does not have any active BOMs."");
			m_product.setIsVerified(false);
			m_product.save();
			return m_product.getName() + "" @NotValid@"";
		}

		for (int i = 0; i < boms.length; i++)
		{
			if (!validateBOM(boms[i]))
			{
				m_product.setIsVerified(false);
				m_product.save();
				return m_product.getName() + "" "" + boms[i].getName() + "" @NotValid@"";
			}
		}

		//	OK
		m_product.setIsVerified(true);
		m_product.save();
		return m_product.getName() + "" @IsValid@"";
	}	//	validateProduct
"
org.compiere.process.BOMValidate.validateBOM,BOMValidate.java,"boolean validateBOM (MBOM bom)
	{
		MBOMProduct[] BOMproducts = MBOMProduct.getOfBOM(bom);
		if (BOMproducts.length == 0)
		{
			log.warning (m_product.getName() + "": ""  + ""Does not have any active BOM components for one of its BOMs."");
			return false;
		}
		boolean retvalue = true;
		for (MBOMProduct BOMproduct : BOMproducts) {
			m_products = new ArrayList<MProduct>();
			m_products.add(m_product);
			MProduct pp = new MProduct(getCtx(), BOMproduct.getM_ProductBOM_ID(), get_TrxName());
			if (pp.isBOM())
				retvalue = validateProduct(pp, BOMproduct.getComponentBOM(), bom.getBOMType(), bom.getBOMUse());
			if(parentPLVexist)
				retvalue &= checkPLV(pp);
			if (!(retvalue))
				return false;
		}
		if (!(retvalue))
			return false;
		return true;
	}	//	validateBOM
"
org.compiere.process.BOMValidate.validateProduct,BOMValidate.java,"boolean validateProduct (MProduct product, MBOM componentBOM, String BOMType, String BOMUse)
	{
		if (!product.isBOM())
			return true;

		if (m_products.contains(product))
		{
			log.warning (m_product.getName() + "": "" + product.getName() + "" is recursively included."");
			return false;
		}

		/** If BOMValidate is being run for a single product, set validation to false
		 *  if any of the included BOMS are not verified. We cannot do this for the
		 *  Verify BOMs process because we cannot control the order in which the BOMs
		 *  will be processed.
		 */
		if (!m_CalledFromMenu && !product.isVerified())
		{
			log.warning (m_product.getName() + "": "" + product.getName() + "" does not have a valid BOM. Try verifying its BOM first."");
			return false;
		}

		m_products.add(product);
		log.fine(product.getName());

		MBOM bom = null;
		// The included component is a BOM component but no Component BOM was 
		// specified in the BOM line. In this case only validate that BOM of 
		// the included component having the same BOM Type and Use as the parent product.
		if (componentBOM == null)
		{
			String restriction = ""BOMType='"" + BOMType + ""' AND BOMUse='"" + BOMUse + ""'"" + "" AND IsActive = 'Y' "";
			MBOM[] boms = MBOM.getOfProduct(getCtx(), product.getM_Product_ID(), get_TrxName(),
					restriction);
			if (boms.length != 1)
			{
				log.warning(""Component (M_Product_ID) "" + product.getM_Product_ID() + "", "" + 
						restriction + "" - Length="" + boms.length);
				return false;
			}
			bom = boms[0];
		}
		// A Component BOM was specified for the included component. 
		// Hence only validate that component BOM.
		else
		{
			bom = componentBOM;
		}
		MBOMProduct[] BOMproducts = MBOMProduct.getOfBOM(bom);
		if (BOMproducts.length == 0)
		{
			log.warning (m_product.getName() + "": "" + product.getName() + "" does not have any active BOM components for one of its BOMs."");
			return false;
		}
		boolean retvalue = true;
		for (MBOMProduct BOMproduct : BOMproducts) {
			MProduct pp = new MProduct(getCtx(), BOMproduct.getM_ProductBOM_ID(), get_TrxName());
			if (pp.isBOM())
				retvalue = validateProduct(pp, BOMproduct.getComponentBOM(), bom.getBOMType(), bom.getBOMUse());
			if(parentPLVexist)
				retvalue &= checkPLV(pp);
			if (!(retvalue))
				return false;
		}
		if (!(retvalue))
			return false;

		return true;			
	}	//	validateProduct
"
org.compiere.process.BOMValidate.checkPLV,BOMValidate.java,"boolean checkPLV(MProduct prod)
	{
		ArrayList<Integer> childPLV = new ArrayList<Integer>();
		PreparedStatement pstmt = null;
		String sql = ""SELECT M_Pricelist_Version_ID FROM M_ProductPrice WHERE M_Product_ID=? AND IsActive = 'Y'"";

		try
		{

			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, prod.get_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				childPLV.add(Integer.valueOf(rs.getInt(1)));

			if (childPLV.size() == 0)
			{
				log.warning (prod.getName() + "": ""  + ""Is not included in any Price List"");
				return false;	
			}				
			if (!( (childPLV.size() >= parentPLV.size()) && (childPLV.containsAll(parentPLV)) ))
			{
				log.warning (prod.getName() + "": ""  + ""Is not included in all the parent BOM product Price List Versions"");
				return false;	
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;

		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}		
		return true;
	}
"
org.compiere.process.ProjectLinePricing.prepare,ProjectLinePricing.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
		m_C_ProjectLine_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.ProjectLinePricing.doIt,ProjectLinePricing.java,"String doIt() throws Exception
	{
		if (m_C_ProjectLine_ID == 0)
			throw new IllegalArgumentException(""No Project Line"");
		MProjectLine projectLine = new MProjectLine (getCtx(), m_C_ProjectLine_ID, get_TrxName());
		log.info(""doIt - "" + projectLine);
		if (projectLine.getM_Product_ID() == 0)
			throw new IllegalArgumentException(""No Product"");
		//
		MProject project = new MProject (getCtx(), projectLine.getC_Project_ID(), get_TrxName());
		if (project.getM_PriceList_ID() == 0)
			throw new IllegalArgumentException(""No PriceList"");
		//
		boolean isSOTrx = true;
		MProductPricing pp = new MProductPricing (projectLine.getAD_Client_ID(), projectLine.getAD_Org_ID(),
			projectLine.getM_Product_ID(), project.getC_BPartner_ID(), 
			projectLine.getPlannedQty(), isSOTrx);
		pp.setM_PriceList_ID(project.getM_PriceList_ID());
		pp.setPriceDate(project.getDateContract());
		//
		projectLine.setPlannedPrice(pp.getPriceStd());
		projectLine.setPlannedMarginAmt(pp.getPriceStd().subtract(pp.getPriceLimit()));
		projectLine.save();
		//
		String retValue = Msg.getElement(getCtx(), ""PriceList"") + pp.getPriceList() + "" - ""
			+ Msg.getElement(getCtx(), ""PriceStd"") + pp.getPriceStd() + "" - ""
			+ Msg.getElement(getCtx(), ""PriceLimit"") + pp.getPriceLimit();
		return retValue;
	}	//	doIt
"
org.compiere.process.SParameter.prepare,InOutGenerate.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) 
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""M_Warehouse_ID""))
				p_M_Warehouse_ID = element.getParameterAsInt();
			else if (name.equals(""C_BPartner_ID""))
				p_C_BPartner_ID = element.getParameterAsInt();
			else if (name.equals(""DatePromised""))
				p_DatePromised = (Timestamp)element.getParameter();
			else if (name.equals(""Selection""))
				p_Selection = ""Y"".equals(element.getParameter());
			else if (name.equals(""IsUnconfirmedInOut""))
				p_IsUnconfirmedInOut = ""Y"".equals(element.getParameter());
			else if (name.equals(""ConsolidateDocument""))
				p_ConsolidateDocument = ""Y"".equals(element.getParameter());
			else if (name.equals(""DocAction""))
				p_docAction = (String)element.getParameter();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
			
			//	Login Date
			m_movementDate = new Timestamp(getCtx().getContextAsTime(""#Date""));
			//	DocAction check
			if (!DocActionConstants.ACTION_Complete.equals(p_docAction))
				p_docAction = DocActionConstants.ACTION_Prepare;
		}
	}	//	prepare
"
org.compiere.process.SParameter.doIt,InOutGenerate.java,"String doIt () throws Exception
	{
		log.info(""Selection="" + p_Selection
			+ "", M_Warehouse_ID="" + p_M_Warehouse_ID 
			+ "", C_BPartner_ID="" + p_C_BPartner_ID 
			+ "", Consolidate="" + p_ConsolidateDocument
			+ "", IsUnconfirmed="" + p_IsUnconfirmedInOut
			+ "", Movement="" + m_movementDate);
		
		if (p_M_Warehouse_ID == 0)
			throw new CompiereUserException(""@NotFound@ @M_Warehouse_ID@"");
		
		if (p_Selection)	//	VInOutGen
		{
			m_sql = ""SELECT * FROM C_Order ""
				+ ""WHERE IsSelected='Y' AND DocStatus='CO' AND IsSOTrx='Y' AND AD_Client_ID=?"";
		}
		else
		{
			m_sql = ""SELECT * FROM C_Order o ""
				+ ""WHERE DocStatus='CO' AND IsSOTrx='Y'""
				//	No Offer,POS
				+ "" AND o.C_DocType_ID IN (SELECT C_DocType_ID FROM C_DocType ""
					+ ""WHERE DocBaseType='SOO' AND DocSubTypeSO NOT IN ('ON','OB','WR'))""
				+ ""	AND o.IsDropShip='N'""
				//	No Manual
				+ "" AND o.DeliveryRule<>'M'""
				//	Open Order Lines with Warehouse
				+ "" AND EXISTS (SELECT * FROM C_OrderLine ol ""
					+ ""WHERE ol.M_Warehouse_ID=?"";					//	#1
			if (p_DatePromised != null)
				m_sql += "" AND TRUNC(ol.DatePromised,'DD')<=?"";		//	#2
			m_sql += "" AND o.C_Order_ID=ol.C_Order_ID AND ol.QtyOrdered<>ol.QtyDelivered)"";
			//
			if (p_C_BPartner_ID != 0)
				m_sql += "" AND o.C_BPartner_ID=?"";					//	#3
		}
		m_sql += "" ORDER BY M_Warehouse_ID, PriorityRule, M_Shipper_ID, C_BPartner_ID, C_BPartner_Location_ID, C_Order_ID"";
	//	m_sql += "" FOR UPDATE"";

		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (m_sql, get_TrxName());
			int index = 1;
			if (p_Selection)
				pstmt.setInt(index++, getCtx().getAD_Client_ID());
			else	
			{
				pstmt.setInt(index++, p_M_Warehouse_ID);
				if (p_DatePromised != null)
					pstmt.setTimestamp(index++, p_DatePromised);
				if (p_C_BPartner_ID != 0)
					pstmt.setInt(index++, p_C_BPartner_ID);
			}
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, m_sql, e);
		}
		return generate(pstmt);
	}	//	doIt
"
org.compiere.process.SParameter.generate,InOutGenerate.java,"String generate (PreparedStatement pstmt)
	{
		MClient client = MClient.get(getCtx());
		try
		{
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())		//	Order
			{
				MOrder order = new MOrder (getCtx(), rs, get_TrxName());
				//	New Header different Shipper, Shipment Location
				if (!p_ConsolidateDocument 
					|| (m_shipment != null 
					&& (m_shipment.getC_BPartner_Location_ID() != order.getC_BPartner_Location_ID()
						|| m_shipment.getM_Shipper_ID() != order.getM_Shipper_ID() )))
					completeShipment();
				log.fine(""check: "" + order + "" - DeliveryRule="" + order.getDeliveryRule());
				//
				Timestamp minGuaranteeDate = m_movementDate;
				boolean completeOrder = X_C_Order.DELIVERYRULE_CompleteOrder.equals(order.getDeliveryRule());
				//	OrderLine WHERE
				String where = "" AND M_Warehouse_ID="" + p_M_Warehouse_ID;
				if (p_DatePromised != null)
					where += "" AND (TRUNC(DatePromised,'DD')<="" + DB.TO_DATE(p_DatePromised, true)
						+ "" OR DatePromised IS NULL)"";		
				//	Exclude Auto Delivery if not Force
				if (!X_C_Order.DELIVERYRULE_Force.equals(order.getDeliveryRule()))
					where += "" AND (C_OrderLine.M_Product_ID IS NULL""
						+ "" OR EXISTS (SELECT * FROM M_Product p ""
						+ ""WHERE C_OrderLine.M_Product_ID=p.M_Product_ID""
						+ "" AND IsExcludeAutoDelivery='N'))"";
				//	Exclude Unconfirmed
				if (!p_IsUnconfirmedInOut)
					where += "" AND NOT EXISTS (SELECT * FROM M_InOutLine iol""
							+ "" INNER JOIN M_InOut io ON (iol.M_InOut_ID=io.M_InOut_ID) ""
								+ ""WHERE iol.C_OrderLine_ID=C_OrderLine.C_OrderLine_ID AND io.DocStatus IN ('IP','WC'))"";
				//	Deadlock Prevention - Order by M_Product_ID
				MOrderLine[] lines = order.getLines (where, ""ORDER BY C_BPartner_Location_ID, M_Product_ID"");
				for (MOrderLine line : lines) {
					if (line.getM_Warehouse_ID() != p_M_Warehouse_ID)
						continue;
					log.fine(""check: "" + line);
					BigDecimal onHand = Env.ZERO;
					BigDecimal toDeliver = line.getQtyOrdered()
								.subtract(line.getQtyDelivered())
								.subtract(line.getQtyAllocated())
								.subtract(line.getQtyDedicated());
					
					if(toDeliver.signum()<=0)
						continue;
					
					MProduct product = line.getProduct();
					//	Nothing to Deliver
					if (product != null && toDeliver.signum() == 0)
						continue;
					
					//	Check / adjust for confirmations
					BigDecimal unconfirmedShippedQty = Env.ZERO;
					if (p_IsUnconfirmedInOut && product != null && toDeliver.signum() != 0)
					{
						String where2 = ""EXISTS (SELECT * FROM M_InOut io WHERE io.M_InOut_ID=M_InOutLine.M_InOut_ID AND io.DocStatus IN ('IP','WC'))"";
						MInOutLine[] iols = MInOutLine.getOfOrderLine(getCtx(), 
							line.getC_OrderLine_ID(), where2, null);
						for (MInOutLine element : iols)
							unconfirmedShippedQty = unconfirmedShippedQty.add(element.getMovementQty());
						String logInfo = ""Unconfirmed Qty="" + unconfirmedShippedQty 
							+ "" - ToDeliver="" + toDeliver + ""->"";					
						toDeliver = toDeliver.subtract(unconfirmedShippedQty);
						logInfo += toDeliver;
						if (toDeliver.signum() < 0)
						{
							toDeliver = Env.ZERO;
							logInfo += "" (set to 0)"";
						}
						//	Adjust On Hand
						onHand = onHand.subtract(unconfirmedShippedQty);
						log.fine(logInfo);					
					}
					
					//	Comments & lines w/o product & services
					if ((product == null || !product.isStocked())
						&& (line.getQtyOrdered().signum() == 0 	//	comments
							|| toDeliver.signum() != 0))		//	lines w/o product
					{
						if (!X_C_Order.DELIVERYRULE_CompleteOrder
								.equals(order.getDeliveryRule()))	//	printed later
							createLine (order, line, toDeliver, null, false);
						continue;
					}

					//	Stored Product
					MProductCategory pc = MProductCategory.get(order.getCtx(), 
						product.getM_Product_Category_ID());
					String MMPolicy = pc.getMMPolicy();
					if (MMPolicy == null || MMPolicy.length() == 0)
						MMPolicy = client.getMMPolicy();
					//
					Timestamp bpGuaranteeDate = MBPartnerProduct
						.getMinDate(getCtx(), minGuaranteeDate, 
							line.getC_BPartner_ID(), line.getM_Product_ID());
					MStorage[] storages = getStorages(line.getM_Warehouse_ID(), 
						line.getM_Product_ID(), line.getM_AttributeSetInstance_ID(),
						product.getM_AttributeSet_ID(),
						line.getM_AttributeSetInstance_ID()==0, bpGuaranteeDate, 
						X_AD_Client.MMPOLICY_FiFo.equals(MMPolicy)); 
					
					for (MStorage storage : storages) {
						onHand = onHand.add(storage.getQtyOnHand()
											.subtract(storage.getQtyDedicated())
											.subtract(storage.getQtyAllocated()));
					}
					boolean fullLine = onHand.compareTo(toDeliver) >= 0
						|| toDeliver.signum() < 0;
					
					//	Complete Order
					if (completeOrder && !fullLine)
					{
						log.fine(""Failed CompleteOrder - OnHand="" + onHand 
							+ "" (Unconfirmed="" + unconfirmedShippedQty
							+ ""), ToDeliver="" + toDeliver + "" - "" + line);
						completeOrder = false;
						break;
					}
					//	Complete Line
					else if (fullLine && X_C_Order.DELIVERYRULE_CompleteLine
							.equals(order.getDeliveryRule()))
					{
						log.fine(""CompleteLine - OnHand="" + onHand 
							+ "" (Unconfirmed="" + unconfirmedShippedQty
							+ "", ToDeliver="" + toDeliver + "" - "" + line);
						//	
						createLine (order, line, toDeliver, storages, false);
					}
					//	Availability
					else if (X_C_Order.DELIVERYRULE_Availability.equals(order.getDeliveryRule())
						&& (onHand.signum() > 0
							|| toDeliver.signum() < 0))
					{
						BigDecimal deliver = toDeliver;
						if (deliver.compareTo(onHand) > 0)
							deliver = onHand;
						log.fine(""Available - OnHand="" + onHand 
							+ "" (Unconfirmed="" + unconfirmedShippedQty
							+ ""), ToDeliver="" + toDeliver 
							+ "", Delivering="" + deliver + "" - "" + line);
						//	
						createLine (order, line, deliver, storages, false);
					}
					//	Force
					else if (X_C_Order.DELIVERYRULE_Force.equals(order.getDeliveryRule()))
					{
						BigDecimal deliver = toDeliver;
						log.fine(""Force - OnHand="" + onHand 
							+ "" (Unconfirmed="" + unconfirmedShippedQty
							+ ""), ToDeliver="" + toDeliver 
							+ "", Delivering="" + deliver + "" - "" + line);
						//	
						createLine (order, line, deliver, storages, true);
					}
					//	Manual
					else if (X_C_Order.DELIVERYRULE_Manual.equals(order.getDeliveryRule()))
						log.fine(""Manual - OnHand="" + onHand 
							+ "" (Unconfirmed="" + unconfirmedShippedQty
							+ "") - "" + line);
					else
						log.fine(""Failed: "" + order.getDeliveryRule() + "" - OnHand="" + onHand 
							+ "" (Unconfirmed="" + unconfirmedShippedQty
							+ ""), ToDeliver="" + toDeliver + "" - "" + line);
				}	//	for all order lines
				
				//	Complete Order successful
				if (completeOrder && X_C_Order.DELIVERYRULE_CompleteOrder.equals(order.getDeliveryRule()))
				{
					for (MOrderLine line : lines) {
						if (line.getM_Warehouse_ID() != p_M_Warehouse_ID)
							continue;
						MProduct product = line.getProduct();
						BigDecimal toDeliver = line.getQtyOrdered().subtract(line.getQtyDelivered())
													.subtract(line.getQtyDedicated().subtract(line.getQtyAllocated()));
						//
						MStorage[] storages = null;
						if (product != null && product.isStocked())
						{
							MProductCategory pc = MProductCategory.get(order.getCtx(), 
								product.getM_Product_Category_ID());
							String MMPolicy = pc.getMMPolicy();
							if (MMPolicy == null || MMPolicy.length() == 0)
								MMPolicy = client.getMMPolicy();
							//
							Timestamp bpGuaranteeDate = MBPartnerProduct
								.getMinDate(getCtx(), minGuaranteeDate, 
									line.getC_BPartner_ID(), line.getM_Product_ID());
							storages = getStorages(line.getM_Warehouse_ID(), 
								line.getM_Product_ID(), line.getM_AttributeSetInstance_ID(),
								product.getM_AttributeSet_ID(),
								line.getM_AttributeSetInstance_ID()==0, bpGuaranteeDate, 
								X_AD_Client.MMPOLICY_FiFo.equals(MMPolicy));
						}
						//	
						createLine (order, line, toDeliver, storages, false);
					}
				}
				m_line += 1000;
			}	//	while order
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, m_sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		completeShipment();
		return ""@Created@ = "" + m_created;
	}	//	generate
"
org.compiere.process.SParameter.createLine,InOutGenerate.java,"void createLine (MOrder order, MOrderLine orderLine, BigDecimal qty, 
		MStorage[] storages, boolean force)
	{
		//	Complete last Shipment - can have multiple shipments
		if (m_lastC_BPartner_Location_ID != orderLine.getC_BPartner_Location_ID() )
			completeShipment();
		m_lastC_BPartner_Location_ID = orderLine.getC_BPartner_Location_ID();
		//	Create New Shipment
		if (m_shipment == null)
		{
			m_shipment = new MInOut (order, 0, m_movementDate);
			m_shipment.setM_Warehouse_ID(orderLine.getM_Warehouse_ID());	//	sets Org too
			if (order.getC_BPartner_ID() != orderLine.getC_BPartner_ID())
				m_shipment.setC_BPartner_ID(orderLine.getC_BPartner_ID());
			if (order.getC_BPartner_Location_ID() != orderLine.getC_BPartner_Location_ID())
				m_shipment.setC_BPartner_Location_ID(orderLine.getC_BPartner_Location_ID());
			if (!m_shipment.save())
				throw new IllegalStateException(""Could not create Shipment"");
		}
		//	Non Inventory Lines
		if (storages == null)
		{
			MInOutLine line = new MInOutLine (m_shipment);
			line.setOrderLine(orderLine, 0, Env.ZERO);
			line.setQty(qty);	//	Correct UOM
			if (orderLine.getQtyEntered().compareTo(orderLine.getQtyOrdered()) != 0)
				line.setQtyEntered(qty
					.multiply(orderLine.getQtyEntered())
					.divide(orderLine.getQtyOrdered(), 12, BigDecimal.ROUND_HALF_UP));
			line.setLine(m_line + orderLine.getLine());
			if (!line.save())
				throw new IllegalStateException(""Could not create Shipment Line"");
			log.fine(line.toString());
			return;
		}
		
		//	Product
		MProduct product = orderLine.getProduct();
		boolean linePerASI = false;
		if (product.getM_AttributeSet_ID() != 0)
		{
			MAttributeSet mas = MAttributeSet.get(getCtx(), product.getM_AttributeSet_ID());
			linePerASI = mas.isInstanceAttribute();
		}
		
		//	Inventory Lines
		ArrayList<MInOutLine> list = new ArrayList<MInOutLine>();
		BigDecimal toDeliver = qty;
		for (MStorage storage : storages) {
			BigDecimal deliver = toDeliver;
			BigDecimal qtyAvailable = storage.getQtyOnHand().subtract(
					storage.getQtyDedicated()).subtract(
					storage.getQtyAllocated());
			if(qtyAvailable.compareTo(Env.ZERO) <= 0)
				continue;

			//	Not enough On Hand
			if (deliver.compareTo(qtyAvailable) > 0) 
			{
					deliver = qtyAvailable;
			}
			
			if (deliver.signum() == 0 || (storage.getQtyOnHand().signum() <= 0 ))	//	zero deliver
				continue;
			
			int M_Locator_ID = storage.getM_Locator_ID();
			//
			MInOutLine line = null;
			if (!linePerASI)	//	find line with Locator
			{
				for (int ll = 0; ll < list.size(); ll++)
				{
					MInOutLine test = list.get(ll);
					if (test.getM_Locator_ID() == M_Locator_ID)
					{
						line = test;
						break;
					}
				}
			}
			if (line == null)	//	new line
			{
				line = new MInOutLine (m_shipment);
				line.setOrderLine(orderLine, M_Locator_ID, order.isSOTrx() ? deliver : Env.ZERO);
				line.setQty(deliver);
				list.add(line);
			}
			else				//	existing line
				line.setQty(line.getMovementQty().add(deliver));
			if (orderLine.getQtyEntered().compareTo(orderLine.getQtyOrdered()) != 0)
				line.setQtyEntered(line.getMovementQty().multiply(orderLine.getQtyEntered())
					.divide(orderLine.getQtyOrdered(), 12, BigDecimal.ROUND_HALF_UP));
			line.setLine(m_line + orderLine.getLine());
			if (linePerASI)
				line.setM_AttributeSetInstance_ID(storage.getM_AttributeSetInstance_ID());
			if (!line.save())
				throw new IllegalStateException(""Could not create Shipment Line"");
			log.fine(""ToDeliver="" + qty + ""/"" + deliver + "" - "" + line);
			toDeliver = toDeliver.subtract(deliver);
			//	Temp adjustment
			storage.setQtyOnHand(storage.getQtyOnHand().subtract(deliver));
			//
			if (toDeliver.signum() == 0)
				break;
		}		

		// Force remaining quantity to negative for Delivery Rule of Force
		if (force && toDeliver.signum() != 0)
		{
			BigDecimal deliver = toDeliver;
			int M_Locator_ID = storages[0].getM_Locator_ID();
			if (M_Locator_ID == 0)		//	Get default Location
			{
				int M_Warehouse_ID = orderLine.getM_Warehouse_ID();
				M_Locator_ID = MProductLocator.getFirstM_Locator_ID (product, M_Warehouse_ID);
				if (M_Locator_ID == 0)
				{
					MWarehouse wh = MWarehouse.get (getCtx(), M_Warehouse_ID);
					M_Locator_ID = wh.getDefaultM_Locator_ID();
				}
			}
			//
			MInOutLine line = null;
			if (!linePerASI)	//	find line with Locator
			{
				for (int ll = 0; ll < list.size(); ll++)
				{
					MInOutLine test = list.get(ll);
					if (test.getM_Locator_ID() == M_Locator_ID)
					{
						line = test;
						break;
					}
				}
			}
			if (line == null)	//	new line
			{
				line = new MInOutLine (m_shipment);
				line.setOrderLine(orderLine, M_Locator_ID, order.isSOTrx() ? deliver : Env.ZERO);
				line.setQty(deliver);
				list.add(line);
			}
			else				//	existing line
				line.setQty(line.getMovementQty().add(deliver));
			if (orderLine.getQtyEntered().compareTo(orderLine.getQtyOrdered()) != 0)
				line.setQtyEntered(line.getMovementQty().multiply(orderLine.getQtyEntered())
					.divide(orderLine.getQtyOrdered(), 12, BigDecimal.ROUND_HALF_UP));
			line.setLine(m_line+orderLine.getLine());
			if (!line.save())
				throw new IllegalStateException(""Could not create Shipment Line"");

		}

		if (toDeliver.signum() != 0)
			throw new IllegalStateException(""Not All Delivered - Remainder="" + toDeliver);
	}	//	createLine
"
org.compiere.process.SParameter.getStorages,InOutGenerate.java,"MStorage[] getStorages(int M_Warehouse_ID, 
		int M_Product_ID, int M_AttributeSetInstance_ID, int M_AttributeSet_ID,
		boolean allAttributeInstances, Timestamp minGuaranteeDate,
		boolean FiFo)
	{
		m_lastPP = new SParameter(M_Warehouse_ID, 
			M_Product_ID, M_AttributeSetInstance_ID, M_AttributeSet_ID,
			allAttributeInstances, minGuaranteeDate, FiFo);
		//
		m_lastStorages = m_map.get(m_lastPP); 
		
		if (m_lastStorages == null)
		{
			m_lastStorages = MStorage.getWarehouse(getCtx(), 
				M_Warehouse_ID, M_Product_ID, M_AttributeSetInstance_ID,
				M_AttributeSet_ID, allAttributeInstances, minGuaranteeDate, 
				FiFo, get_TrxName());
			m_map.put(m_lastPP, m_lastStorages);
		}
		return m_lastStorages;
	}	//	getStorages
"
org.compiere.process.SParameter.completeShipment,InOutGenerate.java,"void completeShipment()
	{
		if (m_shipment != null)
		{
			//	Fails if there is a confirmation
			boolean processOK = m_shipment.processIt(p_docAction);
			m_shipment.save();
			//
			if (processOK)
				addLog(m_shipment.getM_InOut_ID(), m_shipment.getMovementDate(), null, m_shipment.getDocumentNo());
			else
			{
				log.warning(""Failed: "" + m_shipment);
				String msg = Msg.getMsg(getCtx(), ""Error"") + "" "" + m_shipment.getDocumentNo();
				addLog(m_shipment.getM_InOut_ID(), m_shipment.getMovementDate(), null, msg);
			}
			m_created++;
			m_map = new HashMap<SParameter,MStorage[]>();
			if (m_lastPP != null && m_lastStorages != null)
				m_map.put(m_lastPP, m_lastStorages);
		}
		m_shipment = null;
		m_line = 0;
	}	//	completeOrder
"
org.compiere.process.SParameter.equals,InOutGenerate.java,"boolean equals (Object obj)
		{
			if (obj != null && obj instanceof SParameter)
			{
				SParameter cmp = (SParameter)obj;
				boolean eq = cmp.M_Warehouse_ID == M_Warehouse_ID
					&& cmp.M_Product_ID == M_Product_ID
					&& cmp.M_AttributeSetInstance_ID == M_AttributeSetInstance_ID
					&& cmp.M_AttributeSet_ID == M_AttributeSet_ID
					&& cmp.allAttributeInstances == allAttributeInstances
					&& cmp.FiFo == FiFo;
				if (eq)
				{
					if (cmp.minGuaranteeDate == null && minGuaranteeDate == null)
						;
					else if (cmp.minGuaranteeDate != null && minGuaranteeDate != null
						&& cmp.minGuaranteeDate.equals(minGuaranteeDate))
						;
					else
						eq = false;
				}
				return eq;
			}
			return false;
		}	//	equals
"
org.compiere.process.SParameter.hashCode,InOutGenerate.java,"int hashCode ()
		{
			long hash = M_Warehouse_ID
				+ (M_Product_ID * 2)
				+ (M_AttributeSetInstance_ID * 3)
				+ (M_AttributeSet_ID * 4);

			if (allAttributeInstances)
				hash *= -1;
			if (FiFo)	
				hash *= -2;
			if (hash < 0)
				hash = -hash + 7;
			while (hash > Integer.MAX_VALUE)
				hash -= Integer.MAX_VALUE;
			//
			if (minGuaranteeDate != null)
			{
				hash += minGuaranteeDate.hashCode();
				while (hash > Integer.MAX_VALUE)
					hash -= Integer.MAX_VALUE;
			}
				
			return (int)hash;
		}	//	hashCode
"
org.compiere.process.ImportInventory.prepare,ImportInventory.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) 
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_Client_ID""))
				p_AD_Client_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""AD_Org_ID""))
				p_AD_Org_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""M_Locator_ID""))
				p_M_Locator_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""MovementDate""))
				p_MovementDate = (Timestamp)element.getParameter();
			else if (name.equals(""DeleteOldImported""))
				p_DeleteOldImported = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.ImportInventory.doIt,ImportInventory.java,"String doIt() throws java.lang.Exception
	{
		log.info(""M_Locator_ID="" + p_M_Locator_ID + "",MovementDate="" + p_MovementDate);
		//
		StringBuffer sql = null;
		int no = 0;
		String clientCheck = "" AND AD_Client_ID="" + p_AD_Client_ID;

		//	****	Prepare	****

		//	Delete Old Imported
		if (p_DeleteOldImported)
		{
			sql = new StringBuffer (""DELETE FROM I_Inventory ""
				  + ""WHERE I_IsImported='Y'"").append (clientCheck);
			no = DB.executeUpdate (sql.toString (), get_TrxName());
			log.fine(""Delete Old Impored ="" + no);
		}

		//	Set Client, Org, Location, IsActive, Created/Updated
		sql = new StringBuffer (""UPDATE I_Inventory ""
			  + ""SET AD_Client_ID = COALESCE (AD_Client_ID,"").append (p_AD_Client_ID).append (""),""
			  + "" AD_Org_ID = COALESCE (AD_Org_ID,"").append (p_AD_Org_ID).append (""),"");
		if (p_MovementDate != null)
			sql.append("" MovementDate = COALESCE (MovementDate,"").append (DB.TO_DATE(p_MovementDate)).append (""),"");
		sql.append("" IsActive = COALESCE (IsActive, 'Y'),""
			  + "" Created = COALESCE (Created, SysDate),""
			  + "" CreatedBy = COALESCE (CreatedBy, 0),""
			  + "" Updated = COALESCE (Updated, SysDate),""
			  + "" UpdatedBy = COALESCE (UpdatedBy, 0),""
			  + "" I_ErrorMsg = NULL,""
			  + "" M_Warehouse_ID = NULL,""	//	reset
			  + "" I_IsImported = 'N' ""
			  + ""WHERE I_IsImported<>'Y' OR I_IsImported IS NULL"");
		no = DB.executeUpdate (sql.toString (), get_TrxName());
		log.info (""Reset="" + no);

		String ts = DB.isPostgreSQL()?""COALESCE(I_ErrorMsg,'')"":""I_ErrorMsg"";  //java bug, it could not be used directly
		sql = new StringBuffer (""UPDATE I_Inventory o ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Org, '""
			+ ""WHERE (AD_Org_ID IS NULL OR AD_Org_ID=0""
			+ "" OR EXISTS (SELECT * FROM AD_Org oo WHERE o.AD_Org_ID=oo.AD_Org_ID AND (oo.IsSummary='Y' OR oo.IsActive='N')))""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate (sql.toString (), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Org="" + no);

		// gwu: bug 1703137
		// if Warehouse key provided, get Warehouse ID
		sql = new StringBuffer (""UPDATE I_Inventory i ""
				+ ""SET M_Warehouse_ID=(SELECT MAX(M_Warehouse_ID) FROM M_Warehouse w""
				+ "" WHERE i.WarehouseValue=w.Value AND i.AD_Client_ID=w.AD_Client_ID) ""
				+ ""WHERE M_Warehouse_ID IS NULL AND WarehouseValue IS NOT NULL""
				+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate (sql.toString (), get_TrxName());
		log.fine(""Set Warehouse from Value ="" + no);
		
		//	Location
		sql = new StringBuffer (""UPDATE I_Inventory i ""
			+ ""SET M_Locator_ID=(SELECT MAX(M_Locator_ID) FROM M_Locator l""
			+ "" WHERE i.LocatorValue=l.Value AND COALESCE (i.M_Warehouse_ID, l.M_Warehouse_ID)=l.M_Warehouse_ID AND i.AD_Client_ID=l.AD_Client_ID) ""
			+ ""WHERE M_Locator_ID IS NULL AND LocatorValue IS NOT NULL""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate (sql.toString (), get_TrxName());
		log.fine(""Set Locator from Value ="" + no);
		sql = new StringBuffer (""UPDATE I_Inventory i ""
			+ ""SET M_Locator_ID=(SELECT MAX(M_Locator_ID) FROM M_Locator l""
			+ "" WHERE i.X=l.X AND i.Y=l.Y AND i.Z=l.Z ""
			+ "" AND (i.Bin IS NULL OR i.Bin = l.Bin) ""
			+ "" AND (i.Position IS NULL OR i.Position =l.Position) ""
			+ "" AND COALESCE (i.M_Warehouse_ID, l.M_Warehouse_ID)=l.M_Warehouse_ID AND i.AD_Client_ID=l.AD_Client_ID) ""
			+ ""WHERE M_Locator_ID IS NULL AND X IS NOT NULL AND Y IS NOT NULL AND Z IS NOT NULL""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate (sql.toString (), get_TrxName());
		log.fine(""Set Locator from X,Y,Z ="" + no);
		if (p_M_Locator_ID != 0)
		{
			sql = new StringBuffer (""UPDATE I_Inventory ""
				+ ""SET M_Locator_ID = "").append (p_M_Locator_ID).append (
				"" WHERE M_Locator_ID IS NULL""
				+ "" AND I_IsImported<>'Y'"").append (clientCheck);
			no = DB.executeUpdate (sql.toString (), get_TrxName());
			log.fine(""Set Locator from Parameter="" + no);
		}
		
		sql = new StringBuffer (""UPDATE I_Inventory ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=No Location, ' ""
			+ ""WHERE M_Locator_ID IS NULL""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate (sql.toString (), get_TrxName());
		if (no != 0)
			log.warning (""No Location="" + no);

		sql = new StringBuffer ( ""UPDATE I_Inventory I "" +
				"" SET M_Locator_ID = NULL, "" +
				"" I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Locator, '"" + 
				"" WHERE M_Locator_ID IS NOT NULL "" +
				"" AND NOT EXISTS ( SELECT 1 FROM M_Locator lc"" +
				"" WHERE lc.M_Locator_ID = I.M_Locator_ID "" +
				"" AND lc.M_Warehouse_ID = I.M_Warehouse_ID)"");
		no = DB.executeUpdate (sql.toString (), get_TrxName());
		log.fine(""Invalid Locators ="" + no);
			
		//	Set M_Warehouse_ID 
		sql = new StringBuffer (""UPDATE I_Inventory i ""
			+ ""SET M_Warehouse_ID=(SELECT M_Warehouse_ID FROM M_Locator l WHERE i.M_Locator_ID=l.M_Locator_ID) ""
			+ ""WHERE M_Locator_ID IS NOT NULL""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate (sql.toString (), get_TrxName());
		log.fine(""Set Warehouse from Locator ="" + no);
		sql = new StringBuffer (""UPDATE I_Inventory ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=No Warehouse, ' ""
			+ ""WHERE M_Warehouse_ID IS NULL""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate (sql.toString (), get_TrxName());
		if (no != 0)
			log.warning (""No Warehouse="" + no);


		//	Product
		sql = new StringBuffer (""UPDATE I_Inventory i ""
			  + ""SET M_Product_ID=(SELECT MAX(M_Product_ID) FROM M_Product p""
			  + "" WHERE i.Value=p.Value AND i.AD_Client_ID=p.AD_Client_ID) ""
			  + ""WHERE M_Product_ID IS NULL AND Value IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate (sql.toString (), get_TrxName());
		log.fine(""Set Product from Value="" + no);
		sql = new StringBuffer (""UPDATE I_Inventory i ""
			  + ""SET M_Product_ID=(SELECT MAX(M_Product_ID) FROM M_Product p""
			  + "" WHERE i.UPC=p.UPC AND i.AD_Client_ID=p.AD_Client_ID) ""
			  + ""WHERE M_Product_ID IS NULL AND UPC IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate (sql.toString (), get_TrxName());
		log.fine(""Set Product from UPC="" + no);
		sql = new StringBuffer (""UPDATE I_Inventory ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=No Product, ' ""
			+ ""WHERE M_Product_ID IS NULL""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate (sql.toString (), get_TrxName());
		if (no != 0)
			log.warning (""No Product="" + no);

		//	No QtyCount
		sql = new StringBuffer (""UPDATE I_Inventory ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=No Qty Count, ' ""
			+ ""WHERE QtyCount IS NULL""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate (sql.toString (), get_TrxName());
		if (no != 0)
			log.warning (""No QtyCount="" + no);

		commit();
		
		/*********************************************************************/

		MInventory inventory = null;

		int noInsert = 0;
		int noInsertLine = 0;

		//	Go through Inventory Records
		sql = new StringBuffer (""SELECT * FROM I_Inventory ""
			+ ""WHERE I_IsImported='N'"").append (clientCheck)
			.append("" ORDER BY M_Warehouse_ID, TRUNC(MovementDate,'DD'), I_Inventory_ID"");
		try
		{
			PreparedStatement pstmt = DB.prepareStatement (sql.toString (), get_TrxName());
			ResultSet rs = pstmt.executeQuery ();
			//
			int x_M_Warehouse_ID = -1;
			Timestamp x_MovementDate = null;
			while (rs.next())
			{
				X_I_Inventory imp = new X_I_Inventory (getCtx (), rs, get_TrxName());
				Timestamp MovementDate = TimeUtil.getDay(imp.getMovementDate());

				if (inventory == null
					|| imp.getM_Warehouse_ID() != x_M_Warehouse_ID
					|| !MovementDate.equals(x_MovementDate))
				{
					inventory = new MInventory (getCtx(), 0, get_TrxName());
					inventory.setClientOrg(imp.getAD_Client_ID(), imp.getAD_Org_ID());
					inventory.setDescription(""I "" + imp.getM_Warehouse_ID() + "" "" + MovementDate);
					inventory.setM_Warehouse_ID(imp.getM_Warehouse_ID());
					inventory.setMovementDate(MovementDate);
					//
					if (!inventory.save())
					{
						log.log(Level.SEVERE, ""Inventory not saved"");
						break;
					}
					x_M_Warehouse_ID = imp.getM_Warehouse_ID();
					x_MovementDate = MovementDate;
					noInsert++;
				}

				//	Line
				int M_AttributeSetInstance_ID = 0;
				if (imp.getLot() != null || imp.getSerNo() != null)
				{
					MProduct product = MProduct.get(getCtx(), imp.getM_Product_ID());
					if (product.isInstanceAttribute())
					{
						MAttributeSet mas = product.getAttributeSet();
						MAttributeSetInstance masi = new MAttributeSetInstance(getCtx(), 0, mas.getM_AttributeSet_ID(), get_TrxName());
						if (mas.isLot() && imp.getLot() != null)
							masi.setLot(imp.getLot(), imp.getM_Product_ID());
						if (mas.isSerNo() && imp.getSerNo() != null)
							masi.setSerNo(imp.getSerNo());
						masi.setDescription();
						masi.save();
						M_AttributeSetInstance_ID = masi.getM_AttributeSetInstance_ID();
					}
				}
				MInventoryLine line = new MInventoryLine (inventory, 
					imp.getM_Locator_ID(), imp.getM_Product_ID(), M_AttributeSetInstance_ID,
					imp.getQtyBook(), imp.getQtyCount());
				if (line.save())
				{
					imp.setI_IsImported(X_I_Inventory.I_ISIMPORTED_Yes);
					imp.setM_Inventory_ID(line.getM_Inventory_ID());
					imp.setM_InventoryLine_ID(line.getM_InventoryLine_ID());
					imp.setProcessed(true);
					if (imp.save())
						noInsertLine++;
				}
			}
			rs.close();
			pstmt.close();
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql.toString(), e);
		}

		//	Set Error to indicator to not imported
		sql = new StringBuffer (""UPDATE I_Inventory ""
			+ ""SET I_IsImported='N', Updated=SysDate ""
			+ ""WHERE I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		addLog (0, null, new BigDecimal (no), ""@Errors@"");
		//
		addLog (0, null, new BigDecimal (noInsert), ""@M_Inventory_ID@: @Inserted@"");
		addLog (0, null, new BigDecimal (noInsertLine), ""@M_InventoryLine_ID@: @Inserted@"");
		return """";
	}	//	doIt
"
org.compiere.process.RfQResponseCComplete.prepare,RfQResponseCComplete.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_C_RfQResponse_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.RfQResponseCComplete.doIt,RfQResponseCComplete.java,"String doIt() throws Exception
	{
		MRfQResponse response = new MRfQResponse (getCtx(), p_C_RfQResponse_ID, get_TrxName());
		log.info(""doIt - "" + response);
		//
		String error = response.checkComplete();
		if (error != null && error.length() > 0)
			throw new Exception (error);
		//
		response.save();
		return ""OK"";
	}	//	doIt
"
org.compiere.process.RequisitionPOCreate.prepare,RequisitionPOCreate.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_Org_ID""))
				p_AD_Org_ID = element.getParameterAsInt();
			else if (name.equals(""M_Warehouse_ID""))
				p_M_Warehouse_ID = element.getParameterAsInt();
			else if (name.equals(""DateDoc""))
			{
				p_DateDoc_From = (Timestamp)element.getParameter();
				p_DateDoc_To = (Timestamp)element.getParameter_To();
			}
			else if (name.equals(""DateRequired""))
			{
				p_DateRequired_From = (Timestamp)element.getParameter();
				p_DateRequired_To = (Timestamp)element.getParameter_To();
			}
			else if (name.equals(""PriorityRule""))
				p_PriorityRule = (String)element.getParameter();
			else if (name.equals(""AD_User_ID""))
				p_AD_User_ID = element.getParameterAsInt();
			else if (name.equals(""M_Product_ID""))
				p_M_Product_ID = element.getParameterAsInt();
			else if (name.equals(""M_Requisition_ID""))
				p_M_Requisition_ID = element.getParameterAsInt();
			else if (name.equals(""ConsolidateDocument""))
				p_ConsolidateDocument = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.RequisitionPOCreate.doIt,RequisitionPOCreate.java,"String doIt() throws Exception
	{
		//	Specific
		if (p_M_Requisition_ID != 0)
		{
			log.info(""M_Requisition_ID="" + p_M_Requisition_ID);
			MRequisition req = new MRequisition(getCtx(), p_M_Requisition_ID, get_TrxName());
			if (!X_M_Requisition.DOCSTATUS_Completed.equals(req.getDocStatus()))
				throw new CompiereUserException(""@DocStatus@ = "" + req.getDocStatus());
			MRequisitionLine[] lines = req.getLines(true);
			for (MRequisitionLine element : lines) {
				if (element.getC_OrderLine_ID() == 0)
					process (element);
			}
			closeOrder();
			return """";
		}	//	single Requisition

		//
		log.info(""AD_Org_ID="" + p_AD_Org_ID
			+ "", M_Warehouse_ID="" + p_M_Warehouse_ID
			+ "", DateDoc="" + p_DateDoc_From + ""/"" + p_DateDoc_To
			+ "", DateRequired="" + p_DateRequired_From + ""/"" + p_DateRequired_To
			+ "", PriorityRule="" + p_PriorityRule
			+ "", AD_User_ID="" + p_AD_User_ID
			+ "", M_Product_ID="" + p_M_Product_ID
			+ "", ConsolidateDocument"" + p_ConsolidateDocument);

		StringBuffer sql = new StringBuffer(""SELECT * FROM M_RequisitionLine rl "")
			.append(""WHERE rl.C_OrderLine_ID IS NULL"");
		if (p_AD_Org_ID != 0)
			sql.append("" AND AD_Org_ID=?"");
		if (p_M_Product_ID != 0)
			sql.append("" AND M_Product_ID=?"");
		//	Requisition Header
		sql.append("" AND EXISTS (SELECT * FROM M_Requisition r WHERE rl.M_Requisition_ID=r.M_Requisition_ID"")
			.append("" AND r.DocStatus='CO'"");
		if (p_M_Warehouse_ID != 0)
			sql.append("" AND r.M_Warehouse_ID=?"");
		//
		if ((p_DateDoc_From != null) && (p_DateDoc_To != null))
			sql.append("" AND r.DateDoc BETWEEN ? AND ?"");
		else if (p_DateDoc_From != null)
			sql.append("" AND r.DateDoc => ?"");
		else if (p_DateDoc_To != null)
			sql.append("" AND r.DateDoc <= ?"");
		//
		if ((p_DateRequired_From != null) && (p_DateRequired_To != null))
			sql.append("" AND r.DateRequired BETWEEN ? AND ?"");
		else if (p_DateRequired_From != null)
			sql.append("" AND r.DateRequired => ?"");
		else if (p_DateRequired_To != null)
			sql.append("" AND r.DateRequired <= ?"");
		//
		if (p_PriorityRule != null)
			sql.append("" AND r.PriorityRule => ?"");
		if (p_AD_User_ID != 0)
			sql.append("" AND r.AD_User_ID=?"");
		//
		sql.append("") ORDER BY "");
		if (!p_ConsolidateDocument)
			sql.append(""M_Requisition_ID, "");
		sql.append(""M_Product_ID, C_Charge_ID, M_AttributeSetInstance_ID"");

		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql.toString(), get_TrxName());
			int index = 1;
			if (p_AD_Org_ID != 0)
				pstmt.setInt (index++, p_AD_Org_ID);
			if (p_M_Product_ID != 0)
				pstmt.setInt (index++, p_M_Product_ID);
			if (p_M_Warehouse_ID != 0)
				pstmt.setInt (index++, p_M_Warehouse_ID);
			if ((p_DateDoc_From != null) && (p_DateDoc_To != null))
			{
				pstmt.setTimestamp(index++, p_DateDoc_From);
				pstmt.setTimestamp(index++, p_DateDoc_To);
			}
			else if (p_DateDoc_From != null)
				pstmt.setTimestamp(index++, p_DateDoc_From);
			else if (p_DateDoc_To != null)
				pstmt.setTimestamp(index++, p_DateDoc_To);
			if ((p_DateRequired_From != null) && (p_DateRequired_To != null))
			{
				pstmt.setTimestamp(index++, p_DateRequired_From);
				pstmt.setTimestamp(index++, p_DateRequired_To);
			}
			else if (p_DateRequired_From != null)
				pstmt.setTimestamp(index++, p_DateRequired_From);
			else if (p_DateRequired_To != null)
				pstmt.setTimestamp(index++, p_DateRequired_To);
			if (p_PriorityRule != null)
				pstmt.setString(index++, p_PriorityRule);
			if (p_AD_User_ID != 0)
				pstmt.setInt (index++, p_AD_User_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				process (new MRequisitionLine (getCtx(), rs, get_TrxName()));
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql.toString(), e);
		}
		finally{
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		}
		closeOrder();
		return """";
	}	//	doit
"
org.compiere.process.RequisitionPOCreate.process,RequisitionPOCreate.java,"void process (MRequisitionLine rLine) throws Exception
	{
		if ((rLine.getM_Product_ID() == 0) && (rLine.getC_Charge_ID() == 0))
		{
			log.warning(""Ignored Line"" + rLine.getLine()
				+ "" "" + rLine.getDescription()
				+ "" - "" + rLine.getLineNetAmt());
			return;
		}

		if (!p_ConsolidateDocument
			&& (rLine.getM_Requisition_ID() != m_M_Requisition_ID))
			closeOrder();
		if ((m_orderLine == null)
			|| (rLine.getM_Product_ID() != m_M_Product_ID)
			|| (rLine.getM_AttributeSetInstance_ID() != m_M_AttributeSetInstance_ID)
			|| (rLine.getC_Charge_ID() != 0))		//	single line per charge
			newLine(rLine);

		//	Update Order Line
		m_orderLine.setQty(m_orderLine.getQtyOrdered().add(rLine.getQty()));
		//	Update Requisition Line
		rLine.setC_OrderLine_ID(m_orderLine.getC_OrderLine_ID());
		if (!rLine.save())
			throw new CompiereSystemException(""Cannot update Request Line"");
	}	//	process
"
org.compiere.process.RequisitionPOCreate.newOrder,RequisitionPOCreate.java,"void newOrder(MRequisitionLine rLine, int C_BPartner_ID) throws Exception
	{
		if (m_order != null)
			closeOrder();
		//	BPartner
		if ((m_bpartner == null) || (C_BPartner_ID != m_bpartner.getC_BPartner_ID()))
			m_bpartner = new MBPartner (getCtx(), C_BPartner_ID, null);

		//	Order
		m_order = new MOrder(getCtx(), 0, get_TrxName());
		m_order.setIsSOTrx(false);
		m_order.setC_DocTypeTarget_ID();
		m_order.setBPartner(m_bpartner);
		//	default po document type
		if (!p_ConsolidateDocument)
			m_order.setDescription(Msg.getElement(getCtx(), ""M_Requisition_ID"")
				+ "": "" + rLine.getParent().getDocumentNo());

		//	Prepare Save
		m_M_Requisition_ID = rLine.getM_Requisition_ID();
		if (!m_order.save())
			throw new CompiereSystemException(""Cannot save Order"");
	}	//	newOrder
"
org.compiere.process.RequisitionPOCreate.closeOrder,RequisitionPOCreate.java,"void closeOrder() throws Exception
	{
		closeOrderLine();
		if (m_order != null)
		{
			m_order.load(get_TrxName());
			addLog(0, null, m_order.getGrandTotal(), m_order.getDocumentNo());
		}
		m_order = null;
	}	//	closeOrder
"
org.compiere.process.RequisitionPOCreate.closeOrderLine,RequisitionPOCreate.java,"void closeOrderLine() throws CompiereSystemException {
		if (m_orderLine != null)
		{
			if (!m_orderLine.save() || !m_orderLine.updateHeaderTax())
				throw new CompiereSystemException(""Cannot update Order Line"");
		}
		m_orderLine = null;
	}
"
org.compiere.process.RequisitionPOCreate.newLine,RequisitionPOCreate.java,"void newLine(MRequisitionLine rLine) throws Exception
	{
		closeOrderLine();
		MProduct product = null;

		//	Get Business Partner
		int C_BPartner_ID = rLine.getC_BPartner_ID();
		if (C_BPartner_ID != 0)
			;
		else if (rLine.getC_Charge_ID() != 0)
		{
			MCharge charge = MCharge.get(getCtx(), rLine.getC_Charge_ID());
			C_BPartner_ID = charge.getC_BPartner_ID();
			if (C_BPartner_ID == 0)
				throw new CompiereUserException(""No Vendor for Charge "" + charge.getName());
		}
		else
		{
			//	Find Vendor from Produt
			product = MProduct.get(getCtx(), rLine.getM_Product_ID());
			MProductPO[] ppos = MProductPO.getOfProduct(getCtx(), product.getM_Product_ID(), null);
			for (MProductPO element : ppos) {
				if (element.isCurrentVendor() && (element.getC_BPartner_ID() != 0))
				{
					C_BPartner_ID = element.getC_BPartner_ID();
					break;
				}
			}
			if ((C_BPartner_ID == 0) && (ppos.length > 0))
				C_BPartner_ID = ppos[0].getC_BPartner_ID();
			if (C_BPartner_ID == 0)
				throw new CompiereUserException(""No Vendor for "" + product.getName());
		}

		//	New Order - Different Vendor
		if ((m_order == null)
			|| (m_order.getC_BPartner_ID() != C_BPartner_ID))
			newOrder(rLine, C_BPartner_ID);


		//	No Order Line
		m_orderLine = new MOrderLine(m_order);
		if (product != null)
		{
			m_orderLine.setProduct(product);
			m_orderLine.setM_AttributeSetInstance_ID(rLine.getM_AttributeSetInstance_ID());
		}
		else
		{
			m_orderLine.setC_Charge_ID(rLine.getC_Charge_ID());
			m_orderLine.setPriceActual(rLine.getPriceActual());
		}
		m_orderLine.setAD_Org_ID(rLine.getAD_Org_ID());


		//	Prepare Save
		m_M_Product_ID = rLine.getM_Product_ID();
		m_M_AttributeSetInstance_ID = rLine.getM_AttributeSetInstance_ID();
		if (!m_orderLine.save() || !m_orderLine.updateHeaderTax())
			throw new CompiereSystemException(""Cannot save Order Line"");
	}	//	newLine
"
org.compiere.process.InvoicePayScheduleValidate.prepare,InvoicePayScheduleValidate.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.InvoicePayScheduleValidate.doIt,InvoicePayScheduleValidate.java,"String doIt() throws Exception
	{
		log.info (""C_InvoicePaySchedule_ID="" + getRecord_ID());
		MInvoicePaySchedule[] schedule = MInvoicePaySchedule.getInvoicePaySchedule
			(getCtx(), 0, getRecord_ID(), null);
		if (schedule.length == 0)
			throw new IllegalArgumentException(""InvoicePayScheduleValidate - No Schedule"");
		//	Get Invoice
		MInvoice invoice = new MInvoice (getCtx(), schedule[0].getC_Invoice_ID(), null);
		if (invoice.get_ID() == 0)
			throw new IllegalArgumentException(""InvoicePayScheduleValidate - No Invoice"");
		//
		BigDecimal total = Env.ZERO;
		for (MInvoicePaySchedule element : schedule) {
			BigDecimal due = element.getDueAmt();
			if (due != null)
				total = total.add(due);
		}
		boolean valid = invoice.getGrandTotal().compareTo(total) == 0;
		invoice.setIsPayScheduleValid(valid);
		invoice.save();
		//	Schedule
		for (MInvoicePaySchedule element : schedule) {
			if (element.isValid() != valid)
			{
				element.setIsValid(valid);
				element.save();				
			}
		}
		String msg = ""@OK@"";
		if (!valid)
			msg = ""@GrandTotal@ = "" + invoice.getGrandTotal() 
				+ "" <> @Total@ = "" + total 
				+ ""  - @Difference@ = "" + invoice.getGrandTotal().subtract(total); 
		return Msg.parseTranslation(getCtx(), msg);
	}	//	doIt
"
org.compiere.process.BPartnerOrgLink.prepare,BPartnerOrgLink.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_Org_ID""))
				p_AD_Org_ID = element.getParameterAsInt();
			else if (name.equals(""AD_OrgType_ID""))
				p_AD_OrgType_ID = element.getParameterAsInt();
			else if (name.equals(""AD_Role_ID""))
				p_AD_Role_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_C_BPartner_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.BPartnerOrgLink.doIt,BPartnerOrgLink.java,"String doIt() throws Exception
	{
		log.info(""C_BPartner_ID="" + p_C_BPartner_ID 
			+ "", AD_Org_ID="" + p_AD_Org_ID
			+ "", AD_OrgType_ID="" + p_AD_OrgType_ID
			+ "", AD_Role_ID="" + p_AD_Role_ID);
		if (p_C_BPartner_ID == 0)
			throw new CompiereUserException (""No Business Partner ID"");
		MBPartner bp = new MBPartner (getCtx(), p_C_BPartner_ID, get_TrxName());
		if (bp.get_ID() == 0)
			throw new CompiereUserException (""Business Partner not found - C_BPartner_ID="" + p_C_BPartner_ID);
		//	BP Location
		MBPartnerLocation[] locs = bp.getLocations(false);
		if (locs == null || locs.length == 0)
			throw new IllegalArgumentException (""Business Partner has no Location"");
		//	Location
		int C_Location_ID = locs[0].getC_Location_ID();
		if (C_Location_ID == 0)
			throw new IllegalArgumentException (""Business Partner Location has no Address"");
		
		//	Create Org
		boolean newOrg = p_AD_Org_ID == 0; 
		MOrg org = new MOrg (getCtx(), p_AD_Org_ID, get_TrxName());
		if (newOrg)
		{
			org.setValue (bp.getValue());
			org.setName (bp.getName());
			org.setDescription (bp.getDescription());
			if (!org.save())
				throw new Exception (""Organization not saved"");
		}
		else	//	check if linked to already
		{
			int C_BPartner_ID = org.getLinkedC_BPartner_ID();
			if (C_BPartner_ID > 0)
				throw new IllegalArgumentException (""Organization '"" + org.getName() 
					+ ""' already linked (to C_BPartner_ID="" + C_BPartner_ID + "")"");
		}
		p_AD_Org_ID = org.getAD_Org_ID();
		
		//	Update Org Info
		MOrgInfo oInfo = org.getInfo();
		oInfo.setAD_OrgType_ID (p_AD_OrgType_ID);
		if (newOrg)
			oInfo.setC_Location_ID(C_Location_ID);		
		
		//	Create Warehouse
		MWarehouse wh = null;
		if (!newOrg)
		{
			MWarehouse[] whs = MWarehouse.getForOrg(getCtx(), p_AD_Org_ID);
			if (whs != null && whs.length > 0)
				wh = whs[0];	//	pick first
		}
		//	New Warehouse
		if (wh == null)
		{
			wh = new MWarehouse(org);
			if (!wh.save())
				throw new Exception (""Warehouse not saved"");
		}
		//	Create Locator
		MLocator mLoc = wh.getDefaultLocator();
		if (mLoc == null)
		{
			mLoc = new MLocator (wh, ""Standard"");
			mLoc.setIsDefault(true);
			mLoc.save();
		}
		
		//	Update/Save Org Info
		oInfo.setM_Warehouse_ID(wh.getM_Warehouse_ID());
		if (!oInfo.save(get_TrxName()))
			throw new Exception (""Organization Info not saved"");
		
		//	Update BPartner
		bp.setAD_OrgBP_ID(p_AD_Org_ID);
		if (bp.getAD_Org_ID() != 0)
			bp.setClientOrg(bp.getAD_Client_ID(), 0);	//	Shared BPartner
		
		//	Save BP
		if (!bp.save())	
			throw new Exception (""Business Partner not updated"");
		
		//	Limit to specific Role
		if (p_AD_Role_ID != 0)	
		{
			boolean found = false;
			MRoleOrgAccess[] orgAccesses = MRoleOrgAccess.getOfOrg (getCtx(), p_AD_Org_ID);
			//	delete all accesses except the specific
			for (MRoleOrgAccess element : orgAccesses) {
				if (element.getAD_Role_ID() == p_AD_Role_ID)
					found = true;
				else
					element.delete(true);
			}
			//	create access
			if (!found)
			{
				MRoleOrgAccess orgAccess = new MRoleOrgAccess (org, p_AD_Role_ID);
				orgAccess.save();
			}
		}
		
		//	Reset Client Role
		MRole.getDefault(getCtx(), true);
		
		return ""Business Partner - Organization Link created"";
	}	//	doIt
"
org.compiere.process.DistributionCreate.prepare,DistributionCreate.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
		//	log.fine(""prepare - "" + para[i]);
			if (element.getParameter() == null)
				;
			else if (name.equals(""M_Product_ID""))
				p_M_Product_ID = element.getParameterAsInt();
			else if (name.equals(""Qty""))
				p_Qty = (BigDecimal)element.getParameter();
			else if (name.equals(""IsCreateSingleOrder""))
				p_IsCreateSingleOrder = ""Y"".equals(element.getParameter());
			else if (name.equals(""Bill_BPartner_ID""))
				p_Bill_BPartner_ID = element.getParameterAsInt();
			else if (name.equals(""p_Bill_Location_ID""))
				p_Bill_Location_ID = element.getParameterAsInt();
			else if (name.equals(""IsTest""))
				p_IsTest = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);		
		}
		p_M_DistributionList_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.DistributionCreate.doIt,DistributionCreate.java,"String doIt() throws Exception
	{
		log.info(""M_DistributionList_ID="" + p_M_DistributionList_ID 
			+ "", M_Product_ID="" + p_M_Product_ID + "", Qty="" + p_Qty
			+ "", Test="" + p_IsTest);
		if (p_IsCreateSingleOrder)
			log.info(""SingleOrder="" + p_IsCreateSingleOrder
				+ "", BPartner_ID="" + p_Bill_BPartner_ID 
				+ "", Location_ID="" + p_Bill_Location_ID);
		//
		if (p_M_DistributionList_ID == 0)
			throw new IllegalArgumentException (""No Distribution List ID"");
		m_dl = new MDistributionList(getCtx(), p_M_DistributionList_ID, get_TrxName());
		if (m_dl.get_ID() == 0)
			throw new Exception (""Distribution List not found -  M_DistributionList_ID="" +  p_M_DistributionList_ID);
		//
		if (p_M_Product_ID == 0)
			throw new IllegalArgumentException (""No Product"");
		m_product = MProduct.get (getCtx(), p_M_Product_ID);
		if (m_product.get_ID() == 0)
			throw new Exception (""Product not found -  M_Product_ID="" +  p_M_Product_ID);
		if (p_Qty == null || p_Qty.signum() != 1)
			throw new IllegalArgumentException (""No Quantity"");
		//
		if (p_IsCreateSingleOrder && p_Bill_BPartner_ID == 0)
			throw new IllegalArgumentException (""Invoice Business Partner required for single Order"");
		//	Create Single Order
		if (!p_IsTest && p_IsCreateSingleOrder) 
		{
			MBPartner bp = new MBPartner (getCtx(), p_Bill_BPartner_ID, get_TrxName());
			if (bp.get_ID() == 0)
				throw new IllegalArgumentException(""Single Business Partner not found - C_BPartner_ID="" + p_Bill_BPartner_ID);
			//
			m_singleOrder = new MOrder (getCtx(), 0, get_TrxName());
			m_singleOrder.setIsSOTrx(true);
			m_singleOrder.setC_DocTypeTarget_ID(MOrder.DocSubTypeSO_Standard);
			m_singleOrder.setBPartner(bp);
			if (p_Bill_Location_ID != 0)
				m_singleOrder.setC_BPartner_Location_ID(p_Bill_Location_ID);
			if (!m_singleOrder.save())
				throw new IllegalStateException(""Single Order not created"");
		}
		
		MDistributionListLine[] lines = m_dl.getLines();
		int counter = 0;
		for (MDistributionListLine element : lines) {
			if (createOrder(element))
				counter++;
		}
		
		//	Update Qty
		if (m_singleOrder != null)
		{
			m_singleOrder.setDescription(""# "" + counter + "" - "" + m_totalQty);
			m_singleOrder.save();
		}
		
		return ""@Created@ #"" + counter + "" - @Qty@="" + m_totalQty;
	}	//	doIt
"
org.compiere.process.DistributionCreate.createOrder,DistributionCreate.java,"boolean createOrder (MDistributionListLine dll)
	{
		MBPartner bp = new MBPartner (getCtx(), dll.getC_BPartner_ID(), get_TrxName());
		if (bp.get_ID() == 0)
			throw new IllegalArgumentException(""Business Partner not found - C_BPartner_ID="" + dll.getC_BPartner_ID());

		//	Create Order
		MOrder order = m_singleOrder;
		if (!p_IsTest && order == null)
		{
			order = new MOrder (getCtx(), 0, get_TrxName());
			order.setIsSOTrx(true);
			order.setC_DocTypeTarget_ID(MOrder.DocSubTypeSO_Standard);
			order.setBPartner(bp);
			if (dll.getC_BPartner_Location_ID() != 0)
				order.setC_BPartner_Location_ID(dll.getC_BPartner_Location_ID());
			if (!order.save())
			{
				log.log(Level.SEVERE, ""Order not saved"");
				return false;
			}
		}
		//	Calculate Qty
		BigDecimal ratio = dll.getRatio();
		BigDecimal qty = p_Qty.multiply(ratio);
		if (qty.compareTo(Env.ZERO) != 0)
			qty = qty.divide(m_dl.getRatioTotal(), m_product.getUOMPrecision(), BigDecimal.ROUND_HALF_UP);
		BigDecimal minQty = dll.getMinQty();
		if (qty.compareTo(minQty) < 0)
			qty = minQty;
		m_totalQty = m_totalQty.add(qty);
		//
		if (p_IsTest)
		{
			addLog(0,null, qty, bp.getName());
			return false;
		}

		//	Create Order Line
		MOrderLine line = new MOrderLine(order);
		line.setC_BPartner_ID(dll.getC_BPartner_ID());
		if (dll.getC_BPartner_Location_ID() != 0)
			line.setC_BPartner_Location_ID(dll.getC_BPartner_Location_ID());
		//
		line.setM_Product_ID(p_M_Product_ID, true);
		line.setQty(qty);
		line.setPrice();
		if (!line.save())
		{
			log.log(Level.SEVERE, ""OrderLine not saved"");
			return false;
		}
		
		addLog(0,null, qty, order.getDocumentNo() + "": "" + bp.getName());
		return true;
	}	//	createOrder
"
org.compiere.process.ColumnSync.prepare,ColumnSync.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_AD_Column_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.ColumnSync.doIt,ColumnSync.java,"String doIt() throws Exception
	{
		log.info(""C_Column_ID="" + p_AD_Column_ID);
		if (p_AD_Column_ID == 0)
			throw new CompiereUserException(""@No@ @AD_Column_ID@"");
		MColumn column = new MColumn (getCtx(), p_AD_Column_ID, get_TrxName());
		if (column.get_ID() == 0)
			throw new CompiereUserException(""@NotFound@ @AD_Column_ID@ "" + p_AD_Column_ID);

		MTable table = MTable.get(getCtx(), column.getAD_Table_ID());
		if (table.get_ID() == 0)
			throw new CompiereUserException(""@NotFound@ @AD_Table_ID@ "" + column.getAD_Table_ID());

		Trx trx = Trx.get(""getDatabaseMetaData"");

		//	Find Column in Database
		DatabaseMetaData md = trx.getConnection().getMetaData();
		String catalog = DB.getDatabase().getCatalog();
		String schema = DB.getDatabase().getSchema();
		String tableName = table.getTableName();
		if (md.storesUpperCaseIdentifiers())
			tableName = tableName.toUpperCase();
		if (md.storesLowerCaseIdentifiers())
			tableName = tableName.toLowerCase();
		int noColumns = 0;
		String sql = null;
		//
		ResultSet rs = md.getColumns(catalog, schema, tableName, null);
		while (rs.next())
		{
			noColumns++;
			String columnName = rs.getString (""COLUMN_NAME"");
			if (!columnName.equalsIgnoreCase(column.getColumnName()))
				continue;

			//	update existing column
			boolean notNull = DatabaseMetaData.columnNoNulls == rs.getInt(""NULLABLE"");
			if (column.isVirtualColumn())
				sql = ""ALTER TABLE "" + table.getTableName()
					+ "" DROP COLUMN "" + columnName;
			else
				sql = column.getSQLModify(table, column.isMandatory() != notNull);
			break;
		}
		rs.close();
		rs = null;
		trx.close();

		//	No Table
		if (noColumns == 0)
			sql = table.getSQLCreate ();
		//	No existing column
		else if (sql == null)
		{
			if (column.isVirtualColumn())
				return ""@IsVirtualColumn@"";
			sql = column.getSQLAdd(table);
		}

		int no = 0;
		if (sql.indexOf(DB.SQLSTATEMENT_SEPARATOR) == -1)
		{
			no = DB.executeUpdate(sql, false, get_TrxName());
			addLog (0, null, new BigDecimal(no), sql);
		}
		else
		{
			String statements[] = sql.split(DB.SQLSTATEMENT_SEPARATOR);
			for (String element : statements)
			{
				int count = DB.executeUpdate(element, false, get_TrxName());
				addLog (0, null, new BigDecimal(count), element);
				no += count;
			}
		}

		if (no == -1)
		{
			String msg = ""@Error@ "";
			ValueNamePair pp = CLogger.retrieveError();
			if (pp != null)
				msg = pp.getName() + "" - "";
			msg += sql;
			throw new CompiereUserException (msg);
		}
		String r = createFK();
		return sql + ""; "" + r;
	}	//	doIt
"
org.compiere.process.ColumnSync.createFK,ColumnSync.java,"String createFK() throws Exception
	{
		String returnMessage = """";
		if (p_AD_Column_ID == 0)
			throw new CompiereUserException(""@No@ @AD_Column_ID@"");
		MColumn column = new MColumn (getCtx(), p_AD_Column_ID, get_TrxName());
		if (column.get_ID() == 0)
			throw new CompiereUserException(""@NotFound@ @AD_Column_ID@ "" + p_AD_Column_ID);

		MTable table = MTable.get(getCtx(), column.getAD_Table_ID());
		if (table.get_ID() == 0)
			throw new CompiereUserException(""@NotFound@ @AD_Table_ID@ "" + column.getAD_Table_ID());

		String fk;
		if ((column.getAD_Reference_ID() == DisplayTypeConstants.Account)
			&& !(column.getColumnName().equalsIgnoreCase(""C_ValidCombination_ID"")))
		{
			fk = ""SELECT t.TableName, c.ColumnName, c.AD_Column_ID,""
				+ "" cPK.AD_Column_ID, tPK.TableName, cPK.ColumnName, c.ConstraintType,""
				+ "" 'FK' || t.AD_Table_ID || '_' || c.AD_Column_ID AS ConstraintName ""
				+ ""FROM AD_Table t""
				+ "" INNER JOIN AD_Column c ON (t.AD_Table_ID=c.AD_Table_ID)""
				+ "" INNER JOIN AD_Column cPK ON (cPK.AD_Column_ID=1014)""
				+ "" INNER JOIN AD_Table tPK ON (cPK.AD_Table_ID=tPK.AD_Table_ID) ""
				+ ""WHERE c.IsKey='N' AND c.AD_Reference_ID=25 AND C.AD_Column_ID= ?""	//	Acct
				+ "" AND c.ColumnName<>'C_ValidCombination_ID'""
				+ "" AND t.IsView='N' ""
				+ ""ORDER BY t.TableName, c.ColumnName"";
		}
		else if ((column.getAD_Reference_ID() == DisplayTypeConstants.PAttribute)
			&& !(column.getColumnName().equalsIgnoreCase(""C_ValidCombination_ID"")))
		{
			fk=""SELECT t.TableName, c.ColumnName, c.AD_Column_ID,""
				+ "" cPK.AD_Column_ID, tPK.TableName, cPK.ColumnName, c.ConstraintType,""
				+ "" 'FK' || t.AD_Table_ID || '_' || c.AD_Column_ID AS ConstraintName ""
				+ ""FROM AD_Table t""
				+ "" INNER JOIN AD_Column c ON (t.AD_Table_ID=c.AD_Table_ID)""
				+ "" INNER JOIN AD_Column cPK ON (cPK.AD_Column_ID=8472)""
				+ "" INNER JOIN AD_Table tPK ON (cPK.AD_Table_ID=tPK.AD_Table_ID) ""
				+ ""WHERE c.IsKey='N' AND c.AD_Reference_ID=35 AND C.AD_Column_ID=?""	//	Product Attribute
				+ "" AND c.ColumnName<>'C_ValidCombination_ID'""
				+ "" AND t.IsView='N' ""
				+ ""ORDER BY t.TableName, c.ColumnName"";
		}
		else if (((column.getAD_Reference_ID() == DisplayTypeConstants.TableDir) || (column.getAD_Reference_ID() == DisplayTypeConstants.Search))
			&& (column.getAD_Reference_Value_ID() == 0))
		{
			fk=""SELECT t.TableName, c.ColumnName, c.AD_Column_ID,""
				+ "" cPK.AD_Column_ID, tPK.TableName, cPK.ColumnName, c.ConstraintType,""
				+ "" 'FK' || t.AD_Table_ID || '_' || c.AD_Column_ID AS ConstraintName ""
				+ ""FROM AD_Table t""
				+ "" INNER JOIN AD_Column c ON (t.AD_Table_ID=c.AD_Table_ID)""
				+ "" INNER JOIN AD_Column cPK ON (c.AD_Element_ID=cPK.AD_Element_ID AND cPK.IsKey='Y')""
				+ "" INNER JOIN AD_Table tPK ON (cPK.AD_Table_ID=tPK.AD_Table_ID AND tPK.IsView='N') ""
				+ ""WHERE c.IsKey='N' AND c.AD_Reference_Value_ID IS NULL AND C.AD_Column_ID=?""
				+ "" AND t.IsView='N' AND c.ColumnSQL IS NULL ""
				+ ""ORDER BY t.TableName, c.ColumnName"";
		}
		else //	Table
		{
			fk = ""SELECT t.TableName, c.ColumnName, c.AD_Column_ID,""
				+ "" cPK.AD_Column_ID, tPK.TableName, cPK.ColumnName, c.ConstraintType,""
				+ "" 'FK' || t.AD_Table_ID || '_' || c.AD_Column_ID AS ConstraintName ""
				+ ""FROM AD_Table t""
				+ "" INNER JOIN AD_Column c ON (t.AD_Table_ID=c.AD_Table_ID AND c.AD_Reference_Value_ID IS NOT NULL)""
				+ "" INNER JOIN AD_Ref_Table rt ON (c.AD_Reference_Value_ID=rt.AD_Reference_ID)""
				+ "" INNER JOIN AD_Column cPK ON (rt.Column_Key_ID=cPK.AD_Column_ID)""
				+ "" INNER JOIN AD_Table tPK ON (cPK.AD_Table_ID=tPK.AD_Table_ID) ""
				+ ""WHERE c.IsKey='N'""
				+ "" AND t.IsView='N' AND c.ColumnSQL IS NULL AND C.AD_Column_ID=?""
				+ ""ORDER BY t.TableName, c.ColumnName"";
		}

		PreparedStatement pstmt = null;
		try
		{
			/*Find foreign key relation in Database
			 * */
			Trx trx = Trx.get(""getDatabaseMetaData"");
			DatabaseMetaData md = trx.getConnection().getMetaData();
			String catalog = DB.getDatabase().getCatalog();
			String schema = DB.getDatabase().getSchema();
			String tableName = table.getTableName();
			if (md.storesUpperCaseIdentifiers())
				tableName = tableName.toUpperCase();
			if (md.storesLowerCaseIdentifiers())
				tableName = tableName.toLowerCase();
			String dropsql = null;
			int no=0;

			String constraintNameDB = null;
			String PKTableNameDB = null;
			String PKColumnNameDB = null;
			int constraintTypeDB = 0;

			/* Get foreign key information from DatabaseMetadata
			 * */
			ResultSet rs = md.getImportedKeys(catalog, schema, tableName);
			while (rs.next())
			{
				String fkcolumnName = rs.getString (""FKCOLUMN_NAME"");

				if (fkcolumnName.equalsIgnoreCase(column.getColumnName()))
				{
					constraintNameDB = rs.getString(""FK_NAME"");
					PKTableNameDB = rs.getString(""PKTABLE_NAME"");
					PKColumnNameDB = rs.getString(""PKCOLUMN_NAME"");
					constraintTypeDB=rs.getShort(""DELETE_RULE"");
					break;
				}
			}
			rs.close();
			rs = null;
			trx.close();


			pstmt = DB.prepareStatement(fk,get_TrxName());
			pstmt.setInt (1, column.get_ID());
			rs = pstmt.executeQuery ();
			if (rs.next ())
			{
				String TableName = rs.getString (1);
				String ColumnName = rs.getString (2);
			//	int AD_Column_ID = rs.getInt (3);
			//	int PK_Column_ID = rs.getInt (4);
				String PKTableName = rs.getString (5);
				String PKColumnName = rs.getString (6);
				String ConstraintType = rs.getString (7);
				String ConstraintName = rs.getString (8);

				/* verify if the constraint in DB is different than the one to be created */
				boolean modified = true;
				if(constraintNameDB != null)
				{
					if(((constraintNameDB.equalsIgnoreCase(ConstraintName))
							&& (PKTableNameDB != null) && (PKTableNameDB.equalsIgnoreCase(PKTableName))
							&& (PKColumnNameDB != null) && (PKColumnNameDB.equalsIgnoreCase(PKColumnName))
							&& ((constraintTypeDB==DatabaseMetaData.importedKeyRestrict)&&
									(X_AD_Column.CONSTRAINTTYPE_Restrict.equals(ConstraintType)
											|| X_AD_Column.CONSTRAINTTYPE_RestrictTrigger.equals(ConstraintType))))
											||
											((constraintTypeDB==DatabaseMetaData.importedKeyCascade)&&
													(X_AD_Column.CONSTRAINTTYPE_Cascade.equals(ConstraintType)
															|| X_AD_Column.CONSTRAINTTYPE_CascadeTrigger.equals(ConstraintType)))
															||
															((constraintTypeDB==DatabaseMetaData.importedKeySetNull)&&
																	(X_AD_Column.CONSTRAINTTYPE_Null.equals(ConstraintType)))

					)
					{
						modified = false;
					}

					else
					{
						dropsql = ""ALTER TABLE "" + table.getTableName()
						+ "" DROP CONSTRAINT "" + constraintNameDB;
					}
				}
				if(modified)
				{
					StringBuffer sql = null;
					try
					{
						if(dropsql != null)
						{
							/* Drop the existing constraint */
							no = DB.executeUpdate(dropsql, false, get_TrxName());
							addLog (0, null, new BigDecimal(no), dropsql);
						}
						/* Now create the sql foreign key constraint */
						sql = new StringBuffer(""ALTER TABLE "")
							.append(TableName)
							.append("" ADD CONSTRAINT "").append(ConstraintName)
							.append("" FOREIGN KEY ("").append(ColumnName)
							.append("") REFERENCES "").append (PKTableName)
							.append("" ("").append (PKColumnName).append("")"");
						boolean createfk=true;
						if (ConstraintType != null)
						{
							if (X_AD_Column.CONSTRAINTTYPE_DoNOTCreate.equals(ConstraintType))
								createfk=false;
							else if (X_AD_Column.CONSTRAINTTYPE_Restrict.equals(ConstraintType)
								|| X_AD_Column.CONSTRAINTTYPE_RestrictTrigger.equals(ConstraintType))
								;
							else if (X_AD_Column.CONSTRAINTTYPE_Cascade.equals(ConstraintType)
								|| X_AD_Column.CONSTRAINTTYPE_CascadeTrigger.equals(ConstraintType))
								sql.append ("" ON DELETE CASCADE"");
							else if (X_AD_Column.CONSTRAINTTYPE_Null.equals(ConstraintType)
								|| X_AD_Column.CONSTRAINTTYPE_NullTrigger.equals(ConstraintType))
								sql.append ("" ON DELETE SET NULL"");
						}
						/* Create the constraint */
						if(createfk)
						{
							no = DB.executeUpdate (sql.toString(),get_TrxName());
							addLog (0, null, new BigDecimal(no), sql.toString());
							if (no != -1)
							{
								log.finer (ConstraintName + "" - "" + TableName + ""."" + ColumnName);
								returnMessage = sql.toString();
							}
							else
							{
								log.info(ConstraintName + "" - "" + TableName + ""."" + ColumnName
									+ "" - ReturnCode="" + no);
								returnMessage = ""FAILED:""+sql.toString();
							}
						} //if createfk

					}
					catch (Exception e)
					{
						log.log (Level.SEVERE, sql.toString() + "" - "" + e.toString ());

					}
				} // modified
			}	//	rs.next
			else
			{
				if(constraintNameDB != null && constraintNameDB.equalsIgnoreCase(""FK""+column.getAD_Table_ID()+""_""+p_AD_Column_ID))
				{
					dropsql = ""ALTER TABLE "" + table.getTableName()
					+ "" DROP CONSTRAINT "" + constraintNameDB;
					
					/* Drop the existing constraint */
					no = DB.executeUpdate(dropsql, false, get_TrxName());
					addLog (0, null, new BigDecimal(no), dropsql);
					returnMessage = dropsql.toString();					
				}
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, fk, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return returnMessage;
	}	//	createFK
"
org.compiere.process.TreeMaintenance.prepare,TreeMaintenance.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		m_AD_Tree_ID = getRecord_ID();		//	from Window
	}	//	prepare
"
org.compiere.process.TreeMaintenance.doIt,TreeMaintenance.java,"String doIt() throws Exception
	{
		log.info(""AD_Tree_ID="" + m_AD_Tree_ID);
		if (m_AD_Tree_ID == 0)
			throw new IllegalArgumentException(""Tree_ID = 0"");
		MTree tree = new MTree (getCtx(), m_AD_Tree_ID, get_TrxName());	
		if (tree == null || tree.getAD_Tree_ID() == 0)
			throw new IllegalArgumentException(""No Tree -"" + tree);
		//
		if (X_AD_Tree.TREETYPE_BoM.equals(tree.getTreeType()))
			return ""BOM Trees not implemented"";
		return verifyTree(tree);
	}	//	doIt
"
org.compiere.process.TreeMaintenance.verifyTree,TreeMaintenance.java,"String verifyTree (MTree tree)
	{
		if (tree.getAD_Table_ID(true) == 0)
			tree.updateTrees();
		String nodeTableName = tree.getNodeTableName();
		String sourceTableName = tree.getSourceTableName(true);
		String sourceTableKey = sourceTableName + ""_ID"";
		int AD_Client_ID = tree.getAD_Client_ID();
		int C_Element_ID = 0;
		if (X_AD_Tree.TREETYPE_ElementValue.equals(tree.getTreeType()))
		{
			String sql = ""SELECT C_Element_ID FROM C_Element ""
				+ ""WHERE AD_Tree_ID="" + tree.getAD_Tree_ID();
			C_Element_ID = DB.getSQLValue(null, sql);
			if (C_Element_ID <= 0)
				throw new IllegalStateException(""No Account Element found"");
		}
		
		//	Delete unused
		StringBuffer sql = new StringBuffer();
		sql.append(""DELETE FROM "").append(nodeTableName)
			.append("" WHERE AD_Tree_ID="").append(tree.getAD_Tree_ID())
			.append("" AND Node_ID NOT IN (SELECT "").append(sourceTableKey)
			.append("" FROM "").append(sourceTableName)
			.append("" WHERE AD_Client_ID IN (0,"").append(AD_Client_ID).append("")"");
		if (C_Element_ID > 0)
			sql.append("" AND C_Element_ID="").append(C_Element_ID);
		sql.append("")"");
		log.finer(sql.toString());
		//
		int deletes = DB.executeUpdate(sql.toString(), get_TrxName());
		addLog(0,null, new BigDecimal(deletes), tree.getName()+ "" Deleted"");
		if (!tree.isAllNodes())
			return tree.getName() + "" OK"";
		
		//	Insert new
		int inserts = 0;
		sql = new StringBuffer();
		sql.append(""SELECT "").append(sourceTableKey)
			.append("" FROM "").append(sourceTableName)
			.append("" WHERE AD_Client_ID IN (0,"").append(AD_Client_ID).append("")"");
		if (C_Element_ID > 0)
			sql.append("" AND C_Element_ID="").append(C_Element_ID);
		sql.append("" AND "").append(sourceTableKey)
			.append(""  NOT IN (SELECT Node_ID FROM "").append(nodeTableName)
			.append("" WHERE AD_Tree_ID="").append(tree.getAD_Tree_ID()).append("")"");
		log.finer(sql.toString());
		//
		boolean ok = true;
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql.toString(), get_TrxName());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				int Node_ID = rs.getInt(1);
				PO node = null;
				if (nodeTableName.equals(""AD_TreeNode""))
					node = new MTreeNode(tree, Node_ID);
				else if (nodeTableName.equals(""AD_TreeNodeBP""))
					node = new MTreeNodeBP(tree, Node_ID);
				else if (nodeTableName.equals(""AD_TreeNodePR""))
					node = new MTreeNodePR(tree, Node_ID);
				else if (nodeTableName.equals(""AD_TreeNodeCMC""))
					node = new MTreeNodeCMC(tree, Node_ID);
				else if (nodeTableName.equals(""AD_TreeNodeCMM""))
					node = new MTreeNodeCMM(tree, Node_ID);
				else if (nodeTableName.equals(""AD_TreeNodeCMS""))
					node = new MTreeNodeCMS(tree, Node_ID);
				else if (nodeTableName.equals(""AD_TreeNodeCMT""))
					node = new MTreeNodeCMT(tree, Node_ID);
				else if (nodeTableName.equals(""AD_TreeNodeMM""))
					node = new MTreeNodeMM(tree, Node_ID);
				//				
				if (node == null)
					log.log(Level.SEVERE, ""No Model for "" + nodeTableName);
				else
				{
					if (node.save())
						inserts++;
					else
						log.log(Level.SEVERE, ""Could not add to "" + tree + "" Node_ID="" + Node_ID);
				}
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql.toString(), e);
			ok = false;
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		addLog(0,null, new BigDecimal(inserts), tree.getName()+ "" Inserted"");
		return tree.getName() + (ok ? "" OK"" : "" Error"");
	}	//	verifyTree
"
org.compiere.process.InvoicePrint.prepare,InvoicePrint.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""DateInvoiced""))
			{
				m_dateInvoiced_From = ((Timestamp)element.getParameter());
				m_dateInvoiced_To = ((Timestamp)element.getParameter_To());
			}
			else if (name.equals(""EMailPDF""))
				p_EMailPDF = ""Y"".equals(element.getParameter());
			else if (name.equals(""R_MailText_ID""))
				p_R_MailText_ID = element.getParameterAsInt();
			else if (name.equals(""C_BPartner_ID""))
				m_C_BPartner_ID = element.getParameterAsInt();
			else if (name.equals(""C_Invoice_ID""))
				m_C_Invoice_ID = element.getParameterAsInt();
			else if (name.equals(""DocumentNo""))
			{
				m_DocumentNo_From = (String)element.getParameter();
				m_DocumentNo_To = (String)element.getParameter_To();
			}
			else if (name.equals(""IsSOTrx""))
				m_IsSOTrx = ""Y"".equals(element.getParameter());
			else if (name.equals(""IncludeDraftInvoices""))
				m_IncludeDraftInvoices = ""Y"".equals(element.getParameter());
			else if (name.equals(""ConsolidateInvoices""))
				m_consolidateInvoices = ""Y"".equals(element.getParameter());			
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		if (m_DocumentNo_From != null && m_DocumentNo_From.length() == 0)
			m_DocumentNo_From = null;
		if (m_DocumentNo_To != null && m_DocumentNo_To.length() == 0)
			m_DocumentNo_To = null;
	}	//	prepare
"
org.compiere.process.InvoicePrint.doIt,InvoicePrint.java,"String doIt() throws java.lang.Exception
	{
		//	Need to have Template
		if (p_EMailPDF && p_R_MailText_ID == 0)
			throw new CompiereUserException (""@NotFound@: @R_MailText_ID@"");
		log.info (""C_BPartner_ID="" + m_C_BPartner_ID
			+ "", C_Invoice_ID="" + m_C_Invoice_ID
			+ "", IsSOTrx="" + m_IsSOTrx
			+ "", EmailPDF="" + p_EMailPDF + "",R_MailText_ID="" + p_R_MailText_ID
			+ "", DateInvoiced="" + m_dateInvoiced_From + ""-"" + m_dateInvoiced_To
			+ "", DocumentNo="" + m_DocumentNo_From + ""-"" + m_DocumentNo_To
			+ "", IncludeDrafts=""+m_IncludeDraftInvoices);
		
		MMailText mText = null;
		if (p_R_MailText_ID != 0)
		{
			mText = new MMailText(getCtx(), p_R_MailText_ID, get_TrxName());
			if (mText.get_ID() != p_R_MailText_ID)
				throw new CompiereUserException (""@NotFound@: @R_MailText_ID@ - "" + p_R_MailText_ID);
		}

		//	Too broad selection
		if (m_C_BPartner_ID == 0 && m_C_Invoice_ID == 0 && m_dateInvoiced_From == null && m_dateInvoiced_To == null
			&& m_DocumentNo_From == null && m_DocumentNo_To == null)
			throw new CompiereUserException (""@RestrictSelection@"");

		MClient client = MClient.get(getCtx());
		
		File f = null;
		com.lowagie.text.Document doc=null;
		PdfContentByte cb=null;
		//	Get Info
		StringBuffer sql = new StringBuffer (
			""SELECT i.C_Invoice_ID,bp.AD_Language,c.IsMultiLingualDocument,""		//	1..3
			//	Prio: 1. BPartner 2. DocType, 3. PrintFormat (Org)	//	see ReportCtl+MInvoice
			+ "" COALESCE(bp.Invoice_PrintFormat_ID, dt.AD_PrintFormat_ID, pf.Invoice_PrintFormat_ID),""	//	4 
			+ "" dt.DocumentCopies+bp.DocumentCopies,""								//	5
			+ "" bpc.AD_User_ID, i.DocumentNo,""										//	6..7
			+ "" bp.C_BPartner_ID ""													//	8
			+ ""FROM C_Invoice i""
			+ "" INNER JOIN C_BPartner bp ON (i.C_BPartner_ID=bp.C_BPartner_ID)""
			+ "" LEFT OUTER JOIN AD_User bpc ON (i.AD_User_ID=bpc.AD_User_ID)""
			+ "" INNER JOIN AD_Client c ON (i.AD_Client_ID=c.AD_Client_ID)""
			+ "" INNER JOIN AD_PrintForm pf ON (i.AD_Client_ID=pf.AD_Client_ID)""
			+ "" INNER JOIN C_DocType dt ON (i.C_DocType_ID=dt.C_DocType_ID)"")
			.append("" WHERE pf.AD_Org_ID IN (0,i.AD_Org_ID) AND "");	//	more them 1 PF
		if (m_C_Invoice_ID != 0)
			sql.append(""i.C_Invoice_ID="").append(m_C_Invoice_ID);
		else
		{
			if (m_IsSOTrx)
				sql.append (""i.IsSOTrx='Y'"");
			else
				sql.append (""i.IsSOTrx='N'"");
			
			if (!m_IncludeDraftInvoices)
				sql.append(""AND i.DocStatus NOT IN ('DR')"");
			
			if (m_C_BPartner_ID != 0)
				sql.append ("" AND i.C_BPartner_ID="").append (m_C_BPartner_ID);
			
			//	Date Invoiced 
			if (m_dateInvoiced_From != null && m_dateInvoiced_To != null)
				sql.append("" AND TRUNC(i.DateInvoiced,'DD') BETWEEN "")
					.append(DB.TO_DATE(m_dateInvoiced_From, true)).append("" AND "")
					.append(DB.TO_DATE(m_dateInvoiced_To, true));
			else if (m_dateInvoiced_From != null)
				sql.append("" AND TRUNC(i.DateInvoiced,'DD') >= "")
					.append(DB.TO_DATE(m_dateInvoiced_From, true));
			else if (m_dateInvoiced_To != null)
				sql.append("" AND TRUNC(i.DateInvoiced,'DD') <= "")
					.append(DB.TO_DATE(m_dateInvoiced_To, true));
			//	Document No
			else if (m_DocumentNo_From != null && m_DocumentNo_To != null)
				sql.append("" AND i.DocumentNo BETWEEN "")
					.append(DB.TO_STRING(m_DocumentNo_From)).append("" AND "")
					.append(DB.TO_STRING(m_DocumentNo_To));
			else if (m_DocumentNo_From != null)
			{
				sql.append("" AND "");
				if (m_DocumentNo_From.indexOf('%') == -1)
					sql.append(""i.DocumentNo >= "")
						.append(DB.TO_STRING(m_DocumentNo_From));
				else
					sql.append(""i.DocumentNo LIKE "")
						.append(DB.TO_STRING(m_DocumentNo_From));
			}
		}
		sql.append("" ORDER BY i.C_Invoice_ID, pf.AD_Org_ID DESC"");	//	more than 1 PF record
		log.finer(sql.toString());

		MPrintFormat format = null;
		int old_AD_PrintFormat_ID = -1;
		int old_C_Invoice_ID = -1;
		int C_BPartner_ID = 0;
		int count = 0;
		int errors = 0;
		
		if (m_consolidateInvoices){
			f = File.createTempFile( ""U"" + getCtx().getAD_User_ID() + ""_R"", "".pdf"", new File( System.getProperty( ""java.io.tmpdir"" ) ) );
			doc=ReportEngine.createDocument();
			cb=ReportEngine.getContentByte(doc, f);			
		}
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql.toString(), (Trx) null);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				int C_Invoice_ID = rs.getInt(1);
				if (C_Invoice_ID == old_C_Invoice_ID)	//	multiple pf records
					continue;
				old_C_Invoice_ID = C_Invoice_ID;
				//	Set Language when enabled
				Language language = Language.getLoginLanguage();		//	Base Language
				String AD_Language = rs.getString(2);
				if (AD_Language != null && ""Y"".equals(rs.getString(3)))
					language = Language.getLanguage(AD_Language);
				//
				int AD_PrintFormat_ID = rs.getInt(4);
				int copies = rs.getInt(5);
				if (copies == 0)
					copies = 1;
				int AD_User_ID = rs.getInt(6);
				MUser to = new MUser (getCtx(), AD_User_ID, get_TrxName());
				String DocumentNo = rs.getString(7);
				C_BPartner_ID = rs.getInt(8);
				//
				String documentDir = client.getDocumentDir();
				if (documentDir == null || documentDir.length() == 0)
					documentDir = ""."";
				//
				if (p_EMailPDF && (to.get_ID() == 0 || to.getEMail() == null || to.getEMail().length() == 0))
				{
					addLog (C_Invoice_ID, null, null, DocumentNo + "" @RequestActionEMailNoTo@"");
					errors++;
					continue;
				}
				if (AD_PrintFormat_ID == 0)
				{
					addLog (C_Invoice_ID, null, null, DocumentNo + "" No Print Format"");
					errors++;
					continue;
				}
				//	Get Format & Data
				if (AD_PrintFormat_ID != old_AD_PrintFormat_ID)
				{
					format = MPrintFormat.get (getCtx(), AD_PrintFormat_ID, false);
					old_AD_PrintFormat_ID = AD_PrintFormat_ID;
				}
				format.setLanguage(language);
				format.setTranslationLanguage(language);
				//	query
				Query query = new Query(""C_Invoice_Header_v"");
				query.addRestriction(""C_Invoice_ID"", Query.EQUAL, Integer.valueOf(C_Invoice_ID));

				//	Engine
				PrintInfo info = new PrintInfo(
					DocumentNo,
					X_C_Invoice.Table_ID,
					C_Invoice_ID,
					C_BPartner_ID);
				info.setCopies(copies);
				ReportEngine re = new ReportEngine(getCtx(), format, query, info);
				boolean printed = false;
				if (p_EMailPDF)
				{
					String subject = mText.getMailHeader() + "" - "" + DocumentNo;
					EMail email = client.createEMail(to.getEMail(), to.getName(), subject, null);
					if (email == null || !email.isValid())
					{
						addLog (C_Invoice_ID, null, null,
						  DocumentNo + "" @RequestActionEMailError@ Invalid EMail: "" + to);
						errors++;
						continue;
					}
					mText.setUser(to);					//	Context
					mText.setBPartner(C_BPartner_ID);	//	Context
					mText.setPO(new MInvoice(getCtx(), C_Invoice_ID, get_TrxName()));
					String message = mText.getMailText(true);
					if (mText.isHtml())
						email.setMessageHTML(subject, message);
					else
					{
						email.setSubject (subject);
						email.setMessageText (message);
					}
					//
					File invoice = null;
					if (!Ini.isClient())
						invoice = new File(MInvoice.getPDFFileName(documentDir, C_Invoice_ID));
					File attachment = re.getPDF(invoice);
					log.fine(to + "" - "" + attachment);
					email.addAttachment(attachment);
					//
					String msg = email.send();
					MUserMail um = new MUserMail(mText, getAD_User_ID(), email);
					um.save();
					if (msg.equals(EMail.SENT_OK))
					{
						addLog (C_Invoice_ID, null, null,
						  DocumentNo + "" @RequestActionEMailOK@ - "" + to.getEMail());
						count++;
						printed = true;
					}
					else
					{
						addLog (C_Invoice_ID, null, null,
						  DocumentNo + "" @RequestActionEMailError@ "" + msg
						  + "" - "" + to.getEMail());
						errors++;
					}
				}
				else
				{
					if (m_consolidateInvoices){
						re.consolidateInvoices(doc,cb);
					}
					else{
						re.print();
					}
					count++;
					printed = true;
				}
				//	Print Confirm
				if (printed)
				{
					StringBuffer sb = new StringBuffer (""UPDATE C_Invoice ""
						+ ""SET DatePrinted=SysDate, IsPrinted='Y' WHERE C_Invoice_ID="")
						.append (C_Invoice_ID);
					DB.executeUpdate(sb.toString(), get_TrxName());
				}
			}	//	for all entries
			rs.close();
			pstmt.close();
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql.toString(), e);
			throw new Exception (e);
		}
		//
		if (p_EMailPDF)
			return ""@Sent@="" + count + "" - @Errors@="" + errors;
		if (m_consolidateInvoices){
			doc.close();
			return f.getName();
		}
		return ""@Printed@="" + count;
	}	//	doIt
"
org.compiere.process.ReplicationRemote.prepare,ReplicationRemote.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
		m_system = MSystem.get (getCtx());
	}	//	prepare
"
org.compiere.process.ReplicationRemote.doIt,ReplicationRemote.java,"String doIt() throws Exception
	{
		ProcessInfo pi = getProcessInfo();
		log.info(""doIt - "" + pi.getTitle());
		if (pi.getSerializableObject() instanceof RemoteSetupVO)
			return setupRemote();
		else if (pi.getSerializableObject() instanceof RemoteMergeDataVO)
			return mergeDataWithCentral();
		else if (pi.getSerializableObject() instanceof RemoteUpdateVO)
			return receiveUpdateFromCentral();
		else if (pi.getSerializableObject() instanceof Timestamp)
			return exit();
		else
			throw new Exception (""ReplicationRemote - unknown VO - "" + pi.getSerializableObject());
	}	//	doIt
"
org.compiere.process.ReplicationRemote.setupRemote,ReplicationRemote.java,"String setupRemote() throws Exception
	{
		ProcessInfo pi = getProcessInfo();
		RemoteSetupVO data = (RemoteSetupVO)pi.getSerializableObject();
		log.info(""setupRemote Start ("" + pi + "") "" + data);

		RowSet rs = data.ReplicationTable;
		try
		{
			//	Update AD_System	****
			if (data.IDRangeStart == null || data.IDRangeEnd == null)
				throw new Exception (""setupRemote - IDRange cannot be null"");
			if (!data.Test.booleanValue())
			{
				setupRemoteAD_System (data.IDRangeStart, data.IDRangeEnd);
				//	Update AD_Sequence	****
				setupRemoteAD_Sequence (data.IDRangeStart);
				//	Update DocNo Prefix/Suffix	****
				setupRemoteC_DocType (data.AD_Client_ID, data.Prefix, data.Suffix);
			}
			//	Update Tables	****
			while (rs.next ())
			{
				
				String ReplicationType = rs.getString(2);
				String TableName = rs.getString(3);
				log.fine(""setupRemote - "" + TableName + "" - "" + ReplicationType);
				if (!data.Test.booleanValue())
					setupRemoteAD_Table(TableName, ReplicationType);
			}
			pi.setSummary(""OK - Test="" + data.Test, false);
		}
		catch (Exception ex)
		{
			log.log(Level.SEVERE, ""setupRemote"", ex);
			pi.setSummary(ex.toString(), true);
		}
		Object result = doIt(ReplicationLocal.START, ""init"", new Object[]{m_system});
		if (result == null || !Boolean.TRUE.equals(result))
			throw new Exception(""setupRemote - Init Error - "" + result);
		pi.setSerializableObject(null);
		pi.addLog(0,0, m_startDate, null, null);
		log.info(""setupRemote End ("" + pi + "") "" + data);
		return ""Remote SetupRemote OK"";
	}	//	setupRemote
"
org.compiere.process.ReplicationRemote.setupRemoteAD_System,ReplicationRemote.java,"void setupRemoteAD_System (BigDecimal IDRangeStart, BigDecimal IDRangeEnd) throws Exception
	{
		m_system.setIDRangeStart(IDRangeStart);
		m_system.setIDRangeEnd(IDRangeEnd);
		m_system.setReplicationType(X_AD_System.REPLICATIONTYPE_Merge);
		m_system.save();
	}	//	setupRemoteAD_System
"
org.compiere.process.ReplicationRemote.setupRemoteAD_Sequence,ReplicationRemote.java,"void setupRemoteAD_Sequence (BigDecimal IDRangeStart) throws Exception
	{
		String sql = ""UPDATE AD_Sequence SET StartNo = "" + IDRangeStart
			+ "" WHERE IsTableID='Y' AND StartNo < "" + IDRangeStart;
		int no = DB.executeUpdate(sql, get_TrxName());
		if (no == -1)
			throw new Exception(""setupRemoteAD_Sequence_Start"");
		//
		sql = ""UPDATE AD_Sequence SET CurrentNext = "" + IDRangeStart
			+ "" WHERE IsTableID='Y' AND CurrentNext < "" + IDRangeStart;
		no = DB.executeUpdate(sql, get_TrxName());
		if (no == -1)
			throw new Exception(""setupRemoteAD_Sequence_Next"");
		//
		sql = ""UPDATE AD_Sequence SET CurrentNextSys = -1""
			+ "" WHERE IsTableID='Y' AND CurrentNextSys <> -1"";
		no = DB.executeUpdate(sql, get_TrxName());
		if (no == -1)
			throw new Exception(""setupRemoteAD_Sequence_Sys"");
	}	//	setupRemoteAD_Sequence
"
org.compiere.process.ReplicationRemote.setupRemoteC_DocType,ReplicationRemote.java,"void setupRemoteC_DocType (int AD_Client_ID, String Prefix, String Suffix) throws Exception
	{
		if (Prefix == null)
			Prefix = """";
		if (Suffix == null)
			Suffix = """";
		//	DocNoSequence_ID
		String sql = ""UPDATE AD_Sequence SET Prefix="" + DB.TO_STRING(Prefix) + "", Suffix="" + DB.TO_STRING(Suffix)
			+ "" WHERE AD_Sequence_ID IN (SELECT DocNoSequence_ID FROM C_DocType""
			+ "" WHERE AD_Client_ID="" + AD_Client_ID + "" AND DocNoSequence_ID IS NOT NULL)"";
		int no = DB.executeUpdate(sql, get_TrxName());
		if (no == -1)
			throw new Exception(""setupRemoteC_DocType_DocNo"");
		//	 BatchNoSequence_ID
		sql = ""UPDATE AD_Sequence SET Prefix="" + DB.TO_STRING(Prefix) + "", Suffix="" + DB.TO_STRING(Suffix)
			+ "" WHERE AD_Sequence_ID IN (SELECT BatchNoSequence_ID FROM C_DocType""
			+ "" WHERE AD_Client_ID="" + AD_Client_ID + "" AND BatchNoSequence_ID IS NOT NULL)"";
		no = DB.executeUpdate(sql, get_TrxName());
		if (no == -1)
			throw new Exception(""setupRemoteC_DocType_Batch"");
	}	//	setupRemoteC_DocType
"
org.compiere.process.ReplicationRemote.setupRemoteAD_Table,ReplicationRemote.java,"void setupRemoteAD_Table(String TableName, String ReplicationType) throws Exception
	{
		String sql = ""UPDATE AD_Table SET ReplicationType = '"" + ReplicationType
			+ ""' WHERE TableName='"" + TableName + ""' AND ReplicationType <> '"" + ReplicationType + ""'"";
		int no = DB.executeUpdate(sql, get_TrxName());
		if (no == -1)
			throw new Exception(""setupRemoteAD_Table"");
	}	//	setupRemoteAD_Table
"
org.compiere.process.ReplicationRemote.mergeDataWithCentral,ReplicationRemote.java,"String mergeDataWithCentral() throws Exception
	{
		ProcessInfo pi = getProcessInfo();
		RemoteMergeDataVO data = (RemoteMergeDataVO)pi.getSerializableObject();
		log.info(""mergeDataWithCentral Start ("" + pi + "") "" + data);
		//	Merge Data from Central
		RowSet sourceRS = data.CentralData;
		if (sourceRS == null)
			log.log(Level.SEVERE, ""mergeDataWithCentral - No Data - "" + data);
		else if (!data.Test.booleanValue())
		{
			RowSet targetRS = ReplicationLocal.getRowSet(data.Sql, null);
			Object result = doIt (ReplicationLocal.START, ""sync"", new Object[]	//	Merge
				{data.TableName, data.KeyColumns, sourceRS, targetRS, data.Test, Boolean.TRUE});
			log.fine(""receiveUpdateFromCentral - "" + data.TableName + "" - "" + result);
			pi.setSerializableObject(null);
			boolean replicated = ReplicationLocal.isReplicated(result);
			if (!replicated)
				pi.setError(true);
			if (result != null)
				pi.addLog(0,null,null, result.toString());
			if (Boolean.FALSE.equals(result))
				throw new Exception (""receiveUpdateFromCentral - "" + data.TableName + "" - "" + result);
		}

		//	Local Remote Data
		RowSet rowset = ReplicationLocal.getRowSet(data.Sql, null);
		//	Result
		pi.setSerializableObject((Serializable)rowset);
		log.info(""mergeDataWithCentral End ("" + pi + "") "" + data);
		return ""Remote MergeDataWithCentral - "" + data.TableName;
	}	//	sendNewDataToCentral
"
org.compiere.process.ReplicationRemote.receiveUpdateFromCentral,ReplicationRemote.java,"String receiveUpdateFromCentral() throws Exception
	{
		ProcessInfo pi = getProcessInfo();
		RemoteUpdateVO data = (RemoteUpdateVO)pi.getSerializableObject();
		log.info(""receiveUpdateFromCentral Start ("" + pi + "") - "" + data);
		//
		RowSet sourceRS = data.CentralData;
		if (sourceRS == null)
		{
			log.log(Level.SEVERE, ""receiveUpdateFromCentral - No Data - "" + data);
			pi.setSummary(""NoData"", true);
		}
		else if (!data.Test.booleanValue())
		{
			RowSet targetRS = ReplicationLocal.getRowSet(data.Sql, null);
			Object result = doIt (ReplicationLocal.START, ""sync"", new Object[]	//	Sync
				{data.TableName, data.KeyColumns, sourceRS, targetRS, data.Test, Boolean.FALSE});
			log.fine(""receiveUpdateFromCentral - "" + data.TableName + "" - "" + result);
			pi.setSerializableObject(null);
			boolean replicated = ReplicationLocal.isReplicated(result);
			if (!replicated)
				pi.setError(true);
			if (result != null)
				pi.addLog(0,null,null, result.toString());
			if (Boolean.FALSE.equals(result))
				throw new Exception (""receiveUpdateFromCentral - "" + data.TableName + "" - "" + result);
		}
		//
		pi.setSerializableObject(null);
		log.info(""receiveUpdateFromCentral End ("" + pi + "") - "" + data);
		return ""Remote Receive Update from Central OK"";
	}	//	receiveUpdateFromCentral
"
org.compiere.process.ReplicationRemote.exit,ReplicationRemote.java,"String exit() throws Exception
	{
		log.info (""exit"");
		doIt(ReplicationLocal.START, ""exit"", null);
		return ""exit"";
	}	//	exit
"
org.compiere.process.TableCreateSub.prepare,TableCreateSub.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
		//	else if (name.equals(""EntityType""))
		//		p_EntityType = (String)para[i].getParameter();
			else if (name.equals(""SubTableType""))
				p_SubTableType = (String)element.getParameter();
			else if (name.equals(""Base_Table_ID""))
				p_Base_Table_ID = element.getParameterAsInt();
			else if (name.equals(""DateColumn_ID""))
				p_DateColumn_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.TableCreateSub.doIt,TableCreateSub.java,"String doIt() throws Exception
	{
		log.info(""SubTableType="" + p_SubTableType 
			+ "",Base_Table_ID="" + p_Base_Table_ID + "",DateColumn_ID="" + p_DateColumn_ID);
		if (p_Base_Table_ID == 0 || p_DateColumn_ID == 0)
			throw new CompiereUserException(""No Base Table / Date Column"");
		MTable base = new MTable(getCtx(), p_Base_Table_ID, null);
		if (base.get_ID() != p_Base_Table_ID)
			throw new CompiereUserException(""@NotFound@ @Base_Table_ID@ ID="" + p_Base_Table_ID);
		MColumn dateCol = new MColumn(getCtx(), p_DateColumn_ID, null);
		if (dateCol.get_ID() != p_DateColumn_ID)
			throw new CompiereUserException(""@NotFound@ @DateColumn_ID@ ID="" + p_DateColumn_ID);
		if (dateCol.getAD_Table_ID() != base.getAD_Table_ID())
			throw new CompiereUserException(""@NotFound@ @DateColumn_ID@ - @Base_Table_ID@"");
		//
		MTable table = new MTable(getCtx(), 0, get_TrxName());
		table.setBase_Table_ID(p_Base_Table_ID);
		table.setSubTableType(p_SubTableType);
		
		//	History
		if (X_AD_Table.SUBTABLETYPE_History_Daily.equals(p_SubTableType)
			|| X_AD_Table.SUBTABLETYPE_History_Each.equals(p_SubTableType))
		{
			SubTableUtil hist = new SubTableUtil(getCtx(), base.getTableName());
			log.finest(hist.toString());
		}
		//	Delta	
		else if (X_AD_Table.SUBTABLETYPE_Delta_System.equals(p_SubTableType)
			|| X_AD_Table.SUBTABLETYPE_Delta_User.equals(p_SubTableType))
		{
			boolean userDef = true;
			SubTableUtil delta = new SubTableUtil(getCtx(), base.getTableName(), userDef);
			log.finest(delta.toString());			
		}
		else
			throw new CompiereSystemException(""Not supported SubTableType="" + p_SubTableType);
		
		return ""NIY"";
	}	//	doIt
"
org.compiere.process.BPartnerOrgUnLink.prepare,BPartnerOrgUnLink.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_BPartner_ID""))
				p_C_BPartner_ID = ((BigDecimal)element.getParameter()).intValue();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.BPartnerOrgUnLink.doIt,BPartnerOrgUnLink.java,"String doIt() throws Exception
	{
		log.info(""doIt - C_BPartner_ID="" + p_C_BPartner_ID); 
		if (p_C_BPartner_ID == 0)
			throw new IllegalArgumentException (""No Business Partner ID"");
		MBPartner bp = new MBPartner (getCtx(), p_C_BPartner_ID, get_TrxName());
		if (bp.get_ID() == 0)
			throw new IllegalArgumentException (""Business Partner not found - C_BPartner_ID="" + p_C_BPartner_ID);
		//
		if (bp.getAD_OrgBP_ID_Int() == 0)
			throw new IllegalArgumentException (""Business Partner not linked to an Organization"");
		bp.setAD_OrgBP_ID(null);
		if (!bp.save())
			throw new IllegalArgumentException (""Business Partner not changed"");
		
		return ""OK"";
	}	//	doIt
"
org.compiere.process.ImportRequest.doIt,ImportRequest.java,"String doIt() throws Exception {

		StringBuffer sql = null;
		int no = 0;
		String clientCheck = "" AND AD_Client_ID="" + m_AD_Client_ID;

		//	****	Prepare	****

		//	Delete Old Imported
		if (m_deleteOldImported)
		{
			sql = new StringBuffer (""DELETE FROM I_Request ""
				  + ""WHERE I_IsImported='Y'"").append (clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			log.fine(""Delete Old Impored ="" + no);
		}

		//Set Client from Key
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET AD_Client_ID = (SELECT AD_Client_ID FROM AD_Client c WHERE c.Value = r.ClientValue), "" 
				  +	"" ClientName = (SELECT Name FROM AD_Client c WHERE c.Value = r.ClientValue), ""
				  + "" Updated = COALESCE (Updated, SysDate),""
				  + "" UpdatedBy = COALESCE (UpdatedBy, 0)""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND AD_Client_ID is NULL""
				  + "" AND ClientValue is NOT NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info (""Set client from key ="" + no);

		//	Set Client from Name
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET AD_Client_ID = (SELECT AD_Client_ID FROM AD_Client c WHERE c.Name = r.ClientName), ""
				  + "" ClientValue = (SELECT Value FROM AD_Client c WHERE c.Name = r.ClientName),""
				  + "" Updated = COALESCE (Updated, SysDate),""
				  + "" UpdatedBy = COALESCE (UpdatedBy, 0)""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND AD_Client_ID is NULL""
				  + "" AND ClientName is NOT NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info (""Set client from name ="" + no);

		//Set Org from Key
		sql = new StringBuffer (""UPDATE I_Request r""
					  + "" SET AD_Org_ID = (SELECT AD_Org_ID FROM AD_Org o WHERE o.Value = r.OrgValue), ""
					  + "" OrgName = (SELECT Name FROM AD_Org o WHERE o.Value = r.OrgValue), ""
					  + "" Updated = COALESCE (Updated, SysDate),""
					  + "" UpdatedBy = COALESCE (UpdatedBy, 0)""
					  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
					  + "" AND (AD_Org_ID is NULL OR AD_Org_ID =0)""
					  + "" AND OrgValue is NOT NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info (""Set org from key ="" + no);

		//	Set Org from Name
		sql = new StringBuffer (""UPDATE I_Request r""
					  + "" SET AD_Org_ID = (SELECT AD_Org_ID FROM AD_Org o WHERE o.Name = r.OrgName), ""
					  + "" OrgValue = (SELECT Value FROM AD_Org o WHERE o.Name = r.OrgName), ""
					  + "" Updated = COALESCE (Updated, SysDate),""
					  + "" UpdatedBy = COALESCE (UpdatedBy, 0)""
					  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
					  + "" AND (AD_Org_ID is NULL OR AD_Org_ID =0)""
					  + "" AND OrgName is NOT NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info (""Set Org from name ="" + no);


		sql = new StringBuffer (""UPDATE I_Request r""
			  + "" SET AD_Client_ID = COALESCE (AD_Client_ID,"").append (m_AD_Client_ID).append (""),""
			  + "" AD_Org_ID = COALESCE (AD_Org_ID,"").append (m_AD_Org_ID).append (""),""
			  + "" IsActive = COALESCE (IsActive, 'Y'),""
			  + "" Created = COALESCE (Created, SysDate),""
			  + "" CreatedBy = COALESCE (CreatedBy, 0),""
			  + "" Updated = COALESCE (Updated, SysDate),""
			  + "" UpdatedBy = COALESCE (UpdatedBy, 0),""
			  + "" I_ErrorMsg = NULL,""
			  + "" I_IsImported = 'N' ""
			  + ""WHERE I_IsImported<>'Y' OR I_IsImported IS NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info (""Reset="" + no);

		String ts = DB.isPostgreSQL() ? 
				""COALESCE(I_ErrorMsg,'')""
				: ""I_ErrorMsg"";  //java bug, it could not be used directly
		sql = new StringBuffer (""UPDATE I_Request r ""
				+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Org, '""
				+ ""WHERE (AD_Org_ID IS NULL ""
				+ "" OR NOT EXISTS (SELECT * FROM AD_Org oo WHERE r.AD_Org_ID=oo.AD_Org_ID AND oo.IsSummary='N' AND oo.IsActive='Y'))""
				+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Org="" + no);
		
		// Set Request Type
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET R_RequestType_ID = "" 
				  + "" (SELECT R_RequestType_ID FROM R_RequestType rt WHERE rt.Name = r.ReqTypeName)""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.R_RequestType_ID is NULL""
				  + "" AND r.ReqTypeName is NOT NULL"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set RequestType="" + no);

		// Error - Request Type not specified
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid RequestTypeName, ' ""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.R_RequestType_ID is NULL"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid ReqType="" + no);
			
		// Set Group
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET R_Group_ID = "" 
				  + "" (SELECT R_Group_ID FROM R_Group g WHERE g.Name = r.GroupName)""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.R_Group_ID is NULL""
				  + "" AND r.GroupName is NOT NULL"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Group="" + no);
		
		// Error - Invalid Group
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid GroupName, ' ""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.R_Group_ID is NULL""
				  + "" AND r.GroupName is NOT NULL"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid GroupName="" + no);
		
		// Set Category
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET R_Category_ID = "" 
				  + "" (SELECT R_Category_ID FROM R_Category c WHERE c.Name = r.CategoryName)""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.R_Category_ID is NULL""
				  + "" AND r.CategoryName is NOT NULL"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Category="" + no);

		// Error - Invalid Category
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid CategoryName, ' ""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.R_Category_ID is NULL""
				  + "" AND r.CategoryName is NOT NULL"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid CategoryName="" + no);

		
		// Set Status
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET R_Status_ID = "" 
				  + "" (SELECT R_Status_ID FROM R_Status s, R_StatusCategory sc, R_RequestType t "" 
				  +	"" WHERE s.Name = r.StatusName and t.R_RequestType_ID = r.R_RequestType_ID and t.R_StatusCategory_ID = sc.R_StatusCategory_ID"" 
				  + "" AND s.R_StatusCategory_ID = sc.R_StatusCategory_ID)"" 
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.R_Status_ID is NULL""
				  + "" AND r.StatusName is NOT NULL"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Status="" + no);
		
		// Error - Invalid Status
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid StatusName, ' ""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.R_Status_ID is NULL""
				  + "" AND r.StatusName is NOT NULL"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid Status="" + no);

		
		// Set Resolution
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET R_Resolution_ID = "" 
				  + "" (SELECT R_Resolution_ID FROM R_Resolution rr "" 
				  +	"" WHERE rr.Name = r.ResolutionName )""  
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.R_Resolution_ID is NULL""
				  + "" AND r.ResolutionName is NOT NULL"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Resolution="" + no);
		
		// Error - Invalid Resolution
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid ResolutionName, ' ""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.R_Resolution_ID is NULL""
				  + "" AND r.ResolutionName is NOT NULL"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid Resolution="" + no);

		// Error - Invalid Summary
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Summary, ' ""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.Summary is NULL"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid Summary="" + no);

		// Set BP from BPartnerKey
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET C_BPartner_ID = (SELECT C_BPartner_ID FROM C_BPartner b""
				  + "" WHERE b.Value=r.BPartnerValue AND b.AD_Client_ID=r.AD_Client_ID ), "" 
				  +	"" BPartnerName=(SELECT Name FROM C_BPartner b""
				  + "" WHERE b.Value=r.BPartnerValue AND b.AD_Client_ID=r.AD_Client_ID )""
				  + "" WHERE C_BPartner_ID IS NULL AND BPartnerValue IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set BPartner from BPartnerKey="" + no);

		//	Set BP from BPartnerName
		sql = new StringBuffer (""UPDATE I_Request r""
			  + "" SET C_BPartner_ID=(SELECT C_BPartner_ID FROM C_BPartner b""
			  + "" WHERE b.Name=r.BpartnerName AND b.AD_Client_ID=r.AD_Client_ID ), ""
			  + "" BPartnerValue=(SELECT Value FROM C_BPartner b""
			  + "" WHERE b.Name=r.BpartnerName AND b.AD_Client_ID=r.AD_Client_ID )""
			  + "" WHERE C_BPartner_ID IS NULL AND BPartnerName IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set BPartner from BPartnerName="" + no);

		// Error - Invalid BPartner
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Bpartner, ' ""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.C_BPartner_ID is NULL""
				  + "" AND (r.BPartnerName is NOT NULL OR r.BPartnerValue IS NOT NULL)"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid BPartner="" + no);

		//	Set User from UserKey
		sql = new StringBuffer (""UPDATE I_Request r""
			  + "" SET AD_User_ID =(SELECT AD_User_ID FROM AD_User u""
			  + "" WHERE r.ContactValue=u.Value AND r.AD_Client_ID=u.AD_Client_ID AND u.C_Bpartner_ID = r.C_BPartner_ID), ""
			  + "" ContactName =(SELECT Name FROM AD_User u""
			  + "" WHERE r.ContactValue=u.Value AND r.AD_Client_ID=u.AD_Client_ID AND u.C_Bpartner_ID = r.C_BPartner_ID) ""
			  + "" WHERE AD_User_ID IS NULL AND ContactValue IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set User from UserKey="" + no);

		//	Set User from UserName
		sql = new StringBuffer (""UPDATE I_Request r""
			  + "" SET AD_User_ID=(SELECT AD_User_ID FROM AD_User u""
			  + "" WHERE r.ContactName=u.Name AND r.AD_Client_ID=u.AD_Client_ID AND u.C_Bpartner_ID = r.C_BPartner_ID ),""
			  + "" ContactValue =(SELECT Value FROM AD_User u""
			  + "" WHERE r.ContactName=u.Name AND r.AD_Client_ID=u.AD_Client_ID AND u.C_Bpartner_ID = r.C_BPartner_ID )""
			  + "" WHERE AD_User_ID IS NULL AND ContactName IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set User from UserName="" + no);

		// Error - Invalid User
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid User, ' ""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND (""
				  + "" (r.AD_User_ID is NULL AND (r.ContactName is NOT NULL OR r.ContactValue IS NOT NULL))""
				  + "" OR (r.AD_User_ID is NOT NULL AND NOT EXISTS""
				  + ""(SELECT 1 FROM AD_USER u WHERE u.AD_User_ID = r.AD_User_ID ""
				  + "" AND r.AD_Client_ID=u.AD_Client_ID AND u.C_Bpartner_ID = r.C_BPartner_ID)))"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid User="" + no);

		//	Set SalesRep from SalesRepKey
		sql = new StringBuffer (""UPDATE I_Request r""
			  + "" SET SalesRep_ID = (SELECT AD_User_ID FROM AD_User u""
			  + "" WHERE r.SalesRepValue=u.Value AND r.AD_Client_ID=u.AD_Client_ID ), "" 
			  + "" SalesRepName = (SELECT name FROM AD_User u""
			  + "" WHERE r.SalesRepValue=u.Value AND r.AD_Client_ID=u.AD_Client_ID ) ""
			  + ""WHERE SalesRep_ID IS NULL AND SalesRepValue IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set SalesRep from SalesRepValue="" + no);

		//	Set Representative from RepresentativeName
		sql = new StringBuffer (""UPDATE I_Request r""
			  + "" SET SalesRep_ID = (SELECT AD_User_ID FROM AD_User u""
			  + "" WHERE r.SalesRepName=u.Name AND r.AD_Client_ID=u.AD_Client_ID ), ""
			  + "" SalesRepValue =(SELECT  value FROM AD_User u""
			  + "" WHERE r.SalesRepName=u.Name AND r.AD_Client_ID=u.AD_Client_ID )""
			  + "" WHERE SalesRep_ID IS NULL AND SalesRepName IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set SalesRep from SalesRepName="" + no);


		// Error - Invalid SalesRep
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Representative, ' ""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.SalesRep_ID is NULL"").append (clientCheck);				  
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid SalesRep="" + no);

		// Set Table
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET AD_Table_ID = "" 
				  + "" (SELECT AD_Table_ID FROM AD_Table t "" 
				  +	"" WHERE t.Name = r.TableName )""  
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.AD_Table_ID is NULL""
				  + "" AND r.TableName is NOT NULL"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Table="" + no);
		
		// Error - Invalid Table
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid TableName, ' ""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.AD_Table_ID is NULL""
				  + "" AND r.TableName is NOT NULL"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid Table="" + no);
		
		// Set Related Request
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET R_RequestRelated_ID = "" 
				  + "" (SELECT R_Request_ID FROM R_Request rr "" 
				  +	"" WHERE rr.DocumentNo = r.RequestRelatedDocNo )""  
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.R_RequestRelated_ID is NULL""
				  + "" AND r.RequestRelatedDocNo is NOT NULL"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Resolution="" + no);
		
		// Error - Invalid Related Request
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Rel, ' ""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.R_RequestRelated_ID is NULL""
				  + "" AND r.RequestRelatedDocNo is NOT NULL"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid RelatedRequest="" + no);

		//	Set Source from SourceKey
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET R_Source_ID = (SELECT R_Source_ID FROM R_Source s""
				  + "" WHERE r.SourceValue=s.Value AND r.AD_Client_ID=s.AD_Client_ID ), ""
				  + "" SourceName = (SELECT name FROM R_Source s""
				  + "" WHERE r.SourceValue=s.Value AND r.AD_Client_ID=s.AD_Client_ID )""
				  + "" WHERE R_Source_ID IS NULL AND SourceValue IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Source from SourceValue ="" + no);

		//	Set Source from SourceName
		sql = new StringBuffer (""UPDATE I_Request r""
			  + "" SET R_Source_ID=(SELECT R_Source_ID FROM R_Source s""
			  + "" WHERE r.SourceName=s.Name AND r.AD_Client_ID=s.AD_Client_ID ), ""
			  + "" SourceValue = (SELECT value FROM R_Source s""
			  + "" WHERE r.SourceName=s.Name AND r.AD_Client_ID=s.AD_Client_ID ) ""
			  + "" WHERE R_Source_ID IS NULL AND SourceName IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Source from SourceName="" + no);


		// Error - Invalid Source
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Source, ' ""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.R_Source_ID IS NULL""
				  + "" AND (r.SourceName IS NOT NULL OR r.SourceValue is NOT NULL)"").append (clientCheck);				  
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid Source="" + no);

		// Set Role
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET AD_Role_ID = "" 
				  + "" (SELECT AD_Role_ID FROM AD_Role ar "" 
				  +	"" WHERE ar.Name = r.RoleName )""  
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.AD_Role_ID is NULL""
				  + "" AND r.RoleName is NOT NULL"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Role="" + no);
		
		// Error - Invalid Role
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid RoleName, ' ""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.AD_Role_ID is NULL""
				  + "" AND r.RoleName is NOT NULL"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid Role="" + no);

		//	Set ProductSpent from ProductSpentKey
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET M_ProductSpent_ID=(SELECT M_Product_ID FROM M_Product m""
				  + "" WHERE r.ProductSpentValue=m.Value AND r.AD_Client_ID=m.AD_Client_ID ), ""
				  + "" ProductSpentName =(SELECT Name FROM M_Product m""
				  + "" WHERE r.ProductSpentValue=m.Value AND r.AD_Client_ID=m.AD_Client_ID ) ""
				  + "" WHERE M_ProductSpent_ID IS NULL AND ProductSpentValue IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set ProductSpent from ProductSpentValue ="" + no);

			//	Set ProductSpent from ProductSpentName
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET M_ProductSpent_ID = (SELECT M_Product_ID FROM M_Product m""
				  + "" WHERE r.ProductSpentName=m.Name AND r.AD_Client_ID=m.AD_Client_ID ), ""
				  + "" ProductSpentValue =(SELECT Value FROM M_Product m""
				  + "" WHERE r.ProductSpentName=m.Name AND r.AD_Client_ID=m.AD_Client_ID )""
				  + "" WHERE M_ProductSpent_ID IS NULL AND ProductSpentName IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set ProductSpent from ProductSpentValue ="" + no);


		// Error - Invalid ProductSpent
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid ProductSpent, ' ""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.M_ProductSpent_ID IS NULL""
				  + "" AND (r.productSpentName IS NOT NULL OR r.ProductSpentValue is NOT NULL)"").append (clientCheck);				  
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid ProductSpent="" + no);
		
		//	Set Activity from ActivityKey
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET C_Activity_ID=(SELECT C_Activity_ID FROM C_Activity a""
				  + "" WHERE r.ActivityValue=a.Value AND r.AD_Client_ID=a.AD_Client_ID ), ""
				  + "" ActivityName=(SELECT Name FROM C_Activity a""
				  + "" WHERE r.ActivityValue=a.Value AND r.AD_Client_ID=a.AD_Client_ID )""
				  + "" WHERE C_Activity_ID IS NULL AND ActivityValue IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Activity from ActivityValue ="" + no);

		//	Set Activity from ActivityName
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET C_Activity_ID = (SELECT C_Activity_ID FROM C_Activity a""
				  + "" WHERE r.ActivityName=a.Name AND r.AD_Client_ID=a.AD_Client_ID ), ""
				  + "" ActivityValue =(SELECT Value FROM C_Activity a""
				  + "" WHERE r.ActivityName=a.Name AND r.AD_Client_ID=a.AD_Client_ID )""
				  + "" WHERE C_Activity_ID IS NULL AND ActivityName IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Activity from ActivityName ="" + no);
			
		// Error - Invalid Activity
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Activity, ' ""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.C_Activity_ID IS NULL""
				  + "" AND (r.ActivityName IS NOT NULL OR r.ActivityValue is NOT NULL)"").append (clientCheck);				  
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid Activity="" + no);

		// Set BP from BPartnerKey
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET C_BPartnerSR_ID=(SELECT C_BPartner_ID FROM C_BPartner b""
				  + "" WHERE b.Value=r.BPartnerSRValue AND b.AD_Client_ID=r.AD_Client_ID AND isSalesRep='Y'), ""
				  + "" BPartnerSRName =(SELECT Name FROM C_BPartner b""
				  + "" WHERE b.Value=r.BPartnerSRValue AND b.AD_Client_ID=r.AD_Client_ID AND isSalesRep='Y')""
				  + "" WHERE C_BPartnerSR_ID IS NULL AND BPartnerSRValue IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set BPartnerSR from BPartnerSRKey="" + no);

		//	Set BP (Agent) from BPartnerSRName
		sql = new StringBuffer (""UPDATE I_Request r""
			  + "" SET C_BPartnerSR_ID=(SELECT C_BPartner_ID FROM C_BPartner b""
			  + "" WHERE b.Name=r.BPartnerSRName AND b.AD_Client_ID=r.AD_Client_ID AND isSalesRep='Y'), ""
			  + "" BPartnerSRValue =(SELECT value FROM C_BPartner b""
			  + "" WHERE b.Name=r.BPartnerSRName AND b.AD_Client_ID=r.AD_Client_ID AND isSalesRep='Y')""
			  + "" WHERE C_BPartnerSR_ID IS NULL AND BPartnerSRName IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set BPartnerSR from BPartnerSRName="" + no);

		// Error - Invalid BPartnerSR
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Bpartner(Agent), ' ""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND ((r.C_BPartnerSR_ID is NULL AND (r.BPartnerSRName is NOT NULL OR r.BPartnerSRValue IS NOT NULL))""
				  + "" OR (r.C_BPartnerSR_ID is NOT NULL AND ""
				  + "" NOT EXISTS (SELECT 1 from C_BPartner b WHERE b.C_BPartner_ID = r.C_BPartnerSR_ID""
				  + "" AND b.AD_Client_ID=r.AD_Client_ID AND isSalesRep='Y')))"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid BPartner (Agent)="" + no);

		// Set Project from ProjectKey
		sql = new StringBuffer (""UPDATE I_Request r ""
				  + "" SET C_Project_ID=(SELECT C_Project_ID FROM C_Project p""
				  + "" WHERE p.Value=r.ProjectValue AND p.AD_Client_ID=r.AD_Client_ID ), ""
				  + "" ProjectName=(SELECT Name FROM C_Project p""
				  + "" WHERE p.Value=r.ProjectValue AND p.AD_Client_ID=r.AD_Client_ID ) ""
				  + "" WHERE C_Project_ID IS NULL AND ProjectValue IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Project from ProjectKey="" + no);

		// Set Project from ProjectName
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET C_Project_ID=(SELECT C_Project_ID FROM C_Project p""
				  + "" WHERE p.Name=r.ProjectName AND p.AD_Client_ID=r.AD_Client_ID ), ""
				  + "" ProjectValue=(SELECT Value FROM C_Project p""
				  + "" WHERE p.Name=r.ProjectName AND p.AD_Client_ID=r.AD_Client_ID ) ""
				  + "" WHERE C_Project_ID IS NULL AND ProjectName IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Project from ProjectName="" + no);

		// Error - Invalid Project
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Project, ' ""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.C_Project_ID is NULL""
				  + "" AND (r.ProjectName is NOT NULL OR r.ProjectValue IS NOT NULL)"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid Project="" + no);
		
		// Set Asset from AssetKey
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET A_Asset_ID=(SELECT A_Asset_ID FROM A_Asset a""
				  + "" WHERE a.Value=r.AssetValue AND a.AD_Client_ID=r.AD_Client_ID ), ""
				  + "" AssetName =(SELECT Name FROM A_Asset a""
				  + "" WHERE a.Value=r.AssetValue AND a.AD_Client_ID=r.AD_Client_ID ) ""
				  + "" WHERE A_Asset_ID IS NULL AND AssetValue IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Asset from AssetKey="" + no);

		// Set Project from AssetName
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET A_Asset_ID=(SELECT A_Asset_ID FROM A_Asset a""
				  + "" WHERE a.Name=r.AssetName AND a.AD_Client_ID=r.AD_Client_ID ), ""
				  + "" AssetValue=(SELECT Value FROM A_Asset a""
				  + "" WHERE a.Name=r.AssetName AND a.AD_Client_ID=r.AD_Client_ID ) ""
				  + "" WHERE A_Asset_ID IS NULL AND AssetName IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Asset from AssetName="" + no);

		// Error - Invalid Asset
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Asset, ' ""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.A_Asset_ID is NULL""
				  + "" AND (r.AssetName is NOT NULL OR r.AssetValue IS NOT NULL)"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid Asset="" + no);

		//	Set Product from ProductKey
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET M_Product_ID=(SELECT M_Product_ID FROM M_Product m""
				  + "" WHERE r.ProductValue=m.Value AND r.AD_Client_ID=m.AD_Client_ID ), ""
				  + "" ProductName=(SELECT Name FROM M_Product m""
				  + "" WHERE r.ProductValue=m.Value AND r.AD_Client_ID=m.AD_Client_ID )""
				  + "" WHERE M_Product_ID IS NULL AND ProductValue IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Product from ProductValue ="" + no);

		//	Set Product from ProductName
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET M_Product_ID =(SELECT M_Product_ID FROM M_Product m""
				  + "" WHERE r.ProductName=m.Name AND r.AD_Client_ID=m.AD_Client_ID ), ""
				  + "" ProductValue =(SELECT Value FROM M_Product m""
				  + "" WHERE r.ProductName=m.Name AND r.AD_Client_ID=m.AD_Client_ID )""
				  + "" WHERE M_Product_ID IS NULL AND ProductName IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Product from ProductName ="" + no);


		// Error - Invalid Product
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid ProductSpent, ' ""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.M_Product_ID IS NULL""
				  + "" AND (r.productName IS NOT NULL OR r.ProductValue is NOT NULL)"").append (clientCheck);				  
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid Product="" + no);

		//	Set Campaign from CampaignKey
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET C_Campaign_ID=(SELECT C_Campaign_ID FROM C_Campaign c""
				  + "" WHERE r.CampaignValue=c.Value AND r.AD_Client_ID=c.AD_Client_ID ), ""
				  + "" CampaignName =(SELECT Name FROM C_Campaign c""
				  + "" WHERE r.CampaignValue=c.Value AND r.AD_Client_ID=c.AD_Client_ID )""
				  + "" WHERE C_Campaign_ID IS NULL AND CampaignValue IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Campaign from CampaignValue ="" + no);

		//	Set Campaign from CampaignName
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET C_Campaign_ID =(SELECT C_Campaign_ID FROM C_Campaign c""
				  + "" WHERE r.CampaignName=c.Name AND r.AD_Client_ID=c.AD_Client_ID ), ""
				  + "" CampaignValue =(SELECT Value FROM C_Campaign c""
				  + "" WHERE r.CampaignName=c.Name AND r.AD_Client_ID=c.AD_Client_ID )""
				  + "" WHERE C_Campaign_ID IS NULL AND CampaignName IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Campaign from CampaignValue ="" + no);


		// Error - Invalid Campaign
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Campaign, ' ""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.C_Campaign_ID IS NULL""
				  + "" AND (r.CampaignName IS NOT NULL OR r.CampaignValue is NOT NULL)"").append (clientCheck);				  
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid Campaign="" + no);

		//	Set SalesRegion from SalesRegionKey
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET C_SalesRegion_ID=(SELECT C_SalesRegion_ID FROM C_SalesRegion s""
				  + "" WHERE r.SalesRegionValue=s.Value AND r.AD_Client_ID=s.AD_Client_ID ), ""
				  + "" SalesRegionName=(SELECT Name FROM C_SalesRegion s""
				  + "" WHERE r.SalesRegionValue=s.Value AND r.AD_Client_ID=s.AD_Client_ID )""
				  + "" WHERE C_SalesRegion_ID IS NULL AND SalesRegionValue IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set SalesRegion from SalesRegionValue ="" + no);

		//	Set SalesRegion from SalesRegionName
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET C_SalesRegion_ID=(SELECT C_SalesRegion_ID FROM C_SalesRegion s""
				  + "" WHERE r.SalesRegionName=s.Name AND r.AD_Client_ID=s.AD_Client_ID ), ""
				  + "" SalesRegionValue=(SELECT SalesRegionValue FROM C_SalesRegion s""
				  + "" WHERE r.SalesRegionName=s.Name AND r.AD_Client_ID=s.AD_Client_ID )""
				  + "" WHERE C_SalesRegion_ID IS NULL AND SalesRegionName IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set SalesRegion from SalesRegionValue ="" + no);

		// Error - Invalid SalesRegion
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid SalesRegion, ' ""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.C_SalesRegion_ID IS NULL""
				  + "" AND (r.SalesRegionName IS NOT NULL OR r.SalesRegionValue is NOT NULL)"").append (clientCheck);				  
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid SalesRegion="" + no);

		//	Set Order from OrderDocumentNo
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET C_Order_ID =(SELECT C_Order_ID FROM C_Order o""
				  + "" WHERE r.OrderDocumentNo = o.DocumentNo AND r.AD_Client_ID=o.AD_Client_ID )""
				  + "" WHERE C_Order_ID IS NULL AND OrderDocumentNo IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Order from OrderDocumentNo ="" + no);

		// Error - Invalid OrderDocumentNo
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid OrderDocumentNo, ' ""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.C_Order_ID IS NULL""
				  + "" AND r.OrderDocumentNo IS NOT NULL "").append (clientCheck);				  
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid OrderDocumentNo="" + no);

		//	Set Invoice from InvoiceDocumentNo
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET C_Invoice_ID =(SELECT C_Invoice_ID FROM C_Invoice i""
				  + "" WHERE r.InvoiceDocumentNo = i.DocumentNo AND r.AD_Client_ID=i.AD_Client_ID )""
				  + "" WHERE C_Invoice_ID IS NULL AND InvoiceDocumentNo IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Invoice from InvoiceDocumentNo ="" + no);

		// Error - Invalid InvoiceDocumentNo
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid InvoiceDocumentNo, ' ""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.C_Invoice_ID IS NULL""
				  + "" AND r.InvoiceDocumentNo IS NOT NULL "").append (clientCheck);				  
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid InvoiceDocumentNo="" + no);

		//	Set Payment from PaymentDocumentNo
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET C_Payment_ID =(SELECT C_Payment_ID FROM C_Payment p""
				  + "" WHERE r.PaymentDocumentNo = p.DocumentNo AND r.AD_Client_ID=p.AD_Client_ID )""
				  + "" WHERE C_Payment_ID IS NULL AND PaymentDocumentNo IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Payment from PaymentDocumentNo ="" + no);

		// Error - Invalid PaymentDocumentNo
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid PaymentDocumentNo, ' ""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.C_Payment_ID IS NULL""
				  + "" AND r.PaymentDocumentNo IS NOT NULL "").append (clientCheck);				  
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid PaymentDocumentNo="" + no);

		//	Set Order from InOutDocumentNo
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET M_InOut_ID =(SELECT M_InOut_ID FROM M_InOut i""
				  + "" WHERE r.InOutDocumentNo = i.DocumentNo AND r.AD_Client_ID=i.AD_Client_ID )""
				  + "" WHERE M_InOut_ID IS NULL AND InOutDocumentNo IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Shipment/Receipt from InOutDocumentNo ="" + no);

		// Error - Invalid InOutDocumentNo
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid InOutDocumentNo, ' ""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.M_InOut_ID IS NULL""
				  + "" AND r.InOutDocumentNo IS NOT NULL "").append (clientCheck);				  
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid InOutDocumentNo="" + no);

		//	Set Lead from LeadDocumentNo
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET C_Lead_ID =(SELECT C_Lead_ID FROM C_Lead l""
				  + "" WHERE r.LeadDocumentNo = l.DocumentNo AND r.AD_Client_ID=l.AD_Client_ID )""
				  + "" WHERE C_Lead_ID IS NULL AND LeadDocumentNo IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Lead from LeadDocumentNo ="" + no);

		// Error - Invalid LeadDocumentNo
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid LeadDocumentNo, ' ""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.C_Lead_ID IS NULL""
				  + "" AND r.LeadDocumentNo IS NOT NULL "").append (clientCheck);				  
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid LeadDocumentNo="" + no);

		//	Set ChangeRequest from ChangeRequestName
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET M_ChangeRequest_ID =(SELECT M_ChangeRequest_ID FROM M_ChangeRequest c""
				  + "" WHERE r.ChangeRequestName = c.Name AND r.AD_Client_ID=c.AD_Client_ID )""
				  + "" WHERE M_ChangeRequest_ID IS NULL AND ChangeRequestName IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set ChangeRequest from ChangeRequestName ="" + no);

		// Error - Invalid ChangeRequestName
		sql = new StringBuffer (""UPDATE I_Request r""
				  + "" SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid ChangeRequestName, ' ""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND r.M_ChangeRequest_ID IS NULL""
				  + "" AND r.ChangeRequestName IS NOT NULL "").append (clientCheck);				  
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid ChangeRequestName="" + no);

		commit();
		
		//	-- New Requests -----------------------------------------------------

		int noInsert = 0;
		int noProcessed = 0;

		//	Go through Request Records w/o
		sql = new StringBuffer (""SELECT * FROM I_Request ""
				  + ""WHERE I_IsImported='N'"").append (clientCheck)
					.append("" ORDER BY DocumentNo, I_Request_ID"");
		try
		{
			PreparedStatement pstmt = DB.prepareStatement (sql.toString(), get_TrxName());
			ResultSet rs = pstmt.executeQuery ();

			MRequest request = null;

			while (rs.next ())
			{
				X_I_Request imp = new X_I_Request (getCtx(), rs, get_TrxName());
				request = new MRequest (imp);
				
				// Save Request
				if (!request.save())
				{
					String msg = ""Could not save Request"";
					ValueNamePair pp = CLogger.retrieveError();
					if (pp != null)
						msg += "" - "" + pp.toStringX();
					imp.setI_ErrorMsg(msg);
					imp.save();
					continue;
				}
					
				noProcessed++;
				imp.setR_Request_ID(request.getR_Request_ID());
				imp.setI_IsImported(X_I_Locator.I_ISIMPORTED_Yes);
				imp.setProcessed(true);
				imp.save();
			}
			rs.close();
			pstmt.close();
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""Order - "" + sql.toString(), e);
		}

		//Set Error to indicator to not imported
		sql = new StringBuffer (""UPDATE I_Request ""
			+ ""SET I_IsImported='N', Updated=SysDate ""
			+ ""WHERE I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		addLog (0, null, new BigDecimal (no), ""@Errors@"");
		//addLog (0, null, new BigDecimal (noInsert), ""@R_Request_ID@: @Inserted@"");
		addLog (0, null, new BigDecimal (noProcessed), "" @Processed@"");
		return ""#"" + noInsert + ""/"" + noProcessed;
	}
"
org.compiere.process.ImportRequest.prepare,ImportRequest.java,"void prepare() {

		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) 
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_Client_ID""))
				m_AD_Client_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""AD_Org_ID""))
				m_AD_Org_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""DeleteOldImported""))
				m_deleteOldImported = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}// prepare
"
org.compiere.process.ImportReportLine.prepare,ImportReportLine.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) 
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_Client_ID""))
				m_AD_Client_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""PA_ReportLineSet_ID""))
				m_PA_ReportLineSet_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""DeleteOldImported""))
				m_deleteOldImported = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		if (m_DateValue == null)
			m_DateValue = new Timestamp (System.currentTimeMillis());
	}	//	prepare
"
org.compiere.process.ImportReportLine.doIt,ImportReportLine.java,"String doIt() throws java.lang.Exception
	{
		StringBuffer sql = null;
		int no = 0;
		String clientCheck = "" AND AD_Client_ID="" + m_AD_Client_ID;

		//	****	Prepare	****

		//	Delete Old Imported
		if (m_deleteOldImported)
		{
			sql = new StringBuffer (""DELETE FROM I_ReportLine ""
				+ ""WHERE I_IsImported='Y'"").append(clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			log.fine(""Delete Old Impored ="" + no);
		}

		//	Set Client, Org, IsActive, Created/Updated
		sql = new StringBuffer (""UPDATE I_ReportLine ""
			+ ""SET AD_Client_ID = COALESCE (AD_Client_ID, "").append(m_AD_Client_ID).append(""),""
			+ "" AD_Org_ID = COALESCE (AD_Org_ID, 0),""
			+ "" IsActive = COALESCE (IsActive, 'Y'),""
			+ "" Created = COALESCE (Created, SysDate),""
			+ "" CreatedBy = COALESCE (CreatedBy, 0),""
			+ "" Updated = COALESCE (Updated, SysDate),""
			+ "" UpdatedBy = COALESCE (UpdatedBy, 0),""
			+ "" I_ErrorMsg = NULL,""
			+ "" I_IsImported = 'N' ""
			+ ""WHERE I_IsImported<>'Y' OR I_IsImported IS NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Reset="" + no);

		//	ReportLineSetName (Default)
		if (m_PA_ReportLineSet_ID != 0)
		{
			sql = new StringBuffer (""UPDATE I_ReportLine i ""
				+ ""SET ReportLineSetName=(SELECT Name FROM PA_ReportLineSet r""
				+ "" WHERE PA_ReportLineSet_ID="").append(m_PA_ReportLineSet_ID).append("" AND i.AD_Client_ID=r.AD_Client_ID) ""
				+ ""WHERE ReportLineSetName IS NULL AND PA_ReportLineSet_ID IS NULL""
				+ "" AND I_IsImported<>'Y'"").append(clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			log.fine(""Set ReportLineSetName Default="" + no);
		}
		//	Set PA_ReportLineSet_ID
		sql = new StringBuffer (""UPDATE I_ReportLine i ""
			+ ""SET PA_ReportLineSet_ID=(SELECT PA_ReportLineSet_ID FROM PA_ReportLineSet r""
			+ "" WHERE i.ReportLineSetName=r.Name AND i.AD_Client_ID=r.AD_Client_ID) ""
			+ ""WHERE PA_ReportLineSet_ID IS NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set PA_ReportLineSet_ID="" + no);
		//
		String ts = DB.isPostgreSQL()?""COALESCE(I_ErrorMsg,'')"":""I_ErrorMsg"";  //java bug, it could not be used directly
		sql = new StringBuffer (""UPDATE I_ReportLine ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid ReportLineSet, ' ""
			+ ""WHERE PA_ReportLineSet_ID IS NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.config(""Invalid ReportLineSet="" + no);

		//	Ignore if there is no Report Line Name or ID
		sql = new StringBuffer (""UPDATE I_ReportLine ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'Ignored=NoLineName, ' ""
			+ ""WHERE PA_ReportLine_ID IS NULL AND Name IS NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.config(""Invalid LineName="" + no);

		//	Validate ElementValue
		sql = new StringBuffer (""UPDATE I_ReportLine i ""
			+ ""SET C_ElementValue_ID=(SELECT C_ElementValue_ID FROM C_ElementValue e""
			+ "" WHERE i.ElementValue=e.Value AND i.AD_Client_ID=e.AD_Client_ID) ""
			+ ""WHERE C_ElementValue_ID IS NULL AND ElementValue IS NOT NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set C_ElementValue_ID="" + no);
		
		//	Validate C_ElementValue_ID
		sql = new StringBuffer (""UPDATE I_ReportLine ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid ElementValue, ' ""
			+ ""WHERE C_ElementValue_ID IS NULL AND LineType<>'C'"" // MReportLine.LINETYPE_Calculation
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.config(""Invalid AccountType="" + no);

		//	Set SeqNo
		sql = new StringBuffer (""UPDATE I_ReportLine ""
			+ ""SET SeqNo=I_ReportLine_ID ""
			+ ""WHERE SeqNo IS NULL""
			+ "" AND I_IsImported='N'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set SeqNo Default="" + no);

		//	Copy/Sync from first Row of Line
		sql = new StringBuffer (""UPDATE I_ReportLine i ""
			+ ""SET (Description, SeqNo, IsSummary, IsPrinted, LineType, CalculationType, AmountType, PostingType)=""
			+ "" (SELECT Description, SeqNo, IsSummary, IsPrinted, LineType, CalculationType, AmountType, PostingType""
			+ "" FROM I_ReportLine ii WHERE i.Name=ii.Name AND i.PA_ReportLineSet_ID=ii.PA_ReportLineSet_ID""
			+ "" AND ii.I_ReportLine_ID=(SELECT MIN(I_ReportLine_ID) FROM I_ReportLine iii""
			+ "" WHERE i.Name=iii.Name AND i.PA_ReportLineSet_ID=iii.PA_ReportLineSet_ID)) ""
			+ ""WHERE EXISTS (SELECT *""
			+ "" FROM I_ReportLine ii WHERE i.Name=ii.Name AND i.PA_ReportLineSet_ID=ii.PA_ReportLineSet_ID""
			+ "" AND ii.I_ReportLine_ID=(SELECT MIN(I_ReportLine_ID) FROM I_ReportLine iii""
			+ "" WHERE i.Name=iii.Name AND i.PA_ReportLineSet_ID=iii.PA_ReportLineSet_ID))""
			+ "" AND I_IsImported='N'"").append(clientCheck);		//	 not if previous error
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Sync from first Row of Line="" + no);

		//	Validate IsSummary - (N) Y
		sql = new StringBuffer (""UPDATE I_ReportLine ""
			+ ""SET IsSummary='N' ""
			+ ""WHERE IsSummary IS NULL OR IsSummary NOT IN ('Y','N')""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set IsSummary Default="" + no);

		//	Validate IsPrinted - (Y) N
		sql = new StringBuffer (""UPDATE I_ReportLine ""
			+ ""SET IsPrinted='Y' ""
			+ ""WHERE IsPrinted IS NULL OR IsPrinted NOT IN ('Y','N')""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set IsPrinted Default="" + no);

		//	Validate Line Type - (S) C
		sql = new StringBuffer (""UPDATE I_ReportLine ""
			+ ""SET LineType='S' ""
			+ ""WHERE LineType IS NULL OR LineType NOT IN ('S','C')""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set LineType Default="" + no);

		//	Validate Optional Calculation Type - A P R S
		sql = new StringBuffer (""UPDATE I_ReportLine ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid CalculationType, ' ""
			+ ""WHERE CalculationType IS NOT NULL AND CalculationType NOT IN ('A','P','R','S')""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.config(""Invalid CalculationType="" + no);

		//	Validate Optional Amount Type -
		sql = new StringBuffer (""UPDATE I_ReportLine ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid CalculationType, ' ""
			+ ""WHERE AmountType IS NOT NULL AND UPPER(AmountType) NOT IN ('BP','CP','DP','QP', 'BY','CY','DY','QY', 'BT','CT','DT','QT')""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.config(""Invalid AmountType="" + no);

		//	Validate Optional Posting Type - A B E S R
		sql = new StringBuffer (""UPDATE I_ReportLine ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid CalculationType, ' ""
			+ ""WHERE PostingType IS NOT NULL AND PostingType NOT IN ('A','B','E','S','R')""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.config(""Invalid PostingType="" + no);

		//	Set PA_ReportLine_ID
		sql = new StringBuffer (""UPDATE I_ReportLine i ""
			+ ""SET PA_ReportLine_ID=(SELECT MAX(PA_ReportLine_ID) FROM PA_ReportLine r""
			+ "" WHERE i.Name=r.Name AND i.PA_ReportLineSet_ID=r.PA_ReportLineSet_ID) ""
			+ ""WHERE PA_ReportLine_ID IS NULL AND PA_ReportLineSet_ID IS NOT NULL""
			+ "" AND I_IsImported='N'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set PA_ReportLine_ID="" + no);

		commit();
		
		//	-------------------------------------------------------------------
		int noInsertLine = 0;
		int noUpdateLine = 0;

		//	****	Create Missing ReportLines
		sql = new StringBuffer (""SELECT DISTINCT PA_ReportLineSet_ID, Name ""
			+ ""FROM I_ReportLine ""
			+ ""WHERE I_IsImported='N' AND PA_ReportLine_ID IS NULL""
			+ "" AND I_IsImported='N'"").append(clientCheck);
		try
		{
			//	Insert ReportLine
			PreparedStatement pstmt_insertLine = DB.prepareStatement
				(""INSERT INTO PA_ReportLine ""
				+ ""(PA_ReportLine_ID,PA_ReportLineSet_ID,""
				+ ""AD_Client_ID,AD_Org_ID,IsActive,Created,CreatedBy,Updated,UpdatedBy,""
				+ ""Name,SeqNo,IsPrinted,IsSummary,LineType)""
				+ ""SELECT ?,PA_ReportLineSet_ID,""
				+ ""AD_Client_ID,AD_Org_ID,'Y',SysDate,CreatedBy,SysDate,UpdatedBy,""
				+ ""Name,SeqNo,IsPrinted,IsSummary,LineType ""
				//jz + ""FROM I_ReportLine ""
				// + ""WHERE PA_ReportLineSet_ID=? AND Name=? AND ROWNUM=1""		//	#2..3
				+ ""FROM I_ReportLine ""
				+ ""WHERE I_ReportLine_ID=(SELECT MAX(I_ReportLine_ID) ""		
				+ ""FROM I_ReportLine ""
				+ ""WHERE PA_ReportLineSet_ID=? AND Name=? ""		//	#2..3
				//jz + clientCheck, get_TrxName());
				+ clientCheck + "")"", get_TrxName());

			PreparedStatement pstmt = DB.prepareStatement(sql.toString(), get_TrxName());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				int PA_ReportLineSet_ID = rs.getInt(1);
				String Name = rs.getString(2);
				//
				try
				{
					int PA_ReportLine_ID = DB.getNextID(m_AD_Client_ID, ""PA_ReportLine"", get_TrxName());
					if (PA_ReportLine_ID <= 0)
						throw new DBException(""No NextID ("" + PA_ReportLine_ID + "")"");
					pstmt_insertLine.setInt(1, PA_ReportLine_ID);
					pstmt_insertLine.setInt(2, PA_ReportLineSet_ID);
					pstmt_insertLine.setString(3, Name);
					//
					no = pstmt_insertLine.executeUpdate();
					log.finest(""Insert ReportLine = "" + no + "", PA_ReportLine_ID="" + PA_ReportLine_ID);
					noInsertLine++;
				}
				catch (Exception ex)
				{
					log.finest(ex.toString());
					continue;
				}
			}
			rs.close();
			pstmt.close();
			//
			pstmt_insertLine.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, ""Create ReportLine"", e);
		}

		//	Set PA_ReportLine_ID (for newly created)
		sql = new StringBuffer (""UPDATE I_ReportLine i ""
			+ ""SET PA_ReportLine_ID=(SELECT MAX(PA_ReportLine_ID) FROM PA_ReportLine r""
			+ "" WHERE i.Name=r.Name AND i.PA_ReportLineSet_ID=r.PA_ReportLineSet_ID) ""
			+ ""WHERE PA_ReportLine_ID IS NULL AND PA_ReportLineSet_ID IS NOT NULL""
			+ "" AND I_IsImported='N'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set PA_ReportLine_ID="" + no);

		//	****	Update ReportLine
		sql = new StringBuffer (""UPDATE PA_ReportLine r ""
			+ ""SET (Description,SeqNo,IsSummary,IsPrinted,LineType,CalculationType,AmountType,PostingType,Updated,UpdatedBy)=""
			+ "" (SELECT Description,SeqNo,IsSummary,IsPrinted,LineType,CalculationType,AmountType,PostingType,SysDate,UpdatedBy""
			+ "" FROM I_ReportLine i WHERE r.Name=i.Name AND r.PA_ReportLineSet_ID=i.PA_ReportLineSet_ID""
			+ "" AND i.I_ReportLine_ID=(SELECT MIN(I_ReportLine_ID) FROM I_ReportLine iii""
			+ "" WHERE i.Name=iii.Name AND i.PA_ReportLineSet_ID=iii.PA_ReportLineSet_ID)) ""
			+ ""WHERE EXISTS (SELECT *""
			+ "" FROM I_ReportLine i WHERE r.Name=i.Name AND r.PA_ReportLineSet_ID=i.PA_ReportLineSet_ID""
			+ "" AND i.I_ReportLine_ID=(SELECT MIN(I_ReportLine_ID) FROM I_ReportLine iii""
			+ "" WHERE i.Name=iii.Name AND i.PA_ReportLineSet_ID=iii.PA_ReportLineSet_ID AND i.I_IsImported='N'))"")
			.append(clientCheck);
		noUpdateLine = DB.executeUpdate(sql.toString(), get_TrxName());
		log.config(""Update PA_ReportLine="" + noUpdateLine);


		//	-------------------------------------------------------------------
		int noInsertSource = 0;
		int noUpdateSource = 0;

		//	****	Create ReportSource
		sql = new StringBuffer (""SELECT I_ReportLine_ID, PA_ReportSource_ID ""
			+ ""FROM I_ReportLine ""
			+ ""WHERE PA_ReportLine_ID IS NOT NULL""
			+ "" AND I_IsImported='N'"").append(clientCheck);
		try
		{
			//	Insert ReportSource
			PreparedStatement pstmt_insertSource = DB.prepareStatement
				(""INSERT INTO PA_ReportSource ""
				+ ""(PA_ReportSource_ID,""
				+ ""AD_Client_ID,AD_Org_ID,IsActive,Created,CreatedBy,Updated,UpdatedBy,""
				+ ""PA_ReportLine_ID,ElementType,C_ElementValue_ID) ""
				+ ""SELECT ?,""
				+ ""AD_Client_ID,AD_Org_ID,'Y',SysDate,CreatedBy,SysDate,UpdatedBy,""
				+ ""PA_ReportLine_ID,'AC',C_ElementValue_ID ""
				+ ""FROM I_ReportLine ""
				+ ""WHERE I_ReportLine_ID=?""
				+ "" AND I_IsImported='N'""
				+ clientCheck, get_TrxName());

			//	Update ReportSource
			//jz 
			/*
			String sqlt=""UPDATE PA_ReportSource ""
				+ ""SET (ElementType,C_ElementValue_ID,Updated,UpdatedBy)=""
				+ "" (SELECT 'AC',C_ElementValue_ID,SysDate,UpdatedBy""
				+ "" FROM I_ReportLine""
				+ "" WHERE I_ReportLine_ID=?) ""
				+ ""WHERE PA_ReportSource_ID=?""
				+ clientCheck;
			PreparedStatement pstmt_updateSource = DB.prepareStatement
				(sqlt, get_TrxName());
				*/

			//	Set Imported = Y
			PreparedStatement pstmt_setImported = DB.prepareStatement
				(""UPDATE I_ReportLine SET I_IsImported='Y',""
				+ "" PA_ReportSource_ID=?, ""
				+ "" Updated=SysDate, Processed='Y' WHERE I_ReportLine_ID=?"", get_TrxName());

			PreparedStatement pstmt = DB.prepareStatement(sql.toString(), get_TrxName());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				int I_ReportLine_ID = rs.getInt(1);
				int PA_ReportSource_ID = rs.getInt(2);
				//
				if (PA_ReportSource_ID == 0)			//	New ReportSource
				{
					try
					{
						PA_ReportSource_ID = DB.getNextID(m_AD_Client_ID, ""PA_ReportSource"", get_TrxName());
						if (PA_ReportSource_ID <= 0)
							throw new DBException(""No NextID ("" + PA_ReportSource_ID + "")"");
						pstmt_insertSource.setInt(1, PA_ReportSource_ID);
						pstmt_insertSource.setInt(2, I_ReportLine_ID);
						//
						no = pstmt_insertSource.executeUpdate();
						log.finest(""Insert ReportSource = "" + no + "", I_ReportLine_ID="" + I_ReportLine_ID + "", PA_ReportSource_ID="" + PA_ReportSource_ID);
						noInsertSource++;
					}
					catch (Exception ex)
					{
						log.finest(""Insert ReportSource - "" + ex.toString());
						sql = new StringBuffer (""UPDATE I_ReportLine i ""
							+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||"").append(DB.TO_STRING(""Insert ElementSource: "" + ex.toString()))
							.append(""WHERE I_ReportLine_ID="").append(I_ReportLine_ID);
						DB.executeUpdate(sql.toString(), get_TrxName());
						continue;
					}
				}
				else								//	update Report Source
				{
					//jz
					String sqlt=""UPDATE PA_ReportSource ""
						+ ""SET (ElementType,C_ElementValue_ID,Updated,UpdatedBy)=""
						+ "" (SELECT CAST('AC' AS CHAR(2)),C_ElementValue_ID,SysDate,UpdatedBy""  //jz
						+ "" FROM I_ReportLine""
						+ "" WHERE I_ReportLine_ID="" + I_ReportLine_ID + "") ""
						+ ""WHERE PA_ReportSource_ID=""+PA_ReportSource_ID+"" ""
						+ clientCheck;
					PreparedStatement pstmt_updateSource = DB.prepareStatement
						(sqlt, get_TrxName());
					//pstmt_updateSource.setInt(1, I_ReportLine_ID);
					//pstmt_updateSource.setInt(2, PA_ReportSource_ID);
					try
					{
						no = pstmt_updateSource.executeUpdate();
						//no = DB.executeUpdate(sqlt, get_TrxName());
						log.finest(""Update ReportSource = "" + no + "", I_ReportLine_ID="" + I_ReportLine_ID + "", PA_ReportSource_ID="" + PA_ReportSource_ID);
						noUpdateSource++;
					}
					catch (SQLException ex)
					{
						log.finest( ""Update ReportSource - "" + ex.toString());
						sql = new StringBuffer (""UPDATE I_ReportLine i ""
							+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||"").append(DB.TO_STRING(""Update ElementSource: "" + ex.toString()))
							.append(""WHERE I_ReportLine_ID="").append(I_ReportLine_ID);
						DB.executeUpdate(sql.toString(), get_TrxName());
						continue;
					}
					pstmt_updateSource.close();
				}	//	update source

				//	Set Imported to Y
				pstmt_setImported.setInt(1, PA_ReportSource_ID);
				pstmt_setImported.setInt(2, I_ReportLine_ID);
				no = pstmt_setImported.executeUpdate();
				if (no != 1)
					log.log(Level.SEVERE, ""Set Imported="" + no);
				//
				commit();
			}
			rs.close();
			pstmt.close();
			//
			pstmt_insertSource.close();
			//jz pstmt_updateSource.close();
			pstmt_setImported.close();
			//
		}
		catch (SQLException e)
		{
		}

		//	Set Error to indicator to not imported
		sql = new StringBuffer (""UPDATE I_ReportLine ""
			+ ""SET I_IsImported='N', Updated=SysDate ""
			+ ""WHERE I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		addLog (0, null, new BigDecimal (no), ""@Errors@"");
		addLog (0, null, new BigDecimal (noInsertLine), ""@PA_ReportLine_ID@: @Inserted@"");
		addLog (0, null, new BigDecimal (noUpdateLine), ""@PA_ReportLine_ID@: @Updated@"");
		addLog (0, null, new BigDecimal (noInsertSource), ""@PA_ReportSource_ID@: @Inserted@"");
		addLog (0, null, new BigDecimal (noUpdateSource), ""@PA_ReportSource_ID@: @Updated@"");

		return """";
	}	//	doIt
"
org.compiere.process.ProjectGenPO.prepare,ProjectGenPO.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_Project_ID""))
				m_C_Project_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""C_ProjectLine_ID""))
				m_C_ProjectLine_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""ConsolidateDocument""))
				m_ConsolidateDocument = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.ProjectGenPO.doIt,ProjectGenPO.java,"String doIt() throws Exception
	{
		log.info(""doIt - C_Project_ID="" + m_C_Project_ID + "" - C_ProjectLine_ID="" + m_C_ProjectLine_ID + "" - Consolidate="" + m_ConsolidateDocument);
		if (m_C_ProjectLine_ID != 0)
		{
			MProjectLine projectLine = new MProjectLine(getCtx(), m_C_ProjectLine_ID, get_TrxName());
			MProject project = new MProject (getCtx(), projectLine.getC_Project_ID(), get_TrxName());
			createPO (project, projectLine);
		}
		else
		{
			MProject project = new MProject (getCtx(), m_C_Project_ID, get_TrxName());
			MProjectLine[] lines = project.getLines();
			for (MProjectLine element : lines)
				createPO (project, element);
		}
		return """";
	}	//	doIt
"
org.compiere.process.ProjectGenPO.createPO,ProjectGenPO.java,"void createPO (MProject project, MProjectLine projectLine)
	{
		if (projectLine.getM_Product_ID() == 0)
		{
			addLog (projectLine.getLine() ,null,null, ""Line has no Product"");
			return;
		}
		if (projectLine.getC_OrderPO_ID() != 0)
		{
			addLog (projectLine.getLine() ,null,null, ""Line was ordered previously"");
			return;
		}

		//	PO Record
		MProductPO[] pos = MProductPO.getOfProduct(getCtx(), projectLine.getM_Product_ID(), get_TrxName());
		if (pos == null || pos.length == 0)
		{
			addLog (projectLine.getLine() ,null,null, ""Product has no PO record"");
			return;
		}

		//	Create to Order
		MOrder order = null;
		//	try to find PO to C_BPartner
		for (int i = 0; i < m_pos.size(); i++)
		{
			MOrder test = m_pos.get(i);
			if (test.getC_BPartner_ID() == pos[0].getC_BPartner_ID())
			{
				order = test;
				break;
			}
		}
		if (order == null)	//	create new Order
		{
			//	Vendor
			MBPartner bp = new MBPartner (getCtx(), pos[0].getC_BPartner_ID(), get_TrxName());
			//	New Order
			order = new MOrder (project, false, null);
			int AD_Org_ID = projectLine.getAD_Org_ID();
			if (AD_Org_ID == 0)
			{
				log.warning(""createPOfromProjectLine - AD_Org_ID=0"");
				AD_Org_ID = getCtx().getAD_Org_ID();	
				if (AD_Org_ID != 0)
					projectLine.setAD_Org_ID(AD_Org_ID);
			}
			order.setClientOrg (projectLine.getAD_Client_ID (), AD_Org_ID);
			order.setBPartner (bp);
			order.save ();
			//	optionally save for consolidation
			if (m_ConsolidateDocument)
				m_pos.add(order);
		}

		//	Create Line
		MOrderLine orderLine = new MOrderLine (order);
		orderLine.setM_Product_ID(projectLine.getM_Product_ID(), true);
		orderLine.setQty(projectLine.getPlannedQty());
		orderLine.setDescription(projectLine.getDescription());

		//	(Vendor) PriceList Price
		orderLine.setPrice();
		if (orderLine.getPriceActual().signum() == 0)
		{
			//	Try to find purchase price
			BigDecimal poPrice = pos[0].getPricePO();
			int C_Currency_ID = pos[0].getC_Currency_ID();
			//
			if (poPrice == null || poPrice.signum() == 0)
				poPrice = pos[0].getPriceLastPO();
			if (poPrice == null || poPrice.signum() == 0)
				poPrice = pos[0].getPriceList();
			//	We have a price
			if (poPrice != null && poPrice.signum() != 0)
			{
				if (order.getC_Currency_ID() != C_Currency_ID)
					poPrice = MConversionRate.convert(getCtx(), poPrice, 
						C_Currency_ID, order.getC_Currency_ID(), 
						order.getDateAcct(), order.getC_ConversionType_ID(), 
						order.getAD_Client_ID(), order.getAD_Org_ID());
				orderLine.setPrice(poPrice);
			}
		}
		
		orderLine.setTax();
		orderLine.save();

		//	update ProjectLine
		projectLine.setC_OrderPO_ID(order.getC_Order_ID());
		projectLine.save();
		addLog (projectLine.getLine(), null, projectLine.getPlannedQty(), order.getDocumentNo());
	}	//	createPOfromProjectLine
"
org.compiere.process.DistributionRun.prepare,DistributionRun.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
		//	log.fine(""prepare - "" + para[i]);
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_DocType_ID""))
				p_C_DocType_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""DatePromised""))
				p_DatePromised = (Timestamp)element.getParameter();
			else if (name.equals(""IsTest""))
				p_IsTest = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);		
		}
		p_M_DistributionRun_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.DistributionRun.doIt,DistributionRun.java,"String doIt() throws Exception
	{
		log.info(""M_DistributionRun_ID="" + p_M_DistributionRun_ID 
			+ "", C_DocType_ID="" + p_C_DocType_ID
			+ "", DatePromised="" + p_DatePromised
			+ "", Test="" + p_IsTest);
		//	Distribution Run
		if (p_M_DistributionRun_ID == 0)
			throw new IllegalArgumentException (""No Distribution Run ID"");
		m_run = new MDistributionRun(getCtx(), p_M_DistributionRun_ID, get_TrxName());
		if (m_run.get_ID() == 0)
			throw new Exception (""Distribution Run not found -  M_DistributionRun_ID="" +  p_M_DistributionRun_ID);
		m_runLines = m_run.getLines(true);
		if (m_runLines == null || m_runLines.length == 0)
			throw new Exception (""No active, non-zero Distribution Run Lines found"");
		
		//	Document Type
		if (p_C_DocType_ID == 0)
			throw new IllegalArgumentException (""No Document Type ID"");
		m_docType = new MDocType(getCtx(), p_C_DocType_ID, null);	//	outside p_trx
		if (m_docType.get_ID() == 0)
			throw new Exception (""Document Type not found -  C_DocType_ID="" +  p_C_DocType_ID);
		//
		m_DateOrdered = new Timestamp (System.currentTimeMillis());
		if (p_DatePromised == null)
			p_DatePromised = m_DateOrdered;
		
		//	Create Temp Lines
		if (insertDetails() == 0)
			throw new Exception (""No Lines"");
		
		//	Order By Distribution Run Line
		m_details = MDistributionRunDetail.get(getCtx(), p_M_DistributionRun_ID, false, get_TrxName());
		//	First Run -- Add & Round
		addAllocations ();		

		//	Do Allocation
		int loops = 0;
		while (!isAllocationEqTotal ())
		{
			adjustAllocation();
			addAllocations();
			if (++loops > 10)
				throw new Exception (""Loop detected - more than 10 Allocation attempts"");
		}
		
		//	Order By Business Partner
		m_details = MDistributionRunDetail.get(getCtx(), p_M_DistributionRun_ID, true, get_TrxName());
		//	Create Orders
		createOrders();
		
		return ""@Created@ #"" + m_counter;
	}	//	doIt
"
org.compiere.process.DistributionRun.insertDetails,DistributionRun.java,"int insertDetails()
	{
		//	Handle NULL
		String sql = ""UPDATE M_DistributionRunLine SET MinQty = 0 WHERE MinQty IS NULL"";
		int no = DB.executeUpdate(sql, get_TrxName());
		sql = ""UPDATE M_DistributionListLine SET MinQty = 0 WHERE MinQty IS NULL"";
		no = DB.executeUpdate(sql, get_TrxName());
		//	Total Ratio
		sql = ""UPDATE M_DistributionList l ""
			+ ""SET RatioTotal = (SELECT SUM(Ratio) FROM M_DistributionListLine ll ""
				+ "" WHERE l.M_DistributionList_ID=ll.M_DistributionList_ID) ""
			+ ""WHERE EXISTS (SELECT * FROM M_DistributionRunLine rl""
				+ "" WHERE l.M_DistributionList_ID=rl.M_DistributionList_ID""
				+ "" AND rl.M_DistributionRun_ID="" + p_M_DistributionRun_ID + "")"";
		no = DB.executeUpdate(sql, get_TrxName());
		
		//	Delete Old
		sql = ""DELETE FROM T_DistributionRunDetail WHERE M_DistributionRun_ID=""
			+ p_M_DistributionRun_ID;
		no = DB.executeUpdate(sql, get_TrxName());
		log.fine(""insertDetails - deleted #"" + no);
		//	Insert New
		sql = ""INSERT INTO T_DistributionRunDetail ""
			+ ""(M_DistributionRun_ID, M_DistributionRunLine_ID, M_DistributionList_ID, M_DistributionListLine_ID,""
			+ ""AD_Client_ID,AD_Org_ID, IsActive, Created,CreatedBy, Updated,UpdatedBy,""
			+ ""C_BPartner_ID, C_BPartner_Location_ID, M_Product_ID,""
			+ ""Ratio, MinQty, Qty) ""
			//
			+ ""SELECT rl.M_DistributionRun_ID, rl.M_DistributionRunLine_ID,""
			+ ""ll.M_DistributionList_ID, ll.M_DistributionListLine_ID, ""
			+ ""rl.AD_Client_ID,rl.AD_Org_ID, rl.IsActive, rl.Created,rl.CreatedBy, rl.Updated,rl.UpdatedBy,""
			+ ""ll.C_BPartner_ID, ll.C_BPartner_Location_ID, rl.M_Product_ID, ""
			+ ""ll.Ratio, ""
			+ ""CASE WHEN rl.MinQty > ll.MinQty THEN rl.MinQty ELSE ll.MinQty END, ""
			+ ""(ll.Ratio/l.RatioTotal*rl.TotalQty)""
			+ ""FROM M_DistributionRunLine rl""
			+ "" INNER JOIN M_DistributionList l ON (rl.M_DistributionList_ID=l.M_DistributionList_ID)""
			+ "" INNER JOIN M_DistributionListLine ll ON (rl.M_DistributionList_ID=ll.M_DistributionList_ID) ""
			+ ""WHERE rl.M_DistributionRun_ID="" + p_M_DistributionRun_ID
			+ "" AND l.RatioTotal<>0 AND rl.IsActive='Y' AND ll.IsActive='Y'"";
		no = DB.executeUpdate(sql, get_TrxName());
		log.fine(""inserted #"" + no);
		return no;
	}	//	insertDetails
"
org.compiere.process.DistributionRun.addAllocations,DistributionRun.java,"void addAllocations ()
	{
		//	Reset
		for (MDistributionRunLine runLine : m_runLines) {
			runLine.resetCalculations();
		}
		//	Add Up
		for (MDistributionRunDetail detail : m_details) {
			for (MDistributionRunLine runLine : m_runLines) {
				if (runLine.getM_DistributionRunLine_ID() == detail.getM_DistributionRunLine_ID())
				{
					//	Round
					detail.round(runLine.getUOMPrecision());
					//	Add
					runLine.addActualMin(detail.getMinQty());
					runLine.addActualQty(detail.getQty());
					runLine.addActualAllocation(detail.getActualAllocation());
					runLine.setMaxAllocation(detail.getActualAllocation(), false);
					//
					log.fine(""RunLine="" + runLine.getLine() 
						+ "": BP_ID="" + detail.getC_BPartner_ID() 
						+ "", Min="" + detail.getMinQty()
						+ "", Qty="" + detail.getQty()
						+ "", Allocation="" + detail.getActualAllocation());
					continue;
				}
			}
		}	//	for all detail lines
		
		//	Info
		for (MDistributionRunLine runLine : m_runLines) {
			log.fine(""Run - "" + runLine.getInfo());
		}
	}	//	addAllocations
"
org.compiere.process.DistributionRun.isAllocationEqTotal,DistributionRun.java,"boolean isAllocationEqTotal() throws Exception
	{
		boolean allocationEqTotal = true;
		//	Check total min qty & delta
		for (MDistributionRunLine runLine : m_runLines) {
			if (runLine.isActualMinGtTotal())
				throw new Exception (""Line "" + runLine.getLine() 
					+ "" Sum of Min Qty="" + runLine.getActualMin() 
					+ "" is greater than Total Qty="" + runLine.getTotalQty());
			if (allocationEqTotal && !runLine.isActualAllocationEqTotal())
				allocationEqTotal = false;
		}	//	for all run lines
		log.info(""="" + allocationEqTotal);
		return allocationEqTotal;
	}	//	isAllocationEqTotal
"
org.compiere.process.DistributionRun.adjustAllocation,DistributionRun.java,"void adjustAllocation() throws Exception
	{
		for (int j = 0; j < m_runLines.length; j++)
			adjustAllocation(j);
	}	//	adjustAllocation
"
org.compiere.process.DistributionRun.adjustAllocation,DistributionRun.java,"void adjustAllocation(int index) throws Exception
	{
		MDistributionRunLine runLine = m_runLines[index];
		BigDecimal difference = runLine.getActualAllocationDiff();
		if (difference.compareTo(Env.ZERO) == 0)
			return;
		//	Adjust when difference is -1->1 or last difference is the same 
		boolean adjustBiggest = difference.abs().compareTo(Env.ONE) <= 0
			|| difference.abs().compareTo(runLine.getLastDifference().abs()) == 0;
		log.fine(""Line="" + runLine.getLine() 
			+ "", Diff="" + difference + "", Adjust="" + adjustBiggest);
		//	Adjust Biggest Amount
		if (adjustBiggest)
		{
			for (MDistributionRunDetail detail : m_details) {
				if (runLine.getM_DistributionRunLine_ID() == detail.getM_DistributionRunLine_ID())
				{
					log.fine(""Biggest - DetailAllocation="" + detail.getActualAllocation()
						+ "", MaxAllocation="" + runLine.getMaxAllocation() 
						+ "", Qty Difference="" + difference);
					if (detail.getActualAllocation().compareTo(runLine.getMaxAllocation()) == 0
						&& detail.isCanAdjust())
					{
						detail.adjustQty(difference);
						detail.save();
						return;
					}
				}
			}	//	for all detail lines
			throw new Exception (""Cannot adjust Difference = "" + difference 
				+ "" - You need to change Total Qty or Min Qty"");
		}
		else	//	Distibute
		{
			//	New Total Ratio
			BigDecimal ratioTotal = Env.ZERO;
			for (MDistributionRunDetail detail : m_details) {
				if (runLine.getM_DistributionRunLine_ID() == detail.getM_DistributionRunLine_ID())
				{
					if (detail.isCanAdjust())
						ratioTotal = ratioTotal.add(detail.getRatio());
				}
			}
			if (ratioTotal.compareTo(Env.ZERO) == 0)
				throw new Exception (""Cannot distribute Difference = "" + difference 
					+ "" - You need to change Total Qty or Min Qty"");
			//	Distribute
			for (MDistributionRunDetail detail : m_details) {
				if (runLine.getM_DistributionRunLine_ID() == detail.getM_DistributionRunLine_ID())
				{
					if (detail.isCanAdjust())
					{
						BigDecimal diffRatio = detail.getRatio().multiply(difference)
							.divide(ratioTotal, BigDecimal.ROUND_HALF_UP);	// precision from total
						log.fine(""Detail="" + detail.toString()
							+ "", Allocation="" + detail.getActualAllocation()
							+ "", DiffRatio="" + diffRatio);
						detail.adjustQty(diffRatio);
						detail.save();
					}
				}
			}
		}
		runLine.setLastDifference(difference);
	}	//	adjustAllocation
"
org.compiere.process.DistributionRun.createOrders,DistributionRun.java,"boolean createOrders()
	{
		//	Get Counter Org/BP
		int runAD_Org_ID = m_run.getAD_Org_ID();
		if (runAD_Org_ID == 0)
			runAD_Org_ID = getCtx().getAD_Org_ID();
		MOrg runOrg = MOrg.get(getCtx(), runAD_Org_ID);
		int runC_BPartner_ID = runOrg.getLinkedC_BPartner_ID();
		boolean counter = !m_run.isCreateSingleOrder()	//	no single Order 
			&& runC_BPartner_ID > 0						//	Org linked to BP
			&& !m_docType.isSOTrx();					//	PO
		MBPartner runBPartner = counter ? new MBPartner(getCtx(), runC_BPartner_ID, get_TrxName()) : null;
		if (!counter || runBPartner == null || runBPartner.get_ID() != runC_BPartner_ID)
			counter = false;
		if (counter)
			log.info(""RunBP="" + runBPartner
				+ "" - "" + m_docType);
		log.info(""Single="" + m_run.isCreateSingleOrder()
			+ "" - "" + m_docType + "",SO="" + m_docType.isSOTrx());
		log.fine(""Counter="" + counter 
			+ "",C_BPartner_ID="" + runC_BPartner_ID + "","" + runBPartner);
		//
		MBPartner bp = null;
		MOrder singleOrder = null;
		MProduct product = null;
		//	Consolidated Order
		if (m_run.isCreateSingleOrder())
		{
			bp = new MBPartner (getCtx(), m_run.getC_BPartner_ID(), get_TrxName());
			if (bp.get_ID() == 0)
				throw new IllegalArgumentException(""Business Partner not found - C_BPartner_ID="" + m_run.getC_BPartner_ID());
			//
			if (!p_IsTest)
			{
				singleOrder = new MOrder (getCtx(), 0, get_TrxName());
				singleOrder.setC_DocTypeTarget_ID(m_docType.getC_DocType_ID());
				singleOrder.setC_DocType_ID(m_docType.getC_DocType_ID());
				singleOrder.setIsReturnTrx(m_docType.isReturnTrx());
				singleOrder.setIsSOTrx(m_docType.isSOTrx());
				singleOrder.setBPartner(bp);
				if (m_run.getC_BPartner_Location_ID() != 0)
					singleOrder.setC_BPartner_Location_ID(m_run.getC_BPartner_Location_ID());
				singleOrder.setDateOrdered(m_DateOrdered);
				singleOrder.setDatePromised(p_DatePromised);
				if (!singleOrder.save())
				{
					log.log(Level.SEVERE, ""Order not saved"");
					return false;
				}
				m_counter++;
			}
		}

		int lastC_BPartner_ID = 0;
		int lastC_BPartner_Location_ID = 0;
		MOrder order = null;
		//	For all lines
		for (MDistributionRunDetail detail : m_details) {
			//	Create Order Header
			if (m_run.isCreateSingleOrder())
				order = singleOrder;
			//	New Business Partner
			else if (lastC_BPartner_ID != detail.getC_BPartner_ID()
				|| lastC_BPartner_Location_ID != detail.getC_BPartner_Location_ID())
			{
				//	finish order
				order = null;
			}
			lastC_BPartner_ID = detail.getC_BPartner_ID();
			lastC_BPartner_Location_ID = detail.getC_BPartner_Location_ID();
			
			//	New Order
			if (order == null)
			{
				bp = new MBPartner (getCtx(), detail.getC_BPartner_ID(), get_TrxName());
				if (!p_IsTest)
				{
					order = new MOrder (getCtx(), 0, get_TrxName());
					order.setC_DocTypeTarget_ID(m_docType.getC_DocType_ID());
					order.setIsReturnTrx(m_docType.isReturnTrx());
					order.setC_DocType_ID(m_docType.getC_DocType_ID());
					order.setIsSOTrx(m_docType.isSOTrx());
					//	Counter Doc
					if (counter && bp.getAD_OrgBP_ID_Int() > 0)
					{
						log.fine(""Counter - From_BPOrg="" + bp.getAD_OrgBP_ID_Int() 
							+ ""-"" + bp + "", To_BP="" + runBPartner);
						order.setAD_Org_ID(bp.getAD_OrgBP_ID_Int());
						MOrgInfo oi = MOrgInfo.get(getCtx(), bp.getAD_OrgBP_ID_Int(), null);
						if (oi.getM_Warehouse_ID() > 0)
							order.setM_Warehouse_ID(oi.getM_Warehouse_ID());
						order.setBPartner(runBPartner);
					}
					else	//	normal
					{
						log.fine(""From_Org="" + runAD_Org_ID 
							+ "", To_BP="" + bp);
						order.setAD_Org_ID(runAD_Org_ID);
						order.setBPartner(bp);
						if (detail.getC_BPartner_Location_ID() != 0)
							order.setC_BPartner_Location_ID(detail.getC_BPartner_Location_ID());
					}
					order.setDateOrdered(m_DateOrdered);
					order.setDatePromised(p_DatePromised);
					if (!order.save())
					{
						log.log(Level.SEVERE, ""Order not saved"");
						return false;
					}
				}
			}
			
			//	Line
			if (product == null || product.getM_Product_ID() != detail.getM_Product_ID())
				product = MProduct.get (getCtx(), detail.getM_Product_ID());
			if (p_IsTest)
			{
				addLog(0,null, detail.getActualAllocation(), 
					bp.getName() + "" - "" + product.getName());
				continue;
			}

			//	Create Order Line
			MOrderLine line = new MOrderLine(order);
			if (counter && bp.getAD_OrgBP_ID_Int() > 0)
				;	//	don't overwrite counter doc
			else	//	normal - optionally overwrite
			{
				line.setC_BPartner_ID(detail.getC_BPartner_ID());
				if (detail.getC_BPartner_Location_ID() != 0)
					line.setC_BPartner_Location_ID(detail.getC_BPartner_Location_ID());
			}
			//
			line.setProduct(product);
			line.setQty(detail.getActualAllocation());
			line.setPrice();
			if (!line.save())
			{
				log.log(Level.SEVERE, ""OrderLine not saved"");
				return false;
			}
			addLog(0,null, detail.getActualAllocation(), order.getDocumentNo() 
				+ "": "" + bp.getName() + "" - "" + product.getName());
		}
		//	finish order
		order = null;

		
		return true;
	}	//	createOrders
"
org.compiere.process.ComponentRemove.prepare,ComponentRemove.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""EntityType""))
				p_entityType = (String)element.getParameter();
			else if (name.equals(""DeleteRecord""))
				p_isCascade = ""Y"".equals(element.getParameter());
			else if (name.equals(""DeleteDeploy""))
				p_deleteFile = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.ComponentRemove.doIt,ComponentRemove.java,"String doIt() throws Exception
	{
		log.info(""EntityType="" + p_entityType);
		if (p_entityType == null || p_entityType.length() < 4)
			throw new CompiereUserException(""You cannot remove component: "" + p_entityType);
		
		MEntityType et = MEntityType.getEntityType(getCtx(), p_entityType);
		if (et == null)
			throw new CompiereUserException(""Entity type not defined: "" + p_entityType);
		
		//	Call
		Class<?>[] parameterTypes = new Class[]{
			String.class, Boolean.class, Boolean.class
		};
		Object[] args = new Object[]{
				p_entityType, p_isCascade, p_deleteFile
		};
		Object info = null;
		try
		{
			Class<?> clazz = Class.forName(""com.compiere.client.StartComponent"");
			Object instance = clazz.newInstance();
			Method method = clazz.getMethod (""removeComponent"", parameterTypes);
			info = method.invoke (instance, args);
		}
		catch (Exception e)
		{
			throw new CompiereSystemException(e.toString());
		}
		
		if (info != null)
			return info.toString();
		throw new CompiereSystemException(""Please check Log"");
	}	//	doIt
"
org.compiere.process.EMailTest.prepare,EMailTest.java,"void prepare ()
	{
		p_AD_Client_ID = getRecord_ID();
		if (p_AD_Client_ID == 0)
			p_AD_Client_ID = getCtx().getAD_Client_ID();
	}	//	prepare
"
org.compiere.process.EMailTest.doIt,EMailTest.java,"String doIt () throws Exception
	{
		MClient client = MClient.get (getCtx(), p_AD_Client_ID);
		log.info(client.toString());
		
		//	 Test Client Mail
		String clientTest = client.testEMail();
		addLog(0, null, null, client.getName() + "": "" + clientTest);
		
		//	Test Client DocumentDir
		if (!Ini.isClient())
		{
			String documentDir = client.getDocumentDir();
			if (documentDir == null || documentDir.length() == 0)
				documentDir = ""."";
			File file = new File (documentDir);
			if (file.exists() && file.isDirectory())
				addLog(0, null, null, ""Found Directory: "" + client.getDocumentDir());
			else
				addLog(0, null, null, ""Not Found Directory: "" + client.getDocumentDir());
		}

		MStore[] wstores = MStore.getOfClient(client);
		for (MStore store : wstores) {
			String test = store.testEMail();
			addLog(0, null, null, store.getName() + "": "" + test);
		}
		
		return clientTest;
	}	//	doIt
"
org.compiere.process.ReplenishReport.prepare,ReplenishReport.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""M_Warehouse_ID""))
				p_M_Warehouse_ID = element.getParameterAsInt();
			else if (name.equals(""C_BPartner_ID""))
				p_C_BPartner_ID = element.getParameterAsInt();
			else if (name.equals(""ReplenishmentCreate""))
				p_ReplenishmentCreate = (String)element.getParameter();
			else if (name.equals(""C_DocType_ID""))
				p_C_DocType_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.ReplenishReport.doIt,ReplenishReport.java,"String doIt() throws Exception
	{
		log.info(""M_Warehouse_ID="" + p_M_Warehouse_ID 
			+ "", C_BPartner_ID="" + p_C_BPartner_ID 
			+ "" - ReplenishmentCreate="" + p_ReplenishmentCreate
			+ "", C_DocType_ID="" + p_C_DocType_ID);
		if (p_ReplenishmentCreate != null && p_C_DocType_ID == 0)
			throw new CompiereUserException(""@FillMandatory@ @C_DocType_ID@"");
		
		MWarehouse wh = MWarehouse.get(getCtx(), p_M_Warehouse_ID);
		if (wh.get_ID() == 0)  
			throw new CompiereSystemException(""@FillMandatory@ @M_Warehouse_ID@"");
		//
		prepareTable();
		fillTable(wh);
		//
		if (p_ReplenishmentCreate == null)
			return ""OK"";
		//
		MDocType dt = MDocType.get(getCtx(), p_C_DocType_ID);
		if (!dt.getDocBaseType().equals(p_ReplenishmentCreate))
			throw new CompiereSystemException(""@C_DocType_ID@="" + dt.getName() + "" <> "" + p_ReplenishmentCreate);
		//
		if (p_ReplenishmentCreate.equals(""POO""))
			createPO();
		else if (p_ReplenishmentCreate.equals(""POR""))
			createRequisition();
		else if (p_ReplenishmentCreate.equals(""MMM""))
			createMovements();
		return m_info;
	}	//	doIt
"
org.compiere.process.ReplenishReport.prepareTable,ReplenishReport.java,"void prepareTable()
	{
		//	Level_Max must be >= Level_Max
		String sql = ""UPDATE M_Replenish""
			+ "" SET Level_Max = Level_Min ""
			+ ""WHERE Level_Max < Level_Min"";
		int no = DB.executeUpdate(sql, get_TrxName());
		if (no != 0)
			log.fine(""Corrected Max_Level="" + no);
		
		//	Minimum Order should be 1
		sql = ""UPDATE M_Product_PO""
			+ "" SET Order_Min = 1 ""
			+ ""WHERE (Order_Min IS NULL OR Order_Min < 1) "" 
			+ ""AND  Discontinued = 'N'"";
		no = DB.executeUpdate(sql, get_TrxName());
		if (no != 0)
			log.fine(""Corrected Order Min="" + no);
		
		//	Pack should be 1
		sql = ""UPDATE M_Product_PO""
			+ "" SET Order_Pack = 1 ""
			+ ""WHERE (Order_Pack IS NULL OR Order_Pack < 1) ""
			+ ""AND  Discontinued = 'N'"";
		no = DB.executeUpdate(sql, get_TrxName());
		if (no != 0)
			log.fine(""Corrected Order Pack="" + no);

		//	Set Current Vendor where only one vendor
		sql = ""UPDATE M_Product_PO p""
			+ "" SET IsCurrentVendor='Y' ""
			+ ""WHERE IsCurrentVendor<>'Y'""
			//jz groupby problem + "" AND EXISTS (SELECT * FROM M_Product_PO pp ""
			+ "" AND EXISTS (SELECT 1 FROM M_Product_PO pp ""
				+ ""WHERE p.M_Product_ID=pp.M_Product_ID ""
				+ ""GROUP BY pp.M_Product_ID ""
				+ ""HAVING COUNT(*) = 1) ""
			+ ""AND  Discontinued = 'N'"";
		no = DB.executeUpdate(sql, get_TrxName());
		if (no != 0)
			log.fine(""Corrected CurrentVendor(Y)="" + no);

		//	More then one current vendor
		sql = ""UPDATE M_Product_PO p""
			+ "" SET IsCurrentVendor='N' ""
			+ ""WHERE IsCurrentVendor = 'Y'""
			//jz + "" AND EXISTS (SELECT * FROM M_Product_PO pp ""
			+ "" AND EXISTS (SELECT 1 FROM M_Product_PO pp ""
				+ ""WHERE p.M_Product_ID=pp.M_Product_ID AND pp.IsCurrentVendor='Y' ""
				+ ""GROUP BY pp.M_Product_ID ""
				+ ""HAVING COUNT(*) > 1) ""
			+ ""AND  Discontinued = 'N'"";
		no = DB.executeUpdate(sql, get_TrxName());
		if (no != 0)
			log.fine(""Corrected CurrentVendor(N)="" + no);
		
		//	Just to be sure
		sql = ""DELETE FROM T_Replenish WHERE AD_PInstance_ID="" + getAD_PInstance_ID();
		no = DB.executeUpdate(sql, get_TrxName());
		if (no != 0)
			log.fine(""Delete Existing Temp="" + no);
	}	//	prepareTable
"
org.compiere.process.ReplenishReport.fillTable,ReplenishReport.java,"void fillTable (MWarehouse wh) throws Exception
	{
		String sql = ""INSERT INTO T_Replenish ""
			+ ""(AD_PInstance_ID, M_Warehouse_ID, M_Product_ID, AD_Client_ID, AD_Org_ID,""
			+ "" ReplenishType, Level_Min, Level_Max, QtyOnHand,QtyReserved,QtyOrdered,""
			+ "" C_BPartner_ID, Order_Min, Order_Pack, QtyToOrder, ReplenishmentCreate) ""
			+ ""SELECT "" + getAD_PInstance_ID() 
				+ "", r.M_Warehouse_ID, r.M_Product_ID, r.AD_Client_ID, r.AD_Org_ID,""
			+ "" r.ReplenishType, r.Level_Min, r.Level_Max, 0,0,0,""
			+ "" po.C_BPartner_ID, po.Order_Min, po.Order_Pack, 0, "";
		if (p_ReplenishmentCreate == null)
			sql += ""null"";
		else
			sql += ""'"" + p_ReplenishmentCreate + ""'"";
		sql += "" FROM M_Replenish r""
			+ "" INNER JOIN M_Product_PO po ON (r.M_Product_ID=po.M_Product_ID) ""
			+ "" INNER JOIN M_Product mp ON (r.M_Product_ID=mp.M_Product_ID) ""
			+ ""WHERE po.IsCurrentVendor='Y'""	//	Only Current Vendor
			+ "" AND r.ReplenishType<>'0'""
			+ "" AND po.IsActive='Y' AND r.IsActive='Y' AND mp.IsActive='Y'""
			+ "" AND  po.Discontinued = 'N'""
			+ "" AND  mp.Discontinued = 'N'""
			+ "" AND r.M_Warehouse_ID="" + p_M_Warehouse_ID;
		if (p_C_BPartner_ID != 0)
			sql += "" AND po.C_BPartner_ID="" + p_C_BPartner_ID;
		int no = DB.executeUpdate(sql, get_TrxName());
		log.finest(sql);
		log.fine(""Insert (1) #"" + no);
		
		if (p_C_BPartner_ID == 0)
		{
			sql = ""INSERT INTO T_Replenish ""
				+ ""(AD_PInstance_ID, M_Warehouse_ID, M_Product_ID, AD_Client_ID, AD_Org_ID,""
				+ "" ReplenishType, Level_Min, Level_Max,""
				+ "" C_BPartner_ID, Order_Min, Order_Pack, QtyToOrder, ReplenishmentCreate) ""
				+ ""SELECT "" + getAD_PInstance_ID()
				+ "", r.M_Warehouse_ID, r.M_Product_ID, r.AD_Client_ID, r.AD_Org_ID,""
				+ "" r.ReplenishType, r.Level_Min, r.Level_Max,""
				//jz + "" null, 1, 1, 0, "";
				+ DB.NULL(""I"", Types.INTEGER) 
				+ "" , 1, 1, 0, "";
			if (p_ReplenishmentCreate == null)
				sql += ""null"";
			else
				sql += ""'"" + p_ReplenishmentCreate + ""'"";
			sql	+= "" FROM M_Replenish r ""
				+ ""WHERE r.ReplenishType<>'0' AND r.IsActive='Y'""
				+ "" AND r.M_Warehouse_ID="" + p_M_Warehouse_ID
				+ "" AND NOT EXISTS (SELECT * FROM T_Replenish t ""
					+ ""WHERE r.M_Product_ID=t.M_Product_ID""
					+ "" AND AD_PInstance_ID="" + getAD_PInstance_ID() + "")""
				+ "" AND EXISTS (SELECT * FROM M_Product_PO po, M_Product mp ""
				                + "" WHERE po.M_Product_ID = r.M_Product_ID ""
				                + "" AND   mp.M_Product_ID = r.M_Product_ID ""
				                + "" AND   po.Discontinued = 'N' AND mp.Discontinued = 'N')"";
			no = DB.executeUpdate(sql, get_TrxName());
			log.fine(""Insert (BP) #"" + no);
		}
		
		sql = ""UPDATE T_Replenish t SET ""
			+ ""QtyOnHand = (SELECT COALESCE(SUM(QtyOnHand),0) FROM M_Storage s, M_Locator l WHERE t.M_Product_ID=s.M_Product_ID""
				+ "" AND l.M_Locator_ID=s.M_Locator_ID AND l.M_Warehouse_ID=t.M_Warehouse_ID),""
			+ ""QtyReserved = (SELECT COALESCE(SUM(QtyReserved),0) FROM M_Storage s, M_Locator l WHERE t.M_Product_ID=s.M_Product_ID""
				+ "" AND l.M_Locator_ID=s.M_Locator_ID AND l.M_Warehouse_ID=t.M_Warehouse_ID),""
			+ ""QtyOrdered = (SELECT COALESCE(SUM(QtyOrdered),0) FROM M_Storage s, M_Locator l WHERE t.M_Product_ID=s.M_Product_ID""
				+ "" AND l.M_Locator_ID=s.M_Locator_ID AND l.M_Warehouse_ID=t.M_Warehouse_ID)"";
		if (p_C_DocType_ID != 0)
			sql += "", C_DocType_ID="" + p_C_DocType_ID;
		sql += "" WHERE AD_PInstance_ID="" + getAD_PInstance_ID();
		no = DB.executeUpdate(sql, get_TrxName());
		if (no != 0)
			log.fine(""Update #"" + no);

		//	Delete inactive products and replenishments
		sql = ""DELETE FROM T_Replenish r ""
			+ ""WHERE (EXISTS (SELECT * FROM M_Product p ""
				+ ""WHERE p.M_Product_ID=r.M_Product_ID AND p.IsActive='N')""
			+ "" OR EXISTS (SELECT * FROM M_Replenish rr ""
				+ "" WHERE rr.M_Product_ID=r.M_Product_ID AND rr.M_Warehouse_ID=r.M_Warehouse_ID AND rr.IsActive='N'))""
			+ "" AND AD_PInstance_ID="" + getAD_PInstance_ID();
		no = DB.executeUpdate(sql, get_TrxName());
		if (no != 0)
			log.fine(""Delete Inactive="" + no);
	 
		//	Ensure Data consistency
		sql = ""UPDATE T_Replenish SET QtyOnHand = 0 WHERE QtyOnHand IS NULL"";
		no = DB.executeUpdate(sql, get_TrxName());
		sql = ""UPDATE T_Replenish SET QtyReserved = 0 WHERE QtyReserved IS NULL"";
		no = DB.executeUpdate(sql, get_TrxName());
		sql = ""UPDATE T_Replenish SET QtyOrdered = 0 WHERE QtyOrdered IS NULL"";
		no = DB.executeUpdate(sql, get_TrxName());

		//	Set Minimum / Maximum Maintain Level
		//	X_M_Replenish.REPLENISHTYPE_ReorderBelowMinimumLevel
		sql = ""UPDATE T_Replenish""
			+ "" SET QtyToOrder = Level_Min - QtyOnHand + QtyReserved - QtyOrdered ""
			+ ""WHERE ReplenishType='1'"" 
			+ "" AND AD_PInstance_ID="" + getAD_PInstance_ID();
		no = DB.executeUpdate(sql, get_TrxName());
		if (no != 0)
			log.fine(""Update Type-1="" + no);
		//
		//	X_M_Replenish.REPLENISHTYPE_MaintainMaximumLevel
		sql = ""UPDATE T_Replenish""
			+ "" SET QtyToOrder = Level_Max - QtyOnHand + QtyReserved - QtyOrdered ""
			+ ""WHERE ReplenishType='2'"" 
			+ "" AND AD_PInstance_ID="" + getAD_PInstance_ID();
		no = DB.executeUpdate(sql, get_TrxName());
		if (no != 0)
			log.fine(""Update Type-2="" + no);
	
		//	Delete rows where nothing to order
		sql = ""DELETE FROM T_Replenish ""
			+ ""WHERE QtyToOrder < 1""
			+ "" AND AD_PInstance_ID="" + getAD_PInstance_ID();
		no = DB.executeUpdate(sql, get_TrxName());
		if (no != 0)
			log.fine(""Delete No QtyToOrder="" + no);

		//	Minimum Order Quantity
		sql = ""UPDATE T_Replenish""
			+ "" SET QtyToOrder = Order_Min ""
			+ ""WHERE QtyToOrder < Order_Min""
			+ "" AND AD_PInstance_ID="" + getAD_PInstance_ID();
		no = DB.executeUpdate(sql, get_TrxName());
		if (no != 0)
			log.fine(""Set MinOrderQty="" + no);

		//	Even dividable by Pack
		sql = ""UPDATE T_Replenish""
			//jz MOD is not a standard function + "" SET QtyToOrder = QtyToOrder - MOD(QtyToOrder, Order_Pack) + Order_Pack ""
			+ "" SET QtyToOrder = (TRUNC(QtyToOrder/Order_Pack,0)+1)*Order_Pack ""
			//+ ""WHERE MOD(QtyToOrder, Order_Pack) <> 0""
			+ ""WHERE (QtyToOrder-TRUNC(QtyToOrder/Order_Pack,0)*Order_Pack) <> 0""
			+ "" AND AD_PInstance_ID="" + getAD_PInstance_ID();
		no = DB.executeUpdate(sql, get_TrxName());
		if (no != 0)
			log.fine(""Set OrderPackQty="" + no);
		
		//	Source from other warehouse
		if (wh.getM_WarehouseSource_ID() != 0)
		{
			sql = ""UPDATE T_Replenish""
				+ "" SET M_WarehouseSource_ID="" + wh.getM_WarehouseSource_ID() 
				+ "" WHERE AD_PInstance_ID="" + getAD_PInstance_ID();
			no = DB.executeUpdate(sql, get_TrxName());
			if (no != 0)
				log.fine(""Set Warehouse Source Warehouse="" + no);
		}
		//	Replenishment on Product level overwrites 
		sql = ""UPDATE T_Replenish ""
			+ ""SET M_WarehouseSource_ID=(SELECT M_WarehouseSource_ID FROM M_Replenish r ""
				+ ""WHERE r.M_Product_ID=T_Replenish.M_Product_ID""
				+ "" AND r.M_Warehouse_ID="" + p_M_Warehouse_ID + "")""
			+ ""WHERE AD_PInstance_ID="" + getAD_PInstance_ID()
			+ "" AND EXISTS (SELECT * FROM M_Replenish r ""
				+ ""WHERE r.M_Product_ID=T_Replenish.M_Product_ID""
				+ "" AND r.M_Warehouse_ID="" + p_M_Warehouse_ID
				+ "" AND r.M_WarehouseSource_ID > 0)"";
		no = DB.executeUpdate(sql, get_TrxName());
		if (no != 0)
			log.fine(""Set Product Source Warehouse="" + no);
		
		//	Check Source Warehouse
		sql = ""UPDATE T_Replenish""
			+ "" SET M_WarehouseSource_ID = NULL "" 
			+ ""WHERE M_Warehouse_ID=M_WarehouseSource_ID""
			+ "" AND AD_PInstance_ID="" + getAD_PInstance_ID();
		no = DB.executeUpdate(sql, get_TrxName());
		if (no != 0)
			log.fine(""Set same Source Warehouse="" + no);
		
		//	Custom Replenishment
		String className = wh.getReplenishmentClass();
		if (className == null || className.length() == 0)
			return;
		//	Get Replenishment Class
		ReplenishInterface custom = null;
		try
		{
			Class<?> clazz = Class.forName(className);
			custom = (ReplenishInterface)clazz.newInstance();
		}
		catch (Exception e)
		{
			throw new CompiereUserException(""No custom Replenishment class ""
				+ className + "" - "" + e.toString());
		}
		
		X_T_Replenish[] replenishs = getReplenish(""ReplenishType='9'"");
		for (X_T_Replenish replenish : replenishs) {
			if (replenish.getReplenishType().equals(X_T_Replenish.REPLENISHTYPE_Custom))
			{
				BigDecimal qto = null;
				try
				{
					qto = custom.getQtyToOrder(wh, replenish);
				}
				catch (Exception e)
				{
					log.log(Level.SEVERE, custom.toString(), e);
				}
				if (qto == null)
					qto = Env.ZERO;
				replenish.setQtyToOrder(qto);
				replenish.save();
			}
		}
	}	//	fillTable
"
org.compiere.process.ReplenishReport.createPO,ReplenishReport.java,"void createPO()
	{
		int noOrders = 0;
		String info = """";
		//
		MOrder order = null;
		MWarehouse wh = null;
		X_T_Replenish[] replenishs = getReplenish(""M_WarehouseSource_ID IS NULL"");
		for (X_T_Replenish replenish : replenishs) {
			if (wh == null || wh.getM_Warehouse_ID() != replenish.getM_Warehouse_ID())
				wh = MWarehouse.get(getCtx(), replenish.getM_Warehouse_ID());
			//
			if (order == null 
				|| order.getC_BPartner_ID() != replenish.getC_BPartner_ID()
				|| order.getM_Warehouse_ID() != replenish.getM_Warehouse_ID())
			{
				order = new MOrder(getCtx(), 0, get_TrxName());
				order.setIsSOTrx(false);
				order.setC_DocTypeTarget_ID(p_C_DocType_ID);
				MBPartner bp = new MBPartner(getCtx(), replenish.getC_BPartner_ID(), get_TrxName());
				order.setBPartner(bp);
				order.setSalesRep_ID(getAD_User_ID());
				order.setDescription(Msg.getMsg(getCtx(), ""Replenishment""));
				//	Set Org/WH
				order.setAD_Org_ID(wh.getAD_Org_ID());
				order.setM_Warehouse_ID(wh.getM_Warehouse_ID());
				if (!order.save())
					return;
				log.fine(order.toString());
				noOrders++;
				info += "" - "" + order.getDocumentNo();
			}
			MOrderLine line = new MOrderLine (order);
			line.setM_Product_ID(replenish.getM_Product_ID());
			line.setQty(replenish.getQtyToOrder());
			line.setPrice();
			line.save();
		}
		m_info = ""#"" + noOrders + info;
		log.info(m_info);
	}	//	createPO
"
org.compiere.process.ReplenishReport.createRequisition,ReplenishReport.java,"void createRequisition()
	{
		int noReqs = 0;
		String info = """";
		//
		MRequisition requisition = null;
		MWarehouse wh = null;
		X_T_Replenish[] replenishs = getReplenish(""M_WarehouseSource_ID IS NULL"");
		for (X_T_Replenish replenish : replenishs) {
			if (wh == null || wh.getM_Warehouse_ID() != replenish.getM_Warehouse_ID())
				wh = MWarehouse.get(getCtx(), replenish.getM_Warehouse_ID());
			//
			if (requisition == null
				|| requisition.getM_Warehouse_ID() != replenish.getM_Warehouse_ID())
			{
				requisition = new MRequisition (getCtx(), 0, get_TrxName());
				requisition.setAD_User_ID (getAD_User_ID());
				requisition.setC_DocType_ID(p_C_DocType_ID);
				requisition.setDescription(Msg.getMsg(getCtx(), ""Replenishment""));
				//	Set Org/WH
				requisition.setAD_Org_ID(wh.getAD_Org_ID());
				requisition.setM_Warehouse_ID(wh.getM_Warehouse_ID());
				if (!requisition.save())
					return;
				log.fine(requisition.toString());
				noReqs++;
				info += "" - "" + requisition.getDocumentNo();
			}
			//
			MRequisitionLine line = new MRequisitionLine(requisition);
			line.setM_Product_ID(replenish.getM_Product_ID());
			line.setC_BPartner_ID(replenish.getC_BPartner_ID());
			line.setQty(replenish.getQtyToOrder());
			line.setPrice();
			line.save();
		}
		m_info = ""#"" + noReqs + info;
		log.info(m_info);
	}	//	createRequisition
"
org.compiere.process.ReplenishReport.createMovements,ReplenishReport.java,"void createMovements()
	{
		int noMoves = 0;
		String info = """";
		//
		MClient client = null;
		MMovement move = null;
		int M_Warehouse_ID = 0;
		int M_WarehouseSource_ID = 0;
		MWarehouse whSource = null;
		MWarehouse whTarget = null;
		X_T_Replenish[] replenishs = getReplenish(""M_WarehouseSource_ID IS NOT NULL"");
		for (X_T_Replenish replenish : replenishs) {
			if (whSource == null || whSource.getM_WarehouseSource_ID() != replenish.getM_WarehouseSource_ID())
				whSource = MWarehouse.get(getCtx(), replenish.getM_WarehouseSource_ID());
			if (whTarget == null || whTarget.getM_Warehouse_ID() != replenish.getM_Warehouse_ID())
				whTarget = MWarehouse.get(getCtx(), replenish.getM_Warehouse_ID());
			if (client == null || client.getAD_Client_ID() != whSource.getAD_Client_ID())
				client = MClient.get(getCtx(), whSource.getAD_Client_ID());
			//
			if (move == null
				|| M_WarehouseSource_ID != replenish.getM_WarehouseSource_ID()
				|| M_Warehouse_ID != replenish.getM_Warehouse_ID())
			{
				M_WarehouseSource_ID = replenish.getM_WarehouseSource_ID();
				M_Warehouse_ID = replenish.getM_Warehouse_ID();
				
				move = new MMovement (getCtx(), 0, get_TrxName());
				move.setC_DocType_ID(p_C_DocType_ID);
				move.setDescription(Msg.getMsg(getCtx(), ""Replenishment"")
					+ "": "" + whSource.getName() + ""->"" + whTarget.getName());
				//	Set Org
				move.setAD_Org_ID(whSource.getAD_Org_ID());
				if (!move.save())
					return;
				log.fine(move.toString());
				noMoves++;
				info += "" - "" + move.getDocumentNo();
			}
			MProduct product = MProduct.get(getCtx(), replenish.getM_Product_ID());
			//	To
			int M_LocatorTo_ID = getLocator_ID(product, whTarget); 
			
			//	From: Look-up Storage
			MProductCategory pc = MProductCategory.get(getCtx(), product.getM_Product_Category_ID());
			String MMPolicy = pc.getMMPolicy();
			if (MMPolicy == null || MMPolicy.length() == 0)
				MMPolicy = client.getMMPolicy();
			//
			MStorage[] storages = MStorage.getWarehouse(getCtx(), 
				whSource.getM_Warehouse_ID(), replenish.getM_Product_ID(), 0, 0,
				true, null, 
				X_AD_Client.MMPOLICY_FiFo.equals(MMPolicy), get_TrxName());
			if (storages == null || storages.length == 0)
			{
				addLog (""No Inventory in "" + whSource.getName() 
					+ "" for "" + product.getName());
				continue;
			}
			//
			BigDecimal target = replenish.getQtyToOrder();
			for (MStorage storage : storages) {
				BigDecimal qtyAvailable = storage.getQtyOnHand().subtract(
						storage.getQtyDedicated()).subtract(
						storage.getQtyAllocated());
				if(qtyAvailable.signum() <= 0)
					continue;

				BigDecimal moveQty = target;
				if (qtyAvailable.compareTo(moveQty) < 0)
					moveQty = qtyAvailable;
				//
				MMovementLine line = new MMovementLine(move);
				line.setM_Product_ID(replenish.getM_Product_ID());
				line.setMovementQty(moveQty);
				if (replenish.getQtyToOrder().compareTo(moveQty) != 0)
					line.setDescription(""Total: "" + replenish.getQtyToOrder());
				line.setM_Locator_ID(storage.getM_Locator_ID());		//	from
				line.setM_AttributeSetInstance_ID(storage.getM_AttributeSetInstance_ID());
				line.setM_LocatorTo_ID(M_LocatorTo_ID);					//	to
				line.setM_AttributeSetInstanceTo_ID(storage.getM_AttributeSetInstance_ID());
				line.save();
				//
				target = target.subtract(moveQty);
				if (target.signum() == 0)
					break;
			}
			if (target.signum() != 0)
				addLog (""Insufficient Inventory in "" + whSource.getName() 
					+ "" for "" + product.getName() + "" Qty="" + target);
		}
		if (replenishs.length == 0)
		{
			m_info = ""No Source Warehouse"";
			log.warning(m_info);
		}
		else
		{
			m_info = ""#"" + noMoves + info;
			log.info(m_info);
		}
	}	//	createRequisition
"
org.compiere.process.ReplenishReport.getLocator_ID,ReplenishReport.java,"int getLocator_ID (MProduct product, MWarehouse wh)
	{
		int M_Locator_ID = MProductLocator.getFirstM_Locator_ID (product, wh.getM_Warehouse_ID());
		/**	
		MLocator[] locators = MProductLocator.getLocators (product, wh.getM_Warehouse_ID());
		for (int i = 0; i < locators.length; i++)
		{
			MLocator locator = locators[i];
			//	Storage/capacity restrictions come here
			return locator.getM_Locator_ID();
		}
		//	default
		**/
		if (M_Locator_ID == 0)
			M_Locator_ID = wh.getDefaultM_Locator_ID();
		return M_Locator_ID;
	}	//	getLocator_ID
"
org.compiere.process.ReplenishReport.getReplenish,ReplenishReport.java,"X_T_Replenish[] getReplenish (String where)
	{
		String sql = ""SELECT * FROM T_Replenish ""
			+ ""WHERE AD_PInstance_ID=? AND C_BPartner_ID > 0 "";
		if (where != null && where.length() > 0)
			sql += "" AND "" + where;
		sql	+= "" ORDER BY M_Warehouse_ID, M_WarehouseSource_ID, C_BPartner_ID"";
		ArrayList<X_T_Replenish> list = new ArrayList<X_T_Replenish>();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_TrxName());
			pstmt.setInt (1, getAD_PInstance_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new X_T_Replenish (getCtx(), rs, get_TrxName()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		X_T_Replenish[] retValue = new X_T_Replenish[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getReplenish
"
org.compiere.process.OrderRePrice.prepare,OrderRePrice.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_Order_ID""))
				p_C_Order_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""C_Invoice_ID""))
				p_C_Invoice_ID = ((BigDecimal)element.getParameter()).intValue();
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.OrderRePrice.doIt,OrderRePrice.java,"String doIt() throws Exception
	{
		log.info(""C_Order_ID="" + p_C_Order_ID + "", C_Invoice_ID="" + p_C_Invoice_ID);
		if (p_C_Order_ID == 0 && p_C_Invoice_ID == 0)
			throw new IllegalArgumentException(""Nothing to do"");

		String retValue = """";
		if (p_C_Order_ID != 0)
		{
			MOrder order = new MOrder (getCtx(), p_C_Order_ID, get_TrxName());
			BigDecimal oldPrice = order.getGrandTotal();
			MOrderLine[] lines = order.getLines();
			for (MOrderLine element : lines) {
				element.setPrice(order.getM_PriceList_ID());
				element.save();
			}
			order = new MOrder (getCtx(), p_C_Order_ID, get_TrxName());
			BigDecimal newPrice = order.getGrandTotal();
			retValue = order.getDocumentNo() + "":  "" + oldPrice + "" -> "" + newPrice;
		}
		if (p_C_Invoice_ID != 0)
		{
			MInvoice invoice = new MInvoice (getCtx(), p_C_Invoice_ID, null);
			BigDecimal oldPrice = invoice.getGrandTotal();
			MInvoiceLine[] lines = invoice.getLines(false);
			for (MInvoiceLine element : lines) {
				element.setPrice(invoice.getM_PriceList_ID(), invoice.getC_BPartner_ID());
				element.save();
			}
			invoice = new MInvoice (getCtx(), p_C_Invoice_ID, null);
			BigDecimal newPrice = invoice.getGrandTotal();
			if (retValue.length() > 0)
				retValue += Env.NL;
			retValue += invoice.getDocumentNo() + "":  "" + oldPrice + "" -> "" + newPrice;
		}
		//
		return retValue;
	}	//	doIt
"
org.compiere.process.BPartnerValidate.prepare,BPartnerValidate.java,"void prepare ()
	{
		p_C_BPartner_ID = getRecord_ID();
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_BPartner_ID""))
				p_C_BPartner_ID = element.getParameterAsInt();
			else if (name.equals(""C_BP_Group_ID""))
				p_C_BP_Group_ID = element.getParameterAsInt();
			else if (name.equals(""AD_Client_ID""))
				p_AD_Client_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.BPartnerValidate.doIt,BPartnerValidate.java,"String doIt () throws Exception
	{
		log.info(""C_BPartner_ID="" + p_C_BPartner_ID + "", C_BP_Group_ID="" + p_C_BP_Group_ID); 
		if (p_C_BPartner_ID == 0 && p_C_BP_Group_ID == 0 && p_AD_Client_ID == 0)
			throw new CompiereUserException (""No Business Partner/Group selected"");
		
		if (p_AD_Client_ID != 0)
		{
			String sql = ""SELECT * FROM C_BPartner WHERE AD_Client_ID=? AND IsActive='Y'"";
			checkBP(sql, p_AD_Client_ID);
		}
		else if (p_C_BP_Group_ID == 0)
		{
			MBPartner bp = new MBPartner (getCtx(), p_C_BPartner_ID, get_TrxName());
			if (bp.get_ID() == 0)
				throw new CompiereUserException (""Business Partner not found - C_BPartner_ID="" + p_C_BPartner_ID);
			checkBP (bp);
		}
		else
		{
			String sql = ""SELECT * FROM C_BPartner WHERE C_BP_Group_ID=? AND IsActive='Y'"";
			checkBP(sql, p_C_BP_Group_ID);
		}
		//
		return ""OK"";
	}	//	doIt
"
org.compiere.process.BPartnerValidate.checkBP,BPartnerValidate.java,"void checkBP(String sql, int value)
	{
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_TrxName());
			pstmt.setInt (1, value);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MBPartner bp = new MBPartner (getCtx(), rs, get_TrxName());
				checkBP (bp);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
	}  // checkBP()
"
org.compiere.process.BPartnerValidate.checkBP,BPartnerValidate.java,"void checkBP (MBPartner bp)
	{
		addLog(0, null, null, bp.getName() + "":"");
		//	See also VMerge.postMerge
		checkPayments(bp);
		checkInvoices(bp);
		//	
		bp.setTotalOpenBalance();
		bp.setActualLifeTimeValue();
		bp.save();
		//
	//	if (bp.getSO_CreditUsed().signum() != 0)
		addLog(0, null, bp.getSO_CreditUsed(), Msg.getElement(getCtx(), ""SO_CreditUsed""));
		addLog(0, null, bp.getTotalOpenBalance(), Msg.getElement(getCtx(), ""TotalOpenBalance""));
		addLog(0, null, bp.getActualLifeTimeValue(), Msg.getElement(getCtx(), ""ActualLifeTimeValue""));
		//
		commit();
	}	//	checkBP
"
org.compiere.process.BPartnerValidate.checkPayments,BPartnerValidate.java,"void checkPayments (MBPartner bp)
	{
		//	See also VMerge.postMerge
		int changed = 0;
		MPayment[] payments = MPayment.getOfBPartner(getCtx(), bp.getC_BPartner_ID(), get_TrxName());
		for (MPayment payment : payments) {
			if (payment.testAllocation())
			{
				payment.save();
				changed++;
			}
		}
		if (changed != 0)
			addLog(0, null, new BigDecimal(payments.length), 
				Msg.getElement(getCtx(), ""C_Payment_ID"") + "" - #"" + changed);
	}	//	checkPayments
"
org.compiere.process.BPartnerValidate.checkInvoices,BPartnerValidate.java,"void checkInvoices (MBPartner bp)
	{
		//	See also VMerge.postMerge
		int changed = 0;
		MInvoice[] invoices = MInvoice.getOfBPartner(getCtx(), bp.getC_BPartner_ID(), get_TrxName());
		for (MInvoice invoice : invoices) {
			if (invoice.testAllocation())
			{
				invoice.save();
				changed++;
			}
		}
		if (changed != 0)
			addLog(0, null, new BigDecimal(invoices.length), 
				Msg.getElement(getCtx(), ""C_Invoice_ID"") + "" - #"" + changed);
	}	//	checkInvoices
"
org.compiere.process.KIndexRerun.prepare,KIndexRerun.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""CM_WebProject_ID""))
				p_CM_WebProject_ID = ((BigDecimal)element.getParameter()).intValue();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.KIndexRerun.doIt,KIndexRerun.java,"String doIt() throws Exception
	{
		// ReIndex Container
		int[] containers = PO.getAllIDs(""CM_Container"",""CM_WebProject_ID="" + p_CM_WebProject_ID, get_TrxName());
		for (int element : containers) {
			MContainer thisContainer = new MContainer(getCtx(),element, get_TrxName());
			thisContainer.reIndex(false);
		}
		// ReIndex News
		int[] newsChannels = PO.getAllIDs(""CM_NewsChannel"",""CM_WebProject_ID="" + p_CM_WebProject_ID, get_TrxName());
		for (int element : newsChannels) {
			MNewsChannel thisChannel = new MNewsChannel(getCtx(),element, get_TrxName());
			thisChannel.reIndex(false);
			int[] newsItems = PO.getAllIDs(""CM_NewsItem"",""CM_NewsChannel_ID="" + element, get_TrxName());
			for (int element2 : newsItems) {
				MNewsItem thisItem = new MNewsItem(getCtx(), element2, get_TrxName());
				thisItem.reIndex(false);
			}
		}
		return ""finished..."";
	}	//	doIt
"
org.compiere.process.Recurring.prepare,Recurring.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.Recurring.doIt,Recurring.java,"String doIt() throws Exception
	{
		MRecurring rec = new MRecurring (getCtx(), getRecord_ID(), get_TrxName());
		log.info(rec.toString());
		return rec.executeRun();
	}	//	doIt
"
org.compiere.process.PaymentTermValidate.prepare,PaymentTermValidate.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.PaymentTermValidate.doIt,PaymentTermValidate.java,"String doIt() throws Exception
	{
		log.info (""C_PaymentTerm_ID="" + getRecord_ID());
		MPaymentTerm pt = new MPaymentTerm (getCtx(), getRecord_ID(), get_TrxName());
		String msg = pt.validate();
		pt.save();
		String okMsg = Msg.parseTranslation(getCtx(), ""@OK@"");
		//
		if (okMsg.equals(msg))
			return msg;
		throw new CompiereUserException (msg);
	}	//	doIt
"
org.compiere.process.LandedCostDistribute.prepare,LandedCostDistribute.java,"void prepare ()
	{
		p_C_LandedCost_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.LandedCostDistribute.doIt,LandedCostDistribute.java,"String doIt () throws Exception
	{
		m_lc = new MLandedCost (getCtx(), p_C_LandedCost_ID, get_TrxName());
		log.info(m_lc.toString());
		if (m_lc.get_ID() == 0)
			throw new CompiereUserException(""@NotFound@: @C_LandedCost_ID@ - "" + p_C_LandedCost_ID);

		String error = m_lc.allocateCosts();
		if (error == null || error.length() == 0)
			return ""@OK@"";
		return error;
	}	//	doIt
"
org.compiere.process.CopyFromJournal.prepare,CopyFromJournal.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""GL_JournalBatch_ID""))
				m_GL_JournalBatch_ID = ((BigDecimal)element.getParameter()).intValue();
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.CopyFromJournal.doIt,CopyFromJournal.java,"String doIt() throws Exception
	{
		int To_GL_JournalBatch_ID = getRecord_ID();
		log.info(""doIt - From GL_JournalBatch_ID="" + m_GL_JournalBatch_ID + "" to "" + To_GL_JournalBatch_ID);
		if (To_GL_JournalBatch_ID == 0)
			throw new IllegalArgumentException(""Target GL_JournalBatch_ID == 0"");
		if (m_GL_JournalBatch_ID == 0)
			throw new IllegalArgumentException(""Source GL_JournalBatch_ID == 0"");
		MJournalBatch from = new MJournalBatch (getCtx(), m_GL_JournalBatch_ID, get_TrxName());
		MJournalBatch to = new MJournalBatch (getCtx(), To_GL_JournalBatch_ID, get_TrxName());
		//
		int no = to.copyDetailsFrom (from);
		//
		return ""@Copied@="" + no;
	}	//	doIt
"
org.compiere.process.ImportConversionRate.prepare,ImportConversionRate.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) 
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_Client_ID""))
				p_AD_Client_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""AD_Org_ID""))
				p_AD_Org_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""C_ConversionType_ID""))
				p_C_ConversionType_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""ValidFrom""))
				p_ValidFrom = (Timestamp)element.getParameter();
			else if (name.equals(""CreateReciprocalRate""))
				p_CreateReciprocalRate = ""Y"".equals(element.getParameter());
			else if (name.equals(""DeleteOldImported""))
				p_DeleteOldImported = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.ImportConversionRate.doIt,ImportConversionRate.java,"String doIt() throws Exception
	{
		log.info(""doIt - AD_Client_ID="" + p_AD_Client_ID
			+ "",AD_Org_ID="" + p_AD_Org_ID
			+ "",C_ConversionType_ID="" + p_C_ConversionType_ID
			+ "",ValidFrom="" + p_ValidFrom
			+ "",CreateReciprocalRate="" + p_CreateReciprocalRate);
		//
		StringBuffer sql = null;
		int no = 0;
		String clientCheck = "" AND AD_Client_ID="" + p_AD_Client_ID;
		//	****	Prepare	****

		//	Delete Old Imported
		if (p_DeleteOldImported)
		{
			sql = new StringBuffer (""DELETE FROM I_Conversion_Rate ""
				  + ""WHERE I_IsImported='Y'"").append (clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			log.fine(""Delete Old Impored ="" + no);
		}

		//	Set Client, Org, Location, IsActive, Created/Updated
		sql = new StringBuffer (""UPDATE I_Conversion_Rate ""
			  + ""SET AD_Client_ID = COALESCE (AD_Client_ID,"").append (p_AD_Client_ID).append (""),""
			  + "" AD_Org_ID = COALESCE (AD_Org_ID,"").append (p_AD_Org_ID).append (""),"");
		if (p_C_ConversionType_ID != 0)
			sql.append("" C_ConversionType_ID = COALESCE (C_ConversionType_ID,"").append (p_C_ConversionType_ID).append (""),"");
		if (p_ValidFrom != null)
			sql.append("" ValidFrom = COALESCE (ValidFrom,"").append (DB.TO_DATE(p_ValidFrom)).append (""),"");
		else
			sql.append("" ValidFrom = COALESCE (ValidFrom,SysDate),"");
		sql.append("" CreateReciprocalRate = COALESCE (CreateReciprocalRate,'"").append (p_CreateReciprocalRate ? ""Y"" : ""N"").append (""'),""
			+ "" IsActive = COALESCE (IsActive, 'Y'),""
			+ "" Created = COALESCE (Created, SysDate),""
			+ "" CreatedBy = COALESCE (CreatedBy, 0),""
			+ "" Updated = COALESCE (Updated, SysDate),""
			+ "" UpdatedBy = "").append(getAD_User_ID()).append("",""
			+ "" I_ErrorMsg = NULL,""
			+ "" Processed = 'N',""	
			+ "" I_IsImported = 'N' ""
			+ ""WHERE I_IsImported<>'Y' OR I_IsImported IS NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info (""Reset ="" + no);

		//	Org
		String ts = DB.isPostgreSQL()?""COALESCE(I_ErrorMsg,'')"":""I_ErrorMsg"";  //java bug, it could not be used directly
		sql = new StringBuffer (""UPDATE I_Conversion_Rate o ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Org, '""
			+ ""WHERE (AD_Org_ID IS NULL""
			+ "" OR EXISTS (SELECT * FROM AD_Org oo WHERE o.AD_Org_ID=oo.AD_Org_ID AND (oo.IsSummary='Y' OR oo.IsActive='N')))""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Org ="" + no);
			
		//	Conversion Type
		sql = new StringBuffer (""UPDATE I_Conversion_Rate i ""
			+ ""SET C_ConversionType_ID = (SELECT C_ConversionType_ID FROM C_ConversionType c""
			+ "" WHERE c.Value=i.ConversionTypeValue AND c.AD_Client_ID IN (0,i.AD_Client_ID) AND c.IsActive='Y') ""
			+ ""WHERE C_ConversionType_ID IS NULL AND ConversionTypeValue IS NOT NULL""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no > 0)
			log.fine(""Set ConversionType ="" + no);
		sql = new StringBuffer (""UPDATE I_Conversion_Rate i ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid ConversionType, ' ""
			+ ""WHERE (C_ConversionType_ID IS NULL""
			+ "" OR NOT EXISTS (SELECT * FROM C_ConversionType c ""
				+ ""WHERE i.C_ConversionType_ID=c.C_ConversionType_ID AND c.IsActive='Y'""
				+ "" AND c.AD_Client_ID IN (0,i.AD_Client_ID)))""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid ConversionType ="" + no);
		
		//	Currency
		sql = new StringBuffer (""UPDATE I_Conversion_Rate i ""
			+ ""SET C_Currency_ID = (SELECT C_Currency_ID FROM C_Currency c""
			+ ""	WHERE c.ISO_Code=i.ISO_Code AND c.AD_Client_ID IN (0,i.AD_Client_ID) AND c.IsActive='Y') ""
			+ ""WHERE C_Currency_ID IS NULL AND ISO_Code IS NOT NULL""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no > 0)
			log.fine(""Set Currency ="" + no);
		sql = new StringBuffer (""UPDATE I_Conversion_Rate i ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Currency, ' ""
			+ ""WHERE (C_Currency_ID IS NULL""
			+ "" OR NOT EXISTS (SELECT * FROM C_Currency c ""
				+ ""WHERE i.C_Currency_ID=c.C_Currency_ID AND c.IsActive='Y'""
				+ "" AND c.AD_Client_ID IN (0,i.AD_Client_ID)))""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Currency ="" + no);

		//	Currency To
		sql = new StringBuffer (""UPDATE I_Conversion_Rate i ""
			+ ""SET C_Currency_To_ID = (SELECT C_Currency_ID FROM C_Currency c""
			+ ""	WHERE c.ISO_Code=i.ISO_Code_To AND c.AD_Client_ID IN (0,i.AD_Client_ID) AND c.IsActive='Y') ""
			+ ""WHERE C_Currency_To_ID IS NULL AND ISO_Code_To IS NOT NULL""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no > 0)
			log.fine(""Set Currency To ="" + no);
		sql = new StringBuffer (""UPDATE I_Conversion_Rate i ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Currency To, ' ""
			+ ""WHERE (C_Currency_To_ID IS NULL""
			+ "" OR NOT EXISTS (SELECT * FROM C_Currency c ""
				+ ""WHERE i.C_Currency_To_ID=c.C_Currency_ID AND c.IsActive='Y'""
				+ "" AND c.AD_Client_ID IN (0,i.AD_Client_ID)))""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Currency To ="" + no);
			
		//	Rates
		sql = new StringBuffer (""UPDATE I_Conversion_Rate i ""
			+ ""SET MultiplyRate = 1 / DivideRate ""
			+ ""WHERE (MultiplyRate IS NULL OR MultiplyRate = 0) AND DivideRate IS NOT NULL AND DivideRate<>0""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no > 0)
			log.fine(""Set MultiplyRate ="" + no);
		sql = new StringBuffer (""UPDATE I_Conversion_Rate i ""
			+ ""SET DivideRate = 1 / MultiplyRate ""
			+ ""WHERE (DivideRate IS NULL OR DivideRate = 0) AND MultiplyRate IS NOT NULL AND MultiplyRate<>0""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no > 0)
			log.fine(""Set DivideRate ="" + no);
		sql = new StringBuffer (""UPDATE I_Conversion_Rate i ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Rates, ' ""
			+ ""WHERE (MultiplyRate IS NULL OR MultiplyRate = 0 OR DivideRate IS NULL OR DivideRate = 0)""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Rates ="" + no);
	//	sql = new StringBuffer (""UPDATE I_Conversion_Rate i ""	//	Rate diff > 10%
	//		+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Inconsistent Rates='||(MultiplyRate - (1/DivideRate)) ""
	//		+ ""WHERE ((MultiplyRate - (1/DivideRate)) > (MultiplyRate * .1))""
	//		+ "" AND I_IsImported<>'Y'"").append (clientCheck);
	//	no = DB.executeUpdate(sql.toString(), get_TrxName());
	//	if (no != 0)
	//		log.warn (""Inconsistent Rates ="" + no);
		
		commit();
		/*********************************************************************/

		int noInsert = 0;
		sql = new StringBuffer (""SELECT * FROM I_Conversion_Rate ""
			+ ""WHERE I_IsImported='N'"").append (clientCheck)
			.append("" ORDER BY C_Currency_ID, C_Currency_To_ID, ValidFrom"");
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql.toString(), get_TrxName());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				X_I_Conversion_Rate imp = new X_I_Conversion_Rate (getCtx(), rs, get_TrxName());
				MConversionRate rate = new MConversionRate (imp, 
					imp.getC_ConversionType_ID(), 
					imp.getC_Currency_ID(), imp.getC_Currency_To_ID(),
					imp.getMultiplyRate(), imp.getValidFrom());
				if (imp.getValidTo() != null)
					rate.setValidTo(imp.getValidTo());
				if (rate.save())
				{
					imp.setC_Conversion_Rate_ID(rate.getC_Conversion_Rate_ID());
					imp.setI_IsImported(X_I_Conversion_Rate.I_ISIMPORTED_Yes);
					imp.setProcessed(true);
					imp.save();
					noInsert++;
					//
					if (imp.isCreateReciprocalRate())
					{
						rate = new MConversionRate (imp, 
							imp.getC_ConversionType_ID(), 
							imp.getC_Currency_To_ID(), imp.getC_Currency_ID(),
							imp.getDivideRate(), imp.getValidFrom());
						if (imp.getValidTo() != null)
							rate.setValidTo(imp.getValidTo());
						if (rate.save())					
							noInsert++;
					}
				}
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql.toString(), e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

		//	Set Error to indicator to not imported
		sql = new StringBuffer (""UPDATE I_Conversion_Rate ""
			+ ""SET I_IsImported='N', Updated=SysDate ""
			+ ""WHERE I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		addLog (0, null, new BigDecimal (no), ""@Errors@"");
		//
		addLog (0, null, new BigDecimal (noInsert), ""@C_Conversion_Rate_ID@: @Inserted@"");
		return """";
	}	//	doIt
"
org.compiere.process.TaxDeclarationCreate.prepare,TaxDeclarationCreate.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para)
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""DeleteOld""))
				p_DeleteOld = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_C_TaxDeclaration_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.TaxDeclarationCreate.doIt,TaxDeclarationCreate.java,"String doIt () throws Exception
	{
		log.info(""C_TaxDeclaration_ID="" + p_C_TaxDeclaration_ID);
		m_td = new MTaxDeclaration (getCtx(), p_C_TaxDeclaration_ID, get_TrxName());
		if (m_td.get_ID() == 0)
			throw new CompiereSystemException(""@NotDound@ @C_TaxDeclaration_ID@ = "" + p_C_TaxDeclaration_ID);

		if (p_DeleteOld)
		{
			//	Delete old
			String sql = ""DELETE FROM C_TaxDeclarationLine WHERE C_TaxDeclaration_ID=?"";
			int no = DB.executeUpdate(sql, p_C_TaxDeclaration_ID, false, get_TrxName());
			if (no != 0)
				log.config(""Delete Line #"" + no);
			sql = ""DELETE FROM C_TaxDeclarationAcct WHERE C_TaxDeclaration_ID=?"";
			no = DB.executeUpdate(sql, p_C_TaxDeclaration_ID, false, get_TrxName());
			if (no != 0)
				log.config(""Delete Acct #"" + no);
		}

		//	Get Invoices
		String sql = ""SELECT * FROM C_Invoice i ""
			+ ""WHERE TRUNC(i.DateInvoiced,'DD') >= ? AND TRUNC(i.DateInvoiced,'DD') <= ? ""
			+ "" AND Processed='Y'""
			+ "" AND NOT EXISTS (SELECT * FROM C_TaxDeclarationLine tdl ""
				+ ""WHERE i.C_Invoice_ID=tdl.C_Invoice_ID)"";
		PreparedStatement pstmt = null;
		int noInvoices = 0;
		try
		{
			pstmt = DB.prepareStatement (sql, get_TrxName());
			pstmt.setTimestamp(1, m_td.getDateFrom());
			pstmt.setTimestamp(2, m_td.getDateTo());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				create (new MInvoice (getCtx(), rs, null));	//	no lock
				noInvoices++;
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

		return ""@C_Invoice_ID@ #"" + noInvoices
			+ "" ("" + m_noLines + "", "" + m_noAccts + "")"";
	}	//	doIt
"
org.compiere.process.TaxDeclarationCreate.create,TaxDeclarationCreate.java,"void create (MInvoice invoice)
	{
		/**	Lines					**
		MInvoiceLine[] lines = invoice.getLines();
		for (int i = 0; i < lines.length; i++)
		{
			MInvoiceLine line = lines[i];
			if (line.isDescription())
				continue;
			//
			MTaxDeclarationLine tdl = new MTaxDeclarationLine (m_td, invoice, line);
			tdl.setLine((m_noLines+1) * 10);
			if (tdl.save())
				m_noLines++;
		}
		/** **/

		/** Invoice Tax				**/
		MInvoiceTax[] taxes = invoice.getTaxes(false);
		for (MInvoiceTax tLine : taxes) {
			//
			MTaxDeclarationLine tdl = new MTaxDeclarationLine (m_td, invoice, tLine);
			tdl.setLine((m_noLines+1) * 10);
			if (tdl.save())
				m_noLines++;
		}
		/** **/

		/**	Acct					**/
		String sql = ""SELECT * FROM Fact_Acct WHERE AD_Table_ID=? AND Record_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, X_C_Invoice.Table_ID);
			pstmt.setInt (2, invoice.getC_Invoice_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MFactAcct fact = new MFactAcct(getCtx(), rs, null);	//	no lock
				MTaxDeclarationAcct tda = new MTaxDeclarationAcct (m_td, fact);
				tda.setLine((m_noAccts+1) * 10);
				if (tda.save())
					m_noAccts++;
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		/** **/
	}	//	invoice
"
org.compiere.process.ComponentProduct.prepare,ComponentProduct.java,"void prepare()
	{
		p_AD_ComponentReg_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.ComponentProduct.doIt,ComponentProduct.java,"String doIt() throws Exception
	{
		log.info(""AD_ComponentReg_ID="" + p_AD_ComponentReg_ID);
		if (p_AD_ComponentReg_ID == 0)
			throw new CompiereSystemException(""No Registration ID"");
		m_reg = new MComponentReg(getCtx(), p_AD_ComponentReg_ID, get_TrxName());
		if (m_reg.get_ID() != p_AD_ComponentReg_ID)
			throw new CompiereSystemException(""Registration not found ID="" + p_AD_ComponentReg_ID);
		if (m_reg.getM_Product_Category_ID() == 0)
			throw new CompiereSystemException(""@NotFound@ @M_Product_Category_ID@"");
		
		StringBuffer info = new StringBuffer();
		int C_UOM_ID = MUOM.Each_ID;
		
		//	Product
		MProduct product = new MProduct(getCtx(), m_reg.getM_Product_ID(), get_TrxName());
		if (m_reg.getM_Product_ID() == 0)
		{
			product.setClientOrg(m_reg);
			product.setC_UOM_ID(C_UOM_ID);
			MTaxCategory tc = MTaxCategory.getDefault(getCtx());
			product.setC_TaxCategory_ID(tc.getC_TaxCategory_ID());
		}
		product.setValue(""Component "" + m_reg.getComponentName());
		StringBuffer name = new StringBuffer(m_reg.getName());
		if (m_reg.getVersion() != null)
			name.append("" "").append(m_reg.getVersion());
		product.setName(name.toString());
		product.setDescription(m_reg.getDescription());
		if (m_reg.getM_Product_Category_ID() != 0)
			product.setM_Product_Category_ID(m_reg.getM_Product_Category_ID());
		product.setLicenseInfo(m_reg.getComponentName());
		product.setTrialPhaseDays(m_reg.getTrialPhaseDays());
		product.setIsActive(m_reg.isActive());
		product.setIsSelfService(true);
		product.setIsWebStoreFeatured(true);
		//	Documentation
		String doc = m_reg.getDocumentationText();
		if (!Util.isEmpty(doc))
		{
			String descriptionURL = ""/wstore"" 
				+ ""/documentServlet/"" + m_reg.getComponentName() 
				+ "".html?ID="" + m_reg.getAD_ComponentReg_ID();
			product.setDescriptionURL(descriptionURL);
		}

		if (!product.save())
		{
			if (m_reg.getM_Product_ID() == 0)
				throw new CompiereSystemException(""Cannot create Product"");
			throw new CompiereSystemException(""Cannot update Product"");
		}
		//	Product Info
		info.append(product.getName());
		if (m_reg.getM_Product_ID() == 0)
		{
			m_reg.setM_Product_ID(product.getM_Product_ID());
			m_reg.save();
		}
		//	Vendor
		MBPartner partner = new MBPartner(getCtx(), m_reg.getC_BPartner_ID(), get_TrxName());
		if (!partner.isVendor())
		{
			partner.isVendor();
			partner.save();
		}

		BigDecimal price = m_reg.getPriceStd();
		int C_Currency_ID = 0;
		//	Price List
		if (m_reg.getM_PriceList_Version_ID() != 0 && price.signum() != 0)
		{
			MPriceListVersion plv = new MPriceListVersion(getCtx(), m_reg.getM_PriceList_Version_ID(), get_TrxName());
			C_Currency_ID = plv.getPriceList().getC_Currency_ID();
			MProductPrice pp = MProductPrice.get(getCtx(), 
					m_reg.getM_PriceList_Version_ID(), product.getM_Product_ID(), get_TrxName());
			if (pp == null)
				pp = new MProductPrice(plv, product.getM_Product_ID(), price, price, price);
			else
				pp.setPrices(price, price, price);
			pp.save();
			info.append("" - "").append(plv.getName()).append("" "").append(price);
		}
		else
			C_Currency_ID = MClient.get(getCtx(), m_reg.getAD_Client_ID()).getC_Currency_ID();

		//	Product Vendor
		MProductPO[] vendors = MProductPO.getOfProduct(getCtx(), product.getM_Product_ID(), get_TrxName());
		MProductPO vendor = null;
		for (MProductPO v : vendors) {
			if (v.getC_BPartner_ID() == partner.getC_BPartner_ID())
			{
				vendor = v;
				break;
			}
			else if (v.isCurrentVendor())
			{
				v.setIsCurrentVendor(false);
				v.save();
			}
		}
		if (vendor == null)
		{
			vendor = new MProductPO(getCtx(), 0, get_TrxName());
			vendor.setClientOrg(product);
			vendor.setM_Product_ID(product.getM_Product_ID());
			vendor.setC_BPartner_ID(partner.getC_BPartner_ID());
		}
		vendor.setIsCurrentVendor(true);
		vendor.setVendorProductNo(m_reg.getComponentName());
		vendor.setC_Currency_ID(C_Currency_ID);
		vendor.setC_UOM_ID(C_UOM_ID);
		vendor.setPriceList(price);
		vendor.save();
		
		//	Download
		MAttachment attachment = m_reg.getAttachment(true);	//	requery
		if (attachment != null && attachment.getEntryCount() > 0)
		{
			MAttachmentEntry entry = attachment.getEntry(0);	//	first only
			//
			MProductDownload[] downloads = product.getProductDownloads(true);
			MProductDownload download = null;
			if (downloads.length > 0)
				download = downloads[0];
			if (download == null)
			{
				download = new MProductDownload(getCtx(), 0, get_TrxName());
				download.setClientOrg(product);
				download.setM_Product_ID(product.getM_Product_ID());
			}
			download.setName(product.getName());
			download.setDownloadURL(entry.getName());
			download.save();
			if (download.saveDownload(entry))		//	deploy car file in DocumentDir
				info.append("" - Download: "" + entry.toStringX());
			else
				info.append("" - NO Download!"");
		}
		
		return info.toString();
	}	//	doIt
"
org.compiere.process.DataMigrationImport.prepare,DataMigrationImport.java,"void prepare() 
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""FileName""))
				p_FileName = (String)element.getParameter();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.DataMigrationImport.doIt,DataMigrationImport.java,"String doIt() throws Exception 
	{
		int AD_Client_ID = getCtx().getAD_Client_ID();
		log.info(""FileName="" + p_FileName + "",AD_Client_ID="" + AD_Client_ID);
		if (p_FileName == null)
			throw new CompiereSystemException(""No File"");
		File file = new File (p_FileName);
		if (!file.exists())
			throw new CompiereSystemException(""@NotFound@ @FileName@ "" + p_FileName);
		
		//	Call
		Class<?>[] parameterTypes = new Class[]{String.class, Integer.class};
		Object[] args = new Object[]{p_FileName, Integer.valueOf(AD_Client_ID)};
		Object info = null;
		try
		{
			Class<?> clazz = Class.forName(""com.compiere.client.StartComponent"");
			Object instance = clazz.newInstance();
			Method method = clazz.getMethod (""importDataMigration"", parameterTypes);
			info = method.invoke (instance, args);
		}
		catch (Exception e)
		{
			throw new CompiereSystemException(e.toString());
		}
		
		if (info != null)
			return info.toString();
		throw new CompiereSystemException(""Please check Log"");
	}	//	doIt
"
org.compiere.process.TranslationHandler.startElement,TranslationHandler.java,"void startElement (String uri, String localName, String qName, Attributes attributes)
		throws org.xml.sax.SAXException
	{
	//	log.fine( ""TranslationHandler.startElement"", qName);	// + "" - "" + uri + "" - "" + localName);
		if (qName.equals(TranslationMgr.XML_TAG))
		{
			m_AD_Language = attributes.getValue(TranslationMgr.XML_ATTRIBUTE_LANGUAGE);
			m_isBaseLanguage = Language.isBaseLanguage(m_AD_Language);
			m_TableName = attributes.getValue(TranslationMgr.XML_ATTRIBUTE_TABLE);
			m_updateSQL = ""UPDATE "" + m_TableName;
			if (!m_isBaseLanguage)
				m_updateSQL += ""_Trl"";
			m_updateSQL += "" SET "";
			log.fine(""AD_Language="" + m_AD_Language + "", Base="" + m_isBaseLanguage + "", TableName="" + m_TableName);
		}
		else if (qName.equals(TranslationMgr.XML_ROW_TAG))
		{
			m_curID = attributes.getValue(TranslationMgr.XML_ROW_ATTRIBUTE_ID);
			m_trl = attributes.getValue(TranslationMgr.XML_ROW_ATTRIBUTE_TRANSLATED);
		//	log.finest( ""ID="" + m_curID);
			m_sql = new StringBuffer();
		}
		else if (qName.equals(TranslationMgr.XML_VALUE_TAG))
		{
			m_curColumnName = attributes.getValue(TranslationMgr.XML_VALUE_ATTRIBUTE_COLUMN);
		//	log.finest( ""ColumnName="" + m_curColName);
		}
		else
			log.severe (""UNKNOWN TAG: "" + qName);
		m_curValue = new StringBuffer();
	}	//	startElement
"
org.compiere.process.TranslationHandler.characters,TranslationHandler.java,"void characters (char ch[], int start, int length)
		throws SAXException
	{
		m_curValue.append(ch, start, length);
	//	Log.trace(Log.l6_Database+1, ""TranslationHandler.characters"", m_curValue.toString());
	}	//	characters
"
org.compiere.process.TranslationHandler.endElement,TranslationHandler.java,"void endElement (String uri, String localName, String qName)
		throws SAXException
	{
	//	Log.trace(Log.l6_Database+1, ""TranslationHandler.endElement"", qName);
		if (qName.equals(TranslationMgr.XML_TAG))
		{
		}
		else if (qName.equals(TranslationMgr.XML_ROW_TAG))
		{
			//	Set section
			if (m_sql.length() > 0)
				m_sql.append("","");
			m_sql.append(""Updated="").append(DB.TO_DATE(m_time, false));
			if (!m_isBaseLanguage)
			{
				if (m_trl != null 
					&& (""Y"".equals(m_trl) || ""N"".equals(m_trl)))
					m_sql.append("",IsTranslated='"").append(m_trl).append(""'"");
				else
					m_sql.append("",IsTranslated='Y'"");
			}
			//	Where section
			m_sql.append("" WHERE "")
				.append(m_TableName).append(""_ID="").append(m_curID);
			if (!m_isBaseLanguage)
				m_sql.append("" AND AD_Language='"").append(m_AD_Language).append(""'"");
			if (m_AD_Client_ID >= 0)
				m_sql.append("" AND AD_Client_ID="").append(m_AD_Client_ID);
			//	Update section
			m_sql.insert(0, m_updateSQL);

			//	Execute
			int no = DB.executeUpdate(m_sql.toString(), (Trx) null);
			if (no == 1)
			{
				if (CLogMgt.isLevelFinest())
					log.fine(m_sql.toString());
				m_updateCount++;
			}
			else if (no == 0)
				log.warning (""Not Found - "" + m_sql.toString());
			else
				log.severe (""Update Rows="" + no + "" (Should be 1) - "" + m_sql.toString());
		}
		else if (qName.equals(TranslationMgr.XML_VALUE_TAG))
		{
			if (m_sql.length() > 0)
				m_sql.append("","");
			m_sql.append(m_curColumnName).append(""="").append(DB.TO_STRING(m_curValue.toString()));
			m_wordCount += Util.countWords(m_curValue.toString());
		}
	}	//	endElement
"
org.compiere.process.TranslationHandler.getUpdateCount,TranslationHandler.java,"int getUpdateCount()
	{
		return m_updateCount;
	}	//	getUpdateCount
"
org.compiere.process.TranslationHandler.getWordCount,TranslationHandler.java,"int getWordCount()
	{
		return m_wordCount;
	}	//	getWordCount
"
org.compiere.process.CopyOrder.prepare,CopyOrder.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_Order_ID""))
				p_C_Order_ID = element.getParameterAsInt();
			else if (name.equals(""C_DocType_ID""))
				p_C_DocType_ID = element.getParameterAsInt();
			else if (name.equals(""DateDoc""))
				p_DateDoc = (Timestamp)element.getParameter();
			else if (name.equals(""IsCloseDocument""))
				p_IsCloseDocument = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.CopyOrder.doIt,CopyOrder.java,"String doIt() throws Exception
	{
		log.info(""C_Order_ID="" + p_C_Order_ID 
			+ "", C_DocType_ID="" + p_C_DocType_ID 
			+ "", CloseDocument="" + p_IsCloseDocument);
		if (p_C_Order_ID == 0)
			throw new IllegalArgumentException(""No Order"");
		MDocType dt = MDocType.get(getCtx(), p_C_DocType_ID);
		if (dt.get_ID() == 0)
			throw new IllegalArgumentException(""No DocType"");
		if (p_DateDoc == null)
			p_DateDoc = new Timestamp (System.currentTimeMillis());
		//
		MOrder from = new MOrder (getCtx(), p_C_Order_ID, get_TrxName());
		MOrder newOrder = MOrder.copyFrom (from, p_DateDoc, 
			dt.getC_DocType_ID(), false, true, null);		//	copy ASI
		newOrder.setC_DocTypeTarget_ID(p_C_DocType_ID);
		boolean OK = newOrder.save();
		if (!OK)
			throw new IllegalStateException(""Could not create new Order"");
		//
		if (p_IsCloseDocument)
		{
			MOrder original = new MOrder (getCtx(), p_C_Order_ID, get_TrxName());
			original.setDocAction(X_C_Order.DOCACTION_Complete);
			original.processIt(X_C_Order.DOCACTION_Complete);
			original.save();
			original.setDocAction(X_C_Order.DOCACTION_Close);
			original.processIt(X_C_Order.DOCACTION_Close);
			original.save();
		}
		//
	//	Env.setSOTrx(getCtx(), newOrder.isSOTrx());
	//	return ""@C_Order_ID@ "" + newOrder.getDocumentNo();
		return dt.getName() + "": "" + newOrder.getDocumentNo();
	}	//	doIt
"
org.compiere.process.BankStatementPayment.prepare,BankStatementPayment.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""TenderType""))
				p_TenderType = element.getParameter().toString();
			else if (name.equals(""RoutingNo""))
				p_RoutingNo = element.getParameter().toString();
			else if (name.equals(""AccountNo""))
				p_AccountNo = element.getParameter().toString();
			else if (name.equals(""CheckNo""))
				p_CheckNo = element.getParameter().toString();
			else if (name.equals(""Micr""))
				p_Micr = element.getParameter().toString();
			else if (name.equals(""A_Name""))
				p_A_Name = element.getParameter().toString();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.BankStatementPayment.doIt,BankStatementPayment.java,"String doIt() throws Exception
	{
		int Table_ID = getTable_ID();
		int Record_ID = getRecord_ID();
		log.info (""Table_ID="" + Table_ID + "", Record_ID="" + Record_ID);
		
		if (Table_ID == X_I_BankStatement.Table_ID)
			return createPayment (new X_I_BankStatement(getCtx(), Record_ID, get_TrxName()));
		else if (Table_ID == X_C_BankStatementLine.Table_ID)
			return createPayment (new MBankStatementLine(getCtx(), Record_ID, get_TrxName()));
		
		throw new CompiereSystemException(""??"");
	}	//	doIt
"
org.compiere.process.BankStatementPayment.createPayment,BankStatementPayment.java,"String createPayment (X_I_BankStatement ibs) throws Exception
	{
		if (ibs == null || ibs.getC_Payment_ID() != 0)
			return ""--"";
		log.fine(ibs.toString());
		if (ibs.getC_Invoice_ID() == 0 && ibs.getC_BPartner_ID() == 0)
			throw new CompiereUserException (""@NotFound@ @C_Invoice_ID@ / @C_BPartner_ID@"");
		if (ibs.getC_BankAccount_ID() == 0)
			throw new CompiereUserException (""@NotFound@ @C_BankAccount_ID@"");
		//
		MPayment payment = createPayment (ibs.getC_Invoice_ID(), ibs.getC_BPartner_ID(),
			ibs.getC_Currency_ID(), ibs.getStmtAmt(), ibs.getTrxAmt(), 
			ibs.getC_BankAccount_ID(), ibs.getStatementLineDate() == null ? ibs.getStatementDate() : ibs.getStatementLineDate(), 
			ibs.getDateAcct(), ibs.getDescription(), ibs.getAD_Org_ID());
		if (payment == null)
			throw new CompiereSystemException(""Could not create Payment"");
		
		ibs.setC_Payment_ID(payment.getC_Payment_ID());
		ibs.setC_Currency_ID (payment.getC_Currency_ID());
		ibs.setTrxAmt(payment.getPayAmt());
		ibs.save();
		//
		String retString = ""@C_Payment_ID@ = "" + payment.getDocumentNo();
		if (payment.getOverUnderAmt().signum() != 0)
			retString += "" - @OverUnderAmt@="" + payment.getOverUnderAmt();
		return retString;
	}	//	createPayment - Import
"
org.compiere.process.BankStatementPayment.createPayment,BankStatementPayment.java,"String createPayment (MBankStatementLine bsl) throws Exception
	{
		if (bsl == null || bsl.getC_Payment_ID() != 0)
			return ""--"";
		log.fine(bsl.toString());
		if (bsl.getC_Invoice_ID() == 0 && bsl.getC_BPartner_ID() == 0)
			throw new CompiereUserException (""@NotFound@ @C_Invoice_ID@ / @C_BPartner_ID@"");
		//
		MBankStatement bs = new MBankStatement (getCtx(), bsl.getC_BankStatement_ID(), get_TrxName());
		//
		MPayment payment = createPayment (bsl.getC_Invoice_ID(), bsl.getC_BPartner_ID(),
			bsl.getC_Currency_ID(), bsl.getStmtAmt(), bsl.getTrxAmt(), 
			bs.getC_BankAccount_ID(), bsl.getStatementLineDate(), bsl.getDateAcct(),
			bsl.getDescription(), bsl.getAD_Org_ID());
		if (payment == null)
			throw new CompiereSystemException(""Could not create Payment"");
		//	update statement
		bsl.setPayment(payment);
		bsl.save();
		//
		String retString = ""@C_Payment_ID@ = "" + payment.getDocumentNo();
		if (payment.getOverUnderAmt().signum() != 0)
			retString += "" - @OverUnderAmt@="" + payment.getOverUnderAmt();
		return retString;
	}	//	createPayment
"
org.compiere.process.BankStatementPayment.createPayment,BankStatementPayment.java,"MPayment createPayment (int C_Invoice_ID, int C_BPartner_ID, 
		int C_Currency_ID, BigDecimal StmtAmt, BigDecimal TrxAmt,
		int C_BankAccount_ID, Timestamp DateTrx, Timestamp DateAcct, 
		String Description, int AD_Org_ID)
	{
		//	Trx Amount = Payment overwrites Statement Amount if defined
		BigDecimal PayAmt = TrxAmt;
		if (PayAmt == null || Env.ZERO.compareTo(PayAmt) == 0)
			PayAmt = StmtAmt;
		if (C_Invoice_ID == 0
			&& (PayAmt == null || Env.ZERO.compareTo(PayAmt) == 0))
			throw new IllegalStateException (""@PayAmt@ = 0"");
		if (PayAmt == null)
			PayAmt = Env.ZERO;
		//
		MPayment payment = new MPayment (getCtx(), 0, get_TrxName());
		payment.setAD_Org_ID(AD_Org_ID);
		payment.setC_BankAccount_ID(C_BankAccount_ID);
		
		if (p_TenderType.equals(X_C_Payment.TENDERTYPE_Check))
		{
			payment.setTenderType(X_C_Payment.TENDERTYPE_Check);
			payment.setRoutingNo(p_RoutingNo);
			payment.setAccountNo(p_AccountNo);
			payment.setCheckNo(p_CheckNo);
			payment.setMicr(p_Micr);
			payment.setA_Name(p_A_Name);
		}
		else
		{
			payment.setTenderType(X_C_Payment.TENDERTYPE_DirectDebit);
		}
		if (DateTrx != null)
			payment.setDateTrx(DateTrx);
		else if (DateAcct != null)
			payment.setDateTrx(DateAcct);
		if (DateAcct != null)
			payment.setDateAcct(DateAcct);
		else
			payment.setDateAcct(payment.getDateTrx());
		payment.setDescription(Description);
		//
		if (C_Invoice_ID != 0)
		{
			MInvoice invoice = new MInvoice (getCtx(), C_Invoice_ID, null);
			payment.setC_DocType_ID(invoice.isSOTrx());		//	Receipt
			payment.setC_Invoice_ID(invoice.getC_Invoice_ID());
			payment.setC_BPartner_ID (invoice.getC_BPartner_ID());
			if (PayAmt.signum() != 0)	//	explicit Amount
			{
				payment.setC_Currency_ID(C_Currency_ID);
				if (invoice.isSOTrx())
					payment.setPayAmt(PayAmt);
				else	//	payment is likely to be negative
					payment.setPayAmt(PayAmt.negate());
				payment.setOverUnderAmt(invoice.getOpenAmt().subtract(payment.getPayAmt()));
			}
			else	// set Pay Amout from Invoice
			{
				payment.setC_Currency_ID(invoice.getC_Currency_ID());
				payment.setPayAmt(invoice.getOpenAmt());
			}
		}
		else if (C_BPartner_ID != 0)
		{
			payment.setC_BPartner_ID(C_BPartner_ID);
			payment.setC_Currency_ID(C_Currency_ID);
			if (PayAmt.signum() < 0)	//	Payment
			{
				payment.setPayAmt(PayAmt.abs());
				payment.setC_DocType_ID(false);
			}
			else	//	Receipt
			{
				payment.setPayAmt(PayAmt);
				payment.setC_DocType_ID(true);
			}
		}
		else
			return null;
		payment.save();
		//
		payment.processIt(X_C_Payment.DOCACTION_Complete);
		payment.save();
		return payment;		
	}	//	createPayment
"
org.compiere.process.ChangeLogProcess.prepare,ChangeLogProcess.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""CheckNewValue""))
				p_CheckNewValue = Boolean.valueOf(""Y"".equals(element.getParameter()));
			else if (name.equals(""CheckOldValue""))
				p_CheckOldValue = Boolean.valueOf(""Y"".equals(element.getParameter()));
			else if (name.equals(""SetCustomization""))
				p_SetCustomization = ""Y"".equals(element.getParameter());
			else if (name.equals(""EntityType""))
				p_EntityType = element.getParameter().toString();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_AD_ChangeLog_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.ChangeLogProcess.doIt,ChangeLogProcess.java,"String doIt () throws Exception
	{
		if (p_SetCustomization)
			return setCustomization();
		
		log.info(""AD_ChangeLog_ID="" + p_AD_ChangeLog_ID
			+ "", CheckOldValue="" + p_CheckOldValue + "", CheckNewValue="" + p_CheckNewValue);
		
		//	Single Change or All Customizations
		String sql = ""SELECT * FROM AD_ChangeLog WHERE AD_ChangeLog_ID=? ""
			+ ""ORDER BY AD_Table_ID, Record_ID, AD_Column_ID"";
		if (p_AD_ChangeLog_ID == 0){
			if (p_EntityType == null) 
				sql = ""SELECT * FROM AD_ChangeLog WHERE IsCustomization='Y' AND IsActive='Y' ""
					+ ""ORDER BY AD_Table_ID, AD_ChangeLog_ID, Record_ID, AD_Column_ID"";
			else
				sql = ""SELECT cl.* FROM AD_ChangeLog cl, AD_Column c WHERE cl.IsCustomization='Y' ""
					+ ""AND cl.IsActive='Y' AND cl.AD_Column_ID = c.AD_Column_ID AND c.EntityType = ? ""
					+ ""ORDER BY cl.AD_Table_ID, cl.AD_ChangeLog_ID, cl.Record_ID, cl.AD_Column_ID"";
		}
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_TrxName());
			if (p_AD_ChangeLog_ID != 0)
				pstmt.setInt (1, p_AD_ChangeLog_ID);
			if (p_EntityType != null)
				pstmt.setString(1, p_EntityType);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				createStatement (new MChangeLog(getCtx(), rs, get_TrxName()), get_TrxName());
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//	final call
		executeStatement();
		
		return ""@OK@: "" + m_ok + "" - @Errors@: "" + m_errors + "" - @Failed@: "" + m_checkFailed;
	}	//	doIt
"
org.compiere.process.ChangeLogProcess.createStatement,ChangeLogProcess.java,"void createStatement (MChangeLog cLog, Trx trx)
	{
		//	New Table 
		if (m_table != null)
		{
			if (cLog.getAD_Table_ID() != m_table.getAD_Table_ID())
			{
				executeStatement();
				m_table = null;
			}
		}
		if (m_table == null)
			m_table = new MTable (getCtx(), cLog.getAD_Table_ID(), trx);

		//	New Record
		if (m_sqlUpdate != null 
			&& (cLog.getRecord_ID() != m_oldRecord_ID
				|| !cLog.getRecord2_ID().equals(m_oldRecord2_ID)))
			executeStatement();

		//	Column Info
		m_column = new MColumn (getCtx(), cLog.getAD_Column_ID(), get_TrxName());
		//	Same Column twice
		if (m_columns.contains(m_column.getColumnName()))
			executeStatement();
		m_columns.add(m_column.getColumnName());

		//	Create new Statement
		if (m_sqlUpdate == null)
		{
			String tableName = m_table.getTableName();
			m_keyColumn = m_table.getTableName() + ""_ID"";
			if (tableName.equals(""AD_Ref_Table""))
				m_keyColumn = ""AD_Reference_ID"";
			//
			m_sqlUpdate = new StringBuffer (""UPDATE "")
				.append(tableName)
				.append("" SET "");
			//	Key
			m_sqlUpdateWhere = new StringBuffer ("" WHERE "");
			if (cLog.getRecord_ID() != 0)
				m_sqlUpdateWhere.append(m_keyColumn).append(""="").append(cLog.getRecord_ID());
			else
				m_sqlUpdateWhere.append(cLog.getRecord2_ID());
			m_oldRecord_ID = cLog.getRecord_ID();
			m_oldRecord2_ID = cLog.getRecord2_ID();
			
			//	Insert - new value is null and UnDo only
			m_isInsert = cLog.isNewNull() && p_CheckNewValue != null;
			if (m_isInsert)
			{
				m_sqlInsert = new StringBuffer (""INSERT INTO "")
					.append(tableName).append(""("");
				m_sqlInsertValue = new StringBuffer ("") VALUES ("");
				if (cLog.getRecord_ID() != 0)
				{
					m_sqlInsert.append(m_keyColumn);
					m_sqlInsertValue.append(cLog.getRecord_ID());
					if (!m_keyColumn.equals(m_column.getColumnName()))
					{
						m_sqlInsert.append("","").append(m_column.getColumnName());
						m_sqlInsertValue.append("","").append(getSQLValue(cLog.getOldValue()));
					}
				}
			}
			m_numberColumns = 1;
		}
		//	Just new Column
		else
		{
			m_sqlUpdate.append("", "");
			//	Insert
			if (m_isInsert)
				m_isInsert = cLog.isNewNull();
			if (m_isInsert && !m_keyColumn.equals(m_column.getColumnName()))
			{
				m_sqlInsert.append("","").append(m_column.getColumnName());
				m_sqlInsertValue.append("","").append(getSQLValue(cLog.getOldValue()));
			}
			m_numberColumns++;
		}
		
		//	Update Set clause -- columnName=value
		m_sqlUpdate.append(m_column.getColumnName())
			.append(""="");
		//	UnDo a <- (b)
		if (p_CheckNewValue != null)
		{
			m_sqlUpdate.append(getSQLValue(cLog.getOldValue()));
			if (p_CheckNewValue.booleanValue())
			{
				m_sqlUpdateWhere.append("" AND "").append(m_column.getColumnName());
				String newValue = getSQLValue(cLog.getNewValue());
				if (newValue == null || ""NULL"".equals(newValue))
					m_sqlUpdateWhere.append("" IS NULL"");
				else
					m_sqlUpdateWhere.append(""="").append(newValue);
			}
		}
		//	ReDo (a) -> b
		else if (p_CheckOldValue != null)
		{
			m_sqlUpdate.append(getSQLValue(cLog.getNewValue()));
			if (p_CheckOldValue.booleanValue())
			{
				String newValue = getSQLValue(cLog.getOldValue());
				m_sqlUpdateWhere.append("" AND "").append(m_column.getColumnName());
				if (newValue == null || ""NULL"".equals(newValue))
					m_sqlUpdateWhere.append("" IS NULL"");
				else
					m_sqlUpdateWhere.append(""="").append(newValue);
			}
		}
	}	//	createStatement
"
org.compiere.process.ChangeLogProcess.getSQLValue,ChangeLogProcess.java,"String getSQLValue (String value)
	{
		if (value == null || value.length() == 0 || value.equals(""NULL""))
			return ""NULL"";
		
		//	Data Types
		if (FieldType.isNumeric (m_column.getAD_Reference_ID())
			|| FieldType.isID (m_column.getAD_Reference_ID()) )
			return value;
		if (DisplayTypeConstants.YesNo == m_column.getAD_Reference_ID()) 
		{
			if (value.equals(""true""))
				return ""'Y'"";
			else
				return ""'N'"";
		}
		if (FieldType.isDate(m_column.getAD_Reference_ID()) )
			return DB.TO_DATE (Timestamp.valueOf(value));

		//	String, etc.
		return DB.TO_STRING(value);
	}	//	getSQLValue
"
org.compiere.process.ChangeLogProcess.executeStatement,ChangeLogProcess.java,"boolean executeStatement()
	{
		if (m_sqlUpdate == null)
			return false;
		int no = 0;
		
		//	Insert SQL
		if (m_isInsert && m_numberColumns > 2)
		{
			m_sqlInsert.append(m_sqlInsertValue).append("")"");
			log.info(m_sqlInsert.toString());
			//
			no = DB.executeUpdate(m_sqlInsert.toString(), get_TrxName());
			if (no == -1)
			{
			//	log.warning(""Insert failed - "" + m_sqlInsert);
				m_errors++;
			}
			else if (no == 0)
			{
				log.warning(""Cannot reapply customization. No record inserted by "" + m_sqlInsert);
				m_checkFailed++;
			}
			else
				m_ok++;
		}
		else	//	Update SQL
		{
			m_sqlUpdate.append(m_sqlUpdateWhere);
			log.info(m_sqlUpdate.toString());
			//
			no = DB.executeUpdate(m_sqlUpdate.toString(), get_TrxName());
			if (no == -1)
			{
			//	log.warning(""Failed - "" + m_sqlUpdate);
				m_errors++;
			}
			else if (no == 0)
			{
				log.warning(""Cannot reapply customization. No record updated by "" + m_sqlUpdate);
				m_checkFailed++;
			}
			else
				m_ok++;
		}
		//	Reset
		m_sqlUpdate = null;
		m_sqlUpdateWhere = null;
		m_sqlInsert = null;
		m_sqlInsertValue = null;
		m_columns = new ArrayList<String>();
		return no > 0;
	}	//	executeStatement
"
org.compiere.process.ChangeLogProcess.setCustomization,ChangeLogProcess.java,"String setCustomization()
	{
		log.info("""");
		String sql = ""UPDATE AD_ChangeLog SET IsCustomization='N' WHERE IsCustomization='Y'"";
		int resetNo = DB.executeUpdate(sql, get_TrxName());
		
		int updateNo = 0;
		//	Get Tables
		sql = ""SELECT * FROM AD_Table t ""
		//	Table with EntityType
			+ ""WHERE EXISTS (SELECT * FROM AD_Column c ""
				+ ""WHERE t.AD_Table_ID=c.AD_Table_ID AND c.ColumnName='EntityType')""
		//	Changed Tables
			+ "" AND EXISTS (SELECT * FROM AD_ChangeLog l ""
				+ ""WHERE t.AD_Table_ID=l.AD_Table_ID)"";
		StringBuffer update = null;
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_TrxName());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MTable table = new MTable (getCtx(), rs, get_TrxName());
				
				String tableName = table.getTableName();
				String columnName = tableName + ""_ID"";
				if (tableName.equals(""AD_Ref_Table""))
					columnName = ""AD_Reference_ID"";
				update = new StringBuffer (""UPDATE AD_ChangeLog SET IsCustomization='Y' ""
					+ ""WHERE AD_Table_ID="").append(table.getAD_Table_ID());
				update.append ("" AND Record_ID IN (SELECT "")
					.append (columnName)
					.append ("" FROM "").append(tableName)
					.append ("" WHERE EntityType IN ('D','C'))"");
				int no = DB.executeUpdate(update.toString(), get_TrxName());
				log.config(table.getTableName() + "" = "" + no);
				updateNo += no;
				
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql + "" --- "" + update, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		return ""@Reset@: "" + resetNo + "" - @Updated@: "" + updateNo;
	}	//	setCustomization
"
org.compiere.process.ExpenseSOrder.prepare,ExpenseSOrder.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_BPartner_ID""))
				p_C_BPartner_ID = element.getParameterAsInt();
			else if (name.equals(""DateExpense""))
			{
				p_DateFrom = (Timestamp)element.getParameter();
				m_DateTo = (Timestamp)element.getParameter_To();
			}
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.ExpenseSOrder.doIt,ExpenseSOrder.java,"String doIt() throws java.lang.Exception
	{
		StringBuffer sql = new StringBuffer(""SELECT * FROM S_TimeExpenseLine el ""
			+ ""WHERE el.AD_Client_ID=?""						//	#1
			+ "" AND el.C_BPartner_ID>0 AND el.IsInvoiced='Y'""	//	Business Partner && to be invoiced
			+ "" AND el.C_OrderLine_ID IS NULL""					//	not invoiced yet
			+ "" AND EXISTS (SELECT * FROM S_TimeExpense e ""		//	processed only
				+ ""WHERE el.S_TimeExpense_ID=e.S_TimeExpense_ID AND e.Processed='Y')"");		
		if (p_C_BPartner_ID != 0)
			sql.append("" AND el.C_BPartner_ID=?"");			//	#2
		if (p_DateFrom != null || m_DateTo != null)
		{
			sql.append("" AND EXISTS (SELECT * FROM S_TimeExpense e ""
				+ ""WHERE el.S_TimeExpense_ID=e.S_TimeExpense_ID"");
			if (p_DateFrom != null)
				sql.append("" AND e.DateReport >= ?"");		//	#3
			if (m_DateTo != null)
				sql.append("" AND e.DateReport <= ?"");		//	#4
			sql.append("")"");
		}
		sql.append("" ORDER BY el.C_BPartner_ID, el.C_Project_ID, el.S_TimeExpense_ID, el.Line"");

		//
		MBPartner oldBPartner = null;
		int old_Project_ID = -1;
		MTimeExpense te = null;
		//
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql.toString(), get_TrxName());
			int par = 1;
			pstmt.setInt(par++, getAD_Client_ID());
			if (p_C_BPartner_ID != 0)
				pstmt.setInt(par++, p_C_BPartner_ID);
			if (p_DateFrom != null)
				pstmt.setTimestamp(par++, p_DateFrom);
			if (m_DateTo != null)
				pstmt.setTimestamp(par++, m_DateTo);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())				//	********* Expense Line Loop
			{
				MTimeExpenseLine tel = new MTimeExpenseLine(getCtx(), rs, get_TrxName());
				if (!tel.isInvoiced())
					continue;
				
				//	New BPartner - New Order
				if (oldBPartner == null 
					|| oldBPartner.getC_BPartner_ID() != tel.getC_BPartner_ID())
				{
					completeOrder ();
					oldBPartner = new MBPartner (getCtx(), tel.getC_BPartner_ID(), get_TrxName());
				}
				//	New Project - New Order
				if (old_Project_ID != tel.getC_Project_ID())
				{
					completeOrder ();
					old_Project_ID = tel.getC_Project_ID();
				}
				if (te == null || te.getS_TimeExpense_ID() != tel.getS_TimeExpense_ID())
					te = new MTimeExpense (getCtx(), tel.getS_TimeExpense_ID(), get_TrxName());
				//
				processLine (te, tel, oldBPartner);
			}								//	********* Expense Line Loop
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql.toString(), e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		completeOrder ();

		return ""@Created@="" + m_noOrders;
	}	//	doIt
"
org.compiere.process.ExpenseSOrder.processLine,ExpenseSOrder.java,"void processLine (MTimeExpense te, MTimeExpenseLine tel, MBPartner bp)
	{
		if (m_order == null)
		{
			log.info(""New Order for "" + bp + "", Project="" + tel.getC_Project_ID());
			m_order = new MOrder (getCtx(), 0, get_TrxName());
			m_order.setAD_Org_ID(tel.getAD_Org_ID());
			m_order.setC_DocTypeTarget_ID(MOrder.DocSubTypeSO_OnCredit);
			//
			m_order.setBPartner(bp);
			if (m_order.getC_BPartner_Location_ID() == 0)
			{
				log.log(Level.SEVERE, ""No BP Location: "" + bp);
				addLog(0, te.getDateReport(), 
					null, ""No Location: "" + te.getDocumentNo() + "" "" + bp.getName());
				m_order = null;
				return;
			}
			m_order.setM_Warehouse_ID(te.getM_Warehouse_ID());
			if (tel.getC_Activity_ID() != 0)
				m_order.setC_Activity_ID(tel.getC_Activity_ID());
			if (tel.getC_Campaign_ID() != 0)							
				m_order.setC_Campaign_ID(tel.getC_Campaign_ID());
			if (tel.getC_Project_ID() != 0)
			{
				m_order.setC_Project_ID(tel.getC_Project_ID());
				//	Optionally Overwrite BP Price list from Project
				MProject project = new MProject (getCtx(), tel.getC_Project_ID(), get_TrxName());
				if (project.getM_PriceList_ID() != 0)
					m_order.setM_PriceList_ID(project.getM_PriceList_ID());
			}
			m_order.setSalesRep_ID(te.getDoc_User_ID());
			//
			if (!m_order.save())
			{
				throw new IllegalStateException(""Cannot save Order"");
			}
		}
		else
		{
			//	Update Header info
			if (tel.getC_Activity_ID() != 0 && tel.getC_Activity_ID() != m_order.getC_Activity_ID())
				m_order.setC_Activity_ID(tel.getC_Activity_ID());
			if (tel.getC_Campaign_ID() != 0 && tel.getC_Campaign_ID() != m_order.getC_Campaign_ID())
				m_order.setC_Campaign_ID(tel.getC_Campaign_ID());
			if (!m_order.save())
				throw new IllegalStateException(""Cannot save Order"");
		}
		
		//	OrderLine
		MOrderLine ol = new MOrderLine (m_order);
		//
		if (tel.getM_Product_ID() != 0)
			ol.setM_Product_ID(tel.getM_Product_ID(), 
				tel.getC_UOM_ID());
		if (tel.getS_ResourceAssignment_ID() != 0)
			ol.setS_ResourceAssignment_ID(tel.getS_ResourceAssignment_ID());
		ol.setQty(tel.getQtyInvoiced());		//	
		ol.setDescription(tel.getDescription());
		//
		ol.setC_Project_ID(tel.getC_Project_ID());
		ol.setC_ProjectPhase_ID(tel.getC_ProjectPhase_ID());
		ol.setC_ProjectTask_ID(tel.getC_ProjectTask_ID());
		ol.setC_Activity_ID(tel.getC_Activity_ID());
		ol.setC_Campaign_ID(tel.getC_Campaign_ID());
		//
		BigDecimal price = tel.getPriceInvoiced();	//	
		if (price != null && price.compareTo(Env.ZERO) != 0)
		{
			if (tel.getC_Currency_ID() != m_order.getC_Currency_ID())
				price = MConversionRate.convert(getCtx(), price, 
					tel.getC_Currency_ID(), m_order.getC_Currency_ID(), 
					m_order.getAD_Client_ID(), m_order.getAD_Org_ID());
			ol.setPrice(price);
		}
		else
			ol.setPrice();
		if (tel.getC_UOM_ID() != 0 && ol.getC_UOM_ID() == 0)
			ol.setC_UOM_ID(tel.getC_UOM_ID());
		ol.setTax();
		if (!ol.save())
		{
			throw new IllegalStateException(""Cannot save Order Line"");
		}
		//	Update TimeExpense Line
		tel.setC_OrderLine_ID(ol.getC_OrderLine_ID());
		if (tel.save())
			log.fine(""Updated "" + tel + "" with C_OrderLine_ID"");
		else
			log.log(Level.SEVERE, ""Not Updated "" + tel + "" with C_OrderLine_ID"");
			
	}	//	processLine
"
org.compiere.process.ExpenseSOrder.completeOrder,ExpenseSOrder.java,"void completeOrder ()
	{
		if (m_order == null)
			return;
		m_order.setDocAction(DocActionConstants.ACTION_Prepare);
		m_order.processIt(DocActionConstants.ACTION_Prepare);
		if (!m_order.save())
			throw new IllegalStateException(""Cannot save Order"");
		m_noOrders++;
		addLog (m_order.get_ID(), m_order.getDateOrdered(), m_order.getGrandTotal(), m_order.getDocumentNo());
		m_order = null;
	}	//	completeOrder
"
org.compiere.process.IndexValidate.prepare,IndexValidate.java,"void prepare()
	{
		p_AD_TableIndex_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.IndexValidate.doIt,IndexValidate.java,"String doIt() throws Exception
	{
		MTableIndex index = new MTableIndex (getCtx(), p_AD_TableIndex_ID, get_TrxName());
		log.info (index.toString ());
		Trx trx = Trx.get(""getDatabaseMetaData"");
		DatabaseMetaData md = trx.getConnection().getMetaData();
		String tableName = index.getTableName();
		if (md.storesUpperCaseIdentifiers())
			tableName = tableName.toUpperCase();
		else if (md.storesLowerCaseIdentifiers())
			tableName = tableName.toLowerCase();
		String catalog = ""REFERENCE"";
		String schema = null;
		
		String returnMesg = """";
		String[] indexColsFromDB = new String[30];
		int numIndexColsFromDB = 0;
		boolean indexNUniqueInDB = true;
		

		boolean found = false;
		ResultSet rs = md.getIndexInfo (catalog, schema, 
			tableName, false, true);
		while (rs.next())
		{
			String dbIndexName = rs.getString (""INDEX_NAME"");			
			if (dbIndexName == null)
				continue;
			if (index.getName().equalsIgnoreCase(dbIndexName))
			{
				found = true;
				String columnName=rs.getString(""COLUMN_NAME"");
				int pos = (rs.getShort(""ORDINAL_POSITION""));				
				if(pos>0)
				{
					indexColsFromDB[pos-1]=columnName;
				}
				indexNUniqueInDB=rs.getBoolean(""NON_UNIQUE"");
				//break;
			}
		}
		rs.close();
		trx.close();
		
		
		MIndexColumn [] indexCols  = index.getColumns(true);
		boolean modified = false;
		
		if(indexCols.length<=0)
		{
			returnMesg = ""No Index columns specified"";
		}		
		else if(!found)
		{
			int rvalue = DB.executeUpdate(index.getDDL(), (Object[])null, true, get_TrxName());
			if(rvalue == -1)
				returnMesg = ""Failed to create index"";
			else
				returnMesg = ""Created index succesfully"";
			
		}
		else
		{
			//Found the index in DB
			for(int i=0;i<30;i++)
			{
				if(indexColsFromDB[i] != null)
					numIndexColsFromDB++;
				else
					break;
			}		
			
						
			if(numIndexColsFromDB != indexCols.length)
			{
				modified = true;
			}
			else if(!indexNUniqueInDB != index.isUnique())
			{
				modified = true;
			}
			else
			{
				for(int j=0;j<indexCols.length;j++)
				{
					/*what if they are returned in a diff sequence ?*/
					if (indexCols[j].getColumnName().equalsIgnoreCase(indexColsFromDB[j]))						
						continue;					
					else if((indexColsFromDB[j].startsWith(""\""""))&&(indexColsFromDB[j].endsWith(""\"""")))
					{
						/* EDB returns varchar index columns wrapped with double quotes, hence comparing
						 * after stripping the quotes
						 */
						String cname = indexColsFromDB[j].substring(1,indexColsFromDB[j].length()-1);
						if(cname.equalsIgnoreCase(indexCols[j].getColumnName()))
							continue;
						else
						{
							modified=true;
							break;
						}						
					}
					else
					{
						modified=true;
						break;
					}				
				}
			}
			
			if(modified)
			{
				int rvalue = DB.executeUpdate(""DROP INDEX ""+index.getName(), (Object[])null, true, get_TrxName());							
				rvalue = DB.executeUpdate(index.getDDL(), (Object[])null, true, get_TrxName());
				if(rvalue == -1)
					returnMesg = ""Failed to modify index"";
				else
					returnMesg = ""Modified index successfully"";
			}
			else
				returnMesg = ""No Changes to the index"";
		}
		
		return returnMesg;
	}	//	doIt
"
org.compiere.process.ReportLineSet_Copy.prepare,ReportLineSet_Copy.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""PA_ReportLineSet_ID""))
				m_PA_ReportLineSet_ID = ((BigDecimal)element.getParameter()).intValue();
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.ReportLineSet_Copy.doIt,ReportLineSet_Copy.java,"String doIt() throws Exception
	{
		int to_ID = super.getRecord_ID();
		log.info(""From PA_ReportLineSet_ID="" + m_PA_ReportLineSet_ID + "", To="" + to_ID);
		if (to_ID < 1)
			throw new Exception(MSG_SaveErrorRowNotFound);
		//
		MReportLineSet to = new MReportLineSet(getCtx(), to_ID, get_TrxName());
		MReportLineSet rlSet = new MReportLineSet(getCtx(), m_PA_ReportLineSet_ID, get_TrxName());
		MReportLine[] rls = rlSet.getLiness();
		for (MReportLine element : rls) {
			MReportLine rl = MReportLine.copy (getCtx(), to.getAD_Client_ID(), to.getAD_Org_ID(), to_ID, element, get_TrxName());
			rl.save();
			MReportSource[] rss = element.getSources();
			if (rss != null)
			{
				for (MReportSource element2 : rss) {
					MReportSource rs = MReportSource.copy (getCtx(), to.getAD_Client_ID(), to.getAD_Org_ID(), rl.get_ID(), element2, get_TrxName());
					rs.save();
				}
			}
			//	Oper 1/2 were set to Null ! 
		}
		return ""@Copied@="" + rls.length;
	}	//	doIt
"
org.compiere.process.CacheReset.doIt,CacheReset.java,"String doIt() throws java.lang.Exception
	{
		log.info("""");
		Env.reset(false);	// not final
		return ""Cache Reset"";
	}	//	doIt
"
org.compiere.process.AllocationAuto.prepare,AllocationAuto.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_BP_Group_ID""))
				p_C_BP_Group_ID = element.getParameterAsInt();
			else if (name.equals(""C_BPartner_ID""))
				p_C_BPartner_ID = element.getParameterAsInt();
			else if (name.equals(""AllocateOldest""))
				p_AllocateOldest = ""Y"".equals(element.getParameter());
			else if (name.equals(""APAR""))
				p_APAR = (String)element.getParameter();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.AllocationAuto.doIt,AllocationAuto.java,"String doIt() throws Exception
	{
		log.info (""C_BP_Group_ID="" + p_C_BP_Group_ID 
			+ "", C_BPartner_ID="" + p_C_BPartner_ID 
			+ "", Oldest="" + p_AllocateOldest
			+ "", AP/AR="" + p_APAR);
		int countBP = 0;
		int countAlloc = 0;
		if (p_C_BPartner_ID != 0)
		{
			countAlloc = allocateBP (p_C_BPartner_ID);
			if (countAlloc > 0)
				countBP++;
		}
		else if (p_C_BP_Group_ID != 0)
		{
			String sql = ""SELECT C_BPartner_ID FROM C_BPartner WHERE C_BP_Group_ID=? ORDER BY Value"";
			PreparedStatement pstmt = null;
			try
			{
				pstmt = DB.prepareStatement (sql, get_TrxName());
				pstmt.setInt (1, p_C_BP_Group_ID);
				ResultSet rs = pstmt.executeQuery ();
				while (rs.next ())
				{
					int C_BPartner_ID = rs.getInt(1);
					int count = allocateBP (C_BPartner_ID);
					if (count > 0)
					{
						countBP++;
						countAlloc += count;
						commit();
					}
				}
				rs.close ();
				pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				log.log(Level.SEVERE, sql, e);
			}
			try
			{
				if (pstmt != null)
					pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				pstmt = null;
			}
		}
		else
		{
			String sql = ""SELECT C_BPartner_ID FROM C_BPartner WHERE AD_Client_ID=? ORDER BY Value"";
			PreparedStatement pstmt = null;
			try
			{
				pstmt = DB.prepareStatement (sql, get_TrxName());
				pstmt.setInt (1, getCtx().getAD_Client_ID());
				ResultSet rs = pstmt.executeQuery ();
				while (rs.next ())
				{
					int C_BPartner_ID = rs.getInt(1);
					int count = allocateBP (C_BPartner_ID);
					if (count > 0)
					{
						countBP++;
						countAlloc += count;
						commit();
					}
				}
				rs.close ();
				pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				log.log(Level.SEVERE, sql, e);
			}
			try
			{
				if (pstmt != null)
					pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				pstmt = null;
			}
		}
		//
		return ""@Created@ #"" + countBP + ""/"" + countAlloc;
	}	//	doIt
"
org.compiere.process.AllocationAuto.allocateBP,AllocationAuto.java,"int allocateBP (int C_BPartner_ID) throws Exception
	{
		getPayments(C_BPartner_ID);
		getInvoices(C_BPartner_ID);
		log.info (""(1) - C_BPartner_ID="" + C_BPartner_ID 
			+ "" - #Payments="" + m_payments.length + "", #Invoices="" + m_invoices.length);
		if (m_payments.length + m_invoices.length < 2)
			return 0;
		
		//	Payment Info - Invoice or Pay Selection
		int count = allocateBPPaymentWithInfo();
		if (count != 0)
		{
			getPayments(C_BPartner_ID);		//	for next
			getInvoices(C_BPartner_ID);
			log.info (""(2) - C_BPartner_ID="" + C_BPartner_ID 
				+ "" - #Payments="" + m_payments.length + "", #Invoices="" + m_invoices.length);
			if (m_payments.length + m_invoices.length < 2)
				return count;
		}
				
		//	All
		int newCount = allocateBPOldestFirst(true);
		if (newCount != 0)
		{
			count += newCount;
			getPayments(C_BPartner_ID);		//	for next
			getInvoices(C_BPartner_ID);
			processAllocation();
			log.info (""(3) - C_BPartner_ID="" + C_BPartner_ID 
				+ "" - #Payments="" + m_payments.length + "", #Invoices="" + m_invoices.length);
			if (m_payments.length + m_invoices.length < 2)
				return count;
		}
		
		//	One:One
		newCount = allocateBPOneToOne();
		if (newCount != 0)
		{
			count += newCount;
			getPayments(C_BPartner_ID);		//	for next
			getInvoices(C_BPartner_ID);
			processAllocation();
			log.info (""(4) - C_BPartner_ID="" + C_BPartner_ID 
				+ "" - #Payments="" + m_payments.length + "", #Invoices="" + m_invoices.length);
			if (m_payments.length + m_invoices.length < 2)
				return count;
		}

		//	Oldest First
		if (p_AllocateOldest)
		{
			newCount = allocateBPOldestFirst(false);
			if (newCount != 0)
			{
				count += newCount;
				getPayments(C_BPartner_ID);		//	for next
				getInvoices(C_BPartner_ID);
				processAllocation();
				log.info (""(5) - C_BPartner_ID="" + C_BPartner_ID 
					+ "" - #Payments="" + m_payments.length + "", #Invoices="" + m_invoices.length);
				if (m_payments.length + m_invoices.length < 2)
					return count;
			}
		}
		
		//	Other, e.g.
		//	Allocation if ""close"" % and $
		
		return count;
	}	//	alloc
"
org.compiere.process.AllocationAuto.getPayments,AllocationAuto.java,"MPayment[] getPayments (int C_BPartner_ID)
	{
		ArrayList<MPayment> list = new ArrayList<MPayment>();
		String sql = ""SELECT * FROM C_Payment ""
			+ ""WHERE IsAllocated='N' AND Processed='Y' AND C_BPartner_ID=?""
			+ "" AND IsPrepayment='N' AND C_Charge_ID IS NULL "";
		if (ONLY_AP.equals(p_APAR))
			sql += ""AND IsReceipt='N' "";
		else if (ONLY_AR.equals(p_APAR))
			sql += ""AND IsReceipt='Y' "";
		sql += ""ORDER BY DateTrx"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_TrxName());
			pstmt.setInt (1, C_BPartner_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MPayment payment = new MPayment (getCtx(), rs, get_TrxName());
				BigDecimal allocated = payment.getAllocatedAmt(); 
				if (allocated != null && allocated.compareTo(payment.getPayAmt()) == 0)
				{
					payment.setIsAllocated(true);
					payment.save();
				}
				else
					list.add (payment);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		m_payments = new MPayment[list.size ()];
		list.toArray (m_payments);
		return m_payments;
	}	//	getPayments
"
org.compiere.process.AllocationAuto.getInvoices,AllocationAuto.java,"MInvoice[] getInvoices (int C_BPartner_ID)
	{
		ArrayList<MInvoice> list = new ArrayList<MInvoice>();
		String sql = ""SELECT * FROM C_Invoice ""
			+ ""WHERE IsPaid='N' AND Processed='Y' AND C_BPartner_ID=? "";
		if (ONLY_AP.equals(p_APAR))
			sql += ""AND IsSOTrx='N' "";
		else if (ONLY_AR.equals(p_APAR))
			sql += ""AND IsSOTrx='Y' "";
		sql += ""ORDER BY DateInvoiced"";;
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_TrxName());
			pstmt.setInt (1, C_BPartner_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MInvoice invoice = new MInvoice (getCtx(), rs, get_TrxName());
				if (invoice.getOpenAmt(false, null).signum() == 0)
				{
					invoice.setIsPaid(true);
					invoice.save();
				}
				else
					list.add (invoice);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		m_invoices = new MInvoice[list.size ()];
		list.toArray (m_invoices);
		return m_invoices;
	}	//	getInvoices
"
org.compiere.process.AllocationAuto.allocateBPPaymentWithInfo,AllocationAuto.java,"int allocateBPPaymentWithInfo ()
	{
		int count = 0;
		
		//****	See if there is a direct link (Invoice or Pay Selection)
		for (MPayment payment : m_payments) {
			if (payment.isAllocated())
				continue;
			BigDecimal allocatedAmt = payment.getAllocatedAmt();
			log.info(payment + "", Allocated="" + allocatedAmt);
			if (allocatedAmt != null && allocatedAmt.signum() != 0)
				continue;
			BigDecimal availableAmt = payment.getPayAmt()
				.add(payment.getDiscountAmt())
				.add(payment.getWriteOffAmt())
				.add(payment.getOverUnderAmt());
			if (!payment.isReceipt())
				availableAmt = availableAmt.negate();
			log.fine(""Available="" + availableAmt);
			//
			if (payment.getC_Invoice_ID() != 0)
			{
				for (MInvoice invoice : m_invoices) {
					if (invoice.isPaid())
						continue;
				//	log.fine(""allocateIndividualPayments - "" + invoice);
					if (payment.getC_Invoice_ID() == invoice.getC_Invoice_ID())
					{
						if (payment.getC_Currency_ID() == invoice.getC_Currency_ID())
						{
							BigDecimal openAmt = invoice.getOpenAmt(true, null);
							if (!invoice.isSOTrx())
								openAmt = openAmt.negate();
							log.fine(invoice + "", Open="" + openAmt);
							//	With Discount, etc.
							if (availableAmt.compareTo(openAmt) == 0)
							{
								if (payment.allocateIt())
								{
									addLog(0, payment.getDateAcct(), openAmt, payment.getDocumentNo() + "" [1]"");
									count++;
								}
								break;
							}
						}
						else	//	Mixed Currency
						{
						}
					}	//	invoice found
				}	//	for all invoices
			}	//	payment has invoice
			else	//	No direct invoice
			{
				MPaySelectionCheck psCheck = MPaySelectionCheck.getOfPayment(getCtx(), payment.getC_Payment_ID(), get_TrxName());
				if (psCheck == null)
					continue;
				//
				BigDecimal totalInvoice = Env.ZERO;
				MPaySelectionLine[] psLines = psCheck.getPaySelectionLines(false);
				for (MPaySelectionLine line : psLines) {
					MInvoice invoice = line.getInvoice();
					if (payment.getC_Currency_ID() == invoice.getC_Currency_ID())
					{
						BigDecimal invoiceAmt = invoice.getOpenAmt(true, null);
						BigDecimal overUnder = line.getOpenAmt().subtract(line.getPayAmt())
							.subtract(line.getDiscountAmt()).subtract(line.getDifferenceAmt());
						invoiceAmt = invoiceAmt.subtract(line.getDiscountAmt())
							.subtract(line.getDifferenceAmt()).subtract(overUnder);
						if (!invoice.isSOTrx())
							invoiceAmt = invoiceAmt.negate();
						log.fine(invoice + "", Invoice="" + invoiceAmt);
						totalInvoice = totalInvoice.add(invoiceAmt);
					}
					else	//	Multi-Currency
					{
					}
				}
				if (availableAmt.compareTo(totalInvoice) == 0)
				{
					if (payment.allocateIt())
					{
						addLog(0, payment.getDateAcct(), availableAmt, payment.getDocumentNo() + "" [n]"");
						count++;
					}
				}
			}	//	No direct invoice
		}
		//****	See if there is a direct link
		
		return count;
	}	//	allocateIndividualPayments
"
org.compiere.process.AllocationAuto.allocateBPOneToOne,AllocationAuto.java,"int allocateBPOneToOne() throws Exception
	{
		int count = 0;
		for (int p = 0; p < m_payments.length; p++)
		{
			MPayment payment = m_payments[p];
			if (payment.isAllocated())
				continue;
			BigDecimal allocatedAmt = payment.getAllocatedAmt();
			log.info(payment + "", Allocated="" + allocatedAmt);
			if (allocatedAmt != null && allocatedAmt.signum() != 0)
				continue;
			BigDecimal availableAmt = payment.getPayAmt()
				.add(payment.getDiscountAmt())
				.add(payment.getWriteOffAmt())
				.add(payment.getOverUnderAmt());
			if (!payment.isReceipt())
				availableAmt = availableAmt.negate();
			log.fine(""Available="" + availableAmt);
			for (int i = 0; i < m_invoices.length; i++)
			{
				MInvoice invoice = m_invoices[i];
				if (invoice == null || invoice.isPaid())
					continue;
				if (payment.getC_Currency_ID() == invoice.getC_Currency_ID())
				{
					//	log.fine(""allocateBPartnerAll - "" + invoice);
					BigDecimal openAmt = invoice.getOpenAmt(true, null);
					if (!invoice.isSOTrx())
						openAmt = openAmt.negate();
					BigDecimal difference = availableAmt.subtract(openAmt).abs();
					log.fine(invoice + "", Open="" + openAmt + "" - Difference="" + difference);
					if (difference.signum() == 0)
					{
						Timestamp dateAcct = payment.getDateAcct();
						if (invoice.getDateAcct().after(dateAcct))
							dateAcct = invoice.getDateAcct();
						if (!createAllocation(payment.getC_Currency_ID(), ""1:1 ("" + availableAmt + "")"", 
							dateAcct, availableAmt, null, null, null, 
							invoice.getC_BPartner_ID(), payment.getC_Payment_ID(), 
							invoice.getC_Invoice_ID(), invoice.getAD_Org_ID()))
						{
							throw new CompiereSystemException(""Cannot create Allocation"");
						}
						processAllocation();
						count++;
						m_invoices[i] = null;		//	remove invoice
						m_payments[p] = null;
						payment = null;
						break;
					}
				}
				else	//	Multi-Currency
				{
				}
			}	//	for all invoices
		}	//	for all payments
		return count;
	}	//	allocateOneToOne
"
org.compiere.process.AllocationAuto.allocateBPOldestFirst,AllocationAuto.java,"int allocateBPOldestFirst(boolean exactMatchOnly) throws Exception
	{
		int C_Currency_ID = MClient.get(getCtx()).getC_Currency_ID();
		Timestamp dateAcct = null;
		//	Payments
		BigDecimal totalPayments = Env.ZERO;
		for (MPayment payment : m_payments) {
			if (payment.isAllocated())
				continue;
			BigDecimal allocatedAmt = payment.getAllocatedAmt();
		//	log.info(""allocateBPartnerAll - "" + payment + "", Allocated="" + allocatedAmt);
			if (allocatedAmt != null && allocatedAmt.signum() != 0)
				continue;
			BigDecimal availableAmt = payment.getPayAmt()
				.add(payment.getDiscountAmt())
				.add(payment.getWriteOffAmt())
				.add(payment.getOverUnderAmt());
			if (!payment.isReceipt())
				availableAmt = availableAmt.negate();
			//	Foreign currency
			if (payment.getC_Currency_ID() != C_Currency_ID)
				continue;
		//	log.fine(""allocateBPartnerAll - Available="" + availableAmt);
			if (dateAcct == null || payment.getDateAcct().after(dateAcct))
				dateAcct = payment.getDateAcct();
			totalPayments = totalPayments.add(availableAmt); 
		}
		//	Invoices
		BigDecimal totalInvoices = Env.ZERO;
		for (MInvoice invoice : m_invoices) {
			if (invoice.isPaid())
				continue;
		//	log.info(""allocateBPartnerAll - "" + invoice);
			BigDecimal openAmt = invoice.getOpenAmt(true, null);
			if (!invoice.isSOTrx())
				openAmt = openAmt.negate();
			//	Foreign currency
			if (invoice.getC_Currency_ID() != C_Currency_ID)
				continue;
		//	log.fine(""allocateBPartnerAll - Open="" + openAmt);
			if (dateAcct == null || invoice.getDateAcct().after(dateAcct))
				dateAcct = invoice.getDateAcct();
			totalInvoices = totalInvoices.add(openAmt);
		}
		
		BigDecimal difference = totalInvoices.subtract(totalPayments);
		log.info(""= Invoices="" + totalInvoices 
			+ "" - Payments="" + totalPayments 
			+ "" = Difference="" + difference);
		
		if (difference.signum() == 0 || !exactMatchOnly)
		{
			for (MPayment payment : m_payments) {
				if (payment.isAllocated())
					continue;
				BigDecimal allocatedAmt = payment.getAllocatedAmt();
				if (allocatedAmt != null && allocatedAmt.signum() != 0)
					continue;
				BigDecimal availableAmt = payment.getPayAmt()
					.add(payment.getDiscountAmt())
					.add(payment.getWriteOffAmt())
					.add(payment.getOverUnderAmt());
				if (!payment.isReceipt())
					availableAmt = availableAmt.negate();
				//	Foreign currency
				if (payment.getC_Currency_ID() != C_Currency_ID)
					continue;

				//
				for (MInvoice invoice : m_invoices) {

					// availableAmt and openAmt are positive for sales, negative for purchases
					if( availableAmt.signum() == 0 )
						break;
					
					if (invoice.isPaid())
						continue;
					BigDecimal openAmt = invoice.getOpenAmt(true, null);
					if (!invoice.isSOTrx())
						openAmt = openAmt.negate();
					//	Foreign currency
					if (invoice.getC_Currency_ID() != C_Currency_ID)
						continue;

					// availableAmt, openAmt, and amt are positive for sales, negative for purchases
					BigDecimal amt = availableAmt.signum() > 0 ? availableAmt.min(openAmt) : availableAmt.max(openAmt);
					
					if( amt.signum() == 0 )
						continue;
					
					if (!createAllocation(C_Currency_ID, exactMatchOnly ? ""BP All"" : ""BP Oldest ("" + difference.abs() + "")"", 
						dateAcct, amt, null, null, null, 
						invoice.getC_BPartner_ID(), payment.getC_Payment_ID(), invoice.getC_Invoice_ID(), invoice.getAD_Org_ID()))
					{
						throw new CompiereSystemException(""Cannot create Allocation"");
					}
					
					availableAmt = availableAmt.subtract(amt);					
				}	//	for all invoices
				
			}	//	for all payments
			processAllocation();
			return 1;
		}	//	Difference OK
		
		return 0;
	}	//	allocateBPartnerAll
"
org.compiere.process.AllocationAuto.createAllocation,AllocationAuto.java,"boolean createAllocation (int C_Currency_ID, String description, 
		Timestamp dateAcct, BigDecimal Amount, 
		BigDecimal DiscountAmt, BigDecimal WriteOffAmt, BigDecimal OverUnderAmt,
		int C_BPartner_ID, int C_Payment_ID, int C_Invoice_ID, int AD_Org_ID)
	{
		//	Process old Allocation 
		if (m_allocation != null 
			&& m_allocation.getC_Currency_ID() != C_Currency_ID)
			processAllocation();
		
		//	New Allocation
		if (m_allocation == null)
		{
			m_allocation = new MAllocationHdr (getCtx(), false, dateAcct,	//	automatic 
				C_Currency_ID, ""Auto "" + description, get_TrxName());
			m_allocation.setAD_Org_ID(AD_Org_ID);
			if (!m_allocation.save())
				return false;
		}
		
		//	New Allocation Line
		MAllocationLine aLine = new MAllocationLine (m_allocation, Amount, 
			DiscountAmt, WriteOffAmt, OverUnderAmt);
		aLine.setAD_Org_ID(AD_Org_ID);
		aLine.setC_BPartner_ID(C_BPartner_ID);
		
		if( C_Payment_ID == 0 )
			log.warning(""C_AllocationHdr_ID=""+m_allocation.getC_AllocationHdr_ID() +"": C_Payment_ID is null; may cause open balance discrepancies"");
		aLine.setC_Payment_ID(C_Payment_ID);

		if( C_Invoice_ID == 0 )
			log.warning(""C_AllocationHdr_ID=""+m_allocation.getC_AllocationHdr_ID() +"": C_Invoice_ID is null; may cause open balance discrepancies"");
		aLine.setC_Invoice_ID(C_Invoice_ID);
		
		return aLine.save();
	}	//	createAllocation
"
org.compiere.process.AllocationAuto.processAllocation,AllocationAuto.java,"boolean processAllocation()
	{
		if (m_allocation == null)
			return true;
		boolean success = m_allocation.processIt(X_C_AllocationHdr.DOCACTION_Complete);
		if (success)
			success = m_allocation.save();
		else
			m_allocation.save();
		addLog(0, m_allocation.getDateAcct(), null, m_allocation.getDescription());
		m_allocation = null;
		return success;
	}	//	processAllocation
"
org.compiere.process.TranslationImportExport.prepare,TranslationImportExport.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para)
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_Language""))
				p_AD_Language = (String)element.getParameter();
			else if (name.equals(""ImportExport""))
				p_ImportExport = (String)element.getParameter();
			else if (name.equals(""ExportScope""))
				p_ExportScope = (String)element.getParameter();
			else if (name.equals(""p_AD_Table_ID""))
				p_AD_Table_ID = element.getParameterAsInt();
			else if (name.equals(""TranslationLevel""))
				p_TranslationLevel = (String)element.getParameter();
			else if (name.equals(""Directory""))
				p_Directory = (String)element.getParameter();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.TranslationImportExport.doIt,TranslationImportExport.java,"String doIt() throws Exception
	{
		log.info(""AD_Language="" + p_AD_Language
			+ "",Mode="" + p_ImportExport
			+ "",Scope="" + p_ExportScope
			+ "",AD_Table_ID="" + p_AD_Table_ID
			+ "",Level="" + p_TranslationLevel
			+ "",Directory="" + p_Directory);
		//

		TranslationMgr trl = new TranslationMgr(Env.getCtx());
		String msg = trl.validateLanguage(p_AD_Language);
		if (msg.length() > 0)
			throw new CompiereUserException(""@LanguageSetupError@ - "" + msg);

		//	Mode
		boolean importMode = Mode_Import.equals(p_ImportExport);
		//	Client
		int AD_Client_ID = 0;
		if (ExportScope_Tenant.equals(p_ExportScope))
			AD_Client_ID = getCtx().getAD_Client_ID();
		trl.setExportScope(p_ExportScope, AD_Client_ID);

		//	Directory
		if (Util.isEmpty(p_Directory))
			p_Directory = Ini.getCompiereHome() + File.separator + ""data"";

		int noWords = 0;
		//	All Tables
		if (p_AD_Table_ID == 0)
		{
			String sql = ""SELECT * FROM AD_Table WHERE IsActive='Y' AND IsView='N'""
				+ "" AND TableName LIKE '%_Trl' AND TableName<>'AD_Column_Trl'"";
			if (ExportScope_Tenant.equals(p_ExportScope))
				sql += "" AND AccessLevel<>'4'"";	//	System Only
			else
				sql += "" AND AccessLevel NOT IN ('1','2','3')"";	// Org/Client/Both
			sql += "" ORDER BY TableName"";
			ArrayList<MTable> tables = MTable.getTablesByQuery(getCtx(), sql);
			for (MTable table : tables)
			{
				String tableName = table.getTableName();
				msg = null;
				msg = importMode
					? trl.importTrl (p_Directory, tableName)
					: trl.exportTrl (p_Directory, tableName, p_TranslationLevel);
				addLog(msg);
			}
			noWords = trl.getWordCount();
		}
		else	//	single table
		{
			MTable table = MTable.get(getCtx(), p_AD_Table_ID);
			msg = null;
			msg = importMode
				? trl.importTrl (p_Directory, table.getTableName())
				: trl.exportTrl (p_Directory, table.get_TableName(), p_TranslationLevel);
			addLog(msg);
			noWords = trl.getWordCount();
		}
		//
		return (""Word Count = "" + noWords);
	}	//	doIt
"
org.compiere.process.CommissionCopy.prepare,CommissionCopy.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_Commission_ID""))
				p_C_Commission_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
		p_C_CommissionTo_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.CommissionCopy.doIt,CommissionCopy.java,"String doIt () throws Exception
	{
		log.info(""doIt - C_Commission_ID="" + p_C_Commission_ID + "" - copy to "" + p_C_CommissionTo_ID);
		MCommission comFrom = new MCommission (getCtx(), p_C_Commission_ID, get_TrxName());
		if (comFrom.get_ID() == 0)
			throw new CompiereUserException (""No From Commission"");
		MCommission comTo = new MCommission (getCtx(), p_C_CommissionTo_ID, get_TrxName());
		if (comTo.get_ID() == 0)
			throw new CompiereUserException (""No To Commission"");
		
		//
		int no = comTo.copyLinesFrom(comFrom);
		return ""@Copied@: "" + no;
	}	//	doIt
"
org.compiere.process.RfQCreatePO.prepare,RfQCreatePO.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_DocType_ID""))
				p_C_DocType_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_C_RfQ_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.RfQCreatePO.doIt,RfQCreatePO.java,"String doIt () throws Exception
	{
		MRfQ rfq = new MRfQ (getCtx(), p_C_RfQ_ID, get_TrxName());
		if (rfq.get_ID() == 0)
			throw new IllegalArgumentException(""No RfQ found"");
		log.info(rfq.toString());
		
		//	Complete 
		MRfQResponse[] responses = rfq.getResponses(true, true);
		log.config(""#Responses="" + responses.length);
		if (responses.length == 0)
			throw new IllegalArgumentException(""No completed RfQ Responses found"");
		
		//	Winner for entire RfQ
		for (MRfQResponse response : responses) {
			if (!response.isSelectedWinner())
				continue;
			//
			MBPartner bp = new MBPartner(getCtx(), response.getC_BPartner_ID(), get_TrxName());
			log.config(""Winner="" + bp);
			MOrder order = new MOrder (getCtx(), 0, get_TrxName());
			order.setIsSOTrx(false);
			if (p_C_DocType_ID != 0)
				order.setC_DocTypeTarget_ID(p_C_DocType_ID);
			else
				order.setC_DocTypeTarget_ID();
			order.setBPartner(bp);
			order.setC_BPartner_Location_ID(response.getC_BPartner_Location_ID());
			order.setSalesRep_ID(rfq.getSalesRep_ID());
			if (response.getDateWorkComplete() != null)
				order.setDatePromised(response.getDateWorkComplete());
			else if (rfq.getDateWorkComplete() != null)
				order.setDatePromised(rfq.getDateWorkComplete());
			order.save();
			//
			MRfQResponseLine[] lines = response.getLines(false);
			for (MRfQResponseLine line : lines) {
				if (!line.isActive())
					continue;
				MRfQResponseLineQty[] qtys = line.getQtys(false);
				//	Response Line Qty
				for (MRfQResponseLineQty qty : qtys) {
					//	Create PO Lline for all Purchase Line Qtys
					if (qty.getRfQLineQty().isActive() && qty.getRfQLineQty().isPurchaseQty())
					{
						MOrderLine ol = new MOrderLine (order);
						ol.setM_Product_ID(line.getRfQLine().getM_Product_ID(), 
							qty.getRfQLineQty().getC_UOM_ID());
						ol.setDescription(line.getDescription());
						ol.setQty(qty.getRfQLineQty().getQty());
						BigDecimal price = qty.getNetAmt();
						ol.setPrice(price);
						ol.save();
					}
				}
			}
			response.setC_Order_ID(order.getC_Order_ID());
			response.save();
			return order.getDocumentNo();
		}

		
		//	Selected Winner on Line Level
		int noOrders = 0;
		for (MRfQResponse response : responses) {
			MBPartner bp = null;
			MOrder order = null;
			//	For all Response Lines
			MRfQResponseLine[] lines = response.getLines(false);
			for (MRfQResponseLine line : lines) {
				if (!line.isActive() || !line.isSelectedWinner())
					continue;
				//	New/different BP
				if (bp == null)
				{
					bp = new MBPartner(getCtx(), response.getC_BPartner_ID(), get_TrxName());
					order = null;
				}
				log.config(""Line="" + line + "", Winner="" + bp);
				//	New Order
				if (order == null)
				{
					order = new MOrder (getCtx(), 0, get_TrxName());
					order.setIsSOTrx(false);
					order.setC_DocTypeTarget_ID();
					order.setBPartner(bp);
					order.setC_BPartner_Location_ID(response.getC_BPartner_Location_ID());
					order.setSalesRep_ID(rfq.getSalesRep_ID());
					order.save();
					noOrders++;
					addLog(0, null, null, order.getDocumentNo());
				}
				//	For all Qtys
				MRfQResponseLineQty[] qtys = line.getQtys(false);
				for (MRfQResponseLineQty qty : qtys) {
					if (qty.getRfQLineQty().isActive() && qty.getRfQLineQty().isPurchaseQty())
					{
						MOrderLine ol = new MOrderLine (order);
						ol.setM_Product_ID(line.getRfQLine().getM_Product_ID(), 
							qty.getRfQLineQty().getC_UOM_ID());
						ol.setDescription(line.getDescription());
						ol.setQty(qty.getRfQLineQty().getQty());
						BigDecimal price = qty.getNetAmt();
						ol.setPriceActual(price);
						ol.save();
					}
				}	//	for all Qtys
			}	//	for all Response Lines
			if (order != null)
			{
				response.setC_Order_ID(order.getC_Order_ID());
				response.save();
			}
		}
		
		return ""#"" + noOrders;
	}	//	doIt
"
org.compiere.process.RequestReOpen.prepare,RequestReOpen.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""R_Request_ID""))
				p_R_Request_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.RequestReOpen.doIt,RequestReOpen.java,"String doIt () throws Exception
	{
		MRequest request = new MRequest (getCtx(), p_R_Request_ID, get_TrxName());
		log.info(request.toString());
		if (request.get_ID() == 0)
			throw new CompiereUserException(""@NotFound@ @R_Request_ID@ "" + p_R_Request_ID);
		
		request.setR_Status_ID();	//	set default status
		request.setProcessed(false);
		if (request.save() && !request.isProcessed())
			return ""@OK@"";
		return ""@Error@"";
	}	//	doIt
"
org.compiere.process.TranslationDocSync.prepare,TranslationDocSync.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.TranslationDocSync.doIt,TranslationDocSync.java,"String doIt() throws Exception
	{
		MClient client = MClient.get(getCtx());
		if (client.isMultiLingualDocument())
			throw new CompiereUserException(""@AD_Client_ID@: @IsMultiLingualDocument@"");
		//
		log.info("""" + client);
		String sql = ""SELECT * FROM AD_Table ""
			+ ""WHERE TableName LIKE '%_Trl' AND TableName NOT LIKE 'AD%' ""
			+ ""ORDER BY TableName"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_TrxName());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				processTable (new MTable(getCtx(), rs, null), client.getAD_Client_ID());
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		return ""OK"";
	}	//	doIt
"
org.compiere.process.TranslationDocSync.processTable,TranslationDocSync.java,"void processTable (MTable table, int AD_Client_ID)
	{
		StringBuffer sql = new StringBuffer();
		MColumn[] columns = table.getColumns(false);
		for (MColumn column : columns) {
			if (column.getAD_Reference_ID() == DisplayTypeConstants.String
				|| column.getAD_Reference_ID() == DisplayTypeConstants.Text)
			{
				String columnName = column.getColumnName();
				if (sql.length() != 0)
					sql.append("","");
				sql.append(columnName);
			}
		}
		String baseTable = table.getTableName();
		baseTable = baseTable.substring(0, baseTable.length()-4);
		
		log.config(baseTable + "": "" + sql);
		String columnNames = sql.toString();
		
		sql = new StringBuffer();
		sql.append(""UPDATE "").append(table.getTableName()).append("" t SET ("")
			.append(columnNames).append("") = (SELECT "").append(columnNames)
			.append("" FROM "").append(baseTable).append("" b WHERE t."")
			.append(baseTable).append(""_ID=b."").append(baseTable).append(""_ID) WHERE AD_Client_ID="")
			.append(AD_Client_ID);
		int no = DB.executeUpdate(sql.toString(), get_TrxName());
		addLog(0, null, new BigDecimal(no), baseTable);
	}	//	processTable
"
org.compiere.process.ImportLocator.doIt,ImportLocator.java,"String doIt() throws Exception {
		StringBuffer sql = null;
		int no = 0;
		String clientCheck = "" AND AD_Client_ID="" + p_AD_Client_ID;

		//	****	Prepare	****

		//	Delete Old Imported
		if (p_deleteOldImported)
		{
			sql = new StringBuffer (""DELETE FROM I_Locator ""
				  + ""WHERE I_IsImported='Y'"").append (clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			log.fine(""Delete Old Impored ="" + no);
		}

		//Set Client from Key
		sql = new StringBuffer (""UPDATE I_Locator l""
				  + "" SET AD_Client_ID = (SELECT AD_Client_ID FROM AD_Client c WHERE c.Value = l.ClientValue), "" 
				  +	"" ClientName = (SELECT Name FROM AD_Client c WHERE c.Value = l.ClientValue), ""
				  + "" Updated = COALESCE (Updated, SysDate),""
				  + "" UpdatedBy = COALESCE (UpdatedBy, 0)""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND AD_Client_ID is NULL""
				  + "" AND ClientValue is NOT NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info (""Set client from key ="" + no);

		//	Set Client from Name
		sql = new StringBuffer (""UPDATE I_Locator l""
				  + "" SET AD_Client_ID = (SELECT AD_Client_ID FROM AD_Client c WHERE c.Name = l.ClientName), ""
				  + "" ClientValue = (SELECT Value FROM AD_Client c WHERE c.Name = l.ClientName),""
				  + "" Updated = COALESCE (Updated, SysDate),""
				  + "" UpdatedBy = COALESCE (UpdatedBy, 0)""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND AD_Client_ID is NULL""
				  + "" AND ClientName is NOT NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info (""Set client from name ="" + no);

		//Set Org from Key
		sql = new StringBuffer (""UPDATE I_Locator l""
					  + "" SET AD_Org_ID = (SELECT AD_Org_ID FROM AD_Org o WHERE o.Value = l.OrgValue), ""
					  + "" OrgName = (SELECT Name FROM AD_Org o WHERE o.Value = l.OrgValue), ""
					  + "" Updated = COALESCE (Updated, SysDate),""
					  + "" UpdatedBy = COALESCE (UpdatedBy, 0)""
					  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
					  + "" AND (AD_Org_ID is NULL OR AD_Org_ID =0)""
					  + "" AND OrgValue is NOT NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info (""Set org from key ="" + no);

		//	Set Org from Name
		sql = new StringBuffer (""UPDATE I_Locator l""
					  + "" SET AD_Org_ID = (SELECT AD_Org_ID FROM AD_Org o WHERE o.Name = l.OrgName), ""
					  + "" OrgValue = (SELECT Value FROM AD_Org o WHERE o.Name = l.OrgName), ""
					  + "" Updated = COALESCE (Updated, SysDate),""
					  + "" UpdatedBy = COALESCE (UpdatedBy, 0)""
					  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
					  + "" AND (AD_Org_ID is NULL OR AD_Org_ID =0)""
					  + "" AND OrgName is NOT NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info (""Set Org from name ="" + no);


		sql = new StringBuffer (""UPDATE I_Locator l""
			  + "" SET AD_Client_ID = COALESCE (AD_Client_ID,"").append (p_AD_Client_ID).append (""),""
			  + "" AD_Org_ID = COALESCE (AD_Org_ID,"").append (p_AD_Org_ID).append (""),""
			  + "" IsActive = COALESCE (IsActive, 'Y'),""
			  + "" IsDefault = COALESCE (IsDefault, 'N'),""
			  + "" IsAvailableToPromise = COALESCE (IsAvailableToPromise, 'Y'),""
			  + "" IsAvailableForAllocation = COALESCE (IsAvailableForAllocation, 'Y'),""
			  + "" Created = COALESCE (Created, SysDate),""
			  + "" CreatedBy = COALESCE (CreatedBy, 0),""
			  + "" Updated = COALESCE (Updated, SysDate),""
			  + "" UpdatedBy = COALESCE (UpdatedBy, 0),""
			  + "" I_ErrorMsg = NULL,""
			  + "" I_IsImported = 'N' ""
			  + ""WHERE I_IsImported<>'Y' OR I_IsImported IS NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info (""Reset="" + no);

		String ts = DB.isPostgreSQL() ? 
				""COALESCE(I_ErrorMsg,'')""
				: ""I_ErrorMsg"";  //java bug, it could not be used directly
		sql = new StringBuffer (""UPDATE I_Locator l ""
				+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Org, '""
				+ ""WHERE (AD_Org_ID IS NULL ""
				+ "" OR NOT EXISTS (SELECT * FROM AD_Org oo WHERE l.AD_Org_ID=oo.AD_Org_ID AND oo.IsSummary='N' AND oo.IsActive='Y'))""
				+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Org="" + no);

		//Set Warehouse from Key
		sql = new StringBuffer (""UPDATE I_Locator l""
					  + "" SET M_Warehouse_ID = (SELECT M_Warehouse_ID FROM M_Warehouse w WHERE w.Value = l.WarehouseValue), ""
					  + "" WarehouseName = (SELECT Name FROM M_Warehouse w WHERE w.Value = l.WarehouseValue), ""
					  + "" Updated = COALESCE (Updated, SysDate),""
					  + "" UpdatedBy = COALESCE (UpdatedBy, 0)""
					  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
					  + "" AND (M_Warehouse_ID is NULL OR M_Warehouse_ID =0)""
					  + "" AND WarehouseValue is NOT NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info (""Set Warehouse from key ="" + no);

		//	Set Warehouse from Name
		sql = new StringBuffer (""UPDATE I_Locator l""
					  + "" SET M_Warehouse_ID = (SELECT M_Warehouse_ID FROM M_Warehouse w WHERE w.Name = l.WarehouseName), ""
					  + "" WarehouseValue = (SELECT Value FROM M_Warehouse w WHERE w.Name = l.WarehouseName), ""
					  + "" Updated = COALESCE (Updated, SysDate),""
					  + "" UpdatedBy = COALESCE (UpdatedBy, 0)""
					  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
					  + "" AND (M_Warehouse_ID is NULL OR M_Warehouse_ID =0)""
					  + "" AND WarehouseName is NOT NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info (""Set Warehouse from name ="" + no);

		sql = new StringBuffer (""UPDATE I_Locator l ""
				+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Warehouse, '""
				+ ""WHERE M_Warehouse_ID IS NULL ""
				+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Warehouse="" + no);

		sql = new StringBuffer (""UPDATE I_Locator l ""
				+ ""SET M_Locator_ID=(SELECT M_Locator_ID FROM M_Locator loc""
				+ "" WHERE l.Value=loc.Value "" 
				+ "" AND l.AD_Client_ID=loc.AD_Client_ID ""
				+ "" AND l.M_Warehouse_ID=loc.M_Warehouse_ID) ""
				+ "" WHERE M_Locator_ID IS NULL""
				+ "" AND l.Value IS NOT NULL""
				+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info(""Locator Existing Value="" + no);

		sql = new StringBuffer (""UPDATE I_Locator i ""
					+ ""SET M_Locator_ID=(SELECT MAX(M_Locator_ID) FROM M_Locator l""
					+ "" WHERE i.X=l.X AND i.Y=l.Y AND i.Z=l.Z ""
					+ "" AND (i.Bin IS NULL OR i.Bin = l.Bin) ""
					+ "" AND (i.Position IS NULL OR i.Position =l.Position) ""
					+ "" AND i.M_Warehouse_ID=l.M_Warehouse_ID ""
					+ "" AND i.AD_Client_ID=l.AD_Client_ID) ""
					+ ""WHERE M_Locator_ID IS NULL AND X IS NOT NULL AND Y IS NOT NULL AND Z IS NOT NULL""
					+ "" AND I_IsImported<>'Y'"").append (clientCheck);
				no = DB.executeUpdate (sql.toString (), get_TrxName());
				log.fine(""Set Locator from X,Y,Z ="" + no);

		sql = new StringBuffer (""UPDATE I_Locator l ""
				+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Aisle, Bay and Row segments are mandatory' ""
				+ ""WHERE I_IsImported<>'Y'""
				+ "" AND (M_Locator_ID IS NULL OR M_Locator_ID=0)""
				+ "" AND (X IS NULL OR Y IS NULL OR Z IS NULL)"")
				.append(clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			if (no != 0)
				log.warning(""Missing Aisle, Bay or Row="" + no);

		//Set Picking UOM from Name
		sql = new StringBuffer (""UPDATE I_Locator l""
					  + "" SET Picking_UOM_ID = (SELECT C_UOM_ID FROM C_UOM u WHERE u.Name = l.PickingUOMName), ""
					  + "" PickingUOMSymbol = (SELECT UOMSymbol FROM C_UOM u WHERE u.Name = l.PickingUOMName), ""
					  + "" Updated = COALESCE (Updated, SysDate),""
					  + "" UpdatedBy = COALESCE (UpdatedBy, 0)""
					  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
					  + "" AND (Picking_UOM_ID is NULL OR Picking_UOM_ID =0)""
					  + "" AND PickingUOMName is NOT NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info (""Set Picking UOM from name ="" + no);

		//	Set Picking UOM from Symbol
		sql = new StringBuffer (""UPDATE I_Locator l""
					  + "" SET Picking_UOM_ID = (SELECT C_UOM_ID FROM C_UOM u WHERE u.UOMSymbol = l.PickingUOMSymbol), ""
					  + "" PickingUOMName = (SELECT Name FROM C_UOM u WHERE u.UOMSymbol = l.PickingUOMSymbol), ""
					  + "" Updated = COALESCE (Updated, SysDate),""
					  + "" UpdatedBy = COALESCE (UpdatedBy, 0)""
					  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
					  + "" AND (Picking_UOM_ID is NULL OR Picking_UOM_ID =0)""
					  + "" AND PickingUOMSymbol is NOT NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info (""Set Picking UOM from symbol="" + no);

		sql = new StringBuffer (""UPDATE I_Locator l ""
				+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Picking UOM, '""
				+ ""WHERE Picking_UOM_ID IS NULL ""
				+ "" AND (l.PickingUOMName IS NOT NULL OR l.PickingUOMSymbol IS NOT NULL)""
				+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Picking UOM="" + no);

		//Set Stocking UOM from Name
		sql = new StringBuffer (""UPDATE I_Locator l""
					  + "" SET Stocking_UOM_ID = (SELECT C_UOM_ID FROM C_UOM u WHERE u.Name = l.StockingUOMName), ""
					  + "" StockingUOMSymbol = (SELECT UOMSymbol FROM C_UOM u WHERE u.Name = l.StockingUOMName), ""
					  + "" Updated = COALESCE (Updated, SysDate),""
					  + "" UpdatedBy = COALESCE (UpdatedBy, 0)""
					  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
					  + "" AND (Stocking_UOM_ID is NULL OR Stocking_UOM_ID =0)""
					  + "" AND StockingUOMName is NOT NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info (""Set Stocking UOM from name ="" + no);

		//	Set Stocking UOM from Symbol
		sql = new StringBuffer (""UPDATE I_Locator l""
					  + "" SET Stocking_UOM_ID = (SELECT C_UOM_ID FROM C_UOM u WHERE u.UOMSymbol = l.StockingUOMSymbol), ""
					  + "" StockingUOMName = (SELECT Name FROM C_UOM u WHERE u.UOMSymbol = l.StockingUOMSymbol), ""
					  + "" Updated = COALESCE (Updated, SysDate),""
					  + "" UpdatedBy = COALESCE (UpdatedBy, 0)""
					  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
					  + "" AND (Stocking_UOM_ID is NULL OR Stocking_UOM_ID =0)""
					  + "" AND StockingUOMSymbol is NOT NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info (""Set Stocking UOM from symbol="" + no);

		sql = new StringBuffer (""UPDATE I_Locator l ""
				+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Stocking UOM, '""
				+ ""WHERE Stocking_UOM_ID IS NULL ""
				+ "" AND (l.StockingUOMName IS NOT NULL OR l.StockingUOMSymbol IS NOT NULL)""
				+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Stocking UOM="" + no);
		
		//	Set Product from Product Key
		sql = new StringBuffer (""UPDATE I_Locator l""
				  + "" SET M_Product_ID=(SELECT M_Product_ID FROM M_Product m""
				  + "" WHERE l.ProductValue=m.Value AND l.AD_Client_ID=m.AD_Client_ID ), ""
				  + "" ProductName =(SELECT Name FROM M_Product m""
				  + "" WHERE l.ProductValue=m.Value AND l.AD_Client_ID=m.AD_Client_ID ) ""
				  + "" WHERE M_Product_ID IS NULL AND ProductValue IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Product from ProductValue ="" + no);

			//	Set Product from Product Name
		sql = new StringBuffer (""UPDATE I_Locator l""
				  + "" SET M_Product_ID = (SELECT M_Product_ID FROM M_Product m""
				  + "" WHERE l.ProductName=m.Name AND l.AD_Client_ID=m.AD_Client_ID ), ""
				  + "" ProductValue =(SELECT Value FROM M_Product m""
				  + "" WHERE l.ProductName=m.Name AND l.AD_Client_ID=m.AD_Client_ID )""
				  + "" WHERE M_Product_ID IS NULL AND ProductName IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Product from ProductValue ="" + no);


		// Error - Invalid Product
		sql = new StringBuffer (""UPDATE I_Locator l""
				  + "" SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Product, ' ""
				  + "" WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL)""
				  + "" AND l.M_Product_ID IS NULL""
				  + "" AND (l.productName IS NOT NULL OR l.ProductValue is NOT NULL)"").append (clientCheck);				  
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid Product="" + no);


		commit();

		//	-- New Locators -----------------------------------------------------

		int noInserted = 0;
		int noUpdated = 0;

		//	Go through Locator Records w/o
		sql = new StringBuffer (""SELECT * FROM I_Locator ""
				  + ""WHERE I_IsImported='N'"").append (clientCheck)
					.append("" ORDER BY I_Locator_ID"");
		try
		{
			PreparedStatement pstmt = DB.prepareStatement (sql.toString(), get_TrxName());
			ResultSet rs = pstmt.executeQuery ();

			MLocator locator = null;

			while (rs.next ())
			{
				X_I_Locator loc = new X_I_Locator (getCtx(), rs, get_TrxName());
				int M_Locator_ID = loc.getM_Locator_ID();
				
				boolean update = M_Locator_ID==0?false:true;
				
				locator = new MLocator (M_Locator_ID, loc);
				
				// Save Locator
				if (!locator.save())
				{
					String msg = ""Could not save Locator"";
					ValueNamePair pp = CLogger.retrieveError();
					if (pp != null)
						msg += "" - "" + pp.toStringX();
					loc.setI_ErrorMsg(msg);
					loc.save();
					continue;
				}
				if(update)
					noUpdated++;
				else
					noInserted++;
				
				loc.setM_Locator_ID(locator.getM_Locator_ID());
				
				if(loc.getM_Product_ID()!=0)
				{
					MProductLocator pl=MProductLocator.getOfProductLocator(getCtx(), loc.getM_Product_ID(), loc.getM_Locator_ID());
					if(pl == null)
						pl= new MProductLocator(getCtx(), loc.getM_Product_ID(), loc.getM_Locator_ID(), get_TrxName());
					pl.setMaxQuantity(loc.getProductMaxQuantity());
					pl.setMinQuantity(loc.getProductMinQuantity());
					pl.save();
				}
				loc.setI_IsImported(X_I_Locator.I_ISIMPORTED_Yes);
				loc.setProcessed(true);
				loc.save();
			}
			rs.close();
			pstmt.close();
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""Locator - "" + sql.toString(), e);
		}

		//Set Error to indicator to not imported
		sql = new StringBuffer (""UPDATE I_Locator ""
			+ ""SET I_IsImported='N', Updated=SysDate ""
			+ ""WHERE I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		addLog (0, null, new BigDecimal (no), ""@Errors@"");
		addLog (0, null, new BigDecimal (noUpdated), "" @M_Locator_ID@: @Updated@"");
		addLog (0, null, new BigDecimal (noInserted), "" @M_Locator_ID@: @Inserted@"");
		return ""#"" + noInserted + ""/"" + noUpdated;

	}
"
org.compiere.process.ImportLocator.prepare,ImportLocator.java,"void prepare() 
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) 
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_Client_ID""))
				p_AD_Client_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""AD_Org_ID""))
				p_AD_Org_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""DeleteOldImported""))
				p_deleteOldImported = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}
"
org.compiere.process.InventoryCountUpdate.prepare,InventoryCountUpdate.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) 
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""InventoryCountSet""))
				p_InventoryCountSetZero = ""Z"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_M_Inventory_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.InventoryCountUpdate.doIt,InventoryCountUpdate.java,"String doIt () throws Exception
	{
		log.info(""M_Inventory_ID="" + p_M_Inventory_ID);
		MInventory inventory = new MInventory (getCtx(), p_M_Inventory_ID, get_TrxName());
		if (inventory.get_ID() == 0)
			throw new CompiereSystemException (""Not found: M_Inventory_ID="" + p_M_Inventory_ID);

		//	Multiple Lines for one item
		//jz simple the SQL so that Derby also like it. To avoid testing Oracle by now, leave no change for Oracle
		String sql = null;
		if (DB.isOracle())
		{
			sql = ""UPDATE M_InventoryLine SET IsActive='N' ""
				+ ""WHERE M_Inventory_ID="" + p_M_Inventory_ID
				+ "" AND (M_Product_ID, M_Locator_ID, M_AttributeSetInstance_ID) IN ""
					+ ""(SELECT M_Product_ID, M_Locator_ID, M_AttributeSetInstance_ID ""
					+ ""FROM M_InventoryLine ""
					+ ""WHERE M_Inventory_ID="" + p_M_Inventory_ID
					+ "" GROUP BY M_Product_ID, M_Locator_ID, M_AttributeSetInstance_ID ""
					+ ""HAVING COUNT(*) > 1)"";
		}
		else
		{
			sql = ""UPDATE M_InventoryLine SET IsActive='N' ""
				+ ""WHERE M_Inventory_ID="" + p_M_Inventory_ID
				+ "" AND EXISTS ""
					+ ""(SELECT COUNT(*) ""
					+ ""FROM M_InventoryLine ""
					+ ""WHERE M_Inventory_ID="" + p_M_Inventory_ID
					+ "" GROUP BY M_Product_ID, M_Locator_ID, M_AttributeSetInstance_ID ""
					+ ""HAVING COUNT(*) > 1)"";
		}
		int multiple = DB.executeUpdate(sql, get_TrxName());
		log.info(""Multiple="" + multiple);

		int delMA = MInventoryLineMA.deleteInventoryMA(p_M_Inventory_ID, get_TrxName());
		log.info(""DeletedMA="" + delMA);

		//	ASI
		sql = ""UPDATE M_InventoryLine l ""
			+ ""SET (QtyBook,QtyCount) = ""
				+ ""(SELECT QtyOnHand,QtyOnHand FROM M_Storage s ""
				+ ""WHERE s.M_Product_ID=l.M_Product_ID AND s.M_Locator_ID=l.M_Locator_ID""
				+ "" AND s.M_AttributeSetInstance_ID=l.M_AttributeSetInstance_ID),""
			+ "" Updated=SysDate,""
			+ "" UpdatedBy="" + getAD_User_ID()
			//
			+ "" WHERE M_Inventory_ID="" + p_M_Inventory_ID
			+ "" AND EXISTS (SELECT * FROM M_Storage s ""
				+ ""WHERE s.M_Product_ID=l.M_Product_ID AND s.M_Locator_ID=l.M_Locator_ID""
				+ "" AND s.M_AttributeSetInstance_ID=l.M_AttributeSetInstance_ID)"";
		int no = DB.executeUpdate(sql, get_TrxName());
		log.info(""Update with ASI="" + no);

		//	No ASI
		int noMA = updateWithMA();

		//	Set Count to Zero
		if (p_InventoryCountSetZero)
		{
			sql = ""UPDATE M_InventoryLine l ""
				+ ""SET QtyCount=0 ""
				+ ""WHERE M_Inventory_ID="" + p_M_Inventory_ID;
			no = DB.executeUpdate(sql, get_TrxName());
			log.info(""Set Cont to Zero="" + no);
		}
		
		if (multiple > 0)
			return ""@M_InventoryLine_ID@ - #"" + (no + noMA) + "" --> @InventoryProductMultiple@"";
		
		return ""@M_InventoryLine_ID@ - #"" + (no + noMA);
	}	//	doIt
"
org.compiere.process.InventoryCountUpdate.updateWithMA,InventoryCountUpdate.java,"int updateWithMA()
	{
		int no = 0;
		//
		String sql = ""SELECT * FROM M_InventoryLine WHERE M_Inventory_ID=? AND COALESCE(M_AttributeSetInstance_ID,0)=0 "";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, p_M_Inventory_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MInventoryLine il = new MInventoryLine (getCtx(), rs, get_TrxName());
				BigDecimal onHand = Env.ZERO;
				MStorage[] storages = MStorage.getAll(getCtx(), il.getM_Product_ID(), il.getM_Locator_ID(), get_TrxName());
				MInventoryLineMA ma = null;
				for (MStorage storage : storages) {
					if (storage.getQtyOnHand().signum() == 0)
						continue;
					onHand = onHand.add(storage.getQtyOnHand());
					//	No ASI
					if (storage.getM_AttributeSetInstance_ID() == 0 
						&& storages.length == 1)
						continue;
					//	Save ASI
					ma = new MInventoryLineMA (il, 
						storage.getM_AttributeSetInstance_ID(), storage.getQtyOnHand());
					if (!ma.save())
						;
				}
				il.setQtyBook(onHand);
				il.setQtyCount(onHand);
				if (il.save())
					no++;
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		log.info(""#"" + no);
		return no;
	}	//	updateWithMA
"
org.compiere.process.NoteDelete.prepare,NoteDelete.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_User_ID""))
				p_AD_User_ID = ((BigDecimal)element.getParameter()).intValue();
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.NoteDelete.doIt,NoteDelete.java,"String doIt() throws Exception
	{
		log.info(""doIt - AD_User_ID="" + p_AD_User_ID);
		
		String sql = ""DELETE FROM AD_Note WHERE AD_Client_ID="" + getAD_Client_ID();
		if (p_AD_User_ID > 0)
			sql += "" AND AD_User_ID="" + p_AD_User_ID;
		//
		int no = DB.executeUpdate(sql, get_TrxName());
		return ""@Deleted@ = "" + no;
	}	//	doIt
"
org.compiere.process.ReplicationLocal.prepare,ReplicationLocal.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""IsTest""))
				m_test = Boolean.valueOf(""Y"".equals (element.getParameter()));
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
		m_system = MSystem.get (getCtx());
	}	//	prepare
"
org.compiere.process.ReplicationLocal.doIt,ReplicationLocal.java,"String doIt() throws Exception
	{
		if (m_system == null || !m_system.isValid())
			return (""SystemNotSetupForReplication"");
		//
		log.info(""doIt - Record_ID="" + getRecord_ID() + "", test="" + m_test);
		connectRemote();
		//
		setupRemote();
		mergeData();
		sendUpdates();

		//	Save Info
		log.info(""doIt - Replicated="" + m_replicated + "" - "" + m_replicationStart);
		m_replicationRun.setIsReplicated(m_replicated);
		double sec = (System.currentTimeMillis() - m_start);
		sec /= 1000;
		m_replicationRun.setDescription(sec + "" s"");
		m_replicationRun.save();
		if (m_replicated)
		{
			m_replication.setDateLastRun (m_replicationStart);
			m_replication.save();
		}
		//
		exit();
		return m_replicated ? ""Replicated"" : ""Replication Error"";
	}	//	doIt
"
org.compiere.process.ReplicationLocal.connectRemote,ReplicationLocal.java,"void connectRemote() throws Exception
	{
		//	Replication Info
		m_replication = new MReplication (getCtx(), getRecord_ID(), get_TrxName());
		//
		String AppsHost = m_replication.getHostAddress();
		int AppsPort = m_replication.getHostPort();
		boolean RMIoverHTTP = m_replication.isRMIoverHTTP();
		log.info (AppsHost + "":"" + AppsPort + "" - HTTP Tunnel="" + RMIoverHTTP);
		InitialContext ic = CConnection.getInitialContext(
			// Added WAS support
			// Passing null to getInitialEnvironment for fixing compilation errors
			// since this isn't used so doesn't hurt
			CConnection.getInitialEnvironment(AppsHost, AppsPort, null, RMIoverHTTP, 9080));
		if (ic == null)
			throw new Exception (""NoInitialContext"");

		try
		{
			ServerHome serverHome = (ServerHome)ic.lookup (ServerHome.JNDI_NAME);
		//	log.fine(""- ServerHome: "" + serverHome);
			if (serverHome == null)
				throw new Exception (""NoServer"");
			m_serverRemote = serverHome.create();
		//	log.fine(""- Server: "" + m_serverRemote);
		//	log.fine(""- Remote Status = "" + m_serverRemote.getStatus());
		}
		catch (Exception ex)
		{
			log.log(Level.SEVERE, ""connectRemote"", ex);
			throw new Exception (ex);
		}
	}	//	connectRemote
"
org.compiere.process.ReplicationLocal.setupRemote,ReplicationLocal.java,"void setupRemote() throws Exception
	{
		log.info(""setupRemote"");
		//
		String sql = ""SELECT rt.AD_Table_ID, rt.ReplicationType, t.TableName ""
			+ ""FROM AD_ReplicationTable rt""
			+ "" INNER JOIN AD_Table t ON (rt.AD_Table_ID=t.AD_Table_ID) ""
			+ ""WHERE rt.IsActive='Y' AND t.IsActive='Y'""
			+ "" AND AD_ReplicationStrategy_ID=? ""	//	#1
			+ ""ORDER BY t.LoadSeq"";
		RowSet rowset = getRowSet(sql, new Object[]{Integer.valueOf(m_replication.getAD_ReplicationStrategy_ID())});
		if (rowset == null)
			throw new Exception(""setupRemote - No RowSet Data"");

		//	Data Info
		RemoteSetupVO data = new RemoteSetupVO();
		data.Test = m_test;
		data.ReplicationTable = rowset;	//	RowSet
		data.IDRangeStart = m_replication.getIDRangeStart();
		data.IDRangeEnd   = m_replication.getIDRangeEnd();
		data.AD_Client_ID = m_replication.getRemote_Client_ID();
		data.AD_Org_ID = m_replication.getRemote_Org_ID();
		data.Prefix = m_replication.getPrefix();
		data.Suffix = m_replication.getSuffix();
		//	Process Info
		ProcessInfo pi = new ProcessInfo(data.toString(), 0);
		pi.setClassName (REMOTE);
		pi.setSerializableObject(data);
		Object result = doIt(START, ""init"", new Object[]{m_system});
		if (result == null || !Boolean.TRUE.equals(result))
			throw new Exception(""setupRemote - Init Error - "" + result);
		//	send it
		pi = m_serverRemote.process (new Ctx(), pi);
		ProcessInfoLog[] logs = pi.getLogs();
		Timestamp dateRun = null;
		if (logs != null && logs.length > 0)
			dateRun = logs[0].getP_Date();	//	User Remote Timestamp!
		//
		log.info (""setupRemote - "" + pi + "" - Remote Timestamp = "" + dateRun);
		if (dateRun != null)
			m_replicationStart = dateRun;
		m_replicationRun = new MReplicationRun (getCtx(), m_replication.getAD_Replication_ID(), m_replicationStart, get_TrxName());
		m_replicationRun.save();
	}	//	setupRemote
"
org.compiere.process.ReplicationLocal.mergeData,ReplicationLocal.java,"void mergeData() throws Exception
	{
		log.info(""mergeData"");
		//
		String sql = ""SELECT rt.AD_Table_ID, rt.ReplicationType, t.TableName, rt.AD_ReplicationTable_ID ""
			+ ""FROM AD_ReplicationTable rt""
			+ "" INNER JOIN AD_Table t ON (rt.AD_Table_ID=t.AD_Table_ID) ""
			+ ""WHERE rt.IsActive='Y' AND t.IsActive='Y'""
			+ "" AND AD_ReplicationStrategy_ID=?"" 	//	#1
			+ "" AND rt.ReplicationType='M' ""		//	Merge
			+ ""ORDER BY t.LoadSeq"";
		RowSet rowset = getRowSet(sql, new Object[]{Integer.valueOf(m_replication.getAD_ReplicationStrategy_ID())});
		try
		{
			while (rowset.next())
				mergeDataTable (rowset.getInt(1), rowset.getString(3), rowset.getInt(4));
			rowset.close();
			rowset = null;
		}
		catch (SQLException ex)
		{
			log.log(Level.SEVERE, ""mergeData"", ex);
			m_replicated = false;
		}
	}	//	mergeData
"
org.compiere.process.ReplicationLocal.mergeDataTable,ReplicationLocal.java,"boolean mergeDataTable (int AD_Table_ID, String TableName, int AD_ReplicationTable_ID) throws Exception
	{
		RemoteMergeDataVO data = new RemoteMergeDataVO();
		data.Test = m_test;
		data.TableName = TableName;
		//	Create SQL
		StringBuffer sql = new StringBuffer(""SELECT * FROM "")
			.append(TableName)
			.append("" WHERE AD_Client_ID="").append(m_replication.getRemote_Client_ID());
		if (m_replication.getRemote_Org_ID() != 0)
			sql.append("" AND AD_Org_ID IN (0,"").append(m_replication.getRemote_Org_ID()).append("")"");
		if (m_replication.getDateLastRun() != null)
			sql.append("" AND Updated >= "").append(DB.TO_DATE(m_replication.getDateLastRun(), false));
		sql.append("" ORDER BY "");
		data.KeyColumns = getKeyColumns(AD_Table_ID);
		if (data.KeyColumns == null || data.KeyColumns.length == 0)
		{
			log.log(Level.SEVERE, ""mergeDataTable - No KeyColumns for "" + TableName);
			m_replicated = false;
			return false;
		}
		for (int i = 0; i < data.KeyColumns.length; i++)
		{
			if (i > 0)
				sql.append("","");
			sql.append(data.KeyColumns[i]);
		}
		data.Sql = sql.toString();
		//	New Central Data
		data.CentralData = getRowSet(data.Sql, null);
		if (data.CentralData == null)
		{
			log.fine(""mergeDataTable - CentralData is Null - "" + TableName);
			m_replicated = false;
			return false;
		}

		//	Process Info
		ProcessInfo pi = new ProcessInfo(""MergeData"", 0);
		pi.setClassName (REMOTE);
		pi.setSerializableObject(data);
		//	send it
		pi = m_serverRemote.process (new Ctx(), pi);
		ProcessInfoLog[] logs = pi.getLogs();
		String msg = ""< "";
		if (logs != null && logs.length > 0)
			msg += logs[0].getP_Msg();	//	Remote Message
		log.info(""mergeDataTable - "" + pi);
		//
		MReplicationLog rLog = new MReplicationLog (getCtx(), m_replicationRun.getAD_Replication_Run_ID(), AD_ReplicationTable_ID, msg, get_TrxName());
		if (pi.isError())
		{
			log.severe (""mergeDataTable Error - "" + pi);
			m_replicated = false;
			rLog.setIsReplicated(false);
		}
		else	//	import data fom remote
		{
			RowSet sourceRS = (RowSet)pi.getSerializableObject();
			RowSet targetRS = getRowSet(data.Sql, null);
			Object result = doIt (START, ""sync"", new Object[]	//	Merge
				{data.TableName, data.KeyColumns, sourceRS, targetRS, m_test, Boolean.TRUE});
			boolean replicated = isReplicated(result);
			if (replicated)
				log.fine(""mergeDataTable -> "" + TableName + "" - "" + result);
			else
			{
				m_replicated = false;
				log.severe (""mergeDataTable -> "" + TableName + "" - "" + result);
			}
			rLog.setIsReplicated(replicated);
			if (result != null)
				rLog.setP_Msg(""< "" + result.toString());
			sourceRS.close();
			sourceRS = null;
			targetRS.close();
			targetRS = null;
		}
		rLog.save();
		return !pi.isError();
	}	//	mergeDataTable
"
org.compiere.process.ReplicationLocal.getKeyColumns,ReplicationLocal.java,"String[] getKeyColumns (int AD_Table_ID)
	{
		ArrayList<String> list = new ArrayList<String>();
		PreparedStatement pstmt = null;
		try
		{
			//	Get Keys
			String sql = ""SELECT ColumnName FROM AD_Column ""
				+ ""WHERE AD_Table_ID=?""
				+ "" AND IsKey='Y'"";
			pstmt = DB.prepareStatement(sql, get_TrxName());
			pstmt.setInt(1, AD_Table_ID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				list.add(rs.getString(1));
			rs.close();

			//	no keys - search for parents
			if (list.size() == 0)
			{
				sql = ""SELECT ColumnName FROM AD_Column ""
					+ ""WHERE AD_Table_ID=?""
					+ "" AND IsParent='Y'"";
				pstmt = DB.prepareStatement(sql, get_TrxName());
				pstmt.setInt(1, AD_Table_ID);
				rs = pstmt.executeQuery();
				while (rs.next())
					list.add(rs.getString(1));
				rs.close();
			}
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""getKeyColumns"", e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
		}
		catch (Exception e)
		{
		}

		//	Convert to Array
		String[] retValue = new String[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getKeyColumns
"
org.compiere.process.ReplicationLocal.sendUpdates,ReplicationLocal.java,"void sendUpdates() throws Exception
	{
		log.info(""sendUpdates"");
		//
		String sql = ""SELECT rt.AD_Table_ID, rt.ReplicationType, t.TableName, rt.AD_ReplicationTable_ID ""
			+ ""FROM AD_ReplicationTable rt""
			+ "" INNER JOIN AD_Table t ON (rt.AD_Table_ID=t.AD_Table_ID) ""
			+ ""WHERE rt.IsActive='Y' AND t.IsActive='Y'""
			+ "" AND AD_ReplicationStrategy_ID=?"" 	//	#1
			+ "" AND rt.ReplicationType='R' ""		//	Reference
			+ ""ORDER BY t.LoadSeq"";
		RowSet rowset = getRowSet(sql, new Object[]{Integer.valueOf(m_replication.getAD_ReplicationStrategy_ID())});
		try
		{
			while (rowset.next())
				sendUpdatesTable (rowset.getInt(1), rowset.getString(3), rowset.getInt(4));
			rowset.close();
		}
		catch (SQLException ex)
		{
			log.log(Level.SEVERE, ""sendUpdates"", ex);
			m_replicated = false;
		}
	}	//	sendUpdates
"
org.compiere.process.ReplicationLocal.sendUpdatesTable,ReplicationLocal.java,"boolean sendUpdatesTable (int AD_Table_ID, String TableName, int AD_ReplicationTable_ID) throws Exception
	{
		RemoteUpdateVO data = new RemoteUpdateVO();
		data.Test = m_test;
		data.TableName = TableName;
		//	Create SQL
		StringBuffer sql = new StringBuffer (""SELECT * FROM "")
			.append(TableName)
			.append("" WHERE AD_Client_ID="").append(m_replication.getRemote_Client_ID());
		if (m_replication.getRemote_Org_ID() != 0)
			sql.append("" AND AD_Org_ID IN (0,"").append(m_replication.getRemote_Org_ID()).append("")"");
		if (m_replication.getDateLastRun() != null)
			sql.append("" AND Updated >= "").append(DB.TO_DATE(m_replication.getDateLastRun(), false));
		sql.append("" ORDER BY "");
		data.KeyColumns = getKeyColumns(AD_Table_ID);
		if (data.KeyColumns == null || data.KeyColumns.length == 0)
		{
			log.log(Level.SEVERE, ""sendUpdatesTable - No KeyColumns for "" + TableName);
			m_replicated = false;
			return false;
		}
		for (int i = 0; i < data.KeyColumns.length; i++)
		{
			if (i > 0)
				sql.append("","");
			sql.append(data.KeyColumns[i]);
		}
		data.Sql = sql.toString();
		//	New Data
		data.CentralData = getRowSet(data.Sql, null);
		if (data.CentralData == null)
		{
			log.fine(""sendUpdatesTable - Null - "" + TableName);
			m_replicated = false;
			return false;
		}
		int rows = 0;
		try
		{
			if (data.CentralData.last())
				rows = data.CentralData.getRow();
			data.CentralData.beforeFirst();		//	rewind
		}
		catch (SQLException ex)
		{
			log.fine(""RowCheck  "" + ex);
			m_replicated = false;
			return false;
		}
		if (rows == 0)
		{
			log.fine(""No Rows - "" + TableName);
			return true;
		}
		else
			log.fine(TableName + "" #"" + rows);

		//	Process Info
		ProcessInfo pi = new ProcessInfo(""SendUpdates"", 0);
		pi.setClassName (REMOTE);
		pi.setSerializableObject(data);
		//	send it
		pi = m_serverRemote.process (new Ctx(), pi);
		log.info(""sendUpdatesTable - "" + pi);
		ProcessInfoLog[] logs = pi.getLogs();
		String msg = ""> "";
		if (logs != null && logs.length > 0)
			msg += logs[0].getP_Msg();	//	Remote Message
		//
		MReplicationLog rLog = new MReplicationLog (getCtx(), m_replicationRun.getAD_Replication_Run_ID(), AD_ReplicationTable_ID, msg, get_TrxName());
		if (pi.isError())
			m_replicated = false;
		rLog.setIsReplicated(!pi.isError());
		rLog.save();
		return !pi.isError();
	}	//	sendUpdatesTable
"
org.compiere.process.ReplicationLocal.exit,ReplicationLocal.java,"void exit()
	{
		log.info (""exit"");
		doIt(START, ""exit"", null);
		ProcessInfo pi = new ProcessInfo(""Exit"", 0);
		pi.setClassName (REMOTE);
		pi.setSerializableObject(m_replicationStart);
		//	send it
		try
		{
			m_serverRemote.process (new Ctx(), pi);
		}
		catch (Exception ex)
		{
		}
	}	//	exit
"
org.compiere.process.ReplicationLocal.getRowSet,ReplicationLocal.java,"RowSet getRowSet (String sql, Object[] args)
	{
		//	shared connection
		Trx trx = Trx.get(""getRowSet"");
		
		PreparedStatement pstmt = null;
		RowSet rowSet = null;
		//
		try
		{
			pstmt = trx.getConnection().prepareStatement(sql,
				ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
			//	Set Parameters
			if (args != null)
			{
				for (int i = 0; i < args.length; i++)
				{
					if (args[i] == null)
						s_log.log(Level.SEVERE, ""NULL Argument "" + i);
					else if (args[i] instanceof Integer)
						pstmt.setInt(i+1, ((Integer)args[i]).intValue());
					else if (args[i] instanceof Timestamp)
						pstmt.setTimestamp(i+1, (Timestamp)args[i]);
					else if (args[i] instanceof BigDecimal)
						pstmt.setBigDecimal(i+1, (BigDecimal)args[i]);
					else
						pstmt.setString(i+1, args[i].toString());
				}
			}
			//
			ResultSet rs = pstmt.executeQuery();
			rowSet = CCachedRowSet.getRowSet(rs);
			pstmt.close();
			pstmt = null;
		}
		catch (SQLException ex)
		{
			s_log.log(Level.SEVERE, sql, ex);
			throw new RuntimeException (ex);
		}
		//	Close Cursor
		finally {
			try
			{
				if (pstmt != null)
					pstmt.close();
				pstmt = null;
			}
			catch (Exception e)
			{
				s_log.log(Level.SEVERE, ""close pstmt"", e);
			}

			if( trx != null)
				trx.close();
		}

		return rowSet;
	}	//	getRowSet
"
org.compiere.process.ReplicationLocal.isReplicated,ReplicationLocal.java,"boolean isReplicated (Object result)
	{
		boolean replicated = result != null && !Boolean.FALSE.equals(result);
		if (replicated)
			replicated = result.toString().endsWith(""Errors=0"");
		return replicated;
	}	//	isReplicated
"
org.compiere.process.FactAcctReset.prepare,FactAcctReset.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_Client_ID""))
				p_AD_Client_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""AD_Table_ID""))
				p_AD_Table_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""DeletePosting""))
				p_DeletePosting = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.FactAcctReset.doIt,FactAcctReset.java,"String doIt() throws Exception
	{
		log.info(""AD_Client_ID="" + p_AD_Client_ID 
			+ "", AD_Table_ID="" + p_AD_Table_ID + "", DeletePosting="" + p_DeletePosting);
		//	List of Tables with Accounting Consequences
		String sql = ""SELECT AD_Table_ID, TableName ""
			+ ""FROM AD_Table t ""
			+ ""WHERE t.IsView='N'"";
		if (p_AD_Table_ID > 0)
			sql += "" AND t.AD_Table_ID="" + p_AD_Table_ID;
		sql += "" AND EXISTS (SELECT * FROM AD_Column c ""
				+ ""WHERE t.AD_Table_ID=c.AD_Table_ID AND c.ColumnName='Posted' AND c.IsActive='Y')"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, get_TrxName());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				int AD_Table_ID = rs.getInt(1);
				String TableName = rs.getString(2);
				if (p_DeletePosting)
					delete (TableName, AD_Table_ID);
				else
					reset (TableName);
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//	Balances
		if (p_DeletePosting)
			FinBalance.updateBalanceClient(getCtx(), true, 
				null, get_TrxName(), this);	//	delete
		//
		return ""@Updated@ = "" + m_countReset + "", @Deleted@ = "" + m_countDelete;
	}	//	doIt
"
org.compiere.process.FactAcctReset.reset,FactAcctReset.java,"void reset (String TableName)
	{
		String sql = ""UPDATE "" + TableName
			+ "" SET Processing='N' WHERE AD_Client_ID="" + p_AD_Client_ID
			+ "" AND (Processing<>'N' OR Processing IS NULL)"";
		int unlocked = DB.executeUpdate(sql, get_TrxName());
		//
		sql = ""UPDATE "" + TableName
			+ "" SET Posted='N' WHERE AD_Client_ID="" + p_AD_Client_ID
			+ "" AND (Posted NOT IN ('Y','N') OR Posted IS NULL) AND Processed='Y'"";
		int invalid = DB.executeUpdate(sql, get_TrxName());
		//
		if (unlocked + invalid != 0)
			log.fine(TableName + "" - Unlocked="" + unlocked + "" - Invalid="" + invalid);
		m_countReset += unlocked + invalid; 
	}	//	reset
"
org.compiere.process.FactAcctReset.delete,FactAcctReset.java,"void delete (String TableName, int AD_Table_ID)
	{
		reset(TableName);
		m_countReset = 0;
		String docBaseType = null;
		if (AD_Table_ID == X_C_Invoice.Table_ID)
			docBaseType = ""IN ('"" + MDocBaseType.DOCBASETYPE_APInvoice 
				+ ""','"" + MDocBaseType.DOCBASETYPE_APCreditMemo
				+ ""','"" + MDocBaseType.DOCBASETYPE_ARInvoice
				+ ""','"" + MDocBaseType.DOCBASETYPE_ARCreditMemo
				+ ""','"" + MDocBaseType.DOCBASETYPE_ARProFormaInvoice + ""')"";
		else if (AD_Table_ID == X_M_InOut.Table_ID)
			docBaseType = ""IN ('"" + MDocBaseType.DOCBASETYPE_MaterialDelivery
				+ ""','"" + MDocBaseType.DOCBASETYPE_MaterialReceipt + ""')"";
		else if (AD_Table_ID == X_C_Payment.Table_ID)
			docBaseType = ""IN ('"" + MDocBaseType.DOCBASETYPE_APPayment
				+ ""','"" + MDocBaseType.DOCBASETYPE_ARReceipt + ""')"";
		else if (AD_Table_ID == X_C_Order.Table_ID)
			docBaseType = ""IN ('"" + MDocBaseType.DOCBASETYPE_SalesOrder
				+ ""','"" + MDocBaseType.DOCBASETYPE_PurchaseOrder + ""')"";
		else if (AD_Table_ID == X_C_ProjectIssue.Table_ID)
			docBaseType = ""= '"" + MDocBaseType.DOCBASETYPE_ProjectIssue + ""'"";
		else if (AD_Table_ID == X_C_BankStatement.Table_ID)
			docBaseType = ""= '"" + MDocBaseType.DOCBASETYPE_BankStatement + ""'"";
		else if (AD_Table_ID == X_C_Cash.Table_ID)
			docBaseType = ""= '"" + MDocBaseType.DOCBASETYPE_CashJournal + ""'"";
		else if (AD_Table_ID == X_C_AllocationHdr.Table_ID)
			docBaseType = ""= '"" + MDocBaseType.DOCBASETYPE_PaymentAllocation + ""'"";
		else if (AD_Table_ID == X_GL_Journal.Table_ID)
			docBaseType = ""= '"" + MDocBaseType.DOCBASETYPE_GLJournal + ""'"";
	//	else if (AD_Table_ID == M.Table_ID)
	//		docBaseType = ""= '"" + MDocBaseType.DOCBASETYPE_GLDocument + ""'"";
		else if (AD_Table_ID == X_M_Movement.Table_ID)
			docBaseType = ""= '"" + MDocBaseType.DOCBASETYPE_MaterialMovement + ""'"";
		else if (AD_Table_ID == X_M_Requisition.Table_ID)
			docBaseType = ""= '"" + MDocBaseType.DOCBASETYPE_PurchaseRequisition + ""'"";
		else if (AD_Table_ID == X_M_Inventory.Table_ID)
			docBaseType = ""= '"" + MDocBaseType.DOCBASETYPE_MaterialPhysicalInventory + ""'"";
		else if (AD_Table_ID == X_M_Production.Table_ID)
			docBaseType = ""= '"" + MDocBaseType.DOCBASETYPE_MaterialProduction + ""'"";
		else if (AD_Table_ID == X_M_MatchInv.Table_ID)
			docBaseType = ""= '"" + MDocBaseType.DOCBASETYPE_MatchInvoice + ""'"";
		else if (AD_Table_ID == X_M_MatchPO.Table_ID)
			docBaseType = ""= '"" + MDocBaseType.DOCBASETYPE_MatchPO + ""'"";
		//
		if (docBaseType == null)
		{
			String s = TableName + "": Unknown DocBaseType"";
			log.warning(s);
			addLog(s);
			return;
		}
		else
			docBaseType = "" AND pc.DocBaseType "" + docBaseType;
		
		MTable table = MTable.get(getCtx(), AD_Table_ID);
		boolean hasDocType = table.getColumn(""C_DocType_ID"") != null;
		
		//	Doc
		String sql1 = ""UPDATE "" + TableName + "" doc""
			+ "" SET Posted='N', Processing='N' ""
			+ ""WHERE AD_Client_ID="" + p_AD_Client_ID
			+ "" AND (Posted<>'N' OR Posted IS NULL OR Processing<>'N' OR Processing IS NULL)"";
			if (!hasDocType)
				sql1 += "" AND EXISTS (SELECT * FROM C_PeriodControl pc""
				+ "" INNER JOIN Fact_Acct fact ON (fact.C_Period_ID=pc.C_Period_ID) ""
				+ ""WHERE pc.PeriodStatus = 'O'"" + docBaseType
				+ "" AND fact.AD_Table_ID="" + AD_Table_ID
				+ "" AND fact.Record_ID=doc."" + TableName + ""_ID)"";
			else
				sql1 += "" AND "" + TableName + ""_ID IN (SELECT fact.Record_ID ""
				+ ""FROM Fact_Acct fact""
				+ "" INNER JOIN C_PeriodControl pc ON (fact.C_Period_ID=pc.C_Period_ID)""
				+ "" INNER JOIN C_DocType dt ON (pc.DocBaseType=dt.DocBaseType) ""
				+ ""WHERE fact.AD_Table_ID="" + AD_Table_ID
				+ "" AND dt.C_DocType_ID=doc.C_DocType_ID""
				+ "" AND pc.PeriodStatus = 'O')"";
		//	handling of invoices with revenue recognition comes here
		int reset = DB.executeUpdate(sql1, get_TrxName()); 
		//	Fact
		String sql2 = ""DELETE FROM Fact_Acct fact ""
			+ ""WHERE AD_Client_ID="" + p_AD_Client_ID
			+ "" AND AD_Table_ID="" + AD_Table_ID
			+ "" AND Record_ID IN (SELECT "" + TableName + ""_ID ""
				+ ""FROM "" + TableName 
				+ "" WHERE Posted<>'Y' OR Posted IS NULL)"";
		int deleted = DB.executeUpdate(sql2, get_TrxName());
		//
		log.info(TableName + ""("" + AD_Table_ID + "") - Reset="" + reset + "" - Deleted="" + deleted);
		String s = TableName + "" - Reset="" + reset + "" - Deleted="" + deleted;
		addLog(s);
		if (reset == 0)
			log.finest(sql1);
		if (deleted == 0)
			log.finest(sql2);
		//
		m_countReset += reset;
		m_countDelete += deleted;
	}	//	delete
"
org.compiere.process.ImportProduct.prepare,ImportProduct.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) 
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_Client_ID""))
				m_AD_Client_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""DeleteOldImported""))
				m_deleteOldImported = ""Y"".equals(element.getParameter());
			else if (name.equals(""M_PriceList_Version_ID""))
				p_M_PriceList_Version_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		if (m_DateValue == null)
			m_DateValue = new Timestamp (System.currentTimeMillis());
	}	//	prepare
"
org.compiere.process.ImportProduct.doIt,ImportProduct.java,"String doIt() throws java.lang.Exception
	{
		StringBuffer sql = null;
		int no = 0;
		String clientCheck = "" AND AD_Client_ID="" + m_AD_Client_ID;

		//	****	Prepare	****

		//	Delete Old Imported
		if (m_deleteOldImported)
		{
			sql = new StringBuffer (""DELETE FROM I_Product ""
				+ ""WHERE I_IsImported='Y'"").append(clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			log.info(""Delete Old Impored ="" + no);
		}

		//	Set Client, Org, IaActive, Created/Updated, 	ProductType
		sql = new StringBuffer (""UPDATE I_Product ""
			+ ""SET AD_Client_ID = COALESCE (AD_Client_ID, "").append(m_AD_Client_ID).append(""),""
			+ "" AD_Org_ID = COALESCE (AD_Org_ID, 0),""
			+ "" IsActive = COALESCE (IsActive, 'Y'),""
			+ "" Created = COALESCE (Created, SysDate),""
			+ "" CreatedBy = COALESCE (CreatedBy, 0),""
			+ "" Updated = COALESCE (Updated, SysDate),""
			+ "" UpdatedBy = COALESCE (UpdatedBy, 0),""
			+ "" ProductType = COALESCE (ProductType, 'I'),""
			+ "" I_ErrorMsg = NULL,""
			+ "" I_IsImported = 'N' ""
			+ ""WHERE I_IsImported<>'Y' OR I_IsImported IS NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info(""Reset="" + no);

		//	Set Optional BPartner
		sql = new StringBuffer (""UPDATE I_Product i ""
			+ ""SET C_BPartner_ID=(SELECT C_BPartner_ID FROM C_BPartner p""
			+ "" WHERE i.BPartner_Value=p.Value AND i.AD_Client_ID=p.AD_Client_ID) ""
			+ ""WHERE C_BPartner_ID IS NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info(""BPartner="" + no);
		//
		String ts = DB.isPostgreSQL()?""COALESCE(I_ErrorMsg,'')"":""I_ErrorMsg"";  //java bug, it could not be used directly
		sql = new StringBuffer (""UPDATE I_Product i ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid BPartner,' ""
			+ ""WHERE i.BPartner_Value is NOT NULL AND i.C_BPartner_ID IS NULL""
			+ "" AND i.I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid BPartner="" + no);


		//	****	Find Product
		//	EAN/UPC
		sql = new StringBuffer (""UPDATE I_Product i ""
			+ ""SET M_Product_ID=(SELECT M_Product_ID FROM M_Product p""
			+ "" WHERE i.UPC=p.UPC AND i.AD_Client_ID=p.AD_Client_ID) ""
			+ ""WHERE M_Product_ID IS NULL""
			+ "" AND I_IsImported='N'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info(""Product Existing UPC="" + no);

		//	Value
		sql = new StringBuffer (""UPDATE I_Product i ""
			+ ""SET M_Product_ID=(SELECT M_Product_ID FROM M_Product p""
			+ "" WHERE i.Value=p.Value AND i.AD_Client_ID=p.AD_Client_ID) ""
			+ ""WHERE M_Product_ID IS NULL""
			+ "" AND I_IsImported='N'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info(""Product Existing Value="" + no);

		//	BP ProdNo
		sql = new StringBuffer (""UPDATE I_Product i ""
			+ ""SET M_Product_ID=(SELECT M_Product_ID FROM M_Product_po p""
			+ "" WHERE i.C_BPartner_ID=p.C_BPartner_ID""
			+ "" AND i.VendorProductNo=p.VendorProductNo AND i.AD_Client_ID=p.AD_Client_ID) ""
			+ ""WHERE M_Product_ID IS NULL""
			+ "" AND I_IsImported='N'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info(""Product Existing Vendor ProductNo="" + no);

		//	Set Product Category
		sql = new StringBuffer (""UPDATE I_Product ""
			+ ""SET ProductCategory_Value=(SELECT MAX(Value) FROM M_Product_Category""
			+ "" WHERE IsDefault='Y' AND AD_Client_ID="").append(m_AD_Client_ID).append("") ""
			+ ""WHERE ProductCategory_Value IS NULL AND M_Product_Category_ID IS NULL""
			+ "" AND M_Product_ID IS NULL""	//	set category only if product not found 
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Category Default Value="" + no);
		//
		sql = new StringBuffer (""UPDATE I_Product i ""
			+ ""SET M_Product_Category_ID=(SELECT M_Product_Category_ID FROM M_Product_Category c""
			+ "" WHERE i.ProductCategory_Value=c.Value AND i.AD_Client_ID=c.AD_Client_ID) ""
			+ ""WHERE ProductCategory_Value IS NOT NULL AND M_Product_Category_ID IS NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info(""Set Category="" + no);

		
		//	Copy From Product if Import does not have value
		String[] strFields = new String[] {""Value"",""Name"",""Description"",""DocumentNote"",""Help"",
			""UPC"",""SKU"",""Classification"",""ProductType"",
			""Discontinued"",""DiscontinuedBy"",""ImageURL"",""DescriptionURL""};
		for (String element : strFields) {
			sql = new StringBuffer (""UPDATE I_PRODUCT i ""
				+ ""SET "").append(element).append("" = (SELECT "").append(element).append("" FROM M_Product p""
				+ "" WHERE i.M_Product_ID=p.M_Product_ID AND i.AD_Client_ID=p.AD_Client_ID) ""
				+ ""WHERE M_Product_ID IS NOT NULL""
				+ "" AND "").append(element).append("" IS NULL""
				+ "" AND I_IsImported='N'"").append(clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			if (no != 0)
				log.fine(element + "" - default from existing Product="" + no);
		}
		String[] numFields = new String[] {""C_UOM_ID"",""M_Product_Category_ID"",
			""Volume"",""Weight"",""ShelfWidth"",""ShelfHeight"",""ShelfDepth"",""UnitsPerPallet""};
		for (String element : numFields) {
			sql = new StringBuffer (""UPDATE I_PRODUCT i ""
				+ ""SET "").append(element).append("" = (SELECT "").append(element).append("" FROM M_Product p""
				+ "" WHERE i.M_Product_ID=p.M_Product_ID AND i.AD_Client_ID=p.AD_Client_ID) ""
				+ ""WHERE M_Product_ID IS NOT NULL""
				+ "" AND ("").append(element).append("" IS NULL OR "").append(element).append(""=0)""
				+ "" AND I_IsImported='N'"").append(clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			if (no != 0)
				log.fine(element + "" default from existing Product="" + no);
		}

		//	Copy From Product_PO if Import does not have value
		String[] strFieldsPO = new String[] {""UPC"",
			""PriceEffective"",""VendorProductNo"",""VendorCategory"",""Manufacturer"",
			""Discontinued"",""DiscontinuedBy""};
		for (String element : strFieldsPO) {
			sql = new StringBuffer (""UPDATE I_PRODUCT i ""
				+ ""SET "").append(element).append("" = (SELECT "").append(element)
				.append("" FROM M_Product_PO p""
				+ "" WHERE i.M_Product_ID=p.M_Product_ID AND i.C_BPartner_ID=p.C_BPartner_ID AND i.AD_Client_ID=p.AD_Client_ID) ""
				+ ""WHERE M_Product_ID IS NOT NULL AND C_BPartner_ID IS NOT NULL""
				+ "" AND "").append(element).append("" IS NULL""
				+ "" AND I_IsImported='N'"").append(clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			if (no != 0)
				log.fine(element + "" default from existing Product PO="" + no);
		}
		String[] numFieldsPO = new String[] {""C_UOM_ID"",""C_Currency_ID"",
			""PriceList"",""PricePO"",""RoyaltyAmt"",
			""Order_Min"",""Order_Pack"",""CostPerOrder"",""DeliveryTime_Promised""};
		for (String element : numFieldsPO) {
			sql = new StringBuffer (""UPDATE I_PRODUCT i ""
				+ ""SET "").append(element).append("" = (SELECT "").append(element)
				.append("" FROM M_Product_PO p""
				+ "" WHERE i.M_Product_ID=p.M_Product_ID AND i.C_BPartner_ID=p.C_BPartner_ID AND i.AD_Client_ID=p.AD_Client_ID) ""
				+ ""WHERE M_Product_ID IS NOT NULL AND C_BPartner_ID IS NOT NULL""
				+ "" AND ("").append(element).append("" IS NULL OR "").append(element).append(""=0)""
				+ "" AND I_IsImported='N'"").append(clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			if (no != 0)
				log.fine(element + "" default from existing Product PO="" + no);
		}

		//	Invalid Category
		sql = new StringBuffer (""UPDATE I_Product ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid ProdCategorty,' ""
			+ ""WHERE M_Product_Category_ID IS NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid Category="" + no);

		
		//	Set UOM (System/own)
		sql = new StringBuffer (""UPDATE I_Product i ""
			+ ""SET X12DE355 = ""
			+ ""(SELECT MAX(X12DE355) FROM C_UOM u WHERE u.IsDefault='Y' AND u.AD_Client_ID IN (0,i.AD_Client_ID)) ""
			+ ""WHERE X12DE355 IS NULL AND C_UOM_ID IS NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set UOM Default="" + no);
		//
		sql = new StringBuffer (""UPDATE I_Product i ""
			+ ""SET C_UOM_ID = (SELECT C_UOM_ID FROM C_UOM u WHERE u.X12DE355=i.X12DE355 AND u.AD_Client_ID IN (0,i.AD_Client_ID)) ""
			+ ""WHERE C_UOM_ID IS NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info(""Set UOM="" + no);
		//
		sql = new StringBuffer (""UPDATE I_Product ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid UOM, ' ""
			+ ""WHERE C_UOM_ID IS NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid UOM="" + no);


		//	Set Currency
		sql = new StringBuffer (""UPDATE I_Product i ""
			+ ""SET ISO_Code=(SELECT ISO_Code FROM C_Currency c""
			+ "" INNER JOIN C_AcctSchema a ON (a.C_Currency_ID=c.C_Currency_ID)""
			+ "" INNER JOIN AD_ClientInfo ci ON (a.C_AcctSchema_ID=ci.C_AcctSchema1_ID)""
			+ "" WHERE ci.AD_Client_ID=i.AD_Client_ID) ""
			+ ""WHERE C_Currency_ID IS NULL AND ISO_Code IS NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Currency Default="" + no);
		//
		sql = new StringBuffer (""UPDATE I_Product i ""
			+ ""SET C_Currency_ID=(SELECT C_Currency_ID FROM C_Currency c""
			+ "" WHERE i.ISO_Code=c.ISO_Code AND c.AD_Client_ID IN (0,i.AD_Client_ID)) ""
			+ ""WHERE C_Currency_ID IS NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info(""doIt- Set Currency="" + no);
		//
		sql = new StringBuffer (""UPDATE I_Product ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Currency,' ""
			+ ""WHERE C_Currency_ID IS NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid Currency="" + no);

		//	Verify ProductType
		sql = new StringBuffer (""UPDATE I_Product ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid ProductType,' ""
			+ ""WHERE ProductType NOT IN ('I','S')""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid ProductType="" + no);

		//	Unique UPC/Value
		sql = new StringBuffer (""UPDATE I_Product i ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Value not unique,' ""
			+ ""WHERE I_IsImported<>'Y'""
			+ "" AND Value IN (SELECT Value FROM I_Product ii WHERE i.AD_Client_ID=ii.AD_Client_ID GROUP BY Value HAVING COUNT(*) > 1)"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Not Unique Value="" + no);
		//
		sql = new StringBuffer (""UPDATE I_Product i ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=UPC not unique,' ""
			+ ""WHERE I_IsImported<>'Y'""
			+ "" AND UPC IN (SELECT UPC FROM I_Product ii WHERE i.AD_Client_ID=ii.AD_Client_ID GROUP BY UPC HAVING COUNT(*) > 1)"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Not Unique UPC="" + no);

		//	Mandatory Value
		sql = new StringBuffer (""UPDATE I_Product i ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=No Mandatory Value,' ""
			+ ""WHERE Value IS NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""No Mandatory Value="" + no);

		//	Vendor Product No
	//	sql = new StringBuffer (""UPDATE I_Product i ""
	//		+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=No Mandatory VendorProductNo,' ""
	//		+ ""WHERE I_IsImported<>'Y'""
	//		+ "" AND VendorProductNo IS NULL AND (C_BPartner_ID IS NOT NULL OR BPartner_Value IS NOT NULL)"").append(clientCheck);
	//	no = DB.executeUpdate(sql.toString(), get_TrxName());
	//	log.info(log.l3_Util, ""No Mandatory VendorProductNo="" + no);
		sql = new StringBuffer (""UPDATE I_Product ""
			+ ""SET VendorProductNo=Value ""
			+ ""WHERE C_BPartner_ID IS NOT NULL AND VendorProductNo IS NULL""
			+ "" AND I_IsImported='N'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info(""VendorProductNo Set to Value="" + no);
		//
		sql = new StringBuffer (""UPDATE I_Product i ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=VendorProductNo not unique,' ""
			+ ""WHERE I_IsImported<>'Y'""
			+ "" AND C_BPartner_ID IS NOT NULL""
			+ "" AND (C_BPartner_ID, VendorProductNo) IN ""
			+ "" (SELECT C_BPartner_ID, VendorProductNo FROM I_Product ii WHERE i.AD_Client_ID=ii.AD_Client_ID GROUP BY C_BPartner_ID, VendorProductNo HAVING COUNT(*) > 1)"")
			.append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Not Unique VendorProductNo="" + no);

		//	Get Default Tax Category
		int C_TaxCategory_ID = 0;
		MTaxCategory tc = MTaxCategory.getDefault(getCtx());
		if (tc != null)
			C_TaxCategory_ID = tc.getC_TaxCategory_ID();
		else
		{
			try
			{
				PreparedStatement pstmt = DB.prepareStatement
					(""SELECT C_TaxCategory_ID FROM C_TaxCategory WHERE IsDefault='Y'"" + clientCheck, get_TrxName());
				ResultSet rs = pstmt.executeQuery();
				if (rs.next())
					C_TaxCategory_ID = rs.getInt(1);
				rs.close();
				pstmt.close();
			}
			catch (SQLException e)
			{	
				throw new Exception (""TaxCategory"", e);
			}
		}
		log.fine(""C_TaxCategory_ID="" + C_TaxCategory_ID);

		commit();
		
		//	-------------------------------------------------------------------
		int noInsert = 0;
		int noUpdate = 0;
		int noInsertPO = 0;
		int noUpdatePO = 0;

		//	Go through Records
		log.fine(""start inserting/updating ..."");
		sql = new StringBuffer (""SELECT * FROM I_Product WHERE I_IsImported='N'"")
			.append(clientCheck);
		try
		{
			/*	Insert Product from Import
			PreparedStatement pstmt_insertProduct = conn.prepareStatement
				(""INSERT INTO M_Product (M_Product_ID,""
				+ ""AD_Client_ID,AD_Org_ID,IsActive,Created,CreatedBy,Updated,UpdatedBy,""
				+ ""Value,Name,Description,DocumentNote,Help,""
				+ ""UPC,SKU,C_UOM_ID,IsSummary,M_Product_Category_ID,C_TaxCategory_ID,""
				+ ""ProductType,ImageURL,DescriptionURL) ""
				+ ""SELECT ?,""
				+ ""AD_Client_ID,AD_Org_ID,'Y',SysDate,CreatedBy,SysDate,UpdatedBy,""
				+ ""Value,Name,Description,DocumentNote,Help,""
				+ ""UPC,SKU,C_UOM_ID,'N',M_Product_Category_ID,"" + C_TaxCategory_ID + "",""
				+ ""ProductType,ImageURL,DescriptionURL ""
				+ ""FROM I_Product ""
				+ ""WHERE I_Product_ID=?"");
			*/
			//	Update Product from Import
			//jz moved
			/*
			String sqlt = ""UPDATE M_PRODUCT ""
				+ ""SET (Value,Name,Description,DocumentNote,Help,""
				+ ""UPC,SKU,C_UOM_ID,M_Product_Category_ID,Classification,ProductType,""
				+ ""Volume,Weight,ShelfWidth,ShelfHeight,ShelfDepth,UnitsPerPallet,""
				+ ""Discontinued,DiscontinuedBy,Updated,UpdatedBy)= ""
				+ ""(SELECT Value,Name,Description,DocumentNote,Help,""
				+ ""UPC,SKU,C_UOM_ID,M_Product_Category_ID,Classification,ProductType,""
				+ ""Volume,Weight,ShelfWidth,ShelfHeight,ShelfDepth,UnitsPerPallet,""
				+ ""Discontinued,DiscontinuedBy,SysDate,UpdatedBy""
				+ "" FROM I_Product WHERE I_Product_ID=?) ""
				+ ""WHERE M_Product_ID=?"";
			PreparedStatement pstmt_updateProduct = DB.prepareStatement
				(sqlt, get_TrxName());

			//	Update Product_PO from Import
			sqlt = ""UPDATE M_Product_PO ""
				+ ""SET (IsCurrentVendor,C_UOM_ID,C_Currency_ID,UPC,""
				+ ""PriceList,PricePO,RoyaltyAmt,PriceEffective,""
				+ ""VendorProductNo,VendorCategory,Manufacturer,""
				+ ""Discontinued,DiscontinuedBy,Order_Min,Order_Pack,""
				+ ""CostPerOrder,DeliveryTime_Promised,Updated,UpdatedBy)= ""
				+ ""(SELECT 'Y',C_UOM_ID,C_Currency_ID,UPC,""
				+ ""PriceList,PricePO,RoyaltyAmt,PriceEffective,""
				+ ""VendorProductNo,VendorCategory,Manufacturer,""
				+ ""Discontinued,DiscontinuedBy,Order_Min,Order_Pack,""
				+ ""CostPerOrder,DeliveryTime_Promised,SysDate,UpdatedBy""
				+ "" FROM I_Product""
				+ "" WHERE I_Product_ID=?) ""
				+ ""WHERE M_Product_ID=? AND C_BPartner_ID=?"";
			PreparedStatement pstmt_updateProductPO = DB.prepareStatement
				(sqlt, get_TrxName());
*/
			//	Insert Product from Import
			PreparedStatement pstmt_insertProductPO = DB.prepareStatement
				(""INSERT INTO M_Product_PO (M_Product_ID,C_BPartner_ID, ""
				+ ""AD_Client_ID,AD_Org_ID,IsActive,Created,CreatedBy,Updated,UpdatedBy,""
				+ ""IsCurrentVendor,C_UOM_ID,C_Currency_ID,UPC,""
				+ ""PriceList,PricePO,RoyaltyAmt,PriceEffective,""
				+ ""VendorProductNo,VendorCategory,Manufacturer,""
				+ ""Discontinued,DiscontinuedBy,Order_Min,Order_Pack,""
				+ ""CostPerOrder,DeliveryTime_Promised) ""
				+ ""SELECT ?,?, ""
				+ ""AD_Client_ID,AD_Org_ID,'Y',SysDate,CreatedBy,SysDate,UpdatedBy,""
				+ ""'Y',C_UOM_ID,C_Currency_ID,UPC,""
				+ ""PriceList,PricePO,RoyaltyAmt,PriceEffective,""
				+ ""VendorProductNo,VendorCategory,Manufacturer,""
				+ ""Discontinued,DiscontinuedBy,Order_Min,Order_Pack,""
				+ ""CostPerOrder,DeliveryTime_Promised ""
				+ ""FROM I_Product ""
				+ ""WHERE I_Product_ID=?"", get_TrxName());

			//	Set Imported = Y
			PreparedStatement pstmt_setImported = DB.prepareStatement
				(""UPDATE I_Product SET I_IsImported='Y', M_Product_ID=?, ""
				+ ""Updated=SysDate, Processed='Y' WHERE I_Product_ID=?"", get_TrxName());

			//
			PreparedStatement pstmt = DB.prepareStatement(sql.toString(), get_TrxName());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				X_I_Product imp = new X_I_Product(getCtx(), rs, get_TrxName());
				int I_Product_ID = imp.getI_Product_ID();
				int M_Product_ID = imp.getM_Product_ID();
				int C_BPartner_ID = imp.getC_BPartner_ID();
				boolean newProduct = M_Product_ID == 0;
				log.fine(""I_Product_ID="" + I_Product_ID + "", M_Product_ID="" + M_Product_ID 
					+ "", C_BPartner_ID="" + C_BPartner_ID);

				//	Product
				if (newProduct)			//	Insert new Product
				{
					MProduct product = new MProduct(imp);
					product.setC_TaxCategory_ID(C_TaxCategory_ID);
					if (product.save())
					{
						M_Product_ID = product.getM_Product_ID();
						log.finer(""Insert Product"");
						noInsert++;
					}
					else
					{
						Exception ex = CLogger.retrieveException();
						String exMsg = ex == null ? """" : ex.toString();
						StringBuffer sql0 = new StringBuffer (""UPDATE I_Product i ""
							+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||"").append(DB.TO_STRING(""Insert Product failed - "" + exMsg ))
							.append(""WHERE I_Product_ID="").append(I_Product_ID);
						DB.executeUpdate(sql0.toString(), get_TrxName());
						continue;
					}
				}
				else					//	Update Product
				{
					String sqlt = ""UPDATE M_PRODUCT ""
						+ ""SET (Value,Name,Description,DocumentNote,Help,""
						+ ""UPC,SKU,C_UOM_ID,M_Product_Category_ID,Classification,ProductType,""
						+ ""Volume,Weight,ShelfWidth,ShelfHeight,ShelfDepth,UnitsPerPallet,""
						+ ""Discontinued,DiscontinuedBy,Updated,UpdatedBy)= ""
						+ ""(SELECT Value,Name,Description,DocumentNote,Help,""
						+ ""UPC,SKU,C_UOM_ID,M_Product_Category_ID,Classification,ProductType,""
						+ ""Volume,Weight,ShelfWidth,ShelfHeight,ShelfDepth,UnitsPerPallet,""
						+ ""Discontinued,DiscontinuedBy,SysDate,UpdatedBy""
						+ "" FROM I_Product WHERE I_Product_ID=""+I_Product_ID+"") ""
						+ ""WHERE M_Product_ID=""+M_Product_ID;
					PreparedStatement pstmt_updateProduct = DB.prepareStatement
						(sqlt, get_TrxName());

					//jz pstmt_updateProduct.setInt(1, I_Product_ID);
					//   pstmt_updateProduct.setInt(2, M_Product_ID);
					try
					{
						no = pstmt_updateProduct.executeUpdate();
						log.finer(""Update Product = "" + no);
						noUpdate++;
					}
					catch (SQLException ex)
					{
						log.warning(""Update Product - "" + ex.toString());
						StringBuffer sql0 = new StringBuffer (""UPDATE I_Product i ""
							+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||"").append(DB.TO_STRING(""Update Product: "" + ex.toString()))
							.append(""WHERE I_Product_ID="").append(I_Product_ID);
						DB.executeUpdate(sql0.toString(), get_TrxName());
						continue;
					}
					pstmt_updateProduct.close();
				}

				//	Do we have PO Info
				if (C_BPartner_ID != 0)
				{
					no = 0;
					//	If Product existed, Try to Update first
					if (!newProduct)
					{
						String sqlt = ""UPDATE M_Product_PO ""
							+ ""SET (IsCurrentVendor,C_UOM_ID,C_Currency_ID,UPC,""
							+ ""PriceList,PricePO,RoyaltyAmt,PriceEffective,""
							+ ""VendorProductNo,VendorCategory,Manufacturer,""
							+ ""Discontinued,DiscontinuedBy,Order_Min,Order_Pack,""
							+ ""CostPerOrder,DeliveryTime_Promised,Updated,UpdatedBy)= ""
							+ ""(SELECT CAST('Y' AS CHAR), C_UOM_ID, C_Currency_ID, UPC, ""    //jz fix EDB unknown datatype error
							+ ""PriceList, PricePO, RoyaltyAmt, PriceEffective, ""
							+ ""VendorProductNo, VendorCategory, Manufacturer, ""
							+ ""Discontinued, DiscontinuedBy, Order_Min, Order_Pack, ""
							+ ""CostPerOrder, DeliveryTime_Promised, SysDate, UpdatedBy""
							+ "" FROM I_Product""
							+ "" WHERE I_Product_ID=""+I_Product_ID+"") ""
							+ ""WHERE M_Product_ID=""+M_Product_ID+"" AND C_BPartner_ID=""+C_BPartner_ID;
						PreparedStatement pstmt_updateProductPO = DB.prepareStatement
							(sqlt, get_TrxName());
						//jz pstmt_updateProductPO.setInt(1, I_Product_ID);
						// pstmt_updateProductPO.setInt(2, M_Product_ID);
						// pstmt_updateProductPO.setInt(3, C_BPartner_ID);
						try
						{
							no = pstmt_updateProductPO.executeUpdate();
							log.finer(""Update Product_PO = "" + no);
							noUpdatePO++;
						}
						catch (SQLException ex)
						{
							log.warning(""Update Product_PO - "" + ex.toString());
							noUpdate--;
							rollback();
							StringBuffer sql0 = new StringBuffer (""UPDATE I_Product i ""
								+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||"").append(DB.TO_STRING(""Update Product_PO: "" + ex.toString()))
								.append(""WHERE I_Product_ID="").append(I_Product_ID);
							DB.executeUpdate(sql0.toString(), get_TrxName());
							continue;
						}
						pstmt_updateProductPO.close();
					}
					if (no == 0)		//	Insert PO
					{
						pstmt_insertProductPO.setInt(1, M_Product_ID);
						pstmt_insertProductPO.setInt(2, C_BPartner_ID);
						pstmt_insertProductPO.setInt(3, I_Product_ID);
						try
						{
							no = pstmt_insertProductPO.executeUpdate();
							log.finer(""Insert Product_PO = "" + no);
							noInsertPO++;
						}
						catch (SQLException ex)
						{
							log.warning(""Insert Product_PO - "" + ex.toString());
							noInsert--;			//	assume that product also did not exist
							rollback();
							StringBuffer sql0 = new StringBuffer (""UPDATE I_Product i ""
								+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||"").append(DB.TO_STRING(""Insert Product_PO: "" + ex.toString()))
								.append(""WHERE I_Product_ID="").append(I_Product_ID);
							DB.executeUpdate(sql0.toString(), get_TrxName());
							continue;
						}
					}
				}	//	C_BPartner_ID != 0

				//	Price List
				if (p_M_PriceList_Version_ID != 0)
				{
					BigDecimal PriceList = imp.getPriceList();
					BigDecimal PriceStd = imp.getPriceStd();
					BigDecimal PriceLimit = imp.getPriceLimit();
					if (PriceStd.signum() != 0 && PriceLimit.signum() != 0 && PriceList.signum() != 0)
					{
						MProductPrice pp = MProductPrice.get(getCtx(), 
							p_M_PriceList_Version_ID, M_Product_ID, get_TrxName());
						if (pp == null)
							pp = new MProductPrice (getCtx(), 
								p_M_PriceList_Version_ID, M_Product_ID, get_TrxName());
						pp.setPrices(PriceList, PriceStd, PriceLimit);
						pp.save();
					}
				}
				
				//	Update I_Product
				pstmt_setImported.setInt(1, M_Product_ID);
				pstmt_setImported.setInt(2, I_Product_ID);
				no = pstmt_setImported.executeUpdate();
				//
				commit();
			}	//	for all I_Product
			rs.close();
			pstmt.close();

			//
		//	pstmt_insertProduct.close();
			// pstmt_updateProduct.close();
			pstmt_insertProductPO.close();
			// pstmt_updateProductPO.close();
			pstmt_setImported.close();
			//
		}
		catch (SQLException e)
		{
		}

		//	Set Error to indicator to not imported
		sql = new StringBuffer (""UPDATE I_Product ""
			+ ""SET I_IsImported='N', Updated=SysDate ""
			+ ""WHERE I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		addLog (0, null, new BigDecimal (no), ""@Errors@"");
		addLog (0, null, new BigDecimal (noInsert), ""@M_Product_ID@: @Inserted@"");
		addLog (0, null, new BigDecimal (noUpdate), ""@M_Product_ID@: @Updated@"");
		addLog (0, null, new BigDecimal (noInsertPO), ""@M_Product_ID@ @Purchase@: @Inserted@"");
		addLog (0, null, new BigDecimal (noUpdatePO), ""@M_Product_ID@ @Purchase@: @Updated@"");
		return """";
	}	//	doIt
"
org.compiere.process.PeriodStatus.prepare,PeriodStatus.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""PeriodAction""))
				p_PeriodAction = (String)element.getParameter();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_C_Period_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.PeriodStatus.doIt,PeriodStatus.java,"String doIt() throws Exception
	{
		log.info (""C_Period_ID="" + p_C_Period_ID + "", PeriodAction="" + p_PeriodAction);
		MPeriod period = new MPeriod (getCtx(), p_C_Period_ID, get_TrxName());
		if (period.get_ID() == 0)
			throw new CompiereUserException(""@NotFound@  @C_Period_ID@="" + p_C_Period_ID);

		StringBuffer sql = new StringBuffer (""UPDATE C_PeriodControl "");
		sql.append(""SET PeriodStatus='"");
		//	Open
		if (X_C_PeriodControl.PERIODACTION_OpenPeriod.equals(p_PeriodAction))
			sql.append (X_C_PeriodControl.PERIODSTATUS_Open);
		//	Close
		else if (X_C_PeriodControl.PERIODACTION_ClosePeriod.equals(p_PeriodAction))
			sql.append (X_C_PeriodControl.PERIODSTATUS_Closed);
		//	Close Permanently
		else if (X_C_PeriodControl.PERIODACTION_PermanentlyClosePeriod.equals(p_PeriodAction))
			sql.append (X_C_PeriodControl.PERIODSTATUS_PermanentlyClosed);
		else
			return ""-"";
		//
		sql.append(""', PeriodAction='N', Updated=SysDate,UpdatedBy="").append(getAD_User_ID());
		//	WHERE
		sql.append("" WHERE C_Period_ID="").append(period.getC_Period_ID())
			.append("" AND PeriodStatus<>'P'"")
			.append("" AND PeriodStatus<>'"").append(p_PeriodAction).append(""'"");
			
		int no = DB.executeUpdate(sql.toString(), get_TrxName());
		
		CacheMgt.get().reset(""C_PeriodControl"", 0);
		CacheMgt.get().reset(""C_Period"", p_C_Period_ID);
		return ""@Updated@ #"" + no;
	}	//	doIt
"
org.compiere.process.DocTypeCounterValidate.prepare,DocTypeCounterValidate.java,"void prepare ()
	{
		p_C_DocTypeCounter_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.DocTypeCounterValidate.doIt,DocTypeCounterValidate.java,"String doIt () throws Exception
	{
		log.info(""C_DocTypeCounter_ID="" + p_C_DocTypeCounter_ID);
		m_counter = new MDocTypeCounter (getCtx(), p_C_DocTypeCounter_ID, get_TrxName());
		if (m_counter == null || m_counter.get_ID() == 0)
			throw new IllegalArgumentException(""Not found C_DocTypeCounter_ID="" + p_C_DocTypeCounter_ID);
		//
		String error = m_counter.validate();
		m_counter.save();
		if (error != null)
			throw new Exception(error);
		
		return ""OK"";
	}	//	doIt
"
org.compiere.process.TemporaryDelete.prepare,TemporaryDelete.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para)
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""KeepTemporaryDays""))
				p_KeepTemporaryDays = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.TemporaryDelete.doIt,TemporaryDelete.java,"String doIt() throws Exception
	{
		int AD_Client_ID = getCtx().getAD_Client_ID();
		log.info(""KeepTemporaryDays="" + p_KeepTemporaryDays
			+ "",AD_Client_ID="" + AD_Client_ID);

		int count = 0;

		String sql = ""SELECT * FROM AD_Table t ""
			+ ""WHERE IsReportingTable='Y' AND IsView='N'""
			+ ""ORDER BY 1"";
        PreparedStatement pstmt = null;
        try
        {
	        pstmt = DB.prepareStatement(sql, get_TrxName());
	        ResultSet rs = pstmt.executeQuery();
	        while (rs.next())
	        {
	        	MTable table = new MTable(getCtx(), rs, null);
	        	if (table.isReportingTable())
	        		count += deleteData(AD_Client_ID, table);
	        }
	        rs.close();
	        pstmt.close();
	        pstmt = null;
        }
        catch (Exception e)
        {
	        log.log(Level.SEVERE, sql, e);
        }
        try
        {
	        if (pstmt != null)
		        pstmt.close();
	        pstmt = null;
        }
        catch (Exception e)
        {
	        pstmt = null;
        }

		return ""#"" + count;
	}	//	doIt
"
org.compiere.process.TemporaryDelete.deleteData,TemporaryDelete.java,"int deleteData (int AD_Client_ID, MTable table)
	{
		String sql = ""DELETE FROM "" + table.getTableName();
		if (AD_Client_ID != 0)
			sql += "" WHERE AD_Client_ID="" + AD_Client_ID;
		if (p_KeepTemporaryDays > 0)
		{
			if (table.getColumn(""Created"") != null)
			{
				if (AD_Client_ID != 0)
					sql += "" AND Created < SysDate-"";
				else
					sql += "" WHERE Created < SysDate-"";
				sql += p_KeepTemporaryDays;
			}
		}


		//	Truncate
		if ((p_KeepTemporaryDays == 0) && (AD_Client_ID == 0))
			sql = ""TRUNCATE TABLE "" + table.getTableName();

		int count = DB.executeUpdate(sql, get_TrxName());

		addLog(table.getTableName() + "" #"" + count);
		return count;
	}	//	deleteData
"
org.compiere.process.CommissionAPInvoice.prepare,CommissionAPInvoice.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.CommissionAPInvoice.doIt,CommissionAPInvoice.java,"String doIt() throws Exception
	{
		log.info(""doIt - C_CommissionRun_ID="" + getRecord_ID());
		//	Load Data
		MCommissionRun comRun = new MCommissionRun (getCtx(), getRecord_ID(), get_TrxName());
		if (comRun.get_ID() == 0)
			throw new IllegalArgumentException(""CommissionAPInvoice - No Commission Run"");
		if (Env.ZERO.compareTo(comRun.getGrandTotal()) == 0)
			throw new IllegalArgumentException(""@GrandTotal@ = 0"");
		MCommission com = new MCommission (getCtx(), comRun.getC_Commission_ID(), get_TrxName());
		if (com.get_ID() == 0)
			throw new IllegalArgumentException(""CommissionAPInvoice - No Commission"");
		if (com.getC_Charge_ID() == 0)
			throw new IllegalArgumentException(""CommissionAPInvoice - No Charge on Commission"");
		MBPartner bp = new MBPartner (getCtx(), com.getC_BPartner_ID(), get_TrxName());
		if (bp.get_ID() == 0)
			throw new IllegalArgumentException(""CommissionAPInvoice - No BPartner"");
			
		//	Create Invoice
		MInvoice invoice = new MInvoice (getCtx(), 0, null);
		invoice.setClientOrg(com.getAD_Client_ID(), com.getAD_Org_ID());
		invoice.setC_DocTypeTarget_ID(MDocBaseType.DOCBASETYPE_APInvoice);	//	API
		invoice.setBPartner(bp);
	//	invoice.setDocumentNo (comRun.getDocumentNo());		//	may cause unique constraint
		invoice.setSalesRep_ID(getAD_User_ID());	//	caller
		//
		if (com.getC_Currency_ID() != invoice.getC_Currency_ID())
			throw new IllegalArgumentException(""CommissionAPInvoice - Currency of PO Price List not Commission Currency"");
		//		
		if (!invoice.save())
			throw new IllegalStateException(""CommissionAPInvoice - cannot save Invoice"");		

 		//	Create Invoice Line
 		MInvoiceLine iLine = new MInvoiceLine(invoice);
		iLine.setC_Charge_ID(com.getC_Charge_ID());
 		iLine.setQty(1);
 		iLine.setPrice(comRun.getGrandTotal());
		iLine.setTax();
		if (!iLine.save())
			throw new IllegalStateException(""CommissionAPInvoice - cannot save Invoice Line"");
		
		//set the Vendor Invoice ID in the Commission Run.
	    comRun.setC_Invoice_ID(invoice.getC_Invoice_ID());
	    if (!comRun.save())
			throw new IllegalStateException(""CommissionAPInvoice - cannot save CommissionRun"");
		//
		return ""@C_Invoice_ID@ = "" + invoice.getDocumentNo();
	}	//	doIt
"
org.compiere.process.BPGroupAcctCopy.prepare,BPGroupAcctCopy.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) 
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_BP_Group_ID""))
				p_C_BP_Group_ID = element.getParameterAsInt();
			else if (name.equals(""C_AcctSchema_ID""))
				p_C_AcctSchema_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.BPGroupAcctCopy.doIt,BPGroupAcctCopy.java,"String doIt () throws Exception
	{
		log.info(""C_AcctSchema_ID="" + p_C_AcctSchema_ID);
		if (p_C_AcctSchema_ID == 0)
			throw new CompiereSystemException(""C_AcctSchema_ID=0"");
		MAcctSchema as = MAcctSchema.get(getCtx(), p_C_AcctSchema_ID);
		if (as.get_ID() == 0)
			throw new CompiereSystemException(""Not Found - C_AcctSchema_ID="" + p_C_AcctSchema_ID);
		//
		String sql = null;
		int updated = 0;
		int created = 0;
		int updatedTotal = 0;
		int createdTotal = 0;

		//	Update existing Customers
		sql = ""UPDATE C_BP_Customer_Acct ca ""
			+ ""SET (C_Receivable_Acct,C_Receivable_Services_Acct,C_PrePayment_Acct)=""
			 + "" (SELECT C_Receivable_Acct,C_Receivable_Services_Acct,C_PrePayment_Acct ""
			 + "" FROM C_BP_Group_Acct""
			 + "" WHERE C_BP_Group_ID="" + p_C_BP_Group_ID
			 + "" AND C_AcctSchema_ID="" + p_C_AcctSchema_ID
			+ ""), Updated=SysDate, UpdatedBy=0 ""
			+ ""WHERE ca.C_AcctSchema_ID="" + p_C_AcctSchema_ID
			+ "" AND EXISTS (SELECT * FROM C_BPartner p ""
				+ ""WHERE p.C_BPartner_ID=ca.C_BPartner_ID""
				+ "" AND p.C_BP_Group_ID="" + p_C_BP_Group_ID + "")"";
		updated = DB.executeUpdate(sql, get_TrxName());
		addLog(0, null, new BigDecimal(updated), ""@Updated@ @C_BPartner_ID@ @IsCustomer@"");
		updatedTotal += updated;
		
		//	Insert new Customer
		sql = ""INSERT INTO C_BP_Customer_Acct ""
			+ ""(C_BPartner_ID, C_AcctSchema_ID,""
			+ "" AD_Client_ID, AD_Org_ID, IsActive, Created, CreatedBy, Updated, UpdatedBy,""
			+ "" C_Receivable_Acct, C_Receivable_Services_Acct, C_PrePayment_Acct) ""
			+ ""SELECT p.C_BPartner_ID, acct.C_AcctSchema_ID,""
			+ "" p.AD_Client_ID, p.AD_Org_ID, 'Y', SysDate, 0, SysDate, 0,""
			+ "" acct.C_Receivable_Acct, acct.C_Receivable_Services_Acct, acct.C_PrePayment_Acct ""
			+ ""FROM C_BPartner p""
			+ "" INNER JOIN C_BP_Group_Acct acct ON (acct.C_BP_Group_ID=p.C_BP_Group_ID)""
			+ ""WHERE acct.C_AcctSchema_ID="" + p_C_AcctSchema_ID			//	#
			+ "" AND p.C_BP_Group_ID="" + p_C_BP_Group_ID
			+ "" AND NOT EXISTS (SELECT * FROM C_BP_Customer_Acct ca ""
				+ ""WHERE ca.C_BPartner_ID=p.C_BPartner_ID""
				+ "" AND ca.C_AcctSchema_ID=acct.C_AcctSchema_ID)"";
		created = DB.executeUpdate(sql, get_TrxName());
		addLog(0, null, new BigDecimal(created), ""@Created@ @C_BPartner_ID@ @IsCustomer@"");
		createdTotal += created;

		
		//	Update existing Vendors
		sql = ""UPDATE C_BP_Vendor_Acct va ""
			+ ""SET (V_Liability_Acct,V_Liability_Services_Acct,V_PrePayment_Acct)=""
			 + "" (SELECT V_Liability_Acct,V_Liability_Services_Acct,V_PrePayment_Acct ""
			 + "" FROM C_BP_Group_Acct""
			 + "" WHERE C_BP_Group_ID="" + p_C_BP_Group_ID
			 + "" AND C_AcctSchema_ID="" + p_C_AcctSchema_ID
			+ ""), Updated=SysDate, UpdatedBy=0 ""
			+ ""WHERE va.C_AcctSchema_ID="" + p_C_AcctSchema_ID
			+ "" AND EXISTS (SELECT * FROM C_BPartner p ""
				+ ""WHERE p.C_BPartner_ID=va.C_BPartner_ID""
				+ "" AND p.C_BP_Group_ID="" + p_C_BP_Group_ID + "")"";
		updated = DB.executeUpdate(sql, get_TrxName());
		addLog(0, null, new BigDecimal(updated), ""@Updated@ @C_BPartner_ID@ @IsVendor@"");
		updatedTotal += updated;
		
		//	Insert new Vendors
		sql = ""INSERT INTO C_BP_Vendor_Acct ""
			+ ""(C_BPartner_ID, C_AcctSchema_ID,""
			+ "" AD_Client_ID, AD_Org_ID, IsActive, Created, CreatedBy, Updated, UpdatedBy,""
			+ "" V_Liability_Acct, V_Liability_Services_Acct, V_PrePayment_Acct) ""
			+ ""SELECT p.C_BPartner_ID, acct.C_AcctSchema_ID,""
			+ "" p.AD_Client_ID, p.AD_Org_ID, 'Y', SysDate, 0, SysDate, 0,""
			+ "" acct.V_Liability_Acct, acct.V_Liability_Services_Acct, acct.V_PrePayment_Acct ""
			+ ""FROM C_BPartner p""
			+ "" INNER JOIN C_BP_Group_Acct acct ON (acct.C_BP_Group_ID=p.C_BP_Group_ID)""
			+ ""WHERE acct.C_AcctSchema_ID="" + p_C_AcctSchema_ID			//	#
			+ "" AND p.C_BP_Group_ID="" + p_C_BP_Group_ID
			+ "" AND NOT EXISTS (SELECT * FROM C_BP_Vendor_Acct va ""
				+ ""WHERE va.C_BPartner_ID=p.C_BPartner_ID AND va.C_AcctSchema_ID=acct.C_AcctSchema_ID)"";
		created = DB.executeUpdate(sql, get_TrxName());
		addLog(0, null, new BigDecimal(created), ""@Created@ @C_BPartner_ID@ @IsVendor@"");
		createdTotal += created;

		return ""@Created@="" + createdTotal + "", @Updated@="" + updatedTotal;
	}	//	doIt
"
org.compiere.process.ColumnEncryption.prepare,ColumnEncryption.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;			
			else if (name.equals(""IsEncrypted""))
				p_IsEncrypted = ""Y"".equals(element.getParameter());
			else if (name.equals(""ChangeSetting""))
				p_ChangeSetting = ""Y"".equals(element.getParameter());
			else if (name.equals(""MaxLength""))
				p_MaxLength = element.getParameterAsInt();
			else if (name.equals(""TestValue""))
				p_TestValue = (String)element.getParameter();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_AD_Column_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.ColumnEncryption.doIt,ColumnEncryption.java,"String doIt () throws Exception
	{
		log.info(""AD_Column_ID="" + p_AD_Column_ID
			+ "", IsEncrypted="" + p_IsEncrypted
			+ "", ChangeSetting="" + p_ChangeSetting
			+ "", MaxLength="" + p_MaxLength);
		MColumn column = new MColumn (getCtx(), p_AD_Column_ID, null);
		if (column.get_ID() == 0 || column.get_ID() != p_AD_Column_ID)
			throw new CompiereUserException(""@NotFound@ @AD_Column_ID@ - "" + p_AD_Column_ID);
		//
		String columnName = column.getColumnName();
		int dt = column.getAD_Reference_ID();
		
		//	Can it be enabled?
		if (column.isKey() 
			|| column.isParent() 
			|| column.isStandardColumn()
			|| column.isVirtualColumn() 
			|| column.isIdentifier() 
			|| column.isTranslated()
			|| FieldType.isLookup(dt) 
			|| FieldType.isLOB(dt)
			|| ""DocumentNo"".equalsIgnoreCase(column.getColumnName())
			|| ""Value"".equalsIgnoreCase(column.getColumnName())
			|| ""Name"".equalsIgnoreCase(column.getColumnName()))
		{
			if (column.isEncrypted())
			{
				column.setIsEncrypted(false);
				column.save();
			}
			return columnName + "": cannot be encrypted"";
		}
		
		//	Start
		addLog(0, null, null, ""Encryption Class = "" + SecureEngine.getClassName());
		boolean error = false;
		
		//	Test Value
		if (p_TestValue != null && p_TestValue.length() > 0)
		{
			String encString = SecureEngine.encrypt(p_TestValue);
			addLog(0, null, null, ""Encrypted Test Value="" + encString);
			String clearString = SecureEngine.decrypt(encString);
			if (p_TestValue.equals(clearString))
				addLog(0, null, null, ""Decrypted="" + clearString 
					+ "" (same as test value)"");
			else
			{
				addLog(0, null, null, ""Decrypted="" + clearString 
					+ "" (NOT the same as test value - check algorithm)"");
				error = true;
			}
			int encLength = encString.length();
			addLog(0, null, null, ""Test Length="" + p_TestValue.length() + "" -> "" + encLength);
			if (encLength <= column.getFieldLength())
				addLog(0, null, null, ""Encrypted Length ("" + encLength 
					+ "") fits into field ("" + column.getFieldLength() + "")"");
			else
			{
				addLog(0, null, null, ""Encrypted Length ("" + encLength 
					+ "") does NOT fit into field ("" + column.getFieldLength() + "") - resize field"");
				error = true;
			}
		}

		//	Length Test
		if (p_MaxLength != 0)
		{
			String testClear = ""1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"";
			while (testClear.length() < p_MaxLength)
				testClear += testClear;
			testClear = testClear.substring(0, p_MaxLength);
			log.config(""Test="" + testClear + "" ("" + p_MaxLength + "")"");
			//
			String encString = SecureEngine.encrypt(testClear);
			int encLength = encString.length();
			addLog(0, null, null, ""Test Max Length="" + testClear.length() + "" -> "" + encLength);
			if (encLength <= column.getFieldLength())
				addLog(0, null, null, ""Encrypted Max Length ("" + encLength 
					+ "") fits into field ("" + column.getFieldLength() + "")"");
			else
			{
				addLog(0, null, null, ""Encrypted Max Length ("" + encLength 
					+ "") does NOT fit into field ("" + column.getFieldLength() + "") - resize field"");
				error = true;
			}
		}

		if (p_IsEncrypted != column.isEncrypted())
		{
			if (error || !p_ChangeSetting)
				addLog(0, null, null, ""Encryption NOT changed - Encryption="" + column.isEncrypted());
			else
			{
				column.setIsEncrypted(p_IsEncrypted);
				if (column.save())
					addLog(0, null, null, ""Encryption CHANGED - Encryption="" + column.isEncrypted());
				else
					addLog(0, null, null, ""Save Error"");
			}
		}
		return ""Encryption="" + column.isEncrypted();
	}	//	doIt
"
org.compiere.process.WindowCopy.prepare,WindowCopy.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_Window_ID""))
				p_AD_WindowFrom_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
		p_AD_WindowTo_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.WindowCopy.doIt,WindowCopy.java,"String doIt() throws Exception
	{
		log.info(""doIt - To AD_Window_ID="" + p_AD_WindowTo_ID + "", From="" + p_AD_WindowFrom_ID);
		MWindow from = new MWindow (getCtx(), p_AD_WindowFrom_ID, get_TrxName());
		if (from.get_ID() == 0)
			throw new CompiereUserException(""@NotFound@ (from->) @AD_Window_ID@"");
		MWindow to = new MWindow (getCtx(), p_AD_WindowTo_ID, get_TrxName());
		if (to.get_ID() == 0)
			throw new CompiereUserException(""@NotFound@ (to<-) @AD_Window_ID@"");
		
		int tabCount = 0;
		int fieldCount = 0;
		MTab[] oldTabs = from.getTabs(false, get_TrxName());
		for (MTab oldTab : oldTabs) {
			MTab newTab = new MTab (to, oldTab);
			if (newTab.save())
			{
				tabCount++;
				//	Copy Fields
				MField[] oldFields = oldTab.getFields(false, get_TrxName());
				for (MField oldField : oldFields) {
					MField newField = new MField (newTab, oldField);
					if (newField.save())
						fieldCount++;
					else
						throw new CompiereUserException(""@Error@ @AD_Field_ID@"");
				}
			}
			else
				throw new CompiereUserException(""@Error@ @AD_Tab_ID@"");
		}
		
		return ""@Copied@ #"" + tabCount + ""/"" + fieldCount;
	}	//	doIt
"
org.compiere.process.RfQCopyLines.prepare,RfQCopyLines.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_RfQ_ID""))
				p_From_RfQ_ID = ((BigDecimal)element.getParameter()).intValue();
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
		p_To_RfQ_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.RfQCopyLines.doIt,RfQCopyLines.java,"String doIt () throws Exception
	{
		log.info(""doIt - From_RfQ_ID="" + p_From_RfQ_ID + "", To_RfQ_ID="" + p_To_RfQ_ID);
		//
		MRfQ to = new MRfQ (getCtx(), p_To_RfQ_ID, get_TrxName());
		if (to.get_ID() == 0)
			throw new IllegalArgumentException(""No To RfQ found"");
		MRfQ from = new MRfQ (getCtx(), p_From_RfQ_ID, get_TrxName());
		if (from.get_ID() == 0)
			throw new IllegalArgumentException(""No From RfQ found"");
		
		//	Copy Lines
		int counter = 0;
		MRfQLine[] lines = from.getLines();
		for (MRfQLine element : lines) {
			MRfQLine newLine = new MRfQLine (to);
			newLine.setLine(element.getLine());
			newLine.setDescription(element.getDescription());
			newLine.setHelp(element.getHelp());
			newLine.setM_Product_ID(element.getM_Product_ID());
			newLine.setM_AttributeSetInstance_ID(element.getM_AttributeSetInstance_ID());
		//	newLine.setDateWorkStart();
		//	newLine.setDateWorkComplete();
			newLine.setDeliveryDays(element.getDeliveryDays());
			newLine.save();
			//	Copy Qtys
			MRfQLineQty[] qtys = element.getQtys();
			for (MRfQLineQty element2 : qtys) {
				MRfQLineQty newQty = new MRfQLineQty (newLine);
				newQty.setC_UOM_ID(element2.getC_UOM_ID());
				newQty.setQty(element2.getQty());
				newQty.setIsOfferQty(element2.isOfferQty());
				newQty.setIsPurchaseQty(element2.isPurchaseQty());
				newQty.setMargin(element2.getMargin());
				newQty.save();
			}
			counter++;
		}	//	copy all lines	
		
		//
		return ""# "" + counter;
	}	//	doIt
"
org.compiere.process.SessionEnd.prepare,SessionEnd.java,"void prepare()
	{
		m_AD_Session_ID = getRecord_ID();
	}
"
org.compiere.process.SessionEnd.doIt,SessionEnd.java,"String doIt() throws Exception
	{
		log.info(""AD_Session_ID="" + m_AD_Session_ID);
		if (m_AD_Session_ID == 0)
			throw new CompiereUserException(""@NotFound@ @AD_Session_ID@"");
		MSession session = new MSession(getCtx(), m_AD_Session_ID, get_TrxName());
		if (session.get_ID() != m_AD_Session_ID)
			throw new CompiereUserException(""@NotFound@ @AD_Session_ID@ ID="" + m_AD_Session_ID);

		if (session.isProcessed())
			return ""@Processed@"";

		MUser user = MUser.get(getCtx(), getCtx().getAD_User_ID());

		session.setProcessed(true);
		session.addDescription(""Ended by "" + user.getName());
		session.logout();

		return ""OK"";
	}	//	doIt
"
org.compiere.process.ImportContact.prepare,ImportContact.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) 
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_Client_ID""))
				p_AD_Client_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""DeleteOldImported""))
				p_deleteOldImported = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.ImportContact.doIt,ImportContact.java,"String doIt() throws Exception
	{
		StringBuffer sql = null;
		int no = 0;
		String clientCheck = "" AND AD_Client_ID="" + p_AD_Client_ID;

		//	****	Prepare	****

		//	Delete Old Imported
		if (p_deleteOldImported)
		{
			sql = new StringBuffer (""DELETE FROM I_Contact ""
				+ ""WHERE I_IsImported='Y'"").append(clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			log.fine(""Delete Old Impored ="" + no);
		}

		//	Set Client, Org, IsActive, Created/Updated
		sql = new StringBuffer (""UPDATE I_Contact ""
			+ ""SET AD_Client_ID = COALESCE (AD_Client_ID, "").append(p_AD_Client_ID).append(""),""
			+ "" AD_Org_ID = COALESCE (AD_Org_ID, 0),""
			+ "" IsActive = COALESCE (IsActive, 'Y'),""
			+ "" Created = COALESCE (Created, SysDate),""
			+ "" CreatedBy = COALESCE (CreatedBy, 0),""
			+ "" Updated = COALESCE (Updated, SysDate),""
			+ "" UpdatedBy = COALESCE (UpdatedBy, 0),""
			+ "" I_ErrorMsg = NULL,""
			+ "" I_IsImported = 'N' ""
			+ ""WHERE I_IsImported<>'Y' OR I_IsImported IS NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Reset="" + no);

		//	Interest Area
		sql = new StringBuffer (""UPDATE I_Contact i "" 
			+ ""SET R_InterestArea_ID=(SELECT R_InterestArea_ID FROM R_InterestArea ia ""
				+ ""WHERE i.InterestAreaName=ia.Name AND ia.AD_Client_ID=i.AD_Client_ID) ""
			+ ""WHERE R_InterestArea_ID IS NULL AND InterestAreaName IS NOT NULL""
			+ "" AND I_IsImported='N'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Interest Area="" + no);
		
		
		int noProcessed = 0;
		String sql0 = ""SELECT * FROM I_Contact ""
			+ ""WHERE I_IsImported<>'Y' AND AD_Client_ID=? ORDER BY I_Contact_ID"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql0, get_TrxName());
			pstmt.setInt (1, p_AD_Client_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				if (process (new X_I_Contact (getCtx(), rs, get_TrxName())))
					noProcessed++;
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql0, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		return ""@Processed@ #"" + noProcessed;
	}	//	doIt
"
org.compiere.process.ImportContact.process,ImportContact.java,"boolean process (X_I_Contact imp)
	{
		if (imp.getEMail() == null || imp.getEMail().length() == 0)
			return processFail (imp, ""No EMail"");
		
		MUser user = MUser.get (getCtx(), imp.getEMail(), get_TrxName());
		//	New User
		if (user == null || user.getAD_User_ID() == 0)
		{
			if (imp.isEMailBounced())
				return processFail(imp, ""No User found with email - cannot set Bounced flag"");
			if (imp.getContactName() == null || imp.getContactName().length() == 0)
				return processFail(imp, ""No Name for User/Contact"");
			
			user = new MUser (getCtx(), 0, get_TrxName());
			user.setName (imp.getContactName());
			user.setDescription (imp.getContactDescription());
			user.setEMail (imp.getEMail());
		}
		//	Existing User
		else
		{
			if (imp.isEMailBounced())
			{
				user.setIsEMailBounced (true);
				user.setBouncedInfo (imp.getBouncedInfo());
			}
		}
		if (!user.save())
			return processFail(imp, ""Cannot save User"");
		
		//	Create BP
		if (imp.isCreateBP())
		{
			if (user.getC_BPartner_ID() == 0)
			{
				MBPartner bp = new MBPartner(getCtx(), 0, get_TrxName());
				bp.setName (user.getName());
				if (!bp.save())
					return processFail(imp, ""Cannot create BPartner"");
				else
				{
					user.setC_BPartner_ID (bp.getC_BPartner_ID());
					if (!user.save())
						return processFail(imp, ""Cannot update User"");
				}
			}
			imp.setC_BPartner_ID (user.getC_BPartner_ID());
		}
		
		//	Create Lead
		if (imp.isCreateLead())
		{
			MLead lead = new MLead(getCtx(), 0, get_TrxName());
			lead.setName (imp.getContactName());
			lead.setDescription (imp.getContactDescription());
			lead.setAD_User_ID(user.getAD_User_ID ());
			lead.setC_BPartner_ID (user.getC_BPartner_ID());
			lead.save();
			imp.setC_Lead_ID (lead.getC_Lead_ID());
		}
		
		//	Interest Area
		if (imp.getR_InterestArea_ID() != 0 && user != null)
		{
			MContactInterest ci = MContactInterest.get(getCtx(), 
				imp.getR_InterestArea_ID(), user.getAD_User_ID(), 
				true, get_TrxName());
			ci.save();		//	don't subscribe or re-activate
		}
		
		imp.setAD_User_ID (user.getAD_User_ID());
		imp.setI_IsImported (true);
		imp.setI_ErrorMsg (null);
		imp.save();
		return true;
	}	//	process
"
org.compiere.process.ImportContact.processFail,ImportContact.java,"boolean processFail (X_I_Contact imp, String errorMsg)
	{
		imp.setI_IsImported(false);
		imp.setI_ErrorMsg(errorMsg);
		imp.save();
		
		return false;
	}	//	processFail
"
org.compiere.process.SessionEndAll.prepare,SessionEndAll.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para)
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""SessionType""))
				p_SessionType = (String)element.getParameter();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.SessionEndAll.doIt,SessionEndAll.java,"String doIt() throws Exception
	{
		log.info(""SessionType="" + p_SessionType);
		return endAll(getCtx(), p_SessionType);
	}	//	doIt
"
org.compiere.process.SessionEndAll.endAll,SessionEndAll.java,"String endAll (Ctx ctx, String SessionType)
	{
		int AD_Session_ID = ctx.getContextAsInt(""#AD_Session_ID"");
		int AD_Client_ID = ctx.getAD_Client_ID();
		s_log.info(""SessionType="" + SessionType
			+ "",AD_Client_ID"" + AD_Client_ID
			+ "" (own AD_Session_ID="" + AD_Session_ID + "")"");

		String sql = ""UPDATE AD_Session SET Processed='Y' WHERE Processed='N'"";
		if (AD_Client_ID != 0)
			sql += "" AND AD_Client_ID="" + AD_Client_ID;
		if (!Util.isEmpty(SessionType))
			sql += "" AND SessionType='"" + SessionType + ""'"";
		if (AD_Session_ID != 0)
			sql += "" AND AD_Session_ID<>"" + AD_Session_ID;

		int counter = DB.executeUpdate(sql, (Trx) null);
		s_log.info(""#"" + counter);
		return ""#"" + counter;
	}	//	endAll
"
org.compiere.process.SessionEndAll.main,SessionEndAll.java,"void main(String[] args)
    {
	    Compiere.startup(true);
	    String st = null;
	    if (args.length > 0)
	    	st = args[0];
	    endAll(Env.getCtx(), st);
    }	//	main
"
org.compiere.process.ImportInvoice.prepare,ImportInvoice.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) 
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_Client_ID""))
				m_AD_Client_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""AD_Org_ID""))
				m_AD_Org_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""DeleteOldImported""))
				m_deleteOldImported = ""Y"".equals(element.getParameter());
			else if (name.equals(""DocAction""))
				m_docAction = (String)element.getParameter();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		if (m_DateValue == null)
			m_DateValue = new Timestamp (System.currentTimeMillis());
	}	//	prepare
"
org.compiere.process.ImportInvoice.doIt,ImportInvoice.java,"String doIt() throws java.lang.Exception
	{
		StringBuffer sql = null;
		int no = 0;
		String clientCheck = "" AND AD_Client_ID="" + m_AD_Client_ID;

		//	****	Prepare	****

		//	Delete Old Imported
		if (m_deleteOldImported)
		{
			sql = new StringBuffer (""DELETE FROM I_Invoice ""
				  + ""WHERE I_IsImported='Y'"").append (clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			log.fine(""Delete Old Impored ="" + no);
		}

		//	Set Client, Org, IsActive, Created/Updated
		sql = new StringBuffer (""UPDATE I_Invoice ""
			  + ""SET AD_Client_ID = COALESCE (AD_Client_ID,"").append (m_AD_Client_ID).append (""),""
			  + "" AD_Org_ID = COALESCE (AD_Org_ID,"").append (m_AD_Org_ID).append (""),""
			  + "" IsActive = COALESCE (IsActive, 'Y'),""
			  + "" Created = COALESCE (Created, SysDate),""
			  + "" CreatedBy = COALESCE (CreatedBy, 0),""
			  + "" Updated = COALESCE (Updated, SysDate),""
			  + "" UpdatedBy = COALESCE (UpdatedBy, 0),""
			  + "" I_ErrorMsg = NULL,""
			  + "" I_IsImported = 'N' ""
			  + ""WHERE I_IsImported<>'Y' OR I_IsImported IS NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info (""Reset="" + no);

		String ts = DB.isPostgreSQL()?""COALESCE(I_ErrorMsg,'')"":""I_ErrorMsg"";  //java bug, it could not be used directly
		sql = new StringBuffer (""UPDATE I_Invoice o ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Org, '""
			+ ""WHERE (AD_Org_ID IS NULL OR AD_Org_ID=0""
			+ "" OR EXISTS (SELECT * FROM AD_Org oo WHERE o.AD_Org_ID=oo.AD_Org_ID AND (oo.IsSummary='Y' OR oo.IsActive='N')))""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Org="" + no);

		//	Document Type - PO - SO
		sql = new StringBuffer (""UPDATE I_Invoice o ""
			  + ""SET C_DocType_ID=(SELECT C_DocType_ID FROM C_DocType d WHERE d.Name=o.DocTypeName""
			  + "" AND d.DocBaseType IN ('API','APC') AND o.AD_Client_ID=d.AD_Client_ID) ""
			  + ""WHERE C_DocType_ID IS NULL AND IsSOTrx='N' AND DocTypeName IS NOT NULL AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.fine(""Set PO DocType="" + no);
		sql = new StringBuffer (""UPDATE I_Invoice o ""
			  + ""SET C_DocType_ID=(SELECT C_DocType_ID FROM C_DocType d WHERE d.Name=o.DocTypeName""
			  + "" AND d.DocBaseType IN ('ARI','ARC') AND o.AD_Client_ID=d.AD_Client_ID) ""
			  + ""WHERE C_DocType_ID IS NULL AND IsSOTrx='Y' AND DocTypeName IS NOT NULL AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.fine(""Set SO DocType="" + no);
		sql = new StringBuffer (""UPDATE I_Invoice o ""
			  + ""SET C_DocType_ID=(SELECT C_DocType_ID FROM C_DocType d WHERE d.Name=o.DocTypeName""
			  + "" AND d.DocBaseType IN ('API','ARI','APC','ARC') AND o.AD_Client_ID=d.AD_Client_ID) ""
			//+ ""WHERE C_DocType_ID IS NULL AND IsSOTrx IS NULL AND DocTypeName IS NOT NULL AND I_IsImported<>'Y'"").append (clientCheck);
			  + ""WHERE C_DocType_ID IS NULL AND DocTypeName IS NOT NULL AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.fine(""Set DocType="" + no);
		sql = new StringBuffer (""UPDATE I_Invoice ""
			  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid DocTypeName, ' ""
			  + ""WHERE C_DocType_ID IS NULL AND DocTypeName IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid DocTypeName="" + no);
		//	DocType Default
		sql = new StringBuffer (""UPDATE I_Invoice o ""
			  + ""SET C_DocType_ID=(SELECT MAX(C_DocType_ID) FROM C_DocType d WHERE d.IsDefault='Y'""
			  + "" AND d.DocBaseType='API' AND o.AD_Client_ID=d.AD_Client_ID) ""
			  + ""WHERE C_DocType_ID IS NULL AND IsSOTrx='N' AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.fine(""Set PO Default DocType="" + no);
		sql = new StringBuffer (""UPDATE I_Invoice o ""
			  + ""SET C_DocType_ID=(SELECT MAX(C_DocType_ID) FROM C_DocType d WHERE d.IsDefault='Y'""
			  + "" AND d.DocBaseType='ARI' AND o.AD_Client_ID=d.AD_Client_ID) ""
			  + ""WHERE C_DocType_ID IS NULL AND IsSOTrx='Y' AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.fine(""Set SO Default DocType="" + no);
		sql = new StringBuffer (""UPDATE I_Invoice o ""
			  + ""SET C_DocType_ID=(SELECT MAX(C_DocType_ID) FROM C_DocType d WHERE d.IsDefault='Y'""
			  + "" AND d.DocBaseType IN('ARI','API') AND o.AD_Client_ID=d.AD_Client_ID) ""
			  + ""WHERE C_DocType_ID IS NULL AND IsSOTrx IS NULL AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.fine(""Set Default DocType="" + no);
		sql = new StringBuffer (""UPDATE I_Invoice ""
			  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=No DocType, ' ""
			  + ""WHERE C_DocType_ID IS NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""No DocType="" + no);

		//	Set IsSOTrx
		sql = new StringBuffer (""UPDATE I_Invoice o SET IsSOTrx='Y' ""
			  + ""WHERE EXISTS (SELECT * FROM C_DocType d WHERE o.C_DocType_ID=d.C_DocType_ID AND d.DocBaseType='ARI' AND o.AD_Client_ID=d.AD_Client_ID)""
			  + "" AND C_DocType_ID IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set IsSOTrx=Y="" + no);
		sql = new StringBuffer (""UPDATE I_Invoice o SET IsSOTrx='N' ""
			  + ""WHERE EXISTS (SELECT * FROM C_DocType d WHERE o.C_DocType_ID=d.C_DocType_ID AND d.DocBaseType='API' AND o.AD_Client_ID=d.AD_Client_ID)""
			  + "" AND C_DocType_ID IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set IsSOTrx=N="" + no);

		//	Price List
		sql = new StringBuffer (""UPDATE I_Invoice o ""
			  + ""SET M_PriceList_ID=(SELECT MAX(M_PriceList_ID) FROM M_PriceList p WHERE p.IsDefault='Y'""
			  + "" AND p.C_Currency_ID=o.C_Currency_ID AND p.IsSOPriceList=o.IsSOTrx AND o.AD_Client_ID=p.AD_Client_ID) ""
			  + ""WHERE M_PriceList_ID IS NULL AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Default Currency PriceList="" + no);
		sql = new StringBuffer (""UPDATE I_Invoice o ""
			  + ""SET M_PriceList_ID=(SELECT MAX(M_PriceList_ID) FROM M_PriceList p WHERE p.IsDefault='Y'""
			  + "" AND p.IsSOPriceList=o.IsSOTrx AND o.AD_Client_ID=p.AD_Client_ID) ""
			  + ""WHERE M_PriceList_ID IS NULL AND C_Currency_ID IS NULL AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Default PriceList="" + no);
		sql = new StringBuffer (""UPDATE I_Invoice o ""
			  + ""SET M_PriceList_ID=(SELECT MAX(M_PriceList_ID) FROM M_PriceList p ""
			  + "" WHERE p.C_Currency_ID=o.C_Currency_ID AND p.IsSOPriceList=o.IsSOTrx AND o.AD_Client_ID=p.AD_Client_ID) ""
			  + ""WHERE M_PriceList_ID IS NULL AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Currency PriceList="" + no);
		sql = new StringBuffer (""UPDATE I_Invoice o ""
			  + ""SET M_PriceList_ID=(SELECT MAX(M_PriceList_ID) FROM M_PriceList p ""
			  + "" WHERE p.IsSOPriceList=o.IsSOTrx AND o.AD_Client_ID=p.AD_Client_ID) ""
			  + ""WHERE M_PriceList_ID IS NULL AND C_Currency_ID IS NULL AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set PriceList="" + no);
		//
		sql = new StringBuffer (""UPDATE I_Invoice ""
			  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=No PriceList, ' ""
			  + ""WHERE M_PriceList_ID IS NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""No PriceList="" + no);

		//	Payment Rule
		//  We support Payment Rule being input in the login language 
		Language language = Language.getLoginLanguage();		//	Base Language
		String AD_Language = language.getAD_Language();
		sql = new StringBuffer (""UPDATE I_Invoice O "" + 
				""SET PaymentRule= "" +
			  	""(SELECT R.Value ""+
			  	""  FROM AD_Ref_List R "" + 
			  	""  left outer join AD_Ref_List_Trl RT "" + 
			  	""  on RT.AD_Ref_List_ID = R.AD_Ref_List_ID and RT.AD_Language = ? "" +
			  	""  WHERE R.AD_Reference_ID = 195 and coalesce( RT.Name, R.Name ) = O.PaymentRuleName ) "" +
			    ""WHERE PaymentRule is null AND PaymentRuleName IS NOT NULL AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), new Object[]{ AD_Language }, false, get_TrxName());
		log.fine(""Set PaymentRule="" + no);
		// do not set a default; if null, the import logic will derive from the business partner
		// do not error in absence of a default

		//	Payment Term
		sql = new StringBuffer (""UPDATE I_Invoice o ""
			  + ""SET C_PaymentTerm_ID=(SELECT C_PaymentTerm_ID FROM C_PaymentTerm p""
			  + "" WHERE o.PaymentTermValue=p.Value AND o.AD_Client_ID=p.AD_Client_ID) ""
			  + ""WHERE C_PaymentTerm_ID IS NULL AND PaymentTermValue IS NOT NULL AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set PaymentTerm="" + no);
		sql = new StringBuffer (""UPDATE I_Invoice o ""
			  + ""SET C_PaymentTerm_ID=(SELECT MAX(C_PaymentTerm_ID) FROM C_PaymentTerm p""
			  + "" WHERE p.IsDefault='Y' AND o.AD_Client_ID=p.AD_Client_ID) ""
			  + ""WHERE C_PaymentTerm_ID IS NULL AND o.PaymentTermValue IS NULL AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Default PaymentTerm="" + no);
		//
		sql = new StringBuffer (""UPDATE I_Invoice ""
			  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=No PaymentTerm, ' ""
			  + ""WHERE C_PaymentTerm_ID IS NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""No PaymentTerm="" + no);

		//	BP from EMail
		sql = new StringBuffer (""UPDATE I_Invoice o ""
			  + ""SET (C_BPartner_ID,AD_User_ID)=(SELECT C_BPartner_ID,AD_User_ID FROM AD_User u""
			  + "" WHERE o.EMail=u.EMail AND o.AD_Client_ID=u.AD_Client_ID AND u.C_BPartner_ID IS NOT NULL) ""
			  + ""WHERE C_BPartner_ID IS NULL AND EMail IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set BP from EMail="" + no);
		//	BP from ContactName
		sql = new StringBuffer (""UPDATE I_Invoice o ""
			  + ""SET (C_BPartner_ID,AD_User_ID)=(SELECT C_BPartner_ID,AD_User_ID FROM AD_User u""
			  + "" WHERE o.ContactName=u.Name AND o.AD_Client_ID=u.AD_Client_ID AND u.C_BPartner_ID IS NOT NULL) ""
			  + ""WHERE C_BPartner_ID IS NULL AND ContactName IS NOT NULL""
			  + "" AND EXISTS (SELECT Name FROM AD_User u WHERE o.ContactName=u.Name AND o.AD_Client_ID=u.AD_Client_ID AND u.C_BPartner_ID IS NOT NULL GROUP BY Name HAVING COUNT(*)=1)""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set BP from ContactName="" + no);
		//	BP from Value
		sql = new StringBuffer (""UPDATE I_Invoice o ""
			  + ""SET C_BPartner_ID=(SELECT MAX(C_BPartner_ID) FROM C_BPartner bp""
			  + "" WHERE o.BPartnerValue=bp.Value AND o.AD_Client_ID=bp.AD_Client_ID) ""
			  + ""WHERE C_BPartner_ID IS NULL AND BPartnerValue IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set BP from Value="" + no);
		//	Default BP
		sql = new StringBuffer (""UPDATE I_Invoice o ""
			  + ""SET C_BPartner_ID=(SELECT C_BPartnerCashTrx_ID FROM AD_ClientInfo c""
			  + "" WHERE o.AD_Client_ID=c.AD_Client_ID) ""
			  + ""WHERE C_BPartner_ID IS NULL AND BPartnerValue IS NULL AND Name IS NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Default BP="" + no);

		//	Existing Location ? Exact Match
		sql = new StringBuffer (""UPDATE I_Invoice o ""
			  + ""SET C_BPartner_Location_ID=(SELECT C_BPartner_Location_ID""
			  + "" FROM C_BPartner_Location bpl INNER JOIN C_Location l ON (bpl.C_Location_ID=l.C_Location_ID)""
			  + "" WHERE o.C_BPartner_ID=bpl.C_BPartner_ID AND bpl.AD_Client_ID=o.AD_Client_ID""
			  + "" AND DUMP(o.Address1)=DUMP(l.Address1) AND DUMP(o.Address2)=DUMP(l.Address2)""
			  + "" AND DUMP(o.City)=DUMP(l.City) AND DUMP(o.Postal)=DUMP(l.Postal)""
			  + "" AND DUMP(o.C_Region_ID)=DUMP(l.C_Region_ID) AND DUMP(o.C_Country_ID)=DUMP(l.C_Country_ID)) ""
			  + ""WHERE C_BPartner_ID IS NOT NULL AND C_BPartner_Location_ID IS NULL""
			  + "" AND I_IsImported='N'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Found Location="" + no);
		//	Set Location from BPartner
		sql = new StringBuffer (""UPDATE I_Invoice o ""
			  + ""SET C_BPartner_Location_ID=(SELECT MAX(C_BPartner_Location_ID) FROM C_BPartner_Location l""
			  + "" WHERE l.C_BPartner_ID=o.C_BPartner_ID AND o.AD_Client_ID=l.AD_Client_ID""
			  + "" AND ((l.IsBillTo='Y' AND o.IsSOTrx='Y') OR o.IsSOTrx='N')""
			  + "") ""
			  + ""WHERE C_BPartner_ID IS NOT NULL AND C_BPartner_Location_ID IS NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set BP Location from BP="" + no);
		//
		sql = new StringBuffer (""UPDATE I_Invoice ""
			  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=No BP Location, ' ""
			  + ""WHERE C_BPartner_ID IS NOT NULL AND C_BPartner_Location_ID IS NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""No BP Location="" + no);

		// Check for Duplicate Document Number/BP/Doc Type Combinations
		sql = new StringBuffer (""UPDATE I_Invoice i ""
				  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Duplicate Document No, ' ""
				  + ""WHERE EXISTS (SELECT 1 FROM C_Invoice inv WHERE inv.C_BPartner_ID=i.C_BPartner_ID ""
				  + "" AND inv.C_DocTypeTarget_ID = i.C_DocType_ID""
				  + "" AND inv.DocumentNo = i.DocumentNo)""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Duplicate Document Number="" + no);

		//	Set Country
		/**
		sql = new StringBuffer (""UPDATE I_Invoice o ""
			  + ""SET CountryCode=(SELECT CountryCode FROM C_Country c WHERE c.IsDefault='Y'""
			  + "" AND c.AD_Client_ID IN (0, o.AD_Client_ID) AND ROWNUM=1) ""
			  + ""WHERE C_BPartner_ID IS NULL AND CountryCode IS NULL AND C_Country_ID IS NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Country Default="" + no);
		**/
		sql = new StringBuffer (""UPDATE I_Invoice o ""
			  + ""SET C_Country_ID=(SELECT C_Country_ID FROM C_Country c""
			  + "" WHERE o.CountryCode=c.CountryCode AND c.IsSummary='N' AND c.AD_Client_ID IN (0, o.AD_Client_ID)) ""
			  + ""WHERE C_BPartner_ID IS NULL AND C_Country_ID IS NULL AND CountryCode IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Country="" + no);
		//
		sql = new StringBuffer (""UPDATE I_Invoice ""
			  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Country, ' ""
			  + ""WHERE C_BPartner_ID IS NULL AND C_Country_ID IS NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Country="" + no);

		//	Set Region
		sql = new StringBuffer (""UPDATE I_Invoice o ""
			  + ""Set RegionName=(SELECT MAX(Name) FROM C_Region r""
			  + "" WHERE r.IsDefault='Y' AND r.C_Country_ID=o.C_Country_ID""
			  + "" AND r.AD_Client_ID IN (0, o.AD_Client_ID)) ""
			  + ""WHERE C_BPartner_ID IS NULL AND C_Region_ID IS NULL AND RegionName IS NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Region Default="" + no);
		//
		sql = new StringBuffer (""UPDATE I_Invoice o ""
			  + ""Set C_Region_ID=(SELECT C_Region_ID FROM C_Region r""
			  + "" WHERE r.Name=o.RegionName AND r.C_Country_ID=o.C_Country_ID""
			  + "" AND r.AD_Client_ID IN (0, o.AD_Client_ID)) ""
			  + ""WHERE C_BPartner_ID IS NULL AND C_Region_ID IS NULL AND RegionName IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Region="" + no);
		//
		sql = new StringBuffer (""UPDATE I_Invoice o ""
			  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Region, ' ""
			  + ""WHERE C_BPartner_ID IS NULL AND C_Region_ID IS NULL ""
			  + "" AND EXISTS (SELECT * FROM C_Country c""
			  + "" WHERE c.C_Country_ID=o.C_Country_ID AND c.HasRegion='Y')""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Region="" + no);

		//	Product
		sql = new StringBuffer (""UPDATE I_Invoice o ""
			  + ""SET M_Product_ID=(SELECT MAX(M_Product_ID) FROM M_Product p""
			  + "" WHERE o.ProductValue=p.Value AND o.AD_Client_ID=p.AD_Client_ID) ""
			  + ""WHERE M_Product_ID IS NULL AND ProductValue IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Product from Value="" + no);
		sql = new StringBuffer (""UPDATE I_Invoice o ""
			  + ""SET M_Product_ID=(SELECT MAX(M_Product_ID) FROM M_Product p""
			  + "" WHERE o.UPC=p.UPC AND o.AD_Client_ID=p.AD_Client_ID) ""
			  + ""WHERE M_Product_ID IS NULL AND UPC IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Product from UPC="" + no);
		sql = new StringBuffer (""UPDATE I_Invoice o ""
			  + ""SET M_Product_ID=(SELECT MAX(M_Product_ID) FROM M_Product p""
			  + "" WHERE o.SKU=p.SKU AND o.AD_Client_ID=p.AD_Client_ID) ""
			  + ""WHERE M_Product_ID IS NULL AND SKU IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Product fom SKU="" + no);
		sql = new StringBuffer (""UPDATE I_Invoice ""
			  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Product, ' ""
			  + ""WHERE M_Product_ID IS NULL AND (ProductValue IS NOT NULL OR UPC IS NOT NULL OR SKU IS NOT NULL)""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Product="" + no);

		// Charge
		sql = new StringBuffer (""UPDATE I_Invoice i ""
				  + ""SET C_Charge_ID=(SELECT MAX(C_Charge_ID) FROM C_Charge c""
				  + "" WHERE i.ChargeName=c.Name AND i.AD_Client_ID=c.AD_Client_ID) ""
				  + ""WHERE C_Charge_ID IS NULL AND ChargeName IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			log.fine(""Set Charge from Name="" + no);

		sql = new StringBuffer (""UPDATE I_Invoice ""
				  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Charge, ' ""
				  + ""WHERE C_Charge_ID IS NULL AND (ChargeName IS NOT NULL)""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			if (no != 0)
				log.warning (""Invalid Charge="" + no);

		sql = new StringBuffer (""UPDATE I_Invoice ""
				  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Both Charge and Product are specified, ' ""
				  + ""WHERE C_Charge_ID IS NOT NULL AND M_Product_ID IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			if (no != 0)
				log.warning (""Charge and Product are specified="" + no);

		//	Tax
		sql = new StringBuffer (""UPDATE I_Invoice o ""
			  + ""SET C_Tax_ID=(SELECT MAX(C_Tax_ID) FROM C_Tax t""
			  + "" WHERE o.TaxIndicator=t.TaxIndicator AND o.AD_Client_ID=t.AD_Client_ID) ""
			  + ""WHERE C_Tax_ID IS NULL AND TaxIndicator IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Tax="" + no);
		sql = new StringBuffer (""UPDATE I_Invoice ""
			  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Tax, ' ""
			  + ""WHERE C_Tax_ID IS NULL AND TaxIndicator IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Tax="" + no);
		
		commit();
		
		//	-- New BPartner ---------------------------------------------------

		//	Go through Invoice Records w/o C_BPartner_ID
		sql = new StringBuffer (""SELECT * FROM I_Invoice ""
			  + ""WHERE I_IsImported='N' AND C_BPartner_ID IS NULL"").append (clientCheck);
		try
		{
			PreparedStatement pstmt = DB.prepareStatement (sql.toString(), get_TrxName());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				X_I_Invoice imp = new X_I_Invoice (getCtx(), rs, get_TrxName());
				if (imp.getBPartnerValue () == null)
				{
					if (imp.getEMail () != null)
						imp.setBPartnerValue (imp.getEMail ());
					else if (imp.getName () != null)
						imp.setBPartnerValue (imp.getName ());
					else
						continue;
				}
				if (imp.getName () == null)
				{
					if (imp.getContactName () != null)
						imp.setName (imp.getContactName ());
					else
						imp.setName (imp.getBPartnerValue ());
				}
				//	BPartner
				MBPartner bp = MBPartner.get (getCtx(), imp.getBPartnerValue());
				if (bp == null)
				{
					bp = new MBPartner (getCtx (), -1, get_TrxName());
					bp.setClientOrg (imp.getAD_Client_ID (), imp.getAD_Org_ID ());
					bp.setValue (imp.getBPartnerValue ());
					bp.setName (imp.getName ());
					if (!bp.save ())
						continue;
				}
				imp.setC_BPartner_ID (bp.getC_BPartner_ID ());
				
				//	BP Location
				MBPartnerLocation bpl = null; 
				MBPartnerLocation[] bpls = bp.getLocations(true);
				for (int i = 0; bpl == null && i < bpls.length; i++)
				{
					if (imp.getC_BPartner_Location_ID() == bpls[i].getC_BPartner_Location_ID())
						bpl = bpls[i];
					//	Same Location ID
					else if (imp.getC_Location_ID() == bpls[i].getC_Location_ID())
						bpl = bpls[i];
					//	Same Location Info
					else if (imp.getC_Location_ID() == 0)
					{
						MLocation loc = bpls[i].getLocation(false);
						if (loc.equals(imp.getC_Country_ID(), imp.getC_Region_ID(), 
								imp.getPostal(), """", imp.getCity(), 
								imp.getAddress1(), imp.getAddress2()))
							bpl = bpls[i];
					}
				}
				if (bpl == null)
				{
					//	New Location
					MLocation loc = new MLocation (getCtx (), 0, get_TrxName());
					loc.setAddress1 (imp.getAddress1 ());
					loc.setAddress2 (imp.getAddress2 ());
					loc.setCity (imp.getCity ());
					loc.setPostal (imp.getPostal ());
					if (imp.getC_Region_ID () != 0)
						loc.setC_Region_ID (imp.getC_Region_ID ());
					loc.setC_Country_ID (imp.getC_Country_ID ());
					if (!loc.save ())
						continue;
					//
					bpl = new MBPartnerLocation (bp);
					bpl.setC_Location_ID (imp.getC_Location_ID ());
					if (!bpl.save ())
						continue;
				}
				imp.setC_Location_ID (bpl.getC_Location_ID ());
				imp.setC_BPartner_Location_ID (bpl.getC_BPartner_Location_ID ());
				
				//	User/Contact
				if (imp.getContactName () != null 
					|| imp.getEMail () != null 
					|| imp.getPhone () != null)
				{
					MUser[] users = bp.getContacts(true);
					MUser user = null;
					for (int i = 0; user == null && i < users.length;  i++)
					{
						String name = users[i].getName();
						if (name.equals(imp.getContactName()) 
							|| name.equals(imp.getName()))
						{
							user = users[i];
							imp.setAD_User_ID (user.getAD_User_ID ());
						}
					}
					if (user == null)
					{
						user = new MUser (bp);
						if (imp.getContactName () == null)
							user.setName (imp.getName ());
						else
							user.setName (imp.getContactName ());
						user.setEMail (imp.getEMail ());
						user.setPhone (imp.getPhone ());
						if (user.save ())
							imp.setAD_User_ID (user.getAD_User_ID ());
					}
				}
				imp.save ();
			}	//	for all new BPartners
			rs.close ();
			pstmt.close ();
			//
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, ""CreateBP"", e);
		}
		sql = new StringBuffer (""UPDATE I_Invoice ""
			  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=No BPartner, ' ""
			  + ""WHERE C_BPartner_ID IS NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""No BPartner="" + no);
		
		commit();
		
		//	-- New Invoices -----------------------------------------------------

		int noInsert = 0;
		int noInsertLine = 0;

		//	Go through Invoice Records w/o
		sql = new StringBuffer (""SELECT * FROM I_Invoice ""
			  + ""WHERE I_IsImported='N'"").append (clientCheck)
			.append("" ORDER BY C_BPartner_ID, C_BPartner_Location_ID, I_Invoice_ID"");
		try
		{
			PreparedStatement pstmt = DB.prepareStatement (sql.toString(), get_TrxName());
			ResultSet rs = pstmt.executeQuery ();
			//	Group Change
			int oldC_BPartner_ID = 0;
			int oldC_BPartner_Location_ID = 0;
			String oldDocumentNo = """";
			//
			MInvoice invoice = null;
			int lineNo = 0;
			while (rs.next ())
			{
				X_I_Invoice imp = new X_I_Invoice (getCtx (), rs, null);
				String cmpDocumentNo = imp.getDocumentNo();
				if (cmpDocumentNo == null)
					cmpDocumentNo = """";
				//	New Invoice
				if (oldC_BPartner_ID != imp.getC_BPartner_ID() 
					|| oldC_BPartner_Location_ID != imp.getC_BPartner_Location_ID()
					|| !oldDocumentNo.equals(cmpDocumentNo)	)
				{
					if (invoice != null)
					{
						invoice.processIt(m_docAction);
						invoice.save();
					}
					//	Group Change
					oldC_BPartner_ID = imp.getC_BPartner_ID();
					oldC_BPartner_Location_ID = imp.getC_BPartner_Location_ID();
					oldDocumentNo = imp.getDocumentNo();
					if (oldDocumentNo == null)
						oldDocumentNo = """";
					//
					invoice = new MInvoice (getCtx(), 0, null);
					invoice.setClientOrg (imp.getAD_Client_ID(), imp.getAD_Org_ID());
					invoice.setC_DocTypeTarget_ID(imp.getC_DocType_ID(), true);
					if (imp.getDocumentNo() != null)
						invoice.setDocumentNo(imp.getDocumentNo());
					//
					invoice.setC_BPartner_ID(imp.getC_BPartner_ID());
					invoice.setC_BPartner_Location_ID(imp.getC_BPartner_Location_ID());
					if (imp.getAD_User_ID() != 0)
						invoice.setAD_User_ID(imp.getAD_User_ID());
					//
					if (imp.getDescription() != null)
						invoice.setDescription(imp.getDescription());
					if( imp.getPaymentRule() != null )
						invoice.setPaymentRule( imp.getPaymentRule() );
					invoice.setC_PaymentTerm_ID(imp.getC_PaymentTerm_ID());
					invoice.setM_PriceList_ID(imp.getM_PriceList_ID());
					
					MPriceList pl = MPriceList.get(getCtx(), imp.getM_PriceList_ID(), get_TrxName());
					invoice.setIsTaxIncluded(pl.isTaxIncluded());
					
					//	SalesRep from Import or the person running the import
					if (imp.getSalesRep_ID() != 0)
						invoice.setSalesRep_ID(imp.getSalesRep_ID());
					if (invoice.getSalesRep_ID() == 0)
						invoice.setSalesRep_ID(getAD_User_ID());
					//
					if (imp.getAD_OrgTrx_ID() != 0)
						invoice.setAD_OrgTrx_ID(imp.getAD_OrgTrx_ID());
					if (imp.getC_Activity_ID() != 0)
						invoice.setC_Activity_ID(imp.getC_Activity_ID());
					if (imp.getC_Campaign_ID() != 0)
						invoice.setC_Campaign_ID(imp.getC_Campaign_ID());
					if (imp.getC_Project_ID() != 0)
						invoice.setC_Project_ID(imp.getC_Project_ID());
					//
					if (imp.getDateInvoiced() != null)
						invoice.setDateInvoiced(imp.getDateInvoiced());
					if (imp.getDateAcct() != null)
						invoice.setDateAcct(imp.getDateAcct());
					//
					invoice.save();
					noInsert++;
					lineNo = 10;
				}
				imp.setC_Invoice_ID (invoice.getC_Invoice_ID());
				//	New InvoiceLine
				MInvoiceLine line = new MInvoiceLine (invoice);
				if (imp.getLineDescription() != null)
					line.setDescription(imp.getLineDescription());
				line.setLine(lineNo);
				lineNo += 10;
				if (imp.getM_Product_ID() != 0)
					line.setM_Product_ID(imp.getM_Product_ID(), true);
				
				if (imp.getC_Charge_ID() != 0)
					line.setC_Charge_ID(imp.getC_Charge_ID());

				line.setQty(imp.getQtyOrdered());
				line.setPrice();
				BigDecimal price = imp.getPriceActual();
				if (price != null && Env.ZERO.compareTo(price) != 0)
					line.setPrice(price);
				if (imp.getC_Tax_ID() != 0)
					line.setC_Tax_ID(imp.getC_Tax_ID());
				else
				{
					line.setTax();
					imp.setC_Tax_ID(line.getC_Tax_ID());
				}
				BigDecimal taxAmt = imp.getTaxAmt();
				if (taxAmt != null && Env.ZERO.compareTo(taxAmt) != 0)
					line.setTaxAmt(taxAmt);
				line.save();
				//
				imp.setC_InvoiceLine_ID(line.getC_InvoiceLine_ID());
				imp.setI_IsImported(X_I_Invoice.I_ISIMPORTED_Yes);
				imp.setProcessed(true);
				//
				if (imp.save())
					noInsertLine++;
			}
			if (invoice != null)
			{
				invoice.processIt (m_docAction);
				invoice.save();
			}
			rs.close();
			pstmt.close();
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""CreateInvoice"", e);
		}

		//	Set Error to indicator to not imported
		sql = new StringBuffer (""UPDATE I_Invoice ""
			+ ""SET I_IsImported='N', Updated=SysDate ""
			+ ""WHERE I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		addLog (0, null, new BigDecimal (no), ""@Errors@"");
		//
		addLog (0, null, new BigDecimal (noInsert), ""@C_Invoice_ID@: @Inserted@"");
		addLog (0, null, new BigDecimal (noInsertLine), ""@C_InvoiceLine_ID@: @Inserted@"");
		return """";
	}	//	doIt
"
org.compiere.process.DunningPrint.prepare,DunningPrint.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""EMailPDF""))
				p_EMailPDF = ""Y"".equals(element.getParameter());
			else if (name.equals(""R_MailText_ID""))
				p_R_MailText_ID = element.getParameterAsInt();
			else if (name.equals(""C_DunningRun_ID""))
				p_C_DunningRun_ID = element.getParameterAsInt();
			else if (name.equals(""IsOnlyIfBPBalance""))
				p_IsOnlyIfBPBalance = ""Y"".equals(element.getParameter());
			else if (name.equals(""ConsolidateInvoices""))
				m_consolidateInvoices = ""Y"".equals(element.getParameter());	
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.DunningPrint.doIt,DunningPrint.java,"String doIt () throws Exception
	{
		log.info(""C_DunningRun_ID="" + p_C_DunningRun_ID + "",R_MailText_ID="" + p_R_MailText_ID 
			+ "", EmailPDF="" + p_EMailPDF + "",IsOnlyIfBPBalance="" + p_IsOnlyIfBPBalance);
		
		//	Need to have Template
		if (p_EMailPDF && p_R_MailText_ID == 0)
			throw new CompiereUserException (""@NotFound@: @R_MailText_ID@"");
		MMailText mText = null;
		if (p_EMailPDF)
		{
			mText = new MMailText (getCtx(), p_R_MailText_ID, get_TrxName());
			if (p_EMailPDF && mText.get_ID() == 0)
				throw new CompiereUserException (""@NotFound@: @R_MailText_ID@ - "" + p_R_MailText_ID);
			mText.getMailHeader();
		}
		//
		File f = null;
		com.lowagie.text.Document doc=null;
		PdfContentByte cb=null;
		
		if (m_consolidateInvoices){
			f = File.createTempFile( ""U"" + getCtx().getAD_User_ID() + ""_R"", "".pdf"", new File( System.getProperty( ""java.io.tmpdir"" ) ) );
			doc=ReportEngine.createDocument();
			cb=ReportEngine.getContentByte(doc, f);			
		}
		MDunningRun run = new MDunningRun (getCtx(), p_C_DunningRun_ID, get_TrxName());
		if (run.get_ID() == 0)
			throw new CompiereUserException (""@NotFound@: @C_DunningRun_ID@ - "" + p_C_DunningRun_ID);
		//	Print Format on Dunning Level
		MDunningLevel level = new MDunningLevel (getCtx(), run.getC_DunningLevel_ID(), get_TrxName());
		MPrintFormat format = MPrintFormat.get (getCtx(), level.getDunning_PrintFormat_ID(), false);
		
		MClient client = MClient.get(getCtx());
		
		int count = 0;
		int errors = 0;
		MDunningRunEntry[] entries = run.getEntries(false);
		for (MDunningRunEntry entry : entries) {
			if (p_IsOnlyIfBPBalance && entry.getAmt().signum() <= 0)
				continue;
			//	To BPartner
			MBPartner bp = new MBPartner (getCtx(), entry.getC_BPartner_ID(), get_TrxName());
			if (bp.get_ID() == 0)
			{
				addLog (entry.get_ID(), null, null, ""@NotFound@: @C_BPartner_ID@ "" + entry.getC_BPartner_ID());
				errors++;
				continue;
			}
			//	To User
			MUser to = new MUser (getCtx(), entry.getAD_User_ID(), get_TrxName());
			if (p_EMailPDF)
			{
				if (to.get_ID() == 0)
				{
					addLog (entry.get_ID(), null, null, ""@NotFound@: @AD_User_ID@ - "" + bp.getName());
					errors++;
					continue;
				}
				else if (to.getEMail() == null || to.getEMail().length() == 0)
				{
					addLog (entry.get_ID(), null, null, ""@NotFound@: @EMail@ - "" + to.getName());
					errors++;
					continue;
				}
			}
			//	BP Language
			Language language = Language.getLoginLanguage();		//	Base Language
			String tableName = ""C_Dunning_Header_v"";
			if (client.isMultiLingualDocument())
			{
				tableName += ""t"";
				String AD_Language = bp.getAD_Language();
				if (AD_Language != null)
					language = Language.getLanguage(AD_Language);
			}
			format.setLanguage(language);
			format.setTranslationLanguage(language);
			//	query
			Query query = new Query(tableName);
			query.addRestriction(""C_DunningRunEntry_ID"", Query.EQUAL, 
				Integer.valueOf(entry.getC_DunningRunEntry_ID()));

			//	Engine
			PrintInfo info = new PrintInfo(
				bp.getName(),
				X_C_DunningRunEntry.Table_ID,
				entry.getC_DunningRunEntry_ID(),
				entry.getC_BPartner_ID());
			info.setDescription(bp.getName() + "", Amt="" + entry.getAmt());
			ReportEngine re = new ReportEngine(getCtx(), format, query, info);
			boolean printed = false;
			if (p_EMailPDF)
			{
				EMail email = client.createEMail(to.getEMail(), to.getName(), null, null);
				if (email == null || !email.isValid())
				{
					addLog (entry.get_ID(), null, null, 
						""@RequestActionEMailError@ Invalid EMail: "" + to);
					errors++;
					continue;
				}
				mText.setUser(to);	//	variable context
				mText.setBPartner(bp);
				mText.setPO(entry);
				String message = mText.getMailText(true);
				if (mText.isHtml())
					email.setMessageHTML(mText.getMailHeader(), message);
				else
				{
					email.setSubject (mText.getMailHeader());
					email.setMessageText (message);
				}
				//
				File attachment = re.getPDF(File.createTempFile(""Dunning"", "".pdf""));
				log.fine(to + "" - "" + attachment);
				email.addAttachment(attachment);
				//
				String msg = email.send();
				MUserMail um = new MUserMail(mText, entry.getAD_User_ID(), email);
				um.save();
				if (msg.equals(EMail.SENT_OK))
				{
					addLog (entry.get_ID(), null, null,
						bp.getName() + "" @RequestActionEMailOK@"");
					count++;
					printed = true;
				}
				else
				{
					addLog (entry.get_ID(), null, null,
						bp.getName() + "" @RequestActionEMailError@ "" + msg);
					errors++;
				}
			}
			else
			{
				if (m_consolidateInvoices){
					re.consolidateInvoices(doc,cb);
				}
				else{
					re.print ();
				}
				count++;
				printed = true;
			}
			if (printed)
			{
				entry.setProcessed (true);
				entry.save ();
				dunningLevelConsequences(level, entry);
			}

		}	//	for all dunning letters
		if (errors == 0) 
		{
			run.setProcessed (true);
			run.save ();
		}
			
		if (p_EMailPDF)
			return ""@Sent@="" + count + "" - @Errors@="" + errors;
		if (m_consolidateInvoices){
			doc.close();
			return f.getName();
		}
		return ""@Printed@="" + count;
	}	//	doIt
"
org.compiere.process.DunningPrint.dunningLevelConsequences,DunningPrint.java,"void dunningLevelConsequences (MDunningLevel level, MDunningRunEntry entry)
	{
		//	Update Business Partner based on Level
		if (level.isSetCreditStop() || level.isSetPaymentTerm ()) 
		{
			MBPartner thisBPartner = new MBPartner(getCtx(), entry.getC_BPartner_ID(), get_TrxName());
			if (level.isSetCreditStop ())
				thisBPartner.setSOCreditStatus (X_C_BPartner.SOCREDITSTATUS_CreditStop);
			if (level.isSetPaymentTerm() && level.getC_PaymentTerm_ID() != 0)
				thisBPartner.setC_PaymentTerm_ID (level.getC_PaymentTerm_ID ());
			thisBPartner.save ();
		}
		//	Update Invoices if not Statement (Statement is hardcoded -9999 see also MDunningLevel)
		if (!level.getDaysAfterDue ().equals (new BigDecimal(-9999)) && level.getInvoiceCollectionType() != null)
		{
			MDunningRunLine[] lines = entry.getLines();
			for (MDunningRunLine line : lines) {
				if (line.getC_Invoice_ID() != 0 && line.isActive())
				{
					MInvoice invoice = new MInvoice (getCtx(), line.getC_Invoice_ID(), get_TrxName());
					invoice.setInvoiceCollectionType (level.getInvoiceCollectionType());
					invoice.save ();
				}
			}
		}
	}	//	dunningLevelConsequences
"
org.compiere.process.TabCreateFields.prepare,TabCreateFields.java,"void prepare ()
	{
		p_AD_Tab_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.TabCreateFields.doIt,TabCreateFields.java,"String doIt () throws Exception
	{
		MTab tab = new MTab (getCtx(), p_AD_Tab_ID, get_TrxName());
		if (p_AD_Tab_ID == 0 || tab == null || tab.get_ID() == 0)
			throw new CompiereSystemException(""@NotFound@: @AD_Tab_ID@ "" + p_AD_Tab_ID);
		log.info(tab.toString());
		//
		int count = 0;
		String sql = ""SELECT * FROM AD_Column c ""
			+ ""WHERE NOT EXISTS (SELECT * FROM AD_Field f ""
				+ ""WHERE c.AD_Column_ID=f.AD_Column_ID""
				+ "" AND c.AD_Table_ID=?""	//	#1
				+ "" AND f.AD_Tab_ID=?)""		//	#2
			+ "" AND AD_Table_ID=?""			//	#3
			+ "" AND NOT (Name LIKE 'Created%' OR Name LIKE 'Updated%')""
			+ "" AND IsActive='Y' ""
			+ ""ORDER BY Name"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_TrxName());
			pstmt.setInt (1, tab.getAD_Table_ID());
			pstmt.setInt (2, tab.getAD_Tab_ID());
			pstmt.setInt (3, tab.getAD_Table_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MColumn column = new MColumn (getCtx(), rs, get_TrxName());
				//
				MField field = new MField (tab);
				field.setColumn(column);
				if (column.isKey())
					field.setIsDisplayed(false);
				if (field.save())
				{
					addLog(0, null, null, column.getName());
					count++;
				}
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return ""@Created@ #"" + count;
	}	//	doIt
"
org.compiere.process.InvoiceWriteOff.prepare,InvoiceWriteOff.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_BPartner_ID""))
				p_C_BPartner_ID = element.getParameterAsInt();
			else if (name.equals(""C_BP_Group_ID""))
				p_C_BP_Group_ID = element.getParameterAsInt();
			else if (name.equals(""C_Invoice_ID""))
				p_C_Invoice_ID = element.getParameterAsInt();
			//
			else if (name.equals(""MaxInvWriteOffAmt""))
				p_MaxInvWriteOffAmt = (BigDecimal)element.getParameter();
			else if (name.equals(""APAR""))
				p_APAR = (String)element.getParameter();
			//
			else if (name.equals(""DateInvoiced""))
			{
				p_DateInvoiced_From = (Timestamp)element.getParameter();
				p_DateInvoiced_To = (Timestamp)element.getParameter_To();
			}
			else if (name.equals(""DateAcct""))
				p_DateAcct = (Timestamp)element.getParameter();
			//
			else if (name.equals(""CreatePayment""))
				p_CreatePayment = ""Y"".equals(element.getParameter());
			else if (name.equals(""C_BankAccount_ID""))
				p_C_BankAccount_ID = element.getParameterAsInt();
			//
			else if (name.equals(""IsSimulation""))
				p_IsSimulation = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.InvoiceWriteOff.doIt,InvoiceWriteOff.java,"String doIt () throws Exception
	{
		log.info(""C_BPartner_ID="" + p_C_BPartner_ID 
			+ "", C_BP_Group_ID="" + p_C_BP_Group_ID
			+ "", C_Invoice_ID="" + p_C_Invoice_ID
			+ ""; APAR="" + p_APAR
			+ "", "" + p_DateInvoiced_From + "" - "" + p_DateInvoiced_To
			+ ""; CreatePayment="" + p_CreatePayment
			+ "", C_BankAccount_ID="" + p_C_BankAccount_ID);
		//
		if (p_C_BPartner_ID == 0 && p_C_Invoice_ID == 0 && p_C_BP_Group_ID == 0)
			throw new CompiereUserException (""@FillMandatory@ @C_Invoice_ID@ / @C_BPartner_ID@ / "");
		//
		if (p_CreatePayment && p_C_BankAccount_ID == 0)
			throw new CompiereUserException (""@FillMandatory@  @C_BankAccount_ID@"");
		//
		StringBuffer sql = new StringBuffer(
			""SELECT C_Invoice_ID,DocumentNo,DateInvoiced,""
			+ "" C_Currency_ID,GrandTotal, invoiceOpen(C_Invoice_ID, 0) AS OpenAmt ""
			+ ""FROM C_Invoice WHERE "");
		if (p_C_Invoice_ID != 0)
			sql.append(""C_Invoice_ID="").append(p_C_Invoice_ID);
		else
		{
			if (p_C_BPartner_ID != 0)
				sql.append(""C_BPartner_ID="").append(p_C_BPartner_ID);
			else
				sql.append(""EXISTS (SELECT * FROM C_BPartner bp WHERE C_Invoice.C_BPartner_ID=bp.C_BPartner_ID AND bp.C_BP_Group_ID="")
					.append(p_C_BP_Group_ID).append("")"");
			//
			if (ONLY_AR.equals(p_APAR))
				sql.append("" AND IsSOTrx='Y'"");
			else if (ONLY_AP.equals(p_APAR))
				sql.append("" AND IsSOTrx='N'"");
			//
			if (p_DateInvoiced_From != null && p_DateInvoiced_To != null)
				sql.append("" AND TRIM(DateInvoiced) BETWEEN "")
					.append(DB.TO_DATE(p_DateInvoiced_From, true))
					.append("" AND "")
					.append(DB.TO_DATE(p_DateInvoiced_To, true));
			else if (p_DateInvoiced_From != null)
				sql.append("" AND TRIM(DateInvoiced) >= "")
					.append(DB.TO_DATE(p_DateInvoiced_From, true));
			else if (p_DateInvoiced_To != null)
				sql.append("" AND TRIM(DateInvoiced) <= "")
					.append(DB.TO_DATE(p_DateInvoiced_To, true));
		}
		sql.append("" AND IsPaid='N' ORDER BY C_Currency_ID, C_BPartner_ID, DateInvoiced"");
		log.finer(sql.toString());
		//
		int counter = 0;
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql.toString(), get_TrxName());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				if (writeOff(rs.getInt(1), rs.getString(2), rs.getTimestamp(3),
					rs.getInt(4), rs.getBigDecimal(6)));
					counter++;
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		} 
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql.toString(), e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		} 
		catch (Exception e)
		{
			pstmt = null;
		}
		//	final
		processPayment();
		processAllocation();
		return ""#"" + counter;
	}	//	doIt
"
org.compiere.process.InvoiceWriteOff.writeOff,InvoiceWriteOff.java,"boolean writeOff (int C_Invoice_ID, String DocumentNo, Timestamp DateInvoiced, 
		int C_Currency_ID, BigDecimal OpenAmt)
	{
		//	Nothing to do
		if (OpenAmt == null || OpenAmt.signum() == 0)
			return false;
		if (OpenAmt.abs().compareTo(p_MaxInvWriteOffAmt) >= 0)
			return false;
		//
		if (p_IsSimulation)
		{
			addLog(C_Invoice_ID, DateInvoiced, OpenAmt, DocumentNo);
			return true;
		}
		
		//	Invoice
		MInvoice invoice = new MInvoice(getCtx(), C_Invoice_ID, get_TrxName());
		if (!invoice.isSOTrx())
			OpenAmt = OpenAmt.negate();
		
		//	Allocation
		if (m_alloc == null || C_Currency_ID != m_alloc.getC_Currency_ID())
		{
			processAllocation();
			m_alloc = new MAllocationHdr (getCtx(), true, 
				p_DateAcct, C_Currency_ID,
				getProcessInfo().getTitle() + "" #"" + getAD_PInstance_ID(), get_TrxName());
			m_alloc.setAD_Org_ID(invoice.getAD_Org_ID());
			if (!m_alloc.save())
			{
				log.log(Level.SEVERE, ""Cannot create allocation header"");
				return false;
			}
		}
		//	Payment
		if (p_CreatePayment 
			&& (m_payment == null 
				|| invoice.getC_BPartner_ID() != m_payment.getC_BPartner_ID()
				|| C_Currency_ID != m_payment.getC_Currency_ID()))
		{
			processPayment();
			m_payment = new MPayment(getCtx(), 0, get_TrxName());
			m_payment.setAD_Org_ID(invoice.getAD_Org_ID());
			m_payment.setC_BankAccount_ID(p_C_BankAccount_ID);
			m_payment.setTenderType(X_C_Payment.TENDERTYPE_Check);
			m_payment.setDateTrx(p_DateAcct);
			m_payment.setDateAcct(p_DateAcct);
			m_payment.setDescription(getProcessInfo().getTitle() + "" #"" + getAD_PInstance_ID());
			m_payment.setC_BPartner_ID(invoice.getC_BPartner_ID());
			m_payment.setIsReceipt(true);	//	payments are negative
			m_payment.setC_Currency_ID(C_Currency_ID);
			if (!m_payment.save())
			{
				log.log(Level.SEVERE, ""Cannot create payment"");
				return false;
			}
		}

		//	Line
		MAllocationLine aLine = null;
		if (p_CreatePayment)
		{
			aLine = new MAllocationLine (m_alloc, OpenAmt,
				Env.ZERO, Env.ZERO, Env.ZERO);
			m_payment.setPayAmt(m_payment.getPayAmt().add(OpenAmt));
			aLine.setC_Payment_ID(m_payment.getC_Payment_ID());
			aLine.setAD_Org_ID(m_payment.getAD_Org_ID());

		}
		else
		{
			aLine = new MAllocationLine (m_alloc, Env.ZERO, 
				Env.ZERO, OpenAmt, Env.ZERO);
			aLine.setAD_Org_ID(invoice.getAD_Org_ID());
		}
		aLine.setC_Invoice_ID(C_Invoice_ID);
		if (aLine.save())
		{
			addLog(C_Invoice_ID, DateInvoiced, OpenAmt, DocumentNo);
			return true;
		}
		//	Error
		log.log(Level.SEVERE, ""Cannot create allocation line for C_Invoice_ID="" + C_Invoice_ID);
		return false;
	}	//	writeOff
"
org.compiere.process.InvoiceWriteOff.processAllocation,InvoiceWriteOff.java,"boolean processAllocation()
	{
		if (m_alloc == null)
			return true;
		processPayment();
		//	Process It
		if (m_alloc.processIt(DocActionConstants.ACTION_Complete) &&  m_alloc.save())
		{
			m_alloc = null;
			return true;
		}
		//
		m_alloc = null;
		return false;
	}	//	processAllocation
"
org.compiere.process.InvoiceWriteOff.processPayment,InvoiceWriteOff.java,"boolean processPayment()
	{
		if (m_payment == null)
			return true;
		//	Process It
		if (m_payment.processIt(DocActionConstants.ACTION_Complete) &&  m_payment.save())
		{
			m_payment = null;
			return true;
		}
		//
		m_payment = null;
		return false;
	}	//	processPayment
"
org.compiere.process.SchedulerRun.prepare,SchedulerRun.java,"void prepare()
	{
		p_AD_Scheduler_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.SchedulerRun.doIt,SchedulerRun.java,"String doIt()	throws Exception
	{
		log.info (""AD_Scheduler_ID="" + p_AD_Scheduler_ID);
		MScheduler scheduler = new MScheduler(getCtx(), p_AD_Scheduler_ID, get_TrxName());
		return scheduler.execute (get_Trx());
	}	//	doIt
"
org.compiere.process.EntityTypeRegister.prepare,EntityTypeRegister.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""FileName""))
				p_FileName = (String)element.getParameter();
			else if (name.equals(""SuggestedPrice""))
				p_SuggestedPrice = (BigDecimal)element.getParameter();
		}
		p_AD_EntityType_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.EntityTypeRegister.doIt,EntityTypeRegister.java,"String doIt() throws Exception
	{
		log.info(""AD_EntityType_ID="" + p_AD_EntityType_ID
			+ "", FileName="" + p_FileName);
		MEntityType et = MEntityType.getEntityType(getCtx(), p_AD_EntityType_ID);
		if (et.isSystemMaintained())
			throw new CompiereUserException(""You cannot register a System maintained entity"");

		String EntityType = et.getEntityType();

		if (EntityType.toUpperCase().startsWith(""C"") || EntityType.toUpperCase().startsWith(""X""))
			throw new CompiereUserException(""Entity Types starting with C or X are reserved."");

		boolean ok = sendRegistration(et);
		if (!ok)
			throw new CompiereSystemException(""Could not contact Compiere - Try later"");
		
		String response = getResponse();
		if (response == null)
			throw new CompiereSystemException(""No Response - Try later"");
		
		String info = et.processRegistrationResponse(response);
		et.save();

		if (Util.isEmpty(p_FileName) || et.getRecord_ID() == 0)
			return info;

		info += "" - "" + uploadFile(et);

		return info;
	}	//	doIt
"
org.compiere.process.EntityTypeRegister.uploadFile,EntityTypeRegister.java,"String uploadFile(MEntityType et)
	{
		File file = new File(p_FileName);
		if (!file.exists())
			return ""File not exist: ""  + p_FileName;
		
		if (file.length() <= 0)
			return ""Empty file: "" + p_FileName;
		
		PostMethod filePost = new PostMethod(URLSTRING);
		filePost.getParams().setBooleanParameter(HttpMethodParams.USE_EXPECT_CONTINUE, true);
		try 
		{
			MSystem system = MSystem.get(getCtx());
			
			Part[] parts = {
					new StringPart(""USER"", system.getUserName(), ENC),
					new StringPart(""EntityType"", et.getEntityType(), ENC),
					new StringPart(""RecordID"", String.valueOf(et.getRecord_ID()), ENC),
					new FilePart(file.getName(), file)
			};
			
			filePost.setRequestEntity(
					new MultipartRequestEntity(parts, filePost.getParams())
			);
			HttpClient client = new HttpClient();
			client.getHttpConnectionManager().
			getParams().setConnectionTimeout(5000);
			int status = client.executeMethod(filePost);
			if (status == HttpStatus.SC_OK) 
			{
				return ""Upload complete, response="" + filePost.getResponseBodyAsString();
			} 
			else 
			{
				return ""Upload failed, response="" + HttpStatus.getStatusText(status);
			}
		} 
		catch (Exception ex) 
		{
			log.log(Level.SEVERE, ""ERROR: "" + ex.getClass().getName(), ex);
		} 
		finally 
		{
			filePost.releaseConnection();
		}
		
		return ""Upload complete"";
	}  // uploadFile()
"
org.compiere.process.EntityTypeRegister.sendRegistration,EntityTypeRegister.java,"boolean sendRegistration(MEntityType et)
	{
		URL url = null;
		//	Assemble request
		try
		{
			String tRelease = Compiere.MAIN_VERSION.substring(8);
			String tVersion = Compiere.DATE_VERSION;
			String from = InetAddress.getLocalHost().toString();

			StringBuffer urlString = new StringBuffer (URLSTRING);

			//	Sender
			MSystem system = MSystem.get(getCtx());
			urlString.append(""?NAME="").append(URLEncoder.encode(system.getName(), ENC))
				.append(""&USER="").append(URLEncoder.encode(system.getUserName(), ENC))
				.append(""&PASSWORD="").append(URLEncoder.encode(system.getPassword(), ENC))
				.append(""&FROM="").append(URLEncoder.encode(from, ENC));
			//
			urlString.append(""&TRELEASENO="").append(URLEncoder.encode(tRelease, ENC))
				.append(""&TVERSION="").append(URLEncoder.encode(tVersion, ENC));
			//
			urlString.append(""&EntityType="").append(URLEncoder.encode(et.getEntityType(), ENC))
				.append(""&ETName="").append(URLEncoder.encode(et.getName(), ENC));
			if (et.getRecord_ID() != 0)
				urlString.append(""&RecordID="").append(et.getRecord_ID());
			//	
			if (et.getDescription() != null)
				urlString.append(""&Description="").append(URLEncoder.encode(et.getDescription(), ENC));
			if (et.getHelp() != null)
				urlString.append(""&Help="").append(URLEncoder.encode(et.getHelp(), ENC));
			if (et.getVersion() != null)
				urlString.append(""&Version="").append(URLEncoder.encode(et.getVersion(), ENC));
			if (et.getRequireCompiereVersion() != null)
				urlString.append(""&RequireCompiereVersion="").append(URLEncoder.encode(et.getRequireCompiereVersion(), ENC));
			if (et.getRequireComponentVersion() != null)
				urlString.append(""&RequireComponentVersion="").append(URLEncoder.encode(et.getRequireComponentVersion(), ENC));
			if (et.getDocumentationText() != null)
				urlString.append(""&DocumentationText="").append(URLEncoder.encode(et.getDocumentationText(), ENC));
			if (p_SuggestedPrice != null)
				urlString.append(""&SuggestedPrice="").append(p_SuggestedPrice);
			//
			url = new URL (urlString.toString());
			log.config(url.toString());
		}
		catch (Exception e)
		{
			if (log != null)
				log.log(Level.SEVERE, ""--"", e);
			return false;
		}
		//	Send it
		try
		{
			URLConnection uc = url.openConnection();
			m_in = new InputStreamReader(uc.getInputStream());
		}
		catch (FileNotFoundException ex)
		{
			log.log(Level.WARNING, "" Could not connect - Try later"");
			return false;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""->"", e);
			return false;
		}
		return true;
	}	//	sendRegistration
"
org.compiere.process.EntityTypeRegister.getResponse,EntityTypeRegister.java,"String getResponse()
	{
		if (m_in == null)
			return null;
		//
		StringBuffer sb = new StringBuffer();
		try		//	Get Summary
		{
			int c;
			while ((c = m_in.read()) != -1)
				sb.append((char)c);
			m_in.close();

			if (log != null)
				log.fine(""("" + sb.length() + "") "" + sb);
		}
		catch (Exception ex)
		{
			log.log(Level.WARNING, ""<-"", ex);
			return null;
		}
		log.config(sb.toString());
		return sb.toString();
	}	//	getResponse
"
org.compiere.process.TabCopy.prepare,TabCopy.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_Tab_ID""))
				p_AD_TabFrom_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_AD_TabTo_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.TabCopy.doIt,TabCopy.java,"String doIt() throws Exception
	{
		log.info(""To AD_Tab_ID="" + p_AD_TabTo_ID + "", From="" + p_AD_TabFrom_ID);
		MTab from = new MTab (getCtx(), p_AD_TabFrom_ID, get_TrxName());
		if (from.get_ID() == 0)
			throw new CompiereUserException(""@NotFound@ (from->) @AD_Tab_ID@"");
		MTab to = new MTab (getCtx(), p_AD_TabTo_ID, get_TrxName());
		if (to.get_ID() == 0)
			throw new CompiereUserException(""@NotFound@ (to<-) @AD_Tab_ID@"");
		if (from.getAD_Table_ID() != to.getAD_Table_ID())
			throw new CompiereUserException(""@Error@ @AD_Table_ID@"");
		
		int count = 0;
		MField[] oldFields = from.getFields(false, get_TrxName());
		for (MField oldField : oldFields) {
			MField newField = new MField (to, oldField);
			if (newField.save())
				count++;
			else
				throw new CompiereUserException(""@Error@ @AD_Field_ID@"");
		}
		
		return ""@Copied@ #"" + count;
	}	//	doIt
"
org.compiere.process.DataMigrationCreate.prepare,DataMigrationCreate.java,"void prepare() 
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_DataMigration_ID""))
				p_AD_DataMigration_ID = element.getParameterAsInt();
			else if (name.equals(""FileName""))
				p_FileName = (String)element.getParameter();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.DataMigrationCreate.doIt,DataMigrationCreate.java,"String doIt() throws Exception 
	{
		log.info(""AD_DataMigration_ID="" + p_AD_DataMigration_ID);
		if (p_AD_DataMigration_ID == 0)
			throw new CompiereSystemException(""No AD_DataMigration_ID"");
		MDataMigration dm = new MDataMigration(getCtx(), p_AD_DataMigration_ID, get_TrxName());
		if (dm.get_ID() != p_AD_DataMigration_ID)
			throw new CompiereSystemException(""@NotFound@ @AD_DataMigration_ID@ ID="" + p_AD_DataMigration_ID);

		if (p_FileName == null)
		{	//	yyyy-mm-dd hh:mm:ss.fffffffff
			Timestamp now = new Timestamp(System.currentTimeMillis());
			p_FileName = dm.getName() + ""_"" + now.toString().substring(0,10);
			p_FileName = Util.remove(p_FileName, "" "", false);
		}
		String targetDir = Ini.getCompiereHome() + File.separator + ""data"";
		log.config(targetDir + "" "" + p_FileName);

		//	Call
		Class<?>[] parameterTypes = new Class[]{MDataMigration.class, String.class, String.class};
		Object[] args = new Object[]{dm, targetDir, p_FileName};
		Object info = null;
		try
		{
			Class<?> clazz = Class.forName(""com.compiere.client.StartComponent"");
			Object instance = clazz.newInstance();
			Method method = clazz.getMethod (""createDataMigration"", parameterTypes);
			info = method.invoke (instance, args);
		}
		catch (Exception e)
		{
			throw new CompiereSystemException(e.toString());
		}
		
		if (info != null)
			return info.toString();
		throw new CompiereSystemException(""Please check Log"");
	}	//	doIt
"
org.compiere.process.CostUpdate.prepare,CostUpdate.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
		//	log.fine(""prepare - "" + para[i]);
			if (element.getParameter() == null)
				;
			else if (name.equals(""M_Product_Category_ID""))
				p_M_Product_Category_ID = element.getParameterAsInt();
			else if (name.equals(""SetFutureCostTo""))
				p_SetFutureCostTo = (String)element.getParameter();
			else if (name.equals(""SetStandardCostTo""))
				p_SetStandardCostTo = (String)element.getParameter();
			else if (name.equals(""M_PriceList_Version_ID""))
				p_M_PriceList_Version_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);		
		}

	}	//	prepare	
"
org.compiere.process.CostUpdate.doIt,CostUpdate.java,"String doIt() throws Exception
	{
		boolean success = false;
		log.info(""M_Product_Category_ID="" + p_M_Product_Category_ID
			+ "", Future="" + p_SetFutureCostTo
			+ "", Standard="" + p_SetStandardCostTo
			+ ""; M_PriceList_Version_ID="" + p_M_PriceList_Version_ID);
		if (p_SetFutureCostTo == null)
			p_SetFutureCostTo = """";
		if (p_SetStandardCostTo == null)
			p_SetStandardCostTo = """";
		//	Nothing to Do
		if (p_SetFutureCostTo.length() == 0 && p_SetStandardCostTo.length() == 0)
		{
			return ""-"";
		}
		//	PLV required
		if (p_M_PriceList_Version_ID == 0
			&& (p_SetFutureCostTo.equals(TO_PriceListLimit) || p_SetStandardCostTo.equals(TO_PriceListLimit)))
			throw new CompiereUserException (""@FillMandatory@  @M_PriceList_Version_ID@"");
		
		//	Validate Source
		if (!isValid(p_SetFutureCostTo))
			throw new CompiereUserException (""@NotFound@ @M_CostElement_ID@ (Future) "" + p_SetFutureCostTo);
		if (!isValid(p_SetStandardCostTo))
			throw new CompiereUserException (""@NotFound@ @M_CostElement_ID@ (Standard) "" + p_SetStandardCostTo);
		
		// Check for unprocessed Cost Update transactions. If one exists, then error out
		if (!isUnprocessedExist())
			throw new CompiereUserException ("" Unprocessed/unposted Cost Update transaction exists. Please process them first"");

		//	Prepare
		MClient client = MClient.get(getCtx());
		m_ce = MCostElement.getMaterialCostElement(client, X_C_AcctSchema.COSTINGMETHOD_StandardCosting);
		if (m_ce.get_ID() == 0)
			throw new CompiereUserException (""@NotFound@ @M_CostElement_ID@ (StdCost)"");
		log.config(m_ce.toString());
		m_ass = MAcctSchema.getClientAcctSchema(getCtx(), client.getAD_Client_ID());
		for (MAcctSchema element : m_ass)
			createNew(element);
		commit();
		
	
		//	Update Cost
		int counter = update();
		
		// Create Document 
		if (counter !=0)
		{
			success = createDoc();
		}
				
		// Commit or Roll back the changes.
		if (success)
				get_Trx().commit();
		else {
				get_Trx().rollback();
				throw new CompiereUserException(""Error in updating standard cost"");
		}
		
		log.info(""#"" + counter);
		addLog(0, null, new BigDecimal(counter), ""@Updated@"");

		return ""#"" + counter;
	}	//	doIt
"
org.compiere.process.CostUpdate.isValid,CostUpdate.java,"boolean isValid(String to)
	{
		if (p_SetFutureCostTo.length() == 0)
			return true;
		
		if (to.equals(TO_AverageInvoiceHistory))
			to = TO_AverageInvoice;
		if (to.equals(TO_AveragePOHistory))
			to = TO_AveragePO;
		if (to.equals(TO_FutureStandardCost))
			to = TO_StandardCost;
		//
		if (to.equals(TO_AverageInvoice)
			|| to.equals(TO_AveragePO)
			|| to.equals(TO_FiFo)
			|| to.equals(TO_LiFo)
			|| to.equals(TO_StandardCost))
		{
			MCostElement ce = getCostElement(p_SetFutureCostTo);
			return ce != null;
		}
		return true;
	}	//	isValid
"
org.compiere.process.CostUpdate.createNew,CostUpdate.java,"void createNew (MAcctSchema as)
	{
		if (!as.getCostingLevel().equals(X_C_AcctSchema.COSTINGLEVEL_Tenant))
		{
			String txt = ""Costing Level prevents creating new Costing records for "" + as.getName();
			log.warning(txt);
			addLog(0, null, null, txt);
			return;
		}
		
		String sql = ""SELECT * FROM M_Product p ""
			+ ""WHERE NOT EXISTS (SELECT * FROM M_Cost c WHERE c.M_Product_ID=p.M_Product_ID""
			+ "" AND c.M_CostType_ID=? AND c.C_AcctSchema_ID=? AND c.M_CostElement_ID=?""
			+ "" AND c.M_AttributeSetInstance_ID=0) ""
			+ ""AND AD_Client_ID=?"";
		if (p_M_Product_Category_ID != 0)
			sql += "" AND M_Product_Category_ID=?""; 
		int counter = 0;
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, as.getM_CostType_ID());
			pstmt.setInt (2, as.getC_AcctSchema_ID());
			pstmt.setInt (3, m_ce.getM_CostElement_ID());
			pstmt.setInt (4, as.getAD_Client_ID());
			if (p_M_Product_Category_ID != 0)
				pstmt.setInt (5, p_M_Product_Category_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				if (createNew (new MProduct (getCtx(), rs, null), as))
					counter++;
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		log.info(""#"" + counter);
		addLog(0, null, new BigDecimal(counter), ""Created for "" + as.getName());
	}	//	createNew
"
org.compiere.process.CostUpdate.createNew,CostUpdate.java,"boolean createNew (MProduct product, MAcctSchema as)
	{
		MCost cost = MCost.get(product, 0, as, 0, m_ce.getM_CostElement_ID());
		if (cost.is_new())
			return cost.save();
		return false;
	}	//	createNew
"
org.compiere.process.CostUpdate.update,CostUpdate.java,"int update()
	{
		int counter = 0;
		String sql = ""SELECT * FROM M_Cost c WHERE M_CostElement_ID=?"" 
			       + "" AND AD_Client_ID = ?"";
		if (p_M_Product_Category_ID != 0)
			sql += "" AND EXISTS (SELECT * FROM M_Product p ""
				+ "" WHERE c.M_Product_ID=p.M_Product_ID AND p.M_Product_Category_ID=? AND p.AD_Client_ID = c.AD_Client_ID)"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, m_ce.getM_CostElement_ID());
			pstmt.setInt (2, getAD_Client_ID());
			if (p_M_Product_Category_ID != 0)
				pstmt.setInt (3, p_M_Product_Category_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MCost cost = new MCost (getCtx(), rs, get_TrxName());
				for (MAcctSchema element : m_ass) {
					//	Update Costs only for default Cost Type
					if (element.getC_AcctSchema_ID() == cost.getC_AcctSchema_ID() 
						&& element.getM_CostType_ID() == cost.getM_CostType_ID())
					{
						if (update (cost))
							counter++;
						else
							return 0;
						
					}
				}
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return counter;
	}	//	update
"
org.compiere.process.CostUpdate.update,CostUpdate.java,"boolean update (MCost cost) throws Exception
	{
		boolean updated = false;
		
		// update Last cost price
		BigDecimal lastCostPrice = cost.getCurrentCostPrice();
		cost.setLastCostPrice(lastCostPrice);
				
		// get current standard cost
		if (p_SetFutureCostTo.equals(p_SetStandardCostTo))
		{
			BigDecimal costs = getCosts(cost, p_SetFutureCostTo);
			if (costs != null)
			{
				cost.setFutureCostPrice(costs);
				cost.setCurrentCostPrice(costs);
				updated = true;
			}
		}
		else
		{
			if (p_SetStandardCostTo.length() > 0)
			{
				BigDecimal costs = getCosts(cost, p_SetStandardCostTo);
				if (costs != null)
				{   cost.setCurrentCostPrice(costs);
					updated = true;
				}
			}
			if (p_SetFutureCostTo.length() > 0)
			{
				BigDecimal costs = getCosts(cost, p_SetFutureCostTo);
				if (costs != null)
				{
					cost.setFutureCostPrice(costs);
					updated = true;
				}
			}
		}
		if (updated)
			updated = cost.save(get_TrxName());
			
		return updated;
	}	//	update
"
org.compiere.process.CostUpdate.getCosts,CostUpdate.java,"BigDecimal getCosts (MCost cost, String to) throws Exception
	{
		BigDecimal retValue = Env.ZERO;
		
		//	Average Invoice
		if (to.equals(TO_AverageInvoice))
		{
			MCostElement ce = getCostElement(TO_AverageInvoice);
			if (ce == null)
				throw new CompiereSystemException(""CostElement not found: "" + TO_AverageInvoice);
			MCost xCost = MCost.get(getCtx(), cost.getAD_Client_ID(), cost.getAD_Org_ID(), cost.getM_Product_ID(), cost.getM_CostType_ID(), cost.getC_AcctSchema_ID(), ce.getM_CostElement_ID(), cost.getM_AttributeSetInstance_ID());
			if (xCost != null)
				retValue = xCost.getCurrentCostPrice();
		}
		//	Average Invoice History
		else if (to.equals(TO_AverageInvoiceHistory))
		{
			MCostElement ce = getCostElement(TO_AverageInvoice);
			if (ce == null)
				throw new CompiereSystemException(""CostElement not found: "" + TO_AverageInvoice);
			MCost xCost = MCost.get(getCtx(), cost.getAD_Client_ID(), cost.getAD_Org_ID(), cost.getM_Product_ID(), cost.getM_CostType_ID(), cost.getC_AcctSchema_ID(), ce.getM_CostElement_ID(), cost.getM_AttributeSetInstance_ID());
			if (xCost != null) 
				retValue = xCost.getHistoryAverage();
		}
		
		//	Average PO
		else if (to.equals(TO_AveragePO))
		{
			MCostElement ce = getCostElement(TO_AveragePO);
			if (ce == null)
				throw new CompiereSystemException(""CostElement not found: "" + TO_AveragePO);
			MCost xCost = MCost.get(getCtx(), cost.getAD_Client_ID(), cost.getAD_Org_ID(), cost.getM_Product_ID(), cost.getM_CostType_ID(), cost.getC_AcctSchema_ID(), ce.getM_CostElement_ID(), cost.getM_AttributeSetInstance_ID());
			if (xCost != null)
				retValue = xCost.getCurrentCostPrice();
		}
		//	Average PO History
		else if (to.equals(TO_AveragePOHistory))
		{
			MCostElement ce = getCostElement(TO_AveragePO);
			if (ce == null)
				throw new CompiereSystemException(""CostElement not found: "" + TO_AveragePO);
			MCost xCost = MCost.get(getCtx(), cost.getAD_Client_ID(), cost.getAD_Org_ID(), cost.getM_Product_ID(), cost.getM_CostType_ID(), cost.getC_AcctSchema_ID(), ce.getM_CostElement_ID(), cost.getM_AttributeSetInstance_ID());
			if (xCost != null) 
				retValue = xCost.getHistoryAverage();
		}
		
		//	FiFo
		else if (to.equals(TO_FiFo))
		{
			MCostElement ce = getCostElement(TO_FiFo);
			if (ce == null)
				throw new CompiereSystemException(""CostElement not found: "" + TO_FiFo);
			MCost xCost = MCost.get(getCtx(), cost.getAD_Client_ID(), cost.getAD_Org_ID(), cost.getM_Product_ID(), cost.getM_CostType_ID(), cost.getC_AcctSchema_ID(), ce.getM_CostElement_ID(), cost.getM_AttributeSetInstance_ID());
			if (xCost != null)
				retValue = xCost.getCurrentCostPrice();
		}

		//	Future Std Costs
		else if (to.equals(TO_FutureStandardCost))
			retValue = cost.getFutureCostPrice();
		
		//	Last Inv Price
		else if (to.equals(TO_LastInvoicePrice))
		{
			MCostElement ce = getCostElement(TO_LastInvoicePrice);
			if (ce != null)
			{
				MCost xCost = MCost.get(getCtx(), cost.getAD_Client_ID(), cost.getAD_Org_ID(), cost.getM_Product_ID(), cost.getM_CostType_ID(), cost.getC_AcctSchema_ID(), ce.getM_CostElement_ID(), cost.getM_AttributeSetInstance_ID());
				if (xCost != null)
					retValue = xCost.getCurrentCostPrice();
			}
			if (retValue == null)
			{
				MProduct product = MProduct.get(getCtx(), cost.getM_Product_ID());
				MAcctSchema as = MAcctSchema.get(getCtx(), cost.getC_AcctSchema_ID());
				retValue = MCost.getLastInvoicePrice(product, 
					cost.getM_AttributeSetInstance_ID(), cost.getAD_Org_ID(), as.getC_Currency_ID());				
			}
		}
		
		//	Last PO Price
		else if (to.equals(TO_LastPOPrice))
		{
			MCostElement ce = getCostElement(TO_LastPOPrice);
			if (ce != null)
			{
				MCost xCost = MCost.get(getCtx(), cost.getAD_Client_ID(), cost.getAD_Org_ID(), cost.getM_Product_ID(), cost.getM_CostType_ID(), cost.getC_AcctSchema_ID(), ce.getM_CostElement_ID(), cost.getM_AttributeSetInstance_ID());
				if (xCost != null)
					retValue = xCost.getCurrentCostPrice();
			}
			if (retValue == null)
			{
				MProduct product = MProduct.get(getCtx(), cost.getM_Product_ID());
				MAcctSchema as = MAcctSchema.get(getCtx(), cost.getC_AcctSchema_ID());
				retValue = MCost.getLastPOPrice(product, 
					cost.getM_AttributeSetInstance_ID(), cost.getAD_Org_ID(), as.getC_Currency_ID());				
			}
		}
	
		//	FiFo
		else if (to.equals(TO_LiFo))
		{
			MCostElement ce = getCostElement(TO_LiFo);
			if (ce == null)
				throw new CompiereSystemException(""CostElement not found: "" + TO_LiFo);
			MCost xCost = MCost.get(getCtx(), cost.getAD_Client_ID(), cost.getAD_Org_ID(), cost.getM_Product_ID(), cost.getM_CostType_ID(), cost.getC_AcctSchema_ID(), ce.getM_CostElement_ID(), cost.getM_AttributeSetInstance_ID());
			if (xCost != null)
				retValue = xCost.getCurrentCostPrice();
		}
		
		//	Old Std Costs
		else if (to.equals(TO_OldStandardCost))
			retValue = getOldCurrentCostPrice(cost);
		
		//	Price List
		else if (to.equals(TO_PriceListLimit))
			retValue = getPrice(cost);
		
		//	Standard Costs
		else if (to.equals(TO_StandardCost))
			retValue = cost.getCurrentCostPrice();
		
		if(retValue == null)
			retValue = Env.ZERO;
		
		return retValue;
	}	//	getCosts
"
org.compiere.process.CostUpdate.getCostElement,CostUpdate.java,"MCostElement getCostElement (String CostingMethod)
	{
		MCostElement ce = m_ces.get(CostingMethod);
		if (ce == null)
		{
			ce = MCostElement.getMaterialCostElement(getCtx(), CostingMethod);
			m_ces.put(CostingMethod, ce);
		}
		return ce;
	}	//	getCostElement
"
org.compiere.process.CostUpdate.getOldCurrentCostPrice,CostUpdate.java,"BigDecimal getOldCurrentCostPrice(MCost cost)
	{
		BigDecimal retValue = null;
		String sql = ""SELECT CostStandard, CurrentCostPrice ""
			+ ""FROM M_Product_Costing ""
			+ ""WHERE M_Product_ID=? AND C_AcctSchema_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, cost.getM_Product_ID());
			pstmt.setInt (2, cost.getC_AcctSchema_ID());
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
			{
				retValue = rs.getBigDecimal(1);
				if (retValue == null || retValue.signum() == 0)
					retValue = rs.getBigDecimal(2);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return retValue;
	}	//	getOldCurrentCostPrice
"
org.compiere.process.CostUpdate.getPrice,CostUpdate.java,"BigDecimal getPrice (MCost cost)
	{
		BigDecimal retValue = null;
		String sql = ""SELECT PriceLimit ""
			+ ""FROM M_ProductPrice ""
			+ ""WHERE M_Product_ID=? AND M_PriceList_Version_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, cost.getM_Product_ID());
			pstmt.setInt (2, p_M_PriceList_Version_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
			{
				retValue = rs.getBigDecimal(1);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return retValue;
	}	//	getPrice
"
org.compiere.process.CostUpdate.createDoc,CostUpdate.java,"boolean createDoc(){

		// Create Header for Cost Update Doc.
		MCostUpdate CostUpdate = new MCostUpdate(getCtx(),0,get_TrxName());
		CostUpdate.setM_Product_Category_ID(p_M_Product_Category_ID);
		CostUpdate.setDateAcct(CostUpdate.getCreated());
		CostUpdate.save(get_TrxName());
		
		// Create Lines for Cost Update Doc
		String sql = ""SELECT M_Product_ID FROM M_Product p ""
			       + "" WHERE p.AD_Client_ID = ? ""
			       + "" AND EXISTS (SELECT 1 FROM M_Cost c WHERE c.M_Product_ID = p.M_Product_ID""
			                     + "" AND c.AD_Client_ID = p.AD_Client_ID""
			                     + "" AND c.M_CostElement_ID = ?)"";
		if (p_M_Product_Category_ID !=0)
			sql += "" AND M_Product_Category_ID=?"";

		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, getAD_Client_ID());
			pstmt.setInt (2, m_ce.getM_CostElement_ID());
			
			if (p_M_Product_Category_ID != 0)
				pstmt.setInt (3, p_M_Product_Category_ID);
			
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next())
			{
			    int M_Product_ID = rs.getInt(1);
				MProduct p = MProduct.get(getCtx(), M_Product_ID);
				MCostUpdateLine l = new MCostUpdateLine(getCtx(),CostUpdate,get_TrxName());
				l.setM_Product_ID(M_Product_ID);
				l.setC_UOM_ID(p.getC_UOM_ID());
				l.setProcessed(true);
				l.save(get_TrxName());
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
			return false;
		}
		return true;	
	}
"
org.compiere.process.CostUpdate.isUnprocessedExist,CostUpdate.java,"boolean isUnprocessedExist()
	{
		boolean retVal = true;
		String sql = "" SELECT count(*) FROM M_CostUpdate""
			       + "" WHERE (processed <> 'Y' OR posted <> 'Y')""
			       + "" AND AD_Client_ID = ? "";
		if (p_M_Product_Category_ID !=0)
			sql += "" AND (M_Product_Category_ID = ? OR M_Product_Category_ID IS NULL)"";

		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, getAD_Client_ID());
			if (p_M_Product_Category_ID != 0)
				pstmt.setInt (2, p_M_Product_Category_ID);
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next())
			    retVal= (rs.getInt(1)==0);

			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
			return false;
		}
		return retVal;
	}
"
org.compiere.process.TranslationMgr.setExportScope,TranslationMgr.java,"void setExportScope(String exportScope, int AD_Client_ID)
    {
    	m_ExportScope = exportScope;
    	m_AD_Client_ID = AD_Client_ID;
    }	//	setExportScope
"
org.compiere.process.TranslationMgr.getAD_Client_ID,TranslationMgr.java,"int getAD_Client_ID()
    {
    	return m_AD_Client_ID;
    }	//	getAD_Client_ID
"
org.compiere.process.TranslationMgr.setAD_Language,TranslationMgr.java,"void setAD_Language(String language)
    {
    	m_AD_Language = language;
    }	//	setLanguage
"
org.compiere.process.TranslationMgr.getAD_Language,TranslationMgr.java,"String getAD_Language()
    {
    	return m_AD_Language;
    }	//	getAD_Language
"
org.compiere.process.TranslationMgr.importTrl,TranslationMgr.java,"String importTrl (String directory, String Trl_Table)
	{
		String fileName = directory + File.separator + Trl_Table + ""_"" + m_AD_Language + "".xml"";
		log.config(fileName);
		File in = new File (fileName);
		if (!in.exists())
		{
			String msg = ""File does not exist: "" + fileName;
			log.log(Level.WARNING, msg);
			return msg;
		}

		int words = m_wordCount;
		try
		{
			TranslationHandler handler = new TranslationHandler(m_AD_Client_ID);
			SAXParserFactory factory = SAXParserFactory.newInstance();
		//	factory.setValidating(true);
			SAXParser parser = factory.newSAXParser();
			parser.parse(in, handler);
			//
			m_wordCount += handler.getWordCount();
			log.config(""Updated="" + handler.getUpdateCount() + "", Words="" + (m_wordCount-words));
			return Msg.getMsg(m_ctx, ""Updated"") + ""="" + handler.getUpdateCount();
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""importTrl"", e);
			return e.toString();
		}
	}	//	importTrl
"
org.compiere.process.TranslationMgr.exportTrl,TranslationMgr.java,"String exportTrl (String directory, String trlTableName,
		String translationLevel)
	{
		if (translationLevel == null)
			translationLevel = TranslationImportExport.TranslationLevel_All;

		String fileName = directory + File.separator + trlTableName + ""_"" + m_AD_Language + "".xml"";
		log.config(fileName);
		File out = new File(fileName);

		String info = ""-"";
		int words = m_wordCount;
		boolean isBaseLanguage = Language.isBaseLanguage(m_AD_Language);
		String tableName = trlTableName;
		int pos = tableName.indexOf(""_Trl"");
		String baseTableName = trlTableName.substring(0, pos);
		if (isBaseLanguage)
			tableName =  baseTableName;
		String keyColumn = baseTableName + ""_ID"";
		String[] trlColumns = getTrlColumns (baseTableName);
		//
		StringBuffer sql = null;
		try
		{
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			//	System.out.println(factory.getClass().getName());
			DocumentBuilder builder = factory.newDocumentBuilder();
			//	<!DOCTYPE compiereTrl SYSTEM ""http://www.compiere.org/dtd/compiereTrl.dtd"">
			//	<!DOCTYPE compiereTrl PUBLIC ""-//ComPiere, Inc.//DTD Compiere Translation 1.0//EN"" ""http://www.compiere.org/dtd/compiereTrl.dtd"">
			Document document = builder.newDocument();
			document.appendChild(document.createComment(Compiere.getSummaryAscii()));
			document.appendChild(document.createComment(DTD));

			//	Root
			Element root = document.createElement(XML_TAG);
			root.setAttribute(XML_ATTRIBUTE_LANGUAGE, m_AD_Language);
			root.setAttribute(XML_ATTRIBUTE_TABLE, baseTableName);
			document.appendChild(root);
			//
			sql = new StringBuffer (""SELECT "");
			if (isBaseLanguage)
				sql.append(""'Y',"");							//	1
			else
				sql.append(""t.IsTranslated,"");
			sql.append(""t."").append(keyColumn);				//	2
			//
			for (String element : trlColumns)
				sql.append("", t."").append(element)
					.append("",o."").append(element).append("" AS "").append(element).append(""O"");
			//
			sql.append("" FROM "").append(tableName).append("" t"")
				.append("" INNER JOIN "").append(baseTableName)
				.append("" o ON (t."").append(keyColumn).append(""=o."").append(keyColumn).append("")"");
			boolean haveWhere = false;
			if (!isBaseLanguage)
			{
				sql.append("" WHERE t.AD_Language=?"");
				haveWhere = true;
			}
			if (m_IsCentrallyMaintained)
			{
				sql.append (haveWhere ? "" AND "" : "" WHERE "")
					.append (""o.IsCentrallyMaintained='N'"");
				haveWhere = true;
			}
			if (m_AD_Client_ID >= 0)
			{
				sql.append(haveWhere ? "" AND "" : "" WHERE "")
					.append(""o.AD_Client_ID="").append(m_AD_Client_ID);
				haveWhere = true;
			}
			String scopeSQL = getScopeSQL(baseTableName);
			if (!Util.isEmpty(scopeSQL))
				sql.append(haveWhere ? "" AND "" : "" WHERE "").append(scopeSQL);
			sql.append("" ORDER BY t."").append(keyColumn);
			//
			PreparedStatement pstmt = DB.prepareStatement(sql.toString(), (Trx) null);
			if (!isBaseLanguage)
				pstmt.setString(1, m_AD_Language);
			ResultSet rs = pstmt.executeQuery();
			int rows = 0;
			while (rs.next())
			{
				Element row = document.createElement (XML_ROW_TAG);
				int rowWordCount = 0;
				row.setAttribute(XML_ROW_ATTRIBUTE_ID, String.valueOf(rs.getInt(2)));	//	KeyColumn
				row.setAttribute(XML_ROW_ATTRIBUTE_TRANSLATED, rs.getString(1));		//	IsTranslated
				for (String element : trlColumns)
				{
					if (!baseTableName.equals(""AD_PrintFormatItem""))
					{
						if (translationLevel.equals(TranslationImportExport.TranslationLevel_LabelOnly)
							&& !((element.indexOf(""Name"") != -1)
								|| element.equals(""MsgText"")))
							continue;
						if (translationLevel.equals(TranslationImportExport.TranslationLevel_LabelDescriptionOnly)
							&& !((element.indexOf(""Name"") != -1)
								|| (element.indexOf(""Description"") != -1)
								|| element.equals(""MsgText"")
								|| element.equals(""MsgTip"")
								|| element.equals(""PrintName"")
								|| element.equals(""RegionName"") ))
						continue;
					}
					Element value = document.createElement (XML_VALUE_TAG);
					value.setAttribute(XML_VALUE_ATTRIBUTE_COLUMN, element);
					String origString = rs.getString(element + ""O"");			//	Original Value
					if (origString == null)
						origString = """";
					String valueString = rs.getString(element);				//	Value
					if (valueString == null)
						valueString = """";
					value.setAttribute(XML_VALUE_ATTRIBUTE_ORIGINAL, origString);
					value.appendChild(document.createTextNode(valueString));
					row.appendChild(value);
					rowWordCount += Util.countWords(origString);
				}
				//	Add if there is something to translate
				if (rowWordCount != 0)
				{
					m_wordCount += rowWordCount;
					root.appendChild(row);
					rows++;
				}
			}
			rs.close();
			pstmt.close();
			info = trlTableName + "": Records="" + rows + "", Words="" + (m_wordCount-words);
			if (document.getDoctype() != null)
				info += "", DTD="" + document.getDoctype();
			log.config(info);
			if (rows == 0)
				return info + "" (ignored)"";
			//
			DOMSource source = new DOMSource(document);
			TransformerFactory tFactory = TransformerFactory.newInstance();
			Transformer transformer = tFactory.newTransformer();
			//	Output
			out.createNewFile();
			StreamResult result = new StreamResult(out);
			//	Transform
			transformer.transform (source, result);
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql.toString(), e);
			info = e.getLocalizedMessage();
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, """", e);
			info = e.getLocalizedMessage();
		}
		return info;
	}	//	exportTrl
"
org.compiere.process.TranslationMgr.getTrlColumns,TranslationMgr.java,"String[] getTrlColumns (String Base_Table)
	{
		m_IsCentrallyMaintained = false;
		String sql = ""SELECT TableName FROM AD_Table t""
			+ "" INNER JOIN AD_Column c ON (c.AD_Table_ID=t.AD_Table_ID AND c.ColumnName='IsCentrallyMaintained') ""
			+ ""WHERE t.TableName=? AND c.IsActive='Y'"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setString(1, Base_Table);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				m_IsCentrallyMaintained = true;
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}

		sql = ""SELECT ColumnName ""
			+ ""FROM AD_Column c""
			+ "" INNER JOIN AD_Table t ON (c.AD_Table_ID=t.AD_Table_ID) ""
			+ ""WHERE t.TableName=?""
			+ "" AND c.AD_Reference_ID IN (10,14) ""
			+ ""ORDER BY IsMandatory DESC, ColumnName"";
		ArrayList<String> list = new ArrayList<String>();
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setString(1, Base_Table + ""_Trl"");
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				String s = rs.getString(1);
			//	System.out.println(s);
				list.add(s);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}

		//	Convert to Array
		String[] retValue = new String[list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getTrlColumns
"
org.compiere.process.TranslationMgr.getScopeSQL,TranslationMgr.java,"String getScopeSQL(String baseTableName)
	{
		if (Util.isEmpty(baseTableName)
			|| (m_ExportScope == null)
			|| !m_ExportScope.equals(TranslationImportExport.ExportScope_SystemUser))
			return null;
		//	Not translated
		if (baseTableName.equals(""AD_Table""))
			return ""1=2"";
		//	AccessLevel 4=System only
		if (baseTableName.equals(""AD_Window""))
			return ""o.AD_Window_ID IN (SELECT t.AD_Window_ID FROM AD_Tab tab""
				+ "" INNER JOIN AD_Table tt ON (tab.AD_Table_ID=tt.AD_Table_ID) ""
				+ ""WHERE tt.AccessLevel <> '4')"";
		if (baseTableName.equals(""AD_Tab""))
			return ""EXISTS (SELECT * FROM AD_Table tt ""
				+ ""WHERE o.AD_Table_ID=tt.AD_Table_ID AND tt.AccessLevel <> '4')"";
		if (baseTableName.equals(""AD_Field""))
			return ""o.AD_Tab_ID IN (SELECT AD_Tab_ID FROM AD_Tab tab""
				+ "" INNER JOIN AD_Table tt ON (tab.AD_Table_ID=tt.AD_Table_ID) ""
				+ ""WHERE tt.AccessLevel <> '4')"";
		if (baseTableName.equals(""AD_Element""))
			return ""o.AD_Element_ID IN (SELECT AD_Element_ID FROM AD_Column c""
				+ "" INNER JOIN AD_Table tt ON (c.AD_Table_ID=tt.AD_Table_ID) ""
				+ ""WHERE tt.AccessLevel <> '4')"";
		if (baseTableName.equals(""AD_Process""))
			return ""o.AccessLevel <> '4'"";
		if (baseTableName.equals(""AD_Process_Para""))
			return ""o.AD_Process_ID IN (SELECT AD_Process_ID FROM AD_Process WHERE AccessLevel<>'4')"";

		return null;
	}	//	getScopeSQL
"
org.compiere.process.TranslationMgr.validateLanguage,TranslationMgr.java,"String validateLanguage (String AD_Language)
	{
		String sql = ""SELECT * ""
			+ ""FROM AD_Language ""
			+ ""WHERE AD_Language=?"";
		MLanguage language = null;
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setString(1, AD_Language);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
				language = new MLanguage (m_ctx, rs, null);
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
			return e.toString();
		}

		//	No AD_Language Record
		if (language == null)
		{
			log.log(Level.WARNING, ""Language does not exist: "" + AD_Language);
			return ""Language does not exist: "" + AD_Language;
		}
		//	Language exists
		setAD_Language(AD_Language);
		if (language.isActive())
		{
			if (language.isBaseLanguage())
				return """";
		}
		else
		{
			log.log(Level.WARNING, ""Language not active or not system language: "" + AD_Language);
			return ""Language not active or not system language: "" + AD_Language;
		}

		//	Validate Translation
		log.info(""Start Validating ... "" + language);
		language.maintain(true);
		return """";
	}	//	validateLanguage
"
org.compiere.process.TranslationMgr.getWordCount,TranslationMgr.java,"int getWordCount()
	{
		return m_wordCount;
	}	//	getWordCount
"
org.compiere.process.TranslationMgr.process,TranslationMgr.java,"void process (String directory, String mode)
	{
		File dir = new File(directory);
		if (!dir.exists())
			dir.mkdir();
		dir = new File(directory);
		if (!dir.exists())
		{
			System.out.println(""Cannot create directory "" + directory);
			System.exit(1);
		}

		String 	sql = ""SELECT Name, TableName ""
			+ ""FROM AD_Table ""
			+ ""WHERE TableName LIKE '%_Trl' ""
			+ ""ORDER BY 1"";
		ArrayList<String> trlTables = new ArrayList<String>();
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				trlTables.add(rs.getString(2));
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}

		for (int i = 0; i < trlTables.size(); i++)
		{
			String table = trlTables.get(i);
			if (mode.startsWith(""i""))
				importTrl(directory, table);
			else
				exportTrl(directory, table, null);
		}
	}	//	process
"
org.compiere.process.TranslationMgr.main,TranslationMgr.java,"void main (String[] args)
	{
		if (args.length != 3)
		{
			System.out.println(""format : java Translation directory AD_Language import|export"");
			System.out.println(""example: java Translation /Compiere2/data/de_DE de_DE import"");
			System.out.println(""example: java Translation /Compiere2/data/fr_FR fr_FR export"");
			System.exit(1);
		}
		//
		Login.initTest (false);
		String directory = args[0];
		String AD_Language = args[1];
		String mode = args[2];

		TranslationMgr trl = new TranslationMgr(Env.getCtx());
		String msg = trl.validateLanguage (AD_Language);
		if (msg.length() > 0)
			System.err.println(msg);
		else
			trl.process (directory, mode);

		System.exit(0);
	}	//	main
"
org.compiere.process.AcctSchemaCopyAcct.prepare,AcctSchemaCopyAcct.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_AcctSchema_ID""))
				p_SourceAcctSchema_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_TargetAcctSchema_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.AcctSchemaCopyAcct.doIt,AcctSchemaCopyAcct.java,"String doIt () throws Exception
	{
		log.info(""SourceAcctSchema_ID="" + p_SourceAcctSchema_ID 
			+ "", TargetAcctSchema_ID="" + p_TargetAcctSchema_ID);
		
		if (p_SourceAcctSchema_ID == 0 || p_TargetAcctSchema_ID == 0)
			throw new CompiereSystemException(""ID=0"");
		
		if (p_SourceAcctSchema_ID == p_TargetAcctSchema_ID)
			throw new CompiereUserException(""Account Schema must be different"");
		
		MAcctSchema source = MAcctSchema.get(getCtx(), p_SourceAcctSchema_ID, null);
		if (source.get_ID() == 0)
			throw new CompiereSystemException(""@NotFound@ Source @C_AcctSchema_ID@="" + p_SourceAcctSchema_ID);
		MAcctSchema target = new MAcctSchema (getCtx(), p_TargetAcctSchema_ID, get_TrxName());
		if (target.get_ID() == 0)
			throw new CompiereSystemException(""@NotFound@ Target @C_AcctSchema_ID@="" + p_TargetAcctSchema_ID);
		
		//
	//	MAcctSchemaElement[] sourceElements = source.getAcctSchemaElements();
		MAcctSchemaElement[] targetElements = target.getAcctSchemaElements();
		if (targetElements.length == 0)
			throw new CompiereUserException(""@NotFound@ Target C_AcctSchema_Element"");
		
		//	Accounting Element must be the same
		MAcctSchemaElement sourceAcctElement = source.getAcctSchemaElement(X_C_AcctSchema_Element.ELEMENTTYPE_Account);
		if (sourceAcctElement == null)
			throw new CompiereUserException(""NotFound Source AC C_AcctSchema_Element"");
		MAcctSchemaElement targetAcctElement = target.getAcctSchemaElement(X_C_AcctSchema_Element.ELEMENTTYPE_Account);
		if (targetAcctElement == null)
			throw new CompiereUserException(""NotFound Target AC C_AcctSchema_Element"");
		if (sourceAcctElement.getC_Element_ID() != targetAcctElement.getC_Element_ID())
			throw new CompiereUserException(""@C_Element_ID@ different"");
		
		if (MAcctSchemaGL.get(getCtx(), p_TargetAcctSchema_ID) == null)
			copyGL(target);
		if (MAcctSchemaDefault.get(getCtx(), p_TargetAcctSchema_ID) == null)
			copyDefault(target);
		
		return ""@OK@"";
	}	//	doIt
"
org.compiere.process.AcctSchemaCopyAcct.copyGL,AcctSchemaCopyAcct.java,"void copyGL (MAcctSchema targetAS) throws Exception
	{
		MAcctSchemaGL source = MAcctSchemaGL.get(getCtx(), p_SourceAcctSchema_ID);
		MAcctSchemaGL target = new MAcctSchemaGL(getCtx(), 0, get_TrxName());
		target.setC_AcctSchema_ID(p_TargetAcctSchema_ID);
		ArrayList<KeyNamePair> list = source.getAcctInfo();
		for (int i = 0; i < list.size(); i++)
		{
			KeyNamePair pp = list.get(i);
			int sourceC_ValidCombination_ID = pp.getKey();
			String columnName = pp.getName();
			MAccount sourceAccount = MAccount.get(getCtx(), sourceC_ValidCombination_ID);
			MAccount targetAccount = createAccount(targetAS, sourceAccount);
			target.setValue(columnName, Integer.valueOf(targetAccount.getC_ValidCombination_ID()));
		}
		if (!target.save())
			throw new CompiereSystemException(""Could not Save GL"");
	}	//	copyGL
"
org.compiere.process.AcctSchemaCopyAcct.copyDefault,AcctSchemaCopyAcct.java,"void copyDefault(MAcctSchema targetAS) throws Exception
	{
		MAcctSchemaDefault source = MAcctSchemaDefault.get(getCtx(), p_SourceAcctSchema_ID);
		MAcctSchemaDefault target = new MAcctSchemaDefault(getCtx(), 0, get_TrxName());
		target.setC_AcctSchema_ID(p_TargetAcctSchema_ID);
		target.setC_AcctSchema_ID(p_TargetAcctSchema_ID);
		ArrayList<KeyNamePair> list = source.getAcctInfo();
		for (int i = 0; i < list.size(); i++)
		{
			KeyNamePair pp = list.get(i);
			int sourceC_ValidCombination_ID = pp.getKey();
			String columnName = pp.getName();
			MAccount sourceAccount = MAccount.get(getCtx(), sourceC_ValidCombination_ID);
			MAccount targetAccount = createAccount(targetAS, sourceAccount);
			target.setValue(columnName, Integer.valueOf(targetAccount.getC_ValidCombination_ID()));
		}
		if (!target.save())
			throw new CompiereSystemException(""Could not Save Default"");
	}	//	copyDefault
"
org.compiere.process.AcctSchemaCopyAcct.createAccount,AcctSchemaCopyAcct.java,"MAccount createAccount(MAcctSchema targetAS, MAccount sourceAcct)
	{
		int AD_Client_ID = targetAS.getAD_Client_ID(); 
		int C_AcctSchema_ID = targetAS.getC_AcctSchema_ID();
		//
		int AD_Org_ID = 0;
		int Account_ID = 0;
		int C_SubAcct_ID = 0;
		int M_Product_ID = 0;
		int C_BPartner_ID = 0;
		int AD_OrgTrx_ID = 0;
		int C_LocFrom_ID = 0;
		int C_LocTo_ID = 0;
		int C_SalesRegion_ID = 0; 
		int C_Project_ID = 0;
		int C_Campaign_ID = 0;
		int C_Activity_ID = 0;
		int User1_ID = 0;
		int User2_ID = 0;
		int UserElement1_ID = 0;
		int UserElement2_ID = 0;
		//
		//  Active Elements
		MAcctSchemaElement[] elements = targetAS.getAcctSchemaElements();
		for (MAcctSchemaElement ase : elements) {
			String elementType = ase.getElementType();
			//
			if (elementType.equals(X_C_AcctSchema_Element.ELEMENTTYPE_Organization))
				AD_Org_ID = sourceAcct.getAD_Org_ID();
			else if (elementType.equals(X_C_AcctSchema_Element.ELEMENTTYPE_Account))
				Account_ID = sourceAcct.getAccount_ID();
			else if (elementType.equals(X_C_AcctSchema_Element.ELEMENTTYPE_SubAccount))
				C_SubAcct_ID = sourceAcct.getC_SubAcct_ID();
			else if (elementType.equals(X_C_AcctSchema_Element.ELEMENTTYPE_BPartner))
				C_BPartner_ID = sourceAcct.getC_BPartner_ID();
			else if (elementType.equals(X_C_AcctSchema_Element.ELEMENTTYPE_Product))
				M_Product_ID = sourceAcct.getM_Product_ID();
			else if (elementType.equals(X_C_AcctSchema_Element.ELEMENTTYPE_Activity))
				C_Activity_ID = sourceAcct.getC_Activity_ID();
			else if (elementType.equals(X_C_AcctSchema_Element.ELEMENTTYPE_LocationFrom))
				C_LocFrom_ID = sourceAcct.getC_LocFrom_ID();
			else if (elementType.equals(X_C_AcctSchema_Element.ELEMENTTYPE_LocationTo))
				C_LocTo_ID = sourceAcct.getC_LocTo_ID();
			else if (elementType.equals(X_C_AcctSchema_Element.ELEMENTTYPE_Campaign))
				C_Campaign_ID = sourceAcct.getC_Campaign_ID();
			else if (elementType.equals(X_C_AcctSchema_Element.ELEMENTTYPE_OrgTrx))
				AD_OrgTrx_ID = sourceAcct.getAD_OrgTrx_ID();
			else if (elementType.equals(X_C_AcctSchema_Element.ELEMENTTYPE_Project))
				C_Project_ID = sourceAcct.getC_Project_ID();
			else if (elementType.equals(X_C_AcctSchema_Element.ELEMENTTYPE_SalesRegion))
				C_SalesRegion_ID = sourceAcct.getC_SalesRegion_ID();
			else if (elementType.equals(X_C_AcctSchema_Element.ELEMENTTYPE_UserList1))
				User1_ID = sourceAcct.getUser1_ID();
			else if (elementType.equals(X_C_AcctSchema_Element.ELEMENTTYPE_UserList2))
				User2_ID = sourceAcct.getUser2_ID();
			else if (elementType.equals(X_C_AcctSchema_Element.ELEMENTTYPE_UserElement1))
				UserElement1_ID = sourceAcct.getUserElement1_ID();
			else if (elementType.equals(X_C_AcctSchema_Element.ELEMENTTYPE_UserElement2))
				UserElement2_ID = sourceAcct.getUserElement2_ID();
			//	No UserElement
		}
		//
		return MAccount.get(getCtx(), AD_Client_ID, AD_Org_ID,
			C_AcctSchema_ID, Account_ID, C_SubAcct_ID,
			M_Product_ID, C_BPartner_ID, AD_OrgTrx_ID,
			C_LocFrom_ID, C_LocTo_ID, C_SalesRegion_ID, 
			C_Project_ID, C_Campaign_ID, C_Activity_ID,
			User1_ID, User2_ID, UserElement1_ID, UserElement2_ID);
	}	//	createAccount
"
org.compiere.process.OrgOwnership.prepare,OrgOwnership.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_Org_ID""))
				p_AD_Org_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""M_Warehouse_ID""))
				p_M_Warehouse_ID = ((BigDecimal)element.getParameter()).intValue();
				
			else if (name.equals(""M_Product_Category_ID""))
				p_M_Product_Category_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""M_Product_ID""))
				p_M_Product_ID = ((BigDecimal)element.getParameter()).intValue();

			else if (name.equals(""C_BP_Group_ID""))
				p_C_BP_Group_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""C_BPartner_ID""))
				p_C_BPartner_ID = ((BigDecimal)element.getParameter()).intValue();

			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.OrgOwnership.doIt,OrgOwnership.java,"String doIt() throws Exception
	{
		log.info (""doIt - AD_Org_ID="" + p_AD_Org_ID);
		if (p_AD_Org_ID < 0)
			throw new IllegalArgumentException (""OrgOwnership - invalid AD_Org_ID="" + p_AD_Org_ID);
			
		generalOwnership();	
			
		if (p_M_Warehouse_ID > 0)
			return warehouseOwnership();
			
		if (p_M_Product_ID > 0 || p_M_Product_Category_ID > 0)
			return productOwnership();
			
		if (p_C_BPartner_ID > 0 || p_C_BP_Group_ID > 0)
			return bPartnerOwnership();
		else
			throw new CompiereUserException (""No Business Partner/Group selected"");

	}	//	doIt
"
org.compiere.process.OrgOwnership.warehouseOwnership,OrgOwnership.java,"String warehouseOwnership ()
	{
		log.info (""warehouseOwnership - M_Warehouse_ID="" + p_M_Warehouse_ID);
		if (p_AD_Org_ID == 0)
			throw new IllegalArgumentException (""Warehouse - Org cannot be * (0)"");

		//	Set Warehouse
		StringBuffer sql = new StringBuffer();
		sql.append(""UPDATE M_Warehouse ""
			+ ""SET AD_Org_ID="").append(p_AD_Org_ID)
			.append("" WHERE M_Warehouse_ID="").append(p_M_Warehouse_ID)
			.append("" AND AD_Client_ID="").append(getAD_Client_ID())
			.append("" AND AD_Org_ID<>"").append(p_AD_Org_ID);
		int no = DB.executeUpdate(sql.toString(), get_TrxName());
		addLog (0,null, new BigDecimal(no), Msg.translate(getCtx(), ""M_Warehouse_ID""));
		
		//	Set Accounts
		sql = new StringBuffer();
		sql.append(""UPDATE M_Warehouse_Acct ""
			+ ""SET AD_Org_ID="").append(p_AD_Org_ID)
			.append("" WHERE M_Warehouse_ID="").append(p_M_Warehouse_ID)
			.append("" AND AD_Client_ID="").append(getAD_Client_ID())
			.append("" AND AD_Org_ID<>"").append(p_AD_Org_ID);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		addLog (0,null, new BigDecimal(no), Msg.translate(getCtx(), ""C_AcctSchema_ID""));

		//	Set Locators
		sql = new StringBuffer();
		sql.append(""UPDATE M_Locator ""
			+ ""SET AD_Org_ID="").append(p_AD_Org_ID)
			.append("" WHERE M_Warehouse_ID="").append(p_M_Warehouse_ID)
			.append("" AND AD_Client_ID="").append(getAD_Client_ID())
			.append("" AND AD_Org_ID<>"").append(p_AD_Org_ID);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		addLog (0,null, new BigDecimal(no), Msg.translate(getCtx(), ""M_Locator_ID""));

		// Update WMS tables if WMS is licensed
		SysEnv se = SysEnv.get(""CWMS"");
		if (!(se==null) && se.checkLicense())
        {
			//	Set Zone Locators
			sql = new StringBuffer();
			sql.append(""UPDATE M_ZoneLocator zl ""
				+ ""SET AD_Org_ID="").append(p_AD_Org_ID)
				.append("" WHERE EXISTS "")
				.append("" (SELECT 1 FROM M_Zone z "")
				.append("" WHERE z.M_Zone_ID = zl.M_Zone_ID AND"")
				.append("" z.M_Warehouse_ID="").append(p_M_Warehouse_ID)
				.append("" AND z.AD_Client_ID="").append(getAD_Client_ID())
				.append("" AND z.AD_Org_ID<>"").append(p_AD_Org_ID)
				.append("" )"");
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			addLog (0,null, new BigDecimal(no), Msg.translate(getCtx(), ""M_ZoneLocator_ID""));
	
			//	Set Zone Relationship
			sql = new StringBuffer();
			sql.append(""UPDATE M_ZoneRelationship zr ""
				+ ""SET AD_Org_ID="").append(p_AD_Org_ID)
				.append("" WHERE EXISTS "")
				.append("" (SELECT 1 FROM M_Zone z "")
				.append("" WHERE z.M_Zone_ID = zr.M_Zone_ID AND"")
				.append("" z.M_Warehouse_ID="").append(p_M_Warehouse_ID)
				.append("" AND z.AD_Client_ID="").append(getAD_Client_ID())
				.append("" AND z.AD_Org_ID<>"").append(p_AD_Org_ID)
				.append("" )"");
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			addLog (0,null, new BigDecimal(no), Msg.translate(getCtx(), ""M_ZoneRelationship_ID""));
	
			//	Set Zones
			sql = new StringBuffer();
			sql.append(""UPDATE M_Zone ""
				+ ""SET AD_Org_ID="").append(p_AD_Org_ID)
				.append("" WHERE M_Warehouse_ID="").append(p_M_Warehouse_ID)
				.append("" AND AD_Client_ID="").append(getAD_Client_ID())
				.append("" AND AD_Org_ID<>"").append(p_AD_Org_ID);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			addLog (0,null, new BigDecimal(no), Msg.translate(getCtx(), ""M_Zone_ID""));

			//	Set WMS Rules
			sql = new StringBuffer();
			sql.append(""UPDATE M_MMRule ""
				+ ""SET AD_Org_ID="").append(p_AD_Org_ID)
				.append("" WHERE M_Warehouse_ID="").append(p_M_Warehouse_ID)
				.append("" AND AD_Client_ID="").append(getAD_Client_ID())
				.append("" AND AD_Org_ID<>"").append(p_AD_Org_ID);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			addLog (0,null, new BigDecimal(no), Msg.translate(getCtx(), ""M_MMRule_ID""));
        
			//	Set Strategy Lines
			sql = new StringBuffer();
			sql.append(""UPDATE M_MMStrategyLine sl ""
				+ ""SET AD_Org_ID="").append(p_AD_Org_ID)
				.append("" WHERE EXISTS "")
				.append("" (SELECT 1 FROM M_MMStrategy s "")
				.append("" WHERE s.M_MMStrategy_ID = sl.M_MMStrategy_ID AND"")
				.append("" s.M_Warehouse_ID="").append(p_M_Warehouse_ID)
				.append("" AND s.AD_Client_ID="").append(getAD_Client_ID())
				.append("" AND s.AD_Org_ID<>"").append(p_AD_Org_ID)
				.append("" )"");
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			addLog (0,null, new BigDecimal(no), Msg.translate(getCtx(), ""M_MMStrategyLine_ID""));

			// Set Strategy
			sql = new StringBuffer();
			sql.append(""UPDATE M_MMStrategy ""
				+ ""SET AD_Org_ID="").append(p_AD_Org_ID)
				.append("" WHERE M_Warehouse_ID="").append(p_M_Warehouse_ID)
				.append("" AND AD_Client_ID="").append(getAD_Client_ID())
				.append("" AND AD_Org_ID<>"").append(p_AD_Org_ID);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			addLog (0,null, new BigDecimal(no), Msg.translate(getCtx(), ""M_MMStrategy_ID""));

			//	Set Strategy Set Lines
			sql = new StringBuffer();
			sql.append(""UPDATE M_MMStrategySetLine sl ""
				+ ""SET AD_Org_ID="").append(p_AD_Org_ID)
				.append("" WHERE EXISTS "")
				.append("" (SELECT 1 FROM M_MMStrategySet s "")
				.append("" WHERE s.M_MMStrategySet_ID = sl.M_MMStrategySet_ID AND"")
				.append("" s.M_Warehouse_ID="").append(p_M_Warehouse_ID)
				.append("" AND s.AD_Client_ID="").append(getAD_Client_ID())
				.append("" AND s.AD_Org_ID<>"").append(p_AD_Org_ID)
				.append("" )"");
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			addLog (0,null, new BigDecimal(no), Msg.translate(getCtx(), ""M_MMStrategySetLine_ID""));

			// Set Strategy Set
			sql = new StringBuffer();
			sql.append(""UPDATE M_MMStrategySet ""
				+ ""SET AD_Org_ID="").append(p_AD_Org_ID)
				.append("" WHERE M_Warehouse_ID="").append(p_M_Warehouse_ID)
				.append("" AND AD_Client_ID="").append(getAD_Client_ID())
				.append("" AND AD_Org_ID<>"").append(p_AD_Org_ID);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			addLog (0,null, new BigDecimal(no), Msg.translate(getCtx(), ""M_MMStrategySet_ID""));

        }

		//	Set Storage
		sql = new StringBuffer();
		sql.append(""UPDATE M_Storage s ""
			+ ""SET AD_Org_ID="").append(p_AD_Org_ID)
			.append("" WHERE EXISTS ""
				+ ""(SELECT * FROM M_Locator l WHERE l.M_Locator_ID=s.M_Locator_ID""
				+ "" AND l.M_Warehouse_ID="").append(p_M_Warehouse_ID)
			.append("") AND AD_Client_ID="").append(getAD_Client_ID())
			.append("" AND AD_Org_ID<>"").append(p_AD_Org_ID);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		addLog (0,null, new BigDecimal(no), Msg.translate(getCtx(), ""M_Storage""));
			
		return """";
	}	//	warehouseOwnership
"
org.compiere.process.OrgOwnership.productOwnership,OrgOwnership.java,"String productOwnership ()
	{
		log.info (""productOwnership - M_Product_Category_ID="" + p_M_Product_Category_ID
			+ "", M_Product_ID="" + p_M_Product_ID);
			
		String set = "" SET AD_Org_ID="" + p_AD_Org_ID;
		if (p_M_Product_Category_ID > 0)
			set += "" WHERE EXISTS (SELECT * FROM M_Product p""
				+ "" WHERE p.M_Product_ID=x.M_Product_ID AND p.M_Product_Category_ID="" 
					+ p_M_Product_Category_ID + "")"";
		else
			set += "" WHERE M_Product_ID="" + p_M_Product_ID;
		set += "" AND AD_Client_ID="" + getAD_Client_ID() + "" AND AD_Org_ID<>"" + p_AD_Org_ID;
		log.fine(""productOwnership - "" + set);
		
		//	Product
		String sql = ""UPDATE M_Product x "" + set;
		int no = DB.executeUpdate(sql, get_TrxName());
		addLog (0,null, new BigDecimal(no), Msg.translate(getCtx(), ""M_Product_ID""));
		
		//	Acct
		sql = ""UPDATE M_Product_Acct x "" + set;
		no = DB.executeUpdate(sql, get_TrxName());
		addLog (0,null, new BigDecimal(no), Msg.translate(getCtx(), ""C_AcctSchema_ID""));
		
		//	Old BOM
		sql = ""UPDATE M_Product_BOM x "" + set;
		no = DB.executeUpdate(sql, get_TrxName());
		addLog (0,null, new BigDecimal(no), Msg.translate(getCtx(), ""M_Product_BOM_ID""));
		
		//	New BOM
		sql = ""UPDATE M_BOM x "" + set;
		no = DB.executeUpdate(sql, get_TrxName());
		addLog (0,null, new BigDecimal(no), Msg.translate(getCtx(), ""M_BOM_ID""));

		//	New BOM Component
		sql = ""UPDATE M_BOMProduct x "" +
			  ""SET AD_Org_ID="" + p_AD_Org_ID + "" "" +
			  ""WHERE EXISTS (SELECT * FROM M_BOM b, M_Product p "" +
			  ""WHERE b.M_BOM_ID = x.M_BOM_ID "" +
			  ""AND b.M_Product_ID = p.M_Product_ID "";
		
		if (p_M_Product_Category_ID > 0)
			sql += ""AND p.M_Product_Category_ID="" + p_M_Product_Category_ID + "")"";
		else
			sql += ""AND p.M_Product_ID="" + p_M_Product_ID + "")"";

		sql += "" AND AD_Client_ID="" + getAD_Client_ID() + "" AND AD_Org_ID<>"" + p_AD_Org_ID;
		no = DB.executeUpdate(sql, get_TrxName());
		addLog (0,null, new BigDecimal(no), Msg.translate(getCtx(), ""M_BOMProduct_ID""));

		//	PO
		sql = ""UPDATE M_Product_PO x "" + set;
		no = DB.executeUpdate(sql, get_TrxName());
		addLog (0,null, new BigDecimal(no), Msg.translate(getCtx(), ""Purchase""));

		//	Trl
		sql = ""UPDATE M_Product_Trl x "" + set;
		no = DB.executeUpdate(sql, get_TrxName());
		addLog (0,null, new BigDecimal(no), Msg.translate(getCtx(), ""AD_Language""));

		return """";
	}	//	productOwnership
"
org.compiere.process.OrgOwnership.bPartnerOwnership,OrgOwnership.java,"String bPartnerOwnership ()
	{
		log.info (""bPartnerOwnership - C_BP_Group_ID="" + p_C_BP_Group_ID
			+ "", C_BPartner_ID="" + p_C_BPartner_ID);
			
		String set = "" SET AD_Org_ID="" + p_AD_Org_ID;
		if (p_C_BP_Group_ID > 0)
			set += "" WHERE EXISTS (SELECT * FROM C_BPartner bp WHERE bp.C_BPartner_ID=x.C_BPartner_ID AND bp.C_BP_Group_ID="" + p_C_BP_Group_ID + "")"";
		else
			set += "" WHERE C_BPartner_ID="" + p_C_BPartner_ID;
		set += "" AND AD_Client_ID="" + getAD_Client_ID() + "" AND AD_Org_ID<>"" + p_AD_Org_ID;
		log.fine(""bPartnerOwnership - "" + set);

		//	BPartner
		String sql = ""UPDATE C_BPartner x "" + set;
		int no = DB.executeUpdate(sql, get_TrxName());
		addLog (0,null, new BigDecimal(no), Msg.translate(getCtx(), ""C_BPartner_ID""));
		
		//	Acct xxx
		sql = ""UPDATE C_BP_Customer_Acct x "" + set;
		no = DB.executeUpdate(sql, get_TrxName());
		addLog (0,null, new BigDecimal(no), Msg.translate(getCtx(), ""C_AcctSchema_ID""));
		sql = ""UPDATE C_BP_Employee_Acct x "" + set;
		no = DB.executeUpdate(sql, get_TrxName());
		addLog (0,null, new BigDecimal(no), Msg.translate(getCtx(), ""C_AcctSchema_ID""));
		sql = ""UPDATE C_BP_Vendor_Acct x "" + set;
		no = DB.executeUpdate(sql, get_TrxName());
		addLog (0,null, new BigDecimal(no), Msg.translate(getCtx(), ""C_AcctSchema_ID""));
		
		//	Location
		sql = ""UPDATE C_BPartner_Location x "" + set;
		no = DB.executeUpdate(sql, get_TrxName());
		addLog (0,null, new BigDecimal(no), Msg.translate(getCtx(), ""C_BPartner_Location_ID""));

		//	Contcat/User
		sql = ""UPDATE AD_User x "" + set;
		no = DB.executeUpdate(sql, get_TrxName());
		addLog (0,null, new BigDecimal(no), Msg.translate(getCtx(), ""AD_User_ID""));
		
		//	BankAcct
		sql = ""UPDATE C_BP_BankAccount x "" + set;
		no = DB.executeUpdate(sql, get_TrxName());
		addLog (0,null, new BigDecimal(no), Msg.translate(getCtx(), ""C_BP_BankAccount_ID""));

		return """";
	}	//	bPartnerOwnership
"
org.compiere.process.OrgOwnership.generalOwnership,OrgOwnership.java,"void generalOwnership ()
	{
		String set = ""SET AD_Org_ID=0 WHERE AD_Client_ID="" + getAD_Client_ID()
			+ "" AND AD_Org_ID<>0""; 
			
		//	R_ContactInterest
		String sql = ""UPDATE R_ContactInterest "" + set;
		int no = DB.executeUpdate(sql, get_TrxName());
		if (no != 0)
			log.fine(""generalOwnership - R_ContactInterest="" + no);

		//	AD_User_Roles
		sql = ""UPDATE AD_User_Roles "" + set;
		no = DB.executeUpdate(sql, get_TrxName());
		if (no != 0)
			log.fine(""generalOwnership - AD_User_Roles="" + no);
		
		//	C_BPartner_Product
		sql = ""UPDATE C_BPartner_Product "" + set;
		no = DB.executeUpdate(sql, get_TrxName());
		if (no != 0)
			log.fine(""generalOwnership - C_BPartner_Product="" + no);

		//	Withholding
		sql = ""UPDATE C_BP_Withholding x "" + set;
		no = DB.executeUpdate(sql, get_TrxName());
		if (no != 0)
			log.fine(""generalOwnership - C_BP_Withholding="" + no);

		//	Costing
		sql = ""UPDATE M_Product_Costing "" + set;
		no = DB.executeUpdate(sql, get_TrxName());
		if (no != 0)
			log.fine(""generalOwnership - M_Product_Costing="" + no);

		//	Replenish
		sql = ""UPDATE M_Replenish "" + set;
		no = DB.executeUpdate(sql, get_TrxName());
		if (no != 0)
			log.fine(""generalOwnership - M_Replenish="" + no);
	
	}	//	generalOwnership
"
org.compiere.process.PackageCreate.prepare,PackageCreate.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""M_Shipper_ID""))
				p_M_Shipper_ID = element.getParameterAsInt();
			else if (name.equals(""C_Invoice_ID""))
				p_M_InOut_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
		if (p_M_InOut_ID == 0)
			p_M_InOut_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.PackageCreate.doIt,PackageCreate.java,"String doIt () throws Exception
	{
		log.info(""doIt - M_InOut_ID="" + p_M_InOut_ID + "", M_Shipper_ID="" + p_M_Shipper_ID);
		if (p_M_InOut_ID == 0)
			throw new IllegalArgumentException(""No Shipment"");
		if (p_M_Shipper_ID == 0)
			throw new IllegalArgumentException(""No Shipper"");
		MInOut shipment = new MInOut (getCtx(), p_M_InOut_ID, null);
		if (shipment.get_ID() != p_M_InOut_ID)
			throw new IllegalArgumentException(""Cannot find Shipment ID="" + p_M_InOut_ID);
		MShipper shipper = new MShipper (getCtx(), p_M_Shipper_ID, get_TrxName());
		if (shipper.get_ID() != p_M_Shipper_ID)
			throw new IllegalArgumentException(""Cannot find Shipper ID="" + p_M_InOut_ID);
		//
		
		MPackage pack = MPackage.create (shipment, shipper, null);
		
		return pack.getDocumentNo();
	}	//	doIt
"
org.compiere.process.SynchronizeTerminology.doIt,SynchronizeTerminology.java,"String doIt() throws Exception
	{
		PreparedStatement pstmt = null;
		String sql = null;
		int steps = 0;

		//Adding missing Elements
		log.info(""Adding missing Elements"");
		try
		{
			sql = ""SELECT DISTINCT ColumnName, Name, Description, Help, EntityType "" +
					""FROM	AD_Column c "" +
					""WHERE NOT EXISTS "" +
					""	(SELECT * FROM AD_Element e "" +
					""	WHERE UPPER(c.ColumnName)=UPPER(e.ColumnName))"";
			pstmt = DB.prepareStatement(sql, (Trx) null);
			ResultSet rs = pstmt.executeQuery();
			PreparedStatement pstmt1 = null;
			while (rs.next())
			{
			 	try
				{
			 		if (pstmt1 == null)
			 		{
						sql = ""INSERT INTO AD_Element""
								+ "" (AD_Element_ID, AD_Client_ID, AD_Org_ID,""
								+ "" IsActive, Created, CreatedBy, Updated, UpdatedBy,""
								+ "" ColumnName, Name, PrintName, Description, Help, EntityType)""
								+ "" VALUES""
								+ "" (?, 0, 0,""  //1, NextNo
								+ "" 'Y', CURRENT_TIMESTAMP, 0, CURRENT_TIMESTAMP, 0,""
								+ "" ?, ?, ?, ?, ?, ?)""; //2-7 CC.ColumnName, CC.Name, CC.Name, CC.Description, CC.Help, CC.EntityType

						pstmt1 = DB.prepareStatement(sql, get_TrxName());
			 		}

					int id = DB.getNextID(getAD_Client_ID(), ""AD_Element"", get_TrxName());
					if (id <= 0)
					{
						log.severe(""Steps "" + steps + "", No NextID ("" + id + "")"");
						return ""Steps "" + steps + "" No NextID for AD_Element"";
					}

					pstmt1.setInt(1, id);
					pstmt1.setString(2, rs.getString(1));
					pstmt1.setString(3, rs.getString(2));
					pstmt1.setString(4, rs.getString(2));
					pstmt1.setString(5, rs.getString(3));
					pstmt1.setString(6, rs.getString(4));
					pstmt1.setString(7, rs.getString(5));
					pstmt1.executeUpdate();
				}
				catch (Exception e)
				{
					log.log(Level.SEVERE, ""Step "" + steps + "": "" + sql, e);
					return ""Steps "" + steps + "" "" + e.getMessage();
				}
				try
				{
					if (pstmt1 != null)
						pstmt1.close();
					pstmt1 = null;
				}
				catch (Exception e)
				{
					pstmt1 = null;
				}

			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""Step "" + steps + "": "" + sql, e);
			result = false;
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

		steps++;
		try
		{
			sql = ""SELECT DISTINCT ColumnName, Name, Description, Help, EntityType "" +
					""FROM	AD_Process_Para p "" +
					""WHERE NOT EXISTS "" +
					""	(SELECT * FROM AD_Element e "" +
					""	WHERE UPPER(p.ColumnName)=UPPER(e.ColumnName))"";
			pstmt = DB.prepareStatement(sql, (Trx) null);
			ResultSet rs = pstmt.executeQuery();
			PreparedStatement pstmt1 = null;
			while (rs.next())
			{
			 	try
				{
			 		if (pstmt1 == null)
			 		{
						sql = ""INSERT INTO AD_Element""
								+ "" (AD_Element_ID, AD_Client_ID, AD_Org_ID,""
								+ "" IsActive, Created, CreatedBy, Updated, UpdatedBy,""
								+ "" ColumnName, Name, PrintName, Description, Help, EntityType)""
								+ "" VALUES""
								+ "" (?, 0, 0,""  //1, NextNo
								+ "" 'Y', CURRENT_TIMESTAMP, 0, CURRENT_TIMESTAMP, 0,""
								+ "" ?, ?, ?, ?, ?, ?)""; //2-7 CC.ColumnName, CC.Name, CC.Name, CC.Description, CC.Help, CC.EntityType

						pstmt1 = DB.prepareStatement(sql, get_TrxName());
			 		}

					int id = DB.getNextID(getAD_Client_ID(), ""AD_Element"", get_TrxName());
					if (id <= 0)
					{
						log.severe(""Steps "" + steps + "", No NextID ("" + id + "")"");
						return ""Steps "" + steps + "" No NextID for AD_Element"";
					}

					pstmt1.setInt(1, id);
					pstmt1.setString(2, rs.getString(1));
					pstmt1.setString(3, rs.getString(2));
					pstmt1.setString(4, rs.getString(2));
					pstmt1.setString(5, rs.getString(3));
					pstmt1.setString(6, rs.getString(4));
					pstmt1.setString(7, rs.getString(5));
					pstmt1.executeUpdate();
				}
				catch (Exception e)
				{
					log.log(Level.SEVERE, ""Step "" + steps + "": "" + sql, e);
					return ""Steps "" + steps + "" "" + e.getMessage();
				}
				try
				{
					if (pstmt1 != null)
						pstmt1.close();
					pstmt1 = null;
				}
				catch (Exception e)
				{
					pstmt1 = null;
				}

			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""Step "" + steps + "": "" + sql, e);
			result = false;
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

		sql = ""INSERT INTO AD_Element_Trl (AD_Element_ID, AD_Language, AD_Client_ID, AD_Org_ID,""
			+ ""IsActive, Created, CreatedBy, Updated, UpdatedBy,""
			+ "" Name, PrintName, Description, Help, IsTranslated)""
			+ "" SELECT m.AD_Element_ID, l.AD_Language, m.AD_Client_ID, m.AD_Org_ID,""
			+ "" m.IsActive, m.Created, m.CreatedBy, m.Updated, m.UpdatedBy,""
			+ "" m.Name, m.PrintName, m.Description, m.Help, 'N'""
			+ "" FROM	AD_Element m, AD_Language l""
			+ "" WHERE	l.IsActive = 'Y' AND l.IsSystemLanguage = 'Y'""
			+ "" AND	AD_Element_ID || AD_Language NOT IN""
			+ "" (SELECT AD_Element_ID || AD_Language FROM AD_Element_Trl)"";
		execute(""Adding missing Element Translations"", sql,  ""  rows added: "");

		sql = ""INSERT INTO AD_ElementCTX_Trl (AD_ElementCTX_ID, AD_Language, AD_Client_ID, AD_Org_ID,""
			+ ""IsActive, Created, CreatedBy, Updated, UpdatedBy,""
			+ "" Name, PrintName, Description, Help, IsTranslated)""
			+ "" SELECT m.AD_ElementCTX_ID, l.AD_Language, m.AD_Client_ID, m.AD_Org_ID,""
			+ "" m.IsActive, m.Created, m.CreatedBy, m.Updated, m.UpdatedBy,""
			+ "" m.Name, m.PrintName, m.Description, m.Help, 'N'""
			+ "" FROM	AD_ElementCTX m, AD_Language l""
			+ "" WHERE	l.IsActive = 'Y' AND l.IsSystemLanguage = 'Y'""
			+ "" AND	AD_ElementCTX_ID || AD_Language NOT IN""
			+ "" (SELECT AD_ElementCTX_ID || AD_Language FROM AD_ElementCTX_Trl)"";
		execute(""Adding missing context specific Element Translations"", sql,  ""  rows added: "");

		/*
		 * 	DBMS_OUTPUT.PUT_LINE('Creating link from Element to Column');
	UPDATE	AD_Column c
	SET		AD_Element_id =
				(SELECT AD_Element_ID FROM AD_Element e
				WHERE UPPER(c.ColumnName)=UPPER(e.ColumnName))
	WHERE AD_Element_ID IS NULL;
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);
    COMMIT;
		 */
			sql = ""UPDATE AD_Column c""
					+ "" SET AD_Element_id =""
					+ "" (SELECT AD_Element_ID FROM AD_Element e""
					+ "" WHERE UPPER(c.ColumnName)=UPPER(e.ColumnName))""
					+ "" WHERE AD_Element_ID IS NULL"";
			execute(""Creating link from Element to Column"", sql,  ""  rows updated: "");

		/*
		 	DBMS_OUTPUT.PUT_LINE('Deleting unused Elements');
	DELETE	AD_Element_Trl
	WHERE	AD_Element_ID IN
		(SELECT AD_Element_ID FROM AD_Element e
		WHERE NOT EXISTS
			(SELECT * FROM AD_Column c WHERE UPPER(e.ColumnName)=UPPER(c.ColumnName))
        AND NOT EXISTS
	    	(SELECT * FROM AD_InfoColumn c WHERE e.AD_Element_ID=c.AD_Element_ID)
		AND NOT EXISTS
			(SELECT * FROM AD_Process_Para p WHERE UPPER(e.ColumnName)=UPPER(p.ColumnName)));

	DELETE	AD_Element e
	WHERE NOT EXISTS
		(SELECT * FROM AD_Column c WHERE UPPER(e.ColumnName)=UPPER(c.ColumnName))
    AND NOT EXISTS
		(SELECT * FROM AD_InfoColumn c WHERE e.AD_Element_ID=c.AD_Element_ID)
	AND NOT EXISTS
		(SELECT * FROM AD_Process_Para p WHERE UPPER(e.ColumnName)=UPPER(p.ColumnName));
	DBMS_OUTPUT.PUT_LINE('  rows deleted: ' || SQL%ROWCOUNT);

		 */
			sql = ""DELETE	AD_Element_Trl""
				+ "" WHERE	AD_Element_ID IN""
				+ "" (SELECT AD_Element_ID FROM AD_Element e""
					+ "" WHERE NOT EXISTS""
					+ "" (SELECT * FROM AD_Column c WHERE UPPER(e.ColumnName)=UPPER(c.ColumnName))""
					+ "" AND NOT EXISTS""
					+ "" (SELECT * FROM AD_InfoColumn c WHERE e.AD_Element_ID=c.AD_Element_ID)""
					+ "" AND NOT EXISTS""
					+ "" (SELECT * FROM AD_Process_Para p WHERE UPPER(e.ColumnName)=UPPER(p.ColumnName)))"";
			//not do delete for now
			//executesql(""Deleting unused Elements-TRL"", sql,  ""  rows deleted: "");

			sql = ""DELETE	AD_Element""
				+ "" WHERE NOT EXISTS""
				+ "" (SELECT * FROM AD_Column c WHERE UPPER(e.ColumnName)=UPPER(c.ColumnName))""
				+ "" AND NOT EXISTS""
				+ "" (SELECT * FROM AD_InfoColumn c WHERE e.AD_Element_ID=c.AD_Element_ID)""
				+ "" AND NOT EXISTS""
				+ "" (SELECT * FROM AD_Process_Para p WHERE UPPER(e.ColumnName)=UPPER(p.ColumnName)))"";
			//executesql(""Deleting unused Elements"", sql,  ""  rows deleted: "");

		/*
		 	--	Columns
	DBMS_OUTPUT.PUT_LINE('Synchronize Column');

**  Identify offending column
SELECT UPPER(ColumnName)
FROM AD_Element
GROUP BY UPPER(ColumnName)
HAVING COUNT(UPPER(ColumnName)) > 1

SELECT c.ColumnName, e.ColumnName
FROM AD_Column c
  INNER JOIN AD_Element e ON (c.AD_Element_ID=e.AD_Element_ID)
WHERE c.ColumnName <> e.ColumnName
**

	UPDATE AD_Column c
		SET	(ColumnName, Name, Description, Help) =
                (SELECT ColumnName, Name, Description, Help
                FROM AD_Element e WHERE c.AD_Element_ID=e.AD_Element_ID),
			Updated = SysDate
	WHERE EXISTS (SELECT * FROM AD_Element e
				WHERE c.AD_Element_ID=e.AD_Element_ID
				  AND (c.ColumnName <> e.ColumnName OR c.Name <> e.Name
					OR NVL(c.Description,' ') <> NVL(e.Description,' ') OR NVL(c.Help,' ') <> NVL(e.Help,' ')));
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);

		 */
			sql = ""UPDATE	AD_Column c""
					+ "" SET	(ColumnName, Name, Description, Help, Updated) =""
					+ "" (SELECT ColumnName, Name, Description, Help, CURRENT_TIMESTAMP""
	                + "" FROM AD_Element e WHERE c.AD_Element_ID=e.AD_Element_ID)""
					+ "" WHERE EXISTS (SELECT * FROM AD_Element e ""
					+ ""  WHERE c.AD_Element_ID=e.AD_Element_ID""
					+ ""   AND (c.ColumnName <> e.ColumnName OR c.Name <> e.Name ""
					+ ""   OR NVL(c.Description,' ') <> NVL(e.Description,' ') OR NVL(c.Help,' ') <> NVL(e.Help,' ')))"";
			execute(""Synchronize Column"", sql,  ""  rows updated: "");

		/*
		 * 	--	Fields should now be syncronized
	DBMS_OUTPUT.PUT_LINE('Synchronize Field');
	UPDATE AD_Field f
		SET (Name, Description, Help) =
                (SELECT e.Name, e.Description, e.Help
                FROM AD_Element e, AD_Column c
	    	    WHERE e.AD_Element_ID=c.AD_Element_ID AND c.AD_Column_ID=f.AD_Column_ID),
			Updated = SysDate
	WHERE f.IsCentrallyMaintained='Y' AND f.IsActive='Y'
	  AND EXISTS (SELECT * FROM AD_Element e, AD_Column c
				WHERE f.AD_Column_ID=c.AD_Column_ID
				  AND c.AD_Element_ID=e.AD_Element_ID AND c.AD_Process_ID IS NULL
				  AND (f.Name <> e.Name OR NVL(f.Description,' ') <> NVL(e.Description,' ') OR NVL(f.Help,' ') <> NVL(e.Help,' ')));
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);

		 */
			sql = ""UPDATE AD_Field f""
				+ "" SET (Name, Description, Help, Updated) = ""
				+ ""             (SELECT e.Name, e.Description, e.Help, CURRENT_TIMESTAMP""
				+ ""             FROM AD_Element e, AD_Column c""
				+ ""     	    WHERE e.AD_Element_ID=c.AD_Element_ID AND c.AD_Column_ID=f.AD_Column_ID)""
				+ "" 	WHERE f.IsCentrallyMaintained='Y' AND f.IsActive='Y'""
				+ "" 	  AND EXISTS (SELECT * FROM AD_Element e, AD_Column c""
				+ "" 				WHERE f.AD_Column_ID=c.AD_Column_ID""
				+ "" 				  AND c.AD_Element_ID=e.AD_Element_ID AND c.AD_Process_ID IS NULL""
				+ "" 				  AND (f.Name <> e.Name OR NVL(f.Description,' ') <> NVL(e.Description,' ') OR NVL(f.Help,' ') <> NVL(e.Help,' ')))""
				+ ""AND NOT EXISTS (""
                + ""      SELECT *""
                + ""      FROM AD_Tab t, AD_Window w, AD_Column c, AD_ElementCTX e""
                + ""      WHERE t.AD_Tab_ID=f.AD_Tab_ID AND w.AD_Window_ID=t.AD_Window_ID""
                + ""      AND c.AD_Column_ID=f.AD_Column_ID AND e.AD_Element_ID=c.AD_Element_ID""
                + ""      AND e.AD_CTXArea_ID=COALESCE(t.AD_CTXArea_ID, w.AD_CTXArea_ID))"";
			execute(""Synchronize Field"", sql,  ""  rows updated: "");

			/*
			 * 	--	Field Translations
	DBMS_OUTPUT.PUT_LINE('Synchronize Field Translations');
	UPDATE AD_Field_trl trl
		SET Name = (SELECT e.Name FROM AD_Element_trl e, AD_Column c, AD_Field f
					WHERE e.AD_Language=trl.AD_Language AND e.AD_Element_ID=c.AD_Element_ID
					  AND c.AD_Column_ID=f.AD_Column_ID AND f.AD_Field_ID=trl.AD_Field_ID),
			Description = (SELECT e.Description FROM AD_Element_trl e, AD_Column c, AD_Field f
					WHERE e.AD_Language=trl.AD_Language AND e.AD_Element_ID=c.AD_Element_ID
					  AND c.AD_Column_ID=f.AD_Column_ID AND f.AD_Field_ID=trl.AD_Field_ID),
			Help = (SELECT e.Help FROM AD_Element_trl e, AD_Column c, AD_Field f
					WHERE e.AD_Language=trl.AD_Language AND e.AD_Element_ID=c.AD_Element_ID
					  AND c.AD_Column_ID=f.AD_Column_ID AND f.AD_Field_ID=trl.AD_Field_ID),
			IsTranslated = (SELECT e.IsTranslated FROM AD_Element_trl e, AD_Column c, AD_Field f
					WHERE e.AD_Language=trl.AD_Language AND e.AD_Element_ID=c.AD_Element_ID
					  AND c.AD_Column_ID=f.AD_Column_ID AND f.AD_Field_ID=trl.AD_Field_ID),
			Updated = SysDate
	WHERE EXISTS (SELECT * FROM AD_Field f, AD_Element_trl e, AD_Column c
				WHERE trl.AD_Field_ID=f.AD_Field_ID
				  AND f.AD_Column_ID=c.AD_Column_ID
				  AND c.AD_Element_ID=e.AD_Element_ID AND c.AD_Process_ID IS NULL
				  AND trl.AD_Language=e.AD_Language
				  AND f.IsCentrallyMaintained='Y' AND f.IsActive='Y'
				  AND (trl.Name <> e.Name OR NVL(trl.Description,' ') <> NVL(e.Description,' ') OR NVL(trl.Help,' ') <> NVL(e.Help,' ')));
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);

			 */
			sql = ""	UPDATE AD_Field_trl trl""
				+ "" SET Name = (SELECT e.Name FROM AD_Element_trl e, AD_Column c, AD_Field f""
				+ "" 				WHERE e.AD_Language=trl.AD_Language AND e.AD_Element_ID=c.AD_Element_ID""
				+ "" 				  AND c.AD_Column_ID=f.AD_Column_ID AND f.AD_Field_ID=trl.AD_Field_ID),""
				+ "" 		Description = (SELECT e.Description FROM AD_Element_trl e, AD_Column c, AD_Field f""
				+ "" 				WHERE e.AD_Language=trl.AD_Language AND e.AD_Element_ID=c.AD_Element_ID""
				+ "" 				  AND c.AD_Column_ID=f.AD_Column_ID AND f.AD_Field_ID=trl.AD_Field_ID),""
				+ "" 		Help = (SELECT e.Help FROM AD_Element_trl e, AD_Column c, AD_Field f""
				+ "" 				WHERE e.AD_Language=trl.AD_Language AND e.AD_Element_ID=c.AD_Element_ID""
				+ "" 				  AND c.AD_Column_ID=f.AD_Column_ID AND f.AD_Field_ID=trl.AD_Field_ID),""
				+ "" 		IsTranslated = (SELECT e.IsTranslated FROM AD_Element_trl e, AD_Column c, AD_Field f""
				+ "" 				WHERE e.AD_Language=trl.AD_Language AND e.AD_Element_ID=c.AD_Element_ID""
				+ "" 				  AND c.AD_Column_ID=f.AD_Column_ID AND f.AD_Field_ID=trl.AD_Field_ID),""
				+ "" 		Updated = CURRENT_TIMESTAMP""
				+ "" 	WHERE EXISTS (SELECT * FROM AD_Field f, AD_Element_trl e, AD_Column c""
				+ "" 				WHERE trl.AD_Field_ID=f.AD_Field_ID""
				+ "" 				  AND f.AD_Column_ID=c.AD_Column_ID""
				+ "" 				  AND c.AD_Element_ID=e.AD_Element_ID AND c.AD_Process_ID IS NULL""
				+ "" 				  AND trl.AD_Language=e.AD_Language""
				+ "" 				  AND f.IsCentrallyMaintained='Y' AND f.IsActive='Y'""
				+ "" 				  AND (trl.Name <> e.Name OR NVL(trl.Description,' ') <> NVL(e.Description,' ') OR NVL(trl.Help,' ') <> NVL(e.Help,' ')))""
				+ ""AND NOT EXISTS (""
                + ""      SELECT *""
                + ""      FROM AD_Tab t, AD_Window w, AD_Column c, AD_ElementCTX e, AD_Field f""
                + ""      WHERE t.AD_Tab_ID=f.AD_Tab_ID AND w.AD_Window_ID=t.AD_Window_ID""
                + ""      AND c.AD_Column_ID=f.AD_Column_ID AND e.AD_Element_ID=c.AD_Element_ID""
                + ""      AND e.AD_CTXArea_ID=COALESCE(t.AD_CTXArea_ID, w.AD_CTXArea_ID)""
                + ""      AND f.AD_Field_ID = trl.AD_Field_ID)"";
			execute(""Synchronize Field Translations"", sql,  ""  rows updated: "");

			/*
	--	Fields should now be syncronized
	DBMS_OUTPUT.PUT_LINE('Synchronize PO Field');
	UPDATE AD_Field f
		SET Name = (SELECT e.PO_Name FROM AD_Element e, AD_Column c
					WHERE e.AD_Element_ID=c.AD_Element_ID AND c.AD_Column_ID=f.AD_Column_ID),
			Description = (SELECT e.PO_Description FROM AD_Element e, AD_Column c
					WHERE e.AD_Element_ID=c.AD_Element_ID AND c.AD_Column_ID=f.AD_Column_ID),
			Help = (SELECT e.PO_Help FROM AD_Element e, AD_Column c
					WHERE e.AD_Element_ID=c.AD_Element_ID AND c.AD_Column_ID=f.AD_Column_ID),
			Updated = SysDate
	WHERE f.IsCentrallyMaintained='Y' AND f.IsActive='Y'
	  AND EXISTS (SELECT * FROM AD_Element e, AD_Column c
				WHERE f.AD_Column_ID=c.AD_Column_ID
				  AND c.AD_Element_ID=e.AD_Element_ID AND c.AD_Process_ID IS NULL
				  AND (f.Name <> e.PO_Name OR NVL(f.Description,' ') <> NVL(e.PO_Description,' ') OR NVL(f.Help,' ') <> NVL(e.PO_Help,' '))
				  AND e.PO_Name IS NOT NULL)
	  AND EXISTS (SELECT * FROM AD_Tab t, AD_Window w
				WHERE f.AD_Tab_ID=t.AD_Tab_ID
				  AND t.AD_Window_ID=w.AD_Window_ID
				  AND w.IsSOTrx='N');
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);
	*/
/*TODO  Jorg, please check ctxarea?
			sql = ""	UPDATE AD_Field f""
					+ "" SET Name = (SELECT e.Name FROM AD_Element e, AD_Column c""
					+ "" 			WHERE e.AD_Element_ID=c.AD_Element_ID AND c.AD_Column_ID=f.AD_Column_ID),""
					+ "" 	Description = (SELECT e.Description FROM AD_Element e, AD_Column c""
					+ "" 			WHERE e.AD_Element_ID=c.AD_Element_ID AND c.AD_Column_ID=f.AD_Column_ID),""
					+ "" 	Help = (SELECT e.Help FROM AD_Element e, AD_Column c""
					+ "" 			WHERE e.AD_Element_ID=c.AD_Element_ID AND c.AD_Column_ID=f.AD_Column_ID),""
					+ "" 	Updated = CURRENT_TIMESTAMP""
					+ "" WHERE f.IsCentrallyMaintained='Y' AND f.IsActive='Y'""
					+ ""   AND EXISTS (SELECT * FROM AD_Element e, AD_Column c""
					+ "" 			WHERE f.AD_Column_ID=c.AD_Column_ID""
					+ "" 			  AND c.AD_Element_ID=e.AD_Element_ID AND c.AD_Process_ID IS NULL""
					+ "" 			  AND (f.Name <> e.Name OR NVL(f.Description,' ') <> NVL(e.Description,' ') OR NVL(f.Help,' ') <> NVL(e.Help,' '))""
					+ "" 			  AND e.Name IS NOT NULL)""
					+ ""   AND EXISTS (SELECT * FROM AD_Tab t, AD_Window w""
					+ "" 			WHERE f.AD_Tab_ID=t.AD_Tab_ID""
					+ "" 			  AND t.AD_Window_ID=w.AD_Window_ID""
					+ "" 			  AND w.AD_CtxArea_ID IS NULL""
					+ "" 			  AND t.AD_CtxArea_ID IS NULL)"";
			executesql(""Synchronize PO Translations"", sql,  ""  rows updated: "");
			*/

			/*
	--	Field Translations
	DBMS_OUTPUT.PUT_LINE('Synchronize PO Field Translations');
	UPDATE AD_Field_trl trl
		SET Name = (SELECT e.PO_Name FROM AD_Element_trl e, AD_Column c, AD_Field f
					WHERE e.AD_Language=trl.AD_Language AND e.AD_Element_ID=c.AD_Element_ID
					  AND c.AD_Column_ID=f.AD_Column_ID AND f.AD_Field_ID=trl.AD_Field_ID),
			Description = (SELECT e.PO_Description FROM AD_Element_trl e, AD_Column c, AD_Field f
					WHERE e.AD_Language=trl.AD_Language AND e.AD_Element_ID=c.AD_Element_ID
					  AND c.AD_Column_ID=f.AD_Column_ID AND f.AD_Field_ID=trl.AD_Field_ID),
			Help = (SELECT e.PO_Help FROM AD_Element_trl e, AD_Column c, AD_Field f
					WHERE e.AD_Language=trl.AD_Language AND e.AD_Element_ID=c.AD_Element_ID
					  AND c.AD_Column_ID=f.AD_Column_ID AND f.AD_Field_ID=trl.AD_Field_ID),
			IsTranslated = (SELECT e.IsTranslated FROM AD_Element_trl e, AD_Column c, AD_Field f
					WHERE e.AD_Language=trl.AD_Language AND e.AD_Element_ID=c.AD_Element_ID
					  AND c.AD_Column_ID=f.AD_Column_ID AND f.AD_Field_ID=trl.AD_Field_ID),
			Updated = CURRENT_TIMESTAMP
	WHERE EXISTS (SELECT * FROM AD_Field f, AD_Element_trl e, AD_Column c
				WHERE trl.AD_Field_ID=f.AD_Field_ID
				  AND f.AD_Column_ID=c.AD_Column_ID
				  AND c.AD_Element_ID=e.AD_Element_ID AND c.AD_Process_ID IS NULL
				  AND trl.AD_Language=e.AD_Language
				  AND f.IsCentrallyMaintained='Y' AND f.IsActive='Y'
				  AND (trl.Name <> e.PO_Name OR NVL(trl.Description,' ') <> NVL(e.PO_Description,' ') OR NVL(trl.Help,' ') <> NVL(e.PO_Help,' '))
				  AND e.PO_Name IS NOT NULL)
	  AND EXISTS (SELECT * FROM AD_Field f, AD_Tab t, AD_Window w
				WHERE trl.AD_Field_ID=f.AD_Field_ID
				  AND f.AD_Tab_ID=t.AD_Tab_ID
				  AND t.AD_Window_ID=w.AD_Window_ID
				  AND w.IsSOTrx='N');
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);
	*/
			/*
			sql = ""	UPDATE AD_Field_trl trl""
					+ "" SET Name = (SELECT e.Name FROM AD_Element_trl e, AD_Column c, AD_Field f""
					+ "" 			WHERE e.AD_Language=trl.AD_Language AND e.AD_Element_ID=c.AD_Element_ID ""
					+ "" 			  AND c.AD_Column_ID=f.AD_Column_ID AND f.AD_Field_ID=trl.AD_Field_ID),""
					+ "" 	Description = (SELECT e.Description FROM AD_Element_trl e, AD_Column c, AD_Field f""
					+ "" 			WHERE e.AD_Language=trl.AD_Language AND e.AD_Element_ID=c.AD_Element_ID ""
					+ "" 			  AND c.AD_Column_ID=f.AD_Column_ID AND f.AD_Field_ID=trl.AD_Field_ID),""
					+ "" 	Help = (SELECT e.Help FROM AD_Element_trl e, AD_Column c, AD_Field f""
					+ "" 			WHERE e.AD_Language=trl.AD_Language AND e.AD_Element_ID=c.AD_Element_ID ""
					+ "" 			  AND c.AD_Column_ID=f.AD_Column_ID AND f.AD_Field_ID=trl.AD_Field_ID),""
					+ "" 	IsTranslated = (SELECT e.IsTranslated FROM AD_Element_trl e, AD_Column c, AD_Field f""
					+ "" 			WHERE e.AD_Language=trl.AD_Language AND e.AD_Element_ID=c.AD_Element_ID ""
					+ "" 			  AND c.AD_Column_ID=f.AD_Column_ID AND f.AD_Field_ID=trl.AD_Field_ID),""
					+ "" 	Updated = CURRENT_TIMESTAMP""
					+ "" 	WHERE EXISTS (SELECT * FROM AD_Field f, AD_Element_trl e, AD_Column c""
					+ "" 				WHERE trl.AD_Field_ID=f.AD_Field_ID""
					+ "" 				  AND f.AD_Column_ID=c.AD_Column_ID""
					+ "" 				  AND c.AD_Element_ID=e.AD_Element_ID AND c.AD_Process_ID IS NULL""
					+ "" 				  AND trl.AD_Language=e.AD_Language""
					+ "" 				  AND f.IsCentrallyMaintained='Y' AND f.IsActive='Y'""
					+ "" 				  AND (trl.Name <> e.Name OR NVL(trl.Description,' ') <> NVL(e.Description,' ') OR NVL(trl.Help,' ') <> NVL(e.Help,' '))""
					+ "" 				  AND e.Name IS NOT NULL)""
					+ "" 	  AND EXISTS (SELECT * FROM AD_Field f, AD_Tab t, AD_Window w""
					+ "" 				WHERE trl.AD_Field_ID=f.AD_Field_ID""
					+ "" 				  AND f.AD_Tab_ID=t.AD_Tab_ID""
					+ "" 				  AND t.AD_Window_ID=w.AD_Window_ID""
					+ "" 			  AND w.AD_CtxArea_ID IS NULL""
					+ "" 			  AND t.AD_CtxArea_ID IS NULL)"";
			executesql(""Synchronize PO Field Translations"", sql,  ""  rows updated: "");
			*/

			//
			sql = ""	UPDATE AD_Field f""
				+ "" SET Name = (SELECT e.Name FROM AD_ElementCTX e JOIN AD_Column c ON (e.AD_Element_ID=c.AD_Element_ID)""
				+ "" 			WHERE c.AD_Column_ID=f.AD_Column_ID""
				+ ""   				AND EXISTS (SELECT * FROM AD_Tab t JOIN AD_Window w ON (t.AD_Window_ID=w.AD_Window_ID)""
				+ "" 					WHERE f.AD_Tab_ID=t.AD_Tab_ID""
				+ "" 			  		AND (w.AD_CtxArea_ID IS NOT NULL AND t.AD_CtxArea_ID IS NULL AND e.AD_CtxArea_ID=w.AD_CtxArea_ID""
				+ "" 			  			OR t.AD_CtxArea_ID IS NOT NULL AND e.AD_CtxArea_ID=t.AD_CtxArea_ID))),""
				+ "" 	Description = (SELECT e.Description FROM AD_ElementCTX e JOIN AD_Column c ON (e.AD_Element_ID=c.AD_Element_ID)""
				+ "" 			WHERE c.AD_Column_ID=f.AD_Column_ID""
				+ ""   				AND EXISTS (SELECT * FROM AD_Tab t JOIN AD_Window w ON (t.AD_Window_ID=w.AD_Window_ID)""
				+ "" 					WHERE f.AD_Tab_ID=t.AD_Tab_ID""
				+ "" 			  		AND (w.AD_CtxArea_ID IS NOT NULL AND t.AD_CtxArea_ID IS NULL AND e.AD_CtxArea_ID=w.AD_CtxArea_ID""
				+ "" 			  			OR t.AD_CtxArea_ID IS NOT NULL AND e.AD_CtxArea_ID=t.AD_CtxArea_ID))),""
				+ "" 	Help = (SELECT e.Help FROM AD_ElementCTX e JOIN AD_Column c ON (e.AD_Element_ID=c.AD_Element_ID)""
				+ "" 			WHERE c.AD_Column_ID=f.AD_Column_ID""
				+ ""   				AND EXISTS (SELECT * FROM AD_Tab t JOIN AD_Window w ON (t.AD_Window_ID=w.AD_Window_ID)""
				+ "" 					WHERE f.AD_Tab_ID=t.AD_Tab_ID""
				+ "" 			  		AND (w.AD_CtxArea_ID IS NOT NULL AND t.AD_CtxArea_ID IS NULL AND e.AD_CtxArea_ID=w.AD_CtxArea_ID""
				+ "" 			  			OR t.AD_CtxArea_ID IS NOT NULL AND e.AD_CtxArea_ID=t.AD_CtxArea_ID))),""
				+ "" 	Updated = CURRENT_TIMESTAMP""
				+ "" WHERE f.IsCentrallyMaintained='Y' AND f.IsActive='Y'""
				+ ""   AND EXISTS (SELECT * FROM AD_ElementCTX e, AD_Column c, AD_Tab t, AD_Window w""
				+ "" 			WHERE f.AD_Column_ID=c.AD_Column_ID""
				+ "" 			  AND c.AD_Element_ID=e.AD_Element_ID AND c.AD_Process_ID IS NULL""
				+ "" 			  AND (f.Name <> e.Name OR NVL(f.Description,' ') <> NVL(e.Description,' ') OR NVL(f.Help,' ') <> NVL(e.Help,' '))""
				+ "" 			  AND e.Name IS NOT NULL""
				+ ""               AND t.AD_Tab_ID=f.AD_Tab_ID AND w.AD_Window_ID=t.AD_Window_ID""
				+ ""		          AND e.AD_CtxArea_ID = COALESCE(t.AD_CtxArea_ID,w.AD_CtxArea_ID))"";
		execute(""Synchronize Fields with ElementCTX"", sql,  ""  rows updated: "");

		//
		sql = ""	UPDATE AD_Field_trl trl""
			+ "" SET Name = (SELECT et.Name FROM AD_ElementCTX_trl et ""
			+ "" 				JOIN AD_ElementCTX e ON (et.AD_ElementCTX_ID=e.AD_ElementCTX_ID)""
			+ ""					JOIN AD_Column c ON (e.AD_Element_ID=c.AD_Element_ID) ""
			+ ""					JOIN AD_Field f ON (c.AD_Column_ID=f.AD_Column_ID)""
			+ "" 			WHERE et.AD_Language=trl.AD_Language AND f.AD_Field_ID=trl.AD_Field_ID""
			+ ""   				AND EXISTS (SELECT * FROM AD_Tab t JOIN AD_Window w ON (t.AD_Window_ID=w.AD_Window_ID)""
			+ "" 					WHERE f.AD_Tab_ID=t.AD_Tab_ID""
			+ "" 			  		AND (w.AD_CtxArea_ID IS NOT NULL AND t.AD_CtxArea_ID IS NULL AND e.AD_CtxArea_ID=w.AD_CtxArea_ID""
			+ "" 			  			OR t.AD_CtxArea_ID IS NOT NULL AND e.AD_CtxArea_ID=t.AD_CtxArea_ID))),""
			+ "" 	Description = (SELECT et.Description FROM AD_ElementCTX_trl et ""
			+ "" 				JOIN AD_ElementCTX e ON (et.AD_ElementCTX_ID=e.AD_ElementCTX_ID)""
			+ ""					JOIN AD_Column c ON (e.AD_Element_ID=c.AD_Element_ID) ""
			+ ""					JOIN AD_Field f ON (c.AD_Column_ID=f.AD_Column_ID)""
			+ "" 			WHERE et.AD_Language=trl.AD_Language AND f.AD_Field_ID=trl.AD_Field_ID""
			+ ""   				AND EXISTS (SELECT * FROM AD_Tab t JOIN AD_Window w ON (t.AD_Window_ID=w.AD_Window_ID)""
			+ "" 					WHERE f.AD_Tab_ID=t.AD_Tab_ID""
			+ "" 			  		AND (w.AD_CtxArea_ID IS NOT NULL AND t.AD_CtxArea_ID IS NULL AND e.AD_CtxArea_ID=w.AD_CtxArea_ID""
			+ "" 			  			OR t.AD_CtxArea_ID IS NOT NULL AND e.AD_CtxArea_ID=t.AD_CtxArea_ID))),""
			+ "" 	Help = (SELECT et.Help FROM AD_ElementCTX_trl et ""
			+ "" 				JOIN AD_ElementCTX e ON (et.AD_ElementCTX_ID=e.AD_ElementCTX_ID)""
			+ ""					JOIN AD_Column c ON (e.AD_Element_ID=c.AD_Element_ID) ""
			+ ""					JOIN AD_Field f ON (c.AD_Column_ID=f.AD_Column_ID)""
			+ "" 			WHERE et.AD_Language=trl.AD_Language AND f.AD_Field_ID=trl.AD_Field_ID""
			+ ""   				AND EXISTS (SELECT * FROM AD_Tab t JOIN AD_Window w ON (t.AD_Window_ID=w.AD_Window_ID)""
			+ "" 					WHERE f.AD_Tab_ID=t.AD_Tab_ID""
			+ "" 			  		AND (w.AD_CtxArea_ID IS NOT NULL AND t.AD_CtxArea_ID IS NULL AND e.AD_CtxArea_ID=w.AD_CtxArea_ID""
			+ "" 			  			OR t.AD_CtxArea_ID IS NOT NULL AND e.AD_CtxArea_ID=t.AD_CtxArea_ID))),""
			+ "" 	IsTranslated = (SELECT et.IsTranslated FROM AD_ElementCTX_trl et ""
			+ "" 				JOIN AD_ElementCTX e ON (et.AD_ElementCTX_ID=e.AD_ElementCTX_ID)""
			+ ""					JOIN AD_Column c ON (e.AD_Element_ID=c.AD_Element_ID) ""
			+ ""					JOIN AD_Field f ON (c.AD_Column_ID=f.AD_Column_ID)""
			+ "" 			WHERE et.AD_Language=trl.AD_Language AND f.AD_Field_ID=trl.AD_Field_ID""
			+ ""   				AND EXISTS (SELECT * FROM AD_Tab t JOIN AD_Window w ON (t.AD_Window_ID=w.AD_Window_ID)""
			+ "" 					WHERE f.AD_Tab_ID=t.AD_Tab_ID""
			+ "" 			  		AND (w.AD_CtxArea_ID IS NOT NULL AND t.AD_CtxArea_ID IS NULL AND e.AD_CtxArea_ID=w.AD_CtxArea_ID""
			+ "" 			  			OR t.AD_CtxArea_ID IS NOT NULL AND e.AD_CtxArea_ID=t.AD_CtxArea_ID))),""
			+ "" 	Updated = CURRENT_TIMESTAMP""
			+ "" 	WHERE EXISTS (SELECT * FROM AD_Field f, AD_ElementCTX_trl et, AD_ElementCTX e,  AD_Column c, AD_Tab t, AD_Window w""
			+ "" 				WHERE trl.AD_Field_ID=f.AD_Field_ID""
			+ "" 				  AND f.AD_Column_ID=c.AD_Column_ID""
			+ "" 				  AND c.AD_Element_ID=e.AD_Element_ID AND et.AD_ElementCTX_ID=e.AD_ElementCTX_ID AND c.AD_Process_ID IS NULL""
			+ "" 				  AND trl.AD_Language=et.AD_Language""
			+ "" 				  AND f.IsCentrallyMaintained='Y' AND f.IsActive='Y'""
			+ "" 				  AND (trl.Name <> et.Name OR NVL(trl.Description,' ') <> NVL(et.Description,' ') OR NVL(trl.Help,' ') <> NVL(et.Help,' '))""
			+ "" 				  AND et.Name IS NOT NULL""
			+ ""                   AND t.AD_Tab_ID=f.AD_Tab_ID AND w.AD_Window_ID=t.AD_Window_ID""
			+ ""                   AND e.AD_CtxArea_ID = COALESCE(t.AD_CtxArea_ID,w.AD_CtxArea_ID))"";
		execute(""Synchronize fields with context specific element translations"", sql,  ""  rows updated: "");

/*
	--	Fields from Process
	DBMS_OUTPUT.PUT_LINE('Synchronize Field from Process');
	UPDATE AD_Field f
		SET Name = (SELECT p.Name FROM AD_Process p, AD_Column c WHERE p.AD_Process_ID=c.AD_Process_ID
					AND c.AD_Column_ID=f.AD_Column_ID),
			Description = (SELECT p.Description FROM AD_Process p, AD_Column c WHERE p.AD_Process_ID=c.AD_Process_ID
					AND c.AD_Column_ID=f.AD_Column_ID),
			Help = (SELECT p.Help FROM AD_Process p, AD_Column c WHERE p.AD_Process_ID=c.AD_Process_ID
					AND c.AD_Column_ID=f.AD_Column_ID),
			Updated = SysDate
	WHERE f.IsCentrallyMaintained='Y' AND f.IsActive='Y'
	  AND EXISTS (SELECT * FROM AD_Process p, AD_Column c
				WHERE c.AD_Process_ID=p.AD_Process_ID AND f.AD_Column_ID=c.AD_Column_ID
				AND (f.Name<>p.Name OR NVL(f.Description,' ')<>NVL(p.Description,' ') OR NVL(f.Help,' ')<>NVL(p.Help,' ')));
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);
	*/
			sql = ""	UPDATE AD_Field f""
					+ "" SET Name = (SELECT p.Name FROM AD_Process p, AD_Column c WHERE p.AD_Process_ID=c.AD_Process_ID""
					+ "" 			AND c.AD_Column_ID=f.AD_Column_ID),""
					+ "" 	Description = (SELECT p.Description FROM AD_Process p, AD_Column c WHERE p.AD_Process_ID=c.AD_Process_ID""
					+ "" 			AND c.AD_Column_ID=f.AD_Column_ID),""
					+ "" 	Help = (SELECT p.Help FROM AD_Process p, AD_Column c WHERE p.AD_Process_ID=c.AD_Process_ID""
					+ "" 			AND c.AD_Column_ID=f.AD_Column_ID),""
					+ "" 	Updated = CURRENT_TIMESTAMP""
					+ "" WHERE f.IsCentrallyMaintained='Y' AND f.IsActive='Y' ""
					+ ""   AND EXISTS (SELECT * FROM AD_Process p, AD_Column c""
					+ "" 			WHERE c.AD_Process_ID=p.AD_Process_ID AND f.AD_Column_ID=c.AD_Column_ID""
					+ "" 			AND (f.Name<>p.Name OR NVL(f.Description,' ')<>NVL(p.Description,' ') OR NVL(f.Help,' ')<>NVL(p.Help,' ')))"";
			execute(""Synchronize Field from Process"", sql,  ""  rows updated: "");

	/*
	--	Field Translations from Process
	DBMS_OUTPUT.PUT_LINE('Synchronize Field Trl from Process Trl');
	UPDATE AD_Field_trl trl
		SET Name = (SELECT p.Name FROM AD_Process_trl p, AD_Column c, AD_Field f
					WHERE p.AD_Process_ID=c.AD_Process_ID AND c.AD_Column_ID=f.AD_Column_ID
					AND f.AD_Field_ID=trl.AD_Field_ID AND p.AD_Language=trl.AD_Language),
			Description = (SELECT p.Description FROM AD_Process_trl p, AD_Column c, AD_Field f
					WHERE p.AD_Process_ID=c.AD_Process_ID AND c.AD_Column_ID=f.AD_Column_ID
					AND f.AD_Field_ID=trl.AD_Field_ID AND p.AD_Language=trl.AD_Language),
			Help = (SELECT p.Help FROM AD_Process_trl p, AD_Column c, AD_Field f
					WHERE p.AD_Process_ID=c.AD_Process_ID AND c.AD_Column_ID=f.AD_Column_ID
					AND f.AD_Field_ID=trl.AD_Field_ID AND p.AD_Language=trl.AD_Language),
			IsTranslated = (SELECT p.IsTranslated FROM AD_Process_trl p, AD_Column c, AD_Field f
					WHERE p.AD_Process_ID=c.AD_Process_ID AND c.AD_Column_ID=f.AD_Column_ID
					AND f.AD_Field_ID=trl.AD_Field_ID AND p.AD_Language=trl.AD_Language),
			Updated = SysDate
	WHERE EXISTS (SELECT * FROM AD_Process_Trl p, AD_Column c, AD_Field f
				WHERE c.AD_Process_ID=p.AD_Process_ID AND f.AD_Column_ID=c.AD_Column_ID
				AND f.AD_Field_ID=trl.AD_Field_ID AND p.AD_Language=trl.AD_Language
				AND f.IsCentrallyMaintained='Y' AND f.IsActive='Y'
				AND (trl.Name<>p.Name OR NVL(trl.Description,' ')<>NVL(p.Description,' ') OR NVL(trl.Help,' ')<>NVL(p.Help,' ')));
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);
	*/
			sql = ""UPDATE AD_Field_trl trl""
					+ "" SET Name = (SELECT p.Name FROM AD_Process_trl p, AD_Column c, AD_Field f""
					+ "" 			WHERE p.AD_Process_ID=c.AD_Process_ID AND c.AD_Column_ID=f.AD_Column_ID""
					+ "" 			AND f.AD_Field_ID=trl.AD_Field_ID AND p.AD_Language=trl.AD_Language),""
					+ "" 	Description = (SELECT p.Description FROM AD_Process_trl p, AD_Column c, AD_Field f ""
					+ "" 			WHERE p.AD_Process_ID=c.AD_Process_ID AND c.AD_Column_ID=f.AD_Column_ID""
					+ "" 			AND f.AD_Field_ID=trl.AD_Field_ID AND p.AD_Language=trl.AD_Language),""
					+ "" 	Help = (SELECT p.Help FROM AD_Process_trl p, AD_Column c, AD_Field f ""
					+ "" 			WHERE p.AD_Process_ID=c.AD_Process_ID AND c.AD_Column_ID=f.AD_Column_ID""
					+ "" 			AND f.AD_Field_ID=trl.AD_Field_ID AND p.AD_Language=trl.AD_Language),""
					+ "" 	IsTranslated = (SELECT p.IsTranslated FROM AD_Process_trl p, AD_Column c, AD_Field f ""
					+ "" 			WHERE p.AD_Process_ID=c.AD_Process_ID AND c.AD_Column_ID=f.AD_Column_ID""
					+ "" 			AND f.AD_Field_ID=trl.AD_Field_ID AND p.AD_Language=trl.AD_Language),""
					+ "" 	Updated = CURRENT_TIMESTAMP""
					+ "" WHERE EXISTS (SELECT * FROM AD_Process_Trl p, AD_Column c, AD_Field f""
					+ "" 		WHERE c.AD_Process_ID=p.AD_Process_ID AND f.AD_Column_ID=c.AD_Column_ID""
					+ "" 		AND f.AD_Field_ID=trl.AD_Field_ID AND p.AD_Language=trl.AD_Language""
					+ "" 		AND f.IsCentrallyMaintained='Y' AND f.IsActive='Y'""
					+ "" 		AND (trl.Name<>p.Name OR NVL(trl.Description,' ')<>NVL(p.Description,' ') OR NVL(trl.Help,' ')<>NVL(p.Help,' ')))"";
			execute(""Synchronize Field Translations"", sql,  ""  rows updated: "");

	/*
	--	Sync Parameter ColumnName
	UPDATE	AD_Process_Para f
		SET	ColumnName = (SELECT e.ColumnName FROM AD_Element e
					WHERE UPPER(e.ColumnName)=UPPER(f.ColumnName))
	WHERE f.IsCentrallyMaintained='Y' AND f.IsActive='Y'
	  AND EXISTS (SELECT * FROM AD_Element e
		WHERE UPPER(e.ColumnName)=UPPER(f.ColumnName)
		AND e.ColumnName<>f.ColumnName);
	*/
			sql = ""	UPDATE AD_Process_Para f"" +
					"" SET ColumnName = (SELECT e.ColumnName FROM AD_Element e"" +
					"" WHERE UPPER(e.ColumnName)=UPPER(f.ColumnName))"" +
					"" WHERE f.IsCentrallyMaintained='Y' AND f.IsActive='Y'"" +
					"" AND EXISTS (SELECT * FROM AD_Element e"" +
					""  WHERE UPPER(e.ColumnName)=UPPER(f.ColumnName)"" +
					""  AND e.ColumnName<>f.ColumnName)"";
			execute(""Synchronize Parameter ColumnName"", sql,  ""  rows updated: "");

	/*


	--	Paramenter Fields
	UPDATE	AD_Process_Para p
	  SET	IsCentrallyMaintained = 'N'
	WHERE	IsCentrallyMaintained <> 'N'
	  AND NOT EXISTS (SELECT * FROM AD_Element e WHERE p.ColumnName=e.ColumnName);
	*/
			sql = ""	UPDATE	AD_Process_Para p"" +
					"" SET	IsCentrallyMaintained = 'N'"" +
					"" WHERE	IsCentrallyMaintained <> 'N'"" +
					"" AND NOT EXISTS (SELECT * FROM AD_Element e WHERE p.ColumnName=e.ColumnName)"";
			execute(""Synchronize Paramenter Fields"", sql,  ""  rows updated: "");

	/*
	--	Parameter Fields
	DBMS_OUTPUT.PUT_LINE('Synchronize Process Parameter');
	UPDATE AD_Process_Para f
		SET Name = (SELECT e.Name FROM AD_Element e
					WHERE e.ColumnName=f.ColumnName),
			Description = (SELECT e.Description FROM AD_Element e
					WHERE e.ColumnName=f.ColumnName),
			Help = (SELECT e.Help FROM AD_Element e
					WHERE e.ColumnName=f.ColumnName),
			Updated = SysDate
	WHERE f.IsCentrallyMaintained='Y' AND f.IsActive='Y'
	  AND EXISTS (SELECT * FROM AD_Element e
				WHERE e.ColumnName=f.ColumnName
				  AND (f.Name <> e.Name OR NVL(f.Description,' ') <> NVL(e.Description,' ') OR NVL(f.Help,' ') <> NVL(e.Help,' ')));
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);
	*/
			//TODO process, element, ctx relationships???
			sql = ""	UPDATE AD_Process_Para f"" +
					"" SET Name = (SELECT e.Name FROM AD_Element e"" +
					"" WHERE e.ColumnName=f.ColumnName),"" +
					"" Description = (SELECT e.Description FROM AD_Element e"" +
					"" WHERE e.ColumnName=f.ColumnName),"" +
					"" Help = (SELECT e.Help FROM AD_Element e"" +
					"" WHERE e.ColumnName=f.ColumnName),"" +
					"" Updated = CURRENT_TIMESTAMP"" +
					"" WHERE f.IsCentrallyMaintained='Y' AND f.IsActive='Y'"" +
					""   AND EXISTS (SELECT * FROM AD_Element e"" +
					"" 	  WHERE e.ColumnName=f.ColumnName"" +
					""     AND (f.Name <> e.Name OR NVL(f.Description,' ') <> NVL(e.Description,' ') OR NVL(f.Help,' ') <> NVL(e.Help,' ')))"" +
					"" AND NOT EXISTS ("" +
					""   SELECT * FROM AD_Process p, AD_Element e, AD_ElementCTX ec"" +
					""   WHERE p.AD_Process_ID=f.AD_Process_ID"" +
					""   AND e.ColumnName=f.ColumnName"" +
					""   AND ec.AD_Element_ID=e.AD_Element_ID"" +
					""   AND ec.AD_CtxArea_ID=p.AD_CtxArea_ID)"";
			execute(""Synchronize Process Parameter with Element"", sql,  ""  rows updated: "");

			sql = ""	UPDATE AD_Process_Para f"" +
					"" SET Name = (SELECT e.Name FROM AD_ElementCTX e "" +
					""				JOIN AD_Element el ON (e.AD_Element_ID=el.AD_Element_ID)"" +
					""				JOIN AD_Process p ON (p.AD_CtxArea_ID=e.AD_CtxArea_ID)"" +
					""   			WHERE el.ColumnName=f.ColumnName AND "" +
					""   	 			p.AD_Process_ID=f.AD_Process_ID),"" +
					"" Description = (SELECT e.Description FROM AD_ElementCTX e "" +
					""				JOIN AD_Element el ON (e.AD_Element_ID=el.AD_Element_ID)"" +
					""				JOIN AD_Process p ON (p.AD_CtxArea_ID=e.AD_CtxArea_ID)"" +
					""   			WHERE el.ColumnName=f.ColumnName AND "" +
					""   	 			p.AD_Process_ID=f.AD_Process_ID),"" +
					"" Help = (SELECT e.Help FROM AD_ElementCTX e "" +
					""				JOIN AD_Element el ON (e.AD_Element_ID=el.AD_Element_ID)"" +
					""				JOIN AD_Process p ON (p.AD_CtxArea_ID=e.AD_CtxArea_ID)"" +
					""   			WHERE el.ColumnName=f.ColumnName AND "" +
					""   	 			p.AD_Process_ID=f.AD_Process_ID),"" +
					"" Updated = CURRENT_TIMESTAMP"" +
					"" WHERE f.IsCentrallyMaintained='Y' AND f.IsActive='Y'"" +
					""   AND EXISTS (SELECT * FROM AD_Process p, AD_Element e, AD_ElementCTX ec"" +
					"" 	  WHERE e.ColumnName=f.ColumnName"" +
					""     AND (f.Name <> e.Name OR NVL(f.Description,' ') <> NVL(e.Description,' ') OR NVL(f.Help,' ') <> NVL(e.Help,' '))"" +
					""     AND p.AD_Process_ID=f.AD_Process_ID"" +
					""     AND ec.AD_Element_ID=e.AD_Element_ID"" +
					""     AND ec.AD_CtxArea_ID=p.AD_CtxArea_ID)"";

			execute(""Synchronize Process Parameter with ElementCTX"", sql,  ""  rows updated: "");

	/*

	--	Parameter Translations
	DBMS_OUTPUT.PUT_LINE('Synchronize Process Parameter Trl');
	UPDATE AD_Process_Para_Trl trl
		SET Name = (SELECT et.Name FROM AD_Element_Trl et, AD_Element e, AD_Process_Para f
					WHERE et.AD_Language=trl.AD_Language AND et.AD_Element_ID=e.AD_Element_ID
					  AND e.ColumnName=f.ColumnName AND f.AD_Process_Para_ID=trl.AD_Process_Para_ID),
			Description = (SELECT et.Description FROM AD_Element_Trl et, AD_Element e, AD_Process_Para f
					WHERE et.AD_Language=trl.AD_Language AND et.AD_Element_ID=e.AD_Element_ID
					  AND e.ColumnName=f.ColumnName AND f.AD_Process_Para_ID=trl.AD_Process_Para_ID),
			Help = (SELECT et.Help FROM AD_Element_Trl et, AD_Element e, AD_Process_Para f
					WHERE et.AD_Language=trl.AD_Language AND et.AD_Element_ID=e.AD_Element_ID
					  AND e.ColumnName=f.ColumnName AND f.AD_Process_Para_ID=trl.AD_Process_Para_ID),
			IsTranslated = (SELECT et.IsTranslated FROM AD_Element_Trl et, AD_Element e, AD_Process_Para f
					WHERE et.AD_Language=trl.AD_Language AND et.AD_Element_ID=e.AD_Element_ID
					  AND e.ColumnName=f.ColumnName AND f.AD_Process_Para_ID=trl.AD_Process_Para_ID),
			Updated = SysDate
	WHERE EXISTS (SELECT * FROM AD_Element_Trl et, AD_Element e, AD_Process_Para f
					WHERE et.AD_Language=trl.AD_Language AND et.AD_Element_ID=e.AD_Element_ID
					  AND e.ColumnName=f.ColumnName AND f.AD_Process_Para_ID=trl.AD_Process_Para_ID
					  AND f.IsCentrallyMaintained='Y' AND f.IsActive='Y'
					  AND (trl.Name <> et.Name OR NVL(trl.Description,' ') <> NVL(et.Description,' ') OR NVL(trl.Help,' ') <> NVL(et.Help,' ')));
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);
	*/
			sql = ""	UPDATE AD_Process_Para_Trl trl"" +
					"" SET Name = (SELECT et.Name FROM AD_Element_Trl et, AD_Element e, AD_Process_Para f"" +
					"" 	  WHERE et.AD_Language=trl.AD_Language AND et.AD_Element_ID=e.AD_Element_ID"" +
					""     AND e.ColumnName=f.ColumnName AND f.AD_Process_Para_ID=trl.AD_Process_Para_ID),"" +
					""   Description = (SELECT et.Description FROM AD_Element_Trl et, AD_Element e, AD_Process_Para f"" +
					"" 	  WHERE et.AD_Language=trl.AD_Language AND et.AD_Element_ID=e.AD_Element_ID"" +
					""     AND e.ColumnName=f.ColumnName AND f.AD_Process_Para_ID=trl.AD_Process_Para_ID),"" +
					"" 	Help = (SELECT et.Help FROM AD_Element_Trl et, AD_Element e, AD_Process_Para f "" +
					"" 	  WHERE et.AD_Language=trl.AD_Language AND et.AD_Element_ID=e.AD_Element_ID"" +
					"" 	  AND e.ColumnName=f.ColumnName AND f.AD_Process_Para_ID=trl.AD_Process_Para_ID),"" +
					"" 	IsTranslated = (SELECT et.IsTranslated FROM AD_Element_Trl et, AD_Element e, AD_Process_Para f"" +
					"" 	  WHERE et.AD_Language=trl.AD_Language AND et.AD_Element_ID=e.AD_Element_ID"" +
					""     AND e.ColumnName=f.ColumnName AND f.AD_Process_Para_ID=trl.AD_Process_Para_ID),"" +
					"" 	Updated = CURRENT_TIMESTAMP"" +
					"" 	WHERE EXISTS (SELECT * FROM AD_Element_Trl et, AD_Element e, AD_Process_Para f"" +
					"" 	      WHERE et.AD_Language=trl.AD_Language AND et.AD_Element_ID=e.AD_Element_ID"" +
					"" 		  AND e.ColumnName=f.ColumnName AND f.AD_Process_Para_ID=trl.AD_Process_Para_ID"" +
					"" 		  AND f.IsCentrallyMaintained='Y' AND f.IsActive='Y'"" +
					"" 		  AND (trl.Name <> et.Name OR NVL(trl.Description,' ') <> NVL(et.Description,' ') OR NVL(trl.Help,' ') <> NVL(et.Help,' ')))"" +
					""  	AND NOT EXISTS ("" +
					""     SELECT * "" +
					""     FROM AD_Process_Para f, AD_Process p, AD_Element e, AD_ElementCtx ec"" +
					""     WHERE f.AD_Process_Para_ID=trl.AD_Process_Para_ID"" +
					""     AND p.AD_Process_ID=f.AD_Process_ID"" +
					""     AND e.ColumnName=f.ColumnName"" +
					""     AND ec.AD_Element_ID=e.AD_Element_ID"" +
					""     AND ec.AD_CtxArea_ID=p.AD_CtxArea_ID)"";
			execute(""Synchronize Process Parameter Trl with Element Trl"", sql,  ""  rows updated: "");


			sql = ""	UPDATE AD_Process_Para_Trl trl"" +
					"" SET Name = (SELECT et.Name FROM AD_ElementCTX_Trl et, AD_ElementCTX ec, AD_Element e, AD_Process_Para f, AD_Process p"" +
							"" WHERE et.AD_Language=trl.AD_Language AND ec.AD_Element_ID=e.AD_Element_ID AND et.AD_ElementCTX_ID=ec.AD_ElementCTX_ID"" +
							"" AND e.ColumnName=f.ColumnName AND f.AD_Process_Para_ID=trl.AD_Process_Para_ID "" +
							""AND p.AD_CtxArea_ID=ec.AD_CtxArea_ID AND p.AD_Process_ID=f.AD_Process_ID),"" +
					""   Description = (SELECT et.Description FROM AD_ElementCTX_Trl et, AD_ElementCTX ec, AD_Element e, AD_Process_Para f, AD_Process p"" +
							"" WHERE et.AD_Language=trl.AD_Language AND ec.AD_Element_ID=e.AD_Element_ID AND et.AD_ElementCTX_ID=ec.AD_ElementCTX_ID"" +
							"" AND e.ColumnName=f.ColumnName AND f.AD_Process_Para_ID=trl.AD_Process_Para_ID "" +
							""AND p.AD_CtxArea_ID=ec.AD_CtxArea_ID AND p.AD_Process_ID=f.AD_Process_ID),"" +
					"" 	Help = (SELECT et.Help FROM AD_ElementCTX_Trl et, AD_ElementCTX ec, AD_Element e, AD_Process_Para f, AD_Process p"" +
							"" WHERE et.AD_Language=trl.AD_Language AND ec.AD_Element_ID=e.AD_Element_ID AND et.AD_ElementCTX_ID=ec.AD_ElementCTX_ID"" +
							"" AND e.ColumnName=f.ColumnName AND f.AD_Process_Para_ID=trl.AD_Process_Para_ID "" +
							""AND p.AD_CtxArea_ID=ec.AD_CtxArea_ID AND p.AD_Process_ID=f.AD_Process_ID),"" +
					"" 	IsTranslated = (SELECT et.IsTranslated FROM AD_ElementCTX_Trl et, AD_ElementCTX ec, AD_Element e, AD_Process_Para f, AD_Process p"" +
							"" WHERE et.AD_Language=trl.AD_Language AND ec.AD_Element_ID=e.AD_Element_ID AND et.AD_ElementCTX_ID=ec.AD_ElementCTX_ID"" +
							"" AND e.ColumnName=f.ColumnName AND f.AD_Process_Para_ID=trl.AD_Process_Para_ID "" +
							""AND p.AD_CtxArea_ID=ec.AD_CtxArea_ID AND p.AD_Process_ID=f.AD_Process_ID),"" +
					"" 	Updated = CURRENT_TIMESTAMP"" +
					"" 	WHERE EXISTS (SELECT * FROM AD_ElementCTX_Trl et, AD_ElementCTX ec, AD_Element e, AD_Process_Para f, AD_Process p"" +
					"" 	      WHERE et.AD_Language=trl.AD_Language AND ec.AD_Element_ID=e.AD_Element_ID"" +
					""         AND et.AD_ElementCTX_ID=ec.AD_ElementCTX_ID"" +
					"" 		  AND e.ColumnName=f.ColumnName AND f.AD_Process_Para_ID=trl.AD_Process_Para_ID"" +
					"" 		  AND p.AD_Process_ID=f.AD_Process_ID AND trl.AD_Process_Para_ID=f.AD_Process_Para_ID"" +
					"" 		  AND p.AD_CtxArea_ID IS NOT NULL AND p.AD_CtxArea_ID=ec.AD_CtxArea_ID"" +
					"" 		  AND f.IsCentrallyMaintained='Y' AND f.IsActive='Y'"" +
					"" 		  AND (trl.Name <> et.Name OR NVL(trl.Description,' ') <> NVL(et.Description,' ') OR NVL(trl.Help,' ') <> NVL(et.Help,' ')))"";
			execute(""Synchronize Process Parameter Trl with ElementCTX Trl"", sql,  ""  rows updated: "");

	/*


	--	Workflow Node - Window
	DBMS_OUTPUT.PUT_LINE('Synchronize Workflow Node from Window');
	UPDATE AD_WF_Node n
		SET Name = (SELECT w.Name FROM AD_Window w
					WHERE w.AD_Window_ID=n.AD_Window_ID),
			Description = (SELECT w.Description FROM AD_Window w
					WHERE w.AD_Window_ID=n.AD_Window_ID),
			Help = (SELECT w.Help FROM AD_Window w
					WHERE w.AD_Window_ID=n.AD_Window_ID)
	WHERE n.IsCentrallyMaintained = 'Y'
	  AND EXISTS  (SELECT * FROM AD_Window w
				WHERE w.AD_Window_ID=n.AD_Window_ID
				  AND (w.Name <> n.Name OR NVL(w.Description,' ') <> NVL(n.Description,' ') OR NVL(w.Help,' ') <> NVL(n.Help,' ')));
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);
	*/
			sql = ""	UPDATE AD_WF_Node n"" +
					"" SET Name = (SELECT w.Name FROM AD_Window w"" +
					"" 	WHERE w.AD_Window_ID=n.AD_Window_ID),"" +
					"" Description = (SELECT w.Description FROM AD_Window w"" +
					"" 	WHERE w.AD_Window_ID=n.AD_Window_ID),"" +
					"" Help = (SELECT w.Help FROM AD_Window w"" +
					"" 	WHERE w.AD_Window_ID=n.AD_Window_ID)"" +
					"" WHERE n.IsCentrallyMaintained = 'Y'"" +
					"" 	  AND EXISTS  (SELECT * FROM AD_Window w"" +
					"" 		WHERE w.AD_Window_ID=n.AD_Window_ID"" +
					"" 		  AND (w.Name <> n.Name OR NVL(w.Description,' ') <> NVL(n.Description,' ') OR NVL(w.Help,' ') <> NVL(n.Help,' ')))"";
			execute(""Synchronize Workflow Node from Window"", sql,  ""  rows updated: "");
	/*

	--	Workflow Translations - Window
	DBMS_OUTPUT.PUT_LINE('Synchronize Workflow Node Trl from Window Trl');
	UPDATE AD_WF_Node_Trl trl
		SET Name = (SELECT t.Name FROM AD_Window_trl t, AD_WF_Node n
					WHERE trl.AD_WF_Node_ID=n.AD_WF_Node_ID AND n.AD_Window_ID=t.AD_Window_ID
					  AND trl.AD_Language=t.AD_Language),
			Description = (SELECT t.Description FROM AD_Window_trl t, AD_WF_Node n
					WHERE trl.AD_WF_Node_ID=n.AD_WF_Node_ID AND n.AD_Window_ID=t.AD_Window_ID
					  AND trl.AD_Language=t.AD_Language),
			Help = (SELECT t.Help FROM AD_Window_trl t, AD_WF_Node n
					WHERE trl.AD_WF_Node_ID=n.AD_WF_Node_ID AND n.AD_Window_ID=t.AD_Window_ID
					  AND trl.AD_Language=t.AD_Language)
	WHERE EXISTS (SELECT * FROM AD_Window_Trl t, AD_WF_Node n
				WHERE trl.AD_WF_Node_ID=n.AD_WF_Node_ID AND n.AD_Window_ID=t.AD_Window_ID
				  AND trl.AD_Language=t.AD_Language AND n.IsCentrallyMaintained='Y' AND n.IsActive='Y'
				  AND (trl.Name <> t.Name OR NVL(trl.Description,' ') <> NVL(t.Description,' ') OR NVL(trl.Help,' ') <> NVL(t.Help,' ')));
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);
	*/
			sql = ""	UPDATE AD_WF_Node_Trl trl"" +
					"" SET Name = (SELECT t.Name FROM AD_Window_trl t, AD_WF_Node n"" +
					"" 	WHERE trl.AD_WF_Node_ID=n.AD_WF_Node_ID AND n.AD_Window_ID=t.AD_Window_ID"" +
					"" 		  AND trl.AD_Language=t.AD_Language),"" +
					"" Description = (SELECT t.Description FROM AD_Window_trl t, AD_WF_Node n"" +
					"" 	WHERE trl.AD_WF_Node_ID=n.AD_WF_Node_ID AND n.AD_Window_ID=t.AD_Window_ID"" +
					"" 		  AND trl.AD_Language=t.AD_Language),"" +
					"" Help = (SELECT t.Help FROM AD_Window_trl t, AD_WF_Node n"" +
					"" 	WHERE trl.AD_WF_Node_ID=n.AD_WF_Node_ID AND n.AD_Window_ID=t.AD_Window_ID"" +
					"" 		  AND trl.AD_Language=t.AD_Language)"" +
					"" WHERE EXISTS (SELECT * FROM AD_Window_Trl t, AD_WF_Node n"" +
					"" 	WHERE trl.AD_WF_Node_ID=n.AD_WF_Node_ID AND n.AD_Window_ID=t.AD_Window_ID"" +
					"" 		  AND trl.AD_Language=t.AD_Language AND n.IsCentrallyMaintained='Y' AND n.IsActive='Y'"" +
					"" 		  AND (trl.Name <> t.Name OR NVL(trl.Description,' ') <> NVL(t.Description,' ') OR NVL(trl.Help,' ') <> NVL(t.Help,' ')))"";
			execute(""Synchronize Workflow Node Trl from Window Trl"", sql,  ""  rows updated: "");

	/*

	--	Workflow Node - Form
	DBMS_OUTPUT.PUT_LINE('Synchronize Workflow Node from Form');
	UPDATE AD_WF_Node n
		SET (Name, Description, Help) = (SELECT f.Name, f.Description, f.Help
				FROM AD_Form f
				WHERE f.AD_Form_ID=n.AD_Form_ID)
	WHERE n.IsCentrallyMaintained = 'Y'
	  AND EXISTS  (SELECT * FROM AD_Form f
				WHERE f.AD_Form_ID=n.AD_Form_ID
				  AND (f.Name <> n.Name OR NVL(f.Description,' ') <> NVL(n.Description,' ') OR NVL(f.Help,' ') <> NVL(n.Help,' ')));
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);
	*/
			sql = ""	UPDATE AD_WF_Node n"" +
					"" SET (Name, Description, Help) = (SELECT f.Name, f.Description, f.Help "" +
					""   FROM AD_Form f"" +
					"" 	WHERE f.AD_Form_ID=n.AD_Form_ID)"" +
					"" WHERE n.IsCentrallyMaintained = 'Y'"" +
					""   AND EXISTS  (SELECT * FROM AD_Form f"" +
					"" 			WHERE f.AD_Form_ID=n.AD_Form_ID"" +
					"" 			  AND (f.Name <> n.Name OR NVL(f.Description,' ') <> NVL(n.Description,' ') OR NVL(f.Help,' ') <> NVL(n.Help,' ')))"";
			execute(""Synchronize Workflow Node from Form"", sql,  ""  rows updated: "");

	/*

	--	Workflow Translations - Form
	DBMS_OUTPUT.PUT_LINE('Synchronize Workflow Node Trl from Form Trl');
	UPDATE AD_WF_Node_Trl trl
		SET (Name, Description, Help) = (SELECT t.Name, t.Description, t.Help
			FROM AD_Form_trl t, AD_WF_Node n
			WHERE trl.AD_WF_Node_ID=n.AD_WF_Node_ID AND n.AD_Form_ID=t.AD_Form_ID
			  AND trl.AD_Language=t.AD_Language)
	WHERE EXISTS (SELECT * FROM AD_Form_Trl t, AD_WF_Node n
				WHERE trl.AD_WF_Node_ID=n.AD_WF_Node_ID AND n.AD_Form_ID=t.AD_Form_ID
				  AND trl.AD_Language=t.AD_Language AND n.IsCentrallyMaintained='Y' AND n.IsActive='Y'
				  AND (trl.Name <> t.Name OR NVL(trl.Description,' ') <> NVL(t.Description,' ') OR NVL(trl.Help,' ') <> NVL(t.Help,' ')));
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);
	*/
			sql = ""	UPDATE AD_WF_Node_Trl trl"" +
					"" SET (Name, Description, Help) = (SELECT t.Name, t.Description, t.Help"" +
					""   FROM AD_Form_trl t, AD_WF_Node n"" +
					"" 	WHERE trl.AD_WF_Node_ID=n.AD_WF_Node_ID AND n.AD_Form_ID=t.AD_Form_ID"" +
					"" 	  AND trl.AD_Language=t.AD_Language)"" +
					"" WHERE EXISTS (SELECT * FROM AD_Form_Trl t, AD_WF_Node n"" +
					"" 	WHERE trl.AD_WF_Node_ID=n.AD_WF_Node_ID AND n.AD_Form_ID=t.AD_Form_ID"" +
					"" 	  AND trl.AD_Language=t.AD_Language AND n.IsCentrallyMaintained='Y' AND n.IsActive='Y'"" +
					"" 	  AND (trl.Name <> t.Name OR NVL(trl.Description,' ') <> NVL(t.Description,' ') OR NVL(trl.Help,' ') <> NVL(t.Help,' ')))"";
			execute(""Synchronize Workflow Node Trl from Form Trl"", sql,  ""  rows updated: "");

	/*

	--	Workflow Node - Report
	DBMS_OUTPUT.PUT_LINE('Synchronize Workflow Node from Process');
	UPDATE AD_WF_Node n
		SET (Name, Description, Help) = (SELECT f.Name, f.Description, f.Help
				FROM AD_Process f
				WHERE f.AD_Process_ID=n.AD_Process_ID)
	WHERE n.IsCentrallyMaintained = 'Y'
	  AND EXISTS  (SELECT * FROM AD_Process f
				WHERE f.AD_Process_ID=n.AD_Process_ID
				  AND (f.Name <> n.Name OR NVL(f.Description,' ') <> NVL(n.Description,' ') OR NVL(f.Help,' ') <> NVL(n.Help,' ')));
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);
	*/
			sql = ""	UPDATE AD_WF_Node n"" +
					"" SET (Name, Description, Help) = (SELECT f.Name, f.Description, f.Help"" +
					"" 	FROM AD_Process f"" +
					"" 	WHERE f.AD_Process_ID=n.AD_Process_ID)"" +
					"" WHERE n.IsCentrallyMaintained = 'Y'"" +
					""   AND EXISTS  (SELECT * FROM AD_Process f"" +
					"" 		WHERE f.AD_Process_ID=n.AD_Process_ID"" +
					"" 		  AND (f.Name <> n.Name OR NVL(f.Description,' ') <> NVL(n.Description,' ') OR NVL(f.Help,' ') <> NVL(n.Help,' ')))"";
			execute(""Synchronize Workflow Node from Process"", sql,  ""  rows updated: "");

	/*

	--	Workflow Translations - Form
	DBMS_OUTPUT.PUT_LINE('Synchronize Workflow Node Trl from Process Trl');
	UPDATE AD_WF_Node_Trl trl
		SET (Name, Description, Help) = (SELECT t.Name, t.Description, t.Help
			FROM AD_Process_trl t, AD_WF_Node n
			WHERE trl.AD_WF_Node_ID=n.AD_WF_Node_ID AND n.AD_Process_ID=t.AD_Process_ID
			  AND trl.AD_Language=t.AD_Language)
	WHERE EXISTS (SELECT * FROM AD_Process_Trl t, AD_WF_Node n
				WHERE trl.AD_WF_Node_ID=n.AD_WF_Node_ID AND n.AD_Process_ID=t.AD_Process_ID
				  AND trl.AD_Language=t.AD_Language AND n.IsCentrallyMaintained='Y' AND n.IsActive='Y'
				  AND (trl.Name <> t.Name OR NVL(trl.Description,' ') <> NVL(t.Description,' ') OR NVL(trl.Help,' ') <> NVL(t.Help,' ')));
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);
	*/
			sql = ""	UPDATE AD_WF_Node_Trl trl"" +
					"" SET (Name, Description, Help) = (SELECT t.Name, t.Description, t.Help"" +
					"" 		FROM AD_Process_trl t, AD_WF_Node n"" +
					"" 		WHERE trl.AD_WF_Node_ID=n.AD_WF_Node_ID AND n.AD_Process_ID=t.AD_Process_ID"" +
					"" 		  AND trl.AD_Language=t.AD_Language)"" +
					"" WHERE EXISTS (SELECT * FROM AD_Process_Trl t, AD_WF_Node n"" +
					"" 		WHERE trl.AD_WF_Node_ID=n.AD_WF_Node_ID AND n.AD_Process_ID=t.AD_Process_ID"" +
					"" 		  AND trl.AD_Language=t.AD_Language AND n.IsCentrallyMaintained='Y' AND n.IsActive='Y'"" +
					"" 		  AND (trl.Name <> t.Name OR NVL(trl.Description,' ') <> NVL(t.Description,' ') OR NVL(trl.Help,' ') <> NVL(t.Help,' ')))"";
			execute(""Synchronize Workflow Node Trl from Process Trl"", sql,  ""  rows updated: "");

	/*

    --  Need centrally maintained flag here!
	DBMS_OUTPUT.PUT_LINE('Synchronize PrintFormatItem Name from Element');
	UPDATE AD_PrintFormatItem pfi
	  SET Name = (SELECT e.Name
		FROM AD_Element e, AD_Column c
		WHERE e.AD_Element_ID=c.AD_Element_ID
		  AND c.AD_Column_ID=pfi.AD_Column_ID)
	WHERE pfi.IsCentrallyMaintained='Y'
      AND EXISTS (SELECT *
		FROM AD_Element e, AD_Column c
		WHERE e.AD_Element_ID=c.AD_Element_ID
		  AND c.AD_Column_ID=pfi.AD_Column_ID
		  AND e.Name<>pfi.Name)
	  AND EXISTS (SELECT * FROM AD_Client
		WHERE AD_Client_ID=pfi.AD_Client_ID --AND IsMultiLingualDocument='Y');
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);
	*/
			sql = ""	UPDATE AD_PrintFormatItem pfi"" +
					""	  SET Name = (SELECT e.Name"" +
					""		FROM AD_Element e, AD_Column c"" +
					""		WHERE e.AD_Element_ID=c.AD_Element_ID"" +
					""		  AND c.AD_Column_ID=pfi.AD_Column_ID)"" +
					""	WHERE pfi.IsCentrallyMaintained='Y'"" +
					""      AND EXISTS (SELECT *"" +
					""		FROM AD_Element e, AD_Column c"" +
					""		WHERE e.AD_Element_ID=c.AD_Element_ID"" +
					""		  AND c.AD_Column_ID=pfi.AD_Column_ID"" +
					""		  AND e.Name<>pfi.Name)"" +
					""	  AND EXISTS (SELECT * FROM AD_Client"" +
					""		WHERE AD_Client_ID=pfi.AD_Client_ID)""; // AND IsMultiLingualDocument='Y')"";
			execute(""Synchronize PrintFormatItem Name from Element"", sql,  ""  rows updated: "");

	/*

	DBMS_OUTPUT.PUT_LINE('Synchronize PrintFormatItem PrintName from Element');
	UPDATE AD_PrintFormatItem pfi
	  SET PrintName = (SELECT e.PrintName
		FROM AD_Element e, AD_Column c
		WHERE e.AD_Element_ID=c.AD_Element_ID
		  AND c.AD_Column_ID=pfi.AD_Column_ID)
	WHERE pfi.IsCentrallyMaintained='Y'
      AND EXISTS (SELECT *
		FROM AD_Element e, AD_Column c, AD_PrintFormat pf
		WHERE e.AD_Element_ID=c.AD_Element_ID
		  AND c.AD_Column_ID=pfi.AD_Column_ID
		  AND LENGTH(pfi.PrintName) > 0
		  AND e.PrintName<>pfi.PrintName
		  AND pf.AD_PrintFormat_ID=pfi.AD_PrintFormat_ID
		  AND pf.IsForm='N' AND IsTableBased='Y')
	  AND EXISTS (SELECT * FROM AD_Client
  		WHERE AD_Client_ID=pfi.AD_Client_ID AND (IsMultiLingualDocument='Y' OR AD_Client_ID IN (0,11)))
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);
	*/
			sql = ""	UPDATE AD_PrintFormatItem pfi ""
			+ ""SET PrintName = (SELECT e.PrintName ""
				+ ""FROM AD_Element e, AD_Column c ""
				+ ""WHERE e.AD_Element_ID=c.AD_Element_ID""
				+ "" AND c.AD_Column_ID=pfi.AD_Column_ID) ""
			+ ""WHERE pfi.IsCentrallyMaintained='Y'""
			+ "" AND EXISTS (SELECT * ""
				+ ""FROM AD_Element e, AD_Column c, AD_PrintFormat pf ""
				+ ""WHERE e.AD_Element_ID=c.AD_Element_ID""
				+ "" AND c.AD_Column_ID=pfi.AD_Column_ID""
				+ "" AND LENGTH(pfi.PrintName) > 0""
				+ "" AND e.PrintName<>pfi.PrintName""
				+ "" AND pf.AD_PrintFormat_ID=pfi.AD_PrintFormat_ID""
				+ "" AND pf.IsForm='N' AND IsTableBased='Y')""
			+ "" AND EXISTS (SELECT * FROM AD_Client""
				+ ""	WHERE AD_Client_ID=pfi.AD_Client_ID AND (IsMultiLingualDocument='Y' OR AD_Client_ID IN (0,11)))"";
			execute(""Synchronize PrintFormatItem PrintName from Element"", sql,  ""  rows updated: "");

	/*

	DBMS_OUTPUT.PUT_LINE('Synchronize PrintFormatItem Trl from Element Trl (Multi-Lingual)');
	UPDATE AD_PrintFormatItem_Trl trl
	  SET PrintName = (SELECT e.PrintName
		FROM AD_Element_Trl e, AD_Column c, AD_PrintFormatItem pfi
		WHERE e.AD_Language=trl.AD_Language
		  AND e.AD_Element_ID=c.AD_Element_ID
		  AND c.AD_Column_ID=pfi.AD_Column_ID
		  AND pfi.AD_PrintFormatItem_ID=trl.AD_PrintFormatItem_ID)
	WHERE EXISTS (SELECT *
		FROM AD_Element_Trl e, AD_Column c, AD_PrintFormatItem pfi, AD_PrintFormat pf
		WHERE e.AD_Language=trl.AD_Language
		  AND e.AD_Element_ID=c.AD_Element_ID
		  AND c.AD_Column_ID=pfi.AD_Column_ID
		  AND pfi.AD_PrintFormatItem_ID=trl.AD_PrintFormatItem_ID
          AND pfi.IsCentrallyMaintained='Y'
		  AND LENGTH(pfi.PrintName) > 0
		  AND (e.PrintName<>trl.PrintName OR trl.PrintName IS NULL)
		  AND pf.AD_PrintFormat_ID=pfi.AD_PrintFormat_ID
		  AND pf.IsForm='N' AND IsTableBased='Y')
	  AND EXISTS (SELECT * FROM AD_Client
		WHERE AD_Client_ID=trl.AD_Client_ID AND IsMultiLingualDocument='Y');
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);
	*/
			sql = ""	UPDATE AD_PrintFormatItem_Trl trl"" +
					""	  SET PrintName = (SELECT e.PrintName"" +
					""		FROM AD_Element_Trl e, AD_Column c, AD_PrintFormatItem pfi"" +
					""		WHERE e.AD_Language=trl.AD_Language"" +
					""		  AND e.AD_Element_ID=c.AD_Element_ID"" +
					""		  AND c.AD_Column_ID=pfi.AD_Column_ID"" +
					""		  AND pfi.AD_PrintFormatItem_ID=trl.AD_PrintFormatItem_ID)"" +
					""	WHERE EXISTS (SELECT *"" +
					""		FROM AD_Element_Trl e, AD_Column c, AD_PrintFormatItem pfi, AD_PrintFormat pf"" +
					""		WHERE e.AD_Language=trl.AD_Language"" +
					""		  AND e.AD_Element_ID=c.AD_Element_ID"" +
					""		  AND c.AD_Column_ID=pfi.AD_Column_ID"" +
					""		  AND pfi.AD_PrintFormatItem_ID=trl.AD_PrintFormatItem_ID"" +
					""          AND pfi.IsCentrallyMaintained='Y'"" +
					""		  AND LENGTH(pfi.PrintName) > 0"" +
					""		  AND (e.PrintName<>trl.PrintName OR trl.PrintName IS NULL)"" +
					""		  AND pf.AD_PrintFormat_ID=pfi.AD_PrintFormat_ID"" +
					""		  AND pf.IsForm='N' AND IsTableBased='Y')"" +
					""	  AND EXISTS (SELECT * FROM AD_Client"" +
					""		WHERE AD_Client_ID=trl.AD_Client_ID AND IsMultiLingualDocument='Y')"";
			execute(""Synchronize PrintFormatItem Trl from Element Trl (Multi-Lingual)"", sql,  ""  rows updated: "");

	/*

	DBMS_OUTPUT.PUT_LINE('Synchronize PrintFormatItem Trl (Not Multi-Lingual)');
	UPDATE AD_PrintFormatItem_Trl trl
	  SET PrintName = (SELECT pfi.PrintName
		FROM AD_PrintFormatItem pfi
		WHERE pfi.AD_PrintFormatItem_ID=trl.AD_PrintFormatItem_ID)
	WHERE EXISTS (SELECT *
		FROM AD_PrintFormatItem pfi, AD_PrintFormat pf
		WHERE pfi.AD_PrintFormatItem_ID=trl.AD_PrintFormatItem_ID
          AND pfi.IsCentrallyMaintained='Y'
		  AND LENGTH(pfi.PrintName) > 0
		  AND pfi.PrintName<>trl.PrintName
		  AND pf.AD_PrintFormat_ID=pfi.AD_PrintFormat_ID
		  AND pf.IsForm='N' AND pf.IsTableBased='Y')
	  AND EXISTS (SELECT * FROM AD_Client
		WHERE AD_Client_ID=trl.AD_Client_ID AND IsMultiLingualDocument='N');
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);
	*/
			sql = ""	UPDATE AD_PrintFormatItem_Trl trl"" +
					""	  SET PrintName = (SELECT pfi.PrintName"" +
					""		FROM AD_PrintFormatItem pfi"" +
					""		WHERE pfi.AD_PrintFormatItem_ID=trl.AD_PrintFormatItem_ID)"" +
					""	WHERE EXISTS (SELECT *"" +
					""		FROM AD_PrintFormatItem pfi, AD_PrintFormat pf"" +
					""		WHERE pfi.AD_PrintFormatItem_ID=trl.AD_PrintFormatItem_ID"" +
					""          AND pfi.IsCentrallyMaintained='Y'"" +
					""		  AND LENGTH(pfi.PrintName) > 0"" +
					""		  AND pfi.PrintName<>trl.PrintName"" +
					""		  AND pf.AD_PrintFormat_ID=pfi.AD_PrintFormat_ID"" +
					""		  AND pf.IsForm='N' AND pf.IsTableBased='Y')"" +
					""	  AND EXISTS (SELECT * FROM AD_Client"" +
					""		WHERE AD_Client_ID=trl.AD_Client_ID AND IsMultiLingualDocument='N')"";
			execute(""Synchronize PrintFormatItem Trl (Not Multi-Lingual)"", sql,  ""  rows updated: "");

	/*

	DBMS_OUTPUT.PUT_LINE('Reset PrintFormatItem Trl where not used in base table');
	UPDATE AD_PrintFormatItem_Trl trl
	  SET PrintName = NULL
	WHERE PrintName IS NOT NULL
	  AND EXISTS (SELECT *
		FROM AD_PrintFormatItem pfi
		WHERE pfi.AD_PrintFormatItem_ID=trl.AD_PrintFormatItem_ID
          AND pfi.IsCentrallyMaintained='Y'
		  AND (LENGTH (pfi.PrintName) = 0 OR pfi.PrintName IS NULL));
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);
	*/
			sql = ""	UPDATE AD_PrintFormatItem_Trl trl"" +
					""	  SET PrintName = NULL"" +
					""	WHERE PrintName IS NOT NULL"" +
					""	  AND EXISTS (SELECT *"" +
					""		FROM AD_PrintFormatItem pfi"" +
					""		WHERE pfi.AD_PrintFormatItem_ID=trl.AD_PrintFormatItem_ID"" +
					""          AND pfi.IsCentrallyMaintained='Y'"" +
					""		  AND (LENGTH (pfi.PrintName) = 0 OR pfi.PrintName IS NULL))"";
			execute(""Synchronize PrintFormatItem Trl where not used in base table"", sql,  ""  rows updated: "");

	/*

**
SELECT 	e.PrintName ""Element"", pfi.PrintName ""FormatItem"", trl.AD_Language, trl.PrintName ""Trl""
FROM 	AD_Element e
  INNER JOIN AD_Column c ON (e.AD_Element_ID=c.AD_Element_ID)
  INNER JOIN AD_PrintFormatItem pfi ON (c.AD_Column_ID=pfi.AD_Column_ID)
  INNER JOIN AD_PrintFormatItem_Trl trl ON (pfi.AD_PrintFormatItem_ID=trl.AD_PrintFormatItem_ID)
WHERE pfi.AD_PrintFormatItem_ID=?
**

	--	Sync Names - Window
	DBMS_OUTPUT.PUT_LINE('Synchronizing Menu with Window');
	UPDATE	AD_Menu m
	SET		Name = (SELECT Name FROM AD_Window w WHERE m.AD_Window_ID=w.AD_Window_ID),
			Description = (SELECT Description FROM AD_Window w WHERE m.AD_Window_ID=w.AD_Window_ID)
	WHERE	AD_Window_ID IS NOT NULL
		AND Action = 'W';
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);
	executesql(""Synchronize Field Translations"", sql,  ""  rows updated: "");
**/
			sql = ""UPDATE AD_Menu m ""
				+ ""SET Name = (SELECT Name FROM AD_Window w WHERE m.AD_Window_ID=w.AD_Window_ID),""
				+ ""Description = (SELECT Description FROM AD_Window w WHERE m.AD_Window_ID=w.AD_Window_ID) ""
				+ ""WHERE AD_Window_ID IS NOT NULL""
				+ "" AND Action = 'W'"";
			execute(""Synchronize Menu with Window"", sql,  ""  rows updated: "");

/*
	UPDATE	AD_Menu_Trl mt
	SET		Name = (SELECT wt.Name FROM AD_Window_Trl wt, AD_Menu m
					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Window_ID=wt.AD_Window_ID
					AND mt.AD_Language=wt.AD_Language),
			Description = (SELECT wt.Description FROM AD_Window_Trl wt, AD_Menu m
					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Window_ID=wt.AD_Window_ID
					AND mt.AD_Language=wt.AD_Language),
			IsTranslated = (SELECT wt.IsTranslated FROM AD_Window_Trl wt, AD_Menu m
					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Window_ID=wt.AD_Window_ID
					AND mt.AD_Language=wt.AD_Language)
	WHERE EXISTS (SELECT * FROM AD_Window_Trl wt, AD_Menu m
					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Window_ID=wt.AD_Window_ID
					AND mt.AD_Language=wt.AD_Language
					AND m.AD_Window_ID IS NOT NULL
					AND m.Action = 'W');
	DBMS_OUTPUT.PUT_LINE('  trl rows updated: ' || SQL%ROWCOUNT);
	*/
			sql = ""	UPDATE	AD_Menu_Trl mt"" +
					""	SET		Name = (SELECT wt.Name FROM AD_Window_Trl wt, AD_Menu m"" +
					""					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Window_ID=wt.AD_Window_ID"" +
					""					AND mt.AD_Language=wt.AD_Language),"" +
					""		Description = (SELECT wt.Description FROM AD_Window_Trl wt, AD_Menu m"" +
					""					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Window_ID=wt.AD_Window_ID"" +
					""					AND mt.AD_Language=wt.AD_Language),"" +
					""			IsTranslated = (SELECT wt.IsTranslated FROM AD_Window_Trl wt, AD_Menu m"" +
					""					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Window_ID=wt.AD_Window_ID"" +
					""					AND mt.AD_Language=wt.AD_Language)"" +
					""	WHERE EXISTS (SELECT * FROM AD_Window_Trl wt, AD_Menu m"" +
					""					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Window_ID=wt.AD_Window_ID"" +
					""					AND mt.AD_Language=wt.AD_Language"" +
					""					AND m.AD_Window_ID IS NOT NULL"" +
					""					AND m.Action = 'W')"";
			execute(""Synchronize Menu with Window Trl"", sql,  ""  rows updated: "");

	/*

	--	Sync Names - Process
	DBMS_OUTPUT.PUT_LINE('Synchronizing Menu with Processes');
	UPDATE	AD_Menu m
	SET		Name = (SELECT p.Name FROM AD_Process p WHERE m.AD_Process_ID=p.AD_Process_ID),
			Description = (SELECT p.Description FROM AD_Process p WHERE m.AD_Process_ID=p.AD_Process_ID)
	WHERE	m.AD_Process_ID IS NOT NULL
	  AND	m.Action IN ('R', 'P');
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);
	*/
			sql = ""	UPDATE	AD_Menu m"" +
					""	SET		Name = (SELECT p.Name FROM AD_Process p WHERE m.AD_Process_ID=p.AD_Process_ID),"" +
					""			Description = (SELECT p.Description FROM AD_Process p WHERE m.AD_Process_ID=p.AD_Process_ID)"" +
					""	WHERE	m.AD_Process_ID IS NOT NULL"" +
					""	  AND	m.Action IN ('R', 'P')"";
			execute(""Synchronize Menu with Processes"", sql,  ""  rows updated: "");

	/*

	UPDATE	AD_Menu_Trl mt
	SET		Name = (SELECT pt.Name FROM AD_Process_Trl pt, AD_Menu m
					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Process_ID=pt.AD_Process_ID
					AND mt.AD_Language=pt.AD_Language),
			Description = (SELECT pt.Description FROM AD_Process_Trl pt, AD_Menu m
					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Process_ID=pt.AD_Process_ID
					AND mt.AD_Language=pt.AD_Language),
			IsTranslated = (SELECT pt.IsTranslated FROM AD_Process_Trl pt, AD_Menu m
					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Process_ID=pt.AD_Process_ID
					AND mt.AD_Language=pt.AD_Language)
	WHERE EXISTS (SELECT * FROM AD_Process_Trl pt, AD_Menu m
					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Process_ID=pt.AD_Process_ID
					AND mt.AD_Language=pt.AD_Language
					AND m.AD_Process_ID IS NOT NULL
					AND	Action IN ('R', 'P'));
	DBMS_OUTPUT.PUT_LINE('  trl rows updated: ' || SQL%ROWCOUNT);
	*/
			sql = ""	UPDATE	AD_Menu_Trl mt"" +
					""	SET		Name = (SELECT pt.Name FROM AD_Process_Trl pt, AD_Menu m"" +
					""					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Process_ID=pt.AD_Process_ID"" +
					""					AND mt.AD_Language=pt.AD_Language),"" +
					""			Description = (SELECT pt.Description FROM AD_Process_Trl pt, AD_Menu m"" +
					""					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Process_ID=pt.AD_Process_ID"" +
					""					AND mt.AD_Language=pt.AD_Language),"" +
					""			IsTranslated = (SELECT pt.IsTranslated FROM AD_Process_Trl pt, AD_Menu m"" +
					""					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Process_ID=pt.AD_Process_ID"" +
					""					AND mt.AD_Language=pt.AD_Language)"" +
					""	WHERE EXISTS (SELECT * FROM AD_Process_Trl pt, AD_Menu m"" +
					""					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Process_ID=pt.AD_Process_ID"" +
					""					AND mt.AD_Language=pt.AD_Language"" +
					""					AND m.AD_Process_ID IS NOT NULL"" +
					""					AND	Action IN ('R', 'P'))"";
			execute(""Synchronize Menu with Processes Translations"", sql,  ""  rows updated: "");

	/*

	--	Sync Names = Form
	DBMS_OUTPUT.PUT_LINE('Synchronizing Menu with Forms');
	UPDATE	AD_Menu m
	SET		Name = (SELECT Name FROM AD_Form f WHERE m.AD_Form_ID=f.AD_Form_ID),
			Description = (SELECT Description FROM AD_Form f WHERE m.AD_Form_ID=f.AD_Form_ID)
	WHERE	AD_Form_ID IS NOT NULL
	  AND	Action = 'X';
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);
	*/
			sql = ""	UPDATE	AD_Menu m"" +
					""	SET		Name = (SELECT Name FROM AD_Form f WHERE m.AD_Form_ID=f.AD_Form_ID),"" +
					""			Description = (SELECT Description FROM AD_Form f WHERE m.AD_Form_ID=f.AD_Form_ID)"" +
					""	WHERE	AD_Form_ID IS NOT NULL"" +
					""	  AND	Action = 'X'"";
			execute(""Synchronize Menu with Forms"", sql,  ""  rows updated: "");

	/*

	UPDATE	AD_Menu_Trl mt
	SET		Name = (SELECT ft.Name FROM AD_Form_Trl ft, AD_Menu m
					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Form_ID=ft.AD_Form_ID
					AND mt.AD_Language=ft.AD_Language),
			Description = (SELECT ft.Description FROM AD_Form_Trl ft, AD_Menu m
					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Form_ID=ft.AD_Form_ID
					AND mt.AD_Language=ft.AD_Language),
			IsTranslated = (SELECT ft.IsTranslated FROM AD_Form_Trl ft, AD_Menu m
					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Form_ID=ft.AD_Form_ID
					AND mt.AD_Language=ft.AD_Language)
	WHERE EXISTS (SELECT * FROM AD_Form_Trl ft, AD_Menu m
					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Form_ID=ft.AD_Form_ID
					AND mt.AD_Language=ft.AD_Language
					AND m.AD_Form_ID IS NOT NULL
					AND	Action = 'X');
	DBMS_OUTPUT.PUT_LINE('  trl rows updated: ' || SQL%ROWCOUNT);
	*/
			sql = ""UPDATE	AD_Menu_Trl mt"" +
					""	SET		Name = (SELECT ft.Name FROM AD_Form_Trl ft, AD_Menu m"" +
					""					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Form_ID=ft.AD_Form_ID"" +
					""					AND mt.AD_Language=ft.AD_Language),"" +
					""			Description = (SELECT ft.Description FROM AD_Form_Trl ft, AD_Menu m"" +
					""					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Form_ID=ft.AD_Form_ID"" +
					""					AND mt.AD_Language=ft.AD_Language),"" +
					""			IsTranslated = (SELECT ft.IsTranslated FROM AD_Form_Trl ft, AD_Menu m"" +
					""					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Form_ID=ft.AD_Form_ID"" +
					""					AND mt.AD_Language=ft.AD_Language)"" +
					""	WHERE EXISTS (SELECT * FROM AD_Form_Trl ft, AD_Menu m"" +
					""					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Form_ID=ft.AD_Form_ID"" +
					""					AND mt.AD_Language=ft.AD_Language"" +
					""					AND m.AD_Form_ID IS NOT NULL"" +
					""					AND	Action = 'X')"" ;

			execute(""Synchronize Menu with Forms Trl"", sql,  ""  rows updated: "");

	/*

	--	Sync Names - Workflow
	DBMS_OUTPUT.PUT_LINE('Synchronizing Menu with Workflows');
	UPDATE	AD_Menu m
	SET		Name = (SELECT p.Name FROM AD_Workflow p WHERE m.AD_Workflow_ID=p.AD_Workflow_ID),
			Description = (SELECT p.Description FROM AD_Workflow p WHERE m.AD_Workflow_ID=p.AD_Workflow_ID)
	WHERE	m.AD_Workflow_ID IS NOT NULL
	  AND	m.Action = 'F';
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);
	*/
			sql = ""	UPDATE	AD_Menu m"" +
					""	SET		Name = (SELECT p.Name FROM AD_Workflow p WHERE m.AD_Workflow_ID=p.AD_Workflow_ID),"" +
					""			Description = (SELECT p.Description FROM AD_Workflow p WHERE m.AD_Workflow_ID=p.AD_Workflow_ID)"" +
					""	WHERE	m.AD_Workflow_ID IS NOT NULL"" +
					""	  AND	m.Action = 'F'"";
			execute(""Synchronize Menu with Workflows"", sql,  ""  rows updated: "");

	/*

	UPDATE	AD_Menu_Trl mt
	SET		Name = (SELECT pt.Name FROM AD_Workflow_Trl pt, AD_Menu m
					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Workflow_ID=pt.AD_Workflow_ID
					AND mt.AD_Language=pt.AD_Language),
			Description = (SELECT pt.Description FROM AD_Workflow_Trl pt, AD_Menu m
					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Workflow_ID=pt.AD_Workflow_ID
					AND mt.AD_Language=pt.AD_Language),
			IsTranslated = (SELECT pt.IsTranslated FROM AD_Workflow_Trl pt, AD_Menu m
					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Workflow_ID=pt.AD_Workflow_ID
					AND mt.AD_Language=pt.AD_Language)
	WHERE EXISTS (SELECT * FROM AD_Workflow_Trl pt, AD_Menu m
					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Workflow_ID=pt.AD_Workflow_ID
					AND mt.AD_Language=pt.AD_Language
					AND m.AD_Workflow_ID IS NOT NULL
					AND	Action = 'F');
	DBMS_OUTPUT.PUT_LINE('  trl rows updated: ' || SQL%ROWCOUNT);
	*/
			sql = ""	UPDATE	AD_Menu_Trl mt"" +
					""	SET		Name = (SELECT pt.Name FROM AD_Workflow_Trl pt, AD_Menu m"" +
					""					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Workflow_ID=pt.AD_Workflow_ID"" +
					""					AND mt.AD_Language=pt.AD_Language),"" +
					""			Description = (SELECT pt.Description FROM AD_Workflow_Trl pt, AD_Menu m"" +
					""					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Workflow_ID=pt.AD_Workflow_ID"" +
					""					AND mt.AD_Language=pt.AD_Language),"" +
					""			IsTranslated = (SELECT pt.IsTranslated FROM AD_Workflow_Trl pt, AD_Menu m"" +
					""					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Workflow_ID=pt.AD_Workflow_ID"" +
					""					AND mt.AD_Language=pt.AD_Language)"" +
					""	WHERE EXISTS (SELECT * FROM AD_Workflow_Trl pt, AD_Menu m"" +
					""					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Workflow_ID=pt.AD_Workflow_ID"" +
					""					AND mt.AD_Language=pt.AD_Language"" +
					""					AND m.AD_Workflow_ID IS NOT NULL"" +
					""					AND	Action = 'F')"";
			execute(""Synchronize Menu with Workflows Trl"", sql,  ""  rows updated: "");

	/*

	--	Sync Names = Task
	DBMS_OUTPUT.PUT_LINE('Synchronizing Menu with Tasks');
	UPDATE	AD_Menu m
	SET		Name = (SELECT Name FROM AD_Task f WHERE m.AD_Task_ID=f.AD_Task_ID),
			Description = (SELECT Description FROM AD_Task f WHERE m.AD_Task_ID=f.AD_Task_ID)
	WHERE	AD_Task_ID IS NOT NULL
	  AND	Action = 'T';
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);
	*/
			sql = ""	UPDATE	AD_Menu m"" +
					""	SET		Name = (SELECT Name FROM AD_Task f WHERE m.AD_Task_ID=f.AD_Task_ID),"" +
					""			Description = (SELECT Description FROM AD_Task f WHERE m.AD_Task_ID=f.AD_Task_ID)"" +
					""	WHERE	AD_Task_ID IS NOT NULL"" +
					""	  AND	Action = 'T'"";
			execute(""Synchronize Menu with Tasks"", sql,  ""  rows updated: "");

	/*

	UPDATE	AD_Menu_Trl mt
	SET		Name = (SELECT ft.Name FROM AD_Task_Trl ft, AD_Menu m
					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Task_ID=ft.AD_Task_ID
					AND mt.AD_Language=ft.AD_Language),
			Description = (SELECT ft.Description FROM AD_Task_Trl ft, AD_Menu m
					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Task_ID=ft.AD_Task_ID
					AND mt.AD_Language=ft.AD_Language),
			IsTranslated = (SELECT ft.IsTranslated FROM AD_Task_Trl ft, AD_Menu m
					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Task_ID=ft.AD_Task_ID
					AND mt.AD_Language=ft.AD_Language)
	WHERE EXISTS (SELECT * FROM AD_Task_Trl ft, AD_Menu m
					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Task_ID=ft.AD_Task_ID
					AND mt.AD_Language=ft.AD_Language
					AND m.AD_Task_ID IS NOT NULL
					AND	Action = 'T');
	DBMS_OUTPUT.PUT_LINE('  trl rows updated: ' || SQL%ROWCOUNT);
	*/
			sql = ""	UPDATE	AD_Menu_Trl mt"" +
					""	SET		Name = (SELECT ft.Name FROM AD_Task_Trl ft, AD_Menu m"" +
					""					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Task_ID=ft.AD_Task_ID"" +
					""					AND mt.AD_Language=ft.AD_Language),"" +
					""			Description = (SELECT ft.Description FROM AD_Task_Trl ft, AD_Menu m"" +
					""					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Task_ID=ft.AD_Task_ID"" +
					""					AND mt.AD_Language=ft.AD_Language),"" +
					""			IsTranslated = (SELECT ft.IsTranslated FROM AD_Task_Trl ft, AD_Menu m"" +
					""					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Task_ID=ft.AD_Task_ID"" +
					""					AND mt.AD_Language=ft.AD_Language)"" +
					""	WHERE EXISTS (SELECT * FROM AD_Task_Trl ft, AD_Menu m"" +
					""					WHERE mt.AD_Menu_ID=m.AD_Menu_ID AND m.AD_Task_ID=ft.AD_Task_ID"" +
					""					AND mt.AD_Language=ft.AD_Language"" +
					""					AND m.AD_Task_ID IS NOT NULL"" +
					""					AND	Action = 'T')"";
			execute(""Synchronize Menu with Tasks Trl"", sql,  ""  rows updated: "");

	/*

    --  Column Name + Element
	DBMS_OUTPUT.PUT_LINE('Synchronizing Column with Element');
    UPDATE AD_Column c
      SET (Name,Description,Help) =
        (SELECT e.Name,e.Description,e.Help
        FROM AD_Element e WHERE c.AD_Element_ID=e.AD_Element_ID)
    WHERE EXISTS
        (SELECT * FROM AD_Element e
        WHERE c.AD_Element_ID=e.AD_Element_ID
          AND c.Name<>e.Name);
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);
	executesql(""Synchronize Field Translations"", sql,  ""  rows updated: "");
    UPDATE AD_Column_Trl ct
      SET Name = (SELECT e.Name
        FROM AD_Column c INNER JOIN AD_Element_Trl e ON (c.AD_Element_ID=e.AD_Element_ID)
        WHERE ct.AD_Column_ID=c.AD_Column_ID AND ct.AD_Language=e.AD_Language)
    WHERE EXISTS
        (SELECT * FROM AD_Column c INNER JOIN AD_Element_Trl e ON (c.AD_Element_ID=e.AD_Element_ID)
        WHERE ct.AD_Column_ID=c.AD_Column_ID AND ct.AD_Language=e.AD_Language
          AND ct.Name<>e.Name);
	DBMS_OUTPUT.PUT_LINE('  trl rows updated: ' || SQL%ROWCOUNT);
	*/
			sql = ""    UPDATE AD_Column c"" +
					""      SET (Name,Description,Help) ="" +
					""        (SELECT e.Name,e.Description,e.Help"" +
					""        FROM AD_Element e WHERE c.AD_Element_ID=e.AD_Element_ID)"" +
					""    WHERE EXISTS"" +
					""        (SELECT * FROM AD_Element e"" +
					""        WHERE c.AD_Element_ID=e.AD_Element_ID"" +
					""          AND c.Name<>e.Name)"";
			execute(""Synchronize Column with Element"", sql,  ""  rows updated: "");

			/*
    UPDATE AD_Column_Trl ct
      SET Name = (SELECT e.Name
        FROM AD_Column c INNER JOIN AD_Element_Trl e ON (c.AD_Element_ID=e.AD_Element_ID)
        WHERE ct.AD_Column_ID=c.AD_Column_ID AND ct.AD_Language=e.AD_Language)
    WHERE EXISTS
        (SELECT * FROM AD_Column c INNER JOIN AD_Element_Trl e ON (c.AD_Element_ID=e.AD_Element_ID)
        WHERE ct.AD_Column_ID=c.AD_Column_ID AND ct.AD_Language=e.AD_Language
          AND ct.Name<>e.Name);
	*/
			sql = ""UPDATE AD_Column_Trl ct"" +
					""    SET Name = (SELECT e.Name"" +
					""        FROM AD_Column c INNER JOIN AD_Element_Trl e ON (c.AD_Element_ID=e.AD_Element_ID)"" +
					""        WHERE ct.AD_Column_ID=c.AD_Column_ID AND ct.AD_Language=e.AD_Language)"" +
					""    WHERE EXISTS"" +
					""        (SELECT * FROM AD_Column c INNER JOIN AD_Element_Trl e ON (c.AD_Element_ID=e.AD_Element_ID)"" +
					""        WHERE ct.AD_Column_ID=c.AD_Column_ID AND ct.AD_Language=e.AD_Language"" +
					""          AND ct.Name<>e.Name)"";
			execute(""Synchronize Column with Element Trl"", sql,  ""  rows updated: "");

	/*


    --  Table Name + Element
	DBMS_OUTPUT.PUT_LINE('Synchronizing Table with Element');
    UPDATE AD_Table t
      SET (Name,Description) = (SELECT e.Name,e.Description FROM AD_Element e
        WHERE t.TableName||'_ID'=e.ColumnName)
    WHERE EXISTS (SELECT * FROM AD_Element e
        WHERE t.TableName||'_ID'=e.ColumnName
          AND t.Name<>e.Name);
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);
	*/
			sql = ""    UPDATE AD_Table t"" +
					""      SET (Name,Description) = (SELECT e.Name,e.Description FROM AD_Element e"" +
					""        WHERE t.TableName||'_ID'=e.ColumnName)"" +
					""    WHERE EXISTS (SELECT * FROM AD_Element e"" +
					""        WHERE t.TableName||'_ID'=e.ColumnName"" +
					""          AND t.Name<>e.Name)"";
			execute(""Synchronize Table with Element"", sql,  ""  rows updated: "");

	/*
    UPDATE AD_Table_Trl tt
      SET Name = (SELECT e.Name
        FROM AD_Table t INNER JOIN AD_Element ex ON (t.TableName||'_ID'=ex.ColumnName)
          INNER JOIN AD_Element_Trl e ON (ex.AD_Element_ID=e.AD_Element_ID)
        WHERE tt.AD_Table_ID=t.AD_Table_ID AND tt.AD_Language=e.AD_Language)
    WHERE EXISTS (SELECT *
        FROM AD_Table t INNER JOIN AD_Element ex ON (t.TableName||'_ID'=ex.ColumnName)
          INNER JOIN AD_Element_Trl e ON (ex.AD_Element_ID=e.AD_Element_ID)
        WHERE tt.AD_Table_ID=t.AD_Table_ID AND tt.AD_Language=e.AD_Language
          AND tt.Name<>e.Name);
	DBMS_OUTPUT.PUT_LINE('  trl rows updated: ' || SQL%ROWCOUNT);
	*/
			sql = ""    UPDATE AD_Table_Trl tt"" +
					""      SET Name = (SELECT e.Name"" +
					""        FROM AD_Table t INNER JOIN AD_Element ex ON (t.TableName||'_ID'=ex.ColumnName)"" +
					""          INNER JOIN AD_Element_Trl e ON (ex.AD_Element_ID=e.AD_Element_ID)"" +
					""        WHERE tt.AD_Table_ID=t.AD_Table_ID AND tt.AD_Language=e.AD_Language)"" +
					""    WHERE EXISTS (SELECT *"" +
					""        FROM AD_Table t INNER JOIN AD_Element ex ON (t.TableName||'_ID'=ex.ColumnName)"" +
					""          INNER JOIN AD_Element_Trl e ON (ex.AD_Element_ID=e.AD_Element_ID)"" +
					""        WHERE tt.AD_Table_ID=t.AD_Table_ID AND tt.AD_Language=e.AD_Language"" +
					""          AND tt.Name<>e.Name)"";
			execute(""Synchronize Table with Element Trl"", sql,  ""  rows updated: "");

	/*

    --  Trl Table Name + Element
    UPDATE AD_Table t
      SET (Name,Description) = (SELECT e.Name||' Trl', e.Description
        FROM AD_Element e
        WHERE SUBSTR(t.TableName,1,LENGTH(t.TableName)-4)||'_ID'=e.ColumnName)
    WHERE TableName LIKE '%_Trl'
      AND EXISTS (SELECT * FROM AD_Element e
        WHERE SUBSTR(t.TableName,1,LENGTH(t.TableName)-4)||'_ID'=e.ColumnName
          AND t.Name<>e.Name);
	DBMS_OUTPUT.PUT_LINE('  rows updated: ' || SQL%ROWCOUNT);
	*/
			sql = ""    UPDATE AD_Table t"" +
					""     SET (Name,Description) = (SELECT e.Name||' Trl', e.Description"" +
					""        FROM AD_Element e"" +
					""        WHERE SUBSTR(t.TableName,1,LENGTH(t.TableName)-4)||'_ID'=e.ColumnName)"" +
					""    WHERE TableName LIKE '%_Trl'"" +
					""      AND EXISTS (SELECT * FROM AD_Element e"" +
					""        WHERE SUBSTR(t.TableName,1,LENGTH(t.TableName)-4)||'_ID'=e.ColumnName"" +
					""          AND t.Name<>e.Name)"";
			execute(""Synchronize Trl Table Name + Element"", sql,  ""  rows updated: "");

			/*
    UPDATE AD_Table_Trl tt
      SET Name = (SELECT e.Name || ' **'
        FROM AD_Table t INNER JOIN AD_Element ex ON (SUBSTR(t.TableName,1,LENGTH(t.TableName)-4)||'_ID'=ex.ColumnName)
          INNER JOIN AD_Element_Trl e ON (ex.AD_Element_ID=e.AD_Element_ID)
        WHERE tt.AD_Table_ID=t.AD_Table_ID AND tt.AD_Language=e.AD_Language)
    WHERE EXISTS (SELECT *
        FROM AD_Table t INNER JOIN AD_Element ex ON (SUBSTR(t.TableName,1,LENGTH(t.TableName)-4)||'_ID'=ex.ColumnName)
          INNER JOIN AD_Element_Trl e ON (ex.AD_Element_ID=e.AD_Element_ID)
        WHERE tt.AD_Table_ID=t.AD_Table_ID AND tt.AD_Language=e.AD_Language
          AND t.TableName LIKE '%_Trl'
          AND tt.Name<>e.Name);
	DBMS_OUTPUT.PUT_LINE('  trl rows updated: ' || SQL%ROWCOUNT);			 */
			sql = ""    UPDATE AD_Table_Trl tt"" +
					""      SET Name = (SELECT e.Name || ' **'"" +
					""        FROM AD_Table t INNER JOIN AD_Element ex ON (SUBSTR(t.TableName,1,LENGTH(t.TableName)-4)||'_ID'=ex.ColumnName)"" +
					""          INNER JOIN AD_Element_Trl e ON (ex.AD_Element_ID=e.AD_Element_ID)"" +
					""        WHERE tt.AD_Table_ID=t.AD_Table_ID AND tt.AD_Language=e.AD_Language)"" +
					""    WHERE EXISTS (SELECT *"" +
					""        FROM AD_Table t INNER JOIN AD_Element ex ON (SUBSTR(t.TableName,1,LENGTH(t.TableName)-4)||'_ID'=ex.ColumnName)"" +
					""          INNER JOIN AD_Element_Trl e ON (ex.AD_Element_ID=e.AD_Element_ID)"" +
					""        WHERE tt.AD_Table_ID=t.AD_Table_ID AND tt.AD_Language=e.AD_Language"" +
					""          AND t.TableName LIKE '%_Trl'"" +
					""          AND tt.Name<>e.Name)"";
			execute(""Synchronize AD_Table_Trl"", sql,  ""  rows updated: "");



			if (result)
				return ""Sucessful Synchronized"";
			else
				return ""Synchronized with error(s)"";
	}	//	doIt
"
org.compiere.process.SynchronizeTerminology.execute,SynchronizeTerminology.java,"void execute(String msg, String sql, String pmsg)
	{
		PreparedStatement pstmt = null;
		log.info(msg);
		try
		{
			pstmt = DB.prepareStatement(sql, get_TrxName());
			int no = pstmt.executeUpdate();
			log.fine(pmsg + no);

			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
			result = false;
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

	}
"
org.compiere.process.RoleAccessUpdate.prepare,RoleAccessUpdate.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) 
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_Role_ID""))
				p_AD_Role_ID = element.getParameterAsInt();
			else if (name.equals(""AD_Client_ID""))
				p_AD_Client_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.RoleAccessUpdate.doIt,RoleAccessUpdate.java,"String doIt () throws Exception
	{
		log.info(""AD_Client_ID="" + p_AD_Client_ID + "", AD_Role_ID="" + p_AD_Role_ID);
		//
		if (p_AD_Role_ID != 0)
			updateRole (new MRole (getCtx(), p_AD_Role_ID, get_TrxName()));
		else
		{
			String sql = ""SELECT * FROM AD_Role "";
			if (p_AD_Client_ID != 0)
				sql += ""WHERE AD_Client_ID=? "";
			sql += ""ORDER BY AD_Client_ID, Name"";

			PreparedStatement pstmt = null;
			try
			{
				pstmt = DB.prepareStatement (sql, get_TrxName());
				if (p_AD_Client_ID != 0)
					pstmt.setInt (1, p_AD_Client_ID);
				ResultSet rs = pstmt.executeQuery ();
				while (rs.next ())
					updateRole (new MRole (getCtx(), rs, get_TrxName()));
				rs.close ();
				pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				log.log(Level.SEVERE, sql, e);
			}
			try
			{
				if (pstmt != null)
					pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				pstmt = null;
			}
		}
		
		return """";
	}	//	doIt
"
org.compiere.process.RoleAccessUpdate.updateRole,RoleAccessUpdate.java,"void updateRole (MRole role)
	{
		addLog(0, null, null, role.getName() + "": "" 
			+ role.updateAccessRecords());
	}	//	updateRole
"
org.compiere.process.ImportInOutConfirm.prepare,ImportInOutConfirm.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) 
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_Client_ID""))
				p_AD_Client_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""DeleteOldImported""))
				p_DeleteOldImported = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_I_InOutLineConfirm_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.ImportInOutConfirm.doIt,ImportInOutConfirm.java,"String doIt () throws Exception
	{
		log.info(""I_InOutLineConfirm_ID="" + p_I_InOutLineConfirm_ID);
		StringBuffer sql = null;
		int no = 0;
		String clientCheck = "" AND AD_Client_ID="" + p_AD_Client_ID;
		
		//	Delete Old Imported
		if (p_DeleteOldImported)
		{
			sql = new StringBuffer (""DELETE FROM I_InOutLineConfirm ""
				  + ""WHERE I_IsImported='Y'"").append (clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			log.fine(""Delete Old Impored ="" + no);
		}

		//	Set IsActive, Created/Updated
		sql = new StringBuffer (""UPDATE I_InOutLineConfirm ""
			+ ""SET IsActive = COALESCE (IsActive, 'Y'),""
			+ "" Created = COALESCE (Created, SysDate),""
			+ "" CreatedBy = COALESCE (CreatedBy, 0),""
			+ "" Updated = COALESCE (Updated, SysDate),""
			+ "" UpdatedBy = COALESCE (UpdatedBy, 0),""
			+ "" I_ErrorMsg = NULL,""
			+ "" I_IsImported = 'N' ""
			+ ""WHERE I_IsImported<>'Y' OR I_IsImported IS NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info (""Reset="" + no);

		//	Set Client from Name
		sql = new StringBuffer (""UPDATE I_InOutLineConfirm i ""
			+ ""SET AD_Client_ID=COALESCE (AD_Client_ID,"").append (p_AD_Client_ID).append ("") ""
			+ ""WHERE (AD_Client_ID IS NULL OR AD_Client_ID=0)""
			+ "" AND I_IsImported<>'Y'"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Client from Value="" + no);

		//	Error Confirmation Line
		String ts = DB.isPostgreSQL()?""COALESCE(I_ErrorMsg,'')"":""I_ErrorMsg"";  //java bug, it could not be used directly
		sql = new StringBuffer (""UPDATE I_InOutLineConfirm i ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Confirmation Line, '""
			+ ""WHERE (M_InOutLineConfirm_ID IS NULL OR M_InOutLineConfirm_ID=0""
			+ "" OR NOT EXISTS (SELECT * FROM M_InOutLineConfirm c WHERE i.M_InOutLineConfirm_ID=c.M_InOutLineConfirm_ID))""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid InOutLineConfirm="" + no);

		//	Error Confirmation No
		sql = new StringBuffer (""UPDATE I_InOutLineConfirm i ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Missing Confirmation No, '""
			+ ""WHERE (ConfirmationNo IS NULL OR ConfirmationNo='')""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid ConfirmationNo="" + no);
		
		//	Qty
		sql = new StringBuffer (""UPDATE I_InOutLineConfirm i ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Target<>(Confirmed+Difference+Scrapped), ' ""
			+ ""WHERE EXISTS (SELECT * FROM M_InOutLineConfirm c ""
				+ ""WHERE i.M_InOutLineConfirm_ID=c.M_InOutLineConfirm_ID""
				+ "" AND c.TargetQty<>(i.ConfirmedQty+i.ScrappedQty+i.DifferenceQty))""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Qty="" + no);
		
		commit();
		
		/*********************************************************************/
		
		PreparedStatement pstmt = null;
		sql = new StringBuffer (""SELECT * FROM I_InOutLineConfirm ""
			+ ""WHERE I_IsImported='N'"").append (clientCheck)
			.append("" ORDER BY I_InOutLineConfirm_ID"");
		no = 0;
		try
		{
			pstmt = DB.prepareStatement (sql.toString(), get_TrxName());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				X_I_InOutLineConfirm importLine = new X_I_InOutLineConfirm (getCtx(), rs, get_TrxName());
				MInOutLineConfirm confirmLine = new MInOutLineConfirm (getCtx(), 
					importLine.getM_InOutLineConfirm_ID(), get_TrxName());
				if (confirmLine.get_ID() == 0
					|| confirmLine.get_ID() != importLine.getM_InOutLineConfirm_ID())
				{
					importLine.setI_IsImported(X_I_InOutLineConfirm.I_ISIMPORTED_No);
					importLine.setI_ErrorMsg(""ID Not Found"");
					importLine.save();
				}
				else
				{
					confirmLine.setConfirmationNo(importLine.getConfirmationNo());
					confirmLine.setConfirmedQty(importLine.getConfirmedQty());
					confirmLine.setDifferenceQty(importLine.getDifferenceQty());
					confirmLine.setScrappedQty(importLine.getScrappedQty());
					confirmLine.setDescription(importLine.getDescription());
					if (confirmLine.save())
					{
						//	Import
						importLine.setI_IsImported(X_I_InOutLineConfirm.I_ISIMPORTED_Yes);
						importLine.setProcessed(true);
						if (importLine.save())
							no++;
					}
				}
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql.toString(), e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		return ""@Updated@ #"" + no;
	}	//	doIt
"
org.compiere.process.InvoiceCreateInOut.prepare,InvoiceCreateInOut.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""M_Warehouse_ID""))
				p_M_Warehouse_ID = element.getParameterAsInt();
			else if (name.equals(""C_DocType_ID""))
				p_C_DocType_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_C_Invoice_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.InvoiceCreateInOut.doIt,InvoiceCreateInOut.java,"String doIt () throws Exception
	{
		log.info(""C_Invoice_ID="" + p_C_Invoice_ID 
			+ "", M_Warehouse_ID="" + p_M_Warehouse_ID
			+ "", C_DocType_ID="" + p_C_DocType_ID);
		if (p_C_Invoice_ID == 0)
			throw new IllegalArgumentException(""@NotFound@ @C_Invoice_ID@"");
		if (p_M_Warehouse_ID == 0)
			throw new IllegalArgumentException(""@NotFound@ @M_Warehouse_ID@"");
		//
		MInvoice invoice = new MInvoice (getCtx(), p_C_Invoice_ID, null);
		if (invoice.get_ID() == 0)
			throw new IllegalArgumentException(""@NotFound@ @C_Invoice_ID@"");
		if (!X_C_Invoice.DOCSTATUS_Completed.equals(invoice.getDocStatus()))
			throw new IllegalArgumentException(""@InvoiceCreateDocNotCompleted@"");
		MDocType dt = MDocType.get (getCtx(), p_C_DocType_ID);
		if (invoice.isSOTrx() != dt.isSOTrx()
			|| invoice.isReturnTrx() != dt.isReturnTrx())
			throw new IllegalArgumentException(""@C_DocType_ID@ <> @C_Invoice_ID@"");
		//
		MInOut ship = new MInOut (invoice, p_C_DocType_ID,  
			null, p_M_Warehouse_ID);
		if (!ship.save())
			throw new IllegalArgumentException(""@SaveError@ Receipt"");
		//
		MInvoiceLine[] invoiceLines = invoice.getLines(false);
		for (MInvoiceLine invoiceLine : invoiceLines) {
			MInOutLine sLine = new MInOutLine(ship);
			sLine.setInvoiceLine(invoiceLine, 0,	//	Locator 
				invoice.isSOTrx() ? invoiceLine.getQtyInvoiced() : Env.ZERO);
			sLine.setQtyEntered(invoiceLine.getQtyEntered());
			sLine.setMovementQty(invoiceLine.getQtyInvoiced());
			if (invoice.isCreditMemo())
			{
				sLine.setQtyEntered(sLine.getQtyEntered().negate());
				sLine.setMovementQty(sLine.getMovementQty().negate());
			}
			if (!sLine.save())
				throw new IllegalArgumentException(""@SaveError@ @M_InOutLine_ID@"");
			//
			invoiceLine.setM_InOutLine_ID(sLine.getM_InOutLine_ID());
			if (!invoiceLine.save())
				throw new IllegalArgumentException(""@SaveError@ @C_InvoiceLine_ID@"");
		}
		
		return ship.getDocumentNo();
	}	//	doIt
"
org.compiere.process.LoadBankStatement.prepare,LoadBankStatement.java,"void prepare()
	{
		log.info("""");
		m_ctx = Env.getCtx();
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (name.equals(""C_BankStatementLoader_ID""))
				m_C_BankStmtLoader_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""FileName""))
				fileName = (String)element.getParameter();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		m_AD_Client_ID = m_ctx.getAD_Client_ID();
		log.info(""AD_Client_ID="" + m_AD_Client_ID);
		m_AD_Org_ID = m_ctx.getAD_Org_ID();
		log.info(""AD_Org_ID="" + m_AD_Org_ID);
		log.info(""C_BankStatementLoader_ID="" + m_C_BankStmtLoader_ID);
	}	//	prepare
"
org.compiere.process.LoadBankStatement.doIt,LoadBankStatement.java,"String doIt() throws java.lang.Exception
	{
		log.info(""LoadBankStatement.doIt"");
		String message = ""@Error@"";
		
		m_controller = new MBankStatementLoader(m_ctx, m_C_BankStmtLoader_ID, fileName, get_TrxName());
		log.info(m_controller.toString());
		
		if (m_controller == null || m_controller.get_ID() == 0)
			log.log(Level.SEVERE, ""Invalid Loader"");

		// Start loading bank statement lines
		else if (!m_controller.loadLines())
			log.log(Level.SEVERE, m_controller.getErrorMessage() + "" - "" + m_controller.getErrorDescription());
		
		else
		{
			log.info(""Imported="" + m_controller.getLoadCount());
			addLog (0, null, new BigDecimal (m_controller.getLoadCount()), ""@Loaded@"");
			message = ""@OK@"";
		}

		return message;
	}	//	doIt
"
org.compiere.process.InitialSetup.prepare,InitialSetup.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para)
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""ClientName""))
				p_ClientName = (String)element.getParameter();
			else if (name.equals(""OrgName""))
				p_OrgName = (String)element.getParameter();
			else if (name.equals(""C_Currency_ID""))
				p_C_Currency_ID = element.getParameterAsInt();
			else if (name.equals(""C_Country_ID""))
				p_C_Country_ID = element.getParameterAsInt();
			else if (name.equals(""C_Region_ID""))
				p_C_Region_ID = element.getParameterAsInt();
			else if (name.equals(""City""))
				p_City = (String)element.getParameter();

			else if (name.equals(""IsBPartnerAcctElement""))
				p_IsBPartnerAcctElement = ""Y"".equals(element.getParameter());
			else if (name.equals(""IsProductAcctElement""))
				p_IsProductAcctElement = ""Y"".equals(element.getParameter());
			else if (name.equals(""IsProjectAcctElement""))
				p_IsProjectAcctElement = ""Y"".equals(element.getParameter());
			else if (name.equals(""IsCampaignAcctElement""))
				p_IsCampaignAcctElement = ""Y"".equals(element.getParameter());
			else if (name.equals(""IsSalesRegionAcctElement""))
				p_IsSalesRegionAcctElement = ""Y"".equals(element.getParameter());

			else if (name.equals(""AccountsFileName""))
				p_AccountsFileName = (String)element.getParameter();

			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.InitialSetup.doIt,InitialSetup.java,"String doIt() throws Exception
	{
		if (!Util.isEmpty(p_AccountsFileName)
			&& !p_AccountsFileName.toLowerCase().endsWith("".csv""))
			throw new CompiereUserException(""Require .csv file: "" + p_AccountsFileName);
		//
		MSetup ms = new MSetup();
		//  Step 1 - Client
		boolean ok = ms.createClient(p_ClientName, p_OrgName, null, null);
		String info = ms.getInfo();
		StringTokenizer st = new StringTokenizer(info, ""\n"");
		while (st.hasMoreTokens())
			addLog(st.nextToken());
		if (!ok)
			throw new CompiereSystemException(""@AccountSetupError@ - "" + info);

		//	Step 2 - Generate Accounting
		ok = ms.createAccounting(p_C_Country_ID, p_C_Currency_ID,
			p_IsProductAcctElement, p_IsBPartnerAcctElement, p_IsProjectAcctElement,
			p_IsCampaignAcctElement, p_IsSalesRegionAcctElement,
			p_AccountsFileName);
		String s = ms.getInfo();
		st = new StringTokenizer(s, ""\n"");
		while (st.hasMoreTokens())
			addLog(st.nextToken());
		info += s;
		if (!ok)
			throw new CompiereSystemException(""@AccountSetupError@ - "" + s);

		//  Step 3 - Generate Entities
		ok = ms.createEntities(p_City, p_C_Region_ID);
		s = ms.getInfo();
		st = new StringTokenizer(s, ""\n"");
		while (st.hasMoreTokens())
			addLog(st.nextToken());
		info += s;
		if (!ok)
			throw new CompiereSystemException(""@Error@ - "" + s);

		//	Step 4 - Create Print Documents
		PrintUtil.setupPrintForm(ms.getAD_Client_ID());

		//	Reset
		MSetup.resetServer();

		return ""@AD_User_ID@ : "" + ms.getUserName() + ""/"" + ms.getUserName();
	}	//	doIt
"
org.compiere.process.InventoryCountCreate.prepare,InventoryCountCreate.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) 
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""M_Locator_ID""))
				p_M_Locator_ID = element.getParameterAsInt();
			else if (name.equals(""LocatorValue""))
				p_LocatorValue = (String)element.getParameter();
			else if (name.equals(""ProductValue""))
				p_ProductValue = (String)element.getParameter();
			else if (name.equals(""M_Product_Category_ID""))
				p_M_Product_Category_ID = element.getParameterAsInt();
			else if (name.equals(""QtyRange""))
				p_QtyRange = (String)element.getParameter();
			else if (name.equals(""InventoryCountSet""))
				p_InventoryCountSetZero = ""Z"".equals(element.getParameter());
			else if (name.equals(""DeleteOld""))
				p_DeleteOld = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_M_Inventory_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.InventoryCountCreate.doIt,InventoryCountCreate.java,"String doIt () throws Exception
	{
		log.info(""M_Inventory_ID="" + p_M_Inventory_ID
			+ "", M_Locator_ID="" + p_M_Locator_ID + "", LocatorValue="" + p_LocatorValue
			+ "", ProductValue="" + p_ProductValue 
			+ "", M_Product_Category_ID="" + p_M_Product_Category_ID
			+ "", QtyRange="" + p_QtyRange + "", DeleteOld="" + p_DeleteOld);
		m_inventory = new MInventory (getCtx(), p_M_Inventory_ID, get_TrxName());
		if (m_inventory.get_ID() == 0)
			throw new CompiereSystemException (""Not found: M_Inventory_ID="" + p_M_Inventory_ID);
		if (m_inventory.isProcessed())
			throw new CompiereSystemException (""@M_Inventory_ID@ @Processed@"");
		//
		if (p_DeleteOld)
		{
			String sql = ""DELETE FROM M_InventoryLine WHERE Processed='N' ""
				+ ""AND M_Inventory_ID="" + p_M_Inventory_ID;
			int no = DB.executeUpdate(sql, get_TrxName());
			log.fine(""doIt - Deleted #"" + no);
		}
		
		//	Create Null Storage records
		if (p_QtyRange != null && p_QtyRange.equals(""=""))
		{
			String sql = ""INSERT INTO M_Storage ""
				+ ""(AD_Client_ID, AD_Org_ID, IsActive, Created, CreatedBy, Updated, UpdatedBy,""
				+ "" M_Locator_ID, M_Product_ID, M_AttributeSetInstance_ID,""
				+ "" QtyOnHand, QtyReserved, QtyOrdered, DateLastInventory) ""
				+ ""SELECT l.AD_CLIENT_ID, l.AD_ORG_ID, 'Y', SysDate, 0,SysDate, 0,""
				+ "" l.M_Locator_ID, p.M_Product_ID, 0,""
				+ "" 0,0,0,null ""
				+ ""FROM M_Locator l""
				+ "" INNER JOIN M_Product p ON (l.AD_Client_ID=p.AD_Client_ID) ""
				+ ""WHERE l.M_Warehouse_ID="" + m_inventory.getM_Warehouse_ID();
			if (p_M_Locator_ID != 0)
				sql += "" AND l.M_Locator_ID="" + p_M_Locator_ID;
			sql += "" AND l.IsDefault='Y'""
				+ "" AND p.IsActive='Y' AND p.IsStocked='Y' AND p.IsSummary = 'N' AND p.ProductType='I'""
				+ "" AND NOT EXISTS (SELECT * FROM M_Storage s""
					+ "" INNER JOIN M_Locator sl ON (s.M_Locator_ID=sl.M_Locator_ID) ""
					+ ""WHERE sl.M_Warehouse_ID=l.M_Warehouse_ID""
					+ "" AND s.M_Product_ID=p.M_Product_ID)"";
			int no = DB.executeUpdate(sql, get_TrxName());
			log.fine(""'0' Inserted #"" + no);
		}

		StringBuffer sql = new StringBuffer(
			""SELECT s.M_Product_ID, s.M_Locator_ID, s.M_AttributeSetInstance_ID,""
			+ "" s.QtyOnHand, p.M_AttributeSet_ID ""
			+ ""FROM M_Product p""
			+ "" INNER JOIN M_Storage s ON (s.M_Product_ID=p.M_Product_ID)""
			+ "" INNER JOIN M_Locator l ON (s.M_Locator_ID=l.M_Locator_ID) ""
			+ ""WHERE l.M_Warehouse_ID=?""
			+ "" AND p.IsActive='Y' AND p.IsStocked='Y' AND p.IsSummary = 'N' AND p.ProductType='I'"");
		//
		if (p_M_Locator_ID != 0)
			sql.append("" AND s.M_Locator_ID=?"");
		//
		if (p_LocatorValue != null && 
			(p_LocatorValue.trim().length() == 0 || p_LocatorValue.equals(""%"")))
			p_LocatorValue = null;
		if (p_LocatorValue != null)
			sql.append("" AND UPPER(l.Value) LIKE ?"");
		//
		if (p_ProductValue != null && 
			(p_ProductValue.trim().length() == 0 || p_ProductValue.equals(""%"")))
			p_ProductValue = null;
		if (p_ProductValue != null)
			sql.append("" AND UPPER(p.Value) LIKE ?"");
		//
		if (p_M_Product_Category_ID != 0)
			sql.append("" AND p.M_Product_Category_ID=?"");
		
		//	Do not overwrite existing records
		if (!p_DeleteOld)
			sql.append("" AND NOT EXISTS (SELECT * FROM M_InventoryLine il ""
			+ ""WHERE il.M_Inventory_ID=?""
			+ "" AND il.M_Product_ID=s.M_Product_ID""
			+ "" AND il.M_Locator_ID=s.M_Locator_ID""
			+ "" AND COALESCE(il.M_AttributeSetInstance_ID,0)=COALESCE(s.M_AttributeSetInstance_ID,0))"");
		//	+ "" AND il.M_AttributeSetInstance_ID=s.M_AttributeSetInstance_ID)"");
		//
		sql.append("" ORDER BY l.Value, p.Value, s.QtyOnHand DESC"");	//	Locator/Product
		//
		int count = 0;
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql.toString(), get_TrxName());
			int index = 1;
			pstmt.setInt (index++, m_inventory.getM_Warehouse_ID());
			if (p_M_Locator_ID != 0)
				pstmt.setInt(index++, p_M_Locator_ID);
			if (p_LocatorValue != null) 
				pstmt.setString(index++, p_LocatorValue.toUpperCase());
			if (p_ProductValue != null) 
				pstmt.setString(index++, p_ProductValue.toUpperCase());
			if (p_M_Product_Category_ID != 0)
				pstmt.setInt(index++, p_M_Product_Category_ID);
			if (!p_DeleteOld)
				pstmt.setInt(index++, p_M_Inventory_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				int M_Product_ID = rs.getInt(1);
				int M_Locator_ID = rs.getInt(2);
				int M_AttributeSetInstance_ID = rs.getInt(3);
				BigDecimal QtyOnHand = rs.getBigDecimal(4);
				if (QtyOnHand == null)
					QtyOnHand = Env.ZERO;
				int M_AttributeSet_ID = rs.getInt(5);
				//
				int compare = QtyOnHand.compareTo(Env.ZERO);
		        if (p_QtyRange == null
		        	|| (p_QtyRange.equals("">"") && compare > 0)
		            || (p_QtyRange.equals(""<"") && compare < 0)
		            || (p_QtyRange.equals(""="") && compare == 0)
		            || (p_QtyRange.equals(""N"") && compare != 0))
		        {
					count += createInventoryLine (M_Locator_ID, M_Product_ID, 
						M_AttributeSetInstance_ID, QtyOnHand, M_AttributeSet_ID);
		        }
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql.toString(), e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		//	Set Count to Zero
		if (p_InventoryCountSetZero)
		{
			String sql1 = ""UPDATE M_InventoryLine l ""
				+ ""SET QtyCount=0 ""
				+ ""WHERE M_Inventory_ID="" + p_M_Inventory_ID;
			int no = DB.executeUpdate(sql1, get_TrxName());
			log.info(""Set Cont to Zero="" + no);
		}
		
		//
		return ""@M_InventoryLine_ID@ - #"" + count;
	}	//	doIt
"
org.compiere.process.InventoryCountCreate.createInventoryLine,InventoryCountCreate.java,"int createInventoryLine (int M_Locator_ID, int M_Product_ID, 
		int M_AttributeSetInstance_ID, BigDecimal QtyOnHand, int M_AttributeSet_ID)
	{
		boolean oneLinePerASI = false;
		if (M_AttributeSet_ID != 0)
		{
			MAttributeSet mas = MAttributeSet.get(getCtx(), M_AttributeSet_ID);
			oneLinePerASI = mas.isInstanceAttribute();
		}
		if (oneLinePerASI)
		{
			MInventoryLine line = new MInventoryLine (m_inventory, M_Locator_ID, 
				M_Product_ID, M_AttributeSetInstance_ID, 
				QtyOnHand, QtyOnHand);		//	book/count
			if (line.save())
				return 1;
			return 0;
		}
		
		if (QtyOnHand.signum() == 0)
			M_AttributeSetInstance_ID = 0;
		
		if (m_line != null 
			&& m_line.getM_Locator_ID() == M_Locator_ID
			&& m_line.getM_Product_ID() == M_Product_ID)
		{
			if (QtyOnHand.signum() == 0)
				return 0;
			//	Same ASI (usually 0)
			if (m_line.getM_AttributeSetInstance_ID() == M_AttributeSetInstance_ID)
			{
				m_line.setQtyBook(m_line.getQtyBook().add(QtyOnHand));
				m_line.setQtyCount(m_line.getQtyCount().add(QtyOnHand));
				m_line.save();
				return 0;
			}
			//	Save Old Line info
			else if (m_line.getM_AttributeSetInstance_ID() != 0)
			{
				MInventoryLineMA ma = new MInventoryLineMA (m_line, 
					m_line.getM_AttributeSetInstance_ID(), m_line.getQtyBook());
				if (!ma.save())
					;
			}
			m_line.setM_AttributeSetInstance_ID(0);
			m_line.setQtyBook(m_line.getQtyBook().add(QtyOnHand));
			m_line.setQtyCount(m_line.getQtyCount().add(QtyOnHand));
			m_line.save();
			//
			MInventoryLineMA ma = new MInventoryLineMA (m_line, 
				M_AttributeSetInstance_ID, QtyOnHand);
			if (!ma.save())
				;
			return 0;
		}
		//	new line
		m_line = new MInventoryLine (m_inventory, M_Locator_ID, 
			M_Product_ID, M_AttributeSetInstance_ID, 
			QtyOnHand, QtyOnHand);		//	book/count
		if (m_line.save())
			return 1;
		return 0;
	}	//	createInventoryLine
"
org.compiere.process.ProductCategoryAcctCopy.prepare,ProductCategoryAcctCopy.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""M_Product_Category_ID""))
				p_M_Product_Category_ID = element.getParameterAsInt();
			else if (name.equals(""C_AcctSchema_ID""))
				p_C_AcctSchema_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.ProductCategoryAcctCopy.doIt,ProductCategoryAcctCopy.java,"String doIt () throws Exception
	{
		log.info(""C_AcctSchema_ID="" + p_C_AcctSchema_ID);
		if (p_C_AcctSchema_ID == 0)
			throw new CompiereSystemException(""C_AcctSchema_ID=0"");
		MAcctSchema as = MAcctSchema.get(getCtx(), p_C_AcctSchema_ID);
		if (as.get_ID() == 0)
			throw new CompiereSystemException(""Not Found - C_AcctSchema_ID="" + p_C_AcctSchema_ID);

		//	Update
		String sql = ""UPDATE M_Product_Acct pa ""
			+ ""SET (P_Revenue_Acct,P_Expense_Acct,P_CostAdjustment_Acct,P_InventoryClearing_Acct,P_Asset_Acct,P_COGS_Acct,""
			+ "" P_PurchasePriceVariance_Acct,P_InvoicePriceVariance_Acct,""
			+ "" P_TradeDiscountRec_Acct,P_TradeDiscountGrant_Acct)=""
			 + "" (SELECT P_Revenue_Acct,P_Expense_Acct,P_CostAdjustment_Acct,P_InventoryClearing_Acct,P_Asset_Acct,P_COGS_Acct,""
			 + "" P_PurchasePriceVariance_Acct,P_InvoicePriceVariance_Acct,""
			 + "" P_TradeDiscountRec_Acct,P_TradeDiscountGrant_Acct""
			 + "" FROM M_Product_Category_Acct pca""
			 + "" WHERE pca.M_Product_Category_ID="" + p_M_Product_Category_ID
			 + "" AND pca.C_AcctSchema_ID="" + p_C_AcctSchema_ID
			 + ""), Updated=SysDate, UpdatedBy=0 ""
			+ ""WHERE pa.C_AcctSchema_ID="" + p_C_AcctSchema_ID
			+ "" AND EXISTS (SELECT * FROM M_Product p ""
				+ ""WHERE p.M_Product_ID=pa.M_Product_ID""
				+ "" AND p.M_Product_Category_ID="" + p_M_Product_Category_ID + "")"";
		int updated = DB.executeUpdate(sql, get_TrxName());
		addLog(0, null, new BigDecimal(updated), ""@Updated@"");

		//	Insert new Products
		sql = ""INSERT INTO M_Product_Acct ""
			+ ""(M_Product_ID, C_AcctSchema_ID,""
			+ "" AD_Client_ID, AD_Org_ID, IsActive, Created, CreatedBy, Updated, UpdatedBy,""
			+ "" P_Revenue_Acct, P_Expense_Acct, P_CostAdjustment_Acct, P_InventoryClearing_Acct, P_Asset_Acct, P_CoGs_Acct,""
			+ "" P_PurchasePriceVariance_Acct, P_InvoicePriceVariance_Acct,""
			+ "" P_TradeDiscountRec_Acct, P_TradeDiscountGrant_Acct) ""
			+ ""SELECT p.M_Product_ID, acct.C_AcctSchema_ID,""
			+ "" p.AD_Client_ID, p.AD_Org_ID, 'Y', SysDate, 0, SysDate, 0,""
			+ "" acct.P_Revenue_Acct, acct.P_Expense_Acct, acct.P_CostAdjustment_Acct, acct.P_InventoryClearing_Acct, acct.P_Asset_Acct, acct.P_CoGs_Acct,""
			+ "" acct.P_PurchasePriceVariance_Acct, acct.P_InvoicePriceVariance_Acct,""
			+ "" acct.P_TradeDiscountRec_Acct, acct.P_TradeDiscountGrant_Acct ""
			+ ""FROM M_Product p""
			+ "" INNER JOIN M_Product_Category_Acct acct ON (acct.M_Product_Category_ID=p.M_Product_Category_ID)""
			+ ""WHERE acct.C_AcctSchema_ID="" + p_C_AcctSchema_ID			//	#
			+ "" AND p.M_Product_Category_ID="" + p_M_Product_Category_ID	//	#
			+ "" AND NOT EXISTS (SELECT * FROM M_Product_Acct pa ""
				+ ""WHERE pa.M_Product_ID=p.M_Product_ID""
				+ "" AND pa.C_AcctSchema_ID=acct.C_AcctSchema_ID)"";
		int created = DB.executeUpdate(sql, get_TrxName());
		addLog(0, null, new BigDecimal(created), ""@Created@"");

		return ""@Created@="" + created + "", @Updated@="" + updated;
	}	//	doIt
"
org.compiere.process.DiscountSchemaReSeq.prepare,DiscountSchemaReSeq.java,"void prepare ()
	{
		p_M_DiscountSchema_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.DiscountSchemaReSeq.doIt,DiscountSchemaReSeq.java,"String doIt () throws Exception
	{
		log.info(""M_DiscountSchema_ID="" + p_M_DiscountSchema_ID);
		if (p_M_DiscountSchema_ID == 0)
			throw new CompiereUserException(""@M_DiscountSchema_ID@ = 0"");
		MDiscountSchema ds = new MDiscountSchema(getCtx(), p_M_DiscountSchema_ID, get_TrxName());
		if (ds.get_ID() == 0)
			throw new CompiereUserException(""@NotFound@ M_DiscountSchema_ID="" + p_M_DiscountSchema_ID);
		//
		int updated = ds.reSeq();
		
		return ""@Updated@ #"" + updated;
	}	//	doIt
"
org.compiere.process.ProductUOMConvert.prepare,ProductUOMConvert.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""M_Product_ID""))
				p_M_Product_ID = element.getParameterAsInt();
			else if (name.equals(""M_Product_To_ID""))
				p_M_Product_To_ID = element.getParameterAsInt();
			else if (name.equals(""M_Locator_ID""))
				p_M_Locator_ID = element.getParameterAsInt();
			else if (name.equals(""Qty""))
				p_Qty = (BigDecimal)element.getParameter();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.ProductUOMConvert.doIt,ProductUOMConvert.java,"String doIt () throws Exception
	{
		if (p_M_Product_ID == 0 || p_M_Product_To_ID == 0
			|| p_M_Locator_ID == 0 
			|| p_Qty == null || Env.ZERO.compareTo(p_Qty) == 0)
			throw new CompiereUserException(""Invalid Parameter"");
		//
		MProduct product = MProduct.get(getCtx(), p_M_Product_ID);
		MProduct productTo = MProduct.get(getCtx(), p_M_Product_To_ID);
		log.info(""Product="" + product + "", ProductTo="" + productTo 
			+ "", M_Locator_ID="" + p_M_Locator_ID + "", Qty="" + p_Qty);
		
		MUOMConversion[] conversions = MUOMConversion.getProductConversions(getCtx(), 
				product.getM_Product_ID(), false);
		MUOMConversion conversion = null;
		for (MUOMConversion element : conversions) {
			if (element.getC_UOM_To_ID() == productTo.getC_UOM_ID())
				conversion = element;
		}
		if (conversion == null)
			throw new CompiereUserException(""@NotFound@: @C_UOM_Conversion_ID@"");
		
		MUOM uomTo = MUOM.get(getCtx(), productTo.getC_UOM_ID());
		BigDecimal qtyTo = p_Qty.divide(conversion.getDivideRate(), uomTo.getStdPrecision(), BigDecimal.ROUND_HALF_UP);
		BigDecimal qtyTo6 = p_Qty.divide(conversion.getDivideRate(), 6, BigDecimal.ROUND_HALF_UP);
		if (qtyTo.compareTo(qtyTo6) != 0)
			throw new CompiereUserException(""@StdPrecision@: "" + qtyTo + "" <> "" + qtyTo6 
				+ "" ("" + p_Qty + ""/"" + conversion.getDivideRate() + "")"");
		log.info(conversion + "" -> "" + qtyTo); 
		
		
		//	Set to Beta
		return ""Not completed yet"";
	}	//	doIt
"
org.compiere.process.PaymentOnline.prepare,PaymentOnline.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.PaymentOnline.doIt,PaymentOnline.java,"String doIt() throws Exception
	{
		log.info(""Record_ID="" + getRecord_ID());
		//	get Payment
		MPayment pp = new MPayment (getCtx(), getRecord_ID(), get_TrxName());
		//	Validate Number
		String msg = MPaymentValidate.validateCreditCardNumber(pp.getCreditCardNumber(), pp.getCreditCardType());
		if (msg != null && msg.length() > 0)
			throw new IllegalArgumentException(Msg.getMsg(getCtx(), msg));
		msg = MPaymentValidate.validateCreditCardExp(pp.getCreditCardExpMM(), pp.getCreditCardExpYY());
		if (msg != null && msg.length() > 0)
			throw new IllegalArgumentException(Msg.getMsg(getCtx(), msg));
		if (pp.getCreditCardVV() != null && pp.getCreditCardVV().length() > 0)
		{
			msg = MPaymentValidate.validateCreditCardVV(pp.getCreditCardVV(), pp.getCreditCardType());
			if (msg != null && msg.length() > 0)
				throw new IllegalArgumentException(Msg.getMsg(getCtx(), msg));
		}
		
		//  Process it
		boolean ok = pp.processOnline();
		pp.save();
		if (!ok)
			throw new Exception(pp.getErrorMessage());
		return ""OK"";
	}	//	doIt
"
org.compiere.process.RfQCreateSO.prepare,RfQCreateSO.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_DocType_ID""))
				p_C_DocType_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
		p_C_RfQ_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.RfQCreateSO.doIt,RfQCreateSO.java,"String doIt () throws Exception
	{
		MRfQ rfq = new MRfQ (getCtx(), p_C_RfQ_ID, get_TrxName());
		if (rfq.get_ID() == 0)
			throw new IllegalArgumentException(""No RfQ found"");
		log.info(""doIt - "" + rfq);
		
		if (rfq.getC_BPartner_ID() == 0 || rfq.getC_BPartner_Location_ID() == 0)
			throw new Exception (""No Business Partner/Location"");
		MBPartner bp = new MBPartner (getCtx(), rfq.getC_BPartner_ID(), get_TrxName());
		
		MOrder order = new MOrder (getCtx(), 0, get_TrxName());
		order.setIsSOTrx(true);
		if (p_C_DocType_ID != 0)
			order.setC_DocTypeTarget_ID(p_C_DocType_ID);
		else
			order.setC_DocTypeTarget_ID();
		order.setBPartner(bp);
		order.setC_BPartner_Location_ID(rfq.getC_BPartner_Location_ID());
		order.setSalesRep_ID(rfq.getSalesRep_ID());
		if (rfq.getDateWorkComplete() != null)
			order.setDatePromised(rfq.getDateWorkComplete());
		order.save();

		MRfQLine[] lines = rfq.getLines();
		for (MRfQLine line : lines) {
			MRfQLineQty[] qtys = line.getQtys();
			for (MRfQLineQty qty : qtys) {
				if (qty.isActive() && qty.isOfferQty())
				{
					MOrderLine ol = new MOrderLine (order);
					ol.setM_Product_ID(line.getM_Product_ID(),
						qty.getC_UOM_ID());
					ol.setDescription(line.getDescription());
					ol.setQty(qty.getQty());
					//
					BigDecimal price = qty.getOfferAmt();
					if (price == null || price.signum() == 0)
					{
						price = qty.getBestResponseAmt();
						if (price == null || price.signum() == 0)
						{
							price = Env.ZERO;
							log.warning("" - BestResponse=0 - "" + qty);
						}
						else
						{
							BigDecimal margin = qty.getMargin();
							if (margin == null || margin.signum() == 0)
								margin = rfq.getMargin();
							if (margin != null && margin.signum() != 0)
							{
								margin = margin.add(ONEHUNDRED);
								price = price.multiply(margin)
									.divide(ONEHUNDRED, 2, BigDecimal.ROUND_HALF_UP);
							}
						}
					}	//	price
					ol.setPrice(price);
					ol.save();
				}	//	Offer Qty
			}	//	All Qtys
		}	//	All Lines

		//
		rfq.setC_Order_ID(order.getC_Order_ID());
		rfq.save();
		return order.getDocumentNo();
	}	//	doIt
"
org.compiere.process.InfoWindowValidate.prepare,InfoWindowValidate.java,"void prepare ()
	{
		getRecord_ID();
	}	//	prepare
"
org.compiere.process.InfoWindowValidate.doIt,InfoWindowValidate.java,"String doIt ()
		throws Exception
	{
		return null;
	}	//	doIt
"
org.compiere.process.ImportOrder.prepare,ImportOrder.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) 
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_Client_ID""))
				m_AD_Client_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""AD_Org_ID""))
				m_AD_Org_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""DeleteOldImported""))
				m_deleteOldImported = ""Y"".equals(element.getParameter());
			else if (name.equals(""DocAction""))
				m_docAction = (String)element.getParameter();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		if (m_DateValue == null)
			m_DateValue = new Timestamp (System.currentTimeMillis());
	}	//	prepare
"
org.compiere.process.ImportOrder.doIt,ImportOrder.java,"String doIt() throws java.lang.Exception
	{
		StringBuffer sql = null;
		int no = 0;
		String clientCheck = "" AND AD_Client_ID="" + m_AD_Client_ID;

		Ctx ctx = getCtx();

		//	****	Prepare	****

		//	Delete Old Imported
		if (m_deleteOldImported)
		{
			sql = new StringBuffer (""DELETE FROM I_Order ""
				  + ""WHERE I_IsImported='Y'"").append (clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			log.fine(""Delete Old Impored ="" + no);
		}

		//	Set Client, Org, IsActive, Created/Updated
		sql = new StringBuffer (""UPDATE I_Order ""
			  + ""SET AD_Client_ID = COALESCE (AD_Client_ID,"").append (m_AD_Client_ID).append (""),""
			  + "" AD_Org_ID = COALESCE (AD_Org_ID,"").append (m_AD_Org_ID).append (""),""
			  + "" IsActive = COALESCE (IsActive, 'Y'),""
			  + "" Created = COALESCE (Created, SysDate),""
			  + "" CreatedBy = COALESCE (CreatedBy, 0),""
			  + "" Updated = COALESCE (Updated, SysDate),""
			  + "" UpdatedBy = COALESCE (UpdatedBy, 0),""
			  + "" I_ErrorMsg = NULL,""
			  + "" I_IsImported = 'N' ""
			  + ""WHERE I_IsImported<>'Y' OR I_IsImported IS NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info (""Reset="" + no);

		String ts = DB.isPostgreSQL() ? 
			""COALESCE(I_ErrorMsg,'')""
			: ""I_ErrorMsg"";  //java bug, it could not be used directly
		sql = new StringBuffer (""UPDATE I_Order o ""
			//jz	+ ""SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Org, '""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Org, '""
			+ ""WHERE (AD_Org_ID IS NULL OR AD_Org_ID=0""
			+ "" OR EXISTS (SELECT * FROM AD_Org oo WHERE o.AD_Org_ID=oo.AD_Org_ID AND (oo.IsSummary='Y' OR oo.IsActive='N')))""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Org="" + no);

		//	Document Type - PO - SO
		sql = new StringBuffer (""UPDATE I_Order o ""	//	PO Document Type Name
			  + ""SET C_DocType_ID=(SELECT C_DocType_ID FROM C_DocType d WHERE d.Name=o.DocTypeName""
			  + "" AND d.DocBaseType='POO' AND o.AD_Client_ID=d.AD_Client_ID) ""
			  + ""WHERE C_DocType_ID IS NULL AND IsSOTrx='N' AND DocTypeName IS NOT NULL AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set PO DocType="" + no);
		sql = new StringBuffer (""UPDATE I_Order o ""	//	SO Document Type Name
			  + ""SET C_DocType_ID=(SELECT C_DocType_ID FROM C_DocType d WHERE d.Name=o.DocTypeName""
			  + "" AND d.DocBaseType='SOO' AND o.AD_Client_ID=d.AD_Client_ID) ""
			  + ""WHERE C_DocType_ID IS NULL AND IsSOTrx='Y' AND DocTypeName IS NOT NULL AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set SO DocType="" + no);
		sql = new StringBuffer (""UPDATE I_Order o ""
			  + ""SET C_DocType_ID=(SELECT C_DocType_ID FROM C_DocType d WHERE d.Name=o.DocTypeName""
			  + "" AND d.DocBaseType IN ('SOO','POO') AND o.AD_Client_ID=d.AD_Client_ID) ""
			//+ ""WHERE C_DocType_ID IS NULL AND IsSOTrx IS NULL AND DocTypeName IS NOT NULL AND I_IsImported<>'Y'"").append (clientCheck);
			  + ""WHERE C_DocType_ID IS NULL AND DocTypeName IS NOT NULL AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set DocType="" + no);
		sql = new StringBuffer (""UPDATE I_Order ""	//	Error Invalid Doc Type Name
			  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid DocTypeName, ' ""
			  + ""WHERE C_DocType_ID IS NULL AND DocTypeName IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid DocTypeName="" + no);
		//	DocType Default
		sql = new StringBuffer (""UPDATE I_Order o ""	//	Default PO
			  + ""SET C_DocType_ID=(SELECT MAX(C_DocType_ID) FROM C_DocType d WHERE d.IsDefault='Y'""
			  + "" AND d.DocBaseType='POO' AND o.AD_Client_ID=d.AD_Client_ID) ""
			  + ""WHERE C_DocType_ID IS NULL AND IsSOTrx='N' AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set PO Default DocType="" + no);
		sql = new StringBuffer (""UPDATE I_Order o ""	//	Default SO
			  + ""SET C_DocType_ID=(SELECT MAX(C_DocType_ID) FROM C_DocType d WHERE d.IsDefault='Y'""
			  + "" AND d.DocBaseType='SOO' AND o.AD_Client_ID=d.AD_Client_ID) ""
			  + ""WHERE C_DocType_ID IS NULL AND IsSOTrx='Y' AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set SO Default DocType="" + no);
		sql = new StringBuffer (""UPDATE I_Order o ""
			  + ""SET C_DocType_ID=(SELECT MAX(C_DocType_ID) FROM C_DocType d WHERE d.IsDefault='Y'""
			  + "" AND d.DocBaseType IN('SOO','POO') AND o.AD_Client_ID=d.AD_Client_ID) ""
			  + ""WHERE C_DocType_ID IS NULL AND IsSOTrx IS NULL AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Default DocType="" + no);
		sql = new StringBuffer (""UPDATE I_Order ""	// No DocType
			  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=No DocType, ' ""
			  + ""WHERE C_DocType_ID IS NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""No DocType="" + no);

		//	Set IsSOTrx
		sql = new StringBuffer (""UPDATE I_Order o SET IsSOTrx='Y' ""
			  + ""WHERE EXISTS (SELECT * FROM C_DocType d WHERE o.C_DocType_ID=d.C_DocType_ID AND d.DocBaseType='SOO' AND o.AD_Client_ID=d.AD_Client_ID)""
			  + "" AND C_DocType_ID IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set IsSOTrx=Y="" + no);
		sql = new StringBuffer (""UPDATE I_Order o SET IsSOTrx='N' ""
			  + ""WHERE EXISTS (SELECT * FROM C_DocType d WHERE o.C_DocType_ID=d.C_DocType_ID AND d.DocBaseType='POO' AND o.AD_Client_ID=d.AD_Client_ID)""
			  + "" AND C_DocType_ID IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set IsSOTrx=N="" + no);

		//	Price List
		sql = new StringBuffer (""UPDATE I_Order o ""
			  + ""SET M_PriceList_ID=(SELECT MAX(M_PriceList_ID) FROM M_PriceList p WHERE p.IsDefault='Y'""
			  + "" AND p.C_Currency_ID=o.C_Currency_ID AND p.IsSOPriceList=o.IsSOTrx AND o.AD_Client_ID=p.AD_Client_ID) ""
			  + ""WHERE M_PriceList_ID IS NULL AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Default Currency PriceList="" + no);
		sql = new StringBuffer (""UPDATE I_Order o ""
			  + ""SET M_PriceList_ID=(SELECT MAX(M_PriceList_ID) FROM M_PriceList p WHERE p.IsDefault='Y'""
			  + "" AND p.IsSOPriceList=o.IsSOTrx AND o.AD_Client_ID=p.AD_Client_ID) ""
			  + ""WHERE M_PriceList_ID IS NULL AND C_Currency_ID IS NULL AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Default PriceList="" + no);
		sql = new StringBuffer (""UPDATE I_Order o ""
			  + ""SET M_PriceList_ID=(SELECT MAX(M_PriceList_ID) FROM M_PriceList p ""
			  + "" WHERE p.C_Currency_ID=o.C_Currency_ID AND p.IsSOPriceList=o.IsSOTrx AND o.AD_Client_ID=p.AD_Client_ID) ""
			  + ""WHERE M_PriceList_ID IS NULL AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Currency PriceList="" + no);
		sql = new StringBuffer (""UPDATE I_Order o ""
			  + ""SET M_PriceList_ID=(SELECT MAX(M_PriceList_ID) FROM M_PriceList p ""
			  + "" WHERE p.IsSOPriceList=o.IsSOTrx AND o.AD_Client_ID=p.AD_Client_ID) ""
			  + ""WHERE M_PriceList_ID IS NULL AND C_Currency_ID IS NULL AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set PriceList="" + no);
		//
		sql = new StringBuffer (""UPDATE I_Order ""
			  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=No PriceList, ' ""
			  + ""WHERE M_PriceList_ID IS NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""No PriceList="" + no);

		//	Payment Rule
		//  We support Payment Rule being input in the login language 
		Language language = Language.getLoginLanguage();		//	Base Language
		String AD_Language = language.getAD_Language();
		sql = new StringBuffer (""UPDATE I_Order O "" + 
				""SET PaymentRule= "" +
			  	""(SELECT R.value ""+
			  	""  FROM AD_Ref_List R "" + 
			  	""  left outer join AD_Ref_List_Trl RT "" + 
			  	""  on RT.AD_Ref_List_ID = R.AD_Ref_List_ID and RT.AD_Language = ? "" +
			  	""  WHERE R.AD_Reference_ID = 195 and coalesce( RT.Name, R.Name ) = O.PaymentRuleName ) "" +
			    ""WHERE PaymentRule is null AND PaymentRuleName IS NOT NULL AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), new Object[]{ AD_Language }, false, get_TrxName());
		log.fine(""Set PaymentRule="" + no);
		// do not set a default; if null, the import logic will derive from the business partner
		// do not error in absence of a default

		
		//	Payment Term
		sql = new StringBuffer (""UPDATE I_Order o ""
			  + ""SET C_PaymentTerm_ID=(SELECT C_PaymentTerm_ID FROM C_PaymentTerm p""
			  + "" WHERE o.PaymentTermValue=p.Value AND o.AD_Client_ID=p.AD_Client_ID) ""
			  + ""WHERE C_PaymentTerm_ID IS NULL AND PaymentTermValue IS NOT NULL AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set PaymentTerm="" + no);
		sql = new StringBuffer (""UPDATE I_Order o ""
			  + ""SET C_PaymentTerm_ID=(SELECT MAX(C_PaymentTerm_ID) FROM C_PaymentTerm p""
			  + "" WHERE p.IsDefault='Y' AND o.AD_Client_ID=p.AD_Client_ID) ""
			  + ""WHERE C_PaymentTerm_ID IS NULL AND o.PaymentTermValue IS NULL AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Default PaymentTerm="" + no);
		//
		sql = new StringBuffer (""UPDATE I_Order ""
			  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=No PaymentTerm, ' ""
			  + ""WHERE C_PaymentTerm_ID IS NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""No PaymentTerm="" + no);

		
		//	Warehouse
		// if Warehouse key provided, get Warehouse ID
		sql = new StringBuffer (""UPDATE I_Order o ""
				+ ""SET M_Warehouse_ID=(SELECT MAX(M_Warehouse_ID) FROM M_Warehouse w""
				+ "" WHERE o.WarehouseValue=w.Value AND o.AD_Client_ID=w.AD_Client_ID) ""
				+ ""WHERE M_Warehouse_ID IS NULL AND WarehouseValue IS NOT NULL""
				+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate (sql.toString (), get_TrxName());
		if (no != 0)
			log.fine(""Set Warehouse from Value ="" + no);

		sql = new StringBuffer (""UPDATE I_Order o ""
			  + ""SET M_Warehouse_ID=(SELECT MAX(M_Warehouse_ID) FROM M_Warehouse w""
			  + "" WHERE o.AD_Client_ID=w.AD_Client_ID AND o.AD_Org_ID=w.AD_Org_ID) ""
			  + ""WHERE M_Warehouse_ID IS NULL AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());	//	Warehouse for Org
		if (no != 0)
			log.fine(""Set Warehouse="" + no);
		sql = new StringBuffer (""UPDATE I_Order o ""
			  + ""SET M_Warehouse_ID=(SELECT M_Warehouse_ID FROM M_Warehouse w""
			  + "" WHERE o.AD_Client_ID=w.AD_Client_ID) ""
			  + ""WHERE M_Warehouse_ID IS NULL""
			  + "" AND EXISTS (SELECT AD_Client_ID FROM M_Warehouse w WHERE w.AD_Client_ID=o.AD_Client_ID GROUP BY AD_Client_ID HAVING COUNT(*)=1)""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.fine(""Set Only Client Warehouse="" + no);
		//
		sql = new StringBuffer (""UPDATE I_Order ""
			  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=No Warehouse, ' ""
			  + ""WHERE M_Warehouse_ID IS NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""No Warehouse="" + no);

		//	BP from EMail
		sql = new StringBuffer (""UPDATE I_Order o ""
			  + ""SET (C_BPartner_ID,AD_User_ID)=(SELECT C_BPartner_ID,AD_User_ID FROM AD_User u""
			  + "" WHERE o.EMail=u.EMail AND o.AD_Client_ID=u.AD_Client_ID AND u.C_BPartner_ID IS NOT NULL) ""
			  + ""WHERE C_BPartner_ID IS NULL AND EMail IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set BP from EMail="" + no);
		//	BP from ContactName
		sql = new StringBuffer (""UPDATE I_Order o ""
			  + ""SET (C_BPartner_ID,AD_User_ID)=(SELECT C_BPartner_ID,AD_User_ID FROM AD_User u""
			  + "" WHERE o.ContactName=u.Name AND o.AD_Client_ID=u.AD_Client_ID AND u.C_BPartner_ID IS NOT NULL) ""
			  + ""WHERE C_BPartner_ID IS NULL AND ContactName IS NOT NULL""
			  + "" AND EXISTS (SELECT Name FROM AD_User u WHERE o.ContactName=u.Name AND o.AD_Client_ID=u.AD_Client_ID AND u.C_BPartner_ID IS NOT NULL GROUP BY Name HAVING COUNT(*)=1)""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set BP from ContactName="" + no);
		//	BP from Value
		sql = new StringBuffer (""UPDATE I_Order o ""
			  + ""SET C_BPartner_ID=(SELECT MAX(C_BPartner_ID) FROM C_BPartner bp""
			  + "" WHERE o.BPartnerValue=bp.Value AND o.AD_Client_ID=bp.AD_Client_ID) ""
			  + ""WHERE C_BPartner_ID IS NULL AND BPartnerValue IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set BP from Value="" + no);
		//	Default BP
		sql = new StringBuffer (""UPDATE I_Order o ""
			  + ""SET C_BPartner_ID=(SELECT C_BPartnerCashTrx_ID FROM AD_ClientInfo c""
			  + "" WHERE o.AD_Client_ID=c.AD_Client_ID) ""
			  + ""WHERE C_BPartner_ID IS NULL AND BPartnerValue IS NULL AND Name IS NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Default BP="" + no);

		//	Existing Location ? Exact Match
		sql = new StringBuffer (""UPDATE I_Order o ""
			  + ""SET (BillTo_ID,C_BPartner_Location_ID)=(SELECT C_BPartner_Location_ID,C_BPartner_Location_ID""
			  + "" FROM C_BPartner_Location bpl INNER JOIN C_Location l ON (bpl.C_Location_ID=l.C_Location_ID)""
			  + "" WHERE o.C_BPartner_ID=bpl.C_BPartner_ID AND bpl.AD_Client_ID=o.AD_Client_ID""
			  + "" AND DUMP(o.Address1)=DUMP(l.Address1) AND DUMP(o.Address2)=DUMP(l.Address2)""
			  + "" AND DUMP(o.City)=DUMP(l.City) AND DUMP(o.Postal)=DUMP(l.Postal)""
			  + "" AND DUMP(o.C_Region_ID)=DUMP(l.C_Region_ID) AND DUMP(o.C_Country_ID)=DUMP(l.C_Country_ID)) ""
			  + ""WHERE C_BPartner_ID IS NOT NULL AND C_BPartner_Location_ID IS NULL""
			  + "" AND I_IsImported='N'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Found Location="" + no);
		//	Set Bill Location from BPartner
		sql = new StringBuffer (""UPDATE I_Order o ""
			  + ""SET BillTo_ID=(SELECT MAX(C_BPartner_Location_ID) FROM C_BPartner_Location l""
			  + "" WHERE l.C_BPartner_ID=o.C_BPartner_ID AND o.AD_Client_ID=l.AD_Client_ID""
			  + "" AND ((l.IsBillTo='Y' AND o.IsSOTrx='Y') OR (l.IsPayFrom='Y' AND o.IsSOTrx='N'))""
			  + "") ""
			  + ""WHERE C_BPartner_ID IS NOT NULL AND BillTo_ID IS NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set BP BillTo from BP="" + no);
		//	Set Location from BPartner
		sql = new StringBuffer (""UPDATE I_Order o ""
			  + ""SET C_BPartner_Location_ID=(SELECT MAX(C_BPartner_Location_ID) FROM C_BPartner_Location l""
			  + "" WHERE l.C_BPartner_ID=o.C_BPartner_ID AND o.AD_Client_ID=l.AD_Client_ID""
			  + "" AND ((l.IsShipTo='Y' AND o.IsSOTrx='Y') OR o.IsSOTrx='N')""
			  + "") ""
			  + ""WHERE C_BPartner_ID IS NOT NULL AND C_BPartner_Location_ID IS NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set BP Location from BP="" + no);
		//
		sql = new StringBuffer (""UPDATE I_Order ""
			  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=No BP Location, ' ""
			  + ""WHERE C_BPartner_ID IS NOT NULL AND (BillTo_ID IS NULL OR C_BPartner_Location_ID IS NULL)""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""No BP Location="" + no);

		// Check for Duplicate Document Number/BP/Doc Type Combinations
		sql = new StringBuffer (""UPDATE I_Order i ""
				  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Duplicate Document No, ' ""
				  + ""WHERE EXISTS (SELECT 1 FROM C_Order o WHERE o.C_BPartner_ID=i.C_BPartner_ID ""
				  + "" AND o.C_DocTypeTarget_ID = i.C_DocType_ID""
				  + "" AND o.DocumentNo = i.DocumentNo)""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Duplicate Document Number="" + no);
		
		//	Set Country
		/**
		sql = new StringBuffer (""UPDATE I_Order o ""
			  + ""SET CountryCode=(SELECT CountryCode FROM C_Country c WHERE c.IsDefault='Y'""
			  + "" AND c.AD_Client_ID IN (0, o.AD_Client_ID) AND ROWNUM=1) ""
			  + ""WHERE C_BPartner_ID IS NULL AND CountryCode IS NULL AND C_Country_ID IS NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Country Default="" + no);
		**/
		sql = new StringBuffer (""UPDATE I_Order o ""
			  + ""SET C_Country_ID=(SELECT C_Country_ID FROM C_Country c""
			  + "" WHERE o.CountryCode=c.CountryCode AND c.IsSummary='N' AND c.AD_Client_ID IN (0, o.AD_Client_ID)) ""
			  + ""WHERE C_BPartner_ID IS NULL AND C_Country_ID IS NULL AND CountryCode IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Country="" + no);
		//
		sql = new StringBuffer (""UPDATE I_Order ""
			  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Country, ' ""
			  + ""WHERE C_BPartner_ID IS NULL AND C_Country_ID IS NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Country="" + no);

		//	Set Region
		sql = new StringBuffer (""UPDATE I_Order o ""
			  + ""Set RegionName=(SELECT MAX(Name) FROM C_Region r""
			  + "" WHERE r.IsDefault='Y' AND r.C_Country_ID=o.C_Country_ID""
			  + "" AND r.AD_Client_ID IN (0, o.AD_Client_ID)) ""
			  + ""WHERE C_BPartner_ID IS NULL AND C_Region_ID IS NULL AND RegionName IS NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Region Default="" + no);
		//
		sql = new StringBuffer (""UPDATE I_Order o ""
			  + ""Set C_Region_ID=(SELECT C_Region_ID FROM C_Region r""
			  + "" WHERE r.Name=o.RegionName AND r.C_Country_ID=o.C_Country_ID""
			  + "" AND r.AD_Client_ID IN (0, o.AD_Client_ID)) ""
			  + ""WHERE C_BPartner_ID IS NULL AND C_Region_ID IS NULL AND RegionName IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Region="" + no);
		//
		sql = new StringBuffer (""UPDATE I_Order o ""
			  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Region, ' ""
			  + ""WHERE C_BPartner_ID IS NULL AND C_Region_ID IS NULL ""
			  + "" AND EXISTS (SELECT * FROM C_Country c""
			  + "" WHERE c.C_Country_ID=o.C_Country_ID AND c.HasRegion='Y')""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Region="" + no);

		//	Product
		sql = new StringBuffer (""UPDATE I_Order o ""
			  + ""SET M_Product_ID=(SELECT MAX(M_Product_ID) FROM M_Product p""
			  + "" WHERE o.ProductValue=p.Value AND o.AD_Client_ID=p.AD_Client_ID) ""
			  + ""WHERE M_Product_ID IS NULL AND ProductValue IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Product from Value="" + no);
		sql = new StringBuffer (""UPDATE I_Order o ""
			  + ""SET M_Product_ID=(SELECT MAX(M_Product_ID) FROM M_Product p""
			  + "" WHERE o.UPC=p.UPC AND o.AD_Client_ID=p.AD_Client_ID) ""
			  + ""WHERE M_Product_ID IS NULL AND UPC IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Product from UPC="" + no);
		sql = new StringBuffer (""UPDATE I_Order o ""
			  + ""SET M_Product_ID=(SELECT MAX(M_Product_ID) FROM M_Product p""
			  + "" WHERE o.SKU=p.SKU AND o.AD_Client_ID=p.AD_Client_ID) ""
			  + ""WHERE M_Product_ID IS NULL AND SKU IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Product fom SKU="" + no);
		sql = new StringBuffer (""UPDATE I_Order ""
			  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Product, ' ""
			  + ""WHERE M_Product_ID IS NULL AND (ProductValue IS NOT NULL OR UPC IS NOT NULL OR SKU IS NOT NULL)""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Product="" + no);

		// Charge
		sql = new StringBuffer (""UPDATE I_Order o ""
				  + ""SET C_Charge_ID=(SELECT MAX(C_Charge_ID) FROM C_Charge c""
				  + "" WHERE o.ChargeName=c.Name AND o.AD_Client_ID=c.AD_Client_ID) ""
				  + ""WHERE C_Charge_ID IS NULL AND ChargeName IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			log.fine(""Set Charge from Name="" + no);

		sql = new StringBuffer (""UPDATE I_Order ""
				  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Charge, ' ""
				  + ""WHERE C_Charge_ID IS NULL AND (ChargeName IS NOT NULL)""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			if (no != 0)
				log.warning (""Invalid Charge="" + no);

		sql = new StringBuffer (""UPDATE I_Order ""
				  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Both Charge and Product are specified, ' ""
				  + ""WHERE C_Charge_ID IS NOT NULL AND M_Product_ID IS NOT NULL""
				  + "" AND I_IsImported<>'Y'"").append (clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			if (no != 0)
				log.warning (""Charge and Product are specified="" + no);
			
		//	Tax
		sql = new StringBuffer (""UPDATE I_Order o ""
			  + ""SET C_Tax_ID=(SELECT MAX(C_Tax_ID) FROM C_Tax t""
			  + "" WHERE o.TaxIndicator=t.TaxIndicator AND o.AD_Client_ID=t.AD_Client_ID) ""
			  + ""WHERE C_Tax_ID IS NULL AND TaxIndicator IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Tax="" + no);
		sql = new StringBuffer (""UPDATE I_Order ""
			  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Tax, ' ""
			  + ""WHERE C_Tax_ID IS NULL AND TaxIndicator IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Tax="" + no);

		commit();
		
		//	-- New BPartner ---------------------------------------------------

		//	Go through Order Records w/o C_BPartner_ID
		sql = new StringBuffer (""SELECT * FROM I_Order ""
			  + ""WHERE I_IsImported='N' AND C_BPartner_ID IS NULL"").append (clientCheck);
		try
		{
			PreparedStatement pstmt = DB.prepareStatement (sql.toString(), get_TrxName());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				X_I_Order imp = new X_I_Order (ctx, rs, get_TrxName());
				if (imp.getBPartnerValue () == null)
				{
					if (imp.getEMail () != null)
						imp.setBPartnerValue (imp.getEMail ());
					else if (imp.getName () != null)
						imp.setBPartnerValue (imp.getName ());
					else
						continue;
				}
				if (imp.getName () == null)
				{
					if (imp.getContactName () != null)
						imp.setName (imp.getContactName ());
					else
						imp.setName (imp.getBPartnerValue ());
				}
				//	BPartner
				MBPartner bp = MBPartner.get (ctx, imp.getBPartnerValue());
				if (bp == null)
				{
					bp = new MBPartner (ctx, -1, get_TrxName());
					bp.setClientOrg (imp.getAD_Client_ID (), imp.getAD_Org_ID ());
					bp.setValue (imp.getBPartnerValue ());
					bp.setName (imp.getName ());
					if (!bp.save ())
						continue;
				}
				imp.setC_BPartner_ID (bp.getC_BPartner_ID ());
				
				//	BP Location
				MBPartnerLocation bpl = null; 
				MBPartnerLocation[] bpls = bp.getLocations(true);
				for (int i = 0; bpl == null && i < bpls.length; i++)
				{
					if (imp.getC_BPartner_Location_ID() == bpls[i].getC_BPartner_Location_ID())
						bpl = bpls[i];
					//	Same Location ID
					else if (imp.getC_Location_ID() == bpls[i].getC_Location_ID())
						bpl = bpls[i];
					//	Same Location Info
					else if (imp.getC_Location_ID() == 0)
					{
						MLocation loc = bpls[i].getLocation(false);
						if (loc.equals(imp.getC_Country_ID(), imp.getC_Region_ID(), 
								imp.getPostal(), """", imp.getCity(), 
								imp.getAddress1(), imp.getAddress2()))
							bpl = bpls[i];
					}
				}
				if (bpl == null)
				{
					//	New Location
					MLocation loc = new MLocation (ctx, 0, get_TrxName());
					loc.setAddress1 (imp.getAddress1 ());
					loc.setAddress2 (imp.getAddress2 ());
					loc.setCity (imp.getCity ());
					loc.setPostal (imp.getPostal ());
					if (imp.getC_Region_ID () != 0)
						loc.setC_Region_ID (imp.getC_Region_ID ());
					loc.setC_Country_ID (imp.getC_Country_ID ());
					if (!loc.save ())
						continue;
					//
					bpl = new MBPartnerLocation (bp);
					bpl.setC_Location_ID (imp.getC_Location_ID ());
					if (!bpl.save ())
						continue;
				}
				imp.setC_Location_ID (bpl.getC_Location_ID ());
				imp.setBillTo_ID (bpl.getC_BPartner_Location_ID ());
				imp.setC_BPartner_Location_ID (bpl.getC_BPartner_Location_ID ());
				
				//	User/Contact
				if (imp.getContactName () != null 
					|| imp.getEMail () != null 
					|| imp.getPhone () != null)
				{
					MUser[] users = bp.getContacts(true);
					MUser user = null;
					for (int i = 0; user == null && i < users.length;  i++)
					{
						String name = users[i].getName();
						if (name.equals(imp.getContactName()) 
							|| name.equals(imp.getName()))
						{
							user = users[i];
							imp.setAD_User_ID (user.getAD_User_ID ());
						}
					}
					if (user == null)
					{
						user = new MUser (bp);
						if (imp.getContactName () == null)
							user.setName (imp.getName ());
						else
							user.setName (imp.getContactName ());
						user.setEMail (imp.getEMail ());
						user.setPhone (imp.getPhone ());
						if (user.save ())
							imp.setAD_User_ID (user.getAD_User_ID ());
					}
				}
				imp.save ();
			}	//	for all new BPartners
			rs.close ();
			pstmt.close ();
			//
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, ""BP - "" + sql.toString(), e);
		}
		sql = new StringBuffer (""UPDATE I_Order ""
			  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=No BPartner, ' ""
			  + ""WHERE C_BPartner_ID IS NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""No BPartner="" + no);

		commit();
		
		//	-- New Orders -----------------------------------------------------

		int noInsert = 0;
		int noInsertLine = 0;
		
		
		//	Go through Order Records w/o
		sql = new StringBuffer (""SELECT * FROM I_Order ""
			  + ""WHERE I_IsImported='N'"").append (clientCheck)
			.append("" ORDER BY C_BPartner_ID, BillTo_ID, C_BPartner_Location_ID, I_Order_ID"");
		try
		{
			PreparedStatement pstmt = DB.prepareStatement (sql.toString(), get_TrxName());
			ResultSet rs = pstmt.executeQuery ();
			//
			int oldC_BPartner_ID = 0;
			int oldBillTo_ID = 0;
			int oldC_BPartner_Location_ID = 0;
			String oldDocumentNo = """";
			//
			MOrder order = null;
			int lineNo = 0;
			while (rs.next ())
			{
				X_I_Order imp = new X_I_Order (ctx, rs, get_TrxName());
				String cmpDocumentNo = imp.getDocumentNo();
				if (cmpDocumentNo == null)
					cmpDocumentNo = """";
				//	New Order
				if (oldC_BPartner_ID != imp.getC_BPartner_ID() 
					|| oldC_BPartner_Location_ID != imp.getC_BPartner_Location_ID()
					|| oldBillTo_ID != imp.getBillTo_ID() 
					|| !oldDocumentNo.equals(cmpDocumentNo))
				{
					if (order != null)
					{
						if (m_docAction != null && m_docAction.length() > 0)
						{
							order.setDocAction(m_docAction);
							order.processIt (m_docAction);
						}
						order.save();	//	fails to process, import OK
					}
					oldC_BPartner_ID = imp.getC_BPartner_ID();
					oldC_BPartner_Location_ID = imp.getC_BPartner_Location_ID();
					oldBillTo_ID = imp.getBillTo_ID();
					oldDocumentNo = imp.getDocumentNo();
					if (oldDocumentNo == null)
						oldDocumentNo = """";
					//
					order = new MOrder (ctx, 0, get_TrxName());
					order.setClientOrg (imp.getAD_Client_ID(), imp.getAD_Org_ID());
					order.setC_DocTypeTarget_ID(imp.getC_DocType_ID());
					order.setIsSOTrx(imp.isSOTrx());
					if (imp.getDocumentNo() != null)
						order.setDocumentNo(imp.getDocumentNo());
					//	Ship Partner
					order.setC_BPartner_ID(imp.getC_BPartner_ID());
					order.setC_BPartner_Location_ID(imp.getC_BPartner_Location_ID());
					if (imp.getAD_User_ID() != 0)
						order.setAD_User_ID(imp.getAD_User_ID());
					//	Bill Partner
					order.setBill_BPartner_ID(imp.getC_BPartner_ID());
					order.setBill_Location_ID(imp.getBillTo_ID());
					//
					if (imp.getDescription() != null)
						order.setDescription(imp.getDescription());
					if( imp.getPaymentRule() != null )
						order.setPaymentRule( imp.getPaymentRule() );
					else
					{
						// sraval: 10016454-Added code from CalloutOrder to default 
						// Payment Rule - POS Order
						int docTypeId = imp.getC_DocType_ID();
						String docTypeSql = ""SELECT d.DocSubTypeSO ""
							+ ""FROM C_DocType d ""
							+ ""LEFT OUTER JOIN AD_Sequence s ON (d.DocNoSequence_ID=s.AD_Sequence_ID) ""
							+ ""WHERE C_DocType_ID=?"";	//	#1
						try
						{							
							PreparedStatement pstmt2 = DB.prepareStatement(docTypeSql, (Trx) null);
							pstmt2.setInt(1, docTypeId);
							ResultSet rs2 = pstmt2.executeQuery();
							String DocSubTypeSO = """";
							
							if (rs2.next())		//	we found document type
							{
								//	Set Context:	Document Sub Type for Sales Orders
								DocSubTypeSO = rs2.getString(1);
								if (DocSubTypeSO == null)
									DocSubTypeSO = ""--"";
							}
							
							//	Payment Rule - POS Order
							if (DocSubTypeSO.equals(MOrder.DocSubTypeSO_POS))								
								order.setPaymentRule(X_C_Order.PAYMENTRULE_Cash);
							else
								order.setPaymentRule(X_C_Order.PAYMENTRULE_OnCredit);
							
							rs2.close();
							pstmt2.close();							
						}
						catch (SQLException e)
						{
							log.log(Level.SEVERE, ""DocSubTypeSO - "" + docTypeSql, e);
						} 
					}
					order.setC_PaymentTerm_ID(imp.getC_PaymentTerm_ID());
					order.setM_PriceList_ID(imp.getM_PriceList_ID());
					order.setM_Warehouse_ID(imp.getM_Warehouse_ID());
					if (imp.getM_Shipper_ID() != 0)
						order.setM_Shipper_ID(imp.getM_Shipper_ID());
					//	SalesRep from Import or the person running the import
					if (imp.getSalesRep_ID() != 0)
						order.setSalesRep_ID(imp.getSalesRep_ID());
					if (order.getSalesRep_ID() == 0)
						order.setSalesRep_ID(getAD_User_ID());
					//
					if (imp.getAD_OrgTrx_ID() != 0)
						order.setAD_OrgTrx_ID(imp.getAD_OrgTrx_ID());
					if (imp.getC_Activity_ID() != 0)
						order.setC_Activity_ID(imp.getC_Activity_ID());
					if (imp.getC_Campaign_ID() != 0)
						order.setC_Campaign_ID(imp.getC_Campaign_ID());
					if (imp.getC_Project_ID() != 0)
						order.setC_Project_ID(imp.getC_Project_ID());
					//
					if (imp.getDateOrdered() != null)
						order.setDateOrdered(imp.getDateOrdered());
					if (imp.getDateAcct() != null)
						order.setDateAcct(imp.getDateAcct());
					//
					if (!order.save())
					{
						String msg = ""Could not save Order"";
						ValueNamePair pp = CLogger.retrieveError();
						if (pp != null)
							msg += "" - "" + pp.toStringX();
						imp.setI_ErrorMsg(msg);
						imp.save();
						continue;
					}
					noInsert++;
					lineNo = 10;
				}
				imp.setC_Order_ID(order.getC_Order_ID());
				//	New OrderLine
				MOrderLine line = new MOrderLine (order);
				line.setLine(lineNo);
				lineNo += 10;

				// gwu: 1712639, added support for UOM conversions
				boolean convertUOM = false;
				if ( imp.getM_Product_ID() != 0 && imp.getC_UOM_ID() != 0 )
				{
					line.setM_Product_ID( imp.getM_Product_ID(), imp.getC_UOM_ID() );
					convertUOM = ( line.getProduct().getC_UOM_ID() != imp.getC_UOM_ID() );
				}
				else if (imp.getM_Product_ID() != 0)
				{
					line.setM_Product_ID(imp.getM_Product_ID(), true);
					convertUOM = false; 
				}

				if (imp.getC_Charge_ID() != 0)
				{
					line.setC_Charge_ID(imp.getC_Charge_ID());
					convertUOM = false;
				}
				
				if( convertUOM )
				{
	                BigDecimal rateQty = MUOMConversion.getProductRateFrom(ctx, line.getM_Product_ID(), imp.getC_UOM_ID() );
	                if( rateQty == null )
	                {
	                	String msg = Msg.translate(ctx, ""NoProductUOMConversion"");
						imp.setI_ErrorMsg(msg);
						imp.save();
						continue;
	                }
					line.setQtyEntered( imp.getQtyOrdered() );
					line.setQtyOrdered( imp.getQtyOrdered().multiply( rateQty ) );
					line.setPrice();
					if (imp.getPriceActual().compareTo(Env.ZERO) != 0)
					{
						line.setPriceEntered( imp.getPriceActual() );
						line.setPriceActual( imp.getPriceActual().divide( rateQty, 12, BigDecimal.ROUND_HALF_UP ) );
					}
				}
				else // no UOM conversion
				{
					line.setQty(imp.getQtyOrdered());
					line.setPrice();
					if (imp.getPriceActual().compareTo(Env.ZERO) != 0)
						line.setPrice(imp.getPriceActual());
				}
				
				if (imp.getC_Tax_ID() != 0)
					line.setC_Tax_ID(imp.getC_Tax_ID());
				else
				{
					line.setTax();
					imp.setC_Tax_ID(line.getC_Tax_ID());
				}
				if (imp.getFreightAmt() != null)
					line.setFreightAmt(imp.getFreightAmt());
				if (imp.getLineDescription() != null)
					line.setDescription(imp.getLineDescription());
				
				if (!line.save())
				{
					String msg = ""Could not save OrderLine"";
					ValueNamePair pp = CLogger.retrieveError();
					if (pp != null)
						msg += "" - "" + pp.toStringX();
					imp.setI_ErrorMsg(msg);
					imp.save();
					continue;
				}

				//	Update Import
				imp.setC_OrderLine_ID(line.getC_OrderLine_ID());
				imp.setI_IsImported(X_I_Order.I_ISIMPORTED_Yes);
				imp.setProcessed(true);
				if (imp.save())
					noInsertLine++;
			}
			if (order != null)
			{
				if (m_docAction != null && m_docAction.length() > 0)
				{
					order.setDocAction(m_docAction);
					order.processIt (m_docAction);
				}
				order.save();
			}
			rs.close();
			pstmt.close();
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""Order - "" + sql.toString(), e);
		}

		//	Set Error to indicator to not imported
		sql = new StringBuffer (""UPDATE I_Order ""
			+ ""SET I_IsImported='N', Updated=SysDate ""
			+ ""WHERE I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		addLog (0, null, new BigDecimal (no), ""@Errors@"");
		//
		addLog (0, null, new BigDecimal (noInsert), ""@C_Order_ID@: @Inserted@"");
		addLog (0, null, new BigDecimal (noInsertLine), ""@C_OrderLine_ID@: @Inserted@"");
		return ""#"" + noInsert + ""/"" + noInsertLine;
	}	//	doIt
"
org.compiere.process.Aging.prepare,Aging.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""StatementDate""))
				p_StatementDate = (Timestamp)element.getParameter();
			else if (name.equals(""IsSOTrx""))
				p_IsSOTrx = ""Y"".equals(element.getParameter());
			else if (name.equals(""C_Currency_ID""))
				p_C_Currency_ID = element.getParameterAsInt();
			else if (name.equals(""AD_Org_ID""))
				p_AD_Org_ID = element.getParameterAsInt();
			else if (name.equals(""C_BP_Group_ID""))
				p_C_BP_Group_ID = element.getParameterAsInt();
			else if (name.equals(""C_BPartner_ID""))
				p_C_BPartner_ID = element.getParameterAsInt();
			else if (name.equals(""IsListInvoices""))
				p_IsListInvoices = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		if (p_StatementDate == null)
			p_StatementDate = new Timestamp (System.currentTimeMillis());
		else
			m_statementOffset = TimeUtil.getDaysBetween( 
				new Timestamp(System.currentTimeMillis()), p_StatementDate);
	}	//	prepare
"
org.compiere.process.Aging.doIt,Aging.java,"String doIt() throws Exception
	{
		log.info(""StatementDate="" + p_StatementDate + "", IsSOTrx="" + p_IsSOTrx
			+ "", C_Currency_ID="" + p_C_Currency_ID + "",AD_Org_ID="" + p_AD_Org_ID
			+ "", C_BP_Group_ID="" + p_C_BP_Group_ID + "", C_BPartner_ID="" + p_C_BPartner_ID
			+ "", IsListInvoices="" + p_IsListInvoices);
		//
		StringBuffer sql = new StringBuffer();
		sql.append(""SELECT bp.C_BP_Group_ID, oi.C_BPartner_ID,oi.C_Invoice_ID,oi.C_InvoicePaySchedule_ID, "" 
			+ ""oi.C_Currency_ID, oi.IsSOTrx, ""								//	5..6
			+ ""oi.DateInvoiced, oi.NetDays,oi.DueDate,oi.DaysDue, "");		//	7..10
		if (p_C_Currency_ID == 0)
			sql.append(""oi.GrandTotal, oi.PaidAmt, oi.OpenAmt "");			//	11..13
		else
		{
			String s = "",oi.C_Currency_ID,"" + p_C_Currency_ID + "",oi.DateAcct,oi.C_ConversionType_ID,oi.AD_Client_ID,oi.AD_Org_ID)"";
			sql.append(""currencyConvert(oi.GrandTotal"").append(s)		//	11..
				.append("", currencyConvert(oi.PaidAmt"").append(s)
				.append("", currencyConvert(oi.OpenAmt"").append(s);
		}
		sql.append("",oi.C_Activity_ID,oi.C_Campaign_ID,oi.C_Project_ID ""	//	14
			+ ""FROM RV_OpenItem oi""
			+ "" INNER JOIN C_BPartner bp ON (oi.C_BPartner_ID=bp.C_BPartner_ID) ""
			+ ""WHERE oi.ISSoTrx="").append(p_IsSOTrx ? ""'Y'"" : ""'N'"");
		if (p_AD_Org_ID > 0)
			sql.append("" AND oi.AD_Org_ID="").append(p_AD_Org_ID);
		if (p_C_BPartner_ID > 0)
			sql.append("" AND oi.C_BPartner_ID="").append(p_C_BPartner_ID);
		else if (p_C_BP_Group_ID > 0)
			sql.append("" AND bp.C_BP_Group_ID="").append(p_C_BP_Group_ID);
		sql.append("" ORDER BY oi.C_BPartner_ID, oi.C_Currency_ID, oi.C_Invoice_ID"");
		
		log.finest(sql.toString());
		String finalSql = MRole.getDefault(getCtx(), false).addAccessSQL(
			sql.toString(), ""oi"", MRole.SQL_FULLYQUALIFIED, MRole.SQL_RO);	
		log.finer(finalSql);

		PreparedStatement pstmt = null;
		//
		MAging aging = null;
		int counter = 0;
		int rows = 0;
		int AD_PInstance_ID = getAD_PInstance_ID();
		//
		try
		{
			pstmt = DB.prepareStatement(finalSql, get_TrxName());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				int C_BP_Group_ID = rs.getInt(1);
				int C_BPartner_ID = rs.getInt(2);
				int C_Invoice_ID = p_IsListInvoices ? rs.getInt(3) : 0;
				int C_InvoicePaySchedule_ID = p_IsListInvoices ? rs.getInt(4) : 0;
				int C_Currency_ID = rs.getInt(5);
				boolean IsSOTrx = ""Y"".equals(rs.getString(6));
				//
			//	Timestamp DateInvoiced = rs.getTimestamp(7);
			//	int NetDays = rs.getInt(8);
				Timestamp DueDate = rs.getTimestamp(9);
				//	Days Due
				int DaysDue = rs.getInt(10)		//	based on today
					+ m_statementOffset;
				//
				BigDecimal GrandTotal = rs.getBigDecimal(11);
			//	BigDecimal PaidAmt = rs.getBigDecimal(12);
				BigDecimal OpenAmt = rs.getBigDecimal(13);
				//
				int C_Activity_ID = p_IsListInvoices ? rs.getInt(14) : 0;
				int C_Campaign_ID = p_IsListInvoices ? rs.getInt(15) : 0;
				int C_Project_ID = p_IsListInvoices ? rs.getInt(16) : 0;
				
				rows++;
				//	New Aging Row
				if (aging == null 		//	Key
					|| AD_PInstance_ID != aging.getAD_PInstance_ID()
					|| C_BPartner_ID != aging.getC_BPartner_ID()
					|| C_Currency_ID != aging.getC_Currency_ID()
					|| C_Invoice_ID != aging.getC_Invoice_ID()
					|| C_InvoicePaySchedule_ID != aging.getC_InvoicePaySchedule_ID())
				{
					if (aging != null)
					{
						if (aging.save())
							log.fine(""#"" + ++counter + "" - "" + aging);
						else
						{
							log.log(Level.SEVERE, ""Not saved "" + aging);
							break;
						}
					}
					aging = new MAging (getCtx(), AD_PInstance_ID, p_StatementDate, 
						C_BPartner_ID, C_Currency_ID, 
						C_Invoice_ID, C_InvoicePaySchedule_ID, 
						C_BP_Group_ID, DueDate, IsSOTrx, get_TrxName());
					if (p_AD_Org_ID > 0)
						aging.setAD_Org_ID(p_AD_Org_ID);
					aging.setC_Activity_ID(C_Activity_ID);
					aging.setC_Campaign_ID(C_Campaign_ID);
					aging.setC_Project_ID(C_Project_ID);
				}
				//	Fill Buckets
				aging.add (DueDate, DaysDue, GrandTotal, OpenAmt);
			}
			if (aging != null)
			{
				if (aging.save())
					log.fine(""#"" + ++counter + "" - "" + aging);
				else
					log.log(Level.SEVERE, ""Not saved "" + aging);
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, finalSql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}	
		//	
		log.info(""#"" + counter + "" - rows="" + rows);
		return """";
	}	//	doIt
"
org.compiere.process.CopyFromProject.prepare,CopyFromProject.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_Project_ID""))
				m_C_Project_ID = ((BigDecimal)element.getParameter()).intValue();
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.CopyFromProject.doIt,CopyFromProject.java,"String doIt() throws Exception
	{
		int To_C_Project_ID = getRecord_ID();
		log.info(""doIt - From C_Project_ID="" + m_C_Project_ID + "" to "" + To_C_Project_ID);
		if (To_C_Project_ID == 0)
			throw new IllegalArgumentException(""Target C_Project_ID == 0"");
		if (m_C_Project_ID == 0)
			throw new IllegalArgumentException(""Source C_Project_ID == 0"");
		MProject from = new MProject (getCtx(), m_C_Project_ID, get_TrxName());
		MProject to = new MProject (getCtx(), To_C_Project_ID, get_TrxName());
		//
		int no = to.copyDetailsFrom (from);

		return ""@Copied@="" + no;
	}	//	doIt
"
org.compiere.process.ViewImportFromDB.replace,ViewImportFromDB.java,"String replace(String sin, char oldChar, char newChar) {
    	if (oldChar != newChar) {
    	    int len = sin.length();
    	    int i = -1;
    	    char[] val = sin.toCharArray(); /* avoid getfield opcode */
    	    int off = 0;   /* avoid getfield opcode */

    	    while (++i < len) {
    		if (val[off + i] == oldChar) {
    		    break;
    		}
    	    }
    	    if (i < len) {
    		char buf[] = new char[len];
    		for (int j = 0 ; j < i ; j++) {
    		    buf[j] = val[off+j];
    		}
    		while (i < len) {
    		    char c = val[off + i];
    		    buf[i] = (c == oldChar) ? newChar : c;
    		    i++;
    		}
    		return new String(buf);
    	    }
    	}
    	return sin;
        }
"
org.compiere.process.ViewImportFromDB.prepare,ViewImportFromDB.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""EntityType""))
				p_EntityType = (String)element.getParameter();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.ViewImportFromDB.trim,ViewImportFromDB.java,"String trim(String s) 
    {
    	int len = s.length();
    	int count = len;
    	int st = 0;
    	int off = 0;      /* avoid getfield opcode */
    	char[] val = s.toCharArray();    /* avoid getfield opcode */

    	while ((st < len) && (val[off + st] <= ' ')) {
    	    st++;
    	}
    	while ((st < len) && (val[off + len - 1] <= ' ')) {
    	    len--;
    	}
    	return ((st > 0) || (len < count)) ? s.substring(st, len) : s;
  }
"
org.compiere.process.ViewImportFromDB.findNext,ViewImportFromDB.java,"int findNext(String query, String keyword){
		
		int Comments = 0;
		int Quotes = 0;
		int Parantheses = 0;
				
		for (int j=0; j<query.length(); j++){
			if (Comments > 0){
				if (!query.startsWith(""*/"",j)) continue;
				Comments--; j++; continue;
			}
			if (Quotes > 0){
				if (!query.startsWith(""'"",j)) continue;
				Quotes --; continue;
			}
			if (query.startsWith(""/*"",j)) {Comments ++; j++; continue;}
			if (query.startsWith(""'"",j)) {Quotes ++; continue;}

			if (query.charAt(j)=='(') {Parantheses++; continue;}
			if (query.charAt(j)==')') {Parantheses--; continue;}
			if (Parantheses==0 && query.startsWith(keyword, j)){
				return j;
			}
		}

		return -1;
	}
"
org.compiere.process.ViewImportFromDB.splitUnions,ViewImportFromDB.java,"String[] splitUnions(String query){
		
		String origQuery = query;
		int iSelect = query.toLowerCase().indexOf(""select "");
		int iPara=  query.indexOf('(');
		
		if(!((iPara>=0) && (iSelect>0) && (iSelect>iPara)))
		{
			String[] selects = query.split(""UNION "");
			return selects;			
		}	
		
		boolean err=false;
		int Comments = 0;
		int Quotes = 0;	
		/* Starting at the index of keyword 'SELECT' in the query, traverse
		 * the String backwards to find a '(' that is not part of a comment or
		 * quotes
		 */
		for(int j=iSelect-1;j>=0;j--)
		{		
						
		
			if (Comments > 0){
				if (!((j >0) && query.startsWith(""/*"",j-1)))						 
					continue;
				Comments--;	j--;continue;
			}
			if (Quotes > 0){
				if (!query.startsWith(""'"",j)) continue;
				Quotes --; continue;
			}
			if ((j >0) && query.startsWith(""*/"",j-1))
			{
				Comments ++; 
				j--; 
				continue;
			}
			if (query.startsWith(""'"",j)) 
			{
				Quotes ++; 
				continue;
			}

			if (query.charAt(j)==')') {
				//unexpected closing paranthesis before first SELECT ???			
				err=true; break;
			}			
			if (query.charAt(j)=='(') 
			{
				/* Found the opening '(', now look for closing ')' by 
				 * traversing the string forward from position of the 
				 * keyword 'SELECT' in the query				 
				 */
				int iWorkPara=j;
				int iWorkParaMatch=-1;
				int Comments2 = 0;
				int Quotes2 = 0;
				int Parantheses2 = 0;
				//Find matching closing parantheses
				for(int k=iSelect+8;k<query.length();k++)
				{		
					
				
					if (Comments2 > 0){
						if (!((k < query.length()-1) && query.startsWith(""*/"",k))) 
							continue;
						Comments2--; 
						k++; 
						continue;
					}
					if (Quotes2 > 0){
						if (!query.startsWith(""'"",k)) continue;
						Quotes2 --; 
						continue;
					}		
					
					
					if ((k < query.length()-1) && query.startsWith(""/*"",k)) 
					{
						Comments2++; 
						k++; 
						continue;
					}
					if (query.startsWith(""'"",k)) 
					{
						Quotes2 ++; 
						continue;
					}
					
					if (query.charAt(k)=='(') {Parantheses2++; continue;}
					if (query.charAt(k)==')')
					{
						if (Parantheses2==0)
						{	
							iWorkParaMatch=k;
							break;
						}
						else
						{
							Parantheses2--; continue;
						}
					}
							
				}
				
				if(iWorkPara>=0 && iWorkParaMatch>0 && iWorkPara < iWorkParaMatch)
				{
					StringBuffer sb= new StringBuffer(query);			
					sb.setCharAt(iWorkPara, ' ');
					sb.setCharAt(iWorkParaMatch, ' ');					
					query=sb.toString();
					continue;
				}
				else
				{	err=true;					
					break;	
				}
			}			
		}		
		if(err)
		{
			//use the origQuery to split by ""UNION"" as variable query might have been modified
			String[] selects = origQuery.split(""UNION "");
			return selects;	
		}		
		String[] selects = query.split(""UNION "");
		return selects;		
	}
"
org.compiere.process.ViewImportFromDB.doIt,ViewImportFromDB.java,"String doIt() throws Exception
	{
		p_AD_Table_ID = getRecord_ID();
		if (p_AD_Table_ID == 0)
			throw new CompiereSystemException(""@NotFound@ @AD_Table_ID@ "" + p_AD_Table_ID);

		log.info(""AD_Table_ID=""+p_AD_Table_ID+"", EntityType=""+p_EntityType);
		
		// get view definition from DB
		CompiereDatabase db = DB.getDatabase();
		Trx trx = Trx.get(""getDatabaseMetaData"");
		DatabaseMetaData md = trx.getConnection().getMetaData();
		String catalog = db.getCatalog();
		String schema = db.getSchema();
		MTable view = new MTable (getCtx(), p_AD_Table_ID, get_TrxName());
		if (view == null || view.get_ID() == 0)
			throw new CompiereSystemException(""@NotFound@ @AD_Table_ID@ "" + p_AD_Table_ID);
		String tableName = view.getTableName();		
		if (view!=null && !view.isView())
		{
			throw new CompiereSystemException(""Cannot create view ""+tableName+"" because there already exists a table with the same name"");
		}		
		String DBTableName = tableName;
		p_EntityType = view.get_EntityType();
		log.info(""View=""+tableName +"", EntityType="" + p_EntityType);
		if (md.storesUpperCaseIdentifiers())
			DBTableName = tableName.toUpperCase();
		if (md.storesLowerCaseIdentifiers())
			DBTableName = tableName.toLowerCase();

		String[] types = {""VIEW""};		
		ResultSet rs = md.getTables(catalog, schema, DBTableName, types);	
		
		if (rs==null)
			log.severe(""There is no database view with a name of ""+DBTableName);
		
		// get view column definition from DB and create/update column definition in AD
		// populate colName with the list of view column name 
		rs = md.getColumns(catalog, schema, DBTableName, null);
		TableCreateColumns tcc = new TableCreateColumns();
		ArrayList<String> colName = tcc.addTableColumn(getCtx(), rs, view, p_EntityType);  

		trx.close();
		
		// get the view definition 
		String command = null;		
		try {
			String sql = null;
			if (DB.isOracle() || DB.isOracleXE()){
				sql = ""SELECT TEXT FROM USER_VIEWS WHERE VIEW_NAME LIKE ?"";
			} else if (DB.isPostgreSQL()) {
				sql = ""SELECT DEFINITION FROM PG_VIEWS WHERE VIEWNAME LIKE ?"";
			} else {
				log.severe(""This database is not yet supported"");
			}
			PreparedStatement pstmt = DB.prepareStatement(sql,(Trx) null);
			pstmt.setString(1, DBTableName);			
			ResultSet rsv = pstmt.executeQuery();
			if (rsv.next()){
				command = rsv.getString(1);
			} else {	
				log.severe(""There is no database view with a name of ""+DBTableName);
			}
		}
		catch (Exception e){ 
			log.severe(""Unable to retrieve view definition for ""+DBTableName);
		}
				
		// parse the view definition and create the corresponding Compiere Application
		// Dictionary entries. This portion is similar to the one from ViewImport.java.
		// TODO: Refactor this portion of the code so it can be shared with ViewImport.java
		int viewNum = 0;		
		try
		{
			// clean the view definition
			int ir = command.indexOf('\t');
			while (ir>0)
			{
				command = replace(command, '\t', ' ');
				ir = command.indexOf('\t');
			}		

			ir = command.indexOf('\n');
			while (ir>0)
			{
				command = replace(command, '\n', ' ');
				ir = command.indexOf('\n');
			}
			
			//Remove the ending semicolon
			if (DB.isPostgreSQL())
			{
				command=command.trim();
				if(command.endsWith("";""))
				{
					command = command.substring(0,command.length()-1);				
				}
			}

			//clean view components and their columns
			String vcdel = ""DELETE FROM AD_ViewComponent WHERE (AD_Table_ID, AD_Client_ID) IN (SELECT AD_Table_ID, AD_Client_ID FROM AD_Table WHERE TableName = '""+tableName+""')"";
			try
			{
				DB.executeUpdate(vcdel, (Trx) null);
			}
			catch (Exception e)
			{
				log.log (Level.SEVERE, vcdel, e);
				throw new Exception();
			}

			//insert into ad_viewComponent for each union part
			String[] selects;
			
			if(DB.isPostgreSQL())
			{
				selects=splitUnions(command);// currently does not handle other set operators (e.g. INTERSECT)				
			}
			else
				selects = command.split(""UNION ""); // currently does not handle other set operators (e.g. INTERSECT)
			
			for (int i=0; i<selects.length; i++)
			{
				int iFrom = findNext(selects[i],"" FROM "");
				if (iFrom < 0)
				{
					log.severe(""No from clause from the SQL: ""+command);
					throw new Exception();
				}
				ArrayList<String> colSQL = new ArrayList<String>();
				ArrayList<String> colType = new ArrayList<String>();
				int isel = selects[i].indexOf(""SELECT "");
				String colstr = selects[i].substring(isel+7, iFrom);
				colstr = colstr.concat("","");
				int iComma = findNext (colstr, "","");
				if (iComma == 0)	
				{
					log.severe(""No view column from the SQL: ""+command);
					throw new Exception();
				}
				int iPrevComma = -1;
				while (iComma != iPrevComma)
				{
					String column = colstr.substring(iPrevComma+1, iComma);
					int iAS = column.lastIndexOf("" AS "");
					String cs = null;
					if (iAS>0)
					{
						cs = column.substring(0, iAS);
					}
					else
					{
						cs = column;
					}							
					cs = cs.trim();							
					if (cs.equalsIgnoreCase(""NULLIF(1,1)""))
					{
						cs = null;
						colType.add(""I"");
					}
					else if (cs.equalsIgnoreCase(""NULLIF('A','A')""))
					{
						cs = null;
						colType.add(""V"");
					}
					else
						colType.add(null);

					colSQL.add(cs);	

					iPrevComma = iComma;
					if (iPrevComma+1 < colstr.length()){
						int next = findNext (colstr.substring(iPrevComma+1),"","");
						if (next > 0)
							iComma = iPrevComma+1 + next;
					}
				} // while (iComma != iPrevComma)

				String from = selects[i].substring(iFrom+1, selects[i].length());
				int iWH = from.indexOf("" WHERE "");
				String where = null;
				String others = null;
				int iGROUP = -1;
				int iORDER = -1;
				if (iWH>0)
				{
					where = from.substring(iWH+1, from.length());
					from = from.substring(0, iWH);
					iGROUP = where.indexOf("" GROUP BY "");
					iORDER = where.indexOf("" ORDER BY "");
					if (iORDER>0 && iGROUP==-1)
						iGROUP = iORDER;
					if (iGROUP>0)
					{
						others = where.substring(iGROUP+1, where.length());
						where = where.substring(0, iGROUP);
					}
				}
				else
				{
					iGROUP = from.indexOf("" GROUP BY "");
					iORDER = from.indexOf("" ORDER BY "");
					if (iORDER>0 && iGROUP==-1)
						iGROUP = iORDER;
					if (iGROUP>0)
					{
						others = from.substring(iGROUP+1, from.length());
						from = from.substring(0, iGROUP);
					}							
				}

				if (from==null || from.length()==0)
				{
					log.severe(""No from clause from the SQL: ""+command);
					throw new Exception();
				}

				//insert into AD_ViewComponent
				MViewComponent mvc = new MViewComponent(Env.getCtx(), 0, null);
				mvc.setName(""VC_""+tableName);
				mvc.setAD_Table_ID(p_AD_Table_ID);
				mvc.setSeqNo((i+1)*10);
				mvc.setIsActive(true);
				mvc.setEntityType(p_EntityType);
				String from1 = from.substring(5);
				from1 = trim(from1);
				int rtix = from1.indexOf(' ');
				if (rtix < 0)
					rtix = from1.length();
				String refTab = from1.substring(0, rtix);
				
				if (DB.isPostgreSQL())
				{
					//Postgresql adding extra '('s whenver there are join clauses. remove them
					refTab=refTab.replace('(', ' ').replace(')',' ');					
				}
				
				refTab = trim(refTab);
				MTable rt = MTable.get(Env.getCtx(), refTab);
				if (rt!=null)
					mvc.setReferenced_Table_ID(rt.get_ID());
				else
					mvc.setReferenced_Table_ID(0);

				mvc.setFromClause(from);
				mvc.setWhereClause(where);
				mvc.setOtherClause(others);
				if (!mvc.save())
				{
					log.severe(""unable to create view component "" + i + "": ""+command);
					throw new Exception();
				}

				//insert into AD_ViewColumn
				MViewColumn mvcol = null;
				for (int j=0; j<colName.size(); j++)
				{
					mvcol = new MViewColumn(Env.getCtx(), 0, null);
					mvcol.setAD_ViewComponent_ID(mvc.get_ID());
					mvcol.setIsActive(true);
					mvcol.setEntityType(p_EntityType);
					log.info(""Importing View "" + tableName + ""(i,j) = ("" + i + "", "" + j + "")"");
					mvcol.setDBDataType(colType.get(j));
					mvcol.setColumnName(colName.get(j));
					mvcol.setColumnSQL(colSQL.get(j));

					if (!mvcol.save())
					{
						log.severe(""unable to create view component "" + i + "" column: ""+ colName.get(j) + "" in "" + command);
						throw new Exception();
					}
				}
			} //for selects

			log.info(""Imported view: "" + tableName);
		
			viewNum++;
		}
		catch (Exception e)
		{
			log.severe(""Error at importing view SQL: ""+command+"" \n "" + e);
		}

		if (viewNum == 0)
			return (""Not able to import view ""+tableName+"" from the database"");
		else
			return (""Imported view ""+tableName+"" from the database"");
		
	}
"
org.compiere.process.ImportAccount.prepare,ImportAccount.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) 
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_Client_ID""))
				m_AD_Client_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""C_Element_ID""))
				m_C_Element_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""UpdateDefaultAccounts""))
				m_updateDefaultAccounts = ""Y"".equals(element.getParameter());
			else if (name.equals(""CreateNewCombination""))
				m_createNewCombination = ""Y"".equals(element.getParameter());
			else if (name.equals(""DeleteOldImported""))
				m_deleteOldImported = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		if (m_DateValue == null)
			m_DateValue = new Timestamp (System.currentTimeMillis());
	}	//	prepare
"
org.compiere.process.ImportAccount.doIt,ImportAccount.java,"String doIt() throws java.lang.Exception
	{
		StringBuffer sql = null;
		int no = 0;
		String clientCheck = "" AND AD_Client_ID="" + m_AD_Client_ID;

		//	****	Prepare	****

		//	Delete Old Imported
		if (m_deleteOldImported)
		{
			sql = new StringBuffer (""DELETE FROM I_ElementValue ""
				+ ""WHERE I_IsImported='Y'"").append(clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			log.fine(""Delete Old Impored ="" + no);
		}

		//	Set Client, Org, IsActive, Created/Updated
		sql = new StringBuffer (""UPDATE I_ElementValue ""
			+ ""SET AD_Client_ID = COALESCE (AD_Client_ID, "").append(m_AD_Client_ID).append(""),""
			+ "" AD_Org_ID = COALESCE (AD_Org_ID, 0),""
			+ "" IsActive = COALESCE (IsActive, 'Y'),""
			+ "" Created = COALESCE (Created, SysDate),""
			+ "" CreatedBy = COALESCE (CreatedBy, 0),""
			+ "" Updated = COALESCE (Updated, SysDate),""
			+ "" UpdatedBy = COALESCE (UpdatedBy, 0),""
			+ "" I_ErrorMsg = NULL,""
			+ "" I_IsImported = 'N' ""
			+ ""WHERE I_IsImported<>'Y' OR I_IsImported IS NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Reset="" + no);

		//	****	Prepare	****

		//	Set Element
		if (m_C_Element_ID != 0)
		{
			sql = new StringBuffer (""UPDATE I_ElementValue ""
				+ ""SET ElementName=(SELECT Name FROM C_Element WHERE C_Element_ID="")
					.append(m_C_Element_ID).append("") ""
				+ ""WHERE ElementName IS NULL AND C_Element_ID IS NULL""
				+ "" AND I_IsImported<>'Y'"").append(clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			log.fine(""Set Element Default="" + no);
		}
		//
		sql = new StringBuffer (""UPDATE I_ElementValue i ""
			+ ""SET C_Element_ID = (SELECT C_Element_ID FROM C_Element e""
			+ "" WHERE i.ElementName=e.Name AND i.AD_Client_ID=e.AD_Client_ID)""
			+ ""WHERE C_Element_ID IS NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Element="" + no);
		//
		sql = new StringBuffer (""UPDATE I_ElementValue ""
			+ ""SET I_IsImported='E', I_ErrorMsg='ERR=Invalid Element, ' ""
			+ ""WHERE C_Element_ID IS NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.config(""Invalid Element="" + no);

		//	No Name, Value
		sql = new StringBuffer (""UPDATE I_ElementValue ""
			+ ""SET I_IsImported='E', I_ErrorMsg='ERR=No Name, ' ""
			+ ""WHERE (Value IS NULL OR Name IS NULL)""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.config(""Invalid Name="" + no);

		
		//	Set Column
		sql = new StringBuffer (""UPDATE I_ElementValue i ""
			+ ""SET AD_Column_ID = (SELECT AD_Column_ID FROM AD_Column c""
			+ "" WHERE UPPER(i.Default_Account)=UPPER(c.ColumnName)""
			+ "" AND c.AD_Table_ID IN (315,266) AND AD_Reference_ID=25) ""
			+ ""WHERE Default_Account IS NOT NULL AND AD_Column_ID IS NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set Column="" + no);
		//
		String ts = DB.isPostgreSQL() ? ""COALESCE(I_ErrorMsg,'')"" 
			: ""I_ErrorMsg"";  //java bug, it could not be used directly
		sql = new StringBuffer (""UPDATE I_ElementValue ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Column, ' ""
			+ ""WHERE AD_Column_ID IS NULL AND Default_Account IS NOT NULL""
			+ "" AND UPPER(Default_Account)<>'DEFAULT_ACCT'""		//	ignore default account
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.config(""Invalid Column="" + no);

		//	Set Post* Defaults (ignore errors)
		String[] yColumns = new String[] {""PostActual"", ""PostBudget"", ""PostStatistical"", ""PostEncumbrance""};
		for (String element : yColumns) {
			sql = new StringBuffer (""UPDATE I_ElementValue SET "")
				.append(element).append(""='Y' WHERE "")
				.append(element).append("" IS NULL OR "")
				.append(element).append("" NOT IN ('Y','N')""
				+ "" AND I_IsImported<>'Y'"").append(clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			log.fine(""Set "" + element + "" Default="" + no);
		}
		//	Summary
		sql = new StringBuffer (""UPDATE I_ElementValue ""
			+ ""SET IsSummary='N' ""
			+ ""WHERE IsSummary IS NULL OR IsSummary NOT IN ('Y','N')""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set IsSummary Default="" + no);

		//	Doc Controlled
		sql = new StringBuffer (""UPDATE I_ElementValue ""
			+ ""SET IsDocControlled = CASE WHEN AD_Column_ID IS NOT NULL THEN 'Y' ELSE 'N' END ""
			+ ""WHERE IsDocControlled IS NULL OR IsDocControlled NOT IN ('Y','N')""
			+ "" AND I_IsImported='N'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set IsDocumentControlled Default="" + no);

		//	Check Account Type A (E) L M O R
		sql = new StringBuffer (""UPDATE I_ElementValue ""
			+ ""SET AccountType='E' ""
			+ ""WHERE AccountType IS NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set AccountType Default="" + no);
		//
		sql = new StringBuffer (""UPDATE I_ElementValue ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts+""||'ERR=Invalid AccountType, ' ""
			+ ""WHERE AccountType NOT IN ('A','E','L','M','O','R')""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.config(""Invalid AccountType="" + no);

		//	Check Account Sign (N) C B
		sql = new StringBuffer (""UPDATE I_ElementValue ""
			+ ""SET AccountSign='N' ""
			+ ""WHERE AccountSign IS NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Set AccountSign Default="" + no);
		//
		sql = new StringBuffer (""UPDATE I_ElementValue ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid AccountSign, ' ""
			+ ""WHERE AccountSign NOT IN ('N','C','D')""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.config(""Invalid AccountSign="" + no);

		//	No Value
		sql = new StringBuffer (""UPDATE I_ElementValue ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=No Key, ' ""
			+ ""WHERE (Value IS NULL OR Value='')""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.config(""Invalid Key="" + no);

		//	****	Update ElementValue from existing
		sql = new StringBuffer (""UPDATE I_ElementValue i ""
			+ ""SET C_ElementValue_ID=(SELECT C_ElementValue_ID FROM C_ElementValue ev""
			+ "" INNER JOIN C_Element e ON (ev.C_Element_ID=e.C_Element_ID)""
			+ "" WHERE i.C_Element_ID=e.C_Element_ID AND i.AD_Client_ID=e.AD_Client_ID""
			+ "" AND i.Value=ev.Value) ""
			+ ""WHERE C_ElementValue_ID IS NULL""
			+ "" AND I_IsImported='N'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Found ElementValue="" + no);

		commit();

		//	-------------------------------------------------------------------
		int noInsert = 0;
		int noUpdate = 0;

		//	Go through Records
		sql = new StringBuffer (""SELECT * ""
			+ ""FROM I_ElementValue ""
			+ ""WHERE I_IsImported='N'"").append(clientCheck)
			.append("" ORDER BY I_ElementValue_ID"");
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql.toString(), get_TrxName());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				X_I_ElementValue impEV = new X_I_ElementValue(getCtx(), rs, get_TrxName());
				int C_ElementValue_ID = impEV.getC_ElementValue_ID();
				int I_ElementValue_ID = impEV.getI_ElementValue_ID();

				//	****	Create/Update ElementValue
				if (C_ElementValue_ID == 0)		//	New
				{
					MElementValue ev = new MElementValue(impEV);
					if (ev.save())
					{
						noInsert++;
						impEV.setC_ElementValue_ID(ev.getC_ElementValue_ID());
						impEV.setI_IsImported(X_I_ElementValue.I_ISIMPORTED_Yes);
						impEV.save();
					}
					else
					{
						sql = new StringBuffer (""UPDATE I_ElementValue i ""
							+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||"").append(DB.TO_STRING(""Insert ElementValue ""))
							.append("" WHERE I_ElementValue_ID="").append(I_ElementValue_ID);
						DB.executeUpdate(sql.toString(), get_TrxName());
					}
				}
				else							//	Update existing
				{
					MElementValue ev = new MElementValue (getCtx(), C_ElementValue_ID, null);
					if (ev.get_ID() != C_ElementValue_ID)
					{
					}
					ev.set(impEV);
					if (ev.save())
					{
						noUpdate++;
						impEV.setI_IsImported(X_I_ElementValue.I_ISIMPORTED_Yes);
						impEV.save();
					}
					else
					{
						sql = new StringBuffer (""UPDATE I_ElementValue i ""
							+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||"").append(DB.TO_STRING(""Update ElementValue""))
							.append(""WHERE I_ElementValue_ID="").append(I_ElementValue_ID);
						DB.executeUpdate(sql.toString(), get_TrxName());
					}
				}
			}	//	for all I_Product
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			throw new Exception (""create"", e);
		}

		//	Set Error to indicator to not imported
		sql = new StringBuffer (""UPDATE I_ElementValue ""
			+ ""SET I_IsImported='N', Updated=SysDate ""
			+ ""WHERE I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		addLog (0, null, new BigDecimal (no), ""@Errors@"");
		addLog (0, null, new BigDecimal (noInsert), ""@C_ElementValue_ID@: @Inserted@"");
		addLog (0, null, new BigDecimal (noUpdate), ""@C_ElementValue_ID@: @Updated@"");

		commit();

		//	*****	Set Parent
		sql = new StringBuffer (""UPDATE I_ElementValue i ""
			+ ""SET ParentElementValue_ID=(SELECT C_ElementValue_ID""
			+ "" FROM C_ElementValue ev WHERE i.C_Element_ID=ev.C_Element_ID""
			+ "" AND i.ParentValue=ev.Value AND i.AD_Client_ID=ev.AD_Client_ID) ""
			+ ""WHERE ParentElementValue_ID IS NULL""
			+ "" AND I_IsImported='Y' AND Processed='N'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Found Parent ElementValue="" + no);
		//
		sql = new StringBuffer (""UPDATE I_ElementValue ""
			+ ""SET I_ErrorMsg=""+ts +""||'Info=ParentNotFound, ' ""
			+ ""WHERE ParentElementValue_ID IS NULL AND ParentValue IS NOT NULL""
			+ "" AND I_IsImported='Y' AND Processed='N'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.config(""Not Found Patent ElementValue="" + no);
		//
		sql = new StringBuffer (""SELECT i.ParentElementValue_ID, i.I_ElementValue_ID,""
			+ "" e.AD_Tree_ID, i.C_ElementValue_ID, i.Value||'-'||i.Name AS Info ""
			+ ""FROM I_ElementValue i""
			+ "" INNER JOIN C_Element e ON (i.C_Element_ID=e.C_Element_ID) ""
			+ ""WHERE i.C_ElementValue_ID IS NOT NULL AND e.AD_Tree_ID IS NOT NULL""
			+ "" AND i.ParentElementValue_ID IS NOT NULL""
			+ "" AND i.I_IsImported='Y' AND Processed='N' AND i.AD_Client_ID="").append(m_AD_Client_ID);
		int noParentUpdate = 0;
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql.toString(), get_TrxName());
			ResultSet rs = pstmt.executeQuery();
			//
			String updateSQL = ""UPDATE AD_TreeNode SET Parent_ID=?, SeqNo=? ""
				+ ""WHERE AD_Tree_ID=? AND Node_ID=?"";
			PreparedStatement updateStmt = DB.prepareStatement(updateSQL, get_TrxName());
			//
			while (rs.next())
			{
				updateStmt.setInt(1, rs.getInt(1));		//	Parent
				updateStmt.setInt(2, rs.getInt(2));		//	SeqNo (assume sequenec in import is the same)
				updateStmt.setInt(3, rs.getInt(3));		//	Tree
				updateStmt.setInt(4, rs.getInt(4));		//	Node
				try
				{
					no = updateStmt.executeUpdate();
					noParentUpdate += no;
				}
				catch (SQLException ex)
				{
					log.log(Level.SEVERE, ""(ParentUpdate)"", ex);
					no = 0;
				}
				if (no == 0)
					log.info(""Parent not found for "" + rs.getString(5));
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, ""(ParentUpdateLoop) "" + sql.toString(), e);
		}
		addLog (0, null, new BigDecimal (noParentUpdate), ""@ParentElementValue_ID@: @Updated@"");

		//	Reset Processing Flag
		sql = new StringBuffer (""UPDATE I_ElementValue ""
			+ ""SET Processing='-'""
			+ ""WHERE I_IsImported='Y' AND Processed='N'""
			+ "" AND C_ElementValue_ID IS NOT NULL"")
			.append(clientCheck);
		if (m_updateDefaultAccounts)
			sql.append("" AND AD_Column_ID IS NOT NULL"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Reset Processing Flag="" + no);

		if (m_updateDefaultAccounts)
			updateDefaults(clientCheck);

		//	Update Description
		sql = new StringBuffer(""SELECT * FROM C_ValidCombination vc ""
			+ ""WHERE EXISTS (SELECT * FROM I_ElementValue i ""
				+ ""WHERE vc.Account_ID=i.C_ElementValue_ID)"");
		
		//	Done
		sql = new StringBuffer (""UPDATE I_ElementValue ""
			+ ""SET Processing='N', Processed='Y'""
			+ ""WHERE I_IsImported='Y'"")
			.append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Processed="" + no);

		return """";
	}	//	doIt
"
org.compiere.process.ImportAccount.updateDefaults,ImportAccount.java,"void updateDefaults (String clientCheck)
	{
		log.config(""CreateNewCombination="" + m_createNewCombination);

		//	****	Update Defaults
		StringBuffer sql = new StringBuffer (""SELECT C_AcctSchema_ID FROM C_AcctSchema_Element ""
			+ ""WHERE C_Element_ID=?"").append(clientCheck);
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql.toString(), get_TrxName());
			pstmt.setInt(1, m_C_Element_ID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				updateDefaultAccounts (rs.getInt(1));
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql.toString(), e);
		}

		//	Default Account		DEFAULT_ACCT
		sql = new StringBuffer (""UPDATE C_AcctSchema_Element e ""
			+ ""SET C_ElementValue_ID=(SELECT C_ElementValue_ID FROM I_ElementValue i""
			+ "" WHERE e.C_Element_ID=i.C_Element_ID AND i.C_ElementValue_ID IS NOT NULL""
			+ "" AND UPPER(i.Default_Account)='DEFAULT_ACCT') ""
			+ ""WHERE EXISTS (SELECT * FROM I_ElementValue i""
			+ "" WHERE e.C_Element_ID=i.C_Element_ID AND i.C_ElementValue_ID IS NOT NULL""
			+ "" AND UPPER(i.Default_Account)='DEFAULT_ACCT' ""
			+ ""	AND i.I_IsImported='Y' AND i.Processing='-')"")
			.append(clientCheck);
		int no = DB.executeUpdate(sql.toString(), get_TrxName());
		addLog (0, null, new BigDecimal (no), ""@C_AcctSchema_Element_ID@: @Updated@"");
	}	//	updateDefaults
"
org.compiere.process.ImportAccount.updateDefaultAccounts,ImportAccount.java,"void updateDefaultAccounts (int C_AcctSchema_ID)
	{
		log.config(""C_AcctSchema_ID="" + C_AcctSchema_ID);

		MAcctSchema as = new MAcctSchema (getCtx(), C_AcctSchema_ID, null);
		if (as.getAcctSchemaElement(""AC"").getC_Element_ID() != m_C_Element_ID)
		{
			log.log(Level.SEVERE, ""C_Element_ID="" + m_C_Element_ID + "" not in AcctSchema="" + as);
			return;
		}

		int[] counts = new int[] {0, 0, 0};

		String sql = ""SELECT i.C_ElementValue_ID, t.TableName, c.ColumnName, i.I_ElementValue_ID ""
			+ ""FROM I_ElementValue i""
			+ "" INNER JOIN AD_Column c ON (i.AD_Column_ID=c.AD_Column_ID)""
			+ "" INNER JOIN AD_Table t ON (c.AD_Table_ID=t.AD_Table_ID) ""
			+ ""WHERE i.I_IsImported='Y' AND Processing='-'""
			+ "" AND i.C_ElementValue_ID IS NOT NULL AND C_Element_ID=?"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, get_TrxName());
			pstmt.setInt(1, m_C_Element_ID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				int C_ElementValue_ID = rs.getInt(1);
				String TableName = rs.getString(2);
				String ColumnName = rs.getString(3);
				int I_ElementValue_ID = rs.getInt(4);
				//	Update it
				int u = updateDefaultAccount(TableName, ColumnName, C_AcctSchema_ID, C_ElementValue_ID);
				counts[u]++;
				if (u != UPDATE_ERROR)
				{
					sql = ""UPDATE I_ElementValue SET Processing='N' ""
						+ ""WHERE I_ElementValue_ID="" + I_ElementValue_ID;
					int no = DB.executeUpdate(sql, get_TrxName());
					if (no != 1)
						log.log(Level.SEVERE, ""Updated="" + no);
				}
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, """", e);
		}
		addLog (0, null, new BigDecimal (counts[UPDATE_ERROR]), as.toString() + "": @Errors@"");
		addLog (0, null, new BigDecimal (counts[UPDATE_YES]), as.toString() + "": @Updated@"");
		addLog (0, null, new BigDecimal (counts[UPDATE_SAME]), as.toString() + "": OK"");

	}	//	createDefaultAccounts
"
org.compiere.process.ImportAccount.updateDefaultAccount,ImportAccount.java,"int updateDefaultAccount (String TableName, String ColumnName, int C_AcctSchema_ID, int C_ElementValue_ID)
	{
		log.fine(TableName + ""."" + ColumnName + "" - "" + C_ElementValue_ID);
		int retValue = UPDATE_ERROR;
		StringBuffer sql = new StringBuffer (""SELECT x."")
			.append(ColumnName).append("",Account_ID FROM "")
			.append(TableName).append("" x INNER JOIN C_ValidCombination vc ON (x."")
			.append(ColumnName).append(""=vc.C_ValidCombination_ID) "")
			.append(""WHERE x.C_AcctSchema_ID="").append(C_AcctSchema_ID);
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql.toString(), get_TrxName());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				int C_ValidCombination_ID = rs.getInt(1);
				int Account_ID = rs.getInt(2);
				//	The current account value is the same
				if (Account_ID == C_ElementValue_ID)
				{
					retValue = UPDATE_SAME;
					log.fine(""Account_ID same as new value"");
				}
				//	We need to update the Account Value
				else
				{
					if (m_createNewCombination)
					{
   					    MAccount oldacct = MAccount.get(getCtx(), C_ValidCombination_ID);
   					    MAccount newacct = MAccount.get(getCtx(), oldacct.getAD_Client_ID(), oldacct.getAD_Org_ID(),
   					    		                     C_AcctSchema_ID, C_ElementValue_ID, oldacct.getC_SubAcct_ID(),
   					    		                     oldacct.getM_Product_ID(),oldacct.getC_BPartner_ID(),
   					    		                     oldacct.getAD_OrgTrx_ID(),oldacct.getC_LocFrom_ID(),
   					    		                     oldacct.getC_LocTo_ID(), oldacct.getC_SalesRegion_ID(),
   					    		                     oldacct.getC_Project_ID(), oldacct.getC_Campaign_ID(),
   					    		                     oldacct.getC_Activity_ID(), oldacct.getUser1_ID(),oldacct.getUser2_ID(),
   					    		                     oldacct.getUserElement1_ID(),oldacct.getUserElement2_ID());
						if (newacct.save())
						{
							int newC_ValidCombination_ID = newacct.getC_ValidCombination_ID();
							if (C_ValidCombination_ID != newC_ValidCombination_ID)
							{
								sql = new StringBuffer (""UPDATE "").append(TableName)
									.append("" SET "").append(ColumnName).append(""="").append(newC_ValidCombination_ID)
									.append("" WHERE C_AcctSchema_ID="").append(C_AcctSchema_ID);
								int no = DB.executeUpdate(sql.toString(), get_TrxName());
								log.fine(""New #"" + no + "" - ""
									+ TableName + ""."" + ColumnName + "" - "" + C_ElementValue_ID
									+ "" -- "" + C_ValidCombination_ID + "" -> "" + newC_ValidCombination_ID);
								if (no == 1)
									retValue = UPDATE_YES;
							}
							else 
								retValue = UPDATE_SAME;
						}
						else
							log.log(Level.SEVERE, ""Account not saved - "" + newacct);
					}
					else	//	Replace Combination
					{
						//	Only Acct Combination directly
						sql = new StringBuffer (""UPDATE C_ValidCombination SET Account_ID="")
							.append(C_ElementValue_ID).append("" WHERE C_ValidCombination_ID="").append(C_ValidCombination_ID);
						int no = DB.executeUpdate(sql.toString(), get_TrxName());
						log.fine(""Replace #"" + no + "" - ""
								+ ""C_ValidCombination_ID="" + C_ValidCombination_ID + "", New Account_ID="" + C_ElementValue_ID);
						if (no == 1)
						{
							retValue = UPDATE_YES;
							//	Where Acct was used
							sql = new StringBuffer (""UPDATE C_ValidCombination SET Account_ID="")
								.append(C_ElementValue_ID).append("" WHERE Account_ID="").append(Account_ID);
							no = DB.executeUpdate(sql.toString(), get_TrxName());
							log.fine(""ImportAccount.updateDefaultAccount - Replace VC #"" + no + "" - ""
									+ ""Account_ID="" + Account_ID + "", New Account_ID="" + C_ElementValue_ID);
							sql = new StringBuffer (""UPDATE Fact_Acct SET Account_ID="")
								.append(C_ElementValue_ID).append("" WHERE Account_ID="").append(Account_ID);
							no = DB.executeUpdate(sql.toString(), get_TrxName());
							log.fine(""ImportAccount.updateDefaultAccount - Replace Fact #"" + no + "" - ""
									+ ""Account_ID="" + Account_ID + "", New Account_ID="" + C_ElementValue_ID);
						}
					}	//	replace combination
				}	//	need to update
			}	//	for all default accounts
			else
				log.log(Level.SEVERE, ""Account not found "" + sql);
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql.toString(), e);
		}

		return retValue;
	}	//	updateDefaultAccount
"
org.compiere.process.MatchPODelete.prepare,MatchPODelete.java,"void prepare ()
	{
		p_M_MatchPO_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.MatchPODelete.doIt,MatchPODelete.java,"String doIt()	throws Exception
	{
		log.info (""M_MatchPO_ID="" + p_M_MatchPO_ID);
		MMatchPO po = new MMatchPO (getCtx(), p_M_MatchPO_ID, get_TrxName());
		if (po.get_ID() == 0)
			throw new CompiereUserException(""@NotFound@ @M_MatchPO_ID@ "" + p_M_MatchPO_ID);
		if (po.delete(true))
			return ""@OK@"";
		po.save();
		return ""@Error@"";
	}	//	doIt
"
org.compiere.process.ProjectPhaseGenOrder.prepare,ProjectPhaseGenOrder.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.ProjectPhaseGenOrder.doIt,ProjectPhaseGenOrder.java,"String doIt() throws Exception
	{
		m_C_ProjectPhase_ID = getRecord_ID();
		log.info(""doIt - C_ProjectPhase_ID="" + m_C_ProjectPhase_ID);
		if (m_C_ProjectPhase_ID == 0)
			throw new IllegalArgumentException(""C_ProjectPhase_ID == 0"");
		MProjectPhase fromPhase = new MProjectPhase (getCtx(), m_C_ProjectPhase_ID, get_TrxName());
		MProject fromProject = ProjectGenOrder.getProject (getCtx(), fromPhase.getC_Project_ID(), get_TrxName());
		MOrder order = new MOrder (fromProject, true, MOrder.DocSubTypeSO_OnCredit);
		order.setDescription(order.getDescription() + "" - "" + fromPhase.getName());
		if (!order.save())
			throw new Exception(""Could not create Order"");

		//	Create an order on Phase Level
		if (fromPhase.getM_Product_ID() != 0)
		{
			MOrderLine ol = new MOrderLine(order);
			ol.setLine(fromPhase.getSeqNo());
			StringBuffer sb = new StringBuffer (fromPhase.getName());
			if (fromPhase.getDescription() != null && fromPhase.getDescription().length() > 0)
				sb.append("" - "").append(fromPhase.getDescription());
			ol.setDescription(sb.toString());
			//
			ol.setM_Product_ID(fromPhase.getM_Product_ID(), true);
			ol.setQty(fromPhase.getQty());
			ol.setPrice();
			if (fromPhase.getPriceActual() != null && fromPhase.getPriceActual().compareTo(Env.ZERO) != 0)
				ol.setPrice(fromPhase.getPriceActual());
			ol.setTax();
			if (!ol.save())
				log.log(Level.SEVERE, ""doIt - Lines not generated"");
			return ""@C_Order_ID@ "" + order.getDocumentNo() + "" (1)"";
		}

		//	Project Tasks
		int count = 0;
		MProjectTask[] tasks = fromPhase.getTasks ();
		for (MProjectTask element : tasks) {
			MOrderLine ol = new MOrderLine(order);
			ol.setLine(element.getSeqNo());
			StringBuffer sb = new StringBuffer (element.getName());
			if (element.getDescription() != null && element.getDescription().length() > 0)
				sb.append("" - "").append(element.getDescription());
			ol.setDescription(sb.toString());
			//
			ol.setM_Product_ID(element.getM_Product_ID(), true);
			ol.setQty(element.getQty());
			ol.setPrice();
			ol.setTax();
			if (ol.save())
				count++;
		}	//	for all lines
		if (tasks.length != count)
			log.log(Level.SEVERE, ""doIt - Lines difference - ProjectTasks="" + tasks.length + "" <> Saved="" + count);

		return ""@C_Order_ID@ "" + order.getDocumentNo() + "" ("" + count + "")"";
	}	//	doIt
"
org.compiere.process.RfQClose.prepare,RfQClose.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
		p_C_RfQ_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.RfQClose.doIt,RfQClose.java,"String doIt () throws Exception
	{
		MRfQ rfq = new MRfQ (getCtx(), p_C_RfQ_ID, get_TrxName());
		if (rfq.get_ID() == 0)
			throw new IllegalArgumentException(""No RfQ found"");
		log.info(""doIt - "" + rfq);
		//
		rfq.setProcessed(true);
		rfq.save();
		//
		int counter = 0;
		MRfQResponse[] responses = rfq.getResponses (false, false);
		for (MRfQResponse element : responses) {
			element.setProcessed(false);
			element.save();
			counter++;
		}
		//
		return ""# "" + counter;
	}	//	doIt
"
org.compiere.process.InventoryValue.prepare,InventoryValue.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) 
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""M_PriceList_Version_ID""))
				p_M_PriceList_Version_ID = element.getParameterAsInt();
			else if (name.equals(""DateValue""))
				p_DateValue = (Timestamp)element.getParameter();
			else if (name.equals(""M_Warehouse_ID""))
				p_M_Warehouse_ID = element.getParameterAsInt();
			else if (name.equals(""C_Currency_ID""))
				p_C_Currency_ID = element.getParameterAsInt();
			else if (name.equals(""M_CostElement_ID""))
				p_M_CostElement_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		if (p_DateValue == null)
			p_DateValue = new Timestamp (System.currentTimeMillis());
	}   //  prepare
"
org.compiere.process.InventoryValue.doIt,InventoryValue.java,"String doIt() throws Exception
	{
		log.info(""M_Warehouse_ID="" + p_M_Warehouse_ID
			+ "",C_Currency_ID="" + p_C_Currency_ID
			+ "",DateValue="" + p_DateValue
			+ "",M_PriceList_Version_ID="" + p_M_PriceList_Version_ID
			+ "",M_CostElement_ID="" + p_M_CostElement_ID);
		
		MWarehouse wh = MWarehouse.get(getCtx(), p_M_Warehouse_ID);
		MClient c = MClient.get(getCtx(), wh.getAD_Client_ID());
		MAcctSchema as = c.getAcctSchema();
		
		//  Delete (just to be sure)
		StringBuffer sql = new StringBuffer (""DELETE FROM T_InventoryValue WHERE AD_PInstance_ID="");
		sql.append(getAD_PInstance_ID());
		int no = DB.executeUpdate(sql.toString(), get_TrxName());

		//	Insert Standard Costs
		sql = new StringBuffer (""INSERT INTO T_InventoryValue ""
			+ ""(AD_PInstance_ID, M_Warehouse_ID, M_Product_ID, M_AttributeSetInstance_ID,""
			+ "" AD_Client_ID, AD_Org_ID, CostStandard) ""
			+ ""SELECT "").append(getAD_PInstance_ID())
			.append("", w.M_Warehouse_ID, c.M_Product_ID, c.M_AttributeSetInstance_ID,""
			+ "" w.AD_Client_ID, w.AD_Org_ID, c.CurrentCostPrice ""
			+ ""FROM M_Warehouse w""
			+ "" INNER JOIN AD_ClientInfo ci ON (w.AD_Client_ID=ci.AD_Client_ID)""
			+ "" INNER JOIN C_AcctSchema acs ON (ci.C_AcctSchema1_ID=acs.C_AcctSchema_ID)""
			+ "" INNER JOIN M_Cost c ON (acs.C_AcctSchema_ID=c.C_AcctSchema_ID AND acs.M_CostType_ID=c.M_CostType_ID AND c.AD_Org_ID IN (0, w.AD_Org_ID))""
			+ "" INNER JOIN M_CostElement ce ON (c.M_CostElement_ID=ce.M_CostElement_ID AND ce.CostingMethod='S' AND ce.CostElementType='M') ""
			+ ""WHERE w.M_Warehouse_ID="").append(p_M_Warehouse_ID);
		int noInsertStd = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Inserted Std="" + noInsertStd);
		if (noInsertStd == 0)
			return ""No Standard Costs found"";

		//	Insert addl Costs
		int noInsertCost = 0;
		if (p_M_CostElement_ID != 0)
		{
			sql = new StringBuffer (""INSERT INTO T_InventoryValue ""
				+ ""(AD_PInstance_ID, M_Warehouse_ID, M_Product_ID, M_AttributeSetInstance_ID,""
				+ "" AD_Client_ID, AD_Org_ID, CostStandard, Cost, M_CostElement_ID) ""
				+ ""SELECT "").append(getAD_PInstance_ID())
				.append("", w.M_Warehouse_ID, c.M_Product_ID, c.M_AttributeSetInstance_ID,""
				+ "" w.AD_Client_ID, w.AD_Org_ID, 0, c.CurrentCostPrice, c.M_CostElement_ID ""
				+ ""FROM M_Warehouse w""
				+ "" INNER JOIN AD_ClientInfo ci ON (w.AD_Client_ID=ci.AD_Client_ID)""
				+ "" INNER JOIN C_AcctSchema acs ON (ci.C_AcctSchema1_ID=acs.C_AcctSchema_ID)""
				+ "" INNER JOIN M_Cost c ON (acs.C_AcctSchema_ID=c.C_AcctSchema_ID AND acs.M_CostType_ID=c.M_CostType_ID AND c.AD_Org_ID IN (0, w.AD_Org_ID)) ""
				+ ""WHERE w.M_Warehouse_ID="").append(p_M_Warehouse_ID)
				.append("" AND c.M_CostElement_ID="").append(p_M_CostElement_ID)
				.append("" AND NOT EXISTS (SELECT * FROM T_InventoryValue iv ""
					+ ""WHERE iv.AD_PInstance_ID="").append(getAD_PInstance_ID())
					.append("" AND iv.M_Warehouse_ID=w.M_Warehouse_ID""
					+ "" AND iv.M_Product_ID=c.M_Product_ID""
					+ "" AND iv.M_AttributeSetInstance_ID=c.M_AttributeSetInstance_ID)"");
			noInsertCost = DB.executeUpdate(sql.toString(), get_TrxName());
			log.fine(""Inserted Cost="" + noInsertCost);
			//	Update Std Cost Records
			sql = new StringBuffer (""UPDATE T_InventoryValue iv ""
				+ ""SET (Cost, M_CostElement_ID)=""
					+ ""(SELECT c.CurrentCostPrice, c.M_CostElement_ID ""
					+ ""FROM M_Warehouse w""
					+ "" INNER JOIN AD_ClientInfo ci ON (w.AD_Client_ID=ci.AD_Client_ID)""
					+ "" INNER JOIN C_AcctSchema acs ON (ci.C_AcctSchema1_ID=acs.C_AcctSchema_ID)""
					+ "" INNER JOIN M_Cost c ON (acs.C_AcctSchema_ID=c.C_AcctSchema_ID""
						+ "" AND acs.M_CostType_ID=c.M_CostType_ID AND c.AD_Org_ID IN (0, w.AD_Org_ID)) ""
					+ ""WHERE c.M_CostElement_ID="" + p_M_CostElement_ID
					+ "" AND iv.M_Warehouse_ID=w.M_Warehouse_ID""
					+ "" AND iv.M_Product_ID=c.M_Product_ID""
					+ "" AND iv.M_AttributeSetInstance_ID=c.M_AttributeSetInstance_ID) ""
				+ ""WHERE EXISTS (SELECT * FROM T_InventoryValue ivv ""
					+ ""WHERE ivv.AD_PInstance_ID="" + getAD_PInstance_ID()
					+ "" AND ivv.M_CostElement_ID IS NULL)"");
			int noUpdatedCost = DB.executeUpdate(sql.toString(), get_TrxName());
			log.fine(""Updated Cost="" + noUpdatedCost);
		}		
		if ((noInsertStd+noInsertCost) == 0)
			return ""No Costs found"";
		
		//  Update Constants
		//  YYYY-MM-DD HH24:MI:SS.mmmm  JDBC Timestamp format
		String myDate = p_DateValue.toString();
		sql = new StringBuffer (""UPDATE T_InventoryValue SET "")
			.append(""DateValue=TO_DATE('"").append(myDate.substring(0,10))
			.append("" 23:59:59','YYYY-MM-DD HH24:MI:SS'),"")
			.append(""M_PriceList_Version_ID="").append(p_M_PriceList_Version_ID).append("","")
			.append(""C_Currency_ID="").append(p_C_Currency_ID);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Constants="" + no);

		//  Get current QtyOnHand with ASI
		sql = new StringBuffer (""UPDATE T_InventoryValue iv SET QtyOnHand = ""
				+ ""(SELECT SUM(QtyOnHand) FROM M_Storage s""
				+ "" INNER JOIN M_Locator l ON (l.M_Locator_ID=s.M_Locator_ID) ""
				+ ""WHERE iv.M_Product_ID=s.M_Product_ID""
				+ "" AND iv.M_Warehouse_ID=l.M_Warehouse_ID""
				+ "" AND iv.M_AttributeSetInstance_ID=s.M_AttributeSetInstance_ID) ""
			+ ""WHERE AD_PInstance_ID="").append(getAD_PInstance_ID())
			.append("" AND iv.M_AttributeSetInstance_ID<>0"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""QtHand with ASI="" + no);
		//  Get current QtyOnHand without ASI
		sql = new StringBuffer (""UPDATE T_InventoryValue iv SET QtyOnHand = ""
				+ ""(SELECT SUM(QtyOnHand) FROM M_Storage s""
				+ "" INNER JOIN M_Locator l ON (l.M_Locator_ID=s.M_Locator_ID) ""
				+ ""WHERE iv.M_Product_ID=s.M_Product_ID""
				+ "" AND iv.M_Warehouse_ID=l.M_Warehouse_ID) ""
			+ ""WHERE AD_PInstance_ID="").append(getAD_PInstance_ID())
			.append("" AND iv.M_AttributeSetInstance_ID=0"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""QtHand w/o ASI="" + no);
		
		//  Adjust for Valuation Date
		sql = new StringBuffer(""UPDATE T_InventoryValue iv ""
			+ ""SET QtyOnHand=""
				+ ""(SELECT iv.QtyOnHand - NVL(SUM(t.MovementQty), 0) ""
				+ ""FROM M_Transaction t""
				+ "" INNER JOIN M_Locator l ON (t.M_Locator_ID=l.M_Locator_ID) ""
				+ ""WHERE t.M_Product_ID=iv.M_Product_ID""
				+ "" AND t.M_AttributeSetInstance_ID=iv.M_AttributeSetInstance_ID""
				+ "" AND t.MovementDate > iv.DateValue""
				+ "" AND l.M_Warehouse_ID=iv.M_Warehouse_ID) ""
			+ ""WHERE iv.M_AttributeSetInstance_ID<>0"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Update with ASI="" + no);
		//
		sql = new StringBuffer(""UPDATE T_InventoryValue iv ""
			+ ""SET QtyOnHand=""
				+ ""(SELECT iv.QtyOnHand - NVL(SUM(t.MovementQty), 0) ""
				+ ""FROM M_Transaction t""
				+ "" INNER JOIN M_Locator l ON (t.M_Locator_ID=l.M_Locator_ID) ""
				+ ""WHERE t.M_Product_ID=iv.M_Product_ID""
				+ "" AND t.MovementDate > iv.DateValue""
				+ "" AND l.M_Warehouse_ID=iv.M_Warehouse_ID) ""
			+ ""WHERE iv.M_AttributeSetInstance_ID=0"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.fine(""Update w/o ASI="" + no);
		
		//  Delete Records w/o OnHand Qty
		sql = new StringBuffer(""DELETE FROM T_InventoryValue ""
			+ ""WHERE (QtyOnHand=0 OR QtyOnHand IS NULL) AND AD_PInstance_ID="").append(getAD_PInstance_ID());
		int noQty = DB.executeUpdate (sql.toString(), get_TrxName());
		log.fine(""NoQty Deleted="" + noQty);

		//  Update Prices
		no = DB.executeUpdate (""UPDATE T_InventoryValue iv ""
			+ ""SET PricePO = ""
				+ ""(SELECT MAX(currencyConvert (po.PriceList,po.C_Currency_ID,iv.C_Currency_ID,iv.DateValue,null, po.AD_Client_ID,po.AD_Org_ID))""
				+ "" FROM M_Product_PO po WHERE po.M_Product_ID=iv.M_Product_ID""
				+ "" AND po.IsCurrentVendor='Y'), ""
			+ ""PriceList = ""
				+ ""(SELECT currencyConvert(pp.PriceList,pl.C_Currency_ID,iv.C_Currency_ID,iv.DateValue,null, pl.AD_Client_ID,pl.AD_Org_ID)""
				+ "" FROM M_PriceList pl, M_PriceList_Version plv, M_ProductPrice pp""
				+ "" WHERE pp.M_Product_ID=iv.M_Product_ID AND pp.M_PriceList_Version_ID=iv.M_PriceList_Version_ID""
				+ "" AND pp.M_PriceList_Version_ID=plv.M_PriceList_Version_ID""
				+ "" AND plv.M_PriceList_ID=pl.M_PriceList_ID), ""
			+ ""PriceStd = ""
				+ ""(SELECT currencyConvert(pp.PriceStd,pl.C_Currency_ID,iv.C_Currency_ID,iv.DateValue,null, pl.AD_Client_ID,pl.AD_Org_ID)""
				+ "" FROM M_PriceList pl, M_PriceList_Version plv, M_ProductPrice pp""
				+ "" WHERE pp.M_Product_ID=iv.M_Product_ID AND pp.M_PriceList_Version_ID=iv.M_PriceList_Version_ID""
				+ "" AND pp.M_PriceList_Version_ID=plv.M_PriceList_Version_ID""
				+ "" AND plv.M_PriceList_ID=pl.M_PriceList_ID), ""
			+ ""PriceLimit = ""
				+ ""(SELECT currencyConvert(pp.PriceLimit,pl.C_Currency_ID,iv.C_Currency_ID,iv.DateValue,null, pl.AD_Client_ID,pl.AD_Org_ID)""
				+ "" FROM M_PriceList pl, M_PriceList_Version plv, M_ProductPrice pp""
				+ "" WHERE pp.M_Product_ID=iv.M_Product_ID AND pp.M_PriceList_Version_ID=iv.M_PriceList_Version_ID""
				+ "" AND pp.M_PriceList_Version_ID=plv.M_PriceList_Version_ID""
				+ "" AND plv.M_PriceList_ID=pl.M_PriceList_ID)""
				, get_TrxName());
		String msg = """";
		if (no == 0)
			msg = ""No Prices"";

		//	Convert if different Currency
		if (as.getC_Currency_ID() != p_C_Currency_ID)
		{
			sql = new StringBuffer (""UPDATE T_InventoryValue iv ""
				+ ""SET CostStandard= ""
					+ ""(SELECT currencyConvert(iv.CostStandard,acs.C_Currency_ID,iv.C_Currency_ID,iv.DateValue,null, iv.AD_Client_ID,iv.AD_Org_ID) ""
					+ ""FROM C_AcctSchema acs WHERE acs.C_AcctSchema_ID="" + as.getC_AcctSchema_ID() + ""),""
				+ ""	Cost= ""
					+ ""(SELECT currencyConvert(iv.Cost,acs.C_Currency_ID,iv.C_Currency_ID,iv.DateValue,null, iv.AD_Client_ID,iv.AD_Org_ID) ""
					+ ""FROM C_AcctSchema acs WHERE acs.C_AcctSchema_ID="" + as.getC_AcctSchema_ID() + "") ""
				+ ""WHERE AD_PInstance_ID="" + getAD_PInstance_ID());
			no = DB.executeUpdate (sql.toString(), get_TrxName());
			log.fine(""Convered="" + no);
		}
		
		//  Update Values
		no = DB.executeUpdate(""UPDATE T_InventoryValue SET ""
			+ ""PricePOAmt = QtyOnHand * PricePO, ""
			+ ""PriceListAmt = QtyOnHand * PriceList, ""
			+ ""PriceStdAmt = QtyOnHand * PriceStd, ""
			+ ""PriceLimitAmt = QtyOnHand * PriceLimit, ""
			+ ""CostStandardAmt = QtyOnHand * CostStandard, ""
			+ ""CostAmt = QtyOnHand * Cost ""
			+ ""WHERE AD_PInstance_ID="" + getAD_PInstance_ID()
			, get_TrxName());
		log.fine(""Calculation="" + no);
		//
		return msg;
	}   //  doIt
"
org.compiere.process.ExpenseAPInvoice.prepare,ExpenseAPInvoice.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_BPartner_ID""))
				m_C_BPartner_ID = element.getParameterAsInt();
			else if (name.equals(""DateReport""))
			{
				m_DateFrom = (Timestamp)element.getParameter();
				m_DateTo = (Timestamp)element.getParameter_To();
			}
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.ExpenseAPInvoice.doIt,ExpenseAPInvoice.java,"String doIt() throws java.lang.Exception
	{
		StringBuffer sql = new StringBuffer (""SELECT * ""
			+ ""FROM S_TimeExpense e ""
			+ ""WHERE e.Processed='Y'""
			+ "" AND e.AD_Client_ID=?"");				//	#1
		if (m_C_BPartner_ID != 0)
			sql.append("" AND e.C_BPartner_ID=?"");	//	#2
		if (m_DateFrom != null)
			sql.append("" AND e.DateReport >= ?"");	//	#3
		if (m_DateTo != null)
			sql.append("" AND e.DateReport <= ?"");	//	#4
		sql.append("" AND EXISTS (SELECT * FROM S_TimeExpenseLine el ""
			+ ""WHERE e.S_TimeExpense_ID=el.S_TimeExpense_ID""
			+ "" AND el.C_InvoiceLine_ID IS NULL""
			+ "" AND el.ConvertedAmt<>0) ""
			+ ""ORDER BY e.C_BPartner_ID, e.S_TimeExpense_ID"");
		//
		int old_BPartner_ID = -1;
		MInvoice invoice = null;
		//
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql.toString (), get_TrxName());
			int par = 1;
			pstmt.setInt(par++, getAD_Client_ID());
			if (m_C_BPartner_ID != 0)
				pstmt.setInt (par++, m_C_BPartner_ID);
			if (m_DateFrom != null)
				pstmt.setTimestamp (par++, m_DateFrom);
			if (m_DateTo != null)
				pstmt.setTimestamp (par++, m_DateTo);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next())				//	********* Expense Line Loop
			{
				MTimeExpense te = new MTimeExpense (getCtx(), rs, get_TrxName());

				//	New BPartner - New Order
				if (te.getC_BPartner_ID() != old_BPartner_ID)
				{
					completeInvoice (invoice);
					MBPartner bp = new MBPartner (getCtx(), te.getC_BPartner_ID(), get_TrxName());
					//
					log.info(""New Invoice for "" + bp);
					invoice = new MInvoice (getCtx(), 0, null);
					invoice.setClientOrg(te.getAD_Client_ID(), te.getAD_Org_ID());
					invoice.setC_DocTypeTarget_ID(MDocBaseType.DOCBASETYPE_APInvoice);	//	API
					invoice.setDocumentNo (te.getDocumentNo());
					//
					invoice.setBPartner(bp);
					if (invoice.getC_BPartner_Location_ID() == 0)
					{
						log.log(Level.SEVERE, ""No BP Location: "" + bp);
						addLog(0, te.getDateReport(), 
							null, ""No Location: "" + te.getDocumentNo() + "" "" + bp.getName());
						invoice = null;
						break;
					}
					invoice.setM_PriceList_ID(te.getM_PriceList_ID());
					invoice.setSalesRep_ID(te.getDoc_User_ID());
					String descr = Msg.translate(getCtx(), ""S_TimeExpense_ID"") 
						+ "": "" + te.getDocumentNo() + "" "" 
						+ DisplayType.getDateFormat(DisplayTypeConstants.Date).format(te.getDateReport());  
					invoice.setDescription(descr);
					if (!invoice.save())
						throw new IllegalStateException(""Cannot save Invoice"");
					old_BPartner_ID = bp.getC_BPartner_ID();
				}
				MTimeExpenseLine[] tel = te.getLines(false);
				for (MTimeExpenseLine line : tel) {
					//	Already Invoiced or nothing to be reimbursed
					if (line.getC_InvoiceLine_ID() != 0
						|| Env.ZERO.compareTo(line.getQtyReimbursed()) == 0
						|| Env.ZERO.compareTo(line.getPriceReimbursed()) == 0)
						continue;

					//	Update Header info
					if (line.getC_Activity_ID() != 0 && line.getC_Activity_ID() != invoice.getC_Activity_ID())
						invoice.setC_Activity_ID(line.getC_Activity_ID());
					if (line.getC_Campaign_ID() != 0 && line.getC_Campaign_ID() != invoice.getC_Campaign_ID())
						invoice.setC_Campaign_ID(line.getC_Campaign_ID());
					if (line.getC_Project_ID() != 0 && line.getC_Project_ID() != invoice.getC_Project_ID())
						invoice.setC_Project_ID(line.getC_Project_ID());
					if (!invoice.save())
						throw new IllegalStateException(""Cannot save Invoice"");
					
					//	Create OrderLine
					MInvoiceLine il = new MInvoiceLine (invoice);
					//
					if (line.getM_Product_ID() != 0)
						il.setM_Product_ID(line.getM_Product_ID(), true);
					il.setQty(line.getQtyReimbursed());		//	Entered/Invoiced
					il.setDescription(line.getDescription());
					//
					il.setC_Project_ID(line.getC_Project_ID());
					il.setC_ProjectPhase_ID(line.getC_ProjectPhase_ID());
					il.setC_ProjectTask_ID(line.getC_ProjectTask_ID());
					il.setC_Activity_ID(line.getC_Activity_ID());
					il.setC_Campaign_ID(line.getC_Campaign_ID());
					//
				//	il.setPrice();	//	not really a list/limit price for reimbursements
					il.setPrice(line.getPriceReimbursed());	//
					il.setTax();
					if (!il.save())
						throw new IllegalStateException(""Cannot save Invoice Line"");
					//	Update TEL
					line.setC_InvoiceLine_ID(il.getC_InvoiceLine_ID());
					line.setIsInvoiced(true);
					line.save();
				}	//	for all expense lines
			}								//	********* Expense Line Loop
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql.toString(), e);
		}
		finally
		{
			try
			{
				if (pstmt != null)
					pstmt.close ();
			}
			catch (Exception e)
			{}
			pstmt = null;
		}
		completeInvoice (invoice);
		return ""@Created@="" + m_noInvoices;
	}	//	doIt
"
org.compiere.process.ExpenseAPInvoice.completeInvoice,ExpenseAPInvoice.java,"void completeInvoice (MInvoice invoice)
	{
		if (invoice == null)
			return;
		invoice.setDocAction(DocActionConstants.ACTION_Prepare);
		invoice.processIt(DocActionConstants.ACTION_Prepare);
		if (!invoice.save())
			throw new IllegalStateException(""Cannot save Invoice"");
		//
		m_noInvoices++;
		addLog(invoice.get_ID(), invoice.getDateInvoiced(), 
			invoice.getGrandTotal(), invoice.getDocumentNo());
	}	//	completeInvoice
"
org.compiere.process.ValidateOrg.prepare,ValidateOrg.java,"void prepare(){
		int orgID = getRecord_ID();
		org = MOrg.get(getCtx(), orgID);
	}
"
org.compiere.process.ValidateOrg.doIt,ValidateOrg.java,"String doIt () throws Exception {
		
		ArrayList<MProduct> product = new ArrayList<MProduct>();
		product = MProduct.findAll(getCtx(), null, null);
		for (int i=0;i<product.size();i++)
		{
			MCost.createForOrg(product.get(i), org);
		}
		org.setIsValid(""Y"");
		org.save();
		return ""Generated missing cost records for organization "" + org.getName();
	}
"
org.compiere.process.YearCreatePeriods.prepare,YearCreatePeriods.java,"void prepare ()
	{
		p_C_Year_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.YearCreatePeriods.doIt,YearCreatePeriods.java,"String doIt ()
		throws Exception
	{
		MYear year = new MYear (getCtx(), p_C_Year_ID, get_TrxName());
		if (p_C_Year_ID == 0 || year.get_ID() != p_C_Year_ID)
			throw new CompiereUserException (""@NotFound@: @C_Year_ID@ - "" + p_C_Year_ID);
		log.info(year.toString());
		//
		if (year.createStdPeriods(null))
			return ""@OK@"";
		return ""@Error@"";
	}	//	doIt
"
org.compiere.process.InvoiceGenerate.prepare,InvoiceGenerate.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null && element.getParameter_To() == null)
				;
			else if (name.equals(""Selection""))
				p_Selection = ""Y"".equals(element.getParameter());
			else if (name.equals(""DateInvoiced""))
				p_DateInvoiced = (Timestamp)element.getParameter();
			else if (name.equals(""AD_Org_ID""))
				p_AD_Org_ID = element.getParameterAsInt();
			else if (name.equals(""C_BPartner_ID""))
				p_C_BPartner_ID = element.getParameterAsInt();
			else if (name.equals(""C_Order_ID""))
				p_C_Order_ID = element.getParameterAsInt();
			else if (name.equals(""ConsolidateDocument""))
				p_ConsolidateDocument = ""Y"".equals(element.getParameter());
			else if (name.equals(""DocAction""))
				p_docAction = (String)element.getParameter();
			else if (name.equals(""DateOrdered""))
			{
				p_DateOrdered_From = (Timestamp)element.getParameter();
				p_DateOrdered_To = (Timestamp)element.getParameter_To();
			}
            else if (name.equals(""AD_User_ID""))
			{
				p_AD_User_ID = element.getParameterAsInt();
            }    
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
			
		}

		//	Login Date
		if (p_DateInvoiced == null)
			p_DateInvoiced = new Timestamp(getCtx().getContextAsTime(""#Date""));

		//	DocAction check
		if (!DocActionConstants.ACTION_Complete.equals(p_docAction))
			p_docAction = DocActionConstants.ACTION_Prepare;
	}	//	prepare
"
org.compiere.process.InvoiceGenerate.doIt,InvoiceGenerate.java,"String doIt () throws Exception
	{
		log.info(""Selection="" + p_Selection + "", DateInvoiced="" + p_DateInvoiced
			+ "", AD_Org_ID="" + p_AD_Org_ID + "", C_BPartner_ID="" + p_C_BPartner_ID
			+ "", C_Order_ID="" + p_C_Order_ID + "", DocAction="" + p_docAction 
			+ "", Consolidate="" + p_ConsolidateDocument+"", AD_User_ID="" + p_AD_User_ID
			+ "", DateOrdered="" + p_DateOrdered_From + ""->"" + p_DateOrdered_To);

		//
		String sql = null;
		if (p_Selection)	//	VInvoiceGen
		{
			sql = ""SELECT * FROM C_Order ""
				+ ""WHERE IsSelected='Y' AND DocStatus IN('CO','CL') AND IsSOTrx='Y' ""
				+ ""ORDER BY M_Warehouse_ID, PriorityRule, C_BPartner_ID, Bill_Location_ID, C_PaymentTerm_ID, C_Order_ID"";
		}
		else
		{
			sql = ""SELECT * FROM C_Order o ""
				+ ""WHERE DocStatus IN('CO','CL') AND IsSOTrx='Y'"";
			if (p_AD_Org_ID != 0)
				sql += "" AND AD_Org_ID=?"";
			if (p_C_BPartner_ID != 0)
				sql += "" AND C_BPartner_ID=?"";
			if (p_C_Order_ID != 0)
				sql += "" AND C_Order_ID=?"";
			if (p_DateOrdered_From != null)
				sql+="" AND TRUNC(DateOrdered,'DD') >= ?"";
			if (p_DateOrdered_To != null)
				sql+="" AND TRUNC(DateOrdered,'DD') <= ?"";
            if (p_AD_User_ID != 0)
				sql += "" AND AD_User_ID=?"";
			//
			sql += "" AND EXISTS (SELECT * FROM C_OrderLine ol ""
					+ ""WHERE o.C_Order_ID=ol.C_Order_ID AND ol.QtyOrdered<>ol.QtyInvoiced) ""
				+ ""ORDER BY M_Warehouse_ID, PriorityRule, C_BPartner_ID, Bill_Location_ID, C_PaymentTerm_ID, C_Order_ID"";
		}
	//	sql += "" FOR UPDATE"";
		
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_TrxName());
			int index = 1;
			if (!p_Selection && p_AD_Org_ID != 0)
				pstmt.setInt(index++, p_AD_Org_ID);
			if (!p_Selection && p_C_BPartner_ID != 0)
				pstmt.setInt(index++, p_C_BPartner_ID);
			if (!p_Selection && p_C_Order_ID != 0)
				pstmt.setInt(index++, p_C_Order_ID);
			if (!p_Selection && p_DateOrdered_From != null)
				pstmt.setTimestamp(index++, p_DateOrdered_From);
			if (!p_Selection && p_DateOrdered_To != null)
				pstmt.setTimestamp(index++, p_DateOrdered_To);
			if (!p_Selection && p_AD_User_ID != 0)
				pstmt.setInt(index++, p_AD_User_ID);	
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		return generate(pstmt);
	}	//	doIt
"
org.compiere.process.InvoiceGenerate.generate,InvoiceGenerate.java,"String generate (PreparedStatement pstmt)
	{
		try
		{
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MOrder order = new MOrder (getCtx(), rs, get_TrxName());
				
				//	New Invoice Location
				if (!p_ConsolidateDocument 
					|| (m_invoice != null 
						&& (m_invoice.getC_BPartner_Location_ID() != order.getBill_Location_ID()
						|| m_invoice.getC_PaymentTerm_ID() != order.getC_PaymentTerm_ID() 
						|| m_invoice.getC_DocTypeTarget_ID() != MDocType.get(getCtx(), order.getC_DocType_ID()).getC_DocTypeInvoice_ID())))
					completeInvoice();
				boolean completeOrder = X_C_Order.INVOICERULE_AfterOrderDelivered.equals(order.getInvoiceRule());
				
				//	Schedule After Delivery
				boolean doInvoice= false;
				if (X_C_Order.INVOICERULE_CustomerScheduleAfterDelivery.equals(order.getInvoiceRule()))
				{
					m_bp = new MBPartner (getCtx(), order.getBill_BPartner_ID(), null);
					if (m_bp.getC_InvoiceSchedule_ID() == 0)
					{
						log.warning(""BPartner has no Schedule - set to After Delivery"");
						order.setInvoiceRule(X_C_Order.INVOICERULE_AfterDelivery);
						order.save();
					}
					else
					{
						MInvoiceSchedule is = MInvoiceSchedule.get(getCtx(), m_bp.getC_InvoiceSchedule_ID());
						if (is.canInvoice(order.getDateOrdered(), order.getGrandTotal()))
							doInvoice = true;
						else
							continue;
					}
				}	//	Schedule
				
				//	After Delivery
				if (doInvoice || X_C_Order.INVOICERULE_AfterDelivery.equals(order.getInvoiceRule()))
				{
					MInOut shipment = null;
					MInOutLine[] shipmentLines = order.getShipmentLines();
					
					// sraval: 10017443- Sort Shipment lines by Line Number 
					Arrays.sort(shipmentLines, new Comparator<MInOutLine>(){
						public int compare(MInOutLine o1, MInOutLine o2) {
							return o1.getLine()-o2.getLine();
					}});
					// end 10017443
					for (MInOutLine shipLine : shipmentLines) {
						if (shipLine.isInvoiced())
							continue;
						if (shipment == null 
							|| shipment.getM_InOut_ID() != shipLine.getM_InOut_ID())
							shipment = new MInOut(getCtx(), shipLine.getM_InOut_ID(), get_TrxName());
						if (!shipment.isComplete()		//	ignore incomplete or reversals 
							|| shipment.getDocStatus().equals(X_M_InOut.DOCSTATUS_Reversed))
							continue;
						//
						createLine (order, shipment, shipLine);
					}	//	shipment lines
					m_line += 1000;
				}
				//	After Order Delivered, Immediate
				else
				{
					MOrderLine[] oLines = order.getLines(true, null);
					for (MOrderLine oLine : oLines) {
						BigDecimal toInvoice = oLine.getQtyOrdered().subtract(oLine.getQtyInvoiced());
						if (toInvoice.compareTo(Env.ZERO) == 0 && oLine.getM_Product_ID() != 0)
							continue;
					//	BigDecimal notInvoicedShipment = oLine.getQtyDelivered().subtract(oLine.getQtyInvoiced());
						//
						boolean fullyDelivered = oLine.getQtyOrdered().compareTo(oLine.getQtyDelivered()) == 0;
					
						//	Complete Order
						if (completeOrder && !fullyDelivered)
						{
							log.fine(""Failed CompleteOrder - "" + oLine);
							completeOrder = false;
							break;
						}
						//	Immediate
						else if (X_C_Order.INVOICERULE_Immediate.equals(order.getInvoiceRule()))
						{
							log.fine(""Immediate - ToInvoice="" + toInvoice + "" - "" + oLine);
							BigDecimal qtyEntered = toInvoice;
							//	Correct UOM for QtyEntered
							if (oLine.getQtyEntered().compareTo(oLine.getQtyOrdered()) != 0)
								qtyEntered = toInvoice
									.multiply(oLine.getQtyEntered())
									.divide(oLine.getQtyOrdered(), 12, BigDecimal.ROUND_HALF_UP);
							createLine (order, oLine, toInvoice, qtyEntered);
							log.info(""ID ""+oLine.get_ID() + ""Qty Ordered "" + oLine.getQtyOrdered() + "" Qty Invoiced ""+oLine.getQtyInvoiced());
						}
						else
						{
							log.fine(""Failed: "" + order.getInvoiceRule() 
								+ "" - ToInvoice="" + toInvoice + "" - "" + oLine);
						}
					}	//	for all order lines
					if (X_C_Order.INVOICERULE_Immediate.equals(order.getInvoiceRule()))
						m_line += 1000;
				}
				
				//	Complete Order successful
				if (completeOrder && X_C_Order.INVOICERULE_AfterOrderDelivered.equals(order.getInvoiceRule()))
				{
					MInOut[] shipments = order.getShipments(true);
					for (MInOut ship : shipments) {
						if (!ship.isComplete()		//	ignore incomplete or reversals 
							|| ship.getDocStatus().equals(X_M_InOut.DOCSTATUS_Reversed))
							continue;
						MInOutLine[] shipLines = ship.getLines(false);
						for (MInOutLine shipLine : shipLines) {
							if (!order.isOrderLine(shipLine.getC_OrderLine_ID()))
								continue;
							if (!shipLine.isInvoiced())
								createLine (order, ship, shipLine);
						}	//	lines
						m_line += 1000;
					}	//	all shipments
				}	//	complete Order
				
			}	//	for all orders
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, """", e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		completeInvoice();
		return ""@Created@ = "" + m_created;
	}	//	generate
"
org.compiere.process.InvoiceGenerate.compare,InvoiceGenerate.java,"int compare(MInOutLine o1, MInOutLine o2) {
							return o1.getLine()-o2.getLine();
					}});
					// end 10017443
					for (MInOutLine shipLine : shipmentLines) {
"
org.compiere.process.InvoiceGenerate.createLine,InvoiceGenerate.java,"void createLine (MOrder order, MOrderLine orderLine, 
		BigDecimal qtyInvoiced, BigDecimal qtyEntered)
	{
		if (m_invoice == null)
		{
			m_invoice = new MInvoice (order, 0, p_DateInvoiced);
			if (!m_invoice.save())
				throw new IllegalStateException(""Could not create Invoice (o)"");
		}
		//	
		MInvoiceLine line = new MInvoiceLine (m_invoice);
		line.setOrderLine(orderLine);
		line.setQtyInvoiced(qtyInvoiced);
		
		log.info(""Qty Invoiced""+line.getQtyInvoiced());
		line.setQtyEntered(qtyEntered);
		line.setLine(m_line + orderLine.getLine());
		if (!line.save())
			throw new IllegalStateException(""Could not create Invoice Line (o)"");
		log.fine(line.toString());
	}	//	createLine
"
org.compiere.process.InvoiceGenerate.createLine,InvoiceGenerate.java,"void createLine (MOrder order, MInOut ship, MInOutLine sLine)
	{
		if (m_invoice == null)
		{
			m_invoice = new MInvoice (order, 0, p_DateInvoiced);
			if (!m_invoice.save())
				throw new IllegalStateException(""Could not create Invoice (s)"");
		}
		//	Create Shipment Comment Line
		if (m_ship == null 
			|| m_ship.getM_InOut_ID() != ship.getM_InOut_ID())
		{
			MDocType dt = MDocType.get(getCtx(), ship.getC_DocType_ID());
			if (m_bp == null || m_bp.getC_BPartner_ID() != ship.getC_BPartner_ID())
				m_bp = new MBPartner (getCtx(), ship.getC_BPartner_ID(), get_TrxName());
			
			//	Reference: Delivery: 12345 - 12.12.12
			MClient client = MClient.get(getCtx(), order.getAD_Client_ID ());
			String AD_Language = client.getAD_Language();
			if (client.isMultiLingualDocument() && m_bp.getAD_Language() != null)
				AD_Language = m_bp.getAD_Language();
			if (AD_Language == null)
				AD_Language = Language.getBaseAD_Language();
			java.text.SimpleDateFormat format = DisplayType.getDateFormat 
				(DisplayTypeConstants.Date, Language.getLanguage(AD_Language));
			String reference = dt.getPrintName(m_bp.getAD_Language())
				+ "": "" + ship.getDocumentNo() 
				+ "" - "" + format.format(ship.getMovementDate());
			m_ship = ship;
			//
			MInvoiceLine line = new MInvoiceLine (m_invoice);
			line.setIsDescription(true);
			line.setDescription(reference);
			line.setLine(m_line + sLine.getLine() - 2);
			if (!line.save())
				throw new IllegalStateException(""Could not create Invoice Comment Line (sh)"");
			//	Optional Ship Address if not Bill Address
			if (order.getBill_Location_ID() != ship.getC_BPartner_Location_ID())
			{
				MLocation addr = MLocation.getBPLocation(getCtx(), ship.getC_BPartner_Location_ID(), null);
				line = new MInvoiceLine (m_invoice);
				line.setIsDescription(true);
				line.setDescription(addr.toString());
				line.setLine(m_line + sLine.getLine() - 1);
				if (!line.save())
					throw new IllegalStateException(""Could not create Invoice Comment Line 2 (sh)"");
			}
		}
		//	
		MInvoiceLine line = new MInvoiceLine (m_invoice);
		line.setShipLine(sLine);
		line.setQtyEntered(sLine.getQtyEntered());
		line.setQtyInvoiced(sLine.getMovementQty());
		line.setLine(m_line + sLine.getLine());
		line.setM_AttributeSetInstance_ID(sLine.getM_AttributeSetInstance_ID());
		
		if (!line.save())
			throw new IllegalStateException(""Could not create Invoice Line (s)"");
		//	Link
		sLine.setIsInvoiced(true);
		if (!sLine.save())
			throw new IllegalStateException(""Could not update Shipment Line"");
		
		log.fine(line.toString());
	}	//	createLine
"
org.compiere.process.InvoiceGenerate.completeInvoice,InvoiceGenerate.java,"void completeInvoice()
	{
		if (m_invoice != null)
		{
			boolean processOK = m_invoice.processIt(p_docAction);
			m_invoice.save();
			if (processOK)
				addLog(m_invoice.getC_Invoice_ID(), m_invoice.getDateInvoiced(), null, m_invoice.getDocumentNo());
			else
			{
				log.warning(""Failed: "" + m_invoice);
				String msg = Msg.getMsg(getCtx(), ""Error"") + "" "" + m_invoice.getDocumentNo();
				addLog(m_invoice.getC_Invoice_ID(), m_invoice.getDateInvoiced(), null, msg);
			}
			m_created++;
		}
		m_invoice = null;
		m_ship = null;
		m_line = 0;
	}	//	completeInvoice
"
org.compiere.process.AllocationReset.prepare,AllocationReset.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			log.fine(""prepare - "" + element);
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_BP_Group_ID""))
				p_C_BP_Group_ID = element.getParameterAsInt();
			else if (name.equals(""C_BPartner_ID""))
				p_C_BPartner_ID = element.getParameterAsInt();
			else if (name.equals(""C_AllocationHdr_ID""))
				p_C_AllocationHdr_ID = element.getParameterAsInt();
			else if (name.equals(""DateAcct""))
			{
				p_DateAcct_From = (Timestamp)element.getParameter();
				p_DateAcct_To = (Timestamp)element.getParameter_To();
			}
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.AllocationReset.doIt,AllocationReset.java,"String doIt() throws Exception
	{
		log.info (""C_BP_Group_ID="" + p_C_BP_Group_ID + "", C_BPartner_ID="" + p_C_BPartner_ID
			+ "", DateAcct= "" + p_DateAcct_From + "" - "" + p_DateAcct_To
			+ "", C_AllocationHdr_ID="" + p_C_AllocationHdr_ID);

		m_trx = Trx.get(""AllocReset"");
		int count = 0;

		if (p_C_AllocationHdr_ID != 0)
		{
			MAllocationHdr hdr = new MAllocationHdr(getCtx(), p_C_AllocationHdr_ID, m_trx);
			if (delete(hdr))
				count++;
			m_trx.close();
			return ""@Deleted@ #"" + count;
		}
		
		//	Selection
		StringBuffer sql = new StringBuffer(""SELECT * FROM C_AllocationHdr ah ""
			+ ""WHERE EXISTS (SELECT * FROM C_AllocationLine al ""
				+ ""WHERE ah.C_AllocationHdr_ID=al.C_AllocationHdr_ID"");
		if (p_C_BPartner_ID != 0)
			sql.append("" AND al.C_BPartner_ID=?"");
		else if (p_C_BP_Group_ID != 0)
			sql.append("" AND EXISTS (SELECT * FROM C_BPartner bp ""
					+ ""WHERE bp.C_BPartner_ID=al.C_BPartner_ID AND bp.C_BP_Group_ID=?)"");
		else
			sql.append("" AND AD_Client_ID=?"");
		if (p_DateAcct_From != null)
			sql.append("" AND TRIM(ah.DateAcct) >= ?"");
		if (p_DateAcct_To != null)
			sql.append("" AND TRIM(ah.DateAcct) <= ?"");
		//	Do not delete Cash Trx
		sql.append("" AND al.C_CashLine_ID IS NULL)"");
		//	Open Period
		sql.append("" AND EXISTS (SELECT * FROM C_Period p""
			+ "" INNER JOIN C_PeriodControl pc ON (p.C_Period_ID=pc.C_Period_ID AND pc.DocBaseType='CMA') ""
			+ ""WHERE ah.DateAcct BETWEEN p.StartDate AND p.EndDate)"");
		//
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql.toString(), m_trx);
			int index = 1;
			if (p_C_BPartner_ID != 0)
				pstmt.setInt(index++, p_C_BPartner_ID);
			else if (p_C_BP_Group_ID != 0)
				pstmt.setInt(index++, p_C_BP_Group_ID);
			else
				pstmt.setInt(index++, getCtx().getAD_Client_ID());
			if (p_DateAcct_From != null)
				pstmt.setTimestamp(index++, p_DateAcct_From);
			if (p_DateAcct_To != null)
				pstmt.setTimestamp(index++, p_DateAcct_To);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				MAllocationHdr hdr = new MAllocationHdr(getCtx(), rs, m_trx);
				if (delete(hdr))
					count++;
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql.toString(), e);
			m_trx.rollback();
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		m_trx.close();
		return ""@Deleted@ #"" + count;
	}	//	doIt
"
org.compiere.process.AllocationReset.delete,AllocationReset.java,"boolean delete(MAllocationHdr hdr)
	{
	//	m_trx.start();
		boolean success = false;
		String msg = null;

		//	Std Period open?
		MAllocationLine[] lines = hdr.getLines(true);
		msg = MPeriod.isOpen(hdr, lines, hdr.getDateAcct(), MDocBaseType.DOCBASETYPE_PaymentAllocation);

		if (msg != null)
		{
			msg = ""@DeleteError@"" + hdr.getDocumentNo() + "": "" + msg;
			log.warning (msg);
			return false;
		}
		
		if (hdr.delete(true, m_trx))
		{
			log.fine(hdr.toString());
			success = true;
		}
		if (success)
			m_trx.commit();
		else
			m_trx.rollback();
		return success;
	}	//	delete
"
org.compiere.process.PaySelectionCreateFrom.prepare,PaySelectionCreateFrom.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""OnlyDiscount""))
				p_OnlyDiscount = ""Y"".equals(element.getParameter());
			else if (name.equals(""OnlyDue""))
				p_OnlyDue = ""Y"".equals(element.getParameter());
			else if (name.equals(""IncludeInDispute""))
				p_IncludeInDispute = ""Y"".equals(element.getParameter());
			else if (name.equals(""MatchRequirementI""))
				p_MatchRequirementI = (String)element.getParameter();
			else if (name.equals(""PaymentRule""))
				p_PaymentRule = (String)element.getParameter();
			else if (name.equals(""DocumentNo""))
			{
				m_DocumentNo_From = (String)element.getParameter();
				m_DocumentNo_To = (String)element.getParameter_To();
			}
			else if (name.equals(""C_BPartner_ID""))
				p_C_BPartner_ID = element.getParameterAsInt();
			else if (name.equals(""C_BP_Group_ID""))
				p_C_BP_Group_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_C_PaySelection_ID = getRecord_ID();
		if (m_DocumentNo_From != null && m_DocumentNo_From.length() == 0)
			m_DocumentNo_From = null;
		if (m_DocumentNo_To != null && m_DocumentNo_To.length() == 0)
			m_DocumentNo_To = null;
	}	//	prepare
"
org.compiere.process.PaySelectionCreateFrom.doIt,PaySelectionCreateFrom.java,"String doIt() throws Exception
	{
		log.info (""C_PaySelection_ID="" + p_C_PaySelection_ID
			+ "", OnlyDiscount="" + p_OnlyDiscount + "", OnlyDue="" + p_OnlyDue
			+ "", IncludeInDispute="" + p_IncludeInDispute
			+ "", MatchRequirement="" + p_MatchRequirementI
			+ "", PaymentRule="" + p_PaymentRule
			+ "", C_BP_Group_ID="" + p_C_BP_Group_ID + "", C_BPartner_ID="" + p_C_BPartner_ID);
		
		MPaySelection psel = new MPaySelection (getCtx(), p_C_PaySelection_ID, get_TrxName());
		if (psel.get_ID() == 0)
			throw new IllegalArgumentException(""Not found C_PaySelection_ID="" + p_C_PaySelection_ID);
		if (psel.isProcessed())
			throw new IllegalArgumentException(""@Processed@"");
	//	psel.getPayDate();

		String sql = ""SELECT C_Invoice_ID,""
			//	Open
			+ "" currencyConvert(invoiceOpen(i.C_Invoice_ID, 0)""
				+ "",i.C_Currency_ID, ?,?, i.C_ConversionType_ID,i.AD_Client_ID,i.AD_Org_ID),""	//	##1/2 Currency_To,PayDate
			//	Discount
			+ "" currencyConvert(paymentTermDiscount(i.GrandTotal,i.C_Currency_ID,i.C_PaymentTerm_ID,i.DateInvoiced, ?)""	//	##3 PayDate
				+ "",i.C_Currency_ID, ?,?,i.C_ConversionType_ID,i.AD_Client_ID,i.AD_Org_ID),""	//	##4/5 Currency_To,PayDate
			+ "" PaymentRule, IsSOTrx ""		//	4..6
			+ ""FROM C_Invoice i ""
			+ ""WHERE IsSOTrx=? AND IsPaid='N' AND DocStatus IN ('CO','CL')"" // ##6
			+ "" AND AD_Client_ID=?""				//	##7
			+ "" AND AD_Org_ID=?""				//	##8
			//	Existing Payments - Will reselect Invoice if prepared but not paid,
			//  as long as it hasn't already been selected for the current payment selection
			+ "" AND NOT EXISTS (SELECT * FROM C_PaySelectionLine psl ""
				+ ""WHERE i.C_Invoice_ID=psl.C_Invoice_ID AND psl.IsActive='Y'""
				+ "" AND ((psl.C_PaySelectionCheck_ID IS NOT NULL AND COALESCE(psl.IsCancelled,'N')='N')""
				+ ""      OR psl.C_PaySelection_ID = ?))"" ;
		//	Disputed
		if (!p_IncludeInDispute)
			sql += "" AND i.IsInDispute='N'"";
		//	PaymentRule (optional)
		if (p_PaymentRule != null)
			sql += "" AND PaymentRule=?"";		//	##
		//	OnlyDiscount
		if (p_OnlyDiscount)
		{
			if (p_OnlyDue)
				sql += "" AND ("";
			else
				sql += "" AND "";
			sql += ""paymentTermDiscount(invoiceOpen(C_Invoice_ID, 0), C_Currency_ID, C_PaymentTerm_ID, DateInvoiced, ?) > 0"";	//	##
		}
		//	OnlyDue
		if (p_OnlyDue)
		{
			if (p_OnlyDiscount)
				sql += "" OR "";
			else
				sql += "" AND "";
			sql += ""paymentTermDueDays(C_PaymentTerm_ID, DateInvoiced, ?) >= 0"";	//	##
			if (p_OnlyDiscount)
				sql += "")"";
		}
		//	Business Partner
		if (p_C_BPartner_ID != 0)
			sql += "" AND C_BPartner_ID=?"";	//	##
		//	Business Partner Group
		else if (p_C_BP_Group_ID != 0)
			sql += "" AND EXISTS (SELECT * FROM C_BPartner bp ""
				+ ""WHERE bp.C_BPartner_ID=i.C_BPartner_ID AND bp.C_BP_Group_ID=?)"";	//	##
		//	PO Matching Requirement
		if (p_MatchRequirementI.equals(X_C_Invoice.MATCHREQUIREMENTI_PurchaseOrder) 
			|| p_MatchRequirementI.equals(X_C_Invoice.MATCHREQUIREMENTI_PurchaseOrderAndReceipt))
		{
			sql += "" AND COALESCE(i.MatchRequirementI,' ') NOT IN ('N','R')""
				+ "" AND EXISTS (SELECT * FROM C_InvoiceLine il ""
				+ ""WHERE i.C_Invoice_ID=il.C_Invoice_ID""
				+ "" AND QtyInvoiced IN (SELECT SUM(Qty) FROM M_MatchPO m ""
					+ ""WHERE il.C_InvoiceLine_ID=m.C_InvoiceLine_ID))"";
		}
		//	Receipt Matching Requirement
		if (p_MatchRequirementI.equals(X_C_Invoice.MATCHREQUIREMENTI_Receipt) 
			|| p_MatchRequirementI.equals(X_C_Invoice.MATCHREQUIREMENTI_PurchaseOrderAndReceipt))
		{
			sql += "" AND COALESCE(i.MatchRequirementI,' ') NOT IN ('N','P')""
				+ "" AND EXISTS (SELECT * FROM C_InvoiceLine il ""
				+ ""WHERE i.C_Invoice_ID=il.C_Invoice_ID""
				+ "" AND QtyInvoiced IN (SELECT SUM(Qty) FROM M_MatchInv m ""
					+ ""WHERE il.C_InvoiceLine_ID=m.C_InvoiceLine_ID))"";
		}
	
		//	Document No
		else if (m_DocumentNo_From != null && m_DocumentNo_To != null)
			sql += "" AND i.DocumentNo BETWEEN ""
				+ DB.TO_STRING(m_DocumentNo_From) + "" AND ""
				+ DB.TO_STRING(m_DocumentNo_To);
		else if (m_DocumentNo_From != null)
		{
			sql += "" AND "";
			if (m_DocumentNo_From.indexOf('%') == -1)
				sql += ""i.DocumentNo >= ""
					+ DB.TO_STRING(m_DocumentNo_From);
			else
				sql += ""i.DocumentNo LIKE ""
					+ DB.TO_STRING(m_DocumentNo_From);
		}

		//
		int lines = 0;
		int C_CurrencyTo_ID = psel.getC_Currency_ID();
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_TrxName());
			int index = 1;
			pstmt.setInt (index++, C_CurrencyTo_ID);
			pstmt.setTimestamp(index++, psel.getPayDate());
			//
			pstmt.setTimestamp(index++, psel.getPayDate());
			pstmt.setInt (index++, C_CurrencyTo_ID);
			pstmt.setTimestamp(index++, psel.getPayDate());
			// Standard isSOTrx = 'N' only switch for Direct Debit
			if (p_PaymentRule != null && p_PaymentRule.equals (X_C_Invoice.PAYMENTRULE_DirectDebit))
				pstmt.setString (index++, ""Y"");
			else 
				pstmt.setString(index++, ""N"");
			//
			pstmt.setInt(index++, psel.getAD_Client_ID());
			pstmt.setInt(index++, psel.getAD_Org_ID());
			pstmt.setInt(index++, p_C_PaySelection_ID);
			if (p_PaymentRule != null)
				pstmt.setString(index++, p_PaymentRule);
			if (p_OnlyDiscount)
				pstmt.setTimestamp(index++, psel.getPayDate());
			if (p_OnlyDue)
				pstmt.setTimestamp(index++, psel.getPayDate());
			if (p_C_BPartner_ID != 0)
				pstmt.setInt (index++, p_C_BPartner_ID);
			else if (p_C_BP_Group_ID != 0)
				pstmt.setInt (index++, p_C_BP_Group_ID);
			//
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				int C_Invoice_ID = rs.getInt(1);
				BigDecimal PayAmt = rs.getBigDecimal(2);
				if (C_Invoice_ID == 0 || Env.ZERO.compareTo(PayAmt) == 0)
					continue;
				BigDecimal DiscountAmt = rs.getBigDecimal(3);
				String PaymentRule  = rs.getString(4);
				boolean isSOTrx = ""Y"".equals(rs.getString(5));
				//
				lines++;
				MPaySelectionLine pselLine = new MPaySelectionLine (psel, lines*10, PaymentRule);
				pselLine.setInvoice (C_Invoice_ID, isSOTrx,
					PayAmt, PayAmt.subtract(DiscountAmt), DiscountAmt);
				if (!pselLine.save())
				{
					pstmt.close();
					throw new IllegalStateException (""Cannot save MPaySelectionLine"");
				}
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		
		return ""@C_PaySelectionLine_ID@  - #"" + lines;
	}	//	doIt
"
org.compiere.process.ImportPayment.prepare,ImportPayment.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) 
		{
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_Org_ID""))
				p_AD_Org_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""C_BankAccount_ID""))
				p_C_BankAccount_ID = ((BigDecimal)element.getParameter()).intValue();
			else if (name.equals(""DeleteOldImported""))
				p_deleteOldImported = ""Y"".equals(element.getParameter());
		//	else if (name.equals(""DocAction""))
		//		m_docAction = (String)para[i].getParameter();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		m_ctx = Env.getCtx();
	}	//	prepare
"
org.compiere.process.ImportPayment.doIt,ImportPayment.java,"String doIt() throws Exception
	{
		log.info(""C_BankAccount_ID"" + p_C_BankAccount_ID);
		MBankAccount ba = MBankAccount.get(getCtx(), p_C_BankAccount_ID);
		if (p_C_BankAccount_ID == 0 || ba.get_ID() != p_C_BankAccount_ID)
			throw new CompiereUserException(""@NotFound@ @C_BankAccount_ID@ - "" + p_C_BankAccount_ID);
		if (p_AD_Org_ID != ba.getAD_Org_ID() && ba.getAD_Org_ID() != 0)
			p_AD_Org_ID = ba.getAD_Org_ID();
		log.info(""AD_Org_ID="" + p_AD_Org_ID);
		
		StringBuffer sql = null;
		int no = 0;
		String clientCheck = "" AND AD_Client_ID="" + ba.getAD_Client_ID();

		//	****	Prepare	****

		//	Delete Old Imported
		if (p_deleteOldImported)
		{
			sql = new StringBuffer (""DELETE FROM I_Payment ""
				  + ""WHERE I_IsImported='Y'"").append (clientCheck);
			no = DB.executeUpdate(sql.toString(), get_TrxName());
			log.fine(""Delete Old Impored ="" + no);
		}

		//	Set Client, Org, IsActive, Created/Updated
		sql = new StringBuffer (""UPDATE I_Payment ""
			  + ""SET AD_Client_ID = COALESCE (AD_Client_ID,"").append (ba.getAD_Client_ID()).append (""),""
			  + "" AD_Org_ID = COALESCE (AD_Org_ID,"").append (p_AD_Org_ID).append (""),"");
		sql.append("" IsActive = COALESCE (IsActive, 'Y'),""
			  + "" Created = COALESCE (Created, SysDate),""
			  + "" CreatedBy = COALESCE (CreatedBy, 0),""
			  + "" Updated = COALESCE (Updated, SysDate),""
			  + "" UpdatedBy = COALESCE (UpdatedBy, 0),""
			  + "" I_ErrorMsg = NULL,""
			  + "" I_IsImported = 'N' ""
			  + ""WHERE I_IsImported<>'Y' OR I_IsImported IS NULL OR AD_Client_ID IS NULL OR AD_Org_ID IS NULL OR AD_Client_ID=0 OR AD_Org_ID=0"");
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		log.info (""Reset="" + no);

		String ts = DB.isPostgreSQL()?""COALESCE(I_ErrorMsg,'')"":""I_ErrorMsg"";  //java bug, it could not be used directly
		sql = new StringBuffer (""UPDATE I_Payment o ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Org, '""
			+ ""WHERE (AD_Org_ID IS NULL OR AD_Org_ID=0""
			+ "" OR EXISTS (SELECT * FROM AD_Org oo WHERE o.AD_Org_ID=oo.AD_Org_ID AND (oo.IsSummary='Y' OR oo.IsActive='N')))""
			+ "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid Org="" + no);
			
		//	Set Bank Account
		sql = new StringBuffer(""UPDATE I_Payment i ""
			+ ""SET C_BankAccount_ID=""
			+ ""( ""
			+ "" SELECT C_BankAccount_ID ""
			+ "" FROM C_BankAccount a, C_Bank b ""
			+ "" WHERE b.IsOwnBank='Y' ""
			+ "" AND a.AD_Client_ID=i.AD_Client_ID ""
			+ "" AND a.C_Bank_ID=b.C_Bank_ID ""
			+ "" AND a.AccountNo=i.BankAccountNo ""
			+ "" AND b.RoutingNo=i.RoutingNo ""
			+ "" OR b.SwiftCode=i.RoutingNo ""
			+ "") ""
			+ ""WHERE i.C_BankAccount_ID IS NULL ""
			+ ""AND i.I_IsImported<>'Y' ""
			+ ""OR i.I_IsImported IS NULL"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""Bank Account (With Routing No)="" + no);
		//
		sql = new StringBuffer(""UPDATE I_Payment i "" 
		 	+ ""SET C_BankAccount_ID=""
			+ ""( ""
			+ "" SELECT C_BankAccount_ID ""
			+ "" FROM C_BankAccount a, C_Bank b ""
			+ "" WHERE b.IsOwnBank='Y' ""
			+ "" AND a.C_Bank_ID=b.C_Bank_ID "" 
			+ "" AND a.AccountNo=i.BankAccountNo ""
			+ "" AND a.AD_Client_ID=i.AD_Client_ID ""
			+ "") ""
			+ ""WHERE i.C_BankAccount_ID IS NULL ""
			+ ""AND i.I_isImported<>'Y' ""
			+ ""OR i.I_isImported IS NULL"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""Bank Account (Without Routing No)="" + no);
		//
		sql = new StringBuffer(""UPDATE I_Payment i ""
			+ ""SET C_BankAccount_ID=(SELECT C_BankAccount_ID FROM C_BankAccount a WHERE a.C_BankAccount_ID="").append(p_C_BankAccount_ID);
		sql.append("" and a.AD_Client_ID=i.AD_Client_ID) ""
			+ ""WHERE i.C_BankAccount_ID IS NULL ""
			+ ""AND i.BankAccountNo IS NULL ""
			+ ""AND i.I_isImported<>'Y' ""
			+ ""OR i.I_isImported IS NULL"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""Bank Account="" + no);
		//	
		sql = new StringBuffer(""UPDATE I_Payment ""
			+ ""SET I_isImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid Bank Account, ' ""
			+ ""WHERE C_BankAccount_ID IS NULL ""
			+ ""AND I_isImported<>'Y' ""
			+ ""OR I_isImported IS NULL"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""Invalid Bank Account="" + no);
		 
		//	Set Currency
		sql = new StringBuffer (""UPDATE I_Payment i ""
			+ ""SET C_Currency_ID=(SELECT C_Currency_ID FROM C_Currency c""
			+ "" WHERE i.ISO_Code=c.ISO_Code AND c.AD_Client_ID IN (0,i.AD_Client_ID)) ""
			+ ""WHERE C_Currency_ID IS NULL""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""Set Currency="" + no);
		//
		sql = new StringBuffer(""UPDATE I_Payment i ""
			//jz	+ ""SET i.C_Currency_ID=(SELECT C_Currency_ID FROM C_BankAccount WHERE C_BankAccount_ID=i.C_BankAccount_ID) ""
				+ ""SET C_Currency_ID=(SELECT C_Currency_ID FROM C_BankAccount WHERE C_BankAccount_ID=i.C_BankAccount_ID) ""
			+ ""WHERE i.C_Currency_ID IS NULL ""
			+ ""AND i.ISO_Code IS NULL"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""Set Currency="" + no);
		//
		sql = new StringBuffer (""UPDATE I_Payment ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=No Currency,' ""
			+ ""WHERE C_Currency_ID IS NULL ""
			+ ""AND I_IsImported<>'E' ""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""No Currency="" + no);
		 
		//	Set Amount
		sql = new StringBuffer(""UPDATE I_Payment ""
		 	+ ""SET ChargeAmt=0 ""
			+ ""WHERE ChargeAmt IS NULL ""
			+ ""AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""Charge Amount="" + no);
		//
		sql = new StringBuffer(""UPDATE I_Payment ""
		 	+ ""SET TaxAmt=0 ""
			+ ""WHERE TaxAmt IS NULL ""
			+ ""AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""Tax Amount="" + no);
		//
		sql = new StringBuffer(""UPDATE I_Payment ""
			+ ""SET WriteOffAmt=0 ""
			+ ""WHERE WriteOffAmt IS NULL ""
			+ ""AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""WriteOff Amount="" + no);
		//
		sql = new StringBuffer(""UPDATE I_Payment ""
			+ ""SET DiscountAmt=0 ""
			+ ""WHERE DiscountAmt IS NULL ""
			+ ""AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""Discount Amount="" + no);
		//
			
		//	Set Date
		sql = new StringBuffer(""UPDATE I_Payment ""
		 	+ ""SET DateTrx=Created ""
			+ ""WHERE DateTrx IS NULL ""
			+ ""AND I_isImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""Trx Date="" + no);
		
		sql = new StringBuffer(""UPDATE I_Payment ""
		 	+ ""SET DateAcct=DateTrx ""
			+ ""WHERE DateAcct IS NULL ""
			+ ""AND I_isImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""Acct Date="" + no);
		
		//	Invoice
		sql = new StringBuffer (""UPDATE I_Payment i ""
			  + ""SET C_Invoice_ID=(SELECT MAX(C_Invoice_ID) FROM C_Invoice ii""
			  + "" WHERE i.InvoiceDocumentNo=ii.DocumentNo AND i.AD_Client_ID=ii.AD_Client_ID) ""
			  + ""WHERE C_Invoice_ID IS NULL AND InvoiceDocumentNo IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.fine(""Set Invoice from DocumentNo="" + no);
		
		//	BPartner
		sql = new StringBuffer (""UPDATE I_Payment i ""
			  + ""SET C_BPartner_ID=(SELECT MAX(C_BPartner_ID) FROM C_BPartner bp""
			  + "" WHERE i.BPartnerValue=bp.Value AND i.AD_Client_ID=bp.AD_Client_ID) ""
			  + ""WHERE C_BPartner_ID IS NULL AND BPartnerValue IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.fine(""Set BP from Value="" + no);
		
		sql = new StringBuffer (""UPDATE I_Payment i ""
			  + ""SET C_BPartner_ID=(SELECT MAX(C_BPartner_ID) FROM C_Invoice ii""
			  + "" WHERE i.C_Invoice_ID=ii.C_Invoice_ID AND i.AD_Client_ID=ii.AD_Client_ID) ""
			  + ""WHERE C_BPartner_ID IS NULL AND C_Invoice_ID IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.fine(""Set BP from Invoice="" + no);
		
		sql = new StringBuffer (""UPDATE I_Payment ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=No BPartner,' ""
			+ ""WHERE C_BPartner_ID IS NULL ""
			+ ""AND I_IsImported<>'E' ""
			+ "" AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning(""No BPartner="" + no);
		
		
		//	Check Payment<->Invoice combination
		sql = new StringBuffer(""UPDATE I_Payment ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'Err=Invalid Payment<->Invoice, ' ""
			+ ""WHERE I_Payment_ID IN ""
				+ ""(SELECT I_Payment_ID ""
				+ ""FROM I_Payment i""
				+ "" INNER JOIN C_Payment p ON (i.C_Payment_ID=p.C_Payment_ID) ""
				+ ""WHERE i.C_Invoice_ID IS NOT NULL ""
				+ "" AND p.C_Invoice_ID IS NOT NULL ""
				+ "" AND p.C_Invoice_ID<>i.C_Invoice_ID) "")
			.append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""Payment<->Invoice Mismatch="" + no);
			
		//	Check Payment<->BPartner combination
		sql = new StringBuffer(""UPDATE I_Payment ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'Err=Invalid Payment<->BPartner, ' ""
			+ ""WHERE I_Payment_ID IN ""
				+ ""(SELECT I_Payment_ID ""
				+ ""FROM I_Payment i""
				+ "" INNER JOIN C_Payment p ON (i.C_Payment_ID=p.C_Payment_ID) ""
				+ ""WHERE i.C_BPartner_ID IS NOT NULL ""
				+ "" AND p.C_BPartner_ID IS NOT NULL ""
				+ "" AND p.C_BPartner_ID<>i.C_BPartner_ID) "")
			.append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""Payment<->BPartner Mismatch="" + no);
			
		//	Check Invoice<->BPartner combination
		sql = new StringBuffer(""UPDATE I_Payment ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'Err=Invalid Invoice<->BPartner, ' ""
			+ ""WHERE I_Payment_ID IN ""
				+ ""(SELECT I_Payment_ID ""
				+ ""FROM I_Payment i""
				+ "" INNER JOIN C_Invoice v ON (i.C_Invoice_ID=v.C_Invoice_ID) ""
				+ ""WHERE i.C_BPartner_ID IS NOT NULL ""
				+ "" AND v.C_BPartner_ID IS NOT NULL ""
				+ "" AND v.C_BPartner_ID<>i.C_BPartner_ID) "")
			.append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""Invoice<->BPartner Mismatch="" + no);
			
		//	Check Invoice.BPartner<->Payment.BPartner combination
		sql = new StringBuffer(""UPDATE I_Payment ""
			+ ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'Err=Invalid Invoice.BPartner<->Payment.BPartner, ' ""
			+ ""WHERE I_Payment_ID IN ""
				+ ""(SELECT I_Payment_ID ""
				+ ""FROM I_Payment i""
				+ "" INNER JOIN C_Invoice v ON (i.C_Invoice_ID=v.C_Invoice_ID)""
				+ "" INNER JOIN C_Payment p ON (i.C_Payment_ID=p.C_Payment_ID) ""
				+ ""WHERE p.C_Invoice_ID<>v.C_Invoice_ID""
				+ "" AND v.C_BPartner_ID<>p.C_BPartner_ID) "")
			.append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""Invoice.BPartner<->Payment.BPartner Mismatch="" + no);
			
		//	TrxType
		sql = new StringBuffer(""UPDATE I_Payment ""
			+ ""SET TrxType='S' ""	//	MPayment.TRXTYPE_Sales
			+ ""WHERE TrxType IS NULL ""
			+ ""AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""TrxType Default="" + no);
		
		//	TenderType
		sql = new StringBuffer(""UPDATE I_Payment ""
			+ ""SET TenderType='K' ""	//	MPayment.TENDERTYPE_Check
			+ ""WHERE TenderType IS NULL ""
			+ ""AND I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.info(""TenderType Default="" + no);

		//	Document Type
		sql = new StringBuffer (""UPDATE I_Payment i ""
			  + ""SET C_DocType_ID=(SELECT C_DocType_ID FROM C_DocType d WHERE d.Name=i.DocTypeName""
			  + "" AND d.DocBaseType IN ('ARR','APP') AND i.AD_Client_ID=d.AD_Client_ID) ""
			  + ""WHERE C_DocType_ID IS NULL AND DocTypeName IS NOT NULL AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.fine(""Set DocType="" + no);
		sql = new StringBuffer (""UPDATE I_Payment ""
			  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=Invalid DocTypeName, ' ""
			  + ""WHERE C_DocType_ID IS NULL AND DocTypeName IS NOT NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""Invalid DocTypeName="" + no);
		sql = new StringBuffer (""UPDATE I_Payment ""
			  + ""SET I_IsImported='E', I_ErrorMsg=""+ts +""||'ERR=No DocType, ' ""
			  + ""WHERE C_DocType_ID IS NULL""
			  + "" AND I_IsImported<>'Y'"").append (clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		if (no != 0)
			log.warning (""No DocType="" + no);

		commit();
		
		//Import Bank Statement
		sql = new StringBuffer(""SELECT * FROM I_Payment""
			+ "" WHERE I_IsImported='N'""
			+ "" ORDER BY C_BankAccount_ID, CheckNo, DateTrx, R_AuthCode"");
			
		MBankAccount account = null;
		PreparedStatement pstmt = null;
		int noInsert = 0;
		try
		{
			pstmt = DB.prepareStatement(sql.toString(), get_TrxName());
			ResultSet rs = pstmt.executeQuery();
				
			while (rs.next())
			{ 
				X_I_Payment imp = new X_I_Payment(m_ctx, rs, get_TrxName());
				//	Get the bank account
				if (account == null || account.getC_BankAccount_ID() != imp.getC_BankAccount_ID())
				{
					account = MBankAccount.get (m_ctx, imp.getC_BankAccount_ID());
					log.info(""New Account="" + account.getAccountNo());
				}
				
				//	New Payment
				MPayment payment = new MPayment (m_ctx, 0, get_TrxName());
				payment.setAD_Org_ID(imp.getAD_Org_ID());
				payment.setDocumentNo(imp.getDocumentNo());
				payment.setPONum(imp.getPONum());
				
				payment.setTrxType(imp.getTrxType());
				payment.setTenderType(imp.getTenderType());
				
				payment.setC_BankAccount_ID(imp.getC_BankAccount_ID());
				payment.setRoutingNo(imp.getRoutingNo());
				payment.setAccountNo(imp.getAccountNo());
				payment.setCheckNo(imp.getCheckNo());
				payment.setMicr(imp.getMicr());
				
				if (imp.getCreditCardType() != null)
					payment.setCreditCardType(imp.getCreditCardType());
				payment.setCreditCardNumber(imp.getCreditCardNumber());
				if (imp.getCreditCardExpMM() != 0)
					payment.setCreditCardExpMM(imp.getCreditCardExpMM());
				if (imp.getCreditCardExpYY() != 0)
					payment.setCreditCardExpYY(imp.getCreditCardExpYY());
				payment.setCreditCardVV(imp.getCreditCardVV());
				payment.setSwipe(imp.getSwipe());
				
				payment.setDateAcct(imp.getDateTrx());
				payment.setDateTrx(imp.getDateTrx());
			//	payment.setDescription(imp.getDescription());
				//
				payment.setC_BPartner_ID(imp.getC_BPartner_ID());
				payment.setC_Invoice_ID(imp.getC_Invoice_ID());
				payment.setC_DocType_ID(imp.getC_DocType_ID());
				payment.setC_Currency_ID(imp.getC_Currency_ID());
			//	payment.setC_ConversionType_ID(imp.getC_ConversionType_ID());
				payment.setC_Charge_ID(imp.getC_Charge_ID());
				payment.setChargeAmt(imp.getChargeAmt());
				payment.setTaxAmt(imp.getTaxAmt());
				
				payment.setPayAmt(imp.getPayAmt());
				payment.setWriteOffAmt(imp.getWriteOffAmt());
				payment.setDiscountAmt(imp.getDiscountAmt());
				payment.setWriteOffAmt(imp.getWriteOffAmt());
				
				//	Copy statement line reference data
				payment.setA_City(imp.getA_City());
				payment.setA_Country(imp.getA_Country());
				payment.setA_EMail(imp.getA_EMail());
				payment.setA_Ident_DL(imp.getA_Ident_DL());
				payment.setA_Ident_SSN(imp.getA_Ident_SSN());
				payment.setA_Name(imp.getA_Name());
				payment.setA_State(imp.getA_State());
				payment.setA_Street(imp.getA_Street());
				payment.setA_Zip(imp.getA_Zip());
				payment.setR_AuthCode(imp.getR_AuthCode());
				payment.setR_Info(imp.getR_Info());
				payment.setR_PnRef(imp.getR_PnRef());
				payment.setR_RespMsg(imp.getR_RespMsg());
				payment.setR_Result(imp.getR_Result());
				payment.setOrig_TrxID(imp.getOrig_TrxID());
				payment.setVoiceAuthCode(imp.getVoiceAuthCode());
				
				//	Save patment
				if (payment.save())
				{
					imp.setC_Payment_ID(payment.getC_Payment_ID());
					imp.setI_IsImported(X_I_Payment.I_ISIMPORTED_Yes);
					imp.setProcessed(true);
					imp.save();
					noInsert++;
				}
				
			}
			
			//	Close database connection
			rs.close();
			pstmt.close();
			rs = null;
			pstmt = null;

		}
		catch(Exception e)
		{
			log.log(Level.SEVERE, sql.toString(), e);
		}
		
		//	Set Error to indicator to not imported
		sql = new StringBuffer (""UPDATE I_Payment ""
			+ ""SET I_IsImported='N', Updated=SysDate ""
			+ ""WHERE I_IsImported<>'Y'"").append(clientCheck);
		no = DB.executeUpdate(sql.toString(), get_TrxName());
		addLog (0, null, new BigDecimal (no), ""@Errors@"");
		//
		addLog (0, null, new BigDecimal (noInsert), ""@C_Payment_ID@: @Inserted@"");
		return """";
	}	//	doIt
"
org.compiere.process.DataMigrationPreview.prepare,DataMigrationPreview.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) 
		{
			String name = element.getParameterName();
		//	log.fine(""prepare - "" + para[i]);
			if (element.getParameter() == null)
				;
			else if (name.equals(""IsIncludeAllEntityTypeData""))
				p_IsIncludeAllEntityTypeData = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);		
		}
		p_AD_DataMigration_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.DataMigrationPreview.doIt,DataMigrationPreview.java,"String doIt() throws Exception
	{
		log.info(""AD_DataMigration_ID="" + p_AD_DataMigration_ID 
			+ "",IsIncludeAllEntityTypeData="" + p_IsIncludeAllEntityTypeData);
		if (p_AD_DataMigration_ID == 0)
			throw new CompiereUserException(""@AD_DataMigration_ID@"");
		MDataMigration dm = new MDataMigration(getCtx(), p_AD_DataMigration_ID, null);
		if (dm.get_ID() != p_AD_DataMigration_ID)
			throw new CompiereUserException(""@NotFound@ @AD_DataMigration_ID@"");

		if (p_IsIncludeAllEntityTypeData && dm.getAD_Client_ID() != 0)
		{
			p_IsIncludeAllEntityTypeData = false;
			log.warning(""IsIncludeAllEntityTypeData set to false - running from Tenant"");
		}

		//	Clean up
		int no = MDataMigrationPreview.delete(dm.getAD_DataMigration_ID(), null);
		addLog(""Old Records Deleted: "" + no);

		//	Call
		Class<?>[] parameterTypes = new Class[]{MDataMigration.class, Boolean.class};
		Object[] args = new Object[]{dm, Boolean.valueOf(p_IsIncludeAllEntityTypeData)};
		Object info = null;
		try
		{
			Class<?> clazz = Class.forName(""com.compiere.client.StartComponent"");
			Object instance = clazz.newInstance();
			Method method = clazz.getMethod (""createDataMigrationPreview"", parameterTypes);
			info = method.invoke (instance, args);
		}
		catch (Exception e)
		{
			throw new CompiereSystemException(e.toString());
		}
		
		if (info != null)
		{
			addLog(info.toString());
			return info.toString();
		}
		throw new CompiereSystemException(""Please check Log"");
	}	//	doIt
"
org.compiere.process.ProjectGenOrder.prepare,ProjectGenOrder.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		m_C_Project_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.ProjectGenOrder.doIt,ProjectGenOrder.java,"String doIt() throws Exception
	{
		log.info(""C_Project_ID="" + m_C_Project_ID);
		if (m_C_Project_ID == 0)
			throw new IllegalArgumentException(""C_Project_ID == 0"");
		MProject fromProject = getProject (getCtx(), m_C_Project_ID, get_TrxName());
		getCtx().setIsSOTrx(true);	//	Set SO context

		/** @todo duplicate invoice prevention */

		MOrder order = new MOrder (fromProject, true, MOrder.DocSubTypeSO_OnCredit);
		if (!order.save())
			throw new Exception(""Could not create Order"");

		//	***	Lines ***
		int count = 0;
		
		//	Service Project	
		if (X_C_Project.PROJECTCATEGORY_ServiceChargeProject.equals(fromProject.getProjectCategory()))
		{
			/** @todo service project invoicing */
			throw new Exception(""Service Charge Projects are on the TODO List"");
		}	//	Service Lines

		else	//	Order Lines
		{
			MProjectLine[] lines = fromProject.getLines ();
			for (MProjectLine element : lines) {
				MOrderLine ol = new MOrderLine(order);
				ol.setLine(element.getLine());
				ol.setDescription(element.getDescription());
				//
				ol.setM_Product_ID(element.getM_Product_ID(), true);
				ol.setQty(element.getPlannedQty().subtract(element.getInvoicedQty()));
				ol.setPrice();
				if (element.getPlannedPrice() != null && element.getPlannedPrice().compareTo(Env.ZERO) != 0)
					ol.setPrice(element.getPlannedPrice());
				ol.setDiscount();
				ol.setTax();
				if (ol.save())
					count++;
			}	//	for all lines
			if (lines.length != count)
				log.log(Level.SEVERE, ""Lines difference - ProjectLines="" + lines.length + "" <> Saved="" + count);
		}	//	Order Lines

		return ""@C_Order_ID@ "" + order.getDocumentNo() + "" ("" + count + "")"";
	}	//	doIt
"
org.compiere.process.ProjectGenOrder.getProject,ProjectGenOrder.java,"MProject getProject (Ctx ctx, int C_Project_ID, Trx trx)
	{
		MProject fromProject = new MProject (ctx, C_Project_ID, trx);
		if (fromProject.getC_Project_ID() == 0)
			throw new IllegalArgumentException(""Project not found C_Project_ID="" + C_Project_ID);
		if (fromProject.getM_PriceList_Version_ID() == 0)
			throw new IllegalArgumentException(""Project has no Price List"");
		if (fromProject.getM_Warehouse_ID() == 0)
			throw new IllegalArgumentException(""Project has no Warehouse"");
		if (fromProject.getC_BPartner_ID() == 0 || fromProject.getC_BPartner_Location_ID() == 0)
			throw new IllegalArgumentException(""Project has no Business Partner/Location"");
		return fromProject;
	}	//	getProject
"
org.compiere.process.EntityTypeComponent.prepare,EntityTypeComponent.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""JarDirectory""))
				p_directory = (String)element.getParameter();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_AD_EntityType_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.EntityTypeComponent.doIt,EntityTypeComponent.java,"String doIt() throws Exception
	{
		log.info(""AD_EntityType_ID="" + p_AD_EntityType_ID 
			+ "", JarDirectory="" + p_directory);
		MEntityType et = MEntityType.getEntityType(getCtx(), p_AD_EntityType_ID);
		String EntityType = et.getEntityType();
		if (EntityType.equals(""D""))
			throw new CompiereUserException(""You cannot create a Dictionary Component"");
		
		//	Directory
		if (p_directory == null || p_directory.length() == 0)
			p_directory = """";	//	current
		else if (!p_directory.endsWith(""/"") && !p_directory.endsWith(""\\""))
				p_directory += File.separator;
		
		//	Check Jar Files
		boolean forWindows = Env.isWindows();
		String classPath = et.getClasspath(forWindows);
		StringTokenizer st = new StringTokenizer(classPath, "",;: "", false);
		List<String> jars = new ArrayList<String>();
		StringBuffer sb = new StringBuffer();
		boolean first = true;
		while (st.hasMoreTokens())
		{
			String jarName = st.nextToken();
			if (jarName.length() == 0)
				continue;
			String fileName = p_directory + jarName;
			File file = new File(fileName);
			if (file.exists() && file.isFile())
				;
			else
				throw new CompiereUserException(""Cannot find: "" + fileName);
			jars.add(fileName);
			if (!first)
				sb.append("","");
			else
				first = false;
			sb.append(fileName);
		}
		log.info(""Deploy file: "" + sb.toString());
		
		//	Call
		Class<?>[] parameterTypes = new Class[]{
			String.class, List.class, String.class
		};
		String targetDir = Ini.getCompiereHome() + File.separator + ""data"";
		Object[] args = new Object[]{EntityType, jars, targetDir};
		Object info = null;
		try
		{
			Class<?> clazz = Class.forName(""com.compiere.client.StartComponent"");
			Object instance = clazz.newInstance();
			Method method = clazz.getMethod (""createComponent"", parameterTypes);
			info = method.invoke (instance, args);
		}
		catch (Exception e)
		{
			throw new CompiereSystemException(e.toString());
		}
		
		if (info != null)
			return info.toString();
		throw new CompiereSystemException(""Please check Log"");
	}	//	doIt
"
org.compiere.process.OrderBatchProcess.prepare,OrderBatchProcess.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_DocTypeTarget_ID""))
				p_C_DocTypeTarget_ID = element.getParameterAsInt();
			else if (name.equals(""DocStatus""))
				p_DocStatus = (String)element.getParameter();
			else if (name.equals(""IsSelfService""))
				p_IsSelfService = (String)element.getParameter();
			else if (name.equals(""C_BPartner_ID""))
				p_C_BPartner_ID = element.getParameterAsInt();
			else if (name.equals(""DateOrdered""))
			{
				p_DateOrdered_From = (Timestamp)element.getParameter();
				p_DateOrdered_To = (Timestamp)element.getParameter_To();
			}
			else if (name.equals(""DocAction""))
				p_DocAction = (String)element.getParameter();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.OrderBatchProcess.doIt,OrderBatchProcess.java,"String doIt () throws Exception
	{
		log.info(""C_DocTypeTarget_ID="" + p_C_DocTypeTarget_ID + "", DocStatus="" + p_DocStatus
			+ "", IsSelfService="" + p_IsSelfService + "", C_BPartner_ID="" + p_C_BPartner_ID
			+ "", DateOrdered="" + p_DateOrdered_From + ""->"" + p_DateOrdered_To
			+ "", DocAction="" + p_DocAction);
		
		if (p_C_DocTypeTarget_ID == 0)
			throw new CompiereUserException(""@NotFound@: @C_DocTypeTarget_ID@"");
		if (p_DocStatus == null || p_DocStatus.length() != 2)
			throw new CompiereUserException(""@NotFound@: @DocStatus@"");
		if (p_DocAction == null || p_DocAction.length() != 2)
			throw new CompiereUserException(""@NotFound@: @DocAction@"");
		
		//
		StringBuffer sql = new StringBuffer(""SELECT * FROM C_Order ""
			+ ""WHERE C_DocTypeTarget_ID=? AND DocStatus=?"");
		if (p_IsSelfService != null && p_IsSelfService.length() == 1)
			sql.append("" AND IsSelfService='"").append(p_IsSelfService).append(""'"");
		if (p_C_BPartner_ID != 0)
			sql.append("" AND C_BPartner_ID="").append(p_C_BPartner_ID);
		if (p_DateOrdered_From != null)
			sql.append("" AND TRUNC(DateOrdered,'DD') >= "").append(DB.TO_DATE(p_DateOrdered_From, true));
		if (p_DateOrdered_To != null)
			sql.append("" AND TRUNC(DateOrdered,'DD') <= "").append(DB.TO_DATE(p_DateOrdered_To, true));
		
		int counter = 0;
		int errCounter = 0;
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql.toString(), get_TrxName());
			pstmt.setInt(1, p_C_DocTypeTarget_ID);
			pstmt.setString(2, p_DocStatus);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				if (process(new MOrder(getCtx(),rs, get_TrxName())))
					counter++;
				else
					errCounter++;
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql.toString(), e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return ""@Updated@="" + counter + "", @Errors@="" + errCounter;
	}	//	doIt
"
org.compiere.process.OrderBatchProcess.process,OrderBatchProcess.java,"boolean process (MOrder order)
	{
		log.info(order.toString());
		//
		order.setDocAction(p_DocAction);
		if (order.processIt(p_DocAction))
		{
			order.save();
			addLog(0, null, null, order.getDocumentNo() + "": OK"");
			return true;
		}
		addLog (0, null, null, order.getDocumentNo() + "": Error "" + order.getProcessMsg());
		return false;
	}	//	process
"
org.compiere.process.DataMigrationIncludeClient.prepare,DataMigrationIncludeClient.java,"void prepare() 
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_DataMigration_ID""))
				p_AD_DataMigration_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.DataMigrationIncludeClient.doIt,DataMigrationIncludeClient.java,"String doIt() throws Exception 
	{
		int AD_Client_ID = getCtx().getAD_Client_ID();
		log.info(""AD_DataMigration_ID="" + p_AD_DataMigration_ID 
			+ "", AD_Client_ID="" + AD_Client_ID);
		if (p_AD_DataMigration_ID == 0)
			throw new CompiereSystemException(""No AD_DataMigration_ID"");
		MDataMigration dm = new MDataMigration(getCtx(), p_AD_DataMigration_ID, get_TrxName());
		if (dm.get_ID() != p_AD_DataMigration_ID)
			throw new CompiereSystemException(""@NotFound@ @AD_DataMigration_ID@ ID="" + p_AD_DataMigration_ID);
		
		if (!X_AD_DataMigration.DATAMIGRATIONTYPE_SystemAndTenant.equals(dm.getDataMigrationType()))
			throw new CompiereSystemException(""@NotFound@ @DataMigrationType@ A<>"" + dm.getDataMigrationType());

		if (dm.getAD_Client_ID() != 0)
			throw new CompiereSystemException(""@NotFound@ @AD_Client_ID@ 0<>"" + dm.getAD_Client_ID());
		
		if (dm.getAD_ClientInclude_ID() != 0)
			throw new CompiereSystemException(""@AD_ClientInclude_ID@ Already set to "" + dm.getAD_ClientInclude_ID());

		dm.setAD_ClientInclude_ID(AD_Client_ID);
		if (!dm.save())
			throw new CompiereSystemException(""Not saved"");
		
		return ""OK"";
	}	//	doIt
"
org.compiere.process.TableCreateColumns.prepare,TableCreateColumns.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""EntityType""))
				p_EntityType = (String)element.getParameter();
			else if (name.equals(""AllTables""))
				p_AllTables = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_AD_Table_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.TableCreateColumns.doIt,TableCreateColumns.java,"String doIt () throws Exception
	{
		if (p_AD_Table_ID == 0)
			throw new CompiereSystemException(""@NotFound@ @AD_Table_ID@ "" + p_AD_Table_ID);
		log.info(""EntityType="" + p_EntityType
			+ "", AllTables="" + p_AllTables
			+ "", AD_Table_ID="" + p_AD_Table_ID);
		//
		CompiereDatabase db = DB.getDatabase();
		Trx trx = Trx.get(""getDatabaseMetaData"");
		DatabaseMetaData md = trx.getConnection().getMetaData();
		String catalog = db.getCatalog();
		String schema = db.getSchema();

		if (p_AllTables)
			addTable (md, catalog, schema);
		else
		{
			MTable table = new MTable (getCtx(), p_AD_Table_ID, get_TrxName());
			if ((table == null) || (table.get_ID() == 0))
				throw new CompiereSystemException(""@NotFound@ @AD_Table_ID@ "" + p_AD_Table_ID);
			log.info(table.getTableName() + "", EntityType="" + p_EntityType);
			String tableName = table.getTableName();
			if (md.storesUpperCaseIdentifiers())
				tableName = tableName.toUpperCase();
			if (md.storesLowerCaseIdentifiers())
				tableName = tableName.toLowerCase();
			ResultSet rs = md.getColumns(catalog, schema, tableName, null);
			addTableColumn(getCtx(), rs, table, p_EntityType);
			SubTableUtil.checkStandardColumns(table, p_EntityType);
		}

		trx.close();
		
		return ""#"" + m_count;
	}	//	doIt
"
org.compiere.process.TableCreateColumns.addTable,TableCreateColumns.java,"void addTable (DatabaseMetaData md, String catalog, String schema) throws Exception
	{
		ResultSet rs = md.getTables(catalog, schema, null, null);
		while (rs.next())
		{
			String tableName = rs.getString(""TABLE_NAME"");
			String tableType = rs.getString(""TABLE_TYPE"");

			//	Try to find
			MTable table = MTable.get(getCtx(), tableName);
			//	Create new ?
			if (table == null)
			{
				String tn = tableName.toUpperCase();
				if (tn.startsWith(""T_SELECTION"")	//	temp table
					|| tn.endsWith(""_VT"")			//	print trl views
					|| tn.endsWith(""_V"")			//	views
					|| tn.endsWith(""_V1"")			//	views
					|| tn.startsWith(""A_A"")			//	asset tables not yet
					|| tn.startsWith(""A_D"")			//	asset tables not yet
					|| (tn.indexOf(""$"") != -1		//	oracle system tables
)
					|| (tn.indexOf(""EXPLAIN"") != -1	//	explain plan
)
					)
				{
					log.fine(""Ignored: "" + tableName + "" - "" + tableType);
					continue;
				}
				//
				log.info(tableName + "" - "" + tableType);

				//	Create New
				table = new MTable(getCtx(), 0, get_TrxName());
				table.setEntityType (p_EntityType);
				table.setName (tableName);
				table.setTableName (tableName);
				table.setIsView(""VIEW"".equals(tableType));
				if (!table.save())
					continue;
			}
			//	Check Columns
			if (md.storesUpperCaseIdentifiers())
				tableName = tableName.toUpperCase();
			if (md.storesLowerCaseIdentifiers())
				tableName = tableName.toLowerCase();
			ResultSet rsC = md.getColumns(catalog, schema, tableName, null);
			addTableColumn(getCtx(), rsC, table, p_EntityType);
			SubTableUtil.checkStandardColumns(table, p_EntityType);
		}
	}	//	addTable
"
org.compiere.process.TableCreateColumns.addTableColumn,TableCreateColumns.java,"ArrayList<String> addTableColumn (Ctx ctx, ResultSet rs, MTable table, String entityType) throws Exception
	{
		ArrayList<String> colName = new ArrayList<String>();
		String tableName = table.getTableName ();
		if (DB.isOracle ())
			tableName = tableName.toUpperCase ();
		//
		while (rs.next ())
		{
			String tn = rs.getString (""TABLE_NAME"");
			if (!tableName.equalsIgnoreCase (tn))
				continue;
			String columnName = rs.getString (""COLUMN_NAME"");
			colName.add(columnName);
			MColumn column = table.getColumn (columnName);
			if (column != null)
				continue;
			int dataType = rs.getInt (""DATA_TYPE"");
			String typeName = rs.getString (""TYPE_NAME"");
			String nullable = rs.getString (""IS_NULLABLE"");
			int size = rs.getInt (""COLUMN_SIZE"");
			int digits = rs.getInt (""DECIMAL_DIGITS"");
			//
			log.config (columnName + "" - DataType="" + dataType + "" "" + typeName
				+ "", Nullable="" + nullable + "", Size="" + size + "", Digits=""
				+ digits);
			//
			column = new MColumn (table);
			column.setEntityType (entityType);
			//	Element
			M_Element element = M_Element.get (ctx, columnName, get_TrxName());
			if (element == null)
			{
				element = new M_Element (ctx, columnName, entityType,
					get_TrxName ());
				element.save ();
			}
			//	Column Sync
			column.setColumnName (element.getColumnName ());
			column.setName (element.getName ());
			column.setDescription (element.getDescription ());
			column.setHelp (element.getHelp ());
			column.setAD_Element_ID (element.getAD_Element_ID ());
			//	Other
			column.setIsMandatory (""NO"".equals (nullable));
			column.setIsMandatoryUI (column.isMandatory());

			// Key
			if (columnName.equalsIgnoreCase (tableName + ""_ID""))
			{
				column.setIsKey (true);
				column.setAD_Reference_ID (DisplayTypeConstants.ID);
				column.setIsUpdateable(false);
			}
			// Account
			else if ((columnName.toUpperCase ().indexOf (""ACCT"") != -1)
				&& (size == 10))
				column.setAD_Reference_ID (DisplayTypeConstants.Account);
			// Location
			else if (columnName.equalsIgnoreCase (""C_Location_ID""))
				column.setAD_Reference_ID (DisplayTypeConstants.Location);
			// Product Attribute
			else if (columnName.equalsIgnoreCase (""M_AttributeSetInstance_ID""))
				column.setAD_Reference_ID (DisplayTypeConstants.PAttribute);
			// SalesRep_ID (=User)
			else if (columnName.equalsIgnoreCase (""SalesRep_ID""))
			{
				column.setAD_Reference_ID (DisplayTypeConstants.Table);
				column.setAD_Reference_Value_ID (190);
			}
			// ID
			else if (columnName.endsWith (""_ID""))
				column.setAD_Reference_ID (DisplayTypeConstants.TableDir);
			// Date
			else if ((dataType == Types.DATE) || (dataType == Types.TIME)
				|| (dataType == Types.TIMESTAMP)
				// || columnName.toUpperCase().indexOf(""DATE"") != -1
				|| columnName.equalsIgnoreCase (""Created"")
				|| columnName.equalsIgnoreCase (""Updated""))
			{
				column.setAD_Reference_ID (DisplayTypeConstants.DateTime);
				column.setIsUpdateable(false);
			}
			// CreatedBy/UpdatedBy (=User)
			else if (columnName.equalsIgnoreCase (""CreatedBy"")
				|| columnName.equalsIgnoreCase (""UpdatedBy""))
			{
				column.setAD_Reference_ID (DisplayTypeConstants.Table);
				column.setAD_Reference_Value_ID (110);
				column.setConstraintType(X_AD_Column.CONSTRAINTTYPE_DoNOTCreate);
				column.setIsUpdateable(false);
			}
			//	Entity Type
			else if (columnName.equalsIgnoreCase (""EntityType""))
			{
				column.setAD_Reference_ID (DisplayTypeConstants.Table);
				column.setAD_Reference_Value_ID (389);
				column.setDefaultValue (""U"");
				column.setConstraintType (X_AD_Column.CONSTRAINTTYPE_Restrict);
				column.setReadOnlyLogic (""@EntityType@=D"");
			}
			// CLOB
			else if (dataType == Types.CLOB)
				column.setAD_Reference_ID (DisplayTypeConstants.TextLong);
			// BLOB
			else if (dataType == Types.BLOB)
				column.setAD_Reference_ID (DisplayTypeConstants.Binary);
			// Amount
			else if (columnName.toUpperCase ().indexOf (""AMT"") != -1)
				column.setAD_Reference_ID (DisplayTypeConstants.Amount);
			// Qty
			else if (columnName.toUpperCase ().indexOf (""QTY"") != -1)
				column.setAD_Reference_ID (DisplayTypeConstants.Quantity);
			// Boolean
			else if ((size == 1)
				&& (columnName.toUpperCase ().startsWith (""IS"") || (dataType == Types.CHAR)))
				column.setAD_Reference_ID (DisplayTypeConstants.YesNo);
			// List
			else if ((size < 4) && (dataType == Types.CHAR))
				column.setAD_Reference_ID (DisplayTypeConstants.List);
			// Name, DocumentNo
			else if (columnName.equalsIgnoreCase (""Name"")
				|| columnName.equalsIgnoreCase(""DocumentNo""))
			{
				column.setAD_Reference_ID (DisplayTypeConstants.String);
				column.setIsIdentifier (true);
				column.setSeqNo (1);
			}
			// String, Text
			else if ((dataType == Types.CHAR) || (dataType == Types.VARCHAR)
				|| typeName.startsWith (""NVAR"")
				|| typeName.startsWith (""NCHAR""))
			{
				if (typeName.startsWith(""N""))	//	MultiByte
					size /= 2;
				if (size > 255)
					column.setAD_Reference_ID (DisplayTypeConstants.Text);
				else
					column.setAD_Reference_ID (DisplayTypeConstants.String);
			}
			// Number
			else if ((dataType == Types.INTEGER) || (dataType == Types.SMALLINT)
				|| (dataType == Types.DECIMAL) || (dataType == Types.NUMERIC))
			{
				if (size == 10)
					column.setAD_Reference_ID (DisplayTypeConstants.Integer);
				else
					column.setAD_Reference_ID (DisplayTypeConstants.Number);
			}
			//	??
			else
				column.setAD_Reference_ID (DisplayTypeConstants.String);

			//	General Defaults
			if (columnName.endsWith(""_ID""))
				column.setConstraintType (X_AD_Column.CONSTRAINTTYPE_Restrict);
			if (columnName.equalsIgnoreCase(""AD_Client_ID""))
			{
				column.setAD_Val_Rule_ID (116);	//	Client Login
				column.setDefaultValue(""@#AD_Client_ID@"");
				column.setIsUpdateable(false);
			}
			else if (columnName.equalsIgnoreCase(""AD_Org_ID""))
			{
				column.setAD_Val_Rule_ID (104);	//	Org Security
				column.setDefaultValue(""@#AD_Org_ID@"");
				column.setIsUpdateable(false);
			}
			else if (columnName.equalsIgnoreCase(""Processed""))
			{
				column.setAD_Reference_ID(DisplayTypeConstants.YesNo);
				column.setDefaultValue(""N"");
				column.setIsUpdateable(false);
			}
			else if (columnName.equalsIgnoreCase(""Posted""))
			{
				column.setAD_Reference_ID(DisplayTypeConstants.Button);
				column.setAD_Reference_Value_ID(234);	//	_PostedStatus
				column.setDefaultValue(""N"");
				column.setIsUpdateable(false);
			}

			//	General
			column.setFieldLength (size);
			if (column.isUpdateable() && table.isView())
				column.setIsUpdateable(false);

			//	Done
			if (column.save ())
			{
				addLog (0, null, null, table.getTableName() + ""."" + column.getColumnName());
				m_count++;
			}
		}	//	while columns
		return colName;
	}	//	addTableColumn
"
org.compiere.process.ViewImport.replace,ViewImport.java,"String replace(String sin, char oldChar, char newChar) {
    	if (oldChar != newChar) {
    	    int len = sin.length();
    	    int i = -1;
    	    char[] val = sin.toCharArray(); /* avoid getfield opcode */
    	    int off = 0;   /* avoid getfield opcode */

    	    while (++i < len) {
    		if (val[off + i] == oldChar) {
    		    break;
    		}
    	    }
    	    if (i < len) {
    		char buf[] = new char[len];
    		for (int j = 0 ; j < i ; j++) {
    		    buf[j] = val[off+j];
    		}
    		while (i < len) {
    		    char c = val[off + i];
    		    buf[i] = (c == oldChar) ? newChar : c;
    		    i++;
    		}
    		return new String(buf);
    	    }
    	}
    	return sin;
        }
"
org.compiere.process.ViewImport.prepare,ViewImport.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""EntityType""))
				entityType = (String)element.getParameter();
			else if (name.equals(""SQLfile""))
				SQLfile = (String)element.getParameter();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.ViewImport.trim,ViewImport.java,"String trim(String s) 
    {
    	int len = s.length();
    	int count = len;
    	int st = 0;
    	int off = 0;      /* avoid getfield opcode */
    	char[] val = s.toCharArray();    /* avoid getfield opcode */

    	while ((st < len) && (val[off + st] <= ' ')) {
    	    st++;
    	}
    	while ((st < len) && (val[off + len - 1] <= ' ')) {
    	    len--;
    	}
    	return ((st > 0) || (len < count)) ? s.substring(st, len) : s;
  }
"
org.compiere.process.ViewImport.findNext,ViewImport.java,"int findNext(String query, String keyword){
		
		int Comments = 0;
		int Quotes = 0;
		int Parantheses = 0;
				
		for (int j=0; j<query.length(); j++){
			if (Comments > 0){
				if (!query.startsWith(""*/"",j)) continue;
				Comments--; j++; continue;
			}
			if (Quotes > 0){
				if (!query.startsWith(""'"",j)) continue;
				Quotes --; continue;
			}
			if (query.startsWith(""/*"",j)) {Comments ++; j++; continue;}
			if (query.startsWith(""'"",j)) {Quotes ++; continue;}

			if (query.charAt(j)=='(') {Parantheses++; continue;}
			if (query.charAt(j)==')') {Parantheses--; continue;}
			if (Parantheses==0 && query.startsWith(keyword, j)){
				return j;
			}
		}

		return 0;
	}
"
org.compiere.process.ViewImport.doIt,ViewImport.java,"String doIt() throws Exception
	{
		int viewNum = 0;
		//get SQLs
		InputStream in = null;
		String targetViewName = null;
		p_AD_Table_ID = (getProcessInfo()!=null)?getRecord_ID():0;
		if (p_AD_Table_ID>0){
			MTable targetTable = MTable.get(Env.getCtx(), p_AD_Table_ID); 
			targetViewName = targetTable.getTableName();
			entityType = targetTable.getEntityType();
		}
		try
		{
			in = new FileInputStream(SQLfile);
		}
		catch (IOException e)
		{
			log.severe(e.getMessage());
			throw new CompiereUserException(""SQL file error. file name = "" + SQLfile);
		}
		if (in == null)
		{
			throw new CompiereUserException(""SQL file error. file name = "" + SQLfile);
		}
		
		ArrayList<String> commands = ViewUtil.readSqlFromFile(in);
		if (commands == null)
		{
			throw new CompiereUserException(""SQL file error. file name = "" + SQLfile);
		}
		
		
		//put SQL into AD
		// Initialization
		String tableName = null;
		ArrayList<String> colName = new ArrayList<String>();
		ArrayList<String> colSQL = new ArrayList<String>();
		ArrayList<String> colType = new ArrayList<String>();

		Trx myTrx = Trx.get(""ImportView"");
		String Acommand = null;
		endSQL:
		try
		{
			for (String command : commands)
			{
				Acommand = command;
				boolean colNameDone = false;
				int ir = command.indexOf('\t');
				while (ir>0)
				{
					command = replace(command, '\t', ' ');
					ir = command.indexOf('\t');
				}
				// Not care about ""exit""
				if (command.equalsIgnoreCase(""exit""))
					break endSQL;
				
				if (command.startsWith(""DROP VIEW ""))
					continue;
				
				tableName = null;
				colName.clear();
				
				int iView = command.indexOf("" VIEW "");
				eachSQL:
				if (command.startsWith(""CREATE"") && iView>0)
				{
					int iSel = command.indexOf(""SELECT "");
					String tc = command.substring(iView+6, iSel);
					int ileft = tc.indexOf('(');
					int iright = tc.indexOf(')');
					if (ileft>0)
					{
						tableName = tc.substring(0, ileft);
						String[] colNames = tc.substring(ileft+1, iright).split("","");
						for (String cn:colNames)
						{
							colName.add(trim(cn));
						}
						colNameDone=true;
					}
					else
					{
						tableName = tc.substring(0, tc.indexOf("" AS ""));
					}				
					if (tableName!=null)
						//jz String trim() doesn't remove tail space tableName.trim();
						tableName = trim(tableName);
					if (tableName==null || tableName.length()==0)
					{
						log.severe(""No view name from the SQL: ""+command);
						continue;
					}
					if (p_AD_Table_ID!=0 && !targetViewName.equalsIgnoreCase(tableName)){						
						log.fine(""Skipping view ""+targetViewName);
						continue;
					}
					//int itc = tc.substring(tc.length()-1).hashCode();
					
					//insert into/update ad_table for each view
					MTable mt = MTable.get(Env.getCtx(), tableName);
					if (mt!=null && !mt.isView())
					{
						log.severe(""Duplicated view name with an existing table for the SQL: ""+command);
						//myTrx.rollback();
						break eachSQL;
					}
					
					if (mt==null)
						//mt.delete(true,  null);
					{
						mt = new MTable(Env.getCtx(), 0, null);
						//mt.delete(true,  myTrx.getTrxName());
						//mt = new MTable(Env.getCtx(), 0, myTrx.getTrxName());
						//MTable mt = MTable.get(Env.getCtx(), 0);
						mt.setTableName(tableName);
						//mt.setAD_Org_ID(0);
						//mt.setAD_Client_ID(0); also updatedby, createdby. jz: all default is 0 in PO
						mt.setAccessLevel(X_AD_Table.ACCESSLEVEL_TenantPlusOrganization);
						mt.setEntityType(entityType);
						mt.setIsActive(true);
						mt.setIsView(true);
						mt.setName(""View_"" + tableName);
						mt.setLoadSeq(900);
						mt.setImportTable(null);
						if (!mt.save())
						{
							log.severe(""Unable to insert into AD_Table for the SQL: ""+command);
							//myTrx.rollback();
							break eachSQL;
						}
						log.info(""Add "" + tableName + "" into AD_Table for the SQL: ""+command);
					}

					//clean view components and their columns
					String vcdel = ""DELETE FROM AD_ViewComponent WHERE (AD_Table_ID, AD_Client_ID) IN (SELECT AD_Table_ID, AD_Client_ID FROM AD_Table WHERE TableName = '""+tableName+""')"";
					try
					{
						DB.executeUpdate(vcdel, (Trx) null);
					}
					catch (Exception e)
					{
						log.log (Level.SEVERE, vcdel, e);
					}

					
					//insert into ad_viewComponent for each union part
					command = command.substring(iSel);
					String[] selects = command.split(""UNION ""); // currently does not handle other set operators (e.g. INTERSECT)
					
					for (int i=0; i<selects.length; i++)
					{
						int iFrom = findNext(selects[i],"" FROM "");
						if (iFrom < 0)
						{
							log.severe(""No from clause from the SQL: ""+command);
							break eachSQL;
						}
						colSQL.clear();
						colType.clear();
						int isel = selects[i].indexOf(""SELECT "");
						String colstr = selects[i].substring(isel+7, iFrom);
						colstr = colstr.concat("","");
						int iComma = findNext (colstr, "","");
						if (iComma == 0)	
						{
							log.severe(""No view column from the SQL: ""+command);
							break eachSQL;
						}
						int iPrevComma = -1;
						while (iComma != iPrevComma)
						{
							String column = colstr.substring(iPrevComma+1, iComma);
							int iAS = column.lastIndexOf("" AS "");
							String cs = null;
							if (iAS>0)
							{
								if (i==0 && !colNameDone)
									colName.add(column.substring(iAS+4, column.length()).trim());
								cs = column.substring(0, iAS);
								//colSQL.add(cols[j].substring(0, iAS));
							}
							else
							{
								cs = column;
								if (i==0 && !colNameDone)
								{
									int iDot = column.indexOf('.');
									String cn = column;
									if (iDot>0)
										cn = column.substring(iDot+1, column.length()).trim();
									colName.add(cn);
								}
							}
							
							cs = cs.trim();
							if (cs.equalsIgnoreCase(""NULLIF(1,1)""))
							{
								cs = null;
								colType.add(""I"");
							}
							else if (cs.equalsIgnoreCase(""NULLIF('A','A')""))
							{
								cs = null;
								colType.add(""V"");
							}
							else
								colType.add(null);
							
							colSQL.add(cs);	
							
							iPrevComma = iComma;
							if (iPrevComma+1 < colstr.length())
								iComma = iPrevComma + 1 + findNext (colstr.substring(iPrevComma+1),"","");
						}// while (iComma != iPrevComma)
						
						String from = selects[i].substring(iFrom+1, selects[i].length());
						int iWH = from.indexOf("" WHERE "");
						String where = null;
						String others = null;
						int iGROUP = -1;
						int iORDER = -1;
						if (iWH>0)
						{
							where = from.substring(iWH+1, from.length());
							from = from.substring(0, iWH);
							iGROUP = where.indexOf("" GROUP BY "");
							iORDER = where.indexOf("" ORDER BY "");
							if (iORDER>0 && iGROUP==-1)
								iGROUP = iORDER;
							if (iGROUP>0)
							{
								others = where.substring(iGROUP+1, where.length());
								where = where.substring(0, iGROUP);
							}
						}
						else
						{
							iGROUP = from.indexOf("" GROUP BY "");
							iORDER = from.indexOf("" ORDER BY "");
							if (iORDER>0 && iGROUP==-1)
								iGROUP = iORDER;
							if (iGROUP>0)
							{
								others = from.substring(iGROUP+1, from.length());
								from = from.substring(0, iGROUP);
							}							
						}
						
						if (from==null || from.length()==0)
						{
							log.severe(""No from clause from the SQL: ""+command);
							//myTrx.rollback();
							break eachSQL;
						}
						
						//insert into AD_ViewComponent
						//MViewComponent mvc = new MViewComponent(Env.getCtx(), 0, myTrx.getTrxName());
						MViewComponent mvc = new MViewComponent(Env.getCtx(), 0, null);
						mvc.setName(""VC_""+tableName);
						mvc.setAD_Table_ID(mt.get_ID());
						mvc.setSeqNo((i+1)*10);
						mvc.setIsActive(true);
						mvc.setEntityType(entityType);
						//mvc.setAD_Org_ID(0);
						//mvc.setReferenced_Table_ID(mt.get_ID());
						String from1 = from.substring(5);
						from1 = trim(from1);
						int rtix = from1.indexOf(' ');
						if (rtix < 0)
							rtix = from1.length();
						String refTab = from1.substring(0, rtix);
						refTab = trim(refTab);
						MTable rt = MTable.get(Env.getCtx(), refTab);
						if (rt!=null)
							mvc.setReferenced_Table_ID(rt.get_ID());
						else
							mvc.setReferenced_Table_ID(0);
							
						mvc.setFromClause(from);
						mvc.setWhereClause(where);
						mvc.setOtherClause(others);
						if (!mvc.save())
						{
							log.severe(""unable to create view component "" + i + "": ""+command);
							//myTrx.rollback();
							break eachSQL;
						}
						
						//insert into AD_ViewColumn
						MViewColumn mvcol = null;
						for (int j=0; j<colName.size(); j++)
						{
							//mvcol = new MViewColumn(Env.getCtx(), 0, myTrx.getTrxName());
							mvcol = new MViewColumn(Env.getCtx(), 0, null);
							//mvcol.setAD_Org_ID(0);
							mvcol.setAD_ViewComponent_ID(mvc.get_ID());
							mvcol.setIsActive(true);
							mvcol.setEntityType(entityType);
							log.info(""Importing View "" + tableName + ""(i,j) = ("" + i + "", "" + j + "")"");
							mvcol.setDBDataType(colType.get(j));
							mvcol.setColumnName(colName.get(j));
							mvcol.setColumnSQL(colSQL.get(j));
							
							if (!mvcol.save())
							{
								log.severe(""unable to create view component "" + i + "" column: ""+ colName.get(j) + "" in "" + command);
								//myTrx.rollback();
								break eachSQL;
							}
						}
					}//for selects
					
					//myTrx.commit();
					log.info(""Impored view: "" + tableName);
				}//handle create view
				else
				{
					log.warning(""Ignore non create view SQL: ""+command);
					continue;
				}
				
				viewNum++;
			}  // for (String command : commands)
		}
		catch (Exception e)
		{
			log.severe(""Error at importing view SQL: ""+Acommand+"" \n "" + e);
		}
		finally
		{
			if (myTrx!= null)
			{
				myTrx.rollback();
				myTrx.close();
			}
		}
		
		if (p_AD_Table_ID > 0) {
			if (viewNum == 0)
				return (""Not able to import view ""+targetViewName+"" from ""+SQLfile);
			else
				return (""Created view ""+targetViewName);
		}
		return ""Imported View #"" + viewNum;
	}
"
org.compiere.process.MatchInvDelete.prepare,MatchInvDelete.java,"void prepare ()
	{
		p_M_MatchInv_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.MatchInvDelete.doIt,MatchInvDelete.java,"String doIt()	throws Exception
	{
		log.info (""M_MatchInv_ID="" + p_M_MatchInv_ID);
		MMatchInv inv = new MMatchInv (getCtx(), p_M_MatchInv_ID, get_TrxName());
		if (inv.get_ID() == 0)
			throw new CompiereUserException(""@NotFound@ @M_MatchInv_ID@ "" + p_M_MatchInv_ID);
		if (inv.delete(true))
			return ""@OK@"";
		inv.save();
		return ""@Error@"";
	}	//	doIt
"
org.compiere.process.RegisterSystem.prepare,RegisterSystem.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.RegisterSystem.doIt,RegisterSystem.java,"String doIt() throws Exception
	{
		int AD_Registration_ID = getRecord_ID();
		log.info(""doIt - AD_Registration_ID="" + AD_Registration_ID);
		MSystem sys = MSystem.get(getCtx());
		M_Registration reg = new M_Registration (getCtx(), AD_Registration_ID, get_TrxName());

		//	Create Query String
		String enc = WebEnv.ENCODING;
		
		StringBuffer urlString = 
			new StringBuffer (""https://www.compiere.com/wstore/registrationServlet?"");
		
		urlString.append(""Name="").append(URLEncoder.encode(sys.getName(), enc));
		urlString.append(""&UserName="").append(URLEncoder.encode(sys.getUserName(), enc));
		urlString.append(""&Password="").append(URLEncoder.encode(sys.getPassword(), enc));
		urlString.append(""&IsRegistered="").append(reg.isRegistered() ? ""Y"" : ""N"");
		urlString.append(""&Record_ID="").append(URLEncoder.encode(String.valueOf(reg.getRecord_ID()), enc));
		urlString.append(""&FirstName="").append(URLEncoder.encode(reg.getFirstName(), enc));				
		urlString.append(""&LastName="").append(URLEncoder.encode(reg.getLastName(), enc));				
		urlString.append(""&Email="").append(URLEncoder.encode(reg.getEMail(), enc));				
		String phone = reg.getPhone();
		if (phone!=null && phone.length()>0)
			urlString.append(""&Phone="").append(URLEncoder.encode(phone, enc));				
		urlString.append(""&Company="").append(URLEncoder.encode(reg.getCompany(), enc));
		urlString.append(""&Employees="").append(URLEncoder.encode(reg.getEmployeeRange(), enc));
		urlString.append(""&Industry="").append(URLEncoder.encode(reg.getIndustry(), enc));
		urlString.append(""&C_Country_ID="").append(URLEncoder.encode(String.valueOf(reg.getC_Country_ID()), enc));
		String URL = reg.getURL();
		if (URL!=null && URL.length()>0)
			urlString.append(""&URL="").append(URLEncoder.encode(URL, enc));				
		urlString.append(""&SalesVolume="").append(URLEncoder.encode(String.valueOf(reg.getSalesVolume()), enc));
		urlString.append(""&C_Currency_ID="").append(URLEncoder.encode(String.valueOf(reg.getC_Currency_ID()), enc));
		urlString.append(""&OptIn="").append(URLEncoder.encode(reg.isOptIn()?""Y"":""N"", enc));
		
		//	Statistics
		if (sys.isAllowStatistics())
		{
			urlString.append(""&NumClient="").append(URLEncoder.encode(String.valueOf(
					DB.getSQLValue(null, ""SELECT Count(*) FROM AD_Client"")), enc))
				.append(""&NumOrg="").append(URLEncoder.encode(String.valueOf(
					DB.getSQLValue(null, ""SELECT Count(*) FROM AD_Org"")), enc))
				.append(""&NumBPartner="").append(URLEncoder.encode(String.valueOf(
					DB.getSQLValue(null, ""SELECT Count(*) FROM C_BPartner"")), enc))
				.append(""&NumUser="").append(URLEncoder.encode(String.valueOf(
					DB.getSQLValue(null, ""SELECT Count(*) FROM AD_User"")), enc))
				.append(""&NumProduct="").append(URLEncoder.encode(String.valueOf(
					DB.getSQLValue(null, ""SELECT Count(*) FROM M_Product"")), enc))
				.append(""&NumInvoice="").append(URLEncoder.encode(String.valueOf(
					DB.getSQLValue(null, ""SELECT Count(*) FROM C_Invoice"")), enc));
		}
		log.fine(urlString.toString());
		
		//	Create a trust manager that does not validate certificate chains
	    TrustManager[] trustAllCerts = new TrustManager[]{
	        new X509TrustManager() {
	            public java.security.cert.X509Certificate[] getAcceptedIssuers() {
	                return null;
	            }
	            public void checkClientTrusted(
	                java.security.cert.X509Certificate[] certs, String authType) {
	            }
	            public void checkServerTrusted(
	                java.security.cert.X509Certificate[] certs, String authType) {
	            }
	        }
	    };
	    
	    // Install the all-trusting trust manager
	    try {
	        SSLContext sc = SSLContext.getInstance(""SSL"");
	        sc.init(null, trustAllCerts, new java.security.SecureRandom());
	        HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
	    } 
	    catch (NoSuchAlgorithmException e) {
	    }
	    catch (KeyManagementException e) {
	    }	    
	    // Now you can access an https URL without having the certificate in the truststore

		//	Send it
	    URL url = new URL (urlString.toString());
		StringBuffer sb = new StringBuffer();
		try
		{
			URLConnection uc = url.openConnection();
			InputStreamReader in = new InputStreamReader(uc.getInputStream());
			int c;
			while ((c = in.read()) != -1)
				sb.append((char)c);
			in.close();
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""Connect - "" + e.toString());
			throw new IllegalStateException(""Cannot connect to Server - Please try later"");
		}
		//
		String info = sb.toString();
		log.info(""Response="" + info);
		//	Record at the end
		int index = sb.indexOf(""Record_ID="");
		if (index != -1)
		{
			try
			{
				int Record_ID = Integer.parseInt(sb.substring(index+10));
				reg.setRecord_ID(Record_ID);
				reg.setIsRegistered(true);
				reg.save();
				//
				info = info.substring(0, index);
			}
			catch (Exception e)
			{
				log.log(Level.SEVERE, ""Record - "", e);
			}
		}
		
		return info;
	}	//	doIt
"
org.compiere.process.RegisterSystem.getAcceptedIssuers,RegisterSystem.java,"java.security.cert.X509Certificate[] getAcceptedIssuers() {
	                return null;
	            }
"
org.compiere.process.CostCreate.prepare,CostCreate.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
		//	log.fine(""prepare - "" + para[i]);
			if (element.getParameter() == null)
				;
			else if (name.equals(""M_Product_ID""))
				p_M_Product_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);		
		}
	}	//	prepare
"
org.compiere.process.CostCreate.doIt,CostCreate.java,"String doIt() throws Exception
	{
		log.info(""M_Product_ID="" + p_M_Product_ID);
		if (p_M_Product_ID == 0)
			throw new CompiereUserException(""@NotFound@: @M_Product_ID@ = "" + p_M_Product_ID);
		MProduct product = MProduct.get(getCtx(), p_M_Product_ID);
		if (product.get_ID() != p_M_Product_ID)
			throw new CompiereUserException(""@NotFound@: @M_Product_ID@ = "" + p_M_Product_ID);
		//
		if (MCostDetail.processProduct(product, get_TrxName()))
			return ""@OK@"";
		return ""@Error@"";
	}	//	doIt
"
org.compiere.process.RequestUpdate.prepare,RequestUpdate.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""R_RequestType_ID""))
				p_R_RequestType_ID = element.getParameterAsInt();
			else if (name.equals(""R_Status_ID""))
				p_R_Status_ID = element.getParameterAsInt();
			else if (name.equals(""R_Group_ID""))
				p_R_Group_ID = element.getParameterAsInt();
			else if (name.equals(""R_Category_ID""))
				p_R_Category_ID = element.getParameterAsInt();
			else if (name.equals(""C_BPartner_ID""))
				p_C_BPartner_ID = element.getParameterAsInt();
			else if (name.equals(""SalesRep_ID""))
				p_SalesRep_ID = element.getParameterAsInt();
			else if (name.equals(""AD_Role_ID""))
				p_AD_Role_ID = element.getParameterAsInt();
			else if (name.equals(""Result""))
				p_Result = (String)element.getParameter();

			else if (name.equals(""New_RequestType_ID""))
				p_New_RequestType_ID = element.getParameterAsInt();
			else if (name.equals(""New_Status_ID""))
				p_New_Status_ID = element.getParameterAsInt();
			else if (name.equals(""New_Group_ID""))
				p_New_Group_ID = element.getParameterAsInt();
			else if (name.equals(""New_Category_ID""))
				p_New_Category_ID = element.getParameterAsInt();
			else if (name.equals(""New_SalesRep_ID""))
				p_New_SalesRep_ID = element.getParameterAsInt();
			else if (name.equals(""New_AD_Role_ID""))
				p_New_AD_Role_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.RequestUpdate.doIt,RequestUpdate.java,"String doIt() throws Exception
	{
		log.info(""R_RequestType_ID="" + p_R_RequestType_ID
			+ "",R_Status_ID="" + p_R_Status_ID
			+ "",R_Group_ID="" + p_R_Group_ID
			+ "",R_Category_ID="" + p_R_Category_ID
			+ "",C_BPartner_ID="" + p_C_BPartner_ID
			+ "",SalesRep_ID="" + p_SalesRep_ID
			+ "",AD_Role_ID="" + p_AD_Role_ID
			+ "", Result="" + p_Result
			+ "", New_RequestType_ID="" + p_New_RequestType_ID
			+ "",New_Status_ID="" + p_New_Status_ID
			+ "",New_Group_ID="" + p_New_Group_ID
			+ "",New_Category_ID="" + p_New_Category_ID
			+ "",New_SalesRep_ID="" + p_New_SalesRep_ID
		);
		//	Some query criteria needed
		if (p_R_RequestType_ID == 0 && p_R_Status_ID == 0 && p_R_Group_ID == 0
			&& p_R_Category_ID == 0 && p_C_BPartner_ID == 0 
			&& p_SalesRep_ID == 0 && p_AD_Role_ID == 0)
			throw new CompiereUserException(""@NotFound@ @Query@"");
		//	Check Status in Request Type
		if (p_R_Status_ID != 0)	
		{
			MStatus sta = MStatus.get(getCtx(), p_R_Status_ID);
			if (sta.getR_Status_ID() != p_R_Status_ID)
				throw new CompiereUserException(""@NotFound@ @R_Status_ID@ - ID="" + p_R_Status_ID);
			if (!sta.isRequestType(p_R_RequestType_ID))
				throw new CompiereUserException(""@R_Status_ID@ <> @R_RequestType_ID@ "" + sta.toStringX());
		}
		
		if (Util.isEmpty(p_Result))
			throw new CompiereUserException(""@NotFound@ @Result@"");
			
		//	Check New Status in New Request Type
		if (p_New_Status_ID != 0)	
		{
			MStatus sta = MStatus.get(getCtx(), p_New_Status_ID);
			if (sta.getR_Status_ID() != p_New_Status_ID)
				throw new CompiereUserException(""@NotFound@ @R_Status_ID@ - ID="" + p_R_Status_ID);
			if (!sta.isRequestType(p_New_RequestType_ID))
				throw new CompiereUserException(""@R_Status_ID@ <> @R_RequestType_ID@ "" + sta.toStringX());
		}
		
		
		//	Query
		StringBuffer sb = new StringBuffer(""SELECT * FROM R_Request WHERE "");
		if (p_R_RequestType_ID != 0)
			sb.append(""R_RequestType_ID="").append(p_R_RequestType_ID).append(AND);
		if (p_R_Status_ID != 0)
			sb.append(""R_Status_ID="").append(p_R_Status_ID).append(AND);
		if (p_R_Group_ID != 0)
			sb.append(""R_Group_ID="").append(p_R_Group_ID).append(AND);
		if (p_R_Category_ID != 0)
			sb.append(""R_Category_ID="").append(p_R_Category_ID).append(AND);
		if (p_C_BPartner_ID != 0)
			sb.append(""C_BPartner_ID="").append(p_C_BPartner_ID).append(AND);
		if (p_SalesRep_ID != 0)
			sb.append(""SalesRep_ID="").append(p_SalesRep_ID).append(AND);
		if (p_AD_Role_ID != 0)
			sb.append(""AD_Role_ID="").append(p_AD_Role_ID).append(AND);
		sb.append(""IsActive='Y'"");
		//
		int changes = 0;
		int errors = 0;
        PreparedStatement pstmt = null;
        try
        {
	        pstmt = DB.prepareStatement(sb.toString(), get_TrxName());
	        ResultSet rs = pstmt.executeQuery();
	        while (rs.next())
	        {
	        	MRequest request = new MRequest(getCtx(), rs, get_TrxName());
	        	if (p_New_RequestType_ID != 0)
	        	{
	        		request.setR_RequestType_ID(p_New_RequestType_ID);
	        		if (p_New_Status_ID != 0)
	        			request.setR_Status_ID(p_New_Status_ID);
	        		else
	        			request.setR_Status_ID();
	        	}
	        	else if (p_New_Status_ID != 0)
        			request.setR_Status_ID(p_New_Status_ID);
	        	if (p_New_Group_ID != 0)
	        		request.setR_Group_ID(p_New_Group_ID);
	        	if (p_New_Category_ID != 0)
	        		request.setR_Category_ID(p_New_Category_ID);
	        	if (p_New_SalesRep_ID != 0)
	        		request.setSalesRep_ID(p_New_SalesRep_ID);
	        	if (p_New_AD_Role_ID != 0)
	        		request.setAD_Role_ID(p_New_AD_Role_ID);
	        	request.setResult(p_Result);
	        	//
	        	if (request.save())
	        	{
	        		addLog(request.toStringX());
	        		changes++;
	        	}
	        	else
	        	{
	        		addLog(""Error: "" + request.toString());
	        		errors++;
	        	}
	        }
	        rs.close();
	        pstmt.close();
	        pstmt = null;
        }
        catch (Exception e)
        {
	        log.log(Level.SEVERE, sb.toString(), e);
        }
        try
        {
	        if (pstmt != null)
		        pstmt.close();
	        pstmt = null;
        }
        catch (Exception e)
        {
	        pstmt = null;
        }
		
		return ""@Changed@ #"" + changes + "", @Errors@ # "" + errors;
	}	//	doIt
"
org.compiere.process.InvoiceNGL.prepare,InvoiceNGL.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""C_AcctSchema_ID""))
				p_C_AcctSchema_ID = element.getParameterAsInt();
			else if (name.equals(""C_ConversionTypeReval_ID""))
				p_C_ConversionTypeReval_ID = element.getParameterAsInt();
			else if (name.equals(""DateReval""))
				p_DateReval = (Timestamp)element.getParameter();
			else if (name.equals(""APAR""))
				p_APAR = (String)element.getParameter();
			else if (name.equals(""IsAllCurrencies""))
				p_IsAllCurrencies = ""Y"".equals(element.getParameter());
			else if (name.equals(""C_Currency_ID""))
				p_C_Currency_ID = element.getParameterAsInt();
			else if (name.equals(""C_DocTypeReval_ID""))
				p_C_DocTypeReval_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.InvoiceNGL.doIt,InvoiceNGL.java,"String doIt () throws Exception
	{
		if (p_IsAllCurrencies)
			p_C_Currency_ID = 0;
		log.info(""C_AcctSchema_ID="" + p_C_AcctSchema_ID 
			+ "",C_ConversionTypeReval_ID="" + p_C_ConversionTypeReval_ID
			+ "",DateReval="" + p_DateReval 
			+ "", APAR="" + p_APAR
			+ "", IsAllCurrencies="" + p_IsAllCurrencies
			+ "",C_Currency_ID="" + p_C_Currency_ID
			+ "", C_DocType_ID="" + p_C_DocTypeReval_ID);
		
		//	Parameter
		if (p_DateReval == null)
			p_DateReval = new Timestamp(System.currentTimeMillis());
		
		//	Delete - just to be sure
		String sql = ""DELETE FROM T_InvoiceGL WHERE AD_PInstance_ID="" + getAD_PInstance_ID();  //jz FROM
		int no = DB.executeUpdate(sql, get_TrxName());
		if (no > 0)
			log.info(""Deleted #"" + no);
		
		//	Insert Trx
		String dateStr = DB.TO_DATE(p_DateReval, true);
		sql = ""INSERT INTO T_InvoiceGL (AD_Client_ID, AD_Org_ID, IsActive, Created,CreatedBy, Updated,UpdatedBy,""
			+ "" AD_PInstance_ID, C_Invoice_ID, GrandTotal, OpenAmt, ""
			+ "" Fact_Acct_ID, AmtSourceBalance, AmtAcctBalance, ""
			+ "" AmtRevalDr, AmtRevalCr, C_DocTypeReval_ID, IsAllCurrencies, ""
			+ "" DateReval, C_ConversionTypeReval_ID, AmtRevalDrDiff, AmtRevalCrDiff, APAR) ""
			//	--
			+ ""SELECT i.AD_Client_ID, i.AD_Org_ID, i.IsActive, i.Created,i.CreatedBy, i.Updated,i.UpdatedBy,""
			+  getAD_PInstance_ID() + "", i.C_Invoice_ID, i.GrandTotal, invoiceOpen(i.C_Invoice_ID, 0), ""
			+ "" fa.Fact_Acct_ID, fa.AmtSourceDr-fa.AmtSourceCr, fa.AmtAcctDr-fa.AmtAcctCr, "" 
			//	AmtRevalDr, AmtRevalCr,
			+ "" currencyConvert(fa.AmtSourceDr, i.C_Currency_ID, a.C_Currency_ID, "" + dateStr + "", "" + p_C_ConversionTypeReval_ID + "", i.AD_Client_ID, i.AD_Org_ID),""
		    + "" currencyConvert(fa.AmtSourceCr, i.C_Currency_ID, a.C_Currency_ID, "" + dateStr + "", "" + p_C_ConversionTypeReval_ID + "", i.AD_Client_ID, i.AD_Org_ID),""
		    + (p_C_DocTypeReval_ID==0 ? ""NULL"" : String.valueOf(p_C_DocTypeReval_ID)) + "", ""
		    + (p_IsAllCurrencies ? ""'Y',"" : ""'N',"")
		    + dateStr + "", "" + p_C_ConversionTypeReval_ID + "", 0, 0, '"" + p_APAR + ""' ""
		    //
		    + ""FROM C_Invoice_v1 i""
		    + "" INNER JOIN Fact_Acct fa ON (fa.AD_Table_ID=318 AND fa.Record_ID=i.C_Invoice_ID""
			+ "" AND (    (charAt(i.DocBaseType,3) = 'C' AND (i.GrandTotal*-1=fa.AmtSourceDr OR i.GrandTotal*-1=fa.AmtSourceCr))""
		    + ""       OR (charAt(i.DocBaseType,3) != 'C' AND (i.GrandTotal=fa.AmtSourceDr OR i.GrandTotal=fa.AmtSourceCr))""
		    + ""        ))"" 
		    + "" INNER JOIN C_AcctSchema a ON (fa.C_AcctSchema_ID=a.C_AcctSchema_ID) ""
		    + ""WHERE i.IsPaid='N'""
		    + "" AND EXISTS (SELECT * FROM C_ElementValue ev ""
		    	+ ""WHERE ev.C_ElementValue_ID=fa.Account_ID AND (ev.AccountType='A' OR ev.AccountType='L'))""
		    + "" AND fa.C_AcctSchema_ID="" + p_C_AcctSchema_ID;
		if (!p_IsAllCurrencies)
			sql += "" AND i.C_Currency_ID<>a.C_Currency_ID"";
		if (ONLY_AR.equals(p_APAR))
			sql += "" AND i.IsSOTrx='Y'"";
		else if (ONLY_AP.equals(p_APAR))
			sql += "" AND i.IsSOTrx='N'"";
		if (!p_IsAllCurrencies && p_C_Currency_ID != 0)
			sql += "" AND i.C_Currency_ID="" + p_C_Currency_ID;
		
		no = DB.executeUpdate(sql, get_TrxName());
		if (no != 0)
			log.info(""Inserted #"" + no);
		else if (CLogMgt.isLevelFiner())
			log.warning(""Inserted #"" + no + "" - "" + sql);
		else 
			log.warning(""Inserted #"" + no);

		//	Calculate Difference
		sql = ""UPDATE T_InvoiceGL gl ""
			+ ""SET (AmtRevalDrDiff,AmtRevalCrDiff)=""
				+ ""(SELECT gl.AmtRevalDr-fa.AmtAcctDr, gl.AmtRevalCr-fa.AmtAcctCr ""
				+ ""FROM Fact_Acct fa ""
				+ ""WHERE gl.Fact_Acct_ID=fa.Fact_Acct_ID) ""
			+ ""WHERE AD_PInstance_ID="" + getAD_PInstance_ID();
		int noT = DB.executeUpdate(sql, get_TrxName());
		if (noT > 0)
			log.config(""Difference #"" + noT);
		
		//	Percentage
		sql = ""UPDATE T_InvoiceGL SET PercentGL = 100 ""
			+ ""WHERE GrandTotal=OpenAmt AND AD_PInstance_ID="" + getAD_PInstance_ID();
		no = DB.executeUpdate(sql, get_TrxName());
		if (no > 0)
			log.info(""Not Paid #"" + no);

		sql = ""UPDATE T_InvoiceGL SET PercentGL = ROUND(OpenAmt*100/GrandTotal,6) ""
			+ ""WHERE GrandTotal<>OpenAmt AND GrandTotal <> 0 AND AD_PInstance_ID="" + getAD_PInstance_ID();
		no = DB.executeUpdate(sql, get_TrxName());
		if (no > 0)
			log.info(""Partial Paid #"" + no);

		sql = ""UPDATE T_InvoiceGL SET AmtRevalDr = AmtRevalDr * PercentGL/100,""
			+ "" AmtRevalCr = AmtRevalCr * PercentGL/100,""
			+ "" AmtRevalDrDiff = AmtRevalDrDiff * PercentGL/100,""
			+ "" AmtRevalCrDiff = AmtRevalCrDiff * PercentGL/100 ""
			+ ""WHERE PercentGL <> 100 AND AD_PInstance_ID="" + getAD_PInstance_ID();
		no = DB.executeUpdate(sql, get_TrxName());
		if (no > 0)
			log.config(""Partial Calc #"" + no);
		
		//	Create Document
		String info = """";
		if (p_C_DocTypeReval_ID != 0)
		{
			if (p_C_Currency_ID != 0)
				log.warning(""Can create Journal only for all currencies"");
			else
				info = createGLJournal();
		}
		return ""#"" + noT + info;
	}	//	doIt
"
org.compiere.process.InvoiceNGL.createGLJournal,InvoiceNGL.java,"String createGLJournal()
	{
		ArrayList<X_T_InvoiceGL> list = new ArrayList<X_T_InvoiceGL>();
		String sql = ""SELECT * FROM T_InvoiceGL ""
			+ ""WHERE AD_PInstance_ID="" + getAD_PInstance_ID()
			+ "" ORDER BY AD_Org_ID"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_TrxName());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				list.add (new X_T_InvoiceGL (getCtx(), rs, get_TrxName()));
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		if (list.size() == 0)
			return "" - No Records found"";
		
		//
		MAcctSchema as = MAcctSchema.get(getCtx(), p_C_AcctSchema_ID);
		MAcctSchemaDefault asDefaultAccts = MAcctSchemaDefault.get(getCtx(), p_C_AcctSchema_ID);
		MGLCategory cat = MGLCategory.getDefaultSystem(getCtx());
		if (cat == null)
		{
			MDocType docType = MDocType.get(getCtx(), p_C_DocTypeReval_ID);
			cat = MGLCategory.get(getCtx(), docType.getGL_Category_ID());
		}
		//
		MJournalBatch batch = new MJournalBatch(getCtx(), 0, get_TrxName());
		batch.setDescription (getName());
		batch.setC_DocType_ID(p_C_DocTypeReval_ID);
		batch.setDateDoc(new Timestamp(System.currentTimeMillis()));
		batch.setDateAcct(p_DateReval);
		batch.setC_Currency_ID(as.getC_Currency_ID());
		if (!batch.save())
			return "" - Could not create Batch"";
		//
		MJournal journal = null;
		BigDecimal drTotal = Env.ZERO;
		BigDecimal crTotal = Env.ZERO;
		int AD_Org_ID = 0;
		for (int i = 0; i < list.size(); i++)
		{
			X_T_InvoiceGL gl = list.get(i);
			if (gl.getAmtRevalDrDiff().signum() == 0 && gl.getAmtRevalCrDiff().signum() == 0)
				continue;
			MInvoice invoice = new MInvoice(getCtx(), gl.getC_Invoice_ID(), null);
			if (invoice.getC_Currency_ID() == as.getC_Currency_ID())
				continue;
			//
			if (journal == null)
			{
				journal = new MJournal (batch);
				journal.setC_AcctSchema_ID (as.getC_AcctSchema_ID());
				journal.setC_Currency_ID(as.getC_Currency_ID());
				journal.setC_ConversionType_ID(p_C_ConversionTypeReval_ID);
				MOrg org = MOrg.get(getCtx(), gl.getAD_Org_ID());
				journal.setDescription (getName() + "" - "" + org.getName());
				journal.setGL_Category_ID (cat.getGL_Category_ID());
				if (!journal.save())
					return "" - Could not create Journal"";
			}
			//
			MJournalLine line = new MJournalLine(journal);
			line.setLine((i+1) * 10);
			line.setDescription(invoice.getSummary());
			//
			MFactAcct fa = new MFactAcct (getCtx(), gl.getFact_Acct_ID(), null);
			line.setC_ValidCombination_ID(MAccount.get(fa));
			BigDecimal dr = gl.getAmtRevalDrDiff();
			BigDecimal cr = gl.getAmtRevalCrDiff();
			drTotal = drTotal.add(dr);
			crTotal = crTotal.add(cr);
			line.setAmtSourceDr (dr);
			line.setAmtAcctDr (dr);
			line.setAmtSourceCr (cr);
			line.setAmtAcctCr (cr);
			line.save();
			//
			if (AD_Org_ID == 0)		//	invoice org id
				AD_Org_ID = gl.getAD_Org_ID();
			//	Change in Org
			if (AD_Org_ID != gl.getAD_Org_ID())
			{
				createBalancing (asDefaultAccts, journal, drTotal, crTotal, AD_Org_ID, (i+1) * 10);
				//
				AD_Org_ID = gl.getAD_Org_ID();
				drTotal = Env.ZERO;
				crTotal = Env.ZERO;
				journal = null;
			}
		}
		createBalancing (asDefaultAccts, journal, drTotal, crTotal, AD_Org_ID, (list.size()+1) * 10);
		
		return "" - "" + batch.getDocumentNo() + "" #"" + list.size();
	}	//	createGLJournal
"
org.compiere.process.InvoiceNGL.createBalancing,InvoiceNGL.java,"void createBalancing (MAcctSchemaDefault asDefaultAccts, MJournal journal, 
		BigDecimal drTotal, BigDecimal crTotal, int AD_Org_ID, int lineNo)
	{
		if (journal == null)
			throw new IllegalArgumentException(""Jornal is null"");
		//		CR Entry = Gain
		if (drTotal.signum() != 0)
		{
			MJournalLine line = new MJournalLine(journal);
			line.setLine(lineNo+1);
			MAccount base = MAccount.get(getCtx(), asDefaultAccts.getUnrealizedGain_Acct());
			MAccount acct = MAccount.get(getCtx(), asDefaultAccts.getAD_Client_ID(), AD_Org_ID, 
				asDefaultAccts.getC_AcctSchema_ID(), base.getAccount_ID(), base.getC_SubAcct_ID(),
				base.getM_Product_ID(), base.getC_BPartner_ID(), base.getAD_OrgTrx_ID(), 
				base.getC_LocFrom_ID(), base.getC_LocTo_ID(), base.getC_SalesRegion_ID(), 
				base.getC_Project_ID(), base.getC_Campaign_ID(), base.getC_Activity_ID(),
				base.getUser1_ID(), base.getUser2_ID(), base.getUserElement1_ID(), base.getUserElement2_ID());
			line.setDescription(Msg.getElement(getCtx(), ""UnrealizedGain_Acct""));
			line.setC_ValidCombination_ID(acct.getC_ValidCombination_ID());
			line.setAmtSourceCr (drTotal);
			line.setAmtAcctCr (drTotal);
			line.save();
		}
		//	DR Entry = Loss
		if (crTotal.signum() != 0)
		{
			MJournalLine line = new MJournalLine(journal);
			line.setLine(lineNo+2);
			MAccount base = MAccount.get(getCtx(), asDefaultAccts.getUnrealizedLoss_Acct());
			MAccount acct = MAccount.get(getCtx(), asDefaultAccts.getAD_Client_ID(), AD_Org_ID, 
				asDefaultAccts.getC_AcctSchema_ID(), base.getAccount_ID(), base.getC_SubAcct_ID(),
				base.getM_Product_ID(), base.getC_BPartner_ID(), base.getAD_OrgTrx_ID(), 
				base.getC_LocFrom_ID(), base.getC_LocTo_ID(), base.getC_SalesRegion_ID(), 
				base.getC_Project_ID(), base.getC_Campaign_ID(), base.getC_Activity_ID(),
				base.getUser1_ID(), base.getUser2_ID(), base.getUserElement1_ID(), base.getUserElement2_ID());
			line.setDescription(Msg.getElement(getCtx(), ""UnrealizedLoss_Acct""));
			line.setC_ValidCombination_ID(acct.getC_ValidCombination_ID());
			line.setAmtSourceDr (crTotal);
			line.setAmtAcctDr (crTotal);
			line.save();
		}
	}	//	createBalancing
"
org.compiere.process.CacheResetWeb.doIt,CacheResetWeb.java,"String doIt() throws Exception {
		log.info(""Clearning Web Cache"");
		GwtServer.resetWinDefCache();
		return ""@OK@"";
	}
"
org.compiere.process.TransactionXRef.prepare,TransactionXRef.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""Search_InOut_ID""))
				p_Search_InOut_ID = element.getParameterAsInt();
			else if (name.equals(""Search_Order_ID""))
				p_Search_Order_ID = element.getParameterAsInt();
			else if (name.equals(""Search_Invoice_ID""))
				p_Search_Invoice_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.TransactionXRef.doIt,TransactionXRef.java,"String doIt () throws Exception
	{
		log.info(""M_InOut_ID="" + p_Search_InOut_ID + "", C_Order_ID="" + p_Search_Order_ID
			+ "", C_Invoice_ID="" + p_Search_Invoice_ID);
		//
		if (p_Search_InOut_ID != 0)
			insertTrx(
				""SELECT NVL(ma.M_AttributeSetInstance_ID,iol.M_AttributeSetInstance_ID) ""
				+ ""FROM M_InOutLine iol""
				+ "" LEFT OUTER JOIN M_InOutLineMA ma ON (iol.M_InOutLine_ID=ma.M_InOutLine_ID) ""
				+ ""WHERE M_InOut_ID="" + p_Search_InOut_ID
				);
		else if (p_Search_Order_ID != 0)
			insertTrx(
				""SELECT NVL(ma.M_AttributeSetInstance_ID,iol.M_AttributeSetInstance_ID) ""
				+ ""FROM M_InOutLine iol""
				+ "" LEFT OUTER JOIN M_InOutLineMA ma ON (iol.M_InOutLine_ID=ma.M_InOutLine_ID) ""
				+ "" INNER JOIN M_InOut io ON (iol.M_InOut_ID=io.M_InOut_ID)""
				+ ""WHERE io.C_Order_ID="" + p_Search_Order_ID
				);
		else if (p_Search_Invoice_ID != 0)
			insertTrx(
				""SELECT NVL(ma.M_AttributeSetInstance_ID,iol.M_AttributeSetInstance_ID) ""
				+ ""FROM M_InOutLine iol""
				+ "" LEFT OUTER JOIN M_InOutLineMA ma ON (iol.M_InOutLine_ID=ma.M_InOutLine_ID) ""
				+ "" INNER JOIN C_InvoiceLine il ON (iol.M_InOutLine_ID=il.M_InOutLine_ID) ""
				+ ""WHERE il.C_Invoice_ID="" + p_Search_Invoice_ID
				);
		else
			throw new CompiereUserException(""Select one Parameter"");
		//
		return """";
	}	//	doIt
"
org.compiere.process.TransactionXRef.insertTrx,TransactionXRef.java,"void insertTrx (String sqlSubSelect)
	{
		String sql = ""INSERT INTO T_Transaction ""
			+ ""(AD_PInstance_ID, M_Transaction_ID,""
			+ "" AD_Client_ID, AD_Org_ID, IsActive, Created,CreatedBy, Updated,UpdatedBy,""
			+ "" MovementType, M_Locator_ID, M_Product_ID, M_AttributeSetInstance_ID,""
			+ "" MovementDate, MovementQty,""
			+ "" M_InOutLine_ID, M_InOut_ID,""
			+ "" M_MovementLine_ID, M_Movement_ID,""
			+ "" M_InventoryLine_ID, M_Inventory_ID, ""
			+ "" C_ProjectIssue_ID, C_Project_ID, ""
			+ "" M_ProductionLine_ID, M_Production_ID "";
		
		if(p_Search_Order_ID != 0)
			sql += "", Search_Order_ID "";
		if(p_Search_Invoice_ID != 0)
			sql += "", Search_Invoice_ID "";
		if(p_Search_InOut_ID != 0)
			sql += "", Search_InOut_ID "";
		
		
			
			
			/*+ "" Search_Order_ID, Search_Invoice_ID, Search_InOut_ID) ""*/
			//	Data
		sql +=	 "") SELECT "" + getAD_PInstance_ID() + "", M_Transaction_ID,""
			+ "" AD_Client_ID, AD_Org_ID, IsActive, Created,CreatedBy, Updated,UpdatedBy,""
			+ "" MovementType, M_Locator_ID, M_Product_ID, M_AttributeSetInstance_ID,""
			+ "" MovementDate, MovementQty,""
			+ "" M_InOutLine_ID, M_InOut_ID, ""
			+ "" M_MovementLine_ID, M_Movement_ID,""
			+ "" M_InventoryLine_ID, M_Inventory_ID, ""
			+ "" C_ProjectIssue_ID, C_Project_ID, ""
			+ "" M_ProductionLine_ID, M_Production_ID "";
		
			//	Parameter
		if(p_Search_Order_ID != 0)
			sql += "", "" + p_Search_Order_ID;
		if(p_Search_Invoice_ID != 0)
			sql += "", "" + p_Search_Invoice_ID;
		if(p_Search_InOut_ID != 0)
			sql += "", ""+ p_Search_InOut_ID;

			//+ p_Search_Order_ID + "", "" + p_Search_Invoice_ID + "","" + p_Search_InOut_ID + "" ""
			//
		sql += "" FROM M_Transaction_v ""
			+ ""WHERE M_AttributeSetInstance_ID > 0 AND M_AttributeSetInstance_ID IN ("" 
			+ sqlSubSelect
			+ "") ORDER BY M_Transaction_ID"";
		//
		int no = DB.executeUpdate(sql, get_TrxName());
		log.fine(sql);
		log.config(""#"" + no);
		
		//	Multi-Level
		
	}	//	insertTrx
"
org.compiere.process.PriceListCreate.prepare,PriceListCreate.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""DeleteOld""))
				p_DeleteOld = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_M_PriceList_Version_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.PriceListCreate.doIt,PriceListCreate.java,"String doIt() throws Exception
	{
		log.info (""M_PriceList_Version_ID="" + p_M_PriceList_Version_ID 
				+ "", DeleteOld="" + p_DeleteOld);
		m_plv = new MPriceListVersion (getCtx(), p_M_PriceList_Version_ID, get_TrxName());
		if (m_plv.get_ID() == 0 || m_plv.get_ID() != p_M_PriceList_Version_ID)
			throw new CompiereUserException(""@NotFound@  @M_PriceList_Version_ID@="" + p_M_PriceList_Version_ID);
		//	
		String error = checkPrerequisites();
		if (error != null && error.length() > 0)
			throw new CompiereUserException(error);
		return create();
	}	//	doIt
"
org.compiere.process.PriceListCreate.checkPrerequisites,PriceListCreate.java,"String checkPrerequisites()
	{
		String clientWhere = "" AND AD_Client_ID="" + m_plv.getAD_Client_ID();
		
		DB.executeUpdate(
			""UPDATE M_Product_PO SET PriceList = 0 WHERE PriceList IS NULL"" + clientWhere,
			get_TrxName());
		DB.executeUpdate(
			""UPDATE M_Product_PO SET PriceLastPO = 0 WHERE PriceLastPO IS NULL"" + clientWhere,
			get_TrxName());
		DB.executeUpdate(
			""UPDATE M_Product_PO SET PricePO = PriceLastPO ""
			+ ""WHERE (PricePO IS NULL OR PricePO = 0) AND PriceLastPO <> 0"" + clientWhere,
			get_TrxName());
		DB.executeUpdate(
			""UPDATE	M_Product_PO SET PricePO = 0 WHERE PricePO IS NULL"" + clientWhere,
			get_TrxName());
		DB.executeUpdate(
			""UPDATE M_Product_PO p SET IsCurrentVendor = 'Y' ""
			+ ""WHERE IsCurrentVendor = 'N'""
			+ "" AND NOT EXISTS ""
				+ ""(SELECT pp.M_Product_ID FROM M_Product_PO pp ""
				+ ""WHERE pp.M_Product_ID=p.M_Product_ID ""
				+ ""GROUP BY pp.M_Product_ID HAVING COUNT(*) > 1)"" + clientWhere,
			get_TrxName());

		/**
		 *	Make sure that we have only one active product vendor
		 */
		String sql = ""SELECT * FROM M_Product_PO po ""
			+ ""WHERE IsCurrentVendor='Y' AND IsActive='Y'""
			+ clientWhere
			+ "" AND EXISTS (SELECT M_Product_ID FROM M_Product_PO x ""
				+ ""WHERE x.M_Product_ID=po.M_Product_ID""
				+ "" AND IsCurrentVendor='Y' AND IsActive='Y' ""
				+ ""GROUP BY M_Product_ID HAVING COUNT(*) > 1) ""
			+ ""ORDER BY M_Product_ID, Created"";
		
		int success = 0;
		int errors = 0;
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_TrxName());
			ResultSet rs = pstmt.executeQuery ();
			int M_Product_ID = 0;
			while (rs.next ())
			{
				MProductPO po = new MProductPO (getCtx(), rs, get_TrxName());
				if (M_Product_ID != po.getM_Product_ID())
				{
					M_Product_ID = po.getM_Product_ID();
					continue;
				}
				po.setIsCurrentVendor (false);
				if (po.save())
					success++;
				else
				{
					errors++;
					log.warning(""Not updated "" + po);
				}
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		log.info (""Current Vendor - Changes="" + success + "", Errors="" + errors);
		return null;
	}	//	checkPrerequisites
"
org.compiere.process.PriceListCreate.create,PriceListCreate.java,"String create() throws Exception
	{
		StringBuffer info = new StringBuffer();
		
		/**	Delete Old Data	*/
		if (p_DeleteOld)
		{
			int no = DB.executeUpdate(
				""DELETE FROM M_ProductPrice ""
				+ ""WHERE M_PriceList_Version_ID="" + p_M_PriceList_Version_ID,
				get_TrxName());
			log.info(""Deleted="" + no);
			info.append(""@Deleted@="").append(no).append("" - "");
		}

		int M_Pricelist_Version_Base_ID = m_plv.getM_Pricelist_Version_Base_ID();
		MPriceList pl = m_plv.getPriceList();
		int curPrecision = pl.getStandardPrecision();
		
		/**
		 *	For All Discount Lines in Sequence
		 */
		MDiscountSchema ds = new MDiscountSchema(getCtx(), m_plv.getM_DiscountSchema_ID(), get_TrxName());
		MDiscountSchemaLine[] dsl = ds.getLines(false);
		for (MDiscountSchemaLine dsLine : dsl) {
			// ignore inactive discount schema lines
			if( !dsLine.isActive() )
				continue;

			String message = ""#"" + dsLine.getSeqNo();
			String dd = dsLine.getDescription();
			if (dd != null && dd.length() > 0)
				message += "" "" + dd;
			
			//	Clear Temporary Table
			int noDeleted = DB.executeUpdate(""DELETE FROM T_Selection"", get_TrxName());

			//	Create Selection in Temporary Table
			String sql = null;
			int M_DiscountSchemaLine_ID = dsLine.getM_DiscountSchemaLine_ID();
			int p2 = M_Pricelist_Version_Base_ID;
			if (p2 == 0)	//	Create from PO	**
			{
				sql = ""INSERT INTO T_Selection (T_Selection_ID) ""
					+ ""SELECT DISTINCT po.M_Product_ID ""
					+ ""FROM M_Product_PO po ""
					+ "" INNER JOIN M_Product p ON (p.M_Product_ID=po.M_Product_ID)""
					+ "" INNER JOIN M_DiscountSchemaLine dl ON (dl.M_DiscountSchemaLine_ID=?) ""	//	#1
					+ ""WHERE p.AD_Client_ID IN (?, 0)""		//	#2
					+ "" AND p.IsActive='Y' AND po.IsActive='Y' AND po.IsCurrentVendor='Y'""
					//	Optional Restrictions
					+ "" AND (dl.M_Product_Category_ID IS NULL OR p.M_Product_Category_ID=dl.M_Product_Category_ID)""
					+ "" AND (dl.C_BPartner_ID IS NULL OR po.C_BPartner_ID=dl.C_BPartner_ID)""
					+ "" AND (dl.M_Product_ID IS NULL OR p.M_Product_ID=dl.M_Product_ID)"";
				p2 = dsLine.getAD_Client_ID();
			}
			else			//	Create from Price List **
			{
				sql = ""INSERT INTO T_Selection (T_Selection_ID) ""
					+ ""SELECT DISTINCT p.M_Product_ID ""
					+ ""FROM M_ProductPrice pp""
					+ "" INNER JOIN M_Product p ON (p.M_Product_ID=pp.M_Product_ID)""
					+ "" INNER JOIN M_DiscountSchemaLine dl ON (dl.M_DiscountSchemaLine_ID=?) ""	//	#1
					+ ""WHERE pp.M_PriceList_Version_ID=?""	//	#2 PriceList_Version_Base_ID
					+ "" AND p.IsActive='Y' AND pp.IsActive='Y'""
					//	Optional Restrictions
					+ "" AND (dl.M_Product_Category_ID IS NULL OR p.M_Product_Category_ID=dl.M_Product_Category_ID)""
					+ "" AND (dl.C_BPartner_ID IS NULL OR EXISTS ""
						+ ""(SELECT * FROM M_Product_PO po ""
						+ ""WHERE po.M_Product_ID=p.M_Product_ID AND po.C_BPartner_ID=dl.C_BPartner_ID))""
					+ "" AND (dl.M_Product_ID IS NULL OR p.M_Product_ID=dl.M_Product_ID)"";
			}
			PreparedStatement pstmt = DB.prepareStatement (sql, get_TrxName());
			pstmt.setInt (1, M_DiscountSchemaLine_ID);
			pstmt.setInt (2, p2);
			int noSelected = pstmt.executeUpdate();
			pstmt.close();
			message += "": @Selected@="" + noSelected;
			
			//	Delete Prices in Selection, so that we can insert
			if (M_Pricelist_Version_Base_ID == 0
				|| M_Pricelist_Version_Base_ID != p_M_PriceList_Version_ID)
			{
				sql = ""DELETE FROM M_ProductPrice pp ""
					+ ""WHERE pp.M_PriceList_Version_ID="" + p_M_PriceList_Version_ID
					+ "" AND EXISTS (SELECT * FROM T_Selection s WHERE pp.M_Product_ID=s.T_Selection_ID)"";
				noDeleted = DB.executeUpdate (sql, get_TrxName());
				message += "", @Deleted@="" + noDeleted;
			}
			
			//	Copy (Insert) Prices
			int noInserted = 0;
			sql = ""INSERT INTO M_ProductPrice ""
				+ ""(M_PriceList_Version_ID, M_Product_ID,""
				+ "" AD_Client_ID, AD_Org_ID, IsActive, Created, CreatedBy, Updated, UpdatedBy,""
				+ "" PriceList, PriceStd, PriceLimit) "";
			//
			if (M_Pricelist_Version_Base_ID == p_M_PriceList_Version_ID)
				sql = null;	//	We have Prices already
			else if (M_Pricelist_Version_Base_ID == 0)
			{
				/**	Copy and Convert from Product_PO	*/
				sql	+= ""SELECT plv.M_PriceList_Version_ID, po.M_Product_ID,""
					+ "" plv.AD_Client_ID, plv.AD_Org_ID, 'Y', SysDate, plv.UpdatedBy, SysDate, plv.UpdatedBy,""
				//	Price List
					+ "" COALESCE(currencyConvert(po.PriceList,""
					+ "" po.C_Currency_ID, pl.C_Currency_ID, dl.ConversionDate, dl.C_ConversionType_ID, plv.AD_Client_ID, plv.AD_Org_ID), -po.PriceList),"" 
				//	Price Std
					+ "" COALESCE(currencyConvert(po.PriceList,""
					+ ""	po.C_Currency_ID, pl.C_Currency_ID, dl.ConversionDate, dl.C_ConversionType_ID, plv.AD_Client_ID, plv.AD_Org_ID), -po.PriceList),""
				//	Price Limit
					+ "" COALESCE(currencyConvert(po.PricePO,""
					+ "" po.C_Currency_ID, pl.C_Currency_ID, dl.ConversionDate, dl.C_ConversionType_ID, plv.AD_Client_ID, plv.AD_Org_ID), -po.PricePO) ""
				//
					+ ""FROM M_Product_PO po""
					+ "" INNER JOIN M_PriceList_Version plv ON (plv.M_PriceList_Version_ID=?)""	//	#1
					+ "" INNER JOIN M_PriceList pl ON (pl.M_PriceList_ID=plv.M_PriceList_ID)""
					+ "" INNER JOIN M_DiscountSchemaLine dl ON (dl.M_DiscountSchemaLine_ID=?) ""	//	#2
				//
					+ ""WHERE EXISTS (SELECT * FROM T_Selection s WHERE po.M_Product_ID=s.T_Selection_ID)""
					+ "" AND po.IsCurrentVendor='Y' AND po.IsActive='Y'"";
			}
			else
			{
				/**	Copy and Convert from other PriceList_Version	*/
				sql += ""SELECT plv.M_PriceList_Version_ID, pp.M_Product_ID,""
					+ "" plv.AD_Client_ID, plv.AD_Org_ID, 'Y', SysDate, plv.UpdatedBy, SysDate, plv.UpdatedBy,""
				//	Price List
					+ "" COALESCE(currencyConvert(pp.PriceList,""
					+ "" bpl.C_Currency_ID, pl.C_Currency_ID, dl.ConversionDate, dl.C_ConversionType_ID, plv.AD_Client_ID, plv.AD_Org_ID), -pp.PriceList),"" 
				//	Price Std
					+ "" COALESCE(currencyConvert(pp.PriceStd,""
					+ "" bpl.C_Currency_ID, pl.C_Currency_ID, dl.ConversionDate, dl.C_ConversionType_ID, plv.AD_Client_ID, plv.AD_Org_ID), -pp.PriceStd),"" 
				//	Price Limit
					+ "" COALESCE(currencyConvert(pp.PriceLimit,""
					+ "" bpl.C_Currency_ID, pl.C_Currency_ID, dl.ConversionDate, dl.C_ConversionType_ID, plv.AD_Client_ID, plv.AD_Org_ID), -pp.PriceLimit) ""
				//
					+ ""FROM M_ProductPrice pp""
					+ "" INNER JOIN M_PriceList_Version plv ON (plv.M_PriceList_Version_ID=?)""	//	#1
					+ "" INNER JOIN M_PriceList pl ON (pl.M_PriceList_ID=plv.M_PriceList_ID)""
					+ "" INNER JOIN M_PriceList_Version bplv ON (pp.M_PriceList_Version_ID=bplv.M_PriceList_Version_ID)""
					+ "" INNER JOIN M_PriceList bpl ON (bplv.M_PriceList_ID=bpl.M_PriceList_ID)""
					+ "" INNER JOIN M_DiscountSchemaLine dl ON (dl.M_DiscountSchemaLine_ID=?) ""	//	#2
				//
					+ ""WHERE pp.M_PriceList_Version_ID=?""	//	#3 M_PriceList_Version_Base_ID
					+ "" AND EXISTS (SELECT * FROM T_Selection s WHERE pp.M_Product_ID=s.T_Selection_ID)""
					+ "" AND pp.IsActive='Y'"";
			}
			if (sql != null)
			{
				pstmt = DB.prepareStatement (sql, get_TrxName());
				pstmt.setInt (1, p_M_PriceList_Version_ID);
				pstmt.setInt (2, M_DiscountSchemaLine_ID);
				if (M_Pricelist_Version_Base_ID != 0)
					pstmt.setInt (3, M_Pricelist_Version_Base_ID);
				noInserted = pstmt.executeUpdate();
				pstmt.close();
				message += "" @Inserted@="" + noInserted;
			}
			
			/** Calculations	**/
			MProductPrice[] pp = m_plv.getProductPrice(
				""AND EXISTS (SELECT * FROM T_Selection s ""
				+ ""WHERE s.T_Selection_ID=M_ProductPrice.M_Product_ID)"");
			for (MProductPrice price : pp) {
				BigDecimal priceList = price.getPriceList();
				BigDecimal priceStd = price.getPriceStd();
				BigDecimal priceLimit = price.getPriceLimit();
				//
				price.setPriceList(calculate (dsLine.getList_Base(),
					priceList, priceStd, priceLimit, dsLine.getList_Fixed(),
					dsLine.getList_AddAmt(), dsLine.getList_Discount(),
					dsLine.getList_Rounding(), curPrecision));
				price.setPriceStd (calculate (dsLine.getStd_Base(),
					priceList, priceStd, priceLimit, dsLine.getStd_Fixed(),
					dsLine.getStd_AddAmt(), dsLine.getStd_Discount(),
					dsLine.getStd_Rounding(), curPrecision));
				price.setPriceLimit(calculate (dsLine.getLimit_Base(),
					priceList, priceStd, priceLimit, dsLine.getLimit_Fixed(),
					dsLine.getLimit_AddAmt(), dsLine.getLimit_Discount(),
					dsLine.getLimit_Rounding(), curPrecision));
				price.save();
			}	//	for all products
			
			//	Clear Temporary Table
			noDeleted = DB.executeUpdate(""DELETE FROM T_Selection"", get_TrxName());
			//
			addLog(message);
		}	//	for all lines
		
		MProductPrice[] pp = m_plv.getProductPrice(true);
		info.append("" - @Records@="").append(pp.length);
		return info.toString();
	}	//	create
"
org.compiere.process.PriceListCreate.calculate,PriceListCreate.java,"BigDecimal calculate (String base, 
		BigDecimal list, BigDecimal std, BigDecimal limit, BigDecimal fix, 
		BigDecimal add, BigDecimal discount, String round, int curPrecision)
	{
		BigDecimal calc = null;
		double dd = 0.0;
		if (X_M_DiscountSchemaLine.LIST_BASE_ListPrice.equals(base))
			dd = list.doubleValue();
		else if (X_M_DiscountSchemaLine.LIST_BASE_StandardPrice.equals(base))
			dd = std.doubleValue();
		else if (X_M_DiscountSchemaLine.LIST_BASE_LimitPOPrice.equals(base))
			dd = limit.doubleValue();
		else if (X_M_DiscountSchemaLine.LIST_BASE_FixedPrice.equals(base))
			calc = fix;
		else
			throw new IllegalArgumentException(""Unknown Base="" + base);
		
		if (calc == null)
		{
			if (add.signum() != 0)
				dd += add.doubleValue();
			if (discount.signum() != 0)
				dd *= 1 - (discount.doubleValue()/100.0);
			calc = new BigDecimal(dd);
		}
		//	Rounding
		if (X_M_DiscountSchemaLine.LIST_ROUNDING_CurrencyPrecision.equals(round))
			calc = calc.setScale(curPrecision, BigDecimal.ROUND_HALF_UP);
		else if (X_M_DiscountSchemaLine.LIST_ROUNDING_Dime102030.equals(round))
			calc = calc.setScale(1, BigDecimal.ROUND_HALF_UP);
		else if (X_M_DiscountSchemaLine.LIST_ROUNDING_Hundred.equals(round))
			calc = calc.setScale(-2, BigDecimal.ROUND_HALF_UP);
		else if (X_M_DiscountSchemaLine.LIST_ROUNDING_Nickel051015.equals(round))
		{
			BigDecimal mm = new BigDecimal(20);
			calc = calc.multiply(mm); 
			calc = calc.setScale(0, BigDecimal.ROUND_HALF_UP);
			calc = calc.divide(mm, 2, BigDecimal.ROUND_HALF_UP);
		}
		else if (X_M_DiscountSchemaLine.LIST_ROUNDING_NoRounding.equals(round))
			;
		else if (X_M_DiscountSchemaLine.LIST_ROUNDING_Quarter255075.equals(round))
		{
			BigDecimal mm = new BigDecimal(4);
			calc = calc.multiply(mm); 
			calc = calc.setScale(0, BigDecimal.ROUND_HALF_UP);
			calc = calc.divide(mm, 2, BigDecimal.ROUND_HALF_UP);
		}
		else if (X_M_DiscountSchemaLine.LIST_ROUNDING_Ten10002000.equals(round))
			calc = calc.setScale(-1, BigDecimal.ROUND_HALF_UP);
		else if (X_M_DiscountSchemaLine.LIST_ROUNDING_Thousand.equals(round))
			calc = calc.setScale(-3, BigDecimal.ROUND_HALF_UP);
		else if (X_M_DiscountSchemaLine.LIST_ROUNDING_WholeNumber00.equals(round))
			calc = calc.setScale(0, BigDecimal.ROUND_HALF_UP);
		
		return calc;
	}	//	calculate
"
org.compiere.process.ReportColumnSet_Copy.prepare,ReportColumnSet_Copy.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""PA_ReportColumnSet_ID""))
				m_PA_ReportColumnSet_ID = ((BigDecimal)element.getParameter()).intValue();
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.ReportColumnSet_Copy.doIt,ReportColumnSet_Copy.java,"String doIt() throws Exception
	{
		int to_ID = super.getRecord_ID();
		log.info(""From PA_ReportColumnSet_ID="" + m_PA_ReportColumnSet_ID + "", To="" + to_ID);
		if (to_ID < 1)
			throw new Exception(MSG_SaveErrorRowNotFound);
		//
		MReportColumnSet to = new MReportColumnSet(getCtx(), to_ID, get_TrxName());
		MReportColumnSet rcSet = new MReportColumnSet(getCtx(), m_PA_ReportColumnSet_ID, get_TrxName());
		MReportColumn[] rcs = rcSet.getColumns();
		for (MReportColumn element : rcs) {
			MReportColumn rc = MReportColumn.copy (getCtx(), to.getAD_Client_ID(), to.getAD_Org_ID(), to_ID, element, get_TrxName());
			rc.save();
		}
		//	Oper 1/2 were set to Null !
		return ""@Copied@="" + rcs.length;
	}	//	doIt
"
org.compiere.process.RfQResponseRank.prepare,RfQResponseRank.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_C_RfQ_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.RfQResponseRank.doIt,RfQResponseRank.java,"String doIt () throws Exception
	{
		MRfQ rfq = new MRfQ (getCtx(), p_C_RfQ_ID, get_TrxName());
		if (rfq.get_ID() == 0)
			throw new IllegalArgumentException(""No RfQ found"");
		log.info(rfq.toString());
		String error = rfq.checkQuoteTotalAmtOnly();
		if (error != null && error.length() > 0)
			throw new Exception (error);
		
		//	Get Completed, Active Responses
		MRfQResponse[] responses = rfq.getResponses (true, true);
		log.fine(""doIt - #Responses="" + responses.length);
		if (responses.length == 0)
			throw new IllegalArgumentException(""No completed RfQ Responses found"");
		if (responses.length == 1)
		{
			responses[0].setIsSelectedWinner(true);
			responses[0].save();
			throw new IllegalArgumentException(""Only one completed RfQ Response found"");
		}
			
		//	Rank
		if (rfq.isQuoteTotalAmtOnly())
			rankResponses(rfq, responses);
		else
			rankLines (rfq, responses);
		return ""# "" + responses.length;
	}	//	doIt
"
org.compiere.process.RfQResponseRank.rankLines,RfQResponseRank.java,"void rankLines (MRfQ rfq, MRfQResponse[] responses)
	{
		MRfQLine[] rfqLines = rfq.getLines();
		if (rfqLines.length == 0)
			throw new IllegalArgumentException(""No RfQ Lines found"");
		
		//	 for all lines
		for (MRfQLine rfqLine : rfqLines) {
			if (!rfqLine.isActive())
				continue;
			log.fine(""rankLines - "" + rfqLine);
			MRfQLineQty[] rfqQtys = rfqLine.getQtys();
			for (MRfQLineQty rfqQty : rfqQtys) {
				if (!rfqQty.isActive() || !rfqQty.isRfQQty())
					continue;
				log.fine(""rankLines Qty - "" + rfqQty);
				MRfQResponseLineQty[] respQtys = rfqQty.getResponseQtys(false);
				for (MRfQResponseLineQty respQty : respQtys) {
					if (!respQty.isActive() || !respQty.isValidAmt())
					{
						respQty.setRanking(999);
						respQty.save();
						log.fine(""  - ignored: "" + respQty);
					}
				}	//	for all respones line qtys
				
				//	Rank RfQ Line Qtys
				respQtys = rfqQty.getResponseQtys(false);
				if (respQtys.length == 0)
					log.fine(""  - No Qtys with valid Amounts"");
				else
				{
					Arrays.sort(respQtys, respQtys[0]);
					int lastRank = 1;		//	multiple rank #1
					BigDecimal lastAmt = Env.ZERO; 
					for (int rank = 0; rank < respQtys.length; rank++)
					{
						MRfQResponseLineQty qty = respQtys[rank];
						if (!qty.isActive() || qty.getRanking() == 999)
							continue;
						BigDecimal netAmt = qty.getNetAmt();
						if (netAmt == null)
						{
							qty.setRanking(999);
							log.fine(""  - Rank 999: "" + qty);
						}
						else
						{
							if (lastAmt.compareTo(netAmt) != 0)
							{
								lastRank = rank+1;
								lastAmt = qty.getNetAmt();
							}
							qty.setRanking(lastRank);
							log.fine(""  - Rank "" + lastRank + "": "" + qty);
						}
						qty.save();
						//	
						if (rank == 0)	//	Update RfQ
						{
							rfqQty.setBestResponseAmt(qty.getNetAmt());
							rfqQty.save();
						}
					}
				}
			}	//	for all rfq line qtys
		}	//	 for all rfq lines
		
		//	Select Winner based on line ranking
		MRfQResponse winner = null;
		for (MRfQResponse response : responses) {
			if (response.isSelectedWinner())
				response.setIsSelectedWinner(false);
			int ranking = 0;
			MRfQResponseLine[] respLines = response.getLines(false);
			for (MRfQResponseLine respLine : respLines) {
				if (!respLine.isActive())
					continue;
				if (respLine.isSelectedWinner())
					respLine.setIsSelectedWinner(false);
				MRfQResponseLineQty[] respQtys = respLine.getQtys(false);
				for (MRfQResponseLineQty respQty : respQtys) {
					if (!respQty.isActive())
						continue;
					ranking += respQty.getRanking();
					if (respQty.getRanking() == 1 
						&& respQty.getRfQLineQty().isPurchaseQty())
					{
						respLine.setIsSelectedWinner(true);
						respLine.save();
						break;
					}
				}
			}
			response.setRanking(ranking);
			response.save();
			log.fine(""- Response Ranking "" + ranking + "": "" + response);
			if (!rfq.isQuoteSelectedLines())	//	no total selected winner if not all lines
			{
				if (winner == null && ranking > 0)
					winner = response;
				if (winner != null 
						&& response.getRanking() > 0 
						&& response.getRanking() < winner.getRanking())
					winner = response;
			}
		}
		if (winner != null)
		{
			winner.setIsSelectedWinner(true);
			winner.save();
			log.fine(""- Response Winner: "" + winner);
		}
	}	//	rankLines
"
org.compiere.process.RfQResponseRank.rankResponses,RfQResponseRank.java,"void rankResponses (MRfQ rfq, MRfQResponse[] responses)
	{
		int ranking = 1;
		//	Responses Ordered by Price
		for (MRfQResponse response : responses) {
			if (response.getPrice() != null 
				&& response.getPrice().compareTo(Env.ZERO) > 0)
			{
				if (response.isSelectedWinner() != (ranking == 1))
					response.setIsSelectedWinner(ranking == 1);
				response.setRanking(ranking);
				//
				ranking++;
			}
			else
			{
				response.setRanking(999);
				if (response.isSelectedWinner())
					response.setIsSelectedWinner(false);
			}
			response.save();
			log.fine(""rankResponse - "" + response);
		}
	}	//	rankResponses
"
org.compiere.process.DocumentTypeVerify.doIt,DocumentTypeVerify.java,"String doIt() throws Exception
	{
		createDocumentTypes(getCtx(), getAD_Client_ID(), this, get_TrxName());
		createPeriodControls(getCtx(), getAD_Client_ID(), this, get_TrxName());
		return ""OK"";
	}	//	doIt
"
org.compiere.process.DocumentTypeVerify.createDocumentTypes,DocumentTypeVerify.java,"void createDocumentTypes(Ctx ctx, int AD_Client_ID, 
		SvrProcess sp, Trx trx)
	{
		s_log.info(""AD_Client_ID="" + AD_Client_ID);
		String sql = ""SELECT rl.Value, rl.Name ""
			+ ""FROM AD_Ref_List rl ""
			+ ""WHERE rl.AD_Reference_ID=183""
			+ "" AND rl.IsActive='Y' AND NOT EXISTS ""
			+ "" (SELECT * FROM C_DocType dt WHERE dt.AD_Client_ID=? AND rl.Value=dt.DocBaseType)"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, trx);
			pstmt.setInt(1, AD_Client_ID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				String name = rs.getString(2);
				String value = rs.getString(1);
				s_log.config(name + ""="" + value);
				MDocType dt = new MDocType (ctx, value, name, trx);
				if (dt.save())
				{
					if (sp != null)
						sp.addLog (0, null, null, name);
					else
						s_log.fine(name);
				}
				else
				{
					if (sp != null)
						sp.addLog (0, null, null, ""Not created: "" + name);
					else
						s_log.warning(""Not created: "" + name);
				}
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
	}	//	createDocumentTypes
"
org.compiere.process.DocumentTypeVerify.createPeriodControls,DocumentTypeVerify.java,"void createPeriodControls(Ctx ctx, int AD_Client_ID, 
		SvrProcess sp, Trx trx)
	{
		s_log.info(""AD_Client_ID="" + AD_Client_ID);

		//	Delete Duplicates
		//jz remove correlation ID  String sql = ""DELETE FROM C_PeriodControl pc1 ""
		String sql = ""DELETE FROM C_PeriodControl ""
			+ ""WHERE (C_Period_ID, DocBaseType) IN ""
				+ ""(SELECT C_Period_ID, DocBaseType ""
				+ ""FROM C_PeriodControl pc2 ""
				+ ""GROUP BY C_Period_ID, DocBaseType ""
				+ ""HAVING COUNT(*) > 1)""
			+ "" AND C_PeriodControl_ID NOT IN ""
				+ ""(SELECT MIN(C_PeriodControl_ID) ""
				+ ""FROM C_PeriodControl pc3 ""
				+ ""GROUP BY C_Period_ID, DocBaseType)"";
		int no = DB.executeUpdate(sql, false, trx);
		s_log.info(""Duplicates deleted #"" + no);
		
		//	Insert Missing
		sql = ""SELECT DISTINCT p.AD_Client_ID, p.C_Period_ID, dbt.DocBaseType ""
			+ ""FROM C_Period p, ""
			+ ""C_DocBaseType dbt ""
			+ ""WHERE p.AD_Client_ID=? ""
			+ "" AND NOT EXISTS""
			+ "" (SELECT * FROM C_PeriodControl pc ""
				+ ""WHERE pc.C_Period_ID=p.C_Period_ID AND pc.DocBaseType=dbt.DocBaseType)""
			+ "" AND (dbt.AD_Client_ID = 0 OR p.AD_Client_ID = dbt.AD_Client_ID)""	;
		PreparedStatement pstmt = null;
		int counter = 0;
		try
		{
			pstmt = DB.prepareStatement(sql, trx);
			pstmt.setInt(1, AD_Client_ID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				int Client_ID = rs.getInt(1);
				int C_Period_ID = rs.getInt(2);
				String DocBaseType = rs.getString(3);
				s_log.config(""AD_Client_ID="" + Client_ID 
					+ "", C_Period_ID="" + C_Period_ID + "", DocBaseType="" + DocBaseType);
				//
				MPeriodControl pc = new MPeriodControl (ctx, Client_ID, 
					C_Period_ID, DocBaseType, trx);
				if (pc.save())
				{
					counter++;
					s_log.fine(pc.toString());
				}
				else
					s_log.warning(""Not saved: "" + pc);
			}
			rs.close();
			pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		if (sp != null)
			sp.addLog (0, null, new BigDecimal(counter), ""@C_PeriodControl_ID@ @Created@"");
		s_log.info(""Inserted #"" + counter);
	}	//	createPeriodControls
"
org.compiere.process.RfQCreate.prepare,RfQCreate.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""IsSendRfQ""))
				p_IsSendRfQ = ""Y"".equals(element.getParameter());
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_C_RfQ_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.RfQCreate.doIt,RfQCreate.java,"String doIt() throws Exception
	{
		MRfQ rfq = new MRfQ (getCtx(), p_C_RfQ_ID, get_TrxName());
		log.info(""doIt - "" + rfq + "", Send="" + p_IsSendRfQ);
		String error = rfq.checkQuoteTotalAmtOnly();
		if (error != null && error.length() > 0)
			throw new Exception (error);

		int counter = 0;
		int sent = 0;
		int notSent = 0;
		
		//	Get all existing responses
		MRfQResponse[] responses = rfq.getResponses (false, false);
		
		//	Topic
		MRfQTopic topic = new MRfQTopic (getCtx(), rfq.getC_RfQ_Topic_ID(), get_TrxName());
		MRfQTopicSubscriber[] subscribers = topic.getSubscribers();
		for (MRfQTopicSubscriber subscriber : subscribers) {
			boolean skip = false;
			//	existing response
			for (MRfQResponse element : responses) {
				if (subscriber.getC_BPartner_ID() == element.getC_BPartner_ID()
					&& subscriber.getC_BPartner_Location_ID() == element.getC_BPartner_Location_ID())
				{
					skip = true;
					break;
				}
			}
			if (skip)
				continue;
			
			//	Create Response
			MRfQResponse response = new MRfQResponse (rfq, subscriber);
			if (response.get_ID() == 0)	//	no lines
				continue;
			
			counter++;
			if (p_IsSendRfQ)
			{
				if (response.sendRfQ())
					sent++;
				else
					notSent++;
			}
		}	//	for all subscribers

		String retValue = ""@Created@ "" + counter;
		if (p_IsSendRfQ)
			retValue += "" - @IsSendRfQ@="" + sent + "" - @Error@="" + notSent;
		return retValue;
	}	//	doIt
"
org.compiere.process.UserPassword.prepare,UserPassword.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_User_ID""))
				p_AD_User_ID = element.getParameterAsInt();
			else if (name.equals(""OldPassword""))
				p_OldPassword = (String)element.getParameter();
			else if (name.equals(""CurrentPassword""))
				p_CurrentPassword = (String)element.getParameter();
			else if (name.equals(""NewPassword""))
				p_NewPassword = (String)element.getParameter();
			else if (name.equals(""NewEMail""))
				p_NewEMail = (String)element.getParameter();
			else if (name.equals(""NewEMailUser""))
				p_NewEMailUser = (String)element.getParameter();
			else if (name.equals(""NewEMailUserPW""))
				p_NewEMailUserPW = (String)element.getParameter();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.process.UserPassword.doIt,UserPassword.java,"String doIt() throws Exception
	{
		log.info (""AD_User_ID="" + p_AD_User_ID + "" from "" + getAD_User_ID());
		
		// If User is not selected, use current user
		if (p_AD_User_ID == -1)
			p_AD_User_ID = getAD_User_ID();

		MUser user = MUser.get(getCtx(), p_AD_User_ID);
		MUser operator = MUser.get(getCtx(), getAD_User_ID());
		log.fine(""User="" + user + "", Operator="" + operator);

		if (!operator.isAdministrator() && p_AD_User_ID != getAD_User_ID() && user.hasRole())
			throw new IllegalArgumentException(""@UserCannotUpdate@"");
		
		// SuperUser and System passwords can only be updated by themselves
		if (user.isSystemAdministrator() && p_AD_User_ID != getAD_User_ID())
			throw new IllegalArgumentException(""@UserCannotUpdate@"");
		
		// Current Password - Admin's current password
		// Old Password - User's old password
		if (Util.isEmpty(p_CurrentPassword))
		{
			if (Util.isEmpty(p_OldPassword))
				throw new IllegalArgumentException(""@OldPasswordMandatory@"");
			else if (!p_OldPassword.equals(user.getPassword()))
				throw new IllegalArgumentException(""@OldPasswordNoMatch@"");
		}
		else if (!operator.isAdministrator() && p_AD_User_ID != getAD_User_ID() && user.hasRole())
			throw new IllegalArgumentException(""@UserCannotUpdate@"");
		else if (!p_CurrentPassword.equals(operator.getPassword()))
			throw new IllegalArgumentException(""@AdminPasswordNoMatch@"");
		
		String sql = ""UPDATE AD_User SET Updated=SysDate, UpdatedBy="" + getAD_User_ID();
		if (!Util.isEmpty(p_NewPassword))
		{
			MColumn column = MColumn.get(getCtx(), 417);
			if (column.isEncrypted() )
				p_NewPassword = SecureEngine.encrypt(p_NewPassword);				
			sql += "", Password="" + DB.TO_STRING(p_NewPassword);
		}
		if (!Util.isEmpty(p_NewEMail))
			sql += "", Email="" + DB.TO_STRING(p_NewEMail);
		if (!Util.isEmpty(p_NewEMailUser))
			sql += "", EmailUser="" + DB.TO_STRING(p_NewEMailUser);
		if (!Util.isEmpty(p_NewEMailUserPW))
			sql += "", EmailUserPW="" + DB.TO_STRING(p_NewEMailUserPW);
		sql += "" WHERE AD_User_ID=""+ p_AD_User_ID;
		if (DB.executeUpdate(sql, get_TrxName()) == 1)
		{
			user.setPassword( p_NewPassword );
			return ""OK"";
		}
		else 
			return ""@Error@"";
	}	//	doIt
"
org.compiere.process.DistributionVerify.doIt,DistributionVerify.java,"String doIt () throws Exception
	{
		log.info(""doIt - GL_Distribution_ID="" + getRecord_ID());
		MDistribution distribution = new MDistribution (getCtx(), getRecord_ID(), get_TrxName());
		if (distribution.get_ID() == 0)
			throw new CompiereUserException(""Not found GL_Distribution_ID="" + getRecord_ID());

		String error = distribution.validate();
		boolean saved = distribution.save();
		if (error != null)
			throw new CompiereUserException(error);
		if (!saved)
			throw new CompiereSystemException(""@NotSaved@"");
		
		return ""@OK@"";
	}	//	doIt
"
org.compiere.process.DunningRunCreate.prepare,DunningRunCreate.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""IncludeInDispute""))
				p_IncludeInDispute = ""Y"".equals(element.getParameter());
			else if (name.equals(""OnlySOTrx""))
				p_OnlySOTrx = ""Y"".equals(element.getParameter());
			else if (name.equals(""IsAllCurrencies""))
				p_IsAllCurrencies = ""Y"".equals(element.getParameter());
			else if (name.equals(""SalesRep_ID""))
				p_SalesRep_ID = element.getParameterAsInt();
			else if (name.equals(""C_Currency_ID""))
				p_C_Currency_ID = element.getParameterAsInt();
			else if (name.equals(""C_BPartner_ID""))
				p_C_BPartner_ID = element.getParameterAsInt();
			else if (name.equals(""C_BP_Group_ID""))
				p_C_BP_Group_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_C_DunningRun_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.DunningRunCreate.doIt,DunningRunCreate.java,"String doIt () throws Exception
	{
		log.info(""C_DunningRun_ID="" + p_C_DunningRun_ID
			+ "", Dispute="" + p_IncludeInDispute
			+ "", C_BP_Group_ID="" + p_C_BP_Group_ID
			+ "", C_BPartner_ID="" + p_C_BPartner_ID);
		m_run = new MDunningRun (getCtx(),p_C_DunningRun_ID, get_TrxName());
		if (m_run.get_ID() == 0)
			throw new IllegalArgumentException (""Not found MDunningRun"");
		if (!m_run.deleteEntries(true))
			throw new IllegalArgumentException (""Cannot delete existing entries"");
		if (p_SalesRep_ID == 0)
			throw new IllegalArgumentException (""No SalesRep"");
		if (p_C_Currency_ID == 0)
			throw new IllegalArgumentException (""No Currency"");
		
		// Pickup the Runlevel
		m_level = m_run.getLevel ();
		
		addInvoices();
		addPayments();
		
		// If the level should charge a fee do it now...
		if (m_level.isChargeFee()) 
			addFees();
		if (m_level.isChargeInterest()) 
			addFees();
		
		// we need to check whether this is a statement or not and some other rules
		checkDunningEntry();
		
		int entries = 0;
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (""SELECT count(*) FROM C_DunningRunEntry WHERE C_DunningRun_ID=?"", get_TrxName());
			pstmt.setInt (1, m_run.get_ID ());
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
			{
				entries = rs.getInt (1);
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""countResults"", e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}

		
		return ""@C_DunningRunEntry_ID@ #"" + entries;
	}	//	doIt
"
org.compiere.process.DunningRunCreate.addInvoices,DunningRunCreate.java,"int addInvoices()
	{
		int count = 0;
		String sql = ""SELECT i.C_Invoice_ID, i.C_Currency_ID,""
			+ "" i.GrandTotal*i.MultiplierAP,""
			+ "" invoiceOpen(i.C_Invoice_ID,i.C_InvoicePaySchedule_ID)*MultiplierAP,""
			+ "" COALESCE(daysBetween(?,ips.DueDate),paymentTermDueDays(i.C_PaymentTerm_ID,i.DateInvoiced,?)),"" // ##1/2
			+ "" i.IsInDispute, i.C_BPartner_ID ""
			+ ""FROM C_Invoice_v i ""
			+ "" LEFT OUTER JOIN C_InvoicePaySchedule ips ON (i.C_InvoicePaySchedule_ID=ips.C_InvoicePaySchedule_ID) ""
			+ ""WHERE i.IsPaid='N' AND i.AD_Client_ID=?""				//	##3
			+ "" AND i.DocStatus IN ('CO','CL')""
		//  Invoice Collection Status Collection Agency, Uncollectable, Legal will not been dunned any longer as per Def. YS + KP 12/02/06
			+ "" AND (NOT i.InvoiceCollectionType IN ('"" + X_C_Invoice.INVOICECOLLECTIONTYPE_CollectionAgency + ""', ""
				+ ""'"" + X_C_Invoice.INVOICECOLLECTIONTYPE_LegalProcedure + ""', '"" + X_C_Invoice.INVOICECOLLECTIONTYPE_Uncollectable + ""')""
				+ "" OR InvoiceCollectionType IS NULL)""
		//  Do not show future docs...
			+ "" AND DateInvoiced<=?"" // ##4
		//	Only BP(Group) with Dunning defined
			+ "" AND EXISTS (SELECT * FROM C_DunningLevel dl ""
				+ ""WHERE dl.C_DunningLevel_ID=?""	//	//	##5
				+ "" AND dl.C_Dunning_ID IN ""
					+ ""(SELECT COALESCE(bp.C_Dunning_ID, bpg.C_Dunning_ID) ""
					+ ""FROM C_BPartner bp""
					+ "" INNER JOIN C_BP_Group bpg ON (bp.C_BP_Group_ID=bpg.C_BP_Group_ID) ""
					+ ""WHERE i.C_BPartner_ID=bp.C_BPartner_ID))"";
		// for specific Business Partner
		if (p_C_BPartner_ID != 0)
			sql += "" AND i.C_BPartner_ID=?"";	//	##6
		// or a specific group
		else if (p_C_BP_Group_ID != 0)
			sql += "" AND EXISTS (SELECT * FROM C_BPartner bp ""
				+ ""WHERE i.C_BPartner_ID=bp.C_BPartner_ID AND bp.C_BP_Group_ID=?)"";	//	##6
		// Only Sales Trx
		if (p_OnlySOTrx)
			sql += "" AND i.IsSOTrx='Y'"";
		// Only single currency
		if (!p_IsAllCurrencies) 
			sql += "" AND i.C_Currency_ID="" + p_C_Currency_ID;
	//	log.info(sql);
		
		String sql2=null;
		
		// if sequentially we must check for other levels with smaller days for
		// which this invoice is not yet included!
		if (m_level.getParent ().isCreateLevelsSequentially ()) {
			// Build a list of all topmost Dunning Levels
			MDunningLevel[] previousLevels = m_level.getPreviousLevels();
			if (previousLevels!=null && previousLevels.length>0) {
				String sqlAppend = """";
				for (MDunningLevel element : previousLevels) {
					sqlAppend += "" AND i.C_Invoice_ID IN (SELECT C_Invoice_ID FROM C_DunningRunLine WHERE "" +
					""C_DunningRunEntry_ID IN (SELECT C_DunningRunEntry_ID FROM C_DunningRunEntry WHERE "" +
					""C_DunningRun_ID IN (SELECT C_DunningRun_ID FROM C_DunningRun WHERE "" +
					""C_DunningLevel_ID="" + element.get_ID () + "")) AND Processed<>'N')"";
				}
				sql += sqlAppend;
			}
		}
		// ensure that we do only dunn what's not yet dunned, so we lookup the max of last Dunn Date which was processed
		sql2 = ""SELECT COUNT(*), COALESCE(DAYSBETWEEN(MAX(dr2.DunningDate), MAX(dr.DunningDate)),0)""		
			+ ""FROM C_DunningRun dr2, C_DunningRun dr""
			+ "" INNER JOIN C_DunningRunEntry dre ON (dr.C_DunningRun_ID=dre.C_DunningRun_ID)""
			+ "" INNER JOIN C_DunningRunLine drl ON (dre.C_DunningRunEntry_ID=drl.C_DunningRunEntry_ID) ""
			+ ""WHERE drl.Processed='Y' AND dr2.C_DunningRun_ID=? AND drl.C_Invoice_ID=?""; // ##1 ##2
		
		BigDecimal DaysAfterDue = m_run.getLevel().getDaysAfterDue();
		int DaysBetweenDunning = m_run.getLevel().getDaysBetweenDunning();
		
		PreparedStatement pstmt = null;
		PreparedStatement pstmt2 = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_TrxName());
			pstmt.setTimestamp(1, m_run.getDunningDate());
			pstmt.setTimestamp(2, m_run.getDunningDate());
			pstmt.setInt (3, m_run.getAD_Client_ID());
			pstmt.setTimestamp(4, m_run.getDunningDate ());
			pstmt.setInt(5, m_run.getC_DunningLevel_ID());
			if (p_C_BPartner_ID != 0)
				pstmt.setInt (6, p_C_BPartner_ID);
			else if (p_C_BP_Group_ID != 0)
				pstmt.setInt (6, p_C_BP_Group_ID);
			//
			pstmt2 = DB.prepareStatement (sql2, get_TrxName());
			//
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				int C_Invoice_ID = rs.getInt(1);
				int C_Currency_ID = rs.getInt(2);
				BigDecimal GrandTotal = rs.getBigDecimal(3);
				BigDecimal Open = rs.getBigDecimal(4);
				int DaysDue = rs.getInt(5);
				boolean IsInDispute = ""Y"".equals(rs.getString(6));
				int C_BPartner_ID = rs.getInt(7);
				//
				// Check for Dispute
				if (!p_IncludeInDispute && IsInDispute)
					continue;
				// Check the day again based on rulesets
				if (DaysDue < DaysAfterDue.intValue() && !m_level.isShowAllDue ())
					continue;
				// Check for an open amount
				if (Env.ZERO.compareTo(Open) == 0)
					continue;
				//
				int TimesDunned = 0;
				int DaysAfterLast = 0;
				//	SubQuery
				pstmt2.setInt (1, m_run.get_ID ());
				pstmt2.setInt (2, C_Invoice_ID);
				ResultSet rs2 = pstmt2.executeQuery ();
				if (rs2.next())
				{
					TimesDunned = rs2.getInt(1);
					DaysAfterLast = rs2.getInt(2);
				}
				rs2.close();
				//	SubQuery
				
				// Ensure that Daysbetween Dunning is enforced
				// Ensure Not ShowAllDue and Not ShowNotDue is selected
				// PROBLEM: If you have ShowAll activated then DaysBetweenDunning is not working, because we don't know whether
				//          there is something which we really must Dunn.
				if (DaysBetweenDunning != 0 && DaysAfterLast < DaysBetweenDunning && !m_level.isShowAllDue () && !m_level.isShowNotDue ())
					continue;
				
				// We don't want to show non due documents
				if (DaysDue<0 && !m_level.isShowNotDue ())
					continue;
							
				// We will minus the timesDunned if this is the DaysBetweenDunning is not fullfilled.
				// Remember in checkup later we must reset them!
				// See also checkDunningEntry()
				if (DaysAfterLast < DaysBetweenDunning)
					TimesDunned = TimesDunned*-1;
				//
				createInvoiceLine (C_Invoice_ID, C_Currency_ID, GrandTotal, Open,
					DaysDue, IsInDispute, C_BPartner_ID, 
					TimesDunned, DaysAfterLast);
				count++;
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
			pstmt2.close();
			pstmt2 = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""addInvoices"", e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			if (pstmt2 != null)
				pstmt2.close ();
			pstmt = null;
			pstmt2 = null;
		}
		catch (Exception e)
		{
			pstmt = null;
			pstmt2 = null;
		}
		return count;
	}	//	addInvoices
"
org.compiere.process.DunningRunCreate.createInvoiceLine,DunningRunCreate.java,"void createInvoiceLine (int C_Invoice_ID, int C_Currency_ID, 
		BigDecimal GrandTotal, BigDecimal Open, 
		int DaysDue, boolean IsInDispute, 
		int C_BPartner_ID, int TimesDunned, int DaysAfterLast)
	{
		MDunningRunEntry entry = m_run.getEntry (C_BPartner_ID, p_C_Currency_ID, p_SalesRep_ID);
		if (entry.get_ID() == 0)
			if (!entry.save())
				throw new IllegalStateException(""Cannot save MDunningRunEntry"");
		//
		MDunningRunLine line = new MDunningRunLine (entry);
		line.setInvoice(C_Invoice_ID, C_Currency_ID, GrandTotal, Open, 
			new BigDecimal(0), DaysDue, IsInDispute, TimesDunned, 
			DaysAfterLast);
		if (!line.save())
			throw new IllegalStateException(""Cannot save MDunningRunLine"");
	}	//	createInvoiceLine
"
org.compiere.process.DunningRunCreate.addPayments,DunningRunCreate.java,"int addPayments()
	{
		String sql = ""SELECT C_Payment_ID, C_Currency_ID, PayAmt,""
			+ "" paymentAvailable(C_Payment_ID), C_BPartner_ID ""
			+ ""FROM C_Payment_v p ""
			+ ""WHERE AD_Client_ID=?""			//	##1
			+ "" AND IsAllocated='N' AND C_BPartner_ID IS NOT NULL""
			+ "" AND C_Charge_ID IS NULL""
			+ "" AND DocStatus IN ('CO','CL')""
		//	Only BP with Dunning defined
			+ "" AND EXISTS (SELECT * FROM C_BPartner bp ""
				+ ""WHERE p.C_BPartner_ID=bp.C_BPartner_ID""
				+ "" AND bp.C_Dunning_ID=(SELECT C_Dunning_ID FROM C_DunningLevel WHERE C_DunningLevel_ID=?))"";	// ##2
		if (p_C_BPartner_ID != 0)
			sql += "" AND C_BPartner_ID=?"";		//	##3
		else if (p_C_BP_Group_ID != 0)
			sql += "" AND EXISTS (SELECT * FROM C_BPartner bp ""
				+ ""WHERE p.C_BPartner_ID=bp.C_BPartner_ID AND bp.C_BP_Group_ID=?)"";	//	##3
		// If it is not a statement we will add lines only if InvoiceLines exists,
		// because we do not want to dunn for money we owe the customer!
		if (!m_level.getDaysAfterDue ().equals (new BigDecimal(-9999)))
			sql += "" AND C_BPartner_ID IN (SELECT C_BPartner_ID FROM C_DunningRunEntry WHERE C_DunningRun_ID="" + m_run.get_ID () + "")"";
		// show only receipts / if only Sales
		if (p_OnlySOTrx)
			sql += "" AND IsReceipt='Y'"";
		
		int count = 0;
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_TrxName());
			pstmt.setInt (1, getAD_Client_ID());
			pstmt.setInt (2, m_run.getC_DunningLevel_ID());
			if (p_C_BPartner_ID != 0)
				pstmt.setInt (3, p_C_BPartner_ID);
			else if (p_C_BP_Group_ID != 0)
				pstmt.setInt (3, p_C_BP_Group_ID);

			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				int C_Payment_ID = rs.getInt(1);
				int C_Currency_ID = rs.getInt(2);
				BigDecimal PayAmt = rs.getBigDecimal(3).negate();
				BigDecimal OpenAmt = rs.getBigDecimal(4).negate();
				int C_BPartner_ID = rs.getInt(5);
				// checkup the amount
				if (Env.ZERO.compareTo(OpenAmt) == 0)
					continue;
				//
				createPaymentLine (C_Payment_ID, C_Currency_ID, PayAmt, OpenAmt,
					C_BPartner_ID);
				count++;
			}
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return count;
	}	//	addPayments
"
org.compiere.process.DunningRunCreate.createPaymentLine,DunningRunCreate.java,"void createPaymentLine (int C_Payment_ID, int C_Currency_ID, 
		BigDecimal PayAmt, BigDecimal OpenAmt, int C_BPartner_ID)
	{
		MDunningRunEntry entry = m_run.getEntry (C_BPartner_ID, p_C_Currency_ID, p_SalesRep_ID);
		if (entry.get_ID() == 0)
			if (!entry.save())
				throw new IllegalStateException(""Cannot save MDunningRunEntry"");
		//
		MDunningRunLine line = new MDunningRunLine (entry);
		line.setPayment(C_Payment_ID, C_Currency_ID, PayAmt, OpenAmt);
		if (!line.save())
			throw new IllegalStateException(""Cannot save MDunningRunLine"");
	}	//	createPaymentLine
"
org.compiere.process.DunningRunCreate.addFees,DunningRunCreate.java,"void addFees()
	{
		// Only add a fee if it contains InvoiceLines and is not a statement
		// TODO: Assumes Statement = -9999 and 
		boolean onlyInvoices = m_level.getDaysAfterDue().equals(new BigDecimal(-9999));
		MDunningRunEntry [] entries = m_run.getEntries (true, onlyInvoices);
		if (entries != null && entries.length > 0) 
		{
			for (MDunningRunEntry element : entries) {
				MDunningRunLine line = new MDunningRunLine (element);
				line.setFee (p_C_Currency_ID, m_level.getFeeAmt ());
				if (!line.save())
					throw new IllegalStateException(""Cannot save MDunningRunLine"");
				element.setQty (element.getQty ().subtract (new BigDecimal(1)));
			}
		}
	}	//	addFees
"
org.compiere.process.DunningRunCreate.checkDunningEntry,DunningRunCreate.java,"void checkDunningEntry() 
	{
		// Check rule 1)
		if (m_level.isShowAllDue ()) {
			MDunningRunEntry [] entries = m_run.getEntries (true);
			if (entries != null && entries.length > 0) 
			{
				for (MDunningRunEntry element : entries) {
					// We start with saying we delete this entry as long as we don't find something new
					boolean entryDelete = true;
					MDunningRunLine [] lines = element.getLines (true);
					for (int j = 0; j < lines.length; j++)
					{
						if (lines[j].getTimesDunned() < 0) 
						{
							// We clean up the *-1 from line 255
							lines[j].setTimesDunned (lines[j].getTimesDunned()*-1);
							if (!lines[j].save())
								throw new IllegalStateException(""Cannot save MDunningRunLine"");
						} 
						else 
						{
							// We found something new, so we would not save anything...
							entryDelete = false;
						}
					}
					if(entryDelete)
						element.delete (false);
				}
			}
		}
	}	//	checkDunningEntry
"
org.compiere.process.RfQResponseInvite.prepare,RfQResponseInvite.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_C_RfQResponse_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.process.RfQResponseInvite.doIt,RfQResponseInvite.java,"String doIt() throws Exception
	{
		MRfQResponse response = new MRfQResponse (getCtx(), p_C_RfQResponse_ID, get_TrxName());
		log.info(""doIt - "" + response);
		String error = response.getRfQ().checkQuoteTotalAmtOnly();
		if (error != null && error.length() > 0)
			throw new Exception (error);
		//	Send it
		if (response.sendRfQ())
			return ""OK"";
		//
		return ""@Error@"";
	}	//	doIt
"
org.compiere.wf.MWFProcess.getActivities,MWFProcess.java,"MWFActivity[] getActivities (boolean requery, boolean onlyActive)
	{
		if (!requery && (m_activities != null))
			return m_activities;
		//
		ArrayList<MWFActivity> list = new ArrayList<MWFActivity>();
		PreparedStatement pstmt = null;
		String sql = ""SELECT * FROM AD_WF_Activity WHERE AD_WF_Process_ID=?"";
		if (onlyActive)
			sql += "" AND Processed='N'"";
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getAD_WF_Process_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MWFActivity(getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		m_activities = new MWFActivity[list.size ()];
		list.toArray (m_activities);
		return m_activities;
	}	//	getActivities
"
org.compiere.wf.MWFProcess.getState,MWFProcess.java,"StateEngine getState()
	{
		return m_state;
	}	//	getState
"
org.compiere.wf.MWFProcess.getActionOptions,MWFProcess.java,"String[] getActionOptions()
	{
		return m_state.getActionOptions();
	}	//	getActionOptions
"
org.compiere.wf.MWFProcess.setWFState,MWFProcess.java,"void setWFState (String WFState)
	{
		if (m_state == null)
			m_state = new StateEngine (getWFState());
		if (m_state.isClosed())
			return;
		if (getWFState().equals(WFState))
			return;
		//
		if (m_state.isValidNewState(WFState))
		{
			log.fine(toString() + "" => "" + WFState);
			super.setWFState (WFState);
			m_state = new StateEngine (getWFState());
			if (m_state.isClosed())
				setProcessed(true);
			save();
			//	Force close to all Activities
			if (m_state.isClosed())
			{
				MWFActivity[] activities = getActivities(true, true);	//	requery only active
				for (int i = 0; i < activities.length; i++)
				{
					if (!activities[i].isClosed())
					{
						activities[i].setTextMsg(""Process:"" + WFState);
						activities[i].setWFState(WFState);
					}
					if (!activities[i].isProcessed())
						activities[i].setProcessed(true);
					activities[i].save();
				}
			}	//	closed
		}
		else
			log.log(Level.SEVERE, ""Ignored Invalid Transformation ""
				+ toString() + "" => "" + WFState);
	}	//	setWFState
"
org.compiere.wf.MWFProcess.checkActivities,MWFProcess.java,"void checkActivities ()
	{
		log.info(toString());
		if (m_state.isClosed())
			return;
		//
		MWFActivity[] activities = getActivities (true, true);	//	requery active
		String closedState = null;
		boolean suspended = false;
		boolean running = false;
		for (MWFActivity activity : activities)
		{
			StateEngine activityState = activity.getState();

			//	Completed - Start Next
			if (activityState.isCompleted())
			{
				if (startNext (activity, activities))
					continue;
			}
			//
			String activityWFState = activity.getWFState();
			if (activityState.isClosed())
			{
				//	eliminate from active processed
				activity.setProcessed(true);
				activity.save();
				//
				if (closedState == null)
					closedState = activityWFState;
				else if (!closedState.equals(activityState.toString()))
				{
					//	Overwrite if terminated
					if (WFSTATE_Terminated.equals(activityState.toString()))
						closedState = activityWFState;
					//	Overwrite if activity aborted and no other terminated
					else if (WFSTATE_Aborted.equals(activityState.toString()) && !WFSTATE_Terminated.equals(closedState))
						closedState = activityWFState;
				}
			}
			else	//	not closed
			{
				closedState = null;		//	all need to be closed
				if (activityState.isSuspended())
					suspended = true;
				if (activityState.isRunning())
					running = true;
			}
		}	//	for all activities
		if (activities.length == 0)
		{
			setTextMsg(""No Active Processed found"");
			closedState = WFSTATE_Terminated;
		}
		if (closedState != null)
		{
			setWFState(closedState);
			getPO();
			if (m_po != null)
				m_po.unlock(get_Trx());
		}
		else if (suspended)
			setWFState(WFSTATE_Suspended);
		else if (running)
			setWFState(WFSTATE_Running);
	}	//	checkActivities
"
org.compiere.wf.MWFProcess.startNext,MWFProcess.java,"boolean startNext (MWFActivity last, MWFActivity[] activities)
	{
		log.config(""Last="" + last);
		//	transitions from the last processed node
		MWFNodeNext[] transitions = getWorkflow().getNodeNexts(
			last.getAD_WF_Node_ID(), last.getAD_Client_ID());
		if ((transitions == null) || (transitions.length == 0))
		{
			log.config(""none"");
			return false;	//	done
		}

		//	We need to wait for last activity
		if (X_AD_WF_Node.JOINELEMENT_AND.equals(last.getNode().getJoinElement()))
		{
			//	get previous nodes
			//	check if all have closed activities
			//	return false for all but the last
		}
		//	eliminate from active processed
		last.setProcessed(true);
		last.save();

		//	Start next activity
		String split = last.getNode().getSplitElement();
		for (int i = 0; i < transitions.length; i++)
		{
			//	Is this a valid transition?
			if (!transitions[i].isValidFor(last))
				continue;

			//	Start new Activity
			MWFActivity activity = new MWFActivity (this, transitions[i].getAD_WF_Next_ID());
			new Thread(activity).start();

			//	only the first valid if XOR
			if (X_AD_WF_Node.SPLITELEMENT_XOR.equals(split))
				return true;
		}	//	for all transitions
		return true;
	}	//	startNext
"
org.compiere.wf.MWFProcess.setAD_WF_Responsible_ID,MWFProcess.java,"void setAD_WF_Responsible_ID ()
	{
		int AD_WF_Responsible_ID = DB.getSQLValue(null,
			MRole.getDefault(getCtx(), false).addAccessSQL(
			""SELECT AD_WF_Responsible_ID FROM AD_WF_Responsible ""
			+ ""WHERE ResponsibleType='H' AND COALESCE(AD_User_ID,0)=0 ""
			+ ""ORDER BY AD_Client_ID DESC"",
			""AD_WF_Responsible"", MRole.SQL_NOTQUALIFIED, MRole.SQL_RO));
		setAD_WF_Responsible_ID (AD_WF_Responsible_ID);
	}	//	setAD_WF_Responsible_ID
"
org.compiere.wf.MWFProcess.setUser_ID,MWFProcess.java,"void setUser_ID (Integer User_ID)
	{
		//	Responsible
		MWFResponsible resp = MWFResponsible.get(getCtx(), getAD_WF_Responsible_ID());
		//	(1) User - Directly responsible
		int AD_User_ID = resp.getAD_User_ID();

		//	Invoker - get Sales Rep or last updater of Document
		if ((AD_User_ID == 0) && resp.isInvoker())
		{
			getPO();
			//	(2) Doc Owner
			if ((m_po != null) && (m_po instanceof DocAction))
			{
				DocAction da = (DocAction)m_po;
				AD_User_ID = da.getDoc_User_ID();
			}
			//	(2) Sales Rep
			if ((AD_User_ID == 0) && (m_po != null) && (m_po.get_ColumnIndex(""SalesRep_ID"") != -1))
			{
				Object sr = m_po.get_Value(""SalesRep_ID"");
				if ((sr != null) && (sr instanceof Integer))
					AD_User_ID = ((Integer)sr).intValue();
			}
			//	(3) UpdatedBy
			if ((AD_User_ID == 0) && (m_po != null))
				AD_User_ID = m_po.getUpdatedBy();
		}

		//	(4) Process Owner
		if ((AD_User_ID == 0) && (User_ID != null))
			AD_User_ID = User_ID.intValue();
		//	Fallback
		if (AD_User_ID == 0)
			AD_User_ID = getCtx().getAD_User_ID();
		//
		setAD_User_ID(AD_User_ID);
	}	//	setUser_ID
"
org.compiere.wf.MWFProcess.getWorkflow,MWFProcess.java,"MWorkflow getWorkflow()
	{
		if (m_wf == null)
			m_wf = MWorkflow.get (getCtx(), getAD_Workflow_ID());
		if (m_wf.get_ID() == 0)
			throw new IllegalStateException(""Not found - AD_Workflow_ID="" + getAD_Workflow_ID());
		return m_wf;
	}	//	getWorkflow
"
org.compiere.wf.MWFProcess.perform,MWFProcess.java,"boolean perform (String action)
	{
		if (!m_state.isValidAction(action))
		{
			log.log(Level.SEVERE, ""Ignored Invalid Transformation - Action="" + action
				+ "" - "" + toString());
			return false;
		}
		log.fine(action);
		//	Action is Valid
		if (StateEngine.ACTION_Start.equals(action))
			return startWork();
		//	Set new State
		setWFState (m_state.getNewStateIfAction(action));
		return true;
	}	//	perform
"
org.compiere.wf.MWFProcess.startWork,MWFProcess.java,"boolean startWork()
	{
		if (!m_state.isValidAction(StateEngine.ACTION_Start))
		{
			log.warning(""State="" + getWFState() + "" - cannot start"");
			return false;
		}
		int AD_WF_Node_ID = getWorkflow().getAD_WF_Node_ID();
		log.fine(""AD_WF_Node_ID="" + AD_WF_Node_ID);
		setWFState(WFSTATE_Running);
		try
		{
			//	Start first Activity with first Node
			MWFActivity activity = new MWFActivity (this, AD_WF_Node_ID);
			new Thread(activity).start();
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, ""AD_WF_Node_ID="" + AD_WF_Node_ID, e);
			setTextMsg(e.toString());
			setWFState(StateEngine.STATE_Terminated);
			return false;
		}
		return true;
	}	//	startWork
"
org.compiere.wf.MWFProcess.getPO,MWFProcess.java,"PO getPO()
	{
		if (m_po != null)
			return m_po;
		if (getRecord_ID() == 0)
			return null;

		MTable table = MTable.get (getCtx(), getAD_Table_ID());
		m_po = table.getPO(getCtx(), getRecord_ID(), get_Trx());
		return m_po;
	}	//	getPO
"
org.compiere.wf.MWFProcess.setTextMsg,MWFProcess.java,"void setTextMsg (PO po)
	{
		if ((po != null) && (po instanceof DocAction))
			setTextMsg(((DocAction)po).getSummary());
	}	//	setTextMsg
"
org.compiere.wf.MWFProcess.setTextMsg,MWFProcess.java,"void setTextMsg (String TextMsg)
	{
		String oldText = getTextMsg();
		if ((oldText == null) || (oldText.length() == 0))
			super.setTextMsg (TextMsg);
		else if ((TextMsg != null) && (TextMsg.length() > 0))
			super.setTextMsg (oldText + ""\n - "" + TextMsg);
	}	//	setTextMsg
"
org.compiere.wf.MWFProcess.setProcessMsg,MWFProcess.java,"void setProcessMsg (String msg)
	{
		m_processMsg = msg;
		if ((msg != null) && (msg.length() > 0))
			setTextMsg(msg);
	}	//	setProcessMsg
"
org.compiere.wf.MWFProcess.getProcessMsg,MWFProcess.java,"String getProcessMsg()
	{
		return m_processMsg;
	}	//	getProcessMsg
"
org.compiere.wf.MWFProcess.toString,MWFProcess.java,"String toString()
	{
		StringBuffer sb = new StringBuffer (""MWFProcess["")
			.append(get_ID())
			.append("", AD_Workflow_ID="").append(getAD_Workflow_ID())
			.append("", WFState="").append(getWFState())
			.append(""]"");
		return sb.toString();
	}	//	totString
"
org.compiere.wf.MWFNode.get,MWFNode.java,"MWFNode get (Ctx ctx, int AD_WF_Node_ID)
	{
		Integer key = Integer.valueOf (AD_WF_Node_ID);
		MWFNode retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MWFNode (ctx, AD_WF_Node_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	}	//	get
"
org.compiere.wf.MWFNode.setClientOrg,MWFNode.java,"void setClientOrg (int AD_Client_ID, int AD_Org_ID)
	{
		super.setClientOrg (AD_Client_ID, AD_Org_ID);
	}	//	setClientOrg
"
org.compiere.wf.MWFNode.loadNext,MWFNode.java,"void loadNext()
	{
		String sql = ""SELECT * FROM AD_WF_NodeNext WHERE AD_WF_Node_ID=? AND IsActive='Y' ORDER BY SeqNo"";
		boolean splitAnd = SPLITELEMENT_AND.equals(getSplitElement());
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, get_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
			{
				MWFNodeNext next = new MWFNodeNext (getCtx(), rs, get_Trx());
				next.setFromSplitAnd(splitAnd);
				m_next.add(next);
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		log.fine(""#"" + m_next.size());
	}	//	loadNext
"
org.compiere.wf.MWFNode.loadTrl,MWFNode.java,"void loadTrl()
	{
		if (Env.isBaseLanguage(getCtx(), ""AD_Workflow"") || get_ID() == 0)
			return;
		String sql = ""SELECT Name, Description, Help FROM AD_WF_Node_Trl WHERE AD_WF_Node_ID=? AND AD_Language=?"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, get_ID());
			pstmt.setString(2, Env.getAD_Language(getCtx()));
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				m_name_trl = rs.getString(1);
				m_description_trl = rs.getString(2);
				m_help_trl = rs.getString(3);
				m_translated = true;
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		log.fine(""Trl="" + m_translated);
	}	//	loadTrl
"
org.compiere.wf.MWFNode.getNextNodeCount,MWFNode.java,"int getNextNodeCount()
	{
		return m_next.size();
	}	//	getNextNodeCount
"
org.compiere.wf.MWFNode.getTransitions,MWFNode.java,"MWFNodeNext[] getTransitions(int AD_Client_ID)
	{
		ArrayList<MWFNodeNext> list = new ArrayList<MWFNodeNext>();
		for (int i = 0; i < m_next.size(); i++)
		{
			MWFNodeNext next = m_next.get(i);
			if (next.getAD_Client_ID() == 0 || next.getAD_Client_ID() == AD_Client_ID)
				list.add(next);
		}
		MWFNodeNext[] retValue = new MWFNodeNext [list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getNextNodes
"
org.compiere.wf.MWFNode.getName,MWFNode.java,"String getName(boolean translated)
	{
		if (translated && m_translated)
			return m_name_trl;
		return getName();
	}	//	getName
"
org.compiere.wf.MWFNode.getDescription,MWFNode.java,"String getDescription(boolean translated)
	{
		if (translated && m_translated)
			return m_description_trl;
		return getDescription();
	}	//	getDescription
"
org.compiere.wf.MWFNode.getHelp,MWFNode.java,"String getHelp(boolean translated)
	{
		if (translated && m_translated)
			return m_help_trl;
		return getHelp();
	}	//	getHelp
"
org.compiere.wf.MWFNode.setPosition,MWFNode.java,"void setPosition (Point position)
	{
		setPosition(position.x, position.y);
	}	//	setPosition
"
org.compiere.wf.MWFNode.setPosition,MWFNode.java,"void setPosition (int x, int y)
	{
		setXPosition(x);
		setYPosition(y);
	}	//	setPosition
"
org.compiere.wf.MWFNode.getPosition,MWFNode.java,"Point getPosition ()
	{
		return new Point (getXPosition(), getYPosition());
	}	//	getPosition
"
org.compiere.wf.MWFNode.getActionInfo,MWFNode.java,"String getActionInfo()
	{
		String action = getAction();
		if (ACTION_AppsProcess.equals(action))
			return ""Process:AD_Process_ID="" + getAD_Process_ID();
		else if (ACTION_DocumentAction.equals(action))
			return ""DocumentAction="" + getDocAction();
		else if (ACTION_AppsReport.equals(action))
			return ""Report:AD_Process_ID="" + getAD_Process_ID();
		else if (ACTION_AppsTask.equals(action))
			return ""Task:AD_Task_ID="" + getAD_Task_ID();
		else if (ACTION_SetVariable.equals(action))
			return ""SetVariable:AD_Column_ID="" + getAD_Column_ID();
		else if (ACTION_SubWorkflow.equals(action))
			return ""Workflow:AD_Workflow_ID="" + getAD_Workflow_ID();
		else if (ACTION_UserChoice.equals(action))
			return ""UserChoice:AD_Column_ID="" + getAD_Column_ID();
		else if (ACTION_UserWorkbench.equals(action))
			return ""Workbench:?"";
		else if (ACTION_UserForm.equals(action))
			return ""Form:AD_Form_ID="" + getAD_Form_ID();
		else if (ACTION_UserWindow.equals(action))
			return ""Window:AD_Window_ID="" + getAD_Window_ID();
		else if (ACTION_WaitSleep.equals(action))
			return ""Sleep:WaitTime="" + getWaitTime();
		return ""??"";
	}	//	getActionInfo
"
org.compiere.wf.MWFNode.getAttributeName,MWFNode.java,"String getAttributeName ()
	{
		if (getAD_Column_ID() == 0)
			return super.getAttributeName();
		//	We have a column
		String attribute = super.getAttributeName();
		if (attribute != null && attribute.length() > 0)
			return attribute;
		setAttributeName(getColumn().getColumnName());
		return super.getAttributeName ();
	}	//	getAttributeName
"
org.compiere.wf.MWFNode.getColumn,MWFNode.java,"MColumn getColumn()
	{
		if (getAD_Column_ID() == 0)
			return null;
		if (m_column == null)
			m_column = MColumn.get(getCtx(), getAD_Column_ID());
		return m_column;
	}	//	getColumn
"
org.compiere.wf.MWFNode.isUserApproval,MWFNode.java,"boolean isUserApproval()
	{
		if (!ACTION_UserChoice.equals(getAction()))
			return false;
		return getColumn() != null 
			&& ""IsApproved"".equals(getColumn().getColumnName());
	}	//	isApproval
"
org.compiere.wf.MWFNode.isUserChoice,MWFNode.java,"boolean isUserChoice()
	{
		return ACTION_UserChoice.equals(getAction());
	}	//	isUserChoice
"
org.compiere.wf.MWFNode.isUserManual,MWFNode.java,"boolean isUserManual()
	{
		if (ACTION_UserForm.equals(getAction())
			|| ACTION_UserWindow.equals(getAction())
			|| ACTION_UserWorkbench.equals(getAction()))
			return true;
		return false;
	}	//	isUserManual
"
org.compiere.wf.MWFNode.getDurationMS,MWFNode.java,"long getDurationMS ()
	{
		long duration = super.getDuration ();
		if (duration == 0)
			return 0;
		if (m_durationBaseMS == -1)
			m_durationBaseMS = getWorkflow().getDurationBaseSec() * 1000;
		return duration * m_durationBaseMS;
	}	//	getDurationMS
"
org.compiere.wf.MWFNode.getDurationLimitMS,MWFNode.java,"long getDurationLimitMS ()
	{
		long limit = super.getDurationLimit ();
		if (limit == 0)
			return 0;
		if (m_durationBaseMS == -1)
			m_durationBaseMS = getWorkflow().getDurationBaseSec() * 1000;
		return limit * m_durationBaseMS;
	}	//	getDurationLimitMS
"
org.compiere.wf.MWFNode.getDurationCalendarField,MWFNode.java,"int getDurationCalendarField()
	{
		return getWorkflow().getDurationCalendarField();
	}	//	getDirationCalendarField
"
org.compiere.wf.MWFNode.calculateDynamicPriority,MWFNode.java,"int calculateDynamicPriority (int seconds)
	{
		if (seconds == 0 || getDynPriorityUnit() == null 
			|| getDynPriorityChange() == null 
			|| Env.ZERO.compareTo(getDynPriorityChange()) == 0)
			return 0;
		//
		BigDecimal divide = Env.ZERO;
		if (DYNPRIORITYUNIT_Minute.equals(getDynPriorityUnit()))
			divide = new BigDecimal (60);
		else if (DYNPRIORITYUNIT_Hour.equals(getDynPriorityUnit()))
			divide = new BigDecimal (3600);
		else if (DYNPRIORITYUNIT_Day.equals(getDynPriorityUnit()))
			divide = new BigDecimal (86400);
		else
			return 0;
		//
		BigDecimal change = new BigDecimal (seconds)
			.divide(divide, BigDecimal.ROUND_DOWN)
			.multiply(getDynPriorityChange());
		return change.intValue();
	}	//	calculateDynamicPriority
"
org.compiere.wf.MWFNode.getParameters,MWFNode.java,"MWFNodePara[] getParameters()
	{
		if (m_paras == null)
			m_paras = MWFNodePara.getParameters(getCtx(), getAD_WF_Node_ID());
		return m_paras;
	}	//	getParameters
"
org.compiere.wf.MWFNode.getWorkflow,MWFNode.java,"MWorkflow getWorkflow()
	{
		return MWorkflow.get(getCtx(), getAD_Workflow_ID());
	}	//	getWorkflow
"
org.compiere.wf.MWFNode.toString,MWFNode.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MWFNode["");
		sb.append(get_ID())
			.append(""-"").append(getName())
			.append("",Action="").append(getActionInfo())
			.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.wf.MWFNode.toStringX,MWFNode.java,"String toStringX ()
	{
		StringBuffer sb = new StringBuffer (""MWFNode["");
		sb.append(getName())
			.append(""-"").append(getActionInfo())
			.append(""]"");
		return sb.toString ();
	}	//	toStringX
"
org.compiere.wf.MWFNode.beforeSave,MWFNode.java,"boolean beforeSave (boolean newRecord)
	{
		String action = getAction();
		if (action.equals(ACTION_WaitSleep))
			;
		else if (action.equals(ACTION_AppsProcess) || action.equals(ACTION_AppsReport)) 
		{
			if (getAD_Process_ID() == 0)
			{
				log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""AD_Process_ID""));
				return false;
			}
		}
		else if (action.equals(ACTION_AppsTask)) 
		{
			if (getAD_Task_ID() == 0)
			{
				log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""AD_Task_ID""));
				return false;
			}
		}
		else if (action.equals(ACTION_DocumentAction)) 
		{
			if (getDocAction() == null || getDocAction().length() == 0)
			{
				log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""DocAction""));
				return false;
			}
		}
		else if (action.equals(ACTION_EMail))
		{
			if (getR_MailText_ID() == 0)
			{
				log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""R_MailText_ID""));
				return false;
			}
		}
		else if (action.equals(ACTION_SetVariable)) 
		{
			if (getAttributeValue() == null)
			{
				log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""AttributeValue""));
				return false;
			}
		}
		else if (action.equals(ACTION_SubWorkflow))
		{
			if (getAD_Workflow_ID() == 0)
			{
				log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""AD_Workflow_ID""));
				return false;
			}
		}
		else if (action.equals(ACTION_UserChoice)) 
		{
			if (getAD_Column_ID() == 0)
			{
				log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""AD_Column_ID""));
				return false;
			}
		}
		else if (action.equals(ACTION_UserForm)) 
		{
			if (getAD_Form_ID() == 0)
			{
				log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""AD_Form_ID""));
				return false;
			}
		}
		else if (action.equals(ACTION_UserWindow)) 
		{
			if (getAD_Window_ID() == 0)
			{
				log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""AD_Window_ID""));
				return false;
			}
		}
//		else if (action.equals(ACTION_UserWorkbench)) 
//		{
//		&& getAD_Workbench_ID() == 0)
//			log.saveError(""FillMandatory"", Msg.getElement(getCtx(), ""AD_Workbench_ID""));
//			return false;
//		}
		
		return true;
	}	//	beforeSave
"
org.compiere.wf.MWFNode.afterSave,MWFNode.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		if (!success)
			return success;
		TranslationTable.save(this, newRecord);
		return true;
	}	//	afterSave
"
org.compiere.wf.MWFNode.afterDelete,MWFNode.java,"boolean afterDelete (boolean success)
	{
		if (TranslationTable.isActiveLanguages(false))
			TranslationTable.delete(this);
		return success;
	}	//	afterDelete
"
org.compiere.wf.MWorkflowProcessor.getActive,MWorkflowProcessor.java,"MWorkflowProcessor[] getActive (Ctx ctx)
	{
		ArrayList<MWorkflowProcessor> list = new ArrayList<MWorkflowProcessor>();
		String sql = ""SELECT * FROM AD_WorkflowProcessor WHERE IsActive='Y'"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MWorkflowProcessor (ctx, rs, null));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MWorkflowProcessor[] retValue = new MWorkflowProcessor[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getActive
"
org.compiere.wf.MWorkflowProcessor.getServerID,MWorkflowProcessor.java,"String getServerID ()
	{
		return ""WorkflowProcessor"" + get_ID();
	}	//	getServerID
"
org.compiere.wf.MWorkflowProcessor.getDateNextRun,MWorkflowProcessor.java,"Timestamp getDateNextRun (boolean requery)
	{
		if (requery)
			load(get_Trx());
		return getDateNextRun();
	}	//	getDateNextRun
"
org.compiere.wf.MWorkflowProcessor.getLogs,MWorkflowProcessor.java,"CompiereProcessorLog[] getLogs ()
	{
		ArrayList<MWorkflowProcessorLog> list = new ArrayList<MWorkflowProcessorLog>();
		String sql = ""SELECT * ""
			+ ""FROM AD_WorkflowProcessorLog ""
			+ ""WHERE AD_WorkflowProcessor_ID=? "" 
			+ ""ORDER BY Created DESC"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getAD_WorkflowProcessor_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MWorkflowProcessorLog (getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MWorkflowProcessorLog[] retValue = new MWorkflowProcessorLog[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getLogs
"
org.compiere.wf.MWorkflowProcessor.deleteLog,MWorkflowProcessor.java,"int deleteLog()
	{
		if (getKeepLogDays() < 1)
			return 0;
		String sql = ""DELETE FROM AD_WorkflowProcessorLog ""
			+ ""WHERE AD_WorkflowProcessor_ID="" + getAD_WorkflowProcessor_ID() 
			//jz + "" AND (Created+"" + getKeepLogDays() + "") < SysDate"";
			+ "" AND addDays(Created,"" + getKeepLogDays() + "") < SysDate"";
		DB.executeUpdate(sql, get_Trx());
		return 0;
	}	//	deleteLog
"
org.compiere.wf.MWFNodePara.getParameters,MWFNodePara.java,"MWFNodePara[] getParameters (Ctx ctx, int AD_WF_Node_ID)
	{
		ArrayList<MWFNodePara> list = new ArrayList<MWFNodePara>();
		String sql = ""SELECT * FROM AD_WF_Node_Para ""
			+ ""WHERE AD_WF_Node_ID=?"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, AD_WF_Node_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add(new MWFNodePara (ctx, rs, null));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, ""getParameters"", e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MWFNodePara[] retValue = new MWFNodePara[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	getParameters
"
org.compiere.wf.MWFNodePara.getProcessPara,MWFNodePara.java,"MProcessPara getProcessPara()
	{
		if (m_processPara == null)
			m_processPara = new MProcessPara (getCtx(), getAD_Process_Para_ID(), get_Trx());
		return m_processPara;
	}	//	getProcessPara
"
org.compiere.wf.MWFNodePara.getAttributeName,MWFNodePara.java,"String getAttributeName ()
	{
		String an = super.getAttributeName ();
		if (an == null || an.length() == 0 && getAD_Process_Para_ID() != 0)
		{
			an = getProcessPara().getColumnName();
			setAttributeName(an);
			save();
		}
		return an;
	}	//	getAttributeName
"
org.compiere.wf.MWFNodePara.getDisplayType,MWFNodePara.java,"int getDisplayType()
	{
		return getProcessPara().getAD_Reference_ID();
	}	//	getDisplayType
"
org.compiere.wf.MWFNodePara.isMandatory,MWFNodePara.java,"boolean isMandatory()
	{
		return getProcessPara().isMandatory();
	}	//	isMandatory
"
org.compiere.wf.MWFNodePara.setAD_Process_Para_ID,MWFNodePara.java,"void setAD_Process_Para_ID (int AD_Process_Para_ID)
	{
		super.setAD_Process_Para_ID (AD_Process_Para_ID);
		setAttributeName(null);
	}
"
org.compiere.wf.WFProcessManage.prepare,WFProcessManage.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""IsAbort""))
				p_IsAbort = ""Y"".equals(element.getParameter());
			else if (name.equals(""AD_User_ID""))
				p_AD_User_ID = element.getParameterAsInt();
			else if (name.equals(""AD_WF_Responsible_ID""))
				p_AD_WF_Responsible_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_AD_WF_Process_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.wf.WFProcessManage.doIt,WFProcessManage.java,"String doIt() throws Exception
	{
		MWFProcess process = new MWFProcess (getCtx(), p_AD_WF_Process_ID, get_TrxName());
		log.info(""doIt - "" + process);
		
		MUser user = MUser.get(getCtx(), getAD_User_ID());
		//	Abort
		if (p_IsAbort)
		{
			String msg = user.getName() + "": Abort"";
			process.setTextMsg(msg);
			process.setAD_User_ID(getAD_User_ID());
			process.setWFState(StateEngine.STATE_Aborted);
			return msg;
		}
		String msg = null;
		//	Change User
		if (p_AD_User_ID != 0 && process.getAD_User_ID() != p_AD_User_ID)
		{
			MUser from = MUser.get(getCtx(), process.getAD_User_ID());
			MUser to = MUser.get(getCtx(), p_AD_User_ID);
			msg = user.getName() + "": "" + from.getName() + "" -> "" + to.getName();
			process.setTextMsg(msg);
			process.setAD_User_ID(p_AD_User_ID);
		}
		//	Change Responsible
		if (p_AD_WF_Responsible_ID != 0 && process.getAD_WF_Responsible_ID() != p_AD_WF_Responsible_ID)
		{
			MWFResponsible from = MWFResponsible.get(getCtx(), process.getAD_WF_Responsible_ID());
			MWFResponsible to = MWFResponsible.get(getCtx(), p_AD_WF_Responsible_ID);
			String msg1 = user.getName() + "": "" + from.getName() + "" -> "" + to.getName();
			process.setTextMsg(msg1);
			process.setAD_WF_Responsible_ID(p_AD_WF_Responsible_ID);
			if (msg == null)
				msg = msg1;
			else
				msg += "" - "" + msg1;
		}
		//
		process.save();
		
		return ""OK"";
	}	//	doIt
"
org.compiere.wf.MWFResponsible.get,MWFResponsible.java,"MWFResponsible get (Ctx ctx, int AD_WF_Responsible_ID)
	{
		Integer key = Integer.valueOf (AD_WF_Responsible_ID);
		MWFResponsible retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MWFResponsible (ctx, AD_WF_Responsible_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	} //	get
"
org.compiere.wf.MWFResponsible.isInvoker,MWFResponsible.java,"boolean isInvoker()
	{
		return getAD_User_ID() == 0 && getAD_Role_ID() == 0;
	}	//	isInvoker
"
org.compiere.wf.MWFResponsible.isRole,MWFResponsible.java,"boolean isRole()
	{
		return RESPONSIBLETYPE_Role.equals(getResponsibleType()) 
			&& getAD_Role_ID() != 0;
	}	//	isRole
"
org.compiere.wf.MWFResponsible.getRole,MWFResponsible.java,"MRole getRole()
	{
		if (!isRole())
			return null;
		return MRole.get(getCtx(), getAD_Role_ID());
	}	//	getRole
"
org.compiere.wf.MWFResponsible.isHuman,MWFResponsible.java,"boolean isHuman()
	{
		return RESPONSIBLETYPE_Human.equals(getResponsibleType()) 
			&& getAD_User_ID() != 0;
	}	//	isHuman
"
org.compiere.wf.MWFResponsible.isOrganization,MWFResponsible.java,"boolean isOrganization()
	{
		return RESPONSIBLETYPE_Organization.equals(getResponsibleType()) 
			&& getAD_Org_ID() != 0;
	}	//	isOrg
"
org.compiere.wf.MWFResponsible.isInvokerOrganization,MWFResponsible.java,"boolean isInvokerOrganization()
	{
		return RESPONSIBLETYPE_Organization.equals(getResponsibleType()) 
			&& getAD_Org_ID() == 0;
	}	//	
"
org.compiere.wf.MWFResponsible.beforeSave,MWFResponsible.java,"boolean beforeSave (boolean newRecord)
	{
	//	if (RESPONSIBLETYPE_Human.equals(getResponsibleType()) && getAD_User_ID() == 0)
	//		return true;
		if (RESPONSIBLETYPE_Role.equals(getResponsibleType()) 
			&& getAD_Role_ID() == 0
			&& getAD_Client_ID() > 0)
		{
			log.saveError(""Error"", Msg.parseTranslation(getCtx(), ""@RequiredEnter@ @AD_Role_ID@""));
			return false;
		}
		//	User not used
		if (!RESPONSIBLETYPE_Human.equals(getResponsibleType()) && getAD_User_ID() == 0)
			setAD_User_ID(0);
		//	Role not used
		if (!RESPONSIBLETYPE_Role.equals(getResponsibleType()) && getAD_Role_ID() == 0)
			setAD_Role_ID(0);
		return true;
	}	//	beforeSave
"
org.compiere.wf.MWFResponsible.toString,MWFResponsible.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer(""MWFResponsible["");
		sb.append (get_ID())
			.append(""-"").append(getName())
			.append("",Type="").append(getResponsibleType());
		if (getAD_User_ID() != 0)
			sb.append("",AD_User_ID="").append(getAD_User_ID());
		if (getAD_Role_ID() != 0)
			sb.append("",AD_Role_ID="").append(getAD_Role_ID());
		sb.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.wf.MDocActionRule.getDocBaseType,MDocActionRule.java,"String getDocBaseType()
    {
    	return m_docBaseType;
    }
"
org.compiere.wf.MDocActionRule.isDocBaseType,MDocActionRule.java,"boolean isDocBaseType (String docBaseType)
    {
    	if (Util.isEmpty(docBaseType))
    		return false;
    	if (docBaseType.equals(m_docBaseType))
    		return true;
    	if ((m_docBaseType != null) || (m_AD_Table_ID == 0))
    		return false;
    	//
    	MDocBaseType[] baseTypes = MDocBaseType.getAll(Env.getCtx());
    	for (MDocBaseType type : baseTypes)
        {
        	if (type.getAD_Table_ID() != m_AD_Table_ID)
        		continue;
	        if ((type.getAD_Client_ID() == 0)
	        	|| (type.getAD_Client_ID() == m_AD_Client_ID))
	        {
	        	if (type.getDocBaseType().equals(docBaseType))
	        		return true;
	        }
        }
    	return false;
    }	//	isDocBaseType
"
org.compiere.wf.MDocActionRule.getDocStatus,MDocActionRule.java,"String getDocStatus()
    {
    	return m_docStatus;
    }
"
org.compiere.wf.MDocActionRule.isDocStatus,MDocActionRule.java,"boolean isDocStatus(String docStatus)
    {
    	if (m_docStatus == null)
    		return true;
    	if (Util.isEmpty(docStatus))
    		return false;
    	return m_docStatus.equals(docStatus);
    }	//	isDocStatus
"
org.compiere.wf.MDocActionRule.getDocAction,MDocActionRule.java,"String getDocAction()
    {
    	return m_docAction;
    }
"
org.compiere.wf.MDocActionRule.isEnabled,MDocActionRule.java,"boolean isEnabled()
    {
    	return m_enable;
    }
"
org.compiere.wf.MDocActionRule.getAD_Client_ID,MDocActionRule.java,"int getAD_Client_ID()
    {
    	return m_AD_Client_ID;
    }
"
org.compiere.wf.MDocActionRule.isAD_Client_ID,MDocActionRule.java,"boolean isAD_Client_ID (int AD_Client_ID)
    {
    	if (m_AD_Client_ID == 0)
    		return true;
    	return AD_Client_ID == m_AD_Client_ID;
    }	//	isAD_Client_ID
"
org.compiere.wf.MDocActionRule.getAD_Table_ID,MDocActionRule.java,"int getAD_Table_ID()
    {
    	return m_AD_Table_ID;
    }
"
org.compiere.wf.WorkflowMoveToClient.prepare,WorkflowMoveToClient.java,"void prepare ()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""AD_Client_ID""))
				p_AD_Client_ID = element.getParameterAsInt();
			else if (name.equals(""AD_Workflow_ID""))
				p_AD_Workflow_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""prepare - Unknown Parameter: "" + name);
		}
	}	//	prepare
"
org.compiere.wf.WorkflowMoveToClient.doIt,WorkflowMoveToClient.java,"String doIt () throws Exception
	{
		log.info(""doIt - AD_Client_ID="" + p_AD_Client_ID + "", AD_Workflow_ID="" + p_AD_Workflow_ID);
		
		int changes = 0;
		//	WF
		String sql = ""UPDATE AD_Workflow SET AD_Client_ID="" + p_AD_Client_ID
			+ "" WHERE AD_Client_ID=0 AND EntityType NOT IN ('D','C')""
			+ "" AND AD_Workflow_ID="" + p_AD_Workflow_ID;
		int no = DB.executeUpdate(sql, get_TrxName());
		if (no == -1)
			throw new CompiereSystemException (""Error updating Workflow"");
		changes += no;
		
		//	Node
		sql = ""UPDATE AD_WF_Node SET AD_Client_ID="" + p_AD_Client_ID
			+ "" WHERE AD_Client_ID=0 AND EntityType NOT IN ('D','C')""
			+ "" AND AD_Workflow_ID="" + p_AD_Workflow_ID;
		no = DB.executeUpdate(sql, get_TrxName());
		if (no == -1)
			throw new CompiereSystemException (""Error updating Workflow Node"");
		changes += no;

		//	Node Next
		sql = ""UPDATE AD_WF_NodeNext SET AD_Client_ID="" + p_AD_Client_ID
			+ "" WHERE AD_Client_ID=0 AND EntityType NOT IN ('D','C')""
			+ "" AND (AD_WF_Node_ID IN (SELECT AD_WF_Node_ID FROM AD_WF_Node WHERE AD_Workflow_ID="" + p_AD_Workflow_ID
				+ "") OR AD_WF_Next_ID IN (SELECT AD_WF_Node_ID FROM AD_WF_Node WHERE AD_Workflow_ID="" + p_AD_Workflow_ID 
				+ ""))"";
		no = DB.executeUpdate(sql, get_TrxName());
		if (no == -1)
			throw new CompiereSystemException (""Error updating Workflow Transition"");
		changes += no;

		//	Node Parameters
		sql = ""UPDATE AD_WF_Node_Para SET AD_Client_ID="" + p_AD_Client_ID
			+ "" WHERE AD_Client_ID=0 AND EntityType NOT IN ('D','C')""
			+ "" AND AD_WF_Node_ID IN (SELECT AD_WF_Node_ID FROM AD_WF_Node WHERE AD_Workflow_ID="" + p_AD_Workflow_ID 
			+ "")"";
		no = DB.executeUpdate(sql, get_TrxName());
		if (no == -1)
			throw new CompiereSystemException (""Error updating Workflow Node Parameters"");
		changes += no;

		//	Node Next Condition
		sql = ""UPDATE AD_WF_NextCondition SET AD_Client_ID="" + p_AD_Client_ID
			+ "" WHERE AD_Client_ID=0 AND EntityType NOT IN ('D','C')""
			+ "" AND AD_WF_NodeNext_ID IN (""
				+ ""SELECT AD_WF_NodeNext_ID FROM AD_WF_NodeNext ""
				+ ""WHERE AD_WF_Node_ID IN (SELECT AD_WF_Node_ID FROM AD_WF_Node WHERE AD_Workflow_ID="" + p_AD_Workflow_ID
				+ "") OR AD_WF_Next_ID IN (SELECT AD_WF_Node_ID FROM AD_WF_Node WHERE AD_Workflow_ID="" + p_AD_Workflow_ID
				+ ""))"";
		no = DB.executeUpdate(sql, get_TrxName());
		if (no == -1)
			throw new CompiereSystemException (""Error updating Workflow Transition Condition"");
		changes += no;
		
		return ""@Updated@ - #"" + changes;
	}	//	doIt
"
org.compiere.wf.MWFBlock.get,MWFBlock.java,"MWFBlock get (Ctx ctx, int AD_WF_Block_ID)
	{
		Integer key = Integer.valueOf (AD_WF_Block_ID);
		MWFBlock retValue = s_cache.get (ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MWFBlock (ctx, AD_WF_Block_ID, null);
		if (retValue.get_ID () != 0)
			s_cache.put (key, retValue);
		return retValue;
	} //	get
"
org.compiere.wf.MWorkflow.get,MWorkflow.java,"MWorkflow get (Ctx ctx, int AD_Workflow_ID)
	{
		Integer key = Integer.valueOf (AD_Workflow_ID);
		MWorkflow retValue = s_cache.get(ctx, key);
		if (retValue != null)
			return retValue;
		retValue = new MWorkflow (ctx, AD_Workflow_ID, null);
		if (retValue.get_ID() != 0)
			s_cache.put(key, retValue);
		return retValue;
	}	//	get
"
org.compiere.wf.MWorkflow.getDocValue,MWorkflow.java,"MWorkflow[] getDocValue (Ctx ctx, int AD_Client_ID, int AD_Table_ID)
	{
		String key = ""C"" + AD_Client_ID + ""T"" + AD_Table_ID;
		//	Reload
		if (s_cacheDocValue.isReset())
		{
			String sql = ""SELECT * FROM AD_Workflow ""
				+ ""WHERE WorkflowType='V' AND IsActive='Y' AND IsValid='Y' ""
				+ ""ORDER BY AD_Client_ID, AD_Table_ID"";
			ArrayList<MWorkflow> list = new ArrayList<MWorkflow>();
			String oldKey = """";
			String newKey = null;
			PreparedStatement pstmt = null;
			try
			{
				pstmt = DB.prepareStatement(sql, (Trx) null);
				ResultSet rs = pstmt.executeQuery ();
				while (rs.next ())
				{
					MWorkflow wf = new MWorkflow (ctx, rs, null);
					newKey = ""C"" + wf.getAD_Client_ID() + ""T"" + wf.getAD_Table_ID();
					if (!newKey.equals(oldKey) && list.size() > 0)
					{
						MWorkflow[] wfs = new MWorkflow[list.size()];
						list.toArray(wfs);
						s_cacheDocValue.put (oldKey, wfs);
						list = new ArrayList<MWorkflow>();
					}
					oldKey = newKey;
					list.add(wf);
				}
				rs.close ();
				pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				s_log.log(Level.SEVERE, sql, e);
			}
			try
			{
				if (pstmt != null)
					pstmt.close ();
				pstmt = null;
			}
			catch (Exception e)
			{
				pstmt = null;
			}
			//	Last one
			if (list.size() > 0)
			{
				MWorkflow[] wfs = new MWorkflow[list.size()];
				list.toArray(wfs);
				s_cacheDocValue.put (oldKey, wfs);
			}
			else
			{
				s_cacheDocValue.setUsed();
			}
			s_log.config(""#"" + s_cacheDocValue.size());
		}
		//	Look for Entry
		MWorkflow[] retValue = s_cacheDocValue.get(ctx, key);
		return retValue;
	}	//	getDocValue
"
org.compiere.wf.MWorkflow.loadTrl,MWorkflow.java,"void loadTrl()
	{
		if (Env.isBaseLanguage(getCtx(), ""AD_Workflow"") || get_ID() == 0)
			return;
		String sql = ""SELECT Name, Description, Help FROM AD_Workflow_Trl WHERE AD_Workflow_ID=? AND AD_Language=?"";
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, get_ID());
			pstmt.setString(2, Env.getAD_Language(getCtx()));
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
			{
				m_name_trl = rs.getString(1);
				m_description_trl = rs.getString(2);
				m_help_trl = rs.getString(3);
				m_translated = true;
			}
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		log.fine(""Translated="" + m_translated);
	}	//	loadTrl
"
org.compiere.wf.MWorkflow.loadNodes,MWorkflow.java,"void loadNodes()
	{
		String sql = ""SELECT * FROM AD_WF_Node WHERE AD_Workflow_ID=? AND IsActive='Y'""; //jz AD_WorkFlow_ID: changed in AD?
		try
		{
			PreparedStatement pstmt = DB.prepareStatement(sql, get_Trx());
			pstmt.setInt(1, get_ID());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next())
				m_nodes.add (new MWFNode (getCtx(), rs, get_Trx()));
			rs.close();
			pstmt.close();
		}
		catch (SQLException e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		log.fine(""#"" + m_nodes.size());
	}	//	loadNodes
"
org.compiere.wf.MWorkflow.getNodeCount,MWorkflow.java,"int getNodeCount()
	{
		return m_nodes.size();
	}	//	getNextNodeCount
"
org.compiere.wf.MWorkflow.getNodes,MWorkflow.java,"MWFNode[] getNodes(boolean ordered, int AD_Client_ID)
	{
		if (ordered)
			return getNodesInOrder(AD_Client_ID);
		//
		ArrayList<MWFNode> list = new ArrayList<MWFNode>();
		for (int i = 0; i < m_nodes.size(); i++)
		{
			MWFNode node = m_nodes.get(i);
			if (!node.isActive())
				continue;
			if (node.getAD_Client_ID() == 0 || node.getAD_Client_ID() == AD_Client_ID)
				list.add(node);
		}
		MWFNode[] retValue = new MWFNode [list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getNodes
"
org.compiere.wf.MWorkflow.getFirstNode,MWorkflow.java,"MWFNode getFirstNode()
	{
		return getNode (getAD_WF_Node_ID());
	}	//	getFirstNode
"
org.compiere.wf.MWorkflow.getNode,MWorkflow.java,"MWFNode getNode (int AD_WF_Node_ID)
	{
		if (AD_WF_Node_ID == 0)
			return null;
		for (int i = 0; i < m_nodes.size(); i++)
		{
			MWFNode node = m_nodes.get(i);
			if (node.getAD_WF_Node_ID() == AD_WF_Node_ID)
				return node;
		}
		return null;
	}	//	getNode
"
org.compiere.wf.MWorkflow.getNextNodes,MWorkflow.java,"MWFNode[] getNextNodes (int AD_WF_Node_ID, int AD_Client_ID)
	{
		MWFNode node = getNode(AD_WF_Node_ID);
		if (node == null || node.getNextNodeCount() == 0)
			return null;
		//
		MWFNodeNext[] nexts = node.getTransitions(AD_Client_ID);
		ArrayList<MWFNode> list = new ArrayList<MWFNode>();
		for (MWFNodeNext element : nexts) {
			MWFNode next = getNode (element.getAD_WF_Next_ID());
			if (next != null)
				list.add(next);
		}

		//	Return Nodes
		MWFNode[] retValue = new MWFNode [list.size()];
		list.toArray(retValue);
		return retValue;
	}	//	getNextNodes
"
org.compiere.wf.MWorkflow.getNodesInOrder,MWorkflow.java,"MWFNode[] getNodesInOrder(int AD_Client_ID)
	{
		ArrayList<MWFNode> list = new ArrayList<MWFNode>();
		addNodesSF (list, getAD_WF_Node_ID(), AD_Client_ID);	//	start with first
		//	Remaining Nodes
		if (m_nodes.size() != list.size())
		{
			//	Add Stand alone
			for (int n = 0; n < m_nodes.size(); n++)
			{
				MWFNode node = m_nodes.get(n);
				if (!node.isActive())
					continue;
				if (node.getAD_Client_ID() == 0 || node.getAD_Client_ID() == AD_Client_ID)
				{
					boolean found = false;
					for (int i = 0; i < list.size(); i++)
					{
						MWFNode existing = list.get(i);
						if (existing.getAD_WF_Node_ID() == node.getAD_WF_Node_ID())
						{
							found = true;
							break;
						}
					}
					if (!found)
					{
						log.log(Level.WARNING, ""Added Node w/o transition: "" + node);
						list.add(node);
					}
				}
			}
		}
		//
		MWFNode[] nodeArray = new MWFNode [list.size()];
		list.toArray(nodeArray);
		return nodeArray;
	}	//	getNodesInOrder
"
org.compiere.wf.MWorkflow.addNodesSF,MWorkflow.java,"void addNodesSF (ArrayList<MWFNode> list, int AD_WF_Node_ID, int AD_Client_ID)
	{
		MWFNode node = getNode (AD_WF_Node_ID);
		if (node != null 
			&& (node.getAD_Client_ID() == 0 || node.getAD_Client_ID() == AD_Client_ID))
		{
			if (!list.contains(node))
				list.add(node);
			MWFNodeNext[] nexts = node.getTransitions(AD_Client_ID);
			for (MWFNodeNext element : nexts) {
				MWFNode child = getNode (element.getAD_WF_Next_ID());
				if (!child.isActive())
					continue;
				if (child.getAD_Client_ID() == 0
					|| child.getAD_Client_ID() == AD_Client_ID)
				{
					if (!list.contains(child))
						list.add(child);
				}
			}
			//	Remainder Nodes not connected
			for (MWFNodeNext element : nexts) {
				if (element.isActive())
					addNodesSF (list, element.getAD_WF_Next_ID(), AD_Client_ID);
			}
		}
	}	//	addNodesSF
"
org.compiere.wf.MWorkflow.getNext,MWorkflow.java,"int getNext (int AD_WF_Node_ID, int AD_Client_ID)
	{
		MWFNode[] nodes = getNodesInOrder(AD_Client_ID);
		for (MWFNode element : nodes) {
			if (element.getAD_WF_Node_ID() == AD_WF_Node_ID)
			{
				MWFNodeNext[] nexts = element.getTransitions(AD_Client_ID);
				if (nexts.length > 0)
					return nexts[0].getAD_WF_Next_ID();
				return 0;
			}
		}
		return 0;
	}	//	getNext
"
org.compiere.wf.MWorkflow.getNodeNexts,MWorkflow.java,"MWFNodeNext[] getNodeNexts (int AD_WF_Node_ID, int AD_Client_ID)
	{
		MWFNode[] nodes = getNodesInOrder(AD_Client_ID);
		for (MWFNode element : nodes) {
			if (element.getAD_WF_Node_ID() == AD_WF_Node_ID)
			{
				return element.getTransitions(AD_Client_ID);
			}
		}
		return null;
	}	//	getNext
"
org.compiere.wf.MWorkflow.getPrevious,MWorkflow.java,"int getPrevious (int AD_WF_Node_ID, int AD_Client_ID)
	{
		MWFNode[] nodes = getNodesInOrder(AD_Client_ID);
		for (int i = 0; i < nodes.length; i++)
		{
			if (nodes[i].getAD_WF_Node_ID() == AD_WF_Node_ID)
			{
				if (i > 0)
					return nodes[i-1].getAD_WF_Node_ID();
				return 0;
			}
		}
		return 0;
	}	//	getPrevious
"
org.compiere.wf.MWorkflow.getLast,MWorkflow.java,"int getLast (int AD_WF_Node_ID, int AD_Client_ID)
	{
		MWFNode[] nodes = getNodesInOrder(AD_Client_ID);
		if (nodes.length > 0)
			return nodes[nodes.length-1].getAD_WF_Node_ID();
		return 0;
	}	//	getLast
"
org.compiere.wf.MWorkflow.isFirst,MWorkflow.java,"boolean isFirst (int AD_WF_Node_ID, int AD_Client_ID)
	{
		return AD_WF_Node_ID == getAD_WF_Node_ID();
	}	//	isFirst
"
org.compiere.wf.MWorkflow.isLast,MWorkflow.java,"boolean isLast (int AD_WF_Node_ID, int AD_Client_ID)
	{
		MWFNode[] nodes = getNodesInOrder(AD_Client_ID);
		return AD_WF_Node_ID == nodes[nodes.length-1].getAD_WF_Node_ID();
	}	//	isLast
"
org.compiere.wf.MWorkflow.getName,MWorkflow.java,"String getName(boolean translated)
	{
		if (translated && m_translated)
			return m_name_trl;
		return getName();
	}	//	getName
"
org.compiere.wf.MWorkflow.getDescription,MWorkflow.java,"String getDescription (boolean translated)
	{
		if (translated && m_translated)
			return m_description_trl;
		return getDescription();
	}	//	getDescription
"
org.compiere.wf.MWorkflow.getHelp,MWorkflow.java,"String getHelp (boolean translated)
	{
		if (translated && m_translated)
			return m_help_trl;
		return getHelp();
	}	//	getHelp
"
org.compiere.wf.MWorkflow.toString,MWorkflow.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MWorkflow["");
		sb.append(get_ID()).append(""-"").append(getName())
			.append (""]"");
		return sb.toString ();
	} //	toString
"
org.compiere.wf.MWorkflow.beforeSave,MWorkflow.java,"boolean beforeSave (boolean newRecord)
	{
		validate();
		return true;
	}	//	beforeSave
"
org.compiere.wf.MWorkflow.afterSave,MWorkflow.java,"boolean afterSave (boolean newRecord, boolean success)
	{
		log.fine(""Success="" + success);
		if (success && newRecord)
		{
			//	save all nodes -- Creating new Workflow
			MWFNode[] nodes = getNodesInOrder(0);
			for (MWFNode element : nodes)
				element.save(get_Trx());
		}
		
		if (newRecord)
		{
			int AD_Role_ID = getCtx().getAD_Role_ID();
			MWorkflowAccess wa = new MWorkflowAccess(this, AD_Role_ID);
			wa.save();
		}
		//	Menu/Workflow
		else if (is_ValueChanged(""IsActive"") || is_ValueChanged(""Name"") 
			|| is_ValueChanged(""Description"") || is_ValueChanged(""Help""))
		{
			MMenu[] menues = MMenu.get(getCtx(), ""AD_Workflow_ID="" + getAD_Workflow_ID());
			for (MMenu element : menues) {
				element.setIsActive(isActive());
				element.setName(getName());
				element.setDescription(getDescription());
				element.save();
			}
			X_AD_WF_Node[] nodes = MWindow.getWFNodes(getCtx(), ""AD_Workflow_ID="" + getAD_Workflow_ID());
			for (X_AD_WF_Node element : nodes) {
				boolean changed = false;
				if (element.isActive() != isActive())
				{
					element.setIsActive(isActive());
					changed = true;
				}
				if (element.isCentrallyMaintained())
				{
					element.setName(getName());
					element.setDescription(getDescription());
					element.setHelp(getHelp());
					changed = true;
				}
				if (changed)
					element.save();
			}
		}

		return success;
	}   //  afterSave
"
org.compiere.wf.MWorkflow.start,MWorkflow.java,"MWFProcess start (ProcessInfo pi)
	{
		MWFProcess retValue = null;
		try
		{
			retValue = new MWFProcess (this, pi);
			retValue.save();
			retValue.startWork();
			pi.setSummary(Msg.getMsg(getCtx(), ""Processing""));
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, e.getLocalizedMessage(), e);
			pi.setSummary(e.getMessage(), true);
			retValue = null;
		}
		return retValue;
	}	//	MWFProcess
"
org.compiere.wf.MWorkflow.startWait,MWorkflow.java,"MWFProcess startWait (ProcessInfo pi)
	{
		final int SLEEP = 500;		//	1/2 sec
		int MAXLOOPS = 30;			//	15 sec	
		//
		MWFProcess process = start(pi);
		if (process == null)
			return null;
		Thread.yield();
		StateEngine state = process.getState();
		int loops = 0;
		while (!state.isClosed() && !state.isSuspended())
		{
			if (loops > MAXLOOPS)
			{
				log.warning(""Timeout after sec "" + ((SLEEP*MAXLOOPS)/1000));
				pi.setSummary(Msg.getMsg(getCtx(), ""ProcessRunning""));
				pi.setIsTimeout(true);
				return process;
			}
		//	System.out.println(""--------------- "" + loops + "": "" + state);
			try
			{
				Thread.sleep(SLEEP);
				loops++;
			}
			catch (InterruptedException e)
			{
				log.log(Level.SEVERE, ""Interrupted"", e);
				pi.setSummary(""Interrupted"");
				return process;
			}
			Thread.yield();
			state = process.getState();
		}
		String summary = process.getProcessMsg();
		if (summary == null || summary.trim().length() == 0)
			summary = state.toString();
		pi.setSummary(summary, state.isTerminated() || state.isAborted());
		log.fine(summary);
		return process;
	}	//	startWait
"
org.compiere.wf.MWorkflow.getDurationBaseSec,MWorkflow.java,"long getDurationBaseSec ()
	{
		if (getDurationUnit() == null)
			return 0;
		else if (DURATIONUNIT_Second.equals(getDurationUnit()))
			return 1;
		else if (DURATIONUNIT_Minute.equals(getDurationUnit()))
			return 60;
		else if (DURATIONUNIT_Hour.equals(getDurationUnit()))
			return 3600;
		else if (DURATIONUNIT_Day.equals(getDurationUnit()))
			return 86400;
		else if (DURATIONUNIT_Month.equals(getDurationUnit()))
			return 2592000;
		else if (DURATIONUNIT_Year.equals(getDurationUnit()))
			return 31536000;
		return 0;
	}	//	getDurationBaseSec
"
org.compiere.wf.MWorkflow.getDurationCalendarField,MWorkflow.java,"int getDurationCalendarField()
	{
		if (getDurationUnit() == null)
			return Calendar.MINUTE;
		else if (DURATIONUNIT_Second.equals(getDurationUnit()))
			return Calendar.SECOND;
		else if (DURATIONUNIT_Minute.equals(getDurationUnit()))
			return Calendar.MINUTE;
		else if (DURATIONUNIT_Hour.equals(getDurationUnit()))
			return Calendar.HOUR;
		else if (DURATIONUNIT_Day.equals(getDurationUnit()))
			return Calendar.DAY_OF_YEAR;
		else if (DURATIONUNIT_Month.equals(getDurationUnit()))
			return Calendar.MONTH;
		else if (DURATIONUNIT_Year.equals(getDurationUnit()))
			return Calendar.YEAR;
		return Calendar.MINUTE;
	}	//	getDurationCalendarField
"
org.compiere.wf.MWorkflow.validate,MWorkflow.java,"String validate()
	{
		StringBuffer errors = new StringBuffer();
		//
		if (getAD_WF_Node_ID() == 0)
			errors.append("" - No Start Node"");
		//
		if (WORKFLOWTYPE_DocumentValue.equals(getWorkflowType()) 
			&& (getDocValueLogic() == null || getDocValueLogic().length() == 0))
			errors.append("" - No Document Value Logic"");
		//
		
			
		//	final
		boolean valid = errors.length() == 0;
		setIsValid(valid);
		if (!valid)
			log.info(""validate: "" + errors);
		return errors.toString();
	}	//	validate
"
org.compiere.wf.MWorkflow.getRootNodes,MWorkflow.java,"Set<MWFNode> getRootNodes(int AD_Client_ID) {
		
		Set<MWFNode> rootNodes = new HashSet<MWFNode>();
		Set<Integer> nextNodeIds = new HashSet<Integer>();
		
		for (MWFNode node : m_nodes) {
			if (!node.isActive() 
				|| (node.getAD_Client_ID() != 0 && node.getAD_Client_ID() != AD_Client_ID) )
				continue;
			MWFNodeNext[] lines = node.getTransitions(AD_Client_ID);
			for (MWFNodeNext line :  lines) {
				nextNodeIds.add(Integer.valueOf(line.getAD_WF_Next_ID()));
			}
		}
		for (MWFNode node : m_nodes) {
			if (!node.isActive() 
				|| (node.getAD_Client_ID() != 0 && node.getAD_Client_ID() != AD_Client_ID) )
				continue;
			// root nodes are not referenced / preceded by any other nodes
			if (! nextNodeIds.contains(Integer.valueOf(node.getAD_WF_Node_ID())))  
				rootNodes.add(node);
		}
		
		return rootNodes;
		
	}
"
org.compiere.wf.MWorkflow.main,MWorkflow.java,"void main (String[] args)
	{
		org.compiere.Compiere.startup(true);

		//	Create Standard Document Process
		MWorkflow wf = new MWorkflow(Env.getCtx(), 0, null);
		wf.setValue (""Process_xx"");
		wf.setName (wf.getValue());
		wf.setDescription(""(Standard "" + wf.getValue());
		wf.setEntityType (ENTITYTYPE_Dictionary);
		wf.save();
		//
		MWFNode node10 = new MWFNode (wf, ""10"", ""(Start)"");
		node10.setDescription(""(Standard Node)"");
		node10.setEntityType (ENTITYTYPE_Dictionary);
		node10.setAction(X_AD_WF_Node.ACTION_WaitSleep);
		node10.setWaitTime(0);
		node10.setPosition(5, 5);
		node10.save();
		wf.setAD_WF_Node_ID(node10.getAD_WF_Node_ID());
		wf.save();
		
		MWFNode node20 = new MWFNode (wf, ""20"", ""(DocAuto)"");
		node20.setDescription(""(Standard Node)"");
		node20.setEntityType (ENTITYTYPE_Dictionary);
		node20.setAction(X_AD_WF_Node.ACTION_DocumentAction);
		node20.setDocAction(X_AD_WF_Node.DOCACTION_None);
		node20.setPosition(5, 120);
		node20.save();
		MWFNodeNext tr10_20 = new MWFNodeNext(node10, node20.getAD_WF_Node_ID());
		tr10_20.setEntityType (ENTITYTYPE_Dictionary);
		tr10_20.setDescription(""(Standard Transition)"");
		tr10_20.setSeqNo(100);
		tr10_20.save();
		
		MWFNode node100 = new MWFNode (wf, ""100"", ""(DocPrepare)"");
		node100.setDescription(""(Standard Node)"");
		node100.setEntityType (ENTITYTYPE_Dictionary);
		node100.setAction(X_AD_WF_Node.ACTION_DocumentAction);
		node100.setDocAction(X_AD_WF_Node.DOCACTION_Prepare);
		node100.setPosition(170, 5);
		node100.save();
		MWFNodeNext tr10_100 = new MWFNodeNext(node10, node100.getAD_WF_Node_ID());
		tr10_100.setEntityType (ENTITYTYPE_Dictionary);
		tr10_100.setDescription(""(Standard Approval)"");
		tr10_100.setIsStdUserWorkflow(true);
		tr10_100.setSeqNo(10);
		tr10_100.save();
		
		MWFNode node200 = new MWFNode (wf, ""200"", ""(DocComplete)"");
		node200.setDescription(""(Standard Node)"");
		node200.setEntityType (ENTITYTYPE_Dictionary);
		node200.setAction(X_AD_WF_Node.ACTION_DocumentAction);
		node200.setDocAction(X_AD_WF_Node.DOCACTION_Complete);
		node200.setPosition(170, 120);
		node200.save();
		MWFNodeNext tr100_200 = new MWFNodeNext(node100, node200.getAD_WF_Node_ID());
		tr100_200.setEntityType (ENTITYTYPE_Dictionary);
		tr100_200.setDescription(""(Standard Transition)"");
		tr100_200.setSeqNo(100);
		tr100_200.save();
		
		
		/**
		ctx.setAD_Client_ID(11);
		ctx.setAD_Org_ID(11);
		Env.setAD_User_ID(Env.getCtx(), 100);
		//
		int AD_Workflow_ID = 115;			//	Requisition WF
		int M_Requsition_ID = 100;
		MRequisition req = new MRequisition (Env.getCtx(), M_Requsition_ID);
		req.setDocStatus(DocAction.DOCSTATUS_Drafted);
		req.save();
		Log.setTraceLevel(8);
		System.out.println(""---------------------------------------------------"");
		MWorkflow wf = MWorkflow.get (Env.getCtx(), AD_Workflow_ID);
		**/
	//	wf.start(M_Requsition_ID);
		
	}	//	main
"
org.compiere.wf.MWFEventAudit.get,MWFEventAudit.java,"MWFEventAudit[] get (Ctx ctx, int AD_WF_Process_ID, int AD_WF_Node_ID)
	{
		ArrayList<MWFEventAudit> list = new ArrayList<MWFEventAudit>();
		String sql = ""SELECT * FROM AD_WF_EventAudit ""
			+ ""WHERE AD_WF_Process_ID=?"";
		if (AD_WF_Node_ID > 0)
			sql += "" AND AD_WF_Node_ID=?"";
		sql += "" ORDER BY AD_WF_EventAudit_ID"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, AD_WF_Process_ID);
			if (AD_WF_Node_ID > 0)
				pstmt.setInt (2, AD_WF_Node_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add (new MWFEventAudit (ctx, rs, null));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, ""get"", e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		//
		MWFEventAudit[] retValue = new MWFEventAudit[list.size()];
		list.toArray (retValue);
		return retValue;
	}	//	get
"
org.compiere.wf.MWFEventAudit.get,MWFEventAudit.java,"MWFEventAudit[] get (Ctx ctx, int AD_WF_Process_ID)
	{
		return get(ctx, AD_WF_Process_ID, 0);
	}	//	get
"
org.compiere.wf.MWFEventAudit.getNodeName,MWFEventAudit.java,"String getNodeName()
	{
		MWFNode node = MWFNode.get(getCtx(), getAD_WF_Node_ID());
		if (node.get_ID() == 0)
			return ""?"";
		return node.getName(true);
	}	//	getNodeName
"
org.compiere.wf.DocWorkflowManager.get,DocWorkflowManager.java,"DocWorkflowManager get()
	{
		if (s_mgr == null)
			s_mgr = new DocWorkflowManager();
		return s_mgr;
	}	//	get
"
org.compiere.wf.DocWorkflowManager.process,DocWorkflowManager.java,"boolean process (PO document, int AD_Table_ID)
	{
		m_noCalled++;
		MWorkflow[] wfs = MWorkflow.getDocValue (document.getCtx(), 
			document.getAD_Client_ID(), AD_Table_ID);
		if (wfs == null || wfs.length == 0)
			return false;
		
		boolean started = false;
		for (MWorkflow wf : wfs) {
			//	We have a Document Workflow
			String logic = wf.getDocValueLogic();
			if (logic == null || logic.length() == 0)
			{
				log.severe (""Workflow has no Logic - "" + wf.getName());
				continue;
			}
		
			//	Re-check: Document must be same Client as workflow
			if (wf.getAD_Client_ID() != document.getAD_Client_ID())
				continue;
		
			//	Check Logic
			boolean sql = logic.startsWith(""SQL="");
			if (sql && !testStart(wf, document))
			{
				log.fine(""SQL Logic evaluated to false ("" + logic + "")"");
				continue;
			}
			if (!sql && !Evaluator.evaluateLogic(document, logic))
			{
				log.fine(""Logic evaluated to false ("" + logic + "")"");
				continue;
			}
		
			if (document.get_Trx() != null)
			{
				log.severe(""Not started: "" + wf);
				continue;
			}
			//	Start Workflow
			log.fine(logic);
			int AD_Process_ID = 305;		//	HARDCODED
			ProcessInfo pi = new ProcessInfo (wf.getName(), AD_Process_ID, 
				AD_Table_ID, document.get_ID());
			pi.setAD_User_ID (document.getCtx().getAD_User_ID());
			pi.setAD_Client_ID(document.getAD_Client_ID());
			//
			if (wf.start(pi) != null)
			{
				log.config(wf.getName());
				m_noStarted++;
				started = true;
			}
		}
		return started;
	}	//	process
"
org.compiere.wf.DocWorkflowManager.testStart,DocWorkflowManager.java,"boolean testStart (MWorkflow wf, PO document)
	{
		boolean retValue = false;
		String logic = wf.getDocValueLogic();
		logic = logic.substring(4);		//	""SQL=""
		//
		String tableName = document.get_TableName();
		String[] keyColumns = document.get_KeyColumns();
		if (keyColumns.length != 1)
		{
			log.severe(""Tables with more then one key column not supported - "" 
				+ tableName + "" = "" + keyColumns.length);
			return false;
		}
		String keyColumn = keyColumns[0];
		StringBuffer sql = new StringBuffer(""SELECT "")
			.append(keyColumn).append("" FROM "").append(tableName)
			.append("" WHERE AD_Client_ID=? AND "")		//	#1
				.append(keyColumn).append(""=? AND "")	//	#2
			.append(logic)
		//	Duplicate Open Workflow test
			.append("" AND NOT EXISTS (SELECT * FROM AD_WF_Process wfp "")
				.append(""WHERE wfp.AD_Table_ID=? AND wfp.Record_ID="")	//	#3
				.append(tableName).append(""."").append(keyColumn)
				.append("" AND wfp.AD_Workflow_ID=?"")	//	#4
				.append("" AND SUBSTR(wfp.WFState,1,1)='O')"");
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql.toString(), document.get_Trx());
			pstmt.setInt (1, wf.getAD_Client_ID());
			pstmt.setInt (2, document.get_ID());
			pstmt.setInt (3, document.get_Table_ID());
			pstmt.setInt (4, wf.getAD_Workflow_ID());
			ResultSet rs = pstmt.executeQuery ();
			if (rs.next ())
				retValue = true;
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log (Level.SEVERE, ""Logic="" + logic
				+ "" - SQL="" + sql.toString(), e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		return retValue;
	}	//	testStart
"
org.compiere.wf.DocWorkflowManager.toString,DocWorkflowManager.java,"String toString()
	{
		StringBuffer sb = new StringBuffer(""DocWorkflowManager["");
		sb.append(""Called="").append(m_noCalled)
			.append("",Stated="").append(m_noStarted)
			.append(""]"");
		return sb.toString();
	}	//	toString
"
org.compiere.wf.WorkflowValidate.prepare,WorkflowValidate.java,"void prepare ()
	{
		p_AD_Worlflow_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.wf.WorkflowValidate.doIt,WorkflowValidate.java,"String doIt () throws Exception
	{
		MWorkflow wf = MWorkflow.get (getCtx(), p_AD_Worlflow_ID);
		log.info(""WF="" + wf);
		
		String msg = wf.validate();
		wf.save();
		if (msg.length() > 0)
			throw new CompiereUserException(Msg.getMsg(getCtx(), ""WorflowNotValid"") 
				+ "" - "" + msg);
		return wf.isValid() ? ""@OK@"" : ""@Error@"";
	}	//	doIt
"
org.compiere.wf.MWFNextCondition.isOr,MWFNextCondition.java,"boolean isOr()
	{
		return ANDOR_Or.equals(getAndOr());
	}	//	isOr
"
org.compiere.wf.MWFNextCondition.evaluate,MWFNextCondition.java,"boolean evaluate (MWFActivity activity)
	{
		if (getAD_Column_ID() == 0)
			throw new IllegalStateException(""No Column defined - "" + this);
			
		PO po = activity.getPO();
		if (po == null || po.get_ID() == 0)
			throw new IllegalStateException(""Could not evaluate "" + po + "" - "" + this);
		//
		Object valueObj = po.get_ValueOfColumn(getAD_Column_ID());
		if (valueObj == null)
			valueObj = """";
		String value1 = getValue();
		if (value1 == null)
			value1 = """";
		String value2 = getValue2();
		if (value2 == null)
			value2 = """";
		
		String resultStr = ""PO:{"" + valueObj + ""} "" + getOperation() + "" Condition:{"" + value1 + ""}"";
		if (getOperation().equals(OPERATION_Sql))
			throw new IllegalArgumentException(""SQL Operator not implemented yet: "" + resultStr);
		if (getOperation().equals(OPERATION_X))
			resultStr += ""{"" + value2 + ""}"";

		boolean result = false;
		if (valueObj instanceof Number)
			result = compareNumber ((Number)valueObj, value1, value2);
		else
			result = compareString(valueObj, value1, value2);
		//
		log.fine(resultStr + "" -> "" + result 
			+ (m_numeric ? "" (#)"" : "" ($)""));
		return result;
	}	//	evaluate
"
org.compiere.wf.MWFNextCondition.compareNumber,MWFNextCondition.java,"boolean compareNumber (Number valueObj, String value1, String value2)
	{
		BigDecimal valueObjB = null;
		BigDecimal value1B = null;
		BigDecimal value2B = null;
		try
		{
			if (valueObj instanceof BigDecimal)
				valueObjB = (BigDecimal)valueObj;
			else if (valueObj instanceof Integer)
				valueObjB = new BigDecimal (((Integer)valueObj).intValue());
			else
				valueObjB = new BigDecimal (String.valueOf(valueObj));
		}
		catch (Exception e)
		{
			log.fine(""compareNumber - valueObj="" + valueObj + "" - "" + e.toString());
			return compareString(valueObj, value1, value2);
		}
		try
		{
			value1B = new BigDecimal (value1);
		}
		catch (Exception e)
		{
			log.fine(""compareNumber - value1="" + value1 + "" - "" + e.toString());
			return compareString(valueObj, value1, value2);
		}
		
		String op = getOperation();
		if (OPERATION_Eq.equals(op))
			return valueObjB.compareTo(value1B) == 0;
		else if (OPERATION_Gt.equals(op))
			return valueObjB.compareTo(value1B) > 0;
		else if (OPERATION_GtEq.equals(op))
			return valueObjB.compareTo(value1B) >= 0;
		else if (OPERATION_Le.equals(op))
			return valueObjB.compareTo(value1B) < 0;
		else if (OPERATION_LeEq.equals(op))
			return valueObjB.compareTo(value1B) <= 0;
		else if (OPERATION_Like.equals(op))
			return valueObjB.compareTo(value1B) == 0;
		else if (OPERATION_NotEq.equals(op))
			return valueObjB.compareTo(value1B) != 0;
		//
		else if (OPERATION_Sql.equals(op))
			throw new IllegalArgumentException(""SQL not Implemented"");
		//
		else if (OPERATION_X.equals(op))
		{
			if (valueObjB.compareTo(value1B) < 0)
				return false;
			//	To
			try
			{
				value2B = new BigDecimal (String.valueOf(value2));
				return valueObjB.compareTo(value2B) <= 0;
			}
			catch (Exception e)
			{
				log.fine(""compareNumber - value2="" + value2 + "" - "" + e.toString());
				return false;
			}
		}
		//
		throw new IllegalArgumentException(""Unknown Operation="" + op);
	}	//	compareNumber
"
org.compiere.wf.MWFNextCondition.compareString,MWFNextCondition.java,"boolean compareString (Object valueObj, String value1S, String value2S)
	{
		m_numeric = false;
		String valueObjS = String.valueOf(valueObj);
		//
		String op = getOperation();
		if (OPERATION_Eq.equals(op))
			return valueObjS.compareTo(value1S) == 0;
		else if (OPERATION_Gt.equals(op))
			return valueObjS.compareTo(value1S) > 0;
		else if (OPERATION_GtEq.equals(op))
			return valueObjS.compareTo(value1S) >= 0;
		else if (OPERATION_Le.equals(op))
			return valueObjS.compareTo(value1S) < 0;
		else if (OPERATION_LeEq.equals(op))
			return valueObjS.compareTo(value1S) <= 0;
		else if (OPERATION_Like.equals(op))
			return valueObjS.compareTo(value1S) == 0;
		else if (OPERATION_NotEq.equals(op))
			return valueObjS.compareTo(value1S) != 0;
		//
		else if (OPERATION_Sql.equals(op))
			throw new IllegalArgumentException(""SQL not Implemented"");
		//
		else if (OPERATION_X.equals(op))
		{
			if (valueObjS.compareTo(value1S) < 0)
				return false;
			//	To
			return valueObjS.compareTo(value2S) <= 0;
		}
		//
		throw new IllegalArgumentException(""Unknown Operation="" + op);
	}	//	compareString
"
org.compiere.wf.MWFNextCondition.toString,MWFNextCondition.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MWFNextCondition["");
		sb.append(get_ID()).append("",SeqNo="").append(getSeqNo())
			.append (""]"");
		return sb.toString ();
	} //	toString
"
org.compiere.wf.WFActivityManage.prepare,WFActivityManage.java,"void prepare()
	{
		ProcessInfoParameter[] para = getParameter();
		for (ProcessInfoParameter element : para) {
			String name = element.getParameterName();
			if (element.getParameter() == null)
				;
			else if (name.equals(""IsAbort""))
				p_IsAbort = ""Y"".equals(element.getParameter());
			else if (name.equals(""AD_User_ID""))
				p_AD_User_ID = element.getParameterAsInt();
			else if (name.equals(""AD_WF_Responsible_ID""))
				p_AD_WF_Responsible_ID = element.getParameterAsInt();
			else
				log.log(Level.SEVERE, ""Unknown Parameter: "" + name);
		}
		p_AD_WF_Activity_ID = getRecord_ID();
	}	//	prepare
"
org.compiere.wf.WFActivityManage.doIt,WFActivityManage.java,"String doIt() throws Exception
	{
		MWFActivity activity = new MWFActivity (getCtx(), p_AD_WF_Activity_ID, get_TrxName());
		log.info("""" + activity);
		
		MUser user = MUser.get(getCtx(), getAD_User_ID());
		//	Abort
		if (p_IsAbort)
		{
			String msg = user.getName() + "": Abort"";
			activity.setTextMsg(msg);
			activity.setAD_User_ID(getAD_User_ID());
			activity.setWFState(StateEngine.STATE_Aborted);
			return msg;
		}
		String msg = null;
		//	Change User
		if (p_AD_User_ID != 0 && activity.getAD_User_ID() != p_AD_User_ID)
		{
			MUser from = MUser.get(getCtx(), activity.getAD_User_ID());
			MUser to = MUser.get(getCtx(), p_AD_User_ID);
			msg = user.getName() + "": "" + from.getName() + "" -> "" + to.getName();
			activity.setTextMsg(msg);
			activity.setAD_User_ID(p_AD_User_ID);
		}
		//	Change Responsible
		if (p_AD_WF_Responsible_ID != 0 && activity.getAD_WF_Responsible_ID() != p_AD_WF_Responsible_ID)
		{
			MWFResponsible from = MWFResponsible.get(getCtx(), activity.getAD_WF_Responsible_ID());
			MWFResponsible to = MWFResponsible.get(getCtx(), p_AD_WF_Responsible_ID);
			String msg1 = user.getName() + "": "" + from.getName() + "" -> "" + to.getName();
			activity.setTextMsg(msg1);
			activity.setAD_WF_Responsible_ID(p_AD_WF_Responsible_ID);
			if (msg == null)
				msg = msg1;
			else
				msg += "" - "" + msg1;
		}
		//
		activity.save();
		
		return msg;
	}	//	doIt
"
org.compiere.wf.MWFActivity.get,MWFActivity.java,"MWFActivity[] get (Ctx ctx, int AD_Table_ID, int Record_ID, boolean activeOnly)
	{
		ArrayList<MWFActivity> list = new ArrayList<MWFActivity>();
		PreparedStatement pstmt = null;
		String sql = ""SELECT * FROM AD_WF_Activity WHERE AD_Table_ID=? AND Record_ID=?"";
		if (activeOnly)
			sql += "" AND Processed<>'Y'"";
		sql += "" ORDER BY AD_WF_Activity_ID"";
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, AD_Table_ID);
			pstmt.setInt (2, Record_ID);
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add(new MWFActivity (ctx, rs, null));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			s_log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		MWFActivity[] retValue = new MWFActivity[list.size ()];
		list.toArray (retValue);
		return retValue;
	}	//	get
"
org.compiere.wf.MWFActivity.getActiveInfo,MWFActivity.java,"String getActiveInfo (Ctx ctx, int AD_Table_ID, int Record_ID)
	{
		MWFActivity[] acts = get (ctx, AD_Table_ID, Record_ID, true);
		if ((acts == null) || (acts.length == 0))
			return null;
		//
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < acts.length; i++)
		{
			if (i > 0)
				sb.append(""\n"");
			MWFActivity activity = acts[i];
			sb.append(activity.toStringX());
		}
		return sb.toString();
	}	//	getActivityInfo
"
org.compiere.wf.MWFActivity.getState,MWFActivity.java,"StateEngine getState()
	{
		return m_state;
	}	//	getState
"
org.compiere.wf.MWFActivity.setWFState,MWFActivity.java,"void setWFState (String WFState)
	{
		if (m_state == null)
			m_state = new StateEngine (getWFState());
		if (m_state.isClosed())
			return;
		if (getWFState().equals(WFState))
			return;
		//
		if (m_state.isValidNewState(WFState))
		{
			String oldState = getWFState();
			log.fine(oldState + ""->""+ WFState + "", Msg="" + getTextMsg());
			super.setWFState (WFState);
			m_state = new StateEngine (getWFState());
			save();			//	closed in MWFProcess.checkActivities()
			updateEventAudit();

			//	Inform Process
			if (m_process == null)
				m_process = new MWFProcess (getCtx(), getAD_WF_Process_ID(), null);
			m_process.checkActivities();
		}
		else
		{
			String msg = ""Ignored Invalid Transformation - New=""
				+ WFState + "", Current="" + getWFState();
			log.log(Level.SEVERE, msg);
			Trace.printStack();
			setTextMsg(""Set WFState - "" + msg);
			save();
		}
	}	//	setWFState
"
org.compiere.wf.MWFActivity.isClosed,MWFActivity.java,"boolean isClosed()
	{
		return m_state.isClosed();
	}	//	isClosed
"
org.compiere.wf.MWFActivity.updateEventAudit,MWFActivity.java,"void updateEventAudit()
	{
	//	log.fine("""");
		getEventAudit();
		m_audit.setTextMsg(getTextMsg());
		m_audit.setWFState(getWFState());
		if (m_newValue != null)
			m_audit.setNewValue(m_newValue);
		if (m_state.isClosed())
		{
			m_audit.setEventType(X_AD_WF_EventAudit.EVENTTYPE_ProcessCompleted);
			long ms = System.currentTimeMillis() - m_audit.getCreated().getTime();
			m_audit.setElapsedTimeMS(new BigDecimal(ms));
		}
		else
			m_audit.setEventType(X_AD_WF_EventAudit.EVENTTYPE_StateChanged);
		m_audit.save();
	}	//	updateEventAudit
"
org.compiere.wf.MWFActivity.getEventAudit,MWFActivity.java,"MWFEventAudit getEventAudit()
	{
		if (m_audit != null)
			return m_audit;
		MWFEventAudit[] events = MWFEventAudit.get(getCtx(), getAD_WF_Process_ID(), getAD_WF_Node_ID());
		if ((events == null) || (events.length == 0))
			m_audit = new MWFEventAudit(this);
		else
			m_audit = events[events.length-1];		//	last event
		return m_audit;
	}	//	getEventAudit
"
org.compiere.wf.MWFActivity.getPO,MWFActivity.java,"PO getPO (Trx trx)
	{
		if (m_po != null)
		{
			if ((m_po.get_Trx() == null) && (trx == null))
				return m_po;
			if ((m_po.get_Trx() != null) && (trx != null)
				&& m_po.get_Trx().equals(trx))
				return m_po;
			log.fine(""Reloading - PO="" + m_po.get_Trx() + "" -> "" + trx);
			m_po.load(trx);		//	reload
			return m_po;
		}

		MTable table = MTable.get (getCtx(), getAD_Table_ID());
		m_po = table.getPO(getCtx(), getRecord_ID(), trx);
		return m_po;
	}	//	getPO
"
org.compiere.wf.MWFActivity.getPO,MWFActivity.java,"PO getPO()
	{
		return getPO(m_trx);
	}	//	getPO
"
org.compiere.wf.MWFActivity.getSummary,MWFActivity.java,"String getSummary()
	{
		PO po = getPO();
		if (po == null)
			return null;
		StringBuffer sb = new StringBuffer();
		String[] keyColumns = po.get_KeyColumns();
		if ((keyColumns != null) && (keyColumns.length > 0))
			sb.append(Msg.getElement(getCtx(), keyColumns[0])).append("" "");
		int index = po.get_ColumnIndex(""DocumentNo"");
		if (index != -1)
			sb.append(po.get_Value(index)).append("": "");
		index = po.get_ColumnIndex(""SalesRep_ID"");
		Integer sr = null;
		if (index != -1)
			sr = (Integer)po.get_Value(index);
		else
		{
			index = po.get_ColumnIndex(""AD_User_ID"");
			if (index != -1)
				sr = (Integer)po.get_Value(index);
		}
		if (sr != null)
		{
			MUser user = MUser.get(getCtx(), sr.intValue());
			if (user != null)
				sb.append(user.getName()).append("" "");
		}
		//
		index = po.get_ColumnIndex(""C_BPartner_ID"");
		if (index != -1)
		{
			Integer bp = (Integer)po.get_Value(index);
			if (bp != null)
			{
				MBPartner partner = MBPartner.get(getCtx(), bp.intValue());
				if (partner != null)
					sb.append(partner.getName()).append("" "");
			}
		}
		return sb.toString();
	}	//	getSummary
"
org.compiere.wf.MWFActivity.getPO_AD_Client_ID,MWFActivity.java,"int getPO_AD_Client_ID (Trx trx)
	{
		if ((m_po == null) && (trx == null))
			getPO(m_trx);
		if (m_po == null)
			getPO(trx);
		if (m_po != null)
			return m_po.getAD_Client_ID();
		return -1;
	}	//	getPO_AD_Client_ID
"
org.compiere.wf.MWFActivity.getAttributeValue,MWFActivity.java,"Object getAttributeValue()
	{
		MWFNode node = getNode();
		if (node == null)
			return null;
		int AD_Column_ID = node.getAD_Column_ID();
		if (AD_Column_ID == 0)
			return null;
		PO po = getPO();
		if (po.get_ID() == 0)
			return null;
		return po.get_ValueOfColumn(AD_Column_ID);
	}	//	getAttributeValue
"
org.compiere.wf.MWFActivity.isSOTrx,MWFActivity.java,"boolean isSOTrx()
	{
		PO po = getPO();
		if (po.get_ID() == 0)
			return true;
		//	Is there a Column?
		int index = po.get_ColumnIndex(""IsSOTrx"");
		if (index < 0)
		{
			if (po.get_TableName().startsWith(""M_""))
				return false;
			return true;
		}
		//	we have a column
		try
		{
			Boolean IsSOTrx = (Boolean)po.get_Value(index);
			return IsSOTrx.booleanValue();
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, """", e);
		}
		return true;
	}	//	isSOTrx
"
org.compiere.wf.MWFActivity.setAD_WF_Node_ID,MWFActivity.java,"void setAD_WF_Node_ID (int AD_WF_Node_ID)
	{
		if (AD_WF_Node_ID == 0)
			throw new IllegalArgumentException(""Workflow Node is not defined"");
		super.setAD_WF_Node_ID (AD_WF_Node_ID);
		//
		if (!WFSTATE_NotStarted.equals(getWFState()))
		{
			super.setWFState(WFSTATE_NotStarted);
			m_state = new StateEngine (getWFState());
		}
		if (isProcessed())
			setProcessed (false);
	}	//	setAD_WF_Node_ID
"
org.compiere.wf.MWFActivity.getNode,MWFActivity.java,"MWFNode getNode()
	{
		if (m_node == null)
			m_node = MWFNode.get (getCtx(), getAD_WF_Node_ID());
		return m_node;
	}	//	getNode
"
org.compiere.wf.MWFActivity.getNodeName,MWFActivity.java,"String getNodeName()
	{
		return getNode().getName(true);
	}	//	getNodeName
"
org.compiere.wf.MWFActivity.getNodeDescription,MWFActivity.java,"String getNodeDescription()
	{
		return getNode().getDescription(true);
	}	//	getNodeDescription
"
org.compiere.wf.MWFActivity.getNodeHelp,MWFActivity.java,"String getNodeHelp()
	{
		return getNode().getHelp(true);
	}	//	getNodeHelp
"
org.compiere.wf.MWFActivity.isUserApproval,MWFActivity.java,"boolean isUserApproval()
	{
		return getNode().isUserApproval();
	}	//	isNodeApproval
"
org.compiere.wf.MWFActivity.isUserManual,MWFActivity.java,"boolean isUserManual()
	{
		return getNode().isUserManual();
	}	//	isUserManual
"
org.compiere.wf.MWFActivity.isUserChoice,MWFActivity.java,"boolean isUserChoice()
	{
		return getNode().isUserChoice();
	}	//	isUserChoice
"
org.compiere.wf.MWFActivity.setTextMsg,MWFActivity.java,"void setTextMsg (String TextMsg)
	{
		if ((TextMsg == null) || (TextMsg.length() == 0))
			return;
		String oldText = getTextMsg();
		if ((oldText == null) || (oldText.length() == 0))
			super.setTextMsg (Util.trimSize(TextMsg,1000));
		else if ((TextMsg != null) && (TextMsg.length() > 0))
			super.setTextMsg (Util.trimSize(oldText + ""\n - "" + TextMsg,1000));
	}	//	setTextMsg
"
org.compiere.wf.MWFActivity.addTextMsg,MWFActivity.java,"void addTextMsg (Object obj)
	{
		if (obj == null)
			return;
		//
		StringBuffer TextMsg = new StringBuffer (obj.toString());
		if (obj instanceof Exception)
		{
			Exception ex = (Exception)obj;
			while (ex != null)
			{
				StackTraceElement[] st = ex.getStackTrace();
				for (int i = 0; i < st.length; i++)
				{
					StackTraceElement ste = st[i];
					if ((i == 0) || ste.getClassName().startsWith(""org.compiere""))
						TextMsg.append("" ("").append(i).append(""): "")
							.append(ste.toString())
							.append(""\n"");
				}
				if (ex.getCause() instanceof Exception)
					ex = (Exception)ex.getCause();
				else
					ex = null;
			}
		}
		//
		String oldText = getTextMsg();
		if ((oldText == null) || (oldText.length() == 0))
			super.setTextMsg(Util.trimSize(TextMsg.toString(),1000));
		else if ((TextMsg != null) && (TextMsg.length() > 0))
			super.setTextMsg(Util.trimSize(oldText + ""\n - "" + TextMsg.toString(),1000));
	}	//	setTextMsg
"
org.compiere.wf.MWFActivity.getWFStateText,MWFActivity.java,"String getWFStateText ()
	{
		return MRefList.getListName(getCtx(), WFSTATE_AD_Reference_ID, getWFState());
	}	//	getWFStateText
"
org.compiere.wf.MWFActivity.setResponsible,MWFActivity.java,"void setResponsible (MWFProcess process)
	{
		//	Responsible
		int AD_WF_Responsible_ID = getNode().getAD_WF_Responsible_ID();
		if (AD_WF_Responsible_ID == 0)	//	not defined on Node Level
			AD_WF_Responsible_ID = process.getAD_WF_Responsible_ID();
		setAD_WF_Responsible_ID (AD_WF_Responsible_ID);
		MWFResponsible resp = getResponsible();
		

		//	User - Directly responsible
		int AD_User_ID = resp.getAD_User_ID();
		//	Invoker - get Sales Rep or last updater of document
		if ((AD_User_ID == 0) && resp.isInvoker())
			AD_User_ID = process.getAD_User_ID();
		else if (resp.isInvokerOrganization()) {
			MOrgInfo org = MOrgInfo.get(getCtx(), m_po.getAD_Org_ID(), null);
			if (org.getSupervisor_ID() == 0)
				log.fine(""No Supervisor for AD_Org_ID="" + m_po.getAD_Org_ID());
			else 
				AD_User_ID = org.getSupervisor_ID();
		}
			
		//
		setAD_User_ID(AD_User_ID);
	}	//	setResponsible
"
org.compiere.wf.MWFActivity.getResponsible,MWFActivity.java,"MWFResponsible getResponsible()
	{
		MWFResponsible resp = MWFResponsible.get(getCtx(), getAD_WF_Responsible_ID());
		return resp;
	}	//	isInvoker
"
org.compiere.wf.MWFActivity.isInvoker,MWFActivity.java,"boolean isInvoker()
	{
		return getResponsible().isInvoker();
	}	//	isInvoker
"
org.compiere.wf.MWFActivity.getApprovalUser,MWFActivity.java,"int getApprovalUser (int AD_User_ID,
			int C_Currency_ID, BigDecimal amount,
			int AD_Org_ID, boolean ownDocument)
	{
		//	Nothing to approve
		if ((amount == null)
			|| (amount.signum() == 0))
			return AD_User_ID;

		//	Starting user
		MUser user = MUser.get(getCtx(), AD_User_ID);
		log.info(""For User="" + user
			+ "", Amt="" + amount
			+ "", Own="" + ownDocument);

		MUser oldUser = null;
		while (user != null)
		{
			if (user.equals(oldUser))
			{
				log.info(""Loop - "" + user.getName());
				return -1;
			}
			oldUser = user;
			log.fine(""User="" + user.getName());
			//	Get Roles of User
			MRole[] roles = user.getRoles(AD_Org_ID);
			for (MRole role : roles) {
				if (ownDocument && !role.isCanApproveOwnDoc())
					continue;	//	find a role with allows them to approve own
				BigDecimal roleAmt = role.getAmtApproval();
				if ((roleAmt == null) || (roleAmt.signum() == 0))
					continue;
				if ((C_Currency_ID != role.getC_Currency_ID())
					&& (role.getC_Currency_ID() != 0))			//	No currency = amt only
				{
					roleAmt =  MConversionRate.convert(getCtx(),//	today & default rate
						roleAmt, role.getC_Currency_ID(),
						C_Currency_ID, getAD_Client_ID(), AD_Org_ID);
					if ((roleAmt == null) || (roleAmt.signum() == 0))
						continue;
				}
				boolean approved = amount.compareTo(roleAmt) <= 0;
				log.fine(""Approved="" + approved
					+ "" - User="" + user.getName() + "", Role="" + role.getName()
					+ "", ApprovalAmt="" + roleAmt);
				if (approved)
					return user.getAD_User_ID();
			}

			//	**** Find next User
			//	Get Supervisor
			if (user.getSupervisor_ID() != 0)
			{
				user = MUser.get(getCtx(), user.getSupervisor_ID());
				log.fine(""Supervisor: "" + user.getName());
			}
			else
			{
				log.fine(""No Supervisor"");
				MOrg org = MOrg.get (getCtx(), AD_Org_ID);
				MOrgInfo orgInfo = org.getInfo();
				//	Get Org Supervisor
				if (orgInfo.getSupervisor_ID() != 0)
				{
					user = MUser.get(getCtx(), orgInfo.getSupervisor_ID());
					log.fine(""Org="" + org.getName() + "",Supervisor: "" + user.getName());
				}
				else
				{
					log.fine(""No Org Supervisor"");
					//	Get Parent Org Supervisor
					if (orgInfo.getParent_Org_ID() != 0)
					{
						org = MOrg.get (getCtx(), orgInfo.getParent_Org_ID());
						orgInfo = org.getInfo();
						if (orgInfo.getSupervisor_ID() != 0)
						{
							user = MUser.get(getCtx(), orgInfo.getSupervisor_ID());
							log.fine(""Parent Org Supervisor: "" + user.getName());
						}
					}
				}
			}	//	No Supervisor

		}	//	while there is a user to approve

		log.fine(""No user found"");
		return -1;
	}	//	getApproval
"
org.compiere.wf.MWFActivity.run,MWFActivity.java,"void run()
	{
		log.info (toString());
		m_newValue = null;
		if (!m_state.isValidAction(StateEngine.ACTION_Start))
		{
			setTextMsg(""State="" + getWFState() + "" - cannot start"");
			setWFState(StateEngine.STATE_Terminated);
			return;
		}
		//
		setWFState(StateEngine.STATE_Running);
		m_trx = Trx.get(""WF"");
		//
		try
		{
			if (getNode().get_ID() == 0)
			{
				setTextMsg(""Node not found - AD_WF_Node_ID="" + getAD_WF_Node_ID());
				setWFState(StateEngine.STATE_Aborted);
				return;
			}
			//	Do Work
			/****	Trx Start	****/
		//	log.config(""*Start "" + toString() + "" - "" + m_trx.getTrxName());
			boolean done = performWork(m_trx);
			/****	Trx End		****/
		//	log.config(""*Commit "" + toString() + "" - "" + m_trx.getTrxName());
			m_trx.commit();
			m_trx.close();
			m_trx = null;
			//
		//	log.config(""*State "" + toString());
			setWFState (done ? StateEngine.STATE_Completed : StateEngine.STATE_Suspended);
		//	log.config(""*Done  "" + toString());
			//
			if (m_postImmediate != null)
				postImmediate();
		}
		catch (Exception e)
		{
			log.log(Level.WARNING, """" + getNode(), e);
			/****	Trx Rollback	****/
			m_trx.rollback();
			m_trx.close();
			m_trx = null;
			//
			if (e.getCause() != null)
				log.log(Level.WARNING, ""Cause"", e.getCause());
			String processMsg = e.getLocalizedMessage();
			if ((processMsg == null) || (processMsg.length() == 0))
				processMsg = e.getMessage();
			setTextMsg(processMsg);
			addTextMsg(e);
			setWFState (StateEngine.STATE_Terminated);	//	unlocks
			//	Set Document Status
			if ((m_po != null) && (m_docStatus != null))
			{
				m_po.load((Trx)null);
				DocAction doc = (DocAction)m_po;
				doc.setDocStatus(m_docStatus);
				m_po.save();
			}
		}
		m_trx = null;
	}	//	run
"
org.compiere.wf.MWFActivity.performWork,MWFActivity.java,"boolean performWork (Trx p_trx) throws Exception
	{
		log.info (m_node + "" "" + p_trx.toString());
		m_postImmediate = null;
		m_docStatus = null;
		if (m_node.getPriority() != 0)		//	overwrite priority if defined
			setPriority(m_node.getPriority());
		String action = m_node.getAction();

		/******	Sleep (Start/End)			******/
		if (X_AD_WF_Node.ACTION_WaitSleep.equals(action))
		{
			log.fine(""Sleep:WaitTime="" + m_node.getWaitTime());
			if (m_node.getWaitingTime() == 0)
				return true;	//	done
			Calendar cal = Calendar.getInstance();
			cal.add(m_node.getDurationCalendarField(), m_node.getWaitTime());
			setEndWaitTime(new Timestamp(cal.getTimeInMillis()));
			return false;		//	not done
		}

		/******	Document Action				******/
		else if (X_AD_WF_Node.ACTION_DocumentAction.equals(action))
		{
			log.fine(""DocumentAction="" + m_node.getDocAction());
			getPO(p_trx);
			if (m_po == null)
				throw new Exception(""Persistent Object not found - AD_Table_ID=""
					+ getAD_Table_ID() + "", Record_ID="" + getRecord_ID());
			m_po.set_Trx(p_trx);
			boolean success = false;
			String processMsg = null;
			DocAction doc = null;
			if (m_po instanceof DocAction)
			{
				doc = (DocAction)m_po;
				//
				success = doc.processIt (m_node.getDocAction());	//	** Do the work
				setTextMsg(doc.getSummary());
				processMsg = doc.getProcessMsg();
				m_docStatus = doc.getDocStatus();
				//	Post Immediate
				if (success && DocActionConstants.ACTION_Complete.equals(m_node.getDocAction()))
				{
					MClient client = MClient.get(doc.getCtx(), doc.getAD_Client_ID());
					if (client.isPostImmediate())
						m_postImmediate = doc;
				}
				//
				if (m_process != null)
					m_process.setProcessMsg(processMsg);
			}
			else
				throw new IllegalStateException(""Persistent Object not DocAction - ""
					+ m_po.getClass().getName()
					+ "" - AD_Table_ID="" + getAD_Table_ID() + "", Record_ID="" + getRecord_ID());
			//
			if (!m_po.save())
			{
				success = false;
				processMsg = ""SaveError"";
				ValueNamePair ppE = CLogger.retrieveError();
				if (ppE == null)
					ppE = CLogger.retrieveWarning();
				if (ppE != null)
					processMsg += "" "" + ppE.getValue() + "": "" + ppE.getName();
			}
			if (!success)
			{
				if ((processMsg == null) || (processMsg.length() == 0))
				{
					processMsg = ""PerformWork Error - "" + m_node.toStringX();
					if (doc != null)	//	problem: status will be rolled back
						processMsg += "" - DocStatus="" + doc.getDocStatus();
				}
				throw new Exception(processMsg);
			}
			return success;
		}	//	DocumentAction

		/******	Report						******/
		else if (X_AD_WF_Node.ACTION_AppsReport.equals(action))
		{
			log.fine(""Report:AD_Process_ID="" + m_node.getAD_Process_ID());
			//	Process
			MProcess process = MProcess.get(getCtx(), m_node.getAD_Process_ID());
			if (!process.isReport() || (process.getAD_ReportView_ID() == 0))
				throw new IllegalStateException(""Not a Report AD_Process_ID="" + m_node.getAD_Process_ID());
			//
			ProcessInfo pi = new ProcessInfo (m_node.getName(true), m_node.getAD_Process_ID(),
				getAD_Table_ID(), getRecord_ID());
			pi.setAD_User_ID(getAD_User_ID());
			pi.setAD_Client_ID(getAD_Client_ID());
			MPInstance pInstance = new MPInstance(process, getRecord_ID());
			fillParameter(pInstance, p_trx);
			pi.setAD_PInstance_ID(pInstance.getAD_PInstance_ID());
			//	Report
			ReportEngine re = ReportEngine.get(getCtx(), pi);
			if (re == null)
				throw new IllegalStateException(""Cannot create Report AD_Process_ID="" + m_node.getAD_Process_ID());
			File report = re.getPDF();
			//	Notice
			int AD_Message_ID = 753;		//	HARDCODED WorkflowResult
			MNote note = new MNote(getCtx(), AD_Message_ID, getAD_User_ID(), p_trx);
			note.setTextMsg(m_node.getName(true));
			note.setDescription(m_node.getDescription(true));
			note.setRecord(getAD_Table_ID(), getRecord_ID());
			note.save();
			//	Attachment
			MAttachment attachment = new MAttachment (getCtx(), X_AD_Note.Table_ID, note.getAD_Note_ID(), get_Trx());
			attachment.addEntry(report);
			attachment.setTextMsg(m_node.getName(true));
			attachment.save();
			return true;
		}

		/******	Process						******/
		else if (X_AD_WF_Node.ACTION_AppsProcess.equals(action))
		{
			log.fine(""Process:AD_Process_ID="" + m_node.getAD_Process_ID());
			//	Process
			MProcess process = MProcess.get(getCtx(), m_node.getAD_Process_ID());
			MPInstance pInstance = new MPInstance(process, getRecord_ID());
			fillParameter(pInstance, p_trx);
			//
			ProcessInfo pi = new ProcessInfo (m_node.getName(true), m_node.getAD_Process_ID(),
				getAD_Table_ID(), getRecord_ID());
			pi.setAD_User_ID(getAD_User_ID());
			pi.setAD_Client_ID(getAD_Client_ID());
			pi.setAD_PInstance_ID(pInstance.getAD_PInstance_ID());
			return process.processIt(pi, p_trx);
		}

		/******	TODO Start Task				******/
		else if (X_AD_WF_Node.ACTION_AppsTask.equals(action))
		{
			log.warning (""Task:AD_Task_ID="" + m_node.getAD_Task_ID());
		}

		/******	EMail						******/
		else if (X_AD_WF_Node.ACTION_EMail.equals(action))
		{
			log.fine (""EMail:EMailRecipient="" + m_node.getEMailRecipient());
			getPO(p_trx);
			if (m_po == null)
				throw new Exception(""Persistent Object not found - AD_Table_ID=""
					+ getAD_Table_ID() + "", Record_ID="" + getRecord_ID());
			if (m_po instanceof DocAction)
			{
				m_emails = new ArrayList<String>();
				sendEMail();
				setTextMsg(m_emails.toString());
			}
			return true;	//	done
		}	//	EMail

		/******	Set Variable				******/
		else if (X_AD_WF_Node.ACTION_SetVariable.equals(action))
		{
			String value = m_node.getAttributeValue();
			log.fine(""SetVariable:AD_Column_ID="" + m_node.getAD_Column_ID()
				+ "" to "" +  value);
			MColumn column = m_node.getColumn();
			int dt = column.getAD_Reference_ID();
			return setVariable (value, dt, null);
		}	//	SetVariable

		/******	TODO Start WF Instance		******/
		else if (X_AD_WF_Node.ACTION_SubWorkflow.equals(action))
		{
			log.warning (""Workflow:AD_Workflow_ID="" + m_node.getAD_Workflow_ID());
		}

		/******	User Choice					******/
		else if (X_AD_WF_Node.ACTION_UserChoice.equals(action))
		{
			log.fine(""UserChoice:AD_Column_ID="" + m_node.getAD_Column_ID());
			//	Approval
			if (m_node.isUserApproval()
				&& (getPO() instanceof DocAction))
			{
				DocAction doc = (DocAction)m_po;
				boolean autoApproval = false;
				//	Approval Hierarchy
				if (isInvoker())
				{
					//	Set Approver
					int startAD_User_ID = getAD_User_ID();
					if (startAD_User_ID == 0)
						startAD_User_ID = doc.getDoc_User_ID();
					int nextAD_User_ID = getApprovalUser(startAD_User_ID,
						doc.getC_Currency_ID(), doc.getApprovalAmt(),
						doc.getAD_Org_ID(),
						startAD_User_ID == doc.getDoc_User_ID());	//	own doc
					//	same user = approved
					autoApproval = startAD_User_ID == nextAD_User_ID;
					if (!autoApproval)
						setAD_User_ID(nextAD_User_ID);
				}
				// Approval is supervisor of the invoker
				else if (getResponsible().isInvokerOrganization())
				{
					// find supervisor for the organization of invoker
					MOrgInfo org = MOrgInfo.get(getCtx(), m_po.getAD_Org_ID(), null);
					if (org.getSupervisor_ID() == 0)
						log.fine(""No Supervisor for AD_Org_ID="" + m_po.getAD_Org_ID());
					else {
						setAD_User_ID(org.getSupervisor_ID());
					}					
				}
				// Approval is supervisor of specified organization
				else if (getResponsible().isOrganization())
				{
					// find supervisor for the specified organization
					MOrgInfo org = MOrgInfo.get(getCtx(), getResponsible().getAD_Org_ID(), null);
					if (org.getSupervisor_ID() == 0)
						log.fine(""No Supervisor for AD_Org_ID="" + getResponsible().getAD_Org_ID());
					else {
						setAD_User_ID(org.getSupervisor_ID());
					}					
				}
				else	//	fixed Approver
				{
					MWFResponsible resp = getResponsible();
					autoApproval = resp.getAD_User_ID() == doc.getDoc_User_ID();
					if (!autoApproval && (resp.getAD_User_ID() != 0))
						setAD_User_ID(resp.getAD_User_ID());
				}
				if (autoApproval
					&& doc.processIt(DocActionConstants.ACTION_Approve)
					&& doc.save())
					return true;	//	done
			}	//	approval
			return false;	//	wait for user
		}
		/******	User Workbench				******/
		else if (X_AD_WF_Node.ACTION_UserWorkbench.equals(action))
		{
			log.fine(""Workbench:?"");
			return false;
		}
		/******	User Form					******/
		else if (X_AD_WF_Node.ACTION_UserForm.equals(action))
		{
			log.fine(""Form:AD_Form_ID="" + m_node.getAD_Form_ID());
			return false;
		}
		/******	User Window					******/
		else if (X_AD_WF_Node.ACTION_UserWindow.equals(action))
		{
			log.fine(""Window:AD_Window_ID="" + m_node.getAD_Window_ID());
			return false;
		}
		//
		throw new IllegalArgumentException(""Invalid Action (Not Implemented) ="" + action);
	}	//	performWork
"
org.compiere.wf.MWFActivity.setVariable,MWFActivity.java,"boolean setVariable(String value, int displayType, String textMsg) throws Exception
	{
		m_newValue = null;
		getPO();
		if (m_po == null)
			throw new Exception(""Persistent Object not found - AD_Table_ID=""
				+ getAD_Table_ID() + "", Record_ID="" + getRecord_ID());
		//	Set Value
		Object dbValue = null;
		if (value == null)
			;
		else if (displayType == DisplayTypeConstants.YesNo)
			dbValue = Boolean.valueOf(""Y"".equals(value));
		else if (FieldType.isNumeric(displayType))
			dbValue = new BigDecimal (value);
		else
			dbValue = value;
		m_po.set_ValueOfColumn(getNode().getAD_Column_ID(), dbValue);
		m_po.save();
		Object dbValueNew = m_po.get_ValueOfColumn(getNode().getAD_Column_ID());
		if ((dbValue != null) && !dbValue.equals(dbValueNew))
		{
			if (!value.equals(dbValueNew))
				throw new Exception(""Persistent Object not updated - AD_Table_ID=""
						+ getAD_Table_ID() + "", Record_ID="" + getRecord_ID()
						+ "" - Should="" + value + "", Is="" + dbValueNew);
		}
		//	Info
		String msg = getNode().getAttributeName() + ""="" + value;
		if ((textMsg != null) && (textMsg.length() > 0))
			msg += "" - "" + textMsg;
		setTextMsg (msg);
		m_newValue = value;
		return true;
	}	//	setVariable
"
org.compiere.wf.MWFActivity.setUserChoice,MWFActivity.java,"boolean setUserChoice (int AD_User_ID, String value, int displayType,
		String textMsg) throws Exception
	{
		//	Check if user approves own document when a role is responsible
		if (getNode().isUserApproval() && (getPO() instanceof DocAction))
		{
			DocAction doc = (DocAction)m_po;
			MUser user = new MUser (getCtx(), AD_User_ID, null);
			MRole[] roles = user.getRoles(m_po.getAD_Org_ID());
			boolean canApproveOwnDoc = false;
			for (MRole element : roles) {
				if (element.isCanApproveOwnDoc())
				{
					canApproveOwnDoc = true;
					break;
				}	//	found a role which allows to approve own document
			}
			if (!canApproveOwnDoc)
			{
				String info = user.getName() + "" cannot approve own document "" + doc;
				addTextMsg(info);
				log.fine(info);
				return false;		//	ignore
			}
		}

		setWFState (StateEngine.STATE_Running);
		setAD_User_ID(AD_User_ID);
		boolean ok = setVariable (value, displayType, textMsg);
		if (!ok)
			return false;

		String newState = StateEngine.STATE_Completed;
		//	Approval
		if (getNode().isUserApproval() && (getPO() instanceof DocAction))
		{
			DocAction doc = (DocAction)m_po;
			try
			{
				//	Not pproved
				if (!""Y"".equals(value))
				{
					newState = StateEngine.STATE_Aborted;
					if (!(doc.processIt (DocActionConstants.ACTION_Reject)))
						setTextMsg (""Cannot Reject - Document Status: "" + doc.getDocStatus());
				}
				else
				{
					if (isInvoker())
					{
						int startAD_User_ID = getAD_User_ID();
						if (startAD_User_ID == 0)
							startAD_User_ID = doc.getDoc_User_ID();
						int nextAD_User_ID = getApprovalUser(startAD_User_ID,
							doc.getC_Currency_ID(), doc.getApprovalAmt(),
							doc.getAD_Org_ID(),
							startAD_User_ID == doc.getDoc_User_ID());	//	own doc
						//	No Approver
						if (nextAD_User_ID <= 0)
						{
							newState = StateEngine.STATE_Aborted;
							setTextMsg (""Cannot Approve - No Approver"");
							doc.processIt (DocActionConstants.ACTION_Reject);
						}
						else if (startAD_User_ID != nextAD_User_ID)
						{
							forwardTo(nextAD_User_ID, ""Next Approver"");
							newState = StateEngine.STATE_Suspended;
						}
						else	//	Approve
						{
							if (!(doc.processIt (DocActionConstants.ACTION_Approve)))
							{
								newState = StateEngine.STATE_Aborted;
								setTextMsg (""Cannot Approve - Document Status: "" + doc.getDocStatus());
							}
						}
					}
					//	No Invoker - Approve
					else if (!(doc.processIt (DocActionConstants.ACTION_Approve)))
					{
						newState = StateEngine.STATE_Aborted;
						setTextMsg (""Cannot Approve - Document Status: "" + doc.getDocStatus());
					}
				}
				doc.save();
			}
			catch (Exception e)
			{
				newState = StateEngine.STATE_Terminated;
				setTextMsg (""User Choice: "" + e.toString());
				log.log(Level.WARNING, """", e);
			}
			//	Send Approval Notification
			if (newState.equals(StateEngine.STATE_Aborted))
			{
				MClient client = MClient.get(getCtx(), doc.getAD_Client_ID());
				client.sendEMail(doc.getDoc_User_ID(),
					doc.getDocumentInfo() + "": "" + Msg.getMsg(getCtx(), ""NotApproved""),
					doc.getSummary()
					+ ""\n"" + doc.getProcessMsg()
					+ ""\n"" + getTextMsg(),
					doc.createPDF());
			}
		}
		setWFState (newState);
		return ok;
	}	//	setUserChoice
"
org.compiere.wf.MWFActivity.forwardTo,MWFActivity.java,"boolean forwardTo (int AD_User_ID, String textMsg)
	{
		if (AD_User_ID == getAD_User_ID())
		{
			log.log(Level.WARNING, ""Same User - AD_User_ID="" + AD_User_ID);
			return false;
		}
		//
		MUser oldUser = MUser.get(getCtx(), getAD_User_ID());
		MUser user = MUser.get(getCtx(), AD_User_ID);
		if ((user == null) || (user.get_ID() == 0))
		{
			log.log(Level.WARNING, ""Does not exist - AD_User_ID="" + AD_User_ID);
			return false;
		}
		//	Update
		setAD_User_ID (user.getAD_User_ID());
		setTextMsg(textMsg);
		save();
		//	Close up Old Event
		getEventAudit();
		m_audit.setAD_User_ID(oldUser.getAD_User_ID());
		m_audit.setTextMsg(getTextMsg());
		m_audit.setAttributeName(""AD_User_ID"");
		m_audit.setOldValue(oldUser.getName()+ ""(""+oldUser.getAD_User_ID()+"")"");
		m_audit.setNewValue(user.getName()+ ""(""+user.getAD_User_ID()+"")"");
		//
		m_audit.setWFState(getWFState());
		m_audit.setEventType(X_AD_WF_EventAudit.EVENTTYPE_StateChanged);
		long ms = System.currentTimeMillis() - m_audit.getCreated().getTime();
		m_audit.setElapsedTimeMS(new BigDecimal(ms));
		m_audit.save();
		//	Create new one
		m_audit = new MWFEventAudit(this);
		m_audit.save();
		return true;
	}	//	forwardTo
"
org.compiere.wf.MWFActivity.setUserConfirmation,MWFActivity.java,"void setUserConfirmation (int AD_User_ID, String textMsg)
	{
		log.fine(textMsg);
		setWFState (StateEngine.STATE_Running);
		setAD_User_ID(AD_User_ID);
		if (textMsg != null)
			setTextMsg (textMsg);
		setWFState (StateEngine.STATE_Completed);
	}	//	setUserConfirmation
"
org.compiere.wf.MWFActivity.fillParameter,MWFActivity.java,"void fillParameter(MPInstance pInstance, Trx p_trx)
	{
		getPO(p_trx);
		//
		MWFNodePara[] nParams = m_node.getParameters();
		MPInstancePara[] iParams = pInstance.getParameters();
		for (MPInstancePara iPara : iParams) {
			for (MWFNodePara nPara : nParams) {
				if (iPara.getParameterName().equals(nPara.getAttributeName()))
				{
					String variableName = nPara.getAttributeValue();
					log.fine(nPara.getAttributeName()
						+ "" = "" + variableName);
					//	Value - Constant/Variable
					Object value = variableName;
					if ((variableName == null)
						|| ((variableName != null) && (variableName.length() == 0)))
						value = null;
					else if ((variableName.indexOf(""@"") != -1) && (m_po != null))	//	we have a variable
					{
						//	Strip
						int index = variableName.indexOf(""@"");
						String columnName = variableName.substring(index+1);
						index = columnName.indexOf(""@"");
						if (index == -1)
						{
							log.warning(nPara.getAttributeName()
								+ "" - cannot evaluate="" + variableName);
							break;
						}
						columnName = columnName.substring(0, index);
						index = m_po.get_ColumnIndex(columnName);
						if (index != -1)
						{
							value = m_po.get_Value(index);
						}
						else	//	not a column
						{
							//	try Env
							String env = getCtx().getContext( columnName);
							if (env.length() == 0)
							{
								log.warning(nPara.getAttributeName()
									+ "" - not column nor environment ="" + columnName
									+ ""("" + variableName + "")"");
								break;
							}
							else
								value = env;
						}
					}	//	@variable@

					//	No Value
					if (value == null)
					{
						if (nPara.isMandatory())
							log.warning(nPara.getAttributeName()
								+ "" - empty - mandatory!"");
						else
							log.fine(nPara.getAttributeName()
								+ "" - empty"");
						break;
					}

					//	Convert to Type
					try
					{
						if (FieldType.isNumeric(nPara.getDisplayType())
							|| FieldType.isID(nPara.getDisplayType()))
						{
							BigDecimal bd = null;
							if (value instanceof BigDecimal)
								bd = (BigDecimal)value;
							else if (value instanceof Integer)
								bd = new BigDecimal (((Integer)value).intValue());
							else
								bd = new BigDecimal (value.toString());
							iPara.setP_Number(bd);
							log.fine(nPara.getAttributeName()
								+ "" = "" + variableName + "" (="" + bd + ""=)"");
						}
						else if (FieldType.isDate(nPara.getDisplayType()))
						{
							Timestamp ts = null;
							if (value instanceof Timestamp)
								ts = (Timestamp)value;
							else
								ts = Timestamp.valueOf(value.toString());
							iPara.setP_Date(ts);
							log.fine(nPara.getAttributeName()
								+ "" = "" + variableName + "" (="" + ts + ""=)"");
						}
						else
						{
							iPara.setP_String(value.toString());
							log.fine(nPara.getAttributeName()
								+ "" = "" + variableName
								+ "" (="" + value + ""=) "" + value.getClass().getName());
						}
						if (!iPara.save())
							log.warning(""Not Saved - "" + nPara.getAttributeName());
					}
					catch (Exception e)
					{
						log.warning(nPara.getAttributeName()
							+ "" = "" + variableName + "" ("" + value
							+ "") "" + value.getClass().getName()
							+ "" - "" + e.getLocalizedMessage());
					}
					break;
				}
			}	//	node parameter loop
		}	//	instance parameter loop
	}	//	fillParameter
"
org.compiere.wf.MWFActivity.postImmediate,MWFActivity.java,"void postImmediate()
	{
		if (CConnection.get().isAppsServerOK(false))
		{
			try
			{
				Server server = CConnection.get().getServer();
				if (server != null)
				{
					String error = server.postImmediate(Env.getCtx(),
						m_postImmediate.getAD_Client_ID(),
						m_postImmediate.get_Table_ID(), m_postImmediate.get_ID(),
						true, null);
					m_postImmediate.get_Logger().config(""Server: "" + error == null ? ""OK"" : error);
					return;
				}
				else
					m_postImmediate.get_Logger().config(""NoAppsServer"");
			}
			catch (RemoteException e)
			{
				m_postImmediate.get_Logger().config(""(RE) "" + e.getMessage());
			}
			catch (Exception e)
			{
				m_postImmediate.get_Logger().config(""(ex) "" + e.getMessage());
			}
		}
	}	//	PostImmediate
"
org.compiere.wf.MWFActivity.sendEMail,MWFActivity.java,"void sendEMail()
	{
		DocAction doc = (DocAction)m_po;
		MMailText text = new MMailText (getCtx(), m_node.getR_MailText_ID(), null);
		text.setPO(m_po, true);
		//
		String subject = doc.getDocumentInfo()
			+ "": "" + text.getMailHeader();
		String message = text.getMailText(true)
			+ ""\n-----\n"" + doc.getDocumentInfo()
			+ ""\n"" + doc.getSummary();
		File pdf = doc.createPDF();
		//
		MClient client = MClient.get(doc.getCtx(), doc.getAD_Client_ID());

		//	Explicit EMail
		sendEMail(client, 0, m_node.getEMail(), subject, message, pdf);
		//	Recipient Type
		String recipient = m_node.getEMailRecipient();
		//	email to document user
		if ((recipient == null) || (recipient.length() == 0))
			sendEMail(client, doc.getDoc_User_ID(), null, subject, message, pdf);
		else if (recipient.equals(X_AD_WF_Node.EMAILRECIPIENT_DocumentBusinessPartner))
		{
			int index = m_po.get_ColumnIndex(""AD_User_ID"");
			if (index > 0)
			{
				Object oo = m_po.get_Value(index);
				if (oo instanceof Integer)
				{
					int AD_User_ID = ((Integer)oo).intValue();
					if (AD_User_ID != 0)
						sendEMail(client, AD_User_ID, null, subject, message, pdf);
					else
						log.fine(""No User in Document"");
				}
				else
					log.fine(""Empty User in Document"");
			}
			else
				log.fine(""No User Field in Document"");
		}
		else if (recipient.equals(X_AD_WF_Node.EMAILRECIPIENT_DocumentOwner))
			sendEMail(client, doc.getDoc_User_ID(), null, subject, message, pdf);
		else if (recipient.equals(X_AD_WF_Node.EMAILRECIPIENT_WFResponsible))
		{
			MWFResponsible resp = getResponsible();
			if (resp.isInvoker())
				sendEMail(client, doc.getDoc_User_ID(), null, subject, message, pdf);
			else if (resp.isHuman())
				sendEMail(client, resp.getAD_User_ID(), null, subject, message, pdf);
			else if (resp.isRole())
			{
				MRole role = resp.getRole();
				if (role != null)
				{
					MUser[] users = MUser.getWithRole(role);
					for (MUser element : users)
						sendEMail(client, element.getAD_User_ID(), null, subject, message, pdf);
				}
			}
			else if (resp.isOrganization())
			{
				MOrgInfo org = MOrgInfo.get(getCtx(), m_po.getAD_Org_ID(), null);
				if (org.getSupervisor_ID() == 0)
					log.fine(""No Supervisor for AD_Org_ID="" + m_po.getAD_Org_ID());
				else
					sendEMail(client, org.getSupervisor_ID(), null, subject, message, pdf);
			}
		}
	}	//	sendEMail
"
org.compiere.wf.MWFActivity.sendEMail,MWFActivity.java,"void sendEMail (MClient client, int AD_User_ID, String email,
		String subject, String message, File pdf)
	{
		if (AD_User_ID != 0)
		{
			MUser user = MUser.get(getCtx(), AD_User_ID);
			email = user.getEMail();
			if ((email != null) && (email.length() > 0))
			{
				email = email.trim();
				if (!m_emails.contains(email))
				{
					client.sendEMail(null, user, subject, message, pdf);
					m_emails.add(email);
				}
			}
			else
				log.info(""No EMail for User "" + user.getName());
		}
		else if ((email != null) && (email.length() > 0))
		{
			//	Just one
			if (email.indexOf("";"") == -1)
			{
				email = email.trim();
				if (!m_emails.contains(email))
				{
					client.sendEMail(email, null, subject, message, pdf);
					m_emails.add(email);
				}
				return;
			}
			//	Multiple EMail
			StringTokenizer st = new StringTokenizer(email, "";"");
			while (st.hasMoreTokens())
			{
				String email1 = st.nextToken().trim();
				if (email1.length() == 0)
					continue;
				if (!m_emails.contains(email1))
				{
					client.sendEMail(email1, null, subject, message, pdf);
					m_emails.add(email1);
				}
			}
		}
	}	//	sendEMail
"
org.compiere.wf.MWFActivity.getHistoryHTML,MWFActivity.java,"String getHistoryHTML()
	{
		SimpleDateFormat format = DisplayType.getDateFormat(DisplayTypeConstants.DateTime);
		StringBuffer sb = new StringBuffer();
		MWFEventAudit[] events = MWFEventAudit.get(getCtx(), getAD_WF_Process_ID());
		for (MWFEventAudit audit : events) {
			//	sb.append(""<p style=\""width:400\"">"");
			sb.append(""<p>"");
			sb.append(format.format(audit.getCreated()))
				.append("" "")
				.append(getHTMLpart(""b"", audit.getNodeName()))
				.append("": "")
				.append(getHTMLpart(null, audit.getDescription()))
				.append(getHTMLpart(""i"", audit.getTextMsg()));
			sb.append(""</p>"");
		}
		return sb.toString();
	}	//	getHistory
"
org.compiere.wf.MWFActivity.getHTMLpart,MWFActivity.java,"StringBuffer getHTMLpart (String tag, String content)
	{
		StringBuffer sb = new StringBuffer();
		if ((content == null) || (content.length() == 0))
			return sb;
		if ((tag != null) && (tag.length() > 0))
			sb.append(""<"").append(tag).append("">"");
		sb.append(content);
		if ((tag != null) && (tag.length() > 0))
			sb.append(""</"").append(tag).append("">"");
		return sb;
	}	//	getHTMLpart
"
org.compiere.wf.MWFActivity.isPdfAttachment,MWFActivity.java,"boolean isPdfAttachment()
	{
		if (getPO() == null)
			return false;
		return m_po.isPdfAttachment();
	}	//	isPDFAttachment
"
org.compiere.wf.MWFActivity.getPdfAttachment,MWFActivity.java,"byte[] getPdfAttachment()
	{
		if (getPO() == null)
			return null;
		return m_po.getPdfAttachment();
	}	//	getPdfAttachment
"
org.compiere.wf.MWFActivity.toString,MWFActivity.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MWFActivity["");
		sb.append(get_ID()).append("",Node="");
		if (m_node == null)
			sb.append(getAD_WF_Node_ID());
		else
			sb.append(m_node.getName());
		sb.append("",State="").append(getWFState())
			.append("",AD_User_ID="").append(getAD_User_ID())
			.append("","").append(getCreated())
			.append (""]"");
		return sb.toString ();
	} 	//	toString
"
org.compiere.wf.MWFActivity.toStringX,MWFActivity.java,"String toStringX ()
	{
		StringBuffer sb = new StringBuffer();
		sb.append(getWFStateText())
			.append("": "").append(getNode().getName());
		if (getAD_User_ID() > 0)
		{
			MUser user = MUser.get(getCtx(), getAD_User_ID());
			sb.append("" ("").append(user.getName()).append("")"");
		}
		return sb.toString();
	}	//	toStringX
"
org.compiere.wf.MDocAction.get,MDocAction.java,"MDocAction get()
	{
		return get(0, true);
	}	//	get
"
org.compiere.wf.MDocAction.get,MDocAction.java,"MDocAction get (int AD_Client_ID)
	{
		return get(AD_Client_ID, false);
	}	//	get
"
org.compiere.wf.MDocAction.get,MDocAction.java,"MDocAction get (int AD_Client_ID, boolean createIfNotExists)
	{
	    MDocAction retValue = s_cache.get(AD_Client_ID);
	    if (retValue != null)
		    return retValue;
	    //	None Found
	    if (!createIfNotExists)
	    {
	    	AD_Client_ID = 0;
	    	retValue = s_cache.get(AD_Client_ID);
	    }
	    if (retValue == null)
	    {
	    	retValue = new MDocAction(AD_Client_ID);
	    	s_cache.put(AD_Client_ID, retValue);
	    }
	    return retValue;
	}	//	get
"
org.compiere.wf.MDocAction.resetCache,MDocAction.java,"void resetCache()
	{
		s_cache.clear();
	}	//	resetCache
"
org.compiere.wf.MDocAction.addRule,MDocAction.java,"boolean addRule(MDocActionRule rule)
    {
    	if (s_rules.size() == 0)
    		addDefaultRules();

    	if ((rule != null)
    		&& Util.isEmpty(rule.getDocAction()))
    	{
    		return s_rules.add(rule);
    	}
   		return false;
    }	//	addRule
"
org.compiere.wf.MDocAction.getRules,MDocAction.java,"ArrayList<MDocActionRule> getRules()
    {
    	if (s_rules.size() == 0)
    		addDefaultRules();
    	return s_rules;
    }
"
org.compiere.wf.MDocAction.getDocActions,MDocAction.java,"ArrayList<String> getDocActions (String docBaseType, String docStatus)
	{
		ArrayList<String> actions = new ArrayList<String>();

		//	Locked
		String Processing = null;
		if (""Y"".equals(Processing))
			actions.add(DocActionConstants.ACTION_Unlock);

		//	No Status
		if (Util.isEmpty(docStatus))
			return actions;

		//	Approval required           ..  NA
		if (docStatus.equals(DocActionConstants.STATUS_NotApproved))
		{
			actions.add(DocActionConstants.ACTION_Prepare);
			actions.add(DocActionConstants.ACTION_Void);
		}
		//	Draft/Invalid				..  DR/IN
		else if (docStatus.equals(DocActionConstants.STATUS_Drafted)
			|| docStatus.equals(DocActionConstants.STATUS_Invalid))
		{
			actions.add(DocActionConstants.ACTION_Complete);
		//	actions.add(DocumentEngine.ACTION_Prepare);
			actions.add(DocActionConstants.ACTION_Void);
		}
		//	In Process                  ..  IP
		else if (docStatus.equals(DocActionConstants.STATUS_InProgress)
			|| docStatus.equals(DocActionConstants.STATUS_Approved))
		{
			actions.add(DocActionConstants.ACTION_Complete);
			actions.add(DocActionConstants.ACTION_Void);
		}
		//	Complete                    ..  CO
		else if (docStatus.equals(DocActionConstants.STATUS_Completed))
		{
			actions.add(DocActionConstants.ACTION_Close);
		}
		//	Waiting Payment
		else if (docStatus.equals(DocActionConstants.STATUS_WaitingPayment)
			|| docStatus.equals(DocActionConstants.STATUS_WaitingConfirmation))
		{
			actions.add(DocActionConstants.ACTION_Void);
			actions.add(DocActionConstants.ACTION_Prepare);
		}
		//	Closed, Voided, REversed    ..  CL/VO/RE
		else if (docStatus.equals(DocActionConstants.STATUS_Closed)
			|| docStatus.equals(DocActionConstants.STATUS_Voided)
			|| docStatus.equals(DocActionConstants.STATUS_Reversed))
			;

		//	No DocBaseType
		if (Util.isEmpty(docBaseType))
			return actions;

		addStandardActions(docBaseType, actions);

		//	Apply Rules
		ArrayList<MDocActionRule> rules = getRules();
		for (MDocActionRule rule : rules)
        {
			//	Check Client, DocBaseType, Status
			if (!rule.isAD_Client_ID(m_AD_Client_ID))
				continue;
			if (!rule.isDocBaseType(docBaseType))
				continue;
			if (!rule.isDocStatus(docStatus))
				continue;

			//	Check Action
			String da = rule.getDocAction();
			if (Util.isEmpty(da))
				continue;

			//	Apply Rule
			if (rule.isEnabled())
			{
				if (!actions.contains(da))		//	add if not exists
					actions.add(da);
			}
			else
				actions.remove(da);				// remove
        }
		log.config(""#"" + actions.size());
		return actions;
	}	//	getDocActions
"
org.compiere.wf.MDocAction.addStandardActions,MDocAction.java,"void addStandardActions(String docBaseType, ArrayList<String> actions)
	{
		int AD_Table_ID = 0;
    	MDocBaseType[] baseTypes = MDocBaseType.getAll(Env.getCtx());
    	for (MDocBaseType type : baseTypes)
        {
    		if (type.getDocBaseType().equals(docBaseType))
    		{
    			AD_Table_ID = type.getAD_Table_ID();
    			break;
    		}
        }
    	if (AD_Table_ID == 0)
    		return;


		/********************
		 *  Order
		 *
		if (m_AD_Table_ID == X_C_Order.Table_ID)
		{
			//	Draft                       ..  DR/IP/IN
			if (DocStatus.equals(org.compiere.vos.DocActionConstants.STATUS_Drafted)
				|| DocStatus.equals(org.compiere.vos.DocActionConstants.STATUS_InProgress)
				|| DocStatus.equals(org.compiere.vos.DocActionConstants.STATUS_Invalid))
			{
				options[index++] = org.compiere.vos.DocActionConstants.ACTION_Prepare;
				options[index++] = org.compiere.vos.DocActionConstants.ACTION_Close;
				//	Draft Sales Order Quote/Proposal - Process
				if (isSOTrx
					&& (""OB"".equals(OrderType) || ""ON"".equals(OrderType)))
					DocAction = org.compiere.vos.DocActionConstants.ACTION_Prepare;
			}
			//	Complete                    ..  CO
			else if (DocStatus.equals(org.compiere.vos.DocActionConstants.STATUS_Completed))
			{
				options[index++] = org.compiere.vos.DocActionConstants.ACTION_Void;
				options[index++] = org.compiere.vos.DocActionConstants.ACTION_ReActivate;
			}
			else if (DocStatus.equals(org.compiere.vos.DocActionConstants.STATUS_WaitingPayment))
			{
				options[index++] = org.compiere.vos.DocActionConstants.ACTION_ReActivate;
				options[index++] = org.compiere.vos.DocActionConstants.ACTION_Close;
			}
		}
		/********************
		 *  Shipment
		 *
		else if (m_AD_Table_ID == X_M_InOut.Table_ID)
		{
			//	Complete                    ..  CO
			if (DocStatus.equals(org.compiere.vos.DocActionConstants.STATUS_Completed))
			{
				options[index++] = org.compiere.vos.DocActionConstants.ACTION_Void;
				options[index++] = org.compiere.vos.DocActionConstants.ACTION_Reverse_Correct;
			}
		}
		/********************
		 *  Invoice
		 *
		else if (m_AD_Table_ID == X_C_Invoice.Table_ID)
		{
			//	Complete                    ..  CO
			if (DocStatus.equals(org.compiere.vos.DocActionConstants.STATUS_Completed))
			{
				options[index++] = org.compiere.vos.DocActionConstants.ACTION_Void;
				options[index++] = org.compiere.vos.DocActionConstants.ACTION_Reverse_Correct;
			}
		}

		/********************
		 *  Cash Journal
		 *
		else if (m_AD_Table_ID == X_C_Cash.Table_ID)
		{
			//	Draft                    ..  DR
			if (DocStatus.equals(org.compiere.vos.DocActionConstants.STATUS_Drafted))
			{
				//Void is not a valid option for Cash Journal in Drafted status
				int t1,t2;
				for(t1=0,t2=0;t1<index;t1++,t2++)
				{
					if(	options[t1] == org.compiere.vos.DocActionConstants.ACTION_Void)
						t2++;
					options[t1]=options[t2];
				}
				index--;
			}
		}


		/********************
		 *  Payment
		 *
		else if (m_AD_Table_ID == X_C_Payment.Table_ID)
		{
			//	Complete                    ..  CO
			if (DocStatus.equals(org.compiere.vos.DocActionConstants.STATUS_Completed))
			{
				options[index++] = org.compiere.vos.DocActionConstants.ACTION_Void;
				options[index++] = org.compiere.vos.DocActionConstants.ACTION_Reverse_Correct;
			}
		}
		/********************
		 *  GL Journal
		 *
		else if ((m_AD_Table_ID == X_GL_Journal.Table_ID) || (m_AD_Table_ID == X_GL_JournalBatch.Table_ID))
		{
			//	Complete                    ..  CO
			if (DocStatus.equals(org.compiere.vos.DocActionConstants.STATUS_Completed))
			{
				options[index++] = org.compiere.vos.DocActionConstants.ACTION_Reverse_Correct;
				options[index++] = org.compiere.vos.DocActionConstants.ACTION_Reverse_Accrual;
			}
		}
		/********************
		 *  Allocation
		 *
		else if (m_AD_Table_ID == X_C_AllocationHdr.Table_ID)
		{
			//	Complete                    ..  CO
			if (DocStatus.equals(org.compiere.vos.DocActionConstants.STATUS_Completed))
			{
				options[index++] = org.compiere.vos.DocActionConstants.ACTION_Void;
				options[index++] = org.compiere.vos.DocActionConstants.ACTION_Reverse_Correct;
			}
		}
		/********************
		 *  Bank Statement
		 *
		else if (m_AD_Table_ID == X_C_BankStatement.Table_ID)
		{
			//	Complete                    ..  CO
			if (DocStatus.equals(org.compiere.vos.DocActionConstants.STATUS_Completed))
			{
				options[index++] = org.compiere.vos.DocActionConstants.ACTION_Void;
			}
		}
		/********************
		 *  Inventory Movement, Physical Inventory
		 *
		else if ((m_AD_Table_ID == X_M_Movement.Table_ID)
			|| (m_AD_Table_ID == X_M_Inventory.Table_ID))
		{
			//	Complete                    ..  CO
			if (DocStatus.equals(org.compiere.vos.DocActionConstants.STATUS_Completed))
			{
				options[index++] = org.compiere.vos.DocActionConstants.ACTION_Void;
				options[index++] = org.compiere.vos.DocActionConstants.ACTION_Reverse_Correct;
			}
		}
		/********************
		 *  Warehouse Task
		 *
		else if (m_AD_Table_ID == X_M_WarehouseTask.Table_ID)
		{
			//	Draft                       ..  DR/IP/IN
			if (DocStatus.equals(org.compiere.vos.DocActionConstants.STATUS_Drafted)
				|| DocStatus.equals(org.compiere.vos.DocActionConstants.STATUS_InProgress)
				|| DocStatus.equals(org.compiere.vos.DocActionConstants.STATUS_Invalid))
			{
				options[index++] = org.compiere.vos.DocActionConstants.ACTION_Prepare;
			}
			//	Complete                    ..  CO
			else if (DocStatus.equals(org.compiere.vos.DocActionConstants.STATUS_Completed))
			{
				options[index++] = org.compiere.vos.DocActionConstants.ACTION_Void;
				options[index++] = org.compiere.vos.DocActionConstants.ACTION_Reverse_Correct;
			}
		}
		/********************
		 *  Work Order
		 *
		else if (m_AD_Table_ID == X_M_WorkOrder.Table_ID)
		{
			//	Draft                       ..  DR/IP/IN
			if (DocStatus.equals(org.compiere.vos.DocActionConstants.STATUS_Drafted)
				|| DocStatus.equals(org.compiere.vos.DocActionConstants.STATUS_InProgress)
				|| DocStatus.equals(org.compiere.vos.DocActionConstants.STATUS_Invalid))
			{
				options[index++] = org.compiere.vos.DocActionConstants.ACTION_Prepare;
			}
			//	Complete                    ..  CO
			else if (DocStatus.equals(org.compiere.vos.DocActionConstants.STATUS_Completed))
			{
				options[index++] = org.compiere.vos.DocActionConstants.ACTION_Void;
			}
		}
		/********************
		 *  Work Order Transaction
		 *
		else if (m_AD_Table_ID == X_M_WorkOrderTransaction.Table_ID)
		{
			//	Draft                       ..  DR/IP/IN
			if (DocStatus.equals(org.compiere.vos.DocActionConstants.STATUS_Drafted)
				|| DocStatus.equals(org.compiere.vos.DocActionConstants.STATUS_InProgress)
				|| DocStatus.equals(org.compiere.vos.DocActionConstants.STATUS_Invalid))
			{
				options[index++] = org.compiere.vos.DocActionConstants.ACTION_Prepare;
			}
			//	Complete                    ..  CO
			else if (DocStatus.equals(org.compiere.vos.DocActionConstants.STATUS_Completed))
			{
				options[index++] = org.compiere.vos.DocActionConstants.ACTION_Void;
				options[index++] = org.compiere.vos.DocActionConstants.ACTION_Reverse_Correct;
			}
		}
		/**/
	}	//
"
org.compiere.wf.MWFNodeNext.setClientOrg,MWFNodeNext.java,"void setClientOrg (int AD_Client_ID, int AD_Org_ID)
	{
		super.setClientOrg (AD_Client_ID, AD_Org_ID);
	}	//	setClientOrg
"
org.compiere.wf.MWFNodeNext.toString,MWFNodeNext.java,"String toString ()
	{
		StringBuffer sb = new StringBuffer (""MWFNodeNext["");
		sb.append(getSeqNo())
			.append("":Node="").append(getAD_WF_Node_ID()).append(""->Next="").append(getAD_WF_Next_ID());
		if (m_conditions != null)
			sb.append("",#"").append(m_conditions.length);
		if (getDescription() != null && getDescription().length() > 0)
			sb.append("","").append(getDescription());
		sb.append (""]"");
		return sb.toString ();
	}	//	toString
"
org.compiere.wf.MWFNodeNext.getConditions,MWFNodeNext.java,"MWFNextCondition[] getConditions(boolean requery)
	{
		if (!requery && m_conditions != null)
			return m_conditions;
		//
		ArrayList<MWFNextCondition> list = new ArrayList<MWFNextCondition>();
		String sql = ""SELECT * FROM AD_WF_NextCondition WHERE AD_WF_NodeNext_ID=? AND IsActive='Y' ORDER BY SeqNo"";
		PreparedStatement pstmt = null;
		try
		{
			pstmt = DB.prepareStatement (sql, get_Trx());
			pstmt.setInt (1, getAD_WF_NodeNext_ID());
			ResultSet rs = pstmt.executeQuery ();
			while (rs.next ())
				list.add(new MWFNextCondition(getCtx(), rs, get_Trx()));
			rs.close ();
			pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			log.log(Level.SEVERE, sql, e);
		}
		try
		{
			if (pstmt != null)
				pstmt.close ();
			pstmt = null;
		}
		catch (Exception e)
		{
			pstmt = null;
		}
		m_conditions = new MWFNextCondition[list.size()];
		list.toArray (m_conditions);
		return m_conditions;
	}	//	getConditions
"
org.compiere.wf.MWFNodeNext.isUnconditional,MWFNodeNext.java,"boolean isUnconditional()
	{
		return !isStdUserWorkflow() && getConditions(false).length == 0;
	}	//	isUnconditional
"
org.compiere.wf.MWFNodeNext.isValidFor,MWFNodeNext.java,"boolean isValidFor (MWFActivity activity)
	{
		if (isStdUserWorkflow())
		{
			PO po = activity.getPO();
			if (po instanceof DocAction)
			{
				DocAction da = (DocAction)po;
				String docStatus = da.getDocStatus();
				String docAction = da.getDocAction();
				if (!DocActionConstants.ACTION_Complete.equals(docAction)
					|| DocActionConstants.STATUS_Completed.equals(docStatus)
					|| DocActionConstants.STATUS_WaitingConfirmation.equals(docStatus)
					|| DocActionConstants.STATUS_WaitingPayment.equals(docStatus)
					|| DocActionConstants.STATUS_Voided.equals(docStatus)
					|| DocActionConstants.STATUS_Closed.equals(docStatus)
					|| DocActionConstants.STATUS_Reversed.equals(docStatus) )
					/*
					|| DocAction.ACTION_Complete.equals(docAction)	
					|| DocAction.ACTION_ReActivate.equals(docAction)	
					|| DocAction.ACTION_None.equals(docAction)
					|| DocAction.ACTION_Post.equals(docAction)
					|| DocAction.ACTION_Unlock.equals(docAction)
					|| DocAction.ACTION_Invalidate.equals(docAction)	) */
				{
					log.fine(""isValidFor =NO= StdUserWF - Status="" + docStatus + "" - Action="" + docAction);
					return false;
				}
			}
		}
		//	No Conditions
		if (getConditions(false).length == 0)
		{
			log.fine(""#0 "" + toString());
			return true;
		}
		//	First condition always AND
		boolean ok = m_conditions[0].evaluate(activity);
		for (int i = 1; i < m_conditions.length; i++)
		{
			if (m_conditions[i].isOr())
				ok = ok || m_conditions[i].evaluate(activity);
			else
				ok = ok && m_conditions[i].evaluate(activity);
		}	//	for all conditions
		log.fine(""isValidFor ("" + ok + "") "" + toString());
		return ok;
	}	//	isValidFor
"
org.compiere.wf.MWFNodeNext.isFromSplitAnd,MWFNodeNext.java,"boolean isFromSplitAnd()
	{
		if (m_fromSplitAnd != null)
			return m_fromSplitAnd.booleanValue();
		return false;
	}	//	getFromSplitAnd
"
org.compiere.wf.MWFNodeNext.setFromSplitAnd,MWFNodeNext.java,"void setFromSplitAnd (boolean fromSplitAnd)
	{
		m_fromSplitAnd = Boolean.valueOf(fromSplitAnd);
	}	//	setFromSplitAnd
"
org.compiere.wf.MWFNodeNext.isToJoinAnd,MWFNodeNext.java,"boolean isToJoinAnd ()
	{
		if (m_toJoinAnd == null && getAD_WF_Next_ID() != 0)
		{
			MWFNode next = MWFNode.get(getCtx(), getAD_WF_Next_ID());
			setToJoinAnd(X_AD_WF_Node.JOINELEMENT_AND.equals(next.getJoinElement()));
		}
		if (m_toJoinAnd != null)
			return m_toJoinAnd.booleanValue();
		return false;
	}	//	getToJoinAnd
"
org.compiere.wf.MWFNodeNext.setToJoinAnd,MWFNodeNext.java,"void setToJoinAnd (boolean toJoinAnd)
	{
		m_toJoinAnd = Boolean.valueOf(toJoinAnd);
	}	//	setToJoinAnd
"
org.compiere.model.MPaymentProcessor.MPaymentProcessor,MPaymentProcessor.java,"public MPaymentProcessor() {
    super();
}"
org.compiere.wf.MWorkflowProcessorLog.MWorkflowProcessorLog,MWorkflowProcessorLog.java,"public MWorkflowProcessorLog() {
    super();
}"
org.compiere.util.WebSessionCtx.WebSessionCtx,WebSessionCtx.java,"public WebSessionCtx() {
    super();
}"
org.compiere.model.MCounterCount.MCounterCount,MCounterCount.java,"public MCounterCount() {
    super();
}"
org.compiere.model.CalloutEngine.CalloutEngine,CalloutEngine.java,"public CalloutEngine() {
    super();
}"
org.compiere.model.MReplicationRun.MReplicationRun,MReplicationRun.java,"public MReplicationRun() {
    super();
}"
org.compiere.process.TableCreateColumns.TableCreateColumns,TableCreateColumns.java,"public TableCreateColumns() {
    super();
}"
org.compiere.process.ReportColumnSet_Copy.ReportColumnSet_Copy,ReportColumnSet_Copy.java,"public ReportColumnSet_Copy() {
    super();
}"
org.compiere.process.ReportLineSet_Copy.ReportLineSet_Copy,ReportLineSet_Copy.java,"public ReportLineSet_Copy() {
    super();
}"
org.compiere.model.MBankAccount.MBankAccount,MBankAccount.java,"public MBankAccount() {
    super();
}"
org.compiere.model.MMedia.MMedia,MMedia.java,"public MMedia() {
    super();
}"
org.compiere.model.MCalendar.MCalendar,MCalendar.java,"public MCalendar() {
    super();
}"
org.compiere.model.MRequisitionLine.MRequisitionLine,MRequisitionLine.java,"public MRequisitionLine() {
    super();
}"
org.compiere.model.CalloutProduction.CalloutProduction,CalloutProduction.java,"public CalloutProduction() {
    super();
}"
org.compiere.model.MSerNoCtl.MSerNoCtl,MSerNoCtl.java,"public MSerNoCtl() {
    super();
}"
org.compiere.model.MMatchPO.MMatchPO,MMatchPO.java,"public MMatchPO() {
    super();
}"
org.compiere.model.MComponentReg.MComponentReg,MComponentReg.java,"public MComponentReg() {
    super();
}"
org.compiere.model.MAttributeUse.MAttributeUse,MAttributeUse.java,"public MAttributeUse() {
    super();
}"
org.compiere.model.MPOS.MPOS,MPOS.java,"public MPOS() {
    super();
}"
org.compiere.model.MRecurring.MRecurring,MRecurring.java,"public MRecurring() {
    super();
}"
org.compiere.model.MKCategory.MKCategory,MKCategory.java,"public MKCategory() {
    super();
}"
org.compiere.report.MReportLine.MReportLine,MReportLine.java,"public MReportLine() {
    super();
}"
org.compiere.model.CalloutRequisition.CalloutRequisition,CalloutRequisition.java,"public CalloutRequisition() {
    super();
}"
org.compiere.model.MValRule.MValRule,MValRule.java,"public MValRule() {
    super();
}"
org.compiere.wf.MWFNodeNext.MWFNodeNext,MWFNodeNext.java,"public MWFNodeNext() {
    super();
}"
org.compiere.report.MReportColumn.MReportColumn,MReportColumn.java,"public MReportColumn() {
    super();
}"
org.compiere.model.MReportView.MReportView,MReportView.java,"public MReportView() {
    super();
}"
org.compiere.model.MDataMigrationPreview.MDataMigrationPreview,MDataMigrationPreview.java,"public MDataMigrationPreview() {
    super();
}"
org.compiere.model.PP_PayPal.PP_PayPal,PP_PayPal.java,"public PP_PayPal() {
    super();
}"
org.compiere.model.PP_Authorize.PP_Authorize,PP_Authorize.java,"public PP_Authorize() {
    super();
}"
org.compiere.model.MDataMigration.MDataMigration,MDataMigration.java,"public MDataMigration() {
    super();
}"
org.compiere.wf.MWorkflowProcessor.MWorkflowProcessor,MWorkflowProcessor.java,"public MWorkflowProcessor() {
    super();
}"
org.compiere.model.MSLAGoal.MSLAGoal,MSLAGoal.java,"public MSLAGoal() {
    super();
}"
org.compiere.model.MFormAccess.MFormAccess,MFormAccess.java,"public MFormAccess() {
    super();
}"
org.compiere.wf.MWFBlock.MWFBlock,MWFBlock.java,"public MWFBlock() {
    super();
}"
org.compiere.model.MLdapUser.MLdapUser,MLdapUser.java,"public MLdapUser() {
    super();
}"
org.compiere.model.MRequestCategory.MRequestCategory,MRequestCategory.java,"public MRequestCategory() {
    super();
}"
org.compiere.model.MAlert.MAlert,MAlert.java,"public MAlert() {
    super();
}"
org.compiere.model.MSLACriteria.MSLACriteria,MSLACriteria.java,"public MSLACriteria() {
    super();
}"
org.compiere.model.MIndex.MIndex,MIndex.java,"public MIndex() {
    super();
}"
org.compiere.model.MJournalBatch.MJournalBatch,MJournalBatch.java,"public MJournalBatch() {
    super();
}"
org.compiere.model.MTransaction.MTransaction,MTransaction.java,"public MTransaction() {
    super();
}"
org.compiere.tools.Strip.Strip,Strip.java,"public Strip() {
    super();
}"
org.compiere.model.MOrder.MOrder,MOrder.java,"public MOrder() {
    super();
}"
org.compiere.model.MJournalLine.MJournalLine,MJournalLine.java,"public MJournalLine() {
    super();
}"
org.compiere.model.MLandedCostAllocation.MLandedCostAllocation,MLandedCostAllocation.java,"public MLandedCostAllocation() {
    super();
}"
org.compiere.model.MIndexLog.MIndexLog,MIndexLog.java,"public MIndexLog() {
    super();
}"
org.compiere.model.MResourceUnAvailable.MResourceUnAvailable,MResourceUnAvailable.java,"public MResourceUnAvailable() {
    super();
}"
org.compiere.model.MAttributeSet.MAttributeSet,MAttributeSet.java,"public MAttributeSet() {
    super();
}"
org.compiere.model.MScheduler.MScheduler,MScheduler.java,"public MScheduler() {
    super();
}"
org.compiere.report.MReportColumnSet.MReportColumnSet,MReportColumnSet.java,"public MReportColumnSet() {
    super();
}"
org.compiere.model.CalloutAssignment.CalloutAssignment,CalloutAssignment.java,"public CalloutAssignment() {
    super();
}"
org.compiere.impexp.BankStatementLoaderInterface.BankStatementLoaderInterface,BankStatementLoaderInterface.java,"public BankStatementLoaderInterface() {
    super();
}"
org.compiere.model.MBankStatementMatcher.MBankStatementMatcher,MBankStatementMatcher.java,"public MBankStatementMatcher() {
    super();
}"
org.compiere.util.ExtensionFileFilter.ExtensionFileFilter,ExtensionFileFilter.java,"public ExtensionFileFilter() {
    super();
}"
org.compiere.model.MSetup.MSetup,MSetup.java,"public MSetup() {
    super();
}"
org.compiere.model.MCash.MCash,MCash.java,"public MCash() {
    super();
}"
org.compiere.util.WebDoc.WebDoc,WebDoc.java,"public WebDoc() {
    super();
}"
org.compiere.model.CalloutOrder.CalloutOrder,CalloutOrder.java,"public CalloutOrder() {
    super();
}"
org.compiere.model.MAssignmentSlot.MAssignmentSlot,MAssignmentSlot.java,"public MAssignmentSlot() {
    super();
}"
org.compiere.model.MDistributionRunDetail.MDistributionRunDetail,MDistributionRunDetail.java,"public MDistributionRunDetail() {
    super();
}"
org.compiere.model.MResource.MResource,MResource.java,"public MResource() {
    super();
}"
org.compiere.model.MMeasure.MMeasure,MMeasure.java,"public MMeasure() {
    super();
}"
org.compiere.model.MTimeExpenseLine.MTimeExpenseLine,MTimeExpenseLine.java,"public MTimeExpenseLine() {
    super();
}"
org.compiere.model.MFactAcct.MFactAcct,MFactAcct.java,"public MFactAcct() {
    super();
}"
org.compiere.model.MReplication.MReplication,MReplication.java,"public MReplication() {
    super();
}"
org.compiere.model.MPackage.MPackage,MPackage.java,"public MPackage() {
    super();
}"
org.compiere.model.MRfQResponseLineQty.MRfQResponseLineQty,MRfQResponseLineQty.java,"public MRfQResponseLineQty() {
    super();
}"
org.compiere.model.MTaxDeclarationAcct.MTaxDeclarationAcct,MTaxDeclarationAcct.java,"public MTaxDeclarationAcct() {
    super();
}"
org.compiere.model.CalloutTimeExpense.CalloutTimeExpense,CalloutTimeExpense.java,"public CalloutTimeExpense() {
    super();
}"
org.compiere.model.MExpenseType.MExpenseType,MExpenseType.java,"public MExpenseType() {
    super();
}"
org.compiere.model.MDiscountSchemaBreak.MDiscountSchemaBreak,MDiscountSchemaBreak.java,"public MDiscountSchemaBreak() {
    super();
}"
org.compiere.model.MCostQueue.MCostQueue,MCostQueue.java,"public MCostQueue() {
    super();
}"
org.compiere.report.MReport.MReport,MReport.java,"public MReport() {
    super();
}"
org.compiere.model.MChatEntry.MChatEntry,MChatEntry.java,"public MChatEntry() {
    super();
}"
org.compiere.model.MPayment.MPayment,MPayment.java,"public MPayment() {
    super();
}"
org.compiere.model.CalloutInOut.CalloutInOut,CalloutInOut.java,"public CalloutInOut() {
    super();
}"
org.compiere.model.MPaySelection.MPaySelection,MPaySelection.java,"public MPaySelection() {
    super();
}"
org.compiere.model.CalloutPaymentAllocate.CalloutPaymentAllocate,CalloutPaymentAllocate.java,"public CalloutPaymentAllocate() {
    super();
}"
org.compiere.model.PP_Optimal.PP_Optimal,PP_Optimal.java,"public PP_Optimal() {
    super();
}"
org.compiere.report.MReportSource.MReportSource,MReportSource.java,"public MReportSource() {
    super();
}"
org.compiere.model.MOrderLine.MOrderLine,MOrderLine.java,"public MOrderLine() {
    super();
}"
org.compiere.wf.MWFNextCondition.MWFNextCondition,MWFNextCondition.java,"public MWFNextCondition() {
    super();
}"
org.compiere.model.MRequestProcessorRoute.MRequestProcessorRoute,MRequestProcessorRoute.java,"public MRequestProcessorRoute() {
    super();
}"
org.compiere.model.MDunningRunLine.MDunningRunLine,MDunningRunLine.java,"public MDunningRunLine() {
    super();
}"
org.compiere.model.GridField.GridField,GridField.java,"public GridField() {
    super();
}"
org.compiere.model.MRequestAction.MRequestAction,MRequestAction.java,"public MRequestAction() {
    super();
}"
org.compiere.model.MProductCosting.MProductCosting,MProductCosting.java,"public MProductCosting() {
    super();
}"
org.compiere.model.MInOutConfirm.MInOutConfirm,MInOutConfirm.java,"public MInOutConfirm() {
    super();
}"
org.compiere.report.core.ResultTableModel.ResultTableModel,ResultTableModel.java,"public ResultTableModel() {
    super();
}"
org.compiere.model.MMovementConfirm.MMovementConfirm,MMovementConfirm.java,"public MMovementConfirm() {
    super();
}"
org.compiere.model.MChangeRequest.MChangeRequest,MChangeRequest.java,"public MChangeRequest() {
    super();
}"
org.compiere.model.MWebProject.MWebProject,MWebProject.java,"public MWebProject() {
    super();
}"
org.compiere.model.MCommissionRun.MCommissionRun,MCommissionRun.java,"public MCommissionRun() {
    super();
}"
org.compiere.model.MPriceListVersion.MPriceListVersion,MPriceListVersion.java,"public MPriceListVersion() {
    super();
}"
org.compiere.impexp.OFXBankStatementHandler.OFXBankStatementHandler,OFXBankStatementHandler.java,"public OFXBankStatementHandler() {
    super();
}"
org.compiere.model.CalloutPaySelection.CalloutPaySelection,CalloutPaySelection.java,"public CalloutPaySelection() {
    super();
}"
org.compiere.model.MPaySelectionLine.MPaySelectionLine,MPaySelectionLine.java,"public MPaySelectionLine() {
    super();
}"
org.compiere.util.WebUser.WebUser,WebUser.java,"public WebUser() {
    super();
}"
org.compiere.util.ASyncProcess.ASyncProcess,ASyncProcess.java,"public ASyncProcess() {
    super();
}"
org.compiere.model.MAllocationLine.MAllocationLine,MAllocationLine.java,"public MAllocationLine() {
    super();
}"
org.compiere.model.GridWorkbench.GridWorkbench,GridWorkbench.java,"public GridWorkbench() {
    super();
}"
org.compiere.model.MRfQResponse.MRfQResponse,MRfQResponse.java,"public MRfQResponse() {
    super();
}"
org.compiere.wf.MWFProcess.MWFProcess,MWFProcess.java,"public MWFProcess() {
    super();
}"
org.compiere.model.MTableIndex.MTableIndex,MTableIndex.java,"public MTableIndex() {
    super();
}"
org.compiere.model.DataStatusListener.DataStatusListener,DataStatusListener.java,"public DataStatusListener() {
    super();
}"
org.compiere.model.MAcctProcessorLog.MAcctProcessorLog,MAcctProcessorLog.java,"public MAcctProcessorLog() {
    super();
}"
org.compiere.model.MPaySelectionCheck.MPaySelectionCheck,MPaySelectionCheck.java,"public MPaySelectionCheck() {
    super();
}"
org.compiere.util.HtmlCode.HtmlCode,HtmlCode.java,"public HtmlCode() {
    super();
}"
org.compiere.sla.DeliveryAccuracy.DeliveryAccuracy,DeliveryAccuracy.java,"public DeliveryAccuracy() {
    super();
}"
org.compiere.model.MClick.MClick,MClick.java,"public MClick() {
    super();
}"
org.compiere.model.MReturnPolicy.MReturnPolicy,MReturnPolicy.java,"public MReturnPolicy() {
    super();
}"
org.compiere.impexp.ImpFormatRow.ImpFormatRow,ImpFormatRow.java,"public ImpFormatRow() {
    super();
}"
org.compiere.model.MNewsChannel.MNewsChannel,MNewsChannel.java,"public MNewsChannel() {
    super();
}"
org.compiere.report.core.ResultTable.ResultTable,ResultTable.java,"public ResultTable() {
    super();
}"
org.compiere.model.CalloutInventory.CalloutInventory,CalloutInventory.java,"public CalloutInventory() {
    super();
}"
org.compiere.model.MBPartnerProduct.MBPartnerProduct,MBPartnerProduct.java,"public MBPartnerProduct() {
    super();
}"
org.compiere.model.MBOM.MBOM,MBOM.java,"public MBOM() {
    super();
}"
org.compiere.cm.CacheHandler.CacheHandler,CacheHandler.java,"public CacheHandler() {
    super();
}"
org.compiere.model.MAlertRecipient.MAlertRecipient,MAlertRecipient.java,"public MAlertRecipient() {
    super();
}"
org.compiere.model.MProductCategory.MProductCategory,MProductCategory.java,"public MProductCategory() {
    super();
}"
org.compiere.model.MAllocationHdr.MAllocationHdr,MAllocationHdr.java,"public MAllocationHdr() {
    super();
}"
org.compiere.model.MInOutLineConfirm.MInOutLineConfirm,MInOutLineConfirm.java,"public MInOutLineConfirm() {
    super();
}"
org.compiere.model.MStatusCategory.MStatusCategory,MStatusCategory.java,"public MStatusCategory() {
    super();
}"
org.compiere.process.ViewCreate.ViewCreate,ViewCreate.java,"public ViewCreate() {
    super();
}"
org.compiere.model.MDunningLevel.MDunningLevel,MDunningLevel.java,"public MDunningLevel() {
    super();
}"
org.compiere.model.MProductionLine.MProductionLine,MProductionLine.java,"public MProductionLine() {
    super();
}"
org.compiere.model.MDiscountSchema.MDiscountSchema,MDiscountSchema.java,"public MDiscountSchema() {
    super();
}"
org.compiere.model.MLdapProcessor.MLdapProcessor,MLdapProcessor.java,"public MLdapProcessor() {
    super();
}"
org.compiere.model.MMediaServer.MMediaServer,MMediaServer.java,"public MMediaServer() {
    super();
}"
org.compiere.cm.CalloutTemplate.CalloutTemplate,CalloutTemplate.java,"public CalloutTemplate() {
    super();
}"
org.compiere.model.MLotCtl.MLotCtl,MLotCtl.java,"public MLotCtl() {
    super();
}"
org.compiere.model.NaturalAccountMap.NaturalAccountMap,NaturalAccountMap.java,"public NaturalAccountMap() {
    super();
}"
org.compiere.model.MResourceAssignment.MResourceAssignment,MResourceAssignment.java,"public MResourceAssignment() {
    super();
}"
org.compiere.model.MRfQResponseLine.MRfQResponseLine,MRfQResponseLine.java,"public MRfQResponseLine() {
    super();
}"
org.compiere.model.MSchedulerRecipient.MSchedulerRecipient,MSchedulerRecipient.java,"public MSchedulerRecipient() {
    super();
}"
org.compiere.model.CalloutProduct.CalloutProduct,CalloutProduct.java,"public CalloutProduct() {
    super();
}"
org.compiere.model.MSchedule.MSchedule,MSchedule.java,"public MSchedule() {
    super();
}"
org.compiere.report.core.RModel.RModel,RModel.java,"public RModel() {
    super();
}"
org.compiere.model.MDistributionList.MDistributionList,MDistributionList.java,"public MDistributionList() {
    super();
}"
org.compiere.model.MIndexStop.MIndexStop,MIndexStop.java,"public MIndexStop() {
    super();
}"
org.compiere.model.MCostUpdateLine.MCostUpdateLine,MCostUpdateLine.java,"public MCostUpdateLine() {
    super();
}"
org.compiere.model.MMatchInv.MMatchInv,MMatchInv.java,"public MMatchInv() {
    super();
}"
org.compiere.model.MSchedulerLog.MSchedulerLog,MSchedulerLog.java,"public MSchedulerLog() {
    super();
}"
org.compiere.model.MProduct.MProduct,MProduct.java,"public MProduct() {
    super();
}"
org.compiere.model.MRegistration.MRegistration,MRegistration.java,"public MRegistration() {
    super();
}"
org.compiere.process.RemoteMergeDataVO.RemoteMergeDataVO,RemoteMergeDataVO.java,"public RemoteMergeDataVO() {
    super();
}"
org.compiere.model.MProjectPhase.MProjectPhase,MProjectPhase.java,"public MProjectPhase() {
    super();
}"
org.compiere.impexp.MTImpFormat.MTImpFormat,MTImpFormat.java,"public MTImpFormat() {
    super();
}"
org.compiere.model.MColor.MColor,MColor.java,"public MColor() {
    super();
}"
org.compiere.model.MBPStatus.MBPStatus,MBPStatus.java,"public MBPStatus() {
    super();
}"
org.compiere.model.MProjectIssue.MProjectIssue,MProjectIssue.java,"public MProjectIssue() {
    super();
}"
org.compiere.report.MReportTree.MReportTree,MReportTree.java,"public MReportTree() {
    super();
}"
org.compiere.model.MBOMProduct.MBOMProduct,MBOMProduct.java,"public MBOMProduct() {
    super();
}"
org.compiere.model.MReturnPolicyLine.MReturnPolicyLine,MReturnPolicyLine.java,"public MReturnPolicyLine() {
    super();
}"
org.compiere.model.MCost.MCost,MCost.java,"public MCost() {
    super();
}"
org.compiere.report.core.RModelData.RModelData,RModelData.java,"public RModelData() {
    super();
}"
org.compiere.model.MCStage.MCStage,MCStage.java,"public MCStage() {
    super();
}"
org.compiere.model.MCashLine.MCashLine,MCashLine.java,"public MCashLine() {
    super();
}"
org.compiere.tools.FileUtil.FileUtil,FileUtil.java,"public FileUtil() {
    super();
}"
org.compiere.model.MAchievement.MAchievement,MAchievement.java,"public MAchievement() {
    super();
}"
org.compiere.model.MDistributionRun.MDistributionRun,MDistributionRun.java,"public MDistributionRun() {
    super();
}"
org.compiere.model.MJournal.MJournal,MJournal.java,"public MJournal() {
    super();
}"
org.compiere.model.ProductCost.ProductCost,ProductCost.java,"public ProductCost() {
    super();
}"
org.compiere.model.MPaymentAllocate.MPaymentAllocate,MPaymentAllocate.java,"public MPaymentAllocate() {
    super();
}"
org.compiere.model.MDistributionRunLine.MDistributionRunLine,MDistributionRunLine.java,"public MDistributionRunLine() {
    super();
}"
org.compiere.model.MRequisition.MRequisition,MRequisition.java,"public MRequisition() {
    super();
}"
org.compiere.model.MAcctProcessor.MAcctProcessor,MAcctProcessor.java,"public MAcctProcessor() {
    super();
}"
org.compiere.model.MActivity.MActivity,MActivity.java,"public MActivity() {
    super();
}"
org.compiere.model.MRequestUpdate.MRequestUpdate,MRequestUpdate.java,"public MRequestUpdate() {
    super();
}"
org.compiere.model.CompiereProcessor.CompiereProcessor,CompiereProcessor.java,"public CompiereProcessor() {
    super();
}"
org.compiere.model.MInvoiceSchedule.MInvoiceSchedule,MInvoiceSchedule.java,"public MInvoiceSchedule() {
    super();
}"
org.compiere.model.MRfQTopicSubscriber.MRfQTopicSubscriber,MRfQTopicSubscriber.java,"public MRfQTopicSubscriber() {
    super();
}"
org.compiere.model.MYear.MYear,MYear.java,"public MYear() {
    super();
}"
org.compiere.model.MStore.MStore,MStore.java,"public MStore() {
    super();
}"
org.compiere.model.MAlertProcessorLog.MAlertProcessorLog,MAlertProcessorLog.java,"public MAlertProcessorLog() {
    super();
}"
org.compiere.model.MImage.MImage,MImage.java,"public MImage() {
    super();
}"
org.compiere.model.MTaxPostal.MTaxPostal,MTaxPostal.java,"public MTaxPostal() {
    super();
}"
org.compiere.model.MAsset.MAsset,MAsset.java,"public MAsset() {
    super();
}"
org.compiere.model.MBPartnerInfo.MBPartnerInfo,MBPartnerInfo.java,"public MBPartnerInfo() {
    super();
}"
org.compiere.model.MInvoiceTax.MInvoiceTax,MInvoiceTax.java,"public MInvoiceTax() {
    super();
}"
org.compiere.model.MTaxDeclaration.MTaxDeclaration,MTaxDeclaration.java,"public MTaxDeclaration() {
    super();
}"
org.compiere.report.core.ResultTableCellRenderer.ResultTableCellRenderer,ResultTableCellRenderer.java,"public ResultTableCellRenderer() {
    super();
}"
org.compiere.model.MDunningRunEntry.MDunningRunEntry,MDunningRunEntry.java,"public MDunningRunEntry() {
    super();
}"
org.compiere.model.MFieldGroup.MFieldGroup,MFieldGroup.java,"public MFieldGroup() {
    super();
}"
org.compiere.model.MContainer.MContainer,MContainer.java,"public MContainer() {
    super();
}"
org.compiere.model.MInventoryLine.MInventoryLine,MInventoryLine.java,"public MInventoryLine() {
    super();
}"
org.compiere.model.MInvoiceBatchLine.MInvoiceBatchLine,MInvoiceBatchLine.java,"public MInvoiceBatchLine() {
    super();
}"
org.compiere.model.CalloutInvoiceBatch.CalloutInvoiceBatch,CalloutInvoiceBatch.java,"public CalloutInvoiceBatch() {
    super();
}"
org.compiere.model.MPOSKey.MPOSKey,MPOSKey.java,"public MPOSKey() {
    super();
}"
org.compiere.model.GridWindow.GridWindow,GridWindow.java,"public GridWindow() {
    super();
}"
org.compiere.model.MGoal.MGoal,MGoal.java,"public MGoal() {
    super();
}"
org.compiere.model.MCharge.MCharge,MCharge.java,"public MCharge() {
    super();
}"
org.compiere.process.TranslationMgr.TranslationMgr,TranslationMgr.java,"public TranslationMgr() {
    super();
}"
org.compiere.model.MSchedulerPara.MSchedulerPara,MSchedulerPara.java,"public MSchedulerPara() {
    super();
}"
org.compiere.model.MDiscountSchemaLine.MDiscountSchemaLine,MDiscountSchemaLine.java,"public MDiscountSchemaLine() {
    super();
}"
org.compiere.model.CalloutProject.CalloutProject,CalloutProject.java,"public CalloutProject() {
    super();
}"
org.compiere.model.MCommission.MCommission,MCommission.java,"public MCommission() {
    super();
}"
org.compiere.model.MCostDetail.MCostDetail,MCostDetail.java,"public MCostDetail() {
    super();
}"
org.compiere.model.MCampaign.MCampaign,MCampaign.java,"public MCampaign() {
    super();
}"
org.compiere.model.MMovementLineMA.MMovementLineMA,MMovementLineMA.java,"public MMovementLineMA() {
    super();
}"
org.compiere.model.MDistributionListLine.MDistributionListLine,MDistributionListLine.java,"public MDistributionListLine() {
    super();
}"
org.compiere.model.MDunning.MDunning,MDunning.java,"public MDunning() {
    super();
}"
org.compiere.model.MBPRelation.MBPRelation,MBPRelation.java,"public MBPRelation() {
    super();
}"
org.compiere.wf.MDocAction.MDocAction,MDocAction.java,"public MDocAction() {
    super();
}"
org.compiere.model.MPaymentTerm.MPaymentTerm,MPaymentTerm.java,"public MPaymentTerm() {
    super();
}"
org.compiere.model.MAlertRule.MAlertRule,MAlertRule.java,"public MAlertRule() {
    super();
}"
org.compiere.model.MTaxCategory.MTaxCategory,MTaxCategory.java,"public MTaxCategory() {
    super();
}"
org.compiere.model.MAttributeInstance.MAttributeInstance,MAttributeInstance.java,"public MAttributeInstance() {
    super();
}"
org.compiere.model.MBPartner.MBPartner,MBPartner.java,"public MBPartner() {
    super();
}"
org.compiere.report.FinReportPeriod.FinReportPeriod,FinReportPeriod.java,"public FinReportPeriod() {
    super();
}"
org.compiere.model.MDocTypeCounter.MDocTypeCounter,MDocTypeCounter.java,"public MDocTypeCounter() {
    super();
}"
org.compiere.model.MPaymentBatch.MPaymentBatch,MPaymentBatch.java,"public MPaymentBatch() {
    super();
}"
org.compiere.model.MProductBOM.MProductBOM,MProductBOM.java,"public MProductBOM() {
    super();
}"
org.compiere.model.MAccessProfile.MAccessProfile,MAccessProfile.java,"public MAccessProfile() {
    super();
}"
org.compiere.report.core.RColumn.RColumn,RColumn.java,"public RColumn() {
    super();
}"
org.compiere.model.MInvoicePaySchedule.MInvoicePaySchedule,MInvoicePaySchedule.java,"public MInvoicePaySchedule() {
    super();
}"
org.compiere.model.MContainerElement.MContainerElement,MContainerElement.java,"public MContainerElement() {
    super();
}"
org.compiere.model.MColorSchema.MColorSchema,MColorSchema.java,"public MColorSchema() {
    super();
}"
org.compiere.model.MAttribute.MAttribute,MAttribute.java,"public MAttribute() {
    super();
}"
org.compiere.model.MFactAccumulation.MFactAccumulation,MFactAccumulation.java,"public MFactAccumulation() {
    super();
}"
org.compiere.model.MAdvertisement.MAdvertisement,MAdvertisement.java,"public MAdvertisement() {
    super();
}"
org.compiere.wf.MWFNodePara.MWFNodePara,MWFNodePara.java,"public MWFNodePara() {
    super();
}"
org.compiere.tools.VolumeTest.VolumeTest,VolumeTest.java,"public VolumeTest() {
    super();
}"
org.compiere.model.MRfQLine.MRfQLine,MRfQLine.java,"public MRfQLine() {
    super();
}"
org.compiere.impexp.MImpFormatRow.MImpFormatRow,MImpFormatRow.java,"public MImpFormatRow() {
    super();
}"
org.compiere.model.MLoginMsg.MLoginMsg,MLoginMsg.java,"public MLoginMsg() {
    super();
}"
org.compiere.model.MInfoColumn.MInfoColumn,MInfoColumn.java,"public MInfoColumn() {
    super();
}"
org.compiere.util.ASyncWorker.ASyncWorker,ASyncWorker.java,"public ASyncWorker() {
    super();
}"
org.compiere.model.MLdapProcessorLog.MLdapProcessorLog,MLdapProcessorLog.java,"public MLdapProcessorLog() {
    super();
}"
org.compiere.model.MMovementLine.MMovementLine,MMovementLine.java,"public MMovementLine() {
    super();
}"
org.compiere.model.MInvoiceBatch.MInvoiceBatch,MInvoiceBatch.java,"public MInvoiceBatch() {
    super();
}"
org.compiere.model.MDistribution.MDistribution,MDistribution.java,"public MDistribution() {
    super();
}"
org.compiere.model.MGoalRestriction.MGoalRestriction,MGoalRestriction.java,"public MGoalRestriction() {
    super();
}"
org.compiere.wf.MWorkflowAccess.MWorkflowAccess,MWorkflowAccess.java,"public MWorkflowAccess() {
    super();
}"
org.compiere.model.MCtxArea.MCtxArea,MCtxArea.java,"public MCtxArea() {
    super();
}"
org.compiere.tools.RMIUtil.RMIUtil,RMIUtil.java,"public RMIUtil() {
    super();
}"
org.compiere.model.MProductPO.MProductPO,MProductPO.java,"public MProductPO() {
    super();
}"
org.compiere.model.MClickCount.MClickCount,MClickCount.java,"public MClickCount() {
    super();
}"
org.compiere.model.MProductPricing.MProductPricing,MProductPricing.java,"public MProductPricing() {
    super();
}"
org.compiere.model.MGroup.MGroup,MGroup.java,"public MGroup() {
    super();
}"
org.compiere.model.CalloutPayment.CalloutPayment,CalloutPayment.java,"public CalloutPayment() {
    super();
}"
org.compiere.model.PaymentProcessor.PaymentProcessor,PaymentProcessor.java,"public PaymentProcessor() {
    super();
}"
org.compiere.model.MChat.MChat,MChat.java,"public MChat() {
    super();
}"
org.compiere.model.DataStatusEvent.DataStatusEvent,DataStatusEvent.java,"public DataStatusEvent() {
    super();
}"
org.compiere.model.MLoginMsgLog.MLoginMsgLog,MLoginMsgLog.java,"public MLoginMsgLog() {
    super();
}"
org.compiere.model.MSource.MSource,MSource.java,"public MSource() {
    super();
}"
org.compiere.util.FileUpload.FileUpload,FileUpload.java,"public FileUpload() {
    super();
}"
org.compiere.esb.GWTServerContext.GWTServerContext,GWTServerContext.java,"public GWTServerContext() {
    super();
}"
org.compiere.model.MProjectType.MProjectType,MProjectType.java,"public MProjectType() {
    super();
}"
org.compiere.model.MProductCategoryAcct.MProductCategoryAcct,MProductCategoryAcct.java,"public MProductCategoryAcct() {
    super();
}"
org.compiere.model.MProjectLine.MProjectLine,MProjectLine.java,"public MProjectLine() {
    super();
}"
org.compiere.model.MRfQLineQty.MRfQLineQty,MRfQLineQty.java,"public MRfQLineQty() {
    super();
}"
org.compiere.model.MShipper.MShipper,MShipper.java,"public MShipper() {
    super();
}"
org.compiere.model.MProjectTask.MProjectTask,MProjectTask.java,"public MProjectTask() {
    super();
}"
org.compiere.util.Task.Task,Task.java,"public Task() {
    super();
}"
org.compiere.model.MReplicationLog.MReplicationLog,MReplicationLog.java,"public MReplicationLog() {
    super();
}"
org.compiere.model.MTimeExpense.MTimeExpense,MTimeExpense.java,"public MTimeExpense() {
    super();
}"
org.compiere.model.MLot.MLot,MLot.java,"public MLot() {
    super();
}"
org.compiere.model.MRequestProcessor.MRequestProcessor,MRequestProcessor.java,"public MRequestProcessor() {
    super();
}"
org.compiere.model.MDunningRun.MDunningRun,MDunningRun.java,"public MDunningRun() {
    super();
}"
org.compiere.model.MMailMsg.MMailMsg,MMailMsg.java,"public MMailMsg() {
    super();
}"
org.compiere.model.MBankStatementLine.MBankStatementLine,MBankStatementLine.java,"public MBankStatementLine() {
    super();
}"
org.compiere.model.MProductPrice.MProductPrice,MProductPrice.java,"public MProductPrice() {
    super();
}"
org.compiere.model.MIndexColumn.MIndexColumn,MIndexColumn.java,"public MIndexColumn() {
    super();
}"
org.compiere.process.TranslationHandler.TranslationHandler,TranslationHandler.java,"public TranslationHandler() {
    super();
}"
org.compiere.model.MGLCategory.MGLCategory,MGLCategory.java,"public MGLCategory() {
    super();
}"
org.compiere.wf.MWorkflow.MWorkflow,MWorkflow.java,"public MWorkflow() {
    super();
}"
org.compiere.model.MMovementLineConfirm.MMovementLineConfirm,MMovementLineConfirm.java,"public MMovementLineConfirm() {
    super();
}"
org.compiere.process.RemoteUpdateVO.RemoteUpdateVO,RemoteUpdateVO.java,"public RemoteUpdateVO() {
    super();
}"
org.compiere.model.MMailText.MMailText,MMailText.java,"public MMailText() {
    super();
}"
org.compiere.impexp.OFX1ToXML.OFX1ToXML,OFX1ToXML.java,"public OFX1ToXML() {
    super();
}"
org.compiere.model.MProductLocator.MProductLocator,MProductLocator.java,"public MProductLocator() {
    super();
}"
org.compiere.process.LoadBankStatement.LoadBankStatement,LoadBankStatement.java,"public LoadBankStatement() {
    super();
}"
org.compiere.model.MNewsItem.MNewsItem,MNewsItem.java,"public MNewsItem() {
    super();
}"
org.compiere.model.MCommissionAmt.MCommissionAmt,MCommissionAmt.java,"public MCommissionAmt() {
    super();
}"
org.compiere.report.MReportLineSet.MReportLineSet,MReportLineSet.java,"public MReportLineSet() {
    super();
}"
org.compiere.impexp.OFXFileBankStatementLoader.OFXFileBankStatementLoader,OFXFileBankStatementLoader.java,"public OFXFileBankStatementLoader() {
    super();
}"
org.compiere.model.MTaxDeclarationLine.MTaxDeclarationLine,MTaxDeclarationLine.java,"public MTaxDeclarationLine() {
    super();
}"
org.compiere.model.MPackageLine.MPackageLine,MPackageLine.java,"public MPackageLine() {
    super();
}"
org.compiere.model.MMediaDeploy.MMediaDeploy,MMediaDeploy.java,"public MMediaDeploy() {
    super();
}"
org.compiere.model.Callout.Callout,Callout.java,"public Callout() {
    super();
}"
org.compiere.model.MTask.MTask,MTask.java,"public MTask() {
    super();
}"
org.compiere.model.MUOMConversion.MUOMConversion,MUOMConversion.java,"public MUOMConversion() {
    super();
}"
org.compiere.model.MCostUpdate.MCostUpdate,MCostUpdate.java,"public MCostUpdate() {
    super();
}"
org.compiere.model.MProjectTypeTask.MProjectTypeTask,MProjectTypeTask.java,"public MProjectTypeTask() {
    super();
}"
org.compiere.model.MWarehousePrice.MWarehousePrice,MWarehousePrice.java,"public MWarehousePrice() {
    super();
}"
org.compiere.model.MAging.MAging,MAging.java,"public MAging() {
    super();
}"
org.compiere.model.MRequestProcessorLog.MRequestProcessorLog,MRequestProcessorLog.java,"public MRequestProcessorLog() {
    super();
}"
org.compiere.model.MBPartnerLocation.MBPartnerLocation,MBPartnerLocation.java,"public MBPartnerLocation() {
    super();
}"
org.compiere.model.MPOSKeyLayout.MPOSKeyLayout,MPOSKeyLayout.java,"public MPOSKeyLayout() {
    super();
}"
org.compiere.model.MProject.MProject,MProject.java,"public MProject() {
    super();
}"
org.compiere.model.MInterestArea.MInterestArea,MInterestArea.java,"public MInterestArea() {
    super();
}"
org.compiere.model.MRequest.MRequest,MRequest.java,"public MRequest() {
    super();
}"
org.compiere.model.MInOut.MInOut,MInOut.java,"public MInOut() {
    super();
}"
org.compiere.model.MComponentRegUpdate.MComponentRegUpdate,MComponentRegUpdate.java,"public MComponentRegUpdate() {
    super();
}"
org.compiere.model.MBank.MBank,MBank.java,"public MBank() {
    super();
}"
org.compiere.model.MProjectTypePhase.MProjectTypePhase,MProjectTypePhase.java,"public MProjectTypePhase() {
    super();
}"
org.compiere.wf.MDocActionRule.MDocActionRule,MDocActionRule.java,"public MDocActionRule() {
    super();
}"
org.compiere.model.MInOutLine.MInOutLine,MInOutLine.java,"public MInOutLine() {
    super();
}"
org.compiere.model.MCStageElement.MCStageElement,MCStageElement.java,"public MCStageElement() {
    super();
}"
org.compiere.model.MResourceType.MResourceType,MResourceType.java,"public MResourceType() {
    super();
}"
org.compiere.model.MInventoryLineMA.MInventoryLineMA,MInventoryLineMA.java,"public MInventoryLineMA() {
    super();
}"
org.compiere.impexp.BankStatementMatchInfo.BankStatementMatchInfo,BankStatementMatchInfo.java,"public BankStatementMatchInfo() {
    super();
}"
org.compiere.model.MAlertProcessor.MAlertProcessor,MAlertProcessor.java,"public MAlertProcessor() {
    super();
}"
org.compiere.model.MWikiToken.MWikiToken,MWikiToken.java,"public MWikiToken() {
    super();
}"
org.compiere.model.MCommissionLine.MCommissionLine,MCommissionLine.java,"public MCommissionLine() {
    super();
}"
org.compiere.model.CalloutGLJournal.CalloutGLJournal,CalloutGLJournal.java,"public CalloutGLJournal() {
    super();
}"
org.compiere.model.MPriceList.MPriceList,MPriceList.java,"public MPriceList() {
    super();
}"
org.compiere.report.core.ResultTableCellEditor.ResultTableCellEditor,ResultTableCellEditor.java,"public ResultTableCellEditor() {
    super();
}"
org.compiere.model.MBPGroup.MBPGroup,MBPGroup.java,"public MBPGroup() {
    super();
}"
org.compiere.model.MHierarchy.MHierarchy,MHierarchy.java,"public MHierarchy() {
    super();
}"
org.compiere.util.WebLogin.WebLogin,WebLogin.java,"public WebLogin() {
    super();
}"
org.compiere.model.MOrderTax.MOrderTax,MOrderTax.java,"public MOrderTax() {
    super();
}"
org.compiere.model.MTax.MTax,MTax.java,"public MTax() {
    super();
}"
org.compiere.model.CompiereProcessorLog.CompiereProcessorLog,CompiereProcessorLog.java,"public CompiereProcessorLog() {
    super();
}"
org.compiere.wf.MWFResponsible.MWFResponsible,MWFResponsible.java,"public MWFResponsible() {
    super();
}"
org.compiere.model.MProductDownload.MProductDownload,MProductDownload.java,"public MProductDownload() {
    super();
}"
org.compiere.model.CalloutCashJournal.CalloutCashJournal,CalloutCashJournal.java,"public CalloutCashJournal() {
    super();
}"
org.compiere.model.MPaySchedule.MPaySchedule,MPaySchedule.java,"public MPaySchedule() {
    super();
}"
org.compiere.model.MComponentUse.MComponentUse,MComponentUse.java,"public MComponentUse() {
    super();
}"
org.compiere.model.MTemplate.MTemplate,MTemplate.java,"public MTemplate() {
    super();
}"
org.compiere.model.MComponentCreate.MComponentCreate,MComponentCreate.java,"public MComponentCreate() {
    super();
}"
org.compiere.model.MRecurringRun.MRecurringRun,MRecurringRun.java,"public MRecurringRun() {
    super();
}"
org.compiere.model.Scriptlet.Scriptlet,Scriptlet.java,"public Scriptlet() {
    super();
}"
org.compiere.model.CalloutRequest.CalloutRequest,CalloutRequest.java,"public CalloutRequest() {
    super();
}"
org.compiere.model.MRequestType.MRequestType,MRequestType.java,"public MRequestType() {
    super();
}"
org.compiere.wf.MWFActivity.MWFActivity,MWFActivity.java,"public MWFActivity() {
    super();
}"
org.compiere.model.MStatus.MStatus,MStatus.java,"public MStatus() {
    super();
}"
org.compiere.wf.MWFEventAudit.MWFEventAudit,MWFEventAudit.java,"public MWFEventAudit() {
    super();
}"
org.compiere.model.MRfQTopic.MRfQTopic,MRfQTopic.java,"public MRfQTopic() {
    super();
}"
org.compiere.util.FastByteArrayInputStream.FastByteArrayInputStream,FastByteArrayInputStream.java,"public FastByteArrayInputStream() {
    super();
}"
org.compiere.impexp.ImpFormat.ImpFormat,ImpFormat.java,"public ImpFormat() {
    super();
}"
org.compiere.model.MPeriodControl.MPeriodControl,MPeriodControl.java,"public MPeriodControl() {
    super();
}"
org.compiere.impexp.MImpFormat.MImpFormat,MImpFormat.java,"public MImpFormat() {
    super();
}"
org.compiere.model.MSLAMeasure.MSLAMeasure,MSLAMeasure.java,"public MSLAMeasure() {
    super();
}"
org.compiere.model.CalloutMovement.CalloutMovement,CalloutMovement.java,"public CalloutMovement() {
    super();
}"
org.compiere.model.MPeriod.MPeriod,MPeriod.java,"public MPeriod() {
    super();
}"
org.compiere.model.MInvoice.MInvoice,MInvoice.java,"public MInvoice() {
    super();
}"
org.compiere.esb.GwtServer.GwtServer,GwtServer.java,"public GwtServer() {
    super();
}"
org.compiere.model.MLdapAccess.MLdapAccess,MLdapAccess.java,"public MLdapAccess() {
    super();
}"
org.compiere.model.MChangeNotice.MChangeNotice,MChangeNotice.java,"public MChangeNotice() {
    super();
}"
org.compiere.model.PP_PayFlowPro.PP_PayFlowPro,PP_PayFlowPro.java,"public PP_PayFlowPro() {
    super();
}"
org.compiere.model.MDistributionLine.MDistributionLine,MDistributionLine.java,"public MDistributionLine() {
    super();
}"
org.compiere.model.MAssetGroup.MAssetGroup,MAssetGroup.java,"public MAssetGroup() {
    super();
}"
org.compiere.model.MAssetDelivery.MAssetDelivery,MAssetDelivery.java,"public MAssetDelivery() {
    super();
}"
org.compiere.model.MStandardResponse.MStandardResponse,MStandardResponse.java,"public MStandardResponse() {
    super();
}"
org.compiere.model.MCommissionDetail.MCommissionDetail,MCommissionDetail.java,"public MCommissionDetail() {
    super();
}"
org.compiere.model.MRegistrationValue.MRegistrationValue,MRegistrationValue.java,"public MRegistrationValue() {
    super();
}"
org.compiere.model.MWithholding.MWithholding,MWithholding.java,"public MWithholding() {
    super();
}"
org.compiere.MigrateData.MigrateData,MigrateData.java,"public MigrateData() {
    super();
}"
org.compiere.model.MBOMAlternative.MBOMAlternative,MBOMAlternative.java,"public MBOMAlternative() {
    super();
}"
org.compiere.model.MRfQTopicSubscriberOnly.MRfQTopicSubscriberOnly,MRfQTopicSubscriberOnly.java,"public MRfQTopicSubscriberOnly() {
    super();
}"
org.compiere.model.MAttributeSetInstance.MAttributeSetInstance,MAttributeSetInstance.java,"public MAttributeSetInstance() {
    super();
}"
org.compiere.model.MLandedCost.MLandedCost,MLandedCost.java,"public MLandedCost() {
    super();
}"
org.compiere.model.MDataMigrationEntry.MDataMigrationEntry,MDataMigrationEntry.java,"public MDataMigrationEntry() {
    super();
}"
org.compiere.model.MCashBook.MCashBook,MCashBook.java,"public MCashBook() {
    super();
}"
org.compiere.model.MWebProjectDomain.MWebProjectDomain,MWebProjectDomain.java,"public MWebProjectDomain() {
    super();
}"
org.compiere.util.FastByteArrayOutputStream.FastByteArrayOutputStream,FastByteArrayOutputStream.java,"public FastByteArrayOutputStream() {
    super();
}"
org.compiere.model.MForm.MForm,MForm.java,"public MForm() {
    super();
}"
org.compiere.model.MInOutLineMA.MInOutLineMA,MInOutLineMA.java,"public MInOutLineMA() {
    super();
}"
org.compiere.model.MInventory.MInventory,MInventory.java,"public MInventory() {
    super();
}"
org.compiere.model.MBankStatementLoader.MBankStatementLoader,MBankStatementLoader.java,"public MBankStatementLoader() {
    super();
}"
org.compiere.model.MAttributeValue.MAttributeValue,MAttributeValue.java,"public MAttributeValue() {
    super();
}"
org.compiere.model.MRfQ.MRfQ,MRfQ.java,"public MRfQ() {
    super();
}"
org.compiere.model.MBankStatement.MBankStatement,MBankStatement.java,"public MBankStatement() {
    super();
}"
org.compiere.util.WebInfo.WebInfo,WebInfo.java,"public WebInfo() {
    super();
}"
org.compiere.model.CalloutInvoice.CalloutInvoice,CalloutInvoice.java,"public CalloutInvoice() {
    super();
}"
org.compiere.sla.SLACriteria.SLACriteria,SLACriteria.java,"public SLACriteria() {
    super();
}"
org.compiere.model.MRegistrationAttribute.MRegistrationAttribute,MRegistrationAttribute.java,"public MRegistrationAttribute() {
    super();
}"
org.compiere.model.MMeasureCalc.MMeasureCalc,MMeasureCalc.java,"public MMeasureCalc() {
    super();
}"
org.compiere.model.MInfoWindow.MInfoWindow,MInfoWindow.java,"public MInfoWindow() {
    super();
}"
org.compiere.model.MInvoiceLine.MInvoiceLine,MInvoiceLine.java,"public MInvoiceLine() {
    super();
}"
org.compiere.model.MResolution.MResolution,MResolution.java,"public MResolution() {
    super();
}"
org.compiere.model.CalloutBankStatement.CalloutBankStatement,CalloutBankStatement.java,"public CalloutBankStatement() {
    super();
}"
org.compiere.process.RemoteSetupVO.RemoteSetupVO,RemoteSetupVO.java,"public RemoteSetupVO() {
    super();
}"
org.compiere.model.MUOM.MUOM,MUOM.java,"public MUOM() {
    super();
}"
org.compiere.model.MContactInterest.MContactInterest,MContactInterest.java,"public MContactInterest() {
    super();
}"
org.compiere.wf.DocWorkflowManager.DocWorkflowManager,DocWorkflowManager.java,"public DocWorkflowManager() {
    super();
}"
org.compiere.model.MAd.MAd,MAd.java,"public MAd() {
    super();
}"
org.compiere.model.MUserMail.MUserMail,MUserMail.java,"public MUserMail() {
    super();
}"
org.compiere.model.MLead.MLead,MLead.java,"public MLead() {
    super();
}"
org.compiere.model.MBPBankAccount.MBPBankAccount,MBPBankAccount.java,"public MBPBankAccount() {
    super();
}"
org.compiere.wf.MWFNode.MWFNode,MWFNode.java,"public MWFNode() {
    super();
}"
org.compiere.model.GridTable.GridTable,GridTable.java,"public GridTable() {
    super();
}"
org.compiere.model.MStorage.MStorage,MStorage.java,"public MStorage() {
    super();
}"
org.compiere.model.GridTab.GridTab,GridTab.java,"public GridTab() {
    super();
}"
org.compiere.model.MMovement.MMovement,MMovement.java,"public MMovement() {
    super();
}"
org.compiere.model.MChatType.MChatType,MChatType.java,"public MChatType() {
    super();
}"
